13:21:47 <Taliesin> in my fumbling attempts to teach myself haskell, i've kludged Complex.hs to 'UncertainFloat.hs', which represents both a value, and the uncertainty in that value, and propogates it along as you perform calculations. since i'm not entirely sure what i'm doing, i was hoping someone could look at it, and maybe point out where i've been inelegant. its at: http://miranda.org/~jkominek/UncertainFloat.hs
13:24:21 <Igloo> Looks reasonable to me
13:29:41 <Taliesin> oh good
14:49:51 * shapr bounces
14:49:58 <shapr> hi Taliesin, what's up?
14:50:30 <Igloo> Yo shapr
14:50:38 <shapr> hey Igloo, how's the ice treating you?
14:50:50 <Igloo> Pretty good  :-)
14:51:01 <Taliesin> heh. i realized that haskell might be appropriate for something i'd been considering working on, so now i'm trying to get some foundational whatnot written in it. (as a self teaching exercise)
14:51:06 <Taliesin> s/heh/shapr: heh/
14:51:20 <shapr> Taliesin: nifty, got any questions I can help you with?
14:51:46 <Heffalump> that code looks pretty nicely done
14:51:49 <Taliesin> i have questions, but at the moment i'm trying to get them worked out by reading the materials online
14:52:00 <shapr> Taliesin: ok, feel free to ask question.
14:52:03 <shapr> Heffalump: what code?
14:52:05 <Taliesin> thanks
14:52:26 <Heffalump> Taliesin's
14:52:30 <shapr> I wanna see the code too!
14:52:46 <Heffalump> http://miranda.org/~jkominek/UncertainFloat.hs
14:52:56 <Taliesin> heavens. i don't know that i'd call it nicely done. it likely speaks far more to my ability to avoid breaking other people's code
14:53:45 <shapr> cool stuff
14:54:35 <shapr> I've never heard of uncertain floats as an entity in their own right, but I've certainly produced my own.
14:54:37 <Taliesin> actually, i would like to know how i trick hugs into loading two modules at the same time. (for instance, my UncertainFloat and Complex)
14:54:43 <Heffalump> :a
14:54:45 <Heffalump> (for also)
14:54:57 <Heffalump> or just write another module that imports both
14:56:11 <Taliesin> shapr: its for a big pile of mathematical code which will need to handle the uncertainties for every value in the system
14:56:19 <shapr> sounds spiffy
15:30:20 * shapr writes unit tests
16:52:19 <Fractal> Is there a gentler introduction?
16:54:16 <Igloo> :-)
16:54:21 <Igloo> What's troubling you?
16:58:43 <Fractal> Well, I know nothing about functional languages, but I'd like to get into it... Up until now I've been almost completely C and forth...
16:59:02 <Fractal> And the typing is very strange to me...
16:59:54 <clausen> the typing rulz!
17:00:03 <clausen> so, cut&paste an example...
17:00:06 <clausen> (that you don't grok)
17:00:40 <Fractal> Erm, ok... One sec.
17:01:43 <Fractal> length     :: [a] -> Integer
17:02:01 <Fractal> So, [a] is the input, and Integer is the output?
17:02:22 <clausen> yes
17:02:31 <clausen> a is "anything"
17:02:35 <clausen> think of it as an unbound variable
17:02:39 <clausen> but, it represents a type
17:02:53 <clausen> you can do things like:
17:02:56 <clausen> head :: [a] -> a
17:02:56 <Fractal> Ok... a list of any homogenous type, then?
17:03:03 <clausen> yes
17:03:06 <Fractal> Ok.
17:03:16 <clausen> [a] means "list of a's"
17:03:23 <Fractal> Right...
17:03:39 <clausen> if you wanted head to return something that's possibly a different type
17:03:40 <clausen> then you'd do:
17:03:44 <clausen> head :: [a] -> b
17:03:57 <Fractal> So... The type declarations are sort of like prototypes? It says what you should pass it and what it'll return?
17:04:03 <clausen> yes
17:04:13 <clausen> they are called "type signatures", but prototypes is an equally good name, IMHO
17:04:30 <Fractal> Gotcha. Ok, how come some look like this:  blah :: something -> something -> something    ?
17:04:34 <Fractal> clausen : Cool. :)
17:04:47 <clausen> that's a bit more subtle
17:04:54 <clausen> there is two ways of thinking of it:
17:05:00 <Igloo> foo :: a -> b -> c is the same as foo :: a -> (b -> c)
17:05:03 <clausen> first, the Wrong way
17:05:13 <Igloo> i.e. if you give it an a it'll give you a function that takes a b and gives you a c
17:05:17 <clausen> foo is a function that takes two arguments
17:05:19 <clausen> "a and b"
17:05:21 <clausen> and returns a c
17:05:29 <clausen> (of types a and b, I should say)
17:05:51 <clausen> the Right way is:
17:05:52 <Fractal> Ok, that I can understand...
17:05:56 <clausen> foo is a function
17:05:58 <clausen> that takes an a
17:05:58 <Fractal> Damn.. :(
17:06:01 <clausen> and returns a function
17:06:03 <clausen> that takes a b
17:06:06 <clausen> and returns a c
17:06:25 <Fractal> How can it return a function?
17:06:33 <clausen> eg:
17:06:47 * clausen looks for a good example
17:06:51 <Igloo> That's half the point of functional programming
17:07:04 <Fractal> Ok, good, we're getting to the meat of it. :)
17:07:17 <Igloo> You can pass around functions in C too, it just gets quite ugly
17:07:41 <Fractal> Right, function pointers...
17:07:54 <Igloo> mult n x = n * x is probably a reasonable example
17:08:03 <Igloo> mult :: Int -> Int -> Int
17:08:19 <clausen> elem :: a -> [a] -> Bool
17:08:22 <Igloo> So mult 5 is the function that multiplies an Int you give it by 5 and returns the answer
17:09:00 <clausen> elem checks if an element exists in a list
17:09:38 <clausen> so, you could do:
17:09:39 <Fractal> Igloo : Ok, so the function it returns would be to multiply? How is this a different way of looking at it?
17:09:47 <clausen> elem5 = elem '5'
17:09:56 <Igloo> I don't follow you
17:10:13 <Fractal> Like, there's only one function, no?
17:10:13 <clausen> elem5 :: [Char] -> Int
17:10:15 <clausen> oops
17:10:18 <clausen> -> Bool
17:10:31 <clausen> Fractal: yeah, it's magic!
17:10:36 <Igloo> The point is that "mult 5" is valid in Haskell, whereas you couldn't do that in C if you had int mult (int, int)
17:10:37 <clausen> so, elem could be implemented like this:
17:10:37 <Fractal> Heh. Ok...
17:10:56 <clausen> elem x [] = False
17:11:18 <clausen> elem x (y:ys) = (x == y) || (elem x ys)
17:11:27 <Fractal> Igloo : Oh!
17:11:29 <clausen> so, if you only "pass" x
17:11:42 <clausen> then, it will evaluate what it can
17:11:55 <clausen> so, it will "return" a function looking like:
17:12:06 <clausen> i.e.: elem '5' 
17:12:15 <clausen> elem5 [] = False
17:12:19 <Fractal> Ok... That's the "laziness" then?
17:12:28 <clausen> elem5 (y:ys) = ('5' == y) || (elem5 ys)
17:12:36 <clausen> Fractal: yes, partly
17:12:50 <clausen> laziness is a property that nothing is evaluated unless it'
17:12:50 <Igloo> No, this is partial application or curried functions
17:12:52 <clausen> s needed
17:13:07 <clausen> but, laziness is important for partial application
17:13:14 <clausen> (unless I'm missing something...)
17:13:22 <Heffalump> no, it's not
17:13:23 <Igloo> I don't see why that's true
17:13:28 <Heffalump> ML has partial application and its not lazy
17:13:32 <Fractal> Ok... Have any of your done any forth before?
17:13:32 <clausen> ah, cool
17:13:44 * clausen never grokked forth
17:14:00 * Igloo hasn't
17:14:07 <Fractal> Hmmm.. I'm just wondering if it's stack based...
17:14:14 <clausen> forth is, yes
17:14:28 <Fractal> Er, I mean this function returning in haskell?
17:14:49 <clausen> that's "implementation dependent"
17:14:55 * clausen never looked at compiled haskell code
17:15:31 <Igloo> This would all be done on a heap in a Haskell implementation I think
17:16:19 <clausen> what's the heap invariant?
17:16:27 <Fractal> Ok, but say function1 needs 2 args, can I do something like this: function1 arg1 function2
17:16:29 <clausen> (do you mean heap as in tree?)
17:16:32 <Igloo> Not that sort of a heap
17:16:40 <Fractal> And what function2 returns function1 takes as it's second arg?
17:16:57 <Igloo> I think heap in this sense just means big chunk of memory
17:17:04 <Igloo> (growable)
17:17:05 <clausen> Fractal: what you're saying is a bit confusing
17:17:10 <clausen> Fractal: can you try formalizing?
17:17:13 <clausen> (or just try doing it!)
17:17:37 <Igloo> Yes, if I understand correctly, Fractal
17:18:38 <Fractal> clausen : Unfortunatley, I'm not even at the level where I understand the syntax enough to make a program that'll compile...
17:18:47 <Fractal> Igloo : Ok, that makes sense then...
17:18:54 <clausen> Fractal: use hugs!
17:19:09 <clausen> Fractal: you can use hugs to find out the types of things, etc.
17:19:10 <clausen> eg:
17:19:10 <Fractal> hugs? Ok... I've got GHC...
17:19:17 <clausen> Fractal: hugs is an interpreter
17:19:26 <clausen> :t length
17:19:35 <Fractal> Oh... I didn't realize haskell could be interpreted...
17:19:35 <clausen> gives you the type of "length"
17:19:46 <Fractal> Ok...
17:19:54 <clausen> any language that can be compiled to a turing machine can be interpreted
17:19:58 <clausen> (by the universal turing machine!)
17:21:12 <Fractal> Hmm... well I won't try to dispute that, but what if you try to use a function that you don't define until later?
17:21:45 <clausen> you have to feed it the whole file
17:21:56 <clausen> it doesn't execute as it parses
17:22:25 <Fractal> Oh...... Gotcha.
17:25:09 <Fractal> Ok... In the gentle intro, it says: fringe  :: Tree a -> [a]     How can a type be "tree a"? Or does it mean something else?
17:25:33 <Heffalump> Tree is a type constructor
17:25:37 <clausen> "Tree a" means "a tree of a's"
17:25:38 <Fractal> (It also says Data tree a)
17:25:42 <clausen> (kind of like "a list of a's")
17:25:52 <clausen> ([a] is just special notation...
17:25:54 <Heffalump> it takes a type, "a" and gives another type, "tree of as"
17:25:59 <Fractal> Ok...
17:26:02 <clausen> you would normally implement as "List a")
17:26:13 <clausen> (if lists weren't "built in")
17:26:43 <Fractal> Ok... So data is like struct, kinda?
17:26:53 <Fractal> It's for making data structures?
17:27:29 <clausen> yep
17:27:37 <clausen> it's a bit generalized though
17:27:47 <clausen> it's like, enum, struct and union all rolled into one
17:27:54 <Fractal> Ok...
17:28:06 <Heffalump> not exactly union, though
17:28:33 <clausen> data Tree a = Leaf | Branch a (Tree a) (Tree a)
17:28:35 <clausen> it's sort of like:
17:28:38 <clausen> struct {
17:28:41 <Fractal> So, can you summarize what this means? : data Point a = Point a a
17:28:50 <clausen>     enum {Leaf, Branch} type;
17:28:52 <Fractal> A good. Continue. :)
17:28:59 <clausen>      union {
17:29:06 <clausen>      void empty;  /* for Leaf */
17:29:11 <clausen>       struct {
17:29:18 <clausen>          a value;
17:29:31 <clausen>           struct Tree(a) left;
17:29:34 <clausen>           struct Tree(a) right;
17:29:40 <clausen>       }
17:29:45 <clausen>      }
17:29:46 <clausen> }
17:29:49 <clausen> sort of
17:29:50 <clausen> hehe
17:29:53 <Fractal> Yike! :)
17:30:29 <clausen> (obviously, not valid C, but you get the idea...)
17:30:41 <Heffalump> struct point(a) { a x1; a x2; };
17:30:46 <Fractal> Yikes, I mean... Ok, so that assumes Leaf and Branch have been defined beforehand?
17:30:50 <Heffalump> possibly with an enum bit
17:30:51 <clausen> nono
17:30:56 <clausen> it defines Leaf and Branch
17:31:20 <clausen> in that union
17:31:22 <clausen> I should have written
17:31:28 <clausen> void leaf;
17:31:40 <clausen> struct { /* what I wrote */ } * branch;
17:31:59 <Fractal> Ok... That makes it more clear.
17:32:14 <clausen> oops
17:32:16 <clausen> struct { /* what I wrote */ } branch;
17:32:18 <clausen> it's not a pointer
17:33:03 <Fractal> Yeah, I figured that. :)
17:33:37 <Fractal> So, the code for handling these data structures is elsewhere, like C, and unlike OO languages?
17:34:26 <clausen> it's handled by the compiler
17:34:29 <clausen> Not Your Problem TM
17:34:29 <clausen> hehe
17:34:58 <clausen> one funky thing
17:35:08 <clausen> data Tree a = Leaf | Branch a (Tree a) (Tree a)
17:35:12 <clausen> when you do that
17:35:23 <clausen> Tree, Leaf and Branch are *functions* as well as types
17:35:35 <clausen> "Tree" is of the type:
17:35:55 <clausen> oops
17:35:59 <clausen> Tree isn't
17:36:00 <clausen> Leaf and Branch are
17:36:05 <clausen> Leaf :: Leaf
17:36:08 <Heffalump> Leaf and Branch aren't types, btw
17:36:18 <clausen> Branch :: a -> (Tree a) -> (Tree a) -> (Tree a)
17:36:22 <clausen> Heffalump: yep, you're right
17:36:24 <Heffalump> Tree is a type constructor, a and Tree a are types, and Leaf and Branch are functions
17:36:58 <clausen> but, you can do things like:
17:37:06 <clausen> well, pattern matching on Leaf and Branch
17:37:26 <clausen> so, they're not JUST functions
17:37:38 * clausen really should read some literature
17:38:58 <Fractal> Hm... So should I... Is there a Haskell for dummies? ;)
17:39:11 <Fractal> Learn Haskell in 21 days?
17:39:44 <Heffalump> clausen: they're typically known as "constructors"
17:40:01 <Heffalump> they act like functions but can also be used to pattern-match
17:40:47 <clausen> "constructors" as opposed to "type constructors"?
17:40:52 <Heffalump> yeah.
17:41:00 <Heffalump> "data constructors", more specifically
17:42:06 <Fractal> Ok, let's go back to the Point example for a minute? Say I've done   data Point a = Point a a   How do I create a Point of type, say, Integer?
17:44:09 <clausen> (Point 3 5)
17:44:09 <Heffalump> Fractal: it'll be of type "Point Integer"
17:44:17 <Heffalump> and what clausen said :-)
17:44:25 <clausen> (in effect, you're calling the "Point" function)
17:45:16 <Fractal> Heh. Ok... And if I understand functional languages correctly, you don't assign it to anything?
17:45:25 <clausen> correct
17:45:33 <Fractal> Cool...
17:45:34 <Heffalump> you define something to be equal to it, which is subtly different
17:45:46 <Heffalump> so you might write "foo = Point 3 5"
17:45:56 <clausen> think of it as "everything is a constant"
17:46:03 <Fractal> Hmmmm...
17:46:06 <Heffalump> but then you can't write "foo = Point 4 6" anywhere else in your program where the original foo is in scope
17:46:31 <clausen> (actually, I rarely use variables in C...)
17:46:32 <Fractal> Heh. I won't even ask how haskell handles scoping for now... But ok, I follow that. :)
17:47:38 <Heffalump> it's pretty simple, any declaration you make at "top level" is accessible anywhere inside the same file
17:47:52 <Heffalump> and possibly in other files, depending on exports
17:48:18 <Fractal> Ok... I won't worry about that for now.
17:48:23 <Heffalump> ok
17:48:49 <Heffalump> oh, I was slightly inaccurate saying you /can't/ write "foo = Point 4 6" elsewhere - you can in some cases, but then it'll just override the original definition, not actually change it
17:48:50 <Fractal> Ok, why can't I putstr anywhere in the code?
17:49:09 <Heffalump> the function you want is called putStr
17:49:12 <Fractal> Hm...
17:49:13 <Heffalump> capitalisation matters
17:49:21 <Fractal> Ok, putStr, my mistake.
17:49:33 <Heffalump> you have to respect the type of putStr
17:49:43 <Heffalump> putStr :: String -> IO ()
17:50:05 <Heffalump> so you can write putStr "foo", and that'll have type IO ()
17:50:25 <Fractal> Ok... The IO () is really an empty type, sort of, though isn't it?
17:50:31 <Heffalump> then if you actually want foo to be printed out, you need to make sure that this value of type IO () is "evaluated"
17:50:40 <Heffalump> () is an empty type
17:50:54 <Heffalump> IO () is the type of something that wants to do some io and then produce a value of the empty type
17:51:10 <Fractal> Ok...
17:51:21 <Fractal> So is that where do comes in?
17:51:46 <Heffalump> yeah.
17:51:52 <Heffalump> but don't worry about do for a second
17:51:56 <Fractal> Ok.
17:52:20 <Heffalump> the way to get your thing of type IO () executed is to use it in your "main" function
17:52:38 <Heffalump> main is the function that gets evaluated when your program runs, and it's expected to have type IO ()
17:52:49 <Heffalump> so if you write main = putStr "foo"
17:53:08 <Fractal> Ah! I see... Cause main is supposed to be IO...
17:53:19 <Heffalump> you'll have a program that prints out "foo" (you'll need to either type "main" at the hugs or ghci prompt, or run it with runhugs or compile it with ghc)
17:53:22 <Heffalump> yep.
17:53:47 <Fractal> Ok, so I can *only* do things with IO () types in main?
17:54:12 <Igloo> IO a technically
17:54:34 <Heffalump> it's better discipline to always make main of type IO (), so I was ignoring that
17:54:42 <Igloo> *nod*
17:54:50 <Heffalump> fractal: you can do things with whatever type you like, but you have to make sure that the overall type of main is IO ()
17:55:13 <Fractal> Ok.. So that when everything has been evaluated, IO () is left?
17:56:02 <Heffalump> yep.
17:57:18 <Fractal> Ok... But what if I wanted to do something like  main = putStr "blah" function_returning_other_type     That's just not allowed?
17:57:48 <Heffalump> I'm not quite sure what the effect you're aiming for is, but no
17:57:56 <Fractal> Ok, just making sure...
17:57:58 <Heffalump> I'm about to explain how you can get main to do more than one thing, though :-)
17:58:05 <Fractal> Ah good. Continue. :)
17:58:15 <Heffalump> this is where "do" comes in
17:58:39 <Heffalump> say you want to print two things out, one after another
17:58:42 <Heffalump> then you can write
17:58:46 <Heffalump> do putStr "foo"
17:58:53 <Heffalump>    putStr "bar"
17:59:11 <Heffalump> (note that the indentation is important because of Haskell's "layout" rule)
17:59:19 <Fractal> Yes, I read about that...
17:59:25 <Heffalump> and that entire "do" expression will have type IO () too
17:59:55 <Fractal> So... All the statements in the do must have the same type?
18:00:23 <Heffalump> not exactly, no.
18:00:38 <Heffalump> I've only shown you one aspect of do syntax so far
18:00:45 <Fractal> Does do always have type IO (), then?
18:00:55 <Heffalump> nope.
18:01:07 <Fractal> Ok...
18:01:17 <Heffalump> an expression starting with "do" will always have type m a
18:01:25 <Heffalump> where m is some "monad" - e.g. IO
18:01:26 <Heffalump> and a is any type
18:01:46 <Heffalump> let's just stick with IO for now
18:01:56 <Heffalump> there's a function called getChar, which is of type IO Char
18:02:13 <Heffalump> what that does is give you a character that was read from standard input
18:02:21 <Fractal> Right.
18:02:31 <Heffalump> here's a program that will read a character from standard input and print it out again:
18:02:40 <Heffalump> s/program/expression/
18:02:46 <Heffalump> do c <- getChar
18:02:54 <Heffalump>    putChar c
18:03:16 <Heffalump> the new bit of syntax I'm introducing here is the "<-" thing
18:03:34 <Fractal> Ok, that makes sense... And the do expression is of type IO because getChar is?
18:03:47 <Fractal> Right, I read about that. It's basically just a local variable, right?
18:03:57 <Heffalump> and what that means is "the thing on the right is of type IO a". Put it into the variable c on the left, which must be of type a.
18:04:11 <Heffalump> the do expression is of type IO () because putChar c is of type IO ()
18:04:26 <Heffalump> yeah, roughly.
18:04:52 <Heffalump> the scope of the variable c is all the statements in the do block that come below the c <- ... statement
18:04:58 <Fractal> Ok... Don't you have 2 IO types there though? What happens to getChar's? Or is that a stupid question?
18:05:39 <Fractal> Heffalump : Ok, I think I understand <-...
18:06:03 <Heffalump> do is meant to have a list of statements, each of which have IO types
18:06:10 <Heffalump> that's why the do with two putStrs worked
18:06:25 <Heffalump> the overall type of the do will be the type of the final statement in it
18:06:39 <Fractal> Ok, gotcha.
18:08:12 <Fractal> So could I do this:
18:08:24 <Heffalump> try writing something that will read in two characters one after another and then print them out in the opposite order to what they were read in
18:08:42 <Fractal> Ok... Lemme try that, actually...
18:13:59 <Fractal> Ok, I got it, but I'm not exactly satisfied with it:
18:14:13 <Fractal> main = do c <- getChar
18:14:29 <Fractal>           d <- getChar
18:14:38 <Fractal>           putChar d
18:14:40 <Fractal>           putChar c
18:14:45 <Heffalump> yep
18:14:57 <Heffalump> why aren't you satisfied?
18:15:47 <Fractal> BUT, should I be able to do put:  getChar putChar   ?
18:15:57 <Fractal> And only use one local?
18:16:03 <Heffalump> nope.
18:16:09 <Heffalump> just look at the types
18:16:16 <Heffalump> getChar :: IO Char
18:16:20 <Heffalump> putChar :: Char -> IO ()
18:16:39 <Heffalump> IO Char isn't a Char, and you have to use the "local" to convert between the two, effectively
18:17:02 <Fractal> Hmm... But doesn't putChar only eat up one type? The Char?
18:17:23 <Heffalump> yes, which is the type of c or d
18:18:14 <Fractal> Ok... Why doesn't c <- getChar  store IO Char into c?
18:18:29 <Heffalump> because it doesn't, is the short answer here :-)
18:18:37 <Fractal> Heh. Fair enough. :)
18:18:55 <Fractal> But can't I use j <- getInt   (or somesuch?)
18:18:57 <Heffalump> if it did, you'd never be able to get the Char out of the IO Char
18:19:05 <Heffalump> yes, and then j would have type Int
18:19:17 <Heffalump> (except getInt doesn't exist)
18:19:27 <Heffalump> but if it did it would probably have type IO Int
18:19:34 <Fractal> What if getInt's type was Int?
18:19:44 <Heffalump> then you'd have to do something different
18:20:03 <Heffalump> but if getInt's type was Int, it couldn't read the value it gave from standard input
18:20:21 <Heffalump> something has to be an IO type to be able to do that
18:20:25 <Fractal> True, but let's say it read it from some place else...
18:20:39 <Fractal> Like a stack or something?
18:21:04 <Heffalump> it's not "allowed" to
18:21:42 <Fractal> Odd... So, how would the program printf("%d", 1+1); go in haskell?
18:21:44 <Heffalump> there's no way you can define a function that could do that within the language itself, and if you are implementing an external library, you should make sure that you don't create any functions that can do that kind of thing
18:22:00 <Fractal> Ok...
18:22:01 <Heffalump> well, Haskell doesn't have a printf
18:22:07 <Heffalump> but something like
18:22:18 <Heffalump> print (1+1)
18:22:27 <Heffalump> would have the same effect
18:22:36 <Fractal> But don't 1 and 1 have type Int?
18:22:41 <Heffalump> yep
18:22:59 <Fractal> So... I can't use em with putStr...
18:23:05 <Heffalump> for now you can think of print as having type Int -> IO (), though it's actually rather more complicated than that
18:23:09 <Heffalump> yes, but you can use them with print
18:23:17 <Heffalump> 1+1 also has type Int
18:23:32 <Fractal> Right, that makes sense...
18:24:47 <Fractal> So... print only works with Int, eh? So must there be a print_float too?
18:24:58 <Heffalump> no, actually print works with Float too
18:25:08 <Heffalump> I did say it was rather more complicated than just being Int -> IO ()
18:25:14 <Heffalump> it's actual type is
18:25:20 <Heffalump> Show a => a -> IO ()
18:25:34 <Heffalump> the thing on the left of the => is something called a "type constraint"
18:26:02 <Heffalump> basically what it means is that if a type a belongs to a class of types called "Show", the print can take a value of type a and return an IO ().
18:26:02 <Fractal> Hm. What does it constrain?
18:26:12 <Fractal> Oh..
18:26:22 <Heffalump> and it so happens that both Int and Float, along with a lot of other types, belong to Show
18:26:44 <Fractal> So Show is a bunch of types?
18:26:50 <Heffalump> not exactly, but sort of
18:27:02 <Fractal> Is it a type itself?
18:27:09 <Heffalump> a bunch of types belong to Show, would be a more accurate way of putting it
18:27:15 <Heffalump> no, it's something called a "type class"
18:27:32 <Fractal> Oh...
18:27:42 <Fractal> Do I have to worry about type classes now?
18:29:11 <Heffalump> not really
18:29:13 <Fractal> Oh, also, is LISP a functional language?
18:29:17 <Heffalump> errm, sort of
18:30:14 <Heffalump> it's quite primitive in many ways, but it does have higher-order functions as first class objects within the language (i.e. they can be used in the same contexts as all other values) which are probably the most important feature that makes a language "functional"
18:31:50 <Fractal> Ok... Then I'm going to go play around for a bit. Doubtlessly I'll be back with more questions. Thanks for your time. :)
18:32:25 <Heffalump> no problem
19:42:19 <tpck> Can anyone explain the Maybe type?
19:44:19 <clausen> yep
19:44:24 <clausen> the idea is:
19:44:39 <clausen> you might not be sure if something exists
19:44:41 <clausen> for example
19:44:56 <clausen> find :: a -> [a] -> Maybe Int
19:45:14 <clausen> so, if you find a match, it might return an integer (the position)
19:45:19 <clausen> and if it finds nothing, it returns nothing
19:45:30 <clausen> in the first case, "Just [the position]"
19:45:35 <clausen> the second case, "Nothing"
19:45:37 <clausen> make sense?
19:49:32 <tpck> hmm
19:49:46 <tpck> okay
19:50:02 <tpck> Why the Just?
19:52:54 <tpck> ugh, evil HaXmL classes
19:53:08 <tpck> make no sense
19:53:56 <tpck> food now, understanding later
20:13:07 <clausen> "Just" is the data constructor
20:13:41 <clausen> it's like: data Tree a = Leaf | Branch a (Tree a) (Tree a)
20:13:50 <clausen> data Maybe a = Nothing | Just a
20:14:20 <tpck> data Just a = Just a?
20:26:06 <clausen> data Maybe a = Nothing | Just a
20:26:24 <clausen> I'm not sure what you're trying to say
20:26:48 <tpck> nm
20:27:03 <tpck> my problem is with this silly class
20:27:18 <tpck> instance XmlContent Tree where
20:27:25 <tpck> toElem (Tree a) = blah blah blah
20:27:48 <tpck> but toElem (Tree [stuff]) doesn't work
20:28:19 <tpck> No instance for (Show Content)
20:28:19 <tpck> arising from use of `print' at <No locn>
20:28:20 <tpck> In a 'do' expression pattern binding: print it
20:28:51 <clausen> are you doing this in hugs?
20:28:53 <clausen> ah
20:28:54 <clausen> print
20:29:02 <tpck> ghci
20:29:05 <clausen> so, what's Content?
20:29:20 <tpck> Good question. 
20:29:48 <tpck> data Content   = CElem Element
20:30:10 <tpck> oh, or a buncha other stuff
20:30:36 <tpck> | CString Bool CharData | | CRef Reference
20:30:40 <tpck> | CMisc Misc
20:31:09 <clausen> ah
20:31:32 <tpck> Make sense?
20:31:59 <clausen> yep
20:32:07 <clausen> so, why are you tring to print it?
20:32:35 <tpck> I'm using HaXmL .. I believe toElem may create XML from Haskell 
20:34:25 <tpck> Do you see something? I just don't see what I'm doing wrong. 
20:35:16 <clausen> what's the type of "toElem" ?
20:35:22 <clausen> (type signature)
20:35:28 <tpck> forall a. (XmlContent a) => a -> [Content]
20:35:34 <tpck> says :t toElem
20:36:03 <tpck> remember: instance XmlContent Tree where
20:36:46 <clausen> well, toElem just gives you a [Content]
20:36:51 <clausen> not something you can print
20:37:04 <tpck> hrm
20:37:26 <tpck> :t toElem ( Tree [] )  
20:37:26 <tpck> [Content]
20:37:27 <tpck> neat
20:39:00 <tpck> so I need to find something that can output [Content]
20:40:13 <clausen> you could write it yourself
20:40:17 <clausen> it's prolly not hard
20:40:22 <clausen> but, there's prolly a function to do it for you
20:43:01 <tpck> I'll look around. 
20:43:57 <clausen> actually, there probably isn't
20:43:59 <clausen> if there were
20:44:08 <clausen> they would have just made Content "showable"
20:44:16 <clausen> but, you could write your own function easly enough
20:44:16 <tpck> Well thats useless isn't it then?
20:44:24 <tpck> Hm,  how?
20:44:25 <clausen> well, I imagine it's for parsing
20:44:31 <tpck> I don't know what [Content] looks like
20:44:31 <clausen> well, go through all the cases
20:44:33 <clausen> of Content
20:44:47 <tpck> fromText :: [Content] -> (Maybe String, [Content])
20:44:49 <tpck> Ooh 
20:45:07 <clausen> showContent (CString str) = str
20:45:09 <clausen> etc.
20:45:21 <clausen> showContent (CString str) = '"" + str + '"'
20:45:23 <clausen> perhaps
20:45:58 <tpck> shouldn't that function do it? 
20:46:36 <clausen> dunno
20:47:02 <tpck> fromText (CString _ s: cs) = (Just s, cs)
20:47:03 <tpck> fromText cs                = (Nothing, cs)
20:47:27 <tpck> hm
20:47:28 <clausen> gotta go...
20:47:34 <tpck> okay, thanks :)
20:47:41 <clausen> no worries... good luck! :)
20:47:58 <tpck> thanks :)
