03:13:32 * shapr reads back and forth through the Arrows paper
03:15:26 <shapr> hi jewel
03:16:46 <Heffalump> hi
03:16:51 <shapr> hi Heffalump, what's up?
03:17:28 <Heffalump> not much
03:17:41 <shapr> no code today? :)
03:18:22 <Heffalump> not yet :-)
03:19:04 <jewel> hey
03:19:35 <shapr> so... should I dive into Monads and Arrows, or should I check out logic/constraint stuff in Mercury/Oz ?
03:19:51 * Heffalump has no idea :-)
03:20:04 <shapr> have you used Mercury or Mozart-Oz ?
03:21:10 <Heffalump> nope
03:22:11 <shapr> I've read a few pages about them... from what I hear, logic and constraint programming are two different things, but somewhat related. And, they're neither procedural nor functional.
03:22:47 <Heffalump> logic programming is prolog type stuff
03:22:53 <shapr> yup
03:23:01 <Heffalump> I'm doing some of that atm, but with our own logic solver
03:23:14 <shapr> can you tell me anything about it?
03:23:31 <shapr> like, is there a short and sweet description?
03:24:16 <shapr> I get the impression it's like mini-golf, you set up all the hills and walls and then you whack balls into the maze.
03:24:55 <Heffalump> the abstract of http://web.comlab.ox.ac.uk/oucl/work/ganesh.sittampalam/documents/iltrans.ps is all
03:25:06 * shapr looks
03:25:09 <Heffalump> well, the logic solver whacks the balls
03:25:43 <shapr> from that short description, I can't tell what, if any, difference there is between logic and constraint.
03:26:35 * shapr reads iltrans.ps
03:27:05 <shapr> yay, it mentions refactoring tools
03:27:27 <Heffalump> only for related work, though
03:27:40 <shapr> hey, someone on #java once said that they wish CVS could track a class that got refactored from one file to another
03:27:56 <shapr> I was thinking that could be done with either a refactoring tool that talks to the version control backend
03:28:00 <Heffalump> that'd require rather more sophisticated VC than CVS can do
03:28:09 <shapr> or a version control system that only stores abstract syntax trees, and can diff ASTs
03:28:14 <Heffalump> oh, that works
03:28:16 <Heffalump> IP used to do that
03:28:22 <shapr> right, I know :)
03:28:27 <shapr> that was my first thought
03:28:35 <shapr> I wish IP were released upon an unsuspecting world :-/
03:28:40 <shapr> failed or not, I could really use it
03:29:06 <shapr> someone else said that multi-file atomic commits is almost as good...
03:29:22 <shapr> I think they're wrong, mostly because I can't see how they're right :)
03:29:23 <Heffalump> bitkeeper does that
03:29:37 <shapr> yah, but does that really help to solve the problem?
03:29:38 <Heffalump> but I don't think it deals with moving a block of code from one file to another
03:29:40 <Heffalump> I doubt it
03:29:44 <shapr> I thought so also.
03:30:15 <shapr> do you think IP will just languish in some backup room somewhere forever?
03:30:54 <Heffalump> almost certainly.
03:31:00 * shapr sighs
03:31:05 <shapr> extreme suckage
03:32:09 <shapr> .uinaiterai
03:33:01 <shapr> I could always email Simonyi and ask him, but I doubt he'd read my email.
03:33:16 <shapr> well, might as well try.
03:34:07 <Igloo> ask him what?
03:34:43 <shapr> Igloo: ask him if the IP system will ever be released
03:35:00 <Igloo> Ah
03:35:12 <shapr> it's an excellent system, with many nifty combinations of good ideas.
03:37:07 * shapr looks for simonyis email address
03:42:23 <Heffalump> he's extremely unlikely to either read your email or have a useful answer
03:43:37 <Heffalump> grr, Outlook doesn't save email addresses of other people at the same company in emails
03:43:39 <shapr> yah, I know.
03:44:00 <shapr> I have to try anyway though.
03:46:22 <Heffalump> charless or charlessi@microsoft.com would be good bets
03:47:43 <shapr> thanks, I'll try that.
03:51:02 <shapr> Heffalump: have you seen ASTLOG?
03:51:13 <shapr> er, I should probably finish reading your paper before asking that...
03:51:30 <Heffalump> I've not looked at it personally
03:52:05 <shapr> well, as long as someone in your project has...
03:57:13 <Heffalump> Oege will have
03:57:18 <Heffalump> he knows about everything :-)
03:57:20 <shapr> heh
03:57:33 * shapr googles for Oege
03:58:07 <Igloo> That works surprisingly well
03:58:26 <Heffalump> well, it would
03:58:28 <shapr> my iq increased fifty points when I started using google.
03:58:29 <Heffalump> it's not exactly a common name
03:58:38 <shapr> well, effectively
03:58:52 <Igloo> Even in, ermmm, Holland?
03:59:01 <Heffalump> I think so, yes
03:59:12 <shapr> Oege looks like he's fun at parties.
03:59:13 <Igloo> Ah, OK
03:59:19 <Igloo> shapr?
03:59:27 <shapr> well, he does.
03:59:35 <Heffalump> hmmm :-)
03:59:41 <Igloo> YM physical appearence?
03:59:45 <shapr> right
03:59:56 <Heffalump> I assumed you meant the photos of him dancing from Portugal
04:00:03 <shapr> er no :)
04:00:08 <Heffalump> ah, ok :-)
04:00:12 <shapr> I just saw one pic of him
04:00:44 <Heffalump> second and fourth photos down in http://web.comlab.ox.ac.uk/oucl/research/areas/progtools/jokes.html
04:00:44 <shapr> I guess I'm right then :-)
04:00:59 <Heffalump> errm, not really :-)
04:01:11 <Heffalump> well, I've never *seen* him being particularly fun at parties
04:01:21 <Heffalump> but I've only seen him at work-type ones
04:01:52 <shapr> you should throw a non-work party sometime...
04:01:55 <shapr> :)
04:03:22 <shapr> you got a picture with simonyi.
04:03:22 <shapr> wow.
04:04:31 <Heffalump> I did work in the same group at M$ as him for 6 months or so (in two bursts)
04:04:38 <shapr> wow, that's even cooler.
04:06:22 * buggmuzz is away: I'm busy
04:06:24 <buggmuzz> er
04:06:28 * buggmuzz is back (gone 00:00:03)
04:06:32 <shapr> hi buggmuzz
04:06:38 <buggmuzz> hi
04:06:58 <shapr> what do you do with haskell?
04:07:30 <buggmuzz> assignments and the such :P
04:07:40 <shapr> sounds good
04:08:05 <Igloo> <Insert pred joke about Haskell not having assignments>
04:08:26 <Heffalump> I actually thought that was what he meant, not having thought about it carefull
04:08:32 <Heffalump> s/full/fully/
04:08:45 <Igloo> I thought he was being sarcastic for a second too
04:08:53 <Igloo> Especially with teh :P
04:09:06 <buggmuzz> sorry i didn't know it would create that much confusion :(
04:09:50 * shapr is entertained
04:09:56 <shapr> I hadn't thought of that joke before.
04:10:31 <Igloo> No problem, bugg  :-)
04:11:06 <Heffalump> :-)
04:11:07 <shapr> what's pred short for?
04:12:05 <Heffalump> predictable
04:12:11 <shapr> oh
04:12:25 <Heffalump> s'a local joke from .ox.ac.uk newsgroups
04:12:37 <shapr> it's really funny the first time.
04:15:27 <buggmuzz> lol
04:15:42 * shapr finds various Igloo web pages, but no pictures.
04:15:58 <shapr> Igloo: wow, your software stuff varies
04:16:42 <Igloo> There's a lot of stuff from when I was younger and foolisher around  :-)
04:17:02 <shapr> hm, no Igloo pix though.
04:17:14 * Igloo can't think of that much in the way of software, though - pidaho, some Haskell bits come to mind - what else is there?
04:17:32 <shapr> ls in haskell
04:17:35 <Igloo> Heff can probably find a picture of me easier than I can
04:17:38 <shapr> vb igloo
04:18:24 <Igloo> vb igloo doesn't have any software I don't think, and it isn't very complete being the last thing I worked on on that site
04:18:27 <shapr> do you maintain several debs?
04:18:53 <Igloo> I used to, and probably will again after finals
04:19:02 <shapr> netfilte/iptables something
04:19:12 <shapr> you must not do ego-surfing much :)
04:19:50 <Igloo> Where's the netfilte/iptables URL?
04:20:11 <Igloo> Hmmm, speaking of which I should try sending my ping patch again sometime
04:20:12 <shapr> er, "netfilter"
04:20:39 <shapr> http://netfilter.samba.org/scoreboard/about-score.Ian_Lynagh.html
04:22:06 <Igloo> Oh, yes, I remember now
04:22:32 <Igloo> 6 points, cool. I wonder if I can trade them in for air miles or something  :-)
04:22:38 <shapr> heh
04:24:20 <shapr> I really like QuickCheck
04:24:29 <shapr> it's way cool.
04:24:58 * Igloo finds Ganesh has a point too
04:25:20 <shapr> I think every language should include three kinds of testing, xUnit, Design by Contract, and QuickCheck
04:25:49 <Igloo> What does QuickCheck do?
04:26:00 <shapr> hm, I think design by contract could be a subset of QuickCheck though...
04:26:04 <shapr> yah, it could...
04:26:47 <shapr> http://www.cs.chalmers.se/~rjmh/
04:27:26 <shapr> I'd like to take his first year course on FP
04:28:31 <shapr> I'm looking forward to his unreleased QuickCheck version
04:32:37 <shapr> the new version is strongly related to a paper he's published about testing monads
04:36:14 * shapr sighs
04:36:27 * shapr goes back to doing paying Java work.
04:36:58 <Igloo> :-) for paying,  :-( for Java
04:37:05 <shapr> yah, really
04:37:13 <Igloo> Sounds better than revision, anyway  :-)
04:39:44 <shapr> revision?
04:41:16 * Igloo is in the middle of exams
04:41:20 <shapr> oh
04:41:43 <Heffalump> s'character-building, that's what they are.
04:41:51 <shapr> exams?
04:41:55 <shapr> hm
04:42:03 <shapr> I have enough character. can I go home now?
04:43:14 <Heffalump> :-)
04:44:32 <shapr> successful exams do get you into cool jobs.
04:46:24 <Igloo> Or cool dPhils
04:46:29 <shapr> right
04:48:12 <imikeyi> hi
04:48:43 <shapr> hiya
04:49:18 <imikeyi> i have a question
04:49:21 <shapr> cool
04:49:22 <shapr> ask it
04:49:31 <imikeyi> im not too good at haskell :)
04:49:33 <imikeyi> if i have a data type X, and X is an Array, then if I make another data type Y and have it 'derive read' it doesnt work. how can I get an array to define read?
04:49:46 <shapr> um
04:49:54 <Heffalump> wdym "X is an array"?
04:50:11 <shapr> first, is this your homework? ;)
04:50:19 <imikeyi> hehe no
04:50:35 <imikeyi> actually i am required in a group of 3 to write 'sim university' for uni
04:50:59 <imikeyi> the guy writing the board module has declared such a pointer, and as such it is incompatible with my module
04:51:06 <imikeyi> mainly because it is neccessary to derive read
04:51:20 <shapr> sounds nifty
04:51:24 <imikeyi> type Board = (Array (Int,Int) BoardHex)
04:51:25 <shapr> what's sim university sposed to do?
04:51:29 <shapr> ohh
04:51:34 <imikeyi> its basically simcity
04:51:38 <shapr> I understand
04:51:39 <imikeyi> obviously not as hitech
04:51:40 <shapr> extranifty
04:51:41 <imikeyi> :)
04:51:48 <Heffalump> deriving Read for an array might be hard
04:52:11 <imikeyi> hmm, do u know where I could find info to tell me how to do it?
04:52:15 <Heffalump> but using type rather than newtype/data means you can't do it anyway
04:52:15 <shapr> why are you trying to derive read?
04:52:35 <imikeyi> because the 'web module' is passed an adt in string form
04:53:04 <imikeyi> and i gave a 'data game' which includes board
04:53:35 <shapr> I'm also a novice
04:53:58 <imikeyi> dont worry then :)
04:54:04 <shapr> but as Heffalump said, you have to use newtype to add methods to a class
04:54:21 <shapr> for whatever reason, a type alias isn't something you can stick methods onto
04:54:49 <imikeyi> okay.. i guess its going to be tedious then
04:55:30 <shapr> here's an example from my only haskell program yet:
04:55:40 <shapr> --type MandelData = (Integer, Complex Double, Complex Double)
04:55:40 <shapr> newtype MandelData = MandelData (Integer, Complex Double, Complex Double)
04:56:01 <shapr> I wanted to add "show" so I had to use newtype
04:56:51 <imikeyi> i see.., and does newType automatically assume read? i dont quite understand how to use it
04:57:12 <shapr> I read the classes chunk of the Thompson book several times
04:57:17 <shapr> that helped lots
04:57:25 <shapr> which textbook are you using?
04:57:27 <Heffalump> you can derive read on a newtype declaration, but not on a type declaration
04:57:40 <Heffalump> but I'm not sure you can derive Read on something that involves Array at all
04:57:44 * Heffalump --> Play
04:57:47 <imikeyi> im not using a textbook.. im more of a procedural programmer :)
04:58:11 <shapr> me too, but I'm slowly figuring out functional stuff
04:58:13 <Igloo> If you could derive Read on it then I can't think why Read wouldn't already be defined for you (except performance considerations)
04:58:53 <Heffalump> oh, it appears you can
04:59:06 <imikeyi> exactly.. like i said its not my fault, its my group memberss.. im trying to solve his mistakes :(
04:59:37 * Heffalump wonders how to construct an Array
04:59:43 <Heffalump> instance (Ix a, Show a, Show b) => Show (Array a b)
04:59:44 <Heffalump> instance (Ix a, Read a, Read b) => Read (Array a b)
04:59:49 <Heffalump> so it is possible
05:00:06 <Heffalump> so your Board will already be an instance of Read, if ShowHex is
05:00:32 <imikeyi> ahh
05:00:45 <imikeyi> BoardHex?
05:01:06 <Heffalump> probably :-)
05:01:20 <imikeyi> nah, BoardHex is already Read.. 
05:02:11 <imikeyi> thanks anyway everyone
05:02:23 <Heffalump> it should already be Read then
05:02:30 <Heffalump> read "something" :: Board
05:02:45 <Heffalump> if it complains about a parse error rather than a type error then it's already in Read
05:03:04 <imikeyi> it says theres no instance for read board
05:03:21 <Heffalump> hmm, hugs, ghc or nhc?
05:03:27 <imikeyi> ghc
05:03:32 <Heffalump> ghc or ghci?
05:03:38 <imikeyi> ghci
05:04:24 <Heffalump> ah. bugger. it works in hugs but not ghci
05:04:34 <imikeyi> really?
05:04:49 <Heffalump> yeah
05:04:53 <imikeyi> perhaps theres a command line option i could search for
05:04:59 <Heffalump> it looks like hugs has Read instances for Array but ghci doesn't
05:05:30 <imikeyi> i see
05:05:33 <imikeyi> thank you very much
05:05:45 <imikeyi> i'll just change my compiler :)
05:05:51 <Heffalump> hugs isn't a compiler
05:05:56 <imikeyi> interpreter
05:06:05 <Heffalump> ok :-)
05:06:10 <imikeyi> im lazy
05:06:12 <Heffalump> it's a lot slower than GHC, though
05:06:38 <imikeyi> i know..
05:06:41 <Heffalump> ok
05:06:43 <imikeyi> thanks anyway
05:06:48 <imikeyi> great help!
05:06:53 <imikeyi> im very happy now
05:06:54 <imikeyi> :)
05:07:22 <imikeyi> seeya
05:07:29 <Igloo> Looks like a bug in GHC
05:07:52 <Heffalump> does the report mandate a Read instance then?
05:08:04 <Igloo> http://research.microsoft.com/Users/simonpj/haskell98-revised/haskell98-library-html/array.html
05:08:26 <Igloo> (yes)
05:08:26 <Heffalump> tutut :-)
06:20:33 <buggmuzz> damn
06:20:36 <buggmuzz> clausen was here
06:20:40 <buggmuzz> didn't even see him :(
06:57:44 <buggmuzz> hey, in haskell, is there any way i can produce an infinite list of the same number
06:57:53 <buggmuzz> other then doing, [n,n..]
06:58:00 <Igloo> repeat n
06:58:03 <buggmuzz> thanks
07:54:46 <stuck> is anyone awake?
07:56:32 <dennisb> sure
07:57:32 <dennisb> I would guess at least 2/3 of the world is awake
07:57:41 <stuck> do u know how i would find the number of times one string occurs in the other string?
07:58:00 <dennisb> you have to write it yourself
07:58:05 <buggmuzz> *cough* someone needs help with occurrences bugg thinks
07:58:11 <stuck> i have it done
07:58:14 <stuck> i need a better method
07:58:19 <stuck> if i show u what i have
07:58:22 <buggmuzz> oh i see ;)
07:58:25 <stuck> will u help me make it shorter?
07:58:26 <Igloo> I'd have thought 2/3 was optimistic, given the relatively high population density of the area around China
07:58:26 <buggmuzz> ok
07:58:33 <buggmuzz> yeah i'll try ;P
07:58:47 <dennisb> functions like isPrefixOf and tails might be helpfull
07:59:00 <buggmuzz> yeah, i used tails and isPrefixOf
07:59:31 * Igloo tries to think if there's a count function along the lines of any and all or if you have to filter and use length
08:00:48 <buggmuzz> yeah length filter had to do for me
08:00:52 <buggmuzz> couldn't find a count one
08:00:52 <buggmuzz> :/
08:02:23 <dennisb> I agree, some length and filter seems to be the easiest
08:06:27 <dennisb> stuck: so, what was your solution?
08:06:40 <Igloo> Although it'll all get messy if you care about overlaps, of course
08:07:31 <grrr> i msg it to buggmuzz dennisb
08:08:40 <dennisb> well, it's just a oneliner to write that function
08:08:57 <grrr> mines a three
08:10:51 <buggmuzz> mine's one :/
08:11:08 <grrr> i will soon have one
08:11:13 <dennisb> one or three, not a big difference
08:11:28 * Igloo hope you all have type signatures too  :-)
08:11:38 <dennisb> the one that is three lines might be better once it is compiled anyway
08:12:17 <buggmuzz> yeah i had a quicker recursive one
08:12:30 <buggmuzz> but it didn't pass the tests from the assignmenttester
08:13:09 <Igloo> What tests?
08:13:40 <buggmuzz> well, for our unit, they give us a tester program to test our functions :)
08:14:15 <Igloo> Yes, but what test did it fail on?
08:14:48 <buggmuzz> oh because when i did it the recursive way, i set the base case occurrences xs [] = 0
08:14:58 <buggmuzz> i mean
08:15:05 <buggmuzz> occurrences [] ys = 0
08:15:14 <buggmuzz> but he wants it to increase ys number of times
08:15:16 <grrrr> but that doesnt work
08:15:27 <grrrr> because its not a []
08:15:35 <buggmuzz> oh yeah
08:15:37 <buggmuzz> well there you go
08:15:38 <buggmuzz> :)
08:16:01 <Igloo> Huh?
08:16:12 <buggmuzz> wait, it could be
08:16:13 <buggmuzz> :(
08:16:17 <grrrr> nah
08:16:19 <grrrr> its a 
08:16:19 <buggmuzz> if you really wanted to
08:16:21 <grrrr> not [a]
08:16:25 <buggmuzz> you could use []
08:16:32 <grrrr> i am using []
08:16:33 <buggmuzz> watch
08:16:48 <grrrr> but it didnt work
08:16:53 * Igloo didn't understand "but he wants it to increase ys number of times"
08:16:55 <buggmuzz> Assignment2> occurrences [] [1,2,3]
08:16:57 <buggmuzz> 4
08:16:57 <buggmuzz> (67 reductions, 93 cells)
08:17:05 <buggmuzz> like that Igloo
08:17:34 <buggmuzz> because my tester failed when that one returned 0 :(
08:18:32 <Igloo> Ah, right
08:18:53 <Igloo> You probably mean 3 and you could fix that with an extra case
08:19:53 <grrrr> anyway thanks for ur help buggmuzz an goog luck with ur assignment
08:19:57 <grrrr> i gota sleep 
08:20:06 <buggmuzz> hehe yeah same :/
08:20:17 * buggmuzz is away: sleep
08:21:49 * dennisb is confused, wasn't it stuck (or grrrr) that had an assignment to write the occurrences function
08:22:04 <Igloo> I got the impression they are at the same uni or something
08:24:15 <buggmuzz> yeah, you're right :)
10:18:45 <shapr> I like purely functional stuff.
12:50:44 <dennisb> I like functional pure stuff
19:58:08 <adiabatic> I apologize for the crossquestioning...but how would I implement minimumOfAList(L) in a language that has pattern matching and no mutable variables (actually erlang)?
