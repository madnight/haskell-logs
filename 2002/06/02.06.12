01:14:47 <jewel> How do I tell ghci where to find the Socket module? (again)
01:17:18 <Heffalump> -package net?
01:20:45 <jewel> yep 
01:20:54 <jewel> Couldn't find this in the usage description
02:48:45 <shapr> yay haskell!
02:50:32 --- topic: set to 'Monad off the port bow! Red Alert! || http://purl.org/wiki/haskell/HaskellIrcChannel' by shapr
02:51:30 --- topic: set to 'Monad off the port bow! Red Alert! || http://purl.org/wiki/haskell/HaskellIrcChannel || shapr is nearing brown belt.' by shapr
03:00:14 <shapr> the WASH stuff is FAR more elegant than JavaServerPages
03:00:35 <shapr> I bet you're not surprised.
03:04:15 <jewel> Ok Mr brown belt
03:04:32 <jewel> Currently I'm doing this  to  write a hex long to a socket:
03:04:41 <jewel>        hPutChar d (chr 2)
03:04:42 <jewel>        hPutChar d (chr 2)
03:04:42 <jewel>        hPutChar d (chr 0)
03:04:42 <jewel>        hPutChar d (chr 21)
03:04:49 <jewel> How do I do that in one line?
03:04:59 <jewel> (Preferably with one call)
03:05:55 <Heffalump> as opposed to using map?
03:06:32 <Heffalump> hPutStr d (map chr [2,2,0,21]) ?
03:07:23 <Igloo> Don't you mean mapM_ (hPutStrd . chr) [2,2,0,21]?
03:08:46 <Heffalump> igloo: Huh?
03:08:58 <Heffalump> he wanted one call, presumably in terms of the IO monad which will be the inefficient bit
03:09:06 <jewel> Yes
03:09:13 <jewel> Like hPutLong or hPutInt
03:09:18 <Heffalump> (though I dunno how it's actually implemented internally)
03:09:35 <jewel> and a way to pass it a long value (4 byte) specified in hex
03:09:48 * Heffalump also thinks Igloo's code wouldn't typecheck
03:09:50 <Igloo> Doh, sorry
03:10:30 <Heffalump> poor Igloo, finishing exams must have addled your brain :-)
03:10:43 * Heffalump ducks
03:10:58 <Igloo> :-)  And yes as I wanted hPutChar
03:14:32 <shapr> gah, emacs got confused
03:14:32 <shapr> what was the solution?
03:14:32 <shapr> ohhh
03:14:32 <shapr> mapM is for doing monad mapping
03:14:32 <shapr> hmm
03:14:32 <Heffalump> hPutStr d (map chr [2,2,0,21])
03:14:32 <Igloo> The answer was that I wasn't awake enough  :-)
03:14:39 <shapr> oh I see
03:14:44 <shapr> what about using hPutChar ?
03:15:09 <shapr> would that require mapM?
03:15:23 <Heffalump> he only wanted one call into the IO monad
03:15:26 <shapr> oh
03:15:38 <shapr> jewel: sounds like nifty code, what are you writing?
03:17:20 <shapr> well, time for lunch
03:17:21 <shapr> bbl
03:31:25 <jewel> Does hPutStr just write bytes?
03:31:35 <jewel> How can I specify those values in hex?
03:32:09 <Heffalump> jewel: I think it writes bytes, but in ASCII mode
03:32:19 * Heffalump can't remember if/how to specify hex literals in Haskell, sorry
03:33:15 <jewel> 0x15 seems to work
03:36:59 <jewel> now I do things like: --write string len
03:36:59 <jewel>        hPutStr d (map chr [0x00,0x00,0x00,0x05])
05:08:43 <shapr> well now
05:11:48 <shapr> those who live in grass houses should not stow thrones.
05:35:09 <shapr> yeesh
05:35:26 <shapr> #java does not seem to attract the best and the brightest
05:36:24 <Igloo> I can't say that comes as a complete surprise
05:36:35 <shapr> sadly, I'm on #java all too often.
05:36:40 <shapr> what does that say about me? :-/
05:39:17 <Igloo> You are an optimist?
05:39:35 <shapr> heh
05:40:02 <shapr> more like "I have so few job opportunities I'll write Java to get food."
05:44:23 <shapr> mmm, Acrid Avid Jam Shred
07:09:29 * shapr bounces
08:01:57 <shapr> hi Dalroth
08:01:58 <shapr> what's up?
08:03:32 <Yurik> shapr: hi
08:03:38 <shapr> Dalroth: do you know haskell?
08:03:39 <shapr> hi Yurik, how's life?
08:03:51 <Yurik> shapr: so-so again :)
08:04:00 <shapr> ah
08:04:02 <shapr> still poor?
08:04:06 <Yurik> shapr: yeah
08:05:12 <Dalroth> hi, sorry, i'm at work so I don't respond very quickly :)
08:05:25 <shapr> Dalroth: no worries, I'm at work too
08:05:30 <shapr> though not for much longer...
08:05:36 <shapr> it's 6pm, time to go home.
08:05:48 <Dalroth> do I know Haskell, well... sorta... I am by no means a wiz at it, it's something I like to play with at home.  I always hang out here hoping for some discussion that is way over my head so that I might learn a trick or two :)
08:06:04 <shapr> have you written anything in Haskell?
08:06:10 <shapr> are you looking for any particular info?
08:06:29 <Dalroth> Well, I'm working on a half assed scripting language in haskell just for the fun of it
08:06:38 <shapr> I'm working on my Haskell brown belt... trying to get comfy with input and output
08:06:49 <Dalroth> yeah, I think that's about where I am :)
08:06:54 <shapr> writing a language in haskell sounds nifty!
08:07:06 <shapr> I want to write a language in haskell also...
08:07:09 <shapr> sort of
08:07:10 <Dalroth> so far I can parse strings into tokens pretty well, haven't quite finished building the syntax tree, and haven't quite gotten the IO working yet
08:07:21 <shapr> are you using monadic parser combinators?
08:07:26 <Dalroth> going slowly, have lots of thigns keeping me busy (especially my puppy)
08:07:28 <shapr> or maybe arrow parsers?
08:07:41 <Dalroth> I'm not sure, I read about the parser combinators, but not quite sure if I'm doing it right :P
08:07:50 <Dalroth> still a little iffy with monads hehe
08:07:55 <shapr> yah, me too
08:08:20 <shapr> I like anything that stretches my mind, so I will understand them at some point.
08:08:57 <Dalroth> yeah, I chose Haskel because of it's mathematical purity... I figure that would challenge me to learn things right, whereas with the lisps and MLs it's much easier to cheat and less likely that I'll take time to learn things properly
08:09:38 <shapr> I visited Haskell because of significant whitespace, I stayed for the purity.
08:10:24 <shapr> more and more I wish Java and Python were closer to Haskell.
08:11:49 <Dalroth> I wish java had some improvements yes :)
08:12:10 <Yurik> pizza?
08:12:28 <Yurik> there is java-based language - pizza
08:12:32 <Yurik> :)
08:12:34 <Yurik> with some tasty features
08:13:00 <shapr> I remember hearing about it before I knew much Haskell, I'll have to look at it again.
08:13:43 <Dalroth> http://pizzacompiler.sourceforge.net/
08:14:00 <Dalroth> I'll have to take a look, but there is a LOT Java could do better so it might not go far enough 
08:14:18 <Dalroth> but that's ok, Java is what Java is... that's why I do most of my work in Ruby and am trying to learn haskell :)
09:09:27 <dufflebunk> Hello
09:09:55 <Heffalump> hello
09:11:04 <dufflebunk> Are there any sites with simple short full program sources (not snipets) of haskell?
09:12:29 <dufflebunk> I'm new to Haskell and I'm doing something wrong in my source files... I'm missing something obvious.
09:12:48 <Heffalump> umm
09:13:41 <Heffalump> http://losser.st-lab.cs.uu.nl/mod_haskell/haskell/examples/ContentAndLogger.hs is one, I guess
09:14:47 <dufflebunk> Is "body :: Request -> String" required?
09:17:23 <shapr> wheee
09:17:55 <shapr> hello on numerous ones.
09:18:01 <shapr> er, "oh numerous ones"
09:19:19 <Heffalump> dufflebunk: nope
09:19:30 <Heffalump> a minimal Haskell program would be
09:19:35 <Heffalump> module Main where
09:19:48 <Heffalump> main = return ()
09:21:10 <dufflebunk> ok, and does the source file name have to be the same as the module name?
09:21:39 <shapr> nope
09:21:48 <shapr> dufflebunk: you've been doing Java, eh? :)
09:22:02 <Heffalump> it does help if it is, though
09:22:10 * shapr bounces
09:22:13 * shapr BOUNCES
09:22:38 <dufflebunk> No, Clean. I don't like Java.
09:23:19 <shapr> neither do I, but I do get paid to write it.
09:23:34 <dufflebunk> And there must be a "main" function right? (like C)
09:23:44 <dufflebunk> shapr: Wish I got paid to do something.
09:23:49 <Heffalump> there must be one in an entire program, yes
09:23:53 <Heffalump> not necessarily in each module
09:24:29 <dufflebunk> Ok, good. I was missing the "module XXXXX where" line
09:45:26 * Yurik is back (gone 23:34:07)
09:59:18 <shapr> arete: hey, what do you do with haskell?
10:00:17 <arete> well I've been reading through The Haskell School of Expression
10:00:25 <arete> its my first real attempt at learning FP
10:00:34 <shapr> ah, the Hudak book
10:00:41 <arete> but I've since grown very bored and moved on to SICP =)
10:00:46 <arete> I regret not buying the other big haskell book
10:01:06 <shapr> yah, the Thompson book is a better first book imho
10:01:18 <arete> *nod*
10:01:29 <arete> I did a bit of work porting nhc98 to macos X too
10:01:34 <shapr> wow, cool :)
10:01:44 <shapr> that's pretty deep
10:01:52 <arete> hehe well no not at all
10:01:55 <arete> just some makefile changes
10:02:02 <arete> and giving a static var an initial value =P
10:02:06 <shapr> heh
10:02:33 <arete> but hopefully my patches finally enable it to really compile and run without problems
10:02:43 <arete> lot of people submitted partial patches that never seemed to fully solve the issues
10:02:48 <shapr> imho, if you want to be a programmer, SICP is the first book you should read.
10:03:02 <shapr> also imho, the second book is "The Pragmatic Programmer"
10:03:22 <shapr> I should put up a booklist.
10:03:32 <shapr> arete: have you written any haskell code?
10:03:52 <arete> problems through chapter 5 of the book
10:04:00 <shapr> wow
10:04:02 <arete> but FP is still way beyond my comprehension
10:04:10 <shapr> I tried to start with the Hudak book
10:04:12 <arete> I've been suck in imperative land my whole life
10:04:22 <arete> C/C++/Java
10:04:23 <shapr> heh, amusing typo :-)
10:04:40 <shapr> I still spend most of my time doing procedural code
10:05:03 <shapr> Python is a nice stepping stone because it has several FP bits, and significant whitespace
10:05:11 <shapr> that's what got me to try Haskell
10:05:19 <arete> yeah I used python for some unit testing stuff, pretty fun
10:05:29 <arete> I like the syntax more than most languages
10:05:35 <arete> although I usually script with ruby these days
10:05:49 <shapr> yah, ruby is gaining in popularity
10:05:58 <arete> I got started with haskell because of the pragmatic programmers "language of the year"
10:06:03 <shapr> ah :-)
10:06:05 <arete> figure if they like ruby and want to learn haskell it can't be that bad =P
10:06:09 <arete> plus parentheses bother me =P
10:06:13 <shapr> yah, me too
10:06:22 <shapr> I think LoTY project sputtered out
10:06:28 <arete> but actually I found myself understanding lisp much better than I ever have before after some haskell
10:06:36 <shapr> but it did get a bunch of people to look at new stuff.
10:06:36 <arete> yeah seems to have
10:06:47 <shapr> Martin Fowler was in the project for awhile =)
10:07:10 <arete> who is that
10:07:28 <shapr> refactoring.com
10:07:32 <shapr> martinfowler.com
10:07:40 <shapr> he wrote the Refactoring book
10:08:23 <shapr> I use emacs a lot, so my general lisp understanding is not too bad
10:08:55 <arete> I love emacs, but have only recently started doing any elisp
10:09:04 <shapr> I'd like to try to switch my random coding tasks to Haskell, currently I use Python
10:09:07 <shapr> I'm using ERC 2.93 $Revision: 1.285 $ with XEmacs 21.4 (patch 8) "Honest Recruiter" XEmacs Lucid!
10:09:15 <arete> aside from misc hacking on my .emacs of course =)
10:09:28 <shapr> I'm using the erc client, from erc.sf.net, it's cool if you like that kind of thing :-)
10:09:41 <arete> hehe yeah I use it when my shell is down
10:09:57 <arete> but I need ssh out of my office so network admins can't see me rant about how horrible it is here =P
10:10:10 <shapr> I'd very much like to write an elisp interpreter/compiler in Haskell, replace emacs with something close, but multithreaded
10:10:17 <shapr> hah
10:10:59 <arete> I mostly do boring business type apps so I've never really seen a use for FP
10:11:18 <arete> but I've also notice myself continually repeating similar bits of code because the languages I use don't support enough abstraction
10:11:25 <arete> so I'm hoping I can find a solution within fp
10:11:29 <shapr> imho, FP is just as useful in business apps as anywhere else
10:12:24 <arete> really, how so?
10:12:40 <shapr> but I have yet to prove that to my business partner (she's also my fiancee)
10:12:52 <arete> wow
10:13:16 <arete> a programmer too?
10:13:22 <shapr> not so much
10:13:34 <shapr> she's more "get stuff done"
10:13:50 <arete> ahh well thats nice still
10:13:53 <arete> so you run your own business?
10:13:53 <shapr> so if it needs programming, she'll learn what she needs to know, but her passion is not in programming.
10:14:17 <shapr> yah, she's entirely self-employed
10:14:46 <shapr> I'm an employee for a local Java company three days a week, and the other three days I do Zope work...
10:14:58 <shapr> the Zope work is for her company, webwitches.com
10:15:05 <arete> thats my dream, to have my own company and do things the right way rather than the way some dumb manager says
10:15:12 <arete> how do you like zope?
10:15:18 <shapr> I like zope very much
10:15:23 <shapr> it's *very* powerful.
10:15:26 <arete> I do straight java/j2ee stuff 7 days a week
10:15:33 <shapr> I'm learning J2EE right now
10:15:34 <arete> almost thought about taking a zope job but I had no experience
10:15:38 <shapr> yesterday I installed tomcat :-)
10:15:41 <arete> seems like it might be a lot more fun
10:15:47 <shapr> today I compiled my first custom taglibs
10:15:50 <arete> oh hehe ok well you are gonna be my test dummy then =)
10:15:55 <arete> I'd like a comparison of zope vs that
10:16:34 <shapr> I use Jython whenever I am able, so my first complaint is that I don't like the syntax of the Java language
10:16:41 <shapr> I find it overly verbose.
10:16:52 <arete> indeed
10:16:54 <arete> and much too static
10:17:02 <shapr> absolutely
10:17:12 <arete> its so, so hard to do anything in a generic fashion
10:17:16 <shapr> yah it is
10:17:32 <shapr> one powerful thing about Haskell is that operators are functions
10:17:37 <shapr> there's no difference
10:18:10 <shapr> so if you want to define a new operator, you just write a function, and say that it's called infix
10:18:17 <arete> yeah thats really neat
10:18:36 <arete> I like the way haskell/lisp aren't so restricted on function naming
10:18:39 <shapr> do you know about partial resolution?
10:19:04 <arete> are you talking about laziness?
10:19:11 <shapr> err, hm
10:19:14 <shapr> well
10:19:18 <shapr> not exactly :)
10:19:24 <arete> oh, currying? =)
10:19:31 <shapr> yah :)
10:19:58 <arete> well a little, guess I understand the basics
10:20:06 <shapr> every multi-arg function in Haskell is single arg in and out function under the hood
10:20:40 <shapr> so partial resolution really processes that part of your function
10:20:57 <shapr> for example, if you have this function:
10:21:08 <shapr> add3 :: Integer -> Integer -> Integer
10:21:16 <shapr> add3 x y z = x + y + z
10:21:34 <shapr> and you partially resolve it like this:
10:21:34 <Igloo> ...then you have a type error  :-)
10:21:40 <shapr> umm
10:21:47 <Igloo> </not really here>\
10:21:51 <shapr> aww
10:21:58 <arete> heh
10:22:04 * shapr checks
10:22:05 <arete> one too few Integer ->'s
10:22:09 <shapr> oh
10:22:11 <shapr> duh :)
10:22:43 <shapr> Igloo: obviously ghc or hugs runs on your mental hardware quite effectively :-)
10:23:02 <shapr> well, if you partially resolve that function, for example:
10:23:19 <shapr> addFive = add3 2 3
10:23:34 <shapr> the calculation is really done
10:24:15 <shapr> it's easy to write a curry function in most any language, but it rarely does anything more than save up the vars for the final call
10:25:17 <arete> yeah haskell is quite neat
10:25:21 <arete> I like the syntax a lot
10:25:22 <shapr> I should write something on the HaskellWiki like "HaskellBusinessValue"
10:25:34 <arete> so after I finish SICP maybe I'll get the Thompson book
10:25:48 <shapr> good idea :-)
10:26:12 <shapr> the future potential of FP really interests me, transparent parallelism especially
10:26:45 <Igloo> shapr  :-)
10:27:26 <dufflebunk> God damn, another stupid newbie problem: I'm using nhc98, it's only compiling to .o, how do get it to executables?
10:28:00 <shapr> dufflebunk: I've never used nhc, only hugs a bit, and ghc a lot more
10:28:00 <arete> need to put a main in your .hs?
10:28:13 <dufflebunk> module Main where
10:28:13 <dufflebunk> main = return ()
10:28:47 <arete> hmm
10:28:56 <shapr> I usually do 'module Main where main = putStrLn "It works!"'
10:29:03 <arete> thought that was all I did..
10:29:39 <dufflebunk> $ nhc98 terst.hs
10:29:39 <dufflebunk> Function main has the type (Prelude.Monad a) => (a ()) instead of IO ().
10:29:43 <dufflebunk> $ ls
10:29:44 <dufflebunk> terst.hi  terst.hs  terst.o
10:30:04 <shapr> dufflebunk: right, try putStrLn "It works!" instead of return ()
10:30:47 <dennisb> shapr: you can't be sure the add3 2 3 actually calculates something in advance. The compiler might do it, especially if the definitions are in the same module
10:31:14 <shapr> dennisb: really? can you tell me more?
10:31:14 <dufflebunk> shapr: Yep, that works.
10:31:15 <shapr> that sounds cool
10:32:30 <dennisb> shapr: if you do g = add3 x y where the values of x and y is something you entered dynamically into the program at runtime then it will probably just store away the function pointer and the two values in a closure
10:33:34 <dennisb> I would guess the compiler does the same thing when the definitions are in different modules (separate compilations) and I'm not sure what it does when they are in the same module
10:34:05 <shapr> hm, interesting.
10:34:11 <dennisb> It will probably inline and compile it into something more efficient in that last case
10:34:33 <shapr> spiffy
10:34:44 <dennisb> you can always look at the output from gcc, you can tell it to generate the intermediate (core) code
10:34:50 <dennisb> ghc that is
10:34:59 <shapr> that's mostly how I use partial resolution, to make specific 'instances' of more generic functionality.
10:35:03 <shapr> oh good idea!
10:36:28 <dennisb> ... sorry to interrupt your other discussion ...
10:36:42 <shapr> no worries, I like more input :-)
10:37:47 <shapr> I wonder if I'll have time to read through the recent "what good is FP in the real world" thread on c.l.functional and write up a sumarry.
10:38:47 <shapr> I bring up that question every month or so here
10:39:12 <shapr> the 'hardest' piece of new data I've gotten is that Heffalump said that I/O is relatively slow in Haskell
10:39:44 <shapr> I think it had something to do with "it's slow to box and unbox ints"
10:41:18 <shapr> haskell seems *much* more orthogonal to me..
10:52:44 * Yurik is away: home
11:26:06 <dennisb> You don't have to box and unbox ints if you don't want to. You can work with unboxed values
11:26:33 <shapr> what does that mean?
11:26:46 <dennisb> It much, much faster. But you can not have lazy such values. An unboxed value is just like a value in C
11:26:48 <shapr> is a boxed int an int that includes typing information?
11:27:31 <dennisb> Yes, more or less
11:28:41 <dennisb> A boxed value is always referenced with a pointer to the value, if course if you want to create a 600000 integers you don't want every integer boxed
11:29:07 * shapr thinks about that
11:29:25 <dennisb> just ignore my grammar and it should not be hard to understand .-)
11:30:18 <dennisb> read in a file in C with 600000 integers where you do a malloc for each integer and save the pointer instead of the integer and I think it also will be slow
11:31:52 <shapr> why do you save a pointer to the int?
11:31:54 <shapr> what's the benefit?
11:32:46 <dennisb> you can have polymorphic functions since all values have the same size (size of a pointer)
11:33:06 <shapr> hmm!
11:33:11 <shapr> the light begins to dawn.
11:33:42 <dennisb> you can have lazy functions where the pointer first points on an expression that is not evaluated and then when it is evaluated it will overwrite the cell with the actual value
11:34:16 <dennisb> if you don't use the value it is not evaluated at all (that's what makes it lazy)
11:34:35 <shapr> wow, nifty
11:37:31 <dennisb> To add up two boxed integeres is to first force the two expressions into values, then follow the pointers to get the values, use the one assembler instruction to add the integers and then box the result again
11:37:47 <shapr> I seee
11:37:54 <shapr> so it's slow because everything is an expression
11:38:16 <shapr> lazyness has its cost
11:38:23 <dennisb> It's much more efficient if you have the values directly (unboxed) instead of pointers. The compiler is very good to unbox things automatically but sometimes you have to help it
11:38:24 <shapr> so how do you work with unboxed ints in Haskell?
11:38:39 <shapr> or even better, how can you help it know when to unbox stuff?
11:38:59 <dennisb> In ghc you have unboxed values, like 3#, 5# and then you have operations that works on these, like +#
11:40:18 <dennisb> An Int in ghc is just a value in a datatype like: data Int = I Int#
11:41:20 <shapr> hm, nifty
11:41:32 <shapr> kind of like Java with Integer and int
11:41:37 <shapr> I see
11:41:43 <dennisb> I don't know Java very well
11:41:58 <shapr> that's ok, it's not very cool.
11:42:05 <shapr> it does pay regularly though.
11:47:19 <dennisb> Here is a function written for ghc
11:47:23 <dennisb> import GlaExts
11:47:23 <dennisb> f x = case x of
11:47:23 <dennisb>         I# z -> I# (z +# 4#)
11:48:01 <dennisb> It takes a boxed integer and picks out the unboxed z which we can use to calculate stuff, and then the result is again boxed
11:48:14 <dennisb> http://www.haskell.org/ghc/docs/latest/set/sec-glaexts.html
11:49:26 <dennisb> But you can also write functions that have type Int# -> Int# which only works with unboxed values, and you can read a file without ever boxing all the values inside the file
11:50:54 <dennisb> but this is voodoo stuff you don't want to handle really, but somethings it's better to do things the C-way and then you can do that inside haskell if you want to
11:52:24 <dennisb> s/somethings/sometimes/
12:05:37 <shapr> mm, sandwich
12:05:48 * shapr reads
12:06:21 <shapr> hm, nifty
12:06:45 <shapr> dennisb: is there a 'correct' way to make it faster?
12:07:07 <shapr> could the compiler be smarter about unboxing Ints?
12:07:20 <shapr> is this really a major issue when using Haskell?
12:35:49 <dennisb> shapr: it's an issue in some cases, and the compiler does optimize away a lot of boxing and unboxing
12:38:41 <shapr> are there bigger issues that affect using Haskell as a general purpose language?
12:38:41 <dennisb> I don't think it's strange that if you read in a big file into an [Int] then this list is a very inefficient way to store the content.
12:40:53 <dennisb> I think this issue has a solution, don't do stupid things. Haskell is not magical, you have to understand how it is executed and how data is stored to be able to optimize for speed and memory usage
12:42:22 <dennisb> I think the programmers used to other tools are the biggest problem, together with lazyness (memory leaks)
12:42:52 <shapr> I don't think I'm used to Haskell yet.
12:46:41 <dennisb> I think you do just fine
12:47:08 <shapr> I'll be happy when I earn my Haskell black belt ;-)
12:48:06 <shapr> dennisb: have you written any cool code lately?
12:50:26 <dennisb> I played with some parser combinators, but that was just for fun
12:51:12 <dennisb> I've not written much cool stuf I'm afraid
12:51:19 <shapr> neither have I
12:51:36 <shapr> but I do write work stuff regularly, and sometimes it turns out cool.
