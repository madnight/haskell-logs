20:58:38 --- topic: '["msg an op if you can't talk", "find ops: /msg ChanServ access list #haskell", "Haskell 2010 is out: http://hackage.haskell.org/trac/haskell-prime/wiki#Status", "Haskell News: http://reddit.com/r/haskell", "The Haskell programming language", "http://haskell.org", "Paste: http://hpaste.org", "Logs: http://tunes.org/~nef/logs/haskell/"]'
20:58:38 --- topic: set by mauke on [Mon Jan 18 11:11:51 2010]
20:58:38 --- names: list (clog sgf untwisted abbe ablokzijl JimBob42 bens chaoyi medfly mmaruseacph2 augur_ Ytinasni dolio LeNsTR Philonous1 cwraith otto_s_ stolenapples u_quark trin_cz fhobia applicative Stefa1 hiptobecubic fbru02 mxc alexsuraci bo0ts__1 QinGW2 BMeph kamatsu sjanssen_ watermind nettok Niccus zenfei Saizan novas0x2a araujo path[l] Zeiris nasloc__ kpreid shrimpx miclorb lukrespangrus Jacolyte aconbere jsgf_ kmc solrize phnglui_ eagletmt ChthonLaptop)
20:58:38 --- names: list (ps-auxw perspectival Argue danly TacticalGrace weihsiu jamby roconnor lostlogic Torrieri isaacd mauke bburhans ehamberg pcc1 nlogax felipe_ emias soeren Badger And[y] FauxFaux vy ertai tencere companion_square amiri Vq lst``` kloeri Khisanth mikste jdavis drhodes sothim joed kniu DrSyzygy saccade anee dang`r`us mfoemmel gniourf_gniourf_ jystic blazzy_ rntz_ Guest52194 mahogny thetallguy +ddarius eno StoneToad merehap antoinevg Luke__ dmwit)
20:58:38 --- names: list (Raku^ amccausl det SubStack zaarg uorygl cheater TR2N beza1e1 PeakerWork inclement gds zakwilson niksnut temoto sigh astrocub _gaffer gnuvince_ tensorpudding Stinger Counter-Strike hatds ttmrichter petekaz Cale Rix k23z__ saccade_ Vanadium cheater2 stepnem mk64ftw drbean mun_ stoop potatishandlarn SamB_XP PepeSilvia Nereid_ DekuNut c9s__ kqrx kw317 |Jedai| Azstal Summermute sioraiocht chrisdone xcthulhu mattrepl ve Rotaerk jtootf_ cYmen)
20:58:38 --- names: list (Raynes cgibreak dju_ Kyrus yottis cads electrogeek jcapper hgolden jethomas thetallguy1 dfrey polux_ snorble monochrom alios J-Mad Alpounet blackh Gracenotes sproingie nomad__ njbartlett PsiOmega cactii Philippa caligula_ nathanic nyingen mikste_ dfeuer hariju mrd ystael leimy nick8325 nominolo shapr Cobra^^ Deewiant Guest83455 ezeike dabd dumael absentia eek Sup3rkiddo Feuerbach jeffS xerox cods _Jordan_ EvanCarroll jlouis jql stu2010)
20:58:38 --- names: list (equanimity DigitalKiwi mfp TML anekos Botje cjay koninkje_away mokus Baughn mun clarkb tltstc flori mmmdonuts harlekin glitch tmug srcerer zsol jontore Eelis deavid jlaire brx Carnegie MacCoaster boyscared Heffalump qm13 evilhackerdude edwinb dons integral davidL yahooooo netcat majoh kosmikus Boney gdsx Taggnostr Paradox924X jayne wto Exteris Polarina Spockz Zr40 kolmodin welterde sebbe1991 suiside michael| lament Veinor rey_ sigma_g)
20:58:38 --- names: list (khiroc thingwath poucet wagle icee KatrinaTheLamia levitation_ tataa tavelram ezrakilty franksh dixie Dashkal Aisling hackagebot sShintah amuck_ profmakx borism bd_ dreixel jones- skaar M| @quicksilver inhortte Draconx Laney ibid flux ath smiler nablaa pwerken mreggen C-S reltuk syntaxglitch Innominate willb Shimei kquick2 birkenfeld pastah_rhymez fnordus alip Peaker desu zhijie jimmyjazz14 fredcy otulp timlarson dogmaT Adamant quetzal-)
20:58:38 --- names: list (Apocalisp Igloo kar-1 ingy nothingmuch helmut wisemanby ttvd dibblego papna mansour Runar sshc thoughtpolice nimred_ daed kaol Lemmih pham rndm shawn SimonRC mornfall ibt wharrgarble mm_freak zachk1 Cthulhon| koeien_ jvogel OnionKnight_ preflex Nshag anders^^ lpsmith__ Nereid smorg ville McManiaC Guest97031 Axman6 sm theclaw Astro tilman taruti thorkilnaur jbauman Zao mlh companion_cube Tupis Ke mietek pikhq geir_ dionoea Stephan202 jre2)
20:58:39 --- names: list (shepheb Voker57 ahihi tab zacharyp jvoorhis ahf mercury^ mjv wormwood edwtjo QtPlatypus jrockway peddie sohum newsham joga rapacity cathper BrianHV webframp mdordal2 mml` leod \toothrot Dodek allbery_b bwr alexbobp danderson Gabbie emma Cyneox CalJohn__ burp jml olsner Nafai aavogt jmcarthur dax jfoutz kevinclark aiko_ mrothe fihi09 Raevel idnar kwinz lenbust_ agemo_ dino- encryptio whoppix p_l jaredj ClaudiusMaximus oeblink djahandarie)
20:58:39 --- names: list (aleator_ StarFire mux Ornedan OscarZ keseldude noddy shortcircuit koala_man luite_ trez prigaux __marius1_ endojelly t ziman mattam qeb`away ski pettter Arnar sieni_ Liskni_si deadguys_ matthew-_ ToRA kakeman int-e fritschy jayrk _br_ sbok tkr dcolish +lunabot magicman|sleep epmf osfameron liesen stroan impl Gilly BONUS_ diginux Twigathy elly geoaxis orbitz stephen_mcd tromp ray andrewsw AnMaster MoALTz_ eelco jleedev tarbo inimino jonafan)
20:58:39 --- names: list (benmachine tomoj wdonnelly lavish wang Tomas byorgey ido_ mee jix kynky zax bran pem epokal snhmib BONUS myriachromat nniro @ChanServ Sisu smg mjrosenb baaba nornagon Twey djinni erg Vulpyne_ shachaf Beelsebob DarthShrine hellige lambdabot dqd arjanoosting sereven bbee juhp o-_-o Ferdirand glith saiam jtra Valodim gbacon bob0 dcoutts karld Jiten kalven etpace dilinger_ helgikrs CalJohn nathanic_work1 Draconx|Laptop gbeshers tamiko prb_)
20:58:39 --- names: list (hiredman EEEuler dfdf joni6128 Mr_Awesome anji jorizma sahazel nwf AndyP fabjan)
21:01:06 <uorygl> Aww, now I'm lacking the curses headers that Agda requires.
21:01:15 <uorygl> Apparently.
21:02:20 <uorygl> So I should use aptitude to install... libncurses5? ncurses-bin? ncurses-dev?
21:02:34 <dmwit> -dev is your best bet
21:02:35 <Axman6> hte last one i'd say
21:02:38 <kamatsu> ncurses-dev
21:02:44 <kamatsu> you might also need libncurses5
21:02:54 <dmwit> -dev likely depends on lib5
21:04:04 <uorygl> And now it's "cabal: alex version >=2.0.1 && <3 is required but it could not be found."
21:05:49 <dmwit> cabal install alex >=2.0.1&&<3
21:05:52 <SamB_XP> kamatsu: generally the -dev package pulls in the runtime package ;-P
21:06:07 <dmwit> oh, whoops
21:06:12 * uorygl does `cabal install alex` and hopes for the best?
21:06:14 <dmwit> cabal install "alex >= 2.0.1 && < 3"
21:06:21 <dmwit> uorygl: right!
21:07:41 <uorygl> And now cabal is installing 77 of 191. This will take a while.
21:11:29 <meanburrito920_> from ghci how might I inspect the inside of a Maybe variable?
21:12:01 <uorygl> You can generally inspect anything by typing its name.
21:12:07 <kmc> is it type (Maybe a), where «a» is an instance of Show?
21:12:29 * SamB_XP goes off on a tangent and imagines making a "best viewed with lynx" banner to put on webpages
21:13:00 <cwraith> SamB_XP: if you make the banner a *really* ugly graphic, it can be self-fulfilling
21:13:35 <meanburrito920_> uorygl: right, but I dont just want to know what the type is, i want to know if its Nothing or Just whatever
21:13:44 <meanburrito920_> which isnt told to me by the type info
21:13:46 <uorygl> @type isJust
21:13:47 <lambdabot> forall a. Maybe a -> Bool
21:13:56 <meanburrito920_> nice, thanks
21:15:22 <meanburrito920_> uorygl: hm. for some reason, it is hanging on me. any Maybe besides the type I am working with seems to work fine though...
21:15:30 <kmc> write a «case» expression
21:15:54 <uorygl> meanburrito920_: well, it sounds like your expression hangs.
21:16:01 <SamB_XP> what's with the katakana?
21:16:22 <kmc> where?
21:16:32 <SamB_XP> ï½«caseï½»
21:16:37 <meanburrito920_> uorygl: i dont understand why that would be  though. there doesnt seem to be anything in the type definition that would cause a hang
21:16:43 <kmc> those are guillemets
21:16:50 <meanburrito920_> kmc: i tried that and it didnt help :(
21:16:54 <kmc> lern 2 utf8
21:17:02 <uorygl> Hmm. What do you call something like fix id that is, in a sense, strict in all its arguments?
21:17:17 <uorygl> I guess you just call it bottom.
21:17:35 <uorygl> meanburrito920_: well, the types alone won't cause a hanging; something must be happening at the value level.
21:17:37 <mtnviewmark> no, I hink Â«theseÂ» are guillemets
21:17:40 <uorygl> Seeing your code would help a lot.
21:18:18 <dmwit> uorygl: fix id is more than just strict in all its arguments; it's strict in *no* arguments =P
21:18:34 <SamB_XP> mtnviewmark's things DO look a lot more like guillemets must look
21:18:39 <kmc> urg
21:18:43 <kmc> maybe my client sux
21:18:46 <SamB_XP> since I gather their some sort of brackety thingy
21:18:49 <SamB_XP> er. they're.
21:18:51 <uorygl> "I am strict in all, and I am strict in none. You may find me lurking at the end of the universe."
21:18:56 <kmc> they both show as guillemets on my end
21:19:04 <dmwit> kmc: No, your first guillemets were fine.  It was just SamB_XP's that screwed up.
21:19:13 <meanburrito920_> uorygl: hm. it seems to be working fine now. I think i ended up deleting some intermediate values in ghci by importing another module on top of the file i had loaded
21:19:19 <SamB_XP> dmwit: what, me?
21:19:20 <dmwit> or maybe MY client is screwed up!
21:19:27 <mtnviewmark> though, in Unicode they are technically LEFT/RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
21:19:30 <dmwit> SamB_XP: Yes, you!
21:19:35 * dmwit starts singing the cookie-jar song
21:19:37 <SamB_XP> kmc: could you say those things again ?
21:19:42 <kmc> which
21:19:48 <SamB_XP> dmwit: but I didn't get those cookies from a jar!
21:19:54 <kmc> «LEFT/RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK»
21:19:55 <SamB_XP> they were in a plastic box!
21:20:40 <uorygl> Is there any character that doesn't occur in Unicode character names?
21:20:52 <uorygl> I think some of them have lowercase letters, and some of them have commas.
21:20:59 <dmwit> I thought unicode character names were all-ASCII.
21:21:00 <SamB_XP> I admit it IS possible my x-chat somehow ended up defaulting to the system-default encoding, which is presently shift-JIS ...
21:21:13 <dmwit> So... yes, there's a lot of characters that don't occur in Unicode character names.
21:21:16 <mtnviewmark> uorygi - are you asking about the "names" of Unicode characters?
21:21:35 <mtnviewmark> they are all uppercase-latin plus some small set of punctuation
21:21:38 <pikhq> SamB_XP: ... Shift-JIS, as a system encoding?
21:21:44 <pikhq> UTF-8 that.
21:21:50 <mtnviewmark> alas, my Unicode 5 standard is at work
21:22:00 <uorygl> Well, yeah. Any ASCII characters that don't occur in Unicode character names, preferably ones that look like separators?
21:22:02 <pikhq> (I say the same of all non-Unicode character encodings)
21:22:04 <SamB_XP> pikhq: *that* does not please the odd japanese-origin Windows app!
21:22:25 <dmwit> SamB_XP: Windows, as a system operator?
21:22:27 <dmwit> nix that
21:22:28 <SamB_XP> hey, most people use codepage 1251 ;-P
21:22:44 <uorygl> Is that the one with a smiley face for NUL?
21:22:47 <pikhq> SamB_XP: ... Windows as an OS *not* running virtualised?
21:22:59 <SamB_XP> my hardware is too pathetic to virtualize it!
21:23:49 <SamB_XP> (also, how the heck could I even attempt to reverse-engineer my Adaptoid without running it on the bare metal?)
21:24:02 <uorygl> Well, so far, programming is fun. Yesterday, I decided to get of my bum and do something; today, I installed Ubuntu, Cabal, Happstack and Agda. Tomorrow, I might actually write some code.
21:24:10 <pikhq> Windows-1251 ought to be shot...
21:24:30 <mtnviewmark> uorygi: http://www.unicode.org/versions/Unicode5.2.0/ch04.pdf
21:24:33 <mtnviewmark> section 4.8
21:24:41 <mtnviewmark> Name-Normative
21:25:11 <uorygl> Can the contents of that be briefly summarized? I've got to go.
21:25:22 <mtnviewmark> A-Z 0-9 SPACE and HYPHEN-MINUS
21:25:32 <mtnviewmark> nothing else is allowed
21:31:03 <uorygl> Huh.
21:33:25 <kmc> beer++
21:33:50 <SamB_XP_> rebootitis--
21:38:15 <omizzle> Hey, is anyone around to answer a quick question?
21:38:34 <mtnviewmark> no one here but 584 of us chickens....
21:38:49 <dmwit> Don't ask to ask, just ask. ;-)
21:38:51 <Axman6> book book bukarrr
21:39:02 <omizzle> Haha, lot of good points there.
21:39:15 <mtnviewmark> pecks... lots of pecks here!
21:39:18 <omizzle> I was wondering if there is a Haskel bundle for TextMate
21:39:23 <Axman6> omizzle: what dmwit said is the number one rule of IRC
21:39:33 <Axman6> omizzle: there is indeed
21:39:47 <Axman6> it's not great, but it does highlighting, and there's not all that much more you need
21:40:00 <kmc> wacka wacka
21:40:06 <omizzle> Axman6: I typically dont find myself asking for help in IRC channels, so Im new in that respect :P
21:40:15 <kmc> don't ask to ask to ask, just ask to ask
21:40:35 <mtnviewmark> join ask
21:40:39 <kmc> indeed :)
21:40:43 <Axman6> "Would anyone mind if i asked if i could ask a question?"
21:40:43 <omizzle> And awesome, syntax highlighting is better than no highlighting (looking at you TextEdit)
21:40:47 <mtnviewmark> :t join ask
21:40:48 <lambdabot> forall (m :: * -> *) a. (MonadReader (m a) m) => m a
21:40:53 <mtnviewmark> :-)
21:40:53 <tensorpudding> return question
21:40:54 <kmc> hehe
21:41:24 <dmwit> Now that is a weird type.
21:41:30 <dmwit> :t ask
21:41:31 <lambdabot> forall (m :: * -> *) r. (MonadReader r m) => m r
21:41:42 <kmc> hmm
21:41:55 <Axman6> @instances MonadReader
21:41:56 <lambdabot> r ((->) r), r (ErrorT e m), r (RWS r w s), r (RWST r w s m), r (Reader r), r (ReaderT r m), r (StateT s m), r (WriterT w m), r' (ContT r m)
21:41:57 <mtnviewmark> okay - I think that means I've achieved some sort of level with Haskell: Making Haskell Code Jokes
21:42:04 <kmc> haha
21:42:06 <kmc> indeed
21:42:14 <kmc> now code us a zygohistomorphic prepromorphism
21:42:16 <Axman6> argh
21:42:47 <dmwit> Ah!
21:42:59 <mtnviewmark> kmc!  Stop giving away the details of my upcoming Functional Pearls paper!
21:43:03 <dmwit> :t runReader
21:43:04 <lambdabot> forall r a. Reader r a -> r -> a
21:43:11 <lament> > Just ask
21:43:11 <lambdabot>   No instance for (GHC.Show.Show (m r))
21:43:12 <lambdabot>    arising from a use of `M3058576772...
21:43:24 * SamB_XP_ wants to see a pyromorphism
21:43:25 <dmwit> > runReader (join ask) (return 3)
21:43:26 <lambdabot>   Occurs check: cannot construct the infinite type:
21:43:26 <lambdabot>    m = Control.Monad.Read...
21:43:28 <kmc> lambda the ultimate kitchen utensil
21:43:31 <dmwit> hrm
21:43:43 <dmwit> :t runReader (join ask)
21:43:44 <lambdabot> Top level:
21:43:44 <lambdabot>     Occurs check: cannot construct the infinite type: r = Reader r a
21:43:44 <lambdabot>       Expected type: Reader r a
21:43:59 <dmwit> Oh bother.
21:44:30 <SamB_XP_> trying to code up the Y combinator?
21:44:30 <monochrom> Heh heh heh
21:44:39 <mtnviewmark> > runReader (join ask) (Just 42)
21:44:40 <lambdabot>   Couldn't match expected type `Control.Monad.Reader.Reader
21:44:40 <lambdabot>                  ...
21:44:52 <mtnviewmark> :t runReader
21:44:53 <lambdabot> forall r a. Reader r a -> r -> a
21:45:01 <dmwit> :t Fix
21:45:02 <lambdabot> Not in scope: data constructor `Fix'
21:45:28 <dino-> I was just thinking that: isn't fix the Y?
21:45:53 <mm_freak> > fix (\r x y -> x : r y (x+y)) 0 1
21:45:54 <lambdabot>   [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
21:45:56 <kmc> fix is much like Y yes
21:45:58 <dino-> :t Data.Function.fix
21:45:59 <lambdabot> forall a. (a -> a) -> a
21:46:13 <kmc> Haskell has recursive «let» so we don't need to jump thru hoops like Y
21:46:44 <mm_freak> > let gcd' r x 0 = x; gcd r x y = r y (x `mod` y) in fix gcd' 12 15
21:46:45 <lambdabot>   * Exception: <interactive>:1:157-170: Non-exhaustive patterns in function g...
21:46:53 <mm_freak> > let gcd' r 0 y = y; gcd r x y = r y (x `mod` y) in fix gcd' 12 15
21:46:54 <lambdabot>   * Exception: <interactive>:1:157-170: Non-exhaustive patterns in function g...
21:47:11 <mm_freak> oh
21:47:19 <mm_freak> > let gcd' r x 0 = x; gcd' r x y = r y (x `mod` y) in fix gcd' 12 15
21:47:20 <lambdabot>   3
21:48:14 <Axman6> @src gcd
21:48:14 <lambdabot> gcd 0 0 = error "Prelude.gcd: gcd 0 0 is undefined"
21:48:14 <lambdabot> gcd x y = gcd' (abs x) (abs y)
21:48:14 <lambdabot>    where gcd' a 0  =  a
21:48:14 <lambdabot>          gcd' a b  =  gcd' b (a `rem` b)
21:48:15 <Axman6> >_>
21:48:53 <mm_freak> i wonder what that >_> smiley expresses
21:49:02 <mm_freak> i always think it's some kind of combinator
21:49:05 <dino-> :t (>_>)
21:49:06 <lambdabot> parse error on input `)'
21:49:12 <xle> Hey all... Could errors like the following be caused by the fact that mysql is 64-bit on snow leopard and ghc is running 32-bit? "ld: warning: in /usr/local/mysql/lib/libmygcc.a, file is not of required architecture"
21:49:39 <kmc> yes
21:49:44 <SamB_XP_> most definitely
21:49:53 <kmc> si señor
21:50:02 <kmc> slash señorita
21:50:11 <xle> alright... any ideas how I can get around this?
21:50:18 <kmc> install 64 bit ghc
21:50:21 <kmc> or 32 bit mysql
21:50:21 <Axman6> compile mysql 32 bit
21:50:21 <amuck_> Is there an easy way to convert a ByteString to a ByteString.Char8?
21:50:22 <xle> i'm trying to get hdbc-mysql to work on os x
21:50:36 <Axman6> kmc: there is not 64 bit GHC for OS X
21:50:45 <kmc> Axman6, that's a sad story
21:50:54 <Axman6> no*
21:50:57 * kmc hoards his bits jealously
21:51:00 <Axman6> it is indeed
21:51:04 <xle> wow this is terrible...
21:51:04 <kmc> > maxBound :: Int
21:51:05 <lambdabot>   9223372036854775807
21:51:09 <dmwit> amuck_: unsafeCoerce ;-)
21:51:11 <Saizan> amuck_: Data.ByteString and Data.ByteString.Char8 are the same type
21:51:17 <Axman6> considering OS X is a fully 64 bit OS now
21:51:19 <xle> i really need my mysql backend up and running
21:51:46 <xle> and I get another error when i try hdbc-odbc: odbc: SqlError {seState = "[\"HY010\"]", seNativeError = -1, seErrorMsg = "connectODBC/alloc dbc: [\"0: [iODBC][Driver Manager]Function sequence error\"]"}
21:52:05 <Saizan> amuck_: the difference is between strict and lazy bytestrings, the latter come from the modules with .Lazy in their names
21:52:48 <amuck_> Saizan: I'm using a Data.ByteString.Lazy and I want to convert it to a string, but the functions all give Word8 instead of Char
21:53:11 <Saizan> amuck_: import Data.ByteString.Lazy.Char8 instead
21:53:13 <amuck_> If I use Char8 then the functions that want a Word8 don't work
21:53:25 <Saizan> import both, qualified :)
21:53:47 <amuck_> And then I have to unsafeCoerce?
21:53:50 <Saizan> no
21:53:59 <Saizan> they export the same type
21:54:08 <Saizan> only some of the functions differ
21:55:44 <Saizan> amuck_: also, note that unpack will expect the content of the bytestring to be in latin1
21:56:13 <amuck_> Saizan: Ok, thanks
21:56:14 <amuck_> That works
21:56:31 <xle> how can i compile ghc 64-bit on os x?
21:56:47 <SamB_XP_> xle: you can't!
21:56:57 <SamB_XP_> I mean, unless you're really really really damn smart
21:57:09 <xle> SamB_XP_: :)
21:57:15 <SamB_XP_> with loads of time on your hands
21:57:16 <Saizan> xle: http://hackage.haskell.org/trac/ghc/ticket/2965
21:57:18 <kmc> you can compile ghc 64-bit on os x by submitting patches to ghc
21:57:23 <kmc> and people will love you forever
21:57:45 <SamB_XP_> kmc: forever?
21:57:55 <kmc> probably
21:59:41 <mtnviewmark> doesn't GHC compile 64 bit on other intel platforms?
22:01:43 <kmc> yes
22:03:07 <xle> Saizan: Thanks.. it seems there is still nothing clear
22:03:42 <xle> kmc: I don't think I have the skills to make the patches
22:03:51 <o-_-o> is there some example around where image files are loaded and manipulated in haskell
22:04:07 <o-_-o> this is preferably without using some FFI to some external C library
22:05:20 <tomoj> o-_-o: this may be helpful, dunno if you found it too http://stackoverflow.com/questions/792221/haskell-image-processing-library
22:06:02 <o-_-o> wow cool thanks tomoj
22:06:12 <dmwit> o-_-o: bacteria is a pretty simple program that just loads some images and centers them in rectangles the size of the current screen
22:06:17 <dmwit> http://dmwit.com/bacteria
22:06:21 <dmwit> You might like to peruse its code.
22:06:26 <tomoj> also http://book.realworldhaskell.org/read/code-case-study-parsing-a-binary-data-format.html
22:06:35 <tomoj> though that's probably too toyish?
22:07:12 <dmwit> o-_-o: Do you want to know about the image formats, or do you just want to see some code that calls a library?
22:07:29 <dmwit> If the former, follow tomoj's advice; if the latter, follow mine. =P
22:08:09 <tomoj> yeah I tend to get too deep into things :(
22:08:49 <omizzle> is haskell.org working fine for anyone? cause it seems like im back on dial-up on my end
22:09:41 <tomoj> down for me too
22:11:45 <o-_-o> thanks dmwit
22:12:03 <o-_-o> dmwit, I want to look at some code, that loads binary files and works with them
22:13:05 <tomoj> isn't that what bacteria does?
22:13:17 <dmwit> that, and not much else
22:13:22 <o-_-o> I want to know if it is efficient to work with binary files in haskell, or I should always use the ffi to do those things in C/C++
22:13:49 <tomoj> given that you have to install the GD library, I bet it's using GD?
22:13:57 <dmwit> yes
22:13:59 <kamatsu> o-_-o: of course it can be done efficiently in haskell
22:14:17 <dmwit> It can be done efficiently in Haskell... but it generally isn't, because it's already done efficiently in another language.
22:14:18 <tomoj> it's just a lot of work when someone already did it in C, eh?
22:14:20 <dmwit> Code reuse, etc.
22:14:27 <kamatsu> yeah
22:14:31 <o-_-o> If I have a file a few GBs in size with binary data, can I do the processing in haskell ? Even if it is slightly slower it is ok, it just shouldn't be abyssmally slow
22:14:43 <kamatsu> well, the language doesn't define how slow it is
22:14:48 <kamatsu> your algorithms define how slow it is
22:15:07 <tomoj> I would like to learn about processing lots of data in parallel in haskell..
22:15:23 <o-_-o> I have a dumb question, do haskell programs run on a VM ?
22:15:23 <dmwit> ?hackage binary
22:15:23 <lambdabot> http://hackage.haskell.org/package/binary
22:15:29 <erikc> o-_-o:  are there predictable access patterns?
22:15:37 <o-_-o> erikc, yes
22:15:39 <kamatsu> o-_-o: yes? why wouldn't they?
22:15:42 <dmwit> o-_-o: That package is typically quite fast for mucking about with custom binary file formats.
22:15:55 <Saizan> o-_-o: if you end up storing the whole content of such a file in memory at once, just make sure you're using a compact datastructure to hold it
22:16:10 <o-_-o> kamatsu, no I meant does haskell use anything like the JVM ?
22:16:30 <Saizan> o-_-o: GHC compiles to native code
22:16:32 <kamatsu> o-_-o: oh, no
22:16:34 <tomoj> is your few GB file an image? :O
22:16:36 <o-_-o> or are the haskell programs comipled to native code
22:16:36 <kamatsu> o-_-o: most implementations don't
22:16:41 <o-_-o> tomoj, 3D image
22:16:44 <dmwit> GHC does include a runtime system in every program, of course.
22:16:46 <erikc> o-_-o: a lazy bytestring from getContents will work nicely for streamed access iirc
22:16:53 <dmwit> But that's not really a VM.
22:17:06 <erikc> you can use data binary to parse off of it
22:17:09 <Saizan> it's an OS :)
22:17:15 <dmwit> heh, yeah
22:17:39 <o-_-o> dmwit, how does the runtime system differ from a VM ? Is it like a glibc that is put in every binary, doesn't it make the binary files bigger ?
22:18:11 <tomoj> any idea what are the minumum memory requirements for the runtime are?
22:18:14 <erikc> it's like glibc
22:18:19 <erikc> just bigger
22:18:49 <dmwit> I'm not sure what "doesn't it make the binary files bigger" means.
22:18:49 <o-_-o> erikc, ah...ok
22:18:51 <dmwit> Bigger than what?
22:18:52 <Saizan> it can be linked dynamically, since 6.12, afaiu
22:18:55 <Cale> It does make the binary files larger, in that it's statically linked. It contains a garbage collector, a thread scheduler, and any other machinery needed to evaluate/execute Haskell code.
22:19:04 <o-_-o> dmwit, say equivalent C binaries
22:19:10 <Cale> (typically statically linked, anyway)
22:19:23 <o-_-o> if I wrote some bublesort in C and haskell, haskell binary would be bigger ?
22:19:27 <dmwit> o-_-o: You might be surprised by what I consider "equivalent" C code to look like.
22:19:37 <o-_-o> dmwit, :-)
22:19:40 <kamatsu> bubblesort in haskell would not be fun
22:19:41 <dmwit> =)
22:19:43 <Cale> o-_-o: Almost surely.
22:19:59 <Axman6> o-_-o: well, C doesn't have a runtime compiled along with it
22:20:01 <o-_-o> dmwit, it would be 'fail' to talk about source code
22:20:06 <kamatsu> Axman6: yes it does
22:20:29 <kmc> o-_-o, Haskell is a programming language, not an implementation
22:20:29 <kamatsu> Axman6: a very small one, but it does
22:20:32 <kmc> it can be implemented various ways
22:20:46 <kmc> for example YHC compiles to bytecode which would be interpreted
22:20:47 <Cale> Of course we're all talking about GHC, really
22:20:48 <kmc> as does GHCi
22:20:51 <kmc> but GHC compiles to native code
22:20:57 <dmwit> Anyway, to avoid being cagey: GHC does create rather enormous binaries, yes.
22:21:04 <o-_-o> kmc, but it is currently implemented as GHC or HUGS
22:21:06 <kmc> which makes calls into a standard library of runtime support funcgtions
22:21:19 <kmc> o-_-o, there are a number of Haskell implementations
22:21:23 <kamatsu> GHC's large binaries are often because most haskell programs use more than the standard libraries
22:21:28 <dmwit> o-_-o: GHC, Hugs, YHC, NHC, ...
22:21:34 <kmc> UHC
22:21:37 <o-_-o> but GHC is the best ?
22:21:38 <Cale> I wouldn't really call them enormous. They're large, but not so large that you should notice.
22:21:44 <kamatsu> if you write a sorting program in a few lines of haskell, the binary will be relatively small
22:21:47 <SamB_XP_> I would say that there probably isn't any equivalent C unless you are writing truly horrible Haskell code ;-P
22:21:49 <kmc> GHC is the most actively developed
22:21:56 <o-_-o> Cale, ok
22:22:06 <Axman6> and the most advanced in many ways
22:22:08 <kmc> but you shouldn't say things like "Haskell is compiled" or "Haskell is interpreted", because a variety of implementations could and do exist
22:22:14 <kmc> same for any languag
22:22:14 <kamatsu> the largest Haskell program i've compiled recently was 40mb executable
22:22:22 <o-_-o> kmc, ok
22:22:28 <kamatsu> but admittedly it included Loli, rack, happstack-state and probably more i forgot
22:23:13 <o-_-o> can't GHC create non-statically linked binaries ?
22:23:19 <kmc> it can now
22:23:21 <dmwit> Brand new in GHC 6.12!
22:23:22 <kamatsu> 6.12 can
22:23:36 <kmc> or rather it could always, but now it can create binaries which link to *other Haskell code* dynamically
22:23:57 <kmc> but we still require information beyond the .o file to link to a library
22:24:01 <kmc> that's what the .hi files are for
22:24:46 <kamatsu> so 6.12's .so's will have accompanying .hi's?
22:25:00 <kamatsu> somewhat like C .so's have accompanying .h's?
22:25:23 <kamatsu> or do the .hi files need to be present at run-time?
22:25:42 <kmc> no, compile time only
22:25:47 <o-_-o> is there a tutorial about this anywhere ?
22:25:53 <kmc> but i'm not entirely sure if the .hi files get stashed anywhere
22:26:10 <dmwit> o-_-o: oooo, you should write one!
22:26:12 <kmc> i imagine it follows the pre-6.12 convention for static linking
22:26:13 <o-_-o> so if I do a cabal install, that installs a what ?
22:26:15 <mtnviewmark> @hoogle  (a -> [a]) -> [a] -> [[a]]
22:26:16 <lambdabot> Prelude mapM :: Monad m => (a -> m b) -> [a] -> m [b]
22:26:16 <lambdabot> Control.Monad mapM :: Monad m => (a -> m b) -> [a] -> m [b]
22:26:16 <lambdabot> Prelude concatMap :: (a -> [b]) -> [a] -> [b]
22:26:23 <dmwit> o-_-o: package
22:26:27 <o-_-o> dmwit, sure
22:26:28 <kmc> and just happens to defer the actual object-file-level linking until runtime
22:26:48 <o-_-o> ah...
22:27:00 <erikc> does it re-typecheck the boundary at load-time?
22:27:23 <dmwit> I think it checks a magic number.
22:27:38 <kmc> i don't think any typechecking is done at load or run time
22:27:48 <cwraith> does it use as much memory at runtime as ld does when linking haskell statically?
22:28:02 <SamB_XP_> cwraith: of course not
22:28:05 <cwraith> whew
22:28:28 <SamB_XP_> ld.so is much less dumb than ld -- plus, it doesn't have to search through ar files
22:29:31 <SamB_XP_> I'm thinking ld is something like O(n^2) in number of .o files ;-P
22:29:52 <erikc> ld is pretty bad, ld on windows is a gong show
22:30:04 <kmc> ehehe
22:30:09 <avizit> Hi,
22:30:14 <SamB_XP_> what makes it worse on Windows?
22:30:23 <kmc> donggggggg
22:30:25 <SamB_XP_> it's not like it fork()s mid-link ?
22:30:27 <o-_-o> so if I am benchmarking haskell code, should I take the runtime linking into consideration ?
22:30:37 <avizit> Is this the place to ask newbie questions or there is a separete newbie channel ?
22:30:41 <cwraith> I was astounded (doubly) seeing ld use 800 MB of ram linking a simple web app.  (the second case of being astounded was that it was on a virtual machine that only had 256 MB allocated to it.  the sheer pain of that much swapping...)
22:30:44 <o-_-o> avizit, ask here
22:30:46 <SamB_XP_> avizit: this is it!
22:30:52 <erikc> SamB_XP_:  ive never looked into it, i just know its about 10x slower from experience
22:31:01 <SamB_XP_> we have newbs of all sizes, colors, and experience levels ;-P
22:31:13 <cwraith> I'm an experienced newb! :)
22:31:24 <cwraith> (and that's actually pretty accurate)
22:32:05 <avizit> why do i get "not in scope input" for the following part of my code http://hpaste.org/fastcgi/hpaste.fcgi/view?id=16378#a16378
22:32:34 <dmwit> Well, where blocks don't share values with do blocks.
22:32:53 <dmwit> You can turn pastdata into a function, and pass the value of "input" into it.
22:33:28 <avizit> ah let me try that . thanks.
22:34:42 <dmwit> Also, you might like list comprehensions.
22:34:56 <dmwit> [[myRead word | word <- words line] | line <- lines input]
22:36:00 <o-_-o> that is a cool construct...
22:36:01 <avizit> that is way beyond my comprehension. :)
22:36:58 <kmc> doubtful
22:54:13 <omizzle> is there a difference in the types between 5/2 and 5.0/2.0
22:54:54 <omizzle> specifically the numbers used in the operation and the result
22:55:36 <Saizan> ?type (/)
22:55:37 <lambdabot> forall a. (Fractional a) => a -> a -> a
22:55:43 <Saizan> ?type 5.0
22:55:44 <lambdabot> forall t. (Fractional t) => t
22:55:49 <Saizan> no difference.
22:55:54 <o-_-o> does anyeone has the list of haskell papers at PADL/PEPM ?
22:56:04 <o-_-o> s/has/have
22:56:10 <Saizan> the notations and (/) only work on instances of Fractional
22:56:41 <omizzle> Im sorry, that doesnt really make sense to me -_-;
22:57:16 <Saizan> basically, in haskell there's no automatic coercion between numeric types like in other languages
22:57:26 <omizzle> Ah
22:57:26 <Saizan> though numeric literals are polymorphic
22:57:43 <omizzle> Okay. Thanks.
22:58:16 <Saizan> btw, if you need division for integers you can use div
22:58:23 <omizzle> I only know Java at the moment, and 5/2 and 5.0/2.0 are different beasts :P
22:58:42 <kmc> in Haskell, there are no implicit conversions
22:58:46 <kmc> but there is polymorphism
22:59:00 <Saizan> in haskell they are the same, but both can be used for more than one type
22:59:07 <Saizan> >  5/2 :: Double
22:59:08 <lambdabot>   2.5
22:59:09 <kmc> «2» has type «(Num a) => a», meaning that it can be "instantiated" to any concrete type which is a member of the typeclass «Num»
22:59:13 <Saizan> >  5/2 :: Rational
22:59:14 <lambdabot>   5 % 2
22:59:38 <kmc> 2.0 is similar but only for the typeclass «Fractional»... everything in «Fractional» is in «Num» but not vice versa
22:59:48 <kmc> :t (/)
22:59:49 <lambdabot> forall a. (Fractional a) => a -> a -> a
23:00:03 <kmc> so the binary operator «/» operates only on types that are in the typeclass «Fractional»
23:00:05 <o-_-o> I want to ask jvoight for the conference proceedings of PADL/PEPM, but I am sitting on the fence as I am a newbie and it would probably for waste :-|
23:00:15 <kmc> meh just read the papers anyway
23:00:16 <o-_-o> s/for/go
23:00:29 <o-_-o> kmc, they aren't available online
23:00:32 <kmc> :(
23:00:47 <o-_-o> but he seems to have a few dead tree copies he is ready to give away
23:00:58 <kmc> ah
23:01:00 <kmc> how archaic
23:01:07 <o-_-o> I was wondering if anyone good in haskell should get it, or I should ask
23:01:10 <o-_-o> heh
23:02:16 <o-_-o> anyway I will ask him, I am in India, the chances of getting it are pretty remote anyway, I can't even get a book on haskell here
23:02:56 <kmc> india :O
23:03:01 <o-_-o> I get like geography books written by someone with a first name as haskell, when I ask for haskell books
23:03:09 <o-_-o> bleh
23:03:20 <kmc> but if you got a Haskell book it would be printed on tissue paper and would cost $1.29
23:03:31 <kmc> at least all the books my colleagues ordered from India were like this
23:03:33 <o-_-o> kmc, very true
23:04:09 <o-_-o> kmc, the eastern editions are cheaper, but they are just paper backs, the paper quality is not much different, only the price is like really low
23:04:46 <lament> paperback books look so sad
23:05:06 <o-_-o> but ordering a western edition via amazon is like a months paycheck...heh
23:05:09 <lament> paperback says, "you'll throw me away in 10 years"
23:05:37 <o-_-o> but they are easier to hold and read, not like I am doing weight training or anything
23:05:46 <omizzle> oh my god, string comparisons using just == is...fantastic
23:06:07 <kmc> omizzle, you mean like every language except C?
23:06:08 <o-_-o> omizzle, which was your previous language ?
23:06:11 <tensorpudding> you appreciate paperbacks when you have to move
23:06:12 <omizzle> Java
23:06:17 <kmc> oh dear
23:06:32 <kmc> yeah you have to use a AbstractStringComparisonFactory
23:06:33 <omizzle> kmc: I expect that reaction everywhere I go :P
23:06:34 <o-_-o> omizzle, my condolences, how is the theraphy going ?
23:07:16 <o-_-o> Public Static Void Main (String Args[]) is all I remember
23:07:27 <o-_-o> and it didn't compile
23:07:42 <omizzle> "String".equals("String") is a little convoluted in my opinion.
23:07:46 <Saizan> you should lowercase most of them :)
23:07:49 <tomoj> it's not just convoluted
23:07:51 <tomoj> it's totally wrong
23:08:02 <kmc> operator overloading is touchy
23:08:04 <o-_-o> saiam, but only some of them :-)
23:08:09 <dibblego> public static void main(String[] args)
23:08:16 <kmc> C++ goes wild with it
23:08:21 <kmc> Haskell has it a bit more under control
23:08:25 <tomoj> "String" is a value, you use equality to compare values..
23:08:25 <james_britt> Hey all
23:08:39 <kmc> i think it's definitely a bad idea to let people overload operators without letting them define new ones
23:08:41 <kmc> hi james_britt
23:08:43 <omizzle> To me, "String" is an object, haha.
23:08:54 <tomoj> it could be an object if objects were values
23:08:58 <kmc> what's an "object"? a terrible confusion of state, identity, and value.
23:09:00 <tomoj> but in java, they aren't :(
23:09:16 <james_britt> Is there someone who can help me get past a issue rebuilding  ghc 6.12.1?
23:10:17 <omizzle> Im trying to broaden my programming knowledge here, though. I tried some brainfuck and it was fun, but not very serious. Im trying to give Haskell a serious attempt.
23:10:32 <kmc> omizzle, good :)
23:10:45 <tensorpudding> the whole thing about java is confusing, i'm not sure what the motivating reason for thinking it is a good idea
23:10:50 <tensorpudding> is
23:11:04 <dibblego> so confusing that everyone has been wrong so far :)
23:11:12 <kmc> tensorpudding, Java is great if you need to throw lots of average-intelligence programmers at a boring business problem
23:11:20 <omizzle> Dont ask me, I learn it because they teach it.
23:11:34 <dibblego> Java is never great, for any problem, including social problems
23:11:35 <james_britt> I picked a busy time to ask for help :)
23:12:06 <kmc> if those mediocre programmers were using C++ there would be no limit to the damage they could cause
23:12:15 <omizzle> AP Comp Sci before and now a repeat in college. Haskell is a release, if you ask me :P
23:12:18 <kmc> Java limits the damage that one programmer can do
23:12:33 <kmc> partially by limiting how much one programmer can do, period
23:12:33 <o-_-o> kmc, who says they aren't, have seen Windows ME ?
23:12:46 <kmc> o-_-o, isn't that like a decade old?
23:12:49 <p_l> kmc: but makes for greater damage to programmers mind if it's their first language
23:12:53 <o-_-o> kmc, Window Vista ?
23:12:58 <james_britt> Can anyone give me a hand with a GHC build issue?
23:12:58 <tomoj> omizzle: same endpoints for me, though a longer path :)
23:12:59 <p_l> Vista was fine
23:13:09 <kmc> indeed, i meet many people who think a computer is a machine for executing Java source code
23:13:12 <kmc> it's depressing :/
23:13:38 <tensorpudding> a jvm is
23:13:41 <dibblego> Java is never good *especially for mediocre programmers*
23:13:44 <tomoj> james_britt: try just saying what the issue is
23:13:44 <p_l> kmc: I've got an exam in Algorithmic Problem Solving... somehow, I didn't expect to need to know Swing API
23:13:51 <omizzle> tomoj: how long is this path?
23:13:54 <kmc> :O
23:13:59 <tensorpudding> hmm
23:14:05 * p_l needs to write Swing event handlers without Swing reference
23:14:14 <james_britt> GHC 6.12.1 fails when rebuilding becuase of some conflict with a newer version of Cable. http://hpaste.org/fastcgi/hpaste.fcgi/view?id=16380#a16380
23:14:23 <tomoj> omizzle: well, not too long. 6 years from java, php, java again, ruby, clojure, to haskell
23:14:24 <james_britt> Cabal, rather
23:14:32 <tensorpudding> i guess java is cross-platform in a way that few languages of the mid-90's were
23:15:10 <kmc> i really do not see the big deal there
23:15:14 <p_l> tensorpudding: Java is cross-platform in theory
23:15:16 <kmc> so you don't have to run the compiler a few times
23:15:18 <kmc> great
23:15:32 <kmc> since when was running the compiler the great obstacle to cross platform support
23:15:42 <p_l> tensorpudding: Java has exactly the same amount of cross-platformness as Perl, Python, REXX etc.
23:15:46 <kmc> there are portable libraries for every language
23:15:48 <omizzle> tomoj: for me its: python, long break (forgot most python), java, brainfuck, and now attempting haskel.
23:15:53 <tensorpudding> and it's garbage-collected, and has a saner object model than C++
23:15:56 <omizzle> haskell*
23:16:17 <dibblego> Java marketing equivocates on that matter by purporting to be cross platform (so? big deal?), but then says "yeah but the code will "do the same thing on all platforms" (which is not true, but a common myth)
23:16:47 <p_l> tensorpudding: actually, Common Lisp might be more portable due to abstraction over certain system facilities like pathnames (still, logical pathnames are... crazy). And I had seen Java code that isn't portable outside of single *build* of JVM
23:16:58 <tensorpudding> common lisp might be more portable
23:17:29 <kmc> i hear Haskell is better than every other language
23:17:29 <tomoj> omizzle: well, don't give up easily. it can be confusing when, as someone said, most everyone else has it wrong, but it's worth it :)
23:17:30 <tensorpudding> did clos exist back then?
23:17:44 <kmc> i'm sure this is a controversial view here
23:17:53 <dibblego> amusement: when I was working on IBM's J2EE implementation, which depends on IBM's Java implementation (which I also worked on), the dependency matrix got down to service releases, then build dates, then build times
23:17:58 <o-_-o> kmc, that is marketing hokey, java is supposedly better :-)
23:18:07 <p_l> tensorpudding: CLOS made into ANSI, but some implementations took time to implement it well :D
23:18:23 <tensorpudding> i like haskell because it feels good
23:18:25 <omizzle> tomoj: I plan on sticking to it. This weekend will be partly devoted to it
23:18:31 <p_l> *cough*GCL*cough*
23:19:05 <tensorpudding> lisp had the downside of a lot of antipathy
23:19:08 <kmc> @remember tensorpudding i like haskell because it feels good
23:19:08 <lambdabot> Done.
23:19:15 <tensorpudding> heh
23:19:17 <tomoj> omizzle:  if you like video and don't mind the talk about microsoft's stuff, there is a lecture series on channel9
23:19:27 <p_l> tensorpudding: shit happens
23:19:31 <tensorpudding> that's the least embarressing thing i've said that was @remembered
23:19:53 <kmc> @quote tensorpudding
23:19:53 <lambdabot> tensorpudding says: they need to do way instain monads who confuse haskell noobies
23:19:58 <kmc> @quote tensorpudding
23:19:58 <lambdabot> tensorpudding says: >>= reminds me of a pair of chopsticks grabbing chow mein
23:20:03 <kmc> @quote tensorpudding
23:20:03 <lambdabot> tensorpudding says: so you boil lisp for an hour to sift out the parentheses and impurities, make a whitespace sauce with liberal syntactic sugar, and you have haskell a la mode
23:20:36 <tensorpudding> i don't remember that middle one, i must have been drunk
23:20:52 <omizzle> @tomoj: Im actually checking out learnyouahaskell.com
23:20:52 <lambdabot> Unknown command, try @list
23:21:09 <Saizan> that's quite good
23:21:29 <o-_-o> tensorpudding says: lolcategory demands moarphisms
23:21:39 <o-_-o> tensorpudding says: lolcategory demands moarphisms
23:21:43 <o-_-o> er
23:21:55 <quicksilver> o-_-o is clearly the prophet of tensorpudding
23:22:01 <quicksilver> teach us his words! ;)
23:22:03 <tensorpudding> dammit
23:22:06 <o-_-o> quicksilver, no
23:22:25 <o-_-o> I am just looking for funny quotes
23:22:55 <mtnviewmark> @hoogle (a -> b) -> (c, a) -> (c, b)
23:22:55 <lambdabot> Data.Graph.Inductive.Query.Monad mapSnd :: (a -> b) -> (c, a) -> (c, b)
23:22:55 <lambdabot> Data.Graph.Inductive.Query.Monad (><) :: (a -> b) -> (c -> d) -> (a, c) -> (b, d)
23:22:55 <lambdabot> Data.Graph.Inductive.Graph emap :: DynGraph gr => (b -> c) -> gr a b -> gr a c
23:23:08 <kmc> @djinn (a -> b) -> (c, a) -> (c, b)
23:23:08 <lambdabot> f a (b, c) = (b, a c)
23:23:11 <tensorpudding> i tried learning ocaml, but i had a lot of trouble not disliking it for superficial reasons
23:23:15 <Dashkal> I'm trying to implement a monad for either but I'm getting a compile error that I can't understand: http://hpaste.org/fastcgi/hpaste.fcgi/view?id=16381#a16381
23:23:51 <mtnviewmark> what does djinn tell me?
23:23:58 <kmc> a term with that type
23:24:24 <kmc> mtnviewmark, «f» itself returns an Either value
23:24:28 <dibblego> Dashkal, Right $ f v is not the right type
23:24:31 <kmc> you shouldn't wrap it in «Right»
23:24:43 <kmc> err
23:24:44 * Dashkal facepalms
23:24:44 <kmc> sorry
23:24:47 <kmc> Dashkal, not mtnviewmark
23:24:56 <Dashkal> Oh look, it works
23:25:12 <mtnviewmark> indeed --- I was about to write the same thing -- only not to myself -- I think -- er....
23:25:34 <dmwit> -- therefore you are --
23:25:49 <mtnviewmark> isn't there an arrow function for mapSnd?
23:26:02 <mtnviewmark> ==> or some such
23:26:08 <cwraith> :t second
23:26:09 <lambdabot> forall (a :: * -> * -> *) b c d. (Arrow a) => a b c -> a (d, b) (d, c)
23:26:22 <cwraith> that one?
23:26:58 <mtnviewmark> perhaps.....
23:27:07 <dmwit> second :: Arrow (~>) => (a ~> b) -> ((bleh, a) ~> (bleh, b))
23:27:08 <mtnviewmark> :-)
23:27:20 <cwraith> > second (+5) ("foo", 1)
23:27:21 <lambdabot>   ("foo",6)
23:28:21 <brooksbp> does haskell have references?
23:28:42 <cwraith> Two types of them, if you really need them.
23:28:46 <cwraith> IORef and STRef
23:29:16 <brooksbp> Are they completely type safe?
23:29:39 <cwraith> Assuming you don't use unsafe access to them (like unsafePerformIO), yes
23:30:54 <brooksbp> Is there any documentation on stack allocation in haskell?
23:32:32 <cwraith> That's not one I know the answer to, but several people around here do know that pretty well.  (also, that's implementation specific, but GHC is the most common implementation)
23:32:48 <Adamant> is there a pragma or something to forbid any use of the unsafe functions in your code?
23:33:07 <dmwit> no
23:33:48 <dmwit> I imagine there's plenty of libraries that you wouldn't be able to use with such a pragma.
23:34:25 <olsner> grep -r --include=*.hs unsafe
23:34:39 <Adamant> yeah. I'm mostly thinking about something that throws an error if you try to compile your code with them in
23:34:43 <dmwit> ack unsafe # shorter and better
23:34:49 <Adamant> not so much other people's code
23:35:05 <dmwit> But it's not unsafe when *I* write it. ;-)
23:35:12 <Adamant> yes, I know I can just scan the code
23:35:20 <olsner> grepping for unsafe will almost work, but I guess some functions don't have "unsafe" in them but are still possibly unsafe
23:35:58 <olsner> ack, I remember trying to use that a while ago, don't remember what it was that made it unusable
23:36:08 <cwraith> listToMaybe = unsafeCoerce
23:36:44 <cwraith> that's safe!  in ghc!  probably!
23:37:41 <olsner> yeah, that might actually work, assuming that (Just a | Maybe) and ([a] | []) and (Foo a | Bar) have the same representation... and if you don't write the proper restrained type signature it's just unsafeCoerce
23:37:57 <tibbe> .
23:37:57 <cwraith> Well, yes.  It does need the correct type signature.
23:38:09 <cwraith> And it does appear to work in ghc, but you can never really be 100% sure
23:38:10 <dmwit> olsner: In fact, your grep command is wrong!  This is why ack is better. =)
23:38:17 <olsner> dmwit: yeah, I know
23:38:21 <dmwit> ok =)
23:38:30 <Adamant> I'm thinking more about, some people collaborating on something, and want to keep folks from using unsafe stuff unless it's absolutely required.
23:38:37 <olsner> missing the . that you always forget
23:39:15 <olsner> I guess one solution is code reviews, and conventions like "don't use unsafe functions"
23:39:33 <cwraith> really, use of unsafe functions is pretty rare outside of libraries
23:39:46 <Adamant> yeah, I don't think this is a major problem
23:40:46 <Adamant> just would be nice to have something you could put in the stock compiler flags stuff to banninate it.
23:41:23 <Dashkal> Commit hook perhaps?
23:42:32 <c_wraith> tibbe, have you seen this?  http://www.galois.com/blog/2010/01/20/tech-talk-a-scalable-io-manager-for-ghc/
23:42:42 <tibbe> c_wraith: yes
23:43:41 <c_wraith> I'll probably be there.  looks interesting
23:43:47 <Adamant> Dashkal: thanks, gives me somewhere to look at least :)
23:43:51 <tibbe> c_wraith: I'll try to make it as interesting as I can
23:44:12 <c_wraith> no pressure.  The topic should take care of most of that.
23:44:27 <tibbe> :)
