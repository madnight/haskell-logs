00:00:22 <Dae_> tolkad, seems like the anti-thesis of the programs I usually try to write. They need to do everything very fast
00:17:13 <wolf_> #oop
00:18:01 <Maxdamantus> Can lists be constructed without the cons operator or the [] syntax?
00:18:27 <Maxdamantus> @src (:)
00:18:28 <lambdabot> Source not found. :(
00:18:30 <Maxdamantus> @src :
00:18:30 <lambdabot> Source not found. Sorry about this, I know it's a bit silly.
00:19:02 <Jafet> The two constructors of [] are (:) and [], so no
00:19:40 <Jafet> data [a] = (a:[a]) | [], or however it would be written
00:20:39 <Nereid> the [] comes first
00:21:19 <Nereid> at least, if you want its Ord instance to behave as if it was derived
00:22:00 <olsner> > "" < " "
00:22:01 <lambdabot>   True
00:22:33 <ClaudiusMaximus> > do { return 4 ; return 5 } :: [Int]
00:22:34 <lambdabot>   [5]
00:25:54 <ddarius> @src []
00:25:54 <lambdabot> data [] a = [] | a : [a]
00:29:30 <Maxdamantus> > "foo" :: ([] Char)
00:29:31 <lambdabot>   "foo"
00:29:36 <Maxdamantus> O_o
00:29:49 <tolkad> Maxdamantus: what's strange about that?
00:29:54 <tolkad> :k []
00:29:55 <lambdabot> * -> *
00:30:01 <tolkad> :t "foo"
00:30:01 <Maxdamantus> Nothing.
00:30:01 <lambdabot> [Char]
00:30:41 <tolkad> :k [] ->
00:30:42 <lambdabot> parse error (possibly incorrect indentation)
00:30:45 <tolkad> :k ([] ->)
00:30:46 <lambdabot> parse error on input `)'
00:30:53 <tolkad> :k (->) []
00:30:54 <lambdabot>     `[]' is not applied to enough type arguments
00:30:54 <lambdabot>     Expected kind `??', but `[]' has kind `* -> *'
00:31:10 <tolkad> :k (->) ([] a)
00:31:11 <lambdabot> Not in scope: type variable `a'
00:31:16 <tolkad> :k forall a. (->) ([] a)
00:31:17 <lambdabot>     `(->) ([] a)' is not applied to enough type arguments
00:31:17 <lambdabot>     Expected kind `*', but `(->) ([] a)' has kind `? -> *'
00:31:22 <tolkad> :k forall a. (->) ([] a) a
00:31:23 <lambdabot> *
00:32:06 <tolkad> @let type X = Int
00:32:06 <lambdabot>  Invalid declaration
00:32:14 <tolkad> is there anyway to define types in lambdabot?
00:34:06 <c_wraith> not unless you're running your own instance
00:34:19 <tolkad> @let a=(.).(.) in let b=a.a.a in let c=b.b.b in let d=c.c.c in let e=d.d.d in let f=e.e.e in let g=f.f.f in let h=g.g.g in let i=h.h.h in let j=i.i.i in let k=j.j.j in let l=k.k.k
00:34:19 <lambdabot>   Parse error: KW_In
00:34:24 <tolkad> @let a=(.).(.) in let b=a.a.a in let c=b.b.b in let d=c.c.c in let e=d.d.d in let f=e.e.e in let g=f.f.f in let h=g.g.g in let i=h.h.h in let j=i.i.i in let k=j.j.j in let l=k.k.k in l
00:34:25 <lambdabot>   Parse error: KW_In
00:34:34 <tolkad> well that's descriptive
00:34:50 <tolkad> @let a=(.).(.) in let b=a.a.a in let c=b.b.b in let d=c.c.c in let e=d.d.d in let f=e.e.e in let g=f.f.f in l
00:34:50 <lambdabot>   Parse error: KW_In
00:35:00 <tolkad> oh
00:35:04 <Maxdamantus> That just loses the @let when it's written.
00:35:13 <tolkad> > let a=(.).(.) in let b=a.a.a in let c=b.b.b in let d=c.c.c in let e=d.d.d in let f=e.e.e in let g=f.f.f in let h=g.g.g in let i=h.h.h in let j=i.i.i in let k=j.j.j in let l=k.k.k in l
00:35:17 <lambdabot>   mueval-core: Time limit exceeded
00:35:17 <tolkad> there we go
01:15:32 <Blkt> good morning everyone
01:35:23 <Maxdamantus> There's no way to embed expressions into patterns, right?
01:35:26 <ClaudiusMaximus> any gtk2hs users can tell me how to update an image widget's display after poking pixels into its pixbuf?
01:35:55 <sipa> Maxdamantus: how d you mean?
01:36:01 <c_wraith> Maxdamantus, view patterns?
01:38:06 <Maxdamantus> So you could do something like: foo x y = case y of {x} -> 42; n -> x + n
01:38:28 <Maxdamantus> and have it actually check for the value in the variable x
01:39:19 <Palmik> Hi guys, is it possible to write bit by bit to binary file?
01:39:48 <Palmik> Or do I have to convert to whole byte first?
01:39:56 <Maxdamantus> Rather than writing the function as: foo x y | x == y = 42 | x + y
01:40:13 <Maxdamantus> (Dunno how | works without line breaks)
01:40:31 <Maxdamantus> > let foo x y | x == y = 42 | x + y in foo 8 8
01:40:33 <lambdabot>   <no location info>: parse error on input `in'
01:40:47 <Maxdamantus> > let foo x y | x == y = 42 | otherwise = x + y in foo 8 8
01:40:48 <lambdabot>   42
01:42:04 <quicksilver> Maxdamantus: no, because that's not what 'case' means.
01:42:13 <quicksilver> Maxdamantus: (==) exists at a different level of abstraction to 'case'.
01:42:33 <quicksilver> just use the guard, that's what it's for.
01:42:53 * hackagebot syb 0.2.2 - Scrap Your Boilerplate  http://hackage.haskell.org/package/syb-0.2.2 (JosePedroMagalhaes)
01:43:40 <Maxdamantus> Ah, right.
01:44:52 <Maxdamantus> Wasn't planning on doing that in Haskell, just wondering about my language idea :p
01:46:53 <ClaudiusMaximus> hm, progress - i get displayed pixbuf but it only updates when i resize the window...
01:49:15 <ddarius> Maxdamantus: Were you the one I told to read the pattern calculus paper, and if so, did you read it?
01:49:55 <Maxdamantus> ddarius: the one that said "lambda calculus is boring" or something?
01:50:09 <Maxdamantus> If so, no, I had a lecture a minute aftero fields for function pointersin the struct, complete with userdata fields, and call these functions compositionally by hand
18:15:57 <aristid> a colleague claimed that that would be too difficult to understand. bah.
18:17:53 <JoeyA> Well, I think once you learn Haskell, you just try to get the job done in C so you can go back to programming in Haskell :D
18:18:20 <cads> shoot, someone on IRC suggested a couple weeks ago that research into toposes has become a dead end
18:18:23 <JoeyA> meaning the code you write in C is more straightforward
18:18:27 <JoeyA> (by you, I mean me)
18:18:36 <cads> oh, wrong channel
18:18:41 <aristid> cads: what is a "toposes"?
18:18:49 <dbelange> topoi, worst foundations
18:18:56 <cads> was it you, dbelange?
18:19:00 <aristid> worst foundations?
18:19:13 <aristid> and what is a "topoi"?
18:19:20 <cads> aristid, a topose is some sort of category that looks like a set theory inside
18:19:31 <dmwit> "topoi" is the plural of "topos", a kind of theory of surfaces (I think)
18:19:50 <dmwit> I am thinking of something else, sorry.
18:19:55 <kmc> a topos is like a category but more so
18:20:15 <kmc> and is supposed to be "a category you can do logic in"
18:20:20 <kmc> but is also related to topology yes
18:20:58 <cads> Someone said that as foundations they're a dead end.
18:21:50 <cads> But I don't understand why that should mean they're not useful for doing actual work
18:22:14 <cads> I don't know much about them though
18:22:48 <cads> I know they were invented for algebraic topology type stuff, but I've also see CS writers talk about them.
18:24:43 <cads> Hmm
18:25:09 <cads> I need to introduce myself to all these sheafs and topologies and topoi and junk
18:25:59 <cads> But it's not easy to get the background needed.
18:26:27 <cads> Everyone seems to use them to talk about some high level concept or another in whatever field they're using the structures in
18:27:42 <kmc> yeah
18:27:49 <kmc> well that is what CT is for
18:28:03 <kmc> it's a bit like the person who asks "what are monads" and is instead given a bunch of examples of monads
18:28:09 <kmc> in Haskell
18:29:44 <cads> I can learn about sheaves and topoi in plain CT without lots of other math going on?
18:30:10 <aristid> kmc: learnign by example works pretty well, so that's not necessarily a bad thing, is it?
18:30:35 <Saizan> aristid: depends on the examples
18:30:54 <Saizan> if they require a lot of background you don't have they are not that helpful :)
18:31:28 <narens> can anyone explain why when I compile my program on a 64bit ubuntu machine with static flags I don't get an error, and when i compile it on 32bit arch machine with static flags I get mkTextEncoding: invalid argument error when I run it? Google pointed to something to do with iconv, but I don't understand... any ideas?
18:31:59 <Saizan> (which is the same situation haskell newbies that ask that question are in wrt understanding haskell monads)
18:32:10 <aristid> Saizan: well that's true for all methods, isn't it?
18:33:24 <cads> aristid, it feels like I'd have to learn homotopy to get any kind of feeling about what we do with sheaves :P
18:34:06 <Saizan> aristid: the point is that CT is often like that, you get a concise and abstract description of something, so you look for examples but they are drawn from some unknown math field
18:34:18 <Saizan> well, unknown to a poor CS student like me :)
18:34:26 <aristid> Saizan: ah :D
18:34:55 <aristid> Saizan: maybe there could be more CS examples
18:35:38 <cads> Sometimes CS examples feel contrived :)
18:37:06 <Saizan> i guess your best bet at that point is to go back to the context where you first found the particular concept
18:38:16 <cads> I like to find papers
18:39:04 <cads> I found that a textbook I was reading was really just describing a theory the author wrote in the 60s
18:39:41 <cads> and the paper actually helped a lot
18:40:18 <ManateeLazyCat> Saizan: I got "undefined reference to ... _getDataDir2_closure" error when i use Cabal function 'getDataDir', i miss something in .cabal ?
18:41:18 <cads> I liked the paper, which just described the theory without trying to be didactic
18:41:41 <Saizan> ManateeLazyCat: try putting Paths_yourpackagename in other-modules:
18:42:07 <cads> The book discribed the theory a bit at a time, while introducing set theory concepts, and I had a hard time keeping the axioms of the theory straight.
18:43:28 <ManateeLazyCat> Saizan: Wow, fixed! Thanks. :)
18:43:38 <Saizan> np
18:43:43 <ManateeLazyCat> Saizan: Thanks for tip. :)
18:59:06 <cads> someone has the answer about how to formulate a quantum theory that doesn't bring up the renormalized infinities commonly known
18:59:13 <cads> the answer: Topos theory!
18:59:14 <cads> http://topos-physics.org/
19:31:19 <cads> Can I think of a type as a set?
19:32:35 <augur> cads: yes
19:32:45 <Saizan> cads: do you know how the work on that link compare to the many world interpretation?
19:33:03 <aristid> @hoogle SevenOf9
19:33:03 <lambdabot> No results found
19:33:10 <aristid> hoogle! :/
19:33:35 <cads> Saizan, no idea, I can't tell that the guy is not a crank
19:33:49 <augur> theres lots of work trying to relate physics and category theory
19:33:49 <cads> A paper he links to is pretty neat though http://arxiv.org/abs/physics/0301044
19:33:50 <augur> among other things
19:34:51 <cads> Seems to talk about observers of physical theories inside other toposes, which might use other kinds of logic.
19:37:12 <cads> it's amazing that someone can talk about this seriously without being crazy
19:37:56 <Saizan> why should he be?
19:38:42 <cads> I'm used to reading cranks, I guess :)
19:41:53 <cads> well, I'm going to reserve judgement till I've read the paper
19:42:59 <tux0> wow my monitor can't handle this channel it just poped/hissed and blanked the picture :\
19:57:55 <Saizan> cads: considering that intuitionistic logic needs heyting algebras as a model instead of boolean ones it doesn't seem so much of a stretch to bring in topology for "quantum logic"
20:18:41 <blackdog> how embarrassment: http://amplicate.com/hate/haskell "Java (I solve problems with classes)"
20:19:35 <blackdog> (and i know i shouldn't feed the trolls, so i won't comment, but i'd be more concerned if the critics were literate or made logical arguments...:)
20:19:39 <kmc> who cares
20:20:09 <blackdog> kmc: indeed the proper response, and one i'm trying to train myself into.
20:21:33 <aristid> blackdog: on the internet, for every topic you will find somebody who hates it
20:21:46 <kmc> i don't expect everyone in the world to love haskell
20:21:56 <kmc> that's true for every language and it's double-true here
20:22:04 <blackdog> aristid: i'm not surprised to see it up there. just gently amused.
20:23:08 <blackdog> and the "I solve problems with classes" just summons this image of this guy with a hammer in his hand who's gleefully using it on everything he finds
20:24:24 <kmc> of course FP enthusiasts look like that to the rest of the world
20:24:49 <kmc> but i do find Haskell to be a refreshing break from the authoritarian regime of "everything must be an object"
20:25:03 <kmc> OO techniques are still feasible if it's what you really need
20:25:32 <blackdog> shouldn't be surprised if you use OO techniques and don't get much benefit out of haskell, though.
20:25:53 <blackdog> I've had some very frustrating conversations with smart rubyists where we just end up talking past each other
20:26:02 <blackdog> "how do you do subtyping?" "MU"
20:27:23 <kmc> i think there's a lot of benefit to static typing, type inference, non-terrible syntax, good compiler, etc.
20:27:34 <kmc> which is there even if you write in an OO or IO-heavy style
20:28:03 <kmc> i think we probably put off a lot of people by saying they have to buy deep into our philosophy before they'll get any benefit
20:28:12 <blackdog> how would you approach Haskell in an OO way?
20:28:23 <kmc> eh it's been written about e.g. on the wiki
20:28:31 <blackdog> I know every time someone asks a question like that here, they usually get told "don't do that"
20:29:00 <dons> its non-obvious to me that all of computation should be built from data structures storing methods with internal state. i mean you can, sure, but its a heavyweight place to start.
20:29:05 <aristid> blackdog: http://cale.yi.org/index.php/A_look_at_OO_from_Haskell
20:30:03 <aristid> dons: but there must be some reason why so many languages moved that way.
20:30:29 <aristid> i mean, not saying these are reasons to actually do it, just from a historical perspective
20:30:41 <blackdog> aristid: and cale explicitly notes there that it doesn't give you subtyping. you have to start using existentials etc.
20:30:43 <dons> its certainly a flexible model, and the emphasis on componentization is good for scaling up teams
20:30:45 <kmc> there's a reason why so many people speak English and Mandarin, but it's not because they're technically the best languages
20:30:56 <kmc> i like http://www.paulgraham.com/reesoo.html
20:31:07 <kmc> "Perhaps part of the confusion - and you say this in a different way in your little memo - is that the C/C++ folks see OO as a liberation from a world that has nothing resembling a first-class functions, while Lisp folks see OO as a prison since it limits their use of functions/objects to the style of (9.)."
20:31:14 <Cale> You don't get subtyping, but I don't really consider subtyping as essential to OO.
20:31:35 <kmc> as the article points out, OO as generally taught confounds together a bunch of things
20:31:49 <aristid> blackdog: i think you CAN do subtyping if you want
20:31:54 <kmc> including some which are basic and fundamental (first-class functions, encapsulation, abstract data type)
20:32:06 <blackdog> Cale: OO's a slippery term, i suppose. I'm using it to mean the way languages like Java are used, where it really is quite extensively used.
20:32:12 <kmc> and others which are particular design choices (mutation, subtyping, ad-hoc polymorphism)
20:32:24 <kmc> Java is not a good OO language
20:33:18 <Cale> I usually think of smalltalk
20:33:28 <Philippa> I don't think you can call it OO if you haven't got something at least analogous to subtyping, personally. Or really, to interfaces
20:33:44 <blackdog> kmc: again, i wouldn't argue it is. but it's the model most people are using when they complain about haskell, i think (with very little evidence to back that up, admittedly)
20:33:56 <kmc> for almost any language feature you like, Java and C++ serve as a strawman argument against that feature
20:34:10 <aristid> Philippa: interfaces and subtyping are something different, i think
20:34:19 <kmc> blackdog, i don't care too much about the complaints against haskell, except when they include outright falsehoods
20:34:25 <Philippa> aristid: depends how you squint at it, somewhat
20:34:26 <Cale> Smalltalk is untyped (okay, *dynamically* typed), but if it had a type system, then the type of an object would consist of the types of the messages that it is prepared to respond to.
20:34:28 <kmc> then i wonder if we can improve our educational materials
20:34:45 <blackdog> kmc: yes. it's a tactical thing, not a matter for moral outrage.
20:35:01 <aristid> haskell could use somewhat better records tho :>
20:35:06 <hiredman> there was a staticly typed smalltalk, strongtalk
20:35:39 <kmc> i still think we should re-release Haskell under another name and market it as "the pragmatic alternative to Haskell"
20:35:57 <blackdog> dons: I do wonder about the componentisation thing. the argument for Java is always "it's not a great language, but look at the libraries!"
20:35:58 <Cale> kmc: haha
20:36:19 <blackdog> i've spent the last three weeks in java and grails, and half of the big-name, supported libraries are just broken
20:36:24 <kmc> "A language with the theoretical beauty of Haskell, combined with practical features like C foreign calls, lightweight threading, Unicode support, and a large and growing archive of BSD-licensed libraries"
20:36:48 <Cale> kmc: Then the Haskell people can get on with more important things than success!
20:36:51 <blackdog> and half of the time, they're broken because the layering has conspired to create a situation where it's not really clear whose responsibility something really is.
20:36:52 <kmc> we can see if it works for Racket
20:37:51 <kmc> "The default RequestProcessorFactoryFactory is the RequestProcessorFactoryFactory.RequestSpecificProcessorFactoryFactory. It creates a new processor instance for any request. In other words, it allows the request processor to have some state. This is fine, if the request processor is a lightweight object or needs request specific initialization. In this case, the actual request processor is created and invoked when calling RequestProces
20:37:51 <kmc> sorFactoryFactory.RequestProcessorFactory.getRequestProcessor(XmlRpcRequest)."
20:38:25 * blackdog is sad because he can't tell if that's real or not
20:38:30 <kmc> http://ws.apache.org/xmlrpc/apidocs/org/apache/xmlrpc/server/RequestProcessorFactoryFactory.html
20:38:34 <aristid> HAHAHAHA
20:38:59 <Philippa> mmm. And people complain about monad transformer stacks.
20:39:12 <kmc> on one level, it's cheap to mock abstraction, Haskell has functions of type (((p → q) → r) → s) too.  on the other hand, they usually don't need 2 pages of docs
20:39:32 <blackdog> i have to deliver this grails project, and i've ended up writing a ruby+sinatra version, just so that when i get an error, i don't get 366 line stack traces, none of which is in my code.
20:40:09 <Philippa> to be fair, we could probably use better docs on a lot of our more abstract stuff
20:40:31 <Cale> kmc: They need an academic paper, and an undocumented type signature in the haddock ;)
20:40:36 <kmc> hehe
20:40:36 <aristid> Philippa: yes!!
20:40:42 <kmc> Cale's right
20:40:43 <blackdog> perhaps more tutorial-style docs? the types+haddock are usually enough for the detailed stuff.
20:40:57 <aristid> blackdog: um often the haddock is incomplete
20:40:59 <aristid> which sucks
20:41:03 <aristid> or even missing
20:41:08 <kmc> i'm really enjoying the yesod blog enumerator tutorial
20:41:15 <kmc> it's a lot more comprehensible than the haddock
20:42:50 <kmc> the less you overengineer, the less you have to document
20:43:05 <Cale> I've been finding the yesod tutorials fun to watch, but fairly opaque in various ways, mostly because of the quasiquoting stuff.
20:43:56 <kmc> Haskell libs usually have a small, powerful, abstract API.  what they lack in docs is examples of how to put together these very abstract things to solve concrete problems
20:44:20 <Cale> The paper is the documentation :)
20:44:54 <kmc> Java libs have large weak APIs, and many pages devoted just to telling you which classes exist and how they relate and what their methods are
20:45:00 <aristid> or, optimally the thesis. but the thesis must be from 9 years ago and completely outdated.
20:45:04 <kmc> i don't think we should envy that sort of documentation
20:45:04 <Saizan> papers have survived a round of peer review at least
20:45:39 <kmc> i guess i'm saying the ideal Haskell library has one page of Haddock and ten pages of example code
20:45:57 <Cale> Yeah, despite the jab at poorly haddocked libraries, I don't really have anything against this way of managing things.
20:45:59 <aristid> uu-parsinglib is the optimal example of haskell documentation
20:46:40 <kmc> one problem is that it's harder to keep examples up to date
20:47:35 <aristid> man, i'm so rotating between xml libraries every 2 hours
20:52:17 <EvanR> xml may have a schema to help you do that
20:53:08 <kfish> kmc, hear hear! examples!
20:53:11 <aristid> EvanR: is that supposed to be a joke? :P
20:53:17 <EvanR> yes
20:54:34 <aristid> EvanR: in revenge i will tell you what my current problem is. namely, HaXml does not support parsing from bytestring. but the improper support for bytestring was originally why i stopped looking at xml, because xml supports ByteString but only for ascii (!) characters. but if HaXml is string-only, then that is no real difference. i think hxt doesn't really support ByteString either.
20:55:33 <aristid> funnily there is hxthelper, which implements "proper" ByteString parsing if i see it correctly, but in an awful interface (as always with hxt)
20:56:02 <EvanR> is it possible to provide anything proper / not awful to support xml?
20:56:08 <Cale> Does hxt support sharding? ;)
20:56:13 <EvanR> gaaah
20:56:36 <aristid> Cale: no, it's not web scale
20:57:19 <aristid> EvanR: i think i might just say "fuck it" and rely on the fact that i always get utf8, and pass that as a String. but then suddenly xml is an option again
20:58:32 <aristid> i mean all i want to do is parse some XML and put it in a couple of different ADTs, depending on what the request was. no need for hxt/HaXml crazy filtering
21:04:21 <mwc> quit
21:21:34 <bos> it's surprisingly hard to find real-world large xml files by googling.
21:22:17 <aristid> bos: wikipedia as xml?
21:22:21 <dons> huh. you'd think some of the open gov/ open data dumps would be easy to find
21:22:26 <dons> i guess they're 'deep'
21:22:30 <dons> deep web. 
21:23:19 * dons digs for pdx xml dumps
21:23:48 <bos> aristid: wikipedia is too big.
21:23:57 <bos> i'm looking for something around 100MB in size.
21:24:14 <aristid> bos: maybe a small-language wikipedia? :D
21:24:18 <bos> i can easily find 100KB, or 10GB, but not so easily something in between.
21:24:20 <bos> aristid: hee!
21:24:49 <pumpkin> data.gov might have something?
21:25:09 <pumpkin> there was another open datasets website out there
21:25:14 <pumpkin> but data formats vary a lot :/
21:25:17 <bos> aristid: you're a frickin' genius. that actually worked.
21:25:25 <aristid> \o/
21:27:36 <bos> turns out that a dump of finnish language wiktionary edits is just the thing!
21:27:54 <aristid> and it also contains non-ascii characters
21:27:58 <aristid> perfect
21:28:06 <Adamant> yay Finland
21:28:18 <aristid> bos: what are you testing?
21:29:39 <bos> aristid: text processing performance.
21:29:59 <aristid> bos: do you have an attoparsec xml parser?
21:30:31 <aristid> .oO(100 mb is just the limit of what fits, in parsed form, in bos' machine's memory)
21:30:54 <bos> aristid: i don't
21:31:19 <aristid> bos: but parsing xml without an xml parser doesn't make sense :)
21:35:05 <aristid> bos: ok so you don't want to tell what you're doing, other than "testing text processing performance"?
21:35:34 <bos> aristid: that is exactly and preciselyt all
21:36:06 <aristid> but "text processing" can mean everything and nothing?
21:36:25 <pumpkin> text being the library, maybe?
21:36:31 <pumpkin> rather than abstract notion of text
21:37:41 <bos> aristid: http://gist.github.com/619254
21:38:29 <kmc> what's the point of it being xml in particular?
21:38:42 <bos> because that's the test case i've been asked to look at.
21:40:41 <aristid> ah
21:43:26 <bos> i think i'm going to switch text over to using hg/git tonight.
21:43:31 <bos> darcs makes me sad.
21:44:49 <pumpkin> aww
21:45:04 <lispy> Is ST pure or impure?  It's mutable, but does that count as a side effect?
21:45:26 <lispy> bos: huh, any bug reports?
21:45:38 <pumpkin> lispy: I'd say externally pure
21:45:50 <djahandarie> lispy, he did write a blog post
21:46:01 <pumpkin> blog report!
21:46:04 <lispy> djahandarie: link?
21:46:28 <pumpkin> http://www.serpentine.com/blog/2010/10/10/why-i-dont-use-darcs-any-more-much/
21:46:33 <djahandarie> Damn
21:46:35 <djahandarie> Beat to it
21:50:28 <Axman6> lispy: it's pure on the outside, impure on the inside. sounds pretty human to me
21:51:46 <bos> dons: btw, i got reading of Double values via text down to 1 million per second, 0.3 million if i have to multiple by a power of 10
21:52:36 <Cale> You probably mean up to that value ;)
21:52:57 <bos> up, down, let's call it "signless delta"
21:53:04 <bos> "more betterer"
21:53:15 <aristid> > 1/300E3 - 1/1E6
21:53:16 <lambdabot>   2.3333333333333336e-6
21:53:24 <aristid> > (1/300E3 - 1/1E6) * 1E9
21:53:25 <lambdabot>   2333.3333333333335
21:53:58 <dons> nice, bos.
21:54:24 <bos> i'd like to benchmark against bytestring-lexing and pure C stdio/strtod too, time permitting.
22:04:14 <bos> i'm becoming pretty jaded about stream fusion.
22:04:35 <bos> it's awesome, except for all the times it slows code down by a huge factor.
22:07:21 <kmc> why does that happen?
22:08:24 <bos> it's pretty easy to turn a constant-time operation into one that takes linear time, quite by accident
22:09:04 <bos> ran into a case of that the other day with the number parsing code that's now in text.
22:09:07 <dbelange> bos: In haskell?
22:09:10 <bos> uncons was being fused.
22:09:13 <bos> dbelange: yes.
22:09:36 <dbelange> Haskell needs a new reduction for lazy polynomial time
22:09:48 <pumpkin> bos: what kind of a number parsing interface do you have? parseDouble :: Text -> Maybe (Double, Text) ?
22:10:14 <bos> pumpkin: almost. Text -> Either String (Double,Text)
22:10:22 <bos> but i think the Either String should prolly be Maybe
22:10:35 <pumpkin> oh, it would give actual parse errors?
22:10:45 <bos> well, the parse errors aren't much use.
22:10:49 <pumpkin> I see
22:11:12 <bos> "your number doesn't have a digit after the 'e'"
22:11:14 <bos> srsly.
22:13:04 <bos> in other news, when did 3GB of RAM turn into not enough to work in?
22:13:33 <Heffalump> why is uncons even implemented as unstream . x . stream?
22:13:46 <bos> Heffalump: it isn't.
22:14:05 <bos> but if you've already got a stream, it's cheaper to uncons the stream than to convert to a text first.
22:14:45 <bos> alas, it's very hard to convince the rewrite rules to not decide "oh, i'll convert this text to a stream, then apply the uncons-on-streams-function to that!"
22:15:18 <Heffalump> ah, I see
23:07:17 <Blkt> good day everyone
23:14:39 <Axman6> 'lo Blkt 
23:17:28 <mlh> dons: haskellers.com looks all blue with the chrome browser
23:17:52 <Axman6> it also doesn't show me :(
23:20:17 <kmc> it doesn't show up blue for me in chromium
23:20:25 <kmc> it's however pretty broken functionality-wise
23:21:02 <kmc> it's somehow making chromium not redraw the window at all
23:37:09 * hackagebot regular 0.3.0 - Generic programming library for regular datatypes.  http://hackage.haskell.org/package/regular-0.3.0 (JosePedroMagalhaes)
23:37:16 <jamy> kmc: hello
23:39:10 * hackagebot regular-extras 0.2.0 - Additional functions for regular: arbitrary,  coarbitrary, and binary get/put.  http://hackage.haskell.org/package/regular-extras-0.2.0 (JosePedroMagalhaes)
23:44:00 <kmc> hi jamy
23:49:42 <jamy> kmc: i and my friend going  to make linux distribution specially for haskell development. Then we going to remake linux on haskell for few sizes, to all system be on him 
23:50:04 <kmc> cool!
23:50:20 <jamy> joining?
23:50:31 <kmc> not right now
23:50:40 <jamy> ok
23:51:17 <Palmik> Hi guys. Is it possible to force haddock to generate docs even for non-exported functions?
23:51:38 <kmc> --ignore-all-exports ?
23:51:46 <kmc> there's a per-module option too
23:54:50 <Palmik> kmc, wow, nice :) Thanks :)
