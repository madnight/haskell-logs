00:00:28 <tensorpudding> ddarius: a lot of them seem to be run that way
00:15:55 <kmc> the bailouts were not handouts
00:16:03 <kmc> the government made money on most of them
00:16:07 <kmc> there's a lot to dislike there, but it's not just a giveaway
00:19:46 * ddarius suspects the value of putting 700 billion dollars into NSF and co. would be less than the value of putting, say, 100 billion dollars.
00:20:48 <ddarius> Should I write a Haskell prototype or just start hacking assembly?
00:21:27 <dolio> Prototype of what?
00:21:50 <ddarius> A Joy/Forth like language implementation.
00:23:42 <dolio> I'd probably go with the prototype, since it's probably the faster path to gratification.
00:25:24 <augur> i prototype in ruby
00:25:28 <ddarius> dolio: There won't be any gratification until I can run it in my kernely thing which means (re)writing it in assembly.
00:25:34 <ddarius> augur: Good for you.
00:25:39 <augur> when objective-c is too unruly for the application, i just leave it.
00:25:44 <dolio> Ah, then assembly, I guess.
00:25:52 <augur> i wish i could code Cocoa in haskell :(
00:26:33 <ddarius> augur: I'm sure you can.
00:26:37 <augur> :o
00:26:48 <augur> i havent checked, i just assumed the paradigms are too divergent
00:33:53 <dolio> @djinn (((a -> Void) -> Void) -> Void) -> Either a (Not a)
00:33:54 <lambdabot> f a = Right (\ b -> void (a (\ c -> c b)))
00:34:14 <Maxdamantus> Why doesn't ghci do utf-8 output? :(
00:34:37 <Jafet> Because... it... does?
00:34:57 <Maxdamantus> It looks like it's trying to do ISO-8849-1 or whatever
00:34:59 <Jafet> Maybe it does something unexpected, like follow the locale
00:35:03 <dolio> @djinn (((a -> Void) -> Void) -> Void) -> Not a
00:35:03 <lambdabot> f a b = void (a (\ c -> c b))
00:35:23 <Maxdamantus> Prelude> putStrLn "¬"
00:35:23 <Maxdamantus> �
00:35:43 <ddarius> > filter isSpace ['\0'..'\255']
00:35:44 <lambdabot>   "\t\n\v\f\r \160"
00:36:11 <Maxdamantus> > putStrLn "test"
00:36:12 <lambdabot>   <IO ()>
00:38:53 <dolio> @type let control f = Cont $ \k -> runCont (f $ \x -> Cont $ \_ -> k x) id in control
00:38:54 <lambdabot> forall a a1 a2. ((a -> Cont a1 a2) -> Cont a1 a1) -> Cont a1 a
00:40:01 <Maxdamantus> Mmm.. It's just printing 0xAC (followed by a newline), which sounds like the ISO-8859-1 version of that character.
00:40:14 <Maxdamantus> It is.
00:41:01 <ddarius> > runIOSpec (IOSpec.putStrLn "test" :: IOSpec.IOSpec IOSpec.Teletype ()) ""
00:41:02 <lambdabot>   ("test\n",Right ())
00:45:00 <ddarius> > (ord 'a', ord 'A')
00:45:01 <lambdabot>   (97,65)
00:53:22 <ddarius> > filter (\c -> not (isSpace c) && not (isAlpha c)) ['\0'..'\127']
00:53:23 <lambdabot>   "\NUL\SOH\STX\ETX\EOT\ENQ\ACK\a\b\SO\SI\DLE\DC1\DC2\DC3\DC4\NAK\SYN\ETB\CAN...
00:53:42 <ddarius> > drop 20 $ filter (\c -> not (isSpace c) && not (isAlpha c)) ['\0'..'\127']
00:53:43 <lambdabot>   "\EM\SUB\ESC\FS\GS\RS\US!\"#$%&'()*+,-./0123456789:;<=>?@[\\]^_`{|}~\DEL"
00:54:45 <ddarius> > drop 50 $ filter (\c -> not (isSpace c) && not (isAlpha c)) ['\0'..'\127']
00:54:46 <lambdabot>   "89:;<=>?@[\\]^_`{|}~\DEL"
00:54:55 <ddarius> > drop 50 $ filter (\c -> not (isSpace c) && not (isAlphanum c)) ['\0'..'\127']
00:54:56 <lambdabot>   Not in scope: `isAlphanum'
00:55:22 <ddarius> @hoogle Char -> Bool
00:55:22 <lambdabot> Network.URI isAllowedInURI :: Char -> Bool
00:55:23 <lambdabot> Data.Char isAlpha :: Char -> Bool
00:55:23 <lambdabot> Data.Char isAlphaNum :: Char -> Bool
00:55:38 <ddarius> > drop 50 $ filter (\c -> not (isSpace c) && not (isAlphaNum c) && not (isControl c)) ['\0'..'\127']
00:55:39 <lambdabot>   ""
00:55:46 <ddarius> > filter (\c -> not (isSpace c) && not (isAlphaNum c) && not (isControl c)) ['\0'..'\127']
00:55:47 <lambdabot>   "!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"
00:56:36 <Maxdamantus> @pl \c -> not (isSpace c) && not (isAlphaNum c) && not (isControl c)
00:56:37 <lambdabot> ap ((&&) . not . isSpace) (ap ((&&) . not . isAlphaNum) (not . isControl))
00:58:59 <Maxdamantus> @pl \a b c d -> d && c && b && a
00:59:00 <lambdabot> (((flip (&&) .) . flip (&&)) .) . flip (&&)
00:59:30 <sipa1024> what does @pl stand for?
00:59:36 <Maxdamantus> pointless
00:59:37 <dolio> @type let control f = Cont $ \k -> runCont (f $ \x -> Cont $ \_ -> k x) id in \f -> control $ \k -> f k >>= k
00:59:39 <lambdabot> forall a a1. ((a -> Cont a1 a1) -> Cont a1 a) -> Cont a1 a
00:59:44 <sipa1024> ah, nice
00:59:45 <Maxdamantus> (synonomous with point-free)
00:59:53 <Maxdamantus> kind of
01:00:14 <sipa1024> @pl \a b c -> 5
01:00:15 <lambdabot> const (const (const 5))
01:00:31 <dolio> @type let control :: ((forall b. a -> Cont r b) -> Cont r r) -> Cont r a) ; control f = Cont $ \k -> runCont (f $ \x -> Cont $ \_ -> k x) id in \f -> control $ \k -> f k >>= k
01:00:33 <lambdabot> parse error on input `)'
01:00:39 <Maxdamantus> @pl \a b c d e f g h i j k l m -> m l k j i h g f e d c b a
01:00:42 <lambdabot> flip (flip . (flip .) . ((flip .) .) . (((flip .) .) .) . ((((flip .) .) .) .) . (((((flip .) .) .) .) .) . ((((((flip .) .) .) .) .) .) . (((((((flip .) .) .) .) .) .) .) . ((((((((flip .) .) .) .)
01:00:42 <lambdabot> .) .) .) .) . (((((((((flip .) .) .) .) .) .) .) .) .) . ((((((((((flip .) .) .) .) .) .) .) .) .) .) . flip (flip . (flip .) . ((flip .) .) . (((flip .) .) .) . ((((flip .) .) .) .) . (((((flip .) .
01:00:42 <lambdabot> ) .) .) .) . ((((((flip .) .) .) .) .) .) . (((((((flip .) .) .) .) .) .) .) . ((((((((flip .) .) .) .) .) .) .) .) . (((((((((flip .) .) .) .) .) .) .) .) .) . flip (flip . (flip .) . ((flip .) .) .
01:00:42 <lambdabot>  (((flip .) .) .) . ((((flip .) .) .) .) . (((((flip .) .) .) .) .) . ((((((flip .) .) .) .) .) .) . (((((((flip .) .) .) .) .) .) .) . ((((((((flip .) .) .) .) .) .) .) .) . flip (flip . (flip .) .
01:00:42 <lambdabot> ((flip .) .) . (((flip .) .) .) . ((((flip .) .) .) .) . (((((flip .) .) .) .) .) . ((((((flip .) .) .) .) .) .) . (((((((flip .) .) .) .) .) .) .) . flip (flip . (flip .) . ((flip .) .) . (((flip .)
01:00:44 <lambdabot> [3 @more lines]
01:00:46 <lambdabot> optimization suspended, use @pl-resume to continue.
01:01:05 <sipa1024> @pl \a b c -> (a*(b+c)) - (c*(a+b))
01:01:06 <lambdabot> ap (ap . (liftM2 (-) .) . (. (+)) . (.) . (*)) (((*) .) . (+))
01:03:19 <Maxdamantus> @pl (return .) . (=<<)
01:03:19 <lambdabot> (return .) . (=<<)
01:04:05 <Maxdamantus> @pl (>>=) . (return .)
01:04:06 <lambdabot> (>>=) . (return .)
01:04:08 <Maxdamantus> Meh.
01:04:42 <Maxdamantus> @pl (=<<) . (return .)
01:04:42 <lambdabot> fmap
01:04:52 <c_wraith> hah
01:05:00 <c_wraith> that's an unwarrent assumption :)
01:05:16 <c_wraith> err, unwarranted. english, yeah, I should pretend it's my native language
01:06:53 <dolio> @type let control :: (((forall b. a -> Cont r b) -> Cont r (forall z. z)) -> Cont r a) ; control f = Cont $ \k -> runCont (f $ \x -> Cont $ \_ -> k x) id in \f -> control $ \k -> f k >>= k
01:06:54 <lambdabot> forall a r b. ((a -> Cont r b) -> Cont r a) -> Cont r a
01:06:55 <ddarius> c_wraith: @pl makes a lot of dubious assumptions.  That one is relatively tame.
01:07:21 <Maxdamantus> What assumption?
01:07:30 <Jafet> @pl \x -> trace (show x) x -- another fun one
01:07:30 <lambdabot> trace =<< show
01:07:34 <shachaf> ddarius: What is a less dubious assumption? Things like (+) being commutative?
01:08:13 <Maxdamantus> @pl \a b c -> c + b + a
01:08:13 <lambdabot> flip (flip . ((+) .) . (+))
01:08:15 <ddarius> shachaf: I think you meant "more dubious."  That one is debatable.  (*) being commutative though...
01:09:43 <shachaf> ddarius: Indeed.
01:09:50 <dolio> @pl \x -> x + undefined
01:09:50 <lambdabot> (undefined +)
01:10:22 <Jafet> > 0 * undefined
01:10:23 <shachaf> ddarius: Though, to be fair, Num makes some pretty dubious assumptions about (*) too.
01:10:23 <lambdabot>   *Exception: Prelude.undefined
01:10:47 <ddarius> shachaf: The whole Numerical hierarchy is pretty shady.
01:10:57 <Jafet> > 0 * undefined :: CReal
01:10:58 <lambdabot>   *Exception: Prelude.undefined
01:11:57 <ddarius> shachaf: The most entertaining in the Real class.
01:11:59 <ddarius> @src Real
01:11:59 <lambdabot> class  (Num a, Ord a) => Real a  where
01:11:59 <lambdabot>     toRational      ::  a -> Rational
01:12:02 <c_wraith> Maxdamantus, the assumption I was pointing out was that instances of Monad are also instances of Functor
01:12:09 <shachaf> @instances Real
01:12:10 <lambdabot> Double, Float, Int, Integer
01:12:38 <Maxdamantus> Ah.
01:12:45 <Maxdamantus> Hm. O_o
01:12:47 <Maxdamantus> @src fmap
01:12:48 <lambdabot> Source not found. Just what do you think you're doing Dave?
01:12:52 <shachaf> Is that supposed to be "Real" as opposed to "Complex"?
01:12:54 <Maxdamantus> @src map
01:12:55 <lambdabot> map _ []     = []
01:12:55 <lambdabot> map f (x:xs) = f x : map f xs
01:12:59 <c_wraith> @src Functor
01:13:00 <lambdabot> class  Functor f  where
01:13:00 <lambdabot>     fmap        :: (a -> b) -> f a -> f b
01:13:25 <Maxdamantus> :t fmap
01:13:26 <lambdabot> forall a b (f :: * -> *). (Functor f) => (a -> b) -> f a -> f b
01:13:28 <ddarius> shachaf: Probably, but the name and the class definition are completely at odds.
01:13:36 <Maxdamantus> Ah.
01:13:58 <shachaf> ddarius: Indeed. :-)
01:15:34 <Jafet> > toRational (1 :: CReal)
01:15:35 <lambdabot>   *Exception: CReal.toRational
01:15:45 <Jafet> I guess that's one way around it.
01:16:00 <sipa1024> c_wraith: are all monads instances of functor?
01:16:05 <ddarius> Jafet: Make the one method of a class be undefined?
01:16:14 <ddarius> sipa1024: No.
01:16:42 <c_wraith> sipa1024, however, liftM is equivalent to fmap, so...
01:16:48 <c_wraith> :t liftM
01:16:49 <lambdabot> forall a1 r (m :: * -> *). (Monad m) => (a1 -> r) -> m a1 -> m r
01:17:11 * ddarius doesn't mind that @pl makes assumptions about instances in scope.
01:17:49 <Jafet> ddarius: well, let's not bring ontology into this.
01:19:26 <ddarius> Any code that has a Real constraint uses toRational (or is completely capricious), so why make an instance if you aren't going to implement toRational?
01:19:53 <ddarius> Actually, I think there is an capricious case.
01:19:56 <ddarius> @src Complex
01:19:56 <lambdabot> data (RealFloat a) => Complex a = !a :+ !a
01:19:56 <sipa1024> hmm, fmap 'requires' that (fmap id == id) and (fmap (f.g) == fmap f . fmap g); does liftM require something similar?
01:20:16 <Jafet> > toRational $ 1 :+ 1
01:20:16 <shachaf> sipa1024: It follows from the monad laws.
01:20:17 <lambdabot>   No instance for (GHC.Real.Real (Data.Complex.Complex t))
01:20:17 <lambdabot>    arising from a ...
01:20:18 <ddarius> s/an capricious/an important capricious/
01:20:31 <sipa1024> hmm
01:20:55 <ddarius> Moral of the story, don't -ever- put contexts on data types.  It only ends in tears.
01:21:45 <Jafet> Well, Monad still has fail
01:22:37 <ddarius> Proposal for Haskell 2011: Remove the RealFloat context from Complex.  This change is completely backward compatible.
01:23:11 <ddarius> (Actually, that isn't 100% true.)
01:23:22 <shachaf> ddarius: Why are contexts on data types so useless?
01:24:14 <dolio> They were invented for something that no longer exists.
01:24:32 <ddarius> shachaf: How often do you stick random unneeded contexts in types in your code?
01:24:34 <ivanm> shachaf: because you still need them for the functions that use those data types
01:24:35 <ddarius> dolio: ?
01:24:50 <ivanm> ddarius: when isn't it backwards compatible?
01:25:02 <shachaf> ivanm: Yes, but why?
01:25:16 <dolio> When seq was in a class, it was, presumably, necessary to write 'data Eval t => Foo t = Bar !t ...'.
01:25:38 <ivanm> shachaf: let's say something like creating a complex number with no imaginary part
01:26:07 <ivanm> so, that'd be: realNum :: (Num a) => a -> Complex a; realNum n = n :+ 0
01:26:08 <ddarius> ivanm: (:+) would have type a -> a -> Complex a then and any code that used Complex without acquiring a Num contexts (which would take some doing) would also be fully polymorphic.  Thus, any code that was relying on defaulting may become ambiguous.
01:26:24 <ivanm> ddarius: yeah, defaulting annoys me...
01:26:53 <ivanm> shachaf: however, Complex has a RealFloat constraint, so you can't use any arbitrary Num, it has to be a RealFloat value
01:27:01 <ivanm> so realNum :: (RealFloat a) => a -> Complex a
01:27:39 <ivanm> so having that RealFloat constraint in the data type means you _have_ to use that constraint in all type sigs
01:28:32 <ddarius> ivanm: I suspect that the number of actual programs that will fail to compile if the constraint is removed from Complex is less than one.
01:28:42 <ivanm> ddarius: yeah
01:28:47 <ivanm> since not many programs use Complex :p
01:30:36 <Jafet> Don't you still need one with (/)?
01:30:41 <Jafet> :t (/)
01:30:41 <lambdabot> forall a. (Fractional a) => a -> a -> a
01:30:51 <ivanm> Jafet: right
01:31:03 <ivanm> but why can't you use Complex for gaussian numbers or something?
01:36:28 <Jafet> Well, it won't be a field
01:36:38 <Jafet> Now all you need is to conditionally enable (/)
01:37:03 <Maxdamantus> > (1/0) :+ (-1/0)
01:37:04 <lambdabot>   Infinity :+ (-Infinity)
01:54:13 <dolio> @type let control :: ((a -> Cont r (forall z. z)) -> Cont r (forall z. z)) -> Cont r a ; control f = Cont $ \k -> runCont (f $ \x -> Cont $ \_ -> k x) undefined in control
01:54:14 <lambdabot>     Cannot match a monotype with `forall z. z'
01:54:14 <lambdabot>       Expected type: Cont r (forall z. z)
01:54:14 <lambdabot>       Inferred type: Cont r a
01:56:45 <dolio> @type Just undefined :: Maybe (forall z. z)
01:56:46 <lambdabot> Maybe (forall z. z)
01:58:56 <ddarius> dolio: I would recommend making an explicit Void type.
01:59:35 <dolio> ddarius: I can't in lambdabot.
01:59:55 <dolio> It worked out when I did that in agda bout 5 minutes ago, though.
02:00:53 <dolio> Curiously, it seems like that type for control requires that you call the continuation at least once.
02:01:53 <dolio> Unless you're in Haskell and cheat with undefined.
03:04:21 <Maxdamantus> @pl \a b c -> a (b c)
03:04:21 <lambdabot> (.)
03:07:43 <chrisdone> lots of great Haskell slides and videos coming out recently!
03:08:02 <chrisdone> dons: good work you and malcolm! :-)
03:08:16 <sranil> chrisdone, can you please share the slides and videos
03:08:36 <chrisdone> sranil: here's one set http://haskell.org/haskellwiki/HaskellImplementorsWorkshop/2010#Programme
03:09:23 <chrisdone> I'm used to only getting slides, now it's videos galore!
03:09:46 <sranil> chrisdone, thanks. Do you have any videos of lambda calculus
03:10:26 <chrisdone> err. nope, never seen a video about that. how deeply do you want to know about it?
03:10:37 <luite> is there a good player that allows you to vary the speed of such video's? it would be useful to watch at 130% and slow down when they get to the interesting/difficult bits
03:11:26 <chrisdone> luite: suddenly Don Stewart sounds like Arnold Schwarzenegger?
03:11:27 <sranil> I am very much interested in knowing abt Lambda Calculus. With videos one can learn fast
03:12:17 <luite> chrisdone: it might make the boring bits more funny to watch
03:12:17 <theorbtwo> luite: mplayer lets you dynamicly change speed.  [, ], {, } change speed, backspace resets it to 1:1.
03:14:32 <chrisdone> sranil: it's quite simple, the wikipedia article is good. I don't know of any videos personally
03:15:19 <luite> theorbtwo: does it try to uhm, re-pitch (how do you call that) the sound, so that the speaker doesn't sound like a smurf/chipmunk?
03:15:53 <theorbtwo> Not by default.  There's a filter you can use so it does, but I've never put much effort into it.
03:18:30 <luite> ah, I'll look into it later then
03:19:34 * hackagebot pointless-lenses 0.0.7 - Pointless Lenses library  http://hackage.haskell.org/package/pointless-lenses-0.0.7 (HugoPacheco)
03:24:46 <Maxdamantus> @src (.)
03:24:46 <lambdabot> (f . g) x = f (g x)
03:24:47 <lambdabot> NB: In lambdabot,  (.) = fmap
03:25:13 <Maxdamantus> . is right-assosciative, right?
03:25:35 <sipa1024> (a . b . c) x = a(b(c x))
03:25:41 <Maxdamantus> Yep.
03:25:42 <ivanm> chrisdone: last ICFP had videos for haskell workshop, etc.
03:29:08 <chrisdone> I wasn't really about in the community last year
03:29:57 <chrisdone> excellent, 3305051 irc lines imported so far, at 2007. 2008, 2009 and 2010 will probably be another 3 million :-))
03:41:30 <ppavelV6> hi
03:42:18 <ddarius> Maxdamantus: (.) is associative semantically.  Syntactically, I do believe it is right associative.
03:43:33 <ppavelV6> i'm thinking about kind-polymorphic type classes (like defining Monad polymorphically for standard and type indexed monads). I'm sure I seen some discussion on kind polymorphism. Does anyone has any references? 
03:45:00 <ppavelV6> something like this:
03:45:05 <ppavelV6> ops
03:46:48 <Maxdamantus> Oh, really?
03:46:54 <chrisdone> what's a unix command to take/drop n lines?
03:46:55 <Maxdamantus> Wait, you mean it makes no sense to have it the other way.
03:47:12 <ppavelV6> chrisdone: head/tail
03:47:14 <Maxdamantus> chrisdone: take would be head
03:47:33 <Maxdamantus> I think drop might be head aswell
03:47:39 <chrisdone> ah, thanks. that should've occured to me
03:48:11 <Maxdamantus> Hm, no. I think there was something to efficiently drop, but can't remember.
03:48:58 <Maxdamantus> Usually I'd require that operation for output I'm looking at, so I'd just use `less`, 50g to get to line 50
03:49:01 <ppavelV6> i'm wrong about tail
03:49:02 <Maxdamantus> 50G
03:52:39 <chrisdone> great to hear spj saying "I want to steal all the derivable type class ideas from UHC and put them into GHC"
03:53:47 <Heffalump> I thought GHC had that too
03:54:45 <chrisdone> it does but it's not as powerful
04:01:00 <Twey> chrisdone: What does UHC have that GHC lacks?
04:02:30 <opqdonut> you can use "sed -e '1,15d'" to drop 15 lines
04:02:34 <yf> list
04:02:52 * Maxdamantus hasn't thought of that.
04:02:55 <aristid> opqdonut: nice
04:03:05 <opqdonut> I'm a sed junkie :)
04:03:36 * Maxdamantus needs to use sed more
04:03:40 <Twey> Or, more efficiently, tail -n +16 ;)
04:04:00 <opqdonut> oh, is that gnu specific?
04:04:16 <Maxdamantus> Ah, yeah that's it.
04:04:20 <Maxdamantus> No, it's not GNU specific
04:04:34 <Maxdamantus> but I don't know if it's like that for every implementation of tail.
04:04:34 <sipa1024> blabla | (for A in $(seq 1 15); do read; done; cat
04:04:35 <opqdonut> ok, sweet
04:04:38 <sipa1024> nah!
04:04:41 <opqdonut> :D
04:04:44 <Maxdamantus> It does it on NetBSD though, afair
04:04:46 <sipa1024> + )
04:04:49 * Maxdamantus tries
04:05:32 <Twey> Possibly
04:05:58 <Maxdamantus> Meh, not working on NetBSD anymore :(
04:06:12 <Twey> http://www.manpagez.com/man/1/tail/ — this one has it
04:06:14 <Maxdamantus> Oh, nvm, it was on Ubuntu at school that I realised that worked.
04:07:30 <chrisdone> Heffalump: 
04:07:31 <chrisdone> http://www.vimeo.com/15467692
04:08:45 <ManateeLazyCat> juhp_: Hey. :)
04:09:13 <ManateeLazyCat> @quote juhp_
04:09:14 <lambdabot> No quotes match.
04:09:38 <juhp_> :)
04:09:44 <ppavelV6> tail -n +k works on mac os x
04:10:09 <sipa1024> don't they use the same coreutils?
04:11:02 <ManateeLazyCat> juhp_: I'm refactory code of manatee-anything, then you can input fast extremely and no delay. :) 
04:11:32 <juhp_> aha
04:11:38 <ManateeLazyCat> juhp_: Now, when you search some result from "Google result" will block you.
04:12:23 <ManateeLazyCat> juhp_: I need refactory manatee-anything, make *edit* action handle in daemon process, then anything process just handle *search* action and return result asynchronous..
04:12:49 <ManateeLazyCat> s/Google result/Google Suggest
04:13:41 <ManateeLazyCat> juhp_: It's need big refactory to support interactive function like Emacs' one.
04:14:06 <slom_> Hi all
04:14:29 <ManateeLazyCat> juhp_: But i think not hard to refactory... :)
04:14:53 <juhp_> great
04:15:25 <ManateeLazyCat> juhp_: Do you found any bug? I fix some bugs, but not all..
04:16:14 <ManateeLazyCat> juhp_: Google Suggest like this: http://www.flickr.com/photos/48809572@N02/5039596968/lightbox/
04:16:19 <juhp_> ManateeLazyCat: sorry I didn't update gtk2hs yet...
04:16:38 <juhp_> cool!
04:16:50 <ManateeLazyCat> juhp_: I also add *progress* support in statusbar : http://www.flickr.com/photos/48809572@N02/5037646475/lightbox/
04:17:02 <juhp_> aha yes
04:17:08 <juhp_> sounds very nice
04:17:33 <ManateeLazyCat> juhp_: Google Suggest have three command : "Search Keyword", "I'm feeling lucky", "Open directly"
04:18:09 <ManateeLazyCat> juhp_: Maybe we can add something like AnythingSearchEngine... search keyword in many search engine at the same time...
04:18:13 <Tomh> mm any reason why on windows7 you need to start ghci in administrator mode from haskell platform?
04:18:40 <ManateeLazyCat> Tomh: Because Win7 need permission
04:19:20 <Tomh> well yeah, but ... why, it should be possible to deploy it in a way you dont need it
04:20:19 <nomemory> I am looking for something similar in haskell for python's range(0,100,5) which returns [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95]
04:20:41 <tensorpudding> > [0,5..10]
04:20:42 <lambdabot>   [0,5,10]
04:20:51 <tensorpudding> > [0,5..50]
04:20:52 <lambdabot>   [0,5,10,15,20,25,30,35,40,45,50]
04:21:18 <slom_> toByte :: Double -> Word32
04:21:19 <slom_> toByte x = truncate (255 * x)
04:21:36 <tensorpudding> technically it's sugar over enumFromThenTo I think
04:21:46 <tensorpudding> @type enumFromThenTo
04:21:47 <lambdabot> forall a. (Enum a) => a -> a -> a -> [a]
04:21:59 <tensorpudding> > enumFromThenTo 0 5 100
04:22:00 <lambdabot>   [0,5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,85,90,95,100]
04:22:08 <slom_> can anybody see what could be Inefficient about these lines? I have writte a raytracer and 15% of its time are spent in this function
04:22:16 <nomemory> thanks tensorpudding 
04:22:19 <slom_> (acc. to GHC profiling)
04:22:31 <chrisdone> Twey: generic deriving http://www.dreixel.net/research/pdf/gdmh_draft.pdf
04:23:08 <ddarius> slom_: Profiling can be tricky with laziness.
04:23:31 <chrisdone> Twey: We propose a new approach to Haskell's deriving mechanism, which allows users to specify how to derive arbitrary class instances using standard datatype-generic programming techniques. Generic functions, including the methods from six standard Haskell 98 derivable classes, can be specified entirely within Haskell 98 plus multi-parameter type classes, making them lightweight and portable. We can also express Functor, Typeable, and
04:23:31 <chrisdone> many other derivable classes with our technique. We implemented our deriving mechanism together with many new derivable classes in the Utrecht Haskell Compiler.
04:23:33 <slom_> so the time could be the evaluation of the input?
04:24:25 <Twey> chrisdone: Cool
04:24:32 <Tomh> chrisdone, thats the stuff from the colloquim talk a couple of weeks ago?
04:24:54 <slom_> ddarius: so the time could be the evaluation of the input?
04:27:08 <Jonno_FTW> m
04:28:20 <chrisdone> Tomh: d'no, didn't seen that
04:28:57 <Tomh> ah ok, I recall the content though so I guess
04:34:20 <chrisdone> @tell I was ranting about string types too to poor jasper: http://github.com/jaspervdj/blaze-html/issues#issue/28 I feel your pain, maybe we should work out a generic string library
04:34:20 <lambdabot> Consider it noted.
04:34:28 <ddarius> Wonderful...
04:34:55 <shachaf> chrisdone: You may have forgotten the nick there.
04:34:59 <I> @messages
04:34:59 <lambdabot> chrisdone said 39s ago: was ranting about string types too to poor jasper: http://github.com/jaspervdj/blaze-html/issues#issue/28 I feel your pain, maybe we should work out a generic string library
04:35:02 <I> @nick ddarius
04:35:03 <chrisdone> woops
04:35:03 <lambdabot> Maybe you meant: dice dict
04:35:22 <chrisdone> @tell Peaker I was ranting about string types too to poor jasper: http://github.com/jaspervdj/blaze-html/issues#issue/28 I feel your pain, maybe we should work out a generic string library
04:35:22 <lambdabot> Consider it noted.
04:38:53 <chrisdone> ndm's good at giving talks
04:39:48 <ddarius> chrisdone: Yeah, he is one of the better presenters.
04:39:58 <ddarius> Not SPJ, but SPJ is hard to match.
04:40:08 <chrisdone> indeed :-)
04:41:23 * ddarius discovers that he didn't know that the Smalltalk Blue Book is online.
04:48:46 <McManiaC> siracusa: you got wx to compile yet?
04:51:13 <Tomh> anyone knows how to resolve this error: "TemplateHaskell is not enabled" ?
04:51:30 <chrisdone> enable it with -XTemplateHaskell?
04:51:38 <Tomh> i have it as language pragma
04:52:29 <Tomh> lemme try it with that parameter though
04:53:09 <Tomh> still doesn't work
04:57:46 <ddarius> By the way, I hate Squeak Smalltalk.
04:58:08 <chrisdone> haha
04:58:11 <chrisdone> ddarius: why?
04:59:23 <Tomh> is there anything else needed to get template haskell running?
04:59:49 <ddarius> I believe you can build a GHC without TH and it may be that you somehow got such a GHC.
05:00:00 <Tomh> I got haskell platform
05:02:33 <Heffalump> tomh: what OS?
05:02:40 <Tomh> windows 7
05:03:11 <Heffalump> so ghc -XTemplateHaskell reports that error?
05:03:22 <Tomh> no, I use haskell-src-exts
05:03:29 <Tomh> then i run parseModule "Prelude"
05:03:38 <Tomh> that function reports that error
05:03:52 <Heffalump> where Prelude is the normal Prelude?
05:03:58 <Tomh> I think so
05:04:05 <Tomh> its undocummented how you should use the library
05:04:29 <Heffalump> it's possible that the error means that haskell-src-exts can't parse TemplateHaskell
05:04:33 <Heffalump> but I don't know
05:04:41 <Tomh> mm
05:04:51 <Heffalump> I'd be very surprised if the platform's GHC didn't have it compiled in
05:05:09 <Igloo> My guess would be that Prelude says "f$x = f x" and haskell-src-exts is parsing it as TH and then complaining because that extension isn't on
05:05:23 <Twey> >.>
05:08:12 <Heffalump> heh
05:08:47 <Twey> Another reason to always space operators
05:10:44 <ddarius> Twey: Because some library is broken?
05:11:17 <Twey> Because it's less confusing for parsers
05:11:31 <Heffalump> and because Haskell extensions are gradually stealing the space-free syntax
05:11:38 <Heffalump> so it's more future-proof
05:11:43 <Twey> Aye
05:12:04 <Twey> Well, it's more future-proof just by virtue of drastically expanding potential identifier space.
05:12:17 <Twey> The fact that extensions are taking up some of those identifiers is tangential.
05:13:30 <Heffalump> if Igloo's hypothesis is true, it's a clear h-s-e bug, but it may not be easy to fix
05:13:51 <chrisdone> Twey: if operators were always spaced I could use foo-bar as variable names ;_;
05:13:57 <Twey> Aye ☹
05:14:14 <Twey> And -foo- as an operator name :þ
05:14:27 <juhp_> :)
05:14:41 <slom_> chrisdone: use Agda then :P
05:14:43 <chrisdone> hehe
05:14:48 <juhp_> but let save _foo_ for Agda yes
05:14:50 <juhp_> 's
05:14:59 <chrisdone> slom_: sure, can you help me port Hackage to Agda?
05:15:01 <Twey> Yeah, I'll pass on mixfix :þ
05:15:20 <luite> wow ghc 7 ships with mingw gcc 4.5?
05:15:50 <slom_> chrisdone: probably not ... :D
05:20:17 <chrisdone> "Limitations and disadvantages... but unfortunately I don't have time to go through them" haha, neil is great
05:27:11 * chrisdone spends all day watching haskell talks
05:47:32 <nomemory> http://hpaste.org/40304/qq -> why every element in my matrix is 25 ?
05:47:59 <nomemory> I was expecting the elements to increment every time 
05:48:40 <nomemory> k <- [0..(rows*cols)] instead of k <- [0..25] :(
05:49:05 <ClaudiusMaximus> nomemory: you need parallel list comprehension or zip
05:49:37 <nomemory> ClaudiusMaximus, thanks
05:50:25 <ClaudiusMaximus> > let { rows = 4 ; cols = 3 } in range ((0,0),(rows,cols)) `zip` [0..]
05:50:26 <lambdabot>   [((0,0),0),((0,1),1),((0,2),2),((0,3),3),((1,0),4),((1,1),5),((1,2),6),((1,...
05:50:51 <Twey> nomemory: The <- does it for every input
05:51:27 <Twey> So the last (rows * cols) elements of your list all have 25 as their value, and override the previous pairs
05:52:07 <Twey> > [ (i, k) | i <- [1 .. 5], k <- [1 .. 2] ]
05:52:07 <ClaudiusMaximus> yep, the total length of your list is (rows+1)*(cols+1)*(25+1)
05:52:08 <lambdabot>   [(1,1),(1,2),(2,1),(2,2),(3,1),(3,2),(4,1),(4,2),(5,1),(5,2)]
05:52:40 <Twey> Oh, okay, it interleaves, but same principle
05:53:33 <nomemory> Any suggestions on how to use zip with arrays ? :)
05:53:41 <ClaudiusMaximus> i think it might be unspecified / implementation-defined behaviour if there are duplicate indices
05:53:43 <xcvii> how about ((i, j), i + rows * j) on the left side?
05:54:23 <Twey> :t array
05:54:24 <lambdabot> forall i e. (Ix i) => (i, i) -> [(i, e)] -> Array i e
05:54:29 <ClaudiusMaximus> http://hackage.haskell.org/packages/archive/array/0.2.0.0/doc/html/Data-Array-IArray.html#v:array
05:54:59 <Jafet> Isn't that a strange way to initialize an array
05:55:09 <Jafet> To initialize that array, at least
05:55:40 <siracusa> McManiaC: No, I'm not able to set WXCFG properly :-S
05:55:41 <lambdabot> siracusa: You have 1 new message. '/msg lambdabot @messages' to read it.
05:56:07 <nomemory> xcvii, good idea, thanks
05:56:29 <nomemory> Jafet, trying to do my best...
05:56:29 <Twey> nomemory: What did you want your array to look like?  [ ((0, 0), 0), ((0, 1), 1), ((0, 2), 2), … ((0, 25), 25), ((0, 26), 1), ((0, 27), 2), … ]?
05:56:52 <nomemory> Twey, something like that
05:57:26 <ClaudiusMaximus> > listArray ((0,0),(2,2)) [0..]
05:57:27 <lambdabot>   array ((0,0),(2,2)) [((0,0),0),((0,1),1),((0,2),2),((1,0),3),((1,1),4),((1,...
05:57:45 <Twey> Then try: listArray ((0, 0), (rows, cols)) $ cycle [0 .. 25]
05:58:42 <Twey> ‘array’ is only necessary when you need to specify the keys as you go, i.e. you want to leave some elements empty or fill the elements out of order
06:00:11 <nomemory> Twey thanks!
06:01:09 <Twey> > array (0, 1) [(0, 5), (1, 6)]
06:01:10 <lambdabot>   array (0,1) [(0,5),(1,6)]
06:01:15 <Twey> > array (0, 1) [(0, 5)]
06:01:16 <lambdabot>   array (0,1) [(0,5),(1,*Exception: (Array.!): undefined array element
06:01:25 <Twey> > array (0, 1) [(0, 5), (0, 6)]
06:01:26 <lambdabot>   array (0,1) [(0,6),(1,*Exception: (Array.!): undefined array element
06:04:35 <ivanm> chrisdone: I take it that quote was from his paper/talk?
06:07:13 <ddarius> ClaudiusMaximus: I'm pretty sure array is required to fill the slots in the order they are given, overwriting in the duplicate case.
06:10:07 <ClaudiusMaximus> ddarius: "If any two associations in the list have the same index, the value at that index is implementation-dependent."
06:10:28 <chrisdone> ivanm: yeh
06:10:39 <chrisdone> bindType :: PGType a => a -> Oid
06:10:39 <chrisdone> bindType is useful when constructing the list of Oids for stmtPrepare. You don't need to pass the actual bind values, just dummy values of the same type (the value isn't used, so undefined is OK here).
06:10:52 <chrisdone> this is a lie. I put undefined and it was used and threw an exception :-(
06:11:56 <chrisdone> anyone used bindType successfully?
06:12:10 <ddarius> ClaudiusMaximus: Bah.
06:12:48 <chrisdone> hahaha
06:13:46 <chrisdone> so lookup :: a -> [(a,b)] -> Maybe b becomes lookup :: a -> [(a,b)] -> ???
06:14:06 <Twey> ?! wha'
06:14:06 <lambdabot> Maybe you meant: . ? @ v
06:14:45 <ivanm> chrisdone: since I have no idea where it even comes from, I can't say I've ever used it successfully ;-)
06:15:13 <chrisdone> ivanm: I think it's safe to say you've never used it correctly, yes. a vacuous truth
06:15:24 <ivanm> @hoogle bindType
06:15:25 <lambdabot> No results found
06:15:31 <ivanm> where is it from?
06:15:59 <chrisdone> Database.PostgreSQL.Enumerator
06:18:03 <chrisdone> if I pass "empty" values, I get this delightful error:
06:18:03 <chrisdone> DBError ("","") 1 ""
06:18:23 <Botje> did you forget to frob the interwidget?
06:18:45 <chrisdone> Botje: I think I miscalibrated the preparation banana
06:18:45 <ivanm> ahhh, that's why I've never used it; haven't touched a database for a few years
06:18:49 <ivanm> and never with Haskell
06:19:28 <chrisdone> lispy: ping
06:21:43 <chrisdone> ivanm: what other things haven't you touched?
06:21:55 <ivanm> hmmm....
06:22:02 <ivanm> I've only just started playing with TH
06:22:05 <ivanm> never done any generics
06:22:11 <ivanm> never done any Haskell web stuff
06:22:23 <ivanm> never used parsec (but I have used polyparse)
06:22:37 * chrisdone snores
06:22:38 <ivanm> that's probably the main points
06:22:45 <ivanm> chrisdone: heh
06:22:49 <ivanm> what's so boring?
06:23:02 <ivanm> greetings PatrickRobotham; rather late for you to be joining us, isn't it?
06:23:10 * ivanm is suddenly reminded that daylight saving starts tomorrow
06:23:23 <chrisdone> ivanm: all you do to me is talk talk!
06:23:33 <chrisdone> > cycle "talk "
06:23:35 <lambdabot>   "talk talk talk talk talk talk talk talk talk talk talk talk talk talk talk...
06:23:37 <chrisdone> ivanm: all you do to me is talk talk!
06:23:38 <ivanm> chrisdone: you did ask!
06:23:46 <ivanm> why, what did you want me to do?
06:23:53 * chrisdone dances
06:24:02 <chrisdone> ivanm: you know this song Talk Talk by Talk Talk?
06:24:07 <ivanm> nope
06:24:31 <chrisdone> what are you working on?
06:25:16 <chrisdone> Larry Wall: ``I think, to most people, scripting is a lot like obscenity. I can't define it, but I'll know it when I see it.''
06:26:07 <ivanm> well, the thing I'm going to hack on when I get my new computer working (been trying for a week now) is restricted classes
06:26:11 <ivanm> and then container classes
06:26:17 <Twey> Scripting is coding without regard to future maintenance.
06:26:20 <chrisdone> what are resitrcted classes?
06:26:24 <ivanm> and then finally have a good look at the mess tomberek has done to my graph class stuff ;-)
06:26:34 <ivanm> chrisdone: e.g. allowing Set to be a Monad
06:26:35 * chrisdone puts gloves on. can't type with cld ahnds
06:26:46 <Twey> Or gloves, clearly :þ
06:26:50 <ivanm> oh, one other thing I've never done: C bindings
06:27:06 <chrisdone> Twey: *now* I have gloves on
06:27:09 <chrisdone> :p
06:27:18 <Twey> What's the bind on Set?  A mapping?
06:28:34 <ivanm> @hackage rmonad
06:28:34 <lambdabot> http://hackage.haskell.org/package/rmonad
06:28:43 <ivanm> Twey: ^^ I'm basing it on Heffalump's rmonad package
06:28:51 <ivanm> he's recently split out the Suitable stuff from it for me
06:29:07 <Twey> No way I'm going to be able to understand Heffalump's code :þ  *takes a look anyway*
06:29:32 <chrisdone> just looks like a redefinin of monad and functor
06:29:42 <ivanm> yup
06:29:53 <ivanm> but I'm doing byorgey's typeclassopeida stuff into it
06:30:01 <ivanm> currently trying to work out the best way of defining Applicative
06:30:03 <chrisdone> so proper super classes?
06:30:10 <ivanm> yup
06:30:25 <ivanm> my current thinking is to default to having to define liftA2, liftA3, etc.
06:30:27 <Twey> Yeah, concatMap like with lists
06:30:34 <ivanm> since they make sense for things like Sets
06:30:38 <ivanm> but <*> doesn't
06:30:49 <Twey> Doesn't it?
06:31:29 <zenzike1> I have a function, eval :: Exp -> Env -> (Env, String), and I'd like to create a function of type [Exp] -> Env -> String, where eval is applied to each [Exp] in the list, starting with an initial Env, and the Envs are threaded through the applications. Does that sound I should be using a State monad where the [Exp] is part of the state along with Env?
06:31:31 <mauke> @src ap
06:31:31 <lambdabot> ap = liftM2 id
06:31:41 <ivanm> @type <*>
06:31:42 <lambdabot> parse error on input `<*>'
06:31:43 <mauke> <*> = liftA2 id
06:31:45 <ivanm> @type (<*>)
06:31:47 <lambdabot> forall (f :: * -> *) a b. (Applicative f) => f (a -> b) -> f a -> f b
06:31:55 <chrisdone> > (,) <$> [4,5,6] <*> [1,2,3]
06:31:56 <lambdabot>   [(4,1),(4,2),(4,3),(5,1),(5,2),(5,3),(6,1),(6,2),(6,3)]
06:31:56 <ivanm> Twey: ^^ (a -> b) isn't in Ord
06:32:03 <Twey> Ohhh.
06:32:05 <Twey> Right.
06:32:14 <Twey> But the Ord constraint on sets is a hack, isn't it?
06:32:20 <Twey> I guess the Eq constraint isn't, though :þ
06:32:32 <ivanm> but yes, by defining <*> = liftA2 ($), then it works
06:32:56 <ivanm> and to make it better, you can get liftAx from liftMx which doesn't need Applicative stuff itself
06:33:11 <ivanm> Twey: well, it's part of how they're defined and manipulated
06:33:19 <ivanm> for efficiency reasons
06:33:24 <ivanm> otherwise, you might as well just use a list
06:34:00 <Twey> Yeah, but the particular Ord is arbitrary AFAIK
06:34:08 <Twey> So you could compare memory locations or something like that
06:34:11 <chrisdone> heh, for some reason I read "make sense for things like lists" and was confyuze
06:34:14 <Twey> Only the Eq actually needs to make sense
06:34:31 <ivanm> Twey: sure, if "Just 3" and "Just 3" have the same memory location
06:34:38 <ivanm> which is rather implementation dependent, etc.
06:34:56 <Twey> Oh, right, yes…
06:35:04 <ivanm> Twey: also, how would you do lookups efficiently, unless the memory location comparison corresponds to the Ord constraint?
06:35:12 <Twey> I forgot we had to be able to look things up :þ
06:37:01 <chrisdone> Twey: I like the idea of a data type you put things into and then that's it
06:37:45 <Twey> chrisdone: Haha
06:37:48 <Twey> Not terribly practical…
06:38:01 <Twey> I'm ill >.>
06:38:40 * ivanm suggests doctors
06:39:05 <Twey> data BlackHole a = BlackHole; (//) :: BlackHole a -> [a]; a // _ = a
06:39:11 <Twey> Look ma, no constraints
06:40:36 <ivanm> Twey: that definition of // doesn't match the type
06:40:44 <chrisdone> I was just thinking that haha
06:40:48 <mauke> (//) _ = []
06:40:48 <Twey> -> BlackHole a
06:40:49 <ivanm> since it shoudl only take one param, but you provided 2!
06:40:58 <chrisdone> postfix operator?
06:41:04 * Twey sneezes.
06:41:04 <ivanm> also, isn't - the only valid unary operator?
06:42:17 <Twey> Not with -XPostfixOperators!
06:42:24 * ivanm decides to undertake a period of unconsciousness interrupted by hallucinations
06:42:28 <ivanm> Twey: heh
06:42:30 <ivanm> g'night all
06:42:37 <Twey> 'night ☺
06:42:43 <chrisdone> ciao
06:43:56 <juhp_> bah this shell-script is too hard - guess I better write it in haskell... ;)
06:44:25 <chrisdone> you better had!
06:44:36 <juhp_> tomorrow :)
06:47:32 <Jonno_FTW> :O
06:47:41 <Jonno_FTW> it's always time for haskell
06:52:38 <fxr> seen sebastiaan visser?
06:56:46 <donri> Type inferrance is usually marketed as a good feature while at the same time explicit typing is suggested as a best practice. What's up? :)
07:00:42 <rothwell> i'd be satisfied with local inference only, i think... i always put signatures on top level definitions
07:02:02 <chrisdone> top-level definitions are good documentation
07:05:50 * hackagebot llsd 0.1.0.1 - An implementation of the LLSD data system  http://hackage.haskell.org/package/llsd-0.1.0.1 (BryanOSullivan)
07:36:35 <McManiaC> why does "cabal haddock" generate a .haddock file and no html anymore? what's that file and how do you open it?
07:37:23 <perlman> hello what is this?
07:37:47 <McManiaC> nevermind, looks as I was missing actual haddock tool :)
07:37:51 <Lemmih> perlman: This is #haskell.
07:38:25 <perlman> am i talking to some software or a human?
07:38:37 <mauke> haha
07:38:43 <mauke> we're all robots
07:39:20 <perlman> well said but i want to something about this language so that i can force myself to learn this
07:39:22 <Lemmih> perlman: You're talking to an electro-chemical biomechanoid.
07:39:49 <Jafet> Yes, Haskell is that advanced.
07:42:57 <Rutix> Jafet is a super robot
07:43:09 <Lemmih> perlman: lyah is very fun.
07:43:13 <Lemmih> @where lyah
07:43:13 <lambdabot> http://www.learnyouahaskell.com/
07:46:49 <chrisdone> looks like my first appearance in the haskell irc channel was in 2008-01-03, which makes sense as I staretd reading YAHT on new year's eve. my first message was:
07:46:49 <chrisdone> how can i catch an exception when using `read'? is this possible?
07:48:07 <chrisdone> 2007-02-10 13:01:15 <Twey> Ahm, trying to grasp monads here... a tutorial I'm reading says that monads force execution in order, no?
07:48:09 <Rutix> why is there an elephant on that webpage!?
07:48:17 <chrisdone> haha, this is like school photos for Haskellers
07:48:28 <chrisdone> "oh no my embarrassing first messages"
07:49:10 <chrisdone> who wants to see their first message?
07:49:14 <Twey> chrisdone: Shhh :þ
07:49:17 <chrisdone> :P
07:49:27 <Lemmih> chrisdone: Oh, oh, I do!
07:49:30 <Twey> Wow, three years ago?  Really?
07:50:04 <chrisdone> Lemmih: no so embarrassing:
07:50:04 <chrisdone> 2004-01-31 15:08:10 <Lemmih> Are there any hs bindings for SDL?
07:50:25 <chrisdone> amusingly, the first appearance of you is 2003:
07:50:26 <chrisdone>  2003-12-26 10:32:14 <Lemmih> (~david@port97.ds1-oebr.adsl.cybercity.dk) joined #haskell
07:50:26 <chrisdone>  2003-12-26 13:15:25 <Lemmih> left #haskell
07:50:33 <chrisdone> was that you checking the place out?
07:51:38 <Lemmih> Yeah, I never hang out in a channel without surveying for escape routes first.
07:51:43 <Rutix> :D
07:52:03 <Lemmih> Heh, I really like my first message.
07:52:54 <chrisdone> 2001-12-17 13:00:36 <shapr> hi hi!
07:53:23 <monochrom> what was my first message?
07:53:58 <chrisdone> 2004-07-29 06:48:49 <monochrom> there is a shootout
07:54:02 <Axman6> mine too
07:54:18 <chrisdone>  2008-05-20 11:29:48 <Axman6> wow, i didn't expect this chan to be anywhere near this big
07:54:24 <chrisdone> haha
07:54:27 * Lemmih grins.
07:54:42 <Axman6> sounds accurate
07:55:18 <chrisdone> 2002-09-16 07:25:19 <lambdabot> I live.
07:55:24 <mauke> what is mine?
07:55:48 <chrisdone>  2005-02-27 14:23:58 <mauke> @type (%)
07:55:49 <chrisdone>  2005-02-27 15:47:21 <mauke> I wrote my first haskell program!
07:55:49 <chrisdone>  2005-02-27 15:47:27 <mauke> http://rafb.net/paste/results/JIyJNP74.html
07:56:04 * chrisdone remembers rafb.net
07:56:09 <Lemmih> Darn, the link is dead.
07:56:25 <chrisdone> the links on that site used to die after a day, right?
07:57:01 <Jafet> The pastebin is resting
07:57:41 <benmachine> ohh I saw a haskell-cafe post by a younger brent yorgey the other day
07:57:45 <benmachine> that was fun to read
07:58:39 <profmakx> is it worth giving ghc 7 a shot?
08:00:08 <pumpkin> mauke: me?
08:00:17 <ddarius> profmakx: What problem are you having with the current version of GHC?
08:00:32 <profmakx> none. I am being curious :P
08:00:51 <pumpkin> chrisdone: can we play with your database, if you know what I mean? ;)
08:01:36 <chrisdone> pumpkin: I'm nearly done importing the last two years now. I'll make a dump available. also going to add a search interface on hpaste.org
08:01:40 <Axman6> profmakx: well, it does need testing
08:01:47 <pumpkin> cool
08:01:51 <paolino> hello , I need help debugging this code, http://pastebin.com/Nw3zrEsD. Thanks
08:02:10 <ddarius> Hmm.
08:02:25 * ddarius thinks clog's policy changed between 2003 and 2004.
08:02:32 <luite> what monoid should I use in the writer monad if I just want a list, without the penalties of appending elements?
08:02:35 <chrisdone> ddarius: which policy?
08:02:53 <ddarius> chrisdone: It's policy for logging.
08:02:58 <luite> +performance
08:03:13 <chrisdone> ddarius: what changed?
08:03:41 <mauke> DList
08:04:02 <ddarius> chrisdone: I'm not in any of the pre-2004 logs, but I'm there the very first day of 2004.  That, or my grep-fu is extremely weak.
08:04:26 <Axman6> paolino: i need help with this thing i'm doing. Thanks <- this is not very helpful and will probably result in you getting no help at all
08:04:54 <paolino> Axman6, there is no link there ?
08:04:58 <paolino> uhm
08:05:03 <chrisdone> ddarius: hm, I see you in 2003-04-09 22:56:36
08:05:16 <donri> Why does this not compile? http://paste.pocoo.org/show/270177/
08:05:31 <ddarius> chrisdone: That's Darius Bacon.
08:05:32 <chrisdone> ddarius: did you also go by the nick Darius? or was that a different darius
08:05:43 <chrisdone> ddarius: this isn't you? 2003-04-09 22:56:36 <ddarius> the types in LambdaTerm are scary and can't be inferred
08:05:44 <bos> preflex: seen nominolo 
08:05:45 <preflex>  nominolo was last seen on #ghc 2 days, 2 hours, 16 minutes and 59 seconds ago, saying: @unpl second (outof . ) . biplate . into
08:06:12 <mauke> donri: because String is a synonym for [Char]
08:06:33 <ddarius> chrisdone: I went by the nick Darius for a few years, but so did Darius Bacon.
08:06:35 <donri> mauke: I tried all sorts of variation. Even commenting out the string instance; the int one fails too.
08:06:37 <ddarius> chrisdone: That should be me.
08:06:37 <Jonno_FTW> how would I get around this error: 
08:06:39 <Jonno_FTW>   Expected type: IO B.ByteString
08:06:40 <Jonno_FTW>   Inferred type: IO (Either String B.ByteString)
08:06:59 <chrisdone> ddarius: yeah, I also have the first appearance of Darius at: 2003-03-26 17:39:45 <Darius> (~Darius@66-44-60-203.s203.tnt4.lnhva.md.dialup.rcn.com) joined #haskell
08:07:01 <Botje> Jonno_FTW: extract the Right component from your value
08:07:13 <Axman6> @src print
08:07:14 <lambdabot> print x = putStrLn (show x)
08:07:21 <Jonno_FTW> Botje: how?
08:07:23 <paolino> Axman6, this link to my question: http://pastebin.com/Nw3zrEsD
08:07:31 <mauke> donri: what's the error message?
08:07:45 <pumpkin> chrisdone: that's Darius, not ddarius
08:07:51 <pumpkin> unless they're the same person :O
08:07:53 <Axman6> paolino: i saw the link, my point is that there are better ways to ask such questions, that's all
08:07:54 <chrisdone> pumpkin: yeah, I know
08:07:57 <Botje> Jonno_FTW: something like do x <- ...; case x of Left _ -> error "halp!"; Right bs -> do something with bs
08:07:58 <donri> mauke: It works if I do printIt (5::Int), but I can't seem to write an instance for Num either
08:08:05 <ddarius> pumpkin: That one was probably me.
08:08:05 <chrisdone> pumpkin: ddarius just explained it to me :p
08:08:05 <mauke> right
08:08:08 <donri> mauke: And how BTW would I write an instance for [Char]?
08:08:08 <chrisdone> oh
08:08:10 <pumpkin> oh
08:08:11 <chrisdone> haha
08:08:17 <pumpkin> yeah, I missed the explanation :)
08:08:19 <pumpkin> sorry!
08:08:21 <chrisdone> that must've been confusing for a while
08:08:31 <ddarius> Hmm.  Well, the zip logs on tunes don't seem to have me.
08:08:34 <Botje> donri: the error message says it, really. You have to enable TypeSynonymInstances
08:08:50 <ddarius> chrisdone: Not really.  Darius Bacon wasn't on very often.
08:08:58 <donri> Botje: But for [Char]? Skipping String
08:09:11 <chrisdone> ddarius: this Darius is definitely you: 2003-04-12 23:32:06 <Darius> (~ddarius86@66-44-60-93.s93.tnt4.lnhva.md.dialup.rcn.com) 
08:09:34 <chrisdone> 2003 is from the zipped logs, iirc
08:09:47 <profmakx> Axman6, so yeah, I will install it into a VM and try it out
08:09:49 <Botje> donri: i think that should work
08:10:10 <chrisdone> I downloaded everything I could find
08:10:30 <paolino> Axman6, I said thanks too early, I suppose, I meant please probably. Then please I need help debugging :)
08:10:34 <pumpkin> man, this tool is going to be great for recurring trolls
08:10:41 <pumpkin> preflex: seen tolkad
08:10:41 <preflex>  tolkad was last seen on #haskell 3 days, 17 hours, 12 minutes and 18 seconds ago, saying: thanks
08:11:14 <chrisdone> pumpkin: haha, yeah. "hmm. ah! here you are, in 2004 talking about F#. troll detected!"
08:11:22 <pumpkin> :O
08:11:24 <pumpkin> :P
08:11:51 <ddarius> chrisdone: Okay.  I apparently downloaded the wrong 2003.
08:14:10 <monochrom> paolino: probably add the experimental {-# LANGUAGE MonoLocalBinds #-} :)
08:14:56 <pumpkin> jaspervdj: I have a simple syntax highlighter for agda now! now I just need to figure out how to interleave non-code with code for literate code blocks in text
08:15:31 * monochrom is now sold! "let should not be generalised"
08:16:27 <monochrom> err wait, does that mean "let f x = blah" is not generalized either?
08:17:20 <Heffalump> monochrom: correct, why would it be?
08:17:33 <monochrom> I guess there is still "where"
08:18:08 <monochrom> oh wait, "local" includes "where"
08:18:09 <chrisdone> it's fun to see early messages of people confused about the simplest Haskell concepts. lessons learned: things don't just come naturally and hard work pays off
08:18:27 <benmachine> what about top-level, should they be generalised?
08:18:42 <ddarius> Anyone talking about F# in 2004 would not be a troll.
08:18:45 <monochrom> yes, top-level are generalized
08:19:01 <chrisdone> ddarius: heh, true
08:19:27 * monochrom was not confused about simple haskell concepts.
08:19:54 * benmachine was confused about complicated haskell concepts, like types and functions
08:19:58 <Twey> ddarius: I'm pretty sure jdh was talking about F# in 2004.
08:20:00 * monochrom already practiced type-driven programming when learning lisp.
08:20:04 <chrisdone> 2007-02-03 23:37:56 <fax> what exactly does flip do?
08:20:11 <chrisdone> I miss fax :(
08:20:24 <pumpkin> have you searched for the thousand other nicks?
08:20:31 <pumpkin> fax is probably the original though
08:20:40 <Botje> @protontorpedo
08:20:40 <lambdabot> and haskell is general purpose?
08:20:44 <paolino> monochrom, the let is my problem ?
08:20:46 <ddarius> pumpkin: I'm pretty sure fax wasn't the first one.
08:20:49 <pumpkin> one of the other names was hanging out in #agda and #epigram for a while
08:20:58 <pumpkin> until a month or so ago, even
08:21:01 <pumpkin> not sure what happened then
08:21:21 <chrisdone> yeah, every few months the nick changed. that was just the way fax rolled
08:21:23 <jaspervdj> pumpkin: good luck :-)
08:21:34 <pumpkin> jaspervdj: I shall succeed!!
08:21:45 <donri> "instance Printable [Char]" wants me to enable FlexibleInstances?
08:21:53 <pumpkin> yeah
08:22:08 <donri> How do you write an instance for String without no god damn extensions :P
08:22:20 <Twey> Don't fear the extensions
08:22:21 <benmachine> instance (IsChar a) => [a] where
08:22:22 <chrisdone> I knew them before they started learning haskell, from the ##c channel. I remember having currying explained to me :p and us both being confused about why it was useful :p
08:22:31 <benmachine> or there are other h98 ways I think
08:22:36 <pumpkin> donri: you can do the ugly trick they do for Show
08:22:39 <pumpkin> for your own custom class
08:22:44 <pumpkin> if it's another class you can't,
08:23:24 <donri> benmachine: "IsChar"?
08:23:38 <benmachine> donri: sec, I think there's a wiki page on this
08:24:11 <pumpkin> class IsChar a where isChar :: (a ~ Char) => a -> a
08:24:59 <donri> And what's wrong with "instance (Num a) => Printable a"?
08:25:14 <pumpkin> it looks almost like instance Printable a
08:25:15 <benmachine> donri: http://haskell.org/haskellwiki/List_instance
08:25:36 <benmachine> pumpkin: no extensions :P
08:26:39 <benmachine> but I'd say just use FlexibleInstances, as extensions go it's one of the less evil
08:26:44 <pumpkin> IsChar just means it's isomorphic to Char
08:27:28 <benmachine> well, it's in correspondence with Char somehow
08:27:34 <benmachine> might not be an isomorphism :P
08:27:51 <donri> Not against extensions, just trying to learn, was experimenting with classes and was baffled.
08:29:00 <paolino> monochrom, it compiled, thanks. I go and read about monolocalbinds
08:29:01 <chrisdone> enabling extensions is the putting on your shoes and jacket of Haskell programming
08:29:10 <benmachine> donri: in haskell98 instances are of the form TypeCon typevar1 typevar2 typevar3... where all the typevars are distinct
08:29:43 <benmachine> interesting thing about such instances is they can't overlap unless identical
08:29:51 <benmachine> modulo contexts
08:30:30 <donri> Wiki suggests FlexibleInstances, shouldn't that be TypeSynonymInstances?
08:30:35 <donri> Flexible isn't doing it for me.
08:30:42 <pumpkin> just write [Char]
08:30:49 <pumpkin> TypeSynonymInstances will let you write String
08:30:52 <chrisdone> Flexible would be for [Char]
08:30:56 <pumpkin> but you still need FlexibleInstances
08:31:08 <donri> The wiki combines flexible with String :P
08:31:35 <donri> String works without [explicit?] flexible with TypeSynonym
08:32:24 * ddarius is still confused about his IRC history.
08:32:49 <benmachine> it does? that's odd
08:34:10 <benmachine> that's really odd
08:34:19 <benmachine> I reckon that's a bug, actually
08:34:24 <donri> So how do I write an instance for Num? With extensions if needed
08:34:35 <donri> benmachine: Maybe TypeSynonym implies Flexible?
08:34:37 <benmachine> or, it's just TypeSynonymInstances behaving weirdly
08:34:52 <benmachine> donri: no, instance C [Char] is rejected while instance C String is accepted
08:35:03 <donri> Regardless, the wiki would appear to provide a broken example
08:35:16 <benmachine> donri: an instance for Num? what does that mean?
08:35:32 <donri> Maybe nothing :) trying to learn here
08:35:49 <benmachine> donri: Num is a type class, not a type
08:35:54 <benmachine> the problem then is
08:36:09 <benmachine> suppose you have instance (Num n) => Wibble n
08:36:11 <donri> Yep, but can I not write an instance for Num that covers all the Num types?
08:36:17 <benmachine> and you also have instance Wibble Char
08:36:27 <benmachine> and then someone else comes along and writes instance Num Wibble
08:36:31 <benmachine> eeer
08:36:37 <benmachine> instance Num Char, sorry
08:36:46 <benmachine> then what do you do with Chars wrt Wibbles?
08:37:14 <benmachine> you can define instance (Num n) => Wibble n, but you can't define any other instances at all in that case
08:37:38 <benmachine> the usual solution here is to either instance type-by-type, or use a newtype wrapper
08:38:01 <benmachine> (by the former I mean instance Int, Integer, Float, Double, Rational, etc.)
08:38:35 <donri> Why is literal "5" inferred as "Num" and not "Int"?
08:38:43 <Botje> because it could be any of them
08:38:51 <Botje> > 5 :: Float
08:38:52 <lambdabot>   5.0
08:38:56 <benmachine> integer literals are translated internally to have a fromInteger call
08:39:02 <Zao> donri: Would be rather annoying if all literals were some boring concrete type always.
08:39:09 <benmachine> so 5 really means fromInteger (5 :: Integer)
08:39:41 <chrisdone> you could implement your own number type and have 4 mean "fire the missiles"
08:40:14 <Jafet> "The bomb, Dimitri. The *hydrogen* bomb."
08:40:18 <benmachine> instance Num IO where
08:40:19 <benmachine> er
08:40:21 <chrisdone> haha
08:40:26 <benmachine> instance Num (IO a) where
08:40:28 <benmachine> >_>
08:40:32 <Jafet> benmachine: wat
08:40:39 <benmachine> Jafet: what could possibly go wrong?
08:40:52 <donri> And I take it writing instances for Show has the same issues as Num?
08:40:58 <donri> "instance (Show a) => Printable a"
08:41:12 * Jafet sprinkles cobalt-60 on benmachine
08:41:12 <ddarius> benmachine: hGetContents 1
08:41:12 <chrisdone> donri: that's easy
08:41:36 <benmachine> donri: yeah, you can't define any other Printable instance then without the possibility of ambiguity
08:41:53 <benmachine> ddarius: something like that >_>
08:42:14 * benmachine gets cancer or something
08:42:40 <chrisdone> postgres insertion appears to be quite slow. I tried doing a prepared statement which I think would speed it up considerably but I can't get that to run without informationless exceptions. I'm up to 2008.11.13 and it's taking around one minute per day
08:42:40 <chrisdone>  
08:43:08 <ddarius> Only 18 hours remaining then.
08:43:28 <benmachine> donri: it might help if you realised that when you're compiling the module with that instance in, you don't yet have access to all the instances of Show or Printable that might eventually end up in your program, because they might be in modules you haven't compiled yet
08:43:58 <Jafet> -XFigureItOut
08:44:21 <donri> Is that a real extension
08:44:32 <ddarius> chrisdone: The earliest date you have for Darius saying something is 3.3.26 ?
08:44:39 * pumpkin wonders what a cyclic impredicativity would look like... you have type : kind and kind : type
08:44:52 <chrisdone> ddarius: yeah
08:45:00 <ddarius> pumpkin: Presumably the same as having * : *
08:45:02 <chrisdone> ddarius: is there an earlier date?
08:45:13 <pumpkin> ddarius: yeah, from the logical standpoint
08:45:29 <pumpkin> I just mean if you can do anything fun too
08:45:33 <monochrom> -XTypeDirectedJoin
08:45:46 <chrisdone> donri: no
08:45:51 <ddarius> chrisdone: Not that I see, but the earliest messages don't seem consistent with what I recall.
08:46:00 <donri> -XTheAnswerIs42
08:46:52 <monochrom> -XImpredicativeTheTypeThatEatsThoseTypesThatDontEatThemselves
08:47:35 <donri> What's the right way then to write a function that reacts differently depending on the class membership of the argument? Or am I crazy?
08:48:01 <monochrom> put that function inside the class
08:48:01 <Zao> donri: I wouldn't say you can.
08:48:07 <Zao> donri: Unless you make it an instance of something.
08:49:01 <donri> And why doesn't "instance Printable Int" match 5::Num
08:49:24 <monochrom> why should it? Num = Int?
08:49:33 <Saizan> Num is not even a type
08:50:11 <chrisdone> donri: class names can't be used like type names. the syntax for classes is always Num t => <type>, e.g. Num t => t, or Num t => (t,Int)
08:50:12 <shapr> Is there a good way to search hpaste for usage of particular functions?
08:50:53 <donri> chrisdone: I think my mind is starting to work again
08:50:57 <donri> Thanks you guys
08:51:08 <chrisdone> shapr: not right now, but I will add a search. google's site search seems to work a bit but yeah not native
08:51:11 * shapr sticks with site:hpaste.org
08:51:18 <shapr> chrisdone: awesome, thanks!
08:51:28 <ddarius> chrisdone: The first day of me speaking in the logs has me talking about the internals of lambdabot while I'm pretty sure I was here months before lambdabot was.
08:51:55 <shapr> I'm sure of that also.
08:52:04 <ddarius> chrisdone: Also, my "first" message is within a minute of joining and is answering someone's question, which seems pretty audacious even for me.
08:52:25 <chrisdone> ddarius: I thought that you'd've been here before the logs started
08:52:29 <pumpkin> the mystery of the audacious ddarius
08:52:51 * pumpkin has difficulty imagining a newbie ddarius
08:53:00 <shapr> Aww, google still caches really old pastes.
08:53:13 <shapr> pumpkin: He was only a Haskell newbie, his c++ knowledge was amazing!
08:53:23 <monochrom> when I was a newbie I wasn't here yet
08:53:33 <ddarius> chrisdone: The logs started almost as soon as the channel started.  At any rate, I hadn't heard about Haskell until 2002.
08:53:56 * shapr envisions ddarius springing fully formed from the forehead of Stroustrup
08:54:10 <monochrom> what a devil
08:54:17 <chrisdone>  2002-09-16 07:25:19 <lambdabot> I live. <- my first log of lambdabot
08:54:28 <chrisdone> ddarius: did you go by another nick than Darius or ddarius, perhaps?
08:54:40 <monochrom> xxerxes
08:54:41 <donri> devildareius
08:54:51 <ddarius> chrisdone: I've been wondering that, but I can't think of one.
08:55:13 <pumpkin> chrisdone: can you search by hostmask?
08:55:31 <chrisdone> sure, I'll try that
08:55:42 <ddarius> pumpkin: Grepping for dialup.rcn.com produces pretty much the same results.
08:55:45 <pumpkin> ah
08:55:55 <pumpkin> or maybe nick changes?
08:56:03 <pumpkin> maybe at some point you'll find X renamed to ddarius
08:56:05 * pumpkin shrugs
08:56:21 <ddarius> pumpkin: Darius_ -> ddarius, what would be needed is a rename to Darius.
08:57:04 <ddarius> But that would come up grepping for Darius anyway.  So, the early logs (and some later logs) are sketchy.
08:57:35 <chrisdone> I see hcf (~nef@..e.dialup.rcn.com) but is hcf another person?
08:57:35 <chrisdone>  
08:58:00 <pumpkin> rcn is a fairly large ISP
08:58:34 <ddarius> hcf is definitely another person.
08:59:00 <Jonno_FTW> how would I specify the name of the output executable when using ghc?
08:59:09 <monochrom> -o me
08:59:22 <ddarius> -o me -o my
08:59:38 <monochrom> -o readme.txt
09:00:44 <Jonno_FTW> hehehe
09:03:57 <ddarius> Bah.
09:04:07 * ddarius will have to start making bread regularly.
09:04:18 <Jonno_FTW> :O
09:04:31 <monochrom> haskell is the best thing since ddarius bread?
09:04:40 <Jonno_FTW> how can I do an assignment in a case of expression within a do block?
09:04:47 * chrisdone is eating a delicious piece of bread presently
09:05:05 <monochrom> another level of do. yes you can say "I'm in deep do-do"
09:05:25 <monochrom> do {x<-m; case x of {Just y -> do ...
09:06:56 <Jonno_FTW> i'm still stuck
09:07:32 <monochrom> do {x<-m; case x of {Just y -> do {z<-n; return z}; Nothing -> do {z<-k; return z} }
09:07:34 * hackagebot Pugs 6.2.13.16 - A Perl 6 Implementation  http://hackage.haskell.org/package/Pugs-6.2.13.16 (AudreyTang)
09:07:38 <ddarius> Jonno_FTW: You should tell you implementor to use a sound type system next time.
09:08:04 <monochrom> hahaha
09:08:11 <Jonno_FTW> I have this so far: http://hpaste.org/40306/case_trouble
09:08:33 <monochrom> Right bs -> do { input <- bs; ... }
09:09:01 <Jonno_FTW> but the only thing I want to do is the assignment
09:09:08 <Jonno_FTW> and you can't do that in a do block
09:09:08 <monochrom> does not exist
09:09:29 <Jonno_FTW> or should I move the rest of my program into the 2nd do block?
09:09:40 <monochrom> if it is not too much trouble
09:10:34 <dons> byorgey: can you put your slides online from your two talks this week?
09:10:41 <Jonno_FTW> now I get even crazier errors
09:11:19 <Jonno_FTW>    Couldn't match expected type `B.ByteString'
09:11:19 <Jonno_FTW>           against inferred type `m a'
09:11:27 <dons> missing a return ?
09:11:54 <Jonno_FTW> how do I use a return?
09:12:05 <Jonno_FTW> perhaps it would help if I pasted the whole thing
09:12:07 <aavogt> missing a <-
09:13:52 <Jonno_FTW> I have this so far
09:13:56 <Jonno_FTW> http://hpaste.org/paste/40306/the_whole_program#p40307
09:14:09 <monochrom> type errors are like corruption among people. either you just don't look, or you try to rectify one instance you see and you only find even crazier ones underneath
09:15:45 <dmwit> Oh, wow. hpaste got hlint integration =P
09:15:50 <monochrom> this is why some people swear by dynamically typed languages. they don't want to face their own corruption.
09:16:02 <Jonno_FTW> hehe
09:16:04 <gwern> the ring of power is easily donned
09:16:05 <danharaj> When you stare into bottom, bottom stares back at you.
09:16:08 <Jonno_FTW> but I am still stuck
09:16:21 <dmwit> Having just joined, what's the problem statement?
09:16:31 <Botje> Jonno_FTW: input <- bs is wrong
09:16:45 <Botje> if down :: Either String ByteString (as you mentioned earlier)
09:16:50 <Botje> then bs :: Bytestring
09:17:00 <Botje> so input <- bs tries to interpret bs as a monadic value, which fails
09:17:16 <Botje> Jonno_FTW: i think you want to simply use bs where you have input now.
09:17:58 <danharaj> A common misunderstanding is that "<-" is variable assignment.
09:18:01 <Botje> or is that what you tried earlier? i haven't read much above
09:18:13 <Botje> danharaj: but it is! just not in haskell!
09:18:22 <Jonno_FTW> what is it in haskell?
09:18:35 <monochrom> writeIORef
09:18:41 <Jonno_FTW> Botje: I didn't try that before
09:18:45 <monochrom> but you have no use of writeIORef here
09:18:57 <Botje> Jonno_FTW: type error means it's time to stop and think :)
09:19:28 <Jonno_FTW> yeah
09:19:38 <Jonno_FTW> let output = fmap f (fmap G.decompress bs)
09:19:45 <Jonno_FTW> I get an error on that now
09:20:10 <Jonno_FTW> expecting f B.ByteString, inferred B.ByteString
09:20:21 <Botje> yes
09:20:39 <Botje> decompress is just BS -> BS?
09:20:42 <Botje> then drop the fmap
09:20:55 <Botje> and i think the same for fmap f
09:21:16 <Botje> so let output = f (G.decompress bs)
09:21:22 <Jonno_FTW> but I need to apply f over every line in the decompressed file
09:21:41 <Botje> then you need to split it into lines first
09:21:50 <Botje> @hoogle lines
09:21:51 <lambdabot> Prelude lines :: String -> [String]
09:21:51 <lambdabot> Data.List lines :: String -> [String]
09:21:51 <lambdabot> Data.ByteString.Char8 lines :: ByteString -> [ByteString]
09:21:58 <ddarius> Oy vey
09:22:01 <Botje> there's one for bytestrings
09:22:01 <Jonno_FTW> i'm using lazy bytestring though
09:22:08 <Botje> yeah, it probably exists there
09:22:18 <Jonno_FTW> there isn't one
09:22:22 <Botje> seriously?
09:22:41 <Jonno_FTW> http://hackage.haskell.org/packages/archive/bytestring/0.9.0.4/doc/html/Data-ByteString-Lazy.html
09:23:14 <Botje> Jonno_FTW: there's a split function, though
09:23:19 <Jonno_FTW> perhaps i'll just use split '\n'
09:23:21 <Botje> yeah
09:23:33 <Botje> so split '\n' (G.decompress bs) :: [ByteString]
09:23:40 <Botje> and then you can apply map f to that
09:23:50 <Botje> that's still [ByteString]
09:24:02 <ddarius> http://hackage.haskell.org/packages/archive/bytestring/0.9.0.4/doc/html/Data-ByteString-Lazy-Char8.html#15
09:24:04 <Botje> which you can join back together with '\n' to get a ByteString
09:24:05 <Jonno_FTW> concat the whole thing?
09:24:16 <Jonno_FTW> or does split remove the character?
09:24:19 <Botje> yes
09:24:19 * ddarius repeats: oy vey
09:24:31 <Botje> split '\n' "a\nb\nd\ne" == ["a","b","d","e"]
09:25:02 <Jonno_FTW> what does join do?
09:26:16 <Jonno_FTW> > join '\n' ["a","few","strings"]
09:26:17 <lambdabot>   Couldn't match expected type `m (m a)'
09:26:17 <lambdabot>         against inferred type `GHC.T...
09:27:09 <vitka> > join '\n' ["a","few","strings"] >>= return
09:27:10 <lambdabot>   Couldn't match expected type `t -> t -> m a'
09:27:10 <lambdabot>         against inferred type ...
09:27:14 <Jonno_FTW> :t join
09:27:15 <lambdabot> forall (m :: * -> *) a. (Monad m) => m (m a) -> m a
09:27:29 <gwern> some splits remove the delimiter
09:27:29 <Saizan> :t Data.ByteString.Lazy.Char8.lines -- Jonno_FTW 
09:27:30 <lambdabot> BSLC.ByteString -> [BSLC.ByteString]
09:27:32 <gwern> depends on which you use
09:27:57 <aavogt> > intercalate "\n" ["a","few","strings"]
09:27:58 <lambdabot>   "a\nfew\nstrings"
09:28:10 <aavogt> unlines works too
09:28:24 <Jonno_FTW> unlines isn't in lazy bytestring
09:28:47 <aavogt> that's because the way to start a new line varies
09:29:31 <aavogt> Jonno_FTW: http://hackage.haskell.org/packages/archive/bytestring/0.9.1.7/doc/html/Data-ByteString-Lazy-Char8.html
09:31:35 <aavogt> I thought there was an unlines in Data.ByteString.Lazy.UTF8 too
09:31:55 <Jonno_FTW> ok
09:34:41 <Jonno_FTW> IT WORKS
09:35:01 <Jonno_FTW> except, compiling failed when using libcurl
09:35:27 <Jonno_FTW> /mingw/lib/libcurl.a(ldap.o):ldap.c:(.text+0x87b): undefined reference to `_imp_
09:35:30 <Jonno_FTW> _ldap_unbind_s'
09:36:34 <Jonno_FTW> do I need a new libcurl or something?
09:40:57 <copumpkin> what does http://snapplr.com/6b41 even mean?
09:41:01 <copumpkin> nominolo? :P
09:43:30 <nominolo> copumpkin: no idea.  github bug. I added bos as a committer
09:44:09 <copumpkin> ah, okay :)
09:44:13 <copumpkin> cool
09:48:18 <anhuman> hi all
09:49:29 <anhuman> I'm new here ... this a day before I've started to learn Haskell and I love it :)
09:49:52 <Jonno_FTW> anhuman: welcome to the club
09:51:20 <anhuman> I've develop more then 10 years and anfortunately only this dey meet with functional lang.
09:51:33 <xcvii> hey anhuman, where did you hear about Haskell?
09:52:07 <anhuman> hm... 
09:52:58 <anhuman> when I read abaut java 7 new functional camability
09:53:21 <anhuman> caus I'm java dev'r
09:54:19 <Jonno_FTW> java now has functional stuff?
09:54:51 <rothwell> think the jvm sprouted some new features to make it easier to support functional languages
09:55:02 <telephone> :q
10:02:28 <Jonno_FTW> so I got my program sorted out but then it falls apart when compiling on a completely non-haskell related matter
10:02:49 <anhuman> yes it will have lambda calculus interpreter
10:04:17 <rothwell> maybe someone will have another go at a jvm backend for ghc
10:07:09 <anhuman> there is soma project for make possible using Haskell from java (in native way) but in JDK7 will contain this feature... but I not read how it will interpret the rules
10:07:41 <anhuman> And dotNEt already have something for lambda
10:07:44 <rothwell> anhuman: i actually meant another go at making ghc emit java bytecode
10:07:59 <rothwell> there was a backend previously that did this but it's not maintained now... as far as i know
10:14:07 <anhuman> yes... you're right. 
10:18:18 <anhuman> oh ... and sorry for my Englis ... 've actualy read back what I've wrote and there was some rude grammar thing :\ 
10:19:16 <Cale> anhuman: It's not so bad, we can understand you well enough :)
10:21:34 <anhuman> what abaut the software developed in Haskell ... I mean, robust commersal tools or utility ... or Haskell used for scientific dev, and calc?
10:23:17 <IceDane> I think it's *mainly* used for academic purposes, but I think it gets used a bit in the financial world
10:23:26 <IceDane> but the other people in here know more
10:24:11 <monochrom> all of the above
10:24:32 <anhuman> mono: can you give examle?
10:24:42 <IceDane> http://www.haskell.org/haskellwiki/Haskell_in_industry
10:25:16 * dons is sitting at the Commercial Users of FP conference, learning about commercial products.
10:25:25 <IceDane> dons: like right now? o.o
10:25:30 <anhuman> oh... thx. 
10:25:33 <dons> IceDane: its mainly used for open source projects. secondarily for research, and secondarily for commercial things.
10:25:46 <IceDane> dons: yeah, I've seen a lot of open source stuff
10:26:09 <IceDane> anhuman: But there really isn't anything about haskell that restricts its usage.. There's even stuff online about writing linux kernel modules for it, hehe
10:26:11 <dons> we have the Industrial Haskell Group to fund commercial improvements, haskell.org to direct open source, and many research groups directing research changes.
10:26:21 <IceDane> And there are some guys in here that wrote a blog system and so on
10:26:26 <dons> http://www.haskell.org/haskellwiki/Haskell_in_industry lists many of the companies that have made use of haskell
10:26:39 <dons> http://hackage.haskell.org lists many of the open source projects
10:26:52 <dons> IceDane: yes, right now.
10:26:59 <IceDane> dons: Cool
10:27:01 <dons> http://cufp.org <-- commercial users conference.
10:27:02 * hackagebot wumpus-core 0.34.0 - Pure Haskell PostScript and SVG generation.  http://hackage.haskell.org/package/wumpus-core-0.34.0 (StephenTetley)
10:27:05 * hackagebot wumpus-basic 0.9.0 - Common drawing utilities built on wumpus-core.  http://hackage.haskell.org/package/wumpus-basic-0.9.0 (StephenTetley)
10:27:12 <dons> ^^ another open source release.
10:27:14 <anhuman> ik thx ... I'm checking it
10:27:42 <benmachine> oh hey dons I was just considering emailing you about the strict package, which you seem to be listed maintainer of, and how some of the types don't follow the Functor laws
10:28:07 * hackagebot ssh 0.1 - A pure-Haskell SSH server library.  http://hackage.haskell.org/package/ssh-0.1 (AlexSuraci)
10:28:09 * hackagebot wumpus-microprint 0.9.0 - Microprints - "greek-text" pictures.  http://hackage.haskell.org/package/wumpus-microprint-0.9.0 (StephenTetley)
10:28:11 * hackagebot ansi-terminal 0.5.4 - Simple ANSI terminal support, with Windows compatibility  http://hackage.haskell.org/package/ansi-terminal-0.5.4 (MaxBolingbroke)
10:28:13 * hackagebot wumpus-tree 0.8.0 - Drawing trees  http://hackage.haskell.org/package/wumpus-tree-0.8.0 (StephenTetley)
10:28:15 <benmachine> :O
10:28:41 <chrisdone> ooo, ansi-terminal support
10:28:48 <dons> there's a lot of open source haskell...
10:28:52 <dons> ssh 0.1 - A pure-Haskell SSH server library !!
10:29:01 <alexsuraci> dons: just split it from darcsden :)
10:29:03 * hackagebot test-framework 0.3.3 - Framework for running and organising tests, with HUnit and QuickCheck support  http://hackage.haskell.org/package/test-framework-0.3.3 (MaxBolingbroke)
10:29:48 <chrisdone> dons: oh wow
10:29:49 <dons> alexsuraci: you rock
10:29:55 <dons> cabal install ssh
10:29:57 <dons> woot woot
10:30:06 <IceDane> I have a question: do any of you do LISP(or a dialect thereof) and if so, do you prefer haskell over it(or the opposite) and why?
10:30:08 <dons> ah on top of openssl
10:30:10 <alexsuraci> haha, let me know how it goes
10:30:13 <dons> so not really "pure haskell" ... :}
10:30:13 <alexsuraci> well, not really
10:30:17 <dons> oh?
10:30:24 <olsner> it's pure except for the impure parts!
10:30:34 <alexsuraci> let me see what parts of HsOpenSSL it uses, it's not much
10:30:38 <alexsuraci> if I recall correctly
10:30:43 <dons> might be cool to remove the openssl dep?
10:30:45 <IceDane> Because my first real introduction to functional programming (apart from the stupid extension method stuff and LINQ in C#) is from Haskell, but I still see people talk about LISP like it's the love of their life
10:30:55 <alexsuraci> i'd love to, but I was time constrained :)
10:31:04 <dons> sure. wonderful work though!
10:31:08 <monochrom> lisp is the love of some people's lives, yes
10:31:31 <IceDane> monochrom: Ah, I meant some haskellers I've been reading stuff from online
10:31:36 <IceDane> I can't actually name any ones in particular
10:31:42 <chrisdone> IceDane: my colleagues like lisp, it's okay, but if you want types and assurance, and a truckload of new libraries every day -- Haskell's waiting!
10:32:09 <alexsuraci> dons: grepping the source, I use OpenSSL.DSA and OpenSSL.BN
10:32:18 <IceDane> But what I'm trying to get at is that as a newbie, haskell is seriously awesome and to me, LISP just looks like the road to a wrist condition and I can't really see why someone would choose haskell over LSIP
10:32:22 <IceDane> LISP*
10:32:36 <IceDane> But I dont' really know either language well enough to know what haskell might lack that lisp has and so on
10:32:46 <monochrom> in cs at the u of toronto, there is no programming language prof to speak of. well, so who teaches the "principle of programming languages" course? well, there was a long time the course was dominated by the computational linguistics people, and they knew nothing but lisp.
10:33:18 <IceDane> (LISP over haskell*)
10:33:44 <monochrom> even scheme would be better than lisp for that purpose.
10:33:45 <donri> What is the relation between happs and happstack?
10:35:39 <rovar> happs is the original version of happstack
10:35:42 <chrisdone> IceDane: I came from common lisp and scheme -- their main strength is that syntactic extension looks like the rest of the language, and the IDE is good. that's about it. it's not a huge benefit. it has far more down-sides: enjoy your runtime errors, lack of community (heard of cats) or community growth, the best implementations (of the million out there) are proprietary and the free ones are kinda lagging, libraries and docs are
10:35:42 <chrisdone> hopelessly lacking, etc.
10:36:42 <IceDane> chrisdone: Ah, good
10:36:52 <IceDane> Haskell felt right, anyway
10:36:56 <chrisdone> happstack is happs re-vamped with flames on the side
10:37:04 <IceDane> I told my mates to start with Haskell, but they're going to get into FP through CLISP
10:37:30 <dons> clisp oh my
10:37:32 <chrisdone> IceDane: good luck with that. they might as well use python, ruby or javascript to "get into fp"
10:37:32 <IceDane> I'm going to give them parentheses for christmas.. they'll need them
10:37:47 <dons> chrisdone: with the benefit of being dead 
10:37:51 <rovar> scheme/lisp is good if you have or are simultaneously learning untyped lambda calculus
10:38:03 <dons> racket would be a better starting point.
10:38:06 <dons> for teaching.
10:38:15 <donri> Cool, thanks
10:38:56 <rovar> dons, do you happen to know of any graph persistence libraries for haskell? 
10:39:03 <chrisdone> donri: I updated the list of web frameworks (well, kinda re-organised the whoel web section of the wiki) if you're interested
10:39:06 <IceDane> chrisdone: How so? 
10:39:13 <IceDane> @ the python/ruby comment
10:39:18 <donri> chrisdone: Sure. Link?
10:39:27 <chrisdone> http://haskell.org/haskellwiki/Web
10:41:10 <donri> chrisdone: Happstack Announcement: http://www.haskell.org/pipermail/haskell-cafe/2010-May/078005.html ← Oh snap!
10:41:13 <chrisdone> IceDane: because there's nothing particularly functional about lisp over ruby, python or javascript. it has closures -- so do python, ruby and javascript. I made a parser monad in javascript. lisp code in the real world is imperative. I really wish people would stop calling lisp functional
10:41:13 <dons> rovar: persistent in what sense? immutable, or serializable?
10:41:18 <arw> IceDane: the kind of FP that you learn in introductory FP courses is often so trivial that the very basic "FP features" of python or ruby are enough. i guess.
10:41:28 <IceDane> arw: chrisdone I see. 
10:41:39 <rovar> dons, serializable
10:42:07 <chrisdone> donri: ah, woops
10:42:27 <arw> chrisdone: well, lisp has more functional-looking libraries than the other three.
10:42:31 <rovar> i was thinking about writing a simple storage scheme whereby references to nodes are stored adjacently and the data that they contain would be stored separately, 
10:42:32 <chrisdone> donri: I made *a lot* of changes yesterday, couple mistakes bound to be about
10:42:42 <donri> No, you are not excused
10:42:50 <gwern> ah neat. add one line to hakyll.hs, and now you can do 'darcs get http://www.gwern.net'
10:42:51 <donri> Put on the shame hat
10:42:56 <gwern> excellent
10:43:02 <rovar> so as to optimize node loading for traversal on graphs that are too large to load into memory. 
10:43:23 <gwern> with --lazy, fast too
10:43:38 * chrisdone dons the hat of shame
10:43:41 <dmwit> gwern: You should add a DNS entry for gwern.net.
10:43:53 <dmwit> (for the lazy among us)
10:43:57 <cobra> donri: what advantage does libev have over GHC's builtin epoll/kqueue IO manager?
10:44:03 <gwern> dmwit: that works; just the host discourages it
10:44:09 <donri> cobra: duno, ask dons
10:44:18 <cobra> @seen dons
10:44:18 <lambdabot> Unknown command, try @list
10:44:18 <dmwit> gwern.net does not work here
10:44:18 <preflex>  dons was last seen on #haskell 3 minutes and 5 seconds ago, saying: rovar: persistent in what sense? immutable, or serializable?
10:44:21 <gwern> dmwit: something about dropping the www. means making load-balancing and domain transffering more difficult
10:44:44 <chrisdone> arw: for example?
10:44:44 <gwern> dmwit: well, it works here. so lol dunno maybe firefox is rewriting stuff behind my back
10:45:00 <donri> cobra: (Assuming that was a miscompletion.)
10:45:10 <dmwit> Odd, http://gwern.net/ does not work, but gwern.net/ *does*.
10:45:13 <chrisdone> works here too
10:45:16 <gwern> dmwit: elinks doesn't like it either
10:45:17 <dmwit> I wonder what chromium thinks it is doing.
10:45:31 <chrisdone> (www.gwern.net)
10:45:46 <dmwit> chrisdone: We are specifically discussing the non-www URL. =)
10:46:25 <arw> chrisdone: none really. just that the standard libraries in ruby or python usually assume OO-style programming, not functional-style.
10:46:28 * gwern checks out how the site looks in elinks while I'm at it
10:46:35 <cobra> donri: it wasn't a miscompletion, you gave the link to the snap announcement, i thought you were a developer
10:46:52 <donri> cobra: Ah, no.
10:47:13 <chrisdone> arw: lisp does not assume a functional style at all. lisp is object oriented and its OO facilities are arguably among the most powerful around
10:47:15 <donri> Well, *a* developer. But this is not the developer you're looking for.
10:47:31 <chrisdone> arw: do you know about CLOS?
10:47:43 <gwern> I don't think anyone really knows about CLOS
10:48:47 <arw> chrisdone: yes, i know about it, my OO introduction course at university was partially in CLOS.
10:49:12 <chrisdone> arw: so how is lisp "functional" and not assuming "OO-style programming"?
10:49:42 <cobra> can anyone give a short haskell function that will cause a segfault?
10:49:58 <arw> chrisdone: its not. its just the users of that particular language assume it is. they tend to use it more in one way and less in the other.
10:50:05 <revenantphx> cobra: I'm guessing any function that enforces strict evaluation and works with an infinite sequence...
10:50:16 <revenantphx> It'd hang forever, but eventually segfault presumably.
10:50:30 <revenantphx> I mean, your computer might start trashing first
10:50:33 <revenantphx> thrashing*
10:50:44 <chrisdone> arw: you really think that? based on what?
10:51:01 <cobra> revenantphx: I'm looking for something simple and quick, probably that uses invalid memory access
10:51:11 <revenantphx> hm
10:51:14 <revenantphx> see, in C this would be so easy XD
10:51:23 <benmachine> cobra: is unsafeCoerce allowed?
10:51:35 <cobra> benmachine: yep
10:51:42 <benmachine> cobra: if so, the trick is rather *avoiding* a segfault :P
10:51:46 <arw> chrisdone: observation. although of course that is very subjective...
10:51:53 <revenantphx> unaligned access would be easiest C wise.
10:52:08 <revenantphx> I don't think thats feasible in Hs
10:52:57 <benmachine> a straightforward way is
10:53:01 <chrisdone> bbl
10:53:22 <benmachine> import Foreign.Ptr (nullPtr); import Foreign.Storable (peek); main = peek nullPtr
10:53:23 <arw> chrisdone: one half rather thinks "pass a function that does X", the other half rather passes a "Xicator object"
10:53:46 <benmachine> er
10:54:02 <benmachine> import Foreign.Ptr (nullPtr); import Foreign.Storable (peek); main :: IO Int; main = peek nullPtr
10:54:19 <cobra> benmachine: thanks, that seems to work :)
10:54:30 <benmachine> a more entertaining way is
10:54:48 <benmachine> import Unsafe.Coerce (unsafeCoerce); main = unsafeCoerce unsafeCoerce unsafeCoerce
10:55:01 <benmachine> or well
10:55:11 <benmachine> typing unsafeCoerce unsafeCoerce unsafeCoerce into ghci segfaulted it
10:55:51 <benmachine> ok that doesn't work
10:56:41 <benmachine> ooor maybe it does, hmm
10:57:13 * benmachine is confused by no output from ghci
10:57:24 <benmachine> er runhaskell
10:57:31 <boegel> BONUS: ping?
10:57:39 <boegel> @seen BONUS
10:57:39 <preflex>  BONUS was last seen on #haskell 13 days, 22 hours and 18 minutes ago, saying: hvr: learn you a haskell
10:57:40 <lambdabot> Unknown command, try @list
10:57:50 <copumpkin> jaspervdj: is blazehtml in a good state?
10:57:53 <copumpkin> to be used already?
10:58:24 <benmachine> seems like runhaskell suppresses the Segmentation fault message somehow
10:59:30 <jaspervdj> copumpkin: Yep
10:59:40 <jaspervdj> copumpkin: They're using it at http://silkapp.com/
10:59:46 <copumpkin> cool, I might use that for generating html for my highlighter
11:00:13 <jaspervdj> copumpkin: The new hpaste (courtesy of chrisdone) uses it as well
11:00:17 <copumpkin> ah nice
11:01:19 <jaspervdj> copumpkin: there's a String renderer, that should be easiest to use with hakyll
11:01:27 <copumpkin> ah okay
11:01:42 <copumpkin> and no issues with unicode, of course?
11:05:13 * hackagebot xilinx-lava 5.0.1.0 - The Lava system for Xilinx FPGA design with layout combinators.  http://hackage.haskell.org/package/xilinx-lava-5.0.1.0 (SatnamSingh)
11:07:53 <gwern> copumpkin: I think hakyll is already using blazehtml
11:08:07 <copumpkin> really? I thought it said it would be moving to it soon
11:08:10 <gwern> at least jwhatever blogged about speed imrpvoements from blaze
11:08:22 <copumpkin> lol, jwhatever
11:08:28 <gwern> ah, hakyll HEAD uses it
11:08:33 <geheimdienst> @seen jwhatever
11:08:33 <preflex>  Sorry, I haven't seen jwhatever
11:08:33 <lambdabot> Unknown command, try @list
11:08:46 <gwern> uses >=0.2 && <= 0.3
11:09:08 <gwern> copumpkin: he has the discourtesy to have a hard last name
11:09:48 <gwern> I have an even more brutal 12 letter last name but I at least use an easily remembered nick
11:09:59 <tommd> gwern: No, your nick is not easy
11:10:17 * gwern thinks it is
11:10:20 <tommd> I always want to call you "gerwin" as in, Isabelle hacker / NICTA researcher.
11:10:25 <gwern> 'gw'<tab>
11:10:34 <geheimdienst> tommd, i think it's fine. it's just 5 letters and easily pronouncable
11:10:50 <tommd> For a little while I thought he might _be_ gerwin.
11:10:50 <dmwit> "Branwen" is twelve letters?
11:11:00 <gwern> dmwit: ...that's not my last name
11:11:03 <geheimdienst> isn't it branwein or somthing
11:11:29 <gwern> a pseudonymous given name merits an equally pseudonymous surname
11:13:08 <geheimdienst> john smith (stage name), born as jon smith ...
11:13:58 * Twey thinks it's pretty easy.
11:14:08 <Twey> Though I do sometimes want to call you ‘Gwen’.
11:15:02 * geheimdienst unfortunately sometimes misreads dmwit as dimwit
11:15:08 <Heffalump> gwern: why do you use a pseudonym, out of interest
11:15:09 <dmwit> gwern: P.S. your "about me" link is broken. Not that I'm stalking you or anything.
11:15:11 <Heffalump> geheimdienst: I have that problem too
11:15:23 <dmwit> It's intentional. =)
11:15:25 <gwern> dmwit: yeah, it's broken because I'm not yet sure what I want to reveal :)
11:15:30 <dmwit> ah =)
11:16:29 <geheimdienst> http://en.wikipedia.org/wiki/Gwern
11:16:35 <gwern> Heffalump: because sometimes people want to hurt me
11:16:40 <jaspervdj> copumpkin: unicode should be perfectly fine :-)
11:16:51 <copumpkin> gwern: yeah, gwern is pretty easy to remember, and distinctive :P
11:16:57 <copumpkin> jaspervdj: excellent!
11:17:10 <gwern> Heffalump: for example, Daniel Brandt - I would link you to his wikipedia article except we were cowardly and deleted it - managed to stalk me down to long island, despite my best pseudonymous efforts
11:17:27 <Heffalump> this is linked to wikipedia?
11:17:34 <copumpkin> gwern: you're not making much of an effort now, if you're telling a room of 600 people you're on long island
11:17:52 <gwern> copumpkin: I was on long island at that time, but that was like 2007
11:17:57 <gwern> or maybe 2006?
11:17:57 <copumpkin> oh
11:18:09 <copumpkin> do they have longcats on long island?
11:18:21 <gwern> I never looked
11:18:24 <geheimdienst> copumpkin: that narrows it down to only, what, 8 million people?
11:18:28 <gwern> long ducks, though
11:19:03 <copumpkin> geheimdienst: hey, any leaked bit is bad
11:19:26 <gwern> copumpkin: but I haven't been stalked by anyone for a year now, and that stalker didn't even make much of an effort. the furthest they got was calling a university to see whether I was employed there
11:19:34 <gwern> stupid gits didn't even realize 'Gwern Branwen' was a fake name
11:19:35 * copumpkin stalks gwern 
11:20:06 <copumpkin> aha, you're french! http://gwern.com/
11:20:16 <gwern> I mean, it's like being named 'Hamlet Gertrude'
11:20:23 <gwern> except welsh, not english, literature
11:21:00 <geheimdienst> how did you end up being stalked so much, if you don't mind the question? hackage uploads with very controversial function names ...?
11:21:11 <gwern> geheimdienst: wikipedia administrator
11:21:18 <geheimdienst> oh, i see
11:21:29 <gwern> being an inclusionist puts you in the firing line when people want their articles removed/turned into propaganda
11:21:57 <shachaf> gwern: You never mentioned how Daniel Brandt managed to do that.
11:22:13 <gwern> now, it could be worse. I never lost my job for being an admin, nor was I detained by the police over alleged death threats
11:22:48 <copumpkin> wikipedia is evil1!!1!
11:23:19 <gwern> shachaf: I'm *pretty* sure brandt did it through IRC logging, checking hostnames. my other theory is that he saw a request for undoing an autoblock and got an IP that way
11:23:56 <gwern> interesting times, anyway
11:23:57 <Heffalump> gwern: I didn't realise it was fake until someone told me
11:24:12 <Heffalump> how did you find out about the university being called?
11:24:16 <gwern> Heffalump: you're also not google searching me or stalking me.
11:24:19 <shachaf> Heffalump: Google would've told you easily enough.
11:24:30 <Heffalump> well, I am google searching you now :-)
11:24:31 <gwern> Heffalump: that stalker called in forum minions and a well-wisher sent me a link
11:24:32 <shachaf> gwern: Hmm. Is this as good as an admitting that you were Maru?
11:25:00 * geheimdienst wonders how any rational, civilized person could possibly get worked up to the level of death threats because of wikipedia disputes
11:25:02 <Heffalump> it's not particularly obvious that it's a pseudonym just from google either
11:25:04 <gwern> shachaf: if you had looked at my user page any time in the past year or two, you'd know that already :)
11:25:38 <shachaf> gwern: Oh, I see. Times have changed since I last worked on this.
11:25:41 <copumpkin> Heffalump: his parents might have just liked welsh literature, right?
11:25:51 * shachaf needs to update his Gwern File.
11:25:57 <copumpkin> that's what I assumed :P
11:26:01 * copumpkin must be dumb too
11:26:02 <shachaf> Except it's on another computer that I haven't backed up.
11:26:20 <shachaf> gwern: Which was the university? RIT?
11:26:30 <gwern> shachaf: they called RIT, yeah
11:26:54 * gwern was amused to imagine that conversation. 'Hello, do you have an employee named Gwern Branwen?' 'How do you spell that?...
11:26:58 <copumpkin> I thought you were somewhere else
11:27:04 <copumpkin> but I'm not sure why
11:27:05 <dmwit> Heffalump: It was obvious to me, once I had done a bit of Googling, when one of the top three hits was a listing of literary characters...
11:27:25 <dmwit> Not before the googling, though. =)
11:27:33 <manateeUser> G'night, all! :)
11:27:48 <Heffalump> dmwit: not sure how one can deduce a name is fake just because a literary character has it
11:27:51 <geheimdienst> g'night
11:27:53 <Heffalump> copumpkin: right
11:27:58 <gwern> it's a fine line, finding a nick that is short, memorable, unique, but also obviously probably fake to any stalker
11:28:16 <gwern> shachaf: I thought about sticking with 'Rhwawn', but I found that even I had trouble typing that one
11:28:25 <dmwit> Heffalump: Well, admittedly, I had the bit of information that his first name was a fake at that point.
11:29:14 <shachaf> dmwit: If anything, the first name on its own is a semi-valid name. You just wouldn't expect to see it in combination with the last.
11:29:32 <copumpkin> I've heard of people actually naming their kids things like that
11:29:41 * geheimdienst will henceforth the pseudonym of the sha1-hash of goethe's collected works
11:29:53 <copumpkin> a friend of a friend at college was called Precious, her sister was Princess, and her brother was Sir Nicholas
11:30:10 <gwern> copumpkin: hah. in some places 'Sir Nicholas' would be illegal to name him
11:30:10 <shachaf> gwern: So can I ask about the history of Maru Dubshinki? Why did he leave?
11:30:24 <copumpkin> gwern: luckily they're in the LAND OF THE FREE
11:30:25 <benmachine> did anyone call him Mr. Sir?
11:30:37 <gwern> shachaf: I was stressed out and made some bad decisions
11:31:01 <shachaf> gwern: Involving bots, or something else?
11:31:28 <gwern> I didn't want to fight the arbcom on it; even I wouldn't believe a promise to refrain from bad bot behavior
11:31:38 <cobra> http://www.haskell.org/pipermail/libraries/2010-April/013467.html
11:31:38 <gwern> so, I let them desysop me and started over
11:31:39 <cobra> what was decided in the end? Is a call to putMVar that doesn't block interruptable?
11:32:13 <shachaf> gwern: You banned yourself, if I remember correctly.
11:32:15 <gwern> shachaf: it wasn't a big loss. someone else took over my share of the PROD deletions, and life continued on
11:32:24 <gwern> that was the custom when I started
11:33:19 <gwern> (gwern is a better nick than maru, anyway)
11:35:01 <shachaf> gwern: Where did "Maru Dubshinki" come from?
11:35:16 <gwern> hm. google doesn't seem to have any easy way to search the raw html of pages. I want to find all links to community.haskell.org/~gwern/static/ and update them...
11:35:38 <shachaf> gwern: Hmm. You're still on Long Island, yes?
11:35:47 <shachaf> Coram or Centereach or something like that?
11:35:49 <geheimdienst> gwern: tried link:www.blah...?
11:36:11 <gwern> shachaf: well, 'maru' came from the Japanese ship suffix, which I foolishly thought would be a very rare search term. Dubshinki came from a guy I met whose last name I thought almost as awful as mine and so it amused me to use it as the pseudonym's surname
11:37:36 <shachaf> gwern: Ah, I see.
11:38:06 <shachaf> gwern: Admittedly those are some distance from Riverhead.
11:38:26 <benmachine> gwern: is it me or do none of the #links on your website go anywhere?
11:38:33 <benmachine> gwern: the footnote links I mean
11:38:41 * geheimdienst associates "maru" only with "kobayashi maru" and of course the box cat
11:38:53 <gwern> shachaf: it's funny though - the first person to de-anonymize me did it through nothing but knowing I edited a lot of japanese literature articles
11:39:00 <Adamant> I definitely think we should call gwern Gershwin
11:39:09 <gwern> benmachine: they're broken somehow by pandoc. I'm waiting on John's reply about that
11:39:16 <benmachine> oh right
11:39:20 <shachaf> gwern: Oh -- someone actually succeeded in that?
11:40:05 <gwern> shachaf: my sister mentione to a friend that I edited wikipedia, they wondered who the editor was, she couldn't remember my nick & said I edited a lot of etc, and they randomly guessed... 'gwern?' and she went 'yeah!'
11:40:22 <gwern> I was so annoyed. what was the point of using TOR and whatnot
11:40:34 <shachaf> gwern: Oh... Not an approach I can use, then.
11:40:55 <gwern> shachaf: but a cautionary lesson about long-term pseuodnyms. sometimes life just screws you over
11:41:14 <Adamant> gwern: if you share sufficient amount of information about yourself, someone can figure out who you are.
11:41:15 <shachaf> gwern: Alternative lesson: Don't tell your sister about your pseudonym.
11:41:27 <geheimdienst> hm ... but that friend of your sister didn't cause any trouble, right?
11:41:33 <gwern> that I know of...
11:41:47 <benmachine> I am aiming to avoid being stalked by being too boring to stalk
11:41:55 <benmachine> on the grounds that's it's laughably easy to find me >_>
11:41:56 <Adamant> gwern: pseudonymity and anonymity are just a speedbump
11:41:56 <chrisdone> gwern: true, fax is immune to this 
11:42:06 <Adamant> benmachine: that's my plan
11:42:26 <chrisdone> I wish nice ladies would stalk me
11:42:43 <gwern> nice ladies have stalkers of their own, too busy with them
11:42:48 <geheimdienst> chrisdone, tried being wp admin?
11:43:15 <chrisdone> "wp admin"?
11:43:32 <gwern> geheimdienst: they wouldn't let him anyway - RfA's standards are ridicuously high now
11:43:35 <shachaf> chrisdone: Wikipedia.
11:44:04 <geheimdienst> we were just talking about how gwern gets stalked and threatened because he's a wikipedia admin
11:44:05 <gwern> supposing my gwern account were not linked to maru in anyway - even with my 40k edits and ~100 articles, I would go down in flames
11:44:09 <chrisdone> hehe, max bolingbroke implemented lambda-case/lambda-if
11:44:48 <gwern> there are entire weeks and I think months where no one passes RfA
11:45:03 <gwern> which is amazing when you think about how many millions of articles there are and thousands of users
11:45:41 <geheimdienst> what is becoming an admin based on?
11:45:47 <geheimdienst> number of edits?
11:46:01 <chrisdone> what's the difference between a wikipedia admin and a normal user?
11:46:13 <gwern> geheimdienst: no. in fact statistically after about 20k edits, additional edits make no difference and may hurt
11:46:38 <dmwit> Wow, 20,000?
11:47:04 <gwern> brb
11:47:08 <dmwit> 4-5 per day, every day, for 10 years??
11:47:15 <dmwit> > 20000 / 5 / 365
11:47:16 <lambdabot>   10.95890410958904
11:47:29 <chrisdone> I made 100~ edits on the haskellwiki yesterday 
11:47:45 <chrisdone> unless "edit" means something other than changing or re-organising pages?
11:47:52 <geheimdienst> 11 years ago there was no wikipedia, no twitter, no blogs, no lolcats
11:47:52 <kmc> chrisdone, !
11:48:33 <chrisdone> nor broadband, for me
11:48:40 <kmc> chrisdone, i added Data and Typeable for Nick and Event
11:48:41 <monochrom> 11 years ago all the crackpots went to usenet
11:48:46 <chrisdone> kmc: thanks :-)
11:48:50 <kmc> i also added data GenericEvent = GenericEvent Constr (Maybe Nick) [Text]	
11:48:54 <cobra> is there a list of all function that are interruptible? or how can i check if a function is interruptible? for example, is forkIO interruptible?
11:48:56 <kmc> and a function decompose :: Event -> GenericEvent
11:49:01 <kmc> if that sounds good, i'll upload it now
11:49:10 <kmc> cobra, interruptible how?
11:49:32 <chrisdone> kmc: nice! sounds good
11:49:32 <monochrom> perhaps trolls too. "fp isn't realistic is it?" --> comp.lang.functional,comp.lang.lisp,comp.lang.scheme,comp.lang,c++,...
11:49:48 <Celessar> i did a GUI with Glade 3 and my haskell program doesn't read it
11:49:49 <kmc> cobra, if you want to block asynchronous exceptions you can use Control.Exception.block
11:49:54 <monochrom> yes, 11 years ago trolls were smart enough to target all newsgroups at once
11:50:36 <cobra> kmc: yeah, but the docs say that certain IO exceptions will still be interrupted even inside a block/mask
11:50:56 <kmc> oh
11:51:13 <kmc> i would suggest asking in #ghc but i see you already did :)
11:51:53 <monochrom> while blocked (putMVar x ()) "could be interrupted", I think it is interrupted only when the putMVar is actually waiting.
11:52:33 <dmwit> Celessar: too vague, try again
11:52:41 <monochrom> but this is just my common-sense inference, not from any doc or code
11:52:43 <pumpkin> lol
11:52:50 <cobra> monochrom: Above I pasted a link to a post by simon marlow where he explained that this isn't necessarily the case
11:53:02 <monochrom> oh foobar
11:53:48 <cobra> monochrom: so now I would like to know for sure that tryPutMVar is not interruptible
11:54:03 <vitka> Is it possible to make a result of case expression depending on type? Like when working with Parsec output, return parsed data in one case and abort and print ParseError in another?
11:54:22 <dmwit> :t fail
11:54:23 <lambdabot> forall (m :: * -> *) a. (Monad m) => String -> m a
11:54:33 <monochrom> then there is no solution at all
11:54:35 <dmwit> Parsec may have a more specific function than that, too.
11:54:49 <vitka> Something like 'either fail return'?
11:54:51 <chrisdone> parsec has 'expected' and things like that
11:55:18 <monochrom> oh, use stm. :)
11:55:24 <chrisdone> also throwError, IIRC, it's an instance of MonadError
11:55:25 <dmwit> vitka: Why not just use a case as usual?
11:55:28 <Celessar> Glade is a tool that helps to design GUI without writing code, generates an xml structure... I used the gtk2hs lib, but when i run the program it tells me that couldn't found the file .glade
11:55:49 <Celessar> a year ago i used glade version 2, and now there is a 3 version
11:55:53 <dmwit> case foo of success -> return 32; failed -> fail "expected some other damn thing"
11:55:58 <Celessar> i don't know how to deal with it
11:56:03 <cobra> monochrom: but the docs don't even tell me if/when "atomically" is interruptible! :)
11:56:35 <dmwit> And "expected" is actually called "unexpected". =)
11:56:47 <monochrom> right, but the Marlow message says it will be fine :)
11:57:41 <cobra> monochrom: actually, the marlow messages hints that it won't be fine, since because "atomically" can block in some cases, it may be interruptible in all cases
11:58:08 <dmwit> Celessar: Here, let me help you describe the problem precisely. What does your glade file look like? (You could paste it to hpaste.) What does your Haskell code look like? (hpaste) What happens when you run it? What were you expecting to happen when you ran it?
11:59:21 <kmc> chrisdone, http://hackage.haskell.org/package/clogparse-0.2
11:59:26 * hackagebot clogparse 0.2 - Parse IRC logs such as the #haskell logs on tunes.org  http://hackage.haskell.org/package/clogparse-0.2 (KeeganMcAllister)
11:59:30 <kmc> enjoy, and let me know if you need anything else :)
11:59:35 <kmc> beat you, hackagebot :)
11:59:39 <vitka> Ok, "either (error . show) return" did the trick.
11:59:54 <kmc> vitka, i use that idiom a lot
11:59:58 <pumpkin> kmc: did you decide what other mini-projects to work on?
11:59:58 <kmc> i wonder if it has a standard name
12:00:04 <kmc> pumpkin, no
12:00:09 <kmc> i really should finish this android stuff too
12:00:13 <monochrom> perhaps ask in the glasgow-haskell-users mailing list. perhaps I'll do exactly that.
12:00:48 <Celessar> you want me to paste all the glade file contents?
12:00:57 <Twey> Android stuff?
12:02:52 <cobra> monochrom: ok cool. It would be nice if in the docs for every basic IO function, it would be described if/when it is interruptible
12:03:14 <cobra> monochrom: btw, I am also interested in whether forkIO is interruptible
12:04:02 <cobra> monochrom: for now i guess i will just use uninterruptibleMask_
12:04:42 <res99> help
12:04:52 <cobra> (although also there, the docs aren't particularly precise on what the dangers of it are)
12:04:53 <res99> oops.
12:07:59 <pumpkin> @ask jaspervdj interesting Monad instance you have on your Html type :P
12:07:59 <lambdabot> Consider it noted.
12:15:14 <islands> hello, good morning/evening/etc
12:15:32 <eturpin> Can anyone explain what this funtion's signagure means:  plot1VarFunctions :: Frame.T (Graph2D.T Double Double)
12:15:44 <islands> i have been trying to install readline-1.0.1.0 via the command `cabal install readline` on a number of linux variants, without any luck.  anyone familiar with this?
12:15:48 <chrisdone> kmc: cheers :-)
12:16:03 <gwern> islands:  error with .h?
12:16:29 <cobra> eturpin: well, that is technically not a function
12:16:35 <pumpkin> eturpin: sounds like a certain's person's naming convention
12:16:40 <islands> gwern: just says 'failed during hte configure step`.  `configure: error: readline not found,`
12:16:48 <pumpkin> eturpin: ignore the .Ts on there and it might make more sense
12:16:58 <gwern> yeah, that sounds like the -dev package missing
12:17:31 <islands> gwern: since im completely new to haskell could you perhaps point me in the right direction?  much appreciated.
12:17:31 <eturpin> what kind of type is Graph2D.T Double Double?
12:17:50 <pumpkin> I dunno, what package is it in?
12:18:11 <eturpin> gnuplot
12:18:17 <gwern> dmwit: 4-5 is very low if you have a 1000 articles on your watchlist; you;d pick up that much just from vandalism reverts or fixing up anon contribs
12:18:28 <eturpin> I don't understand the syntax
12:18:38 <pumpkin> Frame (Graph2D Double Double) 
12:18:43 <pumpkin> would be what most people would call the same type
12:18:46 <gwern> islands: well, on ubuntu I would do something like 'apt-cache search readline|grep dev' and install readline-dev or whatever it spat out
12:18:51 <gwern> islands: and see if the compile worked then
12:18:54 <eturpin> usually there's a -> in between
12:19:06 <pumpkin> eturpin: it's not a function, or not obviously so
12:19:32 <pumpkin> oh wow, http://hackage.haskell.org/package/gnuplot-0.1 from before he started using Cs and TS
12:20:33 <kmc> eturpin, that's why it's not a function
12:20:37 <kmc> if it had a -> it would be a function
12:20:48 <kmc> eturpin, that type has the same structure as Maybe (Either Double Double)
12:20:51 <kmc> which is also not a function
12:21:08 <eturpin> oh, so it's a monad?
12:21:10 <kmc> no
12:21:14 <kmc> that dosesn't follow at all
12:21:19 <islands> gwern: maybe i'll back up, what is the best linux distro to run haskell
12:21:32 <kmc> that would depend on the existence of «instance Monad Frame.T where ...»
12:21:33 <gwern> islands: they're all pretty terrible/good
12:21:39 <kmc> not all type constructors are monads
12:21:39 <islands> lol, figured :)
12:21:46 <pumpkin> http://hackage.haskell.org/packages/archive/gnuplot/0.4.0.1/doc/html/Graphics-Gnuplot-Frame.html#t:T
12:21:47 <pumpkin> lol
12:21:51 <gwern> islands: if you are truly agnostic I would recommend <whatever dons is using right now>, which is Arch linux
12:21:54 <pumpkin> I love this
12:22:11 <kmc> got to go, ttyl all
12:22:57 <geheimdienst> cu kmc
12:23:21 <eturpin> hmm, so Frame.T (Graph2D.T Double Double) is a multi-variable type?
12:24:06 * geheimdienst has arch linux, but uses cabal for everything (not the distro's haskell packages)
12:24:23 <geheimdienst> i'm pretty happy with arch, too
12:24:53 <islands> does arch 32 vs 64 matter in terms of what is happier for haskell?
12:25:12 <donri> cabal install almost always fails for me: http://hpaste.org/40308/ghcpkg_check
12:26:03 <chrisdone> guys, please fill in this survey about lambda-case/lambda-if: https://spreadsheets.google.com/viewform?formkey=dFZLSzhWRkdDSmFLWGRSeDRFNTlVdnc6MQ
12:26:20 <gwern> islands: I don't think so. I'm not sure I've ever run into an error on 64-bit due to that
12:26:26 <gwern> since you'r compiling from source everything
12:26:39 <chrisdone> well, more of a poll than a survey
12:27:00 <islands> gwern: http://aur.archlinux.org/packages.php?ID=26279
12:27:05 <gwern> chrisdone: when you ask the diff between a wp user and an admin, what do you mean?
12:27:38 <chrisdone> gwern: what do you mean what do I mean? apart from the name I don't know the difference
12:28:15 <gwern> chrisdone: are you asking their social role/ the technical ability? the difference in practice as a user or admin?
12:28:39 <chrisdone> nevermind I'm not that interested
12:28:50 * gwern gets that a lot from outsiders
12:29:01 <gwern> nobody cares how the sausage is made
12:29:17 <cobra> thread blocked indefinitely in an STM transaction
12:29:20 <cobra> GHC is too smart for it's own good!
12:29:28 <geheimdienst> the closer you check, the more likely you are to become vegetarian ...?
12:29:41 <geheimdienst> is that what you mean?
12:30:12 <zomg> Hey.. Has anyone installed hack-handler-mongrel2? I'm just getting a ton of errors when trying to cabal install it from source
12:30:36 <gwern> geheimdienst: I mean exactly that. chrisdone doesn't care how the sausage is made when I offered to explain it
12:31:29 <zomg> The install is basically complaining about web-encodings requiring  "text" but it seems to fail for it because web-mongrel2 requires different "text"
12:32:53 <gwern> I wonder if google's "link:" command actually works - I *know* there are dozens of links to my N-back FAQ, but it's not finding them
12:34:07 <chrisdone> more that it took x messages and I didn't get an answer and recognised it's going to be hard work, that it would be easier to just look on the web
12:34:34 <chrisdone> donri: it can be a nightmatre like that
12:34:51 <donri> :(
12:39:43 <chrisdone> I quite regularly have to delete my packages and start again
12:41:19 <chrisdone> I think the cause is generally that packages get upgraded by cabal install and you don't notice, and this breaks your existing packages so that when you get up in the morning and build your project everything dramatically explodes because of brokenness
12:41:56 <chrisdone> donri: why are those packages broken? it lists a reason usually
12:43:23 <sinelaw> to all: is hmatrix-static recommended? or is there anything you prefer over it
12:44:54 <donri> chrisdone: http://hpaste.org/40309/ghcpkg_check_full
12:46:40 <chrisdone> donri: I've never seen a problem like that. did you mess with ghc or fiddle with the packages?
12:46:57 <boegel> can sortBy handle two comparison functions, i.e. a second one in case elements are found to be equal with the first comparison function?
12:47:02 <donri> chrisdone: Ubuntu with haskell-platform from a PPA
12:47:03 <monochrom> someone deleted a lot of files
12:47:30 <boegel> > sortBy (comparing fst) [(2,1),(1,2),(3,2),(2,0)]
12:47:31 <lambdabot>   [(1,2),(2,1),(2,0),(3,2)]
12:47:43 <donri> chrisdone: And just cabal update; cabal install foopkg
12:47:47 <boegel> can I reorder (2,1) and (2,0) based on snd too now?
12:48:14 <chrisdone> donri: so if you cabal install cgi, what happens?
12:48:18 <pumpkin> boegel: mappend
12:48:25 <boegel> @type mappend
12:48:26 <lambdabot> forall a. (Monoid a) => a -> a -> a
12:48:35 <geheimdienst> > sortBy (comparing fst) $ sortBy (comparing snd) [(2,1),(1,2),(3,2),(2,0)]
12:48:36 <lambdabot>   [(1,2),(2,0),(2,1),(3,2)]
12:49:00 <boegel> geheimdienst: can it be done with a single sortBy call?
12:49:15 <pumpkin> :t comparing
12:49:27 <lambdabot> forall b a. (Ord a) => (b -> a) -> b -> b -> Ordering
12:49:28 <boegel> pumpkin: not sure what mappend does (nor what a monoid is)
12:49:28 <donri> chrisdone: http://hpaste.org/40309/ghcpkg_check_full
12:49:32 <donri> chrisdone: Sorry, http://hpaste.org/40310/cabal_install_cgi
12:49:40 <pumpkin> :t sortBy (comparing (liftA2 mappend fst snd))
12:49:41 <lambdabot> forall b. (Monoid b, Ord b) => [(b, b)] -> [(b, b)]
12:49:51 <pumpkin> oh wait
12:50:12 <monochrom> because mtl is among the broken
12:51:10 <chrisdone> donri: and if you manually the broken package it depends on, by running: cabal install mtl (and recursively applying that series of steps)?
12:51:20 <pumpkin> :t sortBy 
12:51:21 <lambdabot> forall a. (a -> a -> Ordering) -> [a] -> [a]
12:51:48 <pumpkin> :t sortBy (\x y -> compare (fst x) (fst y) `mappend` compare (snd x) (snd y))
12:51:49 <lambdabot> forall a b. (Ord a, Ord b) => [(a, b)] -> [(a, b)]
12:52:09 <pumpkin> @pl sortBy (\x y -> compare (fst x) (fst y) `mappend` compare (snd x) (snd y))
12:52:10 <lambdabot> sortBy (ap (ap . (mappend .) . (. fst) . compare . fst) ((. snd) . compare . snd))
12:52:30 <geheimdienst> lambdabot: no shit
12:53:02 <monochrom> perhaps there was a myth about "I want to get rid of my --user packages. I know, I just need to clean ~/.cabal"
12:53:24 <monochrom> wrong. you just need to clean ~/.ghc
12:54:06 <chrisdone> yeah, yesterday I deleted my user directory /home/chris/.ghc/i386-linux-6.12.3/package.conf.d and started again
12:56:45 <chrisdone> sucks that sometimes I just cannot repair the horrific brokenness that occurs by just using `cabal install' from day to day, but, well, there is no 'but'. it sucks
12:57:26 <geheimdienst> > sortBy (comparing (uncurry . mappend) (fst &&& snd)) [(2,1),(1,2),(3,2),(2,0)]
12:57:28 <lambdabot>   Couldn't match expected type `((c, b) -> (c, b))
12:57:28 <lambdabot>                           ...
12:57:41 <chrisdone> I think duncan's working on making it be more vocal about potentially Breaking Everything! so that's nice
12:58:01 <Nereid> :t liftA2 mappend (compare `on` fst) (compare `on` snd)
12:58:02 <gwern> It doesn't bother me too much. If I bork things irretrievably, then I do a rm -rf of .cabal, .ghc, bin/bin and bin/lib, then I reinstall ghc and do a cabal install gitit
12:58:02 <lambdabot> forall a b. (Ord a, Ord b) => (a, b) -> (a, b) -> Ordering
12:58:10 <geheimdienst> > sortBy (comparing ((uncurry . mappend) (fst &&& snd))) [(2,1),(1,2),(3,2),(2,0)]
12:58:11 <lambdabot>   Overlapping instances for GHC.Show.Show ((c, b) -> (c, b))
12:58:11 <lambdabot>    arising from ...
12:58:12 <Nereid> hmm
12:58:22 <gwern> and gitit will pull in most of the things I use :)
12:58:36 <pumpkin> :t liftA2 (mappend . (compare `on`)) fst snd
12:58:36 <lambdabot> forall b a. (Ord b) => (a -> b, a -> a -> Ordering) -> a -> a -> Ordering
12:58:40 <pumpkin> whoops
12:58:58 <donri> chrisdone: Works after purging the haskell-platform PPA. I suspect it lacked dev files and the system installed packages blocked cabal.
12:58:59 * geheimdienst would just use sortBy $ sortBy
12:59:08 <monochrom> I don't see how to break things by just "cabal install". At least not when you either stick with --user or stick with --global all the time.
12:59:37 <chrisdone> monochrom: I don't use any --user/global, it defaults to user all the time
12:59:39 <donri> Lets hope the haskell-platform in the maverick repos isn't broken o_O
12:59:47 <donri> chrisdone: What OS you use+
13:00:01 <chrisdone> donri: ubuntu
13:00:07 <donri> Lucid?
13:00:10 <chrisdone> I don't use the platform though, just vanilla ghc
13:00:13 <chrisdone> uh, how do you find out?
13:00:22 <donri> 10.04?
13:00:39 <chrisdone> what's the command to see your ubuntu release?
13:00:41 <donri> Anyway I guess ghc+cabal is sufficient
13:00:46 <gwern> chrisdone: lsb_release --all?
13:00:46 <monochrom> cat /etc/lsb-release
13:00:55 <chrisdone> ah, there we go. yes, lucid
13:01:25 <donri> Lucid+1 to be released this month has haskell-platform in the repos
13:01:26 <FunctorSalad> @ty sortBy sortBy
13:01:27 <lambdabot>     Couldn't match expected type `a -> a -> Ordering'
13:01:28 <lambdabot>            against inferred type `[a]'
13:01:28 <lambdabot>     In the first argument of `sortBy', namely `sortBy'
13:01:44 <monochrom> I don't use the repo's ghc or haskell libs
13:02:56 <monochrom> there are only 3 safe ways to install haskell libs. (A) use distro repo only. (B) cabal install --global only. (C) cabal install --user only.  Any mixture contains an unsafe interleaving.
13:03:19 <FunctorSalad> @ty sortBy (comparing sortBy)
13:03:19 <lambdabot> forall a. (Ord a) => [a -> a -> Ordering] -> [a -> a -> Ordering]
13:03:26 <chrisdone> monochrom: cabal-install has a feature where it re-installs a dependency for your package. from what I gather, when a package is re-installed, the special hash that this package is registered with is refreshed a-new, different. other already installed packages that depended on this package now are marked as "broken" because the package (hash) they depended on is no longer registered
13:03:26 <chrisdone> monochrom: this isn't usually a massive problem if you just re-install that broken package, it picks up the "new" re-installed version of the package and all is well. it's just a pain because most of the time I'm not aware that packages need to be re-built, and at some point I do a build for my project and everything breaks *hard* and the solution in the previous sentence does not work anymore
13:03:34 <monochrom> And then pretty soon you realize that for most practical purposes (A) gives you insufficient libs.
13:03:53 <geheimdienst> monochrom: what about the Platform?
13:03:55 <donri> cabal should have an option to reinstall packages on demand that fails in building dependencies
13:04:22 <monochrom> the re-install feature is not done unless you give like five extra flags, is it?
13:04:47 <monochrom> include the platform in my phrase "haskell libs".
13:04:51 <donri> monochrom: But B and C will rape your ass as soon as an app you install from the distribution happens to be written in haskell?
13:04:53 <chrisdone> the re-installing of dependencies happens automatically, maybe to avoid the diamond dependency problem perhaps, I don't know why
13:05:30 <chrisdone> e.g. some packages *always* re-install the `network' package, every damn time
13:05:43 <FunctorSalad> damn right
13:05:45 <FunctorSalad> ;)
13:05:53 <monochrom> I haven't run into a distro package that brings in haskell
13:06:01 <donri> chrisdone: I mean if cgi fails because of mtl if mtl seems to be installed it could try to install mtl first?
13:06:20 <geheimdienst> chrisdone: i remember had that too at some point. it was some snafu about the fourth place of the version number changing or something
13:06:29 <FunctorSalad> chrisdone: isn't this the "A and B using the same version of network, but compiled against a different C dependency of network"?
13:07:01 <FunctorSalad> maybe base-3 going out in ghc 7 will decrease the mess
13:07:10 <FunctorSalad> at least base-3 isn't in my ghc7 ex
13:07:12 <FunctorSalad> s/ex/rc/
13:07:13 <chrisdone> donri: I don't know. most of the behaviour of cabal-install seems well-reasoned, but I don't understand it. when duncan explains it it makes sense, but otherwise it's hard to see all the subtle ways things can go wrong
13:08:30 <donri> Is there a way to configure cabal to ignore system packages?
13:08:32 <chrisdone> "duncan why won't cabal just install everything for me when stuff breaks?"
13:08:32 <chrisdone> "ahh, but did you consider this?"
13:08:32 <chrisdone> "damnit!"
13:08:57 <Twey> Haha
13:08:57 <chrisdone> donri: you mean the global ones?
13:09:04 <donri> I suppose I do
13:09:28 <chrisdone> i.e. in ghc-pkg list:
13:09:28 <chrisdone> /home/chris/Programs/lib/ghc-6.12.3/package.conf.d -- global
13:09:28 <chrisdone> /home/chris/.ghc/i386-linux-6.12.3/package.conf.d -- user
13:09:49 <donri> I mean packages installed by APT
13:10:30 <chrisdone> sometimes I have annoying problems where the same version of the same package gets installed in both global and user, and I get the "this build may fail due to dependencies depending on two versions of the same package"
13:10:51 <chrisdone> I'm gradually considering forgetting user installs all together and using --global exclusively
13:11:12 <monochrom> oh, so you did interleave --user and --global
13:11:14 <chrisdone> donri: oh, err. I think they're registered in the same way, right?
13:11:15 <geheimdienst> chrisdone: aren't people recommending against that for some reason?
13:11:20 <Twey> I long ago gave up with global installs and started using --user exclusively :þ
13:11:24 <chrisdone> monochrom: no, I don't. cabal installs the --global ones by default...
13:11:36 <chrisdone> dph-base, random, time, unix, etc
13:11:36 <Twey> --global is much harder to nuke if it goes wrong.
13:11:51 <donri> happstack-0.5.0.2 depends on hsp-0.5.2 which failed to install.
13:11:56 <sinelaw> @hoogle Matrix t -> Double
13:11:57 <lambdabot> Warning: Unknown type Matrix
13:11:57 <lambdabot> Unsafe.Coerce unsafeCoerce :: a -> b
13:11:57 <lambdabot> Prelude id :: a -> a
13:11:59 * donri gives up for the moment and goes showering
13:12:06 <geheimdienst> twey, well, you need an extra "sudo", not sure if that qualifies as "much"
13:12:09 <chrisdone> donri: if hsp failed then your ghc is functor'd
13:12:15 <chrisdone> reinstall it
13:12:17 <sinelaw> for the love of Euler, and anyone tell me how to do a determinant in hmatrix?
13:12:28 <chrisdone> oh, hsp
13:12:34 <chrisdone> I read that as hpc
13:12:35 <donri> chrisdone: This is why I'll never get into Haskell in any serious way :(
13:12:41 <Twey> geheimdienst: With --global stuff gets installed in places like /usr/bin and you have to fish it out…
13:13:06 <chrisdone> donri: I think being into haskell in a serious way would entail putting up or overcoming these issues
13:13:23 <donri> chrisdone: Do you not use the ghc from the repos?
13:13:26 <chrisdone> being put off by package management issues is inherently non-serious
13:13:33 <chrisdone> do I balls
13:13:42 <Twey> Didn't you see his paths?
13:13:43 <chrisdone> ubuntu's packages like 3 years old
13:13:45 <h1024> just few dail ago i tries to install uhc - and failed because of cabal
13:13:46 <FunctorSalad> donri: I didn't get the whole story, but why not just forget apt.haskell?
13:13:47 <Twey> :þ
13:13:56 <FunctorSalad> that's what I do
13:14:04 <dmwit> sinelaw: N.LA.A.det?
13:14:07 <FunctorSalad> you can install haskell apps from cabal too
13:14:28 <h1024> uhc was needed haskel98 (some exact version) - and give some cryptics messages
13:14:30 <sinelaw> FunctorSalad, thanks
13:14:39 <djahandarie> dmwit beat me to it :(
13:14:50 <FunctorSalad> sinelaw: what for?
13:15:01 <sinelaw> FunctorSalad, implementing a matched filter
13:15:13 <donri> The apt ghc isn't even ten months old
13:15:18 <sinelaw> FunctorSalad, i want to build a filters package
13:15:25 <chrisdone> I was exaggerating
13:15:38 <sinelaw> FunctorSalad, i'm wondering which matrix library to use
13:15:41 <h1024> i receive message that i have haskel98 - AAA (md5 sum) and installed haskel98 - BBBB (other md5 sum)
13:15:42 <sinelaw> (or vectors)
13:15:43 <FunctorSalad> sinelaw: pardon? I don't remember ever implementing such a thing
13:15:48 <chrisdone> that's kinda old in ghc terms though
13:15:57 <sinelaw> FunctorSalad, do you have suggestions for a LA library?
13:16:05 <sinelaw> right now it's hmatrix
13:16:09 <FunctorSalad> confusing me with someone else? :)
13:16:18 <sinelaw> FunctorSalad, why?
13:16:20 <monochrom> I highly recommend http://www.vex.net/~trebla/haskell/haskell-platform.xhtml
13:16:31 <monochrom> (of course, because I wrote it)
13:16:32 <donri> I suppose haskell.org needs a giant warning USE LATEST EVERYTHING
13:16:45 <FunctorSalad> sinelaw: since I have no idea what you're talking about... I don't remember publishing anything LA-related
13:16:49 <monochrom> no, you don't have to use latest everything
13:16:58 <sinelaw> FunctorSalad, you just helped me with that though :)
13:17:11 <FunctorSalad> ah :)
13:17:26 <vitka> By the way, why hmatrix is not LGPL? What if someone will want to use MKL for LAPACK?
13:17:30 <chrisdone> donri: generally I download ghc from the site and install packages from cabal-install
13:17:34 <monochrom> in fact I pretty much upgrade absolutely nothing in haskell platform (until the whole haskell platform gets upgraded)
13:17:37 <djahandarie> sinelaw, you know, it was dmwit who answered your question. lol
13:18:18 <sinelaw> djahandarie, oops
13:18:20 <FunctorSalad> sinelaw: hmm I don't have a complete overview either... there's hmatrix, vect (for 1-4D things) and Vec (for fixed sizes)
13:18:20 <monochrom> and a more conservative approach is just use distro and never cabal install
13:18:21 <sinelaw> FunctorSalad, heh
13:18:27 <sinelaw> FunctorSalad, sorry
13:18:36 <sinelaw> i'm confused
13:18:53 <sinelaw> ok dmwit , djahandarie do you have any suggestions for a LA library?
13:19:11 <donri> chrisdone: Translates as crappy Linux support in my ears. Oh well.
13:19:47 <djahandarie> sinelaw, http://www.haskell.org/haskellwiki/Libraries_and_tools/Mathematics#Linear_algebra
13:19:57 <djahandarie> I think hmatrix probably has the nicest interface
13:20:21 <FunctorSalad> and vector-space for abstract vector spaces
13:20:41 <chrisdone> donri: sure. ubuntu's is crap. arch linux's haskell support is spot on
13:20:48 <djahandarie> > (sin^2 + cos^2) 50 :: CReal
13:20:50 <lambdabot>   1.0
13:20:51 <chrisdone> maybe I should switch to arch
13:20:53 <djahandarie> \o/
13:21:36 <chrisdone> but I do a lot of making and registering my own packages, editing existing packages's sources and re-installing, etc
13:21:37 <geheimdienst> monochrom: i tried to start using distro (=arch) packages, but quickly abandoned the idea. they seem to be all in AUR, which is cumbersome to install, and they don't even do things like install the documentation :(
13:21:45 <donri> chrisdone: GHC's support is crap if a release is made useless in six months.
13:21:53 <FunctorSalad> "crappy linux support"? not more like "some distributions didn't get around to providing the most recent libraries"?
13:21:56 <sinelaw> ok
13:22:08 <chrisdone> donri: it's not
13:22:22 <FunctorSalad> I don't see how that's an intrinsic property of ghc
13:22:30 <Zao> geheimdienst: The most fun about Arch and Haskell is that package dependencies were rather broken recently.
13:22:40 <Zao> Unsure if they solved that yet.
13:22:43 <donri> FunctorSalad: Not so much GHC as the people developing hackage packages, I suppose.
13:22:45 <FunctorSalad> haskell in general is still a relatively fast-moving language, if that's what you're getting at
13:22:48 <Twey> :t sin
13:22:49 <lambdabot> forall a. (Floating a) => a -> a
13:22:56 <donri> When I develop Python libraries I don't target 2.7.
13:23:03 <Twey> djahandarie: *Huh*?
13:23:12 <donri> Almost all distributions are still on 2.6 or even older.
13:23:15 <sinelaw> where in the module hierarchy would you put a filter library?
13:23:22 <chrisdone> donri: it's more of a comment on ubuntu than ghc, saying that the versions are old. I was stuck with 6.8 for months before the ubuntu folks decided to upgrade to 6.10 or whatever. on arch linux it's up the day it's released
13:23:50 <djahandarie> Twey, there is a Floating b => Floating (a->b) instance for sin and cos
13:24:04 <Twey> *Huh*.
13:24:06 <Twey> Where?
13:24:06 <FunctorSalad> where? :o
13:24:17 <djahandarie> That's not even enough to explain why that happens though
13:24:17 <FunctorSalad> there's a joke page about it on the wiki
13:24:18 <FunctorSalad> :)
13:24:25 <djahandarie> http://hackage.haskell.org/packages/archive/vector-space/0.7.2/doc/html/src/Data-NumInstances.html
13:24:25 <FunctorSalad> > 2 3
13:24:26 <lambdabot>   Ambiguous type variable `t' in the constraint:
13:24:26 <lambdabot>    `GHC.Num.Num t' arising f...
13:24:34 <Twey> Huh.
13:24:41 <FunctorSalad> (anyway, that's "2" with a Num (a -> b) instance ;))
13:24:53 <geheimdienst> > sin 2 3
13:24:53 <FunctorSalad> rather than the expected 6 ;)
13:24:54 <lambdabot>   0.9092974268256817
13:25:03 <djahandarie> :t sin^2
13:25:03 <donri> Surprising there seem to be no PPA for newest GHC
13:25:04 <lambdabot> forall a. (Floating a) => a -> a
13:25:13 <djahandarie> :t sin^2 + cos^2
13:25:14 <lambdabot> forall a. (Floating a) => a -> a
13:25:20 <FunctorSalad> how can you have Floating without Num?
13:25:27 <FunctorSalad> @src Floating
13:25:28 <lambdabot> class  (Fractional a) => Floating a  where
13:25:28 <lambdabot>     pi                                                      :: a
13:25:28 <lambdabot>     exp, log, sqrt, sin, cos, tan                           :: a -> a
13:25:28 <lambdabot>     asin, acos, atan, sinh, cosh, tanh, asinh, acosh, atanh :: a -> a
13:25:28 <lambdabot>     (**), logBase                                           :: a -> a -> a
13:25:30 <Nereid> > 2 3 :: Int
13:25:31 <lambdabot>   2
13:25:33 <FunctorSalad> @src Fractional
13:25:33 <lambdabot> class  (Num a) => Fractional a  where
13:25:34 <lambdabot>     (/)             :: a -> a -> a
13:25:35 <geheimdienst> @instances Floating
13:25:36 <lambdabot>     recip           :: a -> a
13:25:37 <FunctorSalad> thx Nereid 
13:25:38 <lambdabot>     fromRational    :: Rational -> a
13:25:39 <benmachine> :t  minimum [sin, cos]
13:25:40 <lambdabot> Double, Float
13:25:42 <lambdabot> forall a. (Floating a, Ord a) => a -> a
13:26:13 <FunctorSalad> > minimum [sin,cos] 0 :: Double
13:26:14 <lambdabot>   0.0
13:26:17 <FunctorSalad> > minimum [sin,cos] pi :: Double
13:26:18 <chrisdone> donri: anyway for serious stuff dons and co are working on the haskell platform for a stable dev platform, if you're doing some SERIOUS BUSINESS apps and can't handle some package issues
13:26:18 <lambdabot>   -1.0
13:26:25 <FunctorSalad> makes sense actually :)
13:26:54 <Nereid> > compare sin cos
13:26:55 <lambdabot>   *Exception: (==): No overloading for function
13:26:59 <Nereid> heh
13:27:06 <djahandarie> Yeah
13:27:27 <djahandarie> Because Num instances need Eq and Show
13:27:33 <djahandarie> > show cos
13:27:35 <lambdabot>   Overlapping instances for GHC.Show.Show (a -> a)
13:27:35 <lambdabot>    arising from a use of `...
13:27:37 <chrisdone> admittedly I have regular package issues because I install the latest things straight after discussing a patch with someone
13:27:38 <djahandarie> Gah
13:28:06 <geheimdienst> the Platform, distro packages, cabal --user, cabal --global ... it's a little difficult these days to know what actually is best practice
13:28:07 <chrisdone> in my experience the haskell platform Just Works but then I go patching and installing my own packages etc so it gets in my way
13:28:11 <geheimdienst> especially for newbies
13:28:30 <IceDane> http://en.wikibooks.org/wiki/Haskell/Understanding_monads/State#Introducing_State -- I'm compilin the "rollDie" example and it's giving me this error: http://pastebin.com/DNvZiG6i -- any hints?
13:28:34 <Nereid> aha, max and min are methods of the Ord typeclass.
13:28:35 <chrisdone> I have the platform on os x and it Just Works there too
13:28:37 <Nereid> > sin < cos
13:28:38 <lambdabot>   *Exception: (==): No overloading for function
13:28:39 <Nereid> duh :P
13:28:51 <IceDane> oh god, never mind
13:28:54 <IceDane> typo
13:28:55 <FunctorSalad> compare is probably implemented in terms of (==)
13:29:00 <FunctorSalad> and (<) in terms of compare...
13:29:08 <donri> chrisdone: Sounds like a good idea the Platform, is it supposed to work with not-latest GHCs?
13:29:41 <djahandarie> > quickcheck (\x -> ((cosh^2 - sinh^2) :: CReal -> CReal) x == 1)
13:29:42 <lambdabot>   Not in scope: `quickcheck'
13:29:45 <djahandarie> Oops
13:29:48 <djahandarie> @check (\x -> ((cosh^2 - sinh^2) :: CReal -> CReal) x == 1)
13:29:49 <lambdabot>   Not in scope: type constructor or class `CReal'Not in scope: type construct...
13:30:09 <djahandarie> @check (\x -> ((cosh^2 - sinh^2)) x == 1)
13:30:10 <lambdabot>   No instance for (GHC.Num.Num (a -> a))
13:30:11 <lambdabot>    arising from a use of `GHC.Real.^...
13:30:18 <djahandarie> Bah, doesn't even have it loaded
13:30:50 <donri> chrisdone: It's a little disappointing though that Hackage says happstack builds fine on "ghc-6.12" but it fails on ghc-6.12.1 for me.
13:31:17 <geheimdienst> donri, could you put the error message on hpaste?
13:31:25 <donri> Not sure what "6.12" means and anyway come on it's a point release
13:31:48 <FunctorSalad> 6.12.3 has been the latest for a while
13:32:13 <donri> FunctorSalad: .1 was six months earlier (and still *it's a point release*)
13:32:15 <FunctorSalad> iirc it wasn't a totally trivial release
13:32:31 <FunctorSalad> (some new features in .3 or .2 iirc
13:32:33 <FunctorSalad> )
13:32:54 <donri> Weird versioning scheme
13:33:28 <geheimdienst> donri, i agree with you that point releases shouldn't break stuff. if they do, it's a bug probably
13:33:54 <Heffalump> but they might fix stuff
13:34:01 <Heffalump> so it might work on 6.12.3 even if it doesn't on 6.12.1
13:34:33 <chrisdone> donri: yeah, I think the platform comes bundled with a ghc that's a few versions back
13:34:38 <geheimdienst> i think we should first of all have a look at the error message
13:35:15 <donri> The error is way up in a long mess of stuff
13:35:30 <donri> I guess I'll reinstall and piping the output to a file
13:35:42 <chrisdone> I doubt a point ghc version difference made happstack work or fail
13:36:14 <FunctorSalad> didn't it add deriving(Functor,Foldable,Traversable)?
13:36:17 <FunctorSalad> .2 or .3
13:36:38 <donri> ghc: could not execute: trhsx
13:36:42 <donri> relevant?
13:37:14 <chrisdone> I dunno what that is
13:37:36 <benmachine> isn't it some kind of preprocessor?
13:37:54 <benmachine> [ben@euler ~]$ cabal list trhsx
13:37:54 <benmachine> * trhsx Synopsis: Deprecated
13:38:36 <sinelaw> djahandarie, did you use hmatrix-static ever?
13:38:46 <donri> http://hpaste.org/40311/cabal_install_trhsx
13:39:07 <benmachine>     Description:   This tool is now part of the hsx package, and should be
13:39:07 <benmachine>                    considered deprecated as a stand-alone package.
13:41:09 <geheimdienst> donri, try installing the package "hsx". see also http://www.listware.net/201004/haskell-cafe/82437-haskell-cafe-build-problems-hsp-trhsx-ultimately-happstack.html
13:42:53 <djahandarie> sinelaw, nope, I haven't
13:43:40 <dom96> Can anyone tell me why the variable 's' at line 12 in http://hpaste.org/40312/variable_reset is "", when at line 3 it is not? (I put a putStrLn to test it... i don't get why this happens)
13:46:39 <sinelaw> ugh
13:46:49 <Botje> dom96: that can't happen.
13:47:01 <Botje> dom96: are you sure it's not two different invocations of getAllLines?
13:47:06 <sinelaw> i'm giving up on implementing support for arbitrary-dimensional signals
13:47:24 <geheimdienst> dom96, you're recursing in line 6. could the first getAllLines print that s contains something, and the next invocation of getAllLines then have s == "" ?
13:47:36 <geheimdienst> something like that
13:47:43 <dom96> I am pretty sure it's not.
13:47:58 <dom96> I've put in A LOT of debug putStrLn's
13:48:25 <chrisdone> dom96: the trouble is it's impossible to change the value of `s'
13:48:56 <dom96> i know, that's why this is so weird.
13:49:16 <vitka> @src zip
13:49:17 <lambdabot> zip (a:as) (b:bs) = (a,b) : zip as bs
13:49:17 <lambdabot> zip _      _      = []
13:49:17 <sinelaw> @hoogle (<>)
13:49:18 <lambdabot> Text.PrettyPrint.HughesPJ (<>) :: Doc -> Doc -> Doc
13:49:18 <lambdabot> Language.Haskell.TH.PprLib (<>) :: Doc -> Doc -> Doc
13:49:30 <geheimdienst> dom96, could it be an output problem? i recently got mighty confused because of input that contained \r, which when printed jumped to the beginning of the line and overwrote stuff ...
13:49:40 <ClaudiusMaximus> that might be taking O(n^2) time, too - with the left argument of (++) getting longer and longer
13:49:42 <vitka> @src zipWith
13:49:42 <lambdabot> zipWith f (a:as) (b:bs) = f a b : zipWith f as bs
13:49:42 <lambdabot> zipWith _ _      _      = []
13:49:43 <IceDane> I think what chrisdone means is that what's happening isn't some magical bug from outer space *actually* changing the value but that an error in your program(or the fact it's IO and therefore unreliable) is causing it
13:50:04 * hackagebot HSGEP 0.1.3 - Gene Expression Programming evolutionary algorithm in Haskell  http://hackage.haskell.org/package/HSGEP-0.1.3 (MatthewSottile)
13:50:20 <dom96> geheimdienst: i doubt it.
13:50:22 <geheimdienst> dom96, could you give us a little more code as context?
13:50:32 <vitka> Is there any compelling reason zip isn't implemented via zipWith (,)?
13:50:35 <donri> geheimdienst: Thanks, linked helped. Didn't even have .cabal in $PATH (was sure I did!)
13:50:42 <chrisdone> http://hpaste.org/paste/pid/40315/run/true
13:50:50 <geheimdienst> donri, you're welcome
13:50:57 <benmachine> vitka: @src is an example implementation, not necessarily the Real implementation
13:51:05 <chrisdone> donri: oh that explains some problems haha
13:51:09 * donri would like cabal to report errors more usably
13:51:13 <donri> chrisdone: hah yea :$
13:51:39 <Nereid> benmachine: in this case it is, though
13:51:43 <Nereid> http://haskell.org/ghc/docs/6.12.1/html/libraries/base-4.2.0.0/src/GHC-List.html#zip
13:52:00 <dom96> chrisdone: huh? Your code confuses me lol.
13:52:25 <Nereid> vitka: zip and zipWith (,) have the exact same semantics, so perhaps it's a performance thing
13:52:31 <chrisdone> I was just testing that it ran on hpaste
13:52:33 <chrisdone> dom96: what confuses?
13:52:37 <vitka> Hmm.
13:53:09 <vitka> Prelude implementation concides with @src, but it also has some confusing rewrite rules.
13:53:34 <Nereid> "In this chapter the entire Haskell Prelude is given. It constitutes a specification for the Prelude. Many of the definitions are written with clarity rather than efficiency in mind, and it is not required that the specification be implemented as shown here."
13:53:38 <chrisdone> vitka: for ``MORE SPEED''?
13:53:39 <Nereid> http://www.haskell.org/onlinereport/standard-prelude.html
13:53:40 <dom96> chrisdone: you give it undefined, so the hGetLine should throw an error. The catch should catch the error. Then the handle error should rethrow the error.
13:53:53 <dom96> oh wait
13:53:54 <dom96> nvm
13:53:58 <dom96> I just saw that False hah
13:54:07 <chrisdone> hehe
13:54:25 <geheimdienst> > let true = False in if true then False else True
13:54:26 <lambdabot>   True
13:54:31 <chrisdone> dom96: why don't you paste the code that's using this function too?
13:54:44 <dom96> chrisdone: because there is A LOT of code.
13:54:54 <dom96> Also, i just annoted with the putStrLn's and the output i get
13:54:58 <benmachine> we're good at skimreading
13:55:01 <chrisdone> dom96: like, a 1Mb?
13:55:23 <dom96> ok then.
13:55:45 <geheimdienst> let's hope the internet doesn't run out of space
13:55:51 <dom96> http://hpaste.org/paste/40312/variable_reset#p40318
13:55:55 <dom96> lol
13:56:11 <chrisdone> haha, I was expecting 10,000 lines
13:56:29 <chrisdone> hahaha hlint errors
13:56:31 <geheimdienst> 237 haskell lines are about 10000 C lines
13:56:45 * dom96 finds 237 lines to be a lot
13:57:02 <dom96> Also, i've been trying to get this to work for the past 2 days. So excuse the ugliness :P
13:57:16 <benmachine> dom96: I think hReady h is throwing the EOF error, which is outside the scope of the catch
13:57:24 <chrisdone> contents <- getAllLines (pStderr plugin) ""
13:57:26 <benmachine> so it gets caught by the outer catch
13:57:41 <benmachine> in which s has its prior value
13:57:52 * ClaudiusMaximus agrees with benmachine
13:58:16 <ClaudiusMaximus> the docs do too: http://haskell.org/ghc/docs/6.12.1/html/libraries/base-4.2.0.0/System-IO.html#v:hReady
13:58:20 <geheimdienst> i agree, it's gotta be that the recursed getAllLines fails and the exception goes up to the calling getAllLines
13:58:33 <dom96> oh
13:58:53 <benmachine> good old exceptions, they're so predictable and easy to understand
13:58:57 <dom96> Well i certainly did not think of that :\
13:59:18 <geheimdienst> yup, the hReady docs say it can fail with isEOFError
13:59:19 <dom96> I bet if i rewrite this function again i will make it worse lol
14:00:01 <geheimdienst> dom96, also, check out hGetContents ...
14:00:06 <geheimdienst> @hoogle hGetContents
14:00:07 <lambdabot> Data.ByteString hGetContents :: Handle -> IO ByteString
14:00:07 <lambdabot> System.IO hGetContents :: Handle -> IO String
14:00:07 <lambdabot> Data.ByteString.Char8 hGetContents :: Handle -> IO ByteString
14:00:18 <dom96> geheimdienst: I had problems with hGetContents
14:00:29 <dom96> It seems to block forever...
14:00:46 <dom96> whenever i try to do anything with the data it returns
14:00:54 <islands> gwern: ok i finally got it worked out, and deployed a lambdabot
14:00:57 <chrisdone> dom96: how about removing the recursive call from inside the catch, and having that whole catch block return Either
14:01:17 <islands> gwern: but now when i try to send commands it just says 'Terminated'
14:01:18 <chrisdone> or is it working as you expect?
14:01:32 <benmachine> hGetContents is lazy and therefore evil
14:01:48 <dom96> chrisdone: i need to make it recurse so that it gets all the available lines
14:01:52 <geheimdienst> benmachine: what do you recommend instead?
14:02:03 <chrisdone> dom96: yeah
14:02:07 <dom96> benmachine: is there a non-lazy hGetContents?
14:02:20 <benmachine> dom96: only in packages
14:02:33 <chrisdone> dom96: I mean move the recursive call down a couple lines outside of the catch, but w/e
14:03:03 <dom96> chrisdone: oh
14:03:07 * dom96 tries
14:03:08 <chrisdone> I've had success with hgetcontents for writing a web server
14:03:37 <chrisdone> I mean an irc server
14:03:53 <sipa1024> irc is just multiplayer notepad
14:03:53 <benmachine> dom96: your logic is weird anyway, what's the deal with the space separator?
14:03:56 <chrisdone> msgs <- parse . lines . hGetContents h
14:04:06 <islands> Anyone know why my lambdabot responds to irc commands with Terminated ?
14:04:33 <sipa1024> > repeat 'x'
14:04:34 <lambdabot>   "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx...
14:04:36 <dom96> benmachine: It's just a quick way to gather messages from stderr
14:04:37 <chrisdone> islands: taking too long?
14:04:40 <chrisdone> > length [1..]
14:04:44 <lambdabot>   mueval-core: Time limit exceeded
14:04:45 <dom96> benmachine: i don't want \n
14:04:50 <chrisdone> islands: is it a local lambdabot?
14:05:04 <islands> chrisdone: its deployed here under the nick islambdabot
14:05:09 <islands> chrisdone: you can pm it
14:05:26 <chrisdone> I think Terminated is mueval's message for when rlimits kicks in
14:05:31 <islands> chrisdone: things like @help or @faq work, but @run does not
14:05:35 <dom96> chrisdone: i can't move the recursive call to getAllLines because it needs the 'line' variable which is created in the catch block...
14:05:38 <geheimdienst> > fix error
14:05:39 <lambdabot>   "*Exception: *Exception: *Exception: *Exception: *Exception: *Exception: *E...
14:05:42 <mauke> I think you lack mueval
14:05:48 <islands> ok
14:06:32 <chrisdone> dom96: yeah, so have the catch block return Either Something TheLine
14:06:34 <dom96> benmachine: also, this is like my 3rd attempt at this. I wasn't sure if this was gonna work, so i was quick.
14:06:37 <islands> btw i settled on Ubuntu 9.10 32 bit, seems happiest..
14:06:38 <IceDane> Okay, so I'm trying to grok the State monad (yet) again and I'm tasked with writing rollNDice :: Int -> State StdGen [Int]  and .. well, I'm not getting it. I know I need to thread this through somehow and then probably run evalState on the resulting State StdGen [Int] list(yes?) or something like that, but I'm still not entirely sure how to continue
14:06:42 <benmachine> dom96: I'd do something like: getAllLines h = liftA2 (:) first rest where first = hGetLine h; rest = either [] return =<< try (getAllLines h)
14:07:03 <benmachine> or (++) instead of (:)
14:07:11 <benmachine> or (\a b -> a ++ " " ++ b)
14:07:22 <dom96> looks complicated lol
14:07:33 <islands> chrisdone: i cabal install mueval which worked but same problem
14:08:03 <benmachine> IceDane: what have you done so far?
14:08:03 <islands> maybe i need haskell-src-exts
14:08:16 <benmachine> islands: doubt it
14:08:32 <IceDane> benmachine: I've been doing the exercises @ http://en.wikibooks.org/wiki/Haskell/Understanding_monads/State and I've done all of them up to this one
14:08:32 <benmachine> islands: is mueval on your path and executable?
14:08:39 <dom96> |hoogle liftA2
14:08:44 <dom96> wow
14:08:45 <IceDane> I still haven't quite 'grokked' the state monad
14:08:47 <dom96> i'm so used to my bot
14:08:52 <dom96> @hoogle liftA2
14:08:52 <lambdabot> Control.Applicative liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c
14:09:04 <IceDane> so I'm trying to just ... do stuff until it makes sense
14:09:12 <IceDane> Maybe I should drink heavily and take a look
14:09:42 <benmachine> IceDane: have you done rollNDiceIO?
14:09:49 <IceDane> benmachine: Yep
14:09:57 <benmachine> IceDane: what's it look like?
14:10:09 <benmachine> (hpaste)
14:10:10 <dom96> benmachine: your code has errors btw
14:10:27 <IceDane> The one I came up with because I couldn't quite figure out what I needed that looked like iterate(but not quite) was: mapM (const $ randomRIO (1,6)) [1..n]
14:10:31 <benmachine> dom96: yeah it does
14:10:37 <benmachine> I meant
14:10:45 <benmachine> either [] id <$> try (getAllLines h)
14:10:46 <benmachine> sorry
14:11:12 <dom96> still errors
14:12:52 <rovar> what is an elegant way to concatenate the the contents of (String, String) ?
14:13:08 <chrisdone> :t uncurry (++)
14:13:09 <lambdabot> forall a. (Monoid a) => (a, a) -> a
14:13:13 <geheimdienst> > (uncurry . (++) ("lol", "cat")
14:13:15 <lambdabot>   <no location info>: parse error (possibly incorrect indentation)
14:13:22 <geheimdienst> > (uncurry . (++)) ("lol", "cat")
14:13:23 <lambdabot>   Couldn't match expected type `b -> c'
14:13:23 <lambdabot>         against inferred type `([GHC....
14:13:24 <chrisdone> @slap geheimdienst 
14:13:25 * lambdabot puts on her slapping gloves, and slaps geheimdienst
14:13:29 <pumpkin> no (.)
14:13:42 <geheimdienst> oh i see :) right
14:13:50 <rovar> :)
14:13:52 <geheimdienst> > (uncurry (++)) ("lol", "cat")
14:13:53 <chrisdone> IceDane: do you understand how the State monad works?
14:13:54 <lambdabot>   "lolcat"
14:14:00 <geheimdienst> ... finally
14:14:33 <dmwit> IceDane: You might like replicateM :: Monad m => Int -> m a -> m [a]
14:14:52 <megajosh2> :t (++" "++" ")
14:14:53 <lambdabot> [Char] -> [Char]
14:14:56 <megajosh2> :t (++" "++)
14:14:56 <chrisdone> rovar: its type is really ([a], [a]) -> [a], but lambdabot has redefined what (++) is to be more general
14:14:57 <lambdabot> parse error on input `)'
14:15:11 <megajosh2> Hmm...
14:15:15 <sipa1024> :t (++)
14:15:16 <lambdabot> forall m. (Monoid m) => m -> m -> m
14:15:17 <vitka> @pl \a b -> a + x * b
14:15:18 <lambdabot> (. (x *)) . (+)
14:15:22 <IceDane> chrisdone: .. Barely. I have finally gotten my head around the fact that it 'stores' a function and that eval/exec/runState will execute that function on the state and return the result, the state or both 
14:15:24 <geheimdienst> > (uncurry unwords) ("lol", "cat")
14:15:25 <megajosh2> Is (++) mappend?
14:15:26 <lambdabot>   Couldn't match expected type `b -> c'
14:15:26 <lambdabot>         against inferred type `GHC.Ba...
14:15:28 <dmwit> megajosh2: You can only section on one side, and only with good precedence.
14:15:29 <vitka> @pl \a b -> b + x * a
14:15:29 <lambdabot> (+) . (x *)
14:15:30 <chrisdone> it's kind of nice, you now write
14:15:30 <chrisdone> > Just "Hello, " ++ Just "World!"
14:15:32 <lambdabot>   Just "Hello, World!"
14:15:33 <chrisdone> megajosh2: yeah
14:15:35 <dmwit> megajosh2: Yes, (++) is mappend.
14:15:35 <benmachine> dom96: narrow it down for me?
14:15:42 <megajosh2> Ah, okay
14:15:56 <islands> benmachine: that worked, but now its  Could not find module `Control.Arrow.Transformer.All':
14:16:28 <benmachine> islands: yeah, have a look at (I think) ~/.lambdabot/State/L.hs
14:16:44 <dom96> benmachine: http://hpaste.org/40319/errors
14:17:08 <IceDane> dmwit: ah, thanks
14:17:12 <chrisdone> IceDane: sure. you've seen the type definition of State, right?
14:17:13 <IceDane> changed my definition
14:17:18 <IceDane> chrisdone: Yep
14:18:27 <dom96> benmachine: nvm the second error. Fixed it.
14:18:38 <islands> benmachine: thanks.  im trying a cabal install arrows :)
14:18:53 <benmachine> islands: you could just remove those imports
14:19:05 <dom96> no idea about the first one though
14:19:14 <islands> benmachine: i suppose, but either way i should document all of this :)
14:19:17 <benmachine> dom96: oh right, (const [])
14:19:22 <benmachine> not []
14:19:46 <benmachine> islands: that might be nice, yeah
14:19:51 <dom96> ok
14:20:02 <chrisdone> IceDane: right: newtype State s a = State {runState :: s -> (a, s)}
14:20:02 <chrisdone> IceDane: so, for example, State $ \s -> ('a',s)  -- what's the type of this?
14:20:15 <be