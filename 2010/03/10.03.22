00:02:00 <kmc> cads, no, sorry
00:11:03 <ologNation> In
00:11:03 <ologNation> http://www.gnu.org/s/emacs/manual/html_node/elisp/Current-Buffer.html#Current-Buffer
00:11:03 <ologNation> What does it mean when it says "the return value is the buffer made current"
00:11:18 <ologNation> Do they mean that the return value is IO()
00:11:43 <opqdonut> it means the return value is _the buffer_ that was made current by the action
00:11:47 <opqdonut> i.e. the new current buffer
00:16:31 <misk20> what does Map.lookup do ??
00:18:34 <elly> given a key and a map, it returns the value in the map at that key, I'd imagine
00:19:02 <nanashi> @src Map.lookup
00:19:02 <lambdabot> Source not found. That's something I cannot allow to happen.
00:19:08 <allbery_b> :t Map.lookup
00:19:10 <lambdabot> Couldn't find qualified module.
00:19:15 <c_wraith> :t M.lookup
00:19:16 <lambdabot> forall k a. (Ord k) => k -> M.Map k a -> Maybe a
00:19:17 <elly> maybe you meant: Data.Map.lookup
00:19:17 <allbery_b> :t Data.Map.lookup
00:19:19 <lambdabot> forall k a. (Ord k) => k -> M.Map k a -> Maybe a
00:20:44 <nanashi> @src M.lookup
00:20:44 <lambdabot> Source not found. stty: unknown mode: doofus
00:20:56 <c_wraith> it's a BST lookup.  Nothing special about it.
00:21:09 <nanashi> =)
00:22:04 <c_wraith> if you're really curious, it's in here:  http://hackage.haskell.org/packages/archive/containers/latest/doc/html/src/Data-Map.html
00:23:33 <nanashi> hmm haskell is so lovely and pretty. thanks =)
00:28:35 <misk20> thanks all
00:28:41 <kmc> misk20, you can search Hoogle for that
00:29:07 <kmc> although it doesn't know "Map" as a name for the module, as that'd be a local alias on import
00:31:51 <mxc> hi
00:31:54 <mxc> in ghc 6.12
00:32:06 <mxc> what is the preferred replacement for DiffArrays that seem to have died
00:32:26 <mxc> for semantically pure arrays with fast updating
00:32:27 <luite> use IntMap instead
00:35:59 <kmc> that doesn't work with every Ix type out of the box
00:36:52 <kmc> apparently DiffArray actually sucks: http://hackage.haskell.org/trac/ghc/ticket/2727
00:37:29 <kmc> that implies it became a hackage package "diffarray" but i can't find that either
00:37:34 <luite> true, it's not a drop-in replacement
00:38:04 <mxc> I have a wrapper module around IntMap
00:38:11 <luite> you can use a regular Data.Map too, but that's probably slower, or create a wrapper around IntMap
00:38:16 <mxc> yeah
00:39:10 <mxc> i have a wrapper around intmap, TMap k v which is basically IntMap v with (from :: k -> Int, to :: Int -> k) functions
00:39:26 <kmc> which i think you can build for any Ix instance
00:39:46 <mxc> well, its not as clean for n-dimensional arrays
00:40:38 <luite> can't you use Ix directly?
00:40:50 <mxc> actually, i take that back, it should be fine
00:40:50 <luite> store a range (a,a)
00:41:11 <mxc> never really looked at the definition of Ix, just kinda used it blindly with GeneralizedNewtypeDeriving
00:41:58 <mxc> yeah, i could change TMap to just take anything thats an instance of Ix
00:42:04 <mxc> might be easier
00:45:59 <mxc> what about for unboxed values, whats the current champ?
00:46:25 <luite> mutable?
00:46:48 <kmc> good question
00:46:49 * hackagebot posix-timer 0.0.2 - Bindings to POSIX clock and timer functions.  http://hackage.haskell.org/package/posix-timer-0.0.2 (MikhailVorozhtsov)
00:47:17 <luite> you should probably try STUArray, or the vector package
00:51:32 <dolio> vector is good for arrays of all sorts. But it doesn't have an Ix-alike.
00:52:51 <dolio> The optimizer gets kind of confused in 6.12.1, too.
00:53:58 <luite> dolio: what goes wrong?
00:54:23 <luite> not enough fusion?
00:54:41 <dolio> Well, I don't know about the immutable arrays. That might be fine.
00:54:59 <dolio> The problem is with the mutable ones. They're parameterized by the monad in a way.
00:55:15 <dolio> So you can use a mutable array in any PrimMonad m => ...
00:55:38 <dolio> As long as it's mv s a, where s ~ PrimState m.
00:56:09 <dolio> But, especially when m is IO (and PrimState IO is RealWorld), the core has all sorts of casts between PrimState IO and RealWorld.
00:56:44 <dolio> So there's lots of dictionary passing that doesn't get eliminated, and slows things down.
00:56:57 <dolio> It works better in HEAD.
00:57:52 <luite> hmm, just now I moved a lot of code to vector, and there is a ghc 6.12.1 haskell platform, I have again a reason to move to the unstable version :p
00:58:20 <dolio> If you're not using the mutable vectors in IO, I wouldn't worry about it.
00:58:42 <dolio> Even if you are, you can write things in ST and use stToIO, and it tends to work out all right.
00:59:13 <luite> no I guess I'm fine for the most important program, which mainly uses immutable vectors
00:59:35 <dolio> Yeah. The only reason I can think of to switch to HEAD there would be to try out the LLVM stuff.
01:00:23 <luite> but thanks for letting me know, I'll check the core if I notice something peculiar about the performance
01:01:08 <luite> yeah, unfortunately I don't have much time to run LLVM benchmarks, so I'll just look at the pretty graphs made by others :)
01:01:22 <dolio> :)
01:09:01 <luite> hmm, can't hackage get a reddit-like up/downvote + comments system for the packages? :)
01:11:50 <ibid> would you vote packages or versions?
01:12:16 <ibid> the latter would be fairer, but creates the problem of how to translate votes for one version into a score for a newer version
01:12:23 <luite> hmm, good point
01:13:00 <kmc> comments anyway would be nice
01:13:07 <ibid> true
01:13:11 <kmc> RWH has comments on every paragraph
01:13:19 <ibid> as long as they are tagged by version
01:13:21 <kmc> maybe hackage can get comments on every decl in Haddock
01:13:27 <ibid> hah
01:13:32 <luite> hehe
01:13:49 <kmc> that'd be the shit
01:13:52 <ibid> no, just let the commenter select a portion of the source code, and offer shortcuts :)
01:14:09 <luite> there should be some threaded discussion type comments too, for code examples, or questions about usage
01:14:19 <luite> but those should probably be tagged by version too
01:14:36 <ibid> and naturally you'd need both RSS feeds and mailing lists for specific comment areas
01:14:49 <kmc> and twitter feeds
01:14:55 <kmc> and a facebook page
01:15:15 <ibid> a facebook page for every declaration?  that'd be a neat trick, until hackage gets banned :)
01:15:28 <kmc> every decl gets a comments area, every comment gets a twitter feed, every tweet gets a youtube channel
01:15:36 <kmc> now we are covered
01:17:08 <nanashi> hehe
01:22:08 <Peaker> Is there a way to reverse back OpenGL's coordinate system so that y grows downwards?
01:22:38 <kmc> multiply the modelview matrix by [[1 0 0 0] [0 -1 0 0] [0 0 1 0] [0 0 0 1]]
01:23:02 <Peaker> kmc, Wouldn't it make more sense to do so on the projection matrix?
01:23:04 <kmc> or maybe the projection matrix, maybe either works
01:23:18 <Peaker> kmc, I vaguely recall it being even simpler, maybe, using the "glViewport" thing
01:23:38 <kmc> oh yeah that thing
01:23:53 <kmc> "GL_INVALID_VALUE is generated	if either width	or height is	  negative."
01:23:59 <Peaker> I wonder if my use of FTGL would make the text upside down if I do that
01:24:05 <kmc> hehe
01:24:16 <nanashi> projection matrix will fix ftgl also =)
01:24:41 <Peaker> nanashi, if only projection matrix reverses y, ftgl will draw up-side-up?
01:25:05 <kmc> i doubt it
01:25:15 <nanashi> ftgl should be coordinate-independant , or that is, you can flip those too hehe
01:25:32 <EviLz> Almost FUD(Undetected by Most Antivirus) link to httpbotnet with sandbox report and binary -> http://www.megaupload.com/?d=QROLABXQ (The Password to the .zip is password) Trying to get this nasty sob report as the nets total count is surpassing 100k+ and no-one seems to want to toutch it.
01:25:44 <nanashi> it is more common to use +Y going up with GL stuff and math stuff
01:26:15 <kmc> what the hell does what EviLz said mean
01:26:23 <systemfault> What the :( GHC 6.12 doesn't compile in 64bit on OSX
01:26:25 <Peaker> nanashi, It is kind of annoying to fix the coordinate system now that I switched from SDL to GLUT
01:26:30 <nanashi> random adword spam i think kmc =)
01:26:31 <Peaker> GLUT really sucks, btw
01:26:41 <kmc> systemfault, i thought they fixed that, are you using the new Haskell Platform?
01:26:48 <kmc> yes, GLUT blows
01:26:49 <systemfault> kmc: 6.12.1
01:26:50 <kmc> why did you switch?
01:27:06 <Peaker> kmc, my friend told me SDL doesn't work very well on OS X, and I wanted to switch to Drawing Combinators
01:27:12 <kmc> oh
01:27:12 <luite> does ghc already support 64 bit on linux?
01:27:19 <kmc> luite, yes, since long time
01:27:21 <Peaker> kmc, So Drawing Combinators is pretty nice, but GLUT really sucks. I wonder now if I use SDL+OpenGL if it will work ok on OSX
01:27:32 <systemfault> kmc: Because 6.10.4 wasn't working at all on OSX out of the box
01:27:35 <nanashi> i had to make custom backend (with ghci!) for SDL and opengl working in OSX
01:27:53 <systemfault> kmc: I had to force 32bit compilation by editing /bin/ghc by hand
01:27:55 <VEvilz> anyone see that link or know somewhere the binary can be submitted????
01:27:58 <luite> kmc: ah that's what I thought, can't test it because none of my linux installs is 64 bit :)
01:28:31 <Peaker> nanashi, :-(
01:28:33 <Peaker> nanashi, how?
01:28:46 <nanashi> lots of code =( =)
01:29:05 <nanashi> made ghc shell with ghc api when it appeared
01:29:11 <Peaker> On the one hand, I wanna say "Screw OS X users, they chose a closed source system and deserve what they get". OTOH, I do want my friend using it to be able to contribute :(
01:29:14 <nanashi> and .app wrapper stuff for OSX
01:30:23 <nanashi> but mostly because the wrappers for C api's are extremely bloated and unflexible
01:30:25 <kmc> eh, OS X is more open-source and generally dev-friendly than Windows.  and for much of the world those are the two choices
01:30:31 <systemfault> Peaker: Owww come on :/
01:31:06 <Peaker> systemfault, I am guessing the reason there's no good portable graphics frontend that also works on OSX is because it is closed source
01:31:21 <systemfault> graphic frontend?
01:31:22 <kmc> in particular i'd write OpenGL code on Linux and usually it'd build with minor changes on OS X, whereas building anything OpenGL on Windows is a huge pain, especially if you're not using VC++
01:31:29 <nanashi> backend ?
01:31:49 <nanashi> MS worked hard to try to cut opengl out
01:31:55 <kmc> indeed
01:31:58 <systemfault> Peaker: gtk, QT, sdl?
01:32:01 <systemfault> *Qt
01:32:12 <nanashi> FTGL too right ?
01:32:14 <Peaker> kmc, Well, I could say "Screw Windows" long ago. No developer I know works with Windows for the last few years
01:32:25 <nanashi> hehe
01:32:39 <Peaker> systemfault, Gtk/Qt are what I want to replace here (Writing a GUI toolkit), and SDL is what I tried but doesn't work well on OSX
01:32:49 <systemfault> Ahhh ok
01:33:08 <Peaker> systemfault, I used SDL initially - apparently it takes a lot of tweaking to get it to work on OS X
01:33:32 <systemfault> I didn't try it on OSX to be honest
01:33:38 <systemfault> My software needs are modest...
01:33:43 <nanashi> the official backend for OSX is AppKit.
01:33:51 <nanashi> or even Quartz
01:33:57 <systemfault> Cocoa :P
01:34:03 <nanashi> so whatever works on top of those 2
01:34:11 <nanashi> Cocoa.AppKit =)
01:34:16 <systemfault> Evil ObjC!
01:34:19 * systemfault flees
01:34:35 <nanashi> hey! smalltalk is essentially functional. this makes objc nice for me =)
01:34:53 <kmc> Peaker, yes, i quit a software dev job in part because there was a clear push for people to use windows more
01:35:21 <kmc> they purchased expensive Windows-only software in a company where most devs had only a Linux workstation
01:35:24 <systemfault> Noob question.. a map is a foldr?
01:35:31 <kmc> systemfault, you can write map using foldr
01:35:51 <kmc> i can do this if you don't mind spoilers ;)
01:36:00 <systemfault> @src map
01:36:00 <lambdabot> map _ []     = []
01:36:00 <lambdabot> map f (x:xs) = f x : map f xs
01:36:27 <Peaker> So did anyone write bindings for AppKit? Those can probably be used to write a frontend that abstracts SDL/AppKit
01:36:44 <nanashi> yes oh
01:37:01 <nanashi> i had to write an objc wrapper that works well with objc without any wrappers or such
01:37:13 <nanashi> and the cocoa app was written in haskell only
01:38:08 <systemfault> kmc: Are haskell lists singly-linked?
01:38:25 <Peaker> systemfault, Yeah
01:38:36 <systemfault> Ah
01:39:13 <systemfault> That explains why map is foldr-like
01:39:27 <ttvd> hi, is there a way for me to make ghc use another c compiler? other than gcc (i am on linux).
01:39:38 <Peaker> systemfault, Anything that can be expressed as:   f [] = ... ; f (x:xs) = ... x ... f xs ...  (Uses "x" and "f xs" but not "xs" in the body)  can be expressed using foldr
01:39:41 <nanashi> *is* there another C compiler ?
01:39:47 <systemfault> ttvd: Just make it use its native compiler.
01:39:49 <ttvd> yes i have intel compiler installed
01:39:53 <Peaker> @src foldr
01:39:54 <lambdabot> foldr f z []     = z
01:39:54 <lambdabot> foldr f z (x:xs) = f x (foldr f z xs)
01:39:57 <ttvd> i tried ghc -pgmc icc doesn't work :(
01:40:19 <ttvd> systemfault, i am not sure what you mean.
01:40:22 <Peaker> @type foldr ((:) . f) []
01:40:24 <lambdabot> forall a a1. (Show a1, SimpleReflect.FromExpr a) => [a1] -> [a]
01:40:28 <Peaker> @type \f -> foldr ((:) . f) []
01:40:29 <lambdabot> forall a a1. (a1 -> a) -> [a1] -> [a]
01:40:36 <kmc> systemfault, yes, they are simply  data List a = Nil | Cons a (List a)
01:40:41 <systemfault> ttvd: The native code generator is improving all the time...
01:40:51 <systemfault> ttvd: And it doesn't need gcc
01:40:57 <kmc> which is singly linked; the pointers are implicit in how you might implement that datatype on a real machine
01:41:00 <ttvd> sorry no.
01:41:08 <ttvd> it doesn't perform nearly as well.
01:41:26 <DigitalKiwi> nanashi: don't be silly, there are several C compilers
01:41:57 <systemfault> Anyway, as for alternative backend, LLVM is more than welcome imho
01:42:02 <kmc> nanashi, yes, icc produces much better code than gcc for some programs, and clang is rapidly becoming important
01:42:02 <nanashi> ah i was being silly
01:42:09 <ttvd> it gives me at least 2x slower code, systemfault
01:42:23 <kmc> ttvd, did you try the new LLVM backend?
01:42:30 <kmc> worth a shot if you have some time to set it up
01:42:33 <ttvd> i actually didn't
01:42:43 <kmc> to use icc you probably need an "unregisterized" ghc
01:42:47 <ttvd> cool, thanks 'll give it a shot
01:42:48 <ttvd> ah
01:42:58 <kmc> because otherwise it expects to post-process the asm output of gcc
01:42:59 <systemfault> unregistered == slow afaik
01:43:02 <kmc> right
01:43:08 <ttvd> i see
01:43:16 <ttvd> thanks guys
01:43:16 <systemfault> LLVM is registered :)
01:43:52 <ttvd> i guess i know how i am spending my day tomorrow :)
01:43:52 <systemfault> And IIRC, the registered GCC backend is being deprecated
01:48:41 <Axman6> aye
02:01:41 <Pupeno> I remember something called cell, or cells for Haskell, a library or something about programming cells that could reference each other. There was also a Gtk Cells or something like that which used cells to build GUIs. Does anybody know what I'm talking about?
02:04:01 <Axman6> never heard of it
02:04:06 <Twey> It's for Common Lisp, Pupeno
02:04:19 <Pupeno> Twey: Oh! Right! Thanks :)
02:04:30 <Twey> http://common-lisp.net/project/cells/ http://common-lisp.net/project/cells-gtk/
02:31:59 <jelly1> hi
02:32:08 <jelly1> meh i can't ssh to my server
02:33:20 <jelly1> lol wrong channel
02:48:23 --- mode: ChanServ set +o mauke
02:48:24 --- kick: horm was kicked by mauke (horm)
02:48:24 --- mode: mauke set +b *!*@134.53.180.66
02:49:22 <Axman6> anyone else getting DCC sends from horm?
02:49:25 <Axman6> @where ops
02:49:25 <lambdabot> shapr Cale glguy dons sjanssen sorear dcoutts Saizan allbery_b dibblego conal Philippa bos arjanb psnl xerox vincenz davidhouse Heffalump kosmikus wli Pseudonym Igloo musasabi quicksilver monochrom
02:49:45 <binjo`> Axman6: +1
02:49:54 <Axman6> i'm guessing i'm not the only one, given the number of people who quit right after he joined
02:50:06 <Axman6> Cale: you there?
02:50:11 <Cale> yep
02:50:24 --- mode: mauke set -o mauke
02:50:31 <Axman6> any chance you could ban horm? he just did a DCc send that killed about 25 people
02:50:46 <Cale> I can't because he's already bannd.
02:50:48 <Cale> ed*
02:50:54 <Axman6> ah, mauke alreayd did it
02:51:03 <Axman6> missed that in the noise
02:52:36 <Entroacceptor> what clients do they use so that it kills them?
02:52:39 <ivanm> preflex: seen dons
02:52:39 <preflex>  dons was last seen on #ghc 9 minutes and 50 seconds ago, saying: oh, probably.
02:53:04 <ivanm> dons: so haskell-platform does _not_ use the version of haddock shipped with GHC?
02:53:24 <Axman6> Entroacceptor: i think it's routers that get killed
02:55:43 <Entroacceptor> by a DCC?
02:56:36 <Axman6> yes
02:57:54 <mietek> dons: so...does the new Mac OS X GHC generate 64-bit binaries?
02:58:14 <Axman6> you mean the new GHC?
02:58:36 <mietek> Axman6: all I see on the GHC page is the Dec 2009 6.12.1
02:58:41 <Axman6> it seems the version that's in macports (which is 6.10.4) is 64 bit
02:58:54 <Axman6> i'm testing it now
02:59:05 <mietek> Axman6: there's a difference between "works on 64-bit" and "generates 64-bit binaries", though.
02:59:15 <Axman6> yes
02:59:21 <mietek> As far as I know, 6.12.1 does the former, but not the latter.
02:59:34 <Axman6> it seems the latter may be a reality finally
02:59:48 <mietek> But wouldn't that result in an update to GHC itself?
02:59:54 <Axman6> but, i'll let you know when i'm all done
02:59:58 <mietek> OK.
03:00:02 <Axman6> not necessarilly
03:00:23 <Axman6> like i said, the version in macports seems to be 64 bit, but it's 6.10.4, not 6.12.1
03:00:44 <Axman6> i'm seeing if that's true, and whether you can build a 64 bit 6.12.1 using it
03:01:00 <mietek> Oh.
03:01:31 <Axman6> the one that comes with the latest haskell platform isn't 64 bit though, i tried it and it failed pretty miserably :(
03:01:53 <mietek> What do you mean?
03:02:09 <Axman6> (ie, maxBound :: Int = 2147483647)
03:02:59 <ivanm> Axman6: are you able to set up a registration table/section on the wiki page?
03:03:11 <mietek> Axman6: let me know what you find out.
03:03:27 <ivanm> with name, email, where from, dates able to attend, etc. ?
03:03:31 <mietek> Axman6: I'm quite interested in this, because I'm trying to bring GHC+Cabal to homebrew.
03:03:37 <mietek> Axman6: the GHC formula is already in the mailing.
03:03:42 <mietek> s/mailing/mainline/
03:03:46 <Axman6> ivanm: no idea, probably not. the best we could do on the wiki is either the table... or... hmm, i have something that might work, need to remember the name though
03:04:00 <Axman6> mietek: righto
03:04:00 <ivanm> well, that's all I was thinking
03:04:02 <ivanm> * of
03:04:09 <ivanm> maybe make a new one to make sure everyone does it again
03:05:43 <ivanm> Axman6: lemme know when I can send the email out then
03:05:51 <Axman6> ok
03:14:50 <Axman6> ivanm: working on a form now
03:15:56 <ivanm> good-o
03:16:44 <ivanm> is dons still in Europe or he has he gone back to the USA?
03:18:24 <Axman6> not sure, ask him :) he's been around a bit tonight
03:27:45 <ivanm> Axman6: so, you installed the new platform yet?
03:27:54 <Axman6> i did, and was not happy
03:28:21 <Axman6> the reddit post said it had 64 bit GHC, but it didn't
03:28:36 <Axman6> though the macports version does appear to
03:29:04 <ketil> Is it dangerous to forgo converting between CDouble and Double?  I'm FFIing a function, and need it to be fast...
03:29:10 <Axman6> so, i'll see if i can install a 64 bit version of 6.12 using 6.10 from macports, and then try compiling the platform
03:29:33 * ketil suspects CDouble = Double on all probable architectures, and it appears to work.
03:29:39 <Axman6> ketil: afaik, the conversion is basically a nop, but you should do it anyway
03:31:07 <Axman6> ivanm: ok, time to send an email to -cafe. i'll email everyone who had put their name down on the wiki page, and send them the link, and remove their emails from the page
03:31:19 <kmc> ketil, if you really need speed you should use the unboxed Double#
03:31:22 <Axman6> ivanm: the signup page is http://axman6.wufoo.com/forms/aushac-2010-sign-up/
03:31:29 <kmc> and work directly with those
03:31:39 <Axman6> kmc: that' not really practical
03:31:45 <Axman6> s*
03:32:10 <kmc> why not?
03:35:07 <ivanm> Axman6: we also need location, and which dates they're going to be there
03:35:18 <ivanm> (as in where they're from; optional however)
03:35:26 <ketil> Axman6, I seem to remember 'realToFrac' incurring a lot (comparatively) of overhead.
03:35:30 <Axman6> ok, i'll add that before emailing them
03:35:40 <ivanm> Axman6: you going to email -cafe or want me to?
03:35:45 <ivanm> @src realToFrac
03:35:45 <lambdabot> realToFrac = fromRational . toRational
03:35:59 <ketil> kmc: well, it's no longer the bottleneck (my old Taylor expansion was)
03:36:01 <Axman6> i'll get you to, but wait until I add the location stuff
03:36:10 <ketil> Thanks.
03:36:14 <ivanm> right
03:36:15 <jlouis> Axman6: I think G. Collins bumped out a 64bit version somewhere
03:36:20 * ivanm goes back to washing the dishes
03:36:23 <jlouis> Axman6: check -cafe
03:36:30 <Axman6> ok
03:36:38 <Axman6> sounds about right
03:40:33 <Axman6> ivanm: http://axman6.wufoo.com/forms/aushac-2010-sign-up/ ?
03:40:58 <Axman6> btw, Wufoo is fucking awesome for letting you make forms :)
03:41:21 <ivanm> Axman6: why both?
03:41:26 <ivanm> and should we have times as well?
03:41:31 <Axman6> both?
03:41:31 * ivanm checks the zurihac page again
03:41:43 <Axman6> both what?
03:42:00 <Axman6> oh, yeah i was going to remove the top one :)
03:42:01 <ivanm> you have check boxes and bullet points
03:42:04 <ivanm> heh
03:42:28 <Axman6> better?
03:42:28 <ivanm> Axman6: make city optional as well
03:42:32 <Axman6> ok
03:42:33 <ivanm> apart from that, yeah
03:42:50 <ivanm> maybe an affiliation?
03:43:05 <ivanm> wait, actually, remove city
03:43:13 <ivanm> that can go on the wiki page for people to fill in details
03:43:20 <ivanm> that's just what we need to know for booking details
03:43:34 <ivanm> then that'll be it
03:43:37 * ivanm sends the email
03:45:10 <ivanm> sent
03:52:02 <Axman6> ivanm: what do you think of it now?
03:57:13 <Axman6> ivanm: could you please fill out the form for me?
04:02:37 <Axman6> ivanm: what are the dates again?
04:03:49 <ivanm> Axman6: 16 - 18
04:04:34 <ivanm> Axman6: done
04:04:55 <Axman6> i've added the dates to the fields
04:04:59 <Axman6> ta
04:05:32 <Axman6> kamatsu: thanks for the signup :)
04:05:51 <ivanm> Axman6: I take it you get all the registrations?
04:05:54 <Axman6> whoot, ghc 6.10.4 installed with macports@
04:05:56 <Axman6> yeah
04:07:04 <ivanm> @ask dons which version of haddock is the platform meant to have (because the cabal file mentions 2.7.2)?
04:07:05 <lambdabot> Consider it noted.
04:07:36 <Axman6> whoot! 64 bit ghc!
04:09:20 <ivanm> Axman6: reddit as well?
04:09:28 <ivanm> or wait until the email hits the archives and link to that?
04:09:31 * hackagebot hsemail 1.5 - Internet Message Parsers  http://hackage.haskell.org/package/hsemail-1.5 (PeterSimons)
04:09:50 <Axman6> yeah, that's probably a better idea (since the signup page has no info)
04:10:05 <ivanm> Axman6: IIUC, the new HP only _works_ on SL, it isn't actually 64bit
04:10:42 <Axman6> the platform isn't, but the macports ghc now is
04:11:25 <ivanm> *nod*
04:11:37 <ivanm> oooohhhh..... I want BlazeHtml for SourceGraph!
04:11:45 <ivanm> (since pandoc produces really shitty html files)
04:13:00 <quicksilver> Axman6: so, presumably using the macports platform port leads to a 64bit HP?
04:13:04 <Axman6> what's blazehtml?
04:13:12 <Axman6> quicksilver: hopefully
04:13:14 <quicksilver> Axman6: (if you're happy to dedicate 3 weeks to let it compile, of course)
04:13:19 <Axman6> it's still building
04:13:35 <Axman6> yeah... 'I'll be here all night'
04:13:39 <quicksilver> Axman6: I'll make a note to ask you in April how it's going, then.
04:13:47 <Axman6> ba doom cha
04:14:00 <ivanm> Axman6: the new html combinator library they were working on during zurihac
04:14:05 <quicksilver> source-based-distributions-- # one of the most brain-dead ideas of the millenium.
04:14:09 <ivanm> quicksilver: wtf? 3 weeks?
04:14:15 <ivanm> @slap quicksilver
04:14:15 * lambdabot karate-chops quicksilver into two equally sized halves
04:14:16 <Axman6> hopefully it'll be done by the morning... or by the time we have AusHac2010 at the latest
04:14:23 <ivanm> morning
04:14:29 <ivanm> unless your machine is 10 years old
04:14:39 <Axman6> going on three
04:14:47 <Axman6> but it's a fairly fast machine
04:14:52 <ivanm> then my wild guess is about 4AM at the latest
04:14:56 <Axman6> yeah
04:15:16 * eevar2 is stuck on a 32-bit mac :/
04:15:38 <Axman6> PPC? or did you buy at the wrong time?
04:15:49 <eevar2> 1st-gen macbook
04:16:08 * Cale agrees with quicksilver
04:16:12 <ivanm> @ask dons why doesn't the platform use the latest release of cgi?
04:16:12 <lambdabot> Consider it noted.
04:16:16 <Axman6> eevar2: poor thing
04:16:28 <ivanm> quicksilver, Cale, etc.: you don't like them? fine, that's your opinion
04:16:30 <Axman6> ivanm: didn't it only come out like yesterday?
04:16:37 <ivanm> doesn't mean it's necessarily braindead
04:16:40 <Cale> They're a waste of power.
04:16:40 * hackagebot funcmp 1.4 - Functional MetaPost  http://hackage.haskell.org/package/funcmp-1.4 (PeterSimons)
04:16:42 <danderson> I've just published all the photos from Zurihac: http://picasaweb.google.com/david.jc.anderson/Zurihac
04:16:47 <ivanm> Axman6: oh, maybe...
04:16:58 * Axman6 doesn't have a problem with source based distros, except when they break. which binary ones do also
04:17:04 <quicksilver> ivanm: No. My opinion is not that I dislike them. That I dislike them is a fact. My opinion is that they are braindead.
04:17:11 <Axman6> danderson: is it still running?
04:17:15 <Cale> Instruction set architectures were invented to prevent the need for recompiling code on every single machine.
04:17:22 <ivanm> @tell dons nvm, I didn't realise it only came out yesterday (wrt cgi)
04:17:22 <lambdabot> Consider it noted.
04:17:22 <danderson> Axman6: no, it finished yesterday
04:17:29 <Axman6> ah ok
04:17:30 <quicksilver> ivanm: I use a distribution for convenience, quality, and speed. Debian allows me to install new haskell packages on my machine in under a second.
04:17:45 <ivanm> Axman6: exactly
04:18:02 <danderson> I didn't publish the photos live because the hackathon was hosted at a Google office, and I had to get permission from the PR folks to publish photos (by default there is a "no photos" policy)
04:18:06 <ivanm> source based distros provide you with greater flexibility at the expense of time and effort
04:18:15 <Axman6> ivanm: when we get more names signed up, i can send you a {excel, csv, tabbed} file with all the data
04:18:22 <ivanm> Axman6: *nod*
04:19:07 <ivanm> arch can be seen as a middle ground where you have slightly more flexibility at the expense of more manual configuration being required
04:19:16 <danderson> dons: http://picasaweb.google.com/david.jc.anderson/Zurihac , if you have some other place where you want to circulate the pics
04:19:17 <ivanm> danderson: :o
04:19:39 <danderson> ivanm?
04:20:00 <ivanm> danderson: the "no photo" policy
04:20:05 <danderson> oh
04:20:15 <danderson> it's a sensible default, we have a lot of confidential stuff going on
04:20:26 <ivanm> Axman6: OK, fine; can you see any reason why the new HP uses old glut?
04:20:31 <Cale> Of course, having the source code to things be available is obviously a good thing. I just don't see why I should have to compile it whenever I have no interest in changing it.
04:20:43 <Axman6> ivanm: tried and tested is the point of the platform
04:20:53 <danderson> and given that the turnaround to get permission for release is 0.2 business days (empirically), it's just simpler for the PR folks to make the default "no photos at all" and give permission for specific stuff
04:20:56 <ivanm> Cale: see, it's because I _want_ to change it that I use gentoo
04:21:07 <ivanm> Axman6: it's been out since september last year!
04:21:21 <Axman6> doesn't mean it's tried and tested
04:21:38 <danderson> in this case, it was trivial, since the photos cover an even that had nothing to do with Google, didn't involve any confidential material, and won't be used as PR material by Google proper
04:21:49 <danderson> so the review was "Yup, that's obviously fine to publish, but thanks for asking"
04:21:52 <ivanm> methinks dons just didn't realise there was a enw version...
04:22:00 <Cale> ivanm: What proportion of the packages on your system have you personally made changes to the source code of?
04:22:09 <ivanm> Cale: I use USE flags
04:22:14 <ivanm> that's what I mean about wanting to change it
04:22:28 <ivanm> since I don't want to be stuck with whatever compile-time decisions some distribution developer prefers
04:23:28 * Axman6 agrees
04:23:44 * ivanm points out that glut is also bad in that the version chosen has no upper bound on its base dependency
04:23:50 <ivanm> Axman6: with me or with Cale?
04:23:54 <Axman6> you
04:23:58 <ivanm> \o/
04:24:13 <Entroacceptor> every distribution I tried makes it quite possible to compile from source if I don't like the defaults
04:24:17 <ivanm> Axman6: of course, you use the ultimate non-customisable OS ;-)
04:24:28 <ivanm> Windows has _some_ customisability on it because of law suits, etc.
04:24:43 <ivanm> Entroacceptor: yes, but you have to do it by hand, do you not?
04:24:45 <Axman6> OS X is very customisable in this respect
04:24:54 <ivanm> whereas I can set USE="-gnome" to remove all optional gnome dependencies
04:25:00 <ivanm> Axman6: :o
04:25:11 <ivanm> you mean you can tweak everything it comes with?
04:25:32 <Axman6> the user stuff isn't, which lets you get on with getting things done if you don't care about command line things say
04:25:36 <Entroacceptor> tbh I don't care about most of that, it just uses some hard disk space
04:25:46 <quicksilver> ivanm: I can see USE flags sound nice in principle but I can honestly say I've never needed one :) And the price you pay for them is high.
04:26:08 <ivanm> quicksilver: right; I'm willing to pay that price
04:26:14 <quicksilver> debian packages are almost always compiled in a way which makes cumbersome dependencies optional.
04:26:19 <ivanm> I can accept that not everyone is
04:26:21 <quicksilver> (by any of a number of technical approaches)
04:26:39 <ivanm> Entroacceptor: considering that I'm running _out_ of disk space... >_>
04:27:00 <Entroacceptor> ivanm: because of all the source codes lying around, I bet :)
04:27:00 <ivanm> (partially due to some - in hindsight - poor choices in partitioning...)
04:27:19 <Cale> I don't see why you'd want to remove optional gnome dependencies in the first place.
04:27:41 <ivanm> the 10 GB partition where I keep all my source tarballs and package directory is 73% full
04:27:46 <ivanm> however, /home is 85% full
04:27:51 * hackagebot data-flags 0.0.1 - A package for working with bit masks and flags in general.  http://hackage.haskell.org/package/data-flags-0.0.1 (MikhailVorozhtsov)
04:28:01 <ivanm> and /usr is 68% full
04:28:14 <ivanm> the latter are 80GB and 33 GB respectively
04:28:26 <ivanm> Cale: because I don't use gnome
04:28:43 <Cale> I don't use KDE, but I still have the libraries so that I can use KDE software.
04:28:51 <ivanm> Cale: libraries are one thing
04:29:01 <ivanm> it's all the 50 million little extra dependencies that they bring in
04:29:10 <Cale> I don't understand the problem.
04:29:18 <ivanm> e.g. if I want to use gnome-power-manager then for some reason it _has_ to have gnome-panel installed
04:29:20 <trzkril> mostly caused by badly written ebuilds ;)
04:29:29 <ivanm> when gnome-power-manager runs in the system tray
04:29:37 <ivanm> trzkril: *shrug* possibly
04:30:44 * Axman6 smells this discussion getting too linuxy for his tastes
04:30:44 <Cale> The only way I could consider that a problem in the first place is if I was forced to compile these things ;)
04:30:56 <ivanm> Axman6: heh
04:31:07 <Cale> The amount of disk space they use is trivial.
04:31:16 <ivanm> Cale: it's also a philosophical/moral issue: e.g. I don't want to infect my computer with mono :p
04:31:20 <Ferdirand> imho, source-based distros are great in that when you want to tweak the source of something, you can do so without fighting the package manager
04:31:20 <Axman6> ivanm: 7 people signed up so far (i'm two of them, and Sarah's one though :P)
04:31:21 <Cale> pff
04:31:28 <dobblego> trying to install happstack which depends on smtpclient, which is not compiling: Network/SMTP/ClientSession.hs:242:16: Not in scope: data constructor `Message'
04:31:32 <ivanm> Axman6: you're _two_? :o
04:31:34 <Ferdirand> but of course it encourages lazyness and keeping patches for yourself
04:31:38 <Axman6> nothing wrong with mono, they've done a good job with it
04:31:39 <ivanm> and sarah is going to hack as well?
04:31:48 <Axman6> she's coming, probably not to hack though
04:31:53 <ivanm> heh, fair enough
04:32:03 <Entroacceptor> dobblego: aaaaaaaaaaaaaarg, happstack
04:32:13 * Entroacceptor runs away
04:32:22 <ivanm> Ferdirand: *shrug* I have philosophical problems with the project, what it's implementing and how they're trying to use it for everything
04:32:25 <eevar2> nothing wrong with mone, except it'll always be inferior to .net
04:32:26 <ivanm> Entroacceptor: heh
04:32:28 <Entroacceptor> (had lots of troubles installing that a few days ago)
04:32:40 <Entroacceptor> and I'm off, lunchtime
04:33:38 <ivanm> @ask dons why wasn't glut bumped in the platform? the latest version has been there since september...
04:33:38 <lambdabot> Consider it noted.
04:39:48 <quicksilver> Ferdirand: only if you don't understand how to use your binary system.
04:40:11 <quicksilver> Ferdirand: it's extremely simple to tell apt to download the source for a package, make some modifications yourself, and then install your custom version.
04:41:16 <Ferdirand> quicksilver: i claim it is even easier with portage :)
04:42:13 <quicksilver> Ferdirand: not substantially easier, no. One command to download, make your changes, one command to build.
04:42:21 <quicksilver> Ferdirand: basically the same.
04:42:47 <quicksilver> Ferdirand: there may be other reasons to prefer portage, but this particular one is not a reason to dislike a binary distro - decent binary distros make it easy to compile custom packages when you choose.
04:43:19 <Axman6> ok, so, if i have a 64 bit version of 6.10.4, is there any reason 6.12.1 shouldn't compile?
04:43:26 <ivanm> quicksilver: however, wouldn't editing an ebuild make it easier to share with others and have the changes made official?
04:43:39 <ivanm> Axman6: only because it doesn't like SL? :p
04:44:22 <Axman6> running configure looks good so far :)
04:44:34 <Axman6> i should download the test suite too
04:45:40 <quicksilver> ivanm: Yes. That is a good technical advantage of ebuilds, I agree.
04:46:31 <bremner_> ivanm, quicksilver: I suspect the main difference is that all gentoo users (are forced to?) know how to build from source.  I see questions from debian users who want to rebuild a debian package, but don't actually know how to use make.
04:47:50 <bremner_> I used to be a big fan of the FreeBSD ports system, but I got irritated at how compiling one thing would cascade into compiling 10 others.
04:47:53 <ivanm> when I had to compile ghc from source on my uni machine (yes, I could have used the generic binary, but chose not to) I had more of an idea of what to do
04:48:25 <ivanm> + because it's source based, gentoo has heaps of tools to fix that kind of stuff for you
04:48:28 <ivanm> revdep-rebuild, etc.
04:48:45 <ivanm> and we have haskell-updater, which people keep asking me to port to arch and cabal-install
04:49:29 <bremner_> I stand by it being mainly a cultural thing, I don't think debian is missing tools, although there has been talk about gentoo style global compilation flags
04:49:49 <bremner_> see, sometimes we stop making fun of gentoo long enough to steal ideas :)
04:50:22 <Axman6> bremner_: how would you avoid compiling deps on say FreeBSD?
04:51:09 <bremner_> Axman6: my point was, at the time, there was no real way to avoid it.
04:51:22 <Axman6> is there a way to avoid it?
04:51:24 <ivanm> bremner_: what I meant by tools are: because ABIs, etc. keep getting changed and broken from libraries being updated, in gentoo we have tools to automatically rebuild packages for you that are broken
04:51:45 <Twey> C#: Sometimes We Stop Making Fun of Haskell Long Enough to Steal Ideas.
04:51:54 <ivanm> since debian, etc. use binary packages and typically have all that building done by developers, they don't need that kind of thing
04:51:56 <ivanm> Twey: heh
04:52:04 <ivanm> hmmm... has F# ever stolen stuff from us?
04:52:09 <Twey> Yup
04:52:14 <Axman6> @remember Twey C#: Sometimes We Stop Making Fun of Haskell Long Enough to Steal Ideas.
04:52:14 <lambdabot> Done.
04:52:15 <ivanm> (what with how harrop keeps saying how we're useless and all...)
04:52:17 <bremner_> they stole OCaml from us
04:52:19 <Twey> Workflows
04:52:22 <ivanm> bremner_: heh
04:52:29 <ivanm> Twey: is that what they call monads?
04:52:33 <Twey> Yup
04:52:37 <ivanm> Axman6: did the email get through?
04:52:45 <Axman6> no idea, i'll check
04:53:38 <bremner_> ivanm: about the rebuilds, I see your point.
04:54:02 <ivanm> that can be marked down to cultural differences I suppose
04:54:14 <TacticalGrace> Some call it stealing ideas, we call it brain washing.
04:54:41 <ivanm> heh
04:54:52 * Axman6 still thinks that the whole idea of packages is one of the reasons that linux will never make a good consumer type OS
04:54:58 <ivanm> TacticalGrace: http://axman6.wufoo.com/forms/aushac-2010-sign-up/
04:55:04 <ivanm> (in case you haven't seen the email yet)
04:55:22 <ivanm> Axman6: when I converted my mum to linux, she thought it was a _great_ idea
04:55:25 * Twey still thinks that the whole idea of packages is one of the reasons nothing else will ever make a good consumer-type OS
04:55:27 <ivanm> in the sense that upgrades, etc. are done for you
04:55:30 <bremner_> Axman6: if a consumer OS is one without packages, I'll pass.
04:55:35 <Twey> Haha, ivanm — I was just about to say exactly the same thing
04:55:38 <ivanm> and most software can be installed and managed from one place
04:55:53 <Twey> My mother loves packages.  She doesn't have to look for software any more, she just clicks it in the Big List.
04:55:55 <ivanm> the thing is, most consumers aren't _used_ to having a package management system
04:55:56 <Axman6> with all due respect, your mum's produced you two, so... :P
04:56:06 * Twey laughs.
04:56:20 <Zao> ivanm: "Where's Word and Internet?"
04:56:27 <ivanm> Twey: admittedly, in most cases my brother or I go and help her find which new packages she wants and installs them... ;-)
04:56:38 <ivanm> Zao: nah, that's more like my dad than my mum :p
04:56:39 <Twey> ivanm: I think she's okay with that now
04:56:48 <Twey> I had to to start with, but she's getting the hang of the search utility no
04:56:48 <TacticalGrace> ivanm: nice form
04:56:50 <Twey> w
04:56:54 <ivanm> my dad is more technically minded than my mum, but my mum actually bothers to ask and learn than my dad
04:57:15 <ivanm> anyway, haskell-platform-2010.1.0.0 is now available in gentoo!
04:57:20 <ivanm> for anyone that actually wants it and cares...
04:57:21 <Twey> \o/
04:57:28 <ivanm> TacticalGrace: that's Axman6's form, not mine ;-)
04:57:38 <Axman6> TacticalGrace: thanks :P
04:57:40 <Twey> Pre-Arch Twey cares.  I think I have him tucked away in here somewhere.
04:58:00 <TacticalGrace> ivanm: yeah, I kind of guessed that from the url :P
04:58:04 * Axman6 puts a shout out for Wufoo and it's awesome free form building and hosting service
04:58:18 <ivanm> Twey: heh
04:58:27 <ivanm> Axman6: what's the licensing, etc. like?
04:58:30 <ivanm> do they steal data?
04:58:52 <Axman6> ... i go to the website and make a form... and it works... and... who know, maybe?
04:59:09 <ivanm> ...
04:59:13 <Axman6> :P
04:59:19 <TacticalGrace> ivanm: doesn't about everybody steal data these days?
04:59:32 * Twey relegates Axman6 to knitting scarves.
04:59:35 <TacticalGrace> especially in return free services
04:59:46 * ivanm points this out as a problem of the proprietary software "community": "damnit, another license; yes, I accept, just let me install this thing... waddaya mean you now own my soul?!?!?!?"
04:59:48 * TacticalGrace tries hard not to look at Google
04:59:50 <Axman6> ivanm: http://wufoo.com/faq/#secure
04:59:54 <ivanm> TacticalGrace: apaprently google doesn't... >_>
04:59:57 <ivanm> <_<
05:00:08 <Twey> Haha
05:00:14 <TacticalGrace> lol
05:00:14 <Twey> They don't steal it
05:00:18 <Twey> They just… keep it
05:00:23 <Twey> In case you want it later on
05:00:24 <TacticalGrace> ;)
05:00:44 <TacticalGrace> They keep it...safe.
05:02:23 <Twey> And they have a great feature, too: you know how sometimes you *say* you want something deleted, but then a few years in the future, you think, ‘damn, I wish I hadn't deleted that’?
05:02:33 <Twey> They've got it covered.
05:02:53 <Zao> They're like Jesus. They save too.
05:03:42 <DigitalKiwi> Twey: you use arch linux now?
05:03:57 <Axman6> ooo, i might have a 64 bit ghc 6.12.1 :D
05:04:00 <Twey> DigitalKiwi: For years
05:04:04 <Axman6> hurry up docs!
05:04:05 <Twey> We *met* in #archlinux
05:04:06 <DigitalKiwi> i did not know this!
05:04:23 <DigitalKiwi> oh
05:04:25 <Twey> :þ
05:04:32 <Axman6> DigitalKiwi: you're not on the other side of the tasman are you?
05:04:35 <DigitalKiwi> we probably had this same discussion in #lua at some point
05:04:46 <Twey> Haha, no, I don't think so
05:04:58 <DigitalKiwi> Axman6: ?
05:05:08 <Axman6> are you a kiwi
05:05:09 <ivanm> oooohhh... graphviz's documentation is missing an image it needs to actually generate one of their sample graphs...
05:05:10 <Twey> Axman6's Australian.
05:05:18 <Axman6> ah
05:05:21 <Axman6> good :)
05:05:24 <DigitalKiwi> oh, no you don't have to hate me or hide your sheep
05:05:29 <Twey> Haha
05:05:41 <ivanm> DigitalKiwi: he was just asking to see if you could be suborned into coming to AusHack
05:05:50 <Axman6> DigitalKiwi: are you coming to the hackathon in july? (i can't remember if we've discussed it with you or not)
05:06:13 <TacticalGrace> Axman6: Do you know who did the 64 bit port?
05:06:23 <Axman6> someone at ZuriHac
05:06:27 <DigitalKiwi> 1. live in united states b. don't know haskell III. no monies
05:06:28 <TacticalGrace> I mean if it now magically works
05:06:30 <Axman6> greg someone dons was saying
05:06:46 <TacticalGrace> Axman6: ah, ok
05:06:52 <Axman6> TacticalGrace: i sure want to buy them a beer though :)
05:07:02 * Axman6 should paypal them some money
05:07:12 <TacticalGrace> haven't seen any patches on the commit list
05:07:49 <Axman6> the macports version relies on a bootstrapping compiler, which is 64 bit. no idea how they got that working though
05:08:07 <ivanm> DigitalKiwi: you don't know haskell? then what are you doing here?
05:08:15 <Axman6> learning!
05:08:21 <DigitalKiwi> :)
05:08:26 <ivanm> then he would know _some_ haskell!
05:09:09 <DigitalKiwi> i've read some of some of the books a long time ago
05:09:34 <DigitalKiwi> but then got distracted with other things
05:09:44 <idnar> ivanm: the free software community isn't that much better (re: licenses)
05:09:48 <DigitalKiwi> like my arch linux package manager
05:09:57 <idnar> ivanm: "hmm, let me just use this library.... whaddya mean, GPL?!"
05:10:00 <ivanm> idnar: if you just use them, then you won't have a problem
05:10:00 <DigitalKiwi> Twey: you need clyde-git from aur!
05:10:07 <Twey> No I don't
05:10:09 <ivanm> as in end user, not a developer
05:10:11 <Axman6> ivanm: hear hear
05:10:12 <idnar> heh
05:10:16 <DigitalKiwi> yes you do ;_;
05:10:16 * Twey just got used to bauerbill
05:10:24 <ivanm> DigitalKiwi: how, pray tell?
05:10:25 <Axman6> i'm so glad we have this mostly BSD centric community here
05:10:34 <ivanm> Axman6: why?
05:10:36 <DigitalKiwi> pffft bauerbill :(
05:10:42 <idnar> most of those clickthrough licenses restricting usage don't carry much weight anyway
05:10:48 <Axman6> because the GPL is a disgusting vile thing
05:10:49 <DigitalKiwi> ivanm: how pray tell what?
05:10:51 <Twey> What does Clyde offer that Bauerbill doesn't?
05:11:00 <DigitalKiwi> less bugs.
05:11:06 <Twey> What bugs?
05:11:12 <ivanm> DigitalKiwi: how can you - as an end user using a program - have problems wrt gpl?
05:11:20 <DigitalKiwi> I read the thread, there are tons of bugs in bauerbill >.>
05:11:34 <ivanm> realistically, if it weren't for the fact that I inherited code from matthew-_, I would have GPL'd graphviz
05:11:37 <DigitalKiwi> ivanm: i dunno i think we are in different conversations
05:11:45 <Axman6> Mark Wotton's signed up :)
05:11:46 <idnar> Axman6: licensing is the one thing BSD got right, even if they got everything else wrong ;)
05:11:48 <ivanm> if only because of how much frigging time I'm spending adding functionality I don't want or use
05:11:58 <ivanm> DigitalKiwi: maybe ;-)
05:12:00 <Axman6> ivanm: they got plenty of other things right
05:12:01 <Twey> DigitalKiwi: Can Clyde handle ‘provides’?
05:12:01 <ivanm> Axman6: \o/
05:12:26 <idnar> Axman6: I'm only half serious
05:12:26 <DigitalKiwi> usually >.>
05:12:47 <Twey> DigitalKiwi: ‘Usually’?
05:12:51 <Axman6> idnar: i should hope so :P
05:12:52 <ivanm> AFAICT, GPL only has problems when you want to start commercialising stuff
05:12:53 <idnar> Axman6: I pretty much hate every OS anyway
05:13:00 <Axman6> heh
05:13:07 <ivanm> if everything was GPL, then there'd be no problem
05:13:07 <idnar> Axman6: beyond that, it's just distinguishing degrees of hate :P
05:13:16 <DigitalKiwi> that is like one of the only bugs I haven't got around to fixing, packages that use something like java-runtime don't work right
05:13:17 <ivanm> since I don't want people to make money off my work without giving me a cut, I prefer GPL
05:13:24 <Axman6> ivanm: or using an actually free licence with a non free GPL'd abomination ;)
05:13:25 <idnar> ivanm: it doesn't really have anything to do with commercialising stuff
05:13:26 <DigitalKiwi> when from aur*
05:13:31 <idnar> ivanm: you just hit on it with your last statement
05:13:32 <DigitalKiwi> when from repos it works perfectly
05:13:37 <idnar> ivanm: if everything was GPL, then there'd be no problem
05:13:46 <Twey> DigitalKiwi: So can it actually install Haskell packages?  :þ
05:13:49 <idnar> ivanm: but, uh, everything isn't GPL
05:13:50 <ivanm> Axman6: how is it not free? just because you have rights to use a library
05:13:55 <DigitalKiwi> like, openoffice would insatll fine, freecol would not
05:13:58 <ivanm> uhhh, drop everything after the question mark
05:14:02 <DigitalKiwi> Twey: yeah
05:14:02 <ivanm> I meant to hit backspace
05:14:17 * DigitalKiwi tests on 'twitter'
05:14:20 <idnar> "non free" is a bit of a silly term there
05:14:23 <idnar> I would just say "restrictive"
05:14:36 <ivanm> idnar: if everything was a free license, then what reason would there be for using BSD over GPL apart from political issues?
05:14:48 <Twey> Axman6: Wait, you use OS X and you're complaining that the GPL is too restrictive?  :þ
05:14:53 <DigitalKiwi> Twey: clyde is like yaourt but without the suck, in terms of features and behavior
05:15:07 <Twey> DigitalKiwi: I prefer bauerbill to yaourt nowadays anyway
05:15:13 <DigitalKiwi> :(
05:15:17 <ivanm> why I prefer GPL: if you get to use someone elses work for free, isn't it common courtesy to let other people use your work for free?
05:15:17 <DigitalKiwi> clyde is faster!
05:15:17 <Draconx|Laptop> ivanm, if everything used a free license, then the GPL would not be necessary.
05:15:20 <idnar> ivanm: that might be true, but it's irrelevant
05:15:22 <ivanm> all the GPL does is enforce that
05:15:25 <ivanm> Draconx|Laptop: true
05:15:28 <DigitalKiwi> (than bauerbill)
05:15:29 <Twey> yaourt always felt a bit clunky
05:15:35 <Twey> DigitalKiwi: Stats or it didn't happen
05:15:41 <DigitalKiwi> everything is faster than yaourt lol
05:15:52 <Axman6> ivanm: because if i want to use some GPL'd code, i either can use a licence i agree with for _my_ code and duplicate the work they've already done, or i can force myself to use a licence i disagree with, that infects code that it never should
05:15:52 <ivanm> Draconx|Laptop: but my point was, AFAICT the rationale for using BSD over GPL is basically that someone wants to be able to make money off of BSD licensed stuff
05:15:55 <idnar> ivanm: unless you get magically teleported to a parallel universe, we're stuck in one where not everything uses the GPL
05:15:55 <eevar2> ivanm: libraries had better use LGPL, BSD or MIT
05:15:58 <Draconx|Laptop> ivanm, the GPL has nothing to do with price.
05:16:21 <ivanm> eevar2: why "had better"? (that sounds almost like a threat...)
05:16:24 <eevar2> if you care about the community adopting your package and contributing back, that is
05:16:34 <idnar> ivanm: at the very least, there's the GPL v2 as well as v3
05:16:44 <DigitalKiwi> bauerbill -Ss svn --aur  2.76s user 0.21s system 83% cpu 3.550 total
05:16:48 <TacticalGrace> Yay!  License war!!!
05:16:52 <ivanm> idnar: *shrug* most of the v3 changes were to stop people abusing the spirit of v2
05:16:55 <DigitalKiwi> clyde -Ss svn  0.37s user 0.18s system 56% cpu 0.982 total
05:17:01 <ivanm> eevar2: bull
05:17:04 <Axman6> imo, the BSD licence encourages big business to give back to the community, because they can do what they like with _their_ code, while still giving back their changes to the code that's free
05:17:06 <idnar> ivanm: it doesn't really matter what the changes were
05:17:14 <Twey> DigitalKiwi: Hmm
05:17:16 <idnar> ivanm: the point is that they render the two licenses incompatible
05:17:21 <DigitalKiwi> (clyde searches aur without needing --aur)
05:17:26 <ivanm> Axman6: whereas I think they should give _all_ their code back
05:17:34 <DigitalKiwi> --repos searches not aur, --aur only searches aur
05:17:35 <ivanm> not just what they _want_ to give back
05:17:35 <eevar2> i won't use a GPLed library, even if I plan to license my app under GPL. artificially limited mind share and stuff like that
05:17:37 <idnar> ivanm: the FSF just kinda shrugs and tells people to use the "or later versions" clause
05:17:43 <ivanm> idnar: true
05:17:45 <Axman6> ivanm: well, i completely disagree with that :)
05:17:53 <ivanm> yet if people didn't abuse v2, there would have been no need for v3
05:18:00 <idnar> ivanm: but I think it's a bit short-sighted to give a single entity control over licensing decisions for every GPLed piece of software in existence
05:18:21 <DigitalKiwi> does bauerbill have colors?
05:18:22 <ivanm> idnar: ummm, no, assigning copyright to FSF is different from using GPL
05:18:22 <idnar> at any rate, BSD-style licensing avoids all of these problems
05:18:39 <idnar> ivanm: the FSF publishes new versions of the GPL
05:18:48 <Vanadium> BSD-style licensing does not solve the problem of some jerk using my code, and then profiting of it without contributing anything back~
05:18:55 <DigitalKiwi> clyde has colors by default, though you can turn them off by default in the config (and then reenable with --color), and can also one-off disable with --nocolor
05:18:55 <ivanm> Axman6: I've spent a shit load of time on graphviz; I'll be pissed off if someone then goes and uses it to make money
05:18:56 <bremner_> ahem. Are we maybe a little offtopic?
05:19:07 <ivanm> which (due to it using BSD) they are technically allowed to do
05:19:08 <idnar> ivanm: if you use the "or later versions" clause, the FSF can add to the licensing terms of your program at any point
05:19:18 <Axman6> Vanadium: i don't have a problem with people doing that in general
05:19:24 <idnar> ivanm: that's not quite as bad as actually assigning copyright to the FSF, but I think it's a pretty brittle approach
05:19:32 <Vanadium> Well, some people do not like to work for free, I guess
05:19:36 * bremner_ admits being off-topic before, but the distro discussion at least had technical content
05:19:37 <ivanm> idnar: they don't just release new versions willy-nilly; there is community feedback, etc.
05:19:44 * ksf s intuition is conjecturing isomorphisms without bothering to give bijections, yet again
05:19:52 <ivanm> Vanadium: exactly
05:20:12 <idnar> ivanm: I don't have any particular reason to expect the FSF to abuse that power gratuitously, I just think it's a bad idea to build a fragile system like that
05:20:23 <Twey> DigitalKiwi: Yes
05:20:29 <ivanm> idnar: *someone* has to be able to make changes to such a license
05:20:43 <DigitalKiwi> bauerbill didn't do color for me :(
05:21:00 <ivanm> and the FSF has legal staff, etc. to check what they're doing (in the sense that the GPL is so long that someone needs to make sure it's valid)
05:21:01 <idnar> uhm, I didn't even notice I was in #haskell until now
05:21:04 <Twey> DigitalKiwi: You have to enable it
05:21:06 <ivanm> heh
05:21:12 <ivanm> where'd you think you were? -blah?
05:21:16 <Vanadium> ivanm: I suppose you could go with copyright assignment to the project maintainer, not using the "or any later version" clause and having the guy manually relicense it when a new version of the GPL comes out that does not contain a "and the FSF is going to steal your shit" clause
05:21:20 * ivanm wonders how we got into this conversation...
05:21:21 <Axman6> Discussion -> #haskell-blah?
05:21:22 <ksf> while there certainly might be a cool connection between the constraints of type families before you switch on UndecidabeInstances and LR(0) parsability, the idea alone won't help much.
05:21:27 <idnar> I have no idea, I just happened to switch to this window and got sucked in
05:21:39 <ivanm> IIRC it was quicksilver saying source-based distros were no good in his opinion (or something to that effect)
05:21:42 <DigitalKiwi> Twey: with what? :/
05:21:47 * SamB_XP wonders if there is a dogomorphism
05:21:52 <quicksilver> yay my fault!
05:22:00 * quicksilver agres with Axman6 
05:22:12 <quicksilver> licensing / distro / fsf discussions to -blah, please.
05:22:25 <quicksilver> keep the lambdas flowing in here.
05:22:33 <Vanadium> But it is about licensing haskell code. And probably distributing haskell code!
05:22:47 <Twey> ivanm: You grumbled about crazy EULAs :þ
05:22:49 <Botje> SamB_XP: it's where the compiler looks at you happily and wags his tail after totally mangling your code
05:22:54 <ksf> yeah. plz give a bijection to that isomorphisms okthx
05:22:55 <Twey> DigitalKiwi: The config file…
05:23:05 <Axman6> > \discussion -> const (text "#haskell-blah") discussion $ True
05:23:06 <lambdabot>   Couldn't match expected type `a -> b'
05:23:06 <lambdabot>         against inferred type `Text.P...
05:23:11 <Axman6> :(
05:23:14 <ivanm> Twey: yes, but that was because it went from binary vs source distro -> linux vs OSX -> free vs proprietary
05:23:17 <DigitalKiwi> oh well that is lame, Twey :(
05:23:27 <Twey> DigitalKiwi: And it uses it tastefully, unlike yaourt >.>
05:23:55 <DigitalKiwi> i has to go :(
05:24:13 <Twey> … and unlike Clyde, apparently
05:24:34 <DigitalKiwi> hehe
05:24:34 <Twey> Black text on white background for every result?  Ew
05:24:43 <DigitalKiwi> your color scheme sucks
05:24:44 <Twey> And bold grey on orange
05:24:59 <DigitalKiwi> and I haven't gotten to color profiles :(
05:25:22 <Twey> No, *your* colour-scheme sucks… don't use background for anything in mid-text unless it's really, really, really important
05:25:38 <Twey> ‘Pressing Y may destroy your CPU’ kind of important
05:26:15 <DigitalKiwi> http://omploader.org/vM3d2aw
05:28:04 <zygoloid> DigitalKiwi: you misspelled 'Usage' :)
05:28:29 <Twey> DigitalKiwi: http://omploader.org/vM3d2bA
05:28:46 <DigitalKiwi> you are in screen or tmux me thinks
05:29:05 <DigitalKiwi> or your terminal does not support italics properly
05:29:17 <DigitalKiwi> I do not use background for results
05:29:20 <Twey> There are terminals that support italics?
05:29:29 <DigitalKiwi> look at my screen :)
05:29:42 <Twey> Oh, but it's urxvt ☹
05:29:47 <DigitalKiwi> =D
05:30:02 <DigitalKiwi> zygoloid: how did I spell it?
05:30:12 <Twey> Sorry, I'm not limiting myself to XIM just so that I can have italics in my terminal :
05:30:15 <Twey> :þ
05:30:30 <zygoloid> DigitalKiwi: Useage
05:30:51 <Twey> I have to go, too — see y'all
05:30:54 <DigitalKiwi> where did i spell it like that
05:31:20 <zygoloid> DigitalKiwi: in the first printf in usage().
05:31:39 <DigitalKiwi> oh, thanks
05:31:59 <ksf> If someone is in need of a haskell project, I could use a perfect hash implementation in haskell (instead of a binding to a c library)
05:32:27 * DigitalKiwi really has to go now, tata
05:32:34 <ksf> ...as that makes using it feasible for things with small n.
05:33:03 <ksf> if there's no takers, I'm going to go with TH generated binary lookups and the code won't be O(1)
05:35:38 <zygoloid> i guess it'd be pretty straightforward to port gperf
05:36:40 <zygoloid> whoa, it's written in c++ :o
05:43:13 <FliPPeh_> Meh.
05:44:14 <mlesniak> I have a simple StateT-example and want to play with it in ghci. How do I specify which monad transformer library I want (having both transformers and mtl).
05:46:02 <danderson> mlesniak: start ghci with -hide-package foo
05:46:11 <danderson> where foo is the transformer library you don't want
05:46:24 <mlesniak> danderson, nice, thanks
05:51:15 <gwniobombux> hi, i'm trying to implement takeWhile tail recursively (http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24244) what am i doing wrong?
05:54:33 <Axman6> gwniobombux: ys ++ z. z isn't a list
05:55:08 <bremner_> is there any point in tail recursion in Haskell?
05:55:25 <Axman6> ... yes?
05:55:26 <gwniobombux> ah, so how would i just append?
05:55:29 <Axman6> why wouldnt there be?
05:55:34 <Jafet> That depends on what you mean by tail recursion
05:55:57 <ceii> gwniobombux: ys ++ [z]
05:56:06 <bremner_> Axman6: well, the evaluation semantics are a bit different in a lazy language
05:56:29 <Axman6> bremner_: tail recursion still compiles to pretty damn fast code
05:56:39 <gwniobombux> ceii: right, thanks
05:56:42 <bremner_> Axman6: ok, that was the question.
05:56:48 <zygoloid> tail recursion with strict arguments can be useful. with lazy arguments, not so much.
05:57:19 <zygoloid> but tail recursive functions aren't productive, so non-tail-recursive versions can be better
05:57:32 <bremner_> right, that was my question better phrased. I meant "in lazy code" when I said "in Haskell"
05:58:20 <TacticalGrace> Tail recursion elimination is crucial in a lazy language.
05:58:48 <TacticalGrace> Keep in mind that your tail call may be to evaluate a thunk (= a suspended expression), which may again tail call a thunk and so on.
05:58:56 <TacticalGrace> Do you want all that to grow your stack?
05:59:05 <Jafet> Again, this all depends on what you mean by tail recursion
05:59:19 <Jafet> You can do tail recursion in TeX, for some suitable definition of tail recursion.
05:59:59 <TacticalGrace> Jafet: this http://en.wikipedia.org/wiki/Tail_call ;)
06:01:00 <Jafet> ...
06:01:06 <Jafet> Oh, you can do tail recursion in the c preprocessor too.
06:01:07 <TacticalGrace> shouldn't say tail recursion elimination, though
06:01:16 <TacticalGrace> tail *call* elimination
06:01:48 <TacticalGrace> Jafet: Note how I was talking about *elimination*
06:02:45 <dons> ivanm: re. GLUT -- it adds 5 new packages to the top level name space. very bad form
06:02:45 <lambdabot> dons: You have 4 new messages. '/msg lambdabot @messages' to read them.
06:02:59 * dons doesn't know what timezone it is anymore
06:03:22 <TacticalGrace> dons: ask you computer ;)
06:03:27 <TacticalGrace> your*
06:03:28 <ivanm> dons: fair enough
06:03:30 <dons> i'm scared to look
06:03:34 <TacticalGrace> well, maybe better you phone
06:03:40 <dons> photos from zurihac. http://picasaweb.google.com/david.jc.anderson/Zurihac#
06:03:43 <ivanm> TacticalGrace: he's afraid it will tell him the "real" time back home for him
06:03:47 <dons> that's what 80 hackers in a room looks like
06:03:58 <ivanm> dons: yeah, danderson pasted that link in here before
06:04:00 <dons> oh, it is 6am. timeto wake up
06:04:02 <ivanm> dons: what about haddock?
06:04:03 <dons> goody.
06:04:10 <dons> ivanm: ?
06:04:23 <dons> danderson: great job on the photos
06:04:24 <ivanm> dons: the .cabal file has a commented out haddock-2.7.2
06:04:27 <ivanm> or something like that
06:04:31 <dons> yes, it isn't a recognized build tool
06:04:38 <dons> but it is in the platform :)
06:04:49 <dons> not 2.7.2 though, since ghc ships with something else
06:05:20 <dons> did we work out if the .dmg image for 6.12 is a 64 bit port?
06:05:26 <dons> or only the macports build is 64 bit native?
06:05:46 <ivanm> right
06:05:50 <ivanm> 6.12.1 has 2.6
06:05:52 <TacticalGrace> Axman6 seemed to think it is a 64 bit port
06:06:02 <Axman6> it is
06:06:10 <dons> the .dmg?
06:06:11 <ivanm> dons: can't forget if I've asked you this before or not: in arch, do you ship haddock separately or just use ghc's version?
06:06:17 <Axman6> dons: no
06:06:21 <Axman6> the macports one is though
06:06:22 <dons> ivanm: its separate if you want it.
06:06:25 <dons> ok.
06:06:35 <dons> so the .dmg works on 64 bit but generaaates 32 bit exes
06:06:40 <ivanm> dons: so if you don't want haddock it isn't installed by default?
06:06:49 <Axman6> compiling and running "main = print (maxBound :: Int)" prints 9223372036854775807 now
06:06:52 <dons> ivanm: it is installed by default. ghc needs it
06:06:58 <ivanm> dons: OK, do you keep it synced with GHC's version? (e.g. is 2.7.2 available yet?)
06:07:01 <Axman6> dons: yeah
06:07:03 <TacticalGrace> dons: 6.12 always worked on 64 bit, well, on Snow Leopard but in 32 bit mode
06:07:24 <dons> right. so its greg wrights macports package that is the new thing. 64 bit native
06:07:28 <TacticalGrace> Axman6: heh?  What about "file a.out"?
06:07:35 <Axman6> TacticalGrace: i'm building it using the 64 bit 6.10.4 to see if that works
06:07:46 <Axman6> file Main
06:07:46 <Axman6> Main: Mach-O 64-bit executable x86_64
06:07:48 <Axman6> :)
06:07:56 <TacticalGrace> see
06:07:57 <dons> noice.
06:08:10 <Axman6> indeed :D
06:08:11 <dons> more bits for everyone!
06:08:28 <sinelaw> salut
06:08:29 <ivanm> dons: OK, do you keep it synced with GHC's version? (e.g. is 2.7.2 available yet?)
06:08:32 <Axman6> almost time for the most CC'd bug on ghc's trac to be closed :)
06:08:32 <TacticalGrace> dons: including the GC :P
06:08:40 <dons> no. we dont' keep it synced.
06:08:48 <dons> TacticalGrace: haha. more bus traffic ftw.
06:08:53 <TacticalGrace> Axman6: well, not until patches are incoming
06:08:59 <Axman6> yeah
06:09:37 <ivanm> dons: *nod* kolmodin and I are debating what to do; because if you let users use a different version of haddock than what ghc used then the haddock docs won't necessarily link to each other
06:10:09 <Axman6> speaking of the GC, i think it's cool that SPARC defines a tagged add and sobtract command, so you can work eith tagged pointers (like GHC uses) without having to do an and instruction :)
06:10:15 <ivanm> dons: oh, and in case you want to put it somewhere regarding what's available, gentoo has a platform package available
06:10:16 <Axman6> subtract
06:10:29 <dsouza> good morning everyone
06:10:45 * ivanm should hit the sack
06:11:00 <TacticalGrace> ivanm: good plan, actually
06:11:19 <dons> ivanm: is there a better link for gentoo that the current one?
06:11:23 <dons> if so, please let me know.
06:11:38 <ivanm> dons: not really; the current link says how to use the old platform package
06:11:43 <dsouza> question about unit testing. is there a way to mock objects in tests, say using hunit? if not, is there an alternative to this?
06:11:59 <ivanm> however, the new plan we're going to use is to push the new platform through to stable ASAP
06:12:13 * Axman6 didn't know people even used unit testing with haskell any more
06:12:14 <dsouza> mock objects is not definetely really a good phrase :-)
06:12:33 <Twey> dsouza: It definitely really certainly isn't.
06:12:53 <Axman6> "You silly object you!"
06:13:01 <dsouza> yeah, sorry about that
06:13:02 <TacticalGrace> dsouza: maybe "mock data" ;)
06:13:15 <sinelaw> ugly object, hah
06:13:25 <TacticalGrace> or mock functions...
06:13:26 <ivanm> Axman6: if you have to test something involving IO, STM, etc. then you probably need to do unit testing
06:13:33 <TacticalGrace> but they are data, too!
06:13:37 <sinelaw> your mom-object is so space consuming
06:14:04 <Axman6> "you don't even accurately represent the physical system you're supposed to!"
06:14:12 <sinelaw> i'm gonna RELEASE you, bitch
06:14:27 <dsouza> I was actually thinking on monadic code, like IO, and during tests I would like to replace those by something that I could really control error scenarios, etc.
06:14:36 <Axman6> yo momma object so fat, the OS has to reboot to release her
06:15:04 <Axman6> dsouza: you're not under the impression that monadic means IO are you?
06:15:10 <TacticalGrace> dsouza: there was a paper about using a mock IO system for testing
06:15:11 <dsouza> Axman6: nope
06:15:17 <Axman6> just checking :)
06:15:25 <TacticalGrace> might have been Wouter Swierstra et al
06:15:39 <Axman6> Running hscolour for ghc-6.12.1...
06:15:41 <Axman6> wtf?
06:15:55 <dsouza> TacticalGrace: do you have a link you could share?
06:16:14 <TacticalGrace> hmm, trying to remember
06:16:14 <mreh> http://picasaweb.google.com/david.jc.anderson/Zurihac#5451091323936271890 -- programming with a broken hand, hardcore
06:16:38 <dsouza> Axman6: sure, I don't blame you after I have used the word objects in a phrase :-)
06:16:48 <Axman6> ivanm: bernie pope's signed up :)
06:16:54 <sinelaw> there's something oddly geekt about that picture, but i would still have liked to be there :)
06:16:55 <Axman6> heh :P
06:16:56 <ivanm> Axman6: \o/
06:16:58 <sinelaw> *geeky
06:17:00 * ivanm -> land of nod
06:17:16 <mreh> sinelaw, check out the rest of them
06:17:18 <Axman6> TacticalGrace: care to sign up? http://axman6.wufoo.com/forms/aushac-2010-sign-up/
06:17:20 <mreh> :)
06:17:30 <sinelaw> i am
06:17:32 <Axman6> ivanm: ben sinclare too :)
06:17:37 <ivanm> Axman6: oh, did the email go through?
06:17:43 <Axman6> i believe so
06:17:44 <Axman6> yes
06:17:49 <ivanm> good-o
06:17:49 <Axman6> it was a good email too :)
06:17:53 <sinelaw> looks like fun!
06:17:53 <ivanm> :D
06:17:58 <TacticalGrace> dsouza: http://www.cse.chalmers.se/~wouter/Publications/BeautyInTheBeast.pdf
06:18:54 <Axman6> ivanm: friday's looking fairly lonely :(
06:19:02 <dsouza> TacticalGrace: thx
06:19:05 <Axman6> oh well, it'll be alright
06:19:26 <TacticalGrace> Axman6: did you sent the rego stuff to fp-syd?
06:19:32 <Axman6> whoot, ghc 6.12.1 compiled!
06:19:39 <Axman6> TacticalGrace: not yet, i'll do that tomorrow
06:19:40 <TacticalGrace> and send it to sapling, too
06:19:48 <Axman6> good call :)
06:20:11 <Axman6> Clem doesn't want to come along
06:21:03 <Axman6> anyone know who's in charge of darcs.haskell.org?
06:21:43 <TacticalGrace> Galois
06:22:03 <Axman6> happen to know which person looks after it?
06:22:13 <TacticalGrace> Fritz Henglein?
06:22:21 <TacticalGrace> but dons will know
06:22:43 <TacticalGrace> Igloo has admin, too, I think
06:22:47 <Axman6> someone has suggested in #hackage that they organise setting up darcsweb for all projects
06:23:02 <Axman6> anyway, sleep time
06:23:05 <Axman6> goodnight all
06:23:08 <sinelaw> night
06:23:10 <TacticalGrace> 'night
06:25:56 <dons> no, Fritz is down at Corvallis.
06:26:26 <dons> darcs.haskell.org == hackage.haskell.org == abbot.galois.com, provided by Galois. let me know if you need more info.
06:26:43 <dons> its Paul Heinlein you're thinking of
06:28:30 <sinelaw> Heinlein, Henglein
06:28:32 <sinelaw> all the same.
06:30:21 <sinelaw> (just kidding)
06:49:22 <Utkarsh> hi everyone. I'm getting stack overflow error in this http://pastebin.com/nMqV3cga any clues?
06:50:56 <dons> runs fine here.
06:50:58 <dons> $ time ./A
06:50:58 <dons> 524
06:50:58 <dons> ./A  6.42s user 0.01s system 99% cpu 6.433 total
06:51:12 <dons> $ ghc -O2 --make A.hs
06:51:14 <dons> are you using ghc?
06:51:29 <Utkarsh> i'm using ghci
06:51:38 <Utkarsh> on windows
06:51:52 <dons> try compiling the code.
06:51:56 <dons> with -O2
06:52:15 <dons> the problem is 'count' though
06:52:21 <dons> see how you do: 1 + count ..
06:52:35 <dons> that's going to allocate on the stack. so you should try to write it in a tail recursive manner.
06:53:07 <dons> accumulate  the final result in a parameter
06:53:54 <Utkarsh> ghc says -02 is an unrecognised flag..
06:54:18 <Taejo> Utkarsh: O, not 0
06:54:33 <dons> count n = go n 0
06:54:34 <dons>     where
06:54:34 <dons>         go 1 !acc = 1 + acc
06:54:34 <dons>         go n  acc = go (next n) (acc + 1)
06:56:01 <dsouza> !acc strict evaluation, right? is it standard amongst all compilers or something specific to ghc?
06:56:02 <dons> oh, should be go 1 acc = acc
06:56:19 <dons> only ghc supports BangPatterns syntax.
06:56:24 <dsouza> ok
06:56:33 <dons> but that's ok. that's the standard compiler for anything serious.
06:57:00 <quicksilver> dons++ # beta HP
06:57:07 <quicksilver> dons: when is the new HP expected to be 'official' ?
06:57:20 <dons> there's a cabal bug on windows that dcoutts has fixed. but we need the new cabal release
06:57:24 <dons> and that has to go into ghc 6.12.2
06:57:27 <Utkarsh> thanks for the code dons :) will try it out.
06:57:30 <dons> and at that point we'll be official
06:57:47 <dons> but sadly cabal is hard to upgrade over a ghc, without breaking core packages.
06:57:58 <Cale> dsouza: It's syntax sugar for using seq, which is supported by all implementations though
06:58:43 <quicksilver> It would be rather nice ot have a preprocessor which unsugared all those GHC extensions which are, in fact, merely sugar, so you could use them in other compilers.
06:59:00 <quicksilver> dons: *nod*
06:59:02 <dons> nice idea.
06:59:31 <dsouza> quicksilver: indeed, good idea.
07:01:00 <dons> oh boy. 5 days of hacking. no i'm tired.
07:01:03 <dons> now.
07:01:32 <dons> vote for the HP on Y-Combinator, http://news.ycombinator.com/item?id=1210246
07:01:44 <Jafet> Isn't that somewhat ironic
07:01:47 <_dsouza> Cale: good to know, although I've never used a compiler other than ghc.
07:02:23 <eldragon> Robin Milner R.I.P. 1934-01-13 2010-03-20
07:02:35 <eldragon> In memoriam of LCF, type-inference, ML, type-safe exception handling, calculus of communicating systems, pi-calculus.
07:02:45 <dons> oh
07:03:35 <kalven> The windows package says 2009.2.0.2, is it just lagging?
07:03:58 <dons> kalven: yep
07:05:25 <kalven> does the installer handle an upgrade in some graceful way or should I uninstall the old package first?
07:05:37 <Jafet> eldragon, [citation needed]
07:05:58 <dons> i'd uninstall, kalven.
07:06:10 <kalven> dons: roger
07:06:20 <danderson> From http://hackage.haskell.org/trac/ghc/ticket/3914#comment:2 , how do I go look at the relevant diff?
07:06:35 <danderson> doesn't look like there are any cross-references to the actual patch
07:06:52 <sinelaw> what are the problems with SDL on mac?
07:06:58 <sinelaw> specifically?
07:07:34 <FliPPeh_> Oh god, my window manager just froze.
07:07:35 <dons> danderson: cross references?
07:07:41 <dons> oh, you want to find the patch?
07:07:44 <danderson> yes
07:07:46 <sinelaw> does any mac user here know?
07:07:47 <quicksilver> dons: is it not a bit confusing that the ycombinator link titled HP 2010.1 links to a page which only mentions 2009.2.x?
07:07:52 <eldragon> Jafet, http://en.wikipedia.org/wiki/Robin_Milner
07:08:01 <Jafet> Consider reading it.
07:08:19 <danderson> Trac usually magically cross-references from the issue tracker to the source control viewer when talking about changes
07:08:30 <danderson> in this case, I just don't know where to find the relevant Darcs repo
07:08:40 * hackagebot alex 2.3.3 - Alex is a tool for generating lexical analysers in Haskell  http://hackage.haskell.org/package/alex-2.3.3 (SimonMarlow)
07:08:42 <dons> danderson: pull from http://darcs.haskell.org/packages/unix
07:08:53 <dons> danderson: trac isn't watching the darcs repo
07:09:05 <danderson> dons: cheers
07:09:12 <dons> i don't think trac even knows how to watch darcs
07:09:41 <danderson> unlikely I'd say, at a first glance
07:10:57 <sinelaw> eldragon that page still says "he is still at the laboratory" and the such.
07:11:24 <orbitz> Jafet: i think it's a prank
07:11:37 <orbitz> Jafet: eldragon keeps on talking in circles with me in #ocaml when i ask him for primary source
07:11:41 <Jafet> There's a post on LtU on it, but nothing else
07:12:17 <dons> http://lambda-the-ultimate.org/node/3863
07:12:23 <Jafet> It looks genuine though
07:12:37 <dons> yeah
07:12:43 <edwardk> whoa, milner?
07:12:52 <orbitz> ah thanks gons
07:12:55 <orbitz> dons*
07:13:03 <sinelaw> i fixed some of the "is" in the wiki to "was"
07:13:05 <sinelaw> :( :( :(
07:13:12 <dons> Ohad Kammar is at Edinburgh
07:13:17 <dons> who passed on that msg.
07:13:24 <dons> so that seems legit.
07:13:46 <orbitz> dons thanks, nice to see from a reputable source
07:20:24 <aavogt> preflex: seen ketil
07:20:24 <preflex>  ketil was last seen on #haskell 3 hours, 44 minutes and 14 seconds ago, saying: Thanks.
07:22:27 <sinelaw> so what's the entropy of "what's the entropy of "....
07:22:55 <Jafet> > fix show
07:22:57 <lambdabot>   "\"\\\"\\\\\\\"\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\...
07:23:01 <aavogt> @tell ketil bio is broken without  --constraint="tagsoup < 0.8" due to conflicts with quickcheck. Could you update that dependency (or depend on QC-2)?
07:23:01 <lambdabot> Consider it noted.
07:29:57 <choffstein> Hey all.  I did some profiling of my code and found that it spends 36% of its time in this function: http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24245#a24245.  Any ideas on how to speed that one up?
07:34:24 <Botje> choffstein: i don't see any immediate improvements.
07:34:35 <choffstein> Yeah, I couldn't either.
07:34:43 <Botje> you could try adding a seq in there to make the calculation strict
07:34:44 <choffstein> unless @@> is implemented very inefficiently
07:34:58 <Botje> but i think ghc would already make it a strict function anyway
07:35:05 <choffstein> Botje: Ah, good idea.
07:36:11 <mreh> general question: isn't "just try it" wrong-headed advice, it always sits uneasily with me
07:36:26 <mreh> it implies that no-one know how the thing works
07:37:44 <Entroacceptor> there are things where that fits
07:38:08 <mreh> not with something as specific as computer science
07:38:34 <mreh> that's where I'm coming from, it's predominantly the attitude with the software engineering faculty in my department
07:39:27 <quicksilver> sometimes "just try it" means "I can't be bothered to explain this to you but it does work, why don't you try it out?"
07:39:38 <mreh> heh
07:39:47 <Utkarsh> how should I go about converting something like this into haskell ? http://pastebin.com/63f9GeH9
07:39:48 <mreh> probably quite true
07:40:14 <mreh> Utkarsh, learn how to do loops in haskell
07:40:43 <Jafet> @type loop
07:40:44 <lambdabot> forall (a :: * -> * -> *) b d c. (ArrowLoop a) => a (b, d) (c, d) -> a b c
07:40:54 <mreh> there are no loops in haskell, it's very zen
07:41:32 <aavogt> sure there are loops
07:41:37 <dsouza> Utkarsh: maybe something like this: maximum (map f [100..200]) ?
07:41:42 <eldragon> http://lists.seas.upenn.edu/pipermail/types-list/2010/001478.html   "We are sorry to announce that Robin Milner died on Saturday 20th March, in Cambridge, just three days after the funeral of his wife, Lucy." by Gordon Plotkin.
07:41:54 <aavogt> @type forever
07:41:55 <lambdabot> forall (m :: * -> *) a b. (Monad m) => m a -> m b
07:42:10 <Utkarsh> dsouza: i was running it on a large array, cannot store each result in memory
07:42:11 <aavogt> then use Cont to break the infinite loop
07:42:46 <dsouza> oh, ok.
07:43:56 <mreh> didn't that guy make ML?
07:44:19 * dsouza thinkgs questions are never easy neither and straightforward on #haskell :-)
07:44:20 <Jafet> Lovely eldragon, wonderful eldragon
07:44:22 <quicksilver> milner++ # :(
07:44:43 <edwardk> @karma milner
07:44:43 <lambdabot> milner has a karma of 1
07:44:57 <edwardk> wow, not much to show for a life's work
07:44:58 <mreh> he'll come back as an insect
07:45:08 <silver_> that's cold
07:45:18 <mreh> it was a joke
07:45:30 <mreh> take it easy son
07:45:31 <edwardk> no offense intended
07:45:58 <edwardk> fortunately quicksilver threw him some karma, or well, it would have been unpleasant
07:46:12 * Jafet recounts some zen koan about unsafeCoerce
07:47:28 <edwardk> i have a bad habit of using unsafeCoerce when I want to get rid of a newtype wrapper 8 layers deep in a type, but can't be bothered to let the system map over and destroy all my wonderful sharing
07:49:13 <edwardk> hrmm. i wonder, if you could do a terrible version of gmapT that used stable names to ensure that it only mapped each element once, and restored sharing
07:49:31 <mreh> edwardk: where have you had a type 8 layers deep?
07:49:38 <mreh> that's quite deep
07:50:13 <mreh> man, I'm going through the "I have to get this done, lets do it badly" stage
07:50:22 <mreh> I know what you mean
07:50:27 <edwardk> mreh: ReaderT m (WriterT m (StateT s (Cont r (MyNewType a)))) -> ReaderT m (WriterT m (StateT s (Cont r a)))
07:50:42 <eldragon> my hypothesis is that Robin Milner commited passional suicide, more addicted to computation's life than his life w/ his wife.
07:52:04 <mreh> is there any way I can ignore this guy forever?
07:52:05 * hackagebot bibtex 0.0.5 - Parse, format and processing BibTeX files  http://hackage.haskell.org/package/bibtex-0.0.5 (HenningThielemann)
07:52:52 <mreh> edwardk: what are you doing with this?
07:54:00 <jmcarthur> oh robin milner died :(
07:55:30 <edwardk> mreh: i used it in a few places. the most notable was probably in a set of parser combinators where i used it to suppress information about a type argument to an applicative that i could prove had no effect on the result, to improve sharing. or are you referring to the gmapT thing?
07:55:52 <mreh> edwardk: I'm lookg at the type, it frightens me
07:56:07 <edwardk> mreh: it was just a mountain of monad transformers ;)
07:56:21 * mreh has never used a monad transformer
07:56:24 <edwardk> mreh: ah
07:56:25 <mreh> D:
07:56:56 <mreh> I have lots of stochastic Arrows, I'm looking for a better way of doing that
07:57:02 <edwardk> @unmtl ReaderT m (WriterT m (StateT s (Cont r a)))
07:57:02 <lambdabot> err: `ReaderT m (WriterT m (StateT s ((a -> r) -> r)))' is not applied to enough arguments.
07:57:07 <jmcarthur> milner++
07:57:18 <eldragon> jmcarthur, too late.
07:57:23 <mreh> we're into vertibrates now
07:57:44 <edwardk> @unmtl ReaderT m (WriterT m (StateT s (Cont r) a)))
07:57:44 <lambdabot> err: Parse error
07:57:52 <edwardk> @unmtl ReaderT m (WriterT m (StateT s (Cont r a))
07:57:52 <lambdabot> err: Parse error
07:57:55 <edwardk> gah
07:57:59 <jmcarthur> eldragon: never too late
07:58:03 <mreh> would monad transformers help me with my Arrows?
07:58:06 <edwardk> @unmtl ReaderT m (WriterT m (StateT s (Cont r) a))
07:58:06 <lambdabot> err: `ReaderT m (WriterT m (s -> (a -> s -> r) -> r))' is not applied to enough arguments.
07:58:13 <edwardk> heh two down
07:58:30 <mreh> Arrows aren't monads though... :\
07:58:43 <zygoloid> @unmtl ReaderT r (WriterT w (StateT s (Cont r))) a
07:58:43 <lambdabot> r -> s -> (a -> w -> s -> r) -> r
07:58:44 <cheater2> hi
07:58:44 <cheater2> how is monad formed
07:58:50 <Alpounet> @hoogle Kleisli
07:58:50 <lambdabot> Control.Arrow newtype Kleisli m a b
07:58:50 <lambdabot> Control.Arrow Kleisli :: (a -> m b) -> Kleisli m a b
07:58:50 <lambdabot> Control.Arrow runKleisli :: Kleisli m a b -> a -> m b
07:58:59 <zygoloid> cheater2: ooh ooh i know this one
07:59:07 <cheater2> i was trying to find a minimal case for a trivial monad but can't find anything
07:59:09 <mreh> monads have an arrow, that much I understand
07:59:30 <zygoloid> cheater2: http://metafoo.co.uk/howisioformed.html
07:59:30 <jmcarthur> mreh: if your arrow is built out of kleisli then you could just apply a transformer to the wrapped monad
07:59:38 <cheater2> zygoloid: how is monad formed
07:59:42 <cheater2> ok looking
07:59:54 <cheater2> thanks
07:59:56 <mreh> jmcarthur: this is Yampa, I don't know much about the inner workings of it, and I don't have the time D:
08:00:02 <jmcarthur> zygoloid: that is an awesome link
08:00:17 <jmcarthur> mreh: ah. i doubt you can apply monad transformers to it directly
08:00:25 <jmcarthur> mreh: maybe you could invent an arrow transformer?
08:00:33 <mreh> eep
08:01:02 <jmcarthur> mreh: doesn't have to be as tough as it sounds
08:01:05 <mreh> my category theory is rather deficient, got any good books?
08:01:20 <jmcarthur> mreh: if you are wrapping a specific arrow then you don't even have to make a transformer. you could just build a new arrow directly
08:01:29 <jmcarthur> mreh: you shouldn't need category theory
08:01:35 <jmcarthur> mreh: just follow the arrow laws
08:01:43 <zygoloid> cheater2: http://metafoo.co.uk/practical-monads.txt <-- for a less silly answer
08:01:49 <jmcarthur> (or some subset of them, considering that nobody can agree on them)
08:02:15 <mreh> jmcarthur: okay
08:02:30 <jmcarthur> mreh: hey look at that! http://hackage.haskell.org/packages/archive/arrows/0.4.1.2/doc/html/Control-Arrow-Transformer.html
08:03:49 <mreh> hmm, I can't think how I could make this practical, i.e. work in Yampa, some kind of runRandArrowT that spits out a Yampa SignalFunction for you
08:04:11 <mreh> or whatever was wrapped up in the transformer
08:04:44 <jmcarthur> that sounds about right to me
08:05:28 <mreh> this is so much more interesting than my coursework
08:05:51 <kamatsu> I think lots of haskellers use arch linux
08:05:54 <jmcarthur> mreh: newtype RandArrow a b c = RandArrow (StateArrow StdGen a b c)  or something like that maybe
08:06:01 <jmcarthur> kamatsu: quite a few do, yes
08:06:05 <kamatsu> oh crap, replying to ancient history
08:06:10 <kamatsu> *must not do that*
08:06:34 <jmcarthur> heh
08:06:58 <ManateeLazyCat> Hi all. :)
08:06:59 <mreh> jmcarthur: If that's how MonadRandom works, as I understand it, this should be a straightforward enough
08:07:16 <mreh> that is: analogous to how MonadRandom works
08:07:41 * ManateeLazyCat My neck is so hurt.
08:08:04 <mreh> I need an electric shock placed on my trackpad
08:08:05 <jmcarthur> mreh: i'm pretty sure monadrandom is just a state monad around stdgen
08:08:18 <mreh> jmcarthur, there's another interface called MonadSplit too
08:08:36 <jmcarthur> yes...?
08:08:45 * ManateeLazyCat Have update 30% code of gtk2hs. 
08:08:55 <ManateeLazyCat> Still need update rest 70%
08:08:57 <mreh> just checking what it does
08:09:11 * ManateeLazyCat Damn Gtk+ API is so *big*.
08:09:32 <mreh> RandomGen g => MonadSplit g (Rand g)
08:10:16 <jmcarthur> mreh: newtype (RandomGen g) => RandT g m a = RandT (StateT g m a)
08:10:24 <mreh> can't I just make Rand an Arrow with the Kleisli arrow?
08:10:26 <jmcarthur> mreh: it's just State
08:10:42 <jmcarthur> mreh: sure you can, but you don't just need an arrow, you need an arrow transformer
08:10:53 <mreh> right.
08:11:10 * mreh adds this to the list of things to do
08:11:23 <mreh> ...number 2097
08:12:14 <mreh> the biggest complaint I hear about Yampa is that the semantics are pretty impenetrable, are there any others?
08:12:19 <ManateeLazyCat> http://hackage.haskell.org/platform/ cool
08:12:23 <mreh> I like it so far
08:12:39 <jmcarthur> mreh: what do you mean "impenetrable"?
08:12:54 <mreh> jmcarthur, in the usual sense, hard to understand
08:12:57 <gwern> Milner of HM is dead
08:13:01 <jmcarthur> mreh: i wouldn't say that
08:13:15 <gwern> http://lists.seas.upenn.edu/pipermail/types-list/2010/001478.html
08:13:27 <jmcarthur> mreh: i would say that the abstraction is leaky though. you have to be aware of the sampling rate and stuff to use it correctly
08:13:45 <gwern> we infer that he has gone to the great hackerspace in the sky
08:14:17 <mreh> jmcarthur, leaky because it only approximates?
08:14:39 <jmcarthur> mreh: because implementation details are revealed in the interface
08:14:54 <Alpounet> milner++
08:15:27 <cheater2> zygoloid: omg, that link is great
08:15:35 <mreh> jmcarthur, yes, it would be nice if the sampling rate was not exposed, if the machine is running slower than your sampling rate it will skip a "frame" in all likelihood
08:15:50 <ManateeLazyCat> gwern: http://www.google.cn/images?sa=3&q=Robin+Milner&btnG=%E6%90%9C%E7%B4%A2%E5%9B%BE%E7%89%87  Is he?
08:15:55 <cheater2> i understand everything. i didn't know that they are taking the three side afects back to IO monad too hakcer to rest my pary.
08:15:56 <mreh> although I dont know of another way to do it
08:16:08 <kamatsu> I've been using a fair bit of Agda lately, surprisingly I didn't miss the HM inference as much as i thought I would
08:16:45 <gwern> ManateeLazyCat: is he what?
08:16:50 <ManateeLazyCat> gwern: Milner is the author of ML ? Is that Milner
08:16:57 <ManateeLazyCat> ?
08:16:59 <gwern> ManateeLazyCat: why I thought it appropriate here
08:17:09 <gwern> he's the robin milner in hindley-milner
08:17:10 <mreh> apparently he never studied for a doctorate
08:17:25 <mreh> what a guy
08:17:44 <mreh> I'm sure he earned one, was he an honorary?
08:18:40 <eldragon> mreh, he received many honoraries, http://www.cl.cam.ac.uk/~rm135/cv.pdf
08:19:42 <mreh> he had an interesting life, ah yes, we used to do military service back then
08:19:47 <dino-> Huh, little bit surprised to see OpenGL in the Haskell Platform.
08:20:10 <mreh> unless you were an east end gangster and dodged it
08:20:17 <mreh> or a spiv
08:21:22 <quicksilver> dino-: why? It used to be distributed with every build of GHC.
08:21:39 <quicksilver> I protested loudly when it was removed from GHC in order to try to get it in the platform.
08:22:45 <jmcarthur> i personally think opengl does belong in the platform
08:22:51 <dankna> I absolutely think it belongs there
08:22:58 <dino-> quicksilver: I didn't know that it used to be in GHC. Seems like so low-priority compared to, oh, mtl, regex-*, time, zlib, etc..
08:22:58 <dankna> the underlying library is very solid
08:23:03 <dankna> and implemented everywhere that matters :)
08:28:44 <LordStrongpaw> Hello
08:28:58 <Cale> hello
08:29:10 <LordStrongpaw> how're you?
08:29:57 <quicksilver> dino-: only low priority if you don't need it.
08:30:06 <quicksilver> dino-: I think a portable graphics library is a great thing to have :)
08:31:25 <ManateeLazyCat> quicksilver: What do you mean "portable graphic library" ? Create new one?
08:31:43 <quicksilver> ManateeLazyCat: I mean OpenGL.
08:32:10 <ManateeLazyCat> quicksilver: Or WebGL, that cross-platform. Joking. :)
08:32:38 <ManateeLazyCat> quicksilver: I think WebKit have support WebGL now.
08:32:53 <ManateeLazyCat> quicksilver: And gtk2hs have support WebKit now. :)
08:39:16 <mreh> should I announce haskelloids on "haskell-art" or just haskell wide?
08:39:38 <mreh> it's by no means finished, but it's a complete game now, about to upload it
08:40:58 <tuhu> hi, I'm trying to use uulib, but it seem quite difficult, I mean, I want to run a simple  parser as  (parser (pSym 'a') "a") but it seems that is not that easy, has someone used before uulib ? I can't find a good tutorial.
08:45:30 <sm> mreh: haskell-cafe, sure
08:45:41 <sm> where's it at ? I'll check it for you :)
08:50:43 <mm_freak_> i'm starting to see the value in using applicative style for parsers
08:50:46 <mreh> sm: nowhere public yet
08:51:04 <mreh> sm: I suppose I need a public repo before I commit it to stone in hackage
08:51:09 <mm_freak_> User <$> nickname <* char '!' <*> username <* char '@' <*> hostname
08:51:18 <mm_freak_> wonderful
08:51:35 <ksf> leSum xs = P.foldl (.|.) 0 . map (\(x,y) -> ((fromIntegral x) `shiftL` y)) $ zip xs [0,8..]
08:51:49 * zygoloid is not a fan of the names of <* and *>
08:51:58 <ksf> is it naive to think that that's going to be efficient code if it's inlined at a place where the length is known due to replicateM?
08:52:02 <mm_freak_> zygoloid: i'd prefer << over <*
08:52:18 <mm_freak_> :t (<<)
08:52:19 <lambdabot> Not in scope: `<<'
08:53:47 <aavogt> @hoogle (<<)
08:53:48 <lambdabot> Text.Html (<<) :: HTML a => (Html -> b) -> a -> b
08:53:48 <lambdabot> Text.XHtml.Frameset (<<) :: HTML a => (Html -> b) -> a -> b
08:53:48 <lambdabot> Text.XHtml.Strict (<<) :: HTML a => (Html -> b) -> a -> b
08:54:10 <aavogt> it's mostly taken by that one
08:54:30 <aavogt> but really, >> and << should be for Applicative
08:54:58 * ManateeLazyCat Continue update gtk2hs, any bug report are welcome. Bye, night. :)
08:55:13 <ksf> I mostly use >> just because it has a nicer precedence than *>
08:55:19 <ksf> << reads into the wrong direction.
08:55:27 <zygoloid> mm_freak_, aavogt: I'd expect (<<) = flip (>>). that wouldn't be the case if it were (<*)
08:55:34 <zygoloid> (the side-effects would be backwards)
08:55:48 <ksf> ...I like my parsers to be written in the same order as they will parse things.
08:55:49 <mm_freak_> zygoloid: why would you need a flip (>>)?
08:56:41 <zygoloid> main = putStrLn "done" << putStrLn . doMyStuff =<< getContents
08:56:59 <zygoloid> ^^ that seems much less weird than using >> for the "done"
08:57:13 <ksf> I think it's a good that monads read from left to right, by default
08:57:30 <ksf> ...less chance to confuse them with pure code.
08:57:37 <zygoloid> they /are/ pure code though
08:57:48 <zygoloid> mixing . with >>= is weird. mixing . with =<< is natural
08:57:55 * ksf uses "pure" in the colloquial sense of "non-monadic"
08:58:23 <ksf> I like that I have to switch directions.
08:58:30 <Botje> mix >>> with >>= !
08:58:31 <zygoloid> "getContents >>= putStrLn . doMyStuff" has my eye jumping from side to side to figure out what's going on
08:58:39 <ksf> bind just isn't the same beast as composition.
08:59:00 <ksf> I read >>= as "shove into"
08:59:03 <jmcarthur> i like using the right to left monad combinators *except* for with non-trivial IO
08:59:09 <mm_freak_> zygoloid: i agree with ksf…  you should read from left to right
08:59:10 <ksf> whereas . really is "compose"
08:59:21 <zygoloid> mm_freak_: why? pure code reads from right to left...
08:59:24 <mm_freak_> i don't think there is anything confusing about using (>>) in your code
08:59:26 <zygoloid> (well, in a sense)
08:59:27 <jmcarthur> ksf: =<< is like $
08:59:32 <ksf> zygoloid, no, it doesn't.
08:59:36 <mm_freak_> no, it doesn't
08:59:39 <ksf> pure code reads from left to right.
08:59:45 <jmcarthur> ksf: and <=< is like .  :)
09:00:26 <ksf> otherwise, you never know what's an argument and what's an applcation
09:00:35 <zygoloid> mm_freak_: in the same sense that pure code reads left-to-right, monadic code with a lazy monad reads right-to-left if you use >>=.
09:00:39 <mm_freak_> only chaining reads from right to left, but that's no different in monadic code
09:00:42 <mm_freak_> x <- blah
09:00:43 <zygoloid> mm_freak_: so it's still backwards
09:01:05 <mm_freak_> huh?  i still read it from left to right ;)
09:01:30 <ksf> in the end, it's all just zenned into a bijective causality.
09:01:30 <mm_freak_> i'd prefer to know what is actually manipulated, before knowing the manipulation operation ;)
09:01:35 <ksf> so stop bitching about it.
09:01:42 <mm_freak_> it's really a matter of how you read code
09:02:00 <ksf> you're all thinking way too operational.
09:02:05 <mm_freak_> but if you use (<<), then it stops being a matter of that, because then you really force your readers to read from right to left
09:02:55 <ksf> if in doubt, use >>= and a lot of where clauses.
09:03:15 <mm_freak_> anyway, i think we agree that <* is a bit unfortunate
09:03:17 <aavogt> zygoloid: well while you're at it,  <* isn't flip (*>)
09:03:30 <mm_freak_> aavogt: he knows that, i guess
09:03:35 <ksf> I don't think I ever wrote a module with more than say 50 lines which didn't have a where f = ... clause.
09:03:40 <mm_freak_> but he'd prefer (<<) to be flip (>>)
09:03:43 <aavogt> well we have some inconsistency here then
09:03:48 <zygoloid> mm_freak_: i disagree. (<<) acts left-to-right if your monad is lazy. (.) and ($) act left-to-right if your function is lazy.
09:03:59 <ksf> <* and *> are meant to point at the thing that is returned.
09:04:04 <zygoloid> (re forcing readers to read in a certain direction)
09:04:07 <ksf> they don't influence execution order, at all.
09:04:20 <ksf> ...and that's good.
09:04:29 <ksf> because you want applicative code to read like bnf
09:04:39 <mm_freak_> zygoloid: what is a "lazy monad"?
09:04:41 <zygoloid> ksf: i agree that <* and *> are the right operators, but i think they have unfortunate names
09:04:44 <ksf> if you need to do something else, return a function.
09:05:01 <zygoloid> mm_freak_: a lazy monad is one where >>= isn't left-strict iirc
09:05:09 <ksf> (flip ($)) <$> ...
09:05:19 <aavogt> @type flip
09:05:20 <lambdabot> forall (f :: * -> *) a b. (Functor f) => f (a -> b) -> a -> f b
09:05:30 <ksf> yay caleskell
09:05:35 <mm_freak_> well, i could live with a predefined symbolic operator for flip (>>)
09:05:36 <aavogt> @type ((flip ($)) <$>)
09:05:37 <lambdabot> forall a b (f :: * -> *). (Functor f) => f a -> f ((a -> b) -> b)
09:05:46 <mm_freak_> but IMO (>>) should belong to Applicative, not Monad
09:05:57 <mm_freak_> and its flip shouldn't be named (<<)
09:06:06 <ksf> :t (($) <$>)
09:06:07 <lambdabot> forall a b (f :: * -> *). (Functor f) => f (a -> b) -> f (a -> b)
09:06:18 <zygoloid> > let foo r a = 0 in (foo =<< undefined) 42
09:06:20 <lambdabot>   0
09:06:54 <aavogt> so we restrict ourselves to half the possible operators by having right-to-left and left-to-right versions
09:06:59 * hackagebot DPM 0.2.1 - Darcs Patch Manager  http://hackage.haskell.org/package/DPM-0.2.1 (StefanWehr)
09:07:02 <zygoloid> ^^ "(->) r" is a lazy monad. and to make sense of it you want to consider the lhs of =<< first. just like function application
09:08:34 <mm_freak_> sure, that's fine, but i think reading code and evaluating code are different things
09:08:47 <zygoloid> that's a fair point.
09:08:56 <mm_freak_> how you read code is really a matter of preference
09:09:23 <zygoloid> i think we're talking too much in generality. i wouldn't like (<<) = (<*) because it violates the symmetry of (>>) with (>>=)
09:09:27 <mm_freak_> i read the 'general strategy' from top to bottom, left to right
09:09:38 <mm_freak_> and certain operations ('tactics') from right to left
09:09:46 <mm_freak_> z . y . x $ n
09:09:56 <ih> Hi, I'm new to haskell and irc.  I'm trying to define a data type where one of the components is a function, but am having some trouble
09:10:17 <zygoloid> i think that monadic and applicative styles are different enough that sharing/punning operator names would be unhelpful
09:10:19 <ksf> data Foo a b = Foo (a -> b)
09:10:50 <mm_freak_> zygoloid: ok, i get your point
09:11:10 <ih> thanks, I tried something similar, but I get an error related Show not being defined(?)
09:11:15 <mm_freak_> but then IMO it would be better to rename (>>) to (*>) and have (<*) be flip (*>)
09:11:24 <ksf> well, you can't show functions
09:11:36 <mm_freak_> ih: are you trying to use 'deriving Show' on your type?
09:11:42 <ih> yeah
09:11:48 <ksf> it's possible in theory, but the haskell standard never bothered to do it
09:11:49 <aavogt> > (+1)
09:11:50 <lambdabot>   {-3->-2;-2->-1;-1->0;0->1;1->2;2->3;3->4}
09:11:51 <mm_freak_> ih: obviously you can't Show functions =)
09:12:12 <aavogt> > \x y -> not x && y
09:12:12 <lambdabot>   {True->{True->False;False->False};False->{True->True;False->False}}
09:12:15 <ksf> ...you can partially evaluate them and then show the rest of the source.
09:12:19 <ih> so there's no easy way to write show so that it displays the name fo the function?
09:12:20 <mm_freak_> > \x -> x
09:12:21 <lambdabot>   {()->()}
09:12:32 <ksf> ih, most functions don't even have names.
09:12:42 <ih> oh right
09:12:44 <ih> ok, thanks
09:13:02 <mm_freak_> ih: note that the way you write your code in haskell is very different from the code it gets compiled to
09:13:17 <zygoloid> in practice (*>) seems pretty rare (most applicative expressions seem to start "f <$> ...") so i think we could ditch *> and give <* a better name...
09:13:30 <ksf> I use *> all the time
09:13:35 <mm_freak_> ih: names and even whole functions may get compiled away entirely or interleaved in a way that makes them impossible to tell, which code belongs to which function in the source
09:13:41 <zygoloid> ksf: can you give examples?
09:13:57 <ksf> tok '(' *> something <* tok ')'
09:14:16 <mm_freak_> zygoloid: i use *> a lot
09:14:17 <ksf> or rather foo <$> tok '(' *> something <* tok ')'
09:14:22 <meanburrito920_> what was that that lambdabot was doing earlier?
09:14:31 <mm_freak_> it's not pretty, but that way i don't require my code to be monadic, but only applicative
09:14:33 <meanburrito920_> where it did some evaluations of a function
09:15:06 <mm_freak_> > let f = f in f
09:15:10 <lambdabot>   mueval-core: Time limit exceeded
09:15:30 <mm_freak_> > let (f :: a -> a) = f in f
09:15:31 <lambdabot>   Not in scope: type variable `a'Not in scope: type variable `a'
09:15:38 <mm_freak_> > let f = f :: a -> a in f
09:15:39 <lambdabot>   Inferred type is less polymorphic than expected
09:15:39 <lambdabot>    Quantified type variable...
09:15:44 <mm_freak_> ?!
09:15:44 <lambdabot> Maybe you meant: . ? @ v
09:15:50 <meanburrito920_> :)
09:15:59 <mm_freak_> > let f = f in (f :: a -> a)
09:16:01 <meanburrito920_> < \x -> x
09:16:03 <lambdabot>   mueval-core: Time limit exceeded
09:16:05 <meanburrito920_> oops
09:16:09 <meanburrito920_> > \x -> x
09:16:09 <lambdabot>   {()->()}
09:16:16 <mm_freak_> meanburrito920_: that's not the same
09:16:32 <meanburrito920_> i know, i'm just wondering what lambdabot is doing there
09:16:38 <mm_freak_> ah, ok =)
09:17:15 <meanburrito920_> > \x -> not x
09:17:16 <lambdabot>   {True->False;False->True}
09:17:17 <mm_freak_> well, how about…
09:17:20 <mm_freak_> > id
09:17:21 <lambdabot>   {()->()}
09:17:24 <zygoloid> ksf: foo <$> tok '(' *> something <* tok ')'  ==  tok '(' *> something <* tok ')'   -- isn't it?
09:17:39 <meanburrito920_> what is lambdabot using to do the partial evaluation?
09:17:47 <meanburrito920_> just plugging in values?
09:17:50 <zygoloid> (because (fmap f x *> y) == x *> y)
09:17:50 <mm_freak_> probably
09:17:57 <mm_freak_> in the style of QuickCheck
09:18:01 <meanburrito920_> what package provides that
09:18:07 <mm_freak_> QuickCheck =)
09:18:16 <meanburrito920_> no, not quickcheck :)
09:18:19 <mm_freak_> > fmap (+)
09:18:20 <lambdabot>   No instances for (Test.SmallCheck.Serial (f a),
09:18:20 <lambdabot>                    GHC.Show...
09:18:24 <mm_freak_> yes
09:18:28 <meanburrito920_> i mean, what package provides what lambdabot is doing
09:18:30 <mm_freak_> QuickCheck ;)
09:18:32 <zygoloid> ksf: so i think you mean the awkward construct: foo <$> (tok '(' *> something) <* tok ')'
09:18:36 <meanburrito920_> really?
09:18:41 <mm_freak_> SmallCheck
09:18:41 <meanburrito920_> cool
09:18:48 <mm_freak_> not QuickCheck…  lambdabot is using SmallCheck
09:19:23 <mm_freak_> > map (+)
09:19:24 <lambdabot>   []->
09:19:24 <lambdabot>    []
09:19:24 <lambdabot>  [-2]->
09:19:24 <lambdabot>    [{-3->-5;-2->-4;-1->-3;0->-2;1->-1;2->0;3->1}]
09:19:24 <lambdabot>  [-2,-...
09:19:51 <Taejo> > (+)
09:19:52 <lambdabot>   -3->
09:19:52 <lambdabot>    {-3->-6;-2->-5;-1->-4;0->-3;1->-2;2->-1;3->0}
09:19:52 <lambdabot>  -2->
09:19:52 <lambdabot>    {-3->-5;-2->...
09:19:56 <aavogt> you can have a sort of 'do' notation with applicative (where your pattern binds are only in scope for the last line)
09:20:57 <aavogt> which looks like      do tok '('; x <- something; tok ')'; foo x
09:20:58 <mm_freak_> aavogt: well, the last line must be a non-monadic expression then
09:21:08 <aavogt> of course
09:21:09 <mm_freak_> aavogt: is there an extension for this?
09:21:14 <mm_freak_> i'd find that quite useful
09:21:32 <aavogt> I've written a quasi-quoter
09:21:55 <zygoloid> http://www.mail-archive.com/haskell-cafe@haskell.org/msg65651.html
09:23:11 <aavogt> maybe mmorrow will come back and add the patch to haskell-src-meta
09:24:39 <aavogt> mm_freak_: http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24248#a24248
09:26:07 <mm_freak_> aavogt: hmm…  i hoped that it would look more like do
09:26:18 <mm_freak_> less like list comprehension =)
09:27:07 <edwardk> aavogt: i have a scheme macro for the same thing somewhere
09:29:53 <mm_freak_> what i never liked about list comprehension is the explicit brackets
09:30:09 <mm_freak_> i prefer layout over brackets
09:30:34 <mm_freak_> > do x <- [1..3]; y <- [10,20,30]; [x+y]
09:30:35 <lambdabot>   [11,21,31,12,22,32,13,23,33]
09:30:37 <edwardk> mm_freak: yeah, there was a heredoc syntax proposal that incorporated quasiquotation at one point
09:30:46 <edwardk> mm_freak which used layout as a delimiter
09:31:00 <edwardk> but i think it was quietly ignored as too ugly
09:31:15 <mm_freak_> edwardk: well, i'm fine with do-notation instead of list comprehension
09:31:35 <mm_freak_> the only thing that sucks is the unfortunate name for 'guard'
09:31:58 <Botje> let ensure = guard; fixed!
09:32:05 <edwardk> ah, i was mostly bemoaning the death of my lovely fishbone haskell syntax caused by having to wrap my DSLs in [| |]'s
09:32:39 <edwardk> Botje: ooh, i like that one
09:32:44 <mm_freak_> hehe
09:32:58 <jmcarthur> yeah i like ensure
09:33:00 <mm_freak_> Botje: yeah, that sounds much better, but i'd rather not rename things from the base library =)
09:33:25 <jmcarthur> :t guard
09:33:26 <lambdabot> forall (m :: * -> *). (MonadPlus m) => Bool -> m ()
09:33:40 <mm_freak_> but i'd call it 'require' rather than 'ensure'
09:33:52 <edwardk> mm_freak: hah, between him saying that and me writing this line I've renamed my 'guard' in the kata standard library. now, in ten years or so when i get around to releasing it, we'll be all set ;)
09:34:20 <jmcarthur> mm_freak_: require sounds nice too
09:34:35 <edwardk> damnit, that is a whole nother search and replace
09:34:38 <jmcarthur> ensure kind of has the same connotations as assert, i guess
09:35:01 <mm_freak_> edwardk: great =P
09:35:26 <mm_freak_> jmcarthur: yeah, or it may sound like: make sure it is that way, even if it wasn't before
09:35:32 <jmcarthur> yeah
09:35:55 <mm_freak_> > let ensure = guard in do x <- [2]; ensure (x == 3); [x]
09:35:56 <lambdabot>   []
09:36:05 <mm_freak_> sounds like it _should_ return [3]
09:36:38 <mreh> the original asteroids was 8KB, my incomplete version beats that by several orders of magnitude
09:36:46 <mm_freak_> in fact, an 'if' clause without then and else would do it
09:36:51 <mreh> but is significantly lighter
09:37:26 <mm_freak_> > let if' = guard in do x <- [2]; if' (x == 3); [x]
09:37:27 <lambdabot>   []
09:37:38 <mm_freak_> if it were sugar, you could leave the parentheses away, too
09:37:50 <mm_freak_> (and we wouldn't have to rename 'guard')
09:37:52 <jmcarthur> i don't like that one
09:38:07 <aavogt> that isn't confusing, but still a little weird
09:38:31 <fax> Why did the mathematician go to the beach?
09:38:58 <fax> to get a tan
09:39:07 <jmcarthur> *rimshot*
09:39:11 <SyntaxNinja> the haskell community is slowing down my interwebs
09:39:21 <mm_freak_> hmm
09:39:39 <mm_freak_> either it wasn't funny or i didn't get it
09:40:53 <benmachine> fax: to be only like a boy playing on the sea-shore, and diverting themselves in now and then finding a smoother pebble or a prettier shell than ordinary, whilst the great ocean of truth lay all undiscovered before them.
09:41:22 <mm_freak_> somehow i like the shoot in the foot jokes
09:41:26 <aavogt> it seem like #haskell is going off on a tangent
09:42:10 <mm_freak_> how do you shoot yourself in the foot in haskell?  you take a Pistol, pull the Trigger and wonder why it doesn't hurt
09:42:27 <mm_freak_> you ask in #haskell and they tell you, you need to use seq on your foot
09:42:31 <mm_freak_> you do and it doesn't help
09:43:10 <Botje> aavogt: guess we'll have to get coss with some people.
09:43:52 <aavogt> Botje: repent for your sin?
09:44:11 <Botje> aavogt: people will sqrt me with holy water
09:45:13 <edwardk> ah woot. the stable generic map i mentioned earlier wasn't so hard after all
09:45:18 <edwardk> i should probably throw it on hackage
09:46:38 <edwardk> gmapStable :: Data d => (forall b. Data b => b -> b) -> d -> IO d -- abusing stable names for fun and profit
09:47:52 <eldragon> Robin Milner http://www.cl.cam.ac.uk/~rm135/10.jpg R.I.P.
09:49:10 <mrsolo> robin milner is dead
09:50:11 <edwardk> now if only i could figure out a smarter version that did something like: gfmapStable :: (Data (f a), Data (f b), Functor f) => (a -> b) -> f a -> IO (f b)
09:50:58 <edwardk> but i think for that I'd need the equivalent of a Typeable1 for Data, 'Data1'?
09:54:05 <edwardk> hrmm the methods in that would be kinda hairy
09:54:30 <edwardk> g1foldl :: (Data 1 a, Data i) => (forall d b. Data d => c (d -> b) -> d -> c b) -> forall g. g -> c g) -> a i -> c a i
09:54:38 <edwardk> er Data1 a
09:55:14 <aavogt> as if gfoldl wasn't bad enough?
09:55:37 <edwardk> and c (a i) in the result
09:55:41 <edwardk> aavogt: =)
09:55:54 <edwardk> i need to be able to derive a gfoldl given any Data argument
09:56:26 <edwardk> that way i can polymorphically replace it
09:56:38 <edwardk> otherwise my map can't change types
09:56:47 <edwardk> which makes it less useful than i'd like ;)
09:56:58 <DigitalKiwi> glguy: !!11one
10:05:31 <ibid> milner :-(
10:10:27 <danderson> is hackage terribly slow right now, or is it my internet that is sucking?
10:10:44 <fasta> danderson, it has never been fast.
10:10:51 <danderson> I mean very slow
10:11:02 <danderson> as in 30 seconds to display an API docs page for quickcheck
10:11:31 <fasta> danderson, more than 70KB/s is the maximum. Yes, it appears to be extra slow now.
10:11:41 <fasta> Single point of failure. Hoerai!
10:11:43 <jlouis> danderson: platform haskell platform
10:11:49 <danderson> hmm, Cogent, Sprint and NTT appear to all be sneezing
10:11:53 <danderson> according to internetpulse
10:12:08 <danderson> jlouis: come again?
10:13:57 <jlouis> danderson: dons released the haskell platform beta, so people are downloading it. Perhaps it is the same server
10:14:05 <danderson> aah, gotcha.
10:14:09 <jlouis> it is
10:16:17 <ksf> iteratees hold the standard for nasty and pleasant surprises.
10:17:39 <ksf> nasty as in "(enumPure1Chunk  . pure . runIdentity . run . joinIm . it $ I.length) >. it", pleasant as in I.length calculates the length chunkwise, not elementwise.
10:19:22 <ksf> I think oleg never actually used them to unparse stuff, or there would be nicer combinators for it.
10:20:55 <edwardk> ksf: hrmm, not familiar with his combinators for them, just the skeleton of the idea
10:21:49 <ksf> well there's >. as mappend for EnumeratorGM, and that's it.
10:23:47 <edwardk> gah. i just realized i have to basically clone attoparsec to add the error location info i need
10:24:10 <ksf> please, please don't rewrite them based on category-extras
10:24:19 <ksf> that'd smear my brain all over the place.
10:24:29 <edwardk> hah
10:24:40 <edwardk> sok, i already redefined fingertree based ropes using comonads =)
10:26:32 <edwardk> though to be fair, i didn't bother to use the category-extras comonad class, and just rolled my own in the package
10:26:52 <edwardk> as i was only using it internally
10:27:15 * chromakode pokes dcolish
10:27:40 * dcolish waves
10:27:59 <dcolish> i think i'm going to need to upgrade my laptops ghc today too
10:29:16 <sm> mreh: sounds good, how about http://darcsden.com or patch-tag-.com
10:42:40 <Phyx-> hi, anyone else having trouble with darcs.haskel.org? seems abnormaly slow
10:43:06 <Zao> Phyx-: Likely fallout from a new HP.
10:43:27 <Phyx-> I got ~500kb/s this morning, and now 0.8
10:43:30 <ksf> .oO( p2p darcs )
10:44:07 <Phyx-> ksf: yes, darcs itself is, but darcs.haskell.org is just the http server.
10:44:26 <ksf> single point of failure
10:44:34 <ksf> that's always a bad idea.
10:44:47 <Phyx-> was building ghc-STABLE-2009-11-20-ghc-corelibs.tar.bz2 but that failed on a c file :S wanted to get another build
10:45:10 <Phyx-> but at this speed it'll take 30+ hours :(
10:45:42 <ksf> mhhh I could set up a torrent with ghc-HEAD-2009-10-23-ghc-corelibs-testsuite.tar.bz2
10:46:39 <Phyx-> ksf: sure, but with only 1 seeder how much will I get? lol :P
10:47:31 <ksf> ...everybody who has the file can seed
10:47:41 <ksf> otherwise, 80KiB/s.
10:48:08 <Phyx-> ok
10:49:01 <Phyx-> btw
10:49:17 <sm> haskell needs one of these: http://dto.github.com/notebook/lgdc.html
10:52:40 <sclv> @bot
10:52:40 <lambdabot> :)
10:52:48 <ksf> http://haskell.org/haskellwiki/Image:Ghc-head.torrent
10:52:59 <c_wraith> lunabot has vanished with mmorrow
10:53:00 <sclv> @seen mmorrow
10:53:01 <lambdabot> Unknown command, try @list
10:53:05 <sclv> :bot
10:53:11 <c_wraith> preflex: seen mmorrow
10:53:11 <preflex>  mmorrow was last seen on #ghc 63 days, 14 hours, 55 minutes and 26 seconds ago, saying: * mmorrow is rtfm'ing
10:53:18 <sclv> thx!
10:53:18 <ksf> oh, and I set up darcs.haskell.org as http seed
10:53:25 <Phyx-> nice
10:53:33 <sclv> anybody have haskell-src-exts fixed for 6.12 yet?
10:53:55 <Phyx-> sclv: fixed? it works fine
10:54:01 <aavogt> same here
10:54:10 <sclv> erm.
10:54:13 <sclv> haskell-src-meta that is
10:54:28 <siracusa> sclv: I created a patch, but it's not 100% complete.
10:54:44 <sclv> could you hpaste?
10:54:55 <sclv> i'm in the middle of a patch myself, but i'm not sure about the details
10:55:26 <danderson> parsers + serializers + quickcheck = awesome
10:55:39 <siracusa> sclv: I think it's to long for hpaste.
10:56:20 <danderson> just being able to write a parseOfUnparseIsIdentity function and have QC tell you your format is at least self-consistent
10:56:25 <danderson> great confidence-building.
10:57:08 <Phyx-> ksf: thanks, speed is still abysmal though, starting to think it's me.. but speedtest says my connection's fine
10:57:21 <sclv> siracusa: thanks anyway
10:57:36 <siracusa> sclv: Is it urgent? If you could wait until Friday, I'm going to send it to cafe.
10:57:40 <ksf> you can keep what you downloaded, btw
10:57:48 <sclv> oh, no prob then.
10:57:57 <ksf> ...just stop the torrent, copy your file over, and recheck the data.
10:58:01 <sclv> have you been in touch with mmorrow about this?
10:58:17 <ksf> (and I'm not seeing any leechers)
10:58:20 <sclv> I don't know if he's staying on top of things or is too busy.
10:58:29 <siracusa> I send him a mail but he didn't reply.
10:59:13 <aavogt> sclv: there's a fixed version at http://moonpatio.com/repos/haskell-src-meta_NEW_TH/
10:59:21 <Phyx-> ksf: I had a stable, not head, ghc-STABLE-2009-11-20-ghc-corelibs.tar.bz2
10:59:36 <Phyx-> but I deleted it since it was throwing an erorr in an ffi c file
10:59:47 <sclv> oh, sweet!
10:59:51 <sclv> thanks much.
10:59:53 <aavogt> siracusa: or is your patch included in that repo?
11:00:14 <siracusa> aavogt: No
11:00:17 <ih> hi, is there a way to check if two values have the same algebraic data type? e.g. data T=A Int| B and you want to know (A 3) and (A 4) have the same type even if the components are different
11:00:36 <aavogt> some things are commented out, so there's still some work to be done in updating the library
11:00:57 * Phyx- checks his torrent settings
11:01:27 <aavogt> but those functions are mostly random utility functions that aren't used for the main functionality
11:02:35 <aavogt> I've got some patches that add conversions for expressions like `case' and `do', which were missing
11:02:53 <HugoDaniel> is there any way to catch an exception that does not involve putting my function on the IO monad ?
11:03:08 <aavogt> which can be found here: http://code.haskell.org/~aavogt/haskell-src-meta/
11:03:29 <aavogt> HugoDaniel: you can unsafePerformIO the catch ....
11:03:32 <HugoDaniel> im having *** Exception: Prelude.read: no parse, on a pure function...
11:03:44 <aavogt> HugoDaniel: use reads
11:04:16 <aavogt> > case reads "hello" of [(x,"")] -> Just x; _ -> Nothing :: Maybe Int
11:04:17 <siracusa> aavogt: Is this the offical darcs repo?
11:04:17 <lambdabot>   Nothing
11:04:26 <aavogt> > case reads "123" of [(x,"")] -> Just x; _ -> Nothing :: Maybe Int
11:04:27 <lambdabot>   Just 123
11:04:37 <aavogt> siracusa: which one?
11:04:46 <siracusa> http://moonpatio.com/repos/haskell-src-meta_NEW_TH/
11:04:57 <aavogt>  moonpatio.com belongs to mmorrow
11:05:05 <MisterN> > reads "123"
11:05:06 <lambdabot>   []
11:05:12 <Janni> Currently darcs doesn't seem to handle unicode very well. For example "darcs whatsnew" (version 2.2.0) outputs (red) \e2\86\92 instead of a right arrow. Anybody knows how to fix this? Is there a newer version that can display unicode characters? Or is there maybe a simple shell command that will translate from this rempresentation?
11:05:16 <siracusa> aavogt: ok
11:06:06 <xerox> Janni: are you sure it isn't your locale fault?
11:06:37 <Janni> Hmm. Didn't think of that. Any other program does the right thing. Still.. I'll check, thanks.
11:07:39 <ih> is there a function that returns the type of a value or checks whether two values have the same type?
11:08:13 <ksf> ...anyone who has the ghc HEAD snapshot, please seed http://haskell.org/sitewiki/images/6/68/Ghc-head.torrent
11:08:20 <xerox> ih - http://haskell.org/ghc/docs/latest/html/libraries/base-4.2.0.0/Data-Typeable.html
11:08:26 <sclv> ih: all types are known statically
11:08:45 <sclv> eqTypes :: a -> a -> Bool; eqTypes _ _ = True
11:08:45 <ih> Thanks for the reference
11:09:17 <aavogt> siracusa: but perhaps the actual repo will be one that contains more history...
11:09:21 <sclv> ah, but I see you mean the same type constructor, not the same type
11:09:36 <sclv> you've got to write that by hand, which is simple, unless you use some clever generics library.
11:10:31 <ih> ok, thanks sclv
11:10:54 <aavogt> @type (==) `on` (constrIndex . toConstr)
11:10:55 <lambdabot> forall a. (Data a) => a -> a -> Bool
11:11:34 <aavogt> sclv: that isn't too clever, as it just delegates all the hard work to the Data instance (which ghc can write for you)
11:11:54 <sclv> sure. not too clever :-)
11:12:09 * sclv dislikes things like that on principle though
11:12:58 <aavogt> which principle?
11:13:16 <aavogt> that Data is probably restricted to GHC?
11:13:19 <sclv> not sure. :-) generally i avoid syb these days except where absolutely necessary.
11:15:04 <sclv> I don't like the dynamic elements of it that you can get through introspection.
11:15:16 <sclv> at least not when the same things can be handled statically with a bit more legwork.
11:15:27 <siracusa> aavogt: I just asked because in my package I have to rely on that TH 2.4 is supported from a certain version of haskell-src-meta.
11:16:56 <Twey> :t toConstr
11:16:58 <lambdabot> forall a. (Data a) => a -> Constr
11:17:08 <Twey> :t constrIndex
11:17:09 <lambdabot> Constr -> ConIndex
11:17:57 <aavogt> I would just assume that the next version supports TH 2.4, though I don't understand the package version policy well enough to guess which numbers have to be incremented for such a change
11:18:17 <aavogt> Twey: I think the constrIndex is probably unnecessary
11:18:26 <aavogt> @type (==) `on` toConstr
11:18:27 <lambdabot> forall a. (Data a) => a -> a -> Bool
11:18:37 <aavogt> > toConstr (Just 5)
11:18:38 <lambdabot>   Just
11:19:18 <sclv> > ((==) `on` toConstr) (Just 1) (Just 2)
11:19:18 <aavogt> but unfortunately not every type has a Data instance
11:19:19 <lambdabot>   True
11:19:25 <sclv> > ((==) `on` toConstr) (Just 1) (Nothing)
11:19:26 <lambdabot>   False
11:19:47 <sclv> aavogt: (or can have one, at least an autogenerated one.)
11:20:08 <sclv> I'd prefer if some of the introspection stuff was pulled out away from gfoldl & friends
11:20:18 <sclv> since they're really two different sorts of functionality
11:20:47 <aavogt> they are both needed for generic programming though
11:21:29 <sclv> you have lots of generics libraries that don't have introspection. the syb style happens to need it. but it also stands alone, as the example above shows.
11:22:10 <aavogt> what kind of separation are you thinking of? More than just  Data and Typeable being separate?
11:23:23 <sclv> toConstr and dataTypeOf should be in seperate classes.
11:23:37 <sclv> there are lots of cases where those two are easy to write but gfoldl is tricky.
11:23:57 <aavogt> tricky, or impossible?
11:24:04 <Phyx-> weee, the torrent picked up speed
11:24:35 <sclv> aavogt: depends. impossible for current ghc. potentially possible in the future. except sometimes one doesn't want it by *design* like with Data.Map
11:25:07 <sclv> since there's an enforced abstraction. i'm not keen on enforced abstraction myself, but...
11:33:14 <edwardk> hrmm Data1 didn't turn out to be too hard to write. what would be an appropriate package name for a syb extension that added higher order Data instances along the lines of Typeable1, etc?
11:33:38 <edwardk> or should I just try to petition libraries@ to have them added to Data.Data like Typeable1, etc. are in Data.Typeable?
11:34:09 <Vanadium> Is network the right package for plaintext/line-based network protocols?
11:34:32 <Cale> Vanadium: Yeah, should be.
11:35:09 <Phyx-> hmmm question, If I have a specific build number 6.13.20100211 how do I find the tar file associated with it? can't remember where i got it
11:35:24 <edwardk> with Data1, StableNames, and judicious use of unsafeCoerce, a stableMap :: (Data1 f, Functor f) => (a -> b) -> f a -> f b -- is within my grasp
11:35:58 <dankna> well, I guess it's time for me to learn GADT
11:37:05 <dankna> Phyx: I have that identical version actually.  there's a directory somewhere ...
11:37:26 <dankna> finding it, one sec
11:38:30 <fax> dankna GADT is the BEST bit of haskell :)))
11:38:44 <Phyx-> dankna: thanks :)
11:38:52 <dankna> Phyx - I was going to say it was in http://www.haskell.org/ghc/dist/current/dist/ but actually I only see binary tarballs for that particular date range on that page
11:38:58 <dankna> no source ones
11:39:01 <dankna> fax: I hope so :)
11:39:02 <Phyx-> hmm
11:39:24 <dankna> it might be possible to ask darcs to give you a version with a specific date?
11:39:30 <Phyx-> I unfortunately need the source. and darcs.haskell.org only has 6.12 builds
11:39:39 <dankna> what problem are you trying to solve?
11:39:56 <sclv> edwardk: sounds cool but potentially evil.
11:40:24 <sclv> I'd think that petitioning libraries is the way to go at first, but you know how that goes...
11:40:54 <Guest96271> why can't i do f x = x + 1 in http://tryhaskell.org/ ? it runs hugs? (is there a workaround?)
11:40:56 <edwardk> sclv: basically the machinery is to use unsafeCoerce to replace f a with f (Wrapped a) where Wrapped a is a newtype wrapper with a Data instance that just exists as a stub to be recognized during a higher order gfoldl
11:40:57 <Phyx-> dankna: I need to define instances of Storable for a few abstract datatypes defined in ghc. Since i'm exporting the lexer.
11:41:11 <Phyx-> I could use a normal 6.12 build, If only it would build
11:41:14 <c_wraith> Guest96271: try putting a "let" in front of it
11:41:20 <shapr> I got called a programming languages hipster on Saturday for advocating Haskell.
11:41:33 <c_wraith> did you have a triangular beard?
11:41:43 <jmcarthur> shapr: you're such a hipster
11:41:52 <edwardk> shapr: yeah but you were 'down with haskell before it went mainstream'.. hrmm i guess that statement does make you a hipster ;)
11:41:57 <shapr> ooh
11:42:08 <dankna> Phyx: what platform are you on and do I correctly understand that you're planning to modify GHC itself?  sounds like an interesting project, what is it?
11:42:10 <jmcarthur> edwardk: haskell is mainstream?! how did i miss out on this?
11:42:14 <Phyx-> dankna: that and I previously started working on that 6.13 image. I suppose I could just do a make clean and tar it back myself
11:42:17 <shapr> Anyway, this guy was unhappy about all the Haskell posts to reddit/programming.
11:42:20 <Guest96271> not an expression: `let f a = a + 1'
11:42:23 <sclv> haskell, pbr, and screamo. three tastes that go... great?
11:42:25 <shapr> And I was like "Well, have you tried it?"
11:42:30 <Guest96271> let in works
11:42:40 <Guest96271> let f a = a + 1 in f 2 is 3
11:42:44 <shapr> So I did some in-person Haskell proselytization.
11:42:53 <c_wraith> Guest96271: That might be what you're stuck with.  tryhaskell.org is chrisdone's project, I believe
11:42:54 <dankna> shapr: cool cool
11:43:05 <c_wraith> preflex: seen chrisdone
11:43:06 <preflex>  chrisdone was last seen on #haskell 19 hours, 7 minutes and 52 seconds ago, saying: ivanm: wow great!!
11:43:07 <shapr> It was fun to see someone's brain explode in-person! He's a smart guy, he totally got lazy evaluation.
11:43:23 <jmcarthur> shapr: was this somebody i know?
11:43:26 <Guest96271> c_wraith, ohh, ok, thank you
11:43:34 <jmcarthur> or a florence person?
11:43:36 <Phyx-> dankna: i'm on windows, and it's that I want to create an editor using the ghc lexers/parsers themselves, via the ghc api, but in order to use FFI on them I need to define some marshaling information on a few datatypes that are abstract. So I'm just adding instances
11:43:37 <shapr> jmcarthur: I don't think so, he's a Shoals guy.
11:43:42 <jmcarthur> ah
11:43:42 <Phyx-> for now anyway
11:43:44 <waern> edwardk: are you doing this just to get a type-changing map?
11:44:02 <shapr> jmcarthur: More folk getting interested in TweakLabs.org ... Electronics will come with a side order of HASKELL.
11:44:56 <dankna> Phyx: hmmmmmm....  sounds like a great project concept and I certainly wish you luck with it.  can't you just upgrade to a newer snapshot?  http://www.haskell.org/ghc/dist/current/dist/ghc-6.13.20100320-src.tar.bz2 is the newest...
11:45:41 <dankna> Phyx: I take it the GHC lexers and parsers are implemented in C?
11:45:50 <dankna> Phyx: and that's why you're FFIing to them?
11:46:04 <sclv> dons: btw, newest tagsoup breaks download-curl. should be an easy fix.
11:46:05 <Phyx-> dankna: I could, but don't remember if those snapshots come with the core libs, or not, why i went for the clearly marked carcs ones
11:46:14 <dankna> they do come with the core libs
11:46:22 <Phyx-> dankna: no, the lexer and parsers are written in haskell, alex/happy
11:46:29 <Phyx-> the editor however is not
11:46:36 <dankna> oh, right, I should have known that - I knew they were build dependencies :)
11:46:55 <dankna> why do you need to marhsal the type instead of just using a StablePtr to it?
11:47:05 <edwardk> waern: it is a fmap that preserves the sharing in the original structure
11:47:19 <sclv> and for the info of whomever cares, newest hsemail breaks happstack, though should be an easy fix.
11:47:38 <waern> edwardk: ah, ok. Cool.
11:47:58 <Phyx-> waern: someone told me to ask you something, but now i forgot :(
11:47:59 <sclv> oh, nevermind. downolad-curl is deprecated
11:48:00 <edwardk> waern: so if you had an infinite loop of 1s in O(1) space, and stableMapped show over it, you'd have an infinite map of "1"s, but in O(1) space
11:48:13 <Phyx-> dankna: cool, i'll try those instead
11:48:16 <edwardk> the vacuum diagrams should stay roughly the same
11:48:28 <dankna> phyx: hope it works :)
11:48:37 <waern> Phyx-: heh :-)
11:48:52 <Phyx-> waern: do you maintian anything here? that might help me remember, lol
11:48:57 <edwardk> it does require the original be finite at least in the current approach
11:49:03 <waern> Phyx-: haddock
11:49:17 <dankna> waern: oh - I have a bug report for you :)
11:49:18 <Phyx-> dankna: oh it was working before, I just formatted and want to continue, but my svn commits only includes the files changed
11:49:26 <edwardk> i can probably be smart with some unsafePerformIO nonsense and make it handle codata though
11:49:34 <dankna> Phyx - oh, okay
11:50:17 <waern> dankna: thanks, what's it about?
11:50:38 <Phyx-> waern: ah, now I remember, I was trying to use the haddock lib to get a map of functions and the comments associated with it's arguments. But I couldn't tell if that was possible using the lib. I tried, but got to a few structures that weren't being exported, so couldn't get to them
11:50:47 <dankna> waern: compare the documentation of the arguments in http://hackage.haskell.org/packages/archive/direct-plugins/1.1/doc/html/src/System-Plugins.html#unsafeLoad to the generated html in http://hackage.haskell.org/packages/archive/direct-plugins/1.1/doc/html/System-Plugins.html#v%3AunsafeLoad
11:50:54 <dankna> and you will see it is missing the first one
11:51:07 <dankna> the similar description for the other function in that module is okay
11:51:09 <Phyx-> I currently "cheat" by just running it haddock --hoogle and read the file, but that ofcourse doesn't contain the argument comments
11:51:46 <dankna> so I don't think it's my fault, although I wouldn't be amazed to learn that it is
11:52:19 <dankna> this is already a pretty small test case, but I could do a reduction if you want.  I did narrow it down to the presence of that unbound type variable.
11:52:24 <waern> dankna: looks like an instance of a bug we recently fixed. Try version 2.7.2
11:52:34 <dankna> waern: oh, excellent, one sec while I check that for me
11:52:49 <waern> hmm, but I'm not sure
11:53:02 <dankna> I was on 2.6.0
11:54:13 <Phyx-> waern: so, should I be able to do what I posted using the haddock lib or?
11:54:59 <waern> Phyx-: which version of Haddock did you try with?
11:55:22 <Phyx-> waern: seems 2.6.0
11:55:26 <waern> 2.7.2 included lots of more stuff in the API
11:55:32 <Phyx-> but it only exposes interfaceFile
11:55:34 <waern> you should have much better luck with that version
11:55:47 <Phyx-> ah, ok. I'll get that one, odd, I thought I got the lastest from hackage
11:56:03 <Phyx-> waern: thanks :)
11:56:11 <waern> np
11:56:15 <dankna> waern: also thanks, although I'm still checking :)
11:57:27 <dankna> ah I see, 2.7.0 came out just eight days ago, that would explain why I don't have it
11:58:44 <waern> yeah. I guess most people don't have it
11:59:53 <dankna> you probably juuuuuuuust missed the Haskell-Platform release
12:01:05 <dankna> awwww, such a cute little nickname
12:01:11 * dankna glances at AnAdorableNick ;)
12:02:50 <dankna> waern, I can confirm that the problem is fixed with 2.7.2.  thanks!
12:03:02 <waern> dankna: ok, great
12:03:31 <dankna> I'm curious about what implementation detail caused that, but not curious enough to read the source for myself, haha.  ah well.
12:04:33 <waern> dankna: off-by-one indexing into a map
12:04:54 * dankna nods
12:04:55 <Desustorm> hmm is there a way to count the number of 'e's and 'd's and ' 's in " eedddd" using a built-in function?
12:05:02 <Desustorm> separately
12:05:11 <Desustorm> without using recursion
12:05:19 <dankna> Desustorm: look at groupBy
12:06:21 <Desustorm> i'm not sure how that can help me
12:06:29 <fax> > group " eeeddddddd"
12:06:30 <lambdabot>   [" ","eee","ddddddd"]
12:06:32 <Desustorm> i mean, i can use group to split it into
12:06:33 <Desustorm> yeah
12:06:33 <Desustorm> :p
12:06:35 <sclv> > group . sort $ "abababababa"
12:06:37 <lambdabot>   ["aaaaaa","bbbbb"]
12:06:49 <Desustorm> that's how my code starts out ;)
12:07:07 <fax> > map length . group . sort $ "abracadabra"
12:07:08 <lambdabot>   [5,2,1,1,2]
12:07:09 <Desustorm> but what i now need to do is to count the occurrences of each character
12:07:09 <sclv> > (head &&& length) $ group . sort $ "abababababa"
12:07:10 <lambdabot>   ("aaaaaa",2)
12:07:14 <dankna> > map (\c@cs -> (c, length cs)) $ group . sort $ "banana"
12:07:15 <lambdabot>   [("aaa",3),("b",1),("nn",2)]
12:07:19 <dankna> hm
12:07:21 <sclv> > map (head &&& length) $ group . sort $ "abababababa"
12:07:22 <lambdabot>   [('a',6),('b',5)]
12:07:29 <dankna> > map (\cs@(c:_) -> (c, length cs)) $ group . sort $ "banana"
12:07:30 <lambdabot>   [('a',3),('b',1),('n',2)]
12:07:32 <dankna> there we go
12:07:34 <Desustorm> o.o
12:07:38 <Desustorm> you guys are good xD
12:07:55 <dankna> > map (\cs@(c:_) -> (c, length cs)) $ group . sort $ "bookkeeper"
12:07:56 <lambdabot>   [('b',1),('e',3),('k',2),('o',2),('p',1),('r',1)]
12:08:09 <dankna> > Data.Map.fromList $ map (\cs@(c:_) -> (c, length cs)) $ group . sort $ "bookkeeper"
12:08:10 <lambdabot>   Not in scope: `Data.Map.fromList'
12:08:13 <dankna> heh, anyway
12:08:16 <dankna> you can do that part yourself
12:08:22 <fax> ooooh
12:08:26 <fax> > Data.Map.fromList "bookkeeper"
12:08:27 <lambdabot>   Not in scope: `Data.Map.fromList'
12:08:29 <AnAdorableNick> I've written a monad tutorial, in case anybody is interested; it covers the State monad in depth: http://strabismicgobbledygook.wordpress.com/
12:08:38 <fax> > M.fromList "bookkeeper"
12:08:39 <sclv> > M.fromList [(1,"a")]
12:08:39 <lambdabot>   Couldn't match expected type `(k, a)'
12:08:39 <lambdabot>         against inferred type `GHC.Ty...
12:08:40 <lambdabot>   fromList [(1,"a")]
12:08:47 <fax> mhmm
12:09:06 <Phyx-> @type M.fromList
12:09:07 <lambdabot> forall k a. (Ord k) => [(k, a)] -> M.Map k a
12:09:11 <Desustorm>  map (\cs@(c:_) -> (c, length cs))
12:09:19 <Desustorm> what does that do :<
12:09:28 <dankna> Desustorm: do you understand map in general?
12:09:38 <Desustorm> not entirely
12:09:40 <dankna> the higher-order function, not the data structure
12:09:40 <Phyx-> > M.fromList [(1,"a")] :: M.Map Int String
12:09:41 <lambdabot>   fromList [(1,"a")]
12:09:43 <Desustorm> on a very very basic level, yes
12:09:56 <Phyx-> > M.fromList [(1,"a")] :: M.Map Integer String
12:09:57 <lambdabot>   fromList [(1,"a")]
12:10:01 <Phyx-> lol
12:10:03 <Desustorm> > map (*3) [1..3]
12:10:04 <lambdabot>   [3,6,9]
12:10:10 <Desustorm> is the extent :p
12:10:12 <dankna> well, okay.  the pattern cs@(c:_) binds cs to the entire string and c to the first character of it.
12:11:00 <dankna> the (c, length cs) constructs the pair of that first character and the length of the string, which is the number of identical characters since they've already been grouped
12:11:12 <dankna> so everything between the parentheses is just a function, being passed to map
12:12:10 <dankna> somebody did a clever implementation with &&&, a function that was previously unknown to me, but I don't see that as being quite as nice didactically
12:12:33 <Desustorm> hmm
12:12:51 <Desustorm> okay
12:13:01 <dankna> (head &&& length) is exactly identical to the function I wrote, in semantics
12:13:05 <Desustorm> what does the \ operator do?
12:13:12 <dankna> that introduces a lambda expression
12:13:26 <trofi> :t (\ x -> x)
12:13:26 <Desustorm> what does that do? :)
12:13:27 <lambdabot> forall t. t -> t
12:13:28 <dankna> (\a -> a * 2) -- function that takes one parameter a and doubles it
12:13:36 <dankna> a lambda expression is like a function without a name
12:13:58 <Desustorm> so it's like shorthand?
12:14:02 <Desustorm> or is it more than that
12:14:05 <dankna> in a sense
12:14:09 <dankna> it's shorthand for writing
12:14:27 <dankna> headAndAndAndLength :: String -> (Char, Int)
12:14:48 <dankna> headAndAndAndLength cs@(c:_) = head &&& length
12:15:03 <dankna> there is also the issue of captured variables
12:15:08 <dankna> but don't worry about that for now
12:15:49 <dankna> this is the "functional" in "functional programming"
12:15:56 <Desustorm> hehe okay
12:16:28 <Twey> dankna: Not with the argument, it isn't.
12:16:35 <dankna> Twey: oh uh, haha, yeah
12:16:37 <orlandu63> lambdabot: hi
12:16:49 <dankna> lambdabot: asl?
12:17:06 <Twey> Desustorm: " makes a string.  ' makes a character.  \ makes a function.
12:17:06 <dankna> drat
12:17:16 <Twey> > (\x -> x + 3) 5
12:17:17 <lambdabot>   8
12:18:13 <Desustorm> i see
12:18:40 <Desustorm> what exactly does the @ operator do?
12:18:58 <dankna> it's not really an operator... cs@(c:_) isn't an expression, it's a pattern
12:19:13 <Desustorm> oh
12:19:16 <dankna> but basically it says "assign the name on the left to the entire thing matched by this pattern, then keep pattern-matching with the thing on the right"
12:19:30 <Desustorm> i see
12:19:35 <dankna> > (\(c:rest) -> (c, rest)) "abc"
12:19:36 <lambdabot>   ('a',"bc")
12:19:43 <dankna> > (\cs@(c:rest) -> (cs, c, rest)) "abc"
12:19:44 <lambdabot>   ("abc",'a',"bc")
12:19:58 <dankna> does that help?
12:20:06 <Desustorm> yeah it does :)
12:20:08 <dankna> good
12:20:10 <Desustorm> thanks
12:20:46 <Phyx-> Am I the only one whom cabal configure hangs on when compiling ghc?
12:21:09 <dankna> I'd imagine
12:21:26 <Phyx-> it seems to hang during repeated calls
12:21:33 <Phyx-> i kill it, and restart and it's fine
12:21:36 <Phyx-> odd thing
12:21:40 <dankna> odd indeed
12:22:09 <Phyx-> maybe it's msys
12:22:18 <dankna> oh, could be
12:22:22 <dankna> haven't tried it there
12:22:40 <trofi> does it have strace ?
12:23:21 <trofi> ProcessExplorer might help as well
12:23:54 <Zao> trofi: Process Monitor too.
12:25:06 <Twey> Is there a built-in function to take every permutation of a particular length of a list?
12:25:32 <c_wraith> Certainly not in Data.List
12:25:47 <Twey> f 3 [1, 2, 3, 4, 5] = [[1, 2, 3], [2, 3, 1], [3, 2, 1], [2, 3, 4], ...]
12:25:48 <Twey> Hm
12:26:10 <Twey> Okay, thanks
12:26:46 <Phyx-> trofi: never looked at it, next time it hangs i'll take a look
12:26:59 <c_wraith> if you don't mind exceptionally bad performance, you could use a combination of permutations, nub, and take.  :)
12:27:03 <xerox> > filter ((3==).length) . subsequences $ [1..5]
12:27:04 <lambdabot>   [[1,2,3],[1,2,4],[1,3,4],[2,3,4],[1,2,5],[1,3,5],[2,3,5],[1,4,5],[2,4,5],[3...
12:27:20 <c_wraith> xerox, that's subsets, not permutations.
12:27:52 <c_wraith> though that brings up an interesting question.  what do you mean by "permutation of a certain length"?
12:28:03 <c_wraith> traditionally, a permutation has the same length as the source.
12:28:14 <Twey> I may have messed up the terminology.  ☺
12:28:19 <Twey> 19:25:24 < Twey> f 3 [1, 2, 3, 4, 5] = [[1, 2, 3], [2, 3, 1], [3, 2, 1], [2, 3, 4], ...]
12:28:42 <Twey> I can get the effect I want by f = nub . map (take n) . permutations
12:28:43 <c_wraith> You could concatMap permutations over xerox's solution.
12:28:45 <Twey> For Eq a
12:28:59 <c_wraith> yeah, that's the approach I was thinking of.
12:29:08 <c_wraith> For something more efficient, you'll have to write it yourself.
12:29:08 <Twey> But it's horribly slow over large lists, and I think there are optimisations that can be done
12:29:12 <Twey> *nod*
12:29:29 <nar0122> can anyone help me with big O notation and the amount of time it takes to perform operations such as "adding to front of an array"?
12:29:33 <Twey> I think it may be more efficient to use replicateM and filter out the ones that repeat
12:29:51 <Twey> nar0122: Haskell arrays are fixed-size.  It doesn't make sense to prepend to them.
12:30:53 <nar0122> i guess i didnt realize haskell was a programming language, im dealing with java
12:31:04 <nar0122> is there a seperate java chat? or do you kno java as well?
12:31:26 <Phyx-> grrr
12:31:28 <Phyx-> same build error
12:31:30 <Phyx-> src/x86/ffi.c:137: error: duplicate case value
12:31:30 <sclv> anyone whose upgraded to 6.12 notice a regression in compile times for really big ugly hlist type-level things?
12:31:30 <Phyx-> src/x86/ffi.c:136: error: previously used here
12:31:34 <Phyx-> anyone know that one?
12:31:42 <dankna> Phyx: never seen it before, no
12:31:49 <trofi> Phyx-: it's a ghc build on cygwin?
12:32:05 <Phyx-> trofi: msys
12:32:12 <trofi> ghc-HEAD one?
12:32:13 <Twey> nar0122: There's a channel called ##java for Java problems.
12:32:15 <Phyx-> and all the lastest snapshots seem to throw that :(
12:32:21 <moshisushi> nar0122: adding to the front? if that means "bubbling" up all elements on step (and possibly loosing the last one) then it's O(n)
12:32:29 <moshisushi> one* step
12:32:32 <Phyx-> trofi: tried a 9.12 stable, and now a 9.13 nightly snapshot
12:32:44 <zygoloid> > let innerDrops 0 xs = [xs]; innerDrops n [] = []; innerDrops n (x:xs) = ((x:) <$> innerDrops n xs) ++ innerDrops (n-1) xs in permutations =<< innerDrops 2 [1,2,3,4,5]
12:32:45 <lambdabot>   [[1,2,3],[2,1,3],[3,2,1],[2,3,1],[3,1,2],[1,3,2],[1,2,4],[2,1,4],[4,2,1],[2...
12:33:23 <Phyx-> trofi: I have a head version I could try, though I don't expect a difference
12:33:57 <trofi> Phyx-: hmm. something defined double to longdouble. you can try to throw away that label as a workaround
12:34:54 <Phyx-> trofi: ok, will try that
12:35:39 <trofi> ./include/ffi.h.in:#define FFI_TYPE_LONGDOUBLE FFI_TYPE_DOUBLE
12:35:47 <trofi> grr. it looks like an libffi bug
12:36:06 <Phyx-> trofi: that would indeed explain it
12:36:26 <trofi> it needs #ifdef HAVE_LONG_DOUBLE around that label
12:36:49 <trofi> what compiler is there?
12:37:15 <xerox> another one for the zygolibrary :)
12:37:21 <nlogax> mietek: thanks for the homebrew ghc formula
12:37:22 <Phyx-> configure is using the inplace MingW gcc
12:37:31 <Phyx-> or rather reporting
12:38:08 <trofi> Phyx-: you might try to report breakage on libffi-discuss@sources.redhat.com (does not need subscription) and on ghc trac to backport a fix
12:38:42 <Phyx-> trofi: ok, will do thanks :)
12:39:42 <ksf> somehow those iteratees are too lazy.
12:39:57 <IIcke> I want to install cabal, but it needs parsec installed. How to install parsec without cabal? (I am a newbie)
12:40:14 <ksf> the io actions that should send an answer over the network only get executed once I close the connection from the other side.
12:40:39 <ksf> ...although the message itself got parsed, every single byte of it.
12:40:46 <trofi> Phyx-: aha, seems libffi-0.3.9 has fixed that issue. so ghc ticket would be enough
12:41:11 <Phyx-> trofi: cool, gonna do that now
12:42:20 * ksf decides to debug his brain with a call it a day glass of wine
12:44:10 <jmelesky> is that debugging, or just putting your brain in a background process?
12:44:42 <Phyx-> that's killing background threads
12:44:47 <ksf> I'm trying to locate the ballmer peak, yet again
12:45:48 <orlandu63> !!
12:45:51 <Phyx-> ksf: any successful attempts?
12:45:51 <jmcarthur> ksf: my balmer peak is about a beer and a half
12:46:04 <Phyx-> wow, that's a weak peak...
12:46:23 <jmcarthur> Phyx-: balmer peak does not correlate with tolerance ;)
12:46:44 <Phyx-> jmcarthur: there's no imperical proof of that :P
12:46:52 <jmcarthur> well, i guess it does in the sense that it's always below tolerance level
12:47:09 <Phyx-> empirical*
12:47:29 <ksf> the ballmer peak is that threshold of soberness vs. tipsyness where you're absolutely bound to drink just a wee bit more.
12:47:40 <jmcarthur> oh, not for me
12:48:10 <jmcarthur> the ballmer peak is just enough to loosen me up slightly
12:48:40 <jmcarthur> my code quality drops if i near tipsiness at all
12:49:16 <jmcarthur> needless to say i don't have a very interesting balmer peak
12:55:24 <ksf> aaaaaahhh
12:55:34 <ksf> or wait.
12:55:36 <ksf> no idea.
12:55:36 <Phyx-> trofi: adding the line works, and I'll submit a bug report as soon as trac starts responding normally, keeps timing out
12:55:57 <ksf> but the problem could be that I pass an "elementwise" function to convStream.
12:56:00 <Phyx-> done
12:56:11 <ksf> that is, it produces one element, and then stops
12:56:44 <ksf> ...though I'd actually expect it to be reexecuted once it stops...
12:58:17 <mietek> nlogax: you're welcome :)
12:58:23 <mietek> nlogax: I'm still wrestling with Cabal
12:58:47 <trofi> Phyx-: cool, thanks!
12:59:03 <mietek> Axman6: any progress on the 64-bit thing?
13:00:25 <Phyx-> trofi: no, thank you, now I can continue, hehee
13:00:35 * hackagebot chp 2.1.0 - An implementation of concurrency ideas from Communicating Sequential Processes  http://hackage.haskell.org/package/chp-2.1.0 (NeilBrown)
13:01:46 <edwardk> ok, so it looks like my fancy generic map blows up if the Data instance does bad things like use its argument in non-strictly positive position. (i.e. Cont)
13:02:52 <edwardk> Plan b could be to go write a $(deriveStableFunctor ''MyDataType) template haskell version
13:03:35 <Alpounet> mietek, what's your cabal issue ?
13:03:56 <mietek> Alpounet: getting it to work nicely with homebrew on Mac OS X
13:04:04 <Alpounet> oh
13:04:16 <Alpounet> good luck, can't help here
13:04:26 <mietek> No worries, I'm almost done.
13:04:32 <mietek> Here's my first stab at it: http://github.com/mietek/homebrew/blob/mietek/Library/Formula/cabal.rb
13:04:42 <mietek> I'm almost done with the final version.
13:04:57 <mietek> Not enough almosts.
13:05:32 <shepheb> mietek: almost enough, though.
13:09:37 * hackagebot chp-plus 1.1.0 - A set of high-level concurrency utilities built on Communicating Haskell Processes  http://hackage.haskell.org/package/chp-plus-1.1.0 (NeilBrown)
13:11:25 <dankna> so let me think out loud here, and feel free to chime in
13:11:37 <dankna> I'm new to GADT but I know that I need them for what I'm trying to do
13:12:02 <dankna> which is model the complete statement syntax of Sqlite3 such that any valid statement can be constructed and no invalid ones can
13:12:44 <dankna> now there's such a thing as an "explain statement" which is any valid statement preceded by the keyword "EXPLAIN"
13:14:32 <dankna> so I've got data StatementType a = ExplainStatementType :: (StatementType NoStatementType) -> -> StatementType (JustStatementType (StatementType NoStatementType))
13:14:58 <dankna> and then I've additional StatementType constructors which look like | SelectStatementType :: StatementType NoStatementType
13:15:27 <dankna> first off, does this make sense so far?  am I using GADT correctly?  I haven't gotten this far enough along to check that it even compiles yet, hah.
13:15:38 <dankna> in fact if I comment some crap I can check that, and should
13:15:39 <dankna> one sec :)
13:17:36 <aavogt> you're allowed two -> in a row?
13:17:48 <dankna> er, no, that was a copy-paste error
13:18:22 <dankna> I was trying to put things into paragraph form to get away with pasting code without "really" pasting code, which I probably shouldn't have been doing in the first place, haha
13:19:08 <aavogt> I have not worked much with GADTs so I'm probably useless ;)
13:20:08 <maltem> dankna, I think hpaste would be more benefitial here anyways, to be able to say something about your code
13:20:43 <dankna> maltem, maybe so.  I was a little concerned that people wouldn't bother to click through.
13:20:54 <dankna> let me get it compiling and then I'll hpaste what I've got and continue.
13:21:03 <dankna> I had a minor misunderstanding about the GADT syntax which I am fixing
13:21:17 <maltem> First of all, you'll need a "where" instead of =
13:21:59 <dankna> yes, that was the misunderstanding :D
13:23:11 <ybit> anyone know of a list of happstack apps?
13:24:04 <jmcarthur> dankna: my understanding is that GADTs can be expressed using type classes, or at least most can, so your "I know that I need them for what I'm trying to do" might be incorrect
13:24:22 <jmcarthur> dankna: that doesn't mean GADTs are necessarily a bad solution. i'm just letting you know
13:24:58 <dankna> jmcarthur: well, that's something to keep in mind, but hmmmmmm
13:25:01 <dankna> http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24253#a24253
13:25:14 <kmc> jmcarthur, how does that work?
13:25:14 <dankna> I got it to compile with StatementType
13:25:24 <dankna> I'm having a bit of a mind block on how to declare Statement now
13:25:36 <dankna> hmm
13:25:51 <dankna> does each possible StatementType need to be its own type?
13:26:17 <dankna> that way I could do like SelectStatement :: ... -> Statement (SelectStatementType)
13:26:26 <dankna> which I can't do when they're all different constructors of the same type
13:26:39 <dankna> because that would be confusing a constructor with a type
13:27:07 <dankna> apologies for how wordy that code is.  if it's too much I can excerpt it.
13:27:25 <kmc> dankna, can you explain what you're trying to do here?
13:27:35 <dankna> kmc: I did above, but let me go through it again
13:27:48 <benmachine> 20:11:38 < dankna> which is model the complete statement syntax of Sqlite3  such that any valid statement can be constructed and no  invalid ones can
13:27:51 <kmc> oh i can scroll back
13:27:52 <dankna> this is pursuant to an SQL parser-and-generator
13:27:55 <dankna> oh, thanks
13:28:00 <c_wraith> :t sqrt
13:28:01 <lambdabot> forall a. (Floating a) => a -> a
13:28:37 <kmc> you want a static guarantee that only valid SQL statements can be built?
13:28:42 <dankna> yes, precisely
13:29:02 <dankna> without too much duplication
13:29:10 <dankna> there's the "EXPLAIN" keyword which modifies any other statement
13:29:15 <kmc> that does sound like a use of GADTs
13:29:20 <dankna> well good, I got that much right :)
13:29:32 <benmachine> can you EXPLAIN EXPLAIN statements?
13:29:34 <dankna> yes
13:29:48 <dankna> SELECT blah blah blah; performs an operation.
13:30:03 <dankna> EXPLAIN SELECT blah blah blah; describes how the operation would be performed (in a little syntax that isn't relevant right now)
13:30:04 <benmachine> I meant literally :P
13:30:07 <benmachine> as in
13:30:09 <dankna> oh
13:30:11 <dankna> no, you cannot
13:30:15 <benmachine> ah
13:30:15 <kmc> ah, that's a complication
13:30:18 <dankna> yeah
13:30:32 <kmc> data Statement = StSelect Expr | StExplain Statement
13:30:36 <kmc> that's why this doesn't work
13:30:42 <dankna> exactly
13:30:49 <kmc> is EXPLAIN the only case like this?
13:31:03 <dankna> there is EXPLAIN and EXPLAIN QUERY PLAN, but that's it
13:31:11 <dankna> they both behave the same way
13:31:35 <maltem> dankna, looks to me like you're duplicating Statement in StatementType (or the other way around)?
13:31:44 <dankna> maltem: am I?  hmm...
13:31:47 <kmc> i think by using GADTs you can avoid this uplication
13:31:59 <dankna> well, that's my hope
13:32:00 <kmc> data L0; data L1; data Statement lvl where { StSelect :: Expr -> Statement L0; StExplain :: Statement L0 -> Statement L1 }
13:32:05 <aavogt> is there some way to construct typed hlists that may may or may not contain values?
13:32:06 <dankna> ooh
13:32:12 <jmcarthur> kmc: okay, i think you can translate any GADT into a type class at the cost of deep pattern matching, but there could be other sacrifices i haven't thought of as well
13:32:22 <maltem> dankna, well you're repating every identifier there :p
13:32:26 <kmc> note that L0 and L1 store no data and are just tags for the type system
13:32:30 <sclv> aavogt: hlists of Maybes
13:32:31 <dankna> maltem: oh - yeah, haha.
13:32:45 <aavogt> as instead of putting maybes in each record position, to make the absence of those fields make the lookup give a maybe
13:32:47 <sclv> or you can do hmaybe too
13:33:09 <kmc> also, this is enough boilerplate that i'd probably write some Template Haskell or another preprocessor to generate it
13:33:17 <kmc> like the list of keywords
13:33:22 <sclv> which gives you a maybe at compile time
13:33:51 <sclv> yeah.
13:33:52 <sclv> aavogt: ah i see what you mean -- either you have the field, and get back Just a, or you don't and get back Nothing
13:34:00 <dankna> kmc: I agree, that would be nice.  and I do understand TH well enough to do that.  but I feel the need to only grapple with one thing at a time.  I'd prefer to write it out "longhand" first and then write the TH once I know that the expansion works at all.
13:34:11 <aavogt> sclv: where is hmaybe defined? HMaybied doesn't look right:  (HMaybied r r') => HMaybied (HCons (LVPair l (Proxy v)) r) (HCons (LVPair l (Maybe v)) r')
13:34:12 <sclv> you should be able to modify the standard hlookup function to do that without too much angst.
13:34:25 <kmc> dankna, fair enough
13:34:33 <sclv> hmaybe is different -- at compile time it either gives back a value of HJust a or HNothing
13:34:53 <dankna> let me incorporate your L0 L1 suggestion into my working copy now
13:34:53 <Axman6> "Robin Milner, Turing award winner, inventer of the pi-calculus, and co-inventer of type-inference, passed away today." -- http://lists.seas.upenn.edu/pipermail/types-list/2010/001478.html
13:35:01 <dankna> I'll resume monologuing when I've done that :)
13:35:05 <dankna> yes, very tragic
13:35:14 <aavogt> oh right, I didn't consider writing my own lookup
13:35:30 <benmachine> what's wrong with data Statement = St NormalStatement | Explain NormalStatement; data NormalStatement = Select ...
13:35:32 <Twey> Oh no ☹
13:36:04 <dankna> benmachine: maybe nothing is wrong with it, hmm
13:36:23 <kmc> more indirection to get at the guts of the statement.  but that might be fine
13:36:42 <benmachine> dankna: the thing that I like about that version is that NormalStatement doesn't have to be mutilated for the possibility that it might be Explained
13:36:56 <sclv> once you move to type level functions there's so many options -- value level or type level results, value level or type level eithers and maybes, and you can mix and match...
13:36:57 <maltem> :( Is that the Milner of Hindley-Milner?
13:36:59 <benmachine> indirection is a slight problem yes
13:37:04 <c_wraith> maltem: yes
13:37:23 <dankna> benmachine, yes, I take your point.  I'm going to do it the L0 L1 way and see whether I find it sufficiently beautiful, and if not I'll do it the way you suggested.
13:37:29 <tensorpudding> the same Milner who created LCF, ML and the pi-calculus
13:37:35 <dankna> it's fortunate that I'm not in any hurry :)
13:38:21 <benmachine> seems to me the L0/L1 way is duplicating information, 'sall
13:38:34 <benmachine> but maybe I am wrong
13:39:03 <dankna> I need to actually get it written out to fully understand it, and part of my goal is to understand this stuff - that's worth the time investment even if someone says "hey, here's a way to do this without GADT /at all/"
13:39:25 <dankna> I don't mind writing it out both ways and comparing them :)
13:41:30 <jmcarthur> dankna: is this ultimately going to be serialized into a SQL query string?
13:41:42 <dankna> jmc: yes it is
13:41:52 <dankna> and parsed out, as well - it needs to round-trip
13:42:33 <jmcarthur> ah! i'd say this is exactly the kind of case where i would use a type class instead of a GADT, i think
13:42:36 <dankna> the ultimate purpose of all this is to make a query builder, which consists of both "math" stuff and user interface stuff
13:42:42 <dankna> hmm, what might that look like?
13:42:51 <jmcarthur> lemme type a sample
13:43:14 <dankna> people are being so verbose and interested in this idea that I have moved IRC to the same virtual desktop as Emacs so that I can see your responses immediately, which I normally never do because it's too much distraction :)
13:43:21 <jmcarthur> heh
13:43:29 <sinelaw> aloha!
13:43:33 <dankna> howdy
13:44:18 <sinelaw> \O/ \0/ \o/        <-- whole family cheering
13:44:57 <not_nathan> So I am hoping to work on a Data Structures library for summer of code
13:45:05 <not_nathan> This ticket:
13:45:06 <not_nathan> March 17-24:  Would-be student participants discuss application ideas with mentoring organizations.
13:45:47 <not_nathan> Ack.
13:45:54 <not_nathan> Wrong paste.
13:46:08 <not_nathan> *this* ticket.
13:46:09 <not_nathan> http://hackage.haskell.org/trac/summer-of-code/ticket/1549
13:46:17 <alsd> yoy yoyoyoyoyoyoyo
13:46:35 <alsd> whats so great about haskell
13:46:43 <sinelaw> alsd lot's of stuff
13:46:53 <alsd> why is it called lazy
13:46:56 <tensorpudding> alsd: dawg?
13:47:08 <alsd> wassup
13:47:15 <alsd> so why is haskell lazy programmer
13:47:18 <jmcarthur> class Statement s a where explain :: s () -> s (s ()) ; commit :: s ()   -- dankna: two of the constructors of your GADT in a type class instead and using notation i found more convenient
13:47:19 <sinelaw> alsd because it doesn't evalute expressions until it definitely needs to use their values
13:47:26 <tensorpudding> it's called lazy because the compiler waits to evaluate it until necessary
13:47:28 <dankna> jmc: hmm
13:47:43 <jmcarthur> dankna: and an implementation of that type class could even just be a newtype wrapper around a string that builds the query as you go
13:47:55 <not_nathan> And I was wondering what deficiencies in the existing Data Libraries have you guys run up against?
13:47:58 <dankna> now I have three strategies to work up instead of just two; one sec whilst I do that
13:48:16 <alsd> that is very cool
13:48:22 <sinelaw> alsd for example, you can define a list of infinite length without using much memory at all, because it will only evluate the next element in the list if someone really tries to read it
13:48:23 <jmcarthur> dankna: explain (StatementString str) = StatementStr ("EXPLAIN " ++ str)
13:48:32 <jmcarthur> dankna: or something like that
13:48:41 <alsd> hmmm that is very useful
13:49:05 <sclv> not_nathan: A big issue that just came up is that there's actually no good comparative benchmark suite.
13:49:11 <alsd> everyday im writing code everyday im writing code everyday im writing code
13:49:16 <sinelaw> alsd, read this http://www.cs.chalmers.se/~rjmh/Papers/whyfp.html
13:49:19 <alsd> everyday everyday everyday
13:49:24 <sclv> Now we have neat tools like criterion, so a good comprehensive test and benchmark suite would be very useful.
13:49:28 <sinelaw> alsd and stop spamming us
13:49:32 <sclv> And easier than before.
13:49:34 <alsd> my bad
13:49:49 <alsd> but me thinks i will learn this langugae
13:49:53 <jmcarthur> dankna: newtype Statement a = Statement { getQuery :: String }   --  :D
13:49:53 <Phyx-> bleh, this is getting rather annoying, error i get now is "checking for suffix of executables... configure: error: cannot compute suffix of executables: cannot compile and link"
13:49:55 <sclv> Beyond that, there's lots of questions about speed.
13:50:00 <dkc> Hi .. is there a haskell2010 torrent out there somewhere? Downloads from the site are roughly 5kb/sec
13:50:15 <sclv> Which in part haven't been answered because we don't have uniform benchmarks.
13:50:22 <jmcarthur> well of course that would be a clashing identifier, but you get the point
13:50:29 <sclv> But there's lots of possible implementations, including more modern ones for some of the core libs.
13:50:37 <dankna> I'm not sure whether I get the point or not :)
13:50:44 <maltem> dkc, Haskell 2010 is a spec, do you actually mean that?
13:50:48 <sinelaw> alsd, good. you can start with one of these:
13:50:51 <sinelaw> @where lyah
13:50:51 <lambdabot> http://www.learnyouahaskell.com/
13:50:54 <sinelaw> @where rwh
13:50:54 <lambdabot> http://www.realworldhaskell.org/blog/ http://book.realworldhaskell.org/read/
13:50:58 <dkc> maltem: Nope, I mean the Haskell Platform 2010.1
13:51:02 <jmcarthur> dankna: the point of the type class version?
13:51:06 <not_nathan> sclv : Thank you. That is very helpful.
13:51:08 <sinelaw> alsd those links are good places to start learning haskell.
13:51:09 <dankna> ya
13:51:11 <sclv> I think part of the point would be just to get the edison libs in shape to (potentially) replace the standard containers lib as a drop in
13:51:20 <dankna> I have it pasted into my editor and indented to my taste and am kinda gazing at it
13:51:24 <dankna> and it is gazing back at me
13:51:34 <not_nathan> Yeah. I've been reading through bits of the Edison libs.
13:51:40 <maltem> oh, so the platform is named by year too
13:51:42 <jmcarthur> dankna: one advantage would be that the full syntax tree needn't ever exist in memory
13:51:49 <sclv> There's more contentious issues about how one might want to refactor the interface, which is troublesome, since there's lots of code that depends on the API remaining the same.
13:51:57 <sclv> So there'd need to be very strong legacy support at the least.
13:52:16 <sclv> Then there's the perennial push towards "Generic Tries" (google for good discussion), but that's often too researchy.
13:52:19 <jmcarthur> dankna: another is that you can have as many alternative implementations as you want
13:52:30 <dankna> so with the type-class version, a statement is something that can be serialized
13:52:55 <sclv> Then finally I'd list some work towards clojure-style data structures which combine a pure interface with some dirty tricks to allow efficient construction via hidden mutation.
13:53:19 <sclv> But that's potentially researchy too (although a port of a few of clojure's libs, just as a proof of concept, would be awesome!)
13:53:29 <jmcarthur> dankna: another is that type classes are nice because client code can instantiate them. for example, you could do something like instance Statement a => Statement (Maybe a), and then you can use the same combinators for even higher level ideas
13:53:44 <jmcarthur> dankna: not necessarily serialized. that's just one possible implementation
13:53:57 <sclv> ghc 6.12 has been burning cpu compiling this file for the last half hour.
13:53:59 <jmcarthur> dankna: it's just a statement. what it does depends on the instance
13:54:10 <dankna> oh, I misunderstood.  a statement is something that can be "explained" or "committed" (unfortunate choice of term there - it confused me because one of the possible statements is called COMMIT!)
13:54:13 <sclv> Either it breaks/loops the typechecker, or it just makes it go superexponential.
13:54:24 <sclv> back with 6.10 this was 2-4 minutes at most.
13:54:30 <jmcarthur> dankna: exactly! (at least in my shortened example)
13:54:41 <maltem> dkc, looks like it wasn't a terribly good idea to put the platform download on the fragile hackage host :/
13:54:43 <sinelaw> jmcarthur did you happen to read my blog post?
13:54:50 <dankna> oh that's why hackage is so slow - duh
13:55:06 <dkc> maltem, especially after the haskell platform made the front page on hacker news
13:55:16 <jmcarthur> dankna: for the full implementation, it would be anything than can do the things that you GADT's constructors currently represent
13:55:22 <jmcarthur> *your
13:55:27 <dankna> hmm
13:55:41 <dankna> well, they don't represent anything yet because this is all stubs :)
13:55:48 <dkc> are any of you willing to make a torrent of the full download? leaving a link to it on HN would probably alleviate a lot of the load from hackage
13:55:50 <dankna> I haven't figured out what fields each statement type needs yet
13:55:54 <jmcarthur> sinelaw: i skimmed it, but i haven't really been on my computer much this weekend. i've been sickly. i only just got back on again since i'm at work now
13:56:06 <dankna> dkc: I'm willing to be a seed, but I don't /have/ the full download yet
13:56:10 <sinelaw> jmcarthur, oh i hope you feel better soon
13:56:17 <ksf> sclv, care to do cache-oblivious trees while you're at it?
13:56:25 <jmcarthur> dankna: yeah, and it's interesting to note that the fields of your GADT are parameters of the type class functions
13:56:34 <dkc> dankna, well, mine only has 12 hours left ;)
13:56:41 <danderson> alternatively, append ".nyud.net" to the download link URLs
13:56:53 <dankna> dkc: ah haha.  well talk to me twelve hours from now and I'll see what I can do :)
13:56:54 <danderson> get the file pushed into the Coral CDN
13:57:19 <ksf> sclv, I came to the guessticlusion that the right way to do many, many of these things is not to implement them in application code, but to teach the gc how to deal with it.
13:57:28 <danderson> that way you don't even need to update HN
13:57:34 <danderson> just the website
13:57:37 <danderson> dons: ^ ?
13:57:43 <sclv> ksf: part of the research qeustion, I think, is the minimal extension to ghc to make this stuff easy.
13:57:49 <jmcarthur> dankna: using your more verbose notation:  class Statement s a where explain :: s NoStatementType -> s (JustStatementType (s NoStatementType)) ; commit :: s NoStatementType
13:58:01 <jmcarthur> dankna: if you didn't see the tie with your GADT before, maybe you will now
13:58:23 <sclv> if we had a whole soc project that resulted in a decision to add the one right new primitive operation to ghc, it would be well worth it.
13:58:45 <dankna> oh!  yes, I see
13:59:28 <ksf> the gc could, for example, sort each and every element in van emde boas layout, with the current thunk as the root
13:59:31 <benmachine> base's Text/Printf.hs mixes tabs and spaces :O
13:59:36 <ksf> (dunno if that really makes sense)
14:00:02 <ksf> ...or is feasible in the general case.
14:00:48 <dankna> I dunno, I actually am looking at both versions of this now and I think ksf's L0 L1 model is purtier.  it's fewer data declarations.
14:01:06 <ksf> i've got a LO L1 model?
14:01:20 <ksf> my subconscious must be doing more work than I'd want it to.
14:01:21 <dankna> sorry, I mean kmc
14:01:23 <dankna> one of those tlas
14:02:40 <ksf> the idea of cache-obliviousness is that you're independent of any cache size which implies that if you work optimal over L0 and L1 cache, you're also optimal over anything from L0 to disk or net.
14:03:27 <ksf> ...while cache-oblivious algorithms are usually within a constant factor of cache-conscious ones, and of course way more general.
14:04:13 <Phyx-> why does ghc's configure script ignore --with-gcc ?
14:04:45 <glguy> *stop downloading the Haskell Platform, you are killing my Internet access!!*
14:04:53 <ksf> because the default build.mk doesn't build with -via-C?
14:05:05 <ksf> ...that's where you should do such stuff, anyway.
14:05:35 <Phyx-> ksf: but it's autodetecting to the inplace gcc, which is failing it's own tests
14:06:28 <ksf> I don't think ghc really needs gcc for anything but configure scripts.
14:06:51 <ksf> anyway, wth do you have a defunct gcc in your path?
14:06:55 <balor> I want to say  edges = \bigcup forall x \in n : (Edge cell x) i.e. edges are the union of edges created from cell and its neighbours.  I'm being dumb, can someone give me a hint?
14:07:15 <jlouis> glguy: hehe
14:07:48 <drmans> Face it my dear friends - haskell will never be used in real industry.
14:08:00 <sinelaw> pffffff
14:08:00 <drmans> Its too functional
14:08:02 <medfly> big fucking deal...
14:08:08 <ksf> yep.
14:08:10 <ksf> he's right.
14:08:21 <medfly> this channel will remain as lovely as it is
14:08:25 <medfly> I'm about to sob
14:08:25 <ksf> real industry is based on wasting bucks, and you can't do that with haskell.
14:08:29 <drmans> </strange nonsense talk>
14:08:37 <balor> Even the forall x \in n: (Edge cell x).  That could be a lambda expression. map (\x<- n) (Edge cell \x) right?
14:08:58 <kmc> yes only dysfunctional languages are used in real industry
14:08:58 <jmcarthur> dankna: it's up to you (although i don't see how the type class solution results in more data declarations instead of fewer...)
14:09:11 <dankna> jmcarthur: I'll show you in a sec
14:09:24 <dankna> I worked it up the other way and am halfway through working it up this way
14:09:32 <jmcarthur> dankna: alright cool
14:09:38 <drmans> Could someone maybe help me? When I try to start up a *.hs file under windows, it opens ghci, does some loading but doesn't actually execute the program
14:09:46 <benmachine> balor: your use of forall is a little odd
14:09:58 <benmachine> balor: is your meaning a bit more like, for each?
14:10:11 <Twey> drmans: If it loads the file into GHCi, just type ‘main’ to execute your program's entrypoint.
14:10:13 <jmcarthur> drmans: if you are trying to execute it you should either use runghc to interpret it directly or use ghc to build it and then run the binary
14:10:15 <benmachine> I'm used to forall being used in logical statements
14:10:19 <balor> benmachine: yup
14:10:42 <balor> benmachine: I'm ashamed to say I'm a computer scientist gone bad.
14:11:12 <drmans> Twey: Not really sure on how to do that
14:11:14 <benmachine> balor: well, a "for each" kind of expression is usually done with map, yes, but your syntax is slightly off
14:11:31 <drmans> And why does the Haskell Platform come with perl? eek! ^^
14:11:37 <benmachine> map (\x -> Edge cell x) n -- is more like it
14:11:50 <Twey> drmans: You press the ‘m’ key, then the ‘a’ key, then the ‘i’ key, then the ‘n’ key, then press the big button marked ‘Return’ or ‘Enter’, or sometimes it just has a little arrow going down and to the left
14:11:51 <ksf> ha! fall prey to the evil mangler!
14:11:52 <balor> benmachine: thanks
14:12:03 <jmcarthur> drmans: ghc's gcc backend (not used by default anymore) uses a perl script to munge some things around after running gcc on it
14:12:08 <benmachine> balor: that's probably not a complete answer though, just my thoughts
14:12:09 <drmans> oh
14:12:15 <drmans> Twey: Thanks.
14:12:29 <Twey> I don't see why we can't at least make the Mangler optional.
14:12:31 <balor> benmachine: That's enough, thanks.  I can figure the rest out.  Just needed a starting point
14:12:44 <jmcarthur> Twey: it's getting to the point that that would be nice to have
14:12:52 <Twey> I mean, Windows won't have gcc by default anyway
14:12:58 <jmcarthur> drmans: the perl script is known as the Evil Mangler
14:13:01 <ksf> Twey, afaik the new codegen will get rid of it
14:13:04 <Twey> Doesn't it make sense to split it into another package?
14:13:06 <Twey> Oh good
14:13:10 <aavogt> @pl map (\x -> Edge cell x) n
14:13:10 <lambdabot> map (Edge cell) n
14:13:10 <Botje> .. or we could rewrite the mangler in pure haskell
14:13:20 <Twey> Botje: I think it's too evil to be rewritten
14:13:26 <Twey> Nobody really understands what it does
14:13:26 <jmcarthur> Botje: it's just a series of incomprehensible regexes
14:13:30 <ksf> ...and call it the purely evil mangler.
14:13:34 <Twey> Heheh.
14:13:37 <Botje> ksf++
14:14:19 <Cale> It's already somewhat obsolete, in that compiling via C isn't the default anyway.
14:14:39 <ksf> ...porting the evil mangler to perl6 and use pugs?
14:14:44 <jmcarthur> Botje: you want to port it? go right ahead: http://darcs.haskell.org/ghc/driver/mangler/ghc-asm.lprl
14:15:07 <Botje> i'm in the middle of a paper right now, but sure :)
14:15:24 * jmcarthur wouldn't touch it with a 10 foot pole
14:15:44 <Botje> hey, i /like/ perl :)
14:16:08 <jmcarthur> this isn't about perl. this is about the mangler
14:16:25 <jmcarthur> but i don't like perl either, so that's double the evil
14:16:34 <Cale> I've met someone who understood what it does
14:17:37 <dankna> http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24253
14:17:41 <dankna> okay, so I added two revisions
14:18:00 <dankna> the first revision is my understanding of how this would work with kmc's L0 L1 thing.  it's fairly clear to me, which is a virtue in itself.
14:18:07 <sinelaw> Cale so you disposed of him, right?
14:18:15 <jmcarthur> dankna: that is not at all what i meant ;)
14:18:17 <ksf> ...I think we can dump the whole gcc backend.
14:18:23 <dankna> yeah I kinda realized that it couldn't be
14:18:28 <Desustorm> hmm is there a way to write a function which finds all the multiples of all the numbers in a given list without writing a lot of functions?
14:18:40 <jmcarthur> dankna: i'll give it a shot
14:18:43 <dankna> I think I have some fundamental misunderstanding of - okay
14:18:44 <benmachine> &init_FUNNY_THINGS();
14:18:45 <benmachine> giggle
14:18:49 <Botje> Desustorm: /all/ the multiples? where do you want to stop? :)
14:18:54 <ksf> llvm seems to be a way better target.
14:19:02 <Desustorm> it's infinite :)
14:19:34 <Botje> Desustorm: 1) generate all multiples of each element separately 2) merge all these lists together in a sorted order
14:19:35 <benmachine> Desustorm: what order?
14:19:45 <benmachine> oic
14:19:58 <Cale> His (Wolfgang Thaller's) opinion was that there's not much point in rewriting it in Haskell, since the job that it does is really ad-hoc and well-suited to perl anyway, and the C backend was already on its way out at the time.
14:20:01 <maltem> Desustorm, liftM2 (*) [1..]
14:20:15 <maltem> (if the list is finite)
14:20:43 <benmachine> > liftM2 (*) [1..] [3,100]
14:20:44 <Desustorm> what does liftM2 do?
14:20:44 <lambdabot>   [3,100,6,200,9,300,12,400,15,500,18,600,21,700,24,800,27,900,30,1000,33,110...
14:20:45 <maltem> or wait, maybe the other list comes first
14:20:54 <maltem> no, looks good
14:20:54 <Desustorm> i see
14:21:09 <franka> Good lord, 680 people.
14:21:20 <Desustorm> nice, i didnt know that that function did that
14:21:32 <Desustorm> http://www.zvon.org/other/haskell/Outputmonad/liftM2_f.html didn't look like it did much at all :p
14:21:37 <Twey> :t liftM2
14:21:39 <lambdabot> forall a1 a2 r (m :: * -> *). (Monad m) => (a1 -> a2 -> r) -> m a1 -> m a2 -> m r
14:21:43 <Twey> It does all sorts.
14:21:52 <Twey> Depending on where you use it.
14:22:14 <aavogt> I have a question regarding how to encode something in a type-level program: http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24258#a24258
14:22:22 <maltem> Desustorm, note that it's equivalent to   do x <- [1..]; y <- list; return (x*y)     as well as     [ x*y | x <- [1..], y <- list ]
14:22:25 * Cale doesn't understand why people use the zvon.org documentation
14:22:27 <Twey> (a -> b -> r) -> [a] -> [b] -> [r]
14:22:37 <Twey> Looks almost like it should be zipWith, really
14:22:40 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
14:22:49 <franka> Heya, Cale.
14:22:51 <Twey> Cale: High Google-rating
14:22:56 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/base-4.2.0.0/Control-Monad.html#v%3AliftM2
14:23:01 <Cale> hello
14:23:05 <drmans> Does haskell, as it is truly functional, currently take advantage of dual|quadro|...-core processors?
14:23:13 <benmachine> liftA2 *is* zipWith in the right context :P
14:23:21 <Twey> No it isn't
14:23:25 <franka> Cale Gibbard?
14:23:31 <Twey> > zipWith (*) [1 ..] [3, 100]
14:23:33 <lambdabot>   [3,200]
14:23:38 <maltem> drmans, see Control.Concurrent and Control.Parallel
14:23:38 <Twey> > liftM2 (*) [1 ..] [3, 100]
14:23:39 <lambdabot>   [3,100,6,200,9,300,12,400,15,500,18,600,21,700,24,800,27,900,30,1000,33,110...
14:23:39 <Cale> franka: yep
14:23:44 <Twey> See?  Different ☺
14:23:49 <Desustorm> Cale, because it has nice examples that aid understanding/learning
14:23:59 <franka> Just checking. :)
14:24:14 <benmachine> > getZipList $ liftA2 (*) (ZipList [1 ..]) (ZipList [3, 100]) -- for a sufficiently generous meaning of context :P
14:24:15 <lambdabot>   [3,200]
14:24:15 <glguy> getZipList $ liftA2 (*) (ZipList [1 ..]) (ZipList [3, 100])
14:24:19 <jmcarthur> > getZipList $ liftA2 (*) (ZipList [1..]) (ZipList [3,100])
14:24:19 <Cale> Desustorm: Ah, that is something which seems to be missing from most of the haddock documentation.
14:24:20 <lambdabot>   [3,200]
14:24:27 <ksf> drmans, doing it automatically is one of insane or impossible, but doing it manually is a piece of cake in pure code
14:24:28 <Desustorm> > sort (liftM2 (*) [1 ..] [3, 100])
14:24:33 <lambdabot>   mueval-core: Time limit exceeded
14:24:36 <Desustorm> ~_~
14:24:42 <Desustorm> > take 10 sort (liftM2 (*) [1 ..] [3, 100])
14:24:44 <lambdabot>   Couldn't match expected type `[a]'
14:24:44 <lambdabot>         against inferred type `[a1] -> [...
14:24:45 <ksf> ...and for monadic code, we've got the best libraries you can hope for.
14:24:52 <Desustorm> > take 10 (sort (liftM2 (*) [1 ..] [3, 100]))
14:24:53 <benmachine> you can't sort an infinite list
14:24:58 <lambdabot>   mueval: ExitFailure 1
14:24:59 <Desustorm> bah :p
14:25:02 <Twey> In finite time ;)
14:25:04 <benmachine> at least not in general
14:25:14 <aavogt> if your values are bounded...
14:25:19 <maltem> > getZipList $ liftA2 (*) (ZipList [1,2,3]) (ZipList [4,7,31])
14:25:22 <lambdabot>   [4,14,93]
14:25:26 <Twey> Does it actually take advantage of that?
14:25:33 <Taejo> aavogt: I don't see how boundedness helps
14:25:37 <ksf> aavogt, and they don't contain duplicates...
14:25:43 <aavogt> Taejo: you could get a list of minBound
14:25:47 <maltem> oops. I've been two minutes late
14:25:47 <franka> What is your question, aavogt?
14:25:51 <Twey> Taejo: Because if you find a value of minBound, you can move it immediately to the start without looking at the rest
14:25:55 <ksf> ...which'd mean that the list would be bounded.
14:26:01 <Twey> So it's productive
14:26:10 <franka> Second two instances look identical.
14:26:15 <aavogt> franka: is this coherent enough: To encode that  if r   contains any labels :: l, they must have type v?
14:26:17 <benmachine> if your list doesn't contain minBound you're screwed
14:26:20 <ksf> Twey, but you can't tell whether or not there's another minBound element somewhere at infinity or beyond.
14:26:20 <Twey> > take 10 $ sort ([0 ..] :: Word8)
14:26:21 <franka> oop, not
14:26:22 <lambdabot>   Couldn't match expected type `GHC.Word.Word8'
14:26:22 <lambdabot>         against inferred type...
14:26:32 <Twey> > take 10 $ sort ([0 ..] :: [Word8])
14:26:33 <lambdabot>   [0,1,2,3,4,5,6,7,8,9]
14:26:38 <aavogt> franka: well it works as-is, I want to encode an additional invariant
14:26:45 <Twey> > take 10 $ sort ([255, 254 ..] :: [Word8])
14:26:46 <lambdabot>   [0,1,2,3,4,5,6,7,8,9]
14:26:46 <ksf> so you can't ever advance to minBound+1
14:26:47 <benmachine> Twey: hah, sneaky
14:26:54 <Twey> Wow, it works
14:26:57 <Twey> ♥
14:27:09 <benmachine> only because none of those lists are infinite :P
14:27:13 <dankna> ?
14:27:15 <glguy> that isn't an infinite list
14:27:15 <Twey> Oh, bugger
14:27:24 <Twey> > take 10 $ sort (cycle [255, 254 ..] :: [Word8])
14:27:32 <lambdabot>   mueval: ExitFailure 1
14:27:32 <Twey> ☹
14:27:37 <Desustorm> bad times
14:27:40 <benmachine> > take 10 $ sort ([5,4 ..] :: [Word8])
14:27:42 <Twey> Well, *in theory* you could do it.
14:27:44 <lambdabot>   [0,1,2,3,4,5]
14:27:51 <ksf> Twey, nope.
14:27:53 <glguy> :t sort
14:27:56 <lambdabot> forall a. (Ord a) => [a] -> [a]
14:28:01 <Twey> ksf: At least for minBound
14:28:02 <ksf> all you can do is collect minBound elements, for eternity.
14:28:09 <Twey> It's productive.  Sort of.
14:28:17 <glguy> sort doesn't claim to know anything about the type being bounded, so it can't use that information
14:28:24 <Twey> *nod*
14:28:34 <benmachine> in theory you could get a sort function that has an extra class constraint for one specific case that isn't very useful anyway
14:28:35 <Twey> Could've been a compiler optimisation.
14:28:58 <franka> Surprised it compiles. I would place a newtype around v's.
14:29:03 <aavogt> franka: yeah, they overlap but the more specific instance gets chosen when the types match up
14:29:32 <franka> One instance for WantedType v and one for UnwantedType v.
14:29:42 <dankna> Mar 22 16:35:06 <benmachine>	what's wrong with data Statement = St NormalStatement | Explain NormalStatement; data NormalStatement = Select ...
14:29:45 <ddarius> Hey franka.  Long time, no see.
14:29:53 <franka> Heya, ddarius.
14:30:05 <franka> Yes, I was in the hole.
14:30:08 <dankna> maybe nothing, now that I have it in front of me
14:30:44 <franka> Padded cell.
14:31:10 <franka> I am the Haskell version of Gregg House.
14:31:14 <jmcarthur> dankna: more what i meant: http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24253#a24259
14:31:34 <franka> Or maybe that's Cale.
14:31:44 <dankna> oh hmmmm
14:32:15 <jmcarthur> dankna: now if you look back above at the benefits i said this might have they might make more sense :)
14:32:15 <BenM99> does anyone have a torrent for http://hackage.haskell.org/platform/windows.html as the website download is really slow at the moment
14:32:17 <aavogt> franka: hmm, I think I can do something like HOccurs
14:32:24 <dankna> but what about adding clauses to particulart ypes of statement
14:32:32 <jmcarthur> dankna: one major downside is you can't do deep pattern matching which this one
14:32:35 <aavogt> err, HOccursBool
14:32:36 <dankna> you're representing it as a string
14:32:38 <jmcarthur> dankna: what do you mean?
14:32:45 <jmcarthur> dankna: in that one representation i am
14:32:47 <Twey> Wow, it really is slow.
14:33:03 <Twey> Why don't we have any mirrors?
14:33:06 <jmcarthur> dankna: you said that you would be basically generating a query string from this, right?
14:33:11 <dankna> yes, I did
14:33:18 <jmcarthur> dankna: with this version that is done as it's constructred
14:33:19 <srush> I'm trying to implement a timer in SDL
14:33:36 <srush> but the haskell bindings don't seem to have SDL_AddTimer
14:33:39 <jmcarthur> dankna: and you still get the type safety of the GADT version
14:33:43 <srush> is there a way around this?
14:34:07 <jmcarthur> dankna: if you take L0 = () and L1 = s ()
14:34:12 <benmachine> srush: threads threads threads
14:34:21 <dankna> jmcarthur: let me work with your version a minute and completely model the clauses of one of the statement types to see if I understand how to do it
14:34:22 <jmcarthur> dankna: that's just my abbreviated notation, which happens to be syntactically nice
14:34:26 <benmachine> all problems can be solved with threads
14:35:01 <srush> that seemed kind of hacky
14:35:30 <ksf> forkIO (threadWait 20000 >> putStrLn "Timer!")
14:35:51 <benmachine> srush: you'd probably have to be quite clever to make it work well and synchronised, but haskell threads are a lot cheaper and simpler and easier than you might expect
14:35:55 <ksf> forkIO . forever (threadWait 20000 >> putStrLn "repeating timer!")
14:36:03 <balor> Given the type signature f::[a]->[b] and given that I know I want my b's to be Edges, does it make sense to have the signature as f::[a]->[Edge b]?
14:36:05 <franka> aavogt: Not sure how HOccurs is written. My rule of thumb with type classes is to avoid overlapping intstances.
14:36:19 <benmachine> forkIO . forever $ surely
14:36:26 <dankna> http://www.sqlite.org/lang_dropview.html -- the one I'm going to try to model, because it's nice and simple and doesn't recurse on statements
14:36:26 <srush> ok, cool
14:36:43 <ksf> oh theres a $ missing there.
14:36:55 <ksf> ...the worst part about . is $.
14:37:10 <franka> Who is cjay?
14:37:15 <dankna> http://www.sqlite.org/lang_createtrigger.html -- a much more complicated one that has to also be possible, but I don't see a reason it wouldn't be
14:37:18 <jmcarthur> dankna: anyway, advantages include not constructing an entire AST in memory, ability to have multiple representations depending on how it is to be used, and ability to overload the operations for higher level types
14:37:35 <dankna> not constructing an entire AST is indeed an advantage
14:37:39 <cjay> franka: lol whut
14:37:42 <jmcarthur> dankna: that last one meaning things like instance Statement a => Statement (Maybe a)
14:37:50 <dankna> right okay, hmm
14:38:07 <franka> Oh, nvm, I thought you might be Barry Jay.
14:38:12 <dankna> I see what you mean by higher level types, I believe
14:38:16 <cjay> nope :)
14:38:24 <Desustorm> is there a way to write a function which finds all the multiples of all the numbers in a given list giving a sorted list with no repeats? ;-;
14:38:44 <jmcarthur> dankna: all types that are instances of Applicative can be lifted in that way, but they aren't necessarily the only ones
14:38:59 <dankna> hmm
14:39:09 <jmcarthur> dankna: snap, i did that wrong
14:39:09 <Desustorm> the only approach i can think of is so very horribly inefficient
14:39:14 <jmcarthur> you can't do Maybe like i just said
14:39:19 <jmcarthur> or applicative types
14:39:25 <jmcarthur> it would require a type level combinator
14:39:29 <jmcarthur> forget i said anything :)
14:39:32 <dankna> haah
14:40:02 <jmcarthur> dankna: the other advantages hold at least :)
14:40:16 * dankna nods
14:40:17 <franka> I think the last time I was here there were 200 members tops.
14:40:34 <franka> And we used to talk about women with big boobs.
14:40:35 <jmcarthur> dankna: and that last one also holds for some types, but it's less simple than i thought
14:40:47 <franka> Or something.
14:41:02 <franka> Ah, those were the days.
14:41:21 <ksf> franka, -> haskell-blah
14:41:26 <dankna> okay, so supposing I want the real type of dropView to be
14:41:27 <dankna>   dropView :: Bool -> (Maybe String) -> String -> s ()
14:41:31 <franka> How am I supposed to railroad the discussion into something interesting with 600 people itching to talking about Haskell?
14:41:41 <franka> Oh yeah, that thing. :)
14:41:43 <Desustorm> ^_^
14:41:44 <dankna> it's not clear to me how I write the instance method for it
14:41:45 <fatalerrorx> i want to put up a haskell forum will anyone come and post?
14:41:59 <ksf> fatalerrorx, nope.
14:42:05 <ksf> we've got mailing lists
14:42:14 <ksf> ...which are indexed on gmane
14:42:17 <fatalerrorx> that kind of sucks though
14:42:35 <fatalerrorx> a proper forum is more accessible
14:42:41 <ksf> and haskell users don't seem to be the kind of people who prefer forums over nntp/smtp
14:42:52 <fatalerrorx> ya i guess so
14:43:04 <jmcarthur> dankna: the bool is "IF EXISTS", the maybe string is a database name and the string is a view name?
14:43:09 <dankna> correct
14:43:42 <jmcarthur> dankna: how would you implement the perform function for the GADT constructor version of it?
14:43:44 <Alpounet> fatalerrorx, and there's stackoverflow/haskell
14:43:49 <dankna> um, one sec
14:43:54 <ksf> for the entry level stuff, there's enough wiki pages, online tutorials and of course irc
14:43:59 <jmcarthur> dankna: because that's essentially the same thing you would do for the type class version :)
14:44:30 <ksf> ...you can't ask questions about monads around here without cale coming up with yet another monad tutorial.
14:44:42 <glguy> fatalerrorx, if it makes you feel better, you wouldn't be the first person outside of the community to make a forum that no one used ;)
14:44:52 <fatalerrorx> lol
14:45:15 <fatalerrorx> glguy: i wanted to put one up wanted
14:45:25 <fatalerrorx> notic past tense :)
14:45:45 <fatalerrorx> shattered my dream of a nice haskell forum
14:46:10 <fatalerrorx> mailing list are inaccessible to alot of people
14:46:31 <fatalerrorx> stackoverflow isn't really about discussion
14:46:31 <RyanT5000> what's the preferred way these days to get a calendar-based local system time?
14:46:54 <RyanT5000> liftM Data.DateTime.toGregorian $ getCurrentTime gives me UTC
14:47:01 <fatalerrorx> all other pls have a forum
14:47:14 <zygoloid> fatalerrorx: yes, and it's stack overflow :)
14:47:18 <fatalerrorx> even erlang has a forum
14:47:30 <dankna> http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24253#a24260
14:47:34 <bavardage> is it possible to 'construct' types
14:47:37 <dankna> So, like this.
14:47:47 <zygoloid> bavardage: you mean, at runtime?
14:47:47 <bavardage> so like a type taking an integer
14:47:48 <fatalerrorx> zygoloid: stackoverflow is more q and a insn't it
14:47:52 <bavardage> zygoloid: kinda
14:48:03 <dankna> I am failing to wrap my mind around why we're using StatementStr instead of just String
14:48:20 <zygoloid> fatalerrorx: yeah. if you want something more discussiony, i guess the haskell-cafe ML is the place
14:48:22 <bavardage> I want a type which is like the first 'n' naturals
14:49:46 <fatalerrorx> glguy: has a haskell forum been put up before?
14:50:08 <glguy> fatalerrorx, every once and a while someone gets the idea to do it and then comes here asking for visitors
14:50:11 <glguy> and then it goes away
14:50:17 <jmcarthur> dankna: first of all, String doesn't take a type parameter
14:50:36 <jmcarthur> dankna: but using the newtype wrapper also mean we can have full abstraction. the implementation can be hidden
14:50:40 <jmcarthur> *also means
14:50:42 <dankna> hmm
14:50:50 <fatalerrorx> glguy: lol
14:51:30 <dankna> okay.  now how do I model http://www.sqlite.org/lang_createtrigger.html ?  Notice in particular that part at the end where it allows an entire statement, but only if it's one of four particular statement types.
14:52:02 <dankna> (end of the railroad diagram, not of the page.  don't bother reading the rest of the page, it's just semantics)
14:52:19 <jmcarthur> dankna: more to the point, we *want* the implementation hidden because we don't want client code to be able to make badly typed queries (StatementStr "I'm cheating, haha!" :: StatementStr ())
14:52:29 <dankna> jmcarthur: oh.  right, hahaha.
14:52:47 <jmcarthur> dankna: how would you do that with GADTs?
14:52:56 <dankna> well, I'm not sure, but give me a moment :)
14:53:00 <jmcarthur> dankna: the type class approach would be the same :)
14:53:04 <dankna> hrm.
14:53:46 <jmcarthur> dankna: probably needs to be part of the type parameter, or perhaps an additional parameter
14:53:52 <dankna> since I haven't used GADTs before, I need to work it out...
14:54:06 <jmcarthur> dankna: yeah take your time. i should be working anyway ;)
14:54:23 * ksf thinks wanting haskellers to use a forum is like wanting knuth to use email.
14:54:39 <dankna> jmcaruthur: yeah - thanks for your time :)
14:55:04 <ksf> fatalerrorx, there's reddit.com/haskell, btw.
14:55:24 <ksf> I guess that's the clostest thing we have to a forum
14:55:34 <ksf> ...with the important feature that reddit is threaded.
14:55:50 <ksf> and user-moderated.
14:57:10 <fatalerrorx> ksf: i guess so
14:59:12 <fatalerrorx> I think people would use the forum if someone linked to it on the haskell wiki
14:59:48 <ksf> tbh, I don't like the idea of making personal help too accessible.
14:59:57 <jmcarthur> dankna: i'm leaving now but will be back later tonight, most likely
15:00:02 <jmcarthur> dankna: good luck!
15:00:05 <ksf> it should be easier to consult existing docs
15:00:13 <dankna> jmcarthur: thank you!
15:00:31 <Desustorm> ksf, as it stands, it's not
15:01:28 <ksf> Desustorm, haskell.org -> learning
15:03:21 <medfly> this conversation is starting to get a bit silly
15:03:32 <medfly> you don't like walter lewin, you think physics should be a bit more dry, even though it's an introductory course
15:03:41 <medfly> oh
15:03:43 <medfly> sorry...
15:03:46 <Twey> medfly: :þ
15:03:50 <medfly> :-D
15:03:55 * medfly dies of embarrassment.
15:03:56 <olsner> silly indeed
15:03:59 * medfly goes to #physics
15:04:11 * Twey likes his physics wet
15:04:28 * erikc likes his physics rigid
15:04:40 <olsner> if you died of embarrassment, wouldn't you rather end up in #metaphysics?
15:04:49 <olsner> possibly #paraphysics
15:05:26 <exim> Hi all. Any idea when Haskell Platform 2010 will be released for Windows? (It was supposed to be released on March 21, at ZuriHac...)
15:05:51 <fatalerrorx> when chickens roost
15:08:13 <fatalerrorx> has anyone tried mining information from irc?
15:08:51 <lament> serchirc.com ?
15:08:54 <fatalerrorx> people ask lots of different info that information extraction could help others
15:09:04 <medfly> I think the logs of this channel are public
15:09:07 <medfly> for example
15:09:18 <fatalerrorx> not really what i had in mind
15:09:30 <fatalerrorx> has to be more organised an fluff removed
15:09:39 <bavardage> how do I define a derivable type class?
15:11:11 <ksf> bavardage, you don't
15:11:21 <ksf> there's a package to do such things with TH, though.
15:11:38 <fatalerrorx> like that jus ther
15:12:02 <fatalerrorx> if we had a smart bot it would put that up automatically on a site
15:12:09 <ksf> ...except for newtypes. you can derive any class the base type implements if you enable GeneralisedNewtypeDeriving
15:12:58 <ksf> fatalerrorx, and I wouldn't have any channel left where I can feel at least partly competent.
15:13:01 <ksf> bad idea.
15:13:07 <fatalerrorx> naw
15:13:20 <byorgey> so, I'm going to be teaching a half-credit course in the fall on Haskell, with an emphasis on cool real-world applications.  any topic suggestions?
15:13:32 <fatalerrorx> not games
15:13:45 <ksf> xmonad, of course.
15:13:55 <ksf> but I guess you get more attention with torroid
15:14:03 <erikc> is there (has there been development of) a win64 ghc port?
15:14:35 <byorgey> sorry, I don't mean 'applications' in the sense of 'programs' but in the sense of 'ways to apply Haskell'
15:14:51 <kmc> how about the functional graphics stuff
15:14:52 <ksf> ...wouldn't that be applications?
15:14:53 <kmc> Pan etc.
15:15:09 <ksf> I don't get your semantic drift, there.
15:15:29 <mm_freak_> what's haskell-c-mode
15:15:30 <mm_freak_> ?
15:16:28 <aavogt> bavardage: the derive package can make those derivations from a single example
15:16:31 <Twey> mm_freak_:
15:16:32 <Twey> haskell-c-mode                M-x ... RET Major mode for Haskell FFI files.
15:16:38 <bavardage> aavogt: oooh I'll look into it
15:16:54 <bavardage> any nice tuts?
15:17:19 <aavogt> but that's only for typeclasses which meet pretty specific requirements
15:17:19 <bavardage> aha found some
15:17:24 <bavardage> hrmm
15:17:46 <aavogt> and you have to be careful about naming stuff in the example derivation
15:17:47 <bavardage> I dunno, I really just want a way of making types like {1,2,3,3..n}
15:17:48 <bavardage> for some n
15:18:14 <bavardage> yes, this is a set
15:18:20 <bavardage> BLEH I don't know the terminology
15:18:30 <aavogt> well what do you do with those?
15:18:33 <bavardage> so any valid thingy of the type is one of the elements in the set
15:18:45 <bavardage> enumerate over them... kinda
15:18:53 <bavardage> I'm trying to write random stuff for permutation groups
15:19:06 <bavardage> and I want to be able to restrict the permutation over types
15:19:06 <Twey> byorgey: Have you seen RWH?
15:19:14 <bavardage> and so like for Sym(3)
15:19:17 <mm_freak_> Twey: ah, thanks
15:19:18 <Twey> It has lots of cool real-world apps, like a bar-code parser
15:19:28 <bavardage> I'd want to have Permutation FirstThreeInts
15:19:29 <Twey> mm_freak_: C-h a haskell-c-mode
15:19:37 <aavogt>   class C a -- types that are an instance of this one sort of form a set, but you can't enumerate them
15:19:37 <bavardage> where FirstThreeInts is some type
15:20:00 <bavardage> hmm
15:20:03 <mm_freak_> Twey: haven't thought of that…  emacs has just too many features
15:20:15 <bavardage> I *think* I need Eq, Bounded, Enum
15:20:48 <aavogt>   class C a where fromInt :: Int -> a -- this could work... but of course    map fromInt [1..3]  gives you a list of all one type
15:21:16 <bavardage> hmmmm
15:21:27 <aavogt> maybe combined with an existential data:     data C' = forall C a => C' a
15:21:59 <aavogt> then (C' . fromInt)  is a function you can make such a list
15:22:14 <bavardage> I really want to do something like    type Sym n = Permutation (FirstNNats n)
15:22:21 <bavardage> where (FirstNNats n) is a type in itself
15:22:26 <aavogt> but that's pretty useless because you can't do anything with those values
15:22:41 <fax> bavardage, this is too advanced for haskell
15:22:47 <bavardage> :(
15:22:48 <bavardage> really?
15:22:52 <bavardage> I thought haskell could do anything :D
15:23:12 <fax> bavardage, you can just defined   type FirstNNats n = Nat
15:23:18 <benmachine> @faq can Haskell admit its flaws?
15:23:18 <lambdabot> The answer is: Yes! Haskell can do that.
15:23:20 <fax> and then use it as if it were the first n
15:23:27 <bavardage> yuhhh
15:23:29 <bavardage> I guess
15:23:34 <bavardage> I wanted proper restriction
15:23:51 <aavogt> you can write a class to compare Nats
15:23:53 <bavardage> then I could have created cayley notation just by enumerating over all elements in the type though
15:23:59 <aavogt> where the Nats have different types
15:24:54 <bavardage> hmm
15:24:55 <aavogt> classes can also be used to make a nested tuple of   (Zero, (Succ Zero, ( .... )))))
15:25:01 <bavardage> ohoo
15:25:10 <bavardage> this does sound like a possibility yes
15:25:10 <aavogt> though you have to restrict yourself to finite types
15:25:16 <bavardage> yeah I want finite types anyway
15:25:22 <bavardage> permumations are over a finite set
15:25:25 <bavardage> so finite is very good
15:25:40 <bavardage> hrm so the nested tuple route
15:25:58 <aavogt> @hackage HList
15:25:59 <lambdabot> http://hackage.haskell.org/package/HList
15:26:27 <bavardage> :o
15:26:30 <bavardage> I should use HLists?
15:27:01 <aavogt> well I don't know if you need any other operations on nested 'tuples'
15:27:23 <bavardage> and neither do I :D
15:27:26 <bavardage> heheh
15:27:30 <maltem> bavardage, “proper” handling of finite types etc. quickly leads to proving various things about the code, i. e. you get into dependently-typed / theorem-proving territory
15:27:31 <bavardage> I'll look into HLists
15:27:49 <bavardage> damn
15:27:59 <bavardage> didn't believe this would get so scary
15:28:03 <aavogt> do read the paper for that library, it is quite clear.
15:28:09 <maltem> But I'd be interested to hear how far you can get in the Haskell type system :)
15:28:53 <aavogt> but I guess unfortunately, it describes stuff being done with fundeps instead of type families which are sometimes (often?) clearer
15:29:07 <maltem> The canonical motivation is indexing an array type by the length of the array
15:30:14 <maltem> ok that's not really an example of using a finite type... I'm a little tired
15:32:57 <aavogt> maltem: nonempty lists for safe head?
15:33:18 <bavardage> whuuuuh this is so strange
15:33:20 <bavardage> HLists
15:33:21 <bavardage> :|
15:33:27 <bavardage> I'm thinking maybe this is beyond me
15:33:28 <bavardage> :P
15:44:20 <dsouza> is there any way to make record syntax high-order? (e.g.: type {func=someValue}). I'd like to avoid using \type -> type {func=someValue} everytime I need this
15:45:41 <helgikrs> is it possible to create 'destructor function' in haskell? that is a function to be called when something particular is garbage collected by the gc?
15:45:48 <roconnor> dsouza: use template haskell to derive data.accessors
15:46:39 <mauke> helgikrs: yeah, with finalizers
15:46:58 <roconnor> what makes the haskell platform "standard"?
15:47:03 <roconnor> other than dons says it is
15:47:25 <dsouza> roconnor: mm. I'm not yet familiar with haskell template, but I'll try learning this. thx :-)
15:47:44 <roconnor> dsouza: probably isn't worth while unless you have a lot of that to do
15:48:38 <Twey> roconnor: What more do you need?  ;)
15:48:39 <dsouza> well, the thing I'm working on is purely for learning purposes so far, so I think that is ok.
15:49:19 <roconnor> dsouza: okay. ... I haven't learned how to do this myself though
15:50:10 <dsouza> roconnor: heh. this sounds like `danger will robinson', but I'll give it a try anyway :-)
15:50:15 <merehap> > "foo foo foo" =~ "foo" :: [String]
15:50:17 <lambdabot>   No instance for (Text.Regex.Base.RegexLike.RegexContext
15:50:17 <lambdabot>                    ...
15:50:27 <helgikrs> mauke: ah, ok thanks
15:50:27 <merehap> is there some reason this doesn't work?
15:50:37 <merehap> it was demonstrated in bos' tutorial...
15:50:47 <mauke> probably changes in the library
15:50:56 <mauke> or a missing import
15:51:13 <merehap> hm, I guess I could have missed some import
15:51:32 <merehap> though it would be surprising that that isn't included with all of the other types
15:51:42 <merehap> I'll check
15:51:50 <bavardage> is there a function to apply a function n times?
15:52:09 <bavardage> apply f n = f . f . f . f . f .... f
15:52:18 <bavardage> something like this
15:52:30 <zygoloid> apply f n x = iterate f x !! n
15:52:39 <bavardage> ooh
15:52:41 <bavardage> duh
15:52:44 <zygoloid> > iterate f x
15:52:45 <lambdabot>   [x,f x,f (f x),f (f (f x)),f (f (f (f x))),f (f (f (f (f x)))),f (f (f (f (...
15:52:45 <lispy> :t replicate
15:52:46 <lambdabot> forall a. Int -> a -> [a]
15:53:07 <bavardage> I can do a fold with replicate :D
15:53:12 <lispy> oh, right iterate
15:53:17 <zygoloid> apply f n = runEndo . mconcat . replicate n (Endo f)
15:53:18 <bavardage> fold1 (.) (replicate n f)
15:53:27 <lispy> ?src iterate
15:53:28 <lambdabot> iterate f x =  x : iterate f (f x)
15:53:30 <merehap> well I don't think I'm missing an import
15:53:52 <merehap> does anyone know how to match multiple strings in an expression using a regex?
15:53:57 * lispy is lagging out of irc
15:54:20 <sinelaw> @hoogle whileM
15:54:20 <lambdabot> No results found
15:54:21 <merehap> > "foo foo foo" =~ "foo" :: String
15:54:22 <lambdabot>   "foo"
15:54:51 <Alpounet> @type untilM . (not .)
15:54:52 <lambdabot> Not in scope: `untilM'
15:55:35 <merehap> ok, well I can certainly write my own, but there should be a library function, especially since there used to be...
15:55:40 <mfwitten> Is the Yi text editor dead on the vine?
15:55:40 <benmachine> > "foo foo foo" =~ "foo" :: MatchArray
15:55:41 <lambdabot>   array (0,0) [(0,(0,3))]
15:55:43 <mfwitten> dons: ^^^^
15:56:00 <benmachine> okay I have no idea what that even means
15:56:11 <benmachine> > "foo foo foo" =~ "foo" :: [MatchArray]
15:56:12 <lambdabot>   [array (0,0) [(0,(0,3))],array (0,0) [(0,(4,3))],array (0,0) [(0,(8,3))]]
15:56:16 <benmachine> erm
15:56:23 <merehap> benmachine: I was looking at that, and I think its a possibility, but its ugly compared to a simple list...
15:56:47 <benmachine> > "foo foo foo" =~ "foo" :: [[String]]
15:56:47 <lispy> mfwitten: someone besides dons maintains it now, and not it's not dead
15:56:49 <lambdabot>   [["foo"],["foo"],["foo"]]
15:57:00 <lispy> mfwitten: I see announcements for new versions from time to time
15:57:07 <benmachine> > "foo foo foo" =~ "fo+" :: [[String]]
15:57:08 <lambdabot>   [["foo"],["foo"],["foo"]]
15:57:41 <benmachine> > "foo bar baz" =~ "[a-z]+" :: [[String]]
15:57:43 <lambdabot>   [["foo"],["bar"],["baz"]]
15:57:46 <merehap> benmachine: huh, that will work well enough, I don't mind stripping away a layer of list, thanks!
15:57:58 <benmachine> I don't know why they're all in singleton lists but whatever
15:58:13 <merehap> I wonder if that is there for subexpression matching or something...
15:58:20 <c_wraith> almost certainly
15:58:23 <benmachine> there are SO MANY ways of returning things from regexes
15:58:32 <benmachine> > "foo bar baz" =~ "([a-z])+" :: [[String]]
15:58:33 <lambdabot>   [["foo","o"],["bar","r"],["baz","z"]]
15:58:36 <benmachine> aha
15:58:40 <benmachine> erm
15:58:46 <benmachine> I don't know what that means
15:58:50 <benmachine> but aha, sort of
15:58:55 <c_wraith> it means your capturing groups are strange.
15:59:13 <c_wraith> when you have a capturing group in a loop, it reports the last thing it captured as part of the greater expression
15:59:24 <benmachine> ah
15:59:43 <benmachine> > "foo bar baz" =~ "([a-z])([a-z]+)" :: [[String]]
15:59:44 <lambdabot>   [["foo","f","oo"],["bar","b","ar"],["baz","b","az"]]
15:59:49 <benmachine> neat
16:00:36 <merehap> haskell certainly seems to have the most powerful regex system around, but I wouldn't say that it is intuitive or well documented
16:01:07 <benmachine> load ghci, import Text.Regex.Whatever, :i RegexContext
16:01:14 <benmachine> muck about to your heart's content
16:02:10 <benmachine> > "some 13 number" =~ "([0-9])[0-9]+" :: (String, String, String, [String])
16:02:10 <merehap> ha, I was hoping to skip the muck around part, though I had glanced at the list of defined contexts a few minutes ago
16:02:11 <lambdabot>   ("some ","13"," number",["1"])
16:02:18 <benmachine> ^ that's neat
16:02:25 <benmachine> mucking about is the best part :(
16:02:34 <burp> > "some 13 number" =~ "([0-9])[0-9]+" :: (String, Int, String, [String])
16:02:35 <lambdabot>   No instance for (Text.Regex.Base.RegexLike.RegexContext
16:02:35 <lambdabot>                    ...
16:03:26 <merehap> benmachine: normally I'd agree with you, but the regex thing had become recursive mucking about, since I already have a project that I'm working on that regex was just a subproblem of
16:03:48 <benmachine> heh
16:03:49 <merehap> benmachine, c_wraith: anyways, your help is much appreciated
16:03:58 <benmachine> but
16:04:06 <benmachine> that is how I found your answer :P
16:04:16 <benmachine> I didn't know it prior to aforementioned tactic
16:04:21 <benmachine> being executed
16:04:26 <benmachine> upon your question being asked
16:04:44 <merehap> I'll admit that I hadn't anticipated the nested list solution...
16:04:56 <benmachine> I just picked an instance that looked likely :P
16:05:35 <merehap> yeah, in hindsight it was quite reasonable
16:05:37 <[swift]> wow, the new haskell platform release is really popular
16:05:42 <[swift]> can't believe how slow the download is going
16:08:50 <Itkovian> Anyone having a torrent for the latest max haskell platform version? D/L is veeeeeeeeeeeeery slow atm.
16:09:58 <benmachine> all the people who want to set up torrents haven't finished downloading it yet >_>
16:12:35 <Itkovian> I can imagine. It's sluggish. 5 hours until completion.
16:14:29 <Itkovian> update: 6 hours :-/
16:18:17 <TacticalGrace> Axman6: maybe we can learn something from this: http://ro-che.blogspot.com/2010/03/zurihac-some-critics.html
16:22:42 <Hugglesworth> =D the new version fixes the issues with 64-bit snow leopard
16:23:43 <[swift]> yeah that's why i've been running ghc 6.12 for a while now
16:24:01 <[swift]> still wish macports would update to the newest ghc so i could switch back to using package management
16:24:20 <benmachine> package management is overrated :P
16:26:03 <Hugglesworth> macports is overrated
16:26:11 <benmachine> that too
16:26:35 <Hugglesworth> I'll always love portage and ubiquity
16:27:16 <Hugglesworth> s/ubiquity/aptitude
16:28:52 <zygoloid> @hoogle Functor f => (a, f b) -> f (a, b)
16:28:53 <lambdabot> No results found
16:29:05 <zygoloid> @type \(a, b) -> fmap (,) a b
16:29:06 <lambdabot> forall t a b. (t -> a, t) -> b -> (a, b)
16:29:19 <zygoloid> @type \(a, b) -> fmap ((,) a) b
16:29:20 <lambdabot> forall t a (f :: * -> *). (Functor f) => (t, f a) -> f (t, a)
16:32:20 <zygoloid> huh, there's no "Traversable (,) a" instance :(
16:34:16 <trainpic> anyone here I can talk to about a project idea for GSoC?
16:35:25 <Alpounet> trainpic, #haskell-soc ?
16:35:39 <trainpic> k thanks
16:37:08 <mjrosenb> i hope that re-writing xmonad in java was an april fools suggestion.
16:37:57 <zygoloid> > let xs = "foobar" in concat $ zipWith (fmap . (,)) xs (tail $ tails xs)
16:37:59 <lambdabot>   [('f','o'),('f','o'),('f','b'),('f','a'),('f','r'),('o','o'),('o','b'),('o'...
16:38:02 <zygoloid> ^^ is there a better way of doing that?
16:38:40 <fax> > (zip <$> id <*> tail) "foobar"
16:38:41 <lambdabot>   [('f','o'),('o','o'),('o','b'),('b','a'),('a','r')]
16:38:58 <fax> > (zip <$> id <*> tail) =<< tails "foobar"
16:38:59 <lambdabot>   [('f','o'),('o','o'),('o','b'),('b','a'),('a','r'),('o','o'),('o','b'),('b'...
16:39:13 <fax> hm no
16:40:15 <apathor> anyone know how to keep dmenu from spanning multiple screens? under xmonad using xinerama
16:40:54 <kowey> mrph... wxHaskell on MacOSX currently requires self-compiled wxWidgets instead of pre-installed one
16:41:31 <kowey> but using the MacPorts wxWidgets gets you in trouble with GHC 6.12 because of iconv in the base package (due to MacPort's iconv)
16:42:11 <kowey> I guess the workaround for now is to build your own wxWidgets without using MacPorts
16:44:37 <danderson> So, I'm defining a type with data Ord a => Foo a = Foo ...
16:44:43 <mauke> bad start
16:44:46 <danderson> why?
16:44:57 <mauke> because you put a class constraint in a type definition
16:45:07 <mauke> that can't end well
16:45:46 <danderson> I must be confused, but I know what I want. I'd like Haskell to implicitly require (Ord a) when functions mess with (Foo a)s
16:45:53 <mauke> impossible
16:46:19 <danderson> well, that sucks
16:46:34 <danderson> oh well.
16:47:09 <jlouis> danderson: not really. You can add the Ord a => constraint to those functions that need it
16:47:31 <jlouis> the functions with no constraint on a will be more general in effect
16:49:03 <danderson> fair enough. It's just noisy (and, in my specific case, all functions of the API require an Ord a)
16:50:03 <kmc> danderson, you can add the constraint to the *value* constructor not the tycon, and this will probably do what you want iff you use a GADT
16:50:11 <kmc> that is, GADT syntax, not necessarily an actual GADT
16:51:20 <danderson> kmc: thanks for the reference. That's outside my current scope of knowledge, and I want to nail this module down before fiddling, so I'll go with the explicit constraining for now, but I'll definitely investigate.
16:51:21 <kmc> that is, it will require the context when building a value, and provide the context when pattern-matching
16:51:38 <kmc> with the H98 data decl, it will require the context in both cases, which doesn't make much sense
16:52:27 <kmc> danderson, the GADT syntax is not hard
16:52:39 <kmc> and you don't need to understand the fancy uses of GADTs for this case
16:55:59 <kmc> although, hmm, i'm having trouble making my example work
16:58:12 <danderson> kmc: that's the sort of trouble I was fearing :)
17:02:43 <kmc> okay, i got it
17:05:08 <kmc> danderson, http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24270#a24270 if you're interested
17:05:17 <kmc> i welcome a better-worded explanation for why "g" needs the constraint
17:06:14 <danderson> yeah, I think I see.
17:06:29 <danderson> Looking at my code, I'm going to hit a lot of cases like your g
17:07:14 <danderson> so on the scale of hackitude required, seems like the class constraint on functions is the lesser of two evils
17:07:22 <kmc> yeah, maybe so
17:07:53 <danderson> I also need record syntax and updates, which makes the GADT style even clunkier
17:08:05 <bob31> guys you cannot announce a new haskell platform release and not have it stored in a scalable location :)
17:08:07 <danderson> lemme get this module up and running again, then I'll mess around with the types and see what I can come up with.
17:08:10 <kmc> yeah
17:08:10 <bob31> trying to download for hours and hours
17:08:42 <bob31> not meant to be offending, just feeling goofy after seeing that 8kb/sec for hours
17:08:42 <danderson> if everyone backs off for just two minutes, I can mirror it and provide 100mbps of bandwidth for the Cause
17:09:23 <bob31> why now just take down for a minute and move away the files while you offload to wherever
17:09:39 <bob31> does someeone have all files?
17:09:46 <bob31> torrent would work
17:09:47 <danderson> dons, probably
17:10:13 <cadsu> hmm
17:10:15 <danderson> I have the linux tarball on the end of a slow connection, and a dedicated server with wide pipes
17:10:30 <danderson> I can lend my pipes, but I need to be able to obtain the files :)
17:10:31 <sioraiocht> so angry, bob31
17:10:49 <bob31> sioraiocht: not angry, feeling goofy, sorry for mis-communication
17:10:53 <sioraiocht> =p
17:11:00 <bob31> we can use Erlang
17:11:06 <bob31> http://streamfile.com
17:11:13 <aavogt> where is all the hype from?
17:11:17 <bob31> I can download while you upload
17:11:21 <bob31> which hype?
17:11:34 <danderson> yeah, not gonna work to mirror stuff. ETA 7h per file
17:11:44 <danderson> by that time, the rush will be finished :)
17:11:51 <aavogt> that so many people have to get the haskell platform
17:11:57 <bob31> 7hs for what?
17:12:08 <danderson> bob31: to mirror the files to my dedicated server
17:12:24 <bob31> aavogt: I heard from the Zurihac updates from dons
17:12:36 <bob31> aavogt: but I guess it was posted to somewhere hn or reddit
17:12:40 <cadsu> this is the strangest thing.. in virtualbox debian I'm getting wierd hangs where the machine will just spin for hours at 99% linking something simple (in this case hmatrix)
17:12:40 <danderson> aavogt: also got posted to HN and reddit
17:12:52 <bob31> aavogt: and I wouldn't be surprised if many ppl download but don't use
17:13:03 <bob31> that doesn't hurt 'the cause' though
17:13:17 <cadsu> I pressed ctrl-c to kill the process, but then the cabal install just stopped linking and went on to continue installing the package
17:13:21 <danderson> it's all those erlang programmers. They're melting down the server out of spite.
17:13:40 <bob31> heh, I do only count as 1
17:13:46 <bob31> AFAIK
17:14:02 <cadsu> ah, the package did fail to install however because of the linking I stopped
17:14:20 <cadsu> gonna see if there's some verbose option
17:24:45 <edwardk2> hrmm. i'm finding the lack of type safety in my current rope implementation disturbing
17:25:24 <edwardk2> the only real way i can think to make things safer is to brand the ropes and their annotations.
17:25:55 <edwardk2> but that yields something like:  splitAt :: (Packable p, Annotation m) => Int -> Rope a (m a) -> (forall b c. Rope b (m b) -> Rope c (m c) -> r) -> r
17:26:00 <edwardk2> as a typical rope operation
17:26:33 <edwardk2> and that universal quantification is in just the wrong place to make that a well behaved use of Cont
17:28:34 <edwardk2> i could un-CPS that but then the quantification winds up existential
17:28:57 <edwardk2> and is far less useful for mixing and matching annotations over the same basic rope
17:30:44 <roconnor> edwardk2: are you pursuing the fingertree bytestring idea for ropes?
17:30:49 <edwardk2> roconnor: yeah
17:30:53 <edwardk2> thats what i have now
17:30:54 <roconnor> horray
17:31:08 <edwardk2> http://hackage.haskell.org/package/rope/
17:31:09 <roconnor> I was working on that 3 years ago, but never really finished it
17:31:24 <edwardk2> that version is a bit smarter than just a fingertree of bytestrings
17:31:44 <edwardk2> it is a fingertree of bytestrings with annotations that get updated as you cut
17:31:49 <mm_freak_> can i look ahead with attoparsec?
17:31:52 <edwardk2> Rope () -- works out just as a fingertree of bytestrings
17:32:46 <edwardk2> roconnor: what i'm playing with now is making those annotations safer
17:33:15 <edwardk2> currently you could extract an annotation from one rope and using the strength of haskell functor's apply it on a rope for which it is irrelevant
17:33:36 <edwardk2> but if i added a type level brand to each rope that would cease to be the case
17:34:04 <edwardk2> unfortunately, to maintain the type level brand, i'd need to cps transform the code that actually returns a rope
17:36:09 <roconnor> edwardk2: what are these annotations?  Why do you have them?
17:36:40 <edwardk2> i started with just ropes, but i wound up needing the annotations for the particular domain in which iw as using this
17:36:49 <edwardk2> the gist of it is this
17:38:10 <edwardk2> i want to be able to perform, say, a preprocessing pass that goes through and handles all of the #line directives, removing them from the fingertree, and making another fingertree of byte position annotated 'position monoid' entries. that say that between bytes 8 and 9 of the new bytestring the position changes to line 38, column 36 of file "Foo" due to a gcc line directive inclusion.
17:38:52 <roconnor> oh god
17:38:55 <edwardk2> these annotations are then notified when you trim the rope because they are an argument the rope comonad, and have comonadic actions that know how to look at the rope and trim them accordingly
17:39:12 <roconnor> edwardk2: you are on your own here :D
17:39:21 <edwardk2> it isn't nearly as hairy as it sounds =)
17:39:29 <edwardk2> look at the requirements to be an Annotation.
17:39:37 <edwardk2> http://hackage.haskell.org/packages/archive/rope/0.1/doc/html/Data-Rope.html
17:40:03 <edwardk2> you need to be able to glued together monoidally, to be able 'reduce' bytestrings, and to be able to be split.
17:40:32 <edwardk2> however, when i ask the annotation to split (because of take/drop, etc) i provide the fingertree from the rope as context
17:40:51 <edwardk2> the 'comonad' noise is just a fancy way of saying that the annotation's splitAt operation looks like
17:41:00 <edwardk2> splitAt' :: Annotation a => Int -> Rope a -> (a, a)
17:41:05 <edwardk2> instead of the monadic
17:41:20 <edwardk2> splitAt' :: Annotation a -> Int -> a -> FingerTree -> (a, a)
17:41:30 <edwardk2> which would turn inside out a little further to
17:41:46 <edwardk2> splitAt' :: Annotation a => Int -> a -> Reader FingerTree (a,a)
17:42:30 <edwardk2> that is enough for me to implement 'splitAt :: Annotation a => Int -> Rope a -> (Rope a, Rope a)  -- by asking each of the annotations in a to split themselves.
17:42:35 <tensorpudding> Is hackage down?
17:43:11 <edwardk2> but a nicer version i think would let the annotations know they are an annotation for the current rope.
17:43:17 <tensorpudding> Hmm, it's up, just slow as all hell.
17:43:40 <edwardk2> so what i can do is add a brand to the type of the rope, and 'run the rope' like ST s. with universal quantification
17:44:25 <edwardk2> runString :: [Char] -> (forall s. Rope s a -> t) -> t
17:44:32 <edwardk2> er
17:44:50 <edwardk2> runString :: Annotation a => [Char] -> (forall s. Rope s (a s) -> t) -> t
17:45:02 <edwardk2> where the annotation knows that it was constructed out of that rope
17:46:25 <edwardk2> and then i can refactor the combinators i provide to maintain the brand, or generated derived brands, since the result of uncons'ing would be another rope that is predicably reproducible from the original brand.
17:47:36 <edwardk2> similarly (a `append` b) `append` c = a `append` (b `append` c) -- so you can do some magic using local constructors for the brands at the type level to let simple results like that be proven without requiring explicit combinator usage
17:47:51 <edwardk2> so a brand from one of those would work on annotations from the other.
17:47:58 <edwardk2> make sense?
17:48:14 <edwardk2> the worry of course is that the api just becomes way too scary for mere mortals to consume
17:48:36 <Remy> I'm looking for a pretty printing library
17:48:40 <Remy> I'm using uulib now
17:48:52 <edwardk2> temy: Text.PrettyPrint.HughesPJ?
17:48:53 <Remy> it seems nice but the documentation is very compact
17:48:56 <dolio> It seems way beyond what one would normally think of as a rope.
17:49:12 <edwardk2> dolio: to be fair the library does call them 'annotated ropes' =)
17:49:51 <dolio> I've been using the Wadler-Leijen combinators, but I'm not sure they have better documentation.
17:49:57 <dolio> wl-pprint, I think.
17:50:13 <felzix> How can I use haskell to interact with the linux shell in such a way that I can retrieve text from it?
17:50:14 <edwardk2> dolio: how bad do you think the explicit continuation passing style would be in practice?
17:50:38 <Remy> thanks
17:52:16 <dolio> edwardk2: Is it only in the runString function?
17:53:23 <liyang> felzix: System.Process.readProcess
17:53:24 <edwardk2> nah
17:53:27 <kmc> felzix, http://www.haskell.org/ghc/docs/6.10-latest/html/libraries/process/System-Process.html
17:53:38 <felzix> thanks!
17:53:40 <edwardk2> splitAt :: (Packable p, Annotation m) => Int -> Rope a (m a) -> (forall b c. Rope b (m b) -> Rope c (m c) -> r) -> r
17:54:19 <edwardk2> anything that subdivides a rope in an unpredictable way would pick up a similar fresh brand rebranding any of its partitioned annotations
17:54:31 <edwardk2> this plan is all of 40 minutes old
17:54:39 <edwardk2> so it is definitely up for discussion =)
17:54:52 <mm_freak_> it seems like i can't do lookahead without consuming the input in attoparsec…  will it have a noticable performance impact to split a message and then run multiple parsers instead of letting the parser split the message?
17:55:09 <edwardk2> dolio: the problem with the current model can be shown with the way search's work on the existing ropes
17:56:17 <edwardk2> search :: Word8 -> Rope a -> Search -- performs a search against a rope. you can of course extend this action to get Rope Search given Rope a. and then you can use splitWith :: Annotation a => (Rope a -> Search) -> Rope a -> (Rope a, Rope a) or split :: Rope Search -> (Rope Search, Rope Search) -- but nothing prevents you from splitting the wrong rope
17:56:21 <dolio> Well, I'm not sure I've ever seen anyone try to use that style on a large scale.
17:56:36 <dolio> Or that level of existentials.
17:56:41 <dolio> So I don't know how good or bad it will be.
17:56:42 <edwardk2> split tries to partition the rope in even halves based on where the search results were found, so you could process each half individually.
17:57:05 <edwardk2> i used something similar for a cps'd assembly monad a while back, but it wasn't this big
17:57:48 <dolio> If it's any consolation, it probably won't be much worse than the existential alternative would be.
17:58:55 <edwardk2> the existential drives me up a wall, mainly because you have to pattern match rather than use combinators in so many places.
17:59:20 <dolio> Yes, well, I wouldn't try it with GHC's existentials.
17:59:34 <edwardk2> oh, to finish the search example, i guess the refactored version would have search :: Word8 -> Rope s a -> Search s
18:00:08 <dolio> Oh, I see what you're saying.
18:00:25 <dolio> If you just have (Rope a -> Search), the Search you return can be totally unrelated to the Rope you give it.
18:00:38 <edwardk2> and splitWith :: Annotation a => (Rope s (a s) -> Search s) -> (forall t u. Rope t (a t) -> Rope u (a u) -> r) -> r
18:00:41 <edwardk2> yeah
18:00:45 <dolio> So it will split the rope based on erroneous information.
18:00:51 <edwardk2> exactly
18:01:08 <edwardk2> this way i get type safety, and the universal enforcing correctness a la ST s.
18:01:34 <Remy>  Text.PrettyPrint.HughesPJ has no alternative layouts
18:01:42 <Remy> that's a shame
18:02:30 <edwardk2> dolio: the existing ropes are handy in a lot of ways because you can make a ton of instances out of them: monoids, writer, context comonad, balh blah blah but most of those ops aren't safe when used together
18:02:41 <edwardk2> i'd rather have an environment that kept you from shooting yourself in the foot.
18:03:30 <ddarius> edwardk2: How will you ever be a C++ programmer with that attitude?
18:03:32 <edwardk2> and i can do some interesting things with the brand, like apply type functions to it to do some simplifications.
18:03:48 <nanashi> =)
18:03:58 <edwardk2> i.e. (r `append` s) `append` t = r `append` (s `append` t)
18:05:03 <edwardk2> append :: Annotation a => Rope s (a s) -> Rope t (a s) -> Rope (Append s t) (a (Append s t))
18:05:11 <edwardk2> where Append is an appropriate type family
18:06:05 <edwardk2> or if i can't be bothered to figure it out, just another dumb data type. or if the result depends on a term level value, an existential box, cps transformed into a universal
18:06:38 <edwardk2> ddarius: i've been a c++ programmer, that is where i developed this attitude ;)
18:08:03 <edwardk2> another option is to refactor this a bit so i simplify the definition of Rope to a newtype wrapper around FingerTree Count ByteString, and build these as something else.
18:08:36 <edwardk2> er call these something else
18:11:12 <edwardk2> for that matter the type of rope is a bit more complicated than it needs to be. i could tweak it so it was data Rope t a = Rope !(FingerTree Count Chunk) (a t) -- so the above examples would read more nicely.
18:11:30 <edwardk2> append :: Annotation a => Rope s a -> Rope t a -> Rope (s `Append` t) a
18:12:19 <edwardk2> splitAt :: Annotation a => Int -> Rope s a -> (forall t u. Rope t a -> Rope u a -> r) -> r
18:12:25 <edwardk2> fewer parens => less terror
18:13:21 <edwardk2> but then Rope  fails to be a comonad over hask, but instead becomes a comonad over types of kind * -> *
18:15:52 <aavogt> this cps transform to avoid existentials is interesting
18:16:20 <Axman6> TacticalGrace: thanks for the link, we'll take those problems into account :)
18:16:33 <zenso> hello all
18:16:39 <edwardk2> aavogt: i use it a lot =)
18:17:22 <aavogt> I suppose it's a tradeoff between the verbosity of type annotations for the rank2 types and verbosity of pattern matching
18:17:58 <edwardk2> well there is a big advantage to the type annotation approach vs. existential
18:18:16 <edwardk2> that is it is easier for me to pull the values out of the comonad and put them in another that has the same brand
18:18:33 <edwardk2> there is a fundamental asymmetry in hask caused by every functor being strong
18:19:36 * aavogt wonders if this sort of trick could be used in xmonad (mainly for an alternate configuration), which also has involves unpleasant existentials
18:19:43 <zenso> i've read through much of "real world haskell" and I'm starting to feel pretty confident. can anyone recommend a fairly simple haskell project I might try to understand?
18:20:15 <edwardk2> zenso: its not very simple, but lambdabot is a good starting point, it uses a lot of stuff, and it is easy to get a plugin going in.
18:20:19 <aavogt> isn't the book more or less a series of projects?
18:20:41 <edwardk2> zenso: it might be a bit closer to the deep end of the pool than you want to go though
18:21:12 <zenso> the book does have a few projects, but many are toy examples
18:21:24 <kmc> hmm, what about pandoc?
18:21:35 <zenso> I'm looking for something more beefy
18:21:55 <jmcarthur> xmonad supposedly has good coding style
18:21:55 <zenso> edwardk2: noted, perhaps I'll check it out
18:21:56 <luite> xmonad maybe?
18:22:14 <zenso> hah jinx, thanks both for the suggestion
18:22:33 <edwardk2> yeah, running xmonad, and hacking on your config in an ever escalating way is a good idea
18:23:31 <DigitalKiwi> there's only one problem with that: using xmonad
18:23:40 <DigitalKiwi> *cough* awesome wm *cough*
18:23:59 <zenso> i've heard about it, but never tried it
18:24:12 <DigitalKiwi> xmonad or awesome?
18:24:12 <zenso> that'll certainly force me to learn it
18:24:20 <zenso> xmonad
18:24:23 <DigitalKiwi> oh
18:24:58 <DigitalKiwi> haven't I seen people here complain about xmonad making people do bad things in haskell? >.>
18:25:25 <zenso> hmm
18:25:34 <zenso> i'd be curious if that's the case
18:26:50 <aavogt> well xmonad had a bit of    ref = unsafePerformIO (newIORef "something"); {-# NOINLINE ref #-}
18:28:19 <aavogt> but that's not something that was even mentioned in the documentation
18:29:01 <aavogt> DigitalKiwi: any ideas what those people were discussing?
18:29:07 <DigitalKiwi> nop
18:29:56 <zenso> so, xmonad is kind of like the emacs/vim of window managers
18:30:02 <kmc> emacs/vim?
18:30:07 <kmc> emacs and vim are pretty different...
18:30:11 <edwardk2> aavogt: probably for some top level references? that isn't that unusual. it is clearer than making people pass around a ReaderT of an environment full of pointers and lift everything
18:30:22 <zenso> kmc: I just mean lots of key-strokin'
18:30:45 <kmc> i'm wondering now about a minimal language extension to remove that (common) use of unsafePerformIO
18:30:50 <edwardk2> zenso: yeah. mostly mouse free, tiling wm
18:31:02 <edwardk2> kmc: meacham has one, it is implemented in jhc
18:31:07 <kmc> oh cool
18:31:11 <kmc> link / search term?
18:31:24 <edwardk2> he has a monad of asyncronous io actions ASIO i think? that are safe to do out of order at startup
18:31:48 <aavogt> maybe ACIO?
18:31:57 <edwardk2> thats probably it
18:32:17 <kmc> ah excellent
18:32:23 <pokoko222> sometimes i wonder why i waste time doing math proofs :P
18:32:26 <kmc> it supports IO-monad binds at tope level
18:32:32 <edwardk2> yep http://repetae.net/computer/jhc/manual2.html
18:32:53 <pokoko222> why do you guys all preach doing proofs and not just learning to do the math?
18:33:06 <Cale> pokoko222: The proofs *are* the mathematics.
18:33:09 <kmc> sigh
18:33:14 <edwardk2> pokoko222: ?
18:33:45 <pokoko222> i mean seriosly, i can do calculus without doing the proofs
18:34:00 <kmc> that's great, why is it our problem in any way
18:34:13 <aavogt> edwardk2: yeah, for module-local references. It has since been replaced by a global (Map String Dynamic) accessed by some typeclass for safety
18:34:22 <edwardk2> pokoko222: calculus is about when that ability stops. in my mind calculus as it is usually taught isn't math, it is an engineering discipline, we coopted to get our numbers up ;)
18:34:24 <pokoko222> kmc well i try to get opinions from math guys like haskellers
18:34:25 <bremner_> this word math, I do not think it means what you think it means
18:34:50 <mm_freak_> > (chr $ fromIntegral (128 :: Word8)) > '!'
18:34:52 <lambdabot>   True
18:34:52 <[swift]> pokoko222: calculus is _basic_ math. when/if you get to higher level math, the understanding and skills you get from proofs become crucial.
18:34:58 <mm_freak_> > (chr $ fromIntegral (255 :: Word8)) > '!'
18:34:58 <lambdabot>   True
18:35:25 <pokoko222> [swift] oh boy now u got me scared :O
18:35:30 <Cale> pokoko222: You might be able to do some calculations which would be justified using calculus without proving anything. You won't get very far in calculus itself without any proof.
18:35:37 <mm_freak_> > all (>= '!') . map (chr . fromIntegral) $ [(33::Word8)..255]
18:35:38 <lambdabot>   True
18:35:40 <edwardk2> pokoko222: the problem is with the way calculus is taught. calculus is taught as a rote memorization/pattern matching discipline. it is very different from the rest of mathematics.
18:36:07 <kmc> yes, what they teach you in school is how to perform an algorithm, not how to prove that algorithm is correct
18:36:29 <Cale> Well, that's mostly where it's taught poorly. There exist good presentations of calculus. :)
18:36:43 <kmc> at some universities the intro math is the latter; they assume you had calculus in high school for the former
18:36:44 <pokoko222> why would i bother to prove it, kmc when you program do you prove all libraries u use? u check them all how they work at the bottom?
18:36:47 <Cale> (I'd say Spivak's treatment is good :)
18:37:01 <kmc> pokoko222, "why would i bother to prove it"  ==>  "why would i bother to do math"
18:37:08 <SecretofMana> ^^
18:37:08 <kmc> nobody here is forcing you to do math
18:37:17 <kmc> if you want to be an engineer, do it
18:37:48 <Cale> pokoko222: Why would I bother to write a program?
18:38:01 <edwardk2> pokoko222: the ability to get by on pattern matching fades some time in the calc iii, diff eq timeframe, around that point you're usually expected to have a couple of courses on mathematical proof under your belt, but if you choose to be a mathematician or not based on the way calculus is presented in most schools, you're not making a fair judgment call ;)
18:38:03 <luite> for me, calculus was the reason that I used to hate mathematics :)
18:38:03 <kmc> your attitude is like you've discovered some clubs that you think are full of cool people (math, haskell) and you want to hang around them, but you question the value of the things they actually do
18:38:04 <DigitalKiwi> if nobody proves it then how do you know it is correct?
18:38:12 <pokoko222> damn, i gotta make myself see the point of proofs, i really try hard these months and still i got no insights as u do, i know  am wrong but...
18:38:42 <edwardk2> pokoko222: perhaps the answer is to look at proofs in other areas of mathematics than calculus.
18:38:58 <Cale> I mean, there are programs for computers which already exist. Why bother writing them?
18:39:04 <SecretofMana> if anything, I think proofs are invaluable simply because they teach you the thought process behind deriving equations.
18:39:07 <kmc> pokoko222, how about working through http://www.cis.upenn.edu/~bcpierce/sf/
18:39:12 <edwardk2> pokoko222: type theory, graph theory, geometry
18:39:33 <pokoko222> kmc nah it is just the style i talk, i might sound arogant,actually i just talk about topic that bothers me and i need advices from u math/programing ninjas ;D
18:39:44 <Cale> Why should I bother designing circuits, when other people have already designed circuits?
18:39:47 <kmc> pokoko222, you ignore our advice repeatedly
18:39:55 <edwardk2> eventually the calculus stuff comes up again and is useful: real analysis, the ability to take 'derivatives' of types in programming languages.
18:40:19 <absentia> are thre any mirrors for the haskel platform for mac .. the 64bit, etc?  the url I have says it's gonna take 4 hrs to download 138MB  (wtf?! is this 1994?)
18:40:21 <Cale> Why should anyone bother to make music, when they can just download an MP3 of it?
18:40:35 <pokoko222> SecretofMana correct but not get deep with proofs, just know the basic stuff and know where to look for when something is needed
18:40:37 <absentia> this http://hackage.haskell.org/platform/2010.1.0.0/haskell-platform-2010.1.0.0-i386.dmg
18:41:07 <Cale> Making music is so much harder than downloading an MP3. What's the point?
18:41:14 <absentia> I assume the haskell in that dmg is the latest haskell w/ 64bit support?
18:41:17 <pokoko222> Cale it is not the same, we always need new programs, why new proofs, why doing the wheel again and again? when i can concetrate 100% AI or whatever i wanna do after college
18:41:32 <kmc> you have to practice to be able to prove new things
18:41:59 <Cale> pokoko222: So you're saying that every program you've ever written was completely original and something which nobody else had ever written?
18:42:02 <absentia> hehe, I have a class called "kmc" ...
18:42:07 <kmc> heh
18:42:13 <BMeph> Cale: "Making music is hard - let's go (iTunes) shopping!"? ;)
18:42:37 <kmc> pokoko222, why don't you take your complaining about math to #math
18:42:40 <pokoko222> Cale to be honest i have no answer to that :)
18:42:45 <absentia> ok, no one answerng.. so I'll take it the answer is no.
18:42:50 <absentia> I'll start the download and go to sleep
18:43:06 <pokoko222> kmc because they are pure math, u guys do programming too
18:43:11 <edwardk2> absentia: sorry, i don't have a mac =/
18:43:13 <Cale> pokoko222: I have the Curry-Howard isomorphism on my side ;)
18:43:19 <dankna> it is in fact 64-bit support
18:43:23 <absentia> actually, I'll try ports first.
18:43:41 <Cale> pokoko222: It turns out that writing programs and proving theorems are actually the same thing in disguise.
18:43:58 <edwardk2> absentia: regarding download time there was a big announcement today so i wouldn't be surprised if the server was on its knees ;)
18:44:16 <pokoko222> Cale well untill i fully understand that i will bang my head a lot, professors dont give a ...
18:44:19 <Cale> pokoko222: So any argument you might raise about why proving theorems is a waste of time, I can translate into an argument for why writing programs is a waste of time.
18:44:20 <absentia> haha.. their instructions are fubarred!   port install haskell-platform
18:44:20 <absentia> Error: Port haskell-platform not found
18:44:39 <edwardk2> @type fst
18:44:41 <lambdabot> forall a b. (a, b) -> a
18:44:56 <edwardk2> fst is a proof that (a AND b) implies a
18:45:05 <edwardk2> @type curry
18:45:06 <lambdabot> forall a b c. ((a, b) -> c) -> a -> b -> c
18:45:26 <edwardk2> curry is a proof that if (a AND b) imply c, then a implies that b implies c.
18:45:32 <edwardk2> but they are also programs
18:45:34 <edwardk2> @src curry
18:45:34 <lambdabot> curry f x y = f (x, y)
18:46:03 <edwardk2> and you can compose them
18:46:09 <edwardk2> @type curry fst
18:46:11 <lambdabot> forall a b. a -> b -> a
18:46:23 <aavogt> I don't think the types in most programs are interesting theorems in themselves
18:46:25 <absentia> ya, fvck this.. 1MB in 3 minutes
18:46:25 <edwardk2> giving a new proof: that a implies that b implies a
18:46:31 <SecretofMana> If IRC had a like button, I'd be spamming it right now. Awesome examples + explanations there.
18:46:48 <jmcarthur> aavogt: they get more interesting as you write more interesting programs (and prove them at the type level, of course)
18:46:50 <edwardk2> thanks =)
18:46:55 <Cale> In logic, in order to prove that X implies Y, you can start by assuming X, and show that there's a proof of Y. In programming, in order to write a program of type X -> Y, you can write a lambda which binds a variable x of type X, and write a term y of type Y as the body of the lambda.
18:47:17 <jmcarthur> aavogt: unfortunately, with current languages and type systems, they also get significantly more complex :\
18:47:34 <Cale> aavogt: Yeah, but I tend to think that the types which our computers are capable of checking are not the real types.
18:47:59 <edwardk2> in practice, we find logical paradoxes make useful programming combinators though.
18:48:09 <edwardk2> for instance 'assuming the hypothesis':
18:48:10 <Cale> aavogt: Ideally, for the purposes of interpreting C-H, you'd want the types to be closer to complete specifications.
18:48:10 <edwardk2> @type fix
18:48:12 <lambdabot> forall a. (a -> a) -> a
18:48:23 <pokoko222> Cale look what things i get for Curry-Howard isomorphism search on youtube: http://www.youtube.com/watch?v=7zMjCVwTjaU
18:48:31 <Cale> Yeah, the logic we use for programming is a little different from the standard one in mathematics.
18:48:36 <jmcarthur> they make useful partial programming combinators, anyway
18:49:12 <edwardk2> exactly, we program in a languages that usually permit every type to be occupied, so the programs as proofs analogy has to be taken with a grain of salt.
18:49:55 <Cale> Well, it's okay to use an inconsistent logic, if you're willing to be particularly interested in the differences between proofs.
18:50:20 <edwardk2> all of the scary code i was rambling on about above was an effort to make my types more closely match my intent to outlaw bad use cases.
18:50:26 <Cale> Because our programs have an attached semantics, the inconsistency doesn't bother us that much.
18:50:57 <jmcarthur> i think we are further calmed about it because we come from languages with even less consistency ;)
18:51:01 <Cale> In pure mathematics, the proofs don't usually themselves have a semantics attached to them -- that is, they mostly only serve to prove the theorems that they prove.
18:51:07 <edwardk2> jmcarthur: hah
18:51:43 <edwardk2> mathematicians like proofs to be short because they are easier to remember and more likely to be correct and easier to convince others that they are correct
18:51:58 <pokoko222> Cale do u agree college first two year i learn TO DO: calculus, linear algebra, probability and statistics, information theory, algebraic structures ... i think that is all math we have two years... and only then i might start wondering myself and feel the need to do proofs
18:52:41 <jmcarthur> programmers (of languages with sufficiently powerful type systems) don't care as much about length because the compiler can check it for them
18:52:42 <edwardk2> programmers like proofs (programs) to be short for many of the same reasons, , but often there are differences between programs with the same types, because we are often concerned about how the program derives the value, as much as the value itself. we have that pesky real world wall clock to contend with
18:52:53 <kmc> pokoko222, if you're not doing proofs you are not learning math
18:53:01 <kmc> pokoko222, you are learning how to perform various useful computations
18:53:06 <kmc> pokoko222, which is still a useful thing to learn
18:53:29 <aavogt> @wn math
18:53:30 <lambdabot> *** "math" wn "WordNet (r) 2.0"
18:53:30 <lambdabot> math
18:53:30 <lambdabot>      n : a science (or group of related sciences) dealing with the
18:53:30 <lambdabot>          logic of quantity and shape and arrangement [syn: {mathematics},
18:53:30 <lambdabot>           {maths}]
18:53:49 <pokoko222> kmc yeah that was my point, maybe i will with time slowly (it is a fact i started to be math oriented months ago :() realize theneed to do proofs myself
18:54:00 <jmcarthur> i didn't really master proofs until i went through my abstract algebra course (haha, i'm pretending i've mastered proofs)
18:54:10 <edwardk2> pokoko222: what you're picking up is called 'mathematical maturity'. you're getting familiarty with a lot of tools, and with manipulating progressively more abstract concepts, but you aren't working on the proofs yet. proofs themselves are wholly abstract concepts. a lot of colleges put them off because some people have difficulty letting go of the concrete.
18:54:52 <Cale> It's sad really. Courses shouldn't really claim to be about mathematics if you're not going to be proving theorems.
18:54:55 <edwardk2> yeah
18:55:01 <jmcarthur> edwardk2: i wish K-12 education did a few proofs. my geometry teacher had us do proofs, but we never really got a chance to learn their values
18:55:14 <kmc> jmcarthur, for me i think it was taking an intro real analysis course then an intro theory of computation course
18:55:32 <edwardk2> i'd rather know that i've proven something about how EVERY member of a class of objects behaves than about what the local maxima of a particular curve I'll never see again is.
18:55:45 <pokoko222> i think it will work, after i get maturity enough and i learn to work my ways around the subjects i told above, then  might wonder things like : "ok this works but why i dont get it, let me do a proof"
18:55:46 <jmcarthur> edwardk2: exactly
18:56:07 <kmc> though there were some techniques i didn't see until much later, like induction over the proof structure of a hypothesis
18:56:29 <Cale> pokoko222: If you want a lovely introduction to proper mathematics, I highly recommend Michael Spivak's "Calculus", (which is not your average Calculus textbook :)
18:56:53 <pokoko222> Cale you recomemd me that for the 101 time and i will bookmark it for the 102 time ;)
18:57:02 <pokoko222> and leave it for after 2 years
18:57:11 <Cale> pokoko222: Go find it at your university's library and pick it up.
18:57:12 <jmcarthur> kmc: i think perhaps i should have substituted "learned the value of" in place of "mastered"
18:57:22 <jmcarthur> i think i'm still rather weak in the art of proving
18:57:33 <pokoko222> Cale i can buy it right away that is no problem, but i wont get it
18:57:41 <pokoko222> i checked it once and i got scared to death
18:57:53 <jmcarthur> pokoko222: the only reason is because you're scared of it
18:57:57 <edwardk2> what i love about mathematics is that it proves a great guide to intuition. that is the same thing i love about formal computer science, the intuition there is more about understanding of what is fast, what isn't, and how to make things run fast by accepting other constraints, or about what is even feasible to compute
18:58:10 <kmc> pokoko222, take a look at http://www.cis.upenn.edu/~bcpierce/sf/
18:58:11 <jmcarthur> pokoko222: math is naturally dense and you can really spend hours on an equation that's only an inch long. don't fret over it
18:58:21 <pokoko222> jmcarthur as u said i still have not got the level "learned the value of" and i cant even imagine "mastered"
18:58:21 <kmc> you'll do proofs of a very different sort than calculus
18:58:30 <kmc> some stuff that's directly relevant to functional programming
18:58:39 <kmc> and using a proof assistant, which is like a fun puzzle game and provides immediate feedback
18:58:44 <edwardk2> pokoko222: does your university offer an introduction to proofs class?
18:58:50 <kmc> it's very beautiful stuff
18:59:03 <edwardk2> pokoko222: or a 'mathematical structures' class or the equivalent?
18:59:04 <Cale> pokoko222: It starts off pretty simple. (It starts from (a + b) + c = a + (b + c) after all.) You just need to work through it slowly and carefully, and realise that mathematics takes longer to read than most similar forms of text.
18:59:29 <pokoko222> edwardk2 basically we do the remember and do method, not the prove and do method :(
19:00:07 <pokoko222> edwardk2 well i got algebraic structures next year i put hope in that, might be good
19:00:09 <Cale> However, the exercises range in difficulty from simply testing your comprehension all the way up to being quite difficult (though as far as I know, they're all known results :)
19:00:14 <edwardk2> pokoko222: the other thing to realize about math is that in most disciplines have a point at which they largely level off. i mean, if you look at, say, history, one period of history is a lot like another, you pick up more detail, but you get a pretty good lay of the land early on and refine
19:00:33 <BMeph> pokoko222: The best way to live is by doing the things that scare you. YMMV, though... ;)
19:00:35 <jmcarthur> pokoko222: my computer science curriculum never made me prove anything. it's very unfortunate because i feel i gained more outside of my degree, proofs being a major part of that gain
19:00:46 <kurtosis> pokoko222: I think you're going to run into quite a bit of proving things in 'algebraic structures'
19:00:50 <kurtosis> unless that class is totally half-assed
19:00:58 <jmcarthur> (my abstract algebra course was part of a math minor which otherwise also didn't make me prove anything)
19:01:11 <edwardk2> unlike, say, english, mathematics is a pretty constant grade of difficulty. you'll be working on problems 12 years later that are just as challenging to you then (or harder) than the problems you first faced when you started.
19:01:49 <edwardk2> apologies to any english or history majors i may have inadvertantly offended :)
19:01:49 <jmcarthur> the only limits in mathematics really is the human lifespan
19:01:53 <kurtosis> pokoko222: proving things is rather the point of math. any robot can learn algorithms for differentiating or solving triangles.
19:02:03 <edwardk2> jmcarthur: and the apathy that seems to set in at 40 ;)
19:02:15 <jmcarthur> edwardk2: you mean i won't care anymore?! :(
19:02:18 <pokoko222> edwardk2 that is thing that bothers me, u advance slowly in math, and u get to age 60 to be able to say u r good math guy
19:02:20 <liyang> Or dementia.
19:02:29 <kmc> or getting into a duel over a woman
19:02:42 <kurtosis> pokoko222: so based on that you think we should just ignore that part of math?
19:02:50 <liyang> getting in a duel and *losing*, rather.
19:03:02 <Cale> Yeah, finding symbolic derivatives and integrals something that machines typically do a lot better than humans.
19:03:11 <Cale> So leave it to the machines :)
19:03:24 <edwardk2> jmcarthur: well, at that point you can't get a fields medal any more so what is the point? and wham apathy sets in ;)
19:03:34 <Cale> It's the things which the machines can't do yet which are more interesting :)
19:04:07 <pokoko222> kurtosis nah i was just curious how u guys handle these things, i mean, problems being at same dificulty now as after 12 years as above said... scaryyy... i wanna study and see results of my work rather
19:04:37 <Cale> pokoko222: Oh, you do. It's just that there are harder and harder problems :)
19:04:40 <kurtosis> well we can't all just ignore the challenging questions
19:05:12 <Cale> Well, harder and harder problems which *become accessible*
19:05:26 <pokoko222> Cale your smiles become irritating, you talk of math hardship with a smile while i band my head here :O ... hehe. .. just kiding ;)
19:05:30 <Cale> There are always the impossible ones.
19:05:52 <edwardk2> kurtosis: my first response to that was going to be that your view was a little skewed, but then upon looking at your nick, i decided better of saying that
19:05:52 <kurtosis> riemann hypothesis >.>
19:06:06 <luite> the problem is that once you have understood (or solved) some problem, it seems way less impressive than when you started
19:06:07 <kurtosis> Your first response to what?
19:06:12 <kurtosis> disclaimer: fuck statistics
19:06:15 <pokoko222> i guess i should stay away from theoretical cs and go to applied
19:06:17 <edwardk2> kurtosis, skew, nm
19:06:28 <Cale> luite: Sometimes
19:06:40 <luite> hehe, for me most of the time :)
19:06:43 <liyang> pokoko222: that's just engineering.
19:06:50 <kmc> edwardk2, haha
19:06:51 <luite> perhaps I just solve stupid problems
19:07:10 <edwardk2> pokoko222: don't take what i said as discouragement. it is what i love about math. i have a bottomless well of hard problems to tackle
19:07:23 <edwardk2> and i'm constantly surrounded by the smartest people i've ever met
19:07:36 <pokoko222> liyang you say it like it is "just" engineering
19:07:41 <edwardk2> pokoko222: it is humbling, but it isn't scary
19:08:05 <liyang> pokoko222: yes? And?
19:08:27 <pokoko222> liyang well seems u underestimate maybe
19:08:48 <pokoko222> try and do a prolog expert system, "just" engineering
19:09:01 <liyang> Nothing new there.
19:09:49 <pokoko222> good for u then
19:09:55 <luite> I used to be somewhat 'scared' of math problems, because I was afraid that I wouldn't be able to solve them.
19:11:14 <pokoko222> luite i had that feling too since i was more programming oriented then math, and it frustrated me, so i solved 70 eulers to lower that pressure on me ;P
19:11:29 <pokoko222> which is noob stuff but still helped me...
19:11:54 <kurtosis> there are some good project euler problems
19:12:41 <kmc> i think we can draw a line between math and engineering without being judgemental about people who choose to pursue one or the other
19:12:43 <pokoko222> yeah but for lot of people here it is noob stuff
19:14:42 <kmc> i'm wondering what the key difference is between the underlying proof ability and the underlying engineering ability
19:14:44 <pokoko222> kmc guess so, oh man but if i only knew what i wanna do... i am like reading compilers, ai, automata, genetic algorithms, i mean all crazy stuff... all over the place, i guess i should hang in there maybe with time i will see what i wanna do
19:14:59 <kmc> i do think there is an underlying engineering ability that's hard to teach
19:15:21 <kmc> it's about solving a set of constraints and trade-offs
19:15:40 <pokoko222> kmc for me at least, who am i to say :P, anyways they are both formal systems, and depends on the character u r, u choose theory oriented or practical engineering DO IT and SEE IT
19:15:44 <kmc> if you can do this well, you can learn the particular constraints of a field, be it electrical, software, mechanical, etc.
19:17:11 <pokoko222> well that is like saying basketball is about being tall and jumping high, if u can do this u will be fine
19:17:57 <aavogt> approximations anybody?
19:18:38 <edwardk2> dolio: i decided to take the ropes and rip out the annotations and place that in a separate module
19:19:01 <edwardk2> that way people who don't care about my annotation nonsense can just use the ropes they expect
19:19:09 <dolio> Sounds sensible.
19:19:34 <manjunaths> somebody has a faster mirror for haskell-platform-2010.1.0.0.tar.gz ?
19:20:06 <edwardk2> the embarassing part is how much code goes away from Data.Rope
19:20:24 <aavogt> kmc: I dunno, if normal people have to specialize within those fields you mentioned, that sort of suggests that the background is pretty serious
19:21:29 <kmc> true, but i think learning the background is not the factor that differentiates good engineers from bad ones or people who fail to complete their education
19:22:57 <pokoko222> i guess i can make myself do proofs if i program in prolog, same thing goes on there too, plus it will be practical and interesting
19:23:34 <kmc> pokoko222, try a proof assistant like Coq
19:23:38 <kmc> did you look at the link i pasted
19:23:53 <pokoko222> kmc i am not ready for that yet
19:26:51 <pokoko222> guess i will try to master using these: calculus, linear algebra, probability and statistics, information theory, algebraic structures for the two years now in college, and maybe last third year i will have some math maturity... anyways, good night tnx for the conversation guys ;)
19:28:18 <manjunaths> *sigh* there is no easy way to install ghc-6.12.1 on fedora 12 ?
19:28:47 <jmcarthur> edwardk2: i still haven't mastered the art of predicting whether separating one thing from another would save or waste more code
19:29:31 <jmcarthur> i mean, obviously each part will be smaller, but was it worth the boilerplate? sometimes i'm not sure. i think the boilerplate is mainly a language problem though
19:31:11 <edwardk2> jmcarthur: well, it just moves over into the annotation code, so it is a net wash, but it leaves three very small reusable modules for efficient ropes
19:32:35 <jmcarthur> nice
19:33:45 <edwardk2> this way i don't have to hear the recriminations about how it is less general than it could be or too slow
19:34:52 <ManateeLazyCat> Oh, my god. www.google.cn exit. Too bad.
19:35:36 <ManateeLazyCat> Realy bad.
19:36:09 <jmcarthur> ManateeLazyCat: oh you live in china don't you?
19:36:17 <ManateeLazyCat> jmcarthur: Yep.
19:36:28 <jmcarthur> ManateeLazyCat: what are your thoughts on google pulling out?
19:36:33 <ManateeLazyCat> jmcarthur: you know what mean "www.google.cn exit"
19:36:46 <ManateeLazyCat> jmcarthur: Yes, i have.
19:36:56 <jmcarthur> ManateeLazyCat: i see it forwards to the hong kong page, at least here in america
19:36:56 <BobbyTheTestNick> Test
19:37:21 <ManateeLazyCat> jmcarthur: Before, gov filter www.google.cn, but i can use google service always even it filer something. But i can use.
19:37:39 <kmc> it redirects to hk because hk has uncensored chinese-language search
19:37:49 <ManateeLazyCat> jmcarthur: If www.google.cn exit, i need use fighting-GFW tool always.
19:38:26 <ManateeLazyCat> jmcarthur: Otherwise, www.google.hk will redirect by gov always.
19:38:52 <jmcarthur> ManateeLazyCat: :(
19:39:02 <ManateeLazyCat> jmcarthur: That's mean google.hk or google.com can't access anymore if gov make my fighting-GFW failed.
19:40:25 <aavogt> what is GFW?
19:40:32 <liyang> Great FireWall.
19:40:33 <jmcarthur> Great Firewall of China, i think
19:40:46 <jmcarthur> minus the C, i guess
19:40:52 <ManateeLazyCat> jmcarthur: And have bad thing, www.google.cn use Simple-Chinese, but HK and TW use Traditional-Chinese. A little difference.
19:41:25 <ManateeLazyCat> jmcarthur: Yep, is that GFW, i hate it *so muccccccccccccccccccccch*.
19:41:41 <liyang> ManateeLazyCat: are you deliberately speaking in lolcat? Just wondering.
19:41:44 <stevenmarky> :(
19:41:50 <pikhq> ManateeLazyCat: Not just "a little difference". Rather massive difference.
19:41:58 <jmcarthur> liyang: i think it's just language barrier
19:42:31 <tensorpudding> Is there a simple-to-use URL encoding function somewhere?
19:42:34 <pikhq> I can recognise bits of Traditional Chinese. Simple Chinese, I can only recognise bits when I happen to know what the radical change was...
19:42:43 <ManateeLazyCat> pikhq: Yep, All Chinese people can understand Simple-Chinese and Tranditional-Chinese, just different with normal behaviour.
19:42:47 <pikhq> (言's change is the really easy one.)
19:42:50 <aavogt> jmcarthur: and you are deliberately leaving off prepositions too?
19:43:11 <pikhq> ManateeLazyCat: I'm a student of Japanese. So, yeah. I can only recognise bits of Chinese...
19:43:33 <ManateeLazyCat> pikhq: Japanese have many Chinese word. :)
19:43:39 <liyang> ManateeLazyCat: I challenge that assertion. I'm Chinese and I can understand neither.
19:43:55 <pikhq> Yeah, Japanese borrows rather a lot from Chinese.
19:44:11 <jmcarthur> aavogt: i was thinking of "language barrier" as a proper noun, actually, but i didn't show it with capitalization
19:44:13 <ManateeLazyCat> liyang: www.google.cn exit is too bad.
19:44:21 <ManateeLazyCat> I don't why Google choose exit.
19:44:59 <pikhq> ManateeLazyCat: They felt it was just too difficult to continue complying with the Chinese government's censorship requirements, among other things.
19:45:00 <liyang> Were I Google, I wouldn't operate in China.
19:45:01 <ManateeLazyCat> exit www.google.cn == destroy some many years' effort
19:45:11 <ManateeLazyCat> pikhq: You don't know.
19:45:26 <pikhq> I am simply stating their reasons for exiting.
19:45:32 <ManateeLazyCat> pikhq: That mean, gov can shut down google domain any time since now.
19:46:03 <ManateeLazyCat> pikhq: You can't access Any google service if you don't have tool fighting GFW.
19:46:23 <pikhq> I honestly don't have much opinion on what Google does either way, though I can see merits to both of the things they could do.
19:46:30 <ManateeLazyCat> pikhq: And i think 99% Chinese people don't know how to around GFW.
19:46:41 <pikhq> I do, however, strongly believe that China's censorship is abhorrent.
19:46:59 <pikhq> ManateeLazyCat: Sounds about right.
19:47:26 <aavogt> lots of other countries censor stuff
19:47:50 <pikhq> aavogt: And I think that that's just as abhorrent.
19:48:27 <liyang> aavogt: that doesn't make it right, especially with political matters that affect people's everyday lives.
19:48:30 <binjo> w00t.. google.cn everywhere
19:48:32 <ManateeLazyCat> pikhq: China is so *huge* agora, why Google choose exit?
19:48:43 <ManateeLazyCat> I really can't understand
19:49:02 <pikhq> ManateeLazyCat: The hacking attempt by the Chinese government against them is what set them off.
19:49:05 <ManateeLazyCat> That mean Google send it's 30% to baidu.cn
19:49:26 <pikhq> After that, they felt that it was unreasonable to continue dealing with the Chinese government.
19:49:42 <ManateeLazyCat> pikhq: I don't know detail, but i think Google can't exit because an attack.
19:50:00 <pikhq> Sure they can.
19:50:08 <ManateeLazyCat> pikhq: Any company can be attack. I think.
19:50:34 <liyang> Supposedly, Brin, whose parents were refugees, had a large role in the decision. I can see why.
19:50:34 <pikhq> They faced an attack on accounts on their system by the Chinese government itself. Thus, Google feels it unsafe and unreasonable to continue doing business.
19:51:04 <ManateeLazyCat> pikhq: Just HK and TW can't make Google Chinese service became better. Just like current Wikipedia, just HK and TW ....
19:51:22 <jmcarthur> pikhq: i wonder if ManateeLazyCat even knew about the attack
19:51:33 <jmcarthur> or any details of it, at least
19:51:49 <pikhq> jmcarthur: There's a reason I'm mentioning it.
19:51:59 <ManateeLazyCat> pikhq: I'm Chinese, i hate GFW, but i don't hate gov. Infact, we can't sure this is Chinese gov attack.
19:52:21 <pikhq> ManateeLazyCat: It's fairly well known that the government of China *directly attacked Google's servers*.
19:52:24 <dankna> mm, who else would have had a motivation to look for the things they did?  circumstantially, it's very strong evidence.
19:52:28 <kmc> how can you not hate your government when they have an explicit policy to keep their people in ignorance of the world?
19:52:34 <ManateeLazyCat> jmcarthur: Don't Chinese gov attack, that's canard
19:53:04 <jmcarthur> ManateeLazyCat: no it's not. the chinese government hacked google
19:53:11 <koninkje1away> ketil: (in case noone answered you a few days back) "If wishes were horses, beggars would ride"
19:53:15 <ManateeLazyCat> kmc: You don't know China.
19:53:37 <ManateeLazyCat> kmc: Chinese need *time* to became more open.
19:53:40 <kmc> ManateeLazyCat, indeed; i'd like to hear your take on it as someone who does
19:53:41 * liyang does, well enough.
19:53:51 <ManateeLazyCat> kmc: I think Chinese is better than 20 years ago.
19:53:55 <kmc> no doubt
19:54:00 <pikhq> ManateeLazyCat: Indeed, there are many things we do not know about it. However, we do know that China attacked Google, and so Google is pulling out.
19:54:12 <jmcarthur> ManateeLazyCat: i work in america's defense sector, in computer security specifically. i hear about china hacking american servers every week
19:54:28 <pikhq> ManateeLazyCat: Also, I do agree that China is becoming more open, but doing so slowly. Though I really wish they would pick up the pace, I am glad to see it happening.
19:54:30 <jmcarthur> and that's just what i *hear* about
19:54:40 <kmc> in the US, we used to treat black people as farm equipment.  and lots of speeches were given about how this would take *time* to change, and let's put up with it for now
19:54:47 <jmcarthur> yes china is far more open now than before
19:55:15 <jmcarthur> but not enough for me to sanction what still goes on
19:55:21 <ManateeLazyCat> jmcarthur: Infact, any country will hacking american server, Infact US also do something to other country, didn't?
19:55:28 <jmcarthur> (and it seems that network attacks are continuing to rise)
19:55:41 <ManateeLazyCat> pikhq: China infact is good enough.
19:55:45 <jmcarthur> ManateeLazyCat: it's quite likely that america has done the same, but i don't know about it
19:56:04 <jmcarthur> ManateeLazyCat: china is regarded as enemy number 1 regarding cybercrime against america, though
19:56:05 <kmc> yes, all sorts of entities are trying to hack each other all the time.  doesn't make it unreasonable that google is pissed off about it happening to them
19:56:16 <ManateeLazyCat> pikhq: We can't judge it use western's rule.
19:56:30 <jmcarthur> ManateeLazyCat: and sadly our network security is very bad here, so we are quite vulnerable to such attacks :(
19:56:42 <koninkje1away> Um, does anyone know why I was banned on #haskell-in-depth (or who's stealing my koninkje_away kick)?
19:56:47 <pikhq> ManateeLazyCat: I am not judging it by Western rules, I am simply judging it via ethics.
19:56:51 <kmc> ah yes, the old "caring about human rights = cultural imperialism"
19:57:21 <jmcarthur> pikhq: well, one does have to admit that western philosophy is a little different from eastern philosophy
19:57:24 <pikhq> ManateeLazyCat: If I were to judge it by Western rules, I would have to say "Eh, it's only a bit worse." Many Western countries are themselves implementing quite a bit of censorship.
19:57:28 <pikhq> jmcarthur: True.
19:57:37 <jmcarthur> pikhq: and westerners are raised on it
19:57:52 <ManateeLazyCat> jmcarthur: Yes, China have it's philosophy is most situation.
19:57:55 <jmcarthur> eastern too, of course, but that's just my point
19:58:16 * Mathnerd314 knew #haskell was better than ##politics
19:58:27 <jmcarthur> heh
19:58:37 <ManateeLazyCat> pikhq: Infact, any gove will filter Google service, just less or more. ?
19:58:54 <ManateeLazyCat> pikhq: Including Japanese and US will filter Google result.
19:59:05 <pikhq> ManateeLazyCat: The US does not filter Google results.
19:59:06 <pikhq> ManateeLazyCat: Nor does Japan.
19:59:18 <ManateeLazyCat> pikhq: I don't believe it.
19:59:20 <kmc> claims of cultural imperialism were also used to defend slavery
19:59:25 <ManateeLazyCat> pikhq: Just less.
19:59:30 <dankna> at least, if it were discovered that they did, it would be enormous outrage
19:59:32 <kmc> you can't judge the South by the rules of the North
19:59:37 <pikhq> ManateeLazyCat: In fact, the US does not censor the web. It will attempt to shut down websites sometimes, mostly due to child porn. But it does not filter things.
20:00:14 <jmcarthur> kmc: the slavery was not dissolved in the north before in the south
20:00:18 <kmc> you can send Google a DMCA complaint, and if it's valid they will remove links from their search results, and replace them with a banner saying they've done so... with a link to view the text of the DMCA complaint, which contains the URLs removed
20:00:20 <ManateeLazyCat> Anyway, i think it's better that Google don't exit, at least i can use it search most resource (except government).
20:00:29 <pikhq> kmc: Argh. Darn DMCA.
20:00:34 <pikhq> DAMN YOU CLINTON
20:00:42 <liyang> Oh for fuck sake. This is a pointless discussion. Let's talk about North Korea instead.
20:00:47 <kmc> there are some good parts of DMCA, like common carrier protection for proxies
20:01:07 <pikhq> kmc: Well, yes. But the bad parts are freaking terrible.
20:01:09 <kmc> true
20:01:29 <jmcarthur> i think most complex laws are like this
20:01:30 <kmc> it is an issue of legislators not understanding the social implications of technology, so they listen to various lobbyists and other sleazebags
20:01:40 <ManateeLazyCat> I think "god, it's can't work in China" when ChromeOS release.
20:02:36 <ManateeLazyCat> I still think Google make a *bad* decision, and worse for Google's Chinese engineer.
20:03:22 <systemfault> <3 Haskell
20:04:00 <ManateeLazyCat> jmcarthur: Chinese have three hundred million people use internet, you know what mean for Company (not just for Google) ?
20:04:10 <thaostra> Haskell is okay, but meh
20:04:12 <jmcarthur> Company?
20:05:24 <systemfault> Chinese don't use google a lot..
20:05:30 <systemfault> 23% IIRC
20:05:52 <ManateeLazyCat> jmcarthur: Three hundred million is huge Share
20:06:28 <jmcarthur> ManateeLazyCat: indeed. but china has repeatedly made things difficult for google, and the attacks were just the straw that broke the camel's back
20:06:30 <ManateeLazyCat> systemfault: No, most engineer, scientist, hacker use Google always.
20:06:32 <aavogt> > 300e6
20:06:33 <lambdabot>   3.0e8
20:07:02 <jmcarthur> > 300e6 * 0.23  -- is still quite a large count
20:07:03 <lambdabot>   6.9e7
20:07:25 <systemfault> Come on...
20:07:37 <systemfault> You think google didn't analyse the situation?
20:07:40 <jmcarthur> enough that there's a point in targetting it
20:07:45 <systemfault> They don't have to money?
20:07:45 <jmcarthur> i definitely think they did
20:07:51 <systemfault> Good. I think the same.
20:08:18 <jmcarthur> that tells me that it must have been a really big deal to them, to sacrifice that many users and the potential for more
20:08:32 <ManateeLazyCat> jmcarthur: Most haskell blog is at blogspot.com, have filter by GFW, i need some tools around GFW, but i don't want around GFW to access Google always.
20:08:44 <ManateeLazyCat> jmcarthur: I can't use Google once my tool failed.
20:09:23 <jmcarthur> ManateeLazyCat: i don't blae google at all. i would do the same thing
20:09:25 <jmcarthur> *blame
20:09:43 <aavogt> is planet.haskell.com blocked?
20:09:45 <liyang> ManateeLazyCat: 30% is a lot of people. I'm hoping that Google's move causes enough of a wave within the Chinese intelligentsia that they in turn force the government to behave more accountably.
20:10:02 <jmcarthur> liyang: i doubt google is important enough for that :(
20:10:10 <jmcarthur> it would be nice though
20:10:12 <liyang> jmcarthur: *hope*
20:10:21 <liyang> I'm used to having my hopes dashed.
20:10:28 <jmcarthur> me too
20:10:36 <ManateeLazyCat> jmcarthur: Dark time is coming, my god. I don't want waste time on GFW, speical when i use Google.
20:11:25 <systemfault> ManateeLazyCat: Get a proxy.
20:11:43 <ManateeLazyCat> systemfault: I don't use that. I have speical tool do that, better than proxy.
20:12:02 <ManateeLazyCat> systemfault: If you know GFW, you won't think proxy will fighting GFW simple.
20:12:16 <systemfault> I don't know :/
20:12:29 <ManateeLazyCat> jmcarthur: Infact, gov will filter all search result, even you remove google.cn, instead google.hk
20:12:55 <liyang> When I find myself stuck in China, I just SSH out.
20:13:00 <ManateeLazyCat> jmcarthur: For Chinese people, google.hk is same as google.cn, you still can be filter. Just worse.
20:13:02 <systemfault> Why is it called GFW?
20:13:09 <jmcarthur> ManateeLazyCat: from an american viewpoint, i think the biggest problem is that the chinese are too afraid of revolution to do much about these sorts of issues. i don't blame them, given china's history, but it's a possible explanation
20:13:15 <ManateeLazyCat> systemfault: Great firewall.
20:13:16 <systemfault> I mean... The term used commonly is Great Firewall fo China.
20:13:19 <systemfault> Ahh
20:13:23 * systemfault is dumb
20:13:30 <systemfault> Was wondering about the W
20:13:39 <ManateeLazyCat> jmcarthur: Just one difference, google.cn won't shutdown, but google.hk can.
20:13:56 <ManateeLazyCat> systemfault: Great Fire Wall.
20:13:57 <jmcarthur> ManateeLazyCat: what do you mean? full censorship?
20:14:12 <systemfault> ManateeLazyCat: I always though it was a single word.
20:14:17 <systemfault> *thought
20:14:42 <ManateeLazyCat> jmcarthur: GFW is build on internet rounter.
20:15:12 <ManateeLazyCat> jmcarthur: Even you send *Word* (gove don't like) to *any* website, you will be redirect.
20:15:19 <ManateeLazyCat> jmcarthur: Not just Google.
20:15:33 <systemfault> ManateeLazyCat: So..
20:15:44 <ManateeLazyCat> jmcarthur: Even now, you can search same thing (gov don't like) in google.hk, and google.com.
20:16:11 <systemfault> ManateeLazyCat: If I go to some blog then write a few "wrong" words on it, they will block it?
20:16:24 <liyang> jmcarthur: the material gains from modern China's capitalistic society provides enough of an incentive for most educated Chinese to not question the authority of their government.
20:16:25 <ManateeLazyCat> jmcarthur: So, if you living in China, and don't use tool fighting GFW, google.cn and google.hk is same, just google.hk worse.
20:16:49 <ManateeLazyCat> systemfault: blogspot.com have been shutdown completely, even have many useful Haskell blog in it.
20:16:51 <liyang> s/educated/well-off/
20:17:04 <ManateeLazyCat> systemfault: Gov won't filter your blog, it will shutdown *all* website.
20:17:38 <jmcarthur> liyang: true
20:17:46 <pikhq> ManateeLazyCat: Might I suggest moving? I would be tempted, personally.
20:18:02 <ManateeLazyCat> systemfault: Example, you write *bad* thing in your blog (blogspot.com), gov will shutdown blogspot.com completely. Even other blog (haven't govement) also can't access.
20:18:06 * liyang 's parents are similarly apologetic / revisionist as ManateeLazyCat, when discussing Chinese politics. >_>
20:18:41 <edwardk2> ok, ropes lobotomized, uploading to hackage
20:19:05 <systemfault> I see
20:19:07 <jmcarthur> edwardk2: you interrupted politics with something on-topic? how dare you!
20:19:13 <edwardk2> =)
20:19:15 * hackagebot rope 0.2 - Tools for manipulating fingertrees of bytestrings  http://hackage.haskell.org/package/rope-0.2 (EdwardKmett)
20:19:25 <ManateeLazyCat> liyang: I don't care politics, i just care computer.
20:19:25 <Mathnerd314> n00b haskell question: why are there so few type classes?
20:19:27 <jmcarthur> timely, hackagebot
20:19:42 <jmcarthur> Mathnerd314: because people are afraid of generality :(
20:19:53 <ManateeLazyCat> I'm a programmer i just want living in my pure world, not politics, just dream.
20:20:02 <jmcarthur> Mathnerd314: or at least were when the standard library was initially designed
20:20:03 <kmc> Mathnerd314, few compared to what?
20:20:10 <ManateeLazyCat> politics is always bad thing to me.
20:20:11 <liyang> ManateeLazyCat: you bloody well should care about politics, seeing as it affects your life. Like, just now.
20:20:20 <pikhq> ManateeLazyCat: In other countries, politics is actually a thing to be discussed, talked about, considered. And changed.
20:20:29 <dcolish> is hackage getting hammered today? i havent been able to run cabal update all day
20:20:30 <Mathnerd314> kmc: why couldn't everything be a type class?
20:20:39 <jmcarthur> pikhq: well, we have that illusion anyway ;)
20:20:49 <pikhq> jmcarthur: Hah.
20:20:49 <edwardk2> dcolish seems snappy to me
20:21:02 <kmc> Mathnerd314, in which way?
20:21:06 <dcolish> ok could be my local conn, i have a pretty slow line
20:21:13 <jmcarthur> dcolish: i think the new platform has been hammering it a bit
20:21:19 <Mathnerd314> kmc: throw away the types and just use type classes everywhere
20:21:32 <kmc> then what are your instances made of?
20:21:33 <ManateeLazyCat> liyang: Yep, i know, i know China have many *bad* thing on politics, but i want China can developing stable. Don't back to 1940~1950.
20:21:36 <dcolish> jmcarthur: yeah i took me 5 hours to download
20:21:44 <Mathnerd314> kmc: more type classes
20:21:57 <kmc> Mathnerd314, perhaps you'd like http://lambda-the-ultimate.org/node/3837
20:21:59 <dilinger> are there solutions online somewhere for Haskell: The Craft of Functional Programming?
20:22:02 <jmcarthur> Mathnerd314: well, no, you don't want that
20:22:09 <jmcarthur> Mathnerd314: the types are an important part of haskell!
20:22:10 <kmc> Mathnerd314, that doesn't make sense with how Haskell is currently designed
20:22:27 <kmc> Mathnerd314, often the point of using a single concrete type is that you know its structure: what the constructors are and what their fields are
20:22:33 <kmc> so you can do precise exhaustive pattern matching
20:22:35 <jmcarthur> Mathnerd314: type classes are powerful, but they are useless without types
20:22:44 <ManateeLazyCat> As a Chinese, i hope my country became stronger and better, even i don't like gov's GFW.
20:22:54 <kmc> if instead you only get some unknown type in some typeclass, you cannot pattern match on it directly
20:23:01 <kmc> you have to go through whatever indirections are provided by the class
20:23:10 <kmc> and while that's sometimes the desired level of abstraction, it's often not
20:23:20 <Mathnerd314> example?
20:23:32 * Mathnerd314 still doesn't know Haskell
20:23:38 <kmc> Mathnerd314, you should learn Haskell then
20:23:42 <jmcarthur> kmc: of course pattern matching could be provided with some sort of syntax sugar in place of a general function of the type class
20:23:54 <kmc> jmcarthur, you mean like a view?
20:23:56 <dilinger> i found http://rffr.de/fp_solutions/, but the answer that i'm looking for isn't htere
20:24:01 <jmcarthur> something like a view perhaps
20:24:05 <jmcarthur> not really what i meant
20:24:27 <kmc> Mathnerd314, it's common for beginners to Haskell to over-use typeclasses
20:24:30 <jmcarthur> :t maybe  -- kmc: more like replacing pattern matching with functions like this
20:24:32 <lambdabot> forall b a. b -> (a -> b) -> Maybe a -> b
20:24:32 <kmc> or to think they're necessary when they aren't
20:24:38 <kmc> jmcarthur, ah.  eliminators?
20:24:42 <kmc> i think that's what they're called?
20:25:02 <aavogt> that's confusing with the forall there
20:25:03 <jmcarthur> i think i've heard them called that before, but not often enough for it to sink in
20:25:13 <kmc> it's sort of like church encoding as well
20:25:16 <jmcarthur> yes
20:25:27 * aavogt read it as  forall b a b. (a -> b) -> Maybe a -> b
20:26:57 <kmc> in OO languages you are encouraged (and forced, in dys-functional ones) to explicitly invent a new type (a "class") every time you want new behavior from old code
20:27:08 <grncdr> I'm a total haskell noob, and I'm trying to re-implement a parser from a school assignment in haskell as an exercise, can somebody tell me how to make the scanIdentifier function on line 9 of this paste work point-free? http://pastie.org/882150
20:27:09 <jmcarthur> kmc: but anyway, what if pattern matching was replaced with so-called eliminators where they have types like this:  maybe :: Maybe m => b -> (a -> b) -> m a -> b
20:27:37 <jmcarthur> i'm probably giving Mathnerd314 too much confidence in his theory though ;)
20:27:48 <kmc> jmcarthur, interesting, how would you give it pattern-matching-like sugar?
20:27:57 <jmcarthur> in haskell it wouldn't work without a ton of major changes, not all of which would be simple at all
20:28:02 <edwardk2> ok, now that the rope lobotomy is complete now for the rocket science version
20:28:15 <jmcarthur> kmc: some sort of declaration i suppose that matches constructors to the function
20:28:19 <kmc> in Haskell too you can invent new types and attach new behavior to them.  but it's not the only or simplest way to get new behavior, because "behavior" means "function", and a function is just data you can pass around
20:28:22 <jmcarthur> kmc: this is how i wish view patterns worked
20:28:24 <edwardk2> jmcarthur: thats been done
20:28:33 <jmcarthur> edwardk2: ?
20:28:54 <kmc> the same is true for the user in the good OO languages (whether or not they define a class for each lambda form behind the scenes)
20:29:55 <kmc> Mathnerd314, anyway, if you want to think about how to unify typeclasses and (generalized) algebraic datatypes into one thing, i recommend that paper i linked
20:30:00 <kmc> if you don't know Haskell yet it may be a bit advanced
20:30:06 <edwardk2> jmcarthur: there was a nice little interpreter that was mentioned a year or three back that did compiled ADTs down to church form like that
20:30:52 <grncdr> hmm, is it safe to assume that this is not the place to ask for beginners help with haskell then?
20:31:05 <jmcarthur> dang hackage is going slow
20:31:07 <edwardk2> jmcarthur: digging for a reference for you
20:31:12 <pikhq> grncdr: Sure it is.
20:31:19 <jmcarthur> edwardk2: thanks!
20:32:03 <kmc> grncdr, this is definitely the place
20:32:21 <grncdr> OK then :) in this snippet (http://pastie.org/882150) I'm trying to get the scanIdentifier function to work point free
20:32:27 <kmc> grncdr, isn't it already point-free?
20:32:35 <grncdr> kmc it doesn't work
20:32:36 <jmcarthur> edwardk2: i want there to be a way to say something like (case someFingerTree of EmptyL -> foo ; x :< xs -> bar x xs) and have it do the view for me automatically, or at least semiautomatically. the current view pattern extension is kind of stinky to me
20:32:40 <edwardk2> http://www.cs.nott.ac.uk/~nhn/TFP2006/Papers/03-JansenKoopmanPlasmeijer-EfficientInterpretation.pdf
20:32:53 <kmc> grncdr, "(=~ idPattern) :: Identifier" looks fishy to me
20:32:57 <grncdr> yep
20:33:05 <kmc> (=~ idPattern) is an operator section, so it should be a function
20:33:10 <grncdr> that was me flailing at an anser
20:33:13 <kmc> so why are you giving it the type sig ":: Identifier"
20:33:16 <grncdr> s/anser/answer
20:33:23 <edwardk2> jmcarthur: you might also want to check out the syntax used in scala, which doesn't have the 'residue' in the pattern match that the haskell syntax does
20:33:24 <kmc> can you write the non-points-free version?
20:33:55 <grncdr> I want to apply that to the sole argument and bind the result (as type Identifier) to ident
20:34:08 <aavogt> pointfree doesn't look to be helpful with scanner
20:34:09 <grncdr> kmc: yep, but I'd have to re-write it...
20:34:27 <grncdr> aavogt: undoubtedly it's not the best way to do it
20:34:36 <grncdr> I'm just trying to practice though
20:35:23 <aavogt> grncdr: well different equations for the same function must have the same number of parameters
20:36:16 <grncdr> aavogt: you are referring to lines 16 vs. 17 ?
20:36:27 <aavogt> yes
20:37:25 <jmcarthur> edwardk2: this paper seems to describe an idea i've been wanting to try myself along with some sort of lazy partial evaluation
20:38:06 <edwardk2> it works rather well for an interpreter
20:38:26 <jmcarthur> indeed
20:38:50 * jmcarthur isn't entirely sure about compilation of lazy partial evaluation semantics
20:39:27 <edwardk2> partial evaluation is tricky because sometimes those residual programs can be huge =)
20:39:59 <jmcarthur> right
20:40:17 <jmcarthur> you have to stop unfolding under lambdas somewhere if you don't impose some other sort of constraint
20:40:27 <ManateeLazyCat> I can use Google search twitter now, cool.
20:41:46 <jmcarthur> but partial evaluation is so cool, looking at the tower of interpreters test and such
20:42:25 <edwardk2> yeah i used to have a lot more hope for it. now i just look towards jitting traces as my holy grail
20:42:46 <edwardk2> trying to do at runtime with more information what i could never get away with at compile time
20:42:56 <grncdr> ok, so writing it non-points-free errors out on can't match expected type 'Token' with 'Identifier' which confuses me, because 'Identifier' is definitely a case in the data Token declaration...
20:43:07 <jmcarthur> gc is to memory management as jitting is to partial evaluation
20:43:10 <grncdr> I fear that problem is even more noobish than the first ;)
20:43:18 <jmcarthur> there is a reason gc is still so popular today
20:43:47 <jmcarthur> techniques like region inference have still not solved the issue of determining memory management strategies statically
20:44:34 <jmcarthur> i fear the same might be true of jit and various partial evaluation tricks
20:44:46 <jmcarthur> *statically determined tricks, i mean
20:46:30 <dankna> ouch.  too long for hpaste.  denied!
20:46:34 <dankna> well, I can trim :)
20:46:45 <jmcarthur> dankna: woah you must be doing something craaaaazy
20:46:49 <dankna> haha
20:46:56 <dankna> it's a big grammar
20:46:59 <dankna> SQL is
20:47:05 <jmcarthur> sounds like you need some TH
20:47:10 <dankna> I imagine I do
20:47:44 <Mathnerd314> jmcarthur: this guy claims partial optimization sucks compared to his technique: http://www.supercompilers.com/white_paper.shtml
20:47:48 <aavogt> grncdr: I think you have a misunderstanding of where the arguments are 'passed' when you don't name them
20:48:12 <dankna> there we go.  I took only the first half of the file.
20:48:17 <jmcarthur> Mathnerd314: that appears to be a bad link to me
20:48:40 <Mathnerd314> http://www.supercompilers.com/white_paper.shtml ?
20:49:00 <jmcarthur> Mathnerd314: worked upon hitting refresh
20:49:11 <aavogt> grncdr: for example, your binding in line 28 (where c = head) is used as if that value is actually applied
20:49:20 <aavogt> but there it's just a function
20:49:34 <dankna> jmcarthur: I am still grateful for your help earlier, but I went with GADTs - I realized that I actually do want to construct the ADT explicitly so that I can deconstruct and reconstruct it.
20:49:50 <jmcarthur> Mathnerd314: partial evaluation isn't really the full idea i was talking about. i was talking about lazy partial evaluation
20:50:07 <jmcarthur> Mathnerd314: which i was incorrectly abbreviating to just partial evaluation
20:50:17 <Mathnerd314> *lazy* partial evaluation? how do you do that? (link is fine)
20:50:18 <dankna> er, AST explicitly
20:50:22 <dankna> http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24271#a24271
20:50:28 <dankna> highlighted lines around 118
20:50:33 <jmcarthur> dankna: that's quite fine, although i'm not sure what you mean by deconstruct and reconstruct yet
20:50:40 <dankna> give "not in scope: type variable whatever" errors
20:50:53 <dankna> do I need a forall or something?
20:51:08 <dankna> oh - well, I mean, part of the point of this is a query builder, which will take bits and pieces of AST and splice and dice them
20:51:28 <Nafai> How do I get the cabal-install version 8.0 that is required by the latest platform release?  I'm on Ubuntu Lucid with GHC 6.12.1 installed from packages.
20:51:33 <jmcarthur> dankna: oh, you will actually need to manipulate the AST? yeah that's a good case for GADTs
20:51:33 <dankna> deep inspection of the parts
20:51:49 <dankna> yeah, I will.  I wasn't sure at first whether I would or not but I realized that I will.
20:51:54 <Nafai> I don't see a download or a tagged release for cabal
20:52:16 <ManateeLazyCat> Nafai: Don't cabal-install package.
20:52:34 <ManateeLazyCat> Nafai: Then run ./bootstrap.sh under cabal-install.
20:52:46 <ManateeLazyCat> Nafai: Then you can install cabal,
20:52:52 <ManateeLazyCat> Nafai: But you need install GHC first.
20:53:00 <dankna> it was definitely interesting to see the non-AST approach though, I never would have thought of it on my own
20:53:07 <ManateeLazyCat> s/Don't/Download
20:53:29 <Nafai> ManateeLazyCat: Right, already installed GHC 6.12.1 from the distro.  Now I need the correct version of cabal-install for the platform cabal package.
20:53:36 <jmcarthur> dankna: i suspect you are wanting existential quantification there. i assume you want to be able to apply those constructors to values with concrete types?
20:53:49 <ManateeLazyCat> Nafai: You have download cabal-install ?
20:53:52 <Alpounet> @where cabal
20:53:52 <lambdabot> http://www.haskell.org/cabal
20:54:00 <jmcarthur> dankna: yeah i'm a fan of avoiding data structures that aren't necessary :)
20:54:06 <dankna> jmcarthur, yeah, fair :)
20:54:12 <ManateeLazyCat> Nafai: If you have, just unpack it, then run ./bootstrap.sh under cabal-install directory.
20:54:32 <jmcarthur> dankna: but i agree with your decision given that you need to manipulate the AST
20:54:42 <dankna> jmcarthur, well, yes, the a1 and a2 are the type parameters used by the GADT that I don't care about for this particular situation
20:54:54 <SANDERS> I'm gibing a presentation on haskell and I am trying to think of a good example game/app that show various aspects of Haskell programming, but is not to complex
20:55:00 <tensorpudding> Can you use cabal-install to generate haddock documentation without having to install the package?
20:55:06 <dankna> jmcarthur: well good, nice to have that confirmation
20:55:11 <SANDERS> any suggestions?
20:55:23 <SANDERS> s/gibing/giving/
20:56:23 <ManateeLazyCat> Nafai: That script will download all necessary packages to install cabal.
20:56:35 <Nafai> ManateeLazyCat: But I don't see a download for version 0.8 that is specified the in the platform
20:56:39 <ManateeLazyCat> Nafai: You will got "cabal" command after you install it completely
20:56:40 <jmcarthur> dankna: i ask because there are two ways to bind those variables. you could use higher rank types, in which case you can only apply that constructor to values which have those type variables fully polymorphic but you can then pattern match it such that those variables can be any type you want, or you could use existential quantification, in which case you can apply that constructor to values with
20:56:41 <jmcarthur> those type variables concrete, but when you pattern match you will not know what type they are
20:56:49 <dankna> jmcarthur: hmm
20:57:06 <ManateeLazyCat> Nafai: http://hackage.haskell.org/cgi-bin/hackage-scripts/package/cabal-install
20:57:19 <jmcarthur> dankna: i'm suspecting that you want the latter, but i warn you to be careful because you will lose type information under that constructor if you do it
20:57:36 <jmcarthur> dankna: if you want to keep that type information around you need to expose it, so that whole ADT would need to be turned into a GADT
20:57:43 <ManateeLazyCat> Nafai: If simple, just download Haskell-Platform beta for ghc-6.12
20:57:52 <Nafai> thanks
20:58:06 <ManateeLazyCat> NP. :)
20:58:33 <fatalerrorx> i installed haskell 6.12 from source how do i remove it?
20:58:39 <dankna> turning Expression into a GADT is the third option, right?  it's an alternative to both higher-rank types and existential quantification?  or it works in conjunction with them and I'd still have to choose one?
20:58:53 <jmcarthur> dankna: rereading that, it may be an opaque explanation. sorry if so
20:58:56 <fatalerrorx> i'm on ubuntu
20:59:05 <dankna> it's a little confusing but these are deep concepts
20:59:20 <jmcarthur> dankna: turning it into a GADT *and* exposing those variables in the type is a third option
20:59:41 <ManateeLazyCat> fatalerrorx: Remove /usr/local/lib/ghc-6.12.1
20:59:51 <dankna> actually I just realized
20:59:51 <jmcarthur> dankna: (for the record, GADTs implicitly gives you existential quantification, but i don't think you've used that aspect of it yet)
21:00:04 <dankna> it's always going to be Statement L0 T S
21:00:07 <ManateeLazyCat> fatalerrorx: Then remove ghc from /usr/local/bin/
21:00:13 <dankna> so I don't need any form of polymorphism :)
21:00:15 <jmcarthur> dankna: ah, then it's easy :)
21:00:18 <dankna> yeah haha
21:00:29 <ManateeLazyCat> fatalerrorx: And ~/.ghc
21:01:29 <jmcarthur> dankna: for the record, existential quantification gives you the ability to do some very OO-like things, for better or for worse
21:02:18 <jmcarthur> dankna: in haskell you usually know exactly what type a variable has at compile time. in OO languages you usually only know of one or more of the interfaces an object exposes. existential quantification gives you the latter
21:02:19 <Mathnerd314> jmcarthur: what did you mean by lazy partial evaluation? is there a paper on it?
21:03:00 <dankna> jmcarthur - yeah... I've actually used existential quantification before, but I wouldn't say that I fully understand it
21:03:09 <dankna> I used it for working closely with Objective-C code
21:03:19 <dankna> that wanted my code to be more polymorphic than it otherwise could have been.
21:03:42 <dankna> I was surprised that it came up in this context as well
21:04:33 <jmcarthur> dankna: actually, it's just a different kind of polymorphism than normal, not more polymorphic
21:04:51 <ManateeLazyCat> jmcarthur: My neck is so hurt, because update gtk2hs.
21:05:06 <jmcarthur> Mathnerd314: i think this is the paper (thesis, actually) that i was looking for http://thyer.name/phd-thesis/
21:05:09 <dankna> hmm, yes, okay
21:05:12 <ManateeLazyCat> jmcarthur: I need rest after i update finish.
21:06:28 <jmcarthur> dankna: it's just the polymorphism that remains after you forget what the concrete type is. you already had that polymorphism available to you, you just now don't know how you got it :)
21:07:24 <ManateeLazyCat> Bye all. Update gtk2hs, any bug report or suggestion are welcome! :)
21:07:40 <dankna> jmcarthur: ah, yes, haha, that makes sense :)
21:08:40 * edwardk2 had a very morbid thought. i have bunch of operations that need to access either end of a type level list... of course the right answer here seems to be to use a type level fingertree
21:08:55 <edwardk2> which made my brain asplode
21:08:58 <jmcarthur> edwardk2: lol, i thought of that before
21:09:04 <Mathnerd314> thus why types should be values...
21:09:23 <edwardk2> Mathnerd314: pick up a pure type system, coq or agda for a while, we'll be waiting for you when you get back ;)
21:09:37 <jmcarthur> edwardk2: but i *like* coq and agda!
21:09:47 <jmcarthur> i just... can't use them practically
21:09:53 <Mathnerd314> there aren't any good tutorials for agda/coq/...
21:09:58 <edwardk2> jmcarthur: yeah, but you also find my code amusing rather than apalling, so we've already established you as an outlier.
21:10:05 <jmcarthur> Mathnerd314: there are some great ones for coq
21:10:23 <edwardk2> Mathnerd314: coq has a pretty good book called coq'art
21:10:25 <jmcarthur> edwardk2: wait, most people find your code appalling? no way
21:11:01 <jmcarthur> i seriously don't find it that bad. a bit overdone sometimes, perhaps... :)
21:11:01 <liyang> “Let me show you my Coq.” —Huet(?)
21:11:05 <edwardk2> =)
21:11:23 <edwardk2> i plead temporary insanity w.r.t. the bifunctor combinators
21:11:26 <dcolish> Mathnerd314: http://www.cis.upenn.edu/~bcpierce/sf/
21:11:38 <dcolish> ^ a great Coq tutorial
21:11:43 <liyang> (—Huet, on Zippers.)
21:11:48 <jmcarthur> but i find myself constantly reimplementing a lot of things that i'd rather just rip out of category-extras anyway
21:12:17 <jmcarthur> Mathnerd314: i recommend the one dcolish just linked too, as well
21:12:18 <edwardk2> i've been telling myself to finish refactoring that thing for months, but there is always something more pressing
21:12:32 * Mathnerd314 starts reading
21:12:33 <liyang> Mathnerd314: in fact, re-do that in Agda. Should be a fun project.
21:12:54 <edwardk2> a love agda, i just don't love emacs, so it is nigh unusable ;)
21:12:59 <Mathnerd314> liyang: re-do what?
21:13:06 <jmcarthur> i love emacs, therefore agda is a natural choice for me :)
21:13:10 <liyang> Mathnerd314: Pierce's tutorial.
21:13:19 <edwardk2> Mathnerd314: the tutorial there, if you walk through a tutorial for one language using another you learn both much more thoroughly ;)
21:13:20 <liyang> edwardk2: I learn to live with it. :(
21:13:42 <jmcarthur> has anybody implemented tactics for agda yet?
21:13:42 <Mathnerd314> I do have agda/emacs installed...
21:13:46 <edwardk2> liyang: i tried. my fingers went numb and i went back to vi ;)
21:14:12 <edwardk2> jmcarthur: they don't do tactics but they have a tricky way for doing proof search like things by setting up an appropriate domain, etc.
21:14:14 <liyang> edwardk2: Vi? Seriously? That's arguably worse than Emacs…
21:14:16 <edwardk2> they have a ring solver that works that way
21:14:31 <jmcarthur> i like vi too... :(
21:14:37 <jmcarthur> vim, rather
21:14:38 <liyang> edwardk2: Vim on the other hand.
21:14:41 <edwardk2> liyang: half as many keystrokes to do anything and my hands travel more =P
21:14:48 <dcolish> jmcarthur: i was running Alfa earlier today
21:14:56 <edwardk2> liyang: gvim actually, but vi is a mindset not an implementation to me ;)
21:15:32 <liyang> edwardk2: In that case I should be more specific and reveal that I actually use Aquamacs.
21:16:03 <liyang> It's usable in the sense that it works (or rather, can work) mostly like a typical OS X program.
21:16:06 <edwardk2> damn. i was hoping to use type families in this code, but the inability to to overlapping instances would make the quick and dirty optimizing brand stuff too hard =(
21:16:28 <jmcarthur> i use emacs for developing and vim for text editing
21:16:30 <edwardk2> and would leave the whole system brittle and unextensible.
21:16:37 <edwardk2> that kind of forces me to MPTCs
21:16:43 <jmcarthur> edwardk2: please tell me you are implementing type level finger trees
21:17:05 <edwardk2> jmcarthur: not yet, just the annotated ones in cps style
21:17:14 <jmcarthur> heh, "not yet"
21:17:32 <edwardk2> you just want to be able to do oohaskell tricks with fingertrees ;)
21:19:29 <jmcarthur> what does it have to do with oohaskell?
21:20:25 <edwardk2> well, instead of using list based field selectors you'd get O(log n) selection, etc.
21:20:39 <edwardk2> using an HFingerTree vs. an HList or whatever it'd be best called
21:21:23 <Masky> so what're your hobbies guys?
21:21:25 <jmcarthur> oh i guess that is how oohaskell keeps things type safe? i've never given it a deep look
21:21:36 <edwardk2> Masky: mostly writing haskell ;)
21:22:00 <jmcarthur> long walks on the beach
21:22:31 <Masky> edwardk2, what are your hobbies if a cute girl asks you
21:23:10 <edwardk2> Masky: "mostly writing haskell" ;)
21:23:14 <grncdr> thx for the help earlier everyone, scanner now scans, I'll be back for more when I try to make the parser parse ;)
21:23:23 <edwardk2> Masky: my wife would say i'm a bit oblivious ;)
21:23:49 <Masky> okay
21:23:52 <Masky> that answer does not help me
21:29:06 <pikhq> Masky: 「日本語」と言う。^_^
21:29:38 <Masky> you say the word "Japanese"? ;p
21:29:44 <Masky> that hobby might get old a bit quickly
21:30:02 <kmc> playing with coq
21:30:11 <pikhq> Masky: 「what are your hobbies if a cute girl asks you」の質問。……
21:31:05 <Masky> ah...gotcha
21:32:23 <jmcarthur> kmc: i didn't get the joke at first. sad
21:33:16 <anonloli> Guys, I'm looking to join a botnet.
21:33:25 <anonloli> Preferably something massive, hosted by Russians.
21:36:17 <anonloli> Honestly, guys
21:36:23 <anonloli> Mindfuck > Haskell
21:36:34 <Masky> you mean Brainfuck?
21:36:49 <edwardk2> don't feed the troll
21:37:02 <anonloli> lol
21:38:23 <jbapple> I just looked at some recent hackathon pictures
21:38:49 <jbapple> I can't see everyone's face, but it looks like at least 95% male.
21:39:31 <jbapple> I know CS has more men than women
21:40:00 <aavogt> maybe they just look that way
21:40:03 <edwardk2> clearly you should have become a theater major ;)
21:40:06 <jbapple> But the hackathon looks even more single-gender-dominated than my other CS experience
21:41:06 <aavogt> > 610 * 0.05
21:41:07 <lambdabot>   30.5
21:41:36 <SANDERS> jbapple: I still have yet to ever meet a female programmer :\
21:42:34 <jbapple> Maybe my experience is unusual.
21:42:36 <edwardk2> sanders there are plenty, even on here
21:43:45 <sanders> edwardk2: thats certainly good, I am fairly annoyed by the gender bias in the CS world (at least around me)
21:44:10 <jbapple> I wonder if there is something different about Haskell, or about hackathons, or about Haskell hackathons
21:44:35 <jbapple> (I pluralize because I had noted the same thing in pictures from previous hackathons)
21:44:36 <edwardk2> maybe its just the hackathon thing, try icfp or something
21:44:54 <aavogt> sanders: there are ways to make a change...
21:45:52 <sanders> aavogt: ?
21:47:21 <kmc> specifically a gender change
21:47:47 <aavogt> what's it, a Gandhi quote: "be the change you want to see in the world"
21:47:55 <sanders> ha
21:48:24 <pikhq> I've met female programmers. They really are a minority, sadly.
21:52:27 <dcolish> support ACM-W
21:53:30 <Masky> that's fucked up aavogt
21:54:26 <jmcarthur> i work with 2
21:54:39 <jmcarthur> one of them is also the ceo, but she's a coder at heart
21:56:49 <edwardk2> hrmm my cps is insufficiently higher order ;)
21:57:28 <edwardk2> drop' :: Annotation f => Int -> A a (f a) -> (forall b. f b -> r) -> r
21:57:56 <edwardk2> that works fine in isolation
21:58:06 <edwardk2> but defining the production annotation is a different story
21:58:30 <edwardk2> unless i'm confused.
22:05:14 <tcleval> is it possible to make ghc generate C from Haskell source so I can crosscompile the C source?
22:05:53 <edwardk2> you can generate c, but you'll spend a lifetime figuring out how to get it to crosscompile. there is a LOT of stuff in the runtime system
22:05:59 <edwardk2> and it isn't very portable
22:06:07 <aavogt> the haskell ffi can export stuff to be called from C
22:06:22 <SamB_XP> edwardk2: I thought it was supposed to take slightly less than a lifetime to figure out
22:06:22 <edwardk2> if you absolutely must cross compile haskell you can look at JHC though, and perhaps one of the other smaller compilers
22:06:32 <SamB_XP> how else did they ever get GHC running on more than one arch?
22:06:39 <tcleval> edwardk2: and the new LVVM? can it make easy to port some haskell application?
22:06:52 <kmc> you have to build "unregisterized C"
22:06:53 <edwardk2> SamB_XP: dunno, my life isn't over yet, but i still haven't figured it out. i figure by the time it is resolved, it won't matter to me any more one way or the other ;)
22:07:02 <kmc> which is not the usual -fvia-C mode
22:07:08 <kmc> tcleval, some of this info may be relevant: http://hackage.haskell.org/trac/ghc/wiki/Building/Porting
22:07:33 <edwardk2> tcleval: there are porting guidelines, but they are like i said, not for the faint of heart.
22:08:02 <ddarius> There's a difference between bootstrapping GHC on a different architecture and making a cross-compiling GHC.
22:08:13 <kmc> imo the cleaner approach (which is what ocamlc does) would be to bootstrap your fancy self-hosting compiler with a tiny non-self-hosting interpreter
22:08:13 <tcleval>  kmc I understand how porting of GHC works, but I was talking about make GHC compile my program to something portable, maybe C or LVVM .. IDK
22:08:13 <edwardk2> one of the gsoc proposals was iirc to start working on adding hooks for cross compiling.
22:08:13 <kmc> but this is not what ghc does
22:08:13 <kmc> and i don't believe you can run ghc in any extant Haskell interpreter
22:09:20 <edwardk2> tcleval: JHC can more or less do that out of the box, but GHC has a couple of decades worth of accumulated (but necessary) cruft in its RTS, so even if you generated c or llvm, the resulting codeis far from idiomatic, it mostly uses c like a low level assembler
22:10:13 <kmc> i know there is a difference
22:10:13 <kmc> but the process of generating those unregisterized c files seems relevant
22:10:13 <kmc> tcleval, the new LLVM backend would be useful
22:10:13 <kmc> but porting the RTS seems like a bigger obstacle
22:10:25 <tcleval> edwardk2: so what is the advantage of using LLvm?
22:10:26 <edwardk2> the iphone guys (RyanT5000 and the rest) ran into something similar because there they HAD to add some cross compilation support
22:10:56 <edwardk2> tcleval: better optimization passes, better in memory generation of code, better hooks into a lot of guts
22:11:11 <Svrog> when i tried jhc about half a year ago programs compiled with it would segfault a lot - don't have any specifics right now but they were really really simple programs on the level of hello world pretty much
22:11:20 <edwardk2> a custom calling convention, and several years of imperative programming optimizations all migrate into our back end at no real cost to us
22:11:31 <edwardk2> Svrog: i never said it was stable =)
22:12:09 <Svrog> yeah but it's not practical for cross platform development at all as far as i could tell
22:12:15 <Svrog> in its current state
22:12:33 <edwardk2> shapr was compiling a bunch of stuff for his BUG or something like that with it
22:12:44 <edwardk2> i wouldn't build anything productionworthy though ;)
22:12:46 <Svrog> i wanted to use it for iphone development - ended up switching to gambit scheme
22:12:51 <edwardk2> yeah
22:12:56 <edwardk2> gambit isn't a bad bet on the iphone
22:13:08 <Svrog> yeah - i miss haskell though
22:13:11 <SamB_XP> not so much of a gambit then?
22:13:14 <Svrog> but gambit scheme with schelog is fun
22:13:16 <edwardk2> well, there is an iphone port of haskell
22:13:26 <edwardk2> SamB_XP: *groan* ;)
22:13:35 <edwardk2> Svrog: er by haskell i mean ghc
22:13:41 <Svrog> the iphone port of haskell doesn't feel mature, to me at least
22:13:47 <edwardk2> its not
22:13:51 <edwardk2> but its not bad
22:13:51 <Svrog> yeah ghc
22:13:59 <eldragon> Svrog, hasjell and scheme are different paradigms to program.
22:14:10 <Svrog> sure
22:14:12 <SamB_XP> hasjell -- that targets JVM?
22:14:23 <eldragon> err, haskell
22:14:42 <Masky> why oh why would someone make a haskell that targets JVM
22:14:50 <Svrog> i wanted to use haskell, i wasn't happy with the state of ghc on the iphone and jhc seemed broken - scheme seemed like the next best thing
22:14:52 <SamB_XP> because they have CPU to BURN
22:14:54 <edwardk2> Masky: a few folks have tried
22:14:57 <Svrog> of the things that were available
22:15:08 <edwardk2> Masky: mostly to see if they could take advantage of the jit and libraries, etc.
22:15:40 <Masky> like as if Haskell isn't abstract enough from the machine code, on top of it let's compile it to jvm bytecode
22:16:00 <kmc> the JVM is a poor target for functional languages
22:16:09 <Masky> oh and let's also run this all in a virtual operating system
22:16:16 <kmc> in Clojure to make a tail call you have to use a special form that's 3x as slow
22:16:17 <Adamant> the problem with functional-ish anything on JVM is the lack of direct tail call support
22:16:19 <Adamant> yeah
22:16:37 <kmc> which is a problem for a very broad class of languages
22:16:37 <eldragon> and JVM is killed by Oracle
22:16:52 <kmc> recursion is a pretty big deal always
22:16:52 <SamB_XP> eh?
22:17:00 <SamB_XP> oracle killed JVM how ?
22:17:20 <Adamant> I think they'd also have to rework the security and sandboxing mechanism because they depend to some degree on stack walking, which TCO kills
22:18:15 <eldragon> php on iphone maybe a good idea
22:18:24 <SamB_XP> ???!??!
22:18:32 <SamB_XP> you want more exploitz?
22:18:36 <kmc> haha
22:18:39 <Adamant> it's been done already, IIRC
22:18:41 <edwardk2> php on iphone sounds like the worst idea ever ;)
22:18:51 <SamB_XP> for, you know, jailbreaking?
22:18:55 <kmc> when all you have is a hammer
22:19:07 <kmc> you find these web guys who do all their backend infrastructure code in PHP and Rails
22:19:18 <SamB_XP> PHP comes on Rails now too?
22:19:22 <kmc> admittedly, Ruby is a decent language
22:19:36 <edwardk2> i think this post sums up the reaction of the sane programmer to perpetuating php into new contexts: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=380731
22:19:37 <Adamant> I think they've ported all of the P's and Ruby to the iPhone at some point
22:19:42 <kmc> no, i meant PHP and Ruby on Rails, with emphasis that they're actually using the web libraries of the latter
22:19:49 <eldragon> nginx + fastcgi + php + ruby ...
22:19:51 <SamB_XP> Adamant: didn't you get the memo?
22:19:56 <SamB_XP> Ruby starts with a P, too
22:20:21 <SamB_XP> kmc: for backends ?
22:20:24 <Adamant> the memo is apparently covered by a TPS report
22:20:26 <kmc> yes
22:20:34 <SamB_XP> Adamant: a what ?
22:20:48 <edwardk2> Adamant: heh
22:20:59 <Adamant> SamB_XP: a fictional construct from an American movie about office life
22:21:42 <Adamant> :P
22:23:41 <tcleval> is clojure any good?
22:24:14 <kmc> i think so
22:24:18 <kmc> have read about it but not used it
22:25:33 <tcleval> kmc: what are the alternatives of functional programming on jvm?
22:25:48 <aavogt> scala
22:26:11 <geir_> kawa
22:26:30 <kmc> clojure is pushing a lot of important concepts, like the difference between value / identity / state, and the use of persistent data structures with sharing between updates, and transactions for concurrency
22:26:42 <edwardk2> i finally gave up and used reflection. drop' :: (s `ReifiesNum` n) => Ann a f -> f (Drop s a)
22:26:42 <kmc> really fundamental stuff that mainstream languages and programmers tend to get wrong
22:27:17 <edwardk2> then i can define drop' for Ann a (f :*: g) without problem, just one surrounding reification
22:27:43 <kmc> you can even do functional programming in Java (sort of, painfully)
22:28:08 <kmc> FP is a set of techniques that can be used in almost any language, with varying degrees of success and pain
22:28:23 <edwardk2> clojure isn't a bad language, for a lisp i even like the macro system
22:28:28 <geir_> clj and haskell code can be conseptual quite equal. A friend of mine use clj and we often try to present solutions to the same problem.
22:28:37 <andrewsw> FP in bash is pretty interesting
22:28:51 <kmc> C++ has terrible built-in support for FP techniques but people have written hundreds of thousands of lines of code to try to make it easier
22:28:54 <geir_> bash is more or less a functional language ;)
22:29:07 <Adamant> more like a composable language :P
22:29:15 <kmc> it's funny to see that and then hear the same people say that functional programming is useless :)
22:29:27 <kmc> it's only useful when it's really cumbersome, apparently
22:29:37 <pikhq> kmc: That's the C++ way.
22:29:54 <aavogt> isn't ghc quite a few thousands of lines?
22:30:00 <Adamant> Greenspun
22:30:03 <systemfault> Owww, come one C++ bashers..
22:30:09 <kmc> yeah here we go again
22:30:11 <systemfault> *Come
22:30:14 <systemfault> on
22:30:18 * ManateeLazyCat http://www.1234ren.com/16518
22:30:19 <edwardk2> kmc: hundreds of thousands already? they must be nearing completion of "Hello World" at last! =)
22:30:41 <Adamant> aavogt: ghc isn't small
22:30:42 <kmc> edwardk2, well it only took Boost about 1000 lines to implement Maybe
22:30:59 <edwardk2> oh wait, you said "functional programming", so instead of "Hello World" i should have said 'fib' =)
22:31:23 <edwardk2> kmc: i've spent that same 1000 lines reimplementing Maybe correctly in c# personally ;)
22:31:41 <Adamant> oh where did you go, circle, triangle, and rectangle!
22:31:58 <kmc> yeah, well in C# every type is in Maybe by default, and they've recently added the ability to declare one that isn't ;)
22:32:42 <edwardk2> heh
22:33:02 <edwardk2> not quite true, they've had unboxed types
22:33:10 <kmc> i don't know, i think learning Haskell has made me really bitter about commercial software development
22:33:19 <edwardk2> int, etc. all the second class citizens
22:33:36 <kmc> i feel like the lead time from research to commercial use in programming languages has widened dramatically
22:34:27 <kmc> structured programming caught on pretty quick
22:35:21 <kmc> i guess C and FORTRAN were simple and good enough
22:35:33 <kmc> to seriously delay adoption of anything more sophisticated
22:36:35 <pikhq> C also had UNIX going for it.
22:36:53 <pikhq> That's a freaking ton of momentum right there.
22:37:16 <liyang> kmc: likewise, as far as feeling bitter is concerned. Also, back in the day there weren't so many ‘programmers’, which might have helped.
22:37:27 <systemfault> Oww
22:37:33 <liyang> Oh. Well if you're going to feel that bitter about it.
22:37:48 <systemfault> liyang: kmc wasn't here..
22:37:59 <systemfault> 01:36 < liyang> kmc: likewise, as far as feeling bitter is concerned. Also,  back in the day there weren't so many ‘programmers’, which  might have helped.
22:38:02 <kmc> i see
22:38:04 <ddarius> edwardk2: My definition of fibration was a bit off, so, thankfully, Gray is correct and I was mistaken about him being mistaken.
22:38:10 <liyang> I saw… thanks. :3
22:38:11 * kmc hugs tunes.org logs
22:38:43 <arcatan> treehugger!
22:38:48 <kmc> har har
22:38:58 <kmc> i heard that google has a "functional programming group" of 50 people
22:39:00 <kmc> which sounds impressive
22:39:05 <kmc> but apparently by "group" they meant "mailing list"
22:39:18 <kmc> so there are 50 people there who care about FP enough to sign up for a mailing list
22:39:56 <liyang> Well, their Zurich HQ had enough interest to have hosted a hackathon last weekend.
22:39:59 <kmc> true
22:40:12 <kmc> when we rebrand Haskell as a pragmatic alternative to Haskell, what should the new name be?
22:41:00 <jbapple> Paskell, obviously!
22:41:01 <liyang> Pascal. Because let's face it, everyone else mishears Haskell as that anyway.
22:41:10 <liyang> Er…
22:41:19 <jbapple> jinx, buy me two cokes.
22:41:47 <aavogt> so hopefully they can adjust the superclass weirdness with Monad and Applicative when they rename them to something more user friendly
22:42:47 <edwardk2> aavogt:  good luck with that one =)
22:42:48 <jbapple> Well, Monad is going to be WarmFuzzy, I think
22:42:49 <jbapple> http://www.google.com/search?q=monad+"warm+fuzzy"
22:42:51 <edwardk2> liyang: yeah =)
22:43:06 <edwardk2> jbapple: then clearly an Applicative should just be a Fuzzy
22:43:23 <liyang> aavogt: for similar reasons of inertia as the current software engineering industry, that'll never happen. :(
22:43:36 <edwardk2> But you don't want Fuzzy things to be Pointed so that name needs to change too
22:43:43 <aavogt> but we're talking about the pragmatic alternative to haskell!
22:43:53 <ddarius> edwardk2: Injectable
22:44:24 <jbapple> edwardk2: Well, sea urchins are sort of fuzzy+pointed
22:44:30 <andrewsw> ow
22:44:40 <liyang> (Haskell is my pragmatic alternative to Agda.)
22:44:50 <jbapple> or duck-billed platypuses
22:44:56 <jbapple> But I see your point
22:45:11 <kmc> i wanna see a blog article about this great new language that combines the theoretical beauty of Haskell with pragmatic features such as first-class imperative programming, mutable references, light-weight threads with software transactional memory, FFI to C or Python or Ruby
22:45:49 <liyang> kmc: wat. GHC does all of that.
22:46:01 <liyang> O I C. Nevermind.
22:46:10 <kmc> with serious industrial users and a mature toolset
22:46:11 <edwardk2> kmc: i'll get there. ;)
22:46:16 <kmc> liyang, ;)
22:46:18 <aavogt> kmc: how about in a week or so?
22:46:21 <kmc> hehe
22:47:06 <kmc> though -- calling GHC "mature" is to downplay all the recent improvements, and it'd be a bit disingenuous to claim both at the same time :)
22:47:36 <edwardk2> sadly i think i need to give up and let the guts of my annotations run unsafe. i'm spending way too many cpu and mental cycles trying to prevent myself from doing bad things and not enough time allowing me to do good things
22:47:41 <ddarius> A twenty+ year old project can't be called "mature?"
22:47:59 <liyang> Mature shouldn't imply that nothing changes…
22:48:04 <Svrog> ffi to python and ruby? why?
22:48:05 <kmc> anyway i think the hot new trend in programming languages is pragmatic alternatives to Haskell; we'd be wise to jump on this bandwagon
22:48:21 <edwardk2> kmc: its mature, it is just going through a mid-life crisis. the kids have left the nest and it has all sorts of time on its hands
22:48:50 <ddarius> Haskell wouldn't be where it was today if it hadn't relentlessly jumped on all the bandwagons that passed it.
22:48:50 <kmc> heh
22:48:57 <kmc> the kids being?
22:49:48 <mm_freak_> how do i uninstall and unregister a user-installed package safely?
22:49:50 <aavogt> ddarius: so it's only reasonable to try to catch this one
22:50:07 <mm_freak_> i see cabal install and cabal register, but nothing in the other direction
22:50:24 <aavogt> mm_freak_: ghc-pkg unregister
22:50:39 <aavogt> and then manually delete some files in ~/.cabal, if you need the space
22:50:43 <edwardk2> kmc: dons, duncan, bos, igloo, etc?
22:50:48 <mm_freak_> aavogt: thanks
22:50:59 <kmc> what'd i do?
22:51:11 <kmc> oh
22:51:14 <kmc> you are answering my question
22:51:25 <liyang> kmc: high-order functions, laziness, monads (in the CS sense), and composable STM, for example?
22:51:25 <edwardk2> kmc: hah
22:51:35 <kmc> i saw my name in a list of awesome people and became very confused
22:51:52 <liyang> edwardk2: they've left?
22:53:12 <edwardk2> liyang: bad analogy, i was mostly thinking 'came into their own', but it didn't translate well
22:53:19 <arcatan>  /wi Igloo
22:53:29 <arcatan> whoops
22:53:58 <liyang> That said, I'm not surprised if they seem to hang around here less often. We do talk a lot of crap.
23:00:53 <mm_freak_> ok, i've uploaded my first package to hackagedb
23:01:17 <mm_freak_> the haddock documentation hasn't been generated
23:01:25 <mm_freak_> how can i fix it, so that the docs are available online?
23:01:30 * hackagebot fastirc 0.1.1 - Fast Internet Relay Chat (IRC) library  http://hackage.haskell.org/package/fastirc-0.1.1 (ErtugrulSoeylemez)
23:01:34 <aavogt> I would like to know too
23:01:44 <edwardk2> it takes time but it happens for you
23:02:01 <mm_freak_> ah ok, thanks
23:02:02 <aavogt> edwardk2: how about if you depend on something like gtk2hs which isn't installed?
23:02:02 <edwardk2> they batch them up, it can take quite a while
23:02:22 <edwardk2> aavogt: dunno, its always 'just worked' =)
23:02:36 <mm_freak_> yeah, i noticed that the latest version of the Crypto library has no online docs for quite some time now
23:02:42 <edwardk2> i'm sure dcoutts or someone more familiar with the process could answer better than i
23:02:48 <mm_freak_> i guess that generating all those docs takes a day or something =)
23:03:23 <chrisdone> whoever just uploaded that fastirc library should add their email. package has a 'test' executable in it which is bad ~
23:03:30 <chrisdone> Ertugrul Söylemez
23:04:02 <mm_freak_> chrisdone: that's me
23:05:01 <dons> danderson: yeah, we'll need a mirror. that would be awesome. could you mirror the entire platform site?
23:05:13 <mm_freak_> that 'test' executable gets only build, when you enable the 'debug' flag
23:05:32 <mm_freak_> is there a better way to do this?
23:05:32 <dons> danderson: everything under http://hackage.haskell.org/platform/
23:05:43 <mm_freak_> s/build/built/
23:05:47 <dons> i've got to catch a plane, but let me know what you come up with.
23:06:00 <chrisdone> mm_freak_: yeah I just read the .cabal file. that looks ok
23:06:33 <mm_freak_> somehow i completely forgot to add my email address
23:07:03 <mm_freak_> it'll be in there in the next release
23:07:22 <chrisdone> mm_freak_: I was just wondering. sometimes a testing package has different dependancies which people probably don't want to install. I wonder if it's acceptable to include another .cabal file in a test directory for building tests/benchmarks, etc.
23:07:45 <chrisdone> mm_freak_: yeah, good work! nice to see more things with attoparsec :p
23:08:21 <mm_freak_> chrisdone: i've done that before and it's a bit inconvenient, that's why i'm doing it this way…  though it's quite unfortunate that it's displayed on hackagedb as "library and program"
23:08:44 <chrisdone> yeah
23:09:15 <mm_freak_> yes, there is already an 'irc' library, but it's quite limited and uses String, so i decided to make a better IRC library, which can do a bit more than just parsing =)
23:10:05 <chrisdone> mm_freak_: do you have a github repo for it?
23:10:56 <arcatan> oh, somebody got around and implemented an actual IRC library?
23:11:01 <chrisdone> mm_freak_: I'd like to write some quickcheck properties and/or benchmarks
23:11:12 <chrisdone> arcatan: by 'actual' you mean includes sockets?
23:11:14 <mm_freak_> chrisdone: i'm just uploading it to code.haskell.org
23:11:21 <arcatan> chrisdone: yes
23:11:45 <arcatan> preferably also bit more logic than just parsing. event loop would be nice.
23:13:01 <mm_freak_> arcatan: that library is going to use concurrency a lot
23:13:05 <chrisdone> arcatan: yeah, I thought of writing one on and off for years but could never think of an api I liked that was general enough. nice that someone put one out there
23:13:34 <chrisdone> mm_freak_: well if you get a repo that I can fork please pop a link to it somewhere!
23:13:37 <mm_freak_> $ mkdir fastirc
23:13:37 <mm_freak_> mkdir: cannot create directory `fastirc': Permission denied
23:13:40 <mm_freak_> hmm…
23:14:31 <chrisdone> well I'm still in zurich, gonna go get something to eat
23:15:09 <chrisdone> got a t-shirt with Spock's face on the front. I thought "who would wear that?" and laughed. so I bought it
23:15:11 <mm_freak_> guten hunger
23:15:16 <chrisdone> :)
23:16:32 <mm_freak_> ok, next question:  how can i create a project directory on code.haskell.org?
23:16:46 <mm_freak_> (obviously) i have no write permissions to /srv/code
23:17:27 <mm_freak_> ah, found it
23:55:16 <SubStack> are there any public alternatives to hackage.haskell.org for hosting out cabals?
23:56:06 <SubStack> github integration would be especially nice
23:58:09 <SubStack> ^ good GSOC project, maybe
