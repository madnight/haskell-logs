00:21:30 <lpsmith> Isn't there an alternative for fclabels?  What is it called?
00:21:59 <ivanm> there's a few of them
00:22:47 <lpsmith> (not that I have anything against fclabels per se,  I'm just curious)
00:23:30 <lpsmith> Ahh, I finally found a solution for my previous griping:
00:24:02 <lpsmith> data Field a = Error !ByteString (Field a) | Data a | String ByteString
00:24:26 <lpsmith> well, a few more bang patterns thrown in, but yeah
00:28:18 <ivanm> lpsmith: data-accessor is another one, as is lenses
00:28:58 <lpsmith> ahh, thanks
00:31:30 <kniu> huh
00:31:46 <lpsmith> hniu?
00:32:01 <lpsmith> err,  kniu, ?
00:32:47 <ivanm> heh
00:32:50 <kniu> I was about to say something about Arrows, but nvm.
00:55:09 <aksionov> Hi everyone
00:55:33 <aksionov> Does anyone remember the name of non-tiling X11 WM implemented in Haskell ?
00:56:45 <Twey> Didn't know there was such a thing
00:58:36 <aksionov> oops, that was bluetile, i remember from the screenshots. but it seems that is also a tiling WM.
01:39:45 <jjohnsson> Does anyone know how to skip building the documentation when building GHC? There is some latex error that I don't know how to fix (when working on users_guide.xml), and I don't care too much about the documentation and just want the compiler to build.
01:40:07 <jjohnsson> (GHC HEAD, cygwin on Win 7 x64)
01:42:53 <ivanm> jjohnsson: does the build guide say anything?
01:42:59 <ivanm> I _think_ it's a ./configure flag
01:43:02 <ivanm> ./configure --help ?
01:45:30 <jjohnsson> thanks ivanm, I'll check.
01:47:53 <jjohnsson> ok, there is a --disable-FEATURE option for configure, now the question is what the FEATURE string is for docs.
01:50:01 <ttvd> hi, what's the difference between data SomeData =   and data SomeData s =  ?
01:52:51 <Twey> ttvd: The latter has a parameter.
01:53:01 <ttvd> yeah but what purpose does that serve
01:53:11 <ttvd> it works either way in my simple example
01:54:05 <Twey> It allows you to refer to the parameter in the type.
01:54:20 <ttvd> ah i see
01:54:27 <Twey> The same as the difference between ‘x = …’ and ‘x y = …’
01:54:52 <ttvd> thanks
01:57:36 <Phyx-> hmm I have in my cabal file
01:57:37 <Phyx-> > main = defaultMainWithHooks simpleUserHooks { runTests = TR.runPkgTestsHook }
01:57:38 <lambdabot>   <no location info>: parse error on input `='
01:57:55 <Phyx-> and when i run runPkgTestsHook undefined undefined undefined undefined
01:57:59 <Phyx-> it works fine in ghci
01:58:03 <Phyx-> but when i do cabal test
01:58:11 <Phyx-> nothing happens
02:07:30 <valentingolev> ide for haskell? leksah is frightening
02:08:11 <Botje> ttvd: sometimes you want to make the distinction between SomeData Int and SomeData String, for example
02:08:34 <ivanm> valentingolev: most of us don't bother with IDEs
02:08:39 <ivanm> but there's also eclipseFP
02:09:31 <kosmikus> valentingolev: why is leksah frightening? (just out of curiosity, I don't use any IDE)
02:10:04 <valentingolev> so youre using just vim or emacs or whatever?
02:10:22 <valentingolev> I think I end up like this, I'm already writing erlang the same way
02:10:45 <valentingolev> but IDE... it's so cool. It can help you with function type
02:11:10 <p_l> an IDE in Emacs :)
02:11:20 <Twey> valentingolev: So can emacs
02:12:14 <valentingolev> I'm afraid of emacs
02:12:34 <valentingolev> It's like leksah but mooore complicated, isnt it? ;-)
02:13:18 <p_l> Emacs is an operating system, but they are still working on the editor... :P
02:13:20 <valentingolev> I like maths and dislike keyboard shortcuts
02:13:49 <valentingolev> There is a 'code-to-math' converter in Leksah
02:14:12 <valentingolev> you type -> or ++ and it changes it
02:14:34 <valentingolev> it changes it.. sorry for my english \
02:15:25 <Phyx-> it changes it into what?
02:15:50 <valentingolev> into the arrow and into the plus in a circle
02:16:08 <Phyx-> oh that
02:16:09 <valentingolev> maybe not the best examples but it looks cool
02:16:25 <Botje> \ becomes an actual λ, i guess?
02:16:30 <Phyx-> yeah
02:16:34 <valentingolev> and it compiles code as you type it. oh, i guess i like leksah too much
02:16:39 <Phyx-> but i certainly hope that's presentation only
02:16:41 <valentingolev> \x does
02:16:54 <Entroacceptor> lambdas look like deformed rabbits with my terminal font :( any suggestions?
02:16:57 <Phyx-> It would be annoying to edit it into an plain ascii editor later on if not
02:17:02 <Botje> Entroacceptor: change your terminal font
02:17:15 <valentingolev> it doesnt actually change it in the file
02:17:15 <Entroacceptor> Botje: yes, to which?
02:17:24 <valentingolev> it changes it in your view
02:17:36 <Botje> use dejavu instead of bitstream, for one
02:17:48 <Phyx-> lol, "deformed rabbits"
02:18:14 <Entroacceptor> I told it to use terminus
02:18:22 <Entroacceptor> but tbh I'm not sure if it's using it
02:18:37 <valentingolev> so you think i should try emacs as well
02:18:58 <valentingolev> i've been using vim for several months but it's too console oriented
02:19:15 <valentingolev> i really like Sublime Edit but I'm on linux now
02:19:39 <Phyx-> then use gvim? :P
02:19:47 <valentingolev> gvim is awful i think )
02:20:10 <valentingolev> I hated it so much
02:20:50 <Phyx-> heh
02:21:27 <Phyx-> hmm, is there a precompiled version of ghc where it's libs have been compiled with -fPIC or am I pretty much stuck having to compile the source
02:21:54 <ksf> the 64 bit version should be -fPIC
02:22:08 <ksf> ...considering that 64bit mode _needs_ PIC
02:22:24 <ksf> there's some bugginess while linking executables, though
02:22:32 <Younder> phyx I always build my most important applicatins from source. Only way to make sure you have the latest versio
02:22:33 <Phyx-> hmm
02:23:00 <Younder> gcc, Haskell, lisp even the kernel
02:23:09 <Younder> YMMV
02:23:20 <ksf> the latest version isn't always the best idea
02:23:37 <Younder> ksf, true, you can get bugs
02:24:01 * ksf still has 2.6.28 and 4.2.4. don't fix what ain't broke.
02:24:06 <Younder> ksf, it helps is you are a decent programmer/debugger
02:24:20 <ksf> yeah but I don't want to hack the kernel or gcc
02:24:36 <Younder> ksf and I do..
02:25:02 <Younder> I love 'getting down and dirty'
02:25:03 <Phyx-> ksf: it's just odd, that to build shared libs under linux it requires you to have build any object file you used with PIC, but yet the core libs aren't build that way, so you can't have used them in your source. Either that or i'm doing something wrong
02:28:55 <ksf> Phyx-, http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24097#a24097
02:29:52 <Younder> well haskell builds for me. of cource i use ubuntu. same as simon p jones which might help
02:30:05 <ksf> ...one mistake to do is to try to link executables with -shared...
02:30:27 <Younder> Ive heard of some problems building it on suse
02:30:27 <ksf> I doubt spj uses ubuntu packages
02:30:54 <Phyx-> ksf: hmm... I am using -shared, but then again I don't want an executable, I want a lib
02:31:02 <Younder> ksf I am pretty sure he does, hust not haskell :)
02:32:36 <Younder> anyhow the debian package system is recommended.
02:33:08 <ksf> do they have ghc 6.8 in stable, by now?
02:33:34 <Younder> nop, but getting there
02:34:24 <Younder> I'm looking into parHaskell, exiting but needs work
02:35:31 <Younder> 3 CX1's 24 blades 288 cores 1 Pb ram. 48 tesla's
02:35:58 <Younder> pretty hardcore system
02:39:28 <Phyx-> > let lib = lib in lib
02:39:31 <lambdabot>   mueval-core: Time limit exceeded
02:39:51 <Younder> anyhow I rekindled my knowlege of assebly language. sse4 style
02:39:53 <ksf> ...interpreted code doesn't blackhole.
02:40:01 <Phyx-> ksf: yeah, I noticed that
02:40:02 <Phyx-> lol
02:40:42 * Younder get's another 'segmentation fault' (black hole)
02:42:16 <Younder> thak god it doesn't take down the whole system
02:44:54 <DigitalKiwi> Younder: who has that system and for what?
02:45:21 <Younder> ever got one of those Kernel Painc messages? DigitalKiwi
02:45:24 <Younder> nasty
02:46:01 <Younder> DigitalKiwi, I do and for my AI research.
02:46:24 <DigitalKiwi> what is a CX1?
02:46:57 <Younder> DigitalKiwi,  http://cray.com/Products/CX/Systems.aspx
02:47:18 <DigitalKiwi> oh, a cray
02:47:58 <DigitalKiwi> you use lisp?
02:48:33 <Younder> yes
02:48:39 <DigitalKiwi> and how much do those things cost 0.0
02:49:03 <Younder> DigitalKiwi, abuot 250 000$
02:49:45 <DigitalKiwi> by you do you mean personally or do you work for a university or?
02:49:47 <Younder> You can get the cheaper...
02:49:58 <Younder> DigitalKiwi, personally
02:50:30 <adu> Younder: can i work for you?
02:50:39 <DigitalKiwi> me first >.>
02:50:45 <Younder> lol
02:52:55 <adu> Younder: for my resume, i wrote 144971 lines of code this weekend
02:53:03 <Younder> I'm not hirig at the moment. perhaps next year
02:53:35 <DigitalKiwi> adu: I removed that many, added half, and now my program does twice as much four times as fast!
02:53:44 <adu> lolol
02:53:47 <Younder> abu: lying isn't one of the qualeties I am looking for.
02:54:07 <Younder> now if you cold spell
02:54:12 <adu> well 90% of it was generated by macros :P
02:54:15 <DigitalKiwi> could*
02:54:29 <Younder> adu: I figured as much
02:55:03 <adu> so my hands only typed maybe 500 lines of that
02:55:33 <Younder> adu 500 lines I can believe
02:55:47 <adu> i like macros...
02:55:59 <Younder> In Haskell that is actually quite impressive
02:56:06 * adu looks at the 144971 it generated *blink*
02:56:35 <adu> oh i can never type that much in haskell
02:56:51 <adu> i think the most I can type a day in Haskell is about 40
02:57:24 <adu> i can think of pages and pages to write, then 3 lines later, i'm done
02:58:02 * adu <3 Haskell
02:58:51 * mjrosenb has a project with 1500 lines of haskell
02:58:56 <mjrosenb> all typed in by me.
02:59:08 <Younder> I'm even slower. But I verify the code in Isabelle. Using Haskabelle
02:59:31 <Jafet> adu: no wonder haskell doesn't impress girls
02:59:35 <Younder> nice, but somewhat tedious
02:59:56 <DigitalKiwi> what is isabelle?
03:00:09 <adu> i recognize the HOL part
03:00:54 <Younder> yes i mostly do Higher order logic
03:01:40 <adu> the only systems i've used are metamath and coq
03:01:58 <Younder> DigitalKiwi, a program correctness prooving program
03:02:23 <Jafet> A proof verifying program, rather
03:02:41 <Younder> Jafet, yes, tricky that
03:03:40 <Younder> andy how proof general and this new ISAAR has improved things a great deal. since I used it in my college years
03:04:46 <systemfault> Hmm, I must find a coffee mug with the new haskell logo
03:05:56 * Younder is a old fart of 42 years
03:06:05 <mjrosenb> there is a new haskell logo?
03:06:10 <adu> i know people older
03:06:16 <systemfault> Well.. the not so new logo..
03:06:21 <Younder> mjrosenb, no still the old one
03:06:25 <systemfault> http://www.haskell.org/haskellwiki/Thompson-Wheeler_logo
03:06:27 <ivanm> mjrosenb: there has been for about a year methinks
03:06:40 <adu> mjrosenb: isn't is λ as per usual?
03:07:02 <Younder> lambda the ultimate...
03:07:05 <Jafet> Remember to get a cube-shaped mug
03:07:16 <Younder> lol
03:07:25 <systemfault> Haha
03:07:26 <A1kmm> Does anyone know of any way to get at the cost-centre stack after evaluating an expression? Something like fetchStack :: a -> (Maybe [StackFrame], a)
03:09:14 <mjrosenb> A1kmm: is StackFrame actually a type that you can use?
03:09:30 <mjrosenb> or is that part of the question?
03:09:51 <A1kmm> I just made it up as a placeholder for something that represents a stack frame.
03:10:31 <Younder> ahh, coes that code doesn't compile
03:12:04 <Younder> sounds like you want monads
03:12:28 <adu> i want monads too
03:13:15 <Younder> www.syntaxpolice.org has some nice haskel code for a stack
03:15:23 <Younder> otherwise the book 'functional data structures' is recomended
03:16:03 <Younder> http://www.amazon.com/Purely-Functional-Structures-Chris-Okasaki/dp/0521663504
03:16:14 <Jafet> Which book on function data structures?
03:16:26 <Jafet> Right
03:20:17 <fizruk> @src snoc
03:20:17 <lambdabot> Source not found. Do you think like you type?
03:20:42 <fizruk> @t snoc
03:20:42 <lambdabot> Maybe you meant: tell thank you thanks thx ticker time todo todo-add todo-delete topic-cons topic-init topic-null topic-snoc topic-tail topic-tell type . ? @ ft v
03:21:10 <Younder> @src stack
03:21:10 <lambdabot> Source not found. My brain just exploded
03:21:18 <Younder> lol
03:21:26 <A1kmm> BTW, does anyone know of a way to increase the size of the history kept by interpreted GHC code (either in ghci using :trace, or via the GHC API)?
03:27:25 <ivanm> "*Leksah* is the Haskell IDE of choice." <-- really? there have been opinion polls, etc. done to "prove" this (as much as any kind of poll _can_ prove anything)?
03:28:27 <Jafet> It doesn't say whose choicce
03:28:37 <Younder> I use emacs.. So do most others I think
03:30:03 <ivanm> Younder: well, that or some vi derivative
03:30:16 <ivanm> Jafet: that kind of statement usually implies the community
03:30:24 <Jafet> Who said it?
03:30:35 <ivanm> it's a message that was just on -cafe
03:31:03 <ivanm> Lakshmi Narasimhan said it, when announcing leksah RPMs for fedora 12
03:31:04 <dobblego> I use kdevelop
03:31:18 <Jafet> Obviously it's the Haskell IDE of his choice
03:31:26 <ivanm> dobblego: really? I thought that didn't have any haskell support any more...
03:31:35 <dobblego> it just has syntax highlightin
03:31:38 <ivanm> dobblego: the old Qt-3 version or is there a Qt-4 one out now?
03:31:39 <ivanm> *nod*
03:31:50 <ivanm> Jafet: well, that kind of statement normally implies the _community's_ choice
03:32:15 <ivanm> how much of a dickhead would I appear to be to reply to that message on-list and ask him that? :p
03:32:23 <Jafet> I think this discussion belongs in cafe too
03:32:25 <ivanm> dobblego: btw, did you send the email to BFPG?
03:32:27 * Jafet bobs off
03:32:32 * ivanm sends an email off then
03:32:33 <dobblego> ivanm, yes last night
03:32:49 <Younder> vim is OK too
03:32:51 <ivanm> good-o
03:32:57 <jd10> what about yi?
03:33:21 <Saizan> well, Leksah is the only one, fsvo IDE
03:33:46 <Saizan> but i agree that it's a bold statement to make :)
03:33:54 <ivanm> jd10: it isn't an IDE
03:34:01 <ivanm> Saizan: "fsvo"?
03:34:12 <Saizan> for some value of
03:34:53 <arj> Need help on left recursive production rule
03:35:21 <arj> rule is -- expr "[" expr ]"
03:35:37 <arj> How to handle in Parsec
03:35:56 <ivanm> arj: not sure what you want parsed there
03:36:04 <ivanm> Jafet: email sent
03:36:18 <arj> thx for responding. let me explain
03:36:21 <Jafet> Don't forget a flame suit.
03:36:30 <arj> I am writing a python parser using Parsec
03:36:31 <adu> arj: do { expr ; between (char '[') (char ']') expr}
03:36:50 <arj> ok
03:37:55 <adu> arj: or do { x <- expr ; y <- between (char '[') (char ']') expr ; return [x, y]}
03:38:09 <arj> Now subscripting - array/hash in Python is a basic expression
03:38:17 <arj> I am facing left recursive problem
03:38:23 <Saizan> expr = do { c <- expr ; t <- between (char '[') (char ']') expr; return [x,y]} <|> ... <- this will cause an infinite loop
03:38:27 <arj> just let me explain
03:38:30 <ivanm> yay! graphviz forces you to have semicolons on the end of escaped HTML! \o/
03:38:42 <Saizan> arj: in parsec there's chainl to handle these cases
03:39:05 <arj> yeah Saizan
03:39:15 <arj> I need some help on chainl
03:39:33 <arj> suppose I want to parse - a[x][y]
03:39:37 <Saizan> ah, seen the Expressions section here? http://legacy.cs.uu.nl/daan/download/parsec/parsec.html
03:39:38 <arj> a[x] is exp
03:40:03 <arj> Yeah, but wasn't helpful
03:40:48 <arj> My basioc production looks like - expr ::= var | expr "[" expr "]"
03:41:26 <arj> that way i can write - a[b[1]][x] in Python for e.g.
03:42:40 <mauke> expr ::= var ("[" expr "
03:42:42 <arj> the 2nd alternative - could parse a sentence like - a[ b[c] ]
03:42:48 <mauke> expr ::= var ("[" expr "]")*
03:43:42 <arj> Hi mauke - but that won't solve the nested example - what it solcve is x[1][2][3]... but
03:43:50 <Saizan> or, in parsec, expr = do v <- var; xs <- many expr; return (v,xs)
03:43:58 <Saizan> it does solve the nested example
03:44:04 <Saizan> oops
03:44:43 <Saizan> or, in parsec, expr = do v <- var; xs <- many (do char '['; e <- expr; char ']'; return e) return (v,xs)
03:44:56 <arj> it won't solve - a[ b[ c [d] ] ] -- I am getting Lispy :-) head is cracking. Ok let me give another e.g.
03:45:04 <Saizan> why not?
03:45:19 <Saizan> inside the [ ] you've an expr
03:45:28 <arj> Ok Saizan let me try that
03:46:56 <arj> Before I try Saizan's soln - one more e.g. of a sentence -- x [ obj.doSomething() ] -- you see, I can arbitary expression before the brackets and within the brackets\
03:48:05 <Saizan> arbitrary expressions inside the brackets are no problem, you just have to add more alternatives to expr
03:48:46 <arj> Alrighty - I will try it now. And paste my code also if I son't succeed
03:51:52 <arj> BTW, Saizan - putting - expr = choice [p1, p2, p3, ..] ; p1 = do v <- expr ; ... -- causes left recursion. I just can't go forward.
03:52:31 <Saizan> yeah, you can't put a p1 like that there
03:53:18 <mauke> don't do that then
03:53:51 <Saizan> http://hackage.haskell.org/packages/archive/parsec/3.1.0/doc/html/Text-Parsec-Expr.html <- maybe you should use this?
03:54:17 * Saizan never did, but that's the recommended route in parsec's documentation
03:54:40 <arj> right. But, my problem is I have to parse all Python expressions. Now for usual operators arithmetic,  bool, etc. - I used buildExpressionParser ....
03:55:01 <arj> rather than following the grammar in Python lang reference. So ...
03:55:32 <arj> I either have to follow the Python lan ref grammar which is in non-left recursive form but much tedious
03:55:53 <arj> I was going till I hit 2 rules ..
03:55:53 <Saizan> ah, so you can't use buildExpressionParser for [..]?
03:56:29 <arj> Conditional expression -- i.e. x if x > y else y -- which is basically expr "if" expr "else" expr
03:56:39 <Saizan> you could parse [ and ] as two operators, one Prefix and the other Postfix
03:56:45 <arj> Ok
03:56:59 <Saizan> though you'd need another pass later
03:57:23 <mauke> ew
03:57:30 <Saizan> heh, yeah :)
03:57:54 <arj> That is where, I got hit by dreaded left recursion because of the way I wrote the grammar
03:57:57 <mauke> arj: expr = choice [..] >> optional postfixIf
03:57:58 <mauke> or something
03:58:10 <arj> sounds good
03:58:32 <mauke> it's not called "optional" in parsec, and you have to do something with the return values
03:58:55 <arj> I will check it out
03:59:28 <arj> Mauke and Saizan, you have been so helpful. I just heard about Haskell community. This is my first IRC into #haskell
03:59:57 <arj> I am actually a haskell newbie, not a programming newbie though
04:00:19 <theorbtwo> Hm.  Er, why not follow the python lang ref grammar, if it's already nicely factored for you?
04:00:39 <gloob1> hello..how can i fix: Couldn't match expected type `[String]' against inferred type `IO String' in expression:
04:00:39 <gloob1> msg <- hGetLine hdl
04:00:39 <gloob1> list <- words msg
04:00:56 <arj> My first Haskell task has got me excited into Haskell but also I am facing roadblocks as I go ahead with Pythn
04:01:16 <arj> Yeah, that is what I will do if I don't have my way :-)
04:01:27 <arj> But then I write a lot more code ..
04:01:49 <arj> since I can't mix and match buildExpr parser and the Python grammar
04:02:01 <Saizan> gloob1: "words msg" is not an IO action, so it can't go on the right of <-
04:02:08 <arj> I have to set my own precedence rule and associativity etc. which is so cleanly ..
04:02:25 <Saizan> gloob1: if you want to give a name to the result you've to use let
04:02:40 <Jafet> There's a C++ library which lets you build grammars from recursive regular expressions, it will exhaustively backtrack until it matches
04:02:50 <Jafet> Every time I use it, I can hear jwz cry
04:02:52 <arj> taken care by the buildExpr function -- which takes care of associativity and precedence so beautifully
04:02:58 <Saizan> gloob1: e.g. do msg <- hGetLine hdl; let list = words msg; ..
04:04:05 <gloob1> Saizan: oh..ok..it works:) thank you
04:04:23 <Saizan> np
04:08:01 <arj> Can anyone point to resource on Parsec chainl (the example is really not enough)
04:08:24 <arj> What I want is - solving leftv recursive problem in Parsec using chainl
04:15:16 <Phyx-> that "peer" person is a really bad guy.. keeps resetting people's connections
04:17:36 <Phyx-> question about haddock, is it required that the comment blocks be directly above the function? or can there be spaces inbetween?
04:21:50 <Saizan> arj: chainl looks fairly limited, tbh
04:23:21 <arj> That is right. But somehow I feel Parsec is damn powerful as concept. More so if a language like Perl has been parsed in it :-)
04:23:40 <arj> Does Audrey tang hang around here
04:24:24 <Saizan> preflex: seen audreyt
04:24:24 <preflex>  Sorry, I haven't seen audreyt
04:24:35 <Saizan> that's the nick, iirc
04:25:19 <arj> ok
04:27:13 <Younder> just been listening to the magic flute 'die zuberflute' like I do every spring
04:27:23 <Saizan> however the idea is that you have to do some kind of stratification, i think
04:27:57 <Younder> recomended
04:29:22 <Saizan> so that you've the non-left-recursive parts in an expr' (which refers to expr only after parsing something), and then you have "expr = do e <- expr'; ..."
04:30:55 <Saizan> (which is maybe just what the theory on LL parsers tell you?)
04:31:11 <Saizan> (it's been too long :)
04:37:41 <imc> hello!
04:37:49 <jre2> any idea why I would be unable to listen on a port and accept a connection in windows? (my program works under unix)
04:38:16 <ski> arj : any luck with the left-recursion ?
04:39:07 <ski> arj : i usually handle left-recursion like `<foo> --> <bar>',`<foo> --> <foo> <baz>' as `parseFoo = do bar <- parseBar; continueFoo (barFromFoo foo)' and `continueFoo foo = do {baz <- parseBaz; continueFoo (fooFromFooAndBaz foo baz)} <|> return foo'
04:39:38 <ski> (though i suppose it could be more complicated, if you have mutual left-recursion)
04:39:44 <jre2> this works on unix but not on windows (even when wraped in withSocketsDo): "listenOn (PortNumber 2114) >>= accept"
04:39:57 <Younder> jre2, are you sure you don't want to ask that question under #windows
04:40:33 <quicksilver> jre2: windows firewall?
04:40:38 <quicksilver> jre2: anti-virus software?
04:40:43 <ski> jre2 : not sure if this is related, but i'm pretty sure you're not supposed to use the constructor `PortNumber' (since it's already an instance of `Num')
04:40:45 <jre2> Younder: well, I was hoping maybe there's some other catch like "you also need withSocketsDo2"
04:40:54 <ski> jre2 : s/(PortNumber 2114)/2114/
04:41:24 <jre2> ski: No instance for (Num PortID)
04:41:32 <ski> (on some platforms, `fromInteger' might do some representation)
04:41:50 <ski> hm .. i seem to recall that working earlier
04:42:06 <jre2> quicksilver: neither of those
04:45:29 <ski> jre2 : sorry, i was confused. i was confusing `PortNumber' with `PortID'
04:48:46 <jre2> but "withSocketsDo $ listenOn (PortNumber 2114) >>= accept" should generally work on a windows computer, correct?
04:51:04 <BorisL> Are the trunks by default replaced by values when they are evaluated?
04:52:09 <BorisL> misprint - thunks
04:53:13 <ski> in virtually every implementation -- yes
04:53:25 <jre2> hmm, confirmed the above works on winxp box
04:54:49 <merijn> jre2: Windows (at least any version still relevant) has a Berkeley socket compatibility access layer to their winsockets library. So usually generic socket code should work the same on windows as on unixes
04:56:16 <merijn> The main catch is that where you can use things like select on files (well, file descriptors) in unix they only work on sockets in Windows (at least in every programming language I ever used on Windows, so I'm going out on a limb and guessing the same holds for Haskell)
05:05:15 <FliPPeh> Programming on windows is a bitch anyways
05:05:28 <FliPPeh> Especially the WinAPI
05:22:06 * hackagebot base-unicode-symbols 0.1.2.1 - Unicode alternatives for common functions and operators  http://hackage.haskell.org/package/base-unicode-symbols-0.1.2.1 (RoelVanDijk)
05:23:32 <Younder> listened again to Carl Orf's carmina burana
05:24:10 <Younder> I find classical music fantasticaly inspiring
05:32:30 <Younder> also gauss theorem ergrium
05:32:44 <Younder> the differential geometry bit
05:32:51 <Younder> 1828
05:33:09 <Younder> most powerfull reasoning
05:33:40 <FliPPeh> I like hard rock :(
05:34:37 <Younder> and Riemans paper of 1848 'on the foundations of geometry'
05:35:47 <Younder> makes me feel part of history
05:36:32 <Younder> some of us really pathionatly love mathemetics
05:37:01 <Younder> and that is the truth
05:37:09 <oeblink> math is cool :S
05:38:23 <Alpounet> math is to life what oleg is to type systems
05:38:51 <Alpounet> Younder, is that paper available somewhere on the web ?
05:38:55 <oeblink> I've never read any of the original papers by the big names, though
05:39:34 <oeblink> something tells me they might be more exciting than textbooks
05:39:56 <Jafet> Like reading perlgolf entries
05:40:04 <Younder> Alpounet, I have it i a book. Spivak 'A comprehesive guide to differencial geometry' Volume II
05:41:14 * hackagebot hawitter 0.2 - A twitter client for GTK+. Alpha version.  http://hackage.haskell.org/package/hawitter-0.2 (DaikiHanda)
05:41:39 <Alpounet> Younder, I have been wanting to read these books for a while now...
06:05:19 <lysgaard> Hi, anyone have experience with Control-Engine here?
06:15:45 <gwern> wow. so if you omit a newline at the end of your crontab, it will validate without warning or error, execute at the appropriate times, *do nothing*, and report success
06:15:51 <gwern> c programmers!
06:16:15 <Jafet> Which cron?
06:17:08 <gwern> 'cron'
06:17:18 <gwern> 3.0pl1-106ubuntu3 if that helps
06:17:33 <Jafet> Yeah, that says enough
06:23:46 * DigitalKiwi wonders if dcron 4.4 does that
06:27:14 <kpreid> gwern: tip: put a *comment* as the last line. if *it* doesn't end with a newline, no problem
06:28:31 <HandheldPenguin> Has anyone got a decent guide on constant functions?
06:28:58 <kpreid> ...guide?
06:29:07 <Jafet> What's a constant function?
06:29:42 <HandheldPenguin> erm well a function that takes no args
06:29:43 <HandheldPenguin> I think
06:29:54 <kpreid> some would say that's not a function
06:30:00 <HandheldPenguin> ...?
06:30:07 <kpreid> type-wise it certainly isn't
06:30:26 <kpreid> f _ = 9
06:30:40 <HandheldPenguin> count :: Int
06:30:40 <Saizan> HandheldPenguin: do you have a concrete example?
06:30:42 <kpreid> that's what I'd call a constant function
06:30:58 <Jafet> Haskell doesn't consider those functions, eh
06:31:00 <kpreid> HandheldPenguin: but anyway, what exactly do you want to know about whatever it is?
06:31:02 <Saizan> count :: Int is not a function, though it's a constant
06:32:23 <HandheldPenguin> It's the pack function/whatevere you want to call it...
06:32:24 <HandheldPenguin> http://haskell.pastebin.com/g2SKvKG9
06:33:36 <kpreid> OK, we know what you're talking about; now what do you want to know about it?
06:33:39 <Saizan> ok, pack is a constaint, a value, a list .. not a function though :)
06:33:56 <Saizan> (even if it isn't evaluated all at once)
06:34:04 <kpreid> I think the ghc profiler would call that program element a CAF
06:34:26 <kpreid> (constant applicative form)
06:34:35 <ski> HandheldPenguin : you don't want `(i j)' there, since `i' is not a function
06:34:45 <kpreid> (i, j)
06:34:57 <HandheldPenguin> Ok....do you know what I'm trying to get at with that bit?
06:35:05 <ski> HandheldPenguin : to construct an element of type `Card', use the data constructor for it
06:35:49 <kpreid> HandheldPenguin: pack = [(i, j) | i <- [minBound..maxBound] :: [Rank], j <- [minBound..maxBound] :: [Suit]]
06:35:52 <ski> e.g., an ace of clubs would be `Card Ace Club', with your current code
06:35:56 <kpreid> and add deriving Bounded
06:35:59 <kpreid> oh, right, that too
06:36:08 <kpreid> pack = [Card i j | i <- [minBound..maxBound] :: [Rank], j <- [minBound..maxBound] :: [Suit]]
06:36:09 <jjohnsson> ok, finally built ghc. But ghc-stage2 --info says "Have llvm code generator","YES", while i get "This compiler was built without the LLVM code generator" when I try to use it. :(
06:37:24 <mreh> I don't understand, I've implemented an "instance Functor IList", imported the IList to a module and now fmap over an (IList a) expects a [a]
06:37:36 <gwern> I think no one who can't already answer that problem ought to be messing with bleeding edge stuff like the llvm backend...
06:37:46 <jjohnsson> Hm. It actually says "YES ", with a space. Maybe that's the problem.
06:37:46 <mreh> mind your fingers!
06:37:48 <EvanR-work> has anyone used a json library in haskell, good bad ugly? is there a better way to get data from php
06:38:12 <Saizan> i've used "json" and it's not bad
06:38:22 <jjohnsson> gwern: thanks.
06:38:33 <kpreid> mreh: your instance can't change the type of fmap so it must be some problem with your use of fmap
06:38:46 <kpreid> perhaps there's something else which is forcing a list type
06:38:56 <mreh> kpreid: of course..
06:39:01 <mreh> thanks
06:39:03 <Saizan> i've made some combinators to extract the contents in a nicely monadic/arrowish way, not sure if there's a better way
06:39:13 <EvanR-work> right, extract contents...
06:40:04 <Saizan> http://github.com/Saizan/fbspider/blob/master/Facebook.hs <- like at lines 53-61
06:40:27 <HandheldPenguin> kpreid, thanks...still doesn't seem to be behaving..i've got:
06:40:28 <HandheldPenguin> pack = [Card i j | i <- [minBound..maxBound] :: [Rank], j <- [minBound..maxBound] :: [Suit]]
06:40:28 <EvanR-work> im thinking of a mail throttler. the php tells the seperate procress to mail a million people a million (total) emails, and the process sends them at a reasonbly slow pace, depending on the domain. each 'job' would be a separate thread
06:40:32 <EvanR-work> good idea?
06:41:05 <kpreid> HandheldPenguin: well, that's the same as I typed. you need to show the error message
06:41:16 <HandheldPenguin>  No instance for (Bounded Suit)
06:41:16 <HandheldPenguin>       arising from a use of `minBound' at Cards.hs:15:64-71
06:41:31 <kpreid> HandheldPenguin: like I said, add deriving Bounded
06:41:35 <Saizan> EvanR-work: so haskell does the sending?
06:41:42 <EvanR-work> it uses smtp
06:41:43 <mreh> I need a better thesaurus, do we have one?
06:41:54 <mreh> @wn thesaurus
06:41:56 <lambdabot> *** "thesaurus" wn "WordNet (r) 2.0"
06:41:56 <lambdabot> thesaurus
06:41:56 <lambdabot>      n : a book containing a classified list of synonyms [syn: {synonym
06:41:56 <lambdabot>          finder}]
06:41:56 <lambdabot>      [also: {thesauri} (pl)]
06:42:07 <EvanR-work> exchange would do the sending
06:42:37 <Saizan> well, it makes sense, threading is much easier in haskell, i bet :)
06:42:42 <EvanR-work> yes
06:42:45 <HandheldPenguin> YEah, kpreid where do I add it?
06:42:54 <kpreid> HandheldPenguin: on Suit and Rank
06:43:03 <HandheldPenguin> Cheers
06:43:05 <kpreid> actually, the type sigs are unnecessary:
06:43:07 <EvanR-work> Saizan: of course, why does something like exchange have such a throttling feature, what are we paying microsoft for
06:43:12 <EvanR-work> doesnt*
06:43:12 <kpreid> pack = [Card i j | i <- [minBound..maxBound], j <- [minBound..maxBound]]
06:43:17 <kpreid> since Card constrains them
06:43:37 <Saizan> EvanR-work: heh
06:45:28 <HandheldPenguin> grrr
06:45:40 <HandheldPenguin> Now my pack works but it's outputting the wrong way round
06:45:48 <HandheldPenguin> I.e. its doing ace club ace diamond....
06:45:53 <HandheldPenguin> rather than ace 2 3 4
06:46:03 <kpreid> then change the order of the i <- and j <- clauses
06:46:22 <HandheldPenguin> cheers
06:46:34 <HandheldPenguin> simple
06:52:12 <EvanR-work> Saizan: wondering if the process should save its state in a database or on disk, disk would certainly be easier to encode... unless i stored the result of show in a string in the database ;)
06:53:30 <FliPPeh> I wonder...
06:53:46 <FliPPeh> On the darcs website you can get all flavors of the client
06:53:51 <FliPPeh> But how to get the server?
06:55:00 <gwern> 2server for what?
06:55:15 <FliPPeh> darcs
06:55:22 <gwern> darcs server?
06:55:26 <FliPPeh> Yep
06:55:33 <gwern> what is a darcs server?
06:56:10 <FliPPeh> Somehow the files and patches you commit with darcs have to get processed, or not?
06:56:13 <Saizan> EvanR-work: well, accessing data stored in some table is pretty easy too
06:56:31 <gwern> FliPPeh: yeah, they're processed by darcs
06:56:50 <FliPPeh> So the server really is just a HTTP server?
06:56:54 <Saizan> yes
06:57:10 <FliPPeh> Makes setting up my own repo much easier, thanks!
06:57:27 <Saizan> well, to push you usually go through ssh
06:58:48 <gwern> FliPPeh: one of the old advantages of darcs
06:59:26 <FliPPeh> :)
07:19:53 <HandheldPenguin> How do you define a data type with multiple constructors?
07:20:27 <EvanR-work> data Foo = A | B
07:20:32 <Saizan> data Foo = Con1 .. | Con2 .. | ..
07:20:53 <applicative> data List a = Null | Cons a (List a)
07:21:04 <HandheldPenguin> ah right
07:21:05 <HandheldPenguin> cheers
07:21:19 <applicative> data Either a b = Left a | Right b
07:31:15 <blackdog_> anyone tried using c2hs on Snow Leopard? it seems to be choking on the ^ notation for blocks.
07:35:49 <roconnor> wow, I suck at making test cases.  Too much time spent proving programs correct I guess...
07:36:45 <Saizan> @remember roconnor wow, I suck at making test cases.  Too much time spent proving programs correct I guess...
07:36:45 <lambdabot> It is stored.
07:37:23 <roconnor> apparently it isn't really a good idea to jam all your code coverage into one test case
07:38:01 <Taejo> Nomad010: having another bash at Haskell
07:38:01 <Taejo> ?
07:39:14 <yitz> roconnor: use quickcheck to find interesting test cases for you :)
07:39:30 <roconnor> is quickcheck available for ocaml?
07:39:49 <yitz> roconnor: ocaml? actually, it probably is.
07:40:00 <yitz> @google quickcheck ocaml
07:40:01 <lambdabot> No Result Found.
07:40:08 <roconnor> hmm, the problem is I don't think I have actual properties to check yet
07:40:09 <yitz> useless plugin
07:40:19 <roconnor> but my supervisor wants regression testing anyhow
07:40:30 <roconnor> so he knows if he accidentally changes something
07:40:44 <yitz> http://brierwooddesign.com/2009/1/16/ocaml-quickcheck-translating-quickcheck-from-haskell-type-classes-to-ocaml-modules
07:40:54 <yitz> no idea if it's any good
07:41:53 * hackagebot hfiar 0.1.2 - Four in a Row in Haskell!!  http://hackage.haskell.org/package/hfiar-0.1.2 (FernandoBenavides)
07:41:54 <roconnor> cool
07:42:42 <yitz> http://aryx.kicks-ass.org/~pad/ocaml/quickcheck.ml
07:42:46 <yitz> another one
07:43:01 <FliPPeh> Page not found
07:43:11 <yitz> author claimes jane street is using it, even though he admits it's ugly
07:43:38 <roconnor> 404d!!
07:43:55 <roconnor> 404'd!!
07:44:22 <FliPPeh> Suppose I have a remote server running
07:44:27 <FliPPeh> And if I were to install X on it
07:44:34 <FliPPeh> Could I view it from here?
07:45:11 <dantheman_> Hey all, I have a quick question re passing structs through the ffi.
07:45:20 <yitz> mm. too bad.
07:45:28 <FliPPeh> Wait
07:45:31 <FliPPeh> Wrong channel!
07:45:56 <dantheman_> I want to create and fill a new struct in c code, and then have it send that struct back to haskell via a callback function that takes a struct and a channel.
07:46:17 <dantheman_> Do I need to use a foreign pointer for this struct?
07:46:35 <dantheman_> My current solution (http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24105#a24105) uses a normal pointer, but is giving me weird output
07:47:47 <dantheman_> I don't know where the weird output is coming from
07:48:06 <yitz> another one: http://bitbucket.org/alan_falloon/ocaml-quickcheck/wiki/Home
07:48:52 <dantheman_> anyone wish to have a quick look?
07:48:55 <Lemmih> dantheman_: Allocate 'cpt' on the heap, not the stack.
07:49:11 <yitz> same one on github, don't know which is more current: http://github.com/alanfalloon/ocaml-quickcheck
07:49:16 <dantheman_> Ahhh, I was actually thinking that... cheers!
07:51:11 <yitz> roconnor: right, besides quickcheck, you'll need to identify potentially problematic edge cases to satisfy your supervisor.
07:55:07 <roconnor> really the property I want to check is that a certain diagram commutes
07:55:14 <roconnor> but I've only implemented on pair of arrows
07:55:28 <roconnor> so there isn't anything to check yet
08:04:01 * hackagebot hfiar 1.0.0 - Four in a Row in Haskell!!  http://hackage.haskell.org/package/hfiar-1.0.0 (FernandoBenavides)
08:05:06 <dantheman_> Hey all. Another quick question re the ffi. I create a struct (say struct {int a, intb}), and pass it to haskell using a callback function. The struct is no longer used anywhereshould I free it in haskell, an
08:05:23 <dantheman_> whoops sorry
08:05:28 <dantheman_> that should read:
08:05:41 <dantheman_> Hey all. Another quick question re the ffi. I create a struct (say struct {int a, intb}), and pass it to haskell using a callback function. The struct is no longer used anywhere in my c code.
08:05:53 <dantheman_> should i free the struct in haskell, and if so how?
08:06:02 <aavogt> @hoogle free
08:06:02 <lambdabot> Foreign.Marshal.Alloc free :: Ptr a -> IO ()
08:06:02 <lambdabot> Foreign.Ptr freeHaskellFunPtr :: FunPtr a -> IO ()
08:06:02 <lambdabot> Foreign.Marshal.Pool freePool :: Pool -> IO ()
08:06:23 <dantheman_> So I need to use foreign ptrs then?
08:06:38 <dantheman_> That's basically what I was wondering?
08:06:45 <roconnor> ooh, I found a bug
08:06:54 <roconnor> this testing idea isn't entirely worthless afterall
08:07:06 <aavogt> I have no idea
08:07:06 <Darkone> Silly question here... how would I get the size in bytes of... I guess it's a return value? Variable? Basically, I got to the part of this on 'Integer's, soiled myself, and want to see how much space the factorial 50 example takes.
08:09:01 <Saizan> Darkone: the best you can do is use the heap profiling functionality in ghc
08:09:11 <Saizan> @google ghc heap profiling
08:09:11 <theorbtwo> Darkone: In general, don't worry about it until after you are fairly certian you are using too much.
08:09:12 <lambdabot> http://www.haskell.org/ghc/docs/6.10-latest/html/users_guide/prof-heap.html
08:09:13 <roconnor> > iterate (`div` 2) (product [1..50])
08:09:13 <lambdabot> Title: 5.4.�Profiling memory usage
08:09:14 <lambdabot>   [30414093201713378043612608166064768844377641568960512000000000000,15207046...
08:09:27 <roconnor> > findIndex (==0) $ iterate (`div` 2) (product [1..50])
08:09:28 <lambdabot>   Just 215
08:09:42 <roconnor> > findIndex (==0) $ iterate (`div` 2) (2^128))
08:09:43 <lambdabot>   <no location info>: parse error on input `)'
08:09:46 <roconnor> > findIndex (==0) $ iterate (`div` 2) (2^128)
08:09:46 <Darkone> The_third_man, saiam, was just an idle bit of curiosity.
08:09:47 <lambdabot>   Just 129
08:09:55 <roconnor> > findIndex (==1) $ iterate (`div` 2) (2^128)
08:09:56 <lambdabot>   Just 128
08:10:00 <Darkone> s/saiam/Saizan
08:10:01 <roconnor> > findIndex (==1) $ iterate (`div` 2) (product [1..50])
08:10:02 <lambdabot>   Just 214
08:10:26 <Saizan> Integer in particular is implemented via the GMP library, so i guess you can do some calculation knowing how they represent them
08:10:54 <tsou> I'm doing a pattern-match like so:  case foo of   opt@(Cons1 _ _ _) -> ...   opt@(Cons2 _ _) -> ..., etc.  Is there a way to say "match anything that has the constructor Cons1", without explicitly giving the number of arguments?
08:11:09 <Saizan> yes
08:11:09 <Darkone> Yea, I was just wondering what sort of space it takes comparative to if you stored the entire number in one chunk of bits.
08:11:12 <aavogt> tsou: opt@ Cons1 {}
08:11:25 <tsou> aavogt: thanks!
08:11:35 <Saizan> @src Integer
08:11:35 <lambdabot> data Integer = S# Int#
08:11:35 <lambdabot>              | J# Int# ByteArray#
08:11:36 <aavogt> it might need parentheses
08:12:10 <tsou> aavogt: yeap, don't worry about it :)
08:12:13 <FliPPeh> What are the '#'s for?
08:12:45 <aavogt> a notation used in ghc to mark primitive things
08:12:48 <tsou> aavogt: (it doesn't)
08:13:29 <Darkone> Oooh. That's cool o.o Yea, I just got to the part about typeclasses and infix functions.
08:13:45 <roconnor> Is data parallel haskell good for computing convolutions?
08:14:37 <shapr> It seems a bit convoluted to me.
08:15:00 <roconnor> @slap shapr
08:15:01 * lambdabot is overcome by a sudden desire to hurt shapr
08:17:25 <lambdabot> But I'd never act on such whims.
08:17:43 <Botje> heh heh.
08:18:00 <aavogt> @vixen how about just this once?
08:18:01 <lambdabot> how? it depends...
08:18:20 <Botje> @vixen violently.
08:18:21 <lambdabot> tell me more about yourself.
08:18:46 <shapr> roconnor: Hey, I sent all sorts of free traffic to your website recently, don't I get credit for that?
08:18:53 <roconnor> :D
08:19:07 <shapr> Admittedly, most of them wanted to flame you eschatologically.
08:19:19 <roconnor> shapr: even stroustrup says the implicit copy constructor is unfortunate.
08:19:29 <roconnor> I don't know what is wrong with these C++ people.
08:21:07 <tsou> Is there a way to ask ghc to warn, in case I have loaded some functions from a module but have not used some of them?
08:22:00 <Jafet> Yes
08:22:36 <kingping> Hello folks.
08:22:52 <Botje> hi kingping!
08:23:03 <kingping> Is there any lite haskell windows distribution with any GUI framework OOTB.
08:23:17 <kingping> Very limited for some simple task.
08:23:22 <kingping> ?
08:23:28 <fasta> kingping, OOTB
08:23:31 <fasta> ?
08:23:39 <kingping> fasta: Out Of The Box :)
08:24:16 <kingping> GHC is just humongous: almost 60M
08:24:18 <Botje> istr a haskell binding for wx
08:24:21 <fasta> kingping, I don't think so.
08:24:28 <fasta> Botje, yes.
08:24:46 <fasta> But you still need the C libraries, which Windows users don't like installing.
08:24:55 <Botje> send them along
08:25:07 <Botje> that's what all commercial packages do anyway
08:25:15 <fasta> kingping, laptops come with 4GB memory these days.
08:25:31 <shapr> But they really need 8GB.
08:25:37 <Botje> per core.
08:25:49 <kingping> fasta: My inet connection is not cheap :(
08:25:50 <shapr> Exactly, and a fifty pound cooling fan.
08:25:57 <fasta> kingping, then use Forth ;)
08:26:03 <kingping> :]
08:26:24 <shapr> kingping: For Windows or Linux?
08:26:49 <kingping> shapr: Windows XP.
08:27:06 <kingping> Gonna implement in Python then..
08:27:16 <shapr> Ah, too bad. I hope it works out for you :-)
08:27:43 <gwern> shapr: what's the point of 8gb? aren't most windows users on i386?
08:27:56 <shapr> gwern: ramdisk?
08:27:59 <gwern> if you can't address it you can't use it, usually
08:28:10 <shapr> Yeah, but I run Linux on my laptops.
08:28:10 <Darkone> Cooling fan?
08:28:15 <Darkone> WHo uses those anymore?
08:28:15 <shapr> Darkone: It was just a joke :-)
08:28:50 <Darkone> Everyone has liquid nitrogen refridgerators on their laptops these days, you ole dinosaur ;P
08:28:55 <shapr> Oh right
08:29:04 <psykotic> heh
08:29:07 * shapr waves his cane at Darkone 
08:29:12 <shapr> When I was your age...
08:29:18 <Darkone> How else do you chill a processor to .001 kelvin?
08:29:20 <psykotic> macbooks run so hot by default that you can cook eggs on them
08:29:23 <shapr> Heck, I don't remember anything about that these days.
08:29:26 <Darkone> HAppy thoughts!
08:29:40 <Darkone> psykotic, or use them as a weapon to melt faces.
08:30:04 <psykotic> it's a software/os bug actually.
08:30:26 <Darkone> Ahh, what was it?
08:30:31 <Darkone> Not controlling fan speed right?
08:30:31 <psykotic> i know several game developers porting games to mac who have had to write their own fan controller override to prevent their customers' laptops from burning.
08:30:42 <Darkone> Yep. What I thought :V
08:30:44 <psykotic> yeah, not enough. everyone using a mbp should use smcfancontrol with the 'higher rpm' setting.
08:31:18 <Darkone> Hmm
08:31:33 <Darkone> Bit warm in my room it looks, my card is up to 41c idle :<
08:32:16 <kingping> But does http://hackage.haskell.org/platform/contents.html have any GUI tools ?
08:32:36 <Darkone> Love this 4830. If I need more speed, I just jam the core clock slider all the way to the right.
08:32:37 <kingping> Without the need to install anything else.
08:32:47 <aavogt> no, they are not included in that
08:32:49 <Darkone> No problems with that, whatsoever. Runs so freaking cool.
08:33:33 <Darkone> I wonder how far you could push a 4830 with basic water cooling >.>
08:33:54 <quicksilver> psykotic: only the 2007-8 models, I think.
08:33:58 <aavogt> kingping: gtk2hs should have a windows installer...
08:34:04 <quicksilver> psykotic: my 2009 model runs much cooler than my 2007 ever did.
08:34:12 <Darkone> Have to use a different... interface? to do it. ATI overdrive only goes to 700 >.>
08:34:15 <psykotic> quicksilver: i have an early 2009 unibody
08:34:18 <kingping> aavogt: Okay, thanks. :]
08:34:39 <psykotic> quicksilver: mine also had the infamous 'fan choking' problem, so i had to replace it.
08:36:22 <fm2209> I am getting a "Premature end of script headers" with my cgi script
08:36:24 * jmcarthur uses a mbp at work with linux on it and has absolutely no problems with heat or fans
08:36:32 <fm2209> I mean I get that into apache log file
08:36:37 <pokoko222> I would use some philosophicall readings on mathematics since i read stuff on abstract algebra and 90 % of the time i am like "uh wait, what i am actually studying here"? i think good math guys here that do category theory might help out
08:36:40 <jmcarthur> oh, but it's a later model
08:37:19 <quicksilver> fm2209: did you forget Content-type: text/html\n\n ?
08:37:25 <fm2209> is there a way to get a clearer message?
08:37:37 <quicksilver> that message is quite clear.
08:37:40 <fm2209> quicksilver: I use the cgi module, there shouldn't be the need to do that
08:37:44 <quicksilver> It says the headers ended with no body
08:37:48 <fm2209> and my script works on another webserver
08:38:52 <yitz> fm2209: your script produced no output, probably. could be a configuration issue, or permissions (or both)
08:39:45 <yitz> fm2209: you either copied the executable, or recompiled on the new server. either way, there could be reasons why it didn't run.
08:39:57 <fm2209> yitz: I think the permissions are ok. What do you mean with configuration?
08:40:02 <fm2209> I recompiled it
08:40:26 <yitz> fm2209: in apache or whatever, that allow the cgi script to run with the given url
08:41:07 <fm2209> yitz: the configuration of this server doesn't depend on me, but I am sure that files named .cgi get executed directly.
08:41:15 <yitz> fm2209: can you run the script from the command line on the server?
08:41:57 <fm2209> yitz: yes, and I get why it doesn't work now. forgot a static file :P
08:41:58 <fm2209> thanks.
08:42:08 <yitz> fm2209: np :)
08:42:38 <dankna> It looks to me like the arguments to bracket have their descriptions in the wrong order - it goes bracket acquire release perform, not bracket release acquire perform, right?
08:42:51 <dankna> in the base library haddock, I mean
08:43:26 <yitz> @hoogle bracket
08:43:26 <lambdabot> Control.Exception bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
08:43:26 <lambdabot> Control.OldException bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
08:43:26 <lambdabot> Control.Exception.Base bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
08:43:35 <dankna> yeah, the type signature is what put me onto it
08:43:40 <dankna> it makes no sense for it to be the other way
08:43:50 <dankna> because you have to acquire the resource before you can pass it to the other functions
08:44:29 <dankna> oh!  I see what happened!
08:44:48 <dankna> they were affected by the same haddock behavior as I was - it dropped the description of the first parameter and shifted everything else up one
08:45:03 <dankna> because it has unbound type variables in it
08:45:14 <dankna> er, rather, unbound isn't the word, but ykwim
08:45:16 <fm2209> yitz: now I get this error again. is there a way I can pass GET values to the script on the console?
08:45:36 <dankna> well, I guess I don't require an answer since I've solved my own problem, but :)
08:46:16 <yitz> fm2209: Sure. QUERY_STRING=var1=val1&var2=val2 myScript.cgi
08:46:28 <yitz> fm2209: at the bash prompt.
08:46:36 <aavogt> dankna: yeah, if you look at the source it makes sense
08:46:46 <fm2209> yitz: so wait I should export a QUERY_STRING variable?
08:47:02 <dankna> aavogt: right okay, thanks for the confirmation
08:47:33 <dankna> fm2209, are you using the cgi-3000 package?
08:47:43 <dankna> my project this week is a replacement for it, direct-fastcgi :)
08:47:47 <yitz> fm2209: for this i don't bother exporting - if you just say "ENV_VAR=env_val command" it runs command with that environment variable set.
08:48:10 <fm2209> yitz: ok
08:48:16 <fm2209> dankna: yes I am (:
08:48:45 <dankna> annoying trying to use your own monad with it, isn't it?  in particular it's not possible to do certain things with exceptions, haha.
08:48:45 <yitz> fm2209: oh, i guess you should quote that because of all of the = chars. maybe.
08:49:16 <quicksilver> yitz: don't think you need to actually
08:49:23 <fm2209> yitz: it works perfectly on the console
08:49:39 <quicksilver> yitz: TEST=a=b sh -c 'echo $TEST'
08:49:43 <quicksilver> displays a=b
08:49:51 <yitz> quicksilver: ok
08:49:56 <quicksilver> the & might be a problem though
08:50:10 <yitz> fm2209: hmm. good news and bad news, eh?
08:50:12 <fm2209> I just "ed everything and it works fine
08:50:14 <quicksilver> yeah, you need a single \ before the &
08:50:19 <fm2209> yitz: yes :P
08:50:49 <yitz> fm2209: make sure your browser is not just showing you the cached page
08:52:03 <yitz> fm2209: also, make sure that www-data has permission to run the program
08:52:43 <fm2209> yitz: I just give chmod a+x to those files
08:53:06 <fm2209> but it's strange, I am trying with a simple python hello world script and it gives the same error
08:53:16 <yitz> aha
08:53:37 <fm2209> I think I am going to ask to the admin :P
08:53:51 <yitz> fm2209: ok, good luck!
08:54:24 <fm2209> the problem is that I just conviced him to install xmonad on every pc in the lab :P
08:54:35 <fm2209> i don't know he may be annoyed ehehe
08:54:41 <yitz> :)
08:55:01 <yitz> oh, but xmonad is lightweight. he'll be happy :)
08:55:23 <yitz> fm2209: ask him about the python script ;)
08:59:14 <Hippy> Hey do you offer programing help?
08:59:32 <jmcarthur> Hippy: if it's haskell programming :)
08:59:49 <Hippy> um do u no of a java programming room
09:00:10 <neonfreon> try ##java
09:00:17 <jmcarthur> probably either #java or ##java
09:00:23 <Hippy> #java
09:00:26 <neonfreon> ah
09:01:18 * hackagebot containers-unicode-symbols 0.2 - Unicode alternatives for common functions and operators  http://hackage.haskell.org/package/containers-unicode-symbols-0.2 (RoelVanDijk)
09:02:02 <yitz> @wiki Homework_help
09:02:02 <lambdabot> http://www.haskell.org/haskellwiki/Homework_help
09:14:40 <fm2209> yitz: ok there were not one but two problems: wrong group ownership
09:14:59 <fm2209> and more importantly, the web server is 64 bit while the machine I'm working on is 32
09:15:19 <yitz> fm2209: i thought you recompiled on the server
09:15:47 <fm2209> well
09:15:56 <fm2209> I can't really recompile on the server
09:16:22 <fm2209> I mean I have got my web directory but I don't actually have access to the server
09:16:48 <fm2209> anyway actually
09:16:55 <fm2209> i think that the problem is not even that one
09:17:04 <fm2209> is there a way to statically compile some haskell fime
09:17:06 <fm2209> *file
09:17:17 <fm2209> because now it can't find a library
09:17:46 <fm2209> or something like that anyway:P
09:18:20 <fm2209> and why does my haskell script need libgmp anyway |:
09:18:42 <Saizan> for Integer
09:19:01 <fm2209> I don't use Integer
09:19:05 <Saizan> you can pass -optc-static or something like that
09:19:12 <fm2209> i just import List, IO and Char
09:19:39 <Saizan> yeah, but it gets linked to anyhow, because Integer is in the base package
09:19:47 <fm2209> ok...
09:20:24 * hackagebot hint 0.3.2.3 - Runtime Haskell interpreter (GHC API wrapper)  http://hackage.haskell.org/package/hint-0.3.2.3 (DanielGorin)
09:21:00 <fm2209> it doesn't work, bunch of strange errors.
09:21:01 <me2> (:
09:21:15 <Darkone> Mmkay, another question. LEarning the list comprehensions + patterns
09:21:24 <fm2209> warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
09:22:12 <lispy> Good morning
09:22:21 <Darkone> Can someone tell me what I'm screwing up here? let getcaps xs = [ xs | xs <- (x:xs), x `elem` ['A'..'Z']]  ?
09:22:22 <Saizan> mh, i don't know much about linking
09:22:31 <Saizan> maybe you can ask on the ghc-users mailing list
09:22:39 <fm2209> ok...
09:22:43 <Darkone> Gives me an error that x isn't in scope.
09:22:45 <fax> you wrote ut linking
09:22:47 <lispy> Darkone: lots of things :)
09:22:53 <fax> you wrote  xs <- (x:xs)
09:22:59 <Darkone> lispy, from a noob perspective, what's wrong :P
09:23:03 <lispy> Darkone: the RHS of the "<-" shouldn't have a pattern
09:23:15 <Saizan> Darkone: did you mean (x:xs) <- xs ?
09:23:32 <monochrom> Why are you calling everything xs?
09:23:36 <Darkone> Wait, hold on a second
09:23:38 <Saizan> that too :)
09:23:53 <fax> yeah.. that's just exsessive
09:24:12 <lispy> Darkone: doing foo <- foos, means that foo will be set to each element of foos.  Looks like you might be thinking of it in reverse
09:24:24 <theorbtwo> You should really give your variables meaningful names whenever you possibly can.
09:24:31 <lispy> Darkone: Think of it as creating a for loop
09:24:50 <Saizan> > let getcaps xs = [ x | x <- xs, x `elem` ['A'..'Z']] in getcaps "fooOOooOOooFoo"
09:24:51 <lambdabot>   "OOOOF"
09:25:34 <Saizan> > let getcaps xs = [ word | word@(x:_) <- xs, x `elem` ['A'..'Z']] in getcaps ["Foo","foo","bar","Bar"]
09:25:34 <dancor> maybe Darkone wants: getcaps = filter (isUpper . head)
09:25:34 <lambdabot>   ["Foo","Bar"]
09:25:35 <lambdabot> dancor: You have 1 new message. '/msg lambdabot @messages' to read it.
09:25:44 <fm2209> ok, I've made progress, not it compiles
09:26:18 <fm2209> *now
09:26:27 <Saizan> > let getcaps xs = [ word | word@(x:_) <- xs, x `elem` ['A'..'Z']] in getcaps ["Foo","foo","bar","Bar", ""]
09:26:28 <lambdabot>   ["Foo","Bar"]
09:27:00 <Darkone> back
09:27:02 <Darkone> Sorry
09:27:43 <yitz> > [tens + ones | tens <- [10,30,50], ones <- [2,4,6]]
09:27:44 <lambdabot>   [12,14,16,32,34,36,52,54,56]
09:28:03 <fm2209> whooooo it works!!
09:28:04 <Darkone> So, <- asigns a value to it, like an outside variable.
09:28:11 <yitz> \o/
09:28:13 <Darkone> I get that much
09:28:30 <Darkone> I just had it backwards :X
09:28:55 <Darkone> Thankyou.
09:31:04 <Darkone> Alright, so the <- n is the actual assignment, and filters are performed on the object to the left that. Should have done more than one example on this and/or paid more attention xD
09:33:23 <Saizan> @undo [ x | x <- xs, x `elem` ['A'..'Z']]
09:33:23 <lambdabot> concatMap (\ x -> if x `elem` ['A' .. 'Z'] then [x] else []) xs
09:33:49 <Saizan> that's how the syntax gets converted into plain functions
09:36:50 <Darkone> can you paste into ghci?
09:37:15 <yitz> Darkone: on windows?
09:37:17 <Darkone> Yes.
09:37:53 <yitz> Darkone: right-click the icon in the top bar of the window, select Edit, select paste
09:38:02 <Darkone> Ahhh
09:38:07 <Darkone> Thank you.
09:38:39 <quicksilver> list comprehensions are neat, but they're a bad way to learn a language.
09:38:48 <quicksilver> since they're learnign the language from an aberrant special case
09:38:55 <yitz> quicksilver: they're a good way to learn python
09:39:02 <quicksilver> possibly :)
09:39:16 <yitz> quicksilver: who got it from haskell, actually
09:39:28 <dancor> who got it from math
09:39:38 <yitz> dancor: sort of
09:40:11 <aavogt> well they are more general in python, no?
09:40:18 <fax> math "set builder notation"? :D  it almost makes me think that these point-free people have the right idea
09:40:19 <yitz> aavogt: no
09:40:23 <aavogt> as in they work for sets
09:40:42 <zygoloid> > let repeats x = [ xs | xs <- x:xs ] in repeats 1
09:40:43 <lambdabot>   Not in scope: `xs'
09:40:44 <zygoloid> aww :(
09:41:01 <yitz> aavogt: and other things now. but it's just the same as writing the explicit list in that context.
09:41:06 <aavogt> > do rec xs <- x:xs; return xs
09:41:07 <lambdabot>   <no location info>: Parse error in pattern
09:41:21 <dancor> > let repeats x = [ xs | x:xs <- xs ] in repeats 1
09:41:22 <lambdabot>   Not in scope: `xs'
09:41:32 <yitz> aavogt: well, there are generator comprehensions. but those are actually closer to haskell lists than the python lists :)
09:41:35 <dancor> of course
09:42:10 <aavogt> yitz: you mean it's sugar for this:     Set.fromList [ x | x <- Set.toList xs ]
09:42:14 <dancor> yitz: no there are actual set comprehensions
09:42:42 <dancor> ya what aavogt said
09:43:21 <yitz> yes
09:44:08 <zygoloid> > do xs <- mfix (\xs -> [x:xs]); return [xs]
09:44:09 <lambdabot>   [[[x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,x,...
09:44:22 <yitz> aavogt: they need greater generality because the language syntax is less composable.
09:44:46 <ski> > mdo xs <- [1:xs]; return [xs]
09:44:47 <lambdabot>   [[[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,...
09:45:22 <monochrom> why are there so many ['s
09:46:28 <aavogt> > mdo xs <- 1:xs; [xs]
09:46:28 <lambdabot>   Occurs check: cannot construct the infinite type: t = [t]
09:46:32 <ski> (zygoloid : what were you trying to do ?)
09:46:36 <aavogt> > mdo xs <- 1:xs; xs
09:46:37 <lambdabot>   Occurs check: cannot construct the infinite type: t = [t]
09:46:44 <aavogt> > mdo xs <- 1:xs; [[xs]]
09:46:45 <lambdabot>   Occurs check: cannot construct the infinite type: t = [t]
09:46:47 <yitz> > mdo xs <- [1:xs]; return xs
09:46:48 <lambdabot>   [[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1...
09:46:53 <yitz> one less
09:46:58 <merijn> It starts with a list ([1:xs]), wraps adds another list [xs], and then wraps that in another list (return)
09:47:09 <merijn> If I understand it correctly, anyway
09:47:17 <aavogt> well   1:xs is a list
09:49:50 <yitz> > mdo xs <- [1:xs]; ys <- xs; ys
09:49:52 <lambdabot>   No instance for (GHC.Num.Num [t])
09:49:52 <lambdabot>    arising from the literal `1' at <inter...
09:50:42 <yitz> i always found mdo to be too inscrutable to be usable in practice
09:50:55 <yitz> isn't there some new syntax for it now?
09:51:59 <zygoloid> yitz: do rec?
09:52:28 <yitz> yeah
09:54:00 <int-e> > mdo xs <- [0:xs, 1:xs]; return (take 2 xs)
09:54:01 <lambdabot>   [[0,0],[1,1]]
09:57:37 <ManateeLazyCat> Hi all, you can use gtk2hs (darcs version) write browser with WebKit API, look http://farm3.static.flickr.com/2703/4442784497_cbfe33fd9a_o.png
09:58:26 <ManateeLazyCat> I will focus on Webkit patch recently, test all API and completely rest libraries, all most important libraries have finish.
09:59:38 * ManateeLazyCat pasted "Main.hs" at http://paste2.org/get/723034
09:59:54 <ManateeLazyCat> Above is example code that how to build Webkit browser with gtk2hs.
10:00:28 <ManateeLazyCat> I will write simple demo after i complete all Webkit API.
10:02:04 <jmcarthur> ManateeLazyCat: awesome!
10:02:35 <Younder> webkit isa seriously cool
10:03:53 <ManateeLazyCat> Younder: Yep, WebKit is fast.
10:04:21 <mreh> is there a function to count value occurances in a list?
10:04:38 <Younder> scintilla, GTK and webkit are a few cornerstones of my formula package
10:04:51 <Saizan> mreh: length . filter (v ==) ?
10:04:53 <aavogt> @hoogle elem
10:04:53 <lambdabot> Prelude elem :: Eq a => a -> [a] -> Bool
10:04:53 <lambdabot> Data.ByteString elem :: Word8 -> ByteString -> Bool
10:04:53 <lambdabot> Data.Foldable elem :: (Foldable t, Eq a) => a -> t a -> Bool
10:05:03 <aavogt> @type elemIndex
10:05:04 <lambdabot> forall a. (Eq a) => a -> [a] -> Maybe Int
10:05:11 <aavogt> @type elemIndexes
10:05:12 <lambdabot> Not in scope: `elemIndexes'
10:05:12 <mreh> Saizan: all occurances of all values
10:05:16 <mreh> :)
10:05:16 <ManateeLazyCat> jmcarthur: I'm sure i can complete all WebKit API, because WebKit-Gtk+ haven't vararg function that current FFI can't support.
10:05:40 <aavogt> mreh: convert your list to a map
10:05:58 <ManateeLazyCat> Younder: Believe me, i will build a *completely* WebKit browser in my multi-processes framework for Haskeller.
10:06:06 <mreh> aavogt: I can just zip it up with (repeat 1)
10:06:07 <Saizan> > Map.toList . Map.fromListWith (+) . flip zip [1,1..] $ "abcabcbbccdddd"
10:06:08 <lambdabot>   Not in scope: `Map.toList'Not in scope: `Map.fromListWith'
10:06:16 <Saizan> > M.toList . M.fromListWith (+) . flip zip [1,1..] $ "abcabcbbccdddd"
10:06:17 <lambdabot>   [('a',2),('b',4),('c',4),('d',4)]
10:06:20 <ManateeLazyCat> Younder: Of course, i need finish work on gtk2hs, make any Haskeller can write it's own Webkit browser. :)
10:06:34 <Younder> lol
10:07:02 <jmcarthur> lol?
10:07:56 <ManateeLazyCat> Younder: But debug this WebKit patch is painful, i spend some hours to find bug, because i need compile again after i change something.
10:08:08 * Saizan wonders if [1,1..] is optimized to repeat 1
10:08:28 <tsou> Can I have many different constructors, taking the same records, and yet not duplicate the record code on the data definition?
10:08:30 <ManateeLazyCat> Younder: Now, we're on the way that make gtk2hs can install by cabal.
10:08:48 <ManateeLazyCat> Younder: Then we can install and improve gtk2hs in 5 minutes.
10:09:10 <Saizan> tsou: you can if you use GADTs syntax, i believe
10:09:34 <Saizan> tsou: but you probably want to factor the contents in another datatype
10:10:29 <ManateeLazyCat> dcoutts: Have time on gtk2hs? I plan to update all gtk2hs API to Gtk+ 2.18. But still need much time if just Axel and me.
10:11:16 <tsou> Saizan: thanks
10:11:27 <Saizan> tsou: instead of "data Foo = C1 A B | C2 A B" it's usually better to have "data Cons = C1 | C2" "data Foo = Foo Cons A B"
10:12:04 <ski> @type elemIndices  -- aavogt ?
10:12:05 <lambdabot> forall a. (Eq a) => a -> [a] -> [Int]
10:12:41 <ManateeLazyCat> Anyone have time, please help us update gtk2hs API binding, it have speical apiGen tool that generate code automatically, you just need do some `diff` and `copy` work.
10:12:53 <Younder> still waiting for WebKit to support MathML, (under developement)
10:13:03 <aavogt> ski: that's what I was thinking about
10:13:36 <ManateeLazyCat> Younder: You have time that help us? Now just few active developer on it.
10:14:18 <tsou> Saizan: a-ha!  Thanks again.  And where can I find more on those GATDs you mentioned earlier?
10:14:24 <Younder> ManateeLazyCat, I might.. It happens to be a important part of my current project
10:14:45 <tsou> Saizan: (even though I think I'll go with the factoring-out method)
10:15:16 <Saizan> tsou: you could start from here http://en.wikibooks.org/wiki/Haskell/GADT#GADT-style_syntax
10:15:16 <ManateeLazyCat> Younder: I'm still on my project, but i need update gtk2hs at the same time.
10:15:39 <ManateeLazyCat> Younder: Thanks, please ask in gtk2hs-devel list if you have any problem on binding.
10:15:51 <Younder> ManateeLazyCat, I'll see what I can do
10:16:13 <Saizan> tsou: in particular you should be able to write "data Foo = C1 A B | C2 A B" as "data Foo where C1 C2 : A -> B -> Foo"
10:17:10 <ManateeLazyCat> Younder: Now, have apiGen tool under gtk2hs, it will analysis current API with Gtk+'s, then generate new API code (in *.chs.pp file) automatically, you just need `diff` then copy it.
10:17:32 <Saizan> tsou: "data Foo where C1, C2 :: A -> B -> Foo" actually
10:18:09 <c_wraith> do GADTs actually do anything when the data type isn't parameterized?
10:18:18 <ManateeLazyCat> Younder: Looks some simple work, but have so many libraries in Gtk+, so still need much time on test.
10:18:19 <Saizan> no
10:18:38 <c_wraith> That's what I though.
10:18:40 <c_wraith> *thought
10:18:50 <Saizan> just a nicer syntax :)
10:19:26 <ManateeLazyCat> Younder: http://haskell.org/gtk2hs/archives/2006/11/12/the-gtk2hs-code-generator/
10:19:26 <Younder> ManateeLazyCat, downloading...
10:20:00 <ManateeLazyCat> Younder: Tools under gtk2hs/tools/apiGen
10:20:12 <quicksilver> c_wraith: indeed, it wouldn't be a GADT
10:20:18 <quicksilver> c_wraith: it would just be GADT syntax.
10:20:23 <quicksilver> (which some people prefer anyway)
10:20:48 <zygoloid> you can get GADTs with non-GADT syntax if you're perverse, by using type equality constraints
10:21:13 <tsou> Saizan: aha, thanks again
10:21:18 * zygoloid thinks it would have been nicer if GADTs and GADT syntax had names which differed more :)
10:24:08 <ski> Saizan : ah, i hadn't thought of that putting a signature on multiple identifiers (here data constructors) could be legal in GADTs
10:24:16 <ski> ("you learn something new every day")
10:25:06 <Saizan> i think the first time i saw it was in Agda :)
10:25:32 * ski thinks it would have been nicer if "GADT"s had been given a better name
10:26:24 <c_wraith> as much as I think GADTs are cool, I've yet to actually need them.
10:26:31 <ManateeLazyCat> Younder: http://code.haskell.org/gtk2hs/webkit/Graphics/UI/Gtk/WebKit/ The modules that we have finish
10:26:32 <ski> ("Generalized Algebraic Data Type" doesn't really say that much to me .. plus, it's somewhat long to pronounce (and the abbreviation is hard to pronounce))
10:26:56 <ManateeLazyCat> Younder: You need install libwebkit-dev first to compile Webkit module.
10:27:06 <Saizan> ski: they should have used "indexed"
10:27:14 <ManateeLazyCat> Younder: And at least webkit-1.1.14
10:27:41 <yitz> ski: gaddit
10:27:42 <quicksilver> zygoloid: data...where syntax, it has been called IIRC
10:27:48 <Younder> ManateeLazyCat, ok I'll figure it out
10:27:59 <ski> yitz : .. that sounds .. profane
10:28:23 <yitz> c_wraith: a real-life simple example actually came up on the cafe today
10:28:34 * ManateeLazyCat pasted "Ubuntu/Debian command to install packages for gtk2hs" at http://paste2.org/get/723066
10:28:36 <ManateeLazyCat> Younder: Above.
10:28:56 <ManateeLazyCat> Younder: Then do "autoreconf && ./configure --with-hcflags=-O0 --disable-split-objs"
10:29:17 <ManateeLazyCat> Younder: If you see "webkit yes", just "make && sudo make install" That's all.
10:29:59 <ManateeLazyCat> Younder: Then you compile code at http://paste2.org/get/723034 after install gtk2hs.
10:30:11 <ManateeLazyCat> Younder: You will got simple Webkit browser.
10:30:41 <zygoloid> quicksilver: hmm, that's not too bad :)
10:31:36 <yitz> c_wraith: http://www.haskell.org/pipermail/haskell-cafe/2010-March/074723.html
10:31:43 <c_wraith> thanks for the link, yitz
10:34:44 <ManateeLazyCat> Younder: See http://www.mail-archive.com/gtk2hs-devel@lists.sourceforge.net/msg00410.html for how to use apiGen.
10:35:06 <ManateeLazyCat> Younder: Have you compile gtk2hs successful?
10:35:25 <Younder> ManateeLazyCat, I need the mlt package
10:35:49 <jmcarthur> cabal install mtl
10:36:24 <ManateeLazyCat> Younder: And i think you need alex and happy for install gtk2hs, if you haven't install them.
10:36:50 <ManateeLazyCat> jmcarthur: You have time help us?
10:37:05 <jmcarthur> eh not really. i'm working hard at the moment
10:37:14 <jmcarthur> just kind of glancing over at irc every once in a while
10:37:32 <Younder> jmcarthur, Yes no cabal.. instaling
10:37:36 <ManateeLazyCat> jmcarthur: Nevermind, i'm looking people help use.
10:38:01 <ManateeLazyCat> Younder: You haven't install cabal? Have install GHC okay?
10:38:17 <Younder> GHC is fine
10:38:26 <ManateeLazyCat> Younder: You need install cabal.
10:38:57 <ManateeLazyCat> Younder: If missing some package when you ./configure, just use cabal install it and ./configure again.
10:39:22 <ManateeLazyCat> jmcarthur: I found compile Gtk+ program is fast than Qt program.
10:39:44 <ManateeLazyCat> jmcarthur: Before i import all function under Gtk+, compile is fast.
10:40:05 <ManateeLazyCat> jmcarthur: But when i use qtHaskell, i found compile is *very* slow.
10:41:49 <ManateeLazyCat> Younder: You perhaps need 10 minutes to compile gtk2hs. :)
10:42:29 <ManateeLazyCat> It's will be short if gtk2hs split to cabal someday (in short time, maybe some months later.)
10:45:34 <Younder> ManateeLazyCat, have a bit of patience. I have already downloaded and buildt the SW
10:47:13 <ManateeLazyCat> Younder: I need 10 minutes to compile in my box (Duo 2.2GHz + 2GB)
10:47:28 <ManateeLazyCat> Younder: Please tell me if you can't compile pass.
10:47:50 <ManateeLazyCat> Younder: I think my patch should okay.
11:07:38 <merijn> Cale: Ping?
11:08:27 <tommd> Using gtk2hs, the value printout on my slider bar gets chopped off on the left and right when 3 or more digits are used.  I can't find a way to fix that (padding doesn't help) - anyone?
11:08:58 * hackagebot network-websocket 0.2.1 - WebSocket library  http://hackage.haskell.org/package/network-websocket-0.2.1 (MichaelMelanson)
11:12:33 <ManateeLazyCat> tommd: Send to gtk2hs-user list, then will people help you.
11:19:01 * hackagebot diagrams 0.2.1.2 - An EDSL for creating simple diagrams  http://hackage.haskell.org/package/diagrams-0.2.1.2 (AdamVogt)
11:19:43 <tommd> ManateeLazyCat: Yeah, that would have been the next step, but I found it:
11:19:46 <tommd>  set sc [widgetWidthRequest := 25]
11:21:49 <ManateeLazyCat> tommd: I'm not sure where the problem before see your code. Simplest way to fix gtk2hs is send to gtk2hs-user list, best to attached your source code.
11:22:36 <tommd> ManateeLazyCat: Yes, I understood that - thanks.  What I was saying is that I fixed it and that line was the fix - it gave extra space to the slider so the digits would be properly displayed.
11:23:17 <ManateeLazyCat> tommd: Glad you fix it.:)
11:23:21 <tommd> :-)
11:23:57 <ManateeLazyCat> tommd: BTW, looks gtk2hs newest version, can use Webkit-API develop browser like chrome. :)
11:24:07 <ManateeLazyCat> tommd: You need newest version.
11:24:31 <ManateeLazyCat> tommd: http://farm3.static.flickr.com/2703/4442784497_cbfe33fd9a_o.png
11:25:41 <gwern> ManateeLazyCat: what good does it do?
11:26:28 <ManateeLazyCat> gwern: Now you can use gtk2hs develop Webkit browser.
11:26:36 <gwern> so you said
11:27:15 <ManateeLazyCat> I have push patch that binding Webkit-Gtk+ to gtk2hs.
11:29:00 <gwern> I wonder why scheme chose to make strings different from [Char]?
11:29:05 <tommd> ManateeLazyCat: Newest being what?  I'm running off a darcs pull of about two weeks ago.
11:29:18 <gwern> it leads to a lot of duplicated functions like 'string-length'
11:29:25 <tommd> gwern: Because they saw how big an issue our community has with that?
11:29:29 <tommd> I kid, I kid.
11:29:40 <gwern> tommd: they couldn't've - scheme is older than us
11:29:44 <ManateeLazyCat> tommd: Webkit+ API
11:29:44 <tommd> I know
11:29:51 <ManateeLazyCat> tommd: You know Chrome?
11:29:55 <tommd> Yes
11:30:08 <ManateeLazyCat> tommd: You can use gtk2hs develop browser like Chrome.
11:30:21 <ManateeLazyCat> tommd: Chrome also use Webkit engine.
11:30:23 <tommd> I got that much - but you said 'newest version' without saying what that is.
11:30:34 <ManateeLazyCat> tommd: Today.
11:30:50 <tommd> I figure darcs repo two weeks ago was good, but not so?  You pushed some patches today?
11:31:21 <ManateeLazyCat> tommd: I push patch to repository today to make Webkit can compile successful.
11:31:23 <tommd> Suppose it doesn't matter as I'm not developing a browser.
11:31:44 <ManateeLazyCat> tommd: Darcs changes --last=5 --repo=http://code.haskell.org/gtk2hs
11:32:04 <ManateeLazyCat> tommd: I will update many API recently
11:32:14 <ManateeLazyCat> tommd: After finish test Webkit.
11:32:31 <gwern>  ManateeLazyCat you still haven't said what one would actually do with a webkit binding
11:32:34 <KSkrzet> "cabal haddock" has very usefull switch, namely "--hyperlink-source". how can I set it if I install the library solely by "cabal install" ?
11:32:56 <gwern> KSkrzet: in .cabal/config
11:33:02 <merijn> gwern: Develop new browsers, there really aren't enough of those yet!
11:33:04 <ManateeLazyCat> gwern: I said, use Webkit binding develop your own browser.
11:33:09 <KSkrzet> gwern: which field is responsible?
11:33:34 <gwern> or maybe I'm wrong, maybe my vague memory was about filing a bug report asking for --hyperlink to be a .cabal/config option
11:33:50 <gwern> fnnily enoug the regular CLI options are not automatically available in .cabal/config
11:35:23 <KSkrzet> gwern: I belive CLI options are available via "flags" field
11:35:38 <KSkrzet> gwern: but I don't know how to set them via CLI either
11:35:53 <ManateeLazyCat> Good night, all. :)
11:36:04 <KSkrzet> gwern: I have just found this: http://hackage.haskell.org/trac/hackage/ticket/517
11:36:09 <gwern> read cabal install/haddock --help I'd spect
11:36:21 <KSkrzet> gwern: did that already
11:37:03 <KSkrzet> also haddock --help, in case it might be set by haddock options
11:38:58 <EvanR-work> whats the bot command for eval
11:39:25 <aavogt> > 1+1
11:39:27 <lambdabot>   2
11:39:33 <EvanR-work> >
11:39:37 <EvanR-work> > 0
11:39:38 <lambdabot>   0
11:43:01 <EvanR-work> > 0+0
11:43:02 <lambdabot>   0
11:43:09 <EvanR-work> > sum (repeat 0)
11:43:15 <lambdabot>   mueval: ExitFailure 1
11:43:41 <EvanR-work> fail ;)
11:45:26 <KSkrzet> EvanR-work: or win for mueval :-)
11:45:37 <EvanR-work> but the answer is zero ;)
11:46:29 <KSkrzet> no, the answer is _|_ :)
11:47:48 <EvanR-work> maybe we need a better sum
11:47:54 <EvanR-work> limit of the partial sums
11:48:26 <aavogt> > sum (repeat 0 ++ [1]) -- you're supposed to solve this one?
11:48:31 <lambdabot>   mueval-core: Time limit exceeded
11:48:49 <EvanR-work> 'an infinite list with a one at the end' lol
11:48:57 <KSkrzet> well, this is solvable in theory
11:48:57 <aavogt> it seems that you are asking for some symbolic math
11:48:58 <EvanR-work> the answer is zero if it uses the limit
11:49:03 <jmcarthur> EvanR-work: _|_ is part of haskell's semantics, so changing sum (repeat 0) = _|_ to sum (repeat 0) = 0 would be against the spec
11:49:13 <benmachine> EvanR-work: limits don't really have anything to do with it
11:49:21 <jmcarthur> EvanR-work: not that i think your idea is bad, necessarily
11:49:25 <EvanR-work> heh
11:49:36 <benmachine> EvanR-work: the point is that you can't tell the difference between repeat 0 and replicate 10000 0 without looking at 10000 elements of it
11:49:57 <EvanR-work> i can
11:50:00 <KSkrzet> you can do unsafe things in GHC and see the list structure, vacuum already does this in a way
11:50:06 <fax> you can see the difference if you have X-ray vision
11:50:13 <jmcarthur> {-# REWRITE sum (repeat 0) = 0 #-}  ;)
11:50:18 <fax> since tail (repeat 0) ==== repeat 0
11:50:21 <EvanR-work> one is "repeat 0" and the other is "replicate 10000 0"
11:50:21 <fax> that is pointer equality
11:50:24 <benmachine> EvanR-work: you can't in general tell how many zeroes a function is going to produce, or if it is ever going to produce a 1
11:50:34 <EvanR-work> not in general
11:50:55 <fax> you can generalize that with unsafePerformMathematica
11:51:04 <jmcarthur> but the rewrite rule i just showed isn't semantically valid due to the reasons i already stated, i think
11:51:12 <benmachine> what is sum $ map (toEnum . isNotTheSumOfTwoPrimes) [4, 6 ..] -- :P
11:51:40 <benmachine> EvanR-work: well, if you only do it sometimes, it's not referentially transparent
11:51:57 <benmachine> it becomes invalid to replace a function that yields an infinite list of zeroes with an infinite list of zeroes
11:52:07 <EvanR-work> this seems to be related to the isInfinite :: [a] -> Bool  function ;)
11:52:24 <benmachine> and then your equational reasoning all goes down the whatever
11:52:40 <benmachine> yeah, pretty much
11:53:03 <benmachine> you're asking for a reflection of sorts, but one of haskell's great strengths imo is that it doesn't have that sort of distinction
11:53:08 <benmachine> you can't tell how values were produced
11:53:19 <EvanR-work> yeah, reflection is stupid
11:53:25 <lament> isInfinite = (not . isFinite)
11:53:35 <aavogt> mirrors be damned
11:53:35 <benmachine> and again, isInfinite $ filter isTheSumOfTwoPrimes [4, 6 ..]
11:53:40 <benmachine> :)
11:54:09 <aavogt> lament: but we're looking for an isInfinite that is sometimes True
11:54:14 <EvanR-work> is that true or false or is this one of those funny ones i missed
11:54:19 <benmachine> oh
11:54:20 <benmachine> sorry
11:54:28 <benmachine> I was assuming knowledge of goldbach's conjecture
11:54:40 <benmachine> and also it should be takeWhile
11:55:03 <benmachine> goldbach's conjecture is a so-far-unsolved hypothesis that every even number is the sum of two primes
11:55:26 <EvanR-work> so it could be true false or undecidable
11:55:40 <EvanR-work> or is it assumed that its exactly one of those
11:55:41 <EvanR-work> ;)
11:55:47 <benmachine> well it could be true and undecidable, true and decidable, or false
11:55:57 <EvanR-work> interesting
11:55:58 <benmachine> if it's false it's definitely decidable
11:56:03 <benmachine> because there's a counterexample
11:56:06 <EvanR-work> but it is exactly true or false?
11:56:17 <jmcarthur> benmachine: depends on the logic you used to prove it false
11:56:32 <benmachine> jmcarthur: no, it being false is exactly equivalent to there being a counterexample
11:56:35 <lament> on the other hand, it probably couldn't be true, false, and undecidable all at the same time
11:56:36 <benmachine> even if you don't know what it is
11:56:40 <jmcarthur> benmachine: if it's intuitionistic, sure, you have a counterexample
11:56:51 <jmcarthur> okay i see what you mean
11:57:24 <jmcarthur> benmachine: if the counterexample is undecidable then do we really know it exists?
11:57:39 <benmachine> jmcarthur: if we proved it did then yes :P
11:57:41 <benmachine> er
11:57:45 <jmcarthur> benmachine: proved in what logic?
11:57:49 <benmachine> you can't really have an undecidable counterexample though
11:57:50 <lament> jmcarthur: if a counterexample exists, we can just find it by counting for a while
11:58:00 <lament> these aren't reals, these are integers
11:58:06 <benmachine> because the counterexample will be finite, and all counterexamples can be checked with a finite amount of work
11:58:30 <benmachine> I suppose that's not generally true but it's in the nature of the problem here
11:58:37 <jmcarthur> lament: if the counterexample exists only according to classical logic then we may never find it by enumerating
11:58:39 <lament> we haven't found it yet which strongly suggests that the conjecture is true
11:59:03 <lament> jmcarthur: that doesn't make it undecidable, that just means we're slow
11:59:14 <lament> and need to count faster
11:59:22 <roconnor> the GC is either true or false, whether is it provable or not from a pariticular set of axioms is a completely separate question that depends on the axiom system being used.
11:59:30 <jmcarthur> lament: well, we can't prove it's undecidable with that method, but that doesn't mean it's decidable
12:00:05 <benmachine> how could there be a counterexample that existed but couldn't be found by enumeration?
12:00:13 <lament> jmcarthur: ...
12:00:35 <fax> undecidable whether it's undecidable
12:00:36 <roconnor> if the GC is false then peano arithmetic proves it.
12:00:42 <roconnor> proves it is false.
12:00:49 <lament> jmcarthur: if it's false, it's decidable
12:00:53 <benmachine> yes
12:00:55 <roconnor> peano arithmetic proves every true sigma-one sentence.
12:01:03 <benmachine> if it is undecidable it is true
12:01:09 <fax> if it's undecidable whether or not a turing machine halts, it doesn't halt?
12:01:18 <benmachine> therefore if it is undecidable, its decidability is undecidable :P
12:01:29 <roconnor> Usuing undecidable is inappropriate here
12:01:37 <mreisner> Hi!
12:01:52 <mreisner> Is anyone in contact with Matt Morrow?
12:01:57 <evanbd>   yeah, isn't undecidable only appropriate to generalized problems?  And GC is a specific problem?
12:02:00 <fax> mreisner: no
12:02:07 <roconnor> you should use the term "not provable (in PA)" instead since this is what you mean.
12:02:13 <jmcarthur> roconnor: quite so
12:02:14 <fax> mreisner: was going to email him to see if he was still around yesterday but didn't try
12:02:37 <benmachine> bah to you and your superior education :(
12:02:44 <roconnor> bwahahaha
12:02:48 <mreisner> fax: I mailed him a week ago, but he didn't reply until now.
12:02:51 <fusion5> > cos (pi/2)
12:02:52 <lambdabot>   6.123233995736766e-17
12:02:58 <fax> mreisner, oh so he lives!
12:03:00 <roconnor> > cos (pi/2) :: CReal
12:03:02 <lambdabot>   0.0
12:03:16 <benmachine> that's interesting
12:03:23 <fusion5> aah :| thanks roconnor
12:03:28 <roconnor> np
12:03:38 <roconnor> also
12:03:51 <benmachine> > cos (pi/2 - 0e-18) :: CReal
12:03:52 <lambdabot>   0.0
12:03:52 <roconnor> > deriv (\x -> x^2*exp(x)) x
12:03:54 <lambdabot>   (1 * x + x * 1) * exp x + x * x * (1 * exp x)
12:03:54 <benmachine> err
12:03:59 <benmachine> > cos (pi/2 - 1e-18) :: CReal
12:04:00 <lambdabot>   0.000000000000000001
12:04:12 <fax> mreisner, that's good news
12:04:20 <roconnor> benmachine: it is rational!
12:04:22 <gio123> does here anybody has mac?
12:04:23 <mreisner> fax: What?
12:04:38 <fax> mreisner, that he replied
12:04:40 <benmachine> I have a mac
12:04:50 <mauke> I thought he didn't reply
12:04:52 <mreisner> fax: No, he did *not* reply :-(
12:05:05 <fax> oh
12:05:08 <fax> I misunderstood "he didn't reply until now"
12:05:14 <mauke> it's this English thing, isn't it
12:05:18 <mauke> "he hasn't replied yet"
12:05:19 <benmachine> roconnor: that deriv can't be foolproof surely?
12:05:35 <benmachine> or just, "he didn't reply"
12:05:37 <fax> okay well now I am more worried than before
12:06:08 <mreisner> ah I see, "until now"
12:06:10 <CalJohn> how can I coerce an Int to an Int64 (for Data.ByteString.Lazy.Char8.drop) ?
12:06:28 <benmachine> fromIntegral?
12:06:40 <CalJohn> @type fromIntegral
12:06:42 <lambdabot> forall a b. (Integral a, Num b) => a -> b
12:06:48 <benmachine> coercion problems, answer is nearly always either fromIntegral or realToFrac
12:06:49 <CalJohn> thanks
12:07:11 <benmachine> or ceiling/floor/whatever
12:07:40 <monochrom> read . show
12:07:59 <mauke> toEnum
12:13:02 <Cale> Hmm, is it possible that PA might prove "exists n. n is even and for all primes p, q < n, p + q /= n" but not contain a specific example?
12:18:09 <sepp2k> How can one use @src with functions defined in type classes? E.g. how would I get the source of the show function for lists?
12:18:46 <fax> @src (>>=) []
12:18:46 <lambdabot> Source not found.
12:18:48 <mauke> @src [] show
12:18:48 <lambdabot> Source not found. This mission is too important for me to allow you to jeopardize it.
12:18:49 <fax> @src [] (>>=)
12:18:50 <lambdabot> xs >>= f     = concatMap f xs
12:18:57 <mauke> looks like lambdabot doesn't have it
12:18:58 <fax> of course show for [] is very tricky
12:19:02 <fax> because they have to handle String as well
12:19:09 <mauke> fax: that's not done in []
12:19:20 <fax> oh, I did it in [] myself
12:19:28 <mauke> impossible
12:19:37 <sepp2k> fax: Thanks.
12:19:45 <mauke> instance (Show a) => Show [a] where show = showList  -- or something like that
12:19:50 <sepp2k> mauke: Thanks.
12:20:01 <fax> Cale -- I wonder about kleene relativations
12:21:02 <fax> hm
12:22:43 <fax> I can't find it
12:23:06 <fax> ah it was Realizability not realitivation
12:23:46 <Younder> just discovering the joys of cabal
12:24:53 <Younder> not that great at reading source, but it seems beautiful
12:25:20 <Younder> kudos to you
12:26:19 <Younder> I already know darcs so I am not that supprised
12:27:46 <Younder> I hope I can benefit the WebKit developement.
12:28:00 <diegoeche> > foldr (&&) False (repeat True)
12:28:03 <lambdabot>   mueval-core: Time limit exceeded
12:28:16 <Younder> rotfl
12:28:30 <diegoeche> > foldr (||) True (repeat False)
12:28:34 <lambdabot>   mueval-core: Time limit exceeded
12:30:31 * Younder get's throgh a lot of vionent snezes
12:30:56 <Younder> and a powerfull snort
12:31:29 <Younder> I use snort by the way
12:31:56 <Younder> so should you, the linuxen anyhow
12:32:22 <monochrom> Is this #haskell, or is it your personal webcam channel?
12:32:52 <jlouis> monochrom: his IRC client has a virus
12:33:08 <Twey> A cold virus
12:33:23 <jlouis> btw -funused-bind is pure love
12:33:24 <Younder> I just got a new book on lambda calculus, so I suppose it is a Haskell channel
12:33:55 <Twey> jlouis: What is -funused-bind?
12:34:21 <Younder> Twey, don't mess with it..
12:34:39 <fax> lambda calculus ?
12:34:39 <jlouis> Twey: A typo, I think
12:35:02 <jlouis> -fwarn-unused-binds is the right name
12:35:03 <Younder> Twey, whenever I do It causes some sort of error
12:35:03 <fax> i hardly even know'us ...
12:35:53 <Younder> fax, I am a mathematician..
12:36:03 <fax> me too
12:36:20 <fax> I wanna get deep and for life with math
12:36:45 <Younder> fax: I hear that
12:36:55 <ulfdoz> Yesterday's and tomorrow's nerds. ;)
12:37:11 <fax> Younder --- I'm reading about differential form
13:01:25 <merijn> Cale: Ping?
13:04:07 <Cale> hi
13:04:31 <merijn> I had a question about that OO Haskell article you wrote
13:04:36 <Cale> sure
13:05:35 <merijn> Most of it seems to make sense, but the updateObject function returns a list of GameObjects. Why's that? is the code basically updating the entire world for each object in it or...?
13:06:21 <tomh-> which article?
13:06:26 <Cale> merijn: Yeah, so, for instance, when a ship is destroyed, it might turn into a bunch of individual fragment objects that go flying in various directions
13:07:00 <Cale> Or when the player's ship fires bullets, they're created along with the next iteration of the ship
13:07:19 <Cale> http://cale.yi.org/index.php/A_look_at_OO_from_Haskell
13:07:29 <tomh-> cool thanks
13:07:31 <merijn> Oh! Of course, you can then treat the update of the game state as mapping over the list of gameobjects and then concat'ing the results
13:08:25 <Cale> merijn: right
13:10:43 <merijn> I like the way it uses variables by creating new functions embedding variables for each new update. I never would've thought of that myself
13:11:57 <Cale> Yeah, it sort of gives you a different way to look at recursion :)
13:14:08 <stevenmarky> hmm how would you make it handle interation with other objects for example collision
13:14:35 <merijn> stevenmarky: By passing the game state as an argument to the update function
13:14:48 <Cale> Well, that's what the hitTest is for. The updateObject function gets a list of game objects for collision testing.
13:14:56 <merijn> One thing that stumps me, though. Suppose you store the objects in a HashTable or a tree (based on location for example), that gives you one way of searching for the information you need. But what if you want to search the same set of data using different method of indexing (i.e. based on an attribute other then location)?
13:15:11 <Cale> (this doesn't scale ideally -- you might want to use some spatial datastructure in general)
13:15:16 <stevenmarky> ah.
13:16:36 <merijn> In imperative world I'd have several containers with the same variables/objects, but since that's not really possible (or at least not desirable) with functional programming I dunno how you'd do something like that
13:16:41 <Cale> I consider the problem of indexing the objects as being somewhat orthogonal to the problem of representing the objects themselves, though of course you have to make them agree with each other when you do it this way.
13:17:40 <kr4ng> simple question:  Why doesn't the function "sum" use foldl' to prevent stack overflows?
13:17:45 <Cale> You could do something like have a Data.IntMap of game objects, and then various indexes on the game objects which contained Int indexes into the map
13:18:00 <edwardk> do you ever spend 4-5 hours working on something and then accidentally type rm instead of darcs mv ? =/
13:18:02 <Cale> kr4ng: Because when Haskell 98 was written, foldl' didn't exist.
13:18:12 <Zao> rm `darcs`, yes :)
13:18:16 <fax> edwardk no :P
13:18:18 <Zao> Err, rm `which darcs`
13:18:19 <yitz> kr4ng: ghc -O2 does the right thing anyway
13:18:22 <merijn> Cale: Agreed, this is not really related to the representation anymore. It's just something that occurred to me as a side effect of the fact you're replacing every object every update. Which means keeping multiple copies of an object doesn't work
13:18:27 <kr4ng> heh, that doesn't sound like a very good reason
13:18:28 <Cale> kr4ng: Also, the expectation was that strictness analysis should take care of that (and it does, just compile with -O or -O2)
13:18:32 <twink> Zao: Go zsh with rm =darcs
13:18:33 <kr4ng> yitz: interesting, I was just trying ghci
13:18:43 <yitz> kr4ng: but not in ghci. there you need to define your own sum.
13:18:51 <Zao> twink: Ooh. Sounds like it'd collide with the mutt mailbox syntax.
13:19:34 <Zao> mutt -f =omg
13:19:48 <Zao> I guess one can disambiguate it with -f=omg
13:19:50 <FCo> Hi everybody! I have a question, how do I write a function that takes an Int and returns a Char so that when I call fun 1 returns alpha, fun 2 returns beta and so on
13:19:56 <twink> Zao: I guess it sort of does, but I've never found it to be an issue because I never pass particular mboxes at the cmdline.
13:20:07 <twink> Zao: Or quote it a la mutt -f '=omg'
13:20:20 <Cale> kr4ng: Yeah, it's a lot easier to get stack overflows without a little strictness analysis. Basically what a stack overflow means is that an expression was constructed out of functions that pattern match on their argument which was too large by the time it got evaluated.
13:20:24 <edwardk> stuck copying the vm disk and trying to run lazarus/unrm on it now ;)
13:20:24 <pikhq> FCo: By writing such a function.
13:21:02 <pikhq> fun x = x !! "abcd" -- For instance. (not complete example, just enough to be a hint)
13:21:06 <yitz> edwardk: ooo, what fun
13:21:08 <Cale> kr4ng: The stack essentially consists of case expressions (and any other pattern matches) that are waiting for their scrutinee to be evaluated enough so that they can decide which pattern matches.
13:21:20 <FCo> pikhq: very helpfull, but I can't do it, I allways end with the wrong answer
13:21:31 <dmhouse> FCo: what have you tried so far?
13:21:31 <FCo> pikhq: that was a great idea!
13:21:41 <Cale> pikhq: You probably want the args to !! the other way around
13:21:41 <Zao> pikhq: Isn't that the wrong way around?
13:21:42 <dmhouse> pikhq: I think you have the arguments the wrong way around there as well.
13:21:48 <Zao> @stereo
13:21:49 <lambdabot> Unknown command, try @list
13:21:52 <Zao> Aaw.
13:21:54 <pikhq> ... Yes, Cale. Zao. dmhouse.
13:21:54 <dmhouse> ?quote stereo
13:21:55 <lambdabot> LoganCapaldo says: * LoganCapaldo must resist urge to mention stereo
13:22:01 <dmhouse> Heh, metastereo.
13:22:02 <pikhq> Thanks for the catching of the obvious mistake.
13:22:04 <dmhouse> ?quote metastereo
13:22:04 <lambdabot> omnId says: geez, how many metastereo quotes are going to be @remembered?  >_>
13:22:11 <dmhouse> Metametastero...
13:22:16 <edwardk> hrmm maybe not, i have most of it copied up on comonad.com actually
13:22:17 <dmhouse> ?quote metametastereo
13:22:18 <lambdabot> No quotes match. stty: unknown mode: doofus
13:22:53 <FCo> ok, but thanks pikhq, with that I will be able to do something!
13:26:05 <Younder> I am much depressed
13:27:06 <dmhouse> Okay, I have the first N (large) values of an infinite sequence, and I want to estimate its limsup. Any ideas?
13:27:06 <fax> why
13:27:09 <Younder> My beautiful diffferential geometry proof is not working
13:27:10 * Zao stops pushing Younder 
13:27:14 <dmhouse> More precisely, I want to prove its limsup is 1/2
13:27:20 <fax> Younder you can teach me differential geometry
13:27:31 <lament> why do press and depress mean the same thing? It's stupid.
13:28:00 <Younder> It's 5 years work down the drain
13:28:01 <lament> and isn't a press release an oxymoron??
13:28:06 <Younder> sigh
13:28:19 <yitz> dmhouse: i take it checking directly doesn't work
13:28:33 <aavogt> hmm, mtl once again is missing instances
13:28:37 <Younder> lament, nop, never released
13:28:44 <Cale> A depress release
13:28:50 <Botje> lament: "heh. press to test, depress to detonate" >:D
13:28:55 <dmhouse> yitz: how would I do that, though? There's no way to calculate exactly the limsup, I don't have all infinity of the values to hand.
13:29:31 <Cale> It was a pressing concern, but it was also a depressing concern.
13:29:33 <yitz> dmhouse: well, i guess you want to watch the partial maxima slowly decreasing...
13:30:36 <Younder> fax: You want to understand differential geometry?
13:30:43 <fax> yes
13:31:34 <Younder> fax: Well I might be able to point you along the way.
13:31:48 <benmachine> no-one tell lament about flammable and inflammable
13:32:20 <yitz> dmhouse: do have any estimate for how fast the sup should decrease towards the limit?
13:32:26 <lament> Cale: those usually cancel out for me, when stuff is both pressing and depressing i end up not doing it
13:32:27 <yitz> *do you
13:32:40 <Younder> fax: Start with Spivak ' A comprehensive guide to differential geometry'
13:33:12 <fax> ok
13:33:21 <Younder> all the other books in the area have turned out to be bullshit
13:33:22 <dmhouse> yitz: unfortunately if I estimate sup_{n >= m} by sup_{m <= n <= N} I don't quite get very close to 1/2 (the values really close to 1/2 occur at very large n)
13:34:18 <Younder> fax, there are 5 volumes in that series. only the first 2 are critical
13:35:56 <Younder> differential geometry is a beutiful field. much luck to you
13:36:02 <yitz> dmhouse: could you construct some function e where you conjecture that a(j) <= e(i) for all j>=i and lim (i -> inf) e(i) = 1/2? That hypothesis would be easier to check.
13:36:10 <fax> thanks :)
13:36:26 <dmhouse> yitz: and for m close to N, that finite sup isn't a very good approximation of sup_{n >= m}. (So I guess I can only get good approximations for m << N.)
13:38:32 <dmhouse> yitz: maybe. Perhaps not, though. From graphs of the first 100,000 values the general pattern seems to be that the sequence is actually bounded above by 1/2 and has the occasional peak, with the values of the peaks getting closer to 1/2 as n gets large
13:39:14 <dmhouse> http://imagebin.org/89412
13:39:47 <yitz> dmhouse: so the difficulty is finding evidence that the limsup is not *less* than 1/2?
13:39:59 <yitz> i thought it was the opposite problem
13:40:37 <dmhouse> Apologies. That's correct.
13:42:12 <fax> > 2^(142/2)
13:42:13 <lambdabot>   Ambiguous type variable `t' in the constraints:
13:42:13 <lambdabot>    `GHC.Real.Fractional t'
13:42:13 <lambdabot> ...
13:42:18 <fax> > 2**(142/2)
13:42:19 <lambdabot>   2.3611832414348227e21
13:42:33 <fax> > (2**(1/2))**(142)
13:42:34 <lambdabot>   2.3611832414348457e21
13:42:43 <mauke> > 2^(142`div`2)
13:42:44 <lambdabot>   2361183241434822606848
13:44:05 <yitz> dmhouse: well, that's easier. the best evidence for that you can ever get is look at the sequence nub . maximum `on` snd . zip [0..] (not computed exactly that way of course) and see that it approaches 1/2 from below. get an idea of how quickly by watching the fsts.
13:44:37 <Younder> fax: understand that differential geometry is difficult. THE most difficult thing I have studied in mathematics
13:46:20 <yitz> dmhouse: sorry: nub . map (maximum `on` snd) . inits . zip [0..] (not computed exactly that way of course) and see that it approaches 1/2 from below. get an idea of how quickly by watching the fsts.
13:46:28 <fax> > log 100 / log 2
13:46:29 <lambdabot>   6.643856189774725
13:46:33 <fax> > 2 ** (log 100 / log 2)
13:46:35 <lambdabot>   100.00000000000004
13:46:37 <yitz> dmhouse: sorry: nub . map (maximum `on` snd) . inits . zip [0..]
13:46:44 <yitz> there
13:47:30 <yitz> anyway, you get the idea. how could you possibly do better than that?
13:47:41 <yitz> its O(n).
13:47:42 <dmhouse> Okay, this is what I've come up with as well.
13:48:51 <dmhouse> ?type maximum `on` snd
13:48:52 <lambdabot>     Occurs check: cannot construct the infinite type: a = [a] -> c
13:48:52 <lambdabot>     Probable cause: `maximum' is applied to too many arguments
13:48:52 <lambdabot>     In the first argument of `on', namely `maximum'
13:49:05 <yitz> dmhouse: this isn't the zeros of the zeta function is it?
13:49:16 <dmhouse> Maybe nub . map (maximum . map snd) . inits . zip [0..]?
13:49:35 <yitz> maximumBy I meant
13:50:09 <dmhouse> Then you want nubBy snd . map (maximumBy $ comparing snd) . inits . zip [0..] probably
13:50:15 <yitz> whatever
13:50:29 <yitz> yeah
13:50:30 <dmhouse> nubBy (equating snd) . map (maximumBy $ comparing snd) . inits . zip [0..], even. But yeah, whatever.
13:50:37 * Younder loves Judy Collins
13:50:52 <yitz> Younder: don't tell lambdabot
13:51:00 <dantheman_> Hey all, I'm having a problem with the ffi, specifically foreign pointers and finalizer free. I keep getting an error "segmentation fault/access violation in generated code", and I've no idea why. Has anyone come across this before? The relevant code is at: http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24114#a24116
13:51:25 <benmachine> :t max `on` snd
13:51:26 <lambdabot> forall a b. (Ord b) => (a, b) -> (a, b) -> b
13:51:38 <yitz> dmhouse: that's the nice thing about talking to people rather than computers :)
13:51:45 <dantheman_> I'm just trying to free a struct passed that I created in my c code and passed into haskell
13:52:03 <dmhouse> yitz: no; it's a percolation problem. Assign a random number U_e ~ U[0,1] to every edge e in the square lattice Z^2 (edges between vertices distance 1 apart obviously). You are an invading force which at time 0 occupies the origin. At time n, take all edges connecting your territory to its complement and pick the one with lowest U_e. Add the node at the other end to your territory.
13:52:13 <dmhouse> The sequence is the sequence of U_e you pick
13:53:31 <dmhouse> This approximates p_c, which is as follows: call an edge e p-open if U_e < p. Then p_c is the unique probability with the probability that for p < p_c, there is almost surely no infinite connected subgraph all of whose edges are p_open, and for p > p_c, there almost surely is one.
13:53:52 <dantheman_> Anyone?
13:55:23 <yitz> p < c and p > c ?
13:55:42 <yitz> oh i see
13:56:00 <yitz> so p_c is conjectured to be 1/2
13:56:30 <dmhouse> Well it's in fact proven, but this is only a short investigation coursework for my course.
13:56:36 <yitz> but you're only looking for a connected graph that includes the origin?
13:57:05 <benmachine> dantheman_: are you allergic to do-notation? :P
13:57:18 <dmhouse> yitz, it's not too hard to show that almost surely limsup U_{e_n} = p_c
13:58:55 <yitz> dmhouse: the simulation you described finds the probability that there is a connected graph that includes the origin. that is certainly less that p_c.
13:59:04 <yitz> isn't it?
13:59:36 <yitz> *than
13:59:48 <dmhouse> Since if p < p_c then there's an infinite p-open connected subgraph; let t be the first time the invasion process hits this graph (a.s. t < infty), then for n >= t there is an edge e between your territory and its complement with U_e <= p. But p > p_c was arbitrary so limsup U_{e_n} <= p
14:00:02 <yitz> ah, i see
14:00:33 <yitz> and once you're in it, you're in it forever.
14:01:07 <dmhouse> Yeah as soon as you hit it the U_e's you choose are bounded by p
14:01:45 <dmhouse> The other direction isn't very hard either
14:03:03 <dmhouse> (Seeing as I've already typed half of it out: conversely suppose limsup U_{e_n} <= p < p_c with positive probability. Then with positive probability there's an infinite connected subgraph with all but finitely many edges p-open. So with positive probability there's an infinite p-open connected subgraph, i.e. p >= p_c contradiction.)
14:04:00 <dantheman_> benmachine, (or anyone else) edited with do notation on the offchance it gives you an idea :) http://hpaste.org/fastcgi/hpaste.fcgi/view?id=24114#a24117
14:04:02 <yitz> ok
14:04:03 <dmhouse> yitz: the project goes on to talk about Z^3 as well, and I don't think p_c is known for that
14:04:52 <yitz> probably quite high
14:05:16 <yitz> no, the opposite
14:05:30 <yitz> i mean, it's a lot easier to connect things in 3-space.
14:07:42 <yitz> dmhouse: can you get any idea about Z^3 using your algorithm? or is it so intractable that you can't see anything after computing for a long time?
14:08:34 <dmhouse> I think I can probably get a decent idea
14:08:40 <benmachine> dantheman_: why can't you just free it immediately?
14:08:55 <dmhouse> From my graph it was fairly clear that p_c is 1/2, but it's trying to give some kind of reassurance that's tricky
14:09:10 <jgrimes> can anyone explain this to me: http://hackage.haskell.org/packages/archive/template-haskell/2.4.0.0/logs/failure/ghc-6.10
14:09:16 <jgrimes> dist/build/tmp18870/Language/Haskell/TH/Quote.hs:31:12:
14:09:16 <jgrimes>     Not in scope: data constructor `CharConstr'
14:09:19 <benmachine> dantheman_: also, if you use finalizeForeignPtr, can you control when it crashes?
14:09:23 <dmhouse> (An earlier part of the project showed p_c <= 1/2 as well, so this was reasonable.)
14:09:37 <dmhouse> yitz: the algorithm will take a bit of reworking though, it's currently hardwired for two dimensions.
14:09:45 <jgrimes> I am looking at the imports, Data.Data, and I see that CharConstr is exported in Data.Data
14:10:20 <yitz> really? same for Z^3 as Z^2? odd.
14:11:05 <dmhouse> yitz: no, I showed p_c <= 1/2 for Z^2
14:11:15 <dantheman_> sorry ben machine, what do you mean by immediately? Would that mean just forget about the foreign pointer stuff, and use finalizer free directly?
14:11:18 <yitz> oh
14:11:22 <dmhouse> I don't think Z^3 is very analytically tractable
14:11:36 <dantheman_> I'll have to look into the latter... sounds like a good idea though.
14:12:01 <benmachine> dantheman_: just using free or whatever
14:12:33 <benmachine> I guess it depends on how you are writing things to the chan
14:12:42 <benmachine> whether you are using them afterwards
14:16:42 <dantheman_> benmachine, do Foreign.Marshall.free and Foreign.Marshall.finalizerFree free objects allocated in the foreign heap though?
14:16:48 <Saizan> jgrimes: are you using ghc-6.12 ?
14:17:18 <benmachine> oh, good point
14:17:36 <benmachine> the docs say no
14:17:42 <benmachine> http://hackage.haskell.org/packages/archive/base/latest/doc/html/Foreign-Marshal-Alloc.html#v%3Afree
14:17:49 <benmachine> well, they don't say so, which is the same thing
14:17:50 <jgrimes> Saizan, ghc-6.10.4
14:18:06 <dantheman_> I guess I have to write some kind of wrapper around the c free()  function and call that
14:18:21 <benmachine> do you need a wrapper?
14:18:27 <benmachine> can't you just foreign import it directly
14:18:52 <dantheman_> Yup, good idea.
14:19:08 <dantheman_> Thanks! I'll let you know how it goes.
14:19:54 <yitz> dmhouse: more generally, what is p_c for the lattice generated by any presentation of a finitely generated free abelian group?
14:19:57 <Saizan> jgrimes: so you won't have CharConstr, since it's new in base-4.2, which comes with ghc-6.12
14:20:13 <jgrimes> saizan, ahhh. ok. I was looking at base-4.2
14:20:45 <jgrimes> Saizan, it was just that cabal-install was trying to get TH 2.4, which it turns out I didn't really need
14:20:50 <Saizan> jgrimes: and you need to upgrade ghc to use the newer base, though you probably can just stick to the template-haskell version that comes with your ghc
14:20:58 <jgrimes> yep :)
14:21:15 <Saizan> yeah, cabal-install's solver is not as smart as it could :)
14:21:18 <dmhouse> yitz, http://en.wikipedia.org/wiki/Percolation_theory and http://en.wikipedia.org/wiki/Percolation_threshold are relevant; the pertinent books are Grimmett and Bollobás
14:21:19 <yitz> dmhouse: i guess it doesn't need to be free even. it's only interesting if the group has at least 2 free dimensions though.
14:23:40 <fax> hi
14:23:53 <fax> I read about functor!
14:24:36 <fax> the excersices are long long questions which basically ask when you read past all the nonsense "show f^-1 f = id"
14:26:45 <benmachine> Grimmett lectured me last term :P
14:27:20 <benmachine> (I say me I mean me and ~200 other fellow undergraduates)
14:28:37 <benmachine> well, *a* Grimmett did, but I can't imagine there are that many
14:29:23 <fax> You are likely to be taught by a Grimmett
14:32:06 <dmhouse> benmachine: you at Cambridge?
14:32:11 <benmachine> yes
14:32:13 <lament> it is peach orange.
14:32:32 <dmhouse> benmachine: nice, me too, which year?
14:32:36 <benmachine> first
14:32:46 <dmhouse> He lecture probability?
14:32:49 <benmachine> mmhm
14:32:59 <benmachine> one of his books was recommended for the course
14:33:05 <benmachine> he was like, yeah that's a pretty good book
14:33:06 <dmhouse> We had Gowers, trumped. :)
14:33:53 <dmhouse> Yeah, the Grimmett book's good. In fact there are two aren't there? Introduction to Probability or something and Probability and Random Processes, which includes some Markov Chain stuff. I've only seen the latter.
14:34:10 <dmhouse> (Of course, noone can touch the Norris book when it comes to Markov Chains.)
14:34:45 <dmhouse> If you're doing it next year and Suhov is still lecturing it, don't even go to the lectures. He's a great mathematician but a pretty bad lecturer and the Norris book is awesome (plus available free online)
14:35:05 <benmachine> hah
14:35:13 <benmachine> let me have a look
14:35:28 <benmachine> yeah he is
14:35:50 <dmhouse> I'm a 3rd year by the way, the stuff I was discussing with yitz was one of my CATAM projects
14:35:50 <benmachine> I like lectures though >_>
14:36:02 <fax> what's CATAM?
14:36:28 <dmhouse> fax: programming coursework for the maths degree at Cambridge University. Basically writing programs to investigate maths.
14:36:35 <fax> cool
14:36:40 <fax> wow sounds really cool
14:36:56 <fax> we just do matrix inverse using matlab ....
14:36:57 <benmachine> I know a third-year mathematician
14:37:09 <benmachine> I guess the odds aren't good on that though :P
14:37:10 <dmhouse> E.g. the first projects you do are along the lines of, integrate this ODE using Runge-Kutta, do some Gaussian elimination over finite fields, RSA etc.
14:37:26 <benmachine> do you know any of the corpus people in your year?
14:37:27 <fax> yeah it makes me think sometimes I should have put more thought into where to study
14:37:47 <dmhouse> benmachine: there's a fairly outside chance, what's the name?
14:37:52 <benmachine> tim
14:38:12 <dmhouse> No, afraid not
14:38:21 <dantheman_> benmachine ... just importing free didn't work, but I did a wrapper that receives a generic HsPtr, and then casts it to a pointer to my struct (CAPI_TickPrice*), and then passes it to free, and that worked. Thanks!
14:38:23 <benmachine> oh well, worth a try :P
14:38:31 <benmachine> dantheman_: nice
14:38:45 <twink> Runge-Kutta is pretty easy.
14:38:59 <benmachine> dantheman_: so basically the problem was using haskell's free on a structure that wasn't allocated by haskell?
14:39:10 <twink> RSA is mostly the arbitrary-precision arithmetic and marshalling.
14:39:10 <dantheman_> Exactamundo
14:39:27 <dmhouse> twink: all of the projects I listed are second-year projects, all quite easy
14:39:36 <benmachine> twink: hah, I remember when arbitrary-precision arithmetic used to be difficult >_>
14:39:43 * benmachine hugs Integer
14:40:15 <dmhouse> twink: there's a combination of maths and programming, i.e. the ODEs project isn't just "do Runge-Kutta", you have to compare it to the naive method, find where it's unstable etc and explain why, and so on
14:40:18 * hackagebot zeromq-haskell 0.2.2 - bindings to zeromq  http://hackage.haskell.org/package/zeromq-haskell-0.2.2 (ToralfWittner)
14:40:35 <twink> Gaussian elimination over finite fields has more programming to it.
14:41:05 <fax> what difference does the finite fields make?
14:41:22 <fax> and also why do we want so many algorithms on finite fields?
14:41:24 <dmhouse> fax: means you can do it without worrying about floating points
14:41:26 <twink> dmhouse: Yeah, I guess I'm looking at it from a non-math perspective.
14:41:44 <twink> Fraction-free Gaussian elimination is also interesting.
14:42:09 <fax> > 36/12
14:42:10 <lambdabot>   3.0
14:42:11 <benmachine> is that where you just multiply everything instead of dividing one thing
14:42:51 <dmhouse> benmachine: well the Gaussian elimination is over a finite field where everything has multiplicative inverses so you never have to divide
14:43:07 <dmhouse> (Where by "everything" I mean "everything nonzero" of course.)
14:43:17 <benmachine> yeah, I guessed
14:43:35 <benmachine> I was asking about fraction-free - same thing?
14:43:47 <yitz> dmhouse: the wikipedia article doesn't mention anything about non-square graphs. but i'm certain they are interesting. they fit the physical model, too - the structure of the graph is determined by the structure of the material, not necessarily square.
14:43:53 <twink> Fraction-free Gaussian elimination is where you do gcd and remainder and other divisibility stuff instead of the usual field-based division.
14:44:05 <benmachine> sounds like fun
14:44:10 <dmhouse> twink, http://www.maths.cam.ac.uk/undergrad/catam/IB/index.html is the list of project specifications for the second year projects
14:44:22 <dmhouse> http://www.maths.cam.ac.uk/undergrad/catam/II/index.html has the 3rd year ones (a lot more interesting)
14:44:42 <dmhouse> My discussion with yitz was from the percolation projec from that second page
14:45:08 <twink> benmachine: Yeah, you basically find the smallest element in absolute value of a column and then do row operation for integer division on them.
14:45:09 <fax> I feel really idiot
14:45:22 <fax> what I read was 'vector space of linear maps' and I thought huh.. what's that
14:45:34 <fax> and it's obvious equal to the vector space of matrices
14:45:58 <monochrom> haha
14:46:25 <dmhouse> "Equal" after choosing bases ;)
14:47:45 <fax> I want to make a basics of category theory visual thing
14:48:06 <fax> like category of colored dots, and category of round the world in 60 days
14:48:08 <b0fh_ua> Hi there. I am using Data.ByteString.Lazy.Char8 and looks like there is no way to search for a substring withing the string. findSubstring exists in Data.ByteString, but it lacks some useful functions like lines etc. Is there any way to do a substring search with Data.ByteString.Lazy.Char8?
14:48:14 <fax> then we can learn category theory
14:48:47 <b0fh_ua> I'm not sure how can I mix Data.ByteString and Data.ByteString.Lazy.Char8 functions
14:48:55 <twink> benmachine: I think when I wrote it I pivoted every time on the smallest element of the whole matrix until I got a reduced column, then permuted rows and columns and farted around with the reduced matrix from there.
14:49:27 <yitz> fax: like learning lambda calculus with this: http://worrydream.com/AlligatorEggs/
14:49:48 <monochrom> I want to burn all category analogies. Then we can learn category theory rather than distractions.
14:49:55 <fax> oh that aligator stuff is awful :(
14:50:45 <twink> A monad is like an alligator burrito being swallowed whole by a hagfish?
14:51:06 <fax> monochrom -- I am struggling though with this stuff because it goes from easy to hard
14:51:32 <monochrom> oh you want it to go from hard to easy. that's easy. err I mean that's hard. read it backwards.
14:51:46 <fax> no I want ti to go easy to easy :P
14:51:50 <fax> or at least easy to medium to easy
14:52:10 <Botje> b0fh_ua: there's a findSubstring in Data.ByteString.Char8
14:52:18 <monochrom> http://www.haskell.org/ghc/docs/latest/html/libraries/bytestring-0.9.1.5/Data-ByteString-Lazy-Char8.html#v%3Alines is a counterexample to b0fh_ua's claim
14:52:53 <twink> benmachine: Even though I searched the whole matrix after every row op for the smallest nonzero element it was almost always in the same row I started working on.
14:54:53 <monochrom> I guess I misread b0fh_ua's claim.
14:56:08 <Ytinasni> b0fh_ua: why would you want to do a substring search on a _lazy_ string? that seems... counterproductive.
14:56:24 <uorygl> Ooh, that alligator thing is cute.
14:56:50 <b0fh_ua> Ytinasni: you're right, I realized that I don't need lazy string there
14:56:56 <uorygl> Though I really wish it used grouping by drawing lines around the alligators or something, instead of by old alligators.
14:56:58 <b0fh_ua> thanks, guys!
14:58:28 <sinelaw> Hello
15:02:41 <SR001> hello
15:04:12 <sinelaw> hey
15:04:16 <sinelaw> :(
15:04:21 <blackh> Hello!
15:07:24 <sinelaw> hi!
15:07:32 <sinelaw> blackh, 'sup
15:09:03 <blackh> Hacking away
15:09:29 <sinelaw> blackh, what about?
15:10:03 <blackh> I'm doing a commercial video game in Haskell.
15:11:14 <sinelaw> blackh, wow
15:11:18 <sinelaw> blackh, sounds fun!
15:11:27 <sinelaw> what platform
15:11:44 <blackh> It's really fun! I'm doing it on the iPhone.  Just doing terrain-related stuff at the moment.
15:12:00 <sinelaw> blackh, what sort of game is it?
15:12:05 <fax> monochrom they aren't analogies though
15:12:22 <blackh> sinelaw: An action RPG called BloodKnight.
15:12:23 <fax> I meant actual categories and functors, just get really visual ones first of al
15:12:54 <fax> I think that would help to understand the ones that are bit abstract like slice categorie?
15:12:58 <[swift]_> blackh: oh wow! i had thought you couldn't build iphone apps with haskell
15:13:29 <sinelaw> blackh, screenshots?
15:13:53 <blackh> [swift]_: You definitely can.
15:14:09 <Cale> blackh: Are you going to port it to any other platforms?
15:14:26 <blackh> sinelaw: We're generating mystique by being mysterious at the moment.
15:14:40 <sinelaw> blackh, sounds mystical
15:14:45 <trofi> is code.haskell.org alive?
15:14:49 <blackh> Cale: Yes - lots of small platforms.  Will get into LLVM back ends and stuff when we have time.
15:14:51 <sinelaw> blackh, what libs are you using?
15:15:14 <sinelaw> blackh, for game-related stuff (reactivity, graphics, etc)
15:15:19 <[swift]_> blackh: that's really exciting news. i see mention on the haskell wiki's iphone of using jhc to cross compile for iphone; is that what you used?
15:15:46 <[swift]_> haskell wiki's iphone page i mean
15:16:09 <Cale> blackh: It would be nice to be able to play it on Linux ;)
15:16:57 <blackh> [swift]_: We developed a cross compiler based on ghc-6.10.2 without a proper code generator, which you can download and play with to write iPhone apps.
15:17:45 <fax> "The exterior derivative is natural. If ƒ: M → N is a smooth map and Ωk  is the contravariant smooth functor that assigns to each manifold the space of k-forms on the manifold, then the following diagram commutes"
15:17:59 <fax> Ω^k is a Functor
15:18:07 <copumpkin> fancy
15:18:26 * copumpkin has no idea what all that means :)
15:18:29 <sinelaw> fax funny i'm just trying to understand about topological and measurable spaces
15:18:38 <fax> http://en.wikipedia.org/wiki/File:Exteriorderivnatural.png
15:18:40 <mauke> why is there Ωⁿ, but no ^k in unicode?
15:18:49 <[swift]_> blackh: is your cross compiler public then?
15:18:52 <mauke> or is it just me
15:19:12 <copumpkin> there should be a superscript modifying character
15:19:21 <copumpkin> so you don't have to have predefined superscripts
15:19:54 <fax> sinelaw; does this have something to do with that?
15:20:03 <sinelaw> fax, errrrr
15:20:08 <sinelaw> it's math
15:20:11 <fax> lol
15:20:13 <sinelaw> :D
15:20:18 <copumpkin> maff
15:20:21 * Alpounet hesitates to get Spivak's books
15:21:03 * Alpounet actually sadly looks at /r/mathbooks/
15:22:27 * sinelaw has just taken two books from the univ. library with no hope of ever getting past the first few pages
15:22:44 <Alpounet> sinelaw, which ones ?
15:23:30 <ivanm> Alpounet: ones in swahili? :p
15:23:31 <sinelaw> "Real and Complex Analysis" / Rudin, and "Digital Processing of Random Signals" / Porat
15:23:33 <sinelaw> Alpounet, ^^
15:24:29 <sinelaw> ivanm, for me it's nearly the same as swahili :P
15:24:30 <ivanm> heh
15:26:20 <michael|> Those sound fun. Why no hope of going beyond the first few pages?
15:26:21 <michael|> Ah, I suppose that answers it :P
15:26:21 <Alpounet> I have heard Rubin's is great
15:26:21 <[swift]_> haha i have that exact Rudin
15:26:21 <[swift]_> was used in my analysis class
15:26:21 <[swift]_> not a bad book, though fairly dense
15:27:09 <fax> sinelaw, by the way if that's the same rudin book I think it is you can skip right to chapter 4
15:27:10 <altmattr> what unicode characters are allowed in function names (if any)?
15:27:10 <Alpounet> ivanm, haha
15:27:10 <fax> (this is a really fast way to get past the first few pages!)
15:27:11 <SubStack> > let mèöω = 100 in mèöω
15:27:11 <lambdabot>   100
15:27:11 <altmattr> SubStack: cool
15:27:12 <altmattr> but I want some symbols :)
15:27:12 <SubStack> > let (→) = (+) in 5 → 10
15:27:12 <altmattr> > let ☆ = 100 in ☆
15:27:12 <lambdabot>   <no location info>: parse error on input `→'
15:27:12 <lambdabot>   <no location info>: parse error on input `☆'
15:27:13 <SubStack> oh lame that works on my ghci
15:27:30 <mauke> > (\x → x) 42
15:27:31 <lambdabot>   42
15:27:35 <mauke> bam!
15:27:51 <SubStack> o_O
15:28:04 <sinelaw> actually my great-uncle can speak swahili! and zulu.
15:28:04 <sinelaw> he's the coolest guy on earth.
15:28:06 <sinelaw> he was a national champion in both chess AND bowling
15:28:06 <sinelaw> that's insane.
15:28:07 <sinelaw> michael|, 1. no time, 2. my math background is not strong enough to make the reading easy
15:28:07 <sinelaw> [swift], how is it?
15:28:08 <sinelaw> i'm on page 17
15:28:09 <sinelaw> every page so far took me about half an hour :(
15:28:11 <sinelaw> well except the few first ones
15:28:11 <sinelaw> fax, why?
15:28:12 <sinelaw> fax, aren't the first 3 important?
15:28:19 <sinelaw> they look like prerequisites
15:28:22 <blackh> [swift]_: Yes, it's completely open source (BSD3 licence): http://projects.haskell.org/ghc-iphone/
15:28:23 <SubStack> > (\☃ ⁂ -> ☃ * 2 + ⁂) 5 10
15:28:24 <lambdabot>   <no location info>: parse error on input `⁂'
15:28:34 <ivanm> SubStack: stop showing off!
15:28:39 <SubStack> :p
15:28:47 <[swift]_> blackh: that's fantastic; thank you so much!
15:28:52 <ivanm> blackh: well, yes, because it has to be: wasn't it originally proprietary until they got it working?
15:28:57 <ivanm> and then people complained...
15:29:27 <altmattr> >let ҉ = undefined in ҉
15:29:43 <[swift]_> sinelaw: like a lot of advanced math books, its very dense; you have to read each page carefully and think deeply about what's presented until you understand it. (sometimes working out proofs yourself helps) that said, if you approach it in that way, it's a pretty good book.
15:29:51 <altmattr> >let ҉ =  0in ҉
15:30:17 <[swift]_> sinelaw: half an hour a page is very reasonable
15:30:32 <sinelaw> [swift]_, yeah for some, it was much more.
15:30:49 <sinelaw> [swift], so how will i ever get through it? or even to chapter 2? it's so long
15:30:55 <sinelaw> :( no time :(
15:30:59 <fax> use my approach
15:30:59 <fax> :D
15:31:00 <[swift]_> sinelaw: well it helps to have a class to force you to do it =)
15:31:51 <sinelaw> [swift]_, i don't. my class is about statistical signal processing
15:31:57 <blackh> ivanm: Originally it was proprietary and not released, then Ryan decided to release it and put some oddball licence on it, and then he got rid of the licence.  He had some reason which I never understood.  He went to law school and wanted to do some hacking.  I think that's the real reason. :)
15:32:08 <sinelaw> which depends on knowledge in analysis
15:32:15 <ivanm> blackh: damn lawyers...
15:37:13 <sinelaw> bah.
15:37:24 <Becquerel> agreed
15:37:48 <sinelaw> Alpounet, i think i have a semantic model. except for one thing
15:37:58 <Alpounet> yeah, what ?
15:38:04 <sinelaw> Alpounet, outputs, IOProcessor a ()
15:38:29 <Alpounet> what's the problem ?
15:38:33 <wto> @faq could you do something useful with Haskell?
15:38:38 <sinelaw> Alpounet, what's the model for that?
15:38:41 <sinelaw> @bot
15:38:41 <wto> :/
15:38:49 <Botje> you killed \bot! you bastard!
15:38:52 <sinelaw> > 1+1
15:38:53 <wto> :/
15:38:53 <wto> :(
15:38:57 <sinelaw> :_(
15:39:10 <Alpounet> sinelaw, what defines "the model" here for a processor ?
15:39:19 <sinelaw> Alpounet, sec.
15:39:22 <yitz> > let x ☃ y = x*2+y in 5 ☃ 10
15:39:24 <ivanm> lambdabot replied to me 4 minutes ago... >_>
15:40:07 <yitz> hmm, might have gotten washed  away in that netsplit. :(
15:40:16 <yitz> lispy: ping
15:40:20 <copumpkin> maybe just catching up with the massive joins
15:40:25 <lispy> yitz: hi
15:40:30 <copumpkin> lithpy
15:40:40 <lambdabot> The answer is: Yes! Haskell can do that.
15:40:40 <lambdabot> :)
15:40:40 <lambdabot>   2
15:40:41 <lambdabot>   20
15:40:41 <yitz> lispy: hi! is \bot still on your box?
15:40:50 <copumpkin> @botsmack
15:40:51 <lambdabot> :)
15:40:57 <lispy> yitz: yup, but Cale is the one who runs it there :)
15:41:19 <yitz> lispy: ok. nm, she's back. got a little muddled by the netsplit i guess.
15:41:24 <lispy> cool
15:41:42 <ivanm> copumpkin: stop being mean!
15:41:49 <sinelaw> @smack copumpkin
15:41:49 * lambdabot locks up copumpkin in a Monad
15:41:52 <benmachine> @bothug
15:41:52 <lambdabot> Unknown command, try @list
15:41:55 <benmachine> :(
15:41:58 <copumpkin> lucky it's a Copointed Monad
15:42:02 * copumpkin extracts himself
15:42:03 <sinelaw> cowhat?
15:42:15 <jmcarthur> sinelaw: what is your semantic model?
15:42:19 <sinelaw> cowhat cois coa copointed comonad?
15:42:28 <yitz> > let x ☃ y = x*2+y in 5 ☃ 10 -- SubStack
15:42:29 <lambdabot>   20
15:42:32 <copumpkin> sinelaw: Copointed means a functor that supports f a -> a
15:42:41 <ddarius_> All comonads are copointed.
15:42:42 <sinelaw> jmcarthur, sec, finishing a short documentation round here
15:42:42 <copumpkin> (pointed is a -> f a, like return in Monad)
15:42:49 <copumpkin> ddarius: yep, but not all monads
15:42:49 <sinelaw> attempt, perhaps
15:42:56 <fax> algebra = copointed ??
15:43:19 <benmachine> copumpkin: surely only pumpkin can be extracted from a copointed monad
15:43:20 <ddarius> fax: No.
15:43:24 <benmachine> you'd just put yourself in one
15:43:59 <b0fh_ua> Guys, with Text.ParserCombinators.ReadP how do I create parser, which matches text, a colon - and returns text up to the end of line in singleton list?
15:44:09 <copumpkin> in the sense of type Algebra f a = f a -> a, yep
15:44:20 <ddarius> copumpkin: No.
15:44:23 <jmcarthur> nope
15:44:35 <ddarius> An algebra isn't natural in its argument.
15:44:37 <jmcarthur> if it was Algebra f = forall a . f a -> a, sure
15:44:44 <copumpkin> ah, fair enough
15:44:58 <b0fh_ua> this one: http://pastebin.com/WPqdSHuU -> returns a list with all possible ways of parsing
15:45:04 <chrisdone> woo zurich! =)
15:45:17 <chrisdone> that haskell got expensive taste
15:45:20 <b0fh_ua> I think that I could tell it about end of line somehow - but not sure how
15:45:25 <sinelaw> chrisdone, what
15:46:05 <chrisdone> sinelaw: zurich is expensive!
15:46:16 <sinelaw> oh i'm not surprised
15:46:35 <chrisdone> sinelaw: me neither, but I love to sing that haskell got expensive taste
15:46:59 <tsou> Is there a way to use CmdArgs, but disable the --quite and --verbose flags?
15:47:12 <copumpkin> fucking hell
15:47:18 <chrisdone> sinelaw: was talking about opencv today with hugodaniel. cool stuff
15:47:43 <ivanm> copumpkin: agreed
15:47:54 <ivanm> what's with all these netsplits over the past couple of days
15:47:56 <ivanm> ?
15:48:04 <chrisdone> "new servers"?
15:48:05 <theddy5151> anyone using hopengl/glut see errors like in: http://pastie.org/876356
15:48:07 <theddy5151> ?
15:48:13 <sinelaw> chrisdone, cool what about?
15:48:26 <sinelaw> omg i have users
15:48:30 <chrisdone> ivanm: lilo's ghost
15:48:40 <sinelaw> LOLZ MY LIBZ R UZED
15:49:00 <copumpkin> *LULZ
15:49:05 <chrisdone> sinelaw: well I'd like to hack on it some time. you best be coming to zurihac or else
15:49:07 <sinelaw> sorry, i'm a noobz
15:49:47 <sinelaw> chrisdone, zurihac? heh. how about beershebahac
15:50:04 <sinelaw> prepare your sand goggles
15:50:05 <chrisdone> sinelaw: you heard me!!
15:50:29 <sinelaw> chrisdone, where's your usual location?
15:50:38 <chrisdone> reet I'm off
15:50:51 <chrisdone> sinelaw: england
15:50:51 <sinelaw> k
15:50:57 <sinelaw> chrisdone, ah not so far.
15:51:18 <m3ga> ivanm: i added myself to the AusHac2010 page
15:51:24 <ivanm> m3ga: \o/
15:52:40 <blackh> ivanm, m3ga: I'm coming to AusHac2010 now, too!
15:52:52 <m3ga> awesome!
15:52:52 <ivanm> blackh: \o/
15:52:55 <ivanm> add your details!
15:53:02 <ivanm> Axman6: methinks we hav a quorum :p
15:53:02 <m3ga> he already has
15:53:05 <ivanm> *have
15:53:12 <ivanm> oh? must have forgotton...
15:53:28 <Alpounet> sinelaw, haha, it better be working *very well* when released
15:53:40 <ivanm> 16-18 july (fri-sun) work for you two?
15:54:08 <sinelaw> hey Peaker_
15:54:44 <sinelaw> what's up with freenode
15:56:31 <ivanm> sinelaw: good question
15:56:47 <ivanm> maybe we should ask in #freenode ?
16:00:08 <kniu> HOLY NETSPLIT, BATMAN
16:00:47 <kniu> netsplits always seem more impressive from the disconnected node's point of view.
16:01:35 * ivanm is impressed enough not being on the disconnected node
16:01:35 <sinelaw> they say they're being ddos'ed
16:01:41 <ivanm> and by "impressed" I mean "irritated"
16:01:45 <ivanm> sinelaw: :o
16:01:48 <ivanm> copumpkin: cut that out!
16:01:49 <ivanm> :p
16:01:54 <sinelaw> you mean, cocut
16:03:11 <ivanm> cocut cothat cout?
16:03:34 <sinelaw> cokay.
16:04:05 <sinelaw> @type (&&&)
16:04:06 <lambdabot> forall (a :: * -> * -> *) b c c'. (Arrow a) => a b c -> a b c' -> a b (c, c')
16:04:41 <m3ga> netsplits are only impressive in large channels
16:07:12 <copumpkin> ivanm: :(
16:10:40 <ivanm> copumpkin: you're just annoyed that I uncovered your sikrit plot! :p
16:10:46 <copumpkin> :'(
16:10:57 <ivanm> see? proof!
16:11:08 <DigitalKiwi> his skirt plot?
16:11:09 <sinelaw>  i'm reading my own report and can't understand it
16:11:10 <sinelaw> :(
16:11:18 <ivanm> DigitalKiwi: "sikrit"
16:11:19 <sinelaw> neurons degrading
16:11:33 <ivanm> can't you read lol?
16:11:44 <ivanm> (as in the language lolcatz use, not saying lol at you)
16:11:46 <DigitalKiwi> can't you spell, lol?
16:12:14 <DigitalKiwi> what's a lolcat?
16:12:22 <copumpkin> @quote moarphisms
16:12:23 <lambdabot> tensorpudding says: lolcategory demands moarphisms
16:12:37 <ivanm> DigitalKiwi: http://en.wikipedia.org/wiki/Lolcatz
16:12:44 <sinelaw> ivanm, trying to read what i wrote here http://www.ee.bgu.ac.il/~noamle/_downloads/gaccum.pdf
16:12:53 * ivanm passes
16:13:00 <sinelaw> :) fair enough.
16:13:05 <ivanm> sinelaw: I'm avoiding reading papers; why would I want to read another one? :p
16:13:17 <sinelaw> cofair
16:13:22 <Mathnerd314> grrr... why can I never define recursive types in terms of synonyms of types with type parameters?
16:13:39 <copumpkin> synonyms are pretty inflexible
16:13:46 <DigitalKiwi> oh god
16:13:48 <DigitalKiwi> my eyes
16:13:49 <copumpkin> Mathnerd314: you generally have to use a newtype to do aynthing interesting
16:13:52 <ivanm> heh
16:14:15 <Mathnerd314> DigitalKiwi: what's wrong with your eyes?
16:14:40 <DigitalKiwi> reading about these 'lolcats' has destroyed all will to live
16:14:53 <sinelaw> no, netsplits destroy all will to live
16:14:55 <Alpounet> they tried to get something off a monad... thus the netsplit.
16:19:54 <mreh> how to add two tuples piece wise?
16:19:58 <mreh> can it be done with arrows?
16:20:27 <sinelaw> @pl (\(a,b) (c,d) -> (a+c, b+d))
16:20:28 <lambdabot> uncurry (flip flip snd . (ap .) . flip flip fst . ((.) .) . (. (+)) . flip . (((.) . (,)) .) . (+))
16:20:30 <sinelaw> ooooooh
16:20:36 <sinelaw> mreh, yes it can. wait.
16:20:45 <mreh> holy... hell
16:20:53 <copumpkin> mreh: not terribly easily, nope
16:21:21 <mreh> better done as two separate calcs and put together with a &&&
16:21:21 <benmachine> :t ((+) *** (+))
16:21:22 <benmachine> oh :/
16:21:22 <lambdabot> forall b b'. (Num b, Num b') => (b, b') -> (b -> b, b' -> b')
16:21:26 <mreh> no :)
16:21:26 <blackh> Umm (uncurry (+)) *** (uncurry (+))
16:21:28 <mreh> I tried that
16:21:28 <sinelaw> mreh, i think: (uncurry (+)) *** (uncurry (+))
16:21:32 <sinelaw> yip
16:21:41 <mreh> oh... of course
16:21:46 <sinelaw> @type (uncurry (+)) *** (uncurry (+))
16:21:47 <lambdabot> forall a a1. (Num a, Num a1) => ((a, a), (a1, a1)) -> (a, a1)
16:21:51 <mreh> :)
16:21:59 <sinelaw> err
16:22:01 <Alpounet> hey
16:22:03 <Alpounet> that's wrong
16:22:04 <benmachine> hmm
16:22:04 <benmachine> that's not really what I want
16:22:07 <sinelaw> it's wrong.
16:22:07 <mreh> @type uncurry (uncurry (+)) *** (uncurry (+))
16:22:08 <lambdabot> forall b c a. (Num (b -> c), Num a) => (((b -> c, b -> c), b), (a, a)) -> (c, a)
16:22:20 <mreh> @type curry (uncurry (+)) *** (uncurry (+))
16:22:21 <lambdabot> forall b a. (Num b, Num a) => (b, (a, a)) -> (b -> b, a)
16:22:23 <Alpounet> @djinn (a, b) -> (a, b)
16:22:23 <lambdabot> f a = a
16:22:26 <Alpounet> heh
16:22:33 <copumpkin> lol
16:22:33 <Alpounet> @djinn (a, b) -> (a, b) -> (a, b)
16:22:33 <lambdabot> f _ (a, b) = (a, b)
16:22:38 <mreh> lol
16:22:43 <copumpkin> it doesn't know anything about a and b
16:22:44 <sinelaw> @type (uncurry (+)) &&& (uncurry (+))
16:22:45 <lambdabot> forall a. (Num a) => (a, a) -> (a, a)
16:22:47 <sinelaw> there
16:22:56 <sinelaw> mreh, ^^^^
16:23:03 <copumpkin> sinelaw: nope
16:23:07 <mreh> nope
16:23:10 <sinelaw> nop?
16:23:11 <jmcarthur> there's not a simple combinator for it
16:23:20 <sinelaw> hmmm
16:23:22 <benmachine> what the hell
16:23:26 <sinelaw> ah nope.
16:23:31 <mreh> well, I'll just do it another way
16:23:32 <benmachine> I just got a page worth of messages in a single second
16:23:37 <jmcarthur> me too
16:23:41 <copumpkin> hot
16:23:43 <Zach_the_Lizard> hello all
16:23:55 <jmcarthur> :t \a b -> ($ fst b)***($ snd b) $ ((+)***(+)) a
16:23:56 <lambdabot> forall b b'. (Num b, Num b') => (b, b') -> (b, b') -> (b, b')
16:24:05 <jmcarthur> @pl \a b -> ($ fst b)***($ snd b) $ ((+)***(+)) a
16:24:05 <lambdabot> flip (ap ((***) . flip id . fst) (flip id . snd)) . ((+) *** (+))
16:24:10 <mreh> lol
16:24:22 <benmachine> @pl \(a, b) (c, d) -> (a + b, c + d)
16:24:23 <lambdabot> uncurry (flip flip snd . (ap .) . flip flip fst . ((.) .) . flip flip (+) . (((.) . (.) . (,)) .) . (+))
16:24:27 <benmachine> right.
16:24:38 <Alpounet> benmachine, yours is the trivial one.
16:24:51 <jmcarthur> mreh: there's also the vector-space package which has that defined for tuples among other things
16:24:57 <jmcarthur> as (^+^)
16:25:06 <benmachine> Alpounet: there is nothing trivial about that monstrosity :P
16:25:23 <fergie> How do I make a show instance for a function?
16:25:26 <copumpkin> :t uncurry (***) . (first (+)) . (second (+))
16:25:27 <lambdabot> forall c c'. (Num c, Num c') => (c, c') -> (c, c') -> (c, c')
16:25:34 <Alpounet> benmachine, yeah, it was sarcastic :p
16:25:41 <jmcarthur> :t uncurry (***)\
16:25:42 <lambdabot> parse error on input `\'
16:25:43 <jmcarthur> :t uncurry (***)
16:25:44 <lambdabot> forall (a :: * -> * -> *) b c b' c'. (Arrow a) => (a b c, a b' c') -> a (b, b') (c, c')
16:25:48 <Botje> fergie: what would it do?
16:25:51 <jmcarthur> huh nice
16:26:14 <jmcarthur> :t (***)
16:26:15 <lambdabot> forall (a :: * -> * -> *) b c b' c'. (Arrow a) => a b c -> a b' c' -> a (b, b') (c, c')
16:26:16 * ivanm waves idly in Zach_the_Lizard's general direction
16:26:22 <benmachine> :t ((+) *** (+))
16:26:23 <lambdabot> forall b b'. (Num b, Num b') => (b, b') -> (b -> b, b' -> b')
16:26:37 <copumpkin> @type uncurry (***) . ((+) *** (+))
16:26:38 <lambdabot> forall c c'. (Num c, Num c') => (c, c') -> (c, c') -> (c, c')
16:26:42 <ivanm> @ask Axman6 should we make the dates "official" as 16-18 July then?
16:26:42 <lambdabot> Consider it noted.
16:26:56 <copumpkin> @type uncurry (***) . (join (***) (+)) -- will force the types to be the same
16:26:57 <lambdabot> forall b. (Num b) => (b, b) -> (b, b) -> (b, b)
16:27:11 <benmachine> > uncurry (***) . (join (***) (+)) $ (1, 2) (3, 4)
16:27:13 <fergie> Botje: I have a data type like: type TypeName = (String->Bool)
16:27:14 <lambdabot>   Couldn't match expected type `t -> (b, b)'
16:27:15 <lambdabot>         against inferred type `(...
16:27:24 <copumpkin> benmachine: can't use dollars there
16:27:32 <benmachine> aaargh
16:27:34 <Alpounet> damn
16:27:35 * benmachine stabs freenode
16:27:36 <copumpkin> it will try to apply the tuple
16:27:44 <fergie> Botje: and I want to get a Show instance for this type
16:27:54 <fergie> Botje: maybe to print out the function as I would write it
16:28:00 <benmachine> copumpkin: oh, yeah
16:28:05 <benmachine> > (uncurry (***) . (join (***) (+))) (1, 2) (3, 4)
16:28:07 <lambdabot>   (4,6)
16:28:09 <benmachine> whee
16:28:15 * benmachine hugs copumpkin 
16:28:20 <copumpkin> I'm pretty sure anyone trying to read that code will murder you
16:28:23 <Botje> > (*3)
16:28:24 <lambdabot>   {-3->-9;-2->-6;-1->-3;0->0;1->3;2->6;3->9}
16:28:33 <takeout> exit
16:28:34 * benmachine hugs copumpkin anyway
16:28:37 <Botje> fergie: you can't recover the function name (or body) from the function value
16:28:37 <copumpkin> benmachine: and that includes suicide when you want to read it tomorrow :P
16:28:40 <Botje> sorry
16:28:53 <copumpkin> benmachine: hah, I think I saw that somewhere a while ago
16:28:53 * benmachine continues hugging unperturbed
16:29:16 <sshc> netsplit?
16:29:21 <copumpkin> sshc: you think?
16:29:32 <benmachine> general netfail
16:29:38 <Botje> fergie: with a bit of hackery you can make show return the type of the function.
16:29:42 <sshc> copumpkin: I do think.  Did those people disconnect because of a netsplit?
16:29:42 <Alpounet> copumpkin, :D
16:29:49 <copumpkin> sshc: yes :P
16:29:55 <fergie> Botje: what do you mean "show return"?
16:29:55 <benmachine> no they ping timedout
16:30:02 <bnjmn> has anyone tried attoparsec?
16:30:07 <danderson> o/
16:30:09 <jmcarthur> somebody has
16:30:12 <danderson> attoparsec is neat.
16:30:17 <danderson> and bloody fast :)
16:30:23 <sinelaw> i'd like to know if there are any specific funcs in opencv people would be more likely to want me to bind to
16:30:33 <sinelaw> and warp functionally
16:30:41 <Botje> you could write an instance of Show such that 'show head' evaluates to "[()]->()", i think
16:30:41 <danderson> bnjmn: did you have a specific question?
16:30:53 <Botje> but i'm not even close to a type hacker person
16:30:59 <bnjmn> just curious in general about it
16:31:01 <jmcarthur> sinelaw: sounds like operational thinking. you should bind to whatever functions are necessary to implement your model :)
16:31:21 <sinelaw> jmcarthur, that's not what i meant
16:31:29 <jmcarthur> sinelaw: i'm just messing with you
16:31:35 <sinelaw> ah.
16:31:40 <danderson> bnjmn: it's nice and fast if you have text-based protocols to parse (ie. what you'd use Parsec for)
16:31:45 * sinelaw has been messed 
16:31:54 <bnjmn> yah i'm wanting to parse a few protocols, http at first
16:31:57 <fergie> Botje: thanks. I think I'm just going to have to mess around wiht some stuff
16:31:59 <danderson> and the strict ByteString input combined with the continuation API lets you nicely control the memory usage, which is very nice
16:32:03 <jlouis> danderson: you know how a binary ditto will fare?
16:32:18 <danderson> jlouis: I'm doing that right now, parsing IP datagrams and BGP packets with it
16:32:24 <jlouis> a rather simple binary ditto (bittorrent) :P
16:32:34 <jlouis> BGP outclasses it by far
16:32:45 <danderson> it's slightly clunkier, mostly because some very basic parsers are still missing
16:32:52 <danderson> stuff like "parse a 32 bit big-endian int"
16:33:18 <danderson> I've implemented a couple of those if you need to steal them
16:33:22 <jlouis> danderson: thats about what I need
16:33:33 <DigitalKiwi> is there a good ncurses haskell library?
16:33:37 <jlouis> Axman6: ^^ :)
16:33:51 <danderson> that said, at Zurihac this weekend, one of the projects is to update Data.Binary, notably to have a continuation-based API for speed and ease of use for parsing partial input
16:34:18 <danderson> at that point. Get/Put might turn out to be better than Parsec/Attoparsec for binary protocols
16:34:20 <ivanm> DigitalKiwi: hcurses IIRC
16:34:37 <bos> depends.
16:34:48 <bos> Data.Binary still has a lazy bytestring API, which is quite expensive.
16:35:09 <DigitalKiwi> i see two in aur
16:35:11 <DigitalKiwi> aur/haskell-hscurses 1.3.0.2-2 (15) NCurses bindings for Haskell
16:35:11 <DigitalKiwi> aur/haskell-nanocurses 1.5.2-2 (0) Simple Curses binding
16:35:18 <jlouis> Well, I am digging in another part of the code right now. But a combination of event/iteratee/{attoparsec,Data.Binary} is on the todo list
16:35:22 <benmachine> I've used hscurses before
16:35:28 <benmachine> it was missing something obscure but mostly okay
16:35:29 <ivanm> bos: if I were to write a pretty-printing library that constructed a Text value rather than String, would you recommend Strict or Lazy Text values?
16:35:32 <Alpounet> sinelaw, have you implemented the minimal feature-set related to camera caoture ?
16:35:32 <Alpounet> *capture
16:35:48 <sinelaw> Alpounet, yes. you can capture.
16:35:48 <danderson> bos: that's part of the conversion, AIUI. Basically graft a variant of Attoparsec.Internal for Get.
16:35:59 <sinelaw> Alpounet, i've added capture from video files.
16:36:01 <bos> danderson: cool.
16:36:11 <Mathnerd314> hmmm... how do I use regexp's in haskell?
16:36:27 <bnjmn> Get/Put?
16:36:28 <danderson> but we'll see. I'm mildly confused by the project brief, which could make Data.Binary unsuitable for what I need
16:36:34 <copumpkin> Mathnerd314: they're not very common, but look on hackage
16:36:37 <bos> what do you need?
16:36:37 <danderson> bnjmn: Data.Binary.{Get,Put}
16:36:40 <meanburrito920_> Mathnerd314: Text.Regex
16:36:42 <DigitalKiwi> does anyone know of a haskell torrent library? :)
16:36:56 <meanburrito920_> though how good it is is questionable
16:37:14 <meanburrito920_> DigitalKiwi: http://github.com/jlouis/haskell-torrent
16:37:17 <danderson> bos: very fast parsing of IP datagrams and BGP packets. I'm currently using attoparsec for the parsing part, and probably either binary or cereal for the serialization part
16:37:19 <meanburrito920_> not really a lib
16:37:24 <meanburrito920_> but feel free to hack on it
16:37:30 <danderson> but being able to use just the one library for going both ways feels slightly cleaner.
16:37:43 <jlouis> DigitalKiwi: what are you looking for, more specifically?
16:37:44 <bos> danderson: cereal serializes faster than binary AFAIK
16:37:52 <sinelaw> crap i think my webcam got insulted. stopped working since i added capture from video files
16:37:55 <bos> but cereal doesn't have a resumable parser
16:38:02 <bnjmn> are there any resources for parsing specifically concerned about network parsing, so e.g. memory use, speed, and incremental are all important?
16:38:05 <DigitalKiwi> oh jlouis you look familiar ;D
16:38:08 <Alpounet> danderson, I hope they'll be a sort of ZuriHac report for those of us who haven't been able to attend it
16:38:14 <bos> bnjmn: no
16:38:20 <danderson> bos: did you get my patchbomb email for attoparsec by the way? Not sure if my local mta forwarded it right.
16:38:21 <Zach_the_Lizard> does anyone know of an easy way to test a basic binary tree's speed?
16:38:31 <bos> danderson: i did.
16:38:33 <Zach_the_Lizard> I am rather new to Haskell, but have written a basic tree library
16:38:46 <copumpkin> Zach_the_Lizard: criterion!
16:38:50 <copumpkin> @hackage criterion
16:38:51 <lambdabot> http://hackage.haskell.org/package/criterion
16:38:51 <ivanm> Zach_the_Lizard: in what sense?
16:38:54 <sinelaw> danderson, is there a webpage for zurihac?
16:39:02 <danderson> bnjmn: if you're parsing, basically: use attoparsec, feed input to it, get data out. Don't forget to manage timeouts to kill "death by a thousand idle connections" attacks
16:39:04 <DigitalKiwi> jlouis: my next major project might be an ncurses torrent program and i'm trying to decide what to write it in >.>
16:39:05 <ivanm> Zach_the_Lizard: you could compare it to other implementations of binary trees
16:39:25 <danderson> attoparsec takes care of the performance and partial input issues, if you follow the documented guidelines
16:39:27 <meanburrito920_> DigitalKiwi: you could to an ncurses frontend to haskell-torrent :)
16:39:28 <Zach_the_Lizard> ivanm: That would be a good idea
16:39:31 <sinelaw> doh! shouldn't have updated my libv4l
16:39:35 <bnjmn> it seems like a lot of parsing research is oriented around programming languages instead of network protocols, and assume that you have all the input already
16:39:36 <sinelaw> now webcam doesn't work again
16:39:45 <Zach_the_Lizard> copumpkin: thanks, I'll check that out
16:40:00 <danderson> bos: cool. No specific rush, it's just good to know my SMTP forwarder doesn't blackhole emails.
16:40:14 <jlouis> DigitalKiwi: My current UI sucks dead moose through bent straws, so there is a lot of possible improvement there
16:40:18 <bnjmn> has anyone ever heard of GLL (generalized LL) parsing? trying to find some papers on it
16:40:29 <meanburrito920_> jlouis: what UI :P
16:40:45 <jlouis> meanburrito920_: start the crap, type 'help' :)
16:40:52 <bos> danderson: i looked over the patch already, and i'm not actually going to take it.
16:41:09 <jlouis> only responds to "show" and "quit" at the moment
16:41:10 <bos> danderson: but i'll implement something suitable.
16:41:10 <jmcarthur> Zach_the_Lizard: http://www.serpentine.com/blog/2009/09/29/criterion-a-new-benchmarking-library-for-haskell/  example of using criterion
16:41:16 <danderson> bos: oh? Why?
16:41:30 <bos> danderson: i don't like the way it's implemented.
16:41:43 <bos> danderson: and i'll move the code to a .Binary submodule
16:42:11 <danderson> bos: fair 'nuf I guess. Anything specific that I can improve in my code? (As you can probably tell, I'm still quite new to this)
16:42:32 <bos> danderson: i'll give you a code review in email some time in the next few days when time permits, ok?
16:42:41 <danderson> ok, thanks.
16:42:43 <meanburrito920_> yeah i know :) meanburrito920_ == johngunderman
16:42:59 <jlouis> \o/
16:44:09 <Zach_the_Lizard> jmcarthur: that blog post will be very useful
16:44:39 <jmcarthur> Zach_the_Lizard: thank bos :)
16:45:07 <bos> whuh?
16:45:17 <bos> oh right
16:45:21 <jmcarthur> bos: criterion :)
16:45:34 <ivanm> bos: if I were to write a pretty-printing library that constructed a Text value rather than String, would you recommend Strict or Lazy Text values?
16:45:52 <bos> ivanm: totally depends on the use you have in mind.
16:46:00 <bos> ivanm: if they're small strings, it doesn't matter.
16:46:10 <bos> ivanm: if they're gigabytes in size, you inda have to use Lazy.
16:46:22 <ivanm> gigabytes, hopefully not ;-)
16:46:51 <ivanm> if the performance is acceptable, I'm probably going to eventually use Text within graphviz to ensure utf8 is being used
16:46:52 <Alpounet> ivanm, why not ? will it contain your bills or what ?
16:46:59 <Alpounet> heh
16:47:02 <ivanm> Alpounet: ?
16:47:15 <Alpounet> joke, nevermind.
16:47:25 <jlouis> meanburrito920_: nice to make your acquaintance :) I'm slowly working towards getting multiple torrents running in the same program
16:47:46 <danderson> bos: by the way, another use case that crops up fairly often in binary protocols: you often want to run a subparse on a restricted portion of input.
16:47:52 <ivanm> I figured rather than using pretty and having a custom renderer, it might be better to have one that converted everything into Text values straight away rather than lots of little Strings which are then converted into Text
16:48:02 <bos> danderson: yeah, i know
16:48:14 <bos> danderson: i've been doing this stuff a while :-)
16:48:37 <danderson> bos: okay. Just pointing out the itches in attoparsec that I'm hitting while parsing BGP :)
16:48:51 <bos> danderson: i'll get to them real soon
16:49:09 <danderson> I've hacked up a solution for now, but it's definitely not the Right way to do it.
16:50:23 * sinelaw is downgrading libv4l so that his webcam may work.
16:50:34 <bos> danderson: what i have in mind is a "with N P" combinator
16:50:49 <bos> danderson: "run the parser P in N bytes of input"
16:51:12 <copumpkin> oh that sounds nice
16:51:33 <sinelaw> still won't work :[
16:51:59 <danderson> bos: yup, that's essentially what I wrote. But my implementation is just P.take n >> parse p with a few flourishes, which doesn't feel like the correct way of doing it.
16:52:22 <bos> danderson: right, because you want "with" to fail if the parser fails
16:52:33 <bos> danderson: possibly without having consumed any input
16:53:13 <devinus> why does the shootout say java is faster than haskell? http://shootout.alioth.debian.org/u64q/which-programming-languages-are-fastest.php?calc=chart&javasteady=on&ghc=on
16:53:25 <danderson> bos: the failing bit is done. The inner parse propagates the outcome to the outer one. As for not consuming input, I'd say to wrap the whole thing in try if that's desired
16:53:40 <ivanm> devinus: because with the current set of submitted shootoutu programs it _is_ faster?
16:53:56 <blackh> devinus: That's a bug. GHC HQ is working on it.
16:54:01 <devinus> ivanm: i see
16:54:16 * ivanm would have thought that would have been obvious...
16:54:21 <ivanm> blackh: O RLY?
16:54:26 <devinus> blackh: i can't tell if that's sarcasm
16:54:35 <devinus> :)
16:54:39 * ivanm thinks it is
16:54:51 <mreh> @hoogle FRP.Yampa.SF (Event a) (Event a)
16:54:51 <lambdabot> Parse error:
16:54:51 <benmachine> it's true
16:54:51 <lambdabot>   --count=20 "FRP.Yampa.SF (Event a) (Event a)"
16:54:51 <lambdabot>                 ^
16:54:54 <benmachine> it might ALSO be sarcasm
16:54:58 <benmachine> but it's definitely true
16:55:14 <jmcarthur> the shootout is kind of a joke
16:55:33 <ivanm> benmachine: GHC HQ really cares that - in general - the current iterations of the Java programs to the shootout are faster than the GHC ones?
16:55:54 <benmachine> ivanm: GHC HQ cares that haskell isn't as fast as it could possibly be :P
16:56:02 <ivanm> so the general case...
16:56:15 <blackh> I think it would be possible to do better than the shootout.  Make the test programs more complex and make the only requirement that they produce the right output.
16:56:25 <devinus> ivanm: on the bright side, it creams java in terms of memory
16:56:27 <blackh> There are too many arbitrary rules about how you're supposed to do things.
16:56:41 <ivanm> benmachine: in which case, it's that x is faster than GHC even for naive Haskell programs, where x is a compiler/interpreter for any language (except for GHC itself)
16:56:45 <monochrom> Oh, the shootout is still that bad?
16:56:50 <copumpkin> blackh: I agree, but they should make the "state of the art" algorithms public on the spec
16:57:01 <ivanm> monochrom: if people aren't spending day and night nit-picking at it, then yes it will be
16:57:06 <copumpkin> blackh: so you don't give people unfair algorithmic advantages
16:57:08 <ivanm> especially if some other lang is busy nitpicking
16:57:09 <kmc> devinus, languages don't have speed
16:57:14 <kmc> implementations do
16:57:23 <devinus> kmc, of course
16:57:23 <copumpkin> kmc: oh on that note, there was something on reddit the other day
16:57:41 <ivanm> blackh: yeah, isn't one of apps meant to be really bad for haskell because of some arbitrary requirement that requires mutability or something?
16:58:01 <blackh> Yes - one of them must be implemented with a hash table.
16:58:03 <copumpkin> kmc: http://alexgaynor.net/2010/mar/15/languages-dont-have-speeds-or-do-they/
16:58:04 <kmc> are IORefs particularly slow?
16:58:04 <jmcarthur> i think the major requirement should be that the code is considered idiomatic
16:58:07 <kmc> slower than setting a C variable?
16:58:09 <kmc> copumpkin, thanks
16:58:25 <jmcarthur> IORefs are fairly fast as far as i know
16:58:29 <copumpkin> kmc: I don't necessarily agree, but I do think the design of a language imposes bounds on its implementations' speeds
16:58:32 <jmcarthur> probably slower than C vars though
16:58:38 <jmcarthur> barely
16:58:41 <ivanm> blackh: that's the one; everyone knows that hash tables are bad!
16:58:46 <copumpkin> IORefs aren't unboxed
16:58:46 <systemfault> copumpkin: I agree with you
16:58:53 <ivanm> jmcarthur: naive idiomatic or dons idiomatic? :p
16:58:54 <kmc> "For a long time I followed the conventional wisdom, that languages didn't have speeds"
16:58:57 <systemfault> copumpkin: Python being a good example of that
16:58:59 <kmc> i wish that were the conventional wisdom
16:59:06 <copumpkin> systemfault: even more with ruby
16:59:09 <jmcarthur> ivanm: yeah the problem is deciding what is idiomatic
16:59:10 <copumpkin> everything can change at any time
16:59:15 <kmc> does Python impose more of a bound on speed than Javascript or Lua
16:59:19 <ivanm> systemfault: well, pypy is meant to be faster IIRC
16:59:23 <copumpkin> kmc: ruby certainly does
16:59:23 <kmc> because there are some really damn fast tracing JITs for those languages now
16:59:24 <erikc> i also assume that there isnt any good aliasing analysis for IORefs that would give the instruction scheduler a fighting chance
16:59:31 <systemfault> ivanm: Unladen Swallow too...
16:59:33 <kmc> and nothing i've read of the techniques indicates they wouldn't work for Python
16:59:38 <pikhq> kmc: I thought the conventional wisdom was actually "C and C++ are SCREAMING FAST and everything else is SLOWER THAN YOU THOUGHT POSSIBLE". Sadly.
16:59:41 <ivanm> systemfault: IIRC it didn't turn out to be that fast
16:59:49 <kmc> pikhq, yup! we just can't afford to use safe languages
16:59:57 <endojelly> cabal: dependencies conflict: ghc-6.10.4 requires filepath ==1.1.0.2 however
16:59:57 <endojelly> filepath-1.1.0.2 was excluded because ghc-6.10.4 requires filepath ==1.1.0.3
16:59:58 <endojelly> err.
17:00:00 <endojelly> what.
17:00:01 <systemfault> ivanm: Indeed.. because of python itself. (As a language)
17:00:14 * jlouis unsafePerformIOs
17:00:21 <ivanm> endojelly: methinks you installed an extra version of filepath when you shouldn't have
17:00:38 * copumpkin unsafely interleaves his sword with jlouis' torso
17:00:39 <endojelly> ivanm, I can't remember doing that, but I will look
17:00:57 <pikhq> kmc: The amusing irony in this is that C++ coding techniques are somewhat slow. ;)
17:01:05 <jlouis> Where is my tower shield monad?
17:01:17 <copumpkin> jlouis: no can haz, ceiling cat no approev
17:01:21 <kmc> pikhq, you mean like copying every object repeatedly?
17:01:34 <pikhq> Yes.
17:01:41 <Saizan> endojelly: http://www.haskell.org/cabal/FAQ.html#dependencies-conflict
17:01:49 <endojelly> Saizan, thx
17:02:23 <ivanm> Saizan: ooh, didn't know there was a specific FAQ topic on this
17:02:24 <monochrom> Gauss would not care about "this exercise is to test your speed of doing 99 additions! using multiplication is cheating!"
17:02:30 <kmc> copumpkin, that's an interesting article you linked
17:02:31 <kmc> "there's one thing no JIT for Python can do, no matter how brilliant. It can't skip the check if n is an integer, because it can't prove it always will be an integer, someone else could import this function and call it with strings, or some custom type,"
17:02:37 <ivanm> endojelly: it's reasons like these that "cabal upgrade" is disabled ;-)
17:02:43 <kmc> that does not hold with whole-program analysis
17:02:55 <copumpkin> kmc: eval makes that rather difficult
17:02:57 * ivanm thinks that ghc-pkg should register if a library is a boot one or not, so that cabal-install knows not to touch it...
17:02:59 <pikhq> kmc: Silly quote, that. A JIT can do that just fine.
17:03:03 <copumpkin> I guess people could do smart things with dynamic language - eval
17:03:09 <kmc> well, sure, if you use eval everywhere you should expect slow code
17:03:30 <endojelly> ivanm, Saizan, I see, thanks... I indeed have a filepath in my user package db and in the global one (which in my case is just in another place of my home directory %) ) - i will just remove the user one
17:03:41 <jlouis> Gauss had no need for eval
17:04:20 <kmc> but if *most* calls of f come from some nice statically analyzable code, and only a few from some eval nonsense, you can specialize f into two separate functions and compile one nicely
17:04:38 <mreh> my Yampa doesn't make sense, the reactimate signal function is sampling every 30ms, but if I specify the speed of an object in pixels/second it travels 1000 times slower than it should
17:04:40 <kmc> and the point of true JIT is that eval itself can also do this
17:04:56 <kmc> so that a single eval of long-running code is not slower than running it outside eval
17:06:01 <mreh> not exactly 1000 times, but in that order of magnitude
17:09:38 <bnjmn> is attoparsec-iteratee worth looking at?
17:09:56 <monochrom> Yes!
17:10:43 <ivanm> wasn't there the case the other day where someone found a problem with iteratee?
17:10:48 <monochrom> cheap, fast, good, simple, safe, powerful --- pick six!
17:10:54 <ivanm> heh
17:10:58 <Axman6> ivanm: no :(
17:10:59 <lambdabot> Axman6: You have 2 new messages. '/msg lambdabot @messages' to read them.
17:11:15 <ivanm> of course, isn't it really only good for cases where you're doing "low-level" parsing?
17:11:17 <ivanm> Axman6: no what?
17:11:23 <Axman6> i think i'd prefer the weekend before, but i could do it i guess
17:11:26 <copumpkin> NO U
17:11:27 <sinelaw> ok finished updating my docs
17:11:31 <sinelaw> and semantic model ideas
17:11:40 <ivanm> Axman6: *shrug* check with chak, see if the weekend before suits him
17:11:48 <ivanm> he's the only one with a preference
17:11:57 <ivanm> if he's OK with the weekend before, then so am I
17:12:04 <monochrom> attoparsec without iteratee is good for high-level parsing.
17:12:38 <ivanm> copumpkin: just because you yanks decided to remove `u's from perfectly good words like colour doesn't mean the rest of us should...
17:12:43 <monochrom> attoparsec-iteratee brings in attoparsec as dependency, so if you don't want to use the iteratee part it's fine. :)
17:13:02 <ivanm> monochrom: I thought it was more for binary parsing (e.g. network protocol) than text-based parsing
17:13:26 <lament> i used to write colour, now i write color
17:13:27 <ivanm> Axman6: we just need to set a date ASAP for people that need to book tickets from NZ, etc.
17:13:38 <lament> because it looks better, makes more sense, and matches the pronunciation better
17:13:40 <bnjmn> i'm wondering if i can get an attoparsec http parser going as fast as the c-based http parser we have now... i hope so, then i can justify using haskell
17:13:45 * ivanm uses "color" in graphviz only because that's what upstream uses
17:13:53 <DigitalKiwi> lament: obviously you pronounce it wrong
17:14:00 <Axman6> @tell TacticalGrace Do you have any problem with AusHac being organised for the weekend of the 10th of july? if you do, then we'll go with the 16th-18th
17:14:01 <lambdabot> Consider it noted.
17:14:01 <ivanm> bnjmn: did you see bos' attoparsec blog post?
17:14:08 <lament> DigitalKiwi: obviously.
17:14:09 <bnjmn> yes i was just reading it
17:14:19 <DigitalKiwi> http://www.youtube.com/watch?v=1hJQsvoY6VU also, lol
17:14:22 <bnjmn> i need to benchmark our parser
17:14:23 <Axman6> ivanm: yeah
17:14:48 <jeffwheeler> How can I use the HTTP library with base==4? Both the options seems to require 3 or below: http://hackage.haskell.org/package/HTTP
17:14:55 <jeffwheeler> Has it been moved into another package?
17:15:07 <Axman6> lambdabot: so you prefer thru, and thort and tuff?
17:15:25 <Axman6> uh, lament
17:15:38 <lament> what's thort?
17:15:43 <Axman6> ivanm: are you cool with it being friday-sunday?
17:15:45 <jlouis> @vixen so you prefer thru, and thort and tuff?
17:15:46 <blackh> you say potato I say tomato
17:15:46 <lambdabot> let me answer that later, okay?
17:15:47 <Axman6> lambdabot: thought
17:15:51 <ivanm> Axman6: yup
17:16:08 <Axman6> urgh, lament, not lambdabot!
17:16:19 <ivanm> blackh: :s
17:16:34 <ivanm> Axman6: lazy phd student, remember? :p
17:16:36 <lament> Axman6: i'll switch to them once they're mainstream-accepted usage, sure
17:16:43 <monochrom> jeffwheeler: ghc 6.10.x comes with both base 3 and base 4.
17:16:45 <lament> Axman6: i won't be an early adopter though
17:17:03 <lament> (and no, they aren't mainstream yet)
17:17:05 <Axman6> i bloody well hope they don't become mainstream. thru almost is in the US
17:17:06 <jeffwheeler> monochrom: what about 6.12? And won't I be depending on two different versions of base, then?
17:17:25 <lament> Axman6: strunk and white mentioned thru, they predicted bright future for it because "throughway" is too big to fit on a traffic sign
17:17:30 * ivanm still prefers long measurements for definitions of billion, etc.
17:17:33 <monochrom> I don't know about 6.12.
17:17:42 <ivanm> so does 6.12
17:17:50 <ivanm> but it spits out deprecation warnings if you use base-3
17:18:10 <lament> Axman6: i don't really care whether they become mainstream and neither should you, the preference for status quo spelling is silly, spelling changes all the time and i'm sure elizabethan english looks silly to you too despite being correct at some point
17:18:38 <ivanm> thou art a fool, lament
17:18:41 <ivanm> ;-)
17:18:49 <lament> that's not spelling :)
17:18:54 * ivanm thinks elizabethan english sounds cool
17:19:01 <jeffwheeler> ivanm: then does HTTP just need to be updated? Or has it been integrated into something else that I should be using?
17:19:11 * Phyx- thinks yoda's english sounds cool
17:19:14 <ivanm> jeffwheeler: HTTP was never part of GHC
17:19:21 <Remy_> hey guys
17:19:31 <Remy_> can I ask a question about a GHC compiler error I have/
17:19:32 <Remy_> ?
17:19:32 <ivanm> maybe it used to be part of extralibs, however, which has since been replaced with the platform
17:19:33 <jeffwheeler> ivanm: hm, then I guess I'll just accept that it needs an update
17:19:35 <monochrom> You will depend on base-4 and HTTP. This is not a direct dependence on base 3.
17:19:36 <ivanm> Remy_: yup
17:19:44 <kmc> Remy_, yes, if the error is longer than a few lines, put it on hpaste.org and paste a link
17:19:48 <jeffwheeler> monochrom: hmm, alright; thanks
17:19:50 <kmc> also hpaste any relevant code
17:19:57 <ivanm> @hpaste
17:19:58 <lambdabot> Haskell pastebin: http://moonpatio.com/fastcgi/hpaste.fcgi/
17:20:00 <ivanm> Remy_: ^^
17:20:08 <ivanm> lambdabot is using moonpatio again? :/
17:20:15 <Remy_> irc is new for me
17:20:21 <Remy_> okay so we're talking to just each other now
17:20:21 <Remy_> great
17:20:26 <Remy_> right?
17:20:28 <kmc> no
17:20:30 <Remy_> o shit
17:20:34 <kmc> you are talking to the whole world of #haskell
17:20:39 <kmc> which is probably how you should ask your question
17:20:40 <lament> i put on my robe and wizard hat
17:20:58 <Remy_> I need to paste 5 lines of code can I do that here?
17:21:04 <kmc> put it on hpaste, link above
17:21:06 <kmc> then paste the link here
17:21:18 <monochrom> and don't limit it to 5 lines
17:21:37 <monochrom> I have a feeling you will just paste error message but not how to reproduce it.
17:21:46 <monochrom> source code or it didn't happen.
17:21:49 <sinelaw> I wrote integration and differentiation
17:21:53 <sinelaw> need to test it
17:22:11 <yitz> someone should update @hpaste to say hpaste.org
17:22:18 <Phyx-> 01:21:15 < monochrom> source code or it didn't happen. <-- ^_^
17:22:18 <monochrom> @hpaste
17:22:19 <lambdabot> Haskell pastebin: http://moonpatio.com/fastcgi/hpaste.fcgi/
17:22:21 <jeffwheeler> sinelaw: numeric or symbolic? :)
17:22:27 <sinelaw> numeric
17:22:32 <monochrom> @where hpaste
17:22:32 <lambdabot> http://hpaste.org http://moonpatio.com/fastcgi/hpaste.fcgi/
17:22:42 <monochrom> That one is better.
17:22:48 <yitz> closer
17:23:21 <ivanm> yitz: it _was_ updated
17:23:24 <Remy_> Okay so the code and the error it gives are here: http://moonpatio.com/fastcgi/hpaste.fcgi/view?id=8677#a8677
17:23:57 <DigitalKiwi> codepad > hpaste
17:24:02 <ivanm> @ask Cale is there any particular reason why @hpaste has gone back to pointing at moonpatio.com ?
17:24:03 <lambdabot> Consider it noted.
17:24:05 <Remy_> I expected the code to compile but it doesn't. I think the confusion is quite self explanatory
17:24:38 <kmc> Remy_, you probably need a fundep on Stackable
17:24:46 <Remy_> Hmm
17:24:52 <yitz> ivanm: and then?
17:24:54 <Remy_> I'll think about it ^^
17:25:28 <yitz> @where+ hpaste http://hpaste.org/
17:25:29 <lambdabot> I will remember.
17:25:35 <Remy_> Well the compiler error actually mentioned both e and e1
17:25:44 <monochrom> @where hpaste
17:25:44 <lambdabot> http://hpaste.org/
17:25:47 <Remy_> while the should both be e
17:25:49 <kmc> yeah, your "e" is not determined
17:25:51 <Cale> ivanm: Because I never changed it.
17:25:51 <lambdabot> Cale: You have 1 new message. '/msg lambdabot @messages' to read it.
17:26:09 <Cale> ivanm: It's been what it's always been.
17:26:13 <ivanm> Cale: :o I thought it was pointing at hpaste the other day...
17:26:13 <kmc> suppose you had instances (Stackable S A E) and (Stackable S B E) where S,A,B,E are four arbitrary concrete types
17:26:17 <kmc> how does it know which instance to choose?
17:26:21 * ivanm obviously has a bad memory
17:26:25 <monochrom> It is unclear that e should be unique.
17:26:29 <Remy_> okay that's right
17:26:31 <Remy_> thanks
17:26:34 <kmc> a fundep will solve this
17:26:46 <yitz> ivanm: you probably saw @where
17:26:55 <yitz> @url hpaste
17:26:55 <lambdabot> http://hpaste.org/
17:26:57 <yitz> or that
17:27:23 <ivanm> nope, pretty sure I did an @hpaste and it came up with hpaste.org
17:27:53 <benmachine> @where hpaste
17:27:53 <lambdabot> http://hpaste.org/
17:28:04 <benmachine> oh, that is the same thing
17:28:19 <benmachine> oh we did that five seconds ago
17:28:24 <ivanm> @help where
17:28:25 <lambdabot> where <key>. Return element associated with key
17:28:27 <benmachine> oh I am silly
17:28:28 <ivanm> @help url
17:28:28 <lambdabot> url <key>. Return element associated with key
17:28:33 <ivanm> are they the same?
17:28:35 <ivanm> @url lambdabot
17:28:36 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot.html
17:28:37 <yitz> yes
17:28:41 <ivanm> @where lambdabot
17:28:42 <lambdabot> http://www.cse.unsw.edu.au/~dons/lambdabot.html
17:28:42 <benmachine> @commands where
17:28:42 <lambdabot> Unknown command, try @list
17:28:45 <benmachine> @list where
17:28:46 <lambdabot> where provides: where url what where+
17:28:51 <benmachine> @what hpaste
17:28:52 <lambdabot> http://hpaste.org/
17:28:53 <ivanm> oh, right, it was @seen where lambdabot did the "here I am" message
17:29:04 <benmachine> @why hpaste
17:29:04 <lambdabot> Maybe you meant: ghc thx what wn
17:29:08 <benmachine> @thx
17:29:08 <lambdabot> you are welcome
17:29:09 <monochrom> what is wrong with including moonpatio in @where hpaste ?
17:29:11 <Axman6> @url hpaste
17:29:11 <lambdabot> http://hpaste.org/
17:29:16 * benmachine remembers that one
17:29:22 <yitz> @vixen thanks
17:29:22 <lambdabot> you're very welcome!
17:29:44 <Phyx-> @package haddock
17:29:44 <lambdabot> http://hackage.haskell.org/package/haddock
17:29:55 <Remy_> Okay I'm fine for now
17:30:02 <Remy_> thanks a bundle mr kmc
17:30:10 <ivanm> monochrom: mmorrow says people should use hpaste.org
17:30:20 <yitz> @package Phyx-
17:30:20 <lambdabot> http://hackage.haskell.org/package/Phyx-
17:30:26 <ivanm> as it's the official one
17:30:32 <Axman6> ivanm: http://www.haskell.org/haskellwiki/AusHac2010
17:30:38 <ivanm> IIRC, moonpatio was just a paste site whilst mmorrow was developing hpaste2
17:30:44 <kmc> cool Remy_ :)
17:30:53 <Phyx-> yitz: yeah, it only adds the url
17:31:10 <yitz> it makes the most sense. if we ever move it to a different server, no one needs to notice.
17:31:28 <yitz> @wiki Phyx-
17:31:28 <lambdabot> http://www.haskell.org/haskellwiki/Phyx-
17:31:35 <sinelaw> here it comes....
17:31:40 <monochrom> moonpatio has the best up time.
17:31:51 * yitz plugs his ears
17:31:57 <Phyx-> I do wish it would atleast verify whether the links give a 404 before returning it
17:32:19 <sinelaw> hackagebot is dead :(
17:32:27 <sinelaw> yitz, you may unplug
17:32:31 <ivanm> preflex: seen hackagebot
17:32:31 <preflex>  hackagebot was last seen on #haskell 2 hours, 52 minutes and 13 seconds ago, saying: * hackagebot zeromq-haskell 0.2.2 - bindings to zeromq  http://hackage.haskell.org/package/zeromq-haskell-0.2.2 (ToralfWittner)
17:32:33 <yitz> what?
17:32:53 <sinelaw> your ears
17:32:59 <yitz> what? oh.
17:33:13 <Phyx-> hrm... that's odd... the module for where there's documentation on on hackage doesn't exist in the project
17:33:40 * benmachine giggles at yitz
17:33:43 <benmachine> er, with
17:34:01 <sinelaw> Alpounet, jmcarthur updated version with docs describing my new model.
17:34:13 <ivanm> Axman6: added
17:34:48 <Alpounet> sinelaw, nice
17:34:51 <Alpounet> will check it out
17:35:07 <Phyx-> Is there an easy way to parse haddock documentations? I'm looking for a way to map comments to functions/arguments
17:35:23 <sinelaw> Alpounet, specifically IOProcessor is where the model is documented
17:35:24 <ivanm> what do you mean?
17:35:37 <ivanm> haddock parses haddock documentation (using ghc atm)...
17:36:34 <Phyx-> i mean, as a library, I would like to parse a file, extract for each documented method the associated haddoc comment of the function, and the eventual comments of the arguments
17:36:57 <Phyx-> there's a haddock lib I see, but that seems a bit overkill
17:37:21 <benmachine> overkill?
17:37:27 <Alpounet> ok sinelaw
17:37:32 <Alpounet> lemme have a look
17:37:36 <ivanm> it's already there; why not use it?
17:37:51 <Phyx-> benmachine: sure, I'll depend on yet another package :(
17:38:07 <sinelaw> Alpounet, http://www.ee.bgu.ac.il/~noamle/_static/doc/html/cv-combinators/AI-CV-Processor.html#t%3AIOProcessor
17:38:11 <ivanm> what's wrong with that?
17:38:25 <sinelaw> markup is slightly screwed
17:38:46 <ivanm> Phyx-: since most people who care would already have haddock installed...
17:39:01 <Phyx-> ivanm: don't all the object files get linked in? grows the executable by alot no?
17:39:19 <ivanm> get linked in, yes; grows by a lot? that's debateable
17:39:27 <ivanm> also, with 6.12 you have dynamic linking
17:39:34 <Phyx-> only on linux
17:39:43 <Phyx-> afaik
17:39:55 <ivanm> and windows
17:40:04 <Phyx-> really?
17:40:10 <ivanm> yes
17:40:17 <benmachine> the support will come sooner or later
17:40:24 <ivanm> just not OSX, since no-one has stepped up (the IHG is willing to pay) to do it
17:40:36 <benmachine> spending time writing code other people have already written
17:40:40 <benmachine> that way madness lies
17:40:54 <ivanm> benmachine: unless they did a really, really bad job
17:40:59 <jmcarthur> sinelaw: i'll have to look later. making dinner
17:41:12 <Phyx-> well, currently, because of using the ghc apis, I end up with a 37mb exe
17:41:23 <benmachine> ivanm: if you write code and they wrote bad code, it's not code they've already written :)
17:41:34 <benmachine> er, I meant to insert "good" where appropriate
17:41:46 <sinelaw> jmcarthur, bon appetite
17:42:00 <benmachine> Phyx-: then you're already screwed and haddock won't ruin it for you >_>
17:42:14 <Phyx-> benmachine: lol
17:42:15 <ivanm> benmachine: true ;-)
17:42:26 <Phyx-> "Perhaps you haven't installed the "dyn" libraries for package `mtl-1.1.0.2'?" <-- heh
17:42:27 * ivanm looks at language-dot meaningfully
17:42:57 <sinelaw> ivanm, and new conclusions about that?
17:43:02 <ivanm> Phyx-: if you're already using the GHC APIs, then adding haddock won't be much of a problem
17:43:20 <ivanm> sinelaw: nope; I _was_ going to steal their Xml attribute stuff, but decided to write it from scratch
17:43:51 <Phyx-> ivanm: I suppose not, i'll start looking into how to use it :)
17:43:52 <ivanm> I'm adding specific support for all specified attributes; language-dot just generalises (XmlTag, etc.)
17:44:08 <ivanm> Phyx-: especially since haddock uses the ghc apis as well
17:44:40 <Mathnerd314> data Color = Red | Orange | Yellow | Green | Blue | Purple
17:44:42 <Mathnerd314> data PrimaryColor = Red | Orange | Yellow
17:44:43 <Mathnerd314> Error: Multiple declarations of 'Red' :-(
17:45:01 <CSWookie> Hey all.  What's a good project for me to do to learn haskell in all its glory.  I'm thinking of making a web appy thing, because that's what I usually make.  But I don't want to do that if it's not a good fit for haskell.
17:45:09 <Phyx-> ivanm: yeah, I guess I already have the bulk of it already in use
17:45:24 <benmachine> CSWookie: parsers are really nice to write in haskell
17:45:29 <benmachine> in my experience
17:45:33 <ivanm> Mathnerd314: those aren't the primary colours anyway
17:45:33 <benmachine> web apps are fine though
17:45:36 <Phyx-> while I have you folks here, can anyone tell me why doing "cabal test" doesn't do anything? http://phyx.pastebin.com/yfzMcEg5
17:45:41 <ivanm> hint: what does RGB stand for?
17:45:48 <ivanm> Mathnerd314: also, see the colour package on hackage
17:46:24 <kmc> Mathnerd314, is this an exercise in inheritance?
17:46:33 <Mathnerd314> kmc: yes
17:46:33 <kmc> Haskell Does Not Work That Way
17:46:37 <CSWookie> ivanm: Those aren't the primary colors either, depending on your medium :-)
17:46:44 <Mathnerd314> *subtyping
17:46:46 <kmc> if you saw 'Red' how would you infer its type?
17:46:49 <kmc> right
17:46:52 <kmc> Haskell has no subtyping
17:47:05 <kmc> the closest you get is specializing a polymorphic type
17:47:16 <Axman6> ivanm: https://cs.anu.edu.au/streams/forum.php?MsgID=51949
17:47:42 <CSWookie> benmachine: Any good frameworks written for it?
17:47:47 <Mathnerd314> kmc: so what should I do instead?
17:47:59 <kmc> Mathnerd314, what problem are you trying to solve?
17:48:01 <benmachine> CSWookie: for web apps? I've heard so, but I've not looked into it
17:48:09 <benmachine> CSWookie: for parsers, approximately a billion
17:48:14 <ivanm> Axman6: yeah, I was debating whether or not to mention it there
17:48:24 <dankna> in the area of web frameworks there's my FruitTart and direct-fastcgi, but neither is ready for use yet :)
17:48:24 <Axman6> the more places, the better
17:48:41 <dankna> but you probably want HAppS
17:48:53 <Mathnerd314> kmc: parsing by partial evaluation
17:48:54 <CSWookie> benmachine: I don't have any languages I need a parser for, at the moment.
17:49:37 <CSWookie> dankna: HAppS, huh?  I'll look into it.
17:49:41 <ivanm> Axman6: replied
17:49:53 <kmc> Mathnerd314, okay
17:49:54 <ivanm> CSWookie: happstack is the successor to happs
17:50:00 <ivanm> dankna: ^^
17:50:05 <kmc> Mathnerd314, what subproblem of that problem leads you to subtyping?
17:50:06 <dankna> ivanm: oh, wasn't aware.  never actually used it :)
17:50:09 <CSWookie> happstack?  OK.
17:50:33 <Mathnerd314> kmc: I want a*b, for example, to turn into Tree Mult a b
17:51:01 <Mathnerd314> kmc: so the type of values should go from [*,a,b] to [Tree,a,b]
17:51:19 <Axman6> Mathnerd314: instance Num (Treething a) where ... a*b = Tree Mult a b?
17:52:07 <Alpounet> sinelaw, ok, have read the semantic model
17:52:14 <kmc> Mathnerd314, you're parsing a string "a*b"
17:52:15 <kmc> ?
17:52:26 <sinelaw> Alpounet, any thoughts?
17:52:28 <Mathnerd314> token list, but yes
17:52:43 <sinelaw> Alpounet, i didn't consider it very deeply, but it seems right
17:52:43 <kmc> then you can't usefully get the operator into the type of the tree node
17:52:47 <kmc> because it's not known statically
17:52:52 <kmc> err, wait
17:53:00 <Alpounet> sinelaw, I find it to be clear
17:53:02 <kmc> "Tree" and "Mult" are type constructors or data constructors?
17:53:12 <Alpounet> nothing to add that I can't think of at the moment
17:53:40 <kmc> sorry, i think i misinterpreted
17:53:42 <sinelaw> Alpounet, did you see the part about only point-wise operation in time?
17:53:49 <Mathnerd314> kmc: Tree is data Tree  Oper a b, Mult is element of data Oper
17:53:50 <jmcarthur> sinelaw: you are intending to expose pointers in the raw?
17:54:04 <sinelaw> jmcarthur, only under those constraints
17:54:17 <kmc> Mathnerd314, can you hpaste the actual datatype defns you're using
17:54:23 <kmc> i'm not sure what 'a' and 'b' are?
17:54:28 <jmcarthur> sinelaw: i would call this a leaky abstraction
17:54:47 <sinelaw> jmcarthur, no, the abstraction is that a pointer = the value it points to
17:54:52 <benmachine> btw guys, the other day I wrote a program that MD5s a directory tree and shows you which things in it are identical
17:54:54 <sinelaw> i don't expose pointers in my model
17:55:05 <benmachine> I did this only using a library for MD5, how many wheels did I reinvent?
17:55:10 <jmcarthur> sinelaw: so why expose pointers in the API?
17:55:14 <kmc> i'm picturing something like:   data Oper = Add | Mult;  data Tree = Lit Integer | Apply Oper Tree Tree
17:55:17 <rtaycher> If I'm trying to call a function with no variables that has a lot of different instances how do I specify type?
17:55:23 <kmc> that's a sort of basic arithmetic language
17:55:29 <kmc> rtaycher, no arguments you mean?
17:55:38 <kmc> there's no such thing; every function has exactly one argument
17:55:39 <benmachine> (I have some kind of recollection that there are functions for generic directory traversal)
17:55:41 <Alpounet> sinelaw, I'm not sure what you mean by "point-wise" actually
17:55:43 <sinelaw> jmcarthur, yeah the implementation of that model is not great
17:55:45 <kmc> but you can have values (in a typeclass) which are not functions
17:55:49 <kmc> > maxBound :: Char
17:55:50 <lambdabot>   '\1114111'
17:55:53 <kmc> there's an example
17:55:55 <kmc> :t maxBound
17:55:56 <lambdabot> forall a. (Bounded a) => a
17:55:58 <Alpounet> oh
17:56:02 <sinelaw> jmcarthur, but the point is that the meaning of those pointers should be treated as wrapped values
17:56:05 <Alpounet> I think I'm sure now
17:56:07 <Alpounet> so yeah sinelaw
17:56:18 <sinelaw> Alpounet, ok :) did you see scanlT?
17:56:20 <sinelaw> i need to test that
17:56:27 <sinelaw> too lazy to write something that will test it
17:57:18 <Alpounet> yeah but it operates on IOSource's
17:57:53 <jmcarthur> sinelaw: okay, well, if your model is a -> b, then Ptrs shouldn't need to be treated specially i would think
17:57:58 <jmcarthur> sinelaw: since a -> b is pure anyway
17:58:13 <sinelaw> Alpounet, right, because only they are dependent on time
17:58:34 <sinelaw> it's a way to do causal things on time-dependent values
17:58:37 <benmachine> oh man, for how long has unsafecoerce.com been spammed?
17:58:39 <Alpounet> yes
17:59:11 <sinelaw> jmcarthur, i guess i need to clean up that part. i'm trying to give implementation rules that will keep the model correctly implemented.
17:59:22 <sinelaw> i'm not even my rules are sufficient
17:59:33 <sinelaw> and i'd like them to be automatically enforced but have little hope for that
17:59:44 <jmcarthur> sinelaw: ah, i think i am confused because you are documenting implementation in the API (haddock) documentation
18:00:01 <benmachine> so guys I thought haskell was readable and then I wrote this http://unsafecoerce.com/fastcgi/hpaste.fcgi/view?id=8678#a8678 please help me :P
18:00:23 <sinelaw> jmcarthur, it should be titled: "How YOUR values of type IOProcessor should behave so that the model works"
18:00:30 <jmcarthur> oh
18:00:48 <jmcarthur> then i would definitely call this a leaky abstraction ;)
18:01:09 <monochrom> of course haskell is readable. any computer can read it.
18:01:11 <sinelaw> jmcarthur, i guess it is
18:01:28 <ivanm> benmachine: split it up, use more whitespace
18:01:31 <jmcarthur> sinelaw: it looks like you are defining a model that inputs must conform to rather than a model than your api conforms to, to be precise
18:01:33 <sinelaw> jmcarthur, i can't see how to avoid it
18:01:40 <yitz> benmachine: only 4 days
18:01:40 <benmachine> ivanm: whitespace?
18:01:44 <ivanm> any particular reason for twoInt, etc. to have explicit types?
18:01:48 <jmcarthur> *than your api conforms to
18:01:48 <ivanm> benmachine: empty lines, etc.
18:01:50 <yitz> but why not hpaste.org?
18:01:50 <jmcarthur> grr
18:01:53 <jmcarthur> *that
18:01:55 <jmcarthur> not than
18:02:15 <benmachine> ivanm: I wondered that after I looked at it again; originally I thought I needed them to avoid the MR but I'm not so sure now
18:02:28 <benmachine> yitz: 4 days what
18:02:33 <benmachine> oh
18:02:33 <benmachine> right
18:02:39 <benmachine> hpaste.org didn't like me
18:02:49 <jmcarthur> sinelaw: what kind of values is this type intended to manipulate? any old type, or certain specific types?
18:03:07 <yitz> benmachine: unsafecoerce.com definitely seems more universally accepting :)
18:03:10 <benmachine> the type signature on twoDigit is necessary unless I disable the MR
18:03:46 <benmachine> the other one is not, I think that was there while I was attempting to work out my type errors (which are fixed now, so it can be discarded I guess)
18:03:50 <kmc> :t (<**>)
18:03:52 <lambdabot> forall (f :: * -> *) a b. (Applicative f) => f a -> f (a -> b) -> f b
18:04:02 <sinelaw> jmcarthur, any type. but it's supposed to let you do IO things without using unsafePerformIO
18:04:05 <yitz> benmachine: do you control that site?
18:04:13 <benmachine> yitz: unsafecoerce.com? no
18:04:24 <yitz> whose is it? they should remove the spam
18:04:30 <benmachine> I have no idea
18:04:31 <sinelaw> jmcarthur, so you can implement both pure and time-dependent stuff that uses IO, and get a functional interface to those things
18:04:55 <benmachine> it's just on my mental list of hpastes
18:04:59 <sinelaw> the motivating case is binding to OpenCV with a functional interface
18:04:59 <monochrom> eh? it's not so bad! I can understand it. a time is either relative time or absolute time. for example relative time is '+' then spaces then digits then spaces. Then you do whatever to compute the time it represents from current time and those digits. Details details.
18:05:05 <yitz> it's mmorrow
18:05:26 <benmachine> monochrom: if you're serious, that's quite encouraging
18:05:26 <jmcarthur> sinelaw: why not just make some type abstractions that hide the side effects in a referentially transparent way?
18:05:36 <benmachine> I find it hard to guess how other people will react to my code
18:05:42 <monochrom> I'm serious. "very detailed" is not "unreadable".
18:05:47 <yitz> nice domain name. a shame to waste it as a spam bin.
18:05:49 <benmachine> heh, thanks :)
18:05:55 <ivanm> Axman6: chak is back ^^
18:06:01 <jmcarthur> sinelaw: unsafePerformIO was *designed* to allow you to make pure abstractions from the FFI
18:06:10 <benmachine> I think it's mostly parseYM that worries me
18:06:10 <Axman6> TacticalGrace: you around?
18:06:16 <sinelaw> jmcarthur, i do hide most of the side effects. it's just that sometimes you don't want to copy data from the FFI into haskell and back again, hence the usage of pointers to be passed between processors
18:06:20 <dankna> yeah, that is a nice domain name
18:06:31 <jmcarthur> sinelaw: you don't have to copy data in to make an abstraction around it
18:06:32 <TacticalGrace> Axman6: just finished lecturing for this week
18:06:33 <lambdabot> TacticalGrace: You have 1 new message. '/msg lambdabot @messages' to read it.
18:06:42 <Axman6> TacticalGrace: hooray :)
18:06:48 <benmachine> it's like, two digits then either two digit then a month or just a month
18:06:57 <sinelaw> jmcarthur, agreed
18:07:05 <jmcarthur> sinelaw: you can just wrap the Ptrs in opaque types and only expose referentialy transparent functions to work with them
18:07:09 <benmachine> maybe if I flipped the <|>
18:07:19 <benmachine> or maybe I need to name some of these lambdas
18:07:45 <sinelaw> jmcarthur, but there's nothing to stop a user from making a processor that does output Ptr a
18:07:54 <sinelaw> i can't restrict the type to "anything but pointers"
18:07:57 <jmcarthur> sinelaw: there is if you don't expose that implementation detail
18:08:19 * Axman6 will be back in 20 minutes or so. will drop in on ivanm 
18:08:21 <TacticalGrace> Axman6: I'm away from the 4 Jul to 11 Jul, but that is ok
18:08:41 <sinelaw> jmcarthur, lets say you want to make a processor that uses some IO stuff to do pure computations. what do you do?
18:08:42 <TacticalGrace> Axman6: you guys can still do at UNSW
18:08:46 <Axman6> TacticalGrace: ah, well then that date's out ;)
18:08:49 <yitz> benmachine: I think just blank lines between the parser functions would do it wonders
18:08:53 <jmcarthur> sinelaw: the computation is *actually* pure?
18:08:59 <Axman6> because i want to wrack your brain :P
18:09:04 <sinelaw> (assuming that computation requires global state and can't be implemented with unsafePerformIO without a big headache)
18:09:24 <jmcarthur> sinelaw: it's not pure if it needs global state, unless there are some other conditions on that state that i don't know about
18:09:44 <sinelaw> jmcarthur, it is pure, the global state can be local but would be extremely costly
18:09:50 <sinelaw> that's one of my cases
18:09:57 <jmcarthur> i'm confused
18:10:06 <jmcarthur> unqualified global state is not pure
18:10:07 <TacticalGrace> Axman6: but I'm not sure whether it makes sense to work around my schedule at any cost
18:10:12 <sinelaw> jmcarthur, e.g. your computation uses a side buffer of 100Mb
18:10:18 <jmcarthur> at least in my perhaps overly black and white view
18:10:23 <ivanm> methinks Axman6 meant "rack your brain"
18:10:32 <TacticalGrace> Axman6: I won't be able to hang around for the whole hackathon anyways
18:10:56 <jmcarthur> sinelaw: i have to go in just a minute again. i would like to continue this conversation. i think there is something critical one of us is missing
18:10:58 <sinelaw> jmcarthur, or it requires you to pass in some stuff that you can only get by doing IO
18:11:01 <TacticalGrace> with two young kids, you options on the weekends are somewhat limited...
18:11:12 <Axman6> TacticalGrace: well so far, you're the only one who can't make on of the proposed dates, so we might as well try and make it sometime you can come too
18:11:16 <sinelaw> jmcarthur, i'm probably re-inventing something, so yes :)
18:11:23 <sinelaw> (i meant that in a negative way)
18:11:32 <TacticalGrace> Axman6: that's fine
18:11:33 <monochrom> eat them
18:11:38 <sinelaw> jmcarthur, ok we'll talk another time :)
18:11:59 <TacticalGrace> I'm just saying if avoiding the timeframe when I'm away prevents somebody else from coming,
18:12:09 <TacticalGrace> then just scrifice me instead ;)
18:12:12 <Axman6> TacticalGrace: i've updates the page to reflect that you'll be away
18:12:13 <TacticalGrace> sacrifice*
18:12:19 <Axman6> heh, ok :)
18:12:22 <TacticalGrace> I wrote that on the page, haven't I
18:12:30 <ivanm> TacticalGrace: in terms of logistics; know of any cheapish accomodation around UNSW?
18:12:37 <jmcarthur> sinelaw: okay, a 100MB side buffer... are you saying that you are wanting to allocate a single buffer and reuse it over and over in otherwise pure computations?
18:12:51 <Axman6> the mariot (i think) is nearby, and fairly cheap i believe
18:12:59 <Axman6> Sarah and I stayed there for SAPLING
18:13:02 <sinelaw> jmcarthur, that's an example, yes
18:13:20 <Axman6> and it's just down the road from the UNSW CS department i think
18:13:25 <TacticalGrace> ivanm: http://www.housing.unsw.edu.au/housing/short_term/short_term.php?p=overview
18:13:30 <ivanm> the mariott is _cheap_? :o
18:13:37 <TacticalGrace> ivanm: this page ahs links to hostels and hotels
18:13:37 <jmcarthur> sinelaw: i would say that is not a pure optimization. it is not thread safe
18:13:42 <Axman6> might have been medina
18:13:47 <Axman6> or something...
18:13:47 <ivanm> TacticalGrace: good-o
18:13:52 <ivanm> Axman6: that sounds more likely ;-)
18:13:57 * ivanm puts that link on the wikipage
18:14:01 <sinelaw> jmcarthur, i'm disregarding concurrency a.t.m. but let's assume we can do it safely
18:14:10 <sinelaw> which is probably true
18:14:14 <sinelaw> with a little effort
18:14:22 <TacticalGrace> ivanm: there are youth hostels and backpacker accomodation around
18:14:28 <Axman6> huh, it's not mentioned on that page
18:14:30 <TacticalGrace> actually, it would make sense to ask benl23
18:14:50 <ivanm> preflex: seen benl23
18:14:50 <preflex>  benl23 was last seen on #ghc 13 days, 14 hours and 29 minutes ago, saying: :) thanks
18:14:54 <Axman6> ivanm: i'm coming over there to fill out my pay sheet, i'll see you soon ok?
18:14:56 <ivanm> if, of course, he's ever here... >_>
18:14:58 <TacticalGrace> before he moved to Sydney, he often came to fp-syd etc and stayed here for a night
18:14:58 <ivanm> Axman6: sure
18:15:08 <Axman6> TacticalGrace: ah, good to know :)
18:15:16 * Axman6 bb20m
18:16:18 <TacticalGrace> preflex: I can ask him (=benl23) to maybe put his wisdom on the wiki page
18:16:39 <jmcarthur> sinelaw: are you sure that allocating a 100MB buffer occasionally is even going to be that much of a performance hit?
18:17:30 <jmcarthur> sinelaw: you could even have some rewrite rules such that two composed functions that would both allocate buffers can share a single buffer
18:17:37 <sinelaw> jmcarthur, it's more like allocating several 10-mb buffers on each frame of an image-processing system
18:17:40 <jmcarthur> sinelaw: without breaking thread safety
18:17:40 <ivanm> TacticalGrace: you mean either myself or Axman6 rather than preflex? :p
18:17:44 <ivanm> and that'd be great, ta
18:17:45 <rtaycher> can you have two type constraints ie Num a=> Num b=> a -> b -> Bool
18:17:57 <jmcarthur> sinelaw: ghc's allocator is very good though
18:18:02 <ivanm> rtaycher: (Num a, Num b) => a -> b -> Bool
18:18:04 <sinelaw> jmcarthur, it's not using ghc
18:18:07 <TacticalGrace> rtaycher: make it (Num a, Num b) => a -> b -> Bool
18:18:11 <sinelaw> it's allocations within the FFI bindings
18:18:14 <jmcarthur> oh, it's using malloc?
18:18:16 <jmcarthur> ah
18:18:25 <sinelaw> maybe malloc, depends on the lib.
18:18:30 <jmcarthur> any particular reason?
18:18:36 <sinelaw> that's how opencv works
18:18:37 <jmcarthur> it's just something you have no control over?
18:18:38 <jmcarthur> ah
18:18:50 <sinelaw> normally you allocate at the beginning of your program
18:18:52 <jmcarthur> yet it allows you to reuse the same buffer?
18:18:59 <sinelaw> yes
18:19:02 <jmcarthur> or, rather, it gives you control over that?
18:19:14 <jmcarthur> hmm
18:19:18 <sinelaw> you have control over it in the C interface, and in the C++ one it's automatic
18:19:37 <sinelaw> they even implemented some sort of garbage collecttion in the C++ one, but i'm not even trying to bind to C++
18:20:09 <sinelaw> jmcarthur, that's one example. another one is where the computation itself is essentially pure, but it requires data that you can only get by doing IO
18:20:11 * twink loves treadmills for GC.
18:20:21 <jmcarthur> i'd still recommend against the shared buffer and allocate (using the ffi thing) for each function you expose that needs it, but having a rewrite rule to share buffers when possible or something
18:20:37 <jmcarthur> sinelaw: so this data you can only get via IO is not pure?
18:20:45 <sinelaw> jmcarthur, i'll have to look at rewrite rules, never checked that
18:21:26 <TacticalGrace> ivanm: yeah, I'm just confused
18:21:26 <sinelaw> jmcarthur, e.g. it's something you need to load from an XML, but again using an FFI interface
18:21:31 <ivanm> TacticalGrace: heh
18:21:35 <ivanm> too many students? :p
18:21:41 <ivanm> and a case of "TGIF"?
18:21:43 <sinelaw> you don't actually need the thing, you just need the lib to load it and give you the pointer
18:21:45 <TacticalGrace> definitely!
18:21:45 <jmcarthur> sinelaw: just because it's from the FFI doesn't mean you have to expose an IO function
18:21:47 <Mathnerd314> kmc: My current code: http://moonpatio.com/fastcgi/hpaste.fcgi/view?id=8679#a8679
18:21:54 <sinelaw> jmcarthur, i'm not exposing io
18:22:03 <rtaycher> ivanm++
18:22:03 <jmcarthur> sinelaw: that sounds like it would be perfectly wrappable then
18:22:19 <ivanm> :D
18:22:25 <TacticalGrace> (confused, re talking to preflex)
18:22:31 <ivanm> yeah, I got that
18:22:35 <sinelaw> jmcarthur, loading it at EVERY invocation of that function would be extremely costly, and writing it in a monadic way is ugly
18:22:53 <jmcarthur> sinelaw: it's static data though?
18:22:57 <sinelaw> yes
18:23:09 <TacticalGrace> Explaining Agda in class is even more complicated and time consuming than explaining Haskell.
18:23:11 <TacticalGrace> Just saying.
18:23:27 <jmcarthur> sinelaw: since you seem to be exposing an arrow interface anyway, i don't see why you couldn't just pass it through implicitly
18:23:41 <sinelaw> jmcarthur, example?
18:23:44 <yitz> Mathnerd314: you can't use Float as a constructor for Tree
18:24:08 <yitz> (or can you? confusing, even if possible)
18:24:12 <jmcarthur> sinelaw: say foo and bar both need this and you expose foo and bar with an arrow interface. the arrow can carry it for you
18:24:17 <kmc> Mathnerd314, what's the motivation for putting "eval" into a typeclass?
18:24:29 <sinelaw> jmcarthur, that's basically what i do, i think.
18:24:37 <Mathnerd314> ummm... it seemed like a good idea?
18:24:38 <benmachine> http://unsafecoerce.com/fastcgi/hpaste.fcgi/view?id=8678#a8680 good variable naming does wonders, perhaps
18:24:43 <jmcarthur> sinelaw: then why the IO and Ptrs in your types?
18:24:43 <kmc> Mathnerd314, it doesn't seem like a good idea to me
18:24:44 <sinelaw> jmcarthur, you have Processor a b >>> Processor b c
18:24:54 <sinelaw> jmcarthur, but you NEVER touch the b's
18:24:58 <kmc> Mathnerd314, if you want some different ways to eval something to different types, why should they all have the same name
18:24:59 <sinelaw> or the a's or c's
18:25:12 <benmachine> I think use of <**> here has to be taken on a sort of "just trust me" or "I hope you've seen something that looks similar to this before"
18:25:20 <benmachine> rather than "this obviously works"
18:25:24 <sinelaw> jmcarthur, IO is in my type because it's parameterizable over monads
18:25:31 <kmc> for that matter you might want two different sorts of eval with the same type sig, then your typeclass gets you nothing
18:25:41 <sinelaw> jmcarthur, so IO isn't in the IOProcessor's type.
18:25:41 <benmachine> thanks to the two people who suggested empty lines
18:25:48 <benmachine> they were indeed of some help
18:25:50 <kmc> Mathnerd314, can you explain why it seemed like a good idea?
18:25:58 <kmc> it will depend obviously on what you intend to do from here
18:26:42 <Mathnerd314> I was just writing a parser... the typeclass meant I could reuse it
18:26:48 <sinelaw> jmcarthur, well it is in the type, but only because of the parameterizability. essentially it's opaque, you don't "see" it when you write code that uses IOProcessor and no other type of processor.
18:26:59 <jmcarthur> sinelaw: you know, i think maybe i just misunderstand what this library is for ^_^
18:27:04 <kmc> Mathnerd314, reuse it how?
18:27:26 <sinelaw> jmcarthur, :) or my inexperience with haskell has led me to invent something that's not really needed
18:28:18 <kmc> Mathnerd314, i don't understand why you have both Token and Expression
18:28:27 <kmc> in particular, what Token represents is not what is usually meant by a token
18:28:32 <yitz> Mathnerd314: you have Do and Float as constructors for several different types - you have to use different names for each type.
18:28:38 <sinelaw> jmcarthur, the short explanation of the purpose is: to have a functional (category, arrow, etc.) interface for stuff that would otherwise require either working sequentially in the IO monad, or doing risky tricks with unsafePerformIO
18:28:54 <kmc> yitz, yeah, he's trying to do subtyping -- we're working on fixing the design
18:29:00 <Mathnerd314> right, I want Tree subtype Expression subtype Token
18:29:15 <sinelaw> jmcarthur, the example usage is here: http://github.com/sinelaw/cv-combinators/blob/master/src/Test.hs
18:29:19 <sinelaw> see how main is implemented
18:29:20 * yitz nods. OO-think.
18:29:34 <Mathnerd314> set-think
18:29:41 <sinelaw> and consider how it would be need to implemented without this library: http://github.com/sinelaw/HOpenCV/blob/master/src/Test.hs
18:29:52 <sinelaw> jmcarthur, the second link is implementation using traditional IO work
18:30:19 <sinelaw> jmcarthur, compare that to "main" function in the first link
18:30:38 <jmcarthur> sinelaw: oh i get it now
18:30:49 <kmc> Mathnerd314, so you want some static guarantees about whether an expression contains plus/minus?
18:30:56 <sinelaw> actually the first program is a lot more complicated, and yet looks a lot simpler.
18:30:57 <kmc> but... it could contain plus or minus in the Operation part
18:31:05 <Mathnerd314> right.
18:31:05 <kmc> this is... weird
18:31:11 <Mathnerd314> but that's the parse tree
18:31:32 <kmc> do you have some specific desire to do it this way?
18:31:42 <jmcarthur> sinelaw: so you have stuff that you are exposing an impure interface to, and you are wanting to use this Processor stuff to give it the veneer of purity ;)
18:31:52 <kmc> traditionally you'd have a totally flat Token type, and you'd parse a list of tokens into a tree in one step
18:32:08 <jmcarthur> sinelaw: i would argue that you should expose a pure interface in the first place
18:32:14 <Mathnerd314> I'm trying to do bottom-up parsing
18:32:35 <sinelaw> jmcarthur, by exposing impure interface  you mean having Ptr in some of my types?
18:32:35 <kmc> Mathnerd314, if you really want to intermix flat and tree this way, you should do it all within one type
18:32:45 <Mathnerd314> ok.
18:32:49 <jmcarthur> sinelaw: i mean exposing the fact that there is IO involved whatsoever
18:32:54 <kmc> i don't really see how it'd work this way
18:33:08 <Mathnerd314> so Haskell's type system isn't a good fit?
18:33:18 <kmc> well
18:33:27 <kmc> this is not the typical way to do parsing in Haskell
18:33:28 <sinelaw> jmcarthur, that is hidden. the type is _called_ IOProcessor, but you don't see the IO anywhere in the type (unless you start checking what that synonym is for)
18:33:46 <jmcarthur> sinelaw: a synonym by definition exposes its implementation
18:33:46 <sinelaw> jmcarthur, i COULD hardcode it to use IO and then IO would not even be in the type, btw.
18:33:49 <kmc> Mathnerd314, if you want to proceed this way, you will have to come up with different names for each constructor (e.g. TTimes vs ETimes)
18:33:56 <sinelaw> jmcarthur, and I COULD use newtype
18:34:00 <kmc> they are not really related values
18:34:03 <sinelaw> maybe i should use newtype actually
18:34:17 <jmcarthur> sinelaw: you're also exposing the guts of Processor
18:34:24 <sinelaw> jmcarthur, how?
18:34:38 <jmcarthur> sinelaw: i see its constructor right in the documentation
18:34:45 <sinelaw> jmcarthur, the way i see it i'm only exposing the guts so you can implement more processors = wrap more impure stuff with this lib
18:34:49 <Mathnerd314> kmc: OK.
18:34:51 <jmcarthur> sinelaw: right, impure stuff
18:35:01 <jmcarthur> sinelaw: that you are exposing through your CV binding
18:35:42 <sinelaw> jmcarthur, yes. but if you look at that link, once i've wrapped cv using Processor i don't use anything from the bindings
18:35:51 <sinelaw> except for constants
18:36:02 <sinelaw> e.g. flags
18:36:12 <sinelaw> i don't actually use any IO functions
18:36:17 <sinelaw> nor do I need to see them
18:36:54 <jmcarthur> sinelaw: i see runTill, runTillKeyPressed, capture, imageProcessor
18:36:59 <jmcarthur> sinelaw: they all expose IO
18:37:07 <Mathnerd314> kmc: could you recommend a language more suited to the programs I'm writing?
18:37:37 <sinelaw> jmcarthur, capture is internal
18:37:41 <sinelaw> should not be exposed from the module
18:37:58 <sinelaw> and the run* functions are neccesary if you ever want to actually run this stuff
18:38:08 <sinelaw> like main :: IO () is neccesary
18:38:13 <jmcarthur> okay, that leaves imageProcessor
18:38:17 <kmc> Mathnerd314, you can do it in Haskell... you just need to name your constructors distinctly
18:38:27 <Mathnerd314> ok.
18:38:31 <jmcarthur> i'm with you on capture and run*
18:38:38 <kmc> you have some function parsePlusAndMinus :: Token -> Expression
18:38:39 <kmc> right?
18:38:39 <sinelaw> jmcarthur, i think that's also internal. let me see
18:38:42 <jmcarthur> it also leaves all those pointers
18:38:53 <jmcarthur> which are in more functions than just those
18:39:04 <kmc> you just have to think of it as a conversion between two distinct types
18:39:09 <kmc> instead of some subtype stuff
18:39:10 <sinelaw> jmcarthur, it's just a convenience function to make it easy to build new processors of a certain type
18:39:13 <Mathnerd314> ok.
18:39:23 <sinelaw> i should divide the API into two
18:39:33 <jmcarthur> sinelaw: what is the semantic model of your CV bindings?
18:39:34 <sinelaw> 1) actual usable processors that hide IO
18:39:40 <sinelaw> 2) api for building new ones
18:39:47 <jmcarthur> sinelaw: that is what i thought we were talking about at first, which was the initial source of my confusion
18:40:39 <sinelaw> jmcarthur, using what i wrote in Processor.hs, [[ ImageProcessor ]] = Image -> Image
18:40:55 <sinelaw> [[ camera ]] = Time -> Image
18:41:05 <kmc> Mathnerd314, tbh I'm not sure subtypes are the right way to represent this even in an language that has them
18:41:15 <sinelaw> actually if oyu follow the exact model it's ((), Time) -> Image but that's isomorphic
18:41:25 <kmc> in a compiler you often have many stages of code transform (though not this stage)
18:41:36 <sinelaw> jmcarthur, etc...
18:41:41 <kmc> and usually the later code is a restricted form of the earlier code in some technical sense
18:41:55 <kmc> but i think it's less common to represent this via subtyping
18:42:37 <ddarius> kmc: Refinement types.
18:42:56 <Mathnerd314> I remember where I got this; I was reading the documentation for #pypy
18:43:17 <kmc> ddarius, i don't know those well... is it like attaching propositions to your types?
18:44:05 <sinelaw> jmcarthur, does that make more sense now?
18:44:10 <kmc> in that case i cheekily recommend Agda as a "language more suited to the programs [he's] writing"
18:44:27 <jmcarthur> sinelaw: what i see is an impure CV binding and a module that might help one to write a pure wrapper around it, but no pure interface
18:44:36 <ddarius> kmc: An example would be data Nat = Z | S Nat; refinement Even = Z | S (S Even)
18:45:03 <ddarius> kmc: A more relevant example would be making a refinement of an AST type for ASTs in some kind of "normal" form, e.g. CPS.
18:45:07 <sinelaw> jmcarthur, if i get rid of those internal functions, and give a newtype for Ptr IplImage, will that suffice?
18:45:35 <kmc> ddarius, ah
18:45:42 <jmcarthur> sinelaw: it might make it more pure, but i don't think it really follows much of a semantic model
18:46:16 <jmcarthur> sinelaw: i guess that's just the way it is though
18:46:16 <sinelaw> jmcarthur, can you be more specific? i'm still not understanding
18:46:25 <Mathnerd314> ddarius: any good languages for those? :D
18:47:17 <kmc> Mathnerd314, i'm curious, why do you want to do the parsing this way?
18:47:20 <jmcarthur> sinelaw: maybe i'm just thrown off by all the type synonyms
18:47:29 <jmcarthur> sinelaw: which necessarily expose the implementations of your functions
18:47:54 <kmc> Mathnerd314, is the goal here to parse some arithmetic expressions, or is the goal to parse them with a specific algorithm?
18:48:07 <Mathnerd314> to use that algorithm
18:48:10 <kmc> okay
18:48:16 <sinelaw> jmcarthur, in any case you've certainly made a point
18:48:24 <kmc> so you'll have to name your constructors distinctly
18:48:31 <sinelaw> i'll try to remove that exposure
18:49:10 <Mathnerd314> ok.
18:52:32 <jmcarthur> sinelaw: opencv is essentially a set of image processing functions, right?
18:52:58 <sinelaw> jmcarthur, it's more than that, but that's the main thing
18:53:01 <jmcarthur> sinelaw: is there any reason you don't just expose an Image type and operations on it?
18:53:26 <jmcarthur> sinelaw: i'm changing the topic a bit here from purity to semantic model, if you don't mind
18:54:20 <jmcarthur> oh i see tracking, which makes sense, so i guess video or video streams are involved as well
18:54:34 <sinelaw> yes.
18:54:45 <sinelaw> but that's not the only reason
18:55:01 <jmcarthur> well, i don't see that as a reason anyway ;)
18:55:04 <sinelaw> for example to do face detection you need to do a whole bunch of initialization before you can call the detection function
18:55:22 <jmcarthur> but that could just be an implementation detail
18:55:27 <sinelaw> it is
18:55:51 <sinelaw> but how do you hide it?
18:56:02 <sinelaw> unsafePerformIO?
18:56:41 <jmcarthur> yes
18:56:45 <jmcarthur> unsafePerformIO is designed for this
18:57:09 <jmcarthur> for hiding IO that happens to be referentially transparent
18:57:30 <sinelaw> jmcarthur, won't that essentially re-do the initialization on every call?
18:58:12 <jmcarthur> sinelaw: not if you do it right
18:58:30 <jmcarthur> sinelaw: *or* you can do the initialization in your run function
18:58:43 <sinelaw> jmcarthur, but that's what i'm doing
18:58:52 <jmcarthur> sinelaw: but you exposing that detail
18:58:56 <jmcarthur> *you're
18:59:17 <sinelaw> how am i exposing it?
18:59:41 <sinelaw> maybe i should rename IOProcessor
19:00:08 <sinelaw> :)
19:00:31 <jmcarthur> sinelaw: okay, if you make the type synonyms opaque types then it's not exposed. you are just using an arrow interface for no apparent reason ;)
19:01:10 <sinelaw> the reason is that then you can write programs like i did in that Test.hs
19:01:22 <jmcarthur> sinelaw: i'm trying to say that you can have an applicative (in style, not the type class) interface if you are willing to use unsafePerformIO to hide some things
19:02:02 <sinelaw> i think it's worth avoiding unsafePerformIO, although i admit i don't know a lot about it
19:02:18 <sinelaw> it's not the simplistic case of a function that just does a pure computation
19:02:38 <sinelaw> it's a case where in essence the computation is pure, but implementation-wise it's more complicated
19:02:46 <jmcarthur> sinelaw: i think you are avoiding it unnecessarily
19:02:50 <jmcarthur> sinelaw: this is exactly what it's for
19:02:51 <sinelaw> possibly
19:03:02 <sinelaw> jmcarthur, updated docs http://www.ee.bgu.ac.il/~noamle/_static/doc/html/cv-combinators/AI-CV-ImageProcessors.html
19:03:32 <sinelaw> is that better?
19:03:32 <jmcarthur> looking better
19:04:44 <sinelaw> jmcarthur, ok 4 AM here
19:04:57 <sinelaw> jmcarthur, i want this to really be a pure API
19:05:20 <sinelaw> (except for the run* funcitons)
19:06:11 <sinelaw> jmcarthur, thanks for the input
19:06:21 <sinelaw> will discuss again :)
19:06:33 <jmcarthur> sinelaw: alright
19:08:47 * hackagebot cv-combinators 0.1.2.1 - Functional Combinators for Computer Vision  http://hackage.haskell.org/package/cv-combinators-0.1.2.1 (NoamLewis)
19:09:06 <Alpounet> cheers
19:10:25 <sinelaw> Alpounet, cleaned up the API after jmcarthur's comments
19:10:33 <sinelaw> (just docs changes, really)
19:15:09 <Alpounet> ok sinelaw
19:42:03 <ivanm> isn't this a great website for a journal? :p http://www.ma.kagu.sut.ac.jp/~sutjmath/index.html
19:44:58 <Alpounet> wow indeed
19:46:56 <ivanm> and that, folks, is why you shouldn't run websites off your PC
19:47:03 <ivanm> (and yes, a Mac _is_ a PC)
19:53:14 <Alpounet> heh
19:53:27 <Alpounet> wow... http://reperiendi.wordpress.com/2007/11/03/category-theory-for-the-java-programmer/
20:14:15 <kmc> @quote enterprisevariant
20:14:16 <lambdabot> DRMacIver says: I dread to think what category theory would look like after the software engineering world had got their grubby paws on it. Enterprisevariant functors. Commutative UML diagrams.
20:15:16 <ivanm> *shudder*
20:15:25 <ivanm> @quote Java
20:15:26 <lambdabot> dons says: [In reference to <joelr1> did you guys know that #ocaml has 37 members and #erlang has 34 vs. 202 on #haskell?] I think part of the #haskell success comes from the approach that we all
20:15:26 <lambdabot> know each other, it's not a homework channel like #java. We created a community of peers, working on the overall goals of the community. That's why people keep coming back
20:15:44 <ivanm> hmmm.... that's not a humorous quote
20:15:45 <ivanm> @quote Java
20:15:46 <lambdabot> dons says: Java's type system is unsuitable for young children, the elderly or infirm of constitution
20:15:50 <ivanm> that'll do
20:16:19 <Gracenotes> not humorous. discard and repeat.
20:16:38 <JuanDaugherty> it is and it isn't
20:18:52 <JuanDaugherty> and I'm guessing the 1st one from dons was at least 4-5 years ago
20:19:34 <ivanm> yeah, probably
20:22:09 <mreisner> Are Happstack people around here?
20:22:45 <Alpounet> mreisner, more likely on #happs
20:22:55 <mreisner> Ok
21:06:36 <sm> ivanm: hackagebot was awol for a while ? could it have been netsplits ?
21:06:57 <ivanm> quite possibly... but why ask me?
21:10:49 <sm> ivanm: sinelaw is gone and you seemed to be the other person discussing it :)
21:11:13 <ivanm> heh
21:11:51 <cads> Hey, I've got a bunch of files in the form of  euler***.hs where *** is replaced by a number like 001, 012, 221, etc. Each file has a function in it euler***, like euler1, euler12, euler221, etc.. I was wondering what you guys would suggest for creating a minimal 'test suite' for my euler files?
21:12:12 <ivanm> rm euler*
21:12:13 <ivanm> ;-)
21:12:21 * hackagebot direct-fastcgi 1.0 - Native implementation of the FastCGI protocol.  http://hackage.haskell.org/package/direct-fastcgi-1.0 (DanKnapp)
21:12:56 <cads> that would be a big help, heh
21:12:56 * dankna does the release dance
21:13:09 <shapr> yay!
21:13:14 * dankna grins :D
21:13:35 <cads> the customary release dance of haskelcovania?
21:13:39 <shapr> cads: QuickCheck has a script that pulls out prop_* functions, perhaps you could hack that?
21:13:50 <enthymeme> Haskellvania
21:14:05 <enthymeme> "DIE, MONAD!  YOU DON'T BELONG IN THIS MODULE!"
21:14:08 <enthymeme> >.>
21:14:31 <enthymeme> awesome, I killed someone's connection.
21:14:43 <ivanm> @slap enthymeme
21:14:44 * lambdabot hits enthymeme with an assortment of kitchen utensils
21:15:20 <cads> I'll check out what quickcheck can do for me, thanks shapr
21:15:28 <shapr> Oh what about test-framework?
21:15:50 <shapr> cads: Are you familiar with test-framework already?
21:16:07 <cads> no
21:16:17 <cads> I'm unfamiliar with testing in haskell :)
21:16:19 <shapr> Ah
21:16:26 <cads> testframework looks neat too
21:16:33 <cads> how's hUnit?
21:16:41 <shapr> It's good, if you like static unit tests.
21:16:50 <shapr> test-framework supports both hUnit and qc.
21:16:54 * DigitalKiwi would just write a lua program that iterated over the directory running the programs....
21:17:00 <djahandarie> quickcheck is great
21:17:14 <shapr> DigitalKiwi: Does Lua have anything like QuickCheck?
21:17:22 <DigitalKiwi> dunno what that is
21:17:27 <djahandarie> Does Lua ahve anything like Haskell's type system? :-)
21:17:36 <djahandarie> If so, it might have something like QuickCheck
21:17:37 <ivanm> DigitalKiwi: look up QuickCheck on wikipedia
21:18:14 <shapr> @go QuickCheck
21:18:15 <lambdabot> Maybe you meant: google googleit do
21:18:17 <shapr> bah
21:19:01 <ivanm> @google quickcheck wikipedia
21:19:02 <lambdabot> http://en.wikipedia.org/wiki/QuickCheck
21:19:02 <lambdabot> Title: QuickCheck - Wikipedia, the free encyclopedia
21:19:09 <ivanm> @where quickcheck
21:19:09 <lambdabot> http://www.cs.chalmers.se/~rjmh/QuickCheck/
21:20:02 <DigitalKiwi> http://www.nessie.de/mroth/lunit/
21:20:13 <semka> Hi there
21:20:13 <lambdabot> semka: You have 1 new message. '/msg lambdabot @messages' to read it.
21:20:34 * ivanm waves idly in semka's general direction
21:21:04 <semka> (:
21:21:29 <semka> I have ghc 6.12.1, but looks like getArgs don't fetch utf-8 strings from os
21:21:47 <ivanm> they should...
21:23:22 <semka> take a look:
21:23:24 <semka> λ runhaskell argstest.hs Hello world
21:23:25 <semka> Helloworld
21:23:25 <semka> semka >> eightbitsattva-laptop : ~/dev/haskell
21:23:28 <semka> λ runhaskell argstest.hs Привет мир
21:23:30 <semka> ПриветмирÐÑÐ¸Ð²ÐµÑÐ¼Ð¸Ñ
21:23:33 <semka>  
21:24:25 <djahandarie> You run commands on bash with λ? :P
21:24:46 <enthymeme> or better yet, it's his shell prompt
21:24:47 <semka> zsh (:
21:24:48 <ivanm> paste the source of argstest up somehwere
21:24:51 <ivanm> @where hpaste
21:24:52 <lambdabot> http://hpaste.org/
21:25:34 <semka> http://pastie.org/876680
21:25:38 <semka> hpaste.org down
21:26:35 <ivanm> hmmm...
21:26:52 <ivanm> I'm trying to work out what's going on with those random characters on the end of the output
21:27:08 <ivanm> control characters being read in or something? :s
21:27:20 <semka> this "random characters" is escaped runssian utf8 symbols
21:27:29 <semka> sec.
21:28:03 <ivanm> Привет мир == > Приветмир <-- I get this, since args are space separated
21:28:09 <semka> http://pastie.org/876681
21:29:20 <ivanm> why is Привет appearing in your shell output with a % sign?
21:31:30 <semka> ivanm: i don't know, really (: But Привет doesn't goes in stdout.
21:33:27 * hackagebot direct-fastcgi 1.0.1 - Native implementation of the FastCGI protocol.  http://hackage.haskell.org/package/direct-fastcgi-1.0.1 (DanKnapp)
21:33:52 <dankna> (oops :D well, at least I caught the problem)
21:33:57 <ivanm> dankna: stuff something up? :p
21:33:59 <dankna> yep
21:34:05 <dankna> bad form but oh well
21:34:40 <ivanm> *tsk, tsk*
21:34:43 <dankna> didn't realize I had to explicitly export the functions that the user would need to create their own CGI monad
21:34:56 <dankna> I thought exporting the class they were methods of would do it
21:34:58 <ivanm> also, if that was just a bug fix, then technically your versioning contradicts the Package Versioning Policy
21:35:09 <ivanm> oh, if you added exports, your version is OK then
21:35:10 <dankna> does it?  was I supposed to make it 1.0.0.1?
21:35:14 <dankna> oh, okay
21:35:37 <dankna> well, for future reference, bug fixes are supposed to be the fourth decimal place, I take it?
21:54:39 <edwardk> @hpaste
21:54:40 <lambdabot> Haskell pastebin: http://moonpatio.com/fastcgi/hpaste.fcgi/
21:57:03 <ivanm> @where PVP
21:57:04 <lambdabot> http://www.haskell.org/haskellwiki/Package_versioning_policy
21:57:07 <ivanm> dankna: ^^
21:57:14 <ivanm> (sorry for not replying earlier)
21:57:28 <dankna> ah, thanks
21:57:29 <dankna> np
22:06:21 <ivanm> preflex: seen blackdog
22:06:21 <preflex>  blackdog was last seen on #haskell 2 days, 4 hours, 17 minutes and 21 seconds ago, saying: are there any tools for managing separate ghc instances, like rvm for ruby?
22:26:10 <semka> going to try haskell-platform for osx + utf8-string
22:28:43 * hackagebot network-websocket 0.3 - WebSocket library  http://hackage.haskell.org/package/network-websocket-0.3 (MichaelMelanson)
22:29:18 <SColes> Anyone have some advice on how I could accomplish this more succintly and/or clearly? http://moonpatio.com/fastcgi/hpaste.fcgi/view?id=8687#a8687
22:30:52 <zeiris> Type signature at the top seems like a nice start :D
22:31:33 <aavogt> @type transpose
22:31:33 <lambdabot> forall a. [[a]] -> [[a]]
22:31:36 <aavogt> @src transpose
22:31:36 <lambdabot> transpose []             = []
22:31:37 <lambdabot> transpose ([]   : xss)   = transpose xss
22:31:37 <lambdabot> transpose ((x:xs) : xss) = (x : [h | (h:t) <- xss]) : transpose (xs : [ t | (h:t) <- xss])
22:36:10 <zeiris> Wow. List comprehensions are cool. I think I can refactor some recent code with them, too...
22:37:27 <SColes> hmmm transpose is kind of what i want.  thanks aavogt
22:38:13 <aavogt> it might be worthwhile using quickcheck or something to check that transpose treats ragged ends the same as your existing function
22:38:53 <jmcarthur> recent discussion about darcs on reddit made me curious about how long it would take to clone a local copy of the ghc repository after upgrading it to hashed format using darcs 2.4.  after upgrading it, a darcs get --lazy ghc ghc2 takes all of 0.5 seconds. i'm impressed
22:39:28 <ivanm> jmcarthur: IIRC, on local machines it uses hardlinks to share patches
22:39:31 <jmcarthur> it's due to all the hard linking and such, i'm sure
22:39:35 <ivanm> yeah
22:39:36 <jmcarthur> ivanm: you beat me to it
22:39:44 <Heffalump> in the described case, no patches would even be symlinked
22:39:45 <jmcarthur> but it's still impressive
22:39:50 <Heffalump> or at least not very many
22:39:55 <Heffalump> at I mean hard linked, not symlinked
22:40:01 <Heffalump> it just omits them completely
22:40:02 <ivanm> yeah
22:40:05 <ivanm> since it's only --lazy
22:40:07 <jmcarthur> considering that i can still treat it just like a normal darcs repo, it's nice
22:40:12 <jmcarthur> yeah, --lazy would do that
22:40:13 <Heffalump> but pristine will be hardlinked
22:40:22 <ivanm> Heffalump: wouldn't _some_ be linked since it has to recreate those files?
22:40:22 <aavogt> > vcat $ map hcat $ transpose $ (map (map (text . show)) [[1,2],[4],[7,8,9]]
22:40:23 <lambdabot>   <no location info>: parse error (possibly incorrect indentation)
22:40:37 <aavogt> > vcat $ map hcat $ transpose $ map (map (text . show)) [[1,2],[4],[7,8,9]]
22:40:38 <lambdabot>   147
22:40:38 <lambdabot>  28
22:40:38 <lambdabot>  9
22:40:39 <ivanm> aavogt: you have a ( before map
22:40:42 <ivanm> ahhh, you found it
22:40:47 <Heffalump> ivanm: not sure how much, but I'd guess the patches back to the last tag would be linked, along with all of pristine
22:40:49 <jmcarthur> 7.92 seconds without --lazy
22:40:54 <ivanm> *nod*
22:40:59 <aavogt> > vcat $ map hsep $ transpose $ map (map (text . show)) [[1,2],[4],[7,8,9]]
22:40:59 <ivanm> jmcarthur: that's still pretty good
22:41:00 <lambdabot>   1 4 7
22:41:00 <lambdabot>  2 8
22:41:00 <lambdabot>  9
22:41:03 <ivanm> take _that_ darcs-haters!
22:41:05 <jmcarthur> ivanm: it's dang good
22:41:35 * ivanm -> home
22:41:36 <jmcarthur> git would surely be faster, but 8 seconds is well within tolerance limits
22:41:52 <Heffalump> we need to start benchmarking the kernel again
22:41:58 <jmcarthur> yeah seriously
22:42:04 <jmcarthur> i'm curious
22:42:37 <jmcarthur> if only darcs get was fast over the network
22:45:41 <o-_-o> I read somewhere that someone has opengl FRP examples on their blog, I looked at conal's blog, but couldn't find anything, anyone know any FRP opengl examples ?
22:47:49 <zeiris> When should list comprehensions be used? Are they inferior to a "do" syntax, but superior to a fold?
22:49:48 <aavogt> style is subjective, zeiris
22:50:10 <zeiris> True, just trying to  get some personal guideline.
22:50:37 <zeiris> I'm still uncomfortable with folds though, so I may be a little TOO excited about list comprehensions.
22:52:16 <pikhq> zeiris: The suggestion is fairly simple. "Use whatever's clearest".
22:52:45 <pikhq> You're not likely to be *too* far off.
22:55:07 <blackh> zeiris: I use list comprehensions whenever it's clearer than writing a whole lot of map ... filter ... concatMap
22:57:10 <zeiris> It doesn't seem to improve readability as much as I'd hoped :( "concatMap (\n->[n `shiftR` 4, n]) $ nums
22:57:10 <zeiris> " is about the same as "concat $ [[n `shiftR` 4, n] | n <- nums]
22:57:10 <zeiris> "
22:57:16 <psykotic> style is subjective in the sense that multiple styles are viable, but i do think there are definite underpinnings to what makes for good and bad style. for example, the way in which list comprehensions put the result in focus rather than the lists used to generate it.
22:57:25 <psykotic> this also ties into let vs where.
22:58:23 <psykotic> (haskell is opinionated in favor of where in a way that generally tips the balance)
22:58:52 * hackagebot direct-fastcgi 1.0.1.1 - Native implementation of the FastCGI protocol.  http://hackage.haskell.org/package/direct-fastcgi-1.0.1.1 (DanKnapp)
22:58:56 <glguy> [b | n <- nums , b <- [n `shiftR` 4 , n] ]
22:59:01 <dons> heyaa glguy
22:59:02 <glguy> if you wanted to get rid of the concat
22:59:10 <glguy> hello
22:59:25 <dons> oh, the concat is hidden then.
22:59:29 <blackh> zeiris: Sometimes it can increase readability a lot, but it depends on what you're doing.  Incidentally, I use a lot of: flip concatMap nums $ \n -> [n `shiftR` 4, n]
23:00:28 <dons> foo nums = [b | n <- nums, b <- [n `shiftR` 4, n]]
23:00:29 <dons> foo nums
23:00:29 <dons>   = let g_0 n = let f_1 b = b in L.map f_1 ([n `shiftR` 4, n]) in
23:00:29 <dons>       L.concatMap g_0 (nums)
23:00:47 * dons thinks we need more list comp desugaring tools
23:01:01 * psykotic wants monad comprehensions.
23:01:05 <aavogt> @type flip concatMap
23:01:05 <lambdabot> forall a b. [a] -> (a -> [b]) -> [b]
23:01:13 <sjanssen> dons: @undo?
23:01:14 <lambdabot> sjanssen: You have 1 new message. '/msg lambdabot @messages' to read it.
23:01:18 <aavogt> @type forM `asTypeOf` flip concatMap
23:01:19 <lambdabot>     Occurs check: cannot construct the infinite type: b = [b]
23:01:19 <lambdabot>       Expected type: [[b]]
23:01:19 <lambdabot>       Inferred type: [b]
23:01:25 <dons> we could add it to undo, i guess
23:01:45 <dons> @undo foo nums = [b | n <- nums, b <- [n `shiftR` 4, n]]
23:01:45 <sjanssen> @undo [x | x <- xs, odd x]
23:01:45 <lambdabot> foo nums = concatMap (\ n -> concatMap (\ b -> [b]) [n `shiftR` 4, n]) nums
23:01:45 <lambdabot> concatMap (\ x -> if odd x then [x] else []) xs
23:01:48 <dons> ah ha!
23:01:58 <dons> mmm. what desugaring is that?
23:02:05 <dons> looks suspiciously clean :)
23:02:17 <aavogt> it could simplify to filter odd...
23:02:34 <sjanssen> it's just like the monad desugaring, substituting concatMap for (>>=)
23:02:40 <dons> that's probb the h98 defn.
23:02:44 <aavogt> @type forM
23:02:45 <lambdabot> forall a (m :: * -> *) b. (Monad m) => [a] -> (a -> m b) -> m [b]
23:02:48 <sjanssen> yes, I think so
23:02:53 <dons> ghc usually uses the build/foldr desugaring though
23:03:07 <dons> and the one i had is the stream fusion desugaring (less nested concatMaps)
23:03:08 <Axman6> what would that turn into?
23:03:09 <zeiris> glguy, nice improvement I was wondering how to get rid of the concat :D
23:03:16 <psykotic> i'm surprised with the mass of ghc extensions that there isn't one for generalizing existing list comprehension syntax to monads
23:03:28 <dons> psykotic: everyone wants it, no one adds the patch
23:03:40 <Axman6> psykotic: it used to be there i believe
23:03:46 <glguy> psykotic: you mean a time machine?
23:03:47 <aavogt> at least in the AST for say TH or haskell-src-exts, list comprehensions have basically the same representation as do
23:03:57 <Axman6> wasn't there monad comprehensions?
23:04:08 <psykotic> dons: if only a smart and enterprising programmer with a deep knowledge of ghc were here... :)
23:04:09 <aavogt> go write a quasi-quoter?
23:04:46 <glguy> Template Haskell is the regular expression of meta programming
23:04:53 <psykotic> Axman6: it's in the original wadler papers (preceding do-notation) but i didn't know it was implemented in ghc.
23:05:45 <aavogt> in what respect, glguy?
23:05:48 <glguy> one issue is that there is an extension that allows for parallel list comprehensions
23:06:06 <glguy> aavogt, is the sense that when you think to use it to solve your problem you then have two problems
23:06:36 <aavogt> I think that statement applies to any solution
23:07:09 <Heffalump> psykotic: it was in the language standard for a while, pre H98
23:07:12 <glguy> No, I think that some solutions actually make things better
23:07:33 <Heffalump> and a quasi-quoter would be completely wrong for dealing with Haskell syntax
23:07:41 <psykotic> Heffalump: interesting. i guess since do notation is preferable most of the time, they didn't want the redundancy.
23:07:44 <Heffalump> cos you'd be giving up on proper typechecking etc
23:07:55 <aavogt> Heffalump: how do you mean?
23:08:05 <Heffalump> psykotic: a lot of changes went into H98 to make it easier to teach
23:08:06 <aavogt> quasi quoters are expanded before typechecking
23:08:27 <psykotic> nowadays the only one who programs to H98 is oleg :)
23:08:35 <Heffalump> aavogt: oh, actually, I guess it might work out ok
23:08:45 <psykotic> and more as a kind of ascetic masochism
23:08:52 <zeiris> Is there a way to pop off two elements via a list comprehension <-?
23:08:58 <aavogt> your type errors might be a bit less specific though
23:09:00 <Heffalump> zeiris: no
23:09:15 <o-_-o>  clearColor $= Color4 0 0 0 0, what is the meaning of $= ?
23:09:19 <aavogt> in that you may have to look at the -ddump-splices output
23:09:19 <Heffalump> if you want to do that consistently, zip the list with its tail
23:09:24 <aavogt> o-_-o: assignment
23:09:27 <Heffalump> and then drop every second element
23:09:37 <o-_-o> aavogt,
23:09:46 <glguy> [... | (a:y:_) <- tails xs , ... ]
23:10:09 <psykotic> zeiris: you can write a function that does that. group n [] = [] ; group n xs = (take n xs) : group (drop n xs) or something like that
23:10:24 <psykotic> or better, splitAt i guess
23:11:01 <psykotic> and then [x, x'] <- group 2 xs
23:12:15 <aavogt> o-_-o: yes?
23:12:24 <Axman6> psykotic: splitAt is just take and drop
23:12:35 <aavogt> @src splitAt
23:12:35 <lambdabot> splitAt n xs           =  (take n xs, drop n xs)
23:12:35 <psykotic> Axman6: yes, but in one iteration, rather than two.
23:12:45 <Axman6> @src splitAt
23:12:45 <lambdabot> splitAt n xs           =  (take n xs, drop n xs)
23:12:50 <aavogt> not in here though
23:12:59 <psykotic> @src is the official definition
23:12:59 <lambdabot> Source not found. Wrong!  You cheating scum!
23:13:10 <aavogt> haha
23:13:14 <psykotic> i'm actually not sure if ghc does it in a single traversal, but it should
23:13:40 <o-_-o> aavogt, where can I find more information about $= ?
23:13:59 <aavogt> @hackage hopengl
23:13:59 <lambdabot> http://hackage.haskell.org/package/hopengl
23:14:32 <aavogt> @hackage OpenGL
23:14:32 <lambdabot> http://hackage.haskell.org/package/OpenGL
23:15:18 <aavogt> just follow the links
23:15:45 <andersk> dankna: I’m intrigued by your suggestion that the cgi library has a bad exception API, because I was just about to take it over and fix that.
23:16:28 <andersk> My plan is to make it an instance of MonadCatchIO (see the recent libraries@haskell.org thread).
23:17:01 <dankna> andersk: hmmm, I'm pleased someone is reading that :)
23:17:33 <dankna> andersk: well, that seems like an interesting plan.  could I persuade you to instead devote your efforts to direct-fastcgi, haha?
23:18:02 <andersk> I very much like the idea of having a native implementation.
23:18:07 <dankna> I'd value your criticism of the way I handle exceptions in there.  It's not trivial to implement a custom monad, but it only took me a few minutes to do so knowing what I know.  Probably the docs should have an example of how to do that.
23:18:15 <dankna> Yeah, me too.  Everyone always does, haha.
23:18:23 <dankna> I just hope mine lives up to expectations.
23:19:07 <andersk> I haven’t scanned the API differences yet, but I’m hoping there’s some way we’ll be able to unify them and make your Network.FastCGI compatible with MonadCGI.
23:19:29 <dankna> it's conceivable.  they're not very similar at all.  I started out with that as a goal, but then I wound up redesigning one thing after another...
23:19:48 <dankna> but I did just port my web framework from one to the other with a bunch of fairly simple replaces
23:20:42 <andersk> If parts of the MonadCGI API need to change, I’m open to suggestions, especially if they can be implemented in a backwards-compatible way.
23:21:12 <dankna> well, one of the biggest things I changed is kind of a high-level issue
23:21:21 <dankna> MonadCGI performs all input at the start and all output at the end
23:21:33 <dankna> HTTP is actually more versatile than that - you can defer reading input (useful if it's large)
23:21:37 <dankna> and you can output a bit at a time
23:22:00 <dankna> and Network.FastCGI even lets you close the output stream and keep your handler thread running
23:22:18 <dankna> so in MonadCGI all handlers have type (MonadCGI m) => m CGIResult
23:22:29 <dankna> in mine they have type (MonadFastCGI m) => m ()
23:22:44 <dankna> because output is sent as actions rather than returned from the handler
23:23:30 <dankna> so my interface lets you write a superset of the stuff that MonadCGI lets you write.  so a compatibility layer would be possible, no doubt...
23:24:13 <andersk> Yeah.  I actually wanted that feature a few weeks ago, in fact.  You can kind of get around the problem with lazy IO, but that’s not a perfect solution.
23:24:18 <dankna> yeah, indeed
23:25:09 <dankna> oh, just an issue for your laundry list - check up on logCGI, figure out whether it works at all.  my recollection is that it does not.
23:25:23 <andersk> Alright.
23:25:31 <dankna> the protocol has support for sending an error stream to the server, so that it can handle the actual logging for you.  ideally it would use that.
23:26:59 <dankna> and keep me posted on your progress :)
23:27:05 <andersk> BTW, here’s a suggestion for your libarry: look at my plan for handling exceptions, since I think MonadCatchIO is better than a set of CGI-specific throw/catch functions.  http://www.haskell.org/pipermail/libraries/2010-March/013169.html
23:27:08 <andersk> I sure will.
23:27:10 <dankna> looking
23:27:42 <andersk> API for Control.Monad.CatchIO: http://hackage.haskell.org/packages/archive/MonadCatchIO-mtl/0.3.0.0/doc/html/Control-Monad-CatchIO.html
23:28:32 <dankna> hmm, that looks like basically what I did except renamed
23:28:39 <dankna> or rather, mine is the renamed one
23:28:49 <dankna> wasn't aware someone had already done it or I would have used that
23:29:12 <dankna> or maybe I wouldn't have, depending on how sound I judged that package to be, but still
23:31:56 <andersk> Yeah, it’s what you did except more generic, so you can use the same exception handling functions in different monads.
23:32:31 <dankna> yeah
23:38:18 <andersk> The ResponseHeadersAlreadySent and OutputAlreadyClosed exceptions feel a little ugly to me, in the sense that more specific types should be able to prevent that at compile time.
23:38:20 <Axman6> bens: thaks for putting your name down for AusHac2010 :)
23:38:50 <dankna> you're definitely right about the first one, that bears some thinking.
23:39:04 <dankna> I'm not seeing how types could avoid the second.
23:42:05 <dankna> actually, I'm not seeing how types could avoid either
23:42:06 <andersk> Well, they can’t if you just have fCloseOutput :: m (); the process of closing the output would have to look very different so that actions performed after closing the output have a different type.
23:42:06 <dankna> hrm
23:42:14 <dankna> yeah, I see
23:42:41 <dankna> but wouldn't that force users who are using their own monads to create multiple versions of them?
23:42:59 <iaefai> I wanted to have little project to do, and haven't done some real good haskell stuff for a while and was thinking that a game of Hammurabi would be an interesting project with a variation or two. Does that sound like a reasonably small project that can be completed without causing me to come down with monadic madness?
23:44:01 <andersk> Depends.  I’m vaguely imagining a system where reading operations are in a different monad than writing operations, and the writing monad is layered on top of the reading monad.  This is far from a fully formed idea.
23:44:31 <dankna> that's an interesting thought
23:45:43 <andersk> At the far extreme of type system madness, there exist session types <http://hackage.haskell.org/package/sessions> that solve this problem in full mind-boggling generality.
23:45:54 <andersk> But I don’t think we want to go quite that far.  :-)
23:46:04 <dankna> haha indeed
23:46:11 <dankna> has to be a solution I can understand :)
23:46:52 <aavogt> it could be easier to understand session types?
23:47:27 <dankna> you said it, not me
23:57:24 <dankna> okay, so I'm going to sleep.  thanks for reviewing my code!
23:57:52 <iaefai> As anyone ever done terminal FRP before?
23:58:03 <iaefai> Or rather an FRP implementation in a terminal / text window.
