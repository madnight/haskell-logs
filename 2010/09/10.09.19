00:00:24 <djahandarie> I think C is the most popular in Japan judging by the Japanese programmers I know
00:01:59 <kmc> judging by the programmers I talk to regularly, Haskell is the #1 language in the world
00:02:51 <djahandarie> According to this proggit thread OCaml is popular there
00:03:07 <pikhq> kmc: Followed closely by C, I presume.
00:03:42 <kmc> Lisp users are superior as human beings
00:04:16 <pikhq> Popularity has little to do with the quality of human beings involved.
00:04:33 <djahandarie> Yeah, you must train for years to be able to match all those parentheses
00:06:40 <winxordie> As opposed to training for years to learn category theory, but I'd guess so
00:09:38 <pikhq> winxordie: Years? Perhaps if you count the leadup to being able to think mathematically about things.
00:09:52 <pikhq> Buut that's kinda necessary just for programming well.
00:10:09 <pikhq> I should note here that there's a lot of people who do not program well at all.
00:11:20 <winxordie> pikhq: well with that sort of argumentation, as a kid I learned to match capital letters with periods in English sentences. parenthesis matching was easy compared to that.
00:13:14 <djahandarie> > let {addOne = (\x -> (x-1) + 2); addTwo = (\y -> (\z -> (fromIntegral . floor) (z/y) + 2) y);} in addOne $ addTwo $ 3 
00:13:15 <lambdabot>   4
00:13:22 <djahandarie> Ah crap
00:15:09 <djahandarie> > let {addOne = (\x -> (x-1) + 2); addTwo = (\y -> (\z -> (fromIntegral . floor) (z/y) + 4) y);} in addOne $ addTwo $ 3 
00:15:10 <lambdabot>   6
00:15:15 <djahandarie> Fixed!
00:16:17 <winxordie> djahandarie: n00bish question. how's the dot notation work -  the fromIntegral . floor thingy specifically?
00:16:35 <dark> @src (.)
00:16:35 <lambdabot> (f . g) x = f (g x)
00:16:36 <lambdabot> NB: In lambdabot,  (.) = fmap
00:17:01 <dark> willb, a . b is a function that applies b to the argument, then a
00:17:21 <dark> :t (.)
00:17:22 <lambdabot> forall a b (f :: * -> *). (Functor f) => (a -> b) -> f a -> f b
00:17:58 <winxordie> ty dark
00:18:07 <djahandarie> winxordie, it allows you to combine functions together... (a . b . c) x is a (b (c x))
00:18:24 <dark> :t floor
00:18:25 <lambdabot> forall a b. (RealFrac a, Integral b) => a -> b
00:18:52 <dark> willb, floor turns a RealFrac to Integral.. fromIntegral turns this Integral to any other type
00:19:01 <djahandarie> (Any Num type)
00:19:05 <djahandarie> :t fromIntegral
00:19:06 <lambdabot> forall a b. (Integral a, Num b) => a -> b
00:19:12 <djahandarie> :t fromIntegral . floor
00:19:13 <lambdabot> forall b a. (Num b, RealFrac a) => a -> b
00:19:36 <dark> willb, tabfail, sorry
00:20:31 <djahandarie> By the way, I was intentionally trying to write awful code earlier, don't try to learn from that :P
00:21:05 <winxordie> lol, I understood the code; I was just trying to understand what you were doing with the .'s
00:21:13 <winxordie> I swear I'm not *that* nubish
00:24:06 <djahandarie> > add a b = ((iterate (+1) 0) !! a) b in add 3 4
00:24:07 <lambdabot>   <no location info>: parse error on input `='
00:24:13 <djahandarie> > let add a b = ((iterate (+1) 0) !! a) b in add 3 4
00:24:13 <lambdabot>   3
00:24:23 <djahandarie> Oops
00:24:37 <djahandarie> > let add a b = ((iterate (+1) b) !! a) in add 3 4
00:24:38 <lambdabot>   7
00:24:52 <djahandarie> > let add a b = ((iterate (+1) b) !! a) in add 100000 4
00:24:52 <lambdabot>   100004
00:25:31 <djahandarie> > let add a b = ((iterate (+1) b) !! a) in add (maxBound::Int) 4
00:25:38 <lambdabot>   mueval: ExitFailure 1
01:10:24 <klugez> http://www.economist.com/node/17046637
01:10:35 <klugez> Opps, mispaste.
01:12:50 <kulin> is there a way to do (a -> b -> c) -> (d -> a) -> (e -> b) -> d -> e -> c   ?
01:13:26 <ManateeLazyCat> @hoogle (a -> b -> c) -> (d -> a) -> (e -> b) -> d -> e -> c 
01:13:27 <lambdabot> No results found
01:13:32 <dschoepe> @djinn (a -> b -> c) -> (d -> a) -> (e -> b) -> d -> e -> c
01:13:33 <lambdabot> f a b c d e = a (b d) (c e)
01:13:46 <lispy> yar
01:15:02 <kmc> @arr
01:15:02 <lambdabot> I want me grog!
01:15:02 <Baughn> @yar
01:15:02 <lambdabot> Get out o' me way, yeh landlubber
01:16:48 <kulin> thx dschoepe
01:18:03 <kulin> im not sure why i needed someone to show me that, hah, now that i look at it
01:19:45 <Baughn> @pl f a b c d e = a (b d) (c c d)
01:19:45 <lambdabot> f = (((const .) .) .) . flip flip (join id) . (((.) . ap) .) . (.)
01:20:42 <copumpkin> @type \f g h -> curry (uncurry f . (g *** h))
01:20:44 <lambdabot> forall a b c a1 b1. (a -> b -> c) -> (a1 -> a) -> (b1 -> b) -> a1 -> b1 -> c
01:20:59 <copumpkin> @pl \f g h -> curry (uncurry f . (g *** h))
01:20:59 <lambdabot> ((curry .) .) . (. (***)) . (.) . (.) . uncurry
01:21:25 <Baughn> @pl (***) * (***)
01:21:26 <lambdabot> (***) * (***)
01:23:35 <ManateeLazyCat> I have get json string, how to pick JSArray ?
01:23:48 * Cale seriously considers spending $172.80 on magnets
01:24:46 <Cale> ManateeLazyCat: You can use the json library to turn that string into a JSValue
01:24:59 <Cale> and pattern match on the JSArray constructor
01:25:49 <ManateeLazyCat> Cale: Yes, i use "decode jsonString", but ghci prompt me need add type information, i add "Result String", but looks not right.
01:26:24 <ManateeLazyCat> Cale: Let me try again.
01:26:40 <Cale> You want Result JSONValue
01:26:46 <Cale> er, JSValue
01:26:53 <Cale> Result JSValue
01:27:02 <ManateeLazyCat> Cale: Thanks, i try.
01:27:56 <ManateeLazyCat> Cale: "Result JSValue" works, thanks a lot! :)
01:28:17 <Cale> Depending on what you're doing, it may be easier to just directly decode an Array
01:28:33 <FunctorSalad> or use jsonb(?)
01:28:37 <ManateeLazyCat> Cale: I'm develop package GoogleTranslate. :)
01:28:43 <FunctorSalad> it's trivially typed and fast
01:28:50 <ManateeLazyCat> Cale: And return JSON data simple enough.
01:28:52 <FunctorSalad> (uses bs tries for objects)
01:30:49 <Cale> Prelude Text.JSON Data.Array> decode "[[0,\"hello\"],[1,\"there\"],[2,\"world\"]]" :: Result (Array Int String)
01:30:49 <Cale> Ok (array (0,2) [(0,"hello"),(1,"there"),(2,"world")])
01:31:53 <Cale> ^^ you can decode things naturally like that, if the data is in a simple enough form. For more complicated structures, you might be even better off writing a few instances of the JSON class
01:32:10 <ManateeLazyCat> Cale: Thanks. 
01:32:35 <Cale> Because then you don't have to worry about the whole structure at once, and can focus on encoding and decoding small parts of it.
01:35:34 <ManateeLazyCat> Cale: Google Translate return JSON data like this : "{"responseData": {"translatedText":"China"}, "responseDetails": null, "responseStatus": 200}"
01:35:51 <Cale> Ah, so that would be more naturally a Map
01:35:52 <ManateeLazyCat> Cale: Then i need pick "China" in {"translatedText":"China"}
01:38:47 <FunctorSalad> ... or a bs trie :)
01:39:10 <FunctorSalad> (any benchmarks?)
01:39:28 <McManiaC> case decode googleresponse of Ok ((valFromObj "responseData") -> Ok ((valFromObj "translatedText") -> Ok tr)) -> fromJSString tr
01:39:31 <McManiaC> or sth like this
01:39:34 <McManiaC> :D
01:39:38 <kmc> heh
01:40:24 <kmc> hpaste down?
01:40:31 <McManiaC> use npaste.de :)
01:40:51 <FunctorSalad> kmc: no
01:40:59 <kmc> there it goes
01:41:00 <FunctorSalad> amelie is up and kicking
01:43:27 <ManateeLazyCat> McManiaC: Wow!
01:44:28 <Cale> > valFromObj "translatedText" =<< valFromObj "responseData" =<< decode "{\"responseData\": {\"translatedText\":\"China\"}, \"responseDetails\": null, \"responseStatus\": 200}" :: Result String
01:44:28 <Cale> Ok "China"
01:44:29 <lambdabot>   Not in scope: type constructor or class `Result'Not in scope: `valFromObj'N...
01:44:45 <Cale> oh, right, should set my prompt better to prevent that :P
01:44:50 <McManiaC> hehe
01:45:28 <Cale> ManateeLazyCat: ^^ Result is a monad, so you can do it like that
01:45:38 <ManateeLazyCat> Cale: McManiaC Thank you very much! My GoogleTranslate finish now.
01:45:58 <ManateeLazyCat> Integrate in irc client to try "multiple language discuss" . :)
01:46:29 <Cale> http://zenmagnets.com/index.php?p=1_7 -- I'm thinking of getting these :)
01:47:20 <ManateeLazyCat> Cale: When McManiaC paste code, i wonder how neat to pick value from JSON data. :)
01:47:43 <Baughn> ..why do I get the feeling you're *already* using gtranslate?
01:48:01 <ManateeLazyCat> Baughn: Not yet. :)
01:48:25 <Cale> ManateeLazyCat: Yeah, you can pretty much rely on the typeclass machinery to pick out the right instance of the JSON class based on how you pattern match
01:49:52 <McManiaC> Baughn: :D
01:50:03 <Cale> getTranslation :: String -> Result String; getTranslation = valFromObj "translatedText" <=< valFromObj "responseData" <=< decode
01:50:18 <Cale> This is a nice place to use the fish operator :)
01:50:36 <McManiaC> Cale: what if a pattern match fails in the Result monad?
01:50:42 * Baughn always thought of that as the dogfight operator
01:50:50 <McManiaC> haha
01:50:50 <Cale> McManiaC: You get an Error
01:51:02 <Cale> data Result a = Ok a | Error String
01:51:09 <Cale> It's another name for the Either String monad
01:51:25 <McManiaC> k
01:51:55 <Cale> (It implements fail using Error)
01:52:27 <McManiaC> its always difficult to see when you can safely use pattern matching in do-blocks and when they'll cause an exception on failure :(
01:52:29 <Cale> and valFromObj produces a nice Error message explicitly anyway
01:52:49 <Cale> valFromObj :: JSON a => String -> JSObject JSValue -> Result a
01:52:50 <Cale> valFromObj k o = maybe (Error $ "valFromObj: Could not find key: " ++ show k)
01:52:50 <Cale>                        readJSON
01:52:50 <Cale> 		       (lookup k (fromJSObject o))
01:53:20 <Cale> ooh, looks like some tabs got left in the Text.JSON source code :)
01:53:57 <kmc> hpaste is being incredibly slow for me
01:54:06 <FunctorSalad> where does the either monad get the error string from anyway? unsafePerformIO catch?
01:54:24 <Baughn> @type fail
01:54:24 <Cale> Well, Either String ...
01:54:25 <lambdabot> forall (m :: * -> *) a. (Monad m) => String -> m a
01:54:35 <kmc> instance (Error e) => Monad (Either e)
01:54:45 <Cale> Either String can just implement fail as Left
01:54:48 <kmc> class Error a where { noMsg :: a; strMsg :: String -> a }
01:55:01 <FunctorSalad> > do { 0 <- Right 1; return 2; } 
01:55:02 <lambdabot>   Ambiguous type variable `a' in the constraints:
01:55:02 <lambdabot>    `Control.Monad.Error.Cla...
01:55:05 <Baughn> > do 4 <- Right 2; return 3
01:55:05 <lambdabot>   Ambiguous type variable `a' in the constraints:
01:55:06 <lambdabot>    `Control.Monad.Error.Cla...
01:55:15 <Baughn> > do 4 <- Right 2; return 3 :: Either String Int
01:55:16 <lambdabot>   Left "Pattern match failure in do expression at <interactive>:1:148"
01:55:35 <kmc> anyway ManateeLazyCat, McManiaC http://codepad.org/jysykPWT is my little library to traverse JSONb
01:56:06 <FunctorSalad> I know about Error, I meant where the string comes from in the first place... but it's passed as the argument to 'fail', by ghc duh
01:56:21 <ManateeLazyCat> kmc: Thanks for share code . :)
01:56:23 <Cale> FunctorSalad: oh, I see
01:56:34 <Cale> FunctorSalad: Yeah, I guess I didn't realise what you were asking :)
01:56:40 <McManiaC> kmc: nice :)
01:56:43 <yitz> > fail :: Either String Int
01:56:44 <lambdabot>   Couldn't match expected type `Data.Either.Either
01:56:44 <lambdabot>                           ...
01:56:51 <FunctorSalad> (remove specious comma there)
01:57:00 <Cale> > fail "foo!" :: Either String Int
01:57:01 <lambdabot>   Left "foo!"
01:57:10 <kmc> :t fail
01:57:11 <lambdabot> forall (m :: * -> *) a. (Monad m) => String -> m a
01:57:19 <kmc> > fail "bleh" :: Maybe Int
01:57:20 <lambdabot>   Nothing
01:57:29 <kmc> > fail "bleh" :: () -> ()
01:57:29 <FunctorSalad> Cale: forgot to mention that I'm talking about failed pattern matches ;)
01:57:30 <lambdabot>   Overlapping instances for GHC.Show.Show (() -> ())
01:57:30 <lambdabot>    arising from a use of...
01:57:56 <Cale> fail is fail though, you should try not to rely on it being a member of Monad
01:58:05 <Baughn> fail fails. You just /know/ someone's going to pass its input through a parser at some point..
01:58:29 <yitz> > do 4 <- Right 2 :: Either String Int
01:58:30 <lambdabot>   <no location info>:
01:58:30 <lambdabot>      The last statement in a 'do' construct must be an ...
01:58:37 <McManiaC> error /= exception
01:58:41 <Cale> I really dislike things which use (Monad m) => m a and fail when they should be using Maybe a or Either String a
01:58:43 <yitz> > do 4 <- Right 2; return 3 :: Either String Int
01:58:43 <lambdabot>   <no location info>: lexical error at character '\FS'
01:59:08 <FunctorSalad> Cale: why? you can always spec to the latter
01:59:28 <Cale> FunctorSalad: You can go back the other way as well, but Maybe a and Either String a are clearer.
01:59:30 <yitz> > do 4 <- Right 2; return 3 :: Either String Int
01:59:31 <lambdabot>   <no location info>: lexical error at character '\FS'
01:59:49 <yitz> > do 4 <- Right 2; return 3 :: Either String Int
01:59:50 <lambdabot>   Left "Pattern match failure in do expression at <interactive>:1:148"
02:00:01 <Cale> FunctorSalad: failure isn't something that's really part of the definition of what a monad is generally
02:00:47 <yitz> Now why doesn't that call "fail"?
02:00:56 <Cale> It does
02:01:12 <yitz> oh I see, Left "..."
02:01:13 <Cale> That's why you're getting a Left
02:01:34 <yitz> I'm so used to mplus instances
02:01:41 <ManateeLazyCat> Have "fromJSString_ :: JSString -> ByteString" ?
02:01:48 <FunctorSalad> Cale: but OTOH it's 'error' in the worst case, which we have anyway
02:01:51 <yitz> *MonadPlus
02:02:23 <Cale> My opinion would be somewhat different if it were something like (MonadFail m) => m a and people only wrote good instances of MonadFail for monads that handled failure properly.
02:03:13 <FunctorSalad> so it seems ok as a replacement in positions where you'd use error otherwise
02:03:14 <Cale> I liked the translation of do-notation in Haskell 1.4
02:03:23 <FunctorSalad> and happen to be in a monad
02:03:28 <Cale> I have no idea why they felt the need to change it in 98
02:03:37 <yitz> FunctorSalad: then why not use error?
02:03:49 <ManateeLazyCat> Char8.pack won't cut unicode.... :)
02:04:08 <yitz> FunctorSalad: the danger is that someone reading the code might think it is a well-behaved fail, then later you get an unexpected crash
02:04:11 <Cale> FunctorSalad: Better to use a specific monad which conveys exactly how much information you have about the error, and more clearly expresses the idea that you might fail.
02:04:12 <FunctorSalad> yitz: hope for but not reliance on the error being handled better with 'fail'?
02:04:30 <Cale> (Like Either String, or Maybe)
02:05:04 <Cale> ManateeLazyCat: See the text package
02:05:08 <FunctorSalad> I meant in a case where you would prefer 'error' to Either or Maybe because of the rarity of the condition
02:05:18 <Cale> http://hackage.haskell.org/package/text
02:05:45 <FunctorSalad> 'Either' or 'Maybe' return types do clutter things up quite a bit
02:05:50 <ManateeLazyCat> Cale: I "Char8.pack :: String -> ByteString" is okay. :)
02:06:17 <Cale> ManateeLazyCat: That'll misencode anything which isn't ASCII
02:06:32 <yitz> FunctorSalad: for programs in the lab where you don't care if they crash, it doesn't really matter what you do. For programs that need robustness, you need to be very clear in your code about the danger of a crash.
02:06:59 <Cale> http://hackage.haskell.org/packages/archive/text/0.8.1.0/doc/html/Data-Text-Encoding.html
02:07:24 <FunctorSalad> yitz: but isn't catching exceptions still more readable for rare errors with the latter, than Maybe?
02:07:40 <ManateeLazyCat> Cale: Maybe i don't need convert String to ByteString when get translation from Google.
02:07:44 <Cale> ManateeLazyCat: You can use Data.Text.pack to turn String into Text, and then use one of the encoding functions in that module to encode the text properly into a ByteString with the right encoding.
02:07:47 <FunctorSalad> they're out of the way of the main path
02:08:12 <yitz> FunctorSalad: then explicitly throw the exception, so that it will jump out at people who are reading the code later
02:08:22 <Cale> ManateeLazyCat: Or yeah, just make sure the encoding for the socket is set to UTF-8 and use String IO
02:08:31 <ManateeLazyCat> Cale: Yes.
02:08:37 <ManateeLazyCat> Cale: Then don't need convert. :)
02:08:38 <FunctorSalad> yitz: hmm fair enough :)
02:08:54 <FunctorSalad> and document it in the haddock of course
02:08:58 <Cale> hSetEncoding hdl utf8
02:09:18 <ManateeLazyCat> Cale: Thanks.
02:09:36 <yitz> FunctorSalad: really, fail should be clear enough, but there is such a widespread misconception about it that using it has the potential for creating catastrophic bugs in almost any context
02:09:41 <ManateeLazyCat> Cale: I use openURIString, need check source code.
02:09:44 <ManateeLazyCat> @hoogle openURIString
02:09:45 <lambdabot> No results found
02:09:46 <FunctorSalad> hey shouldn't we have automatic 'throws' propagation like java? ;) not everything java has is automatically bad, is it ;)
02:10:09 <Cale> ManateeLazyCat: Oh, is the text to translate just URI encoded?
02:10:19 <yitz> FunctorSalad: pure exceptions (Either, ErrorT) do that
02:10:20 <FunctorSalad> even if it ultimately does nothing, it's some useful info
02:10:28 <ManateeLazyCat> Cale: Other way, add utf-8 information in Google url request
02:11:00 <ManateeLazyCat> Cale: I use Codec.Binary.Url.encode.
02:12:04 <FunctorSalad> yitz: I meant just as some "epiphenomenal" tag attached to functions
02:12:06 <juhp> ManateeLazyCat: strange now I can't get webkit to build on one machine... Invalid character in input file: MSTRI
02:12:07 <Cale> You can also apparently use a POST request
02:12:21 <FunctorSalad> yitz: for automatic inclusion in the haddock, maybe
02:12:34 <yitz> FunctorSalad: type annotation is a pretty good epiphenomenal tag
02:12:49 <ManateeLazyCat> Cale: Google not allowed if you use non-javascript code.
02:13:00 <ManateeLazyCat> Cale: Like http way, just allowed GET request.
02:13:13 <FunctorSalad> yitz: well, an Either return type *does* do something ;)
02:13:18 <FunctorSalad> (you have to handle it)
02:13:29 <ManateeLazyCat> juhp: Can you paste all error information ?
02:13:34 <Spockz> can someone maybe help me with generating this fold over a GADT? http://gist.github.com/586611 I have the fold in an `ugly' version. But now I want to create a nicer less bloated fold function. But I can't get the types to correspond, an issue I didn't have before GADT.
02:13:34 <FunctorSalad> I just don't like how it tends to clutter the main path
02:13:54 <FunctorSalad> that Either is a monad usually doesn't help IMHO
02:14:31 <yitz> FunctorSalad: not really. If you are using do notation and you ignore Left, it will just pattern-match-fail and propogate.
02:14:32 <FunctorSalad> (you might already be in a different monad, or you might not want to make your whole pure function monadic just for a rare condition)
02:15:12 <ManateeLazyCat> juhp: Have file MSTRI in webkit package?
02:15:12 <Cale> ManateeLazyCat: I suppose it's just up to whether the URI library encodes UTF8 properly then.
02:15:30 <Cale> I bet it does...
02:15:31 <ManateeLazyCat> Cale: Yeap that's simplest way. :)
02:15:51 <yitz> FunctorSalad: true
02:16:26 <ManateeLazyCat> Cale: Maybe i can build two APIs : translate and translateByteString in package 'GoogleTranslate'.
02:17:07 <yitz> FunctorSalad: the notation may be slightly more verbose in that situation. But you function really *is* monadic if you are explicitly including in its semantics the possibility of propagating and out-of-band exception. So it's better to express that in the type.
02:17:19 <FunctorSalad> (more accurately: make your whole function source code use monadic syntax; of course monads don't matter for the ultimate *function*)
02:17:20 <ManateeLazyCat> juhp: Best to do "cabal clean" before "cabal install" . :)
02:17:54 <FunctorSalad> isn't "Monad" excessive structure for exception propagation?
02:18:01 <juhp> ManateeLazyCat: http://hpaste.org/30198/webkit_invalid_mstri
02:18:08 <juhp> yeah I tried that too
02:18:14 <kmc> Spockz, looking
02:18:15 <FunctorSalad> seems like exception propagation doesn't require sequencing
02:18:28 <kmc> Spockz, did you try to put a signature on f?
02:18:31 <juhp> ah maybe I need to rebuild glib with newer gtk2hs-buildtools?
02:18:32 <juhp> sigh
02:18:33 <geheimdienst> like jetlag when coming in to a new timezone, there is an adjustment period when coming in to #haskell. you join, you hear words like epiphenomenal, you go "halp where am i? what are these people? what are they smoking?" then you remember "oh right -- #haskell. exhale. open a tab with www.dictionary.com and relax. it's all right."
02:18:36 <Spockz> kmc: yes at the bottom?
02:18:38 <kmc> ah yes, you did
02:18:38 <ManateeLazyCat> juhp: Have you update package 'gtk2hs-buildtools' ?
02:18:48 <juhp> ManateeLazyCat: yes
02:18:53 <kmc> hmm you need that r to be the same as the other r
02:18:55 <FunctorSalad> geheimdienst: I was being slightly tongue-in-cheek ;)
02:19:00 <Spockz> kmc: indeed :)
02:19:00 <kmc> so turn on the ScopedTypeVariables extension
02:19:10 <kmc> and write it foldRep :: forall r. RepAlgebra r -> Rep a -> r
02:19:11 <Cale> ManateeLazyCat: If you're dealing with unicode text, the Text datatype is much nicer than ByteString, and just as efficient.
02:19:11 <juhp> ManateeLazyCat: do I need to rebuild the whole stack?
02:19:12 <Lemmih> FunctorSalad: It does if you want it to be deterministic, I think.
02:19:16 <ManateeLazyCat> juhp: Newest glib package?
02:19:18 <geheimdienst> FunctorSalad: slightly, eh? ;-)
02:19:31 <ManateeLazyCat> Cale: Because gtk2hs API
02:19:32 <FunctorSalad> geheimdienst: it's usually used to describe a form of mind-matter dualism where matter affects mind, but not the other way
02:19:32 <yitz> FunctorSalad: I guess that's a matter of taste. Other might say that adding an entirely new way of tracking exception handling to the language is far more excessive structure.
02:19:52 <ManateeLazyCat> Cale: We use ByteString API, and don't need consider encode information
02:19:58 <Spockz> kmc: then it complains about a not being in scope
02:20:05 <kmc> where?
02:20:09 <yitz> FunctorSalad: it would immensely complicate the semantics of the language
02:20:14 <ManateeLazyCat> Cale: If use text package, we need handle encode/decode operation in gtk2hs, Axel don't like that.
02:20:35 <Cale> ManateeLazyCat: I was about to suggest it :)
02:20:42 <Spockz> kmc:  on the foldRep` :: .. line
02:20:46 <ManateeLazyCat> juhp: Any problem with "ghc-pkg check"
02:20:55 <FunctorSalad> yitz: yeah but that's a different kind of complication :)
02:20:57 <kmc> Spockz, forall r a.  … then?
02:20:57 <Spockz> and if I add to a to the quantifier I get the following
02:21:08 <ManateeLazyCat> Cale: Infact, newest release package just have String interface.
02:21:23 <ManateeLazyCat> Cale: I add some ByteString APIs in darcs gtk2hs to support my irc client. :)
02:21:39 <FunctorSalad> yitz: I was hoping that we already have an existing abstraction that fits ;)
02:21:40 <yitz> FunctorSalad: right. as I said, a matter of taste. Haskell's style is notably different than Java's.
02:22:30 <yitz> FunctorSalad: well we do - it's just not as neat lexically in this particular situation as what you are suggesting 
02:22:35 <FunctorSalad> Lemmih: hmm because choice of evaluation order would affect *which* exception is thrown in a code that would throw more than one if everything is evaluated?
02:22:49 <ManateeLazyCat> Cale: Maybe better way is build Text interface in 'GoogleTranslate', then user can use text package convert Text to String or ByteString. 
02:22:49 <FunctorSalad> (that'd seem acceptable at first glance...)
02:22:56 <chrisdone> guten tangle
02:23:08 <FunctorSalad> chrisdone: hi
02:23:10 <Spockz> kmc: http://gist.github.com/586611 << at the bottom
02:23:13 <FunctorSalad> how's amelie? :)
02:23:37 <kmc> Spockz, hmm, makes sense
02:23:38 <Peaker_> FunctorSalad, I think maybe it does require sequencing -- as different orders imply different data dependencies, which may fail differently
02:23:54 <kmc> ah, ok
02:23:57 * geheimdienst waves non-threateningly in the general direction of chrisdone
02:24:11 <Cale> ManateeLazyCat: yeah
02:24:17 <kmc> try this Spockz: foldRep' :: forall r a. RepAlgebra r -> Rep a -> r;  f :: forall b. Rep b -> r
02:24:39 <chrisdone> FunctorSalad: happy now it's got a new domain. I just fixed a small bug that just happened to show itself when glguy pasted something
02:24:52 <ManateeLazyCat> Cale: Thanks for your suggestion, change 'GoogleTranslate' API with Text
02:24:58 <kmc> (strictly speaking that last forall shouldn't be necessary, it just needs a distinct name, but in for ¢ in for £…)
02:25:09 <Spockz> kmc: that compies
02:25:12 <kmc> :)
02:25:15 <ManateeLazyCat> juhp: Check webkit/marshal.list, search MSTRING
02:25:21 <Spockz> now let's test it :P
02:25:31 <kmc> Spockz, does it make sense why we need these types?
02:25:37 <kmc> it took me a while to get there but i think i do understand why
02:25:37 <FunctorSalad> Peaker_: yeah but do you usually care which of two independent problems you report? or which one you try to recover from first before reattempting
02:25:56 <ManateeLazyCat> juhp: I doubt you modified marshal.list that change MSTRING to MSTRI, then gtk2hsbuildtools can't handle MSTRI
02:26:10 <FunctorSalad> I'm thinking of something like two 'string' user inputs both failing to parse as an integer
02:26:27 <ManateeLazyCat> juhp: In marshal.list just have "NONE:MSTRING,MSTRING" now. :)
02:26:37 <Spockz> kmc: well by quantifiying they become `equal' or at least. If it holds for any a, at some point and for all a at some other point they are equal
02:27:15 <Spockz> kmc:  the only bad thing now is that I have to use ImpredicativeTyeps
02:27:26 <kmc> for your RepAlgebra?
02:27:27 <chrisdone> ImpredicativeTyeps are deprecated right?
02:27:42 <juhp> ManateeLazyCat: right - I am puzzled...
02:27:50 <kmc> if you replace RepAlgebra with a newly defined type
02:27:55 <kmc> then you won't need ImpredicativeTypes
02:27:59 <kmc> and i think that's better anyway
02:28:08 <ManateeLazyCat> juhp: Fix now ?
02:28:12 <kmc> in fact, make it a record, and use RecordWildCards to unpack it in foldRep
02:28:42 <Spockz> kmc: indeed for the RepAlgebra
02:28:43 <FunctorSalad> chrisdone: the error msg even threatens removal in 6.14 iirc
02:29:01 <FunctorSalad> which will never exist, lol
02:29:02 <juhp> ManateeLazyCat: nope - I'll try to build glib et al
02:29:02 <dolio> Good thing 6.14 isn't ever going to be released, anymore.
02:29:09 <juhp> rebuild
02:29:11 <chrisdone> FunctorSalad: no one expects the GHC deprecation! its chief weapon is surprise!
02:29:18 <FunctorSalad> haha
02:29:45 <ManateeLazyCat> juhp: Tell me if you still have problem after rebuild.
02:29:49 <FunctorSalad> reminds me of that emacs lisp(?) compilation warning...
02:30:02 <FunctorSalad> "FOO has been deprecated for more than ten years and will be removed soon"
02:30:14 <chrisdone> hahaha
02:30:22 <Spockz> kmc: can you help me a bit with what you mean with `a newly defined type'?
02:30:24 <kmc> my favorite are the features in the Linux kernel which are marked "DEPRECATED, EXPERIMENTAL"
02:30:25 <geheimdienst> bash's manpage says "BUGS: It's too big and too slow."
02:30:30 <dolio> ImpredicativeTypes is an actual threat.
02:30:31 <FunctorSalad> kmc: lolol
02:30:40 <dolio> I imagine it's gone already in HEAD.
02:30:48 <ManateeLazyCat> juhp: I have finish 'GoogleTranlsate' package, we can use we own language discuss in irc channel . :)
02:31:02 <juhp> hehe :-)
02:31:05 <dolio> Since they rewrote the type checker.
02:31:09 <chrisdone> juhp: that sounds cool :-)
02:31:17 <geheimdienst> kann ich sowieso schon, meine eigene sprache verwenden im irc-channel
02:31:19 <chrisdone> ManateeLazyCat: er, that sounds cool :-)
02:31:26 <ManateeLazyCat> chrisdone: Hehe. :)
02:31:49 <chrisdone> ManateeLazyCat: your translator would probably say "I hear coldness from yonder"
02:32:04 <ManateeLazyCat> chrisdone: :)
02:32:14 <kmc> Spockz, data RepAlgebra r = RepAlgebra { unit, int, char, string :: r,  sum, prod :: ∀a b. a → b → r,  con :: ∀a. String → a → r,  ty :: ∀a. EP a b → r → r }
02:32:14 <geheimdienst> lost in translation, lol in translation
02:32:39 <kmc> Spockz, not crucial to make it records, i just think it's a nice fit
02:32:56 <chrisdone> geheimdienst: ;D
02:33:00 <Spockz> kmc: why does that ImpredicativeTypes problem only apply to type synonyms?
02:33:04 <kmc> because then with -XRecordWildCards you can say foldRep RepAlgebra{..} = f where .. same stuff ..
02:33:28 <kmc> Spockz, the problem is that you're instantiating the polymorphic type constructor (,,,,,,,) at a polymorphic type
02:33:51 <Spockz> kmc: does it apply unit automatically to the RepAlgebra{..} parameter then e.g.?
02:34:06 <kmc> other examples of impredicative types include  [∀ a. a]  and   «Maybe (∀ a. a → Char)»
02:35:02 <kmc> but the "data" definition above does not instantiate anything; it's defining a new type, whose fields are polymorphic (hence you need RankNTypes or PolymorphicComponents)
02:36:07 <Spockz> it's funny how you need a lot of other extensions when you start using another
02:36:13 <kmc> yeah
02:36:34 <kmc> the RecordWildCards thing is just optional syntactic sugar
02:36:46 <kmc> and i think RankNTypes might be implied by GADTs anyway
02:37:14 <kmc> not sure
02:37:36 <Spockz> kmc: the only less nice thing now is that you have this naming/scoping problem
02:37:48 <Spockz> because of the record accessors
02:38:05 <chrisdone> Spockz: just name them
02:38:34 <Spockz> chrisdone: yes but maybe you force someone using qualified when he imports your module
02:38:53 <chrisdone> so?
02:39:16 <Spockz> chrisdone: it's not a big deal but still
02:39:35 <chrisdone> what's the problem you're describing?
02:39:44 * juhp really doesn't to run gtk2hs.darcs
02:39:52 <juhp> I think we should have a #haskell-gui
02:40:27 <chrisdone> includePrefs RV.Reviewer{id=uid,name,email} = ...
02:40:29 <chrisdone> no problem
02:40:51 <ManateeLazyCat> juhp: I hope one day none will use gtk2hs darcs.
02:40:59 <chrisdone> of course, that needs {-# LANGUAGE NamedFieldPuns, DisambiguateRecordFields #-}
02:41:29 <ManateeLazyCat> juhp: You need check your WM, i doubt some program filter M-* keystroke make manatee can't got those keystores.
02:41:37 <ManateeLazyCat> juhp: I have test with WM in gnome works fine.
02:41:51 <Spockz> chrisdone: didn't know about those, thanx
02:42:30 <juhp> ManateeLazyCat: ok - yeah I should just have logged out - "A few hours of rebuilding can save starting a new desktop session ;o)" :)
02:43:42 <ManateeLazyCat> juhp: If you want play manatee, you must use gtk2hs darcs, otherwise can't work.
02:43:51 <juhp> ManateeLazyCat: sigh - same error
02:44:20 <wjt> gtk2hs people: is there a template for new g-library bindings? I'm looking into binding goocanvas
02:44:22 <juhp> I think I will logout ;o)
02:44:35 <ManateeLazyCat> juhp: Have you check webkit/marshal.list ?
02:44:45 <juhp> yea
02:45:07 <chrisdone> Spockz: yeah I've found them really helpful
02:45:13 <ManateeLazyCat> juhp: At line 61 have "NONE:MSTRING,MSTRING" ?
02:45:16 <kmc> Spockz, well, you could do it without records
02:45:24 <juhp> this is no MSTRI in the unpacked package
02:45:56 <kmc> data RepAlgebra r = RepAlgebra r r r r (∀ a b. a → b → r) (∀ a b. a → b → r) (∀ a. String → a → r) (∀ a b. EP a b → r → r)
02:46:09 <kmc> personally i don't like to use data types that have that many unlabeled components
02:46:09 <ManateeLazyCat> juhp: If no "NONE:MSTRING,MSTRING" in webkit/marshal.list, add it and rebuild webkit package.
02:46:10 <Spockz> kmc 	indeed
02:46:20 <juhp> ManateeLazyCat: heh it is there
02:46:37 <kmc> and using the record syntax is optional with records
02:46:46 <juhp> wjt: ManateeLazyCat can probably help you
02:46:56 <ManateeLazyCat> juhp: Please post you marshal.list, let me check. :)
02:46:59 <kmc> your users are free to hide the selectors and use your type positionally
02:47:31 <juhp> I think I will just rm -r .ghc and start again later
02:47:49 <ManateeLazyCat> juhp:I think it's not problem of ghc
02:47:53 <wjt> I take it the gobject-introspection SoC project didn't go anywhere? :(
02:48:13 <ManateeLazyCat> wjt: Binding any gobject base library don't need gobject-introspection
02:48:26 <llaarrll> hello 
02:48:26 <wjt> sure
02:48:27 <ManateeLazyCat> wjt: Well, gobject-introspection will make we binding faster.
02:48:30 <wjt> but ... exactly
02:48:39 <juhp> ManateeLazyCat: alright if you really to see it... I am on another machine - and don't like 2 kbds :)
02:48:50 <llaarrll> anyone have any problems with ghci delete on snow leopard?
02:48:59 <llaarrll> del key isnt working
02:49:28 <ManateeLazyCat> juhp: From error information, it's something wrong when gtk2hsHookGenerator handle signal code.
02:49:29 <wjt> great. the clutterhs git repo has vanished
02:50:43 <juhp> ManateeLazyCat: I know
02:50:48 <juhp> it is just a vanilla webkit - should I use darcs?
02:50:48 <ManateeLazyCat> wjt: So you want binding GooCanvas? from it's aim, it's looks cool. :)
02:52:42 <Spockz> kmc: you've got a excellent point there, thanks a million :D
02:53:08 <ManateeLazyCat> juhp: Wait, i re-install webkit-0.11.2 for test.
02:53:08 <juhp> ManateeLazyCat: but it is working fine on my laptop...
02:53:48 <ManateeLazyCat> wjt: AFAIK, you can binding GooCanvas well and don't need help of gobject-introspection
02:55:07 <juhp> ManateeLazyCat: I'll just try manatee into metacity and then brb
02:55:11 <juhp> in
02:55:26 <ManateeLazyCat> juhp: Now support nick color 
02:55:38 <juhp> yeah cool
02:55:50 <juhp> if only I could use M-...
02:55:52 <ManateeLazyCat> juhp: I can finish 'GoogleTranlsate' in 10 minutes, if no one call me from now.
02:56:06 <juhp> haha - just quit irc ;)
02:56:36 <juhp> let me show you :_)
02:56:47 <ManateeLazyCat> juhp: Bye all, i need coding now. Back soon. :)
02:57:12 <wjt> ManateeLazyCat: well, obviously one *can* bind it without g-i. I was just hoping that the SoC project would make the whole thing easier
03:00:14 <manateeUser> damn it is bluetile it seems
03:01:56 <manateeUser> ManateeLazyCat: it works in metacity
03:02:30 <juhp> oh he followed me...
03:08:25 <ManateeLazyCat> juhp: Your WM allowed XEmbedded protocol? If not, manatee daemon process can't send GdkEvent to render process.
03:09:19 <ManateeLazyCat> juhp: Quick test, open manatee/Manatee/Daemon.hs, jump to 90 line, have debug line.
03:09:20 <juhp> ManateeLazyCat: ok I see thanks - I will check - sounds like that could be the problem
03:09:31 <juhp> ok
03:09:39 <ManateeLazyCat> juhp: uncomment that line.
03:09:43 <juhp> I can go back and try now
03:10:02 <ManateeLazyCat> juhp: Then you can found keystroke information if daemon process got M-* keystore.
03:10:26 <juhp> ManateeLazyCat: also at startup - I can't input unless mouse is in finder field I think
03:10:50 <juhp> or the pointer even
03:10:54 <ManateeLazyCat> juhp: If daemon process can receive M-* keystroke and render process no response, it's a problem of WM that don't support XEmbedded protocol.
03:11:04 <juhp> hm
03:11:10 <juhp> let me try it
03:11:30 <ManateeLazyCat> juhp: When you open webkit, you can use mouse?
03:11:40 <juhp> sure
03:11:46 <ManateeLazyCat> juhp: I know where the problem.
03:11:53 <juhp> problem is kbd
03:12:03 <ManateeLazyCat> juhp: You startup DBus daemon when you login WM ?
03:12:16 <ManateeLazyCat> juhp: We need use DBus send GDkEvent.
03:12:20 <juhp> ah
03:12:32 <ManateeLazyCat> juhp: If you can use mouse in browser, XEmbedded protect support well.
03:12:46 <ManateeLazyCat> juhp: If any keystroke can't response?
03:12:51 <ManateeLazyCat> juhp: Or just some keystroke?
03:13:08 <juhp> ManateeLazyCat: M-
03:13:23 <ManateeLazyCat> juhp: Hmm, best uncomment debug line and test.
03:13:30 <ManateeLazyCat> juhp: Otherwise i'm not sure where the problem.
03:14:19 <juhp> ManateeLazyCat: probably dbus now I suspect
03:14:24 <juhp> as you said
03:14:44 <ManateeLazyCat> juhp: If DBus can't work, why render process can display?
03:15:00 <ManateeLazyCat> juhp: If DBus can't work, any DBus signal from render process can't send to daemon process.
03:15:15 <juhp> hm
03:15:24 <juhp> ManateeLazyCat: or a focus issue perhaps?
03:15:27 <ManateeLazyCat> juhp: Then you can't see any sub-module in manatee.
03:15:54 <ManateeLazyCat> juhp: If focus current sub-module, manatee will draw *blue* line around current window.
03:16:07 <juhp> ManateeLazyCat: yes
03:16:30 <juhp> ManateeLazyCat: I thought it was working now but seems not with bluetile
03:18:11 <ManateeLazyCat> juhp: It's perhaps something wrong bluetile.
03:18:31 <ManateeLazyCat> juhp: Maybe bluetile not support some Window properties complete.
03:19:38 <juhp> ManateeLazyCat: quite likely
03:20:01 <juhp> ManateeLazyCat: I uncommented and no "M-"s appearing
03:21:01 <ManateeLazyCat> juhp: Only one possible, bluetile filter M-* keystroke, becuase daemon process can't catch those keystroke.
03:21:16 <juhp> it doesn't
03:21:27 <juhp> gedit works
03:22:01 <juhp> unless it is something about how manatee is capturing the key events
03:22:08 <ManateeLazyCat> juhp: XMonad can works with manatee?
03:22:32 <juhp> haven't tried yet (today at least)
03:22:34 <ManateeLazyCat> juhp: I use EventM code in daemon process like any normal gtk+ program.
03:22:59 <ManateeLazyCat> juhp: Then send GdkEvent to render process if can't found keystroke in global keymap.
03:23:08 <juhp> aha
03:23:39 * ManateeLazyCat Damn, i got depend conflict on text-0.7.2.1 and text-0.8.0.0
03:27:04 <ManateeLazyCat> juhp: Can i improve text to 0.8.0.0 ?
03:27:18 <ManateeLazyCat> juhp: I got depend conflict between manatee-irccleint and GoogleTranslate.
03:27:33 <juhp> ah
03:27:36 * hackagebot th-lift 0.5.1 - Derive Template Haskell's Lift class for datatypes.  http://hackage.haskell.org/package/th-lift-0.5.1 (MathieuBoespflug)
03:27:52 <juhp> ManateeLazyCat: sounds like you need to :)
03:28:08 <juhp> ManateeLazyCat: GoogleTranslate needs 0.8?
03:28:25 <ManateeLazyCat> juhp: I add text >= 0.7.2.1, but don't know it choose 0.8
03:28:40 <juhp> ManateeLazyCat: you had it installed?
03:28:45 <ManateeLazyCat> juhp: Yes.
03:28:58 <juhp> hmm better to uninstall IMHO
03:29:27 <juhp> not that text is in HP yet
03:29:30 <ManateeLazyCat> juhp: I change to == 0.7.2.1 to install, i change it to >= after manatee compile success. :)
03:29:42 <juhp> ok
03:29:53 <ManateeLazyCat> juhp: I'm afraid you will failed if you use ghc-6.10.x :)
03:30:20 <juhp> for manatee?  I guess so
03:30:30 <juhp> haven't tried yet...
03:30:31 <ManateeLazyCat> juhp: Nevermind, compile now.
03:30:37 <juhp> but have another patch for you ;)
03:30:50 <juhp> regex-posix :)
03:30:55 <juhp> and array
03:31:43 <juhp> I'll try xmonad
03:31:44 <ManateeLazyCat> juhp: Yep, use for search nick regep. :)
03:31:59 <juhp> ManateeLazyCat: heh - yeah the versions...
03:32:07 <juhp> anyway bbs :)
03:32:24 <ManateeLazyCat> juhp: I will add some popup notify feature after Google Translate.
03:32:37 <juhp> wow
03:33:08 <ManateeLazyCat> juhp: Because nick filter has finish, it's easy to know whether an irc message have your nick name. :)
03:33:45 <juhp> ok
03:34:00 <juhp> let me try xmonad - but probably same
03:36:12 <co_dh> :t makeStateVar
03:36:13 <lambdabot> Not in scope: `makeStateVar'
03:36:23 <co_dh> @hoogle makeStateVar
03:36:23 <lambdabot> No results found
03:39:56 <ManateeIrcClient> Hello, everybody, you see this message from the Google translation, original in Chinese.
03:40:01 <ManateeLazyCat> Wow, finish!!!
03:40:19 <ManateeLazyCat> Above message translate from Google translate. :) 
03:40:47 <ManateeIrcClient> I love the Haskell
03:41:38 <ManateeIrcClient> Cale: 你好吗？ （中文） :)
03:41:54 <ManateeIrcClient> Cale: How are you?
03:42:30 <Cale> ManateeIrcClient: I'm well :)
03:42:37 <ManateeIrcClient> juhp: Google translation done! (English)
03:42:46 <juhp> wow
03:43:32 <ManateeIrcClient> juhp: I write in Chinese, automatic translation into English
03:43:40 <ManateeLazyCat> Cool!
03:44:05 <ManateeLazyCat> juhp: You can written in any language, automatic convert to English.
03:44:21 <ManateeLazyCat> juhp: Any language can convert to English automatic, don't need configure source language.
03:44:44 <juhp> ManateeIrcClient: xmonad-0.9.1 seems same but an older xmonad config I have is ok
03:44:57 <copumpkin> ManateeIrcClient: very nice :)
03:45:03 <juhp> ManateeLazyCat: you're writing in chinese now?
03:45:04 <ManateeIrcClient> After all do not complain about my English worse:)
03:45:11 <ManateeLazyCat> juhp: Yes.
03:45:31 <copumpkin> ManateeIrcClient: please explain a deep philosophical thought in chinese to us
03:45:56 <co_dh> try silence is god
03:46:04 <co_dh> woop, gold
03:46:13 <co_dh> oops
03:46:41 <ManateeIrcClient> Stupid emacs crash now.
03:46:54 <juhp> co_dh: I think E Tolle would agree with your first version :)
03:46:56 <co_dh> my emacs never crash. 
03:47:02 <juhp> heh
03:47:20 <ManateeIrcClient> copumpkin: In China, we emphasize the peace of mind to deal with life difficulties
03:47:20 <juhp> my emacs only OOMs ;o)
03:47:34 <ManateeIrcClient> copumpkin: Above is Chinese translation
03:47:39 <copumpkin> ManateeIrcClient: not bad
03:47:39 <juhp> nice
03:47:52 <ManateeIrcClient> co_dh: You never use Emacs deeply
03:48:01 <copumpkin> ManateeIrcClient: is it translating our english responses back to chinese for you too?
03:48:02 <juhp> ManateeIrcClient: how about other way? :)
03:48:30 <co_dh> Manteet: how deep are you ? run a shell inside Emacs?
03:48:33 <ManateeIrcClient> copumpkin: I think Google don't allowed that.
03:48:41 <copumpkin> ManateeIrcClient: ah, too much traffic?
03:48:52 <ManateeIrcClient> copumpkin: yes
03:49:24 <copumpkin> ManateeIrcClient: that's a pity :)
03:49:30 <ManateeLazyCat> copumpkin: Because too much network data from irc client, i think Google don't allowed that.
03:49:41 <copumpkin> yeah
03:49:54 <ManateeLazyCat> copumpkin: So just for input, is okay.
03:49:55 <copumpkin> you should contact them and see if they'll make a special arrangement :)
03:50:27 <ManateeLazyCat> copumpkin: In technology, it's so easy convert English back to Chinese.
03:50:50 <ManateeLazyCat> co_dh: http://www.emacswiki.org/emacs/AndyStewart my homepage.
03:51:11 <ManateeLazyCat> copumpkin: I need eat some food now.
03:51:17 <ManateeLazyCat> copumpkin: So hungry.
03:51:20 <copumpkin> cool :) enjoy!
03:51:22 <juhp> is there an easy way to see what version of lib a .o or executable was statically linked against?  (hm static libs...)
03:52:26 <juhp> ah nm
03:52:36 <juhp> in executable yes
03:53:37 <ManateeLazyCat> copumpkin: BTW, i think convert English to Chinese is not good idea, because i can't study English then.
03:53:42 <co_dh> Mantee: cool
03:54:05 <ManateeLazyCat> co_dh: Nevermind, my words "you never use Emacs deeply" is not for you, is Emacs.
03:54:33 <juhp> ManateeLazyCat: I think I can use xmonad instead
03:54:40 <ManateeLazyCat> co_dh: I'm sorry if that make you un-happy. :)
03:55:13 <co_dh> Mantee: no, you are really use it deeply :)
03:55:23 <ManateeLazyCat> juhp: I think it's WM support problem, since i never use hacking way on catch gtk event.
03:55:40 <co_dh> Mantee: obviously, you have no life :)
03:55:48 <juhp> ManateeLazyCat: right I guess bluetile still has some quirks
03:56:15 <juhp> even xmonad bluetile seems ok
03:57:05 <ManateeLazyCat> juhp: I hope someday i just have three thing in my box: Linux kernel, XMonad, Manatee.
03:57:34 <juhp> ManateeLazyCat: do you use xmonad now?
03:57:55 <ManateeLazyCat> juhp: Because manatee do everything, she don't need XMonad in principle.
03:58:10 <ManateeLazyCat> juhp: So correct version is : Linux kernal ++ manatee 
03:58:22 <juhp> right
03:58:34 <juhp> then we just need haskell kernel ;)
03:58:50 <Entroacceptor> and what's with X?
03:59:05 <juhp> Entroacceptor: details details :P
03:59:15 <juhp> framebuffer? :)
03:59:34 <ManateeLazyCat> juhp: We need linux kernel to call program that written by non-haskell.
03:59:42 <juhp> and gtk...
03:59:44 <maltem> Oy, feature request for hackage: A big fat notice that you SHOULD NOT depend on haskell98
04:00:40 <ManateeLazyCat> juhp: I will notify you when i push newest patches to repository, then we can written any language in irc client.
04:00:43 <juhp> ManateeLazyCat: I think manatee was the kitchen sink :o)
04:00:48 <ManateeLazyCat> juhp: I want try Mars language later. :)
04:00:51 <fserb> hi! I'm using the Data.Digest.Pure.SHA module, and it has a newtype Digest = Digest ByteString, but it doesn't export the constructor. I'm trying to load digests from a file, is there any way to create a newtype if the module doesn't export the constructor?
04:00:51 <juhp> thought
04:00:57 <Entroacceptor> and I'd like it if manatee didn't do so much window stuff
04:01:09 <ManateeLazyCat> Entroacceptor: I don't care Windows.
04:01:26 <ManateeLazyCat> Entroacceptor: manatee have mini window-manager for multiple-process framework.
04:01:33 <Entroacceptor> ManateeLazyCat: well, as you said, a wm is supoerflous, but why?
04:01:40 <ManateeLazyCat> Entroacceptor: But it also is normal gtk+ program.
04:01:45 <ManateeLazyCat> Entroacceptor: Can works well with other program.
04:02:01 <ManateeLazyCat> Entroacceptor: Maybe you want try other program that haven't implement in manatee. :)
04:02:13 <Entroacceptor> yes...
04:02:16 <ManateeLazyCat> Entroacceptor: If manatee can do everything for you, you don't need WM.
04:02:21 <ManateeLazyCat> Entroacceptor: But i'm not sure.
04:02:37 <juhp> ManateeLazyCat: oh if I click outside the blue box - then I can use M-f
04:03:14 <juhp> so it is a focus issue I guess
04:03:26 <juhp> hm
04:03:30 <ManateeLazyCat> juhp: I call gtk+ function.
04:03:41 <ManateeLazyCat> juhp: If you can work in other WM, it's not bug of manatee.
04:03:45 <juhp> I am not saying it is your fault :)
04:03:49 <juhp> yet anyway :)
04:04:14 <juhp> ManateeLazyCat: right
04:04:22 <ManateeLazyCat> juhp: Ok, you need fix it yourself, i haven't so much time on debug other WM. :)
04:04:29 <juhp> sure
04:04:47 <ManateeLazyCat> juhp: I hope i have 1000 handes developing 600 sub-module parallel...
04:05:02 <juhp> ManateeLazyCat: but you may have a lot of potential xmonad users 
04:05:08 <ManateeLazyCat> juhp: Maybe i need 500 head avoid thinking conflict. :)
04:05:16 <ManateeLazyCat> juhp: I don't know. :)
04:05:23 <ManateeLazyCat> juhp: I just try to do my best.
04:05:29 <juhp> ManateeLazyCat: you use metacity?
04:05:59 <kmc> fserb, GHC says it's safe to unsafeCoerce between a newtype and its underlying type, but it's still a pretty dodgy suggestion
04:06:01 <juhp> anyway xmonad support is not so urgent
04:06:06 <kmc> i would look for another way
04:06:06 <ManateeLazyCat> juhp: Yes
04:06:27 <Nibble> ManateeLazyCat: is the next gtk2hs version released yet?
04:06:29 * hackagebot th-lift 0.5.2 - Derive Template Haskell's Lift class for datatypes.  http://hackage.haskell.org/package/th-lift-0.5.2 (MathieuBoespflug)
04:06:40 <kmc> fserb, isn't bytestringDigest the accessor you need?
04:06:43 <ManateeLazyCat> Nibble: Yes, but have some issue need fix,
04:06:48 <ManateeLazyCat> Nibble: is gtk-0.12.0
04:06:56 <ManateeLazyCat> Nibble: Unfortunately, i'm so busy recently.
04:07:11 <Nibble> ManateeLazyCat: so you haven't had time to release?
04:07:12 <fserb> kmc: I need the opposite. I wanted to have function that loads a file and returns a Set Digest
04:07:23 <kmc> ah, to what purpose?
04:07:26 <ManateeLazyCat> Nibble: Haven't time to investigate bug.
04:07:55 <ManateeLazyCat> Nibble: There have two issue in gtk2hs darcs, "IO Pixbuf cause memory leak" and "ByteString API adjust in gio".
04:07:57 <fserb> kmc: I dump a set of digests to a file (I use bytestringDigest for that) and then I want to load them again
04:08:10 <kmc> why not dump a set of bytestrings?
04:08:38 <fserb> I am, but I was trying to load them as digest... now I'm trying to load them as bytestrings and never use Digest internally.
04:09:12 <ManateeLazyCat> juhp: I found newest change in vte library, i will try to update 'vte' package, if newest APIs support MVC model, then we an add terminal in manatee. :)
04:09:16 <aflash> Hi, I'm trying to write some HUnit tests for a monad, but I get some trouble when all the functions ar now impure. Is there anyone that has any experience using HUnit on impure functions?
04:09:44 <ManateeLazyCat> Nibble: If you want play manatee, download gtk2hs darcs.
04:09:47 <fserb> kmc: actually now I've created my own newtype Digest, and I never use the SHA1 one.
04:10:05 <ManateeLazyCat> Nibble: gtk2hs darcs stable enough.
04:10:18 <kmc> aflash, which monad?
04:10:49 <aflash> A statemonad
04:10:53 <kmc> values in a monadic type aren't special; asserting that a function returns (Just 3) isn't any different than asserting it returns 3
04:11:00 <Blkt> good evening everyone
04:11:12 <kmc> aflash, so you could use runState to get a function from initial state to (result, final state)
04:11:16 <kmc> and unit test that
04:11:17 <Blkt> err, afternoon
04:12:08 <aflash> kmc, ahh right... good idea
04:13:43 <juhp> ManateeLazyCat: cool
04:20:32 <fizruk> hi, can anybody try cabal install type-level?
04:24:26 <ManateeL`> copumpkin: If i concat Google, Google allowed me feed *huge* translate request? 
04:29:30 <juhp> ManateeLazyCat: right I guess you could have a "translate last lines" function
04:30:09 <ManateeLazyCat> juhp: "Translate last line"? I have't push newest pathes.
04:30:19 <juhp> lines
04:30:44 <ManateeLazyCat> juhp: I don't understand, what you mean? New features?
04:31:06 <juhp> ManateeLazyCat: yes - was responding to ManateeL`
04:31:30 <juhp> or what did you have in mind?
04:32:08 <ManateeLazyCat> juhp: When you type any language in input area, then press C-m (not M-m), will send translate request to Google.
04:32:26 <ManateeLazyCat> juhp: It will send translation to irc server after get result from Google.
04:32:39 <ManateeLazyCat> juhp: You still can use M-m for send original message.
04:32:39 <juhp> yes
04:32:49 <ManateeLazyCat> juhp: Better idea?
04:32:49 <juhp> so? :)
04:33:28 <juhp> ManateeLazyCat: you were saying earlier that it would be too much to translate whole channel conversation via google
04:33:46 <ManateeLazyCat> juhp: That's convert irc server data to irc client.
04:33:55 <juhp> so I just suggested a feature to translate many lines at once
04:34:02 <juhp> right
04:34:07 <ManateeLazyCat> juhp: But Google won't allowed you do that.
04:34:13 <juhp> why not?
04:34:15 <ManateeLazyCat> juhp: Too many request in short time.
04:34:23 <juhp> only one request
04:34:45 <ManateeLazyCat> juhp: No-Javascript code just can use GET request.
04:34:57 <ManateeLazyCat> juhp: And GET request have 4k limit
04:35:09 <juhp> I think 4k is enough
04:35:24 <juhp> even for #haskell :)
04:35:38 <juhp> well would have to be limit I suppose anyway
04:35:38 <ManateeLazyCat> juhp: Hmmm, I need think about this.
04:35:39 <Maxdamantus> Hmm.. Why does Haskell's IO thing have a separate set of functions for standard I/O?
04:35:45 <juhp> just a thought :)
04:36:15 <Maxdamantus> Wouldn't it be simpler to have say, a function which given a handle, and another IO (), performs the given actions on the descriptor assosciated with the handle?
04:36:15 <ManateeLazyCat> juhp: Because Google's stupid algorithm will detect bot request.
04:36:36 <ManateeLazyCat> juhp: Even i use keystroke extension in Chrome search too fast will consider as bot.
04:37:08 <juhp> ManateeLazyCat: sure this would be a function invoked by user not automatic
04:37:08 <ManateeLazyCat> juhp: The best way is concat Google, allowed me send special request to handle those.
04:37:25 <juhp> concat?
04:37:35 <juhp> ah ask them?
04:37:37 <ManateeLazyCat> juhp: typo contact
04:37:38 <juhp> hmm maybe
04:37:52 <juhp> you can try perhaps
04:38:16 <ManateeLazyCat> juhp: My plan is translate input (irc client) <=> output (irc server)
04:38:25 <ManateeLazyCat> juhp: Now just finish irc client.
04:38:39 <juhp> if 600 people or whole of freenode were using it would I might not be so willing
04:38:43 <Maxdamantus> main = do { cont <- withHandle (openFile "foo") getContents; ... }
04:38:46 <ManateeLazyCat> juhp: Server message translate add is easy, just afraid Google side.
04:39:16 <juhp> ManateeLazyCat: sure I just misunderstood your typo earlier :)
04:39:26 <Maxdamantus> er, actually, openFile would need to have its own line in the do thing
04:39:34 <ManateeLazyCat> juhp: I need better English helper in my irc client.
04:39:40 <juhp> np
04:40:03 <ManateeLazyCat> juhp: I need fix GoogleTranslate depend conflict issue now.
04:40:15 <ManateeLazyCat> juhp: If i fix it, you can use translate feature.
04:40:30 <juhp> cool!
04:41:10 <ManateeLazyCat> Damn.
04:41:17 <ManateeLazyCat> juhp: Which ghc do you use?
04:41:42 <juhp> ManateeLazyCat: 6.12.3 and 6.12.1
04:42:00 <ManateeLazyCat> juhp: I want drop text-0.7.2.1
04:42:01 <juhp> ManateeLazyCat: current fedora release is still 6.12.1
04:42:25 <juhp> ManateeLazyCat: any reason?
04:42:27 <ManateeLazyCat> juhp: No reason use old 'text' package.
04:42:35 <ManateeLazyCat> juhp: Because GoogleTranslate need 0.7
04:42:37 <ManateeLazyCat> juhp: Because GoogleTranslate need 0.8
04:42:47 <ManateeLazyCat> juhp: And manatee-core use text-0.7
04:42:49 <juhp> thought you said it didn't? :)
04:42:53 <ManateeLazyCat> juhp: Depend conflict.
04:43:08 <ManateeLazyCat> juhp: I do "./repos.sh clean" and rebuild again.
04:43:10 <juhp> hmm - well don't worry maybe we can sort it out later :)
04:43:33 <juhp> fedora has 0.8.1.0 now anyway
04:43:35 <ski> dolio : why is `ImpredicativeTypes' a threat ?
04:44:25 <ManateeLazyCat> juhp: If i write "text == 0.7.2.1' in 'GoogleTranlsate' package, manatee can compile.
04:44:33 <ManateeLazyCat> juhp: But change to "text >= 0.7.2.1" can't work.
04:44:37 <ManateeLazyCat> juhp: Still failed.
04:45:00 * hackagebot contstuff 0.2.0 - Easy to use CPS-based monads  http://hackage.haskell.org/package/contstuff-0.2.0 (ErtugrulSoeylemez)
04:45:06 * ManateeLazyCat pasted "dependencies conflict" at http://paste2.org/get/993895
04:45:08 <ManateeLazyCat> juhp: ^^^^
04:45:12 <juhp> debian has 0.7.1.0 though
04:45:40 <ManateeLazyCat> juhp: My point, don't care package in user's system.
04:45:49 <ManateeLazyCat> juhp: Just use package in hackage.
04:46:06 <ManateeLazyCat> juhp: I use Ubuntu, but i never install any haskell hackage from Debian's sources.
04:46:26 <juhp> ManateeLazyCat: yeah well - I dunno - my suggestion is to only state versions when necessary
04:46:34 <Razz_> I'm having some trouble with a monad: http://hpaste.org/30199/simple_vm how do I get 'interpInst' to return a MSM bool (I'm a newbie to Monads and advanced haskell)
04:47:15 <juhp> ManateeLazyCat: so your GoogleTranslate is built against 0.8 I guess
04:47:38 <ManateeLazyCat> juhp: Yep, problem at 'GoogleTranslate' 
04:47:50 <mauke> Razz_: what's the problem?
04:47:59 <juhp> ManateeLazyCat: anyway I think you can just leave it and we can fix it later?
04:48:02 * hackagebot contstuff 0.2.1 - Easy to use CPS-based monads  http://hackage.haskell.org/package/contstuff-0.2.1 (ErtugrulSoeylemez)
04:48:05 <juhp> if necessary
04:48:19 <ski> Razz_ : why do you want to return a `Bool' ?
04:48:44 <Razz_> mauke: I don't really understand how I could just get it to return a MSM bool (currently it complains that the infered type is Maybe Bool instead of MSM bool).
04:49:08 <mauke> huh
04:49:12 <Razz_> ski: to determine wether the vm should stop interpreting or should continue with the next instruction
04:49:38 <ski> `bool' would be a type variable, not the data type `Bool'
04:49:41 <mauke> Razz_: irc.hs:6:22: Not in scope: type constructor or class `State'
04:50:03 * hackagebot GoogleTranslate 0.0.1 - Interface to Google Translate API  http://hackage.haskell.org/package/GoogleTranslate-0.0.1 (AndyStewart)
04:50:05 <ManateeLazyCat> juhp: Ok, i have upload GoogleTranlsate and push new patches to manatee repository.
04:50:05 <Razz_> mauke: I did not post the entire file as this is an assignment
04:50:09 <ski> Razz : and why can't the monad operation `(>>=)' handle that, using the `Maybe' ?
04:50:23 <juhp> ManateeLazyCat: nice
04:50:27 <mauke> then I will not post the entire solution
04:50:32 <mauke> wtf
04:50:36 <ManateeLazyCat> juhp: Tyep *any* language, and press C-m
04:50:38 <ski> Razz : what is the point of both having a `Maybe' inside your monad, as well as having a `Bool' to tell whether to continue ?
04:50:42 <Razz_> mauke: ofc, I just need some guidance
04:50:55 <mauke> well, I need to understand the problem
04:51:07 <mauke> and interpInst looks fine to me
04:51:12 <ManateeLazyCat> juhp: Any language, you can type Chinese or Japanese whatever, it's will convert to English automatic.
04:51:38 <juhp> ManateeLazyCat: ok give me a little time - I may have conflicts too :)
04:52:08 <Razz_> mauke: to start at the beginning, I got a file with the most basic stuff and I needed to fill in the gaps to get the VM to work. So the monad was mostly defined except for the bind / return functions.
04:52:19 <mauke> heh
04:52:25 <Razz_> However, this is the very first time I've had to work with and implement my 'own' monad
04:52:39 <ManateeLazyCat> investigate why GoogleTranslate need text-0.8
04:53:14 <ski> Razz_ : ok, then i suggest you don't use `do'-notation (hiding the `Maybe'-monad operations) inside your `return',`(>>=)',`get',`set' operations for your `MSM' monad
04:53:44 <ski> Razz_ : that way, it will be more clear to you what is happening, and why you (probably) don't need the `Bool's you currently seem to think you need
04:54:18 <ski> Razz_ : so, reimplement those functions, *without* using `do'-notation (or `return' or `(>>=)')
04:55:22 <Razz_> ski: The given comment for interpInst says it should return True / False depending on the outcome of the instructions and the type says it should return a MSM bool
04:56:00 <ski> hm
04:56:24 <ManateeLazyCat> juhp: If you have patches, best send soon, it's hard to merge if refactory some code. :)
04:56:29 <ski> in what situation is it supposed to not continue execution ?
04:56:40 <ski> do you have some kind of `halt' instruction ?
04:56:52 <ManateeLazyCat> juhp: My behaviour is : use quickest way to hacking features, then refactory code after develop complete...
04:56:56 <juhp> ManateeLazyCat: yep I am done - tempNick is gone here - will send after conflicts
04:57:02 <Razz_> if, for example a 'JMP' instruction jumps to a non-existing instructin i.e. out of the 'bounds of the program'
04:57:17 <ManateeLazyCat> juhp: GoogleTranslate can works for you?
04:57:29 <Razz_> I also have a halt instruction
04:58:07 <ski> what does `State' contain ?
04:58:35 <Razz_> I'll update the paste, just a sec
04:58:50 <ManateeLazyCat> juhp: I guess there is some cabal issue i haven't notice.  
04:59:24 <juhp> ManateeLazyCat: just working on conflict in IrcView
05:00:10 <ski> Razz_ : btw,  (MSM x') <- return $ f a  is better written as  MSM x' <- return (f a)  which is better written as  let MSM x' = f a
05:00:21 <ManateeLazyCat> juhp: You can send patch to me, let me merge. :)
05:00:36 <Razz_> ski: http://hpaste.org/paste/30199/simple_vm_extended#p30200
05:00:57 <ski> Razz_ : alternatively, you can define a selection, so that you can omit that line and instead say  f a `runSMS` s'  on the next line
05:02:14 <Razz_> and runSMS (runMSM?) is then acquired by using record syntax in the newtype declaration?
05:02:31 <ski> (similarly `(MSM p) >>= f = ...' can be written as `MSM p >>= f = ...')
05:03:04 <ski> Razz_ : yes (alternatively defining it as a separate function would also work)
05:03:27 <ski> er, `runMSM' would be better here, yes :)
05:03:44 <orbital_fox> anyone used darcs here?
05:04:14 <younder> yes
05:04:49 <orbital_fox> younder, does it have an http interface?
05:05:14 <orbital_fox> ah just found it
05:05:18 <orbital_fox> it does have a cgi
05:05:24 <orbital_fox> are yo happy with it younder ?
05:06:00 <juhp> bah dataenc
05:06:07 <Razz_> ski: how do I acquire (a, s') without do-notation?
05:06:33 <mauke> Razz_: do you know how do-notation works?
05:07:24 <ski> Razz_ : well, i was above assuming that you were confused about what that `do'-notation for the `Maybe'-monad accomplished (where i maybe was mistaken)
05:07:52 <Razz_> mauke: hardly, we've had 4 lectures of Haskell in which we raced through almost all aspects, so I'm not exactly sure how it works other than that it is syntactic sugar for the bind operator (?).
05:08:08 <juhp> ManateeLazyCat: you need latest dataenc? :)
05:08:13 <younder> orbital_fox, I use it something like get_darcs http://common-lisp.net/project/gzip-stream/repos/gzip-stream 
05:08:21 <ManateeLazyCat> juhp: But dataenc don't need text?
05:08:32 <ski> Razz_ : if you already know how your operations will handle `Nothing' and `Just (a,s)' in the underlying function inside your `MSM a', then using `do'-notation there is ok (and good).
05:08:45 <juhp> ManateeLazyCat: but GoogleTranslate needs dataenc
05:08:48 <Razz_> ski: ok
05:08:55 <orbital_fox> younder, thats all younder ? :P
05:09:02 <ManateeLazyCat> juhp: Can you explain detail?
05:09:11 <ski> Razz_ : if you feel unsure, then it's a good idea to do what `do'-notation accomplishes there, but explicitly
05:09:34 <ManateeLazyCat> juhp: I just need Codec.Binary.Url.encode in dataenc to encode any language to url encoding.
05:09:34 <younder> orbital_fox, errm get_darcs is a macro
05:09:41 <Razz_> ski: right so then I need to use >>= right?
05:09:45 <juhp> ManateeLazyCat: it is ok but current fedora only has dataenc-0.13.0.2
05:09:47 <mauke> Razz_: do { X } == X;  do { X; ... } == X >> do { ... };  do { v <- X; ... } == X >>= \v -> do { ... };  do { let v = X; ... } == let v = X in do { ... }
05:09:49 <fserb> Guys, I did a function to read SHA1 digests from a file: http://hpaste.org/30201/load_digests_from_file is there any simpler way to do the hex read/show conversion? Is there a simple way to change my readDigest into a proper read instance of Digest?
05:10:06 <ski> Razz_ : i.e. then you will need to write `Nothing' and `Just' in there .. and use pattern-matching (via `case' is probably simplest)
05:10:12 <ManateeLazyCat> juhp: GoogleTranslate can works with manatee-ircclient?
05:10:19 <juhp> ManateeLazyCat: as I keep trying to say no point to specify version if it is necessary
05:10:27 <juhp> not *
05:10:45 <ManateeLazyCat> juhp: Ok, i change.
05:10:53 <ski> Razz_ : well, if you are confident on what `(>>=)' does in the `Maybe'-monad, go ahead and use it (that is simpler that what i just said above). if you don't, then don't use it, is my suggestion
05:11:41 <juhp> ManateeLazyCat: thanks
05:11:53 <Razz_> ski:  I'm confident enough, though I'll need to look it up to be truly confident :P
05:11:53 <ManateeLazyCat> juhp: Can GoogleTranslate can works with manatee-ircclient on your box?
05:12:12 <juhp> ManateeLazyCat: let me try now :-)
05:12:15 <ManateeLazyCat> juhp: I need change text == 0.7 to make it work.
05:12:23 <juhp> oh
05:12:28 <ManateeLazyCat> juhp: You have compile successful? 
05:12:39 <juhp> ManateeLazyCat: but my system text is 0.8
05:12:47 <juhp> yep
05:13:15 <ManateeLazyCat> juhp: I have text-0.7.2.1 and text-0.8.0.0 on my box, i don't understand why manatee-core choose 0.7.2.1 and not 0.8.0.0
05:13:18 <ski> Razz_ : ok. can you tell me what `mapM :: (a -> m b) -> ([a] -> m [b])' does when `m' is `Maybe' ?
05:13:20 <younder> orbital_fox, http://hpaste.org/30202/get_darcs
05:13:27 <ski> @src mapM
05:13:27 <lambdabot> mapM f as = sequence (map f as)
05:13:41 <juhp> ManateeLazyCat: yeah weird
05:13:48 <ManateeLazyCat> juhp: Maybe cabal issue?
05:13:53 <juhp> could be
05:14:10 <juhp> there are some weird edge/corner cases I think sometimes
05:14:39 <ski>   mapM f [    ] = do return []
05:14:44 <ski>   mapM f (a:as) = do b  <-      f a
05:14:50 <ski>                      bs <- mapM f as
05:14:51 <ManateeLazyCat> juhp: I register text-0.7.2.1 now and rebuild broken packages.
05:14:52 <ski>                      return (b:bs)
05:15:18 <ski> Razz_ : that's a direct implementation of `mapM', which may help you understand it better
05:15:58 <ManateeLazyCat> s/register/unreesiter
05:16:00 <juhp> ManateeLazyCat: anyway I am not so worried about text :)
05:16:09 <ski>   mapM f [    ] = return []
05:16:21 <juhp> ManateeLazyCat: I need to go to metacity to use M-m...
05:16:26 <ski>   mapM f (a:as) =      f a  >>= \b ->
05:16:32 <ManateeLazyCat> juhp: C-m ;)
05:16:37 <juhp> oh
05:16:40 <ski>                   mapM f as >>= \bs ->
05:16:48 <ski>                   return (b:bs)
05:16:54 <ManateeLazyCat> juhp: M-m for send original message, C-m for translate.
05:17:06 <ski> (and that's in terms of `(>>=)', instead of using `do'-notation)
05:17:08 <ManateeLazyCat> juhp: If translate failed, it will send original message instead.
05:17:45 <co_dh> @src mkQ
05:17:46 <lambdabot> Source not found. It can only be attributed to human error.
05:17:51 <juhp> ManateeLazyCat: ah - but seems not working either hm
05:17:57 <ski> @type mkQ
05:17:58 <lambdabot> forall r b a. (Typeable a, Typeable b) => r -> (b -> r) -> a -> r
05:18:06 <ManateeLazyCat> juhp: Ah?
05:18:13 <juhp> C-m
05:18:26 <Razz_> ski: right, so with maybe you would probably return Just (b:bs) | return Just [] or Nothing?
05:18:37 <ManateeLazyCat> juhp: Have "C-m" in ircViewkYemap?
05:18:48 <ManateeLazyCat> juhp: Maybe you lost that change when you merge patch.
05:18:54 <ManateeLazyCat> juhp: ,("C-m",    ircViewSendMessage True)
05:18:55 <ski> Razz_ : in the implementation of which operation ?
05:18:58 <ManateeLazyCat> juhp: ("M-m",    ircViewSendMessage False)
05:18:59 <juhp> I don't think so - let me check
05:19:12 <juhp> I haven't touched the bindings
05:19:57 <juhp> I think quicker I change to metacity...
05:20:33 <ManateeLazyCat> juhp: Have you customize any C-m in metacity?
05:20:39 <juhp> no
05:21:21 <juhp> brb
05:21:35 <Razz_> ski: the one with do notation
05:21:41 <ManateeLazyCat> juhp: If translate failed, it will output "Get translation failed, send origianl message." with outputbar.
05:22:30 <ski> Razz_ : i presume you mean `(>>=)' in your `instance' declaration
05:23:03 <Razz_> ski: I'm by now thoroughly confused, sorry
05:23:26 <ManateeLazyCat> manateeUser: Jens, is you?
05:23:34 <manateeUser> Japanese
05:23:46 <ManateeLazyCat> manateeUser: Works now?
05:24:24 <manateeUser> yes
05:24:38 <manateeUser> so input method issue though
05:24:41 <manateeUser> some
05:24:42 <ski> Razz_ : you use `do'-notation in two places. (a) in `(>>=)' for your `Monad MSM' instance; (b) in `interp'
05:24:51 <ManateeLazyCat> manateeUser: I can't install manatee now.
05:24:54 <Razz_> yeah
05:24:54 <ski> Razz_ : i assume you were talking about (a) above
05:25:02 <manateeUser> heh
05:25:18 <Razz_> ski: you asked me something about the maybe monad and mapM, that was what I was talking about.
05:25:26 <manateeUser> I find M-m annoying 
05:25:36 <ManateeLazyCat> manateeUser: Why?
05:25:51 <manateeUser> ManateeLazyCat: still conflict?
05:25:59 <ManateeLazyCat> manateeUser: Yes :)
05:26:01 <ManateeLazyCat> :)
05:26:03 <ManateeLazyCat> :(
05:26:18 <manateeUser> ManateeLazyCat: because usually I only input one line anyway :)
05:26:19 <ski> Razz_ : oh, sorry. it didn't seem to me that comment of yours had anything to do with my `mapM' question, so i assumed you were talking about your code, there
05:26:29 <ManateeIrcClient> manateeUser: We speak Chinese, OK?
05:26:43 <ManateeIrcClient> manateeUser: translation of a good ...:)
05:26:43 <Razz_> ski: apparently I understand less than I thought :P
05:26:51 <manateeUser> I think better to use Return for send and M-m for newline
05:27:18 <ski> Razz_ : what i was asking about `mapM' was not how to rewrite it. just what it will *do* when `m' is `Maybe' in `mapM :: (a -> m b) -> ([a] -> m [b])'
05:27:28 <ManateeIrcClient> manateeUser: Haha, we used to have just the opposite
05:27:53 <ManateeIrcClient> manateeUser: Understand translation?
05:28:21 <ski> <Razz_> ski: right, so with maybe you would probably return Just (b:bs) | return Just [] or Nothing?
05:28:24 <manateeUser> ManateeIrcClient: 東京特許局
05:28:30 <ManateeIrcClient> manateeUser: Like nick color?
05:28:33 <manateeUser> ah
05:28:39 <ski> that only tells me some of what the general shape of the result will be
05:29:06 <manateeUser> Good ki
05:29:21 <ManateeIrcClient> manateeUser: I like the background color of dark point
05:29:36 <ski> Razz_ : what i was wondering was : e.g. what would `mapM (\x -> if even x then Just (div x 2) else Nothing) [0,1,2]' evaluate to ?
05:29:45 <ManateeIrcClient> manateeUser: Above translation looks bad.
05:29:45 <manateeUser> ManateeIrcClient: Patent Office, Tokyo
05:29:58 <manateeUser> yeah
05:30:07 <ski> Razz_ : and what would it evaluate to, if you changed the `[0,1,2]' into e.g. `[2,4,8]' ?
05:30:19 <ManateeIrcClient> manateeUser: if only two of us playing, ha ha
05:30:27 <Razz_> ski: that should return Nothing, as one of the results is Nothing, and the second one will return Just [2,4,8]
05:30:37 <ski> right
05:30:38 <ManateeIrcClient> manateeUser: Just us playing manatee.
05:30:58 <manateeUser> I go back again
05:30:59 <ManateeIrcClient> manateeUser: is not feeling the color too much?
05:31:25 <manateeUser> I tried to say I love in in Japanese...
05:31:29 <manateeUser> it
05:31:55 <manateeUser> let me rebind M-m ;)
05:31:56 <ManateeIrcClient> manateeUser: Japanese can works well with GoogleTranslate?
05:32:02 <ManateeIrcClient> manateeUser: lol
05:32:12 <ski> Razz_ : so, if you look at the definition(s) at `mapM' a bit up, you'll see that it is the `(>>=)' calls (implicit in the `do'-notation) that will make the whole result in `Nothing' as soon as any of the `f a' calls evaluate to `Nothing'
05:32:25 <ManateeIrcClient> manateeUser: You must think, damn andy with so weird keymap. :)
05:32:36 <manateeUser> ManateeIrcClient: not really - Japanese use Return to commit not Space
05:32:41 <Razz_> ski: ok
05:32:49 <manateeUser> so it does not work well yet
05:32:57 <ski> Razz_ : so, it is `(>>=)' which causes this "short-circuit" behaviour, for the `Maybe' monad
05:33:12 <ski> Razz_ : now. what is the `Maybe' inside `MSM' intended to model ?
05:33:16 <manateeUser> ManateeIrcClient: ;-P
05:33:44 <ski> Razz_ : is the function inside meant to give `Nothing' if a halt instruction or a `JMP' outside bounds is encountered ?
05:33:48 <ManateeIrcClient> manateeUser: I found really interesting chat with a native language ah
05:33:55 <ski> Razz_ : or is it intended for other things ?
05:34:25 <Razz_> ski: The possibility that execution may fail due to an error (popping from an empty stack for example), or jumping outside of the 'bounds of the program'.
05:34:34 <juhp> ManateeIrcClient: :)
05:35:09 <ski> Razz_ : yes .. execution possibly failing in that way, it that what the `Maybe' is intended to model ?
05:35:25 <Razz_> ski: afaik, yes
05:35:30 <ManateeIrcClient> juhp: in particular, you do not know in what language other people is really fun.:)
05:35:46 <juhp> ManateeIrcClient: yeah
05:36:05 <ManateeIrcClient> juhp: Do you speak several languages?
05:36:08 <Razz_> ski: stopping the program cleanly depends on what interpInst returns: True / False
05:36:24 <Razz_> So Nothing would mean something went 'really' wrong
05:36:31 <juhp> ManateeIrcClient: I could try Danish too
05:36:35 <ski> Razz_ : ok, then it seems to make no sense to have `interpInst :: Inst -> MSM Bool' .. otoh, `interpInst :: Inst -> Bool' might be sensible
05:36:49 <ManateeIrcClient> juhp: Wow, let me see. :)
05:37:07 <juhp> well you will only see English ;o)
05:37:29 <ManateeLazyCat> juhp: In IrcView.hs have option : targetLanguage you can customize.
05:37:40 <ski> Razz_ : if the `Maybe (a,State)' result inside `MSM' becomes `Nothing' in a particular case (i.e. execution stopping), then there *is* no `Bool' returned by `MSM Bool'
05:37:46 <ManateeLazyCat> juhp: Then any language will convert to targetLanguage. :)
05:38:03 <juhp> cool
05:38:42 <ski> Razz_ : `MSM Bool' means something that will possibly depend on the current state, and then decide either to stop execution (no new state), *or* continue execution with a new state, and also returning some result value of type `a'
05:38:49 <ManateeLazyCat> juhp: Another fun is I can add is, type Chinese, print with multiple language (e.g. Japnese, English, French)....
05:39:17 <juhp> might be good for EU :)
05:39:30 <ManateeLazyCat> Yep.
05:39:41 <ManateeLazyCat> juhp: Unfortunately, i can't build manatee now.
05:39:42 <ski> Razz_ : so for `interpInst :: Inst -> MSM Bool', we could have `Nothing' inside (execution stopping), or we could have `Just (True,s)' (execution continuing, with the same state `s', and result value `True')
05:39:51 <juhp> ManateeLazyCat: what's wrong?
05:39:54 <ManateeLazyCat> juhp: text-0.7.1.0 is big problem for you?
05:39:59 <juhp> no
05:40:09 <Razz_> ski: ok, yeah, so if in the current state it evaluates a Halt instruction, it should return Just (False, s)
05:40:10 <ski> Razz_ : but then `Just (False,...)' will never be used, so there seems no *point* to return a `Bool', here
05:40:24 <ManateeLazyCat> juhp: Don't know why manatee-core just need text-0.7.2.1, maybe because dbus-client-0.3
05:40:39 <juhp> aha
05:40:40 <ski> Razz_ : no, it should give `Nothing', then, according to how i interpreted what you said above
05:40:42 <ManateeLazyCat> juhp: I want change text to "text >= 0.8.0.0"
05:40:50 <ManateeLazyCat> juhp: Then i can build manatee.
05:40:54 <juhp> how about just drop version?
05:41:07 <ManateeLazyCat> juhp: I try.
05:41:20 <Razz_> ski: Nothing should only happen on an error, the halt instruction simply signals the end of execution thus Just (False, ..)
05:41:22 <juhp> ManateeLazyCat: anyway I think easier just to have one copy of text :)
05:41:22 <ski> <ski> Razz_ : yes .. execution possibly failing in that way, it that what the `Maybe' is intended to model ?
05:41:23 <ski> <Razz_> ski: afaik, yes
05:41:36 <ManateeLazyCat> juhp: I have two in my box.
05:41:49 <juhp> so remove one ;) :)
05:41:56 <ski> Razz_ : ok. so halting is not an error, but `JMP' out of bounds is an error ?
05:41:59 <ManateeLazyCat> juhp: I have remove text-0.7
05:42:06 <Razz_> ski: indeed
05:42:12 <ski> ok, that makes more sense, then
05:42:14 <ManateeLazyCat> juhp: But when i install dbus-client, it will download text-0.7 again. damn it.
05:42:27 <Razz_> ski: halt is one instructions
05:42:31 <ski> still, it seems needless to have `interpInst :: Inst -> MSM Bool'
05:42:38 <juhp> ManateeLazyCat: hmm I sounds familiar - cabal dependency hell
05:42:43 <juhp> I = it
05:42:43 <ski> `interpInst :: Inst -> Bool' would suffice ..
05:43:03 <ManateeLazyCat> juhp: I try to remove version request for text.
05:43:07 <ski> .. since i don't think you want to change the state inside this operation .. and i also think it can not error out
05:43:10 <Razz_> The result of interpInst is reused by interp to determine wether or not to continue (interp was given)
05:43:13 <ManateeLazyCat> juhp: If still can't work, i change to text >= 0.8.0.0
05:43:34 <ski> (juhp : objectifying yourself, are you ? ;)
05:43:59 <juhp> ski: lol
05:44:17 <juhp> ManateeLazyCat: like I said it ok for now
05:44:19 <Razz_> ski: Any other instruction should change the state and return Just(True, s')
05:44:21 <juhp> :)
05:44:43 <ManateeLazyCat> juhp: It's ok for you, but not ok for author... i'm cries....
05:45:03 <juhp> ManateeLazyCat: I mean it is ok to raise text for now
05:45:09 <juhp> though I don't really like it
05:45:29 <ManateeLazyCat> juhp: I try remove version request and test again.
05:45:36 <ski> Razz_ : ok. then i misunderstood the purpose of the operation. what i gathered was that it was *only* to be used for determining whether an instruction is a stopping instruction or not
05:45:42 <juhp> ManateeLazyCat: "for now" means for time being :)
05:46:03 <ski> Razz_ : sorry for misunderstanding (and probably misreading) the problem
05:46:25 <Razz_> ski: no, that function will evaluate the current instruction, I just stubbed it out for now so it would always stop execution (sorry, that may have been unclear)
05:46:51 <manateeUser> Can you write this?
05:46:52 <ski> Razz_ : so, i believe we're working our way back towards the actual problem, soon ;)
05:47:01 <Razz_> ski: lol
05:47:09 <juhp> hm not a good translation (from ja)
05:47:11 <ManateeLazyCat> juhp: I wonder someday, all people in irc write it's own language, but use English for communication. :)
05:47:32 <juhp> ManateeLazyCat: I can use C-j to commit ja - that helps :)
05:47:53 <juhp> ManateeLazyCat: that could be :-) - google will be busy ;)
05:47:55 <ManateeLazyCat> juhp: Well, it's customize system, i know, also is time problem. :)
05:48:04 <juhp> or maybe google voice...
05:48:21 <ManateeLazyCat> juhp: That's XMPP client.
05:48:28 <ManateeLazyCat> juhp: In my todo list.
05:48:39 <ManateeLazyCat> juhp: irc client just temporary solution for quick play. :)
05:48:40 * juhp is sitting alone in #haskell-gui btw - if anyone feels the need for another channel...........
05:48:41 <ski> Razz_ : so, the (stub) code you've written for `interpInst' should compile, i think
05:49:15 <Razz_> ski: nope, the type is not MSM Bool according to ghc
05:49:37 <Razz_> ski: it says it's returning Maybe Bool
05:49:59 <ski> <Razz_> ... how do I get 'interpInst' to return a MSM bool ...
05:50:26 <Razz_> ski: that's the goal, my code is wrong according to ghc
05:51:14 <ski>   interpInst _ = return False  -- the `return' here should be resolved in the `MSM'-monad here, since that's what you specified in the type signature
05:51:25 <ski> maybe you have tried writing
05:51:32 <ski>   interpInst _ = Just False
05:51:33 <ski> instead ?
05:52:05 <ski> also, please tell what actual error message GHC gave
05:52:20 * ski should have mentioned that before, but forgot to
05:52:21 <Razz_> ski: Couldn't match expected type `MSM Bool'  \n against inferred type `Maybe Bool'
05:52:33 <Razz_> ski: that's with the code as in the paste
05:52:44 <ski> and you're sure it's talking about the code of `interpInst', rather than some of the other code ?
05:52:56 <ski> ah
05:53:24 <ski> the problem is actually in `interp :: MSM ()' and `getInst :: Maybe Inst'
05:53:29 <Razz_> ski: GHC, put's it in the call from interp to interpInst
05:54:09 <ski> you're trying to call `getInst', which is in the `Maybe'-monad, from `interp', which is in the `MSM'-monad (and you're not converting from `Maybe' to `MSM')
05:54:13 <ski> that's why it complains
05:55:00 <ski> i suspect that what you actually want is
05:55:04 <ski>   getInst :: MSM Inst
05:55:15 <ski>   getInst = return POP  -- stub code
05:55:28 <Razz_> ski: thx, let me try that
05:55:59 <Razz_> ski: thx, that was it indeed :-)
05:56:12 <Razz_> now it compiles just fine :-)
05:56:24 <ski> (since, probably `getInst' will need to access the underlying state to be able to get the next instruction, and so it needs to either get the state (or parts of it) as an argument .. or be in the `MSM'-monad (which gets the state as an argument, under the covers))
05:57:35 <manateeUser> ManateeLazyCat: Return works not
05:58:02 <ski> Razz_ : next time, try to look more carefully at the line number(s) of the error message, if you're not already sure which code it complains about :)
05:58:47 <Razz_> ski: right, a lesson learned indeed :-)
05:59:28 <aristid> Data.Sequence is awesome
05:59:34 <ski> quite often, one doesn't really need to look carefully at the error message itself, instead just looking at the piece of code the line number(s) refers to
06:00:42 <Razz_> ski: Ok, good to know, I'll pay more attention from now on :P
06:00:55 <ManateeLazyCat> juhp: It should work.
06:01:03 * Razz_ is taking a break to reboot his brain :-)
06:01:22 <ski> (heh, i actually argued (sortof), for paying *less* attention (to the error message itself) ;)
06:01:46 <Razz_> ski: yeah, but more attention to the rest of the message then :-)
06:02:21 <aristid> Razz_: you should definitely pay attention to the error message, if you are not immediately sure what the problem is just by glancing at the code
06:02:30 * hackagebot maid 2010.9.19 - A simple static web server  http://hackage.haskell.org/package/maid-2010.9.19 (JinjingWang)
06:03:05 <ski> aristid : yeah .. but it first helps to look at the actual code referred by the line number(s) in the error message :)
06:03:06 <Razz_> aristid: I will, I need all the info I can get :P
06:03:16 <aristid> ski: yeah
06:03:21 <ski> (aristid : as opposed to some other random code)
06:03:36 <aristid> ski: that technique is also not specific to haskell :)
06:03:46 <Razz_> You need to read what's relevant, I just need to figure out what that is to me :P
06:04:07 <ski> aristid : *nod*
06:04:29 <aristid> i think i'll try to make my first hackage package :D
06:05:05 * ski . o O ( "phackage" ? )
06:05:32 <Razz_> Thx for all the help and explanations! I'm taking a break :P
06:05:49 <aristid> ski: haha i guess an abbreviation for "package on hackage" would be helpful
06:13:29 <robertmassaioli> +1 for phackage or POH
06:19:03 <bremner> +2 for pooh
06:19:58 <aristid> +1 for phackage, -100000000 for POH and pooh
06:21:35 * hackagebot GoogleTranslate 0.0.2 - Interface to Google Translate API  http://hackage.haskell.org/package/GoogleTranslate-0.0.2 (AndyStewart)
06:32:43 <ManateeIrcClient> Multi-language features: You can use the language carefully prepared, IRC client can be automatically translated into English (or other language) and send it to your friends.
06:32:44 <fserb> is it possible to remove the first lambda from: (\x -> f x >>= \y -> return $ g y)
06:33:20 <yitz> @pl \x -> f x >>= \y -> return $ g y
06:33:20 <lambdabot> (g `fmap`) . f
06:33:41 <ManateeIrcClient> Multi-language chat system: you can write a message to mother-tongue, IRC client can be automatically translated into English (or other language) and send it to your friends.
06:33:46 <Axman6> never seen @pl use `fmap`
06:33:59 <fserb> yitz, Axman6: me neither. thanks.
06:34:41 <ManateeIrcClient> It seems Google translation quality is good.
06:34:52 <yitz> ManateeIrcClient: thanks, that is a cool app
06:35:29 <ManateeLazyCat> yitz: ManateeIrcClient words is written by Chinese.
06:35:41 <ManateeLazyCat> yitz: I have test many other language, works fine.
06:35:45 <yitz> nice!
06:36:11 <Adamant> ManateeIrcClient: the quality is OK, but there are a lot of problems going from languages that are not very similar
06:36:35 <Adamant> still though, Google Translate is the best I have seen
06:36:54 <ManateeLazyCat> yitz: http://www.flickr.com/photos/48809572@N02/5003871553/lightbox/
06:37:05 <Adamant> (not a problem with your client, just something to know)
06:37:46 <ManateeLazyCat> yitz: In screenshot : You can see i written message with Chinese, my irc client will convert it to English then send to irc server. :)
06:38:10 <yitz> for me, seeing the message in chinese doesn't help much
06:38:46 <ManateeLazyCat> yitz: You can write other language, German, French, Spanish, any language you want to write, language is automatic detect.
06:38:58 <Saizan> on the other hand, chatting using english directly is a very good way to learn the language :P
06:39:36 <ManateeLazyCat> Saizan: I found it's really fun when you don't what language other people use. :)
06:39:42 <ManateeLazyCat> s/don't/don't know
06:40:16 <ManateeLazyCat> Saizan: You also can write English and convert to Chinese . :)
06:40:27 <Adamant> ManateeIrcClient: going to try a nonsense phrase in English and see how it goes to Chinese
06:40:43 <Adamant> ManateeIrcClient: does your chewing gum lose it's flavor on the bedpost overnight?
06:41:24 <Adamant> ManateeIrcClient: how's the translation to Chinese?
06:41:26 <ManateeLazyCat> Adamant: Well, it just helpful when someone have poor English.
06:41:39 <ManateeLazyCat> Adamant: Use Google Translate  API
06:41:40 <Adamant> ManateeLazyCat: of course, I was doing that for fun :P
06:41:55 <ManateeLazyCat> @hoogle GoogleTranslate
06:41:56 <lambdabot> No results found
06:42:01 <ManateeLazyCat> @package GoogleTranslate
06:42:01 <lambdabot> http://hackage.haskell.org/package/GoogleTranslate
06:44:22 <Adamant> heck, that's not bad.
06:55:19 <writer> hackage.haskell.org is down I guess
06:56:13 <fserb> from time to time I get this cabal error, what should I do? http://hpaste.org/30207/cabal_configure_error
06:57:01 <yitz> preflex seen igloo
06:57:01 <preflex>  igloo was last seen on #darcs 6 minutes and 43 seconds ago, saying: Sets is also wrong. The truth is somewhere inbetween
06:57:08 <fserb> last time, I had to remove all my cabal packages and install them again :/
06:58:10 <yitz> preflex seen dcoutts
06:58:10 <preflex>  dcoutts was last seen on #haskell 2 days, 22 hours, 48 minutes and 16 seconds ago, saying: dankna: I agree, we should have a constant system package db and a /usr/local one plus the per-user one.
07:00:18 <writer> hackage is UP :)
07:04:01 <fserb> there I go removing all packages and installing them again... :(
07:04:44 <aristid> \o/ i applied to get a hackage user account
07:07:39 <aristid> sending a mail to ross@soi.city.ac.uk is still the correct procedure, right?
07:08:25 <yitz> aristid: yes
07:21:05 <Saizan> fserb: is there a reason why you've installed unix-2.4.0.2 ?
07:23:00 <Saizan> fserb: also, it might find a solution if you use "cabal install" instead
07:23:05 <juhp> ManateeLazyCat: I sent the patches :)
07:24:04 <ManateeLazyCat> juhp: Move timestamp to left?
07:24:10 <juhp> yeah
07:24:19 <ManateeLazyCat> juhp: Do you like it?
07:24:36 <juhp> It is easier to see in my opinion
07:24:45 <juhp> but if you don't like it...
07:24:47 <ManateeLazyCat> juhp: Ok. :)
07:24:55 <ManateeLazyCat> juhp: Nevermind, we build am option
07:25:01 <juhp> yeah
07:25:18 <ManateeLazyCat> juhp: I saw you build irc:// looks good. 
07:25:25 <juhp> great
07:25:31 <ManateeLazyCat> juhp: less confusion, and much better than mine. :)
07:25:36 <juhp> :)
07:25:53 <juhp> coding is evolving :)
07:25:57 <ManateeLazyCat> juhp: Thanks for patch! Checking ....
07:26:04 <juhp> cool
07:29:44 <fserb> Saizan: I do. I tried to install lambdabot and it failed because it was missing unix-2.4.0.2
07:32:07 <ManateeLazyCat> juhp: You build "TVar ircBufferNick" consider "we perhaps change nick name " ? ;p
07:33:43 <benmachine> fserb: lambdabot requires unix -any, so it shouldn't need 2.4.0.2
07:38:25 <ManateeLazyCat> juhp: Looks your patch every cool. I have apply it. :)
07:38:36 <ManateeLazyCat> juhp: Great work, thanks! ;)
07:38:47 <ManateeLazyCat> rebulid manatee......
07:39:33 <juhp> ManateeLazyCat: :-)
07:39:56 <juhp> yeah works here anyway :)
07:40:05 <ManateeLazyCat> juhp: I notice you replace ircParseInfo, looks so lazy. :) 
07:40:13 <ManateeLazyCat> juhp: I like. :)
07:40:37 <fserb> benmachine: tell that to cabal, not to me. ;) It just failed saying there was a missing dependency on unix, and I did "cabal install unix" and then everything started to fail..
07:42:51 <juhp> ManateeLazyCat: ok I better go to bed - the irc module is really starting to look pretty good - thanks :)
07:43:04 <juhp> I guess nick completion is a bit harder
07:43:10 <benmachine> fserb: are you using cabal upgrade, like, ever?
07:43:37 <ManateeLazyCat> juhp: So easy.
07:43:40 <ManateeLazyCat> juhp: Trust me. :)
07:43:43 <benmachine> fserb: did you install unix-2.4.0.2 locally? if so then you might be in luck
07:43:48 <ManateeLazyCat> juhp: I have some idea. :)
07:44:14 <juhp> ManateeLazyCat: great
07:44:25 <fserb> benmachine: nope.
07:44:34 <AndyStewart> Hello, I'm test juhp's great patch.
07:44:39 <benmachine> fserb: to which?
07:44:48 <fserb> benmachine: no cabal upgrade.
07:44:50 <benmachine> ah
07:44:51 <benmachine> weird
07:44:55 <fserb> benmachine: what do you mean by locally?
07:45:03 <juhp> AndyStewart: hi manatee irc user
07:45:05 <fserb> you mean no system install?
07:45:07 <benmachine> oh, it probably doesn't matter
07:45:10 <fserb> yes, it was locally.
07:45:22 <ManateeLazyCat> juhp: There's have a bug in new patch, others looks good. :)
07:45:26 <benmachine> I'm really not sure why something wanted to upgrade the unix library
07:45:33 <juhp> ManateeLazyCat: ah
07:45:34 <ManateeLazyCat> juhp: wait.
07:45:35 <benmachine> but it's a bad idea to do that, and very annoying that cabal lets you do it
07:45:54 <juhp> in the nick handling?
07:45:54 <benmachine> fserb: I think you should ghc-pkg unregister unix-2.4.0.2
07:46:07 <benmachine> you might need --force
07:46:16 <benmachine> and then try reinstalling every package that ghc-pkg check says is broken
07:46:48 <ManateeLazyCat> juhp: Prelude.read: no parse.
07:46:57 <juhp> oh
07:47:12 <ManateeLazyCat> juhp: Maybe somewhere not safe.
07:47:17 <juhp> ManateeLazyCat: what uri did you use?
07:47:20 <juhp> hmm
07:47:23 <mikeg> ManateeLazyCat: got any screenies of manatee irc?
07:47:36 <ManateeLazyCat> mikeg: http://www.flickr.com/photos/48809572@N02/
07:47:41 <mikeg> ty :)
07:48:16 <fserb> I see
07:48:19 <ManateeLazyCat> juhp: Go to bed, i check myself. Thanks for great work.
07:48:25 <fserb> benmachine: let me try that. Thanks.
07:48:41 <juhp> ManateeLazyCat: hm I guess that is the port
07:48:55 <juhp> it is optional anyway
07:49:03 <AndyStewart> juhp: you have to go to work tomorrow, early sleep.:
07:49:10 <juhp> probably unnecessary anyway
07:49:13 <juhp> :)
07:49:24 <juhp> yeah I'll be off now :) good night
07:49:30 <ManateeLazyCat> juhp: G'night. :)
07:49:55 <juhp> maybe you had: irc://server:/#chan ?
07:50:05 <juhp> anyway
07:50:08 <juhp> more later :)
07:50:22 <ManateeLazyCat> juhp: Go to sleep, let me debug it. 
07:50:32 <ManateeLazyCat> juhp: BTW, i like the idea of irc://....
07:52:39 <Saizan> fserb: if "cabal install lambdabot" still complains about unix it'd be nice to see the error message
07:53:05 <Saizan> fserb: anyhow i wouldn't be surprised if lambdabot's .cabal file was broken
07:57:42 * hackagebot wordsearch 1.0.0 - A word search solver library and executable  http://hackage.haskell.org/package/wordsearch-1.0.0 (ByronJohnson)
07:57:44 * hackagebot random-extras 0.1 - Additional functions for random values.  http://hackage.haskell.org/package/random-extras-0.1 (AristidBreitkreuz)
07:59:26 <aristid> yay random-extras ^ mine
07:59:43 <aristid> when is the next haddock run?
08:01:31 <aristid> and did i do everything right?
08:04:05 <benmachine> yay you have sensible dependencies
08:04:20 <yaru1022> hi, has anybody used Heist?
08:08:45 * hackagebot persistent-postgresql 0.2.1.1 - Backend for the persistent library using postgresql.  http://hackage.haskell.org/package/persistent-postgresql-0.2.1.1 (MichaelSnoyman)
08:14:57 <aristid> > 24/4
08:14:57 <lambdabot>   6.0
08:23:56 <co_dh> I'm reading the scrap your boilerplate: a practical design pattern for generic programming, and reading the example of Company, Deptartment, SubUnit, Employee, etc, and I'm wondering it looks like a database problem , 
08:24:47 <co_dh> I feel like they are programming a database in the code, which is wrong.
08:25:04 <co_dh> a database problem in code.
08:26:14 <Baughn> co_dh: It's just an example
08:26:47 <dankna> co_dh: I agree, actually, but that just means it's a bad example; the technique is very applicable to, say, abstract syntax trees, which are definitely not a database problem.
08:26:49 <ManateeLazyCat> @package GoogleTranslate
08:26:49 <lambdabot> http://hackage.haskell.org/package/GoogleTranslate
08:27:12 <co_dh> dankna: thanks
08:27:14 <dankna> np :)
08:27:42 <ManateeLazyCat> @hoogle parseURI
08:27:43 <lambdabot> Network.URI parseURI :: String -> Maybe URI
08:27:43 <lambdabot> Network.HTTP.Base parseURIAuthority :: String -> Maybe URIAuthority
08:27:43 <lambdabot> Network.URI parseURIReference :: String -> Maybe URI
08:27:56 <Jonno_FTW> How can I improve the speed of my partition function: http://hpaste.org/30211/partition_function
08:28:24 <Jonno_FTW> Using the algorithm provided here: http://en.wikipedia.org/wiki/Partition_function_%28number_theory%29
08:28:56 <ManateeLazyCat> @hoogle uriFragment
08:28:56 <lambdabot> Network.URI uriFragment :: URI -> String
08:29:51 * hackagebot haltavista 0.1 - looks for functions given a set of example input/outputs  http://hackage.haskell.org/package/haltavista-0.1 (PaulBrauner)
08:29:53 * hackagebot smartGroup 0.0.0 - group strings by words in common  http://hackage.haskell.org/package/smartGroup-0.0.0 (SamAnklesaria)
08:30:03 <Baughn> Jonno_FTW: Without understanding the math.. first off, could you do it bottom-up instead of top-down? Dynamic programming, that is?
08:30:30 <Jonno_FTW> how do you mean/
08:30:40 <Baughn> Hm
08:31:04 <illissius_> annoying: when you spend half an hour debugging weird type errors, only to discover the cause as being you having accidentally introduced a new type variable into a signature rather than using the existing one like you intended.
08:31:51 <aristid> @hoogle shuffle
08:31:51 <lambdabot> No results found
08:31:54 <Baughn> Jonno_FTW: k <= n, and n always decreases. How large will n typically be?
08:32:14 <aristid> @hayoo shuffle
08:32:14 <lambdabot> Unknown command, try @list
08:32:17 <Baughn> Jonno_FTW: At most
08:33:48 <Jonno_FTW> I think I found a better optimisation
08:33:57 <Jonno_FTW> that k only needs to started at 1
08:34:22 <Macha> Anyone mind giving me feedback on my first Haskell program? It's an IRC logbot. (Yes, yes, I know, NiH and lambdabot and all that)
08:34:42 <Jonno_FTW> perhaps not
08:35:04 <Macha> Source is here: http://github.com/Macha/Mbot . Around 200 lines
08:35:52 * hackagebot haltavista 0.1.0.1 - looks for functions given a set of example input/outputs  http://hackage.haskell.org/package/haltavista-0.1.0.1 (PaulBrauner)
08:36:17 <Jonno_FTW> Baughn: did you skim over the wikipedia article?
08:36:25 <Baughn> Jonno_FTW: Only the problem statement
08:37:19 <Baughn> Jonno_FTW: MemoTrie uses an infinite trie. Looking up values in that trie is somewhat costly.
08:37:51 <Jonno_FTW> yeah, i found that out
08:37:58 <Baughn> Jonno_FTW: You know what the possible range is, so you can use a Map instead
08:38:06 <Baughn> Or even an Array, if it's reasonably dense
08:38:12 <`Fuco`> Baughn: any chance you work on DF?
08:38:22 <Baughn> `Fuco`: Yes. Quite a lot of chance.
08:38:29 <`Fuco`> THEN GET BACK TO WORK IT'S SLOW AS SHIT
08:38:45 <`Fuco`> no seriously, 13 looks good :)
08:38:49 <`Fuco`> nice work
08:39:20 <Baughn> Jonno_FTW: You want indexing to be cheap, is the point - the more you know about the function, the cheaper you can make it.
08:40:03 <Baughn> Jonno_FTW: But even a trivial array-based version would use n^2 slots to look it up for maximum values of n, which is why I asked how large n gets
08:40:16 <Jonno_FTW> Baughn: I've cut the code down a bit, I don't think I'll need indexing
08:40:50 <Jonno_FTW> p n=  (p' 1 n,n)
08:41:07 <Jonno_FTW> p' k n | k > n = 0 | k == n = 1  | otherwise = (p' (k+1) n) + (p' k (n-k))
08:42:59 <Saizan> DF?
08:43:05 <Jonno_FTW> anything for p 60 takes ages to calculate
08:48:02 <objorn> Why is the prompt called "Prelude"?
08:48:38 <benmachine> objorn: because the Prelude module is loaded
08:48:49 <benmachine> Macha: I'm looking at createStartMessage username = ["NICK " ++ username, "USER " ++ username ++ "8" ++ "* : Haskell bot"]
08:49:03 <benmachine> Macha: won't that make the username blah8*?
08:50:06 <benmachine> Macha: how about, map unwords [["NICK", username], ["USER", username, "8", "*", ":Haskell bot"]
08:50:10 <benmachine> ]
08:50:20 <monochrom> the prompt shows you namespace
08:50:42 <monochrom> try :m +Data.Char
08:51:57 * hackagebot wumpus-core 0.33.0 - Pure Haskell PostScript and SVG generation.  http://hackage.haskell.org/package/wumpus-core-0.33.0 (StephenTetley)
08:52:05 <aristid> how do you deal with the problem of the prompt getting too long?
08:52:46 <benmachine> :set prompt "ghci> " -- is how I do it
08:52:57 * hackagebot wumpus-basic 0.8.0 - Common drawing utilities built on wumpus-core.  http://hackage.haskell.org/package/wumpus-basic-0.8.0 (StephenTetley)
08:53:00 <monochrom> it seldom gets long. just loading my own module collapses it to "*MyModule>"
08:53:59 * hackagebot wumpus-microprint 0.8.0 - Microprints - "greek-text" pictures.  http://hackage.haskell.org/package/wumpus-microprint-0.8.0 (StephenTetley)
08:54:01 * hackagebot wumpus-tree 0.7.0 - Drawing trees  http://hackage.haskell.org/package/wumpus-tree-0.7.0 (StephenTetley)
08:54:59 <benmachine> Macha: you export quite a lot of things from the IRC module but only use startIRC, is there a reason for that?
08:56:57 <Baughn> Jonno_FTW: p 60, eh..
08:57:01 <Baughn> Jonno_FTW: Give me a moment
08:58:15 <Jonno_FTW> yep
08:58:57 <Jonno_FTW> Baughn: I'm doing this question by the way http://projecteuler.net/index.php?section=problems&id=78
09:02:57 <Baughn> > [f k n | k <- [0..4], n <- [0..4]]
09:02:58 <lambdabot>   Ambiguous type variable `t' in the constraints:
09:02:58 <lambdabot>    `SimpleReflect.FromExpr ...
09:03:01 <Baughn> > [f k n | k <- [0..4], n <- [0..4]] :: Expr
09:03:02 <lambdabot>   Couldn't match expected type `SimpleReflect.Expr'
09:03:03 <lambdabot>         against inferred ...
09:03:05 <Baughn> > [f k n | k <- [0..4], n <- [0..4]] :: [Expr]
09:03:06 <lambdabot>   [f 0 0,f 0 1,f 0 2,f 0 3,f 0 4,f 1 0,f 1 1,f 1 2,f 1 3,f 1 4,f 2 0,f 2 1,f ...
09:03:58 <Baughn> Jonno_FTW: You say yours is slow? o_O
09:04:26 <Jonno_FTW> yes
09:04:36 <Jonno_FTW> I guess I should define slow
09:04:42 <Baughn> Please do
09:05:43 <Baughn> Jonno_FTW: http://hpaste.org/30212/thingy <- Actually, could you just compare this one?
09:07:34 <Jonno_FTW> using my function this way : main = timeIt $ print $ map p [1..65]
09:07:55 * Jonno_FTW is still calculatingf
09:08:22 <tg_> are there any ubuntu PPAs with h-platform 2010.2?
09:08:45 <Baughn> Jonno_FTW: There's significant startup cost with limit=1023, might want to reduce it to whatever you actually test up to
09:08:57 <tg_> if not, what's the most expedient way to build from source - ie, which binary should I use?
09:09:22 <Jonno_FTW> i took 89 seconds to do map p [1..60]
09:09:30 <Baughn> That sounds.. wrong
09:09:46 <Baughn> It's instant, here
09:09:54 <Jonno_FTW> I'm sure my function is correct though
09:09:55 <Baughn> (In GHCi, no less)
09:10:03 <Jonno_FTW> i'll try yours
09:10:11 <Baughn> Yeah, make sure mine gets the right result too
09:11:13 <Jonno_FTW> wow
09:11:18 <Jonno_FTW> yours is hella fast
09:11:39 <Baughn> You need to switch the int for integer to do it, but it gets p 1023 just fine
09:11:45 <Baughn> ..question is, is it /correct/?
09:11:45 * tg_ writes down that statement for future marketing purposes... "Baughn... hella fast."
09:12:29 <Jonno_FTW> if you check on the project euler page
09:12:59 <Jonno_FTW> the first p n to be divisible by 10^6 is 61
09:13:10 <Macha> benmachine: I wasn't sure if I'd need those functions later.
09:13:15 <Jonno_FTW> which should be the answer, but it's not
09:13:21 <Baughn> ..quite
09:13:27 <Macha> benmachine: Sorry for going afk, had to get some food.
09:13:28 <Baughn> So mine's got some issue somewhere. Hmm.
09:13:33 <Jonno_FTW> no
09:13:43 <Jonno_FTW> I think I may have misunderstood the question
09:14:09 <Macha> benmachine: And the map unwords simply hadn't occurred to me. And, yes, I forgot spaces there.
09:14:13 <Baughn> I do get it right for p 5, at least
09:14:17 <Jonno_FTW> and I'm pretty sure quot is floor division
09:14:19 <Macha> So, thanks for the feedback.
09:21:20 <benmachine> Macha: oh hi
09:21:49 <benmachine> Macha: some other things: wherever it's convenient to do so, use pattern matching instead of 'head' and 'tail'
09:22:01 <benmachine> Macha: I was thinking split, in particular
09:23:02 <benmachine> Macha: also, you could use mapM_ in startIRC to make your repeated function calls a bit neater
09:23:33 <benmachine> why don't you use createStartMessage in startIRC?
09:24:19 <benmachine> you can import forever from Control.Monad
09:27:20 <Macha> benmachine: I didn't use it in startIRC mostly because it was written afterwards. Although, I'm probably going to get rid of that function anyway, because it doesn't match the type of all the other CreateXMessage functions.
09:27:38 <Macha> benmachine: As for split, that function was found online.
09:28:12 <benmachine> ah
09:28:20 <benmachine> you could depend on the split package if you like
09:28:23 <benmachine> @hackage split
09:28:23 <lambdabot> http://hackage.haskell.org/package/split
09:30:21 <tg_> i'm still a little confused
09:30:40 <tg_> i want to install h-platform 2010.2 from source, but I need 6.12.3
09:30:54 <tg_> if I use the default binary package, I have to install (not just build)
09:31:37 <benmachine> Macha: you can use the unwords trick for some of your other creation functions, if you like, I think it makes it clearer where spaces go
09:31:46 <benmachine> but it's up to you, it doesn't actually improve the code as such
09:32:23 <benmachine> Macha: one other comment I would make is that you use a lot of type synonyms, which is good in a way but there's nothing to stop me e.g. passing a Username to a function expecting a CommandName
09:32:54 <benmachine> Macha: I expect this is not a big deal but if you ever find yoruself having that sort of confusion, it can be nice to use newtype instead of type, so the type checker forces them to be used correctly
09:33:20 <Macha> benmachine: Thanks.
09:34:04 <erisco> miranda program: http://pastebin.com/1Z8xSHbC I cannot quite figure out why the type check is failing
09:35:40 <mauke> I don't know miranda but [options xs] : options xs looks wrong
09:36:04 <erisco> mauke: well, I am pretty sure it is what I want
09:36:05 <hpc> that's a type error no matter how options is defined
09:36:17 <mauke> erisco: I'm pretty sure it isn't because it makes no sense
09:36:21 <mauke> erisco: what do you want it to do?
09:37:23 <copumpkin> an infinite type!
09:37:23 <erisco> this: http://pastebin.com/dcdyamt4
09:37:57 <copumpkin> o.O
09:37:58 <mauke> erisco: that looks like one big type error
09:38:07 <erisco> that is the data structure I need
09:38:15 <mauke> I don't think that's a data structure
09:38:18 <copumpkin> then make it
09:38:27 <copumpkin> an arbitrarily nested list is a tree
09:38:32 <copumpkin> so make yourself a tree type and use that
09:38:36 <erisco> perhaps it has some problems =\
09:38:53 <ddarius> > undefined :: Mu [] -- a tree
09:38:54 <lambdabot>   In *Exception: Prelude.undefined
09:38:59 <ddarius> :t undefined :: Mu [] -- a tree
09:39:00 <lambdabot> Mu []
09:39:25 <benmachine> :t out
09:39:26 <lambdabot> forall (t :: * -> *). Mu t -> t (Mu t)
09:39:29 <copumpkin> aha, we have proof that Mu is a newtype
09:39:35 <erisco> ah, is it type erroring because every element of the first list doesn't have the same type signature?
09:39:45 <benmachine> ddarius: is that actually a tree? does it contain any values?
09:39:53 <erisco> yeah, I guess that is bound to fail the type system
09:40:02 <copumpkin> benmachine: it's an unlabeled tree
09:40:06 <benmachine> oh ok
09:40:21 <benmachine> but for this case you'd want something like Mu ([] :. (,) a) or something?
09:40:32 <erisco> how do I form such a tree?
09:40:37 <ddarius> benmachine: Cofree []
09:40:46 <erisco> I cannot think of how to have variable numbers of branches
09:41:03 <ddarius> That would correspond to data T a = T a [T a]
09:41:11 <copumpkin> erisco: data Tree a = Empty | Node a [Tree a]
09:41:25 <copumpkin> assuming you want emptiness
09:41:47 <erisco> yes, I am pretty sure I would
09:42:19 <copumpkin> are data declarations the same syntax in miranda?
09:42:23 * copumpkin has never used it
09:42:23 <ddarius> type Tree a = Maybe (Tree' a); data Tree' a = Node a [Tree a]
09:42:34 <erisco> I have to rethink this all as a tree then
09:42:36 <copumpkin> Maybe (Cofree [])
09:42:39 <copumpkin> a
09:42:45 <copumpkin> Maybe . Cofree []
09:43:04 <copumpkin> but then it's no longer a comonad
09:43:06 <copumpkin> :(
09:43:10 <benmachine> type Tree' a = (a, [Tree a]); data Tree a = Empty | Node a [Tree a]
09:43:12 <benmachine> >_>
09:43:23 <ddarius> copumpkin: It uses a BNF syntax
09:44:35 <ddarius> copumpkin: Anything that can be "empty" is not a comonad.
09:44:54 <copumpkin> yeah :/
09:46:07 <ddarius> tree * ::= empty | node * tree tree I think is the Miranda syntax.
09:46:33 <ddarius> Er, + the arguments to the recursive cases
09:46:53 <copumpkin> ah
09:47:06 <copumpkin> is miranda still actively developed?
09:48:40 <ddarius> Last update of this page is 7 March 2010, http://miranda.org.uk/
09:50:50 <ddarius> The linux download is August 2008.
09:51:14 <ddarius> But the one before that was August 2006, so I guess it's still going.
09:53:18 <Macha> benmachine: Thanks for all your help, I'm going to try use some of the advice now.
09:55:25 <tg_> anyone? I need a little help boostrapping haskell-platform 2010.2 using a 6.12.3 binary
09:57:09 <ezyang> tg_: What's your specific difficulty? 
09:57:20 <tg_> namely, I want to build the binary without installing it. Or, can I use ghc6 from ubuntu 10.04 ?
09:57:58 <monochrom> you can install a binary ghc 6.12.3 yes. it works.
09:58:00 <tg_> ezyang: i can't build 2010.2 without ghc, and ghc6 (.deb) is 6.12.1
09:58:18 <monochrom> for the rest, http://www.vex.net/~trebla/haskell/haskell-platform.xhtml
09:58:20 <tg_> i want to install it through the platform, not through the default binary. I just need that to build the platform
09:58:44 <ezyang> tg_: Get a copy of 6.12.3 then 
09:58:56 <tg_> did that
09:59:01 <ezyang> Source or binary? 
09:59:01 <tg_> i want to build (but not install) that
09:59:12 <tg_> binary, I thought
09:59:15 <tg_> but i suppose not
09:59:18 <tg_> one sec
09:59:23 <ezyang> In that case, perl boot && ./configure && make 
09:59:39 <ezyang> but there's probably a binary for your system somewhere... 
09:59:49 <ezyang> (maybe you don't need perl boot) 
10:00:15 <tg_> Run "make install" to install
10:00:21 <tg_> :|
10:00:33 <ezyang> tg_: You don't need to make install. 
10:00:40 <ezyang> A perfectly workable GHC install is placed in inplace/bin 
10:00:44 <tg_> there isn't any other option
10:01:29 <tg_> grr
10:01:43 <tg_> the option list in this makefile is different than anything I've seen before.
10:04:26 <monochrom> http://darcs.haskell.org/download/dist/6.12.3/ghc-6.12.3-i386-unknown-linux-n.tar.bz2 or http://darcs.haskell.org/download/dist/6.12.3/ghc-6.12.3-x86_64-unknown-linux-n.tar.bz2
10:04:41 <tg_> yep
10:04:43 <tg_> the first one
10:04:44 <monochrom> ./configure && sudo make install
10:05:11 <monochrom> then follow my url that everyone ignores
10:05:29 <tg_> monochrom: make install will place binaries in global places?
10:05:30 <tg_> or in place?
10:05:34 <monochrom> global
10:05:38 <tg_> how can I avoid this?
10:05:52 <monochrom> ./configure --prefix=/home/monochrom
10:05:58 <tg_> ok
10:06:20 <monochrom> I haven't heard of inplace for several years
10:06:39 <tg_> i am being paranoid, I suppose, as installing haskell-platform will preform the same steps
10:06:41 <monochrom> I used to use inplace in ghc 4 or something
10:06:47 <tg_> which will surely overwrite anything I do
10:08:59 * monochrom wonders what mystery there is. the INSTALL file says it all.
10:10:48 <tg_> monochrom: you're right, and I'm embarassed. My brain is a little fried from this weekend's events, I suppose.
10:13:08 <tg_> there were several places I should have seen the answer myself :(
10:13:24 <volvic> if i want to run Leksah on Ubuntu Lucid, which version of GHC do i need?
10:17:44 <orbital_fox> does anyone remember the channel for gcc tools etc?
10:18:10 <Martty> workingset
10:18:21 <Martty> or something like that
10:18:59 <orbital_fox> Martty, correct thanks
10:22:28 <byorgey> volvic: it looks like Leksah should work with 6.10.x or 6.12.x
10:22:36 <objorn> Thanks benmachine for answering my question earlier.
10:24:17 <benmachine> I don't remember doing that but sure no problem :P
10:25:09 <tg_> monochrom: success, thanks!
10:27:57 <monochrom> you're welcome. enjoy other articles of mine.
10:28:03 <nomemory> [fp / haskell beginner] http://hpaste.org/30213/input_param -> what I have to write instead of '?' to denote that I have no function input ?
10:29:04 <dankna> triangle :: [(Int, Int, Int)]
10:29:10 <dankna> this is because with no input, it's not a function, it's a constant
10:29:31 <nomemory> can you please repeat the answer ?
10:29:42 <dankna> triangle :: [(Int, Int, Int)]
10:29:45 <dankna> this is because with no input, it's not a function, it's a constant
10:30:21 <nomemory> dankna: thanks!
10:30:28 <dankna> sure thing
10:34:12 <AndyStewart> Why is it so quiet?
10:34:33 <AndyStewart> Hmm, looks good.
10:35:09 <AndyStewart> I think Google Translate's result is good if you write Chinese clear enough.
10:36:12 <monochrom> is that how you irc? through google? :)
10:36:20 <ManateeLazyCat> monochrom: Yes.
10:36:32 <monochrom> haha
10:36:36 <ManateeLazyCat> monochrom: I write any language, convert to English automatically. :)
10:36:58 <ManateeLazyCat> monochrom: http://www.flickr.com/photos/48809572@N02/5003871553/lightbox/
10:38:14 <monochrom> this is so star trek
10:38:26 <ManateeLazyCat> monochrom: :)
10:38:44 <nlogax> awesome :o
10:39:08 <AndyStewart> monochrom: If you do not mind, I can also translate 51 languages.
10:39:19 <ManateeLazyCat> Notice, above is translate by Google. :)
10:41:26 <Walt> google translate is amazing
10:42:08 <ManateeLazyCat> monochrom: It's very funny that you don't know what language other people use. :)
10:42:51 <ManateeLazyCat> monochrom: More screenshot: see http://www.flickr.com/photos/48809572@N02/
10:44:04 <monochrom> well, I don't know what thought processes other people use anyway. language is small matter.
10:44:27 <ManateeLazyCat> monochrom: After some people's suggestion, i improve UI with new layout, like this : http://www.flickr.com/photos/48809572@N02/5004624219/lightbox/
10:44:28 <Walt> I don't know my own thought process
10:44:52 <monochrom> such as what thought processes other people use when they ask "ghc gives me type error, how to fix it" and not even give you a line of code.
10:45:40 <monochrom> well, I don't know and I don't care. it's a stupid neural network and a bit of random number generator. or something observationally equivalent to that. that's all I need to know.
10:46:03 <Twey> ‘help i try to run code but ghc make error i think ghc broke’
10:46:43 <ezyang> Twey: I don't think it's thaaat bad. ;-) 
10:47:27 <Twey> Well, Haskell's obscurity tends to weed many of those out, thank goodness :þ
10:47:45 <monochrom> I did a school project on the back-propagation, 3-tier kind of artificial neural networks. completely reproduced every idiosyncracy and stupidity of human thought. it was very revealing. completely models the human mind as far as I'm concerned.
10:48:12 <Twey> With a random-number generator?
10:48:46 <monochrom> a little bit of random number is used to initialize an untrained network. (then start training.) yes.
10:49:48 <tg_> monochrom: I'm getting "Setup: the program happy is required but it could not be found" ... building the happy-1.18.5 package failed
10:49:50 <Twey> Did it manage to enter #haskell and ask stupid questions without sufficient context?
10:50:35 <monochrom> tg_: need to add things to your PATH
10:50:44 <tg_> the place where it's going to put happy?
10:51:06 <monochrom> both where happy will go and where happy has gone
10:51:20 <min> I manage to enter #haskell and ask stupid questions without sufficient context. They should really filter for this sort of thing...
10:51:43 <monochrom> when I did the artificial neural network school project, #haskell did not exist.
10:52:15 <tg_> monochrom: are you sugesting that you're project is responsible for this community?
10:52:16 <tg_> impressive
10:52:43 <monochrom> I be damned if I am responsible for universal human stupidity
10:53:06 <b52> http://paste.pocoo.org/show/264325/ any idea what could be wrong?
10:55:04 <monochrom> why do you build happy-1.18.5? your haskell platform has 1.18.4 already
10:55:18 <tg_> i didn't touch it
10:55:20 <tg_> this is the platform
10:55:31 <aristid> heh, looks like garbage collection can be pretty intense when you're playing with huge lists in ghci
10:55:51 <monochrom> oh oops, 1.18.5 is right.
10:56:22 <monochrom> the name hakyll suggests a lot of fun.
10:57:18 <monochrom> but you see I foretold this ghc error!
10:57:57 <aristid> hmm if my theory is correct, haddock will be run in 3 minutes on hackage.haskell.org
10:58:35 <tg_> monochrom: any guess on what I need to add? /usr/local/...?
10:58:37 <b52> cant anyone help me?
10:59:12 <monochrom> your Text.Hakyll.CreateContext needs to be put in Text/Hakyll/CreateContext.hs or Text/Hakyll/CreateContext.lhs as the error message says
10:59:31 <b52> that shouldnt be my task, should it
10:59:53 <monochrom> programming should not be a human task.
11:00:33 <monochrom> tg_: depends on where you installed ghc and where you're installing haskell platform to.
11:00:41 <tg_> ghc is in /tmp/haskell/bin
11:00:46 <AndyStewart> Good night, ladies.
11:00:47 <tg_> haskell platform is to deefault
11:01:02 <monochrom> then both /tmp/haskell/bin and /usr/local/bin
11:01:06 <ManateeLazyCat> Google translate 各位 to ladies. :)
11:01:12 <ManateeLazyCat> Oh my.
11:01:25 <ManateeLazyCat> Translation surprise to me. :)
11:01:32 <monochrom> "hi ladies, ghc has error"?
11:01:44 <ManateeLazyCat> monochrom: G'night. :)
11:01:50 * ManateeLazyCat Go to bed.
11:01:54 <writer> has anyone any clues about snap installation error: http://hpaste.org/30214/snap_installation_error
11:02:06 <tg_> monochrom: changed, same problem. 
11:02:36 <writer> hlibev is installed.
11:02:44 <monochrom> then I don't know.
11:05:39 <writer> any ideas anyone ?
11:05:49 <Leosirth> hi all
11:06:06 <writer> hi Leosirth 
11:06:15 <Leosirth> i'm pretty new to haskell and i have a question :)
11:06:41 <writer> sure.
11:07:02 <Leosirth> i'll try to explain by example
11:07:37 <Leosirth> if i have a list like [a, b, c, d, e,]
11:08:16 <vanadium> > [a, b,c, d, e,]
11:08:17 <lambdabot>   <no location info>: parse error on input `]'
11:08:27 <Leosirth> exist a pattern matching that let me take (ab c de) ?
11:08:48 <aristid> > [a, b, c, d, e]
11:08:49 <lambdabot>   [a,b,c,d,e]
11:08:55 <writer> Leosirth: maybe you need tuples ?
11:08:59 <aristid> Leosirth: what is (ab c de)?
11:09:12 <monochrom> what is "(ab c de)"?
11:09:13 <Leosirth> sorry it's not easy to explain
11:09:19 <Leosirth> make it char
11:09:33 <aristid> Leosirth: relax, take a deep breath, and explain :)
11:09:46 <Leosirth> i want a pattern matching that find me the char 'c' in a list 
11:10:19 <aristid> Leosirth: you want to split the string, find the 'c' and the prefix and the postfix?
11:10:29 <aristid> :t break
11:10:30 <lambdabot> forall a. (a -> Bool) -> [a] -> ([a], [a])
11:10:31 <Leosirth> yeah
11:10:32 <monochrom> > case "abcde" of _:_:me:_ -> me
11:10:33 <lambdabot>   'c'
11:10:48 <aristid> > break (== 'c') "abcde"
11:10:49 <lambdabot>   ("ab","cde")
11:11:03 <aristid> Leosirth: does this help?
11:11:27 <Leosirth> hmmmm i need a pattern matching if possible
11:11:37 <aristid> not really possible
11:11:43 <aristid> you can't do finding in a pattern
11:12:17 <Leosirth> i can't make pattern left associative insted than right?
11:12:49 <aristid> ?
11:12:57 <aristid> Leosirth: do you know at which position the c is?
11:12:57 <Leosirth> like xs:x with x tail?
11:13:10 <Leosirth> aristid: no
11:13:20 <chrisdone> the pattern should match the constructor
11:13:22 <aristid> then i don't think left-associative patterns would help
11:13:37 <chrisdone> so the pattern (x:y:z) matches the constructor (x:y:z)
11:13:40 <megajosh2> > head . snd . break (=='c') $ "abcde"
11:13:40 <lambdabot>   'c'
11:14:27 <Leosirth> the problem is that i don't know where is c and the lenght of the list may vary
11:14:40 <aristid> :t let (.:) = (.).(.); infixr 8 .: in head . snd . break .: (==)
11:14:41 <lambdabot>     Couldn't match expected type `(a1, [a])'
11:14:41 <lambdabot>            against inferred type `[a2] -> ([a2], [a2])'
11:14:41 <lambdabot>     In the second argument of `(.)', namely `break'
11:14:59 <aristid> :t let (.:) = (.).(.); infixr 8 .: in head . snd .: break . (==)
11:15:00 <lambdabot> forall a. (Eq a) => a -> [a] -> a
11:15:19 <megajosh2> (.).(.) <-- that looks scary
11:15:31 <aristid> megajosh2: (.:) = (.).(.) is one of my favorite tricks :D
11:15:56 <monochrom> case break ('c'==) "glasgow compiler" of (x,me:y) -> (x, me, y)
11:16:01 <monochrom> > case break ('c'==) "glasgow compiler" of (x,me:y) -> (x, me, y)
11:16:02 <lambdabot>   ("glasgow ",'c',"ompiler")
11:16:06 <megajosh2> Hmm...
11:16:10 <monochrom> now it's pattern matching
11:16:31 <aristid> is ('c'==) more efficient than (=='c')?
11:16:33 <astor> I read some Holumbus.MapReduce documentation and saw a pair of mkMapReduceWorker and closeMapReduceWorker.. I then became worried that haskell doesn't have the RAII release resources on block scope exit that C++ and some other languages has.  Is there a idiom in haskell for typically closing a file on exit from a function?
11:16:44 <objorn> I can't define functions within GHCI?
11:16:48 <byorgey> aristid: no.
11:17:03 <aristid> astor: there are functions for that
11:17:10 <aristid> astor: i think, bracket or so
11:17:11 <byorgey> objorn: you can, if you write something like   let foo x = x + 3
11:17:12 <monochrom> I think so. ('c'==) is (==) 'c'.  (=='c') is...  but I think an optimization says it doesn't matter.
11:17:23 <megajosh2> astor: I think... yeah bracket or something else like that in the IO module
11:17:34 <megajosh2> :t bracket
11:17:35 <lambdabot> Not in scope: `bracket'
11:17:44 <aristid> @hoogle bracket
11:17:45 <lambdabot> Control.Exception bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
11:17:45 <lambdabot> Control.OldException bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
11:17:45 <lambdabot> Control.Exception.Base bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
11:17:52 <aristid> -> Control.Exception bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
11:18:09 <megajosh2> Control.Exception bracket :: IO a -> (a -> IO b) -> (a -> IO c) -> IO c
11:18:09 <megajosh2> When you want to acquire a resource, do some work with it, and then release the resource, it is a good idea to use bracket, because bracket will install the necessary exception handler to release the resource in the event that an exception is raised during the computation. If an exception is raised, then bracket will re-raise the exception (after performing the release).
11:18:15 <megajosh2> A common example is opening a file:
11:18:17 <megajosh2> > bracket
11:18:18 <lambdabot>   Not in scope: `bracket'
11:18:20 <megajosh2> >   (openFile "filename" ReadMode)
11:18:21 <lambdabot>   Not in scope: `openFile'Not in scope: data constructor `ReadMode'
11:18:22 <megajosh2> >   (hClose)
11:18:23 <lambdabot>   Not in scope: `hClose'
11:18:25 <megajosh2> >   (\handle -> do { ... })
11:18:26 <lambdabot>   <no location info>: parse error on input `...'
11:18:27 <megajosh2> The arguments to bracket are in this order so that we can partially apply it, e.g.:
11:18:28 <aristid> megajosh2: um.
11:18:31 <megajosh2> > withFile name mode = bracket (openFile name mode) hClose 
11:18:32 <lambdabot>   <no location info>: parse error on input `='
11:18:33 <megajosh2> From package base, version 4.0.0.0
11:18:36 <megajosh2> http://haskell.org/ghc/docs/latest/html/libraries/base/Control-Exception.html#v:bracket
11:18:39 <megajosh2> WOW
11:18:42 <megajosh2> A lot more text than I expected <_<
11:18:44 <megajosh2> My bad
11:18:47 <megajosh2> Sorry
11:18:52 <aristid> yes and lambdabot answered :D
11:18:54 <megajosh2> I think I'll check before I ever do that again what the result is
11:19:01 <aristid> hehe
11:19:34 <Leosirth> so i can't do it with a pattern, right? :)
11:19:55 <megajosh2> What exactly is the aim of finding 'c'?
11:20:39 <Leosirth> megajosh2: well it was only an example, i'm doing a more complex project
11:20:48 <megajosh2> Hmm...
11:21:08 <byorgey> Leosirth: you can't do it with a simple pattern, no.
11:21:18 <byorgey> Leosirth: however you could use a view pattern.
11:21:44 <monochrom> for example I'm parsing irc protocol and I receive "calvin.freenode.net PING :709394" and I want to split it into "calvin.freenode.net", "PING :709394" as a first step. so I want to find the first ' '
11:22:26 <byorgey> something like    foo ((start,x,end) <- splitOn 'c') = ...
11:22:35 <objorn> http://hpaste.org/30216/
11:22:37 <byorgey> where splitOn :: Char -> String -> (String, Char, String)
11:22:59 <megajosh2> objorn: You have to use "let"
11:23:11 <byorgey> er, sorry, should be  foo (splitOn 'c' -> (start,x,end)) = ...
11:24:07 <objorn> Aha, thank you megajosh2 
11:24:09 <Leosirth> ok thanks for all for your help and support, i have dinner now...see you later ;)
11:24:28 <objorn> Sorry for ignoring the "let" part of your comment byorgey 
11:24:38 <objorn> It was unintentional.
11:25:12 <erisco> the structure demonstrated here doesn't typecheck http://pastebin.com/dcdyamt4 what valid data structure could I do to achieve something similar?
11:26:04 <erisco> if the type system was out of the way everything would be fine, but its there so I need to find something that will work with it
11:26:13 <monochrom> perhaps [ (1, options [2,3]), (2, options [3]), (3, options []) ]
11:26:24 <monochrom> what are options[2,3] etc doing there anyway?
11:26:42 <objorn> Is it possible to define a function on multiple lines in GHCI?
11:26:56 <byorgey> objorn: no worries =)
11:26:56 <erisco> monochrom: a tuple, great idea... let me see how that goes
11:27:14 <byorgey> objorn: it actually is possible, but it is not recommended.
11:27:23 <objorn> byorgey: how and why?
11:27:38 <monochrom> you are not an editor
11:27:56 <byorgey> you can write :{ to start a multi-line input, and :} to end it
11:28:14 <monochrom> if you write 100 lines of code in ghci, which is like "cat > myfile.hs" in this regard, you've got to make no typo at all.
11:28:28 <byorgey> it isn't recommended because (a) it's impossible to edit what you've just typed so it's quite annoying (what monochrom said)
11:28:47 <byorgey> and (b) it is subtly different than writing declarations in a file (different syntax, only certain things are allowed, etc.)
11:28:57 <erisco> monochrom: I still run into the same problem because, for example, the outermost list doesn't have elements of all the same type
11:28:57 <mikeg> is it possible to make an enum instance of a datatype where each value is offset by some constant? i.e. toEnum 10 :: MyType would return the first possible value?
11:29:14 <byorgey> the recommended approach is just to have a file open in an editor, write your definitions there, and when you have edited them just type :r in ghci to reload the file
11:29:14 <monochrom> you have to write like Dijkstra. have the whole article in head completed and proofread, then pick up a fountain pen and start rendering it serially
11:29:49 <monochrom> unfortunately sometimes I can do exactly that
11:29:58 <byorgey> mikeg: sure. just write your own Enum instance.
11:30:02 <erisco> an example of the expanded structure is this:  [[1, [[2, [[3, [[]]]]], [3, [[]]]]], [2, [[3, [[]]]]], [3, [[]]]]
11:30:28 <mikeg> byorgey: this was the best i could come up with :( "toEnum = toEnum . (10-)"
11:30:38 <erisco> which is not going to typecheck... so lists are not a viable solution for me
11:30:49 <monochrom> http://userweb.cs.utexas.edu/users/EWD/ewd13xx/EWD1300.PDF is awesome. 26 pages of ghci or cat.
11:30:55 <byorgey> mikeg: that's an infinite loop =)
11:31:18 <byorgey> mikeg: you won't be able to do it in terms of the derived Enum instance.  Just write your own Enum instance from first principles.
11:31:23 <monochrom> I can't do 26 pages. I did 3.
11:32:06 <mikeg> is the default data Enum instance even written in Haskell? i can't find the relevant code in Prelude or GHC source
11:32:48 <erisco> I need a structure that (a) is variably lengthed and (b) can have dissimilar element types
11:33:02 <mikeg> i'm thinking it may just be easier to have MyType derive from Enum then make a function: toMyType = toEnum . (10-)
11:33:07 <monochrom> are you saying options[1,2,3] and options[2,3] have different types?
11:33:10 <erisco> a tree was advised but I really struggle to figure out how that would work...
11:33:23 <erisco> monochrom: yes
11:33:28 <tmo_> question: upon compiling a custom package, I'm met with "Graphics.UI.Gtk.Types" is missing, and it appears that cabal does not have this particular package. How does one resolve this dependency?
11:33:35 <hpc> you want a heterogeneous list?
11:33:45 <monochrom> how could that happen? haskell doesn't do dependent types...
11:34:24 <erisco> here is how the structure is expected to expand: http://pastebin.com/EVb6ckru
11:34:32 <byorgey> mikeg: yes, that's probably easier
11:34:54 <mikeg> hehe ok ty :)
11:35:07 <erisco> the syntax I used isn't valid.. they were my notes
11:35:57 <erisco> or maybe I completely screwed up here
11:35:59 <erisco> hmm
11:36:18 <byorgey> erisco: definitly looks to me like you want some sort of rose tree
11:36:20 <byorgey> look in Data.Tree
11:36:32 <byorgey> although I don't really grok what options is supposed to do
11:37:27 <byorgey> erisco: what is this for?
11:38:12 <erisco> byorgey: this is part of a wild scheme to generate a list of all ways to uniquely combine 'n' elements from a list
11:38:42 <erisco> byorgey: I've been struggling with this for quite some time... procedurally I can do it really easily but a functional approach is giving me headaches
11:39:10 <byorgey> erisco: what do you mean by 'combine'? can you give an example?
11:39:19 <erisco> arrange
11:40:10 <byorgey> so for example [1,2,3] should generate the possibilities [], [1], [2], [3], [1,2], [2,1], [1,3], [3,1], [2,3], [3,2], [1,2,3], [1,3,2] ... etc.?
11:40:21 <byorgey> oh, you said combine n elements from a list
11:40:22 <erisco> for example, uniqueCombinations 2 [1,2,3,4] = [[1,2], [1,3], [2,3], [1,4], [2,4],[3,4]]
11:40:33 <byorgey> oh, so you don't care about the order?
11:40:36 <vanadium> > filterM (const [True, False]) [1,2,3]
11:40:37 <lambdabot>   [[1,2,3],[1,2],[1,3],[1],[2,3],[2],[3],[]]
11:40:40 <erisco> no
11:40:57 <vanadium> hmm
11:40:59 <byorgey> erisco: so you're generating all size-n subsets
11:41:08 <erisco> look, I don't want the answer
11:41:18 <erisco> byorgey: yes, that'd be a better way to state it
11:41:18 <byorgey> ok =)
11:41:46 <copumpkin> erisco: sometimes it's interesting to see how other people approach the problem, especially given the ridiculous abstraction capabilities we have
11:42:07 <astor> Control.Exception.bracket it is
11:42:14 <erisco> functional programming makes sense to me right until I have to think about the type system
11:42:29 <medfly> ?
11:42:44 <byorgey> > Node 1 [Node 2 [], Node 3 [], Node 4 []]  -- a rose tree
11:42:44 <erisco> my current approach is to generate a datastructure that I can reduce into the list of subsets I want
11:42:45 <lambdabot>   Node {rootLabel = 1, subForest = [Node {rootLabel = 2, subForest = []},Node...
11:43:13 <erisco> which seems like a reasonable statement from a functional viewpoint no?
11:43:19 <byorgey> erisco: sure.
11:43:48 <ddarius> The type system is a crucial part of understanding Haskell.  Many things follow from a decent grasp of the type system.
11:43:53 <byorgey> erisco: take a look at Data.Tree and see if that's what you want
11:43:54 <erisco> so, the options function was designed to create that datastructure, but I completely neglected the needs of the type system
11:44:02 <byorgey> http://hackage.haskell.org/packages/archive/containers/0.2.0.1/doc/html/Data-Tree.html
11:44:12 <erisco> I am working in Miranda =\ I'll see if there is an import statement
11:44:15 <tonyg> Hi all. Can someone figure out a way of saying "data (Fractional a) => X = X a" that doesn't result in "Note in scope: type variable `a'"? I'm stuck :-(
11:44:22 <tonyg> *Not in scope
11:44:31 <byorgey> erisco: oh, well, you can just copy the definition of the Tree type into Miranda
11:44:56 <mauke> tonyg: what do you want that to do?
11:45:15 <erisco> I am struggling to visualize the data structure I need as a tree
11:45:24 <tonyg> mauke: I want it to produce a new datatype X, with a single unary constructor X taking some instance of class Fractional to type X.
11:45:43 <erisco> right off the bat I'd need variable numbers of branches.. a rose tree is designed for such right?
11:45:44 <mauke> data X = forall a. (Fractional a) => X a
11:46:05 <byorgey> erisco: yup
11:46:09 <copumpkin> data X a where X :: (Fractional a) => a -> X a
11:46:26 <byorgey> erisco: each node has a piece of data, and a list of child subtrees
11:46:30 <erisco> and am I way out in left field for trying to solve this problem?
11:46:42 <byorgey> erisco: no.
11:47:08 <erisco> good, alright, as long as I am slowly diverging to some answer :P
11:47:17 <mauke> did you mean: converging
11:47:18 <byorgey> let's hope you are converging instead ;-)
11:47:19 <tonyg> mauke, copumpkin: hmm. mauke's statement needs -XExistentialQuantification, and copumpkin's needs -XGADTs ... is there no default way of doing it?
11:47:26 <mauke> tonyg: no
11:47:34 <tonyg> mauke: ok. thanks :)
11:47:34 <notabel> tonyg: usually you wouldn't put the class constraint on the data declaration, because you'd have to repeat it on the functions anyway
11:47:39 * erisco facepalms
11:47:39 <tonyg> ah!
11:47:41 <tonyg> hm
11:47:42 <mauke> tonyg: because you're basically wrapping a value + its class dictionary
11:47:56 <mauke> tonyg: notabel's comment is unrelated
11:48:03 <erisco> maybe I should take a break soon... a friend is making some coffee, that'll do
11:48:15 <byorgey> erisco: ok, enjoy the coffee =)
11:48:32 <erisco> byorgey: so, a list of subtrees... doesn't the list care about what is in the subtrees?
11:48:57 <byorgey> erisco: no, the subtrees are all of type 'Tree'
11:49:07 <byorgey> the type doesn't depend on what they contain
11:49:12 <tonyg> mauke: ok, thanks for that. The root cause is a problem I'm having using (/) in a context where it's complaining about no instance of (Fractional Int)
11:49:13 <erisco> there is something about the type system that I might not be grasping
11:49:17 <byorgey> assuming that's what you mean
11:49:19 <tonyg> I'll keep experimenting.
11:49:21 <mauke> tonyg: wtf?
11:49:36 <mauke> tonyg: I fail to see how X would solve that, but what is the code supposed to do?
11:49:37 <byorgey> @quote fromIntegral
11:49:37 <erisco> if this list is not valid: [ [], [[]] ] then why would using an operator other than cons make a difference?
11:49:37 <lambdabot> <kmc> says: head [] = peek . intPtrToPtr . fromIntegral . unsafePerformIO . randomRIO $ (0, 2^32)
11:49:51 <byorgey> @quote fromIntegral
11:49:51 <lambdabot> <kmc> says: head [] = peek . intPtrToPtr . fromIntegral . unsafePerformIO . randomRIO $ (0, 2^32)
11:49:56 <mauke> erisco: that list is actually valid
11:50:12 <byorgey> tonyg: (/) does not work on Ints.
11:50:14 <erisco> ah, my mistake =\
11:50:25 <byorgey> tonyg: use div, or convert the Int to a floating-point type using fromIntegral
11:50:32 <tonyg> mauke: :-) I have "data Line = Line {slope :: Int, y0 :: Int}", and "intersection l1 l2 = ((y0 l2) - (y0 l1)) / ((slope l1) - (slope l2))"
11:50:34 <mauke> erisco: [1, [2]] is invalid, [1, 1, 1] is valid. but [1, 2, 3] is also valid despite the values being different
11:50:54 <mauke> <mauke> tonyg: I fail to see how X would solve that, but what is the code supposed to do?
11:51:05 <tonyg> byorgey: I've tried fromIntegral, but I'm clearly missing something because I haven't yet stumbled on the right place to put it ;)
11:51:35 <tonyg> mauke: sorry, the X was a distillation of my attempt to get Fractional for my Line definition.
11:51:36 <erisco> mauke: right, so in the case of [1, [2]], which is the same as 1:(2:[]):[] why does it matter that I use a function such as Rose rather than cons?
11:51:37 <byorgey> intersection l1 l2 = fromIntegral ((y0 l2) - (y0 l1)) / fromIntegral ((slope l1) - (slope l2))
11:51:54 <tonyg> byorgey: thanks, I'll try that (again, I think; I can't remember if I've tried that specific variant before)
11:52:30 <byorgey> tonyg: since y0 l2 and y0 l2 are both Ints, so is their difference; same goes for the slopes
11:52:32 <mauke> tonyg: if you want Fractional, why use Int?
11:52:42 <mauke> make them Rationals or something
11:52:44 <byorgey> to divide them you must convert them to a floating point type
11:53:04 <byorgey> yes, usually lines can have non-integer slopes =)
11:53:23 <tonyg> mauke: I may yet resort to trying Rational instead of Int, but the problem specification (homework) specified integer slope and offset.
11:53:26 <erisco> if I have a list of subtrees, but each subtree contains different types of data, how does the list of subtrees typecheck?
11:53:30 <mauke> erisco: I'm struggling with understanding that question
11:53:32 <erisco> that is what I am failing to understand
11:53:44 <erisco> bbl
11:54:03 <mauke> each subtrees contains the same types of data
11:54:06 <mauke> just the values are different
11:54:34 <notabel> tonyg: perhaps you should write your solution in terms of Rationals, then define a function that provides the Integer-based interface your problem spec asks for.  that way you work in a natural domain, and keep your Int-munging in one place
11:54:35 <tommd> ex: data Tree = Bin (Tree a) a (Tree a) | Tip
11:54:49 <tonyg> notabel: that's an interesting suggestion. Thanks. I'll try that now.
11:55:57 <aristid> @src mapM
11:55:57 <lambdabot> mapM f as = sequence (map f as)
11:56:15 <mauke> Node :: a -> [Tree a] -> Tree a
11:57:01 <tonyg> yay! notabel, your suggestion gets me past this hurdle :-) thanks also mauke and byorgey for your help.
12:11:08 <objorn> I have posted my question here: http://hpaste.org/30217
12:12:13 <mauke> objorn: you didn't add [6,6,6] to b
12:12:46 <notabel> objorn: you didn't change the value of b; you just printed out a new copy with [6,6,6] added in
12:13:57 <objorn> Oh, okay.
12:14:22 <notabel> in ghci, you could redefine b by saying `let b = ...` again
12:14:39 <objorn> Ah!
12:15:41 <mauke> (that doesn't really redefine b, it just defines a new b that hides the old one)
12:15:43 <c_wraith> However... you get funny results if you reference b in a binding to be :)
12:15:52 <notabel> but note that this is just a convenience thing in ghci; in compiled haskell you can't redefine a let-bound variable (though you can shadow it)
12:15:53 <c_wraith> > let b = 6 : b in b
12:15:54 <lambdabot>   [6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,...
12:16:09 <notabel> c_wraith: good point, which i neglected to mention
12:16:18 <mauke> notabel: I'm pretty sure it's just shadowing in ghci as well
12:16:30 <c_wraith> I don't know why I said "be" the second time around, but whatever :)
12:16:36 <c_wraith> > let b = tail b in b
12:16:40 <lambdabot>   mueval-core: Time limit exceeded
12:17:10 <c_wraith> oh.  that's one that will print <<loop>> in ghci
12:17:25 <c_wraith> I think mueval just doesn't recognize that output
12:17:53 <mauke> c_wraith: no, it won't
12:18:05 <c_wraith> Oh, does it require compiled code to do that?
12:18:23 <mauke> dunno, but it just sits there, eating 0% cpu
12:19:08 <c_wraith> hmm.  that sounds like ghci uses the threaded runtime, then
12:19:28 <c_wraith> because that's the blackhole behavior on the threaded runtime, rather than the standard runtime
12:19:50 <c_wraith> and clearly, that expression hits a black hole
12:20:46 <objorn> Is it let-bound even if it it's typed in the editor without "let" prepended to it?
12:22:11 <mauke> I'd say no, but what difference does it make?
12:23:06 <objorn> mauke: I don't know, I have just never heard of let-bound before.
12:26:53 <tmo_> How can I make multiple tabbed documents in gtk2hs?
12:29:07 * hackagebot HaskellForMaths 0.2.2 - Combinatorics, group theory, commutative algebra, non-commutative algebra  http://hackage.haskell.org/package/HaskellForMaths-0.2.2 (DavidAmos)
12:32:01 <djahandarie> That's a neat package
12:32:11 <tswett> People of #haskell, what do you do for a living?  I'm in the midst of a boring assignment for university and wondering what it's going to get me.
12:32:25 <vanadium> C++
12:32:36 <hpc> Perl :(
12:32:51 <djahandarie> I'm still in uni
12:33:29 <djahandarie> A couple folks here have Haskell jobs in the commercial sector
12:33:50 <djahandarie> Others do academic research and such with it I think
12:33:51 <tswett> Looks like two of us have jobs programming.
12:34:55 <tswett> Haskell research sounds fun.  Could I become a professor, do research, and make some money?
12:35:10 <djahandarie> If you are good
12:35:10 <hpc> you can do two of those three :P
12:35:33 <djahandarie> If your goal is to optimize how easy it is to get a job, you should probably not be doing Haskell
12:35:53 <tswett> I pick doing research and making some money.  :)
12:35:58 <tswett> I do plan on being good, too.  :P
12:36:11 <danharaj> getting a professorship is really hard
12:36:20 <danharaj> getting one with tenure is... well it probably won't happen.
12:36:22 <tswett> danharaj: not in North America.
12:36:36 <danharaj> sure it is, it's just possible wheras in Australia and Europe its impossible :p
12:36:52 * tswett nods.  :P
12:37:21 <danharaj> Fortunately Computer Science phd's have an easier time getting positions in industry compared to other phd's.
12:37:47 <mietek> Does anyone have a working copy of Flux? http://github.com/sebastiaanvisser/flux is missing the data directory
12:38:11 <tswett> I can probably get a Bachelor's in math and then a PhD in CS, aye?
12:38:48 <djahandarie> tswett, I'd say do a double for your bachelor's in math & CS
12:39:01 <danharaj> you can do a major in english and get into a CS phd program.
12:39:10 <tswett> At my university, the requirements for a CS major are kind of icky.  The CS minor is a lot easier.
12:39:10 <danharaj> although that's not exactly the most optimal path ;)
12:39:49 <danharaj> what sort of CS areas are you interested in?
12:39:53 <tswett> Relatedly, does it make much difference whether I go for a BS or a BA in math?  Here, the only difference is that the BA has an extra requirement that I fulfilled before even entering.
12:39:59 <tswett> Theory.
12:40:16 <djahandarie> CS is all theory
12:40:22 <danharaj> Yeah you didn't narrow that down at all ;)
12:40:48 <medfly> it's weird to think about working in research when you are at the very beginning (making a few assumptions there...)
12:40:54 <tswett> djahandarie: tell that to whoever designed the CIS 353 curriculum.  I'm having to spend about eighteen hours learning Microsoft Access.
12:41:06 <djahandarie> tswett, go to a better uni?
12:41:08 <tswett> medfly: it's not weird to thing about goals when you're trying to achieve them.
12:41:10 <danharaj> CIS... computer information systems?
12:41:20 <danharaj> That sounds like IT not CS
12:41:21 <tswett> danharaj: yep.
12:41:36 <tswett> The course prefix used to be CS, but then they renamed it to CIS.
12:41:37 <medfly> tswett, yeah, but it's sooo far. I recall being a kid and thinking I want to stay in academia till I get a phd. lol
12:42:01 <medfly> tswett, HAS TO BE THREE LETTERS!!!!!!!!11111 right?
12:42:05 <danharaj> Getting into a phd program is not hard, unless you want to go somewhere like MIT to do your phd.
12:42:25 <danharaj> Go to undergrad at an accredited school, get a 4.0, try to do research internships as you come across those oppurtunities
12:42:27 <tswett> medfly: I have no idea, really.
12:42:44 <tswett> I can't get a 4.0 at this point, but I might be able to get a 3.9!
12:42:50 <byorgey> tswett: PhD programs don't really care about what particular degree you got, they care about what classes you took.
12:43:00 <danharaj> start exploring what you want to do in undergrad, talk to professors. if you have an idea of what you want to do when you apply it'll be easier on you.
12:43:29 <medfly> you know... you might just start your undergrad and realise you hate academia
12:43:32 <danharaj> phd programs are one-way functions. They're easy to get into and hell to get out of ;)
12:43:45 <byorgey> hahaha
12:44:02 <hpc> welcome to the PhD program California
12:44:15 <byorgey> @remember danharaj phd programs are one-way functions. They're easy to get into and hell to get out of ;)
12:44:15 <lambdabot> Good to know.
12:44:20 <hpc> (that joke is probably a bit of a stretch...)
12:44:31 <tswett> I am already into my undergraduate studies.
12:44:37 <medfly> not hating it yet?
12:44:42 <FunctorSalad> the PhD program in California is easy to get out of or...? hpc 
12:44:47 <hpc> Hotel California
12:44:49 <tswett> I started hating it pretty early on.  :P
12:44:50 <danharaj> how can anyone hate academia? Seminars == free food!
12:45:00 <medfly> I haven't been to seminars yet.
12:45:02 <hpc> "you can check out anytime you like, but you can never leave"
12:45:07 <FunctorSalad> I see
12:45:07 <xplo2080> hmm
12:45:17 <JoeyA> Is there any interesting material on dealing with numbers better in strongly-typed languages?  One of my pet peeves is when a language requires two numbers be the same type to, say, add them.
12:45:25 <tg_> danharaj: that's a bit like saying - because of soup kitchens, poverty == free food!
12:45:28 <JoeyA> Even C implicitly coerces both numbers to the same type.
12:45:30 <medfly> hi sinelaw
12:45:35 <sinelaw> hey medfly 
12:45:46 <medfly> tg_, it's a good analogy, considering being in academia tends to make you poor.
12:45:52 <FunctorSalad> JoeyA: compromise and add special treatment for numbers as C does? don't have a strong opinion on it, I have
12:45:53 <danharaj> tg_: Hey, there are grad programs out there that give smaller stipends than what students would get from welfare
12:45:55 <JoeyA> But it's not very helpful if you can't add an Int32 to a Word64.
12:46:04 <nlogax> what typeclass should i join if i want to print something in a certain way? Show should be valid haskell expressions, right?
12:46:08 <Adamant> JoeyA: you might look up numeric towers.
12:46:14 <tg_> danharaj: indeed
12:46:18 <Adamant> that's more Scheme-ish than Haskell
12:46:22 <tswett> I like some number casting, but I don't want to automatically cast between integer types and floating-point types.  Both ways can give you rounding errors.
12:46:26 <JoeyA> But there are cases when you don't want to add two numbers of the same number type; see http://stackoverflow.com/questions/3448554/strongly-typed-integers/3464398#3464398
12:46:26 <danharaj> Dependent types let you spell out everything you would ever want to know about monotypes
12:46:27 <nlogax> or should i just have a printFoo that prints like i want?
12:46:48 <danharaj> including relations between numeric types
12:47:01 <byorgey> JoeyA: it depends on your point of view, but I'd say this is a feature rather than a bug.  It forces you to specify explicitly what sorts of conversions are happening.
12:47:04 <JoeyA> In Haskell, you can get more desirable integer behavior by saying newtype UserID = UserID Int, but then you have to wrap/unwrap the numbers to do anything with them.
12:47:11 <byorgey> JoeyA: otherwise you are likely to get surprising results now and then.
12:47:18 <FunctorSalad> danharaj: are you suggesting adding a proof that no precision is lost on every "implicit" cast? ;)
12:47:28 <JoeyA> fromIntegral and realToFrac don't really say much
12:47:35 <JoeyA> And they don't even guard against overflows
12:47:38 <FunctorSalad> I don't think that'd solve JoeyA 's inconvenience problem ;)
12:47:51 <hpc> > 1000000000000000000000000000 :: Int
12:47:52 <lambdabot>   -6930898827444486144
12:48:00 <hpc> haha
12:48:05 <danharaj> FunctorSalad: or perhaps decorating a type with uncertainty that gets fuzzier as you cast and uncast, so you can measure how uncertain your approximations are
12:48:11 <Adamant> > 10000000000000000000000000000000000000000000000 :: Integer
12:48:12 <lambdabot>   10000000000000000000000000000000000000000000000
12:48:52 <tswett> So, I don't really want to continue my undergrad studies unless they're actually helping me achieve something, and I don't know what they're helping me achieve.
12:49:05 <danharaj> getting a job with a degree is much easier than without
12:49:09 <Adamant> tswett: continued employablity
12:49:10 <Adamant> yes
12:49:17 * tswett nods.
12:49:17 <FunctorSalad> tswett: field?
12:49:18 <danharaj> even if it is not a technical degree
12:49:18 * hackagebot random-extras 0.2 - Additional functions for random values.  http://hackage.haskell.org/package/random-extras-0.2 (AristidBreitkreuz)
12:49:23 <Adamant> also upward mobility
12:49:29 <Adamant> for CS
12:49:30 <tswett> FunctorSalad: I'm studying math.  I don't know what field I want to work in.
12:49:36 <JoeyA> I'll widen my scope a little.  I think it'd be cool to have a relatively high-level, strongly-typed programming language that is specifically designed to generate C that can be incorporated into projects already written in C (e.g. kernels, databases, embedded what-have-you).
12:49:48 <FunctorSalad> tswett: ah me too :) though I have just the thesis left
12:49:52 <byorgey> JoeyA: also, what did you mean in that comment about "taking 10 lines to implement per type"?
12:49:53 <hpc> JoeyA: Habit, perhaps?
12:50:00 <Adamant> JoeyA: the problem with that is social
12:50:01 <byorgey> it only takes like two lines.
12:50:08 <JoeyA> So the point of view I'm coming from is dealing with numbers in a way that makes sense on the machine level.
12:50:08 <tswett> I guess this is probably a matter of "think of a job; a degree will help you get it".
12:50:09 <Adamant> getting the C programmer to accept it.
12:50:14 <xplo2080> @danharaj - 'a job', yes. A job that helps your career, that is a different story
12:50:14 <lambdabot> Unknown command, try @list
12:50:43 <FunctorSalad> tswett: well, I think the 'learning to think clearly' ad is not *completely* off ;)
12:50:44 <byorgey> JoeyA: that would be very cool.  And I agree Haskell's numeric system wouldn't work for that very well.
12:50:51 <FunctorSalad> (if nothing else)
12:50:57 <tswett> Learning to think clearly is what Less Wrong is for.  :P
12:51:07 <JoeyA> So you don't get weird stuff like (int)(char)200 = -56
12:51:12 <danharaj> xplo2080: some people are entirely content to live on a living wage with job security instead of always striving upwards.
12:51:14 <Adamant> Cryptol would probably be good as a source for inspiration
12:51:22 <tmo_> Btw, how exactly does Leksah's tabbing system work?
12:51:28 <JoeyA> (that overflows char because char is technically from 0..127)
12:51:36 <tmo_> I'm reading the source but I'm having trouble understanding it
12:51:43 <FunctorSalad> tswett: Less Wrong?
12:51:44 <Adamant> danharaj: also makes it easier to avoid getting stuffed in management
12:51:47 <JoeyA> But on some platforms (e.g. PowerPC Linux), char is unsigned and (int)(char)200 = 200
12:52:07 <Lemmih> tmo_: Aren't they using a notebook widget?
12:52:12 <tswett> FunctorSalad: yeah, this website about avoiding the logical fallacies that practically everyone commits, educated or not.
12:52:18 <JoeyA> (unless you use gcc's -fsigned-char)
12:52:22 <FunctorSalad> tswett: ah, I don't really mean that
12:52:27 <byorgey> JoeyA: yup, just the other day I was helping another grad student debug his C program and the problem turned out to be that some chars were being implicitly converted to int and sign-extended, since chars are signed
12:52:30 <tmo_> Lemmih: The NotebookFlipper?
12:52:32 <Adamant> no, it's about committing entirely new logical fallacies
12:52:37 <sinelaw> medfly, how's univ. going?
12:52:46 <tmo_> Or just a plain notebook widget?
12:52:53 <Adamant> we just haven't identified them yet
12:52:57 <FunctorSalad> tswett: I mean more the mental exercises than learning about particular fallacies
12:52:57 <byorgey> i.e. char x = 0xff  then (x == 0xff) == false!
12:53:07 <Lemmih> tmo_: http://www.haskell.org/gtk2hs/docs/gtk-docs-0.11.0/Graphics-UI-Gtk-Layout-Notebook.html
12:53:13 <FunctorSalad> compareable to memory of physical movement ;)
12:53:19 <JoeyA> byorgey: http://stackoverflow.com/questions/3448554/strongly-typed-integers/3448631#3448631
12:53:29 <xplo2080> danharaj: I agree, when I say advance ones career I mean becoming more skilled and gaining more responsibility in your chosen career path. Compare this to say working as a network admin when you really want to be a software developer.
12:53:43 <FunctorSalad> learning general patterns of abstraction, learning to be careful with definitions etc
12:53:45 <Lemmih> tmo_: http://coding.debuntu.org/system/files/images/gtk-notebook-with-custom-tab-button-size.png
12:53:49 <chrisdone> hpaste now supports expiry :-)
12:53:51 * tswett nods.
12:53:58 <byorgey> JoeyA: oh, ten lines in Java, I see =)
12:54:03 <tswett> I guess that sounds useful.
12:54:27 <tmo_> well, can't believed I missed that :P
12:54:37 <tswett> My attitude is sort of xkcd 519, though.  :P
12:54:42 <FunctorSalad> just a thought... I can't tell you whether it's worth it in the end
12:54:58 <tswett> But, where were we.
12:55:23 <sinelaw> is a singleton an open set in the reals?
12:55:24 <chrisdone> dude references xkcd by numbers. issues
12:55:28 <sinelaw> (guessing not)
12:55:43 <JoeyA> "<Adamant> JoeyA: the problem with that is social" But it's unreasonable to expect a project like Linux or Postgres to accept Haskell code into their core because it's a huge dependency.
12:56:08 <tswett> chrisdone: would you prefer I call it "11th Grade", or "that xkcd whose punchline is 'one weekend messing with perl'"?
12:56:17 <danharaj> bad attitude
12:56:22 <JoeyA> If the standard library in what I'm talking about only required standard libs in C to build the generated code (that can be overridden if needed), it would be more acceptable.
12:56:41 <danharaj> case in point: latest comic where Randall demonstrates a complete ignorance of history and literature.
12:56:58 <Adamant> JoeyA: I don't think you're going to get Linus to accept anything from Haskell barring credible threats of violence or blackmail.
12:57:22 <Adamant> he's going to C until he dies, as far as I can tell
12:57:37 <tswett> danharaj: you mean when he says that he's "looked through a few annotated versions of classic books", or is there something worse?
12:57:38 <FunctorSalad> in the kernel or morally?
12:57:48 <Adamant> either
12:58:02 <JoeyA> "<hpc> JoeyA: Habit, perhaps?" Is Habit a programming language/framework/etc.?  I can't seem to find it.
12:58:02 <chrisdone> well I think linus also uses python
12:58:20 <Adamant> chrisdone: but he's not gonna stick a Python compiler in the kernel.
12:58:20 <hpc> Habit is a dialect of haskell aimed at writing kernels, etc
12:58:20 <djahandarie> It's a programming language kind of like Haskell
12:58:21 <chrisdone> git has to be fast, linux kernel has to be fast, those are in c
12:58:22 <danharaj> tswett: yes, and how the joke sucked
12:58:29 <hpc> someone linked a talk on it a while back
12:58:31 <chrisdone> Adamant: no and why would he
12:58:58 * tswett nods.
12:59:01 <djahandarie> Note that Habit is hardly useable atm
12:59:04 <JoeyA> By the way, when I looked up "numeric towers", here's the first thing I got:  http://www.faqs.org/patents/app/20080262801
12:59:13 <Adamant> chrisdone: I suspect he will shit over machine-generated sources as well
12:59:17 <JoeyA> Whether or not Microsoft actually invented them, I don't know, but they're off-limits now.
12:59:50 <chrisdone> Adamant: I was responding to "<Adamant> he's going to C until he dies, as far as I can tell" 
13:00:14 <Adamant> JoeyA: I suspect that will piss off the Scheme crew if it's not actually novel
13:00:29 <Adamant> being that they did most of the initial work on such things
13:01:08 <Adamant> chrisdone: I only meant for his preciousss
13:01:12 <Adamant> the kernel
13:01:30 <Adamant> even hardcore C-ites script in bash if nothing else
13:02:01 <FunctorSalad> what about it is patented?
13:02:15 <JoeyA> I didn't read into it much.
13:02:15 <Adamant> I dunno, I don't read patents
13:02:17 <FunctorSalad> obviously the general idea of number coercions has prior art
13:02:21 <Adamant> at least software
13:02:34 <Adamant> due to triple damages and them being completely worthless
13:02:46 <FunctorSalad> (unless MS also has a patent on C :>)
13:03:02 <Adamant> at least MechE and EE patents can teach you something.
13:03:27 <sinelaw> sometimes
13:05:57 <JoeyA> Anyway, the problem I see with the new systems languages cropping up (Go, Rust, etc.) is that they tend to require their own runtimes, and these runtimes don't tend to be trivial.  An issue with Go is that it uses global garbage collection, an obvious no-no if you simply want to write code for a C application more quickly.
13:06:28 <JoeyA> ("the problem" with respect to incorporating code written in them into C projects, not in general)
13:06:36 <tswett> That patent application is really vague.  What *is* "a numeric tower that represents a structure supporting statically defined numeric data types"?
13:07:13 <hpc> i think it means "static type system"
13:08:41 <JoeyA> I think the a simple way to deal with numbers better in strongly-typed languages would be to designate semantic tags on them (sort of doable with phantom types in Haskell, for instance).
13:08:48 <JoeyA> For instance, Int UserID
13:09:09 <JoeyA> Then specify instances of a multi-parameter type class where addition and such are allowed.
13:09:55 <JoeyA> And if you really don't care about that crap and just want to use integers, just say Int a.  Granted, that would be a bit ugly, and a programming language taking this approach should make that simpler, I think.
13:10:14 <sinelaw> chrisdone, using your emacs settings why doesn't my status bar show line or column numbers even when i turn them in
13:10:15 <sinelaw> ?
13:10:21 <sinelaw> i can't figure out
13:10:50 <iocor> does haskell have a function which will do something like f :: String -> Maybe (Float, String) splitting the return value into the read float and the rest of the string?
13:11:08 <dankna> :t read
13:11:09 <lambdabot> forall a. (Read a) => String -> a
13:11:12 <dankna> :t readS
13:11:13 <copumpkin> :t reads
13:11:13 <lambdabot> Not in scope: `readS'
13:11:13 <lambdabot> forall a. (Read a) => String -> [(a, String)]
13:11:15 <dankna> :t reads
13:11:16 <lambdabot> forall a. (Read a) => String -> [(a, String)]
13:11:16 <sinelaw> wait, now it does
13:11:18 <sinelaw> weird
13:11:18 <dankna> there we go
13:11:36 <sinelaw> not in haskell  mode though... :(
13:12:22 <hpc> :info ReadS
13:12:23 <JoeyA> > reads "5.0, etc." :: [(Float, String)]
13:12:24 <lambdabot>   [(5.0,", etc.")]
13:13:02 <JoeyA> Why does reads return [(a, String)] rather than (a, String) ?
13:13:07 <JoeyA> When could it have more items?
13:13:19 <hpc> when a string could have multiple values
13:13:31 <Twey> To accommodate ambiguous parses
13:13:42 <FunctorSalad> a ReadP can have more than one result in principle, but apparently it doesn't happen for derived instances(?)
13:14:10 <hpc> so it would seem
13:14:46 <hpc> it looks like it parses greedily until it fails, and returns the longest result
13:14:52 <hpc> i think
13:16:06 <Twey> Hm, yes
13:16:41 <hpc> i actually can't think of an example of an ambiguous parse
13:16:58 <Twey> I guess you could/should expect reads "123foo" to return [(1, "23foo"), (12, "3foo"), (123, "foo"), (0x123f, "oo")]
13:17:16 <Twey> Maybe not the latter
13:17:21 <hpc> probably
13:17:26 <Adamant> Rust looks interesting.
13:17:37 <Adamant> and having some juice from Mozilla can't hurt.
13:17:55 <hpc> > reads "0x123foo" :: ReadS Int
13:17:56 <lambdabot>   Couldn't match expected type `Text.ParserCombinators.ReadP.ReadS
13:17:56 <lambdabot>           ...
13:18:15 <hpc> > reads "0x123foo" :: [(Int, String)] -- apparently not...
13:18:16 <lambdabot>   [(4671,"oo")]
13:18:49 <Twey> Well, no, I know it doesn't actually happen
13:19:03 <Twey> But it wouldn't be unreasonable from a theoretical standpoint if it did (pain in the arse to code with, though)
13:19:12 <hpc> yeah
13:19:48 <hpc> it's nice being able to match against [(x, "")]
13:20:15 <Twey> I prefer [(x, _)]
13:20:27 <Twey> Permissive in what you receive, strict in what you send, and all that
13:20:33 <hpc> yeah
13:20:58 <hpc> i like to make sure the input is entirely right, so there's no stupid ambiguity that makes me unsafeLaunchMissiles
13:21:04 <FunctorSalad> I match against (x,_):_ :o
13:21:18 <hpc> heh
13:21:59 <FunctorSalad> maybe trace the tail as a compromise
13:23:57 <Twey> Heh
13:24:03 <hpc> if you are feeling really crazy, you can map a function that matches (x,_), then filter
13:24:28 <Twey> Well, what I really use tends to be readMaybe = fmap fst . listToMaybe
13:24:46 <Twey> So close enough, I guess :þ
13:28:30 * hackagebot random-extras 0.3 - Additional functions for random values.  http://hackage.haskell.org/package/random-extras-0.3 (AristidBreitkreuz)
13:37:57 <bblum> hey guys, is there a way to automatically convert from isomorphic datatypes?
13:38:22 <bblum> say i have data Foo = FOO1 | FOO 2 | ... deriving (Show, Eq, Ord), and data Bar = BAR1 ...; 
13:38:47 <bblum> can i get away with not writing a conversion function "convert x = case x of FOO1 -> BAR1; FOO2 -> BAR2 ...."?
13:38:50 <hpc> :t toEnum . fromEnum
13:38:51 <lambdabot> forall a a1. (Enum a, Enum a1) => a1 -> a
13:38:53 <copumpkin> if they're just enumerations of parameter-less construtors, put them in the order you want
13:38:57 <copumpkin> yeah, that
13:39:18 <copumpkin> you can probably do it with Data for more general cases, but it's hair-raising
13:39:29 <hpc> add Enum to your deriving clause and your conversion function is that thing, above
13:39:29 <bblum> OK, thanks
13:40:18 <bblum> presumably the result type has to be inferred?
13:41:29 <hpc> yep
13:42:01 <bblum> presumably i "deriving (Enum)"?
13:42:20 <hpc> indeed
13:42:23 <hpc> on both data types
13:42:26 <bblum> nod
13:42:39 <bblum> would that also imply Eq and Ord, or should i derive those separately if i want them?
13:42:54 <hpc> derive everything separately, is the general rule
13:43:02 <bblum> ok, thanks a lot!
13:43:04 <hpc> even if it isn't necessary, it makes for nicer documentation
13:44:31 <objorn> What is the | in this: [x*2 | x <- [1..10], x*2 >= 12]
13:44:38 <hpc> "such that"
13:44:51 <objorn> Okay.
13:45:09 <hpc> you can read it as a list of (x * 2), where x ranges from 1 to 10 and x*2 >= 12
13:45:33 <mietek> CAn I get gtk2hsC2hs via Cabal?
13:45:55 <mietek> It's a missing dependency for the cairo package.
13:46:19 <olsner> iirc, the package you want to install is gtk2hs-buildtools
13:47:24 <mietek> Thanks
13:49:36 * hackagebot bindings-glib 0.1.4 - Low level bindings to GLib.  http://hackage.haskell.org/package/bindings-glib-0.1.4 (MauricioAntunes)
13:50:08 <ajl> hey -- i'm a haskell newb who has been reading through Real World Haskell.  i'm enjoying it, but i'm starting to crave a deeper understanding of the underlying theory -- eg, type theory and category theory.  any recommendations?
13:50:21 <ddarius> hpc: It is necessary.
13:50:38 <ddarius> (Because, of course, you may want to derive Enum but make a custom Eq.)
13:51:21 <hpc> ddarius: i figured, but never got curious enough to check
13:53:17 <megajosh2> ajl: I think the Haskell wikibook gets into that a bit
13:54:24 <megajosh2> ajl: There's also this http://www.haskell.org/haskellwiki/Category
13:54:54 <ajl> megajosh2: thanks for the recommendations
13:55:05 <ajl> for the wikibook, are you referring to this one?  http://en.wikibooks.org/wiki/Haskell
13:56:09 <megajosh2> Yeah
13:56:13 <ddarius> It would be relatively easy, albeit hideous, to make a generic sum-of-products isomorphism maker between two, isomorphically declared, data types.
13:57:26 <ddarius> ajl: Read TAPL.  That's apparently what all the cool kids do.
13:58:20 <younder> How do you "fake" a variable number of arguments by using a list?
13:58:21 <ezyang> TAPL's awesome. 
13:58:27 <ezyang> It's like, basic literacy for FPers 
13:58:41 <tswett> younder: by passing a list instead of the variable number of arguments.
13:58:44 <ajl> cool -- i'll check it out... thanks all
13:58:50 <tswett> Instead of taking a variable number of integers, take a list of integers.  Stuff like that.
13:58:54 <ezyang> younder: You might need an HList if the arguments are heterogenous 
13:58:57 <hpc> whoa, first result on google
13:59:01 <ezyang> There are also other awesome tricks for polyvariadic functions. 
13:59:48 <sinelaw> syntax question. I have a typeclass c, and when to say that "every type 'c a' is an instance of Eq"
13:59:51 <sinelaw> how do i do that?
14:00:04 <sinelaw> oops, typeclass C
14:00:10 <hpc> instance Eq (c a) where
14:00:26 <sinelaw> instance C c => Eq (c a)  where 
14:00:26 <ddarius> hpc: C is a type class.
14:00:29 <sinelaw> doesn't work
14:00:31 <ddarius> sinelaw: You don't.
14:00:34 <younder> hpc.. quite so
14:00:35 <hpc> oh, dur
14:00:45 <sinelaw> ddarius, what what
14:00:49 <Peaker> Hey.. I keep getting bitten by the lack of flushing writable files at exist.. For little scripts, using openFile for write should work :-(
14:00:54 <hpc> yeah, sinelaw's looks like what you want
14:01:18 <ddarius> sinelaw: You can't get what you want in a pretty way and the non-pretty way will probably destroy the usefulness of it.
14:01:28 <sinelaw> ddarius, :( :(
14:01:30 <Lemmih> sinelaw: class Eq a => c a
14:01:32 <sinelaw> any extensions to help?
14:02:29 <ddarius> sinelaw: You can sometimes get a mixture of undecidable instances, overlapping instances and perhaps incoherent instances to sort of work, but that's ... less than desirable.
14:02:30 <chrisdone> http://hpaste.org/30201/load_digests_from_file
14:02:34 <chrisdone> ^ hlint hints ^__^
14:03:23 <sinelaw> chrisdone, heh better without that
14:03:41 <sinelaw> at least for syntax retards like me
14:04:31 <ddarius> Application always binds tighter than everything else.  It's a natural and not difficult rule to remember.
14:04:53 <sinelaw> ddarius, so who wins? plus or digitToInt?
14:04:57 <chrisdone> sinelaw: shut your face!
14:05:06 <sinelaw> chrisdone, heh
14:05:34 <sinelaw> @slap chrisdone
14:05:34 * lambdabot will count to five...
14:07:40 <tolkad> why doesn't the default instance of >> just discard the first paramater?
14:08:00 <tolkad> it seems more efficient, I mean why would you want to keep it?
14:08:20 <chrisdone> putStrLn "hello" >> putStrLn "world"
14:08:24 <hpc> > Nothing >> Just 5
14:08:25 <lambdabot>   Nothing
14:08:39 <hpc> > [] >> [1,2,3]
14:08:40 <lambdabot>   []
14:08:54 <hpc> > Left "failure" >> Right "success"
14:08:55 <lambdabot>   Left "failure"
14:09:16 <aristid> :t Just Left
14:09:16 <lambdabot> forall a b. Maybe (a -> Either a b)
14:09:32 <tolkad> hmm some of these monads are just wierd :P
14:09:36 <aristid> :t (Just Right, Left Nothing)
14:09:37 <lambdabot> forall b a a1 b1. (Maybe (b -> Either a b), Either (Maybe a1) b1)
14:09:53 <tolkad> it would be cool if lambdabot let you write instances
14:10:20 <aristid> :t Just Right <$> Left Nothing
14:10:21 <lambdabot>     Couldn't match expected type `a -> b'
14:10:21 <lambdabot>            against inferred type `Maybe (b1 -> Either a1 b1)'
14:10:21 <lambdabot>     In the first argument of `(<$>)', namely `Just Right'
14:10:43 <hpc> :t Just Right <*> Just Nothing
14:10:44 <lambdabot> forall a a1. Maybe (Either a (Maybe a1))
14:10:56 <sinelaw> ddarius, so it's not possible to say that "every instance of class A is an instance of class B"?
14:11:04 <sinelaw> (and why not)
14:11:52 <tolkad> sinelaw: yes, it is
14:12:09 <tolkad> sinelaw: class A a => B a
14:12:25 <tolkad> wait other way around
14:12:25 <danharaj> no that's every B is an A
14:12:28 <tolkad> yeah
14:12:29 <danharaj> yeah
14:12:31 <danharaj> jinx
14:12:34 <tolkad> class B a => A a
14:12:36 <ddarius> sinelaw: Haskell doesn't look at the context when doing type class resolution, so instance Monad m => Functor m looks like just instance Functor m so it overlaps with -everything-.
14:13:27 <ddarius> sinelaw: If you do control C, then yes, you can just make Eq a superclass.
14:14:03 <ddarius> Which means that the user needs to instantiate Eq as well as C.
14:14:10 <tolkad> sinelaw: another way would be to enable UndecideableInstances and write «instance A a => B a». BUT this instance will match ALL types and just fail with a compile error you try to use it for any type not an instance of A, this will have to be the ONLY instance of B
14:14:38 <tolkad> sinelaw: in which case, you might as well not have the class in the first place
14:15:21 <ddarius> You can define a helper function that makes (==) if it is definable in terms of the operations on your class, like using liftM to define fmap.
14:15:34 <sinelaw> ddarius, yes, that's the case
14:17:33 <sinelaw> but how do i do it so that it becomes the default == for Eq?
14:17:37 <sinelaw> for these types
14:17:38 <Peaker> sinelaw: hey
14:17:42 <sinelaw> hey Peaker  :)
14:17:47 <sinelaw> ya dead?
14:17:59 <Peaker> I think openFile should really register a closer atExit, even though it isn't the "right thing". For mini-scripts, the quick&dirty way to open files should work :(
14:18:02 <Peaker> sinelaw: heh
14:18:16 <Peaker> sinelaw: just wrote a Haskell script to merge binary files (bit torrent downloads)
14:18:23 <sinelaw> ooh
14:18:36 <Peaker> sinelaw: and it malfunctioned because of write buffering and program exits and it doesn't flush output file (like it would in C or Python :-( )
14:18:38 <sinelaw> i'm trying to define my so-called 'math-based' set typeclass
14:18:52 <Peaker> sinelaw: isn't it just (a -> Bool) ?
14:18:58 <Peaker> sinelaw: or (a -> Bool), [a] ?
14:19:03 <sinelaw> no
14:19:17 <sinelaw> it has to satisfy the ZFC axioms
14:19:29 <sinelaw> but a -> bool is the core
14:20:04 <megajosh2> @hoogle log2
14:20:04 <lambdabot> No results found
14:20:08 <megajosh2> @hoogle log
14:20:08 <lambdabot> Prelude log :: Floating a => a -> a
14:20:08 <lambdabot> Prelude logBase :: Floating a => a -> a -> a
14:20:08 <lambdabot> Network.CGI logCGI :: MonadIO m => String -> m ()
14:20:42 <sinelaw> so how do I say "for every instance of class C, the implementation of Eq's == is this: "
14:20:56 <sinelaw> (which will be expressed using C's operations)
14:21:33 <Peaker> sinelaw: You want it to make auto-instances of Eq for all instances of another class?
14:21:38 <chrisdone> hm. hlint seems to fail here: http://hpaste.org/30200/simple_vm_extended
14:21:42 <hpc> instance C a => Eq a where ...
14:21:51 <sinelaw> Peaker, yes
14:21:55 <chrisdone> its suggestion for using camelCase is: LOAD_A -> LOADA
14:21:57 <Saizan> sinelaw: the short answer is that you don't
14:22:08 <tolkad> sinelaw: I can, for example write «class Eq3 a where eq3 :: a -> a -> a -> Bool» OR I can write «eq3 :: Eq a => a -> a -> a -> Bool; eq3 a b c = (a == b) && (a == c)
14:22:13 <Peaker> sinelaw: that's a recipe for overlapping instances
14:22:15 <Saizan> sinelaw: unless a newtype wrapper is fine for you
14:22:30 <Saizan> with overlapping instances it'll be a mess
14:22:34 <megajosh2> @hoogle Int16
14:22:34 <lambdabot> Data.Int data Int16
14:22:38 <Saizan> especially if you have more than one such C
14:23:26 <tolkad> sinelaw the only way to write a single instance of a class for multiple types is to use UndecideableInstances
14:23:38 <sinelaw> :(
14:23:44 <tolkad> sinelaw: and uncecideableinstances only match on types, not type classes
14:23:45 <Peaker> sinelaw: why not newtype?
14:23:53 <sinelaw> Peaker, example?
14:24:08 <tolkad> sinelaw: AFTER matching on types, it will check whether class restrictions fail, but if they do it wont go look for a different instance
14:24:37 <Peaker> newtype CEq c = CEq { unCEq :: c } ; instance C c => Eq (CEq c) where ...
14:25:13 <tolkad> sinelaw: you could write «newtype MyEq a = MyEq {unMyEq :: a}» and then write an instance for MyEq
14:26:14 <tolkad> sinelaw: usually when you start running into problems with the type system in haskell it's because you are doing something else wrong
14:26:14 <sinelaw> ok, i'll check this out tomorrow. losing consciousness 
14:26:23 <tolkad> sinelaw: perhaps you are trying to model your domain too closely
14:26:37 <sinelaw> perhaps. thanks :) be back later
14:40:17 <chrisdone> Peaker: http://hpaste.org/30104/hlint_test :-)
14:41:07 <chrisdone> Peaker: I'm thinking I'll add a button to 'run' which sends the code to codepad.org and displays the output below the paste
14:41:27 <Peaker> chrisdone: cool! :-)
14:41:34 <chrisdone> ^_^
14:53:15 <killown> http://hpaste.org is a awesome paste but the only problem that's forcing to put Title and Author.
14:53:53 <Axman6> you can leave them blank...
14:54:02 <Axman6> most people do
14:54:05 <killown> Axman6, i can't
14:54:20 <Axman6> huh, well i've always been able to
14:54:39 <killown> this doesn't me allow post anything without put author and title
14:54:53 <chrisdone> the old one let you, and resultingly 90% of posts didn't have a title or author
14:54:58 <killown> Axman6, I think have some changes then..
14:55:07 <killown> had*
14:55:20 <chrisdone> this one the title and author are required, and now you have a nice table of meaningful titles and authors
14:55:22 <Axman6> huh, lame
14:55:55 <chrisdone> "this paste is interesting, I wonder who made it or what it's about. I guess I'll never know."
14:56:20 <medfly> if I wanted you to look at my pastes I'd make them descriptive.
14:56:23 <medfly> but I don't.
14:56:48 <chrisdone> then use another paste site
14:56:54 <medfly> I do.
14:56:58 <chrisdone> I want to look at your pastes :P
14:57:06 <medfly> NEVER
14:57:10 <chrisdone> :o
14:57:28 * chrisdone peeks around medfly's shoulder
14:57:33 <chrisdone> P_P
14:59:46 <FunctorSalad> autogenerate descriptions from unlikely words? 
15:01:59 <chrisdone> FunctorSalad: http://images.encyclopediadramatica.com/images/b/bc/NoUParker.jpg
15:02:40 <FunctorSalad> does that mean I should code it?:o
15:09:02 * hackagebot Fungi 1.0.3 - An interpreter for Funge-98 programming languages, including Befunge.  http://hackage.haskell.org/package/Fungi-1.0.3 (ThomasEding)
15:11:35 <chrisdone> FunctorSalad: nah :p
15:20:24 <sshc> What are the advantages of using monads-fd instead of monads-tf?
15:21:14 <aristid> sshc: if it is more popular, does that count as an advantage?
15:21:50 <sshc> aristid: I don't see how that could be an advantage
15:23:45 <Peaker> so.. how come Python and C both take care to close file handles at exit, but GHC guys insist they don't have to? :( 
15:24:28 <megajosh2> exit from the program?
15:24:37 <FunctorSalad> what happens if you don't?
15:24:39 <sshc> Peaker: Sources?
15:25:00 <megajosh2> I don't get what you mean
15:26:00 <aristid> sshc: well, if there are conflicts between mtl, monads-fd and monads-tf, picking the most popular minimises conflicts
15:26:01 <megajosh2> main = do { openSomeFile "asdf.txt"; exitProgram } -- evil ensues?
15:26:12 <sshc> I'm pretty sure GHC closes file handles when the program exits
15:26:30 <sshc> You still shouldn't forget to close them yourself, though
15:26:32 <aristid> Peaker: the operating system closes all file handles, so why is it a problem?
15:26:56 <FunctorSalad> sshc: hmm, with lazy IO the one way to close the handle is to consume the whole file
15:26:58 <sshc> aristid: I don't need to use UndercidableInstances with monads-tf
15:26:59 <FunctorSalad> easy enough to miss that
15:27:44 <aristid> sshc: i don't like type families so much, mainly because fundeps allow me to write shorter code :)
15:27:45 <sshc> Yes, I see
15:28:06 <sshc> @FunctorSalad
15:28:06 <lambdabot> Unknown command, try @list
15:29:01 <Peaker> megajosh2, FunctorSalad: If you exit without explicitly closing the file
15:29:12 <Peaker> aristid: because there's file buffering that's not auto-flushed by OS
15:29:22 <FunctorSalad> then...?
15:29:27 <Peaker> aristid: c's stdlib uses atexit() to fflush all files. GHC doesn't
15:29:39 <Peaker> FunctorSalad: then you lose arbitrary data in your write buffers
15:30:01 <Peaker> FunctorSalad: strictly speaking, if you don't explicitly close or flush, you aren't guaranteed to get all data in the file -- but it's still a bad move to lose it for no good reason
15:30:03 <FunctorSalad> wow, that'd be pretty serious
15:30:11 <Peaker> I opened a ticket and they closed it as not-a-bug
15:30:19 <Peaker> Use "withFile", not "openFile"
15:30:30 <aristid> Peaker: ah, file buffering. well.
15:30:31 <FunctorSalad> did it actually happen to you? (data not being written)
15:30:33 <Peaker> In a real program I would, but I should be able to write q&d scripts with "openFile"
15:30:46 <Peaker> FunctorSalad: yes, I've now been bitten by it 2nd time
15:30:53 <sshc> Peaker: Where's the ticket?
15:31:00 <sshc> I can't find it.
15:31:06 <Peaker> I'll try to find
15:31:10 <FunctorSalad> Peaker: but writeFile and appendFile are safe?
15:31:17 <FunctorSalad> never used openFile for writing
15:31:33 <Peaker> FunctorSalad: I guess they would be
15:33:47 <Peaker> sshc: http://hackage.haskell.org/trac/ghc/ticket/4119
15:34:32 <Peaker> Igloo closed as invalid "This is an example of how finalizers aren't guaranteed to be run. If you use withFile then the handle will be closed and the data written, even if there is an exception:"
15:36:45 <FunctorSalad> but in your example there isn't necessarily an exception
15:42:59 <Peaker> FunctorSalad: yeah, it's a graceful exit
15:43:24 <megajosh2> ' join somewhere
15:43:27 <megajosh2> Whoops
15:43:31 <Peaker> FunctorSalad: This makes quick&dirty scripts in Haskell a bit harder :(
15:43:44 <Peaker> FunctorSalad: Just debugged a little script I had for 10 min (What? Why is it creating a file slightly shorter than...)
15:43:50 <Olathe> Could someone not on Windows please tell me if MyBot.hs in the zip file at http://ai-contest.com/forum/download/file.php?id=122 compiles (no need to check if it runs)?
15:44:26 <megajosh2> Sure
15:44:45 <benmachine> does it contain a TH splice that goes runIO $ launchMissiles?
15:44:49 <Olathe> Haha
15:44:55 <Olathe> No TH at all :)
15:44:59 <benmachine> k :P
15:45:48 <megajosh2> Yeah, it compiled
15:46:03 <Olathe> Thanks :)
15:51:32 <chrisdone> unsafeEatBabiesAndMaybePerformIO
15:51:46 <Entroacceptor> TH makes stuff execute at compile time?
15:52:11 <Entroacceptor> and unsafeEatBabies sounds messz
15:52:12 <Entroacceptor> messy
15:52:41 <Entroacceptor> rather take the safe variant and don't have to clean up the blood everywhere
15:54:43 <benmachine> TH can make stuff run at compile time yes
15:55:11 <megajosh2> ...why?
15:55:33 <benmachine> for giggles?
15:55:46 <benmachine> you can include datafiles in the code, I guess
15:55:46 <benmachine> or
15:56:15 <benmachine> ok I don't have a vertical bar character anymore
15:56:17 <benmachine> that's distressing
15:56:26 <benmachine> I seem to have bound it to ~
15:56:48 <Entroacceptor> take that: |
16:09:42 * ddarius needs to shape his nails.
16:15:05 <aruns> hi. i'm trying to use hsc2hs to interface with a c library. i have used #{enum to enumerate some constants defined in the header (.h) file. when i run hsc2hs on the file it runs fine and produces what seems to be the right .hs file. but when i try to load the hs file, i get an error referring to the .hsc file at the line where i have #{enum
16:15:22 <aruns> http://hpaste.org/30223/hsc2hs__invalid_type_signatur thats the hsc file. and the error is Invalid type signature
16:17:50 <erisco> as much as I like the idea of type systems I can never figure the damn thing out... why is this happening? http://pastebin.com/3NWxiAH7
16:17:58 <erisco> it is a Miranda program
16:19:35 <erisco> I don't understand how any of the types could possibly be [*]->**
16:21:41 <erisco> the type system just hates the recursive function I want
16:22:21 <Jawa0> Hi folks
16:22:36 <megajosh2> I don't know if #haskell is the best place to ask about Miranda <_<
16:22:42 <megajosh2> Jawa0: Hey
16:22:54 <erisco> its the only place... unless I hunt down my prof
16:23:21 <erisco> maybe some of the tutoring grad students know Miranda but this is not class work that I am doing
16:23:40 <erisco> in Haskell, is the type sane?
16:24:02 <erisco> I couldn't get my version with lists working and I eventually understood the issue with that
16:24:06 <Saizan> erisco: are you sure you don't want "tree * ::= Niltree | Node * [tree *]" ? that'd be a much saner type
16:24:22 <Jawa0> So I'm new to Haskell 
16:24:44 <ddarius> erisco: No.  You have an error, most likely an infinite loop.
16:24:59 <erisco> Saizan: do you think? but I need two parameters no?
16:25:14 <erisco> ddarius: probably I have an infinite type, yes
16:25:34 <erisco> but if I do it isn't just a "Whoops let me fix that" kind of discovery
16:25:53 <Saizan> erisco: why do you need two parameters?
16:26:08 <megajosh2> Jawa0: Same here
16:26:18 <Olathe> Is there a way to have GHC not put "Linking whatever" on stderr?
16:26:28 <Olathe> -v0 doesn't seem to help.
16:27:05 <erisco> Saizan: one for the value and one for the list type, no?
16:27:18 <Jawa0> megajosh2: neat
16:27:47 <Saizan> erisco: i assumed the list was supposed to contain other trees with the same value type
16:28:07 <erisco> Saizan: well, it works using your changes... what am I not understanding correctly?
16:28:21 <Saizan> since that's the kind of structure your options is building
16:28:26 <erisco> Saizan: yes... ah
16:28:35 <erisco> damn this is terribly confusing and subtle
16:28:55 <ddarius> Not really...
16:29:02 <Jawa0> ... I'm reading Hudak's "school of expression" book...
16:29:10 <erisco> ddarius: you're not me
16:29:28 <ddarius> erisco: You didn't say "I find this terribly confusing and subtle."
16:29:51 <Jawa0> And ran into the monomorphic type restriction landmine
16:30:15 <erisco> what, does anyone have the right to give an absolute opinion?
16:30:27 <Saizan> "tree * ::= Niltree | Node * [tree *]" means that a tree with values of some type *, is either an empty tree, or it's a node containing a value and a list of trees
16:30:52 <erisco> I figured that could be implied
16:30:57 <erisco> but, yes, I see how your version works Saizan but I am not entirely sure what my old version was doing
16:31:12 <Olathe> erisco: If they can't, can they tell anyone else absolutely that they can't?
16:31:40 <erisco> Olathe: touche
16:31:51 <erisco> this is where we invoke varying religious figures
16:32:03 <Olathe> Haha
16:32:48 <Saizan> erisco: your version made no relation between the tree type and what ended in the list, so if you wanted to give a type to options it had to be [*] -> tree * (tree * (tree * (...))) and such infinite types are not allowed
16:33:24 <Saizan> Jawa0: and?:)
16:33:30 <ddarius> Your original code says begins to infer as: option :: [A] -> Tree A B.  Then in the second clause your use of option recursively requires B = Tree A B and Miranda (and almost every language in existence) disallows such types.
16:33:44 <Jawa0> I read how to fix it for a variable, but can't figure out how to fix it for a fn arg
16:34:33 <Saizan> Jawa0: can you paste the code together with the error?
16:34:42 <Saizan> on hpaste.org or any other pastebin site
16:34:42 <erisco> I need to do a hell of a lot more functional programming
16:34:58 <Jawa0> E.g a = (2/n)*pi
16:34:59 <aruns> did anyone have a chance to look at my 'Invalid type signature' error on hpaste ?
16:35:38 <Jawa0> N is an int, but I want a to be Float
16:36:29 <ddarius> erisco: Actually, more logic programming would be more helpful for this particular problem, though most Prolog implementations allow such structures.
16:36:33 <Saizan> Jawa0: ah, you've to say "a = (2/fromIntegral n)*pi :: Float" if you don't add :: Float it'll default to Double
16:36:41 <Jawa0> If I pass a to a fnc expecting a Float I get an error
16:37:10 <Saizan> aruns: can you annotate with more of the error?
16:37:14 <Jawa0> It infers Int for a
16:37:43 <Saizan> Jawa0: try my code above
16:37:49 <erisco> I think I've finally built my structure
16:38:52 <erisco> http://pastebin.com/LfmGukZS now I just need to write a function to reduce that to the list of lists I need
16:38:58 <Saizan> > fromIntegral (1 :: Int) :: Float
16:38:59 <lambdabot>   1.0
16:40:00 <Jawa0> Saizan: thx seems promising. I had tried the Float annotation on pi, but not the fromIntegral
16:40:24 <Saizan> Jawa0: the :: Float applies to the whole expression, not just pi, btw
16:40:40 <Saizan> in this case there isn't much difference, anyhow
16:40:45 <monochrom> @faq can haskell build websites?
16:40:45 <lambdabot> The answer is: Yes! Haskell can do that.
16:40:51 <erisco> and since I know that is possible I'll probably just work on my math HW and resume this tomorrow
16:40:57 <monochrom> and now we have confirmation too: http://www.vex.net/~trebla/humour/lmcify.html?t=haskell+can+build+websites
16:41:24 <erisco> thanks for the help everyone... if I can arrive at a solution it will be quite satisfactory indeed
16:41:37 <erisco> especially since I've only used three lines of code thus far :D
16:41:57 <ddarius> erisco: Sounds like two and a half too many.
16:42:04 <Olathe> monochrom: hahaha
16:42:07 <AndyStewart> Morning all! :)
16:42:14 <erisco> for Haskellers I am not surprised
16:42:26 <erisco> for someone who is still trying to shake procedural instincts it is quite nice
16:42:35 <Olathe> http://www.vex.net/~trebla/humour/lmcify.html?t=haskell+can+launch+the+missiles
16:42:49 <erisco> ddarius: can you see how I intend to reduce the tree to my list of answers?
16:44:00 <aruns> Saizan: i have annotated with the error. its on line #23 . i have some comments above that showing the error. http://hpaste.org/30224/hsc2hs__invalid_type_signatur
16:44:43 <Jawa0> Saizan: thx I was also using parens so I think my float annotation was only on pi. Will try when I get back to my machine
16:45:25 <ManateeLazyCat> I was think whether add (translate by Google) at end of irc message?
16:47:35 <Saizan> aruns: are you loading the .hsc file in ghci directly? or do you mean after processing it with hsc2hs?
16:48:01 <aruns> Saizan: after processing with hsc2hs. the hs file looks fine. the enums have come out fine
16:48:12 <erisco> ddarius: I am not so sure how effecient it is going to be...
16:48:40 <aruns> ReadOnly       :: FileAccessOption \n ReadOnly       = FileAccessOption 0 \nWriteOnly      :: FileAccessOption \nWriteOnly      = FileAccessOption 1
16:49:04 <aruns> thats some of them, but they are all there looking like that
16:49:11 <Saizan> ah, maybe the problem is that they start with uppercase letterls?
16:49:30 <ManateeLazyCat> aruns: Are you binding some module to get permission information?
16:49:56 <aruns> Saizan: you mean the constants have to be lower case?
16:50:02 <Saizan> aruns: yeah
16:50:19 <Saizan> start with a lowercase letter at least
16:50:30 <aruns> ManateeLazyCat: no its the tiny constant database that i'm trying to interface with
16:50:45 <Saizan> otherwise they are lexically data-constructors (or types, or classes..)
16:50:58 <ManateeLazyCat> aruns: Oh.
16:51:55 <erisco> ddarius: the data structure grows quadratically so I am really depending on taking advantage of lazy evaluation
16:51:56 <aruns> i probably can just write it in haskell itself. i'll probably do that in the next step. i just want to see how this interfacing with this library works
16:52:29 <aruns> Saizan: thanks :) that was it
16:52:57 <erisco> maybe exponentially?
16:53:00 <erisco> its bad anyways :P
16:55:19 <megajosh2> @hoogle connectTo
16:55:20 <lambdabot> Network connectTo :: HostName -> PortID -> IO Handle
16:55:20 <lambdabot> Network.CGI.Compat connectToCGIScript :: String -> PortID -> IO ()
16:57:27 <megajosh2> Hey, can you NOT export a data constructor, but still export its record fields?
16:57:38 <megajosh2> Or do you have to make accessor functions manually and export those?
16:58:09 <Saizan> does it work if you export them as normal functions?
16:59:16 <ddarius> Saizan: You've probably done that many a time.
17:00:21 <Saizan> ddarius: you assume i write export lists.
17:04:15 <rschnck> I'm completely stuck on how to even approach this problem. I need to write a function that given an integer, makes a list of lists representing all possible binary sequences of the length of the given integer.
17:04:40 <rschnck> i.e. 3 would give [[0,0,1],[0,1,1]...[1,1,1]]
17:05:56 <ddarius> I can define that in 11 non-whitespace, lexical tokens of the concrete syntax.
17:06:20 <QtPlatypus> rschnck: Do you wish to do this via list comprehention or via recursion.
17:06:29 * ddarius would use neither.
17:06:30 <rschnck> QtPlatypus: recursion, definitely.
17:06:39 <rschnck> And hints would be nice, I'd like to try to solve it myself.
17:07:24 <QtPlatypus> rschnck: Well normally if your using a recursive solution you have to think about two cases.  The base case and the inductive/recursive case.
17:07:51 <Philonous> >replicateM 3 [0,1]
17:07:56 <Philonous> > replicateM 3 [0,1]
17:07:57 <lambdabot>   [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,0],[1,1,1]]
17:08:01 <QtPlatypus> rschnck: Your base case is nornally trival.  In this case what would you do if your function was give 0?
17:08:28 <rschnck> QtPlatypus: []?
17:08:38 <Philonous> Why and how this works is left as an exercise to the reader :)
17:09:03 <ddarius> Philippa: That's essentially my solution only defined in terms of Prelude functions.
17:09:14 <rschnck> Philonous: Hah
17:09:21 <ddarius> (and with the right argument order, and pointfree)
17:10:13 <QtPlatypus> rschnck: Spot on.  The recursive step goes along the lines of.  Derive n from having (n-1).  So if you had a list of all possible binary sequences of the length (n-1) how would you make a kist of all possable binary strings of n.
17:10:20 <QtPlatypus> ?
17:11:04 * hackagebot ui-command 0.5.3 - A framework for friendly commandline programs  http://hackage.haskell.org/package/ui-command-0.5.3 (ConradParker)
17:12:00 <rschnck> QtPlatypus: Well the number of sequences you get is 2^n. So if we had length 2, we get 4. With length 3, we get 8. So..you could just append either 0 or 1 to each, right?
17:18:21 <rschnck> Sorry, lost connection. 
17:18:29 <rschnck> QtPlatypus: Well the number of sequences you get is 2^n. So if  we had length 2, we get 4. With length 3, we get 8. So..you  could just append either 0 or 1 to each, right?
17:18:39 <rschnck> [] -> [[0],[1]] -> [[0,0],[0,1],[1,0],[1,1]] -> 
17:18:40 <rschnck> [[0,0,0],[0,0,1],[0,1,0],[0,1,1],[1,0,0],[1,0,1],[1,1,1],[1,1,0]]
17:18:41 <rschnck> Right?
17:19:02 <Philonous> That's the idea
17:19:36 <rschnck> So I can just use map (0:) & map (1:0)?
17:19:39 <rschnck> oops
17:19:43 <rschnck> map 1:*
17:24:51 <rschnck> Okay, it works :D
17:25:01 <rschnck> Simpler than I thought. The (n-1) thinking really helps.
17:25:14 * hackagebot primitive 0.3.1 - Wrappers for primitive operations  http://hackage.haskell.org/package/primitive-0.3.1 (RomanLeshchinskiy)
17:28:15 * hackagebot vector 0.7 - Efficient Arrays  http://hackage.haskell.org/package/vector-0.7 (RomanLeshchinskiy)
17:30:43 <hpc> :t mapM_
17:30:44 <lambdabot> forall a (m :: * -> *) b. (Monad m) => (a -> m b) -> [a] -> m ()
17:37:08 <Axman6> > let gray 0 = [0,1]; gray n = map (0:) xs ++ map (1:) (reverse xs) where xs = gray (n-1) in gray 3
17:37:09 <lambdabot>   No instance for (GHC.Num.Num [t])
17:37:09 <lambdabot>    arising from a use of `e_10010113' at ...
17:37:12 <Axman6> :\
17:37:21 <hpc> @hoogle lift
17:37:21 <lambdabot> Control.Monad.Trans lift :: (MonadTrans t, Monad m) => m a -> t m a
17:37:22 <lambdabot> Text.ParserCombinators.ReadPrec lift :: ReadP a -> ReadPrec a
17:37:22 <lambdabot> Language.Haskell.TH.Syntax lift :: Lift t => t -> Q Exp
17:37:47 <hpc> aha!
17:38:52 <Axman6> ah
17:39:16 <Axman6> > let gray 0 = ["0","1"]; gray n = map ('0':) xs ++ map ('1':) (reverse xs) where xs = gray (n-1) in gray 3
17:39:17 <lambdabot>   ["0000","0001","0011","0010","0110","0111","0101","0100","1100","1101","111...
17:39:26 <Axman6> > let gray 0 = ["0","1"]; gray n = map ('0':) xs ++ map ('1':) (reverse xs) where xs = gray (n-1) in gray 2
17:39:27 <lambdabot>   ["000","001","011","010","110","111","101","100"]
17:39:50 <Axman6> hmm, there must be a nicer way to do that
17:40:41 <Axman6> > let gray 0 = ["0","1"]; gray n = map ('0':) xs ++ map ('1':) (reverse xs) where xs = gray (n-1) in map read (gray 2) :: [Int]
17:40:42 <lambdabot>   [0,1,11,10,110,111,101,100]
17:41:59 <akoustik> Axman6: i gotta ask, are you working on comp. sci. homework? i think we're working on, like, the same problem.
17:42:21 <Axman6> nah, it's something i used in digital comms last semester
17:42:31 <Axman6> well, pretty much any of my engineering courses
17:42:38 <akoustik> oh, geez, 'cause that woulda been weird.
17:42:46 <akoustik> but, yeah, cool. hah
17:47:48 <benmachine> > replicateM 3 "01" :: [String]
17:47:49 <lambdabot>   ["000","001","010","011","100","101","110","111"]
17:47:59 <benmachine> Axman6: ^ that?
17:48:19 <benmachine> or is the order significant
17:48:27 <Axman6> order is significant
17:48:36 <benmachine> k
17:48:46 <Axman6> it's gray order, each number differs by only one bit fromt hew two next to it
17:48:55 <benmachine> ah I see
17:48:56 <Axman6> the*
17:49:09 <Axman6> used a hell of a lot in digital comms, to reduce bit errors
17:52:23 <benmachine> > map ('0' :) `mappend` map ('1' :) . reverse $ ["00", "01", "11", "10"]
17:52:24 <lambdabot>   Precedence parsing error
17:52:24 <lambdabot>      cannot mix `Data.Monoid.mappend' [infixl 9] a...
17:52:29 <benmachine> aw
17:52:38 <benmachine> > map ('0' :) `mappend` (map ('1' :) . reverse) $ ["00", "01", "11", "10"]
17:52:39 <lambdabot>   ["000","001","011","010","110","111","101","100"]
17:52:42 <ddarius> @google gray codes
17:52:42 <lambdabot> http://en.wikipedia.org/wiki/Gray_code
17:52:43 <lambdabot> Title: Gray code - Wikipedia, the free encyclopedia
18:02:38 <megajosh2> Okay, this looks bad...
18:05:34 <ddarius> Axman6: As an exercise, you should prove that your recursive algorithm produces Gray codes in a system like Coq or Agda or Isabelle/HOL.
18:05:51 <ddarius> (or perhaps s/or/and/g)
18:06:47 <codolio> Proving it in all three would reduce the chance that you exploited a bug, I guess.
18:06:56 <blackdog> algandithm?
18:08:01 <megajosh2> http://hpaste.org/paste/30225/i_dont_think_i_understand_io
18:08:09 <megajosh2> I think I messed up something :C
18:08:45 <megajosh2> I'm trying to make an IRC bot to get a handle on IO in haskell, but I've ran into a problem already
18:09:36 <dolio> Having socket be IO Handle is a bad idea.
18:09:43 <megajosh2> I thought so
18:09:51 <dolio> I knew what your problem was going to be as soon as I saw it. :)
18:09:57 <megajosh2> Heh
18:09:58 <vanadium> You kinda want makeNetwork :: blah blah -> IO IRCNetwork, I think
18:10:11 <megajosh2> I'll try that; I bet that's all I'm doing wrong
18:10:19 <vanadium> and then the other types to adapt :V
18:10:29 <vanadium> err, change
18:10:32 <ddarius> dolio: Your logic has some flaws.  For example, if it were false and you proved it, your chances of exploiting three bugs would be 100%.
18:11:16 <vanadium> IO foo does not mean "it's a foo, but it is an IO'y foo", it basically referes to an action that does whatever and eventually, internally obtains a foo
18:11:52 <vanadium> so your current IRCNetwork is a record of a bunch of pieces of data and a recipe to connect to IRC that can be used over and over again
18:12:07 <megajosh2> Right, I gotta remember what `IO' really means... thanks
18:12:20 * djahandarie mumbles about recipes and actions
18:12:35 * vanadium mumbles about being bad at terminology
18:13:13 <dolio> ddarius: That's true, but I don't think it's incompatible with what I said.
18:13:33 <djahandarie> You used them correctly (considering how they have almost no definition anyways). I just don't like them
18:14:49 <vanadium> Fine, it is a really a thunk that breaks the rules of purity but is helpfully hidden from potential careless evaluators by the type system
18:17:30 <ddarius> vanadium: You've gone from accurate but imprecise to precise but inaccurate.
18:18:02 <ddarius> (except that I don't like the phrasing "internally obtains a foo")
18:18:50 <vanadium> I guess there is a function around the thunk that pretends to do something in order to force evaluation order? I just looked at the ghc definitions of some would-be primitives and started guessing
18:19:44 <vanadium> @src unsafePerformIO
18:19:45 <lambdabot> Source not found. You untyped fool!
18:20:29 <ddarius> Yep.  In GHC, there are magic thunks inside but the type system alone wouldn't be able to keep you from evaluating them as seq is polymorphic.
18:22:01 <vanadium> I guess hiding them inside a data constructor so seq finds a harmless weak head normal form would not count anymore
18:27:26 <megajosh2> http://hpaste.org/30227/im_kinda_getting_the_same_pro I'm kinda getting the same problem
18:27:42 <megajosh2> Except now new `IO IRCNetwork' s keep being made...
18:27:51 <megajosh2> I think
18:27:59 <vanadium> do net <- makeNetwork blahblah instead of the let thing
18:28:07 <megajosh2> Hmm... okay
18:28:45 <vanadium> 'let' just binds the IO action to the name. It does not really get you a value out of it. Using the <- thing basically builds a new IO action that is, like "okay do that and then with the result go do this"
18:35:49 <blackdog> whee, been a while since i saw n+k patterns
18:35:57 <blackdog> how long have they been gone?
18:36:05 <ddarius> blackdog: Less than a year.
18:36:34 <blackdog> can you turn them back on with a language directive, or are they verboten?
18:38:12 <ddarius> blackdog: You'd have to be using LANGUAGE Haskell2010 for them not to be there to begin with and you should be able to choose Haskell 98 as a language as well (in the compiler's that even explicitly support Haskell 2010.)
18:41:37 <blackdog> ddarius: hm, that's weird. although i've just realised that the HEAD of ghc was first in my path...
18:42:08 <megajosh2> Hmm... I can't figure out how to get around creating a new socket every time I want to access it
18:42:20 <freedrull> can I turn an Int into a Word8 ?
18:42:28 <jmcarthur> woah awesome, base 4.3 has a "true" instance of Monad for Either a
18:42:36 <jmcarthur> none of that Error crap
18:42:49 <megajosh2> > (500 :: Int) :: Word8
18:42:50 <lambdabot>   Couldn't match expected type `GHC.Word.Word8'
18:42:50 <lambdabot>         against inferred type...
18:42:54 <megajosh2> No?
18:43:07 <megajosh2> > (fromIntegral 500 :: Int) :: Word8
18:43:08 <lambdabot>   Couldn't match expected type `GHC.Word.Word8'
18:43:08 <lambdabot>         against inferred type...
18:43:18 <jmcarthur> i didn't even realize it until i used it without thinking and then failed to compile the same code against 4.2 later
18:43:20 <megajosh2> > (fromIntegral (500 :: Int)) :: Word8
18:43:20 <lambdabot>   244
18:43:26 <megajosh2> Err...
18:43:33 <freedrull> :3
18:43:45 <megajosh2> > (fromIntegral (7 :: Int)) :: Word8
18:43:46 <lambdabot>   7
18:43:52 <megajosh2> > 2^8
18:43:53 <lambdabot>   256
18:43:54 <roconnor> jmcarthur: the monad instance for Either was in base?
18:44:03 <jmcarthur> roconnor: not in 4.2
18:44:05 <freedrull> thanks megajosh2
18:44:05 <roconnor> jmcarthur: I thought it was in the mtl
18:44:23 <jmcarthur> roconnor: it's in base 4.3 now, and it's the proper version
18:44:29 <benmachine> it got moved
18:44:35 <benmachine> also new mtl has the "proper" version
18:44:39 <jmcarthur> awesome
18:44:48 <roconnor> jmcarthur: which module?
18:44:55 <jmcarthur> roconnor: Control.Monad.Instances
18:45:09 <freedrull> > singleton ((fromIntegral (5::Int))::Word8
18:45:10 <lambdabot>   <no location info>: parse error (possibly incorrect indentation)
18:45:22 <freedrull> > singleton ((fromIntegral (5::Int))::Word8)
18:45:23 <lambdabot>   Not in scope: `singleton'
18:45:23 <jmcarthur> still no  instance Monoid o => Monoid ((,) o)  though :(
18:45:28 <jmcarthur> oop
18:45:31 <freedrull> >import Data.Bytestring
18:45:34 <jmcarthur> still no  instance Monoid o => Monad ((,) o)  though :(
18:45:40 <roconnor> jmcarthur: I'm confused :)
18:45:40 <megajosh2> You can't go that far
18:45:45 <megajosh2> Might as well just use GHCi
18:45:53 <Axman6> jmcarthur: how would that be implemented?
18:45:57 <freedrull> i just wanted to show you this
18:45:58 <benmachine> Writer unwrapped?
18:46:05 <jmcarthur> yeah, unwrapped Writer
18:46:16 <freedrull> Prelude Data.Word Data.ByteString> singleton ((fromIntegral (5::Int))::Word8)
18:46:16 <freedrull> "\ENQ"
18:46:22 <benmachine> we already have unwrapped Reader
18:46:24 * Axman6 would like the source if possible
18:46:38 <jmcarthur> Axman6: return = (,) mempty ; join (a, (b, x)) = (a `mappend` b, x)
18:46:38 <benmachine> and I suppose you can't unwrap State without functor compositions
18:46:42 <megajosh2> > chr "\ENQ"
18:46:43 <lambdabot>   Couldn't match expected type `GHC.Types.Int'
18:46:43 <lambdabot>         against inferred type ...
18:46:50 <megajosh2> > chr '\ENQ'
18:46:51 <lambdabot>   Couldn't match expected type `GHC.Types.Int'
18:46:51 <lambdabot>         against inferred type ...
18:46:53 <sshc> How could I write (>>=) for "newtype Foo a = Foo {unFoo :: <a monadic type of kind `*'>}"?
18:47:13 <benmachine> sshc: unwrap and rewrap it?
18:47:20 <megajosh2> :t '\ENQ'
18:47:21 <lambdabot> Char
18:47:24 <megajosh2> :/
18:47:27 <freedrull> haha
18:47:27 <ddarius> ord
18:47:27 <benmachine> I'm not sure you'd get it obeying the rules though
18:47:31 <megajosh2> OH DUH
18:47:35 <megajosh2> I couldn't think of it
18:47:41 <megajosh2> > ord '\ENQ'
18:47:42 <lambdabot>   5
18:47:42 <ddarius> @hoogle Char -> Int
18:47:43 <lambdabot> Data.Char digitToInt :: Char -> Int
18:47:43 <lambdabot> Data.Char ord :: Char -> Int
18:47:43 <lambdabot> Data.ByteString.Char8 count :: Char -> ByteString -> Int
18:47:43 <jmcarthur> roconnor: what are you confused about?
18:47:54 <megajosh2> freedrull: Seems to be working just as expected... at least to me
18:48:14 <freedrull> oh ok
18:48:17 <freedrull> :t ord
18:48:18 <ddarius> Furthermore, you could just write: singleton 5
18:48:18 <lambdabot> Char -> Int
18:48:27 <Axman6> jmcarthur: what's the definition of >>= look like?
18:48:36 <roconnor> jmcarthur: where and what the various Either instances were for Monad
18:49:02 <jmcarthur> Axman6: >>= can be implemented in terms of join like this:   m >>= k = join $ fmap k m
18:49:03 <sshc> benmachine: GHC complains when I try "(Foo m) >>= k = Foo $ unFoo m >>= k"
18:49:15 <roconnor> jmcarthur: how can they just change the instance for Either.  It will break a million programs?
18:49:31 <jmcarthur> Axman6: or the direct approach:   (a, x) >>= k = let (b, y) = k x in (a `mappend` b, y)
18:49:41 <ddarius> sshc: Probably because that is all wrong.
18:49:57 <jmcarthur> roconnor: they didn't change anything. they are defining it for the first time. mtl should never have done it
18:50:03 <freedrull> ddarius: it doesnt quite work out like that in my program because I have a datatype of: data A = A Int that I am passing to singleton
18:50:16 <freedrull> but i suppose i could jjust use data A = A Word8
18:50:26 <Axman6> jmcarthur: and where is it useful? i can see how it is basically Writer, i think
18:50:27 <roconnor> jmcarthur: oh
18:50:30 <jmcarthur> not only did mtl define an instance for a type it didn't control, but it defined a stupid instance :(
18:50:32 <sshc> ddarius: How should it be written?
18:50:33 <roconnor> jmcarthur: that's pretty good
18:50:34 <benmachine> sshc: ohh right, your monadic type of kind * contains an a
18:50:43 <benmachine> makes more sense now :P
18:50:48 <roconnor> jmcarthur: that'll teach people to import the mtl
18:51:02 <benmachine> thought it was a phantom type and a very weird monad
18:51:24 <sshc> It's just a newtype wrapper over an existing monad
18:51:27 <monochrom> the Phantom of the Monad
18:51:28 <ddarius> sshc: You probably want: Foo m >>= k = Foo (m >> k)
18:51:34 <ddarius> +=
18:51:42 <benmachine> roconnor: I think for most uses the two instances are compatible
18:51:45 <jmcarthur> Axman6: i've wanted it any times for various things that i can't think of at this moment
18:51:50 <ddarius> Er
18:51:50 <jmcarthur> *many times
18:52:00 <benmachine> m >>= unFoo . k, I think?
18:52:01 <ddarius> sshc: You probably want: Foo m >>= k = Foo (m >>= unFoo . k)
18:52:17 <benmachine> sshc: see also: generalizednewtypederiving
18:52:23 <Axman6> because k :: a -> Foo b right?
18:52:42 <ddarius> Axman6: Yes and it needs to be a -> M b
18:54:42 <jmcarthur> Axman6: but it would be a lot more convenient than Writer since you don't have to wrap, of course. for example, to keep a running total of the lengths of some lists through a computation:  let withLength = Sum . length &&& id in liftA2 (++) (withLength xs) (withLength ys)
18:54:50 <jmcarthur> Axman6: or other random niceties
18:54:56 <ddarius> jmcarthur: It's not that it defined an instance for a type it didn't control, but that it defined an instance for a type -and- a class it didn't control.
18:55:08 <jmcarthur> ddarius: yeah, that's what i meant
18:55:11 <jmcarthur> horrible
18:55:44 <jmcarthur> *and* did a really specific instances for a really general type
18:55:50 <jmcarthur> *instance
18:56:02 <benmachine> well it's all over now
18:56:06 <benmachine> we can be at peace at last
18:56:19 <jmcarthur> not until people have adopted to the new versions of these packages
18:56:20 <sshc> benmachine: Can't make a derived instance of `Monad Foo' (even with cunning newtype deriving): cannot eta-reduce the representation type enough In the newtype declaration for `Foo'
18:56:26 <jmcarthur> s/ to//
18:57:00 <benmachine> sshc: huh, weird, what's the newtype?
18:57:04 <sshc> benmachine: Same error for Functor, MonadState, MonadReader, MonadIO, etc
18:57:29 <benmachine> I can't imagine how you'd get that error but the ordinarily-declared instance would work
18:57:43 <sshc> benmachine: newtype Foo a = Foo {unFoo :: AbortT a (<stack of standard monads>) a}
18:58:04 <benmachine> ah
18:58:37 <benmachine> and AbortT a Identity a is a monad? what does its instance head look like?
18:59:14 <sshc> benmachine: I don't know.  http://hackage.haskell.org/package/AbortT-transformers
18:59:55 <benmachine> sshc: I think you're going to run into trouble with that one
19:00:20 <benmachine> sshc: with the AbortT first and third parameters being the same, I mean
19:01:09 <FunctorSalad> is there a cabal configuration file entry for always building a given package with given flags?
19:01:15 <ivanm> no
19:01:24 <sshc> benmachine: What should I do?
19:01:24 <ivanm> unfortunately
19:01:42 <FunctorSalad> ivanm: other than a wrapper shell script ;o
19:01:47 <jmcarthur> hmm, actually... we could have a set of monad instances for several sizes of tuples
19:01:48 <ivanm> that is why IIUC happstack doesn't split testing stuff on a flag
19:01:49 <lispy> FunctorSalad: I keep wondering what cabal is, because it's not a package manager and it's not a great build system either :)
19:01:57 <jmcarthur> instance Monoid a => Monad ((,) a), instance (Monoid a, Monoid b) => Monad ((,,) a b), etc.
19:01:59 <benmachine> sshc: what do you want to do?
19:02:03 <ivanm> FunctorSalad: there is nothing analogous to gentoo's use-flag dependencies for cabal packages
19:02:32 <jmcarthur> ivanm: that would be awesome to have!
19:02:51 <benmachine> sshc: I think that Foo isn't a monad, but I'm not sure
19:02:53 <jmcarthur> kind of like cabal's "preferences" setting but for flags rather than dependencies
19:02:56 <ivanm> yeah, I think dcoutts has been working out how to do something like that
19:03:14 <FunctorSalad> ! [[ "$*" =~ xmobar ]] || set -- "$@" "--flags=with_xft"  ;    /usr/local/bin/cabal "$@"
19:03:16 <FunctorSalad> ;)
19:03:22 <ivanm> jmcarthur: the test support for cabal should be a good start, in that we're starting to formalise and agree upon at least one flag
19:03:35 <jmcarthur> nice
19:03:55 <benmachine> sshc: in your >>= definition, you'd need to produce an AbortT b m b where the current >>= would produce an AbortT a m b
19:05:08 <benmachine> sshc: in fact I'm pretty sure that's impossible because once the computation has aborted you can't really change the first parameter anymore
19:05:27 <sshc> benmachine: I'll probably add another parameter
19:05:33 <benmachine> that sounds sensible
19:06:11 <benmachine> it's possible that newtype FooT m a = Foo (m (Either a a)) is a monad transformer, but I'm not sure it would be useful
19:07:17 <benmachine> in fact that's pretty much isomorphic to WriterT Bool
19:07:22 <benmachine> which could be interesting but isn't
19:10:13 <ddarius> benmachine: Dually, (a,a) is a comonad that's essentially equivalent to the Bool -> a comonad.
19:10:33 <ddarius> Either a a should also be a comonad that's pretty much the same as the (a,a) monad.
19:10:49 <benmachine> did you mean the Bool -> a monad?
19:10:56 <jmcarthur> there are a lot of pretty nice comonads that we should have
19:11:09 <ddarius> benmachine: No.
19:11:14 <jmcarthur> i think part of the reason comonads aren't used very often is just because they aren't really available outside of category-extras
19:11:43 <benmachine> ddarius: oh, it just confused me because you compared a comonad to a comonad and then a comonad to a monad
19:12:07 <benmachine> oh, I vaguely remember the (->) r comonad
19:12:14 <jmcarthur> by Bool you guys really mean Any or All, right?
19:12:20 <benmachine> jmcarthur: and they don't have as good PR
19:12:22 <ddarius> benmachine: It's a duality between two type constructors travelling across an adjunction.
19:12:25 <ddarius> jmcarthur: Yes.
19:12:28 <benmachine> jmcarthur: I meant any monoid on Bool, yeah
19:12:47 <benmachine> ddarius: right, yes
19:13:31 <benmachine> ddarius: well I say that like I completely understand, I only mostly do
19:14:36 <ManateeLazyCat> Ah openURIString use Char8.unpack.
19:14:56 <ManateeLazyCat> That's the reason why openURIString cut my unicode string.
19:15:43 <ddarius> benmachine: There's a rather pretty result that shows if F -| U and F is a monad then U is a comonad and vice versa and dualized.
19:17:12 <benmachine> ddarius: I've never learnt about adjunctions, but okay :P
19:19:57 <ManateeLazyCat> @hackage AttoJson
19:19:57 <lambdabot> http://hackage.haskell.org/package/AttoJson
19:20:41 <ManateeLazyCat> @hackage JSONb
19:20:42 <lambdabot> http://hackage.haskell.org/package/JSONb
19:21:26 <ddarius> benmachine: Adjunctions are pretty as you've probably heard, though I find (parameterized) representability more fundamental.  Of course, these are very closely related concepts.
19:21:39 <ManateeLazyCat> package 'json' is good, but not support ByteString.
19:22:03 <benmachine> ddarius: you overestimate what I've heard >_>
19:22:23 <benmachine> ddarius: my entire education on this subject is basically #haskell
19:22:52 <benmachine> and that only the bits for which I've been around when other people have mentioned them
19:23:03 <benmachine> I wonder if I should be flattered you assume I know things :P
19:24:56 <ddarius> benmachine: Perhaps I'm subtly manipulating you toward learning more things.
19:25:02 <benmachine> perhaps!
19:25:16 * benmachine goes and reads about adjunctions so that he can look cleverer
19:25:55 <ddarius> benmachine: I highly recommend going through Barr and Wells' ESSLLI lecture notes.
19:27:18 <benmachine> ddarius: noted, thanks
19:30:23 <ManateeLazyCat> @hoogle getFields
19:30:23 <lambdabot> No results found
19:41:25 <zc00gii> on euler problem 3, I think this should work
19:41:31 <zc00gii> last [x | x <- take (floor (sqrt 600851475143)) primes, (600851475143 `mod` x) == 0]
19:41:48 <zc00gii> but it's been running for sometime now, does anyone know what is wrong?
19:42:44 <Axman6> well, you're doing a hell of a lot more work than you need to
19:43:01 <zc00gii> yeah, I dunno the functions very well
19:43:16 <Axman6> this is for project euler right?
19:43:20 <zc00gii> right
19:43:40 <Axman6> well, i'd start with sqrt N, and work down
19:43:53 <Axman6> rather than producing all these numbers that you don't need to
19:44:22 <Axman6> you're trying to find the largest prime that divides N right?
19:44:23 <zc00gii> or wait
19:44:28 <zc00gii> yeah
19:44:29 <zc00gii> wait
19:44:31 <zc00gii> I have an idea
19:44:53 <Axman6> another way is to find all primes that divide N, by repeatedly dividing it by prime numbers
19:45:11 <zc00gii> first [x | x <- reverse (take (floor (sqrt 600851475143)) primes), (600851475143 `mod` x) == 0] maybe?
19:45:30 <Axman6> head, but sure, that may work
19:45:48 <zc00gii> right, head, I'm used to car myself
19:46:34 <dmwit> first [x | x <- reverse xs] === last xs
19:46:44 <zc00gii> think first works though
19:46:47 <ivanm> dmwit: does that typecheck?
19:46:56 <ivanm> @type first
19:46:57 <lambdabot> forall (a :: * -> * -> *) b c d. (Arrow a) => a b c -> a (b, d) (c, d)
19:47:04 <Axman6> > pfacs n = f n 2 where f x d | d > x = [] | otherwise = case divMod x n of (x',0) -> n : f x' n; _ -> f x (n+1) in pfacs 1234
19:47:04 <lambdabot>   <no location info>: parse error on input `='
19:47:22 <dmwit> :t \primes xs -> last (take (floor (sqrt 600851475143)) (filter (\x -> 600851475143 `mod` x == 0) xs)
19:47:23 <zc00gii> first [1..10] --> ERROR: (error Can't find the prompt)
19:47:23 <lambdabot> parse error (possibly incorrect indentation)
19:47:45 <dmwit> :t \primes xs -> last (take (floor (sqrt 600851475143)) (filter (\x -> 600851475143 `mod` x == 0) xs))
19:47:46 <lambdabot> forall t a. (Integral a) => t -> [a] -> a
19:47:47 <Axman6> zc00gii: where are you running that? (also, it's head, not first)
19:47:51 <zc00gii> first [1..10] --> 
19:47:52 <dmwit> ivanm: seems to typecheck
19:47:54 <zc00gii> I think both work
19:47:57 <zc00gii> ope, no
19:48:38 <ivanm> @type \ xs -> first [ x | x >= reverse xs]
19:48:39 <lambdabot>     Couldn't match expected type `a b c' against inferred type `[a1]'
19:48:40 <lambdabot>     In the first argument of `first', namely `[x | x >= reverse xs]'
19:48:40 <lambdabot>     In the expression: first [x | x >= reverse xs]
19:48:46 <zc00gii> Axman6: something was already running in that prompt, so it 'sploded
19:48:47 <ivanm> dmwit: ^^
19:48:59 <Axman6> > let pfacs n = f n 2 where f x d | d > x = [] | otherwise = case divMod x n of (x',0) -> n : f x' n; _ -> f x (n+1) in pfacs 1234
19:48:59 <lambdabot>   [1234]
19:49:04 <Axman6> hmm
19:49:09 <zc00gii>  /hs is a IRC binding that connects to an inferior haskell process in emacs and evals it
19:49:11 <dmwit> Oh, fine, so I said first when I meant head.
19:49:21 <Axman6> zc00gii: why not use ghci?
19:49:29 <zc00gii> Axman6: it does use ghci
19:50:20 <Axman6> > let pfacs n = f n 2 where f x d | d > x = [] | otherwise = case divMod x n of (x',0) -> n : f x' n; _ -> f x (n+1) in pfacs 12
19:50:21 <lambdabot>   [12]
19:50:39 <zc00gii> Axman6: http://thefacepalm.net/screenshots/haskell.png
19:50:47 <Axman6> > let pfacs n = f n 2 where f x d | d > x = [] | otherwise = case divMod x d of (x',0) -> d : f x' d; _ -> f x (d+1) in pfacs 12
19:50:48 <lambdabot>   [2,2,3]
19:50:52 <Axman6> > let pfacs n = f n 2 where f x d | d > x = [] | otherwise = case divMod x d of (x',0) -> d : f x' d; _ -> f x (d+1) in pfacs 1234
19:50:53 <lambdabot>   [2,617]
19:51:01 <Axman6> > let pfacs n = f n 2 where f x d | d > x = [] | otherwise = case divMod x d of (x',0) -> d : f x' d; _ -> f x (d+1) in pfacs 600851475143
19:51:02 <lambdabot>   [71,839,1471,6857]
19:51:05 <ivanm> dmwit: hence my point ;-)
19:51:09 <Axman6> >_>
19:51:42 <ivanm> preflex: seen edwardk
19:51:43 <preflex>  edwardk was last seen on #haskell-blah 5 days, 9 hours, 31 minutes and 53 seconds ago, saying: sproingie: grad students =P
19:55:26 <ddarius> Don't let those Schemers corrupt you.
19:59:47 <AndyStewart> ivanm: Hello, I am inside in the IRC client, like you say hello in Chinese!:)
19:59:59 <ivanm> hey AndyStewart 
20:00:01 <ManateeLazyCat> Hmm, looks good.
20:00:27 <AndyStewart> ivanm：您好，ivanm。我说的英语招呼我的IRC客户端。
20:00:33 <ivanm> I couldn't read that, sorry
20:00:36 <ManateeLazyCat> Looks good.
20:00:42 <ManateeLazyCat> ivanm: I'm test my irc client.
20:00:46 <ddarius> Looks good here.
20:01:06 <ManateeLazyCat> ivanm: Now, "English -> Chinese" and "Chinese -> English" are good.
20:01:29 <ManateeLazyCat> ivanm: You can type any language in my irc client, then convert English to irc server.
20:01:43 <ivanm> ManateeLazyCat: via what?
20:01:46 <ManateeLazyCat> ivanm: Or write in English, and convet to other language.
20:01:47 <ivanm> google translate or something?
20:01:53 <ManateeLazyCat> ivanm: Yep, Google.
20:02:04 <ivanm> did you use the library for that that's on hackage?
20:02:07 <ivanm> or roll your own?
20:02:16 <ManateeLazyCat> ivanm: I have build one.
20:02:39 <ivanm> *nod*
20:03:31 <ManateeLazyCat> ivanm: I build GoogleTranslate package on hackage.
20:03:54 <ManateeLazyCat> @package GoogleTranlsate
20:03:54 <lambdabot> http://hackage.haskell.org/package/GoogleTranlsate
20:04:00 <ManateeLazyCat> @package GoogleTranslate
20:04:01 <ivanm> ManateeLazyCat: didn't you know about gts?
20:04:01 <lambdabot> http://hackage.haskell.org/package/GoogleTranslate
20:04:14 <ManateeLazyCat> ivanm: ^^^^
20:04:17 <ivanm> no, wait, that's not its name...
20:04:35 <ivanm> @hackage gt-tools
20:04:35 <lambdabot> http://hackage.haskell.org/package/gt-tools
20:04:36 <ivanm> ManateeLazyCat: ^^
20:05:04 <ManateeLazyCat> ivanm: Oh, why don't you tell me? ;p
20:05:26 <ivanm> ManateeLazyCat: you didn't ask! ;-)
20:05:37 <ivanm> ManateeLazyCat: that's why you should always search through hackage before starting to write code
20:05:50 <ManateeLazyCat> ivanm: It's console program?
20:06:14 <ivanm> I believe so
20:06:16 <ivanm> and a library
20:06:24 <ManateeLazyCat> ivanm: I haven't found library.
20:06:37 <ivanm> ahhh, I thought they had a library
20:06:39 <ivanm> obviously not
20:06:56 <ManateeLazyCat> ivanm: If it's console program, too cost for my need.
20:07:14 <dmwit> But surely the code needed to create such a library is there in the code for the console program.
20:07:20 <ManateeLazyCat> ivanm: I don't want startup new process to get result.
20:07:52 <dmwit> do_trans :: Lang -> Lang -> String -> IO String seems like the one
20:07:58 <dmwit> Just tweak the cabal file appropriately.
20:08:03 <ddarius> dmwit: Nah.  It's just a man in a box who talks to the men in boxes at Google.
20:08:14 <ManateeLazyCat> dmwit: Should use ByteString
20:08:28 * dmwit shrugs
20:08:29 <ManateeLazyCat> dmwit: Easy to encode to url format.
20:08:35 <dmwit> It's your time. =)
20:08:41 <ManateeLazyCat> ivanm: Oh, too late now.
20:08:51 <ManateeLazyCat> ivanm: I have finish GoogleTranslate and test works well.
20:09:08 <dmwit> Anyway, that is a pretty cool feature for an IRC client.
20:09:10 <dmwit> Nice work!
20:09:11 <ManateeLazyCat> ivanm: Now my irc client can translate between 52 languages 
20:09:14 <ddarius> :t (((fmap pack .) .) .) . unpack
20:09:15 <lambdabot> Not in scope: `pack'
20:09:16 <lambdabot> Not in scope: `unpack'
20:09:20 <ManateeLazyCat> dmwit: Thanks.
20:09:24 <ddarius> :t (((fmap BS.pack .) .) .) . BS.unpack
20:09:25 <lambdabot>     Couldn't match expected type `f2 (f1 (f [Word8]))'
20:09:25 <lambdabot>            against inferred type `Word8'
20:09:25 <lambdabot>       Expected type: BSC.ByteString -> [f2 (f1 (f [Word8]))]
20:09:42 <AndyStewart> dmwit: How are you? (English)
20:09:54 <ManateeLazyCat> dmwit: ^^^ Above in Chinese.
20:10:11 <AndyStewart> Haskell 万岁! :)
20:10:16 <ddarius> Wrong argument order.
20:10:26 <AndyStewart> Haskell Hooray!:)
20:10:54 <ManateeLazyCat> ivanm: Google translate looks smart.
20:11:11 <ManateeLazyCat> ivanm: I mix Chinese in English, it just convert Chinese to English. :)
20:11:48 <AndyStewart> ivanm: your future, do not complain about my poor English, ha ha!:)
20:12:13 <ivanm> heh
20:12:24 <ivanm> what are you using? "automatically detect language"?
20:12:30 <ManateeLazyCat> ivanm: Yes.
20:12:37 <ManateeLazyCat> ivanm: Type any language, and automatic detect.
20:12:46 <ivanm> yeah, it notices the english word and guesses that's it
20:12:50 <ManateeLazyCat> ivanm: You just need configure target language. :)
20:12:52 <Martty> .calc 1+1
20:12:55 <ivanm> ManateeLazyCat: you should probably also offer an option to fix the language in question
20:12:59 <Martty> no phenny!
20:12:59 <ivanm> and to temporarily disable that
20:13:03 <ivanm> > 1 + 1
20:13:03 <ddarius> I wonder how effective that would be as a complement to more traditional language learning.
20:13:04 <lambdabot>   2
20:13:07 <ivanm> Martty: ^^
20:13:23 <ivanm> Martty: no idea who phenny is, but we don't need to tell lambdabot to calculate something!
20:13:47 <ManateeLazyCat> ivanm: translate :: B.ByteString -> Maybe Language -> Language -> IO (Either String ByteString) 
20:13:52 <Martty> phenny is pythons version and more of what ManateeLazyCat just coded
20:14:09 <Martty> in the form of an irc bot too
20:14:17 <ivanm> Martty: ManateeLazyCat is coding an actual IRC client
20:14:19 <ivanm> not a bot
20:14:52 <ManateeLazyCat> Martty: http://www.flickr.com/photos/48809572@N02/
20:15:14 <ManateeLazyCat> Martty: First four screenshot is IRC client.
20:15:41 <Martty> c-c.c..cool..
20:15:46 <AndyStewart> 我喜欢
20:15:58 <Martty> 뭐라고?
20:16:01 <trinithis> !!!
20:16:04 <AndyStewart> I like the elegance of Haskell
20:16:13 <trinithis> Are those function names?
20:16:20 <trinithis> or legal ones at least?
20:16:23 <AndyStewart> 我喜欢优雅的哈斯克尔
20:16:33 <ManateeLazyCat> Looks good. 
20:16:38 * ManateeLazyCat Push patches.
20:16:59 <dmwit> trinithis: which ones?
20:17:13 <trinithis> the chinese or w/e
20:17:33 <zc00gii> AndyStewart: Please speak in english
20:17:38 <dmwit> trinithis: where?
20:17:50 <dmwit> zc00gii: He just repeated some phrases in both English and Chinese.
20:17:54 <zc00gii> oh
20:17:55 <zc00gii> nvm
20:17:57 <ddarius> One's Chinese the other looks like Hangul.
20:17:59 <dmwit> zc00gii: (AndyStewart = ManateeLazyCat)
20:18:03 <zc00gii> ah
20:18:08 <ivanm> why isn't (Either a) an instance of APplicative?
20:18:13 <trinithis> <AndyStewart> 我喜欢
20:18:13 <zc00gii> let 我喜欢优雅的哈斯克尔 = "foo" --> <interactive>:1:15: parse error on input `='
20:18:19 <trinithis> Cause that would make some baller haskell code
20:18:25 <zc00gii> haha
20:18:29 <ManateeLazyCat> zc00gii: AndyStewart is my irc client.
20:18:42 <dmwit> trinithis: Any sequence of letters, starting with a lower-case letter, is of course a valid Haskell variable name.
20:18:47 <ddarius> I forget how the rules work for languages without a notion of case.
20:18:48 <trinithis> > let 我喜欢 = 1 in 我喜欢
20:18:49 <lambdabot>   1
20:18:54 <dmwit> > isLetter '我'
20:18:54 <lambdabot>   True
20:19:01 <ManateeLazyCat> zc00gii: I'm test "multi-language chat system" and written with mother language, and convert to English for communication with other people. :)
20:19:03 <dmwit> > isLower '我'
20:19:04 <lambdabot>   False
20:19:15 <ManateeLazyCat> zc00gii: Of course, you can write any language you like.
20:19:16 <trinithis> Whoa! Now I know what to do for my Haskell code golfs!
20:19:20 <zc00gii> let f我喜欢优雅的哈斯克尔 = foo --> 
20:19:21 <ddarius> > isUpper '我'
20:19:22 <lambdabot>   False
20:19:23 <ivanm> ManateeLazyCat: how about doing what xchat has and using a line to separate the nicks from the messages?
20:19:26 <monochrom> «let 我喜欢优雅的哈斯克尔 = "foo"» works in my ghci
20:19:27 <ivanm> that's the only reason I keep using xchat...
20:19:28 <zc00gii> let f我喜欢优雅的哈斯克尔 = "foo" --> 
20:19:42 <zc00gii> f我喜欢优雅的哈斯克尔 --> "foo"
20:19:42 <ManateeLazyCat> ivanm: I design for current layout.
20:19:44 <ddarius> ivanm: Versus?
20:19:54 <zc00gii> let 我喜欢优雅的哈斯克尔 = "foo" --> <interactive>:1:15: parse error on input `='
20:19:58 <ManateeLazyCat> ivanm: If you split nick and messsage, you will waste screen space when nick is too longer.
20:20:02 <ddarius> ManateeLazyCat: Do you highlight links and make them clickable yet?
20:20:05 <zc00gii> monochrom: only works if it starts with a lowercase letter
20:20:12 <ManateeLazyCat> ddarius: In my todo list.
20:20:24 <djahandarie> I think "a non-uppercase letter" is more accurate?
20:20:25 <zc00gii> ['尔'..'Z' --> <interactive>:1:9: parse error (possibly incorrect indentation)
20:20:28 <ManateeLazyCat> ddarius: When you clicked link, it's will open in my webkit browser. :)
20:20:33 <zc00gii> ['尔'..'Z'] --> " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ"
20:20:33 <ivanm> ddarius: what those screenshots show: message is directly after the nick
20:20:42 <djahandarie> zc00gii, what version of GHC are you using
20:20:45 <dmwit> zc00gii: Perhaps your term is ill-configured.
20:20:53 <Axman6> > ['尔'..'Z']
20:20:54 <lambdabot>   ""
20:21:06 * djahandarie is pretty ill
20:21:15 <zc00gii> ghc --version --> The Glorious Glasgow Haskell Compilation System, version 6.8.2
20:21:16 <ddarius> ivanm: What I meant to say is I'm sure there are many other clients that do it the way X-Chat does.
20:21:20 <Martty> > ['Z'..'아']
20:21:21 <lambdabot>   "Z[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\DEL\128\129\130\131\132\133\134\135...
20:21:22 <ManateeLazyCat> ivanm: Because different nick have different indent width, so message is easy to read.
20:21:23 <monochrom> 我 is lower case
20:21:30 <ivanm> ddarius: haven't managed to find any other gui clients that do that
20:21:38 <ddarius> Really?
20:21:48 <ddarius> I thought that was more or less standard.
20:21:54 <ivanm> ManateeLazyCat: this is what I mean: http://upload.wikimedia.org/wikipedia/commons/4/47/Xchat2.8.0.png
20:22:08 <ManateeLazyCat> ivanm: I know.
20:22:14 <ManateeLazyCat> ivanm: But i don't like that.
20:22:22 <ivanm> ddarius: well, I haven't managed to find any others that do that
20:22:26 <djahandarie> GHC 6.12.1 and on has much better unicode support, but that is really only in terms of I/O
20:22:29 <ManateeLazyCat> ivanm: How do you handle when someone nick is too long?
20:22:32 <djahandarie> It shouldn't make a difference here
20:22:37 <ddarius> ivanm: I've never seen one that didn't do it that way.
20:22:40 <Axman6> ManateeLazyCat: it overflows
20:22:45 <ivanm> ManateeLazyCat: yours is about the longest I've seen...
20:22:51 <ivanm> and the message just wraps
20:23:00 <djahandarie> In fact lambdabot is probably on 6.8.*
20:23:05 <ddarius> djahandarie: GHC has had Unicode code support for quite a while.
20:23:05 <dmwit> ManateeLazyCat: xchat allows you to drag the line if it goes to far to the right
20:23:17 <Axman6> foo -> "               foo | text", fooooooooooooooooooooo -> "foooooooooooooo|oooo text
20:23:22 <dmwit> s/goes to far/goes too far/ of course
20:23:25 <ManateeLazyCat> ivanm: Looks http://www.flickr.com/photos/48809572@N02/5003871553/lightbox/ different people have different indent width.
20:24:05 <monochrom> whatever ghc version lambdabot runs, it works correctly.
20:24:10 <ddarius> ivanm: Oh, I misunderstood what you were saying.
20:24:25 <ManateeLazyCat> dmwit: Drag horizontally is *ineffective*  :)
20:24:34 <dmwit> ManateeLazyCat: That seems to get the worst of both worlds. Users with long names get very indented text (bad) and text from multiple users doesn't line up (also bad).
20:24:47 <ddarius> ivanm: Things like that seem pretty common, but I also prefer the "normal" way (and I use XChat).
20:24:59 <ivanm> ddarius: as in without the line?
20:25:08 <ManateeLazyCat> dmwit: Do you know ERC (irc client for Emacs) ?
20:25:12 <ddarius> ivanm: And not aligned, yes.
20:25:14 <ManateeLazyCat> dmwit: My irc client is more like that. :)
20:25:49 <monochrom> The correct solution is to map every nick into a 64-bit hash and show only the hash.
20:26:05 <ddarius> monochrom: The correct solution is not to use IRC.
20:26:06 <ManateeLazyCat> ivanm: If you seen screenshot carefully, you will know i have wrap message for different nick. :)
20:26:34 <ManateeLazyCat> monochrom: So i need remember you 64-bit?
20:26:54 <ManateeLazyCat> monochrom: Like this : acad540b9bcaa1ff89dd578ccc8bb592 ?
20:27:01 <dmwit> ivanm: irssi seems to do it: http://www.kungfoocode.org/how-to/my-perfect-irssi-setup/
20:27:17 <ddarius> ManateeLazyCat: Or you don't remember and you develop a more meritocratic view.
20:27:17 <ivanm> dmwit: I prefer GUI clients though ;-)
20:27:34 <ivanm> monochrom: heh
20:28:03 <dmwit> Okay. Why?
20:28:10 <ManateeLazyCat> ddarius: Yep, i design for people like Emacs. :)
20:28:12 <monochrom> acad540b9bcaa1ff89dd578ccc8bb592 is way more than 64-bit.
20:28:20 <ivanm> dmwit: *shrug* personal preference?
20:28:24 <ManateeLazyCat> monochrom: your md5 hash.
20:28:27 <ManateeLazyCat> monochrom: :)
20:28:50 <dmwit> acad540b: Okay, this, then.
20:29:11 <dmwit> Actually, this points out the problem with your scheme: you can't address people by their hashes unless everybody does it.
20:29:14 <monochrom> that's just 32 bits
20:29:30 <ddarius> dmwit: The client could reverse translate.
20:29:36 <dmwit> yes, it would have to
20:29:50 <monochrom> Mr. Speaker: then address Mr. Speaker only.
20:29:52 <conal> i'm looking to perform some string substitutions (given a collection of from/to pairs) within a string for a gitit plugin.  is there a handy library i could use?
20:29:55 <ManateeLazyCat> ddarius: Yes, it can.
20:29:56 <dmwit> Oh, right, those are hex digits. I was thinking (dumbly) that it used a full byte for each character.
20:30:32 <ivanm> conal: ummm, there are
20:30:36 <ivanm> I think gitit already uses one
20:30:37 <monochrom> then again maybe I should agree to md5 so everyone uses the same hash.
20:30:37 <dmwit> ManateeLazyCat: He was talking about the nick/hash translation, not natural language translation.
20:30:42 <ivanm> conal: hsstringtemplate or something?
20:31:07 <ManateeLazyCat> dmwit: It's hard to convert from hash to nick.
20:31:23 <ddarius> ManateeLazyCat: Not if you were the one who converted from nick to hash to begin with.
20:31:33 <monochrom> it's easy to convert 600 nicks into hashes and compare.
20:31:48 <monochrom> in fact, put them in a hash table...
20:31:58 <conal> ivanm: thx.  i'll check out that lib.  and poke around more in gitit.
20:32:02 <ManateeLazyCat> All peoples have unique color/hash in my irc client... :)
20:33:04 <ManateeLazyCat> ddarius: Yes, if you build Map to store color and hash, easy to convert. :)
20:33:41 <ManateeLazyCat> monochrom: But how weird use hash name? How to remember acad540b9bcaa1ff89dd578ccc8bb592 ?
20:34:58 <monochrom> I don't know. But people can remember 100 digits of pi.
20:35:10 <Axman6> eventually
20:36:18 <ManateeLazyCat> dmwit: In my project, i try to avoid user do any horizontal operation, you need scroll horizontal every line, then scroll vertical to next line, ineffective
20:36:32 <dmwit> Oh, you misunderstood me.
20:36:38 <dmwit> There is of course word wrapping in xchat.
20:36:40 <ManateeLazyCat> dmwit: Ah ?
20:37:02 <ManateeLazyCat> dmwit: I build some algorithm automatic wrap words of irc message. 
20:37:13 <dmwit> What I meant was that, if the vertical line separating nicks from texts gets too far to the right for the users taste, he can move it farther to the left with the mouse.
20:37:16 <ManateeLazyCat> dmwit: Then indent message with nickname's length.
20:37:18 <dmwit> But all the text is on screen all the time.
20:37:21 <Axman6> i can't imagine an irc client where you'd need to scroll horizontally would be very popular at all
20:37:38 <ManateeLazyCat> dmwit: Oh i see.
20:37:44 <dmwit> Axman6: no, definitely not
20:38:24 <ManateeLazyCat> dmwit: Why need scroll to see long nick? Why need mouse? :)
20:38:30 <ManateeLazyCat> dmwit: It's another question. :)
20:38:38 <ManateeLazyCat> dmwit: My irc client don't need do that.
20:38:47 <ManateeLazyCat> dmwit: Since i'm a long nick user. :)
20:39:00 * dmwit sighs
20:39:22 <AndyStewart> dmwit: I have a lot of dust on the mouse.
20:39:55 <magicman> :t let knot f s -> s : (concatMap f (knot f s)) in knot
20:39:56 <ManateeLazyCat> ivanm: Maybe i need add (Translate by Google) at the end?
20:39:56 <lambdabot> parse error on input `->'
20:40:03 <magicman> :t let knot f s = s : (concatMap f (knot f s)) in knot
20:40:04 <lambdabot> forall a. (a -> [a]) -> a -> [a]
20:40:09 * ddarius would just wrap to the left rather than indenting at all.
20:40:24 <ivanm> ManateeLazyCat: not for every message ;-)
20:40:29 <magicman> :t let knot f s = s : (concatMap f (knot f s)) in take 20 $ knot (\x -> [x,2*x]) 1
20:40:30 <lambdabot> forall a. (Num a) => [a]
20:40:33 <magicman> let knot f s = s : (concatMap f (knot f s)) in take 20 $ knot (\x -> [x,2*x]) 1
20:40:35 <magicman> > let knot f s = s : (concatMap f (knot f s)) in take 20 $ knot (\x -> [x,2*x]) 1
20:40:36 <lambdabot>   [1,1,2,1,2,2,4,1,2,2,4,2,4,4,8,1,2,2,4,2]
20:40:38 <magicman> (sowwies)
20:40:39 <ManateeLazyCat> ivanm: I think add (Translate by Google) is less fun. :)
20:40:57 <ManateeLazyCat> ivanm: I have let juhp help me test many other language, looks good.
20:41:45 <monochrom> have you tested how google translates the haskell language? :)
20:41:53 <ivanm> heh
20:42:15 <monochrom> I hope it doesn't come out as Go
20:42:28 <ManateeLazyCat> monochrom: Go is ugly. :)
20:42:32 <ivanm> does Google have a rule such that "translate :: (Language a) => a -> a; translate = id" ? :p
20:42:49 <ManateeLazyCat> ivanm: I don't know.
20:44:15 <ManateeLazyCat> ivanm: Only surprise is yesterday i type "晚安， 各位" got "Good night, ladies". :)
20:44:37 <co_dh> lol
20:44:41 <ivanm> wow, rectangular boxes turned into that? :p
20:44:57 <Cale> ivan: Install moar fonts
20:44:59 <monochrom> yeah, it totally guesses what's in the boxes
20:45:00 <pyf> I'm trying to use the haskellcharts package. But I get this (even though I have gtk installed:
20:45:03 <pyf> Prelude> :m Graphics.Rendering.Chart.Simple 
20:45:03 <pyf> Failed to load interface for `Graphics.UI.Gtk.Entry.Entry':
20:45:03 <pyf>   no package matching `gtk-0.11.2' was found
20:45:12 <ivanm> Cale: which do you recommend then?
20:45:31 <ivanm> pyf: could be using an old version of gtk
20:46:24 <ManateeLazyCat> pyf: gtk package broken.
20:46:39 <pyf> ok
20:46:40 <ivanm> ghc-pkg check
20:46:48 <monochrom> how does it know it wants to find specifically exactly precisely gtk-0.11.2? because what ManateeLazyCat says. you deleted something.
20:47:12 <pyf> There are problems in package gtk-0.11.1:
20:47:12 <pyf>   dependency "gio-0.11.1-cc37b7473445cd0df39711ef1e01a06f" doesn't exist
20:47:22 <pyf> i'll try installing that
20:47:28 <pyf> thanks!
20:47:31 <ivanm> pyf: you have to rebuild gtk
20:47:44 <monochrom> time to suggest: format hard disk, re-install everything
20:47:53 <pyf> cabal reinstall?
20:47:59 <co_dh> which haskell packages are used most by other packages ? do we have a dependency graph ? 
20:48:02 <ivanm> cabal install gtk --reinstall
20:48:10 <ivanm> co_dh: we did at one stage
20:48:18 <ivanm> co_dh: I would say that base is the most used
20:48:23 <ivanm> probably followed by containers
20:48:45 <co_dh> ivanm: do you have the link ? 
20:48:51 <ivanm> no
20:48:55 <ivanm> probably on dons blog
20:48:58 <monochrom> I can make one
20:49:01 <ivanm> this was a few years back
20:49:26 <monochrom> http://www.vex.net/~trebla/humour/lmcify.html?t=base+is+most+used%2C+followed+by+container
20:49:29 <co_dh> monochrom: how long it might take? 
20:50:00 <co_dh> that link is a joke, lol
20:50:01 <Cale> ivanm: Well, they were Chinese characters, so most Chinese or Japanese fonts would do. If you're using Fontconfig, just having a font on your system with the appropriate characters is sufficient.
20:50:03 <monochrom> it takes 90 characters.
20:50:45 <ivanm> Cale: well, yes, but I have no idea which fonts have such characters
20:51:14 <alatter> http://sparky.haskell.org:8080/packages/reverse
20:51:21 <ManateeLazyCat> pyf: That's because you update gio and gtk depend gio.
20:51:25 <alatter> reverse deps, reasonably up-to-date
20:51:26 <monochrom> if you install more fonts, you end up not using them anyway.
20:51:31 <ManateeLazyCat> pyf: gtk can't found old gio.
20:51:37 <Cale> In Ubuntu, there's a Language Support control panel where you can just check a few boxes to install appropriate fonts for various languages. Perhaps whatever you're using has something similar?
20:51:38 <ManateeLazyCat> pyf: So you just need reinstall gtk package.
20:51:40 <co_dh> alatter: thanks.
20:51:54 <pyf> thanks. it's reinstalling now
20:52:05 <ivanm> alatter: cool, I've often wanted something like that
20:52:15 <ivanm> is that from Gracenotes GSoC?
20:52:20 <objorn> How exactly does foreign function interfacing work? I'm told there isn't an equivalent zip function in C, I'd like to know how you would call that from within C.
20:52:37 <alatter> it's hosted on the potential replacement codebase for hackage
20:52:46 <ManateeLazyCat> pyf: If "ghc-pkg check" haven't error, i think you gtk code can works now. :)
20:52:47 <Cale> ivan: I use MS Gothic for Japanese for the most part.
20:52:52 <Gracenotes> alatter: hi
20:53:15 <pikhq> Cale: I suggest you switch to Meiryo.
20:53:21 <ivanm> Cale: yeah, that doesn't quite help me ;-)
20:53:22 <Cale> pikhq: I tried it
20:53:24 <alatter> Gracenotes: funny you should speak up :-)
20:53:30 <pyf> it's finished reinstalling but ghc-pkg check still gives the same error
20:53:37 <Gracenotes> :o
20:53:41 <pikhq> Note that you need the proper TTF hinting engine going for it to not suck.
20:53:46 <alatter> Gracenotes: will you be able to make it to the hackathon?
20:53:47 <Cale> I don't particularly like Meiryo, it doesn't have bitmapped kanji.
20:53:49 <ivanm> well, I have font-jis-misc installed, so I would have assumed that would pick up japanese characters
20:53:53 <monochrom> and you see why you may install a gazillion fonts and you still consciously not use them
20:53:58 <Gracenotes> alatter: ah, which one?
20:54:08 <pikhq> Cale: With Truetype hinting, it doesn't need bitmapped kanji.
20:54:12 <Gracenotes> I will be in baltimore the weekend after ICFP
20:54:17 <alatter> Gracenotes: there's one in Belgium in November
20:54:18 <ivanm> and I also have font-isas-misc for chinese
20:54:18 <pikhq> It just looks perfectly clear while being antialiased.
20:54:29 <alatter> ah, no, I won't be at the ICFP one :-/
20:54:35 <Cale> pikhq: Mostly it just looks blurry and unreadable to me.
20:54:39 <Gracenotes> alatter: if you'd get me a plane ticket :)
20:54:51 <pikhq> Cale: You don't have the Truetype hinting engine going, then.
20:54:52 <ManateeLazyCat> pyf: Because you have reinstall gio-0.11.2
20:54:54 <Gracenotes> have you taken a look at the codebase as it stands?
20:54:56 <Cale> I do
20:54:56 <alatter> Gracenotes: that would have made too much sense for me to go to Baltimore, as I'm based in the states
20:55:01 <ManateeLazyCat> pyf: gtk-0.11.2
20:55:06 <pikhq> Cale: The one that until recently violated patents?
20:55:16 <alatter> I've gone over a lot of the diffs, but I don't have a good picture of the whole
20:55:21 <pikhq> (the patent expired a couple months back; as such, it wasn't enabled by default)
20:55:22 <ManateeLazyCat> pyf: So gtk-0.11.2 work fine now, gtk-0.11.1 still broken.
20:55:23 <Cale> pikhq: Yeah, full hinting
20:55:37 <pikhq> Cale: That's the Freetype autohinter.
20:55:42 <ManateeLazyCat> pyf: So you can use "ghc-pkg unregister gtk-0.11.1" to remove gtk-0.11.1
20:55:45 <Axman6> FFFFFFUUUUUUUUUUUU god i hate using unboxed ST arrays >______________<
20:55:59 <Axman6> the types are so horrible to figure out
20:56:04 <pyf> ManateeLazyCat: i'll try that now :)
20:56:06 <alatter> If I get back in to it, I'm most likely to see what needs to be done for doc generation/uploading/importing
20:56:07 <Axman6> and the error messages don't hel[
20:56:08 <Axman6> p*
20:56:26 <Gracenotes> alatter: ah, great. I'm think I'm more or less in the groove of school work... working out free times
20:56:35 <alatter> Gracenotes: is there an uo-to-date listing of what's blocking rollout and what the big tickets are?
20:57:04 <alatter> Gracenotes: I'm in a similar boat - I've just changed jobs :-) Hopefully to one that leaves me with more free-time
20:57:07 <pikhq> Cale: Believe me, with it hinted right, it is *much* clearer than bitmap fonts.
20:57:24 <Gracenotes> alatter: up-to-date as of GSoC ending, when last major changes were pushed. http://cogracenotes.wordpress.com/2010/08/08/hackage-on-sparky/ (scroll down)
20:57:25 <ManateeLazyCat> ivanm: Sometimes, i feeling i like gtk2hs customer service. :)
20:58:12 <alatter> Gracenotes: Ah, I think I had read that but not bookmarked it.
20:58:23 <Cale> http://layingpipes.com/images/macvswindows.png -- here's a bunch of samples of Meiryo as hinted by Windows. At 12px it looks awful compared with properly constructed bitmaps.
20:59:00 <Cale> (and the mac font it's being compared with isn't much better)
20:59:16 <pikhq> Cale: Whattthepfargtle?
21:00:03 <pikhq> Cale: Okay, so Windows can't display the font well but Freetype can.
21:00:10 <alatter> Gracenotes: the policy think is a bit worrisome. when you posted on it quite a few folks thought that the open option was best, but we've done a lot of dev assuming that people want control.
21:00:11 <Axman6> fonts on windows always look awful
21:00:28 <Cale> http://layingpipes.com/images/windows-family.png
21:00:48 <co_dh> @src cast
21:00:48 <lambdabot> Source not found. It can only be attributed to human error.
21:00:55 <pikhq> Cale: I can't say I blame you for sticking with Gothic, then.
21:00:58 <Cale> At large sizes MS Gothic looks terrible, but at 12px there, the stroke reduction really helps
21:01:03 <Gracenotes> alatter: policy is the troubling bit, yeah. I think open registration + keeping groups seems reasonably optimal.
21:01:06 <pikhq> Ugly, sure, but it's at least *readable*.
21:01:21 <Cale> Readability is beauty
21:01:32 <monochrom> people are too picky about fonts, and picky about the wrong aspect
21:01:51 <pikhq> The rendering on my system looks like the Meiryo fonts there, without *any of the blur*.
21:02:26 <monochrom> if there is a font that renders the letter E marvellously beautifully but omits all other characters, people will volunterily use it!
21:02:30 <alatter> it will be interesting.
21:03:23 <monochrom> they will even chastise you on "yeah F becomes a box but IT'S A HINTED BOX!"
21:03:28 * hackagebot text 0.9.0.0 - An efficient packed Unicode text type.  http://hackage.haskell.org/package/text-0.9.0.0 (BryanOSullivan)
21:03:46 <alatter> that's a version bump
21:03:50 <pikhq> I'm quite impressed at how Microsoft manages to make the *antialiased font* there seem pixellated.
21:03:58 <pyf> ManateeLazyCat: i've unregistered gtk-0.11.1 and reinstalled gio and then gtk. ghc-pkg check still gives the same error. did i do things in the right order (or did i do the right things)?
21:03:58 <alatter> I guess it would be the feedback from the platform proposal
21:04:10 <pikhq> Antialiased and pixellated! So much fail!
21:04:41 <Cale> Pixellated can be fine as long as the main features stand out clearly.
21:05:09 <pikhq> Clearly, Microsoft should license Freetype.
21:05:22 <Axman6> is freetype Apple's renderer?
21:05:42 <pikhq> Axman6: No, it's the renderer used on most free systems.
21:06:01 <pikhq> For instance, anything with X.
21:06:04 <Axman6> what's the one Apple developed i thought they released a fairly popular one on free systems
21:06:15 <pikhq> Apple had nothing to do with it.
21:06:47 <pikhq> And there aren't any other free font rasterization libraries...
21:08:10 <Axman6> i swear they did something that was freely used elsewhere
21:10:28 <pikhq> WebKit.
21:10:30 * hackagebot text-icu 0.6.0.0 - Bindings to the ICU library  http://hackage.haskell.org/package/text-icu-0.6.0.0 (BryanOSullivan)
21:10:33 <pikhq> Which was based on KHTML.
21:10:41 <pikhq> That's almost certainly what you're thinking of.
21:11:00 <Axman6> no, it's not
21:11:24 <Axman6> ah, i was thinking of TrueType fonts
21:11:38 <Axman6> maybe
21:11:42 <lispy|dagit> apple has done a fair bit with fonts, although I don't really know the history or the details
21:11:55 <lispy|dagit> WYSIWYG was their idea
21:12:16 <ManateeLazyCat> pyf: Best paste your error.
21:12:19 <lispy|dagit> It was a marketing idea about getting the screen to match the printer output, and that means you have to get fonts right
21:12:29 <Axman6> yeah
21:13:34 * monochrom mumbles pagemaker. was it adobe?
21:13:35 <ManateeLazyCat> pikhq: Well, webkit is best engine now, IMO. :)
21:16:29 <pyf> ManateeLazyCat: ghc-pkg check threw up an error related to another package. i reinstalled it and now everything works... thanks!
21:16:47 <co_dh> I'd like to see the internal of  TypeRep ( the Key and TyCon ) , but TypeRep is abstract, how can I see the internal of it ? without copy & paste the code in a .hs file ?
21:18:19 <ddarius> co_dh: If you want access to those and some accessor is not exported, then copying and pasting won't help you.
21:18:49 <co_dh> ddarius: I can copy & paste to .hs file , and modify it to export all
21:20:43 <ddarius> co_dh: As long as you only care about your types and are fine with implementing Typeable yourself, that works.  Otherwise you have to modify GHC and probably several packages.
21:21:44 <co_dh> I'm interested in how it's implemented. by reading it, I believe I can improve my skills. and not interested to modify it. 
21:22:21 <ddarius> You don't need to copy & paste to read.
21:22:47 <co_dh> I want to run it in ghci, and see the internals.
21:23:08 <co_dh> I don't like execute code in my brain , that consume too much energy.
21:23:13 <ddarius> GHCi will already give you access to the internals if you load it interpreted (unless they've changed the behavior).
21:23:53 <co_dh> how ghci gives you access to internals? 
21:24:09 <co_dh> take TypeRep for example. 
21:24:16 <co_dh> > typeOf 'a'
21:24:17 <lambdabot>   Char
21:24:28 <co_dh> :t typeOf 'a'
21:24:29 <lambdabot> TypeRep
21:25:49 <Axman6> :i TypeRep in ghci?
21:26:15 <co_dh> I want to see the internal of TypeRep Char 
21:26:18 <ddarius> It's easy enough for a Haskell implementation to ignore an export clause.
21:26:29 <co_dh> :i only gives it's definition. 
21:27:35 <ivanm> bos: do you have changelogs for text, etc. somewhere? you seem to keep having major version bumps of your libraries which seem to be backwards compatible... ;-)
21:29:10 <ddarius> ivanm: text isn't even 1.0, how can it "keep" having major version bumps?
21:29:31 <ivanm> @where PVP
21:29:31 <lambdabot> http://www.haskell.org/haskellwiki/Package_versioning_policy
21:29:38 <ivanm> ddarius: the first two digits are major versions ^^
21:30:46 <bos> ivanm: i don't tend to publish changelogs, they're a pain to put together
21:31:05 <lispy|dagit> ?tell dons Just had a new haskell shirt idea.  It just says, "Hair-shirt" on the front.
21:31:06 <lambdabot> Consider it noted.
21:31:17 <ivanm> eh, for my packages I just read through the changes in my source repo and summarise them
21:31:22 <bos> ivanm: in this instance, i changed the return type of code in the Foreign module, which people shouldn't generally be using
21:31:23 <ivanm> lispy|dagit: heh
21:31:33 <ivanm> bos: *nod*
21:34:45 <lispy|dagit> bos: don't most vcs provide you with a way to see the change sets between two versions and hence you can approximate a changelog that way?
21:36:16 <ManateeLazyCat> ivanm: I don't why gt-tools need parse "http://translate.google.com/translate_a/t?client=j&pc=0&oc=1&hl=en&ie=UTF-8&oe=UTF-8"
21:36:26 <objorn> Can someone point me to specific examples where Haskell code is cleaner than C? I'm strugging to justify using Haskell when the majority of programmers use C, C++, Java, and Python. 
21:36:28 <ManateeLazyCat> ivanm: "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0" is enough.
21:36:34 <kquick2> Anyone know if there is a way to detect class membership in an ad-hoc manner.  Data.Typeable seems to handle types, but not classes.  For f::a->b I'd like to do something like 'case isClass JSON a of ...'.  
21:36:54 <lispy|dagit> objorn: Can you defined cleaner?
21:37:00 <objorn> No
21:37:15 <lispy|dagit> objorn: C is not type safe, so an "obvious" route is one that demonstrates Haskell's type safetey
21:37:24 <objorn> I'd like to think that a project with a good idea will draw others to help, but I've seen projects with great ideas implemented in Java, but not a lot of developers helping.
21:38:02 <lispy|dagit> objorn: have you considered using the great programming language shootout to 'harvest' examples?
21:38:11 <objorn> So, I'm guessing it comes down to usability, clean code, etc.
21:38:19 <lispy|dagit> objorn: http://shootout.alioth.debian.org/
21:38:23 <objorn> I've seen that
21:38:32 <objorn> Haskell is fast, but not as fast as c++ or c
21:38:32 * ddarius should use something less crappy than Rhythmbox.
21:38:50 <lispy|dagit> objorn: The code is available for examples.  You can compare more than performance.
21:38:57 <objorn> Oh
21:39:05 <lispy|dagit> objorn: without a clear description of how you want to compare the languages, I'm afraid I don't know how to help.
21:39:28 <ManateeLazyCat> ddarius: http://www.flickr.com/photos/48809572@N02/4916078721/lightbox/ ?
21:39:42 <ManateeLazyCat> ddarius: Clean UI.
21:39:58 <lispy|dagit> objorn: a huge "failing" of the shootout is that all examples are micro benchmarks and they are optimized in all aspects to prove some small point (the benchmark at hand).  So you don't get a feel for how the language scales.
21:40:02 <ManateeLazyCat> ddarius: And in Haskell .:)
21:40:24 <ddarius> kquick2: If you only need it for a closed set of classes, there are ways.
21:40:26 <peeler>  for a simple executable package, is there a nice way to get 'cabal install' to copy a couple frontend scripts to the installation destination in addition to my binaries?
21:40:30 <lispy|dagit> objorn: furthermore, none of the examples really are idomatic because they are based on essentially translating C to other languages
21:40:45 <lispy|dagit> objorn: if you want to see Haskell shine, look at parallel code.  Or provable correct code.
21:41:04 <lispy|dagit> objorn: or code that uses combinators (parsec, pretty printer, etc)
21:41:44 <kquick2> ddarius:  I only need to test membership of a single class with a boolean result for membership.  Is that enough of a closed set?
21:41:52 <lispy|dagit> objorn: why to pick a language is a holistic decision that contains technical reasons as only a small part.
21:42:09 <lispy|dagit> objorn: And people look heavily at past success (keeping up with the Jones's)
21:42:42 <ddarius> kquick2: That doesn't sound like it is actually what you want.  What do you intend to do with that?
21:43:28 <ddarius> For example, you couldn't write, if isJSON x then {- use JSON methods on x -} else {- do something else -}
21:43:49 <kquick2> What I actually want to do is impose class membership on a subcall where it is not necessarily appropriate to restrict it on the upper level.
21:44:04 <ivanm> kquick2: not possible
21:44:21 <ivanm> kquick2: well, not quite: there are two ways of doing it
21:44:47 <ivanm> you can write an IsJSON class and make all instances of JSON an instance of that and do a forall for all other types
21:45:03 <ivanm> or else make all types that aren't instance of JSON an instance of that class and use a forall for all JSON instances
21:45:04 <peeler> you could write a preprocessor to put "unsafeCoerce" before everything; just call it pyhaskell
21:45:11 <ivanm> you do have to be explicit about one of the two sets
21:45:18 <ddarius> peeler: That wouldn't actually work in this case.
21:45:37 <peeler> yeah i just wanted to make the crappy joke
21:45:42 <peeler> i am guilty
21:46:18 <ddarius> peeler: No, it is actually interesting that that wouldn't work.  For most typed languages, such a thing would, more or less work.
21:47:20 <kquick2> More specifically, I want to serialize data.  I have an upper-level class that will accept values to be serialized.  Actual serialization is determined by which instance of that upper level class is used.  In one case, a JSON instance will be used, so I'd like to be able to pass objects to Text.JSON for serialization.  However, I might have a different instance, so it's not appropriate to (JSON a) => constrain arguments to the more generic
21:47:20 <kquick2> upper-level class.
21:48:11 <ddarius> kquick2: Presumably you actually want to use the methods of JSON in that case, so you need more than just a boolean, you need a witness to class membership.
21:48:44 <kquick2> yes, that's what I meant by "impose class membership".
21:49:17 <ddarius> Luckily, you can do that quite easily with GADTs.  Unluckily, and unavoidably, you'll still have to explicitly re-enumerate the instances of JSON (or otherwise push the problem elsewhere.)
21:49:39 <kquick2> ivanm: I understand your isJSON, but the JSON class has lots of instances I'm trying to avoid replicating.
21:51:13 <ddarius> Depending on how significant JSON is for your interface, you could add the witness as a (Maybe) argument to your function.
21:51:15 <kquick2> ddarius:  not quite sure how that would be expressed.  Something like: data mytype a where Int -> (JSON a) Int 
21:51:58 <zc00gii> how can I turn a number into a char?
21:52:05 <zc00gii> like 69 -> "69"?
21:52:23 <ddarius> "69" is a String not a Char.
21:52:27 <dmwit> > show 69
21:52:28 <lambdabot>   "69"
21:52:38 <newsham> if you wanted to write a small web app, whats the lib/framework du jour?
21:52:46 <newsham> is happs still the main one?
21:52:47 <kquick2> JSON is one form, but I'd rather not end up with (JSON a, YAML a, XML a, Show a, ...) => at the top level.  I'm not sure how the witness/GADT would work.
21:52:59 <zc00gii> ty
21:54:22 <dmwit> newsham: There's "snap" these days, and "yesod".
21:54:36 <dmwit> If you want semi-static pages, Hakyll seems nice.
21:54:53 <dmwit> (where semi-static means static, but with lots of shared stuff)
21:54:57 <newsham> prob very few pages, mostly js doing xmlreqs i think.
21:55:15 <ddarius> kquick2: Presumably you have your own Serialize class that this function either requires or is a method of.  Just let the people who write instances choose how they want to serialize.
21:55:52 <newsham> got any preferences?  whats a quick rundown of snap vs yesod vs happs?
21:57:17 <lispy|dagit> newsham: saying Oh yesod!  sounds funny?
21:57:20 <ivanm> kquick2: which is why I originally said you couldn't do it
21:57:24 <ddarius> newsham: You'd probably want happstack besides happs anyway.
21:57:32 <lispy|dagit> newsham: whereas, Oh snap! sounds normal
21:57:40 <tolkad> if you keep using Control.Concurrent.dupChan and then just letting the duplicated channels get garbage collected, will there be a memory or preformance leak?
21:58:01 <newsham> sorry, last time i used happs was pre split.. when i say happs i mostly mean the whole suite of happs stuff
21:58:22 <newsham> lispy: depends on the definition of "od"
21:58:22 <kquick2> ddarius: It's more of a datacache at the top level.  I want to be able to dump/stream that datacache in various forms.  The user can select the instantiation of the form for me (i.e. CacheStreamJSON) and then I'd pass the datacache objects to Text.JSON.
21:59:13 <kquick2> I know that what is put into the datacache will be representable by the streaming forms, and I'm OK with writing exception handling when it doesn't, but I didn't put all those streaming constraints on the addToCache method.
21:59:27 <ddarius> If they can pass that at run-time, then you do need (JSON a, YAML a, XML a, Show a, ...) => ...
22:00:01 <kquick2> Would there be a more appropriate way to architect something like this in a Haskell manner?
22:00:39 <ddarius> kquick2: So if I stick a Bool in you cache then request it to be serialized as YAML, say, and there is no Bool YAML instance, you'd just throw an exception?
22:01:04 <kquick2> Yes (for now).
22:01:56 <kquick2> Because I can fallback to an awkward and non-efficient string encoding that can be used to reconstruct on the other end.
22:03:01 <ddarius> kquick2: I don't understand.  If the user asks to store it as JSON, you intend in the future to use some other representation if there is no JSON instance?
22:05:36 <kquick2> It's more of a library.  The library user can choose the serialization format.  If whatever format doesn't support a datatype I can do something like a string which contains a fallback internal serialization mode, but this is only for odd exceptions.  In general, I'd expect most serializations to handle the majority or all of the contents of the datacache.
22:10:16 <tolkad> ah just checked the source, I guess not
22:11:07 <ivanm> @src ap
22:11:07 <lambdabot> ap = liftM2 id
22:12:47 <etpace> Somewhere in my code/auxillery functions a Prelude.last is erroring, I cant find the last call in my code, so It has to be auxillary, whats the best way to find out where the hell tis coming from?
22:13:21 <Cale> etpace: You might be able to build with -prof -auto-all and run the program with +RTS -xc
22:13:54 <Cale> etpace: You'll get a list of the active cost centre stack at the time that the exception happened, if all goes well.
22:14:04 <monochrom> Debug.assert let's you add assertions
22:14:06 <etpace> ah, tgood idea
22:14:32 <ddarius> kquick2: Here's something that might work and, I think, has reasonably good maintainability properties.  First, the obvious Haskell solution is simply to have your on Serializable class and have your users instantiate that however.  They'll statically choose their cache format which is probably acceptable, if not desirable.
22:14:44 <monochrom> Sorry, Control.Exception.assert
22:14:52 <ddarius> However, that has maintainability problems implemented the normal way.
22:15:17 <monochrom> assert (not (null xs)) (last xs)
22:15:36 <monochrom> some magic (or technology) gets the line number printed.
22:15:53 <ddarius> Namely, if I want Bools to be serialized as JSON and you want XML, we can't both implement that same class in the same program even if our packages are imported by a third party.
22:15:55 <monochrom> some future magic will statically check assertions too.
22:16:18 <kquick2> ddarius: I'm OK with that.
22:16:31 <ddarius> kquick2: You shouldn't be.
22:16:56 <monochrom> and yes, some people do say, if assert can find its line number, why can't error. error can, just not done yet.
22:17:07 <ivanm> preflex: seen Heffalump 
22:17:07 <ddarius> Anyway, the solution is to add a parameter to the "Serializable" type class that also (putatively) specifies the cache format.  It's really just a meaningless name, but it distinguishes instances.
22:17:07 <preflex>  Heffalump was last seen on #darcs 15 hours, 23 minutes and 50 seconds ago, saying: which is what you seem to be doing now
22:17:31 <monochrom> the lazy cat takes on so many forms
22:17:41 <ddarius> class Serializable format t where ...;  data JSON; instance Serializable JSON Bool where ...
22:17:42 <manateeUser> Looks notify-send can't work when some program fullscreen.
22:17:43 <kquick2> ddarius: Let me clarify:  If I want JSON I create a JSON instance and pass to the serializer.  If you want XML, you create an XML instance and pass.  I'm OK with not switching instances/forms midstream.
22:18:11 <ivanm> @tell Heffalump ugh, looks like you're right about Applicative: without a way of saying "this type can take any function", you have to be careful about specifying the type of every sub-function even in something as simple as "(*>) = liftA2 (const id)" :s
22:18:11 <lambdabot> Consider it noted.
22:18:21 <monochrom> the lazy cat that writes 3 irc clients and uses them all is not so lazy.
22:18:49 <ddarius> kquick2: I said you would be able to combine independent code in the same program.  You wouldn't be able to even compile the code even if they are two completely separate, non-interacting packages combined in a third package.
22:19:14 <kquick2> ddarius: OK.  That's what you would call a type witness, right?  But how do I get from there to being able to call Text.JSON with the (JSON a).
22:19:51 <manateeUser> monchrom: When i just type "irc://" it will use default #haskell with manateeUser . :)
22:20:15 <monochrom> oh god, now you lift irc to the uri level
22:20:28 <ivanm> monochrom: isn't it already?
22:20:40 <ddarius> kquick2: The technique I described re the multiparameter type class is often called a "traits type class."  At any rate, using this solution it becomes not your problem.
22:20:44 <manateeUser> monochrom: When some part can ignore, i will ignore, so lazy. :)
22:20:48 <monochrom> well, my surprise is someone here actually uses it
22:21:01 <manateeUser> monchrom: juhp.
22:21:21 <manateeUser> monochrom: Anyone can use it if you use gtk2hs darcs.
22:21:36 <manateeUser> monchrom: compile is simple, just do "./repos.sh install"
22:21:51 <manateeUser> Damn it, i need develop "nick completion" feature.
22:21:59 <monochrom> haha
22:22:18 <monochrom> or just use my hash value
22:22:31 <caelan> manateeUser: i'll bet emacs has an irc client with a nick completion feature :)
22:22:47 <manateeUser> caelan: not cool enough.
22:23:25 <manateeUser> My nick notify only can work when manatee exit fullsreen, stupid notify-send just work when no program in fullscreen.
22:23:30 <kquick2> ddarius: I would assume I could have "instance Serializable XML Bool where...".   Then I might have "f :: (Serializable XML a) => a -> XML" and "g :: (Serializable JSON a) => a -> JSON" in the same program, couldn't I?
22:23:46 <ddarius> kquick2: Sure.
22:24:13 <kquick2> ddarius: but I still don't know how I get a to be (JSON a) in g so that I can call Text.JSON operations.
22:24:28 <manateeUser> monochrom: I have voice recognition module inside Emacs.
22:24:46 <manateeUser> monochrom: When catch your hash value, read it to me. :)
22:25:16 <monochrom> technology has really become scary
22:25:23 <manateeUser> monochrom: listening to music chat A good comfortable.
22:25:32 <ddarius> kquick2: Well, if you actually need the JSON object then you'd have to actually have the JSON trait type be a bit more meaningful.
22:25:42 <manateeUser> monochrom: the translation is not bad
22:26:13 <ddarius> kquick2: But it sounds like you are focusing too much on specifics and not enough on general interfaces.
22:26:15 <ivanm> OK, I just got an email in Croatian that is apparently (according to google) about someone who wants to ask me about learning Haskell
22:26:25 <monochrom> (two years later) "monochrom: I have remote massage module inside Emacs"
22:26:50 <manateeUser> monochrom: in manatee now. :)
22:26:56 <ddarius> kquick2: What actions and support does your data cache thing actually need to do its job?
22:26:59 <manateeUser> monochrom: say goodbye Emacs. :)
22:27:05 <monochrom> great, a foreign language email that is not spam
22:27:13 <kquick2> ddarius: haha!  I thought my problem was that my interface was too general!  :-)
22:27:42 <monochrom> write back some haskell code and ask google to translate to croatian
22:28:03 <ddarius> kquick2: The interface that you want to present is general, I'm talking about what interfaces do -you- actually consume to implement this.
22:28:15 <manateeUser> monochrom: forM_ [1..10] putStrln
22:28:25 <manateeUser> monochrom: Google is smart.
22:28:37 <manateeUser> monchrom: I try convert to chinese.
22:28:52 <manateeUser> 单色：forM_ [1 .. 10] putStrLn
22:28:59 <monochrom> putStrLn is not supposed to work for 1, 2, 10, etc.
22:28:59 <manateeUser> monochrom: Chinese ^^
22:29:00 <ddarius> For example, presumably all you are going to do with a JSON object that is made is feed it to something else.  The fact that it is JSON isn't important to your code.
22:29:15 <kquick2> ddarius: I'm not sure I entirely know what you're asking for.  It's caching key/value pairs, where the value may be a typical type (String, Int, etc.).  I want to be able to serialize the contents in different formats, along with some cache management data in the serialization.
22:29:15 <manateeUser> 单色putStrLn。显示
22:29:20 <copumpkin> :o
22:29:25 <manateeUser> putStrLn . show
22:29:30 <monochrom> monochrom display I have
22:29:33 <kquick2> It's not important to me, but it's important to the library user.
22:29:47 <manateeUser> Damn google (English)
22:29:54 <manateeUser> 该死的谷歌（中国）
22:29:57 <ddarius> kquick2: That's fine, but -your code- doesn't need to know that it is JSON.
22:30:12 <manateeUser> Haskell Hooray!
22:30:14 <monochrom> hrm? English becomes 中国 ?
22:30:21 <kquick2> Most of my code is unconcerned with the serialization to achieve it's data caching, but it may be important to the user what the serialization format is.
22:30:22 <manateeUser> monochrom: Yes.
22:30:33 <ddarius> kquick2: You already said that.
22:30:39 <kquick2> And I have to add some key/values of my own to the serialization.
22:30:43 <monochrom> this is time for face-palm
22:30:46 <manateeUser> 哈斯克尔万岁！
22:31:07 <monochrom> technology has become too scary
22:31:25 <manateeUser> 技术已成为太吓人了。
22:31:39 <manateeUser> ^^^ Chinese version
22:31:40 <ddarius> kquick2: Let's say JSON was the only format you were going to support.  What JSON functions would you need to use to write your thing.
22:32:08 <manateeUser> monochrom: I have some cool idea.
22:32:33 <manateeUser> When i move cursor to some words i can't understand, then popup Chinese version in real-time.
22:32:40 <kquick2> ddarius: ultimately I want to call encode (or encodeStrict).
22:34:01 <manateeUser> So I have time, I would like to set up a Haskell community in China, to grow Haskell.
22:34:03 <kquick2> ddarius:  I don't want to write much more than that, but the JSON encode requires that it's arguments are members of the JSON class.
22:34:36 <manateeUser> It seems Google&#39;s English than I Okay.
22:34:42 <ddarius> kquick2: Forget that for now.  Presumably you need more than just encode, decode, say.
22:36:02 <monochrom> > Data.Char.chr 39
22:36:02 <lambdabot>   '\''
22:37:31 <kquick2> ddarius: I can't think of what else I'd need from the most general persepective.  Anything else is just overhead to be able to call encode and decode.
22:38:27 <ddarius> And if I had said YAML instead, you'd be saying the same thing.  One YAML library even has encode/decode as methods, albeit with a fairly different (but essentially equivalent) type.
22:38:59 <ivanm> how can I state "this takes any function, no matter its arity or the types" ?
22:39:07 <ddarius> So all you need is to know how to turn whatever your users gave you into a String and back.  You don't need to know what it actually is.
22:40:36 <kquick2> ddarius: I suppose.  But how can I convert it to the String the user wants without knowing what it is so that I know how to convert (what to call: JSON encode or YAML encode)?
22:40:56 <ddarius> So you just say that in your interface, your Serialize class would have your own encode/decode methods.  The users would have to instantiate them to use your library.  This allows them to use whatever means of serializing they want, even multiple ones.  You can add a few more methods to be able to add the keys that you need.
22:41:31 <ddarius> The extra type parameter to the type class helps avoid conflicts between different libraries and allows the user to have different modes within a single library.
22:42:29 <kquick2> ddarius: but doesn't that require the user to have intimate knowledge of my datacache internals to write that encode instance?
22:42:38 <ddarius> kquick2: No.
22:42:55 <ddarius> Does JSON's encode have intimate knowledge of your data cache's internals?
22:44:07 <kquick2> ddarius: no, but I do so that I can extract the simple key/value pairs out of my internal datatypes (if I'm pushing the encode).  If the user is writing the encode, they need to know my internal datatypes and how to extract the pairs.
22:44:10 <ddarius> Imagine you wrote your code using JSON only.  Then, upon finishing, put a big fat lambda with all the JSON functions you used at the beginning.  Now your code is independent of JSON.
22:45:24 <kquick2> ddarius: but the lambda has it's own class constraints that might be different based on what lambda is used.
22:45:26 <ddarius> kquick2: As I said, you can add other methods or some more bells and whistles to your encode/decode to allow you to hook back into there code where needed.
22:45:40 <ddarius> kquick2: No it would not.
22:46:06 <ddarius> :t let f x = show x; g show x = show x in (f, g)
22:46:07 <lambdabot> forall a t t1. (Show a) => (a -> String, (t -> t1) -> t -> t1)
22:47:22 <kquick2> ddarius: roughly you are saying I would need to provide a "getKeyValueList :: c -> [(String, x)]"?
22:47:46 <kquick2> ddarius: except now x is freely variant...
22:49:11 <manateeUser> I see, notify-OSD (Infact is all OSD) is track the gnome-panel, when gnome-panel hide, OSD message won't show. 
22:49:23 <ddarius> kquick2: Let's say I have stuff in some XML class,  I pass a pair of Bools to your data cache thing and want them stored as XML, what does your code do with (True, False), i.e. what is the "output" of that.
22:49:29 <kquick2> ddarius:  OK, I'm having trouble parsing "g show x" on the left side.  show is a function, so it's not a type for pattern matching.
22:49:42 <ddarius> g s x = s x
22:50:02 <kquick2> ddarius: gotcha: show on the left is a variable (and therefore on the right).
22:50:06 <ddarius> It's just a parameter.  This is dependency inversion.  All dependency inversion is is parameterization.
22:50:42 <ddarius> kquick2: show is a variable everywhere, but show is bound in g to the first parameter and thus that is the show used on the right hand side of g.
22:51:46 <kquick2> ddarius: My datacache stores key/value pairs, so you can't just give me two bools.  You have to give me a name for each of your bool values.  I don't store internally in XML.
22:51:52 <manateeUser> Ask in irc://irc.gnome.org#haskell (love juhp's patch, so lazy).
22:52:40 <ddarius> kquick2: Let's say you only support XML, what is your store functions type?
22:52:51 <ddarius> (or whatever function I'd be giving my data to)
22:53:07 <kquick2> :ddarius If you gave me "store c "foo" True; store c "bar" False; serialize c" and serialize was XML then I might generate "<xml><field>foo</field><value>true</value>...</xml>"
22:53:54 <kquick2> If serialize was JSON, it might be "{"foo":true,"bar":false}"
22:55:00 <ddarius> kquick2: Then I would do fetch "foo" to get True again.  Do you use the key values for anything else?
22:55:01 <kquick2> store :: DataCache -> String -> a -> DataCache
22:55:31 <kquick2> ddarius: not really
22:56:57 <ivanm> anyone here understand Croation?
22:59:33 <ddarius> kquick2: You could push providing a lookup function and serializing the key/value pairs onto the user, but its probably nicer and flexible enough to provide a backend interface (type class) as well that will handle classes of formats.  For example...
22:59:34 <m3ga> ivan:  i used to be able to call someone 
22:59:53 <m3ga> 'a penix with ears' but i've forgoteen it
23:02:02 <ivanm> m3ga: yeah, I've got someone from croatia that figured my name looked right and is asking me about Haskell :s
23:02:08 <ivanm> thing is, I'm relying on google translate :p
23:02:20 <ddarius> class Serializable name format t where encode :: t -> format; decode :: format -> t; class Backend format where serialize :: format -> String; deserialize :: String -> format; addKey :: String -> format -> format; lookup :: String -> format -> format;
23:02:50 <m3ga> ivanm: google translate is unlikely to be of much use :-)
23:03:58 <ivanm> m3ga: it isn't :s
23:04:02 <manateeUser> m3ga: really? Note that this is a translation.:)
23:04:05 <ivanm> I was hoping gour would be online :s
23:04:21 <ddarius> You would provide some pre-implemented backends for convenience, though the user could add a new one whenever they wanted to, and also some standard instances for Serializable using a name (trait type) defined in your library.
23:05:09 <m3ga> i get the ocassion email in portuguese and after google translate converts it to english, it makes little if any sense.
23:05:54 <manateeUser> m3ga: Google translate good for simple message, like IRC ... :)
23:07:08 <kquick2> ddarius: OK, so format is an intermediary format that I convert my internals into, and they are responsible for writing the instance of Backend.  Where does the need for addKey and lookup come from in Backend?
23:08:28 <ddarius> kquick2: You would provide some common backends, they'd only need to write an implementation if they needed a custom format.  In the common case the user would need to implement the Serializable class or they may not even need to do that if they stick to standard types and a standard format.
23:09:07 <ddarius> You'd write your dataCache store/fetch in terms of Serializable and Backend.
23:09:24 <ivanm> @tell m3ga yeah, I understand just enough serbian/croatian to be able to get an idea of what he's asking though, which provides me with a backup to google
23:09:24 <lambdabot> Consider it noted.
23:11:01 <manateeUser> I hope cabal can implement package name completion, like aptitude install in Debain.
23:11:03 <kquick2> ddarius: I believe I see the general form... I need to think and play with this a little.  Thank you very much for your patience and time!
23:11:23 <ivanm> manateeUser: well, it would require someone to get the bash completion stuff implemented
23:11:26 <ivanm> should be possible
23:11:55 <manateeUser> ivanm: I think it's not hard to implement.
23:12:12 <ivanm> well, yeah, someone just has to do it ;-)
23:12:19 <ivanm> darcs has bash completion IIRC...
23:12:21 <ddarius> You may even be able to get away with writing: instance Show a => Serializable Std String a where encode = show; decode = read and have it do what you want.  (And I realized now that you'd want something more like: class Serializable name element t; and class Backend element format where addKey :: String -> element -> format; etc.)
23:12:29 <ivanm> or that might just be a really old patch we keep re-applying in Gentoo...
23:12:30 <manateeUser> ivanm: Infact i want build some "eclipse style completion" in my terminal .
23:13:02 <manateeUser> ivanm: Completion and popup help information in real-time.
23:13:10 <ddarius> Actually partially scratch that parenthetical remark.  For the cases you're envisioning that type probably works closely enough.
23:13:35 <manateeUser> ivanm: Then i can type bash command as fast as possible.
23:14:41 <ddarius> Also, you will probably want/need to add dummy name parameters to the Serializable methods (or use the Tagged monad) and obviously this interface is a little simplistic and inefficient.
23:14:51 <manateeUser> I remember notify-OSD work fine on Debian 4.0, but now have a fullscreen bug, i hate it.
23:15:03 <manateeUser> I can't see message when i'm in fullscreen model.
23:15:45 <manateeUser> I have test fdo-notify package, works fine, just fullscreen can't work.
23:16:48 <manateeUser> @package fdo-notify
23:16:48 <lambdabot> http://hackage.haskell.org/package/fdo-notify
23:17:37 <kquick2> ddarius: OK.  Thanks again... that gives me stuff to chew on.
23:18:46 <manateeUser> Looking for other notify package.
23:19:19 <manateeUser> Please let me know if anyone know good notify package on Linux.
23:20:06 <ddarius> kquick2: Worst case scenario, literally do what I suggested (mostly as a thought experiment) above.  Write the code targetting one particular format.  Parameterize out all the functions that deal with that format in your functions until the types are fully polymorphic in it.  Collect those parameter types into a class and clean it up some while still making sure you can implement the particular case in terms of the cle
23:20:06 <ddarius> aned up interface.
23:20:18 <ivanm> manateeUser: there's that one, and I think one to growl for OSX; that's it
23:20:45 <manateeUser> ivanm: Growl can works on Linux?
23:21:03 <ivanm> no, it's for OSX
23:21:19 <manateeUser> ivanm: I want notify package for Linux.
23:21:26 <manateeUser> ivanm: notify-OSD is best one.
23:21:34 <ivanm> *shrug* notify-OSD, fdo-notify
23:21:40 <manateeUser> ivanm: But looks have new fullscreen bug after Ubuntu-8.10
23:21:51 <manateeUser> ivanm: In my Debian haven't those problem.
23:21:54 <ivanm> manateeUser: umm, that's up to whatever fdo engine you use
23:21:58 <ivanm> nothing to do with fdo
23:22:06 <ivanm> also, wtf are you doing with a full screen notification?
23:22:17 <manateeUser> ivanm: Yes.
23:22:51 <manateeUser> ivanm: When i switch other buffer (editor, or reader), if someonce call me and i'm not focus on irc buffer, then popup notify tooltip.
23:22:57 <manateeUser> ivanm: I know.
23:23:15 <manateeUser> ivanm: I can build new notify tool with GTK+ code.
23:23:23 <manateeUser> ivanm: Never use notify or other package.
23:23:52 <manateeUser> Hmm, it's best solution i can see.
23:23:54 <CoryDambach> My friend uses growl on Ubuntu
23:24:11 <manateeUser> CoryDambach: Works fine?
23:24:34 <CoryDambach> Yeah, I've never seen him have any problems with it
23:24:37 <ivanm> manateeUser: ummm, I still don't get why you want a full-screen notification
23:24:42 <ivanm> CoryDambach: you sure?
23:24:55 <ivanm> ubuntu uses fdo...
23:25:07 <Axman6> wtf? what kind of crappy notification framework would let notifications be behind windows? that's absurd
23:25:17 <CoryDambach> not 100% but let me check, he calls it growl and it looks the same on both his ubuntu and his OSX box
23:25:19 <manateeUser> ivanm: Because i always in fullscreen mode to work.
23:25:29 <ddarius> Axman6: You don't want those distracting notifications getting in the way.
23:25:34 <ivanm> huh, looks like someone has done a growl <-> DBUS bridge
23:25:39 <Axman6> they might notify you of something!
23:25:46 <ivanm> to get growl notifications from elsewhere AFAICT: http://the.taoofmac.com/space/blog/2006/11/12/1145
23:26:00 <ivanm> Axman6: who said that?
23:26:22 <ivanm> manateeUser: oh, ubuntu's fdo theme doesn't appear when doing full screen stuff?
23:26:38 * ivanm quite likes xfce4-notifyd
23:26:56 <Axman6> Growl doesn;t show up if you've got the wrong full screen apps open, ie, anything made by apple
23:27:12 <ivanm> Axman6: so apple's stuff don't play nicely with each other?
23:27:16 <ivanm> that'd be right...
23:27:19 <Axman6> eh?
23:27:23 <Axman6> Growl isn't an Apple thing
23:27:33 <ivanm> isn't it?
23:27:44 <Axman6> it's just Apple do full screen in another way than they let other people i think
23:27:51 <Axman6> yeah, growl is an open source project
23:27:54 <ddarius> ivanm: The word processor team is trying to get the file manager team to buy licenses from them.
23:28:01 <manateeUser> ivanm: *Any* program fullscreen model will make notify-osd can't work. 
23:28:09 <ivanm> ddarius: heh
23:28:27 <ivanm> manateeUser: get a different notification implementation then
23:28:32 <ivanm> if ubuntu's sucks that much
23:28:41 <manateeUser> ivanm: I don't know whether has a bug of ubuntu.
23:28:59 <manateeUser> ivanm: I remember XMonad can work even in fullscreen.
23:29:11 * ddarius uses xmonad (and Ubuntu) and always has everything fullscreen and notifications seem to work fine.
23:29:25 <manateeUser> ddarius: So it's Ubuntu/Gnome bug.
23:29:44 <manateeUser> ddarius: I remember I can notify-osd work in XMonad.
23:29:45 <ddarius> That'd be a hell of a bug.
23:30:31 <manateeUser> ivanm: I decide, build a notify framework for manatee, don't use other package, i'm tired to follow those bug.
23:31:11 <ddarius> "I accidentally committed some code my cat wrote.  The system is 20% faster, but there's this bug with fullscreen windows."
23:31:13 <ivanm> manateeUser: ummm, you probably shouldn't get too caught up in NIH...
23:31:24 <c_wraith> is there a haskell binding for the growl lib?
23:32:06 <manateeUser> ddarius: Some stupid bug crazy you sometimes.
23:32:11 * ddarius agrees with ivanm and then returns to writing a boot loader to load a small language environment to use to write drivers and tools.
23:32:31 <ivanm> ddarius: isn't grub good enough for you? :p
23:33:05 <ddarius> ivanm: Not if there's no partition table and no partitions for the partition table to tabulate.
23:33:13 <ivanm> fair enough
23:33:48 <dibblego> \s -> foldl (\i j -> (i*16) + j) 0 (map digitToInt s) -- this in the stdlib?
23:34:17 <ddarius> @hoogle readHex
23:34:18 <lambdabot> Numeric readHex :: Num a => ReadS a
23:34:18 <lambdabot> Text.Read.Lex readHexP :: Num a => ReadP a
23:34:44 <ddarius> Albeit readHex won't return 0 upon being given an empty list.
23:35:35 <dibblego> I suppose I'll have to write safeHead again
23:35:48 <ddarius> You mean listToMaybe?
23:35:57 <dibblego> yes with fromMaybe
23:36:12 <dibblego> a -> [a] -> a
23:36:54 <manateeUser> Bye all, writing Haskell-Notify....
23:37:10 <ddarius> @pl \x xs -> head (xs++[x])
23:37:10 <lambdabot> (head .) . flip (++) . return
23:37:25 <copumpkin> :t foldr const
23:37:25 <lambdabot> forall a. a -> [a] -> a
23:37:56 * ddarius prefers his use of laziness to make ugly code performant.
23:38:04 <copumpkin> :P
23:38:50 <copumpkin> dibblego: check out the two beautiful solutions!
23:39:00 <dibblego> heh
23:42:35 <dibblego> @pl \ch -> and (sequence [isAscii, isPrint, (≠ '\\'), (≠ '"')] ch)
23:42:35 <lambdabot> (line 1, column 22):
23:42:35 <lambdabot> unexpected "["
23:42:35 <lambdabot> expecting variable, "(", operator or ")"
23:42:39 <dibblego> bleh
23:42:47 <ivanm> ASCII ;-)
23:42:48 <dibblego> @pl \ch -> and (sequence [isAscii, isPrint, (/= '\\'), (/= '"')] ch)
23:42:48 <lambdabot> and . sequence [isAscii, isPrint, ('\\' /=), ('"' /=)]
23:43:18 <ivanm> dibblego: use all instead of and?
23:43:33 <ivanm> all ($ch) [isAscii, ... ] ?
23:44:51 <dibblego> \ch -> all ($ch) [isAscii, isPrint, (/= '\\'), (/= '"')]
23:44:54 <dibblego> @pl \ch -> all ($ch) [isAscii, isPrint, (/= '\\'), (/= '"')]
23:44:54 <lambdabot> flip all [isAscii, isPrint, ('\\' /=), ('"' /=)] . flip id
23:45:01 <dibblego> that's what I thought
23:46:34 <IceDane> Shit.
23:46:41 <IceDane> You guys are doing stuff I would never have thought of
23:46:43 <IceDane> I love this channel
23:47:54 <etpace> what does flip id actually do
23:48:00 <c_wraith> same as flip ($)
23:48:10 <c_wraith> :t id `asTypeOf` ($)
23:48:11 <lambdabot> forall a b. (a -> b) -> a -> b
23:48:56 <etpace> > flip ($) $ 5 (+5)
23:48:57 <lambdabot>   Overlapping instances for GHC.Show.Show ((a -> b) -> b)
23:48:57 <lambdabot>    arising from a u...
23:49:00 <etpace> mm?
23:49:18 <c_wraith> mis-parse :)
23:49:21 <ivanm> > flip ($) 5 $ (+5)
23:49:22 <lambdabot>   10
23:49:47 <ivanm> etpace: yours said "apply the function `5' to the value (+5), and then apply `flip ($)' to the result"
23:50:00 <etpace> sure
23:50:09 <c_wraith> The error message was crazy because in lambdabot, '5' is a function :)
23:50:17 <c_wraith> > 5 5
23:50:18 <lambdabot>   Ambiguous type variable `t' in the constraint:
23:50:19 <lambdabot>    `GHC.Num.Num t' arising f...
23:50:24 <etpace> why is flip id the same as flip ($) though
23:50:37 <ivanm> @type flip id
23:50:38 <lambdabot> forall a b. a -> (a -> b) -> b
23:50:40 <ivanm> @type flip ($)
23:50:41 <lambdabot> forall a b. a -> (a -> b) -> b
23:50:49 <c_wraith> unify the types of flip and id by hand, and you'll see why
23:51:04 <c_wraith> I can't really recommend anything other than actually doing it for yourself
23:51:28 <ivanm> well, not anything useful/helpful, anyway...
23:51:29 <ivanm> ;-)
