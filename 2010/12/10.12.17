00:04:47 <dobblego> thisisnotmynick, which exercises?
00:10:04 <thisisnotmynick> that was exercise 3. i figured out the response was furry = (.), i received a function (a -> b), had a function (a -> ?), and wanted a function (b -> ?)
00:10:26 <thisisnotmynick> i actually haven't believed that the response would be so simple, but the compiler didn't choked
00:10:27 <dobblego> thisisnotmynick, that is correct
00:10:39 <dobblego> thisisnotmynick, that's the point of the exercise :)
00:11:02 <dobblego> by the way, all that code has been updated and much more code here https://bitbucket.org/dibblego/haskell-course
00:11:25 <thisisnotmynick> oh, nice exercises :)
00:11:35 <thisisnotmynick> i initially reversed exercises 4 and 5. i still don't understand how the final response can be right.. furry f (EitherLeft (Left x)) = EitherLeft (Left (f x))
00:11:49 <thisisnotmynick> and not furry f (EitherLeft (Right x)) = EitherLeft (Right (f x))
00:11:57 <Boxo> dobblego,  http://dibblego.wordpress.com/2008/09/18/20-intermediate-haskell-exercises/
00:12:13 <Boxo> huh. you made them didn't you
00:12:17 <thisisnotmynick> since EitherLeft t seems to specify the _right_ as t (since EitherLeft b a = EitherLeft (Either a b), and b is the right branch)
00:12:32 <dobblego> https://bitbucket.org/dibblego/haskell-course/src/e32684d3e41b/L04/
00:13:31 <thisisnotmynick> i'm puzzled, and reversed the function as a student that see EitherLeft and say "oh, it must be specifying the left" and don't actually understand the logic
00:13:49 <dobblego> thisisnotmynick, it's just that Either presents a monad on both sides
00:14:39 <dobblego> there is (Either left) and there is also (flip Either right)
00:14:56 <dobblego> in Haskell, we cannot flip type constructors, so newtype is used
00:15:00 <thisisnotmynick> but actually. Fluffly receives as a parameter the variable that is free. Fluffly (EitherLeft t) has furry :: (a -> b) -> (EitherLeft t) a -> (EitherLeft t) b
00:15:25 <thisisnotmynick> so a there is the second parameter of EitherLeft, that is the left branch
00:16:58 <thisisnotmynick> so Fluffly is Functor and Misty is Monad plus liftM?
00:17:12 <dobblego> yes they are just euphemisms
00:17:34 <thisisnotmynick> is liftM really defined inside the class Monad m where .. ?
00:17:45 <dobblego> in the standard library? yes
00:17:51 <dobblego> it's all a bit messy imo
00:17:55 <thisisnotmynick> shouldn't it be defined outside?
00:18:00 <thisisnotmynick> or couldn't it be
00:18:03 <dobblego> oh, wait yes it is outside
00:18:14 <Boxo> euphemisms :) all warm and fuzzy
00:18:33 <dobblego> in the exercises, it's a little different to the standard library
00:18:51 <thisisnotmynick> oh, so that was just to say fluffly can be defined both in Fluffly and Misty
00:19:04 <thisisnotmynick> Fluffy
00:19:24 <dobblego> if you have banana and unicorn you can derive durry
00:19:27 <dobblego> *furry
00:19:35 <dobblego> in other words, all monads are functors
00:19:49 <dobblego> if you have completed Exercise 6, you witness this
00:20:16 <thisisnotmynick> furry' f l = banana (\x -> unicorn $ f x) l
00:20:30 <thisisnotmynick> i'm trying to write (\x -> unicorn $ f x) point-free..
00:20:34 <dobblego> exactly
00:20:40 <dobblego> ok, that's a good exercise too
00:21:04 <thisisnotmynick> @pl (\x -> unicorn $ f x)
00:21:04 <lambdabot> unicorn . f
00:21:10 <thisisnotmynick> (couldn't resist)
00:21:10 <boegel> anyone aware of any effort for creating an iPhone app for GHCi?
00:21:14 <dobblego> that's cheating :)
00:21:27 <dobblego> boegel, there is a Haskell-iPhone mailing list
00:21:47 <boegel> dobblego: URL?
00:22:01 <boegel> @google Haskell iPhone
00:22:03 <lambdabot> http://www.haskell.org/haskellwiki/IPhone
00:22:03 <lambdabot> Title: IPhone - HaskellWiki
00:22:14 <boegel> dobblego: nvm ;)
00:23:32 <thisisnotmynick> I want means of sending just a piece of my buffer to the inferior haskell mode for emacs. (But it seems the real problem is that I can't send a piece of code for ghci, I can just load a file..)
00:23:54 <thisisnotmynick> but one could save a temporary file with the fragment and load it ._.
00:24:18 <thisisnotmynick> but the problem would be that this fragment would have to be self contained
00:25:04 <thisisnotmynick> should i switch to hugs?
01:01:34 <jonrafkind> is there a way to get the function type? if I just type the name of the function in prelude I get back <function>, but im trying to figure out what the arguments are
01:02:12 <nus> :t id
01:02:12 <lambdabot> forall a. a -> a
01:02:13 <jonrafkind> oh boy.. just found it. :type foo
01:02:17 <jonrafkind> sorry
01:02:41 <astertronisticon> Thanks, I learned something.
01:23:26 <blueonyx> hi, how to get current seconds since unix epoch?
01:23:50 <blueonyx> (as Integer :)
01:28:16 <thisisnotmynick> blueonyx, date +%s (sorry, idk :)
01:29:30 <silver> getClockTime I guess
01:30:31 <blueonyx> i went with getCurrenTime and utcTimeToPOSIXSeconds 
01:30:45 <blueonyx> thanks anyhow :)
01:39:48 <pastorn> i want to grab a ByteString from a FilePath between byte X and Y
01:40:10 <pastorn> @hoogle FilePath -> Int -> Int -> IO ByteString
01:40:10 <lambdabot> Text.Regex.Base.RegexLike makeRegexOptsM :: (RegexMaker regex compOpt execOpt source, Monad m) => compOpt -> execOpt -> source -> m regex
01:40:10 <lambdabot> Text.Regex.Base.RegexLike makeRegexOpts :: RegexMaker regex compOpt execOpt source => compOpt -> execOpt -> source -> regex
01:40:15 <pastorn> nope...
01:40:24 <pastorn> is this 'fseek'?
01:40:28 <dobblego> how do I put a literal backslash in haddock?
01:42:01 <dobblego> actually, a literal \"
01:48:05 * hackagebot parallel-io 0.3.0.2 - Combinators for executing IO actions in parallel on a thread pool.  http://hackage.haskell.org/package/parallel-io-0.3.0.2 (MaxBolingbroke)
01:49:05 * hackagebot JSON-Combinator 0.1.0 - A combinator library on top of a generalised JSON type  http://hackage.haskell.org/package/JSON-Combinator-0.1.0 (TonyMorris)
01:58:53 <pastorn> ah, Handles :D
01:59:06 <pastorn> @type hSeek
01:59:06 <lambdabot> Not in scope: `hSeek'
01:59:13 <pastorn> @hoogle hSeek
01:59:14 <lambdabot> System.IO hSeek :: Handle -> SeekMode -> Integer -> IO ()
02:23:21 <mlesniak> Since I did not find any information in the topics. What's up with haskell.org?
02:23:31 <mlesniak> (I see some domain-grabber spam site?)
02:24:50 <Twey> Wah
02:25:08 <Twey> This means Hackage is down
02:25:18 <Twey> Oh, for Pete's sake :<
02:25:32 <thisisnotmynick> what? it's fine here
02:25:40 <quicksilver> erm?
02:25:41 <thisisnotmynick> redirects to http://haskell.org/haskellwiki/Haskell
02:25:45 <quicksilver> haskell.org looks fine to me
02:25:48 <thisisnotmynick> cool logo
02:26:08 <thisisnotmynick> (that one in white and gray)
02:26:23 <quicksilver> having said that
02:26:29 <quicksilver> the domain is pending renewal or deletion
02:26:45 <Bynbo7> mlesniak: works fine here
02:26:57 <Twey> http://haskell.org/haskellwiki/Haskell: ‘network solutions’ page.  Search categories: Haskell, Basic Computer Programming Language, Php Programming Language, Programming Languages, Easy Programming Language, Cobol Programming Language, Visual Basic Programming
02:27:10 <mlesniak> https://www.dropbox.com/s/nru5iw6xu81k5dh/Screenshot-1.png
02:27:13 <thisisnotmynick> quicksilver, wow but isn't it cheap?
02:27:15 <mlesniak> That's what I see
02:27:22 <quicksilver> thisisnotmynick: yes, it's very cheap
02:27:24 <Twey> I'm guessing some DNS record hasn't updated
02:27:32 <Twey> But… in which direction?
02:27:46 <quicksilver> I imagine those of us it's still working for have cached records
02:27:58 <quicksilver> the WHOIS says it's pending renewal/deletion
02:28:02 <Twey> Ah
02:28:14 <thisisnotmynick> i run a dns cache
02:28:17 <Bynbo7> :|
02:28:39 <thisisnotmynick> who can renew it? should be warned asap
02:29:01 <quicksilver> thisisnotmynick: I have told some of the people involved.
02:29:59 <Bynbo7> is there possibly a way we can, as a community, hire someone to look after the web site of the haskell world? the way things have been going lately have been a joke
02:30:06 <Bynbo7> has been*
02:30:11 <quicksilver> you sound like you don't know what you're talking about
02:30:20 <quicksilver> the web site has, in fact, been moved to a new server
02:30:24 <quicksilver> and has new people responsible for it
02:31:05 <Bynbo7> i'm aware of that
02:31:17 <quicksilver> well, then things should be better from now on
02:31:21 <quicksilver> why suggest another change?
02:32:12 <Bynbo7> who manages to let their domain expire?
02:32:47 <Bynbo7> i get irl spam from shonky domain registrars around the time mine's up for renewal, plus the one i have it registered with
02:33:31 <kstt> how can perl be so popular, even amongst some great hackers ! Is it just because it's twisted to a point of being "fun" ? :)
02:34:26 <quicksilver> Bynbo7: the domain probably isn't registered to the new web site team; just an oversight
02:34:54 <kstt> learning it is paintfull, I wished apache had mod_haskell for internals handling.
02:35:19 <Bynbo7> why not just use one of the much faster haskell web servers?
02:35:33 <thisisnotmynick> http://blog.ezyang.com/2010/12/omega-i-m-lubbin-it/?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed:+ezyang+(Inside+245s) i'm stunned by the amazing-ness of this post
02:36:23 <quicksilver> kstt: you wish apache had mod_haskell to learn the internals of what?
02:37:31 <Bynbo7> i think he means learning perl is painful, and he wants to use haskell for websites
02:37:33 <kstt> Bynbo7: I will do so as soon as they can serve subversion repositories. At the moment, only apache has the code to do so. Before you ask, svn access is not for me but for my customers :)
02:37:51 <Bynbo7> fair enough
02:38:03 <Bynbo7> doesn't lighttpd server subversion repos too?
02:38:08 <Bynbo7> maybe i'm wrong
02:38:15 <kstt> no it does not
02:39:27 <kstt> quicksilver: apache provides mod_perl and exposes almost all its configuration, all its API and all the request handling phases to mod_perl, which is very convenient for dynamic hosting environments.
02:40:04 <quicksilver> Bynbo7: if you only want to use haskell for websites, you don't need anything like that. mod_perl is a terrible way to build a "normal" website.
02:40:10 <kstt> I don't mean dynamic websites ... Snap or Happstack fullfill perfectly this need.
02:40:20 <quicksilver> as kstt remarks, mod_perl is for getting inside the apache request cycle
02:40:25 <quicksilver> which is a more obscure requirement
02:40:25 <Bynbo7> quicksilver: i know that... tell kstt  :\
02:41:24 <kstt> not so obscure considering that apache is the only way to serve svn through http. And it's a terrible way ...
02:42:30 <quicksilver> kstt: I dunno. I think svn is quite obscure :)
02:42:34 <kstt> But customers use subversion and won't change that anytime soon so they want it. So i want to learn perl, saw great hackers praising it, the saw the languages constructs ... I wish I could give up on that :)
02:44:10 <kstt> Haskellers usually have high standard regarding language designs so I was wondering if somebody could point me to what I'm missing regarding perl.
02:44:21 <quicksilver> perl wasn't designed.
02:44:24 <quicksilver> it happened.
02:44:34 <kstt> eheh
02:45:06 <osfameron> well, reading the Perl 6 lists, Larry certainly *thinks* about stuff a lot
02:45:19 <quicksilver> one of the constraints of the first perl version was that its concrete syntax be simultaneously a strict superset of sed and awk, so that it could be compatible with both.
02:45:26 <quicksilver> that's a weird way to design a language :)
02:45:31 <quicksilver> osfameron: sure. He thinks a lot now.
02:45:39 <kstt> Oh, I didn't know that !
02:45:44 <osfameron> heh
02:45:46 <quicksilver> osfameron: reflect that none of the thoughts he has had in the last 10 years have actually made it into a released version of perl.
02:45:59 <osfameron> that's not entirely true
02:46:02 <quicksilver> (that's not quite true, but you see what I mean)
02:46:14 <osfameron> lots of stuff has been backported to 5.x and/or incorporated into Moose etc., ah ok
02:46:36 <quicksilver> backporting stuff notably fails to remove the toxic crap that was there before
02:46:41 <quicksilver> it just adds new layers or choices :)
02:47:11 <osfameron> pesky backwards compatibility
02:47:12 <quicksilver> and if you're in kstt's shoes of trying to understand a substantial chunk of perl code, I'm wagering it's closer to the 'toxic' end of the spectrum than the 'shiny backported perl6' end.
02:47:22 <kstt> Ok, that was really a disgression regarding the topic of the chan, sorry about that. I was just lost in my quest of hidden beauty, and needed some insights on it :)
02:47:37 <quicksilver> kstt: summmary. It's even more well hidden than you imagined ;)
02:47:40 <osfameron> admittedly, for some perl, the beauty is hidden quite deep ;-)
02:48:10 * osfameron of course, only ever writes Perl of shiny and refined delight *cough*
02:48:23 <kstt> so let's digg, and thank you for sharing :)
02:48:25 <slom> uhh ... what do I have to do to get haskell.org back? 
02:48:40 --- mode: ChanServ set +o quicksilver
02:48:50 --- topic: set to '["haskell.org down; we're on the case","GHC 7 is out: http://is.gd/hb8vE", "Haskell Platform 2010.2: http://is.gd/dCGPn", "Haskell 2010 is out: http://is.gd/iTnkV", "Haskell News: http://reddit.com/r/haskell", "The Haskell programming language http://haskell.org", "Paste: http://hpaste.org", "Logs: http://tunes.org/~nef/logs/haskell/"]' by quicksilver
02:49:38 <Bynbo7> is anyone actually on the case? you've told some people in #ghc... anything more?
02:50:15 <quicksilver> I've emailed some other people.
02:50:25 <Bynbo7> ok
02:50:40 <PaulAJ> Hopefully not using a @haskel.org email address
02:50:44 <quicksilver> indeed not :)
02:55:09 <mrdk> what's the easiest way to get the unix timestamp in milliseconds as an integer in haskell? 
02:55:42 <PaulAJ> slom: there is a link on the haskell.org page saying something like "if you are the domain owner and want to renew..."
02:56:03 <lantti> mrdk: If you mean a file timestamp, you need to have a filesystem that supports that.
02:56:27 <lantti> I think for example ext4 can do that, but ext3 not.
02:56:41 <mrdk> lantti: no, I just need the timestamp of the actual date/time
02:57:43 <quicksilver> mrdk: getCurrentTime (from Data.Time) plus utcTimeToPOSIXSeconds (from Data.Time.Clock.POSIX)
02:57:48 <pastorn> i have this :(
02:57:58 <pastorn> *** Exception: Codec.Compression.Zlib: incorrect header check
02:58:03 <mrdk> quicksilver: thanks, I'll have a look at these
02:58:05 <quicksilver> plus a final realToFrac if you want to convert it to a Double
02:58:20 <blueonyx> quicksilver: is this Seconds or Milliseconds?
02:58:21 <pastorn> anyone here know how a GZ file should "look"?
03:00:25 <quicksilver> blueonyx: well, it's seconds, but hte millisecond precision is there
03:00:30 <Bynbo7> 10010011110101110101000010100101010110101011101010001010010010010101011101011010101011111111110101010...
03:00:34 <Bynbo7> >_>
03:00:39 <quicksilver> obviously you can multiply by 1000 to get it in milliseconds
03:01:16 <quicksilver> pastorn: try running "file" on it and see if "file" thinks it's a valid gzip file
03:02:02 <blueonyx> ah thanks
03:04:34 <pastorn> quicksilver: it's not, unfortunately
03:04:50 * pastorn reads some RFCs
03:04:54 <quicksilver> pastorn: what did file say? One possibility is that something auto-decompressed it
03:05:04 <pastorn> a GZ should start with 0x1f 0x8b, but this doesn't
03:05:06 <quicksilver> that used to happen to people with certain proxies, although that bug was supposed to be fixed.
03:05:18 <pastorn> i'm guessing that the compression removed the header completely
03:05:29 --- mode: quicksilver set -o quicksilver
03:06:30 <mrdk> quicksilver: getPOSIXTime seems to be the solution
03:07:06 <bartavelle> you can also try recompressing it, if it doesn't compress it might means your file is already compressed, encrypted or random
03:07:57 <quicksilver> mrdk: ah yes that's simpler :)
03:08:21 <mrdk> quicksilver: however I'm failing to convert it to an integer
03:08:37 <quicksilver> mrdk: round?
03:08:54 <quicksilver> (you may want to multiply by 1000 before the round, since you wanted millisecods)
03:09:24 <mrdk> quicksilver: right, using round should work
03:14:17 <akamaus> hey, guys, what happened to haskell.org?
03:16:16 <hashbrowncipher> akamaus:  I'm wondering much the same thing.  In the meantime, I've added "78.46.100.180   haskell.org" to my hosts file, which is working nicely
03:16:49 <akamaus> did you try whois haskell.org?
03:18:45 <hashbrowncipher> akamus: Yes, it appears that the domain has expired.  I'm seeing that the WHOIS record was updated at 10:12:28 UTC (5:12 EST), meaning the site just went down.  Anyway, I have no inside information, so that's all I really know.
03:19:20 * quicksilver nods
03:19:27 <quicksilver> the domain didn't get renewed yet :(
03:19:34 <quicksilver> I've let various people know.
03:19:42 <akamaus> thats weird
03:19:52 <quicksilver> it is, rather
03:22:18 <Janni> Hello.
03:23:54 <Janni> Some of you might remember. I'm working on that optimisation, that lifts out `constant' parameters out of recursive positions. Look at the definitions of "repeat" and "foldr" in the standard libraries to get the idea of what I'm talking about.
03:24:50 <Janni> I'm taking a bit of a theoretical angle: the primary goal is to minimise the amout of beta-reductions.
03:25:31 <Eelis> in the following sentence, what does "TSO" stand for?  "In GHC 7.0 and earlier, a thread is represented by a TSO object in the heap."
03:25:50 <Janni> But in the end, I'm definitely interested in applying this to functional language implementations.
03:26:21 <Janni> So, I did some (primitive) benchmarking to get a rough picture what the situation is with GHC.
03:26:57 <alpounet> Eelis, Thread State Object
03:27:05 <Eelis> alpounet: thanks
03:27:15 <Janni> I compared the run-time behaviour of the original versions of (++), map, until, lookup, zipWith as given in the standard libraries with these versions:
03:27:15 <alpounet> Eelis, http://hackage.haskell.org/trac/ghc/wiki/Commentary/Rts/Scheduler#Haskellthreads
03:27:34 <Eelis> alpounet: i'll look once they fix the domain, thanks :)
03:27:44 <alpounet> (it works here)
03:27:48 <Eelis> not here.
03:27:59 <alpounet> ok
03:28:00 <Janni> (++) xs ys = let rec (x:xs) = x : rec xs in rec xs             (base case omitted)
03:28:06 <Eelis> i get some Network Solutions page offering to backorder the domain
03:28:19 <Janni> map f = let rec (x:xs) = f x : rec xs in rec
03:28:37 <alpounet> yeah, that won't help you understand TSOs
03:28:44 <Janni> until p f = let rec x = if p x then x else rec (f x) in rec
03:28:59 <Janni> zipWith_eff f = let rec (a:as) (b:bs) = f a b : rec as bs in rec
03:30:05 <Janni> Observation: A speed-up of over 200% for until, but a +10% to -10% change for the other examples.
03:30:29 <Janni> So, I'm curious. What is so special about "until"?
03:30:55 <Janni> Anybody with some insight into GHC's runtime system to be able to give me a hint?
03:31:11 <Janni> (maybe I should be looking at the core code)
03:31:18 * Janni is looking at the core code
03:32:02 <Janni> *sigh* GHC-core is hard to read...
03:35:51 * Janni has given up
03:36:30 <blenderer> Has anyone made any progress on using haskell on the Android platform?
03:39:06 <PaulAJ> Anyone know the IP for hackage.haskell.org?
03:39:30 <sipa> $ dig +short hackage.haskell.org
03:39:30 <sipa> 69.30.63.204
03:39:31 <Janni> It's resolved to 69.30.63.204 for me.
03:39:32 <blenderer> resolving to 69.30.63.204 for me
03:40:19 <blenderer> my answer is the best :)
03:40:29 <PaulAJ> Odd.  Its resolving to 78.46.100.180 for me, same as haskell.org.  
03:40:38 <PaulAJ> I'll add it to my hosts file as well.
03:40:40 <PaulAJ> Tnx
03:41:21 <Janni> blender: Pfff... no punctuation, how is this supposed to be the best answer?
03:41:37 <PaulAJ> Ahh, dumb me.  Thats because I'd tried adding it to /etc/hosts already.
03:41:45 <Janni> +er
03:42:28 <Janni> PaulAJ: Why would you do that? Some kind of trouble?
03:44:51 <quicksilver> yes, haskell.org domain is down
03:44:58 <quicksilver> if it's still working for you that's DNS caching
03:45:14 <malcolmw> Network Solutions has stolen the domain registration from us
03:45:27 <Janni> THEY are trying to take down EVERYTHING. First Wikileaks, now haskell.org!
03:45:42 <quicksilver> morning malcolmw 
03:45:49 <quicksilver> hopefully you got my email ;)
03:46:35 <malcolmw> just seen it, ta
03:46:52 <malcolmw> committee@haskell.org would be the right address to notify
03:47:13 <malcolmw> NS updated the DNS record at 10:12 UTC today
03:47:32 <quicksilver> malcolmw: undoubtedly it would. But not a reliable choice with DNS being down ;)
03:48:05 <malcolmw> ahhh...
03:50:28 <earthy> :)
03:52:39 <dom96> This doesn't look good, :O https://gist.github.com/744823
03:52:59 <pastorn> is there some complementary stuff to Attoparsec for building bytestrings?
03:54:20 <slom> PaulAJ: well i'm not the domain owner ... :( 
03:57:26 <PaulAJ> From my home hackage.haskell.org is giving me the same Network Solutions page as haskell.org.
03:57:56 <PaulAJ> However from my work account hackage.haskell.org is working fine.  Presumably this is just DNS propogation differences.
03:59:18 <PaulAJ> Note: for anyone who hasn't heard, haskell.org expired a couple of hours ago.  Some people may not be seeing this yet.  Apparently people are on the case.
03:59:20 <earthy> as a service: www.haskell.org should point to 78.46.100.180 and hackage.haskell.org to 69.30.63.204
04:00:40 <slom> http://www.networksolutions.com/domain-name-registration/pricing-chart.jsp ... are these prices per month or per year?
04:01:19 <earthy> yearly
04:01:44 <earthy> as stated: All Domain Registration Prices Listed Are Per Year — All Years Are Billed At Time Of Purchase
04:03:45 * hackagebot vcard 0.1.4 - A library for parsing/printing vCards from/to various formats.  http://hackage.haskell.org/package/vcard-0.1.4 (MathieuBoespflug)
04:08:52 <white> erm... does anyone know what's happened to http://haskell.org?
04:09:51 <slom> white: domain expired ...
04:09:55 <malcolmw> the haskell.org domain does not expire for another year.  it was taken over by Network Solutions
04:11:24 <malcolmw> I think they decided they could not contact the owners, so have marked it "pending renewal or deletion"
04:12:04 <malcolmw> despite the fact that we moved the registration to a new provider a few weeks ago
04:12:21 <redd_> @pl \x -> (h (g x)) (k x)
04:12:21 <lambdabot> liftM2 h g k
04:12:39 <white> good grief.
04:14:58 <white> well, hopefully it'll get sorted soon - it's back to paper-based reference materials for the time being,then. And I was just starting to get to grips with things!
04:15:51 <slom> white: www.haskell.org should point to 78.46.100.180 and hackage.haskell.org to 69.30.63.204
04:16:03 <redd_> @pl \x -> h (g (f x)) (k x)
04:16:03 <lambdabot> ap (h . g . f) k
04:16:27 <slom> can't we add the IPs to the topic 
04:17:49 * hackagebot th-lift 0.5.3 - Derive Template Haskell's Lift class for datatypes.  http://hackage.haskell.org/package/th-lift-0.5.3 (MathieuBoespflug)
04:18:22 <white> slom: and with a quick edit of /etc/hosts, that works just fine - thanks very much!
04:28:40 <interferon> is the haskell.org name recoverable?
04:31:32 <blueonyx> cabal: Codec.Compression.Zlib: incorrect header check
04:31:43 <blueonyx> is the same problem?
04:37:00 <mrdk> I'm having an issue with an expected type "IO b": http://hpaste.org/42368 Could someone help out?
04:37:43 <Cale> mrdk: What's the type of tdtach?
04:37:52 <Twey> mrdk: What's the… yeah, that
04:38:03 <mrdk> Cale: tdtach :: [Char] -> [Char] -> [Char]
04:38:13 <Cale> mrdk: So, it doesn't produce an IO action
04:38:18 <Janni> Repeating a summary of my question posed earlier: Why does "until p f = let rec x = if p x then x else rec (f x) in rec" yield a speedup of over 200% compared with "until" as specified in the base libraries, while "map f = let rec (x:xs) = f x : rec xs in rec" does not (+10%/-10% depending on compiler flags and version, rewrite rules are not applied)? What is so special about "until" here (and the other functions that have been optimised like this already: rep
04:38:31 <Cale> mrdk: What do you want the program to do with that string?
04:39:07 <Cale> mrdk: Maybe print or putStrLn?
04:40:03 <mrdk> Cale: tdtach creates a string containg a command like "dtach -A /tmp/foo cmd"
04:40:10 <mrdk> Cale: it does no IO
04:40:28 <Cale> mrdk: Right, so it has no place being a statement in an IO do-block on its own :)
04:40:57 <sipa> the question is: what do you want dtachTerm to do?
04:41:42 <mrdk> sipa: it like an wrapper for running commands inside dtach
04:41:53 <mrdk> finally it runs in a terminal
04:42:56 <mrdk> "term-[number]" will be the window name of the terminal
04:43:20 <Cale> mrdk: So you want something like  System.Cmd.system?
04:44:19 <mrdk> Cale: I just want to "create" the command, not execute it
04:44:35 <mrdk> the function should return a string
04:45:54 <Cale> mrdk: Oh, then you just want return (tdtach ...)
04:47:03 <mrdk> Cale: then it'll be of type "IO [Char]", right?
04:47:11 <Cale> yep
04:47:59 <mrdk> Cale: and how would I be able to "convert" it to [Char] only?
04:48:11 <Cale> mrdk: By running it
04:48:17 <Cale> mrdk: Inside another IO action
04:48:47 <Cale> When you write  v <- x  inside a do-block, it means "run the action x, and call its result v"
04:49:02 <Cale> If  x :: IO t  then  v :: t
04:49:02 <jkff> Hello. I'm writing a library that needs sockets occasionally - should I force the user of my library to do "main = withSocketsDo $ ..." or can I wrap withSocketsDo just around my library's functions that use sockets?
04:50:03 <jkff> I think it's actually a question of whether using it this way would be reentrant and thread-safe - but I don't know whether it is
04:50:11 <mrdk> Cale: oh I see. Now the problem is, that the result of this function is passed to "spawn :: MonadIO m => String -> m ()"
04:51:22 <Cale> jkff: It certainly doesn't matter on anything but Windows...
04:51:36 <jkff> Cale: Yes, but I'd like the library to work on Windows, too.
04:52:11 <jkff> Cale: I looked at the source and I'm not sure it would be safe... Is there some pattern for working around issues like this?
04:52:22 <Cale> jkff: I think you could go either way. Doing anything with the network on Windows requires you to use withSocketsDo. It's probably safe to use it more than once.
04:52:37 <Cale> But I'm not sure if it's efficient.
04:52:59 <jkff> Cale: It doesn't look like it's safe - the implementation seems to use a thread-unsafe boolean flag instead of a thread-safe reference counter
04:53:32 <jkff> Is there a well-known pattern for wrapping the whole program into a "bracket" without modifying "main"?
04:53:39 <Cale> no
04:53:47 <Cale> You just have to make your users do that.
04:53:56 <jkff> Ok then
04:53:57 <Cale> You can force them to do it using the type system
04:54:09 <jkff> Hehe
04:54:10 <kafee> hi, how could I refactor this expression:  [[a,b,c] | a <-[1..s - 2], b<- [1..s -2],c<- [1..s -2],a + b +c == s ] ?
04:54:37 <Cale> > replicateM 3 [1..4]
04:54:38 <lambdabot>   [[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,3,1],[1...
04:55:48 <sipa> @pl \s -> [[a,b,c] | a <-[1..s - 2], b<- [1..s -2],c<- [1..s -2],a + b +c == s ]
04:55:48 <lambdabot> ap ((:) . (([a, b, c] | a) <-) . enumFromTo 1 . subtract 2) (ap ((:) . (b <-) . enumFromTo 1 . subtract 2) (ap ((:) . (c <-) . enumFromTo 1 . subtract 2) (return . (a + b + c ==))))
04:55:49 <Cale> > filter ((== 6) . sum) . replicateM 3 $ [1..4]
04:55:50 <lambdabot>   [[1,1,4],[1,2,3],[1,3,2],[1,4,1],[2,1,3],[2,2,2],[2,3,1],[3,1,2],[3,2,1],[4...
04:57:30 <kafee> sipa: pl stands for what?
04:58:08 <hpc> pointless
04:58:35 <hpc> also, pl doesn't handle comprehensions
04:58:42 <hpc> convert it to do notation first
04:59:01 <Janni> filter ((== 6) . sum) $ combinations $ replicate 3 [1..4]
04:59:09 <sipa> :t combinations
04:59:10 <lambdabot> Not in scope: `combinations'
04:59:12 <Janni> combinations :: [[a]] -> [[a]]
04:59:12 <Janni> combinations xs = combineBy (:) [] xs
04:59:21 <Janni> combineBy :: (b -> a -> a) -> a -> [[b]] -> [a]
04:59:21 <Janni> combineBy f base [      ] = [ base ]
04:59:21 <Janni> combineBy f base (xs:xss) = [ f x y | x <- xs, y <- combineBy f base xss ]
05:00:05 <Janni> combinations [[1,2],[3,4],[5]] = [[1,3,5],[1,4,5],[2,3,5],[2,4,5]]
05:00:36 <kafee> thanks everybody, gotta go
05:00:56 <Janni> (result are all lists with one element from each input list)
05:03:56 <blueonyx> i added 69.30.63.204    hackage.haskell.org to /etc/hosts but still get cabal: Codec.Compression.Zlib: incorrect header check on cabal install
05:06:02 <blueonyx> white: does your cabal work?
05:06:30 <white> blueonyx: I'll just check
05:08:01 * hackagebot hmk 0.9.7.2 - A make alternative based on Plan9's mk.  http://hackage.haskell.org/package/hmk-0.9.7.2 (MathieuBoespflug)
05:09:49 <blueonyx> hackage.haskell.org resolves to 69.30.63.204 but i get 100% packet loss on ping :/
05:10:14 <white> blueonyx: cabal update seems to be freezing on me
05:10:23 <white> blueonyx: so it doesn't look great
05:10:24 <Janni> Same here. Pings are probably blocked.
05:10:54 <hpc> i can visit fine
05:10:56 <blueonyx> everything works on my laptop (probably cached dns) but not on my workstation
05:11:00 <Janni> `cabal update` works fine.
05:11:21 <blueonyx> Janni: with some entry in /etc/hosts for hackage?
05:11:34 <Janni> No, probably what blueonyx said.
05:11:39 <hpc> blueonyx: it's not a DNS problem; my DNS resolves to the same IP
05:11:50 <scree> Random question: do strict arrays for boxed types exist?
05:12:17 <blueonyx> hpc: visiting hackage.haskell.org wants to sell me the domain ;)
05:12:18 <hpc> scree: you can make one, by mapping rwhnf over the array
05:12:37 <white> I can't browse hackage via the web. I'll just make sure I've got that IP right.
05:12:39 <hpc> blueonyx: that's strange
05:12:49 * Janni is wondering if that makes sense: a strict array.
05:13:02 <Janni> Then again, I'm just too inexperienced with this explicit strictness stuff...
05:13:24 <hpc> Janni: i assumed he means an array that is either a huge thunk, or normal form
05:13:32 <scree> hpc: sure; does that have the same performance as a hypothetical strict container?
05:13:33 <hpc> oh derp, not rwhnf, rnf
05:13:40 <Janni> scree: Is it really the datatype that needs to be strict and not the way it is filled?
05:14:00 <white> Wrong IP - my fault. Can browse hackage now. Running cabal update.
05:14:05 <hpc> :t rnf
05:14:06 <lambdabot> forall a. (NFData a) => a -> Done
05:14:58 <scree> Janni: well one could go round putting seqs everywhere you fill an array, but it'd be nice to have a type-level guarantee of strictness
05:15:08 <Janni> I see.
05:15:21 <white> and cabal update worked. Now installing a random package.
05:15:43 <hpc> newtype SArray = SArray Array -- SArray data constructor not exported
05:15:51 <hpc> insert :: Array -> SArray
05:16:06 <quicksilver> hpc: unnecessary rwhnfs are quite expensive, though
05:16:14 <blueonyx> cabal update works but not installing O.o
05:16:17 <white> blueonyx: cabal works fine for me, using an /etc/hosts entry giving 69.30.63.204 for hackage.haskell.org
05:16:19 <hpc> quicksilver: ah, true
05:16:36 <blueonyx> uh
05:16:40 <scree> hpc: right, I know that works, but I don't understand the performance implications
05:17:21 <white> blueonyx: are you still seeing the parked domain site when you go to hackage in a browser?
05:17:35 <blueonyx> cabal install cabal-install worked but not cabal install zip-archive :(
05:17:43 <blueonyx> white: no
05:18:01 --- mode: ChanServ set +o quicksilver
05:18:09 --- topic: set to '["haskell.org down; we're on the case; http://hpaste.org/42369/haskellorg_ips","GHC 7 is out: http://is.gd/hb8vE", "Haskell Platform 2010.2: http://is.gd/dCGPn", "Haskell 2010 is out: http://is.gd/iTnkV", "Haskell News: http://reddit.com/r/haskell", "The Haskell programming language http://haskell.org", "Paste: http://hpaste.org", "Logs: http://tunes.org/~nef/logs/haskell/"]' by quicksilver
05:18:14 <white> blueonyx: hm... everything should work then! (Sorry, I know that's not helpful)
05:18:30 <white> blueonyx: I'll try installing that same package
05:19:27 <hpc> quicksilver: "down for some"
05:19:41 * hpc can still visit it, without browser cache or any silliness like that
05:19:43 <quicksilver> well, the DNS really is down.
05:19:45 <white> blueonyx: it's downloaded, now it's compiling.. all done!
05:19:53 <quicksilver> you or your ISP may have cached the DNS
05:20:01 <quicksilver> (which is proper and correct behaviour)
05:20:06 <hpc> ah, k
05:20:28 <quicksilver> stable domains normally have TTLs of a day or more
05:21:01 <white> blueonyx: not sure what to suggest, since I can't reproduce your error - sorry..
05:21:17 --- mode: quicksilver set -o quicksilver
05:22:37 <blueonyx> anyone else knows what to do? http://hpaste.org/42370/failing_cabal_install_ziparch
05:23:46 <quicksilver> pastorn had that error earlier today
05:23:55 <quicksilver> although he didn't say what package he was trying to install
05:24:41 <quicksilver> it used to be a bug you could get if you had a web proxy which transparently decompressed 
05:24:46 <quicksilver> but that was supposed to be fixed...
05:26:00 <blueonyx> when i download the .tar.gz from the website, how to install it?
05:26:23 <quicksilver> unpack it manually, change directory into it
05:26:33 <quicksilver> and then run "cabal install"
05:26:36 <blueonyx> ah kthx
05:27:17 <blueonyx> same error -.-
05:29:31 <blueonyx> ah had to remove the wrong binary package in .cabal
05:40:18 <nominolo> blueonyx: it's usually a 32bit vs 64bit C library mismatch
05:40:32 <pastorn> quicksilver: haha, no, my mistake was using GZip when i should've been using ZLib
05:41:04 <quicksilver> ah :)
05:41:20 <pastorn> quicksilver: fixed that, managed to extract some data: http://users.mkeyd.net/~alexander/proper_worldmap.png
05:41:34 <quicksilver> cool
05:42:08 <nominolo> blueonyx: are you on a mac?
05:42:14 <pastorn> quicksilver: recognize it?
05:44:11 <hpc> wow, that image is going to bug me the whole day
05:44:15 <hpc> trying to figure out where that is
05:44:25 <hpc> well done, sir
05:44:26 <pastorn> hpc: what? mine?
05:44:31 <hpc> indeed
05:44:48 <pastorn> hpc: another clue: http://users.mkeyd.net/~alexander/indexed_stuff.png
05:45:41 * pastorn has writter 300 lines of loaders to get to this
05:45:50 <quicksilver> pastorn: well, I remember what you said you were doing ;)
05:45:54 <quicksilver> pastorn: but I won't spoil it for hpc.
05:45:55 <hpc> oh i see lol
05:46:06 <pastorn> hpc: released in 1999
05:46:19 * hpc facepalms
05:46:39 <pastorn> there's a linux version...
05:46:49 <pastorn> and a cancelled dreamcast version...
05:46:57 <hpc> crap, i know the name of this game
05:47:15 <pastorn> let me fuck with you some more, don't figure it out...
05:47:25 <hpc> it's not Civilization
05:48:38 <hpc> aha, total annihilation
05:48:56 <hpc> no, that's 1998
05:49:16 <pastorn> http://users.mkeyd.net/~alexander/SECRET.mp3 <-- i don't think it has any tags, but don't try to cheat now!
05:49:33 <pastorn> mplayer doesn't give me any tags at least
05:49:36 <hpc> that link is 403
05:49:46 <pastorn> 2 sec
05:50:08 <pastorn> not anymore it's not!
05:52:19 <blueonyx> nominolo: no, i think cabal downloaded the package from the domain parking page and it wasnt a tar.gz ;)
05:52:42 <pastorn> hpc: http://users.mkeyd.net/~alexander/TOPSECRET.mp3
05:53:08 <pastorn> btw, how do i play sound/mp3s in haskell?
05:53:10 <hpc> axis and allies?
05:53:14 <pastorn> hpc: nope
05:53:42 <pastorn> i need to play mp3s and i need some control over it, volume,stopping and pausing tracks etc.
05:54:32 <hpc> http://www.haskell.org/haskellwiki/Applications_and_libraries/Music_and_sound
05:54:43 <pastorn> how convenient!
05:54:44 <hpc> hmp3 should be good code to look at
05:54:47 <quicksilver> pastorn: last time I did it I used mplayer's control interface.
05:54:57 <quicksilver> I'm not sure that's a sensible way, but it worked
05:54:58 <pastorn> quicksilver: hehe, nice
05:55:03 <quicksilver> s/last time/the only time/
05:55:17 <pastorn> how did you do that? did you send simulated 'keypresses'?
05:55:22 <quicksilver> hmp3 just shells out to mpg123 AFAIK
05:55:35 <ikeg> How about appending 'darcs.haskell.org' to the IPs list?
05:55:37 <quicksilver> pastorn: no, mplayer has a specific mode designed for contorl by another process
05:55:52 <quicksilver> pastorn: with a simple text protocol
05:56:20 <pastorn> quicksilver: cool, i could just fork off a thread with a chan issuing commands :)
05:56:28 <ikeg> darcs.haskell.org seems to hackage.haskell.org
05:56:28 <quicksilver> pastorn: yes, that's what I did :)
05:56:33 <quicksilver> ikeg: yes, it is
05:56:39 <pastorn> quicksilver: you still have that code?
05:56:46 <PHO_> I'm planning on making some media streaming framework like GStreamer but have no actual implementation yet :(
05:56:47 <ikeg> http://hpaste.org/42372/haskellorg_ips_revised
05:57:50 <ikeg> i wish it helps
05:59:28 <paolino> hi, 78.46.100.180 is not responding with the haskell.org home
05:59:29 <pastorn> hpc: tell me when you want to be put out of your misery
05:59:47 <hpc> yeah, i think now would be good :P
06:00:09 <quicksilver> pastorn: http://hpaste.org/42373/mplayer_remote_control
06:00:11 <pastorn> hpc: Heroes of Might & Magic 3
06:00:20 <hpc> argh!
06:00:30 <pastorn> quicksilver: lolz, /Applications/MPlayer\\ OSX.app/
06:00:30 * hpc would never have thought of it
06:00:32 <quicksilver> pastorn: no idea what that code means any more :)
06:00:38 <pastorn> mac - CAN NOT USE!
06:00:57 <quicksilver> well that should be the only part that's mac specific
06:01:01 <quicksilver> (the path to the executable)
06:01:25 <quicksilver> HOMM3 was the only game I ever bought for linux, I suspect.
06:01:25 <pastorn> quicksilver: well, this should be pretty awesome... i'll play with it some later :)
06:01:43 <pastorn> quicksilver: does it work with modern OSs?
06:01:52 <quicksilver> not tried it recently.
06:02:00 <quicksilver> mind you I don't upgrade my linux machine very often either
06:02:32 <paolino> quicksilver: can you paste the right ips, 78.46.100.180 seems wrong
06:02:51 <hpc> no, it's right
06:03:35 <paolino> so the site is broken, not only a dns problem
06:03:35 <earthy> however, you have to explicitly request http://www.haskell.org/ at that IP address
06:04:04 <paolino> ah
06:04:09 <malcolmw> if you set your /etc/hosts with 78.46.100.180 www.haskell.org, it will work.  But you cannot use http:/78.46.100.180/
06:04:18 <earthy> nope, the site is fine. however, the url http://78.46.100.180/haskellwiki/Haskell is not being served from that server :)
06:04:59 <romildo> @pl \(k,_)  -> k == "ok"
06:04:59 <lambdabot> ("ok" ==) . fst
06:05:01 <malcolmw> I tried to set the apache configuration to serve haskell.org from the numeric IP address, but failed
06:05:32 <hpc> oh right, virtual hosting
06:05:42 * hpc was very confused for a moment there
06:06:20 <Veinor> it'll be better when we have ipv6!
06:06:25 <hpc> verily
06:06:49 <hpc> i like how close to the wire ISPs are cutting it, with their ipv6 support
06:07:27 <paolino> thanks malcolmw, the /etc/hosts setting works, should be put in the title of this room
06:07:44 <quicksilver> well, my paste is deliberately formatted like a hosts file
06:07:53 <quicksilver> I assumed people who knew what a hosts file was would do the right thing :)
06:08:09 <paolino> :-)
06:08:22 <PHO_> yeah, I just pasted it to the /etc/hosts and it worked well.
06:08:26 <hpc> rofl: http://features.techworld.com/networking/3222451/beware-the-black-market-for-ipv4-addresses/
06:26:39 <pastorn> is there much overhead on opnening and closing files?
06:27:29 <pastorn> i'm opening a Handle for a giant file (101 MB), then i use hSeek to get to where i need, read a lazy ByteString and then close the handle
06:28:27 <pastorn> i'll do this 4908 consecutive times
06:28:35 <Peaker> pastorn, If you lazy I/O-read that, you're not going to like what happens if you first evaluate the ByteString after closing the file (bah @ lazy IO)
06:29:22 * hackagebot blaze-builder 0.2.1.2 - Efficient buffered output.  http://hackage.haskell.org/package/blaze-builder-0.2.1.2 (SimonMeier)
06:29:37 <pastorn> i switched from strict because otherwise disk access killed all my testing attempts
06:30:25 <pastorn> does strict bytestring readFile just do mmap?
06:32:26 <quicksilver> no
06:32:38 <quicksilver> there is or was a bytestring-mmap lying around somewhere though.
06:32:46 <pastorn> ok
06:34:18 <CosmicRay> who here manages haskell.org?  it has apparently expired and is pending deletion 
06:35:17 <medfly> :S
06:35:27 <blueonyx> xD
06:35:27 <medfly> CosmicRay, works fine for me... strange
06:35:33 <CosmicRay> whois haskell.org
06:35:40 <CosmicRay> it may be, but won't for long
06:35:42 <blueonyx> @topic
06:35:42 <lambdabot> Maybe you meant: topic-cons topic-init topic-null topic-snoc topic-tail topic-tell join oeis todo type
06:35:55 <blueonyx> @topic-tell CosmicRay 
06:35:55 <lambdabot> Do not know that channel
06:36:05 <flux> for me, haskell.org has link to "php programming"
06:36:14 <medfly> oh, weird...
06:36:21 <flux> dns caching doing its magic
06:36:39 <medfly> lol, 78.46.100.180 has an apache2 index page saying "It works!" :-D
06:36:47 <medfly> which is what I get if I dns haskell.org
06:36:52 <quicksilver> CosmicRay: apparently network solutions stole it.
06:37:06 <flux> medfly, virtualhosts spoil those kinds of links
06:37:06 <CosmicRay> someone may yet  be able to save it
06:37:08 <quicksilver> you can add IP address to your hosts file in the mean time
06:37:18 <quicksilver> CosmicRay: yes, probably. People have been informed.
06:37:26 <CosmicRay> the right people?
06:37:28 <quicksilver> CosmicRay: malcolmw sounded quite angry.
06:37:31 <medfly> flux, what?
06:37:32 <quicksilver> I think so, yes.
06:37:47 <quicksilver> (see /topic for paste with ips for hosts file)
06:37:54 <flux> medfly, if you request an url that has an IP, it can return a different result from an url that has the same ip as a number
06:37:58 <flux> uh, as a name of course
06:38:04 <medfly> ah
06:38:07 <quicksilver> right
06:38:13 <quicksilver> which is why the hosts file is a good workaround
06:38:21 <flux> most likely in this situation the default configuration hasn't been touched, only the virtual host has been configured properly
06:38:32 <Cale> haskell.org still works fine for me
06:38:55 <FauxFaux> Resolves to 209.62.105.19 for me.
06:39:01 <quicksilver> Cale: the TTLs were quite long, large parts of the internet will cache them for quite some time yet.
06:40:11 <medfly> how'd they steal the domain? it expired and ppl are just waiting for domains about to expire?
06:40:35 <quicksilver> no, it didn't expire
06:40:41 <quicksilver> we're not sure what happens
06:40:55 <quicksilver> it seems like they decided they couldn't contact the owners and claimed it back
06:41:05 <quicksilver> which is odd, because it had been moved to another registrar
06:41:11 <quicksilver> (or so I have been told)
06:41:59 <malcolmw> apparently the DNS records had been moved, but not the registration itself
06:42:33 <quicksilver> ah.
06:48:33 <ikeg> i miss the IP of 'code.haskell.org'
06:49:58 <quicksilver> don't know. malcolmw ?
06:50:32 <malcolmw> 72.249.126.23
06:50:46 <ikeg> thanks
06:51:58 <romildo> @pl \x -> (show x, x)
06:51:58 <lambdabot> (,) =<< show
06:52:02 <quicksilver> added to the paste
06:52:51 <Peaker> Doing a "drop" on a strict/lazy ByteString doesn't copy anything right?
06:53:07 <Peaker> Though I'd hope it would be capable of GC'ing unused parts of the array, but unlikely, right?
06:53:59 <quicksilver> on a strict, nothing can get GCed until it all is.
06:54:12 <quicksilver> on a lazy one, unused head chunks can be
06:54:21 <quicksilver> but unused tail chunks cannot (just like a list)
06:56:44 <int-e> Peaker: minor detail: if you drop everything, you'll get back a different, empty bytestring.
06:56:46 <ikeg> for Hugs, it helps us to know the IP of 'cvs.haskell.org'
06:56:56 <ikeg> I guess it is enough then
06:57:29 * hackagebot epic 0.1.8 - Compiler for a simple functional language  http://hackage.haskell.org/package/epic-0.1.8 (EdwinBrady)
06:58:01 <ikeg> some links are missing : http://www.haskell.org/hugs/
07:00:30 * hackagebot atuin 0.1.1 - Embedded Turtle language compiler in Haskell, with Epic output  http://hackage.haskell.org/package/atuin-0.1.1 (EdwinBrady)
07:01:08 <Peaker> quicksilver, int-e: Thanks. At least it's not copied
07:01:26 <quicksilver> yes. You can force a copy if you want the old one to be GCed
07:02:04 <quicksilver> copy :: ByteString -> ByteString
07:04:20 <ikeg> resolved : cvs.haskell.org 69.30.63.204
07:06:17 <quicksilver> ikeg: anottated again :)
07:06:45 <roconnor> If an egg is laid by an unmated female, it hatches a male or drone bee.  If, however, an egg was fertilized by a male, it hatches a female.
07:06:51 <roconnor> -- http://en.wikipedia.org/wiki/Fibonacci_number
07:10:01 <brisbin> might someone (perhaps familiar with xmonad) offer some insight on this? https://gist.github.com/745061
07:13:38 <frustrated> Is there any other website where I can get the Alex documentation?
07:14:08 <Bynbo7> I have documentation? :O
07:15:58 <frustrated> could you sent them to me?
07:18:35 * hackagebot timeplot 0.2.11 - A tool for visualizing time series from log files.  http://hackage.haskell.org/package/timeplot-0.2.11 (EugeneKirpichov)
07:39:56 <ikeg> annotated
07:41:15 <ikeg> I see three IP addresses are needed : http://www.haskell.org/haskellwiki/Haskell.org_domain
07:50:14 <copumpkin> preflex: seen ezyang 
07:50:14 <preflex>  ezyang was last seen on #haskell-blah 1 day, 16 hours, 19 minutes and 30 seconds ago, saying: dun worry, I mix all the time too. 
07:50:24 <Peaker> Anyone here heard of augustuss's work (at least I think it's his): BlueSpec?
07:53:23 <ezyang> yo 
07:53:23 <lambdabot> ezyang: You have 2 new messages. '/msg lambdabot @messages' to read them.
07:53:41 <ezyang> @messages 
07:53:41 <lambdabot> lispy said 1d 14h 57m 27s ago: if you are learning Isabelle you might enjoy #isabelle here on freenode and there is a subreddit too (http://reddit.com/r/isabelle)
07:53:41 <lambdabot> copumpkin asked 1d 1h 12m 14s ago: do you have a version of hoopl that works on GHC 7?
07:53:55 <ezyang> copumpkin: yes. 
07:53:58 <copumpkin> mmm
07:54:08 <copumpkin> any chance you could put it somewhere and/or push to the original repo? :) :)
07:54:15 <copumpkin> not sure if you have access to that though
07:54:17 <ezyang> @seen lispy 
07:54:17 <lambdabot> Unknown command, try @list
07:54:18 <preflex>  lispy was last seen on #darcs 14 hours, 7 minutes and 7 seconds ago, saying: have a nice evening!
07:54:39 <ezyang> @tell lispy Oh cool, I didn't know about the subreddit. Subbed. 
07:54:39 <lambdabot> Consider it noted.
07:54:43 <quicksilver> Peaker: heard of, but not looked at closely. (Yes, it was augustss)
07:55:07 <ezyang> copumpkin: Sure. I'm not on my compy that has it, so it'll have to be later today. 
07:55:13 <Peaker> quicksilver, My girlfriend is doing hardware design with lower-level HDL's and we're interestingly looking at it, it looks good but I wonder if it's mature
07:55:15 <copumpkin> thanks!
07:55:28 <copumpkin> ezyang: how do you like it by the way? I haven't actually found anyone who's used it yet
07:55:38 <copumpkin> I've followed through the example code a bit and like the look of it
07:55:48 <quicksilver> GHC uses it, doesn't it?
07:55:52 <quicksilver> Peaker: email him ;)
07:55:58 <copumpkin> there are definitely parts of it in GHC as of 7 now
07:56:16 <copumpkin> not sure how it's used, but I was looking for a smaller use case :P
07:56:21 <ezyang> copumpkin: GHC's new codegen uses it. 
07:56:21 <copumpkin> since mine isn't going to be a full-blown compiler
07:56:26 <copumpkin> ah
07:56:34 <ezyang> I was just doing MonoLocalBinds fixing, I haven't actually used it as a user :-) 
07:56:52 <copumpkin> ah ok
07:57:03 <aristid> what does "we're on the case" mean wrt haskell.org? are they renewing it?
07:57:18 <ezyang> I assume this means contacting the registrar and sorting out the confusion. 
07:57:53 <copumpkin> omg speak of the devil, it's augustss 
07:58:04 <augustss> Yes?
07:58:30 <quicksilver> augustss: Peaker was asking about bluespec
07:58:35 <Peaker> augustss, I was just asking guys about BlueSpec and if you were behind it :)
07:58:59 <quicksilver> aristid: it is, apparently, not actually expired
07:59:04 <augustss> I am partly to blame, yes. :)
07:59:14 <Peaker> augustss, it seems pretty cool, and my girlfriend who's doing HDL work is interested, but the website - like many commercial sites, puts a lot of information behind "give us information so our sales people contact you"
07:59:31 <Peaker> augustss, I was wondering if I could hear some from the main guy behind it :)
07:59:46 <roconnor> High-density lipoprotein (HDL)?
07:59:56 <copumpkin> ezyang: alright, thanks :)
08:00:16 <copumpkin> ezyang: when you coming back to boston by the way?
08:00:32 <augustss> Peaker: I'm not sure there's anything short I can say except, use it. 
08:00:34 <quicksilver> aristid: but somehow confused. MalcolmW is, I think, trying to find out what needs to be done to fix it.
08:01:25 <Itkovian> euh
08:01:30 <Itkovian> wassup with http://www.haskell.org/haskellwiki/
08:01:48 <CurtisAndFire> looks like the domain expired today http://www.haskell.org/
08:01:52 <Peaker> augustss, Well, an honest recommendation is good too :)
08:01:53 <CurtisAndFire> and they forgot to renew it
08:01:58 <Itkovian> Clearly
08:02:28 <Peaker> augustss, The HDL's do seem awfully low-level, it was so weird to me that so many engineers just use them without wrapping them in higher level languages...
08:03:00 <maurer_> Whoever owns the haskell.org should probably renew...
08:03:09 <maurer_> Oh, I see other people have already mentioned this.
08:03:09 <malcolmw> it has not expired
08:03:17 <Peaker> augustss_, The HDL's do seem awfully low-level, it was so weird to me that so many engineers just use them without wrapping them in higher level languages...
08:03:41 <CurtisAndFire> malcolmw: it has expired. the dns entries however have not yet been propagated everywhere
08:03:52 <augustss_> Peaker: Many distrust high level languages. 
08:04:23 <malcolmw> CurtisAndFire: nslookup tells me Expiration Date:11-Dec-2011 05:00:00 UTC
08:04:58 <Itkovian> malcolmw: I am not getting the expected page ...
08:05:11 <augustss_> malcolmw: Looking at the entry it looks like it expired on the 11th and NS renewed and reassigned. 
08:05:52 <xcthulhu> Peaker:  Xilinx doesn't really only supports VHDL and Verilog for it's FPGA compilers, and many engineers find developing for Xilinx boards difficult without the proprietary IDE
08:06:27 <augustss> Peaker: Bluespec has beautiful Haskell syntax in addition to the system vetoing syntax. 
08:06:30 <xcthulhu>  /doesn't really/really/
08:06:36 <Eduard_Munteanu> The state of openness in the FPGA world is sucky.
08:06:48 <xcthulhu> Eduard_Munteanu, yup
08:07:08 <xcthulhu> Hopefully stuff like the Armadeus will open it up
08:07:40 <xcthulhu> Hey, I need to do Haskell development today and Haskell.org is down.  Any advice about a work around?
08:07:49 <Eduard_Munteanu> See /topic
08:07:56 <Eduard_Munteanu> There's a workaround.
08:09:23 <ker2x> friendly greetings !
08:09:49 <Eduard_Munteanu> o/
08:09:50 <xcthulhu> Eduard_Munteanu, Thanks
08:11:04 <monochrom> oh heh, the topic again
08:11:59 <CurtisAndFire> what are you doing with FPGAs (just curious)?
08:12:33 <ker2x> i'm trying to learn haskell (again), and i have a little question. i want to produce a list of list that look like this : [ [1,1],[1,2],[1,3], [2,1],[2,2],[2,3], [3,1],[3,2],[3,3] ] i think i saw how to do that somewhere, but i can't find it anymore. can you tell me please ?
08:13:13 <sipa> > [ [x,y] | x <- [1..3], y <- [1..3] ]
08:13:14 <lambdabot>   [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]
08:13:20 <unkanon> > [[x,y] | x [1..
08:13:20 <lambdabot>   <no location info>: parse error (possibly incorrect indentation)
08:13:23 <unkanon> too slow :)
08:13:29 <xcthulhu> > sequence [[1,2,3],[1,2,3]]
08:13:30 <lambdabot>   [[1,1],[1,2],[1,3],[2,1],[2,2],[2,3],[3,1],[3,2],[3,3]]
08:13:38 <sipa> xcthulhu wins
08:13:41 <xcthulhu> But you should use do
08:13:46 <xcthulhu> if you are just starting
08:13:47 <unkanon> flawless victory
08:14:06 <unkanon> @src sequence
08:14:06 <lambdabot> sequence []     = return []
08:14:06 <lambdabot> sequence (x:xs) = do v <- x; vs <- sequence xs; return (v:vs)
08:14:06 <lambdabot> --OR
08:14:06 <lambdabot> sequence xs = foldr (liftM2 (:)) (return []) xs
08:14:20 <ker2x> ha, sequence ! thank you. (i knew i could use list comprehension, but  was pretty sure there was a function somewhere :)
08:14:59 <unkanon> also hoogle could probably help if you looked  for something like [[a]] -> [[a]] maybe
08:15:14 <ker2x> hoogle ?
08:15:26 <unkanon> @hoogle [[a]] -> [[a]]
08:15:26 <lambdabot> Data.List transpose :: [[a]] -> [[a]]
08:15:26 <lambdabot> Prelude sequence :: Monad m => [m a] -> m [a]
08:15:26 <lambdabot> Control.Monad sequence :: Monad m => [m a] -> m [a]
08:15:32 <ker2x> hoo, nice
08:15:34 <unkanon> see, it found sequence as its second result
08:15:38 <ker2x> bookmarked :)
08:15:38 <xcthulhu> ker2x, If you want to use hoogle today you'll have to hack your /etc/hosts file (DNS is down): http://hpaste.org/42369/haskellorg_ips
08:15:56 <ker2x> it worked
08:16:03 <Bynbo7> :t (:).(:[])
08:16:04 * xcthulhu is jealous
08:16:04 <lambdabot> forall a. a -> [[a]] -> [[a]]
08:16:11 <xcthulhu> ker2x, Europe?
08:16:18 <Bynbo7> :t flip (:).(:[])
08:16:19 <lambdabot> forall a. a -> a -> [a]
08:16:27 <ker2x> yep, but using 8.8.8.8 as dns
08:16:44 <Bynbo7> flip, the robot, who sits on monkeys
08:20:10 <ker2x> sequence [[1..10],[1..10]] 
08:20:17 <ker2x> just as expected \o/
08:34:28 <the_dude_q> Hey what's the usual way to sort a list in reverse?
08:35:10 <Bynbo7> reverse . sort?
08:35:12 <roconnor> @type sortBy (flip comapring)
08:35:13 <lambdabot> Not in scope: `comapring'
08:35:18 <roconnor> @type sortBy (flip comparing)
08:35:19 <lambdabot>     Occurs check: cannot construct the infinite type: a = a -> a1
08:35:19 <lambdabot>     Probable cause: `comparing' is applied to too few arguments
08:35:19 <lambdabot>     In the first argument of `flip', namely `comparing'
08:35:25 <roconnor> damn
08:35:26 <the_dude_q> reverse . sort ?
08:35:28 <roconnor> @type sortBy (flip compare)
08:35:29 <lambdabot> forall a. (Ord a) => [a] -> [a]
08:35:33 <the_dude_q> what does the period do?
08:35:46 <Bynbo7> > reverse . sort $ [1,5,2,6,43,7,9,4,3]
08:35:47 <lambdabot>   [43,9,7,6,5,4,3,2,1]
08:35:55 <roconnor> @type sortBy (flip compare) [1,5,2,6,43,7,9,4,3]
08:35:56 <lambdabot> forall a. (Ord a, Num a) => [a]
08:36:00 <roconnor> > sortBy (flip compare) [1,5,2,6,43,7,9,4,3]
08:36:01 <lambdabot>   [43,9,7,6,5,4,3,2,1]
08:36:20 <djahandarie> I'm pretty sure reverse . sort will do an extra linear pass
08:36:36 <Phantom_Hoover> Out of curiosity, why isn't Monad defined such that a monad must also be an instance of Functor?
08:36:45 <djahandarie> Could be wrong, would need to check the RULES
08:37:09 <Bynbo7> i believe it will. sortBy (flip compare) is much better
08:37:37 <ker2x> hum... "data"  isn't working in ghci or i'm doing something wrong ?
08:37:38 <roconnor> Phantom_Hoover: I don't know
08:37:51 <roconnor> Phantom_Hoover: the only excuses I can think of are lame.
08:37:53 <djahandarie> No one knows!
08:38:38 <Bynbo7> Functor came about after monad didn't it?
08:38:44 <Bynbo7> Monad*
08:38:46 <amindfv> I've never been able to ude "data" in ghci
08:38:50 <amindfv> *use
08:39:03 <Phantom_Hoover> amindfv, why? It's pretty simple...
08:39:11 <ker2x> amindfv: ok thank you :)
08:39:17 <Bynbo7> you can't use data in ghci
08:39:24 <ker2x> Bynbo7: thx
08:39:52 <ker2x> that explain my suntax error :)
08:39:53 <amindfv> Phantom_Hoover: it's possible to use "data" in ghci?
08:39:55 <ker2x> syntax
08:40:10 <sipa> amindfv: you do your data declarations in a .hs file
08:40:12 <sipa> and load that file
08:40:50 <amindfv> sipa: right, I've used that as a workaround
08:41:42 <roconnor> I should learn about Kan extensions
08:43:32 <MasseR> I have trouble with parsec and getArgs. If I try parse scandic letters and the input is from getArgs, the output characters are wrong. On the other hand with the same parser, and the same input within the file, everything works
08:43:39 <MasseR> http://hpaste.org/42383/parsec_behaviour
08:44:00 <MasseR> If I try to "./ptest äää" I get the following output:
08:44:01 <MasseR> Ã¤Ã¤Ã¤
08:44:01 <MasseR> äää
08:45:04 <ker2x> see you later, have fun !
08:46:26 <xcthulhu> MasseR, Seems like a UTF-8 problem.
08:46:43 <MasseR> Yep, my thoughts exactly. But the file is utf-8 and my terminal is utf-8
08:46:44 <xcthulhu> Maybe this helps? http://hackage.haskell.org/packages/archive/utf8-string/0.3/doc/html/Data-ByteString-UTF8.html
08:47:11 <MasseR> haskell.org domain is down
08:47:57 <wlangstroth> for the hackage-addicted among us, it's a travesty
08:47:59 <xcthulhu> MasseR, Workaround for that problem: http://hpaste.org/paste/42369/haskellorg_ips#p42382
08:48:10 <xcthulhu> (add to /etc/hosts )
08:49:00 <MasseR> I tried also with getLine which works too. Only the getArgs seems to mangle the unicode
08:49:12 <xcthulhu> ... :(
08:49:52 <xcthulhu> MasseR, grr... I have to go eat breakfast.  I wish I could hang out and debug your problem... bbl?
08:50:05 <MasseR> No worries, I need to go soon too
08:50:49 <monochrom> it is a problem with getArgs
08:51:14 <Nakilon> hi guys, excuse me, but http://78.46.100.180/ghc/download doesn't work - where i can view list of available download options and download ghc?
08:51:19 <monochrom> most of the System.Blah modules simply assume ascii
08:52:22 <monochrom> Yesterday we also found System.Cmd.system doing wrong things. It seems systematic. (pun!)
08:52:54 <Saizan> Nakilon: if you put "78.46.100.180 haskell.org" (without quotes) in your /etc/hosts it works
08:53:14 <unkanon> ba-dum-chish
08:57:00 <Nakilon> Saizan, thanks, it works
08:57:25 <MasseR> monochrom: Is there a workaround?
08:59:29 <monochrom> some function in utf8-string can correct it
09:02:52 <outsid3r> there is any procedural language that has function overloading?
09:03:17 <monochrom> Ada
09:03:38 <outsid3r> ada is non-oop?
09:03:53 <monochrom> define oop
09:04:24 <monochrom> I seem to recall that even Haskell satisfies Stroustrup's definition of oop. :)
09:04:25 <Eduard_Munteanu> Presumably he means ad-hoc function overloading, unrelated to classes.
09:04:27 <outsid3r> you can have constructs like objects, inheritance, polymorphism, etc
09:04:34 <outsid3r> Eduard_Munteanu: yea
09:06:01 <monochrom> Even C++ function overloading does not require classes.
09:06:28 <Bynbo7> Ada does have OOP
09:06:31 <monochrom> Haskell 98 has objects, inheritance, polymorphism.
09:07:06 <outsid3r> monochrom: i know, but i mean a pure procedural language that implements overloading
09:07:16 <monochrom> f = (\x -> x)  -- object
09:07:37 <djahandarie> Haskell supports more object-oriented programming than most OOP languages
09:07:37 <Bynbo7> haskell implements overloading with classes
09:07:38 <monochrom> class Eq a => Ord a where -- inheritance
09:07:47 <monochrom> f :: a -> a -- polymorphism
09:07:54 <djahandarie> Though you need some extensions to get all the neat stuff
09:08:28 <Twey> monochrom: Not really inheritance because you don't get the features of the superclass automatically
09:08:40 <Eduard_Munteanu> Haskell actually supports ad-hoc dispatch so yeah that covers more than usual OOP languages.
09:08:45 <djahandarie> (Like implicitly polymorphic classes, multiple inheritance, co-variant args, etc)
09:09:38 <Eduard_Munteanu> Then again, I've seen lots of code do that in C, even using vtables.
09:10:21 <Eduard_Munteanu> Even in actual production code, e.g. see Wine.
09:10:39 <quicksilver> sure. gtk has a C object system
09:10:50 <quicksilver> better than C++'s in some respects, although verbose in use.
09:10:57 <Eduard_Munteanu> Though type-safety isn't that easy to achieve.
09:11:18 <monochrom> Ada function overloading probably doesn't use its OOP side either.
09:11:44 <monochrom> Check Modula-3. It is not OOP, but I forgot whether it overloads.
09:12:58 <Eduard_Munteanu> BTW, where do I find your definition of covariance/contravariance? I see it in TAPL, but it only relates to typing rules.
09:13:15 <quicksilver> modula-3 has some object support, although I think it's not the focus of the language.
09:23:08 <augustss> Original Ada had overloading and no OOP. 
09:24:27 <xcthulhu> Eduard_Munteanu, I'm not sure this is what you want, but in category theory, a functor F is covariant if and only if fmap :: a -> b -> F a -> F b
09:24:41 <xcthulhu> and a functor F is contravariant if and only if fmap :: a -> b -> F b -> F a
09:24:54 <xcthulhu> (ie, contravariant flips the direction of arrows)
09:26:29 <augustss> And for OO it flips the direction if the subtype relation. 
09:27:26 <xcthulhu> augustss, Hmm... I think in a OO category, the "subtype" relation is the arrows
09:27:58 <xcthulhu> Since that relation forms a poset
09:28:26 <xcthulhu> erm, partial order rather
09:28:36 * xcthulhu sips coffee
09:28:37 <augustss> I wouldn't count on anything in OO having a firm theoretical foundation. :)
09:30:26 <xcthulhu> Hehe, by the same token, I wouldn't count on anything from category theory having much bearing on reality.  ;-)
09:31:44 <monochrom> pushout resolves the multiple inheritance debate.
09:32:37 <monochrom> I wouldn't count on coders admitting category solutions to their oh so real problems.
09:36:32 <Eduard_Munteanu> xcthulhu, augustss: thanks. I've seen those terms used in varying contexts.
09:37:29 <xcthulhu> Eduard_Munteanu, I wish I knew a good category book geared towards Haskell hackers
09:38:03 <xcthulhu> I can give you lots of crazy references if you like pure math...
09:38:15 <Eduard_Munteanu> Hm, I'm not sure there is. But I already have Awodey's book.
09:38:51 <mdgeorge1> hello
09:39:08 <mdgeorge1> can anyone recommend any computational geometry libraries for haskell?
09:39:31 <mdgeorge1> it seems the ideal language for writing them, but I haven't really found anything
09:40:19 <bartavelle> can I define a Data.Map so that the data is a function of the key, and thus have a way to cache function results ?
09:40:33 <bartavelle> (or something like that, but I'd need random access based on a key)
09:40:40 <bitstream0101> Would someone that knows a bit about type families take a peek at this problem I'm having? I'm not understanding the error I'm getting. http://hpaste.org/42385/type_families_and_class_constr
09:42:27 <mdgeorge1> bartavelle: I'm a bit new to this, but my guess is that you want some kind of memoizing monad that carries your map along with the computation
09:42:45 <bartavelle> but I'm afraid of monads
09:42:49 <mdgeorge1> and then to apply, you would look up the function/parameters in the map and only evaluate it if they aren't
09:43:11 <bartavelle> I don't want to carry the map along because I wish this to be parrallel
09:43:21 <bartavelle> that's why I'm trying to find a way to have the runtime do it for me
09:43:32 <Jesin> umm
09:43:35 <mdgeorge1> bartavelle: that's only because monads are called monads instead of "warm fuzzy things"
09:43:36 <Jesin> what happened to haskell.org ?
09:43:49 <bitstream0101> Jesin: I was *just* wondering the same thing
09:43:52 <bartavelle> domain name registration expired
09:44:05 <Eduard_Munteanu> Why not a Data.Set? You can ask for membership, then use a function on the key to compute the associated data.
09:44:06 <jmcarthur> you don't need a monad to do memoization
09:44:09 <Jesin> someone will fix this soon?
09:44:13 <Eduard_Munteanu> Jesin, bitstream0101: see /topic
09:44:19 <Eduard_Munteanu> for a workaround
09:44:23 <bartavelle> i'll look at data.set
09:44:26 <jmcarthur> bartavelle: tries make good data structures for what you asked for
09:44:42 <bitstream0101> Eduard_Munteanu: thanks :)
09:44:55 <malcolmw> haskell.org DNS should be back up again.  but it may take a while for your caches to catch up
09:44:56 <Eduard_Munteanu> Or IntSet if you have Int keys
09:44:59 <bartavelle> I do not know what tries are, but I'll look that up too
09:45:08 <jmcarthur> bartavelle: tries can be generated lazily, so you don't have to keep inserting things. that means you don't have to pass a structure around. you can just stick it in a closure :D
09:45:11 <augustss> bartavelle: Look for Conal elliott's blogging about memorization. 
09:45:29 <jmcarthur> bartavelle: http://hackage.haskell.org/package/MemoTrie
09:45:47 <jmcarthur> augustss: *memoization
09:45:48 <Jesin> umm.
09:46:03 <Jesin> http://78.46.100.180/ <-- this page just says "it works!"
09:46:14 <jmcarthur> what the crap happened to haskell.org?
09:46:19 <jmcarthur> wow
09:46:19 <Jesin> and doesn't actually work
09:46:21 <Jesin> :p
09:46:24 <jmcarthur> this is professional
09:46:24 <djahandarie> Jesin, add it to /etc/hosts
09:46:27 <augustss> jmcarthur: I know :). Damn iPhone keyboard. 
09:46:31 <djahandarie> jmcarthur, yeah.
09:46:40 <djahandarie> I'm not sure who is suppose to be fixing this
09:46:43 <Jesin> djahandarie: I'm not on my own computer at the moment and this is Windows
09:46:54 <djahandarie> Ah, I think Windows has some file too
09:47:00 <djahandarie> Not sure where it's at though
09:47:15 <Nakilon> it works on windows: system32/drivers/etc/hosts
09:47:25 <Jesin> also it's not my own computer and I'm not sure I have the necessary access privileges
09:47:29 <augustss> Jesin: There's an /etc/hosts in windows too. Just better hidden. 
09:48:02 <djahandarie> augustss, just give up, touchscreens are no match for old-fashioned keyboards!
09:48:23 <Jesin> I'm running firefox portable, is there a solution that works on that without touching anything in system32?
09:48:43 <augustss> djahandarie: But good when sitting in a terminal waiting for a flight. 
09:49:06 <djahandarie> augustss, hah. The only time you bother to come on here, eh ;)
09:49:27 <augustss> djahandarie: It's blocked at work. 
09:49:42 <djahandarie> Jesin, googling reveals a plugin called switchhosts
09:49:51 <Jesin> =/
09:50:00 <__jst__> Sup, peeps.
09:50:03 <Jesin> I was hoping I wouldn't have to use an entire plugin
09:50:07 <__jst__> haskell.org is down.
09:50:12 <kmc> we know
09:50:16 <__jst__> DNS troubles, from what I can tell.
09:50:19 <Jesin> like, maybe something in about:config
09:50:20 <__jst__> Anyone know the IP?
09:50:21 <kmc> super lame
09:50:24 <xcthulhu> __jst__, Read /topic
09:50:31 <Jesin> http://hpaste.org/42369/haskellorg_ips
09:50:41 <malcolmw> haskell.org DNS should be working now.  
09:50:46 <augustss> Haskell.org is up
09:50:53 <kmc> it works for me, but i don't know if my DNS is cached
09:51:02 <djahandarie> Yeah, it never went down for me
09:51:14 <jmcarthur> i think the bad one got cached for me :(
09:51:27 <xcthulhu> I don't think it ever went down in Europe
09:51:29 <__jst__> xcthulhu: Thanks!
09:51:52 <augustss> It was down in Europe. 
09:52:33 <Jesin> It doesn't work for me...
09:52:39 <Nakilon> (in Ukraine, for example)
09:52:53 <Nakilon> (was (and is?) down)
09:52:55 <__jst__> Germany is also downn.
09:53:04 <augustss> Jesin: You have to wait for the TTL to expire. 
09:53:09 <Jesin> TTL=?
09:53:21 <augustss> Time To Live
09:53:41 <Jesin> how long is that usually?
09:53:52 <augustss> Maybe 2 hours
09:53:58 <augustss> Maybe 48
09:53:59 * djahandarie takes out gun... not long for you!!!
09:54:19 <augustss> Maybe something else
09:54:26 <PHO_> it's still down in Japan but I see the whois entry has been recovered
09:54:28 <HugoDaniel> :(
09:54:33 <HugoDaniel> haskell.org does not work
09:55:00 <djahandarie> Haskell in Japan!
09:55:00 <__jst__> we know
09:55:06 <malcolmw> at my last place of work TTL was about 76000 seconds, roughly
09:55:11 <__jst__> D'8
09:55:40 * applicative thinks, we have malcolmw and augustss here, why do we need haskell.org?
09:55:54 <djahandarie> lol
11:18:31 --- topic: '["haskell.org down; we're on the case; http://hpaste.org/42369/haskellorg_ips","GHC 7 is out: http://is.gd/hb8vE", "Haskell Platform 2010.2: http://is.gd/dCGPn", "Haskell 2010 is out: http://is.gd/iTnkV", "Haskell News: http://reddit.com/r/haskell", "The Haskell programming language http://haskell.org", "Paste: http://hpaste.org", "Logs: http://tunes.org/~nef/logs/haskell/"]'
11:18:31 --- topic: set by quicksilver!~jules@roobarb.crazydogs.org on [Fri Dec 17 05:17:41 2010]
11:22:24 <benmachine> elliott: see topic
11:23:02 <elliott> benmachine: already did
11:23:11 <NHaskell> hey people please help :D how i can rewrite it to generate all possible combinations sublists http://pastebin.com/Puw1QgXL
11:24:30 <NHaskell> groupByN 2 [1..3] ==> [[1,2],[1,3],[2,3]]
11:24:41 <NHaskell> something like this i want :)
11:24:50 * hackagebot MaybeT-monads-tf 0.1 - MaybeT monad transformer compatible with monads-tf instead of mtl  http://hackage.haskell.org/package/MaybeT-monads-tf-0.1 (BenMillwood)
11:27:15 --- topic: '["haskell.org down; we're on the case; http://hpaste.org/42369/haskellorg_ips","GHC 7 is out: http://is.gd/hb8vE", "Haskell Platform 2010.2: http://is.gd/dCGPn", "Haskell 2010 is out: http://is.gd/iTnkV", "Haskell News: http://reddit.com/r/haskell", "The Haskell programming language http://haskell.org", "Paste: http://hpaste.org", "Logs: http://tunes.org/~nef/logs/haskell/"]'
11:27:15 --- topic: set by quicksilver!~jules@roobarb.crazydogs.org on [Fri Dec 17 05:17:41 2010]
11:27:18 <gakusei> did you notice that the haskell.org site is down?
11:27:39 <benmachine> sshc: what happens if you use writeFile
11:28:11 <sshc> benmachine: /tmp/debugtrace: openFile: does not exist (No such device or address)
11:28:22 <slom> gakusei: see topic
11:28:27 <sshc> # lt /tmp/debugtrace 
11:28:28 <sshc> /tmp/debugtrace
11:28:35 <sshc> (in yellow)
11:28:40 <sshc> I used mkfifo to make the fifo
11:28:53 <gakusei> slom: oh, I am sorry
11:29:34 <monochrom> it's a DNS problem. see the url for ip addresses.
11:31:32 <sshc> benmachine: writeFile "/tmp/debugtrace" "foobar\n"
11:31:32 <benmachine> NHaskell: think about it recursively - suppose you want all sublists of length n from (x:xs), then certainly all the sublists of length n from xs will be in there, what else?
11:31:32 <benmachine> sshc: I don't know much about FIFOs, sorry
11:31:32 <NHaskell> hm
11:31:32 <tromp> :t replicateM
11:31:32 <lambdabot> forall (m :: * -> *) a. (Monad m) => Int -> m a -> m [a]
11:31:32 <gakusei> usually I use runhaskell to run my programs; how do I compile them and run the compiled version?
11:31:32 <yrlnry> Are FIFOs first in, first out?  Or last in, first out?  I always forget.
11:31:32 <benmachine> gakusei: ghc --make file
11:31:32 <benmachine> yrlnry: the name is a clue :)
11:31:32 <tromp> :t mapM
11:31:33 <lambdabot> forall a (m :: * -> *) b. (Monad m) => (a -> m b) -> [a] -> m [b]
11:32:17 <a_jazz> do i need to do anything special to visit the haskell site? Visiting via the IP addresses takes me to the "It works!" page, like in a default Apache install...
11:32:22 <kmc> sshc, "can't use"? what's the error?
11:32:48 <kmc> oh i see above
11:32:59 <kmc> sshc, maybe it has to do with the fact that GHC's RTS does non-blocking IO?
11:33:54 <gakusei> ghc --make queens.hs
11:33:56 <gakusei> [1 of 1] Compiling Main             ( queens.hs, queens.o )
11:34:00 <gakusei> queens.hs:3:4: Parse error in pattern
11:34:02 <gakusei> what could that mean? 
11:34:08 <kmc> it means there's a parse error in your pattern
11:34:10 <kmc> a syntax error
11:34:23 <kmc> you can put your code on hpaste.org and people will try to find it
11:34:24 <Feuerbach> sshc: what if you use appendFile instead of writeFile?
11:34:25 <shachaf> a_jazz: You need to send a "Host: www.haskell.org" header to your HTTP request.
11:34:27 <monochrom> sshc: I just tried and it works. mkfifo blah. then in one terminal: cat blah. in another terminal: tell ghci to writeFile "blah" "hello"
11:34:40 <gakusei> kmc: the syntax is different for runhaskell and ghc?
11:34:45 <shachaf> a_jazz: Possibly the simplest way of doing that is to add the IPs in that hpaste to your /etc/hosts.
11:34:47 <kmc> gakusei, no
11:35:14 <a_jazz> right now i'm on a windows 7 machine
11:35:17 <kmc> yeah, i think what's going on is that a blocking write to a FIFO with no read end opened blocks, but a non-blocking write fails with EINVAL or whatever
11:35:20 <kmc> testing now
11:36:03 <sshc> Feuerbach: I tried both
11:36:03 <shachaf> a_jazz: /etc/hosts is hidden but exists on Windows. :-)
11:36:10 <sshc> kmc: I think this might be relevant: http://webcache.googleusercontent.com/search?q=cache:muI2lLAWOp4J:www.haskell.org/pipermail/haskell-cafe/2008-April/041606.html+&cd=1&hl=en&ct=clnk&gl=us
11:36:15 <a_jazz> shachaf: i can add the stuff to the hosts file on this machine... I found it earlier
11:36:16 <monochrom> I see. Yeah need someone reading.
11:37:18 <kmc> open() with O_NONBLOCK on the write end of a fifo with no reader returns ENXIO
11:37:34 <monochrom> interesting
11:38:15 <sshc> monochrom: Doesn't work for me.
11:38:21 <sshc> monochrom: Which version are you using?
11:38:54 <monochrom> ubuntu 10.10 32-bit linux kernel 2.6.35-23, ghc 6.12.3
11:39:20 <Feuerbach> sshc: notice he did "cat blah"
11:39:29 <monochrom> note I do have a cat blah reading
11:39:30 <sshc> Feuerbach: So am I
11:39:43 <monochrom> well then good luck
11:40:01 <tromp> is there some name for the function \(x:xs) -> (x,xs)   ?
11:40:03 <monochrom> and yes I know it's just me. all software works 100% of the time for me.
11:40:30 <sproingie> i think the biggest insult about the parked page on haskell.org is that the first link is "PHP Programming"
11:40:35 <tromp> @pl \(x:xs) -> (x,xs) 
11:40:35 <lambdabot> liftM2 (,) head tail
11:40:37 <kmc> tromp, i've used "uncons" for the safe variant: uncons [] = Nothing; uncons (x:xs) = Just (x,xs)
11:41:00 <monochrom> that stands for Professional Haskell Programming
11:41:12 <sproingie> ah of course
11:41:13 <burp> o0 what's up with haskell.org?
11:41:19 <monochrom> DNS problem
11:41:19 <Feuerbach> sshc: do you execute "cat blah" *before* your program?
11:41:40 <sproingie> it *is* renewed, yes?
11:41:53 <benmachine> monochrom: Professional Haskell Programming Programming >_>
11:41:58 <tromp> @let pinc []=[]; pinc (x:xs) = (x,xs) : pinc xs
11:41:59 <lambdabot>  Defined.
11:42:04 <benmachine> 18:02:24 < malcolmw> mind you, Network Solutions only gave us a 15-day extension, to allow us to sort it out properly
11:42:10 <Bynbo7> it's not a DNS problem, it's a demain expirery problem
11:42:14 <sproingie> professional haskell $ fix programming
11:42:17 <tromp> @let comb n = evalStateT . replicateM  n . StateT $ pinc
11:42:18 <lambdabot>  Defined.
11:42:24 <sshc> kmc: I'm not much familiar with FIFOs
11:42:48 <sshc> kmc, Feuerbach: I'm running "while true; do; cat /tmp/debugtrace; done" before I start the program
11:42:54 <sshc> cat /tmp/debugtrace seems to stop after a line is read
11:42:58 <monochrom> a recent message on the mailing list says it is resolved, but again you will wait for the whole world's DNSes to propogate.
11:43:10 <sshc> (And yes, one line is read)
11:43:25 <sshc> I think the second call to writeFile is what is failing
11:43:52 <tromp> > comb 2 "abc"
11:43:52 <lambdabot>   ["ab","ac","bc"]
11:43:53 <monochrom> and you know how people say "ATM machine" and "OOP programming" so why not "PHP programming" too
11:44:09 <sshc> I should try opening the file and leaving the handle open
11:44:09 <Feuerbach> sshc: makes sense. The first call to writeFile causes EOF on the reader side and it no longer reads
11:44:24 <sshc> Thanks
11:44:39 <pgavin> PHP doesn't stand for anything
11:44:44 <pgavin> not anymore anyway
11:44:45 <pgavin> lol
11:46:05 <kmc> acronyms are words; their etymology is irrelevant to the correctness of their usage
11:46:24 <kmc> complaining about "ATM machine" is about as reasonable as complaining about "long-distance telephone"
11:46:28 * sproingie uses OOP programming to verify the PIN number in the ATM machine
11:46:37 <sleepynate> php stands for cheap indian outsourcing \o/
11:46:37 <Makoryu> Heh
11:46:44 <sproingie> at the Department of Redundancy Department
11:47:05 <monochrom> "ATM machine" is nothing compared to automatic ATM teller machine.
11:47:22 <kmc> Feuerbach, sshc at the system call I think it's actually open() which errors out.  strace is a useful tool here
11:47:25 <BONUS> goons i need help
11:47:25 <mjrosenb> sproingie: itym "personal PIN number in the automated ATM machine"
11:47:38 <BONUS> i just got a text: birthday party at my place tomorrow at 9
11:47:39 <sleepynate> mjrosenb: good one
11:47:47 <BONUS> but i dont know who it is from
11:48:13 <mjrosenb> is there a somewhat robust way to render a float into a string?
11:48:13 <sproingie> > show 123.45
11:48:13 <monochrom> do you know someone with a birthday near tomorrow? do not forget yourself
11:48:13 <lambdabot>   "123.45"
11:48:13 <BONUS> whoa sorry
11:48:15 <BONUS> wrong channel
11:48:17 <BONUS> lol
11:48:31 <sleepynate> BONUS: (apply #'magic addressbook)
11:48:33 <BONUS> still if anyone has advice
11:48:38 <BONUS> hmm
11:48:50 <roconnor> all of #haskell in invited to BONUS's place tomorrow at 9
11:48:50 <Makoryu> > show pi
11:48:51 <lambdabot>   "3.141592653589793"
11:48:56 <sproingie> magic <*> addressbook
11:48:59 <BONUS> haha, indeed!
11:49:00 <monochrom> there is also the prospect of a simple "wrong number"
11:49:05 <roconnor> BONUS: expect 665 people at your door
11:49:09 <sleepynate> BONUS: or get on facebook and see whose birthday is tmoorrow
11:49:09 <BONUS> monochrom: doesn't matter, they invited me now
11:49:21 <BONUS> it would be so cool to get 665 guests. cause that would mean there's 666 people
11:49:24 <monochrom> no, expect 665 people/bots at your door
11:49:26 <Makoryu> We need one more person in here to summon--yep
11:49:41 <sproingie> i got a text on thanksgiving saying "yvonne in labor since 6am this morn"
11:49:44 <BONUS> i'll try to use haskell to solve this problem
11:49:46 <sproingie> i don't know any yvonne
11:49:54 <kmc> > show 9000000000000000000000000000
11:49:55 <lambdabot>   "9000000000000000000000000000"
11:49:58 <Bynbo7> Makoryu: printf?
11:50:03 <Bynbo7> uh, mjrosenb 
11:50:04 <kmc> > show (9000000000000000000000000000 :: Double)
11:50:04 <lambdabot>   "9.0e27"
11:50:20 * Bynbo7 -> Sleep
11:50:21 <kmc> lambdabot is invited to any party i throw
11:50:42 * mjrosenb wants it to not add in "e-3" of 0.001
11:50:54 * kmc <3 strace
11:50:54 <monochrom> the prospect of lambdabot getting drunk is unsightful
11:50:59 * mjrosenb has so far avoided printf like the plague
11:51:01 <sproingie> > show cake
11:51:02 <lambdabot>   "[\"One 18.25 ounce package chocolate cake mix.\",\"One can prepared coconu...
11:51:06 <sproingie> bring that
11:51:09 <alpounet> that would be awesome to get lambdabot drunk man
11:51:14 <burp> > cake
11:51:17 <lambdabot>   ["One 18.25 ounce package chocolate cake mix.","One can prepared coconut pe...
11:51:23 <burp> > length cake
11:51:25 <lambdabot>   42
11:51:37 <Makoryu> > printf "%f" pi :: String
11:51:37 <copumpkin> > map length cake
11:51:37 <lambdabot>   "3.141592653589793"
11:51:38 <lambdabot>   [43,40,35,16,35,42,40,27,31,21,20,24,17,25,23,59,52,20,13,28,26,38,21,37,25...
11:51:46 <Makoryu> > printf "%f" 0.0000001 :: String
11:51:47 <lambdabot>   "0.0000001"
11:51:53 <sproingie> the first letters of the last eight sentences of cake are ASCIICAT
11:51:54 <Makoryu> mjrosenb: ^
11:52:15 <monochrom> interesting. what about the other first letters?
11:52:25 <sproingie> TOOTOOTASCIICAT
11:52:30 <sproingie> i dunno the rest
11:52:30 <monochrom> fun
11:52:36 <burp> > map head cake
11:52:37 <lambdabot>   "OOTFOTOTDFFFFFPFCOAUFANTOATTOOTOOTASCIICAT"
11:52:40 <burp> haha
11:52:58 <monochrom> I was hoping something like "ATMOOP..."
11:52:58 <shachaf> > map last cake
11:52:59 <lambdabot>   "........:................'................"
11:53:04 <djahandarie> @vixen Wanna get drunk?
11:53:04 <shachaf> Informative.
11:53:05 <lambdabot> i could go for a spot of whiskey right now
11:53:05 <mjrosenb> Makoryu: yeah, it looks like printf is working :(
11:53:09 <Makoryu> > map length cake
11:53:10 <lambdabot>   [43,40,35,16,35,42,40,27,31,21,20,24,17,25,23,59,52,20,13,28,26,38,21,37,25...
11:53:17 <Makoryu> mjrosenb: Is that bad? :(
11:53:24 <djahandarie> @vixen Let's go to kmc's place then! He has a lot of alcohol!
11:53:24 <lambdabot> so?
11:53:28 <kmc> :t integerToBreakfast
11:53:29 <djahandarie> Damn it lambdabot
11:53:30 <lambdabot> Not in scope: `integerToBreakfast'
11:53:33 <mjrosenb> Makoryu: printf feels icky.
11:53:34 <kmc> @quote integerToBreakfast
11:53:34 <lambdabot> integerToBreakfast says: = (["Cornflakes", "Strawberry jam toast", "Grapefruit", "Cup of tea and a biscuit, gotta dash", "Bacon, eggs, toast, tomato and mushroom. You deserve it", "Waffles", "
11:53:34 <lambdabot> Porridge of some description", "Orange juice and muffins", "Apples, pears, mango and kiwi", "A selection of cold meats with crisp bread", "Headache pills and water", "Leftover pizza", "Leftover
11:53:34 <lambdabot> vindaloo curry"] !!)
11:53:44 <elliott> How can one put a ByteString using Data.Binary without any headers?
11:53:54 <elliott> i.e., just put the raw string data in without length, padding or termination.
11:54:17 <sproingie> "Bacon, eggs, toast, tomato and mushroom.  You deserve it"
11:54:21 <sproingie> why, what'd i do to you?
11:54:39 <monochrom> love omlettes
11:55:00 <sproingie> i guess it's okay in an omelette
11:55:07 <monochrom> absolutely
11:55:24 <benmachine> elliott: I think Data.Binary.Put.putByteString might do it
11:55:44 <elliott> benmachine: Indeed, I half-suspected that.
11:56:15 <elliott> benmachine: Except that seems to want strict bytestrings. Heh.
11:56:29 <Makoryu> mjrosenb: I guess I agree, but so long as you define a wrapper function (showFloat :: (RealFloat a) => a -> String; showFloat = printf "%f") it shouldn't be a big deal
11:56:46 <elliott> Hmm, I might just use strict bytestrings all over the place ...
11:56:59 <benmachine> elliott: I wonder what putLazyByteString does!
11:57:25 <elliott> benmachine: Launch the missiles?
11:57:30 <benmachine> that's probably it
11:57:44 <elliott> In fairness, my ByteStrings are so lazy that they stop me editing my /etc/hosts to get haskell.org because it'd be too much work.
11:57:54 <elliott> And I don't think I have local docs.
11:57:55 <djahandarie> Haskell's type system is so powerful that we can have safeLaunchMissiles
11:58:03 <kmc> using ST?
11:58:19 <benmachine> elliott: you can see what functions are defined in a module using :browse in ghci
11:58:27 <djahandarie> Yes, all destruction done locally!
11:58:31 <kmc> you can convert a lazy BS to a strict BS
11:58:36 <elliott> benmachine: Ssshhh :P
11:58:39 <benmachine> elliott: I think local docs for bytestring are installed by default
11:58:44 <kmc> lazy -> strict might be expensive, but strict -> lazy should be trivial
11:58:47 <benmachine> because it's a ghc library
11:58:51 <elliott> probably are, i didn't check though :)
11:59:32 <benmachine> mine are in /usr/somewhere
11:59:34 * benmachine useful
11:59:38 <monochrom> this is why ~/.cabal/config defaulting to "documentation: False" is the stupidest decision since sliced bread
11:59:57 <benmachine> /usr/share/doc/ghc/html/libraries/
12:01:31 <alpounet> monochrom, indeed
12:01:46 <alpounet> i still don't understand why it defaults to False...
12:04:16 <kmc> because there's two roles for cabal
12:04:28 <kmc> "i want to build Haskell software" vs "i want to develop Haskell software"
12:04:42 <kmc> and it defaults to the former, even though probably a majority of us are the latter
12:04:47 <kmc> it should prompt at install or something
12:04:58 <kmc> and set not only that, but also stuff like building profiling libs
12:05:19 <djahandarie> I think it's better to default to the former though, because that's what is more important in the end
12:05:26 <djahandarie> I'd definitely agree that it'd be nice to prompt though
12:05:39 <djahandarie> Was annoying to rebuild a bunch of my packages because I forgot to enable prof one time
12:08:12 <blueonyx> is there a std function [Int] -> Bool which returns False if there are duplicates in the list?
12:08:27 <monochrom> no
12:08:37 <izukerman> any help with: http://hpaste.org/42394/attoparseclazy_bytestrings
12:08:54 <izukerman> just getting started with attoparsec and lazy bytestrings
12:10:39 --- topic: '["haskell.org down; we're on the case; http://hpaste.org/42369/haskellorg_ips","GHC 7 is out: http://is.gd/hb8vE", "Haskell Platform 2010.2: http://is.gd/dCGPn", "Haskell 2010 is out: http://is.gd/iTnkV", "Haskell News: http://reddit.com/r/haskell", "The Haskell programming language http://haskell.org", "Paste: http://hpaste.org", "Logs: http://tunes.org/~nef/logs/haskell/"]'
12:10:39 --- topic: set by quicksilver!~jules@roobarb.crazydogs.org on [Fri Dec 17 05:17:41 2010]
12:10:57 <ndrsndrs> i think if you cabal install --reinstall attoparsec it'll use the latest version of bs
12:11:19 <ndrsndrs> or alternatively, you can use the old one yourself
12:11:31 <ndrsndrs> with -package bytestring-0.9.1.5 or so
12:11:31 <kmc> :t any ((>1).length) . group
12:11:33 <lambdabot> forall a. (Eq a) => [a] -> Bool
12:12:36 <izukerman> that did it; thanks!
12:13:20 <c_wraith> that won't work well with an infinite list...  sadly
12:13:30 <c_wraith> group is not lazy
12:13:40 <c_wraith> Or wait, is it?
12:13:47 <c_wraith> No, it can't be
12:14:01 <c_wraith> looking at the second element of its result requires walking the whole list
12:15:22 <ndrsndrs> > take 10 $ group [1..]
12:15:23 <lambdabot>   [[1],[2],[3],[4],[5],[6],[7],[8],[9],[10]]
12:15:47 <ndrsndrs> it only groups contiguous elements, you might be thinking of sort.group or something
12:15:48 <c_wraith> Oh, right.  group isn't global
12:15:51 <ndrsndrs> group.sort, even
12:15:51 <c_wraith> yeah, I am
12:16:07 <c_wraith> So kmc's code needed a sort in it. :)
12:16:41 <c_wraith> and sort obviously can't be completely lazy.  It needs to find the minimum element to put first.
12:19:15 <NHaskell> hey people how i can optimize this code ? http://pastebin.com/a376c405 i just need to print out "even" chars from string
12:20:23 <djahandarie> NHaskell, compile with profiling, run it with +RTS -p, and see what is taking time
12:21:03 <NHaskell> time doesnt matter
12:21:17 <djahandarie> What'd you mean by optimize then? Make it shorter?
12:21:18 <NHaskell> code seems to be so long
12:21:21 <djahandarie> Ah
12:21:22 <NHaskell> yep
12:21:28 <copumpkin> has anyone ever wanted a ffix :: Eq a => (a -> a) -> a -> a
12:21:28 <copumpkin> ffix f x = let x' = f x in if x' == x then x else ffix f x' ?
12:21:51 <copumpkin> @let ffix f x = let x' = f x in if x' == x then x else ffix f x'
12:21:55 <lambdabot>  Defined.
12:21:56 <copumpkin> > ffix cos 0
12:22:00 <lambdabot>   0.7390851332151607
12:22:07 <NHaskell> and one question more why in Hugs i must enter word in "word" quotes
12:22:10 <jmcarthur> i think i defined something like that here long ago
12:22:20 <monochrom> yes I think all numerical analysts want ffix
12:23:02 <copumpkin> I actually don't want it for numerical stuff
12:23:07 <copumpkin> but it was a concise example :)
12:23:50 <monochrom> not to mention all those beginners who rush to try "fix (\x -> x*x)" when they first hear about "fixed point"
12:24:21 <laurus> Has anyone here tried manatee?
12:24:22 <Twey> > fix (** 2)
12:24:26 <lambdabot>   mueval-core: Time limit exceeded
12:24:35 <pgavin> you probably don't want to use equalify in ffix
12:24:39 <hpc> > ffix (*2)
12:24:40 <lambdabot>   Overlapping instances for GHC.Show.Show (a -> a)
12:24:40 <lambdabot>    arising from a use of `...
12:24:41 <pgavin> it could oscillate
12:24:45 <hpc> :t ffix
12:24:46 <lambdabot> forall a. (Eq a) => (a -> a) -> a -> a
12:24:51 <hpc> > ffix (*2) 0
12:24:53 <lambdabot>   0
12:25:05 <copumpkin> pgavin: you could provide a custom equality predicate I guess
12:25:12 <copumpkin> but the basic idea is there
12:25:36 <jmcarthur> ha, just found my unnecessarily complex definition of ffix
12:25:37 <pgavin> yeah :)
12:25:55 <Itkovian> grmbl.
12:26:29 <Itkovian> ghc 6.12.3 with sefl-built haskell platform gets me this error: http://hackage.haskell.org/trac/hackage/ticket/686
12:26:32 <jmcarthur> > let fixpoint f = fst . head . dropWhile (uncurry (/=)) . uncurry zip <<< id &&& tail <<< iterate f in fixpoint cos 0
12:26:33 <lambdabot>   0.7390851332151607
12:26:40 <copumpkin> jmcarthur: lol
12:26:43 <Itkovian> but darcs get ...cabal yields an pretty empty repo
12:26:45 <alpounet> oh i remember this jmcarthur 
12:26:47 <djahandarie> NHaskell, what exactly is getWord suppose to be doing there?
12:26:52 <jmcarthur> alpounet: it's terrible ;)
12:26:53 <alpounet> it blew my head off at the time
12:27:00 <djahandarie> NHaskell, getStr I mean
12:27:06 <alpounet> (i wasn't really at ease with such definitions :P)
12:27:15 <NHaskell> djahandarie hmm
12:27:34 <djahandarie> NHaskell, read x :: String seems pretty... not useful. Not sure if it even works in GHC
12:27:49 <alpounet> jmcarthur, sounds quite much like "NO! I won't put any 'x' there!"
12:27:52 <djahandarie> At least I'm not sure what it does
12:27:55 * djahandarie checks the instance
12:28:24 <NHaskell> djahandarie but without it doesnt work
12:28:36 <NHaskell> something strange happens sometimes with hugs
12:28:46 <monochrom> Itkovian: so it's just a bad ISP proxy?
12:28:50 <NHaskell> he starts looping something strange
12:28:51 <Makoryu> > read "17" :: Rational
12:28:52 <lambdabot>   *Exception: Prelude.read: no parse
12:29:09 <djahandarie> NHaskell, you can't just put getLine in place of getStr?
12:29:10 <Itkovian> monochrom: dunno. it's via university.
12:29:11 <NHaskell> put string in quotes
12:29:14 <Makoryu> > read "4 % 13" :: Rational
12:29:15 <lambdabot>   4 % 13
12:29:24 <djahandarie> > read "blah" :: String
12:29:26 <lambdabot>   "*Exception: Prelude.read: no parse
12:29:31 <jmcarthur> alpounet: or use let :)
12:29:31 <monochrom> I am not through any proxy, and I don't have that problem.
12:29:33 <djahandarie> > read "" :: String
12:29:34 <lambdabot>   "*Exception: Prelude.read: no parse
12:29:39 <djahandarie> I'm really not sure how that works
12:29:51 <Makoryu> > read "\"yeah.avi\"" :: String
12:29:52 <lambdabot>   "yeah.avi"
12:29:56 <monochrom> And the bug page discussion eventually converges on proxy problems.
12:30:04 <NHaskell> djahandarie when i put it doesnt work correctly
12:30:09 <djahandarie> Ah, right
12:30:18 <NHaskell> djahandarie it starts just printing same word
12:30:36 <monochrom> well, there is always Cabal 1.10
12:30:42 <Itkovian> monochrom: there should not be a proxy at uni.
12:30:52 <Itkovian> monochrom: I need to get that installed, of course :-)
12:31:03 <izukerman> anyone having trouble getting to haskell.org?
12:31:10 <pgavin> yes
12:31:39 <monochrom> domain registration problem. fixed but you will wait for the whole world's DNSes to catch up
12:31:41 <pgavin> they forgot to renew the DNS
12:31:52 <blueonyx> > ffix (*2) 2
12:31:56 <lambdabot>   mueval-core: Time limit exceeded
12:32:04 <pgavin> > ffix (*2) 1
12:32:04 <blueonyx> > ffix (**2) 2
12:32:05 <lambdabot>   Infinity
12:32:07 <lambdabot>   mueval-core: Time limit exceeded
12:32:11 <blueonyx> aye
12:32:16 <pgavin> > ffix (**2) .5
12:32:17 <lambdabot>   No instance for (GHC.Num.Num (f a))
12:32:17 <lambdabot>    arising from a use of `e_125' at <in...
12:32:42 <parcs> > ffix (^^2) .5
12:32:43 <lambdabot>   No instance for (GHC.Num.Num (f a))
12:32:43 <lambdabot>    arising from a use of `e_125' at <in...
12:32:55 <pgavin> :t (**)
12:32:55 <blueonyx> :hoogle iterate
12:32:56 <lambdabot> forall a. (Floating a) => a -> a -> a
12:33:02 <djahandarie> NHaskell, getWord = fmap (even_ . read) getLine
12:33:09 <pgavin> > ffix (** 2.0) .5
12:33:10 <lambdabot>   No instance for (GHC.Num.Num (f a))
12:33:10 <lambdabot>    arising from a use of `e_1205' at <i...
12:33:21 <blueonyx> > ffix (**2) 0.5
12:33:22 <lambdabot>   0.0
12:33:22 <pgavin> :t (** 2.0)
12:33:23 <lambdabot> forall a. (Floating a) => a -> a
12:33:27 <pgavin> ...
12:33:31 <blueonyx> :D
12:33:39 <blueonyx> @hoogle iterate
12:33:40 <lambdabot> Prelude iterate :: (a -> a) -> a -> [a]
12:33:40 <lambdabot> Data.List iterate :: (a -> a) -> a -> [a]
12:33:40 <lambdabot> Data.ByteString.Lazy iterate :: (Word8 -> Word8) -> Word8 -> ByteString
12:33:41 <pgavin> :t .5
12:33:42 <lambdabot> parse error on input `.'
12:33:54 <NHaskell> djahandarie :) works
12:34:02 <pgavin> um
12:34:21 <pgavin> > ffix (**2.0) 0.5
12:34:21 <lambdabot>   0.0
12:35:09 <NHaskell> djahandarie but is it possible to enter string without quotes in hugs ?
12:35:34 <djahandarie> NHaskell, the read is what makes the quotes needed
12:35:42 <elliott> hmm, is there a "cleaner" way to do "mapM foo [0..n]"?
12:35:44 <NHaskell> djahandarie okei
12:35:48 <elliott> er, [1..n]
12:36:16 <pgavin> > [ foo m | m <- [1..n] ]
12:36:17 <lambdabot>   Not in scope: `foo'
12:36:21 <blueonyx> elliott: 
12:36:25 <blueonyx> :t replicateM
12:36:25 <lambdabot> forall (m :: * -> *) a. (Monad m) => Int -> m a -> m [a]
12:36:29 <elliott> oh, of course, replicateM
12:36:31 <elliott> thanks
12:36:56 <shachaf> elliott: replicateM isn't really the same thing.
12:37:07 <elliott> shachaf: hm, why not?
12:37:09 <pgavin> no, it doesn't pass the number to the function
12:37:11 <elliott> right
12:37:13 <elliott> i don't need it though :)
12:37:17 <elliott> should have said (const foo)
12:37:29 <shachaf> elliott: Ah. In that case, yes. :-)
12:37:43 <pgavin> something like:
12:37:54 <pgavin> > sequence [ print x | x <- [ 1 .. 5] ]
12:37:55 <lambdabot>   <IO [()]>
12:38:01 <pgavin> is easy to read
12:38:05 <pgavin> so I do that a lot
12:38:46 <shachaf> pgavin: Isn't mapM print [1..5] clearer?
12:39:02 <pgavin> depends :)
12:39:05 <monochrom> not sure why it is not sequence_
12:39:15 <pgavin> yeah, sequence_ in this case
12:39:57 <djahandarie> I don't really like list comprehensions very much
12:40:29 <pgavin> sometimes I go crazy and use a do block instead of the list comprehension
12:40:41 <pgavin> but that's not for clarity
12:40:42 <pgavin> lol
12:40:55 <djahandarie> I tend to only use list comprehensions to model simple numeric patterns, not much else
12:45:27 <Phantom_Hoover> What happened to haskell.org?
12:45:36 <dayzman> hi
12:45:36 <pgavin> north korea
12:45:54 <dayzman> what's a neat imiplementation of generating combinations without replacements of elements of a list?
12:45:55 <Phantom_Hoover> Is it a problem with the domain or the site itself/
12:46:05 <pgavin> DNS problem, will resolve soon
12:46:16 <Phantom_Hoover> pgavin, what's the IP in the meantime?
12:46:38 <pgavin> http://hpaste.org/42369/haskellorg_ips
12:46:45 <pgavin> you gotta use hosts
12:46:48 <pgavin> virtual webserver
12:46:49 <nostrand> dayzman: Data.List.permutations?
12:47:32 <dayzman> nostrand, sure, but what if one is to implement it from scratch without having access to the Data library?
12:48:11 <nostrand> dayzman: then you have to think ;) (or look at the source for the given function =))
12:48:31 <pedro3005> is there a function similar to isAlpha that checks if a char is numeric?
12:48:46 <nostrand> pedro3005: isDigit i think
12:49:30 <pedro3005> thanks nostrand 
12:49:40 <nostrand> pedro3005: in Data.Char =)
12:49:56 <dayzman> is haskell.org down?
12:50:10 <dayzman> didn't the owner pay the fee or something?
12:50:26 <laurus> Is the Yi project still going, or has it been abandoned?
12:51:33 <unkanon> dayzman: see the /topic
12:52:07 <unkanon> dayzman: only the domain is down, the site's still up
12:52:27 <dayzman> ok
13:07:34 <NHaskell> djahandarie hey can you help me a little
13:07:38 <NHaskell> ints :: [Int] -> [Int]
13:07:39 <NHaskell> ints (x:xs)
13:07:39 <NHaskell> | x `mod` 2 == 0 = map (1+) (x:xs)
13:07:39 <NHaskell> | otherwise = strip xs
13:07:56 <NHaskell> strip xs i want to strip all even numbers from list
13:08:02 <NHaskell> how i can do this :)?
13:08:28 <djahandarie> filter odd xs
13:08:40 <pgavin> > filter odd [1..10]
13:08:41 <lambdabot>   [1,3,5,7,9]
13:09:18 <aristid> > filter (odd . ord) "djahanderie"
13:09:19 <lambdabot>   "aaeie"
13:09:42 <djahandarie> Funny how there are two es now
13:09:57 <aristid> > filter (odd . ord) ['A'..'Z']
13:09:58 <lambdabot>   "ACEGIKMOQSUWY"
13:10:02 <NHaskell> hmm
13:10:12 <aristid> > filter (odd . ord) ['a'..'z']
13:10:13 <lambdabot>   "acegikmoqsuwy"
13:10:15 <NHaskell> djahandarie but one question more :) filter odd xs works nice
13:10:36 <NHaskell> but xs list in otherwise without first element
13:10:37 <NHaskell> x
13:10:43 <aristid> so vowels are just a subset of the odd characters :D
13:10:44 <NHaskell> how i can concatenate and then filter
13:11:09 <unkanon> aristid: hmm I like that discovery
13:11:20 <NHaskell> djahandarie oh seems that filter odd (x:xs)
13:11:26 <NHaskell> tnx :)
13:11:33 <aristid> unkanon: :)
13:11:39 <pgavin> if you want every other item in the list, something like
13:11:42 <pgavin> > let oddItems = map snd (filter (odd.fst) (zip [0..] xs)) in oddItems ['A'..'Z']
13:11:43 <lambdabot>   Not in scope: `xs'
13:11:59 <pgavin> > let oddItems xs = map snd (filter (odd.fst) (zip [0..] xs)) in
13:11:59 <unkanon> I don't think many people know that all vowels are in odd positions
13:11:59 <pgavin>          oddItems ['A'..'Z']
13:12:00 <lambdabot>   <no location info>: parse error (possibly incorrect indentation)
13:12:04 <pgavin> anyway
13:12:35 <pgavin> > let oddItems = map snd (filter (odd.fst) (zip [0..] xs)) in oddItems ['A'..'Z']
13:12:36 <lambdabot>   Not in scope: `xs'
13:12:39 <pgavin> ffs
13:12:43 <pgavin> forget it :)
13:13:29 <unkanon> > let oddItems xs = map snd (filter (odd.fst) (zip [0..] xs)) in oddItems ['A'..'Z']
13:13:31 <lambdabot>   "BDFHJLNPRTVXZ"
13:13:33 <Twey> > let oddItems = map snd . filter (odd . fst) . zip [0 ..] -- ITYM
13:13:34 <lambdabot>   not an expression: `let oddItems = map snd . filter (odd . fst) . zip [0 .....
13:13:45 <Twey> > let oddItems = map snd . filter (odd . fst) . zip [0 ..] in oddItems ['A' .. 'Z'] -- ITIM
13:13:46 <lambdabot>   "BDFHJLNPRTVXZ"
13:13:57 <pgavin> thank you :)
13:13:58 <unkanon> too late, Twey, this time I win!
13:14:14 <Twey> unkanon: Nah, yours was pointed; pgavin clearly meant it to be point-free ;)
13:14:23 <pgavin> yeah
13:14:35 * unkanon cries
13:15:04 <pgavin> would the compiler fuse that?
13:15:14 <Twey> pgavin: I believe so, yes
13:16:18 <unkanon> I imagine GHC has been so far the result of an enormous amount of effort (because they had to find out about stuff as they went along).
13:16:37 <unkanon> but knowing what we know now, do we see GHC as a very hard to write compiler?
13:16:55 <djahandarie> It'd be very hard to write GHC without GHC as a reference
13:17:00 <unkanon> it does so many cool stuff that no other languages do
13:17:18 <djahandarie> Then again I'm not SPJ, he could probably do it
13:17:18 <asflierl> like?
13:17:29 <unkanon> like fusion
13:17:51 <alpounet> unkanon, shhhh, don't tell other people, that could bring success
13:17:53 <djahandarie> Fusion is nothing complicated, just requires your language to be pure and you to write your functions in a certain way
13:17:58 <Makoryu> unkanon: I don't think *any* of the cool features of Haskell are exclusive to it.
13:18:01 <unkanon> and it can even derive definitions from type declarations like Oleg shows
13:18:04 <copumpkin> and to have rewrite rules?
13:18:13 <kmc> fusion doesn't require a pure language
13:18:16 <Itkovian> Cabal 1.10 did not solve anything :-/
13:18:18 <Itkovian> Ah well.
13:18:18 <kmc> (we don't have one, with unsafePerformIO)
13:18:19 <Makoryu> It just has a good balance of these features, plus an enthusiastic community
13:18:25 <Itkovian> Seems like something else is fubar too
13:18:26 <unkanon> also doesn't haskell convert functions to CPS?
13:18:38 <kmc> "haskell" does no such thing
13:18:43 <djahandarie> kmc, well, it isn't very safe unless you're working with a pure function
13:18:43 <kmc> GHC has a lot of continuations, of a sort
13:18:51 <unkanon> alpounet: they say it's already too famous that they wouldn't allow functions to be named using any symbols for instance
13:19:09 <kmc> djahandarie, it's safe if you know that the rewritten functions have the same side effects as the original.  which is the same property that we're already responsibe for
13:19:18 <kmc> when you write a GHC rewrite rule h = f . g
13:19:25 <kmc> GHC doesn't check in any way that the rule holds
13:19:26 <unkanon> I meant GHC...
13:19:38 <kmc> it trusts you
13:20:10 <djahandarie> kmc, I know, but it's a lot hard for YOU to decide on things if you have no idea of the purity of what you're working with
13:20:16 <kmc> but i guess fusion specifically depends on datastructures not changing in place
13:20:26 <hpc> the catch is, for complex functions anyway, making sure that strictness holds, as well as the final answer
13:20:39 <kmc> or you just lie about the strictness
13:21:00 <unkanon> so when GHC translates to assembly, the assembly is actually allocating new memory cells all the time and never reusing them in pure functions?
13:21:09 <unkanon> I thought the purity was just for us programmers
13:21:13 <copumpkin> assembly doesn't really know about allocation either :)
13:21:21 <djahandarie> It shares memory of course
13:21:22 <copumpkin> but the allocator is pretty lightweight
13:21:24 <unkanon> the OS does and it provides a function to the languages
13:21:42 <kmc> unkanon, GHC-compiled code does a ton of allocation, yes
13:21:42 <unkanon> like in Windows I do GlobalAlloc
13:21:49 <copumpkin> we don't really that function for "everyday" haskell evaluation
13:21:54 <kmc> but it's nowhere as heavy as a typical, malloc() call, which will walk a free list etc.
13:21:55 <copumpkin> in GHC
13:22:02 <kmc> in GHC a heap "allocation" is just incrementing a register
13:22:27 <unkanon> right
13:22:44 <kmc> since we have a copying garbage collector, allocation is cheap and freeing is free
13:22:50 <kmc> until you pay for it in GC of course
13:22:55 <frustrated> does anyone know where i can get the Alex documentation?
13:23:02 <msieradzki> and when happens when you modify data? :P
13:23:13 <kmc> you don't modify *values*
13:23:18 <pgavin> http://haskell.org/alex
13:23:19 <kmc> mutable data like IORef contents are handled differently
13:23:24 <msieradzki> modify values inside arrays
13:23:30 <kmc> or IOArrays, yes
13:23:32 <msieradzki> doesn't GHC GC get slower or something then?
13:23:36 <kmc> hmm
13:23:42 <frustrated> pgavin that link doesn't work:(
13:23:50 <pgavin> give it a bit
13:23:55 <pgavin> haskell.org has dns issues
13:23:59 <kmc> msieradzki, non-unboxed arrays contain pointers to the heap, so the GC has to walk them
13:23:59 <pgavin> works for me now
13:24:09 <kmc> i believe there's a recent-ish "card marking" optimization to speed this up
13:24:16 <kmc> unboxed arrays do not have this problem
13:24:26 <frustrated> it still doesn't work for me:(
13:24:29 <kmc> also, GHC's gc has a number of tricks to minimize the overhead of allocating and rapidly discarding lots of small objects quickly
13:24:32 <frustrated> f*ck
13:24:36 <kmc> which is good because Haskell programs spend most of their time doing that :D
13:24:48 <Cndy> Hello
13:24:54 <Cndy> Haskell.org ... is dead ?
13:24:56 <pgavin> frustrated: you can use the google cache
13:24:57 <unkanon> kmc: that's what I mean when I say GHC has all these nice things
13:25:02 <pgavin> Cndy: see /topic
13:25:17 <djahandarie> I wish IRC clients made the topic easier to say
13:25:18 <frustrated> thnx for the tip pgavin
13:25:23 <djahandarie> Rather than flooding like 600 nicks after it
13:25:28 <djahandarie> see*
13:25:29 <unkanon> /topic
13:25:53 <roconnor> god damn virutal hosting
13:25:57 <frustrated> pgavin very very tnq :D
13:25:57 <djahandarie> I know that, but random people joining the room don't
13:26:00 <hpc> djahandarie: don't use a terminal client, perhaps?
13:26:08 <unkanon> i see what you mean
13:26:09 <pgavin> frustrated: :)
13:26:25 <djahandarie> hpc, irssi shows it at the top of the screen just fine
13:26:34 <djahandarie> But who looks at the top of the screen unless they know there is something there?
13:26:35 <roconnor> use an initial client?
13:26:42 <unkanon> wow that's the first time I've ever seen someone in IRC suggesting someone *not* to use a terminal program :P
13:26:50 <pgavin> erc ftw
13:27:13 <unkanon> vrc ft... oh wait vim doesn't do that
13:27:18 <hpc> unkanon: next we will see people telling us that image editing should be done in GUI too!
13:27:29 <hpc> cats and dogs will get along! madness!
13:27:33 <pgavin> unkanon: vim isn't an operating system
13:27:50 <pgavin> lol, someone should port emacs to xen
13:27:58 <Cndy> what is better for GUI , qtHaskell or gtk2hs ?
13:28:00 <djahandarie> I'd like to a see a nice non-terminal but also non-GUI IRC client
13:28:04 <pgavin> gtk2hs
13:28:08 <pgavin> :)
13:28:11 <unkanon> hpc: I know, right when we have developed awesome ascii art tools
13:28:16 <Cndy> pgavin: any explain ? )
13:28:36 <pgavin> well, I haven't looked at qtHaskell, but gtk2hs is very well supported
13:28:38 <unkanon> non-terminal and non-gui? what does that mean? a joke?
13:28:46 <pgavin> lots of people use it
13:28:48 <sproingie> headless?
13:28:56 <pgavin> text -> speech
13:28:59 <sproingie> headless irc client.  bot perhaps
13:29:24 <Cndy> pgavin: but looking like Qt is also not so bad and maybe better also ) who knows
13:29:41 <djahandarie> Note 'GUI' -> 'Graphical User Interface'. I don't want the interaction to be graphical, just the display
13:29:50 <Cndy> pgavin: and if they will made haskell support sometimes...
13:30:02 <djahandarie> While I'd be using my keyboard to do almost all interaction with the client
13:30:19 <djahandarie> I think manatee stuff is made with this goal, but I haven't tried it
13:30:35 <elliott> djahandarie: What you mean is non-WIMP GUI.
13:30:48 <elliott> It's a graphical user interface -- i.e. it uses pixels -- but it's not Windows, Icons, Menus, Pointers.
13:32:55 <unkanon> djahandarie: can you give an example of a program that is that way?
13:33:14 <sproingie> xmonad
13:33:31 <unkanon> well. yes...
13:33:58 <unkanon> but I mean something that runs inside a wm :)
13:34:16 <unkanon> I have a hard time imagining a program like that
13:34:33 <djahandarie> Just imagine irssi using non-monospace fonts
13:34:38 <exDM69> has anyone here heard of a O(n) depth sorting algorithm for 3d graphics? I can't really think of any
13:34:39 <djahandarie> And different font sizes
13:34:48 <unkanon> true, good point djahandarie 
13:35:08 <unkanon> so I now agree with you, especially re that improvement for irssi :)
13:35:24 <pgavin> exDM69: I don't think it's possible
13:35:33 <djahandarie> exDM69, depth sorting? Is that like a topological sort?
13:35:35 <pgavin> exDM69: sorting is O(n log n)
13:35:43 <exDM69> I read a vague blog post about which mentioned that that sort of article exists
13:35:56 <djahandarie> Or like Newell's Algorithm?
13:35:58 <exDM69> pgavin: sorting based on element vs. element comparison is O(n)
13:36:01 <pgavin> exDM69: it might be O(n) if you already have a datastructure
13:36:19 <exDM69> pgavin: radix sort for example is O(k*N) for k bits
13:36:20 <pgavin> exDM69: ...
13:36:25 <pgavin> exDM69: that's different
13:36:36 <exDM69> my depth sort is pretty much in the same category
13:36:51 <pgavin> exDM69: ok, well, then its not a traditional sorting algorithm
13:36:54 <exDM69> I'm sorting numeric floating point values, I don't have to do simple comparisons
13:37:01 <exDM69> not looking for "traditional sorting"
13:37:53 <pgavin> it might be possible to use a radix style sort on floats 
13:37:56 <exDM69> djahandarie: by depth sorting I mean sorting objects (cubes, spheres or similar) in a 3d space based on their distance from the viewer or the camera or something
13:38:15 <pgavin> exDM69: sounds O(n log n) to me
13:38:20 <pgavin> might be wrong
13:38:25 <exDM69> one example that gives an almost-in-order solution is to use morton codes and radix sorting
13:38:52 <exDM69> that would be O(n) but the objects in the same "morton bucket" would not be in order
13:39:03 <pgavin> well "almost sorted" is probably possible in O(n)
13:39:12 <pgavin> but not "completely sorted in all cases" 
13:39:20 <exDM69> fully sorted is possible for ints
13:39:38 <exDM69> I also will use some sort of data structure to begin with
13:39:51 <exDM69> I've been thinking about octree + priority queue/heap
13:40:05 <djahandarie> exDM69, I think you can do it in O(n) for polygons, but I'm not sure about 3D objects
13:40:07 <pgavin> sorting in o(n) is impossible in the general case
13:40:16 <pgavin> because it takes o(n) just to verify a sort
13:40:27 <exDM69> but the best I can get with that is O(n log n), but with an opporturinity for map/reduce parellelism
13:40:36 <exDM69> pgavin: I know that, I've done my algorithms courses
13:41:12 <exDM69> all comparison based sorts are O(n log n), so if you want a better complexity you need to cheat somehow,
13:41:37 <pgavin> ok, just making sure :)
13:43:02 <djahandarie> exDM69, all that comes to mind for me is Warnock's standard divide-and-conquer idea for this problem
13:43:47 <djahandarie> Which introduces other things, like screen size
13:44:04 <pgavin> a bsp tree will do it in O(n)
13:44:11 <pgavin> but you have to pre-build that
13:44:25 <exDM69> bsp is not good for cubes
13:44:51 <pgavin> hmm.
13:45:07 <pgavin> are you only using meshes?
13:45:16 <pgavin> no spheres or parametric stuff?
13:45:31 <exDM69> I don't want to depthsort individual polygons but rather want to do a coarse depth sorting on a per-object level so I can do occlusion culling
13:45:37 <exDM69> or alpha blending
13:45:51 <exDM69> alpha blending requires the individual faces to be ordered too
13:45:59 <pgavin> the way i did it for my graphics course what nested bounding boxes
13:46:01 <exDM69> but that's not what I'm currently interested
13:46:13 <pgavin> for a ray tracer anyway
13:46:17 <exDM69> pgavin: a bounding volume hierarchy?
13:46:21 <pgavin> ya
13:46:33 <exDM69> kd trees are faster than bsp/octree/bvh for raytracing
13:46:43 <pgavin> ya, it was quick'n'dirty
13:46:56 <exDM69> bvh is best for collision detection
13:47:15 <pgavin> yeah, he just wanted a sublinear method
13:48:05 <Apocalisp> How about Voronoi culling?
13:48:48 <Apocalisp> oh that uses bvh innit
13:49:31 <exDM69> www.haskell.org takes me to a very wrong place
13:49:36 <exDM69> haskell.org without the www works
13:49:38 <pgavin> yeah, see topic
13:49:45 <pgavin> you can change your /etc/hosts
13:49:50 <exDM69> alright, thanks
13:49:51 <pgavin> or c:\windows\hosts
13:50:11 <monochrom> will take time for your ISP DNS to update
13:50:22 <pgavin> looks like comcast just did recently :/
13:51:26 <monochrom> strangely my ISP DNS didn't change at all
13:55:43 <copumpkin> I want Set (Maybe a) -> Maybe (Set a)
13:55:58 <copumpkin> it's sequence, but Set isn't traversable
13:56:08 <pgavin> right
13:56:08 * Twey scratches his head.
13:56:12 <Twey> What's the Nothing on that?
13:56:18 <pgavin> you can toList / fromList 
13:56:24 <Twey> The empty set?
13:56:25 <hpc> Twey: empty set
13:56:28 <Twey> Ah
13:56:28 <copumpkin> @src sequence
13:56:29 <lambdabot> sequence []     = return []
13:56:29 <lambdabot> sequence (x:xs) = do v <- x; vs <- sequence xs; return (v:vs)
13:56:29 <lambdabot> --OR
13:56:29 <lambdabot> sequence xs = foldr (liftM2 (:)) (return []) xs
13:56:36 <pgavin> Set isn't a monad
13:56:52 <copumpkin> pgavin: it's basically one, and that's not relevant anyway
13:56:58 <copumpkin> it only needs to be traversable
13:57:04 <monochrom> so, if any member at all is a Nothing, you want the final answer to be Nothing too?
13:57:09 <copumpkin> yeah
13:57:12 <Twey> Oh
13:57:15 <Twey> Not the empty set
13:57:17 <Twey> hpc: Liar :þ
13:57:29 <hpc> oh
13:57:31 <hpc> haha
13:57:47 <monochrom> > sequence [Just 0, Just 1, Just 2] :: Maybe [Int]
13:57:48 <lambdabot>   Just [0,1,2]
13:57:57 <monochrom> > sequence [Just 0, Just 1, Just 2, Nothing] :: Maybe [Int]
13:57:57 <lambdabot>   Nothing
13:58:02 <monochrom> interesting
13:58:11 <copumpkin> those Nothings, they're infectious :(
13:58:14 <pgavin> copumpkin: i dunno, I think I saw sequence and thought "Monad" lol :)
13:58:26 <copumpkin> pgavin: well, it needs Maybe to be a Monad
13:58:28 <ddarius> > msum [Just 0, Just 1, Just 2, Nothing]
13:58:29 <lambdabot>   Just 0
13:58:31 <pgavin> right :)
13:58:32 <monochrom> you could modify your spec and not ask for "like sequence" :)
13:58:34 <pgavin> wrong monad
13:58:41 <hpc> :t msum
13:58:42 <lambdabot> forall (m :: * -> *) a. (MonadPlus m) => [m a] -> m a
13:58:56 <pgavin> um
13:59:00 <Twey> Hmm
13:59:04 <pgavin> if Nothing is in your Set
13:59:07 <pgavin> it only exists once
13:59:12 <Twey> sequence . toList has the problem that the output is essentially random
13:59:12 <pgavin> so just check for membership
13:59:22 <Twey> Nice
13:59:38 <copumpkin> but Maybe is commutative
13:59:45 <copumpkin> that's why I don't care
14:02:12 <monochrom> I have a cunning plan. Haskell websites should go down randomly once in a while. The purpose is to drive up #haskell membership. :)
14:03:14 <Twey> monochrom: We're down 30 people
14:03:22 <Twey> We were pushing 700 last week (?)
14:03:41 <monochrom> damn your empirical data!
14:12:22 <Renze> Good evening!
14:12:51 <Renze> Haskell.org doesn't do what I want, so I've got a simple question: how can I check if a Handle is closed?
14:14:00 <kmc> :t Data.Traversable.Sequence
14:14:01 <lambdabot>     Not in scope: data constructor `Data.Traversable.Sequence'
14:14:04 <kmc> :t Data.Traversable.sequence
14:14:05 <lambdabot> forall (t :: * -> *) (m :: * -> *) a. (Data.Traversable.Traversable t, Monad m) => t (m a) -> m (t a)
14:14:06 <pastorn> Renze: hIsClosed
14:14:08 <pastorn> i think
14:14:14 <pastorn> @hoogle hIsClosed
14:14:14 <lambdabot> System.IO hIsClosed :: Handle -> IO Bool
14:14:35 <Renze> Thanks! I'll try it :)
14:19:06 <ddarius> edwinb: I hear you temporarily gave up on that Scala code.  Also what's the plan for Boston HUG?
14:20:17 <ddarius> Crap. edwardk 
14:21:12 <Itkovian> Sigh. haskell.org is fubaring again
14:22:21 <Itkovian> or better: darcs.haskell.org is 
14:24:45 <sepeth> Hi folks, is haskell.org name lost?
14:25:22 <unkanon> sepeth: yes, check the topic
14:25:25 <tommd> How do you parse quotes with Happy?
14:25:38 <tommd> for example:         | '"' var '"'   { StringConst $2 }  -- This doesn't work
14:25:58 <sepeth> unkanon: ah! thanks
14:26:10 <pgavin> tommd: can you backslash them?
14:26:15 <tommd> pgavin: Nope
14:26:23 <tommd> Well, I can, but it doesn't fix anything.
14:26:48 <tommd> The happy error is generic - two of these:
14:26:48 <tommd> Parser.y: 47: unknown identifier ''\"'' 
14:26:51 <kmc> @vixen is Haskell.org down?
14:26:51 <lambdabot> Ooh, functional programmers are so hot!
14:26:57 <tommd> kmc: see reddit
14:27:04 <tommd> kmc: domain name elapsed.
14:27:07 <kmc> i know
14:27:09 <tommd> ok
14:27:11 <kmc> i'm trying to see if lambdabot knows
14:27:27 <tommd> @botsmack
14:27:27 <lambdabot> :)
14:27:32 <medfly> heh
14:28:17 <kmc> @slap haskell.org
14:28:17 * lambdabot slaps haskell.org with a slab of concrete
14:28:20 <pgavin> tommd: are you using alex?
14:28:42 <kmc> tbqh i didn't know people still use alex and happy
14:28:48 <kmc> i think parser combinators are a lot nicer to work with
14:28:54 <tommd> pgavin: Just happy
14:28:55 <kmc> alex and happy might provide better performance, though
14:29:18 <tommd> True
14:29:21 <pgavin> I don't think there are any parser combinator libs that generate LR parsers
14:29:39 <pgavin> only LL, that is
14:29:49 <pgavin> so the grammar is harder to write too
14:30:18 <pgavin> tommd: you might wanna try using a lexer
14:30:29 <c_wraith> There was some talk of a parser combinator lib that used the combinators only to create the grammar, and then had multiple backends for handling the grammar.
14:30:42 <c_wraith> I think that was just at the research level when I heard of it
14:30:55 <pgavin> there's no reason a combinator lib shouldn't be able to make a LR parser
14:31:13 <pgavin> they just don't, I  guess
14:31:26 <c_wraith> well, LL is a much better fit with how people think, in general.
14:31:32 <c_wraith> so long as it's LL(k)
14:31:39 <pgavin> ... LR is easier for me
14:31:41 <c_wraith> No one thinks in LL(1) :)
14:31:47 <pgavin> yeah
14:32:26 <pgavin> yeah, I guess that's what I meant
14:32:33 <pgavin> ReadS style parsers are really easy
14:33:50 <kafee> hi, is there another place to download ghc besides haskell.org(which is down)?
14:33:57 <pgavin> see /topic
14:35:05 <ddarius> copumpkin: I'm going to that pub tonight if you're interested.
14:38:24 <kafee> pgavin: there was a banner hiding it, thanks
14:38:45 <copumpkin> ddarius: thanks, I have a guest coming over tonight and tomorrow, but I'll see if he feels like it and will let you know
14:40:59 <ddarius> copumpkin: Okay.
14:55:49 <quicksilver> well, haskell.org is back up actually
14:55:56 <quicksilver> DNS records got restored hours ago
14:56:07 <quicksilver> although some people might have the holding page IP cached
14:56:25 <revenantphx> My computer is fixed!
14:56:41 <revenantphx> Now I can get back to spending unhealthy amounts of time playing with Haskell...
15:03:22 <roconnor> anyone have experience with PiSigma? http://hackage.haskell.org/package/pisigma
15:12:18 <augur> anyone know if its possible to "unindent" something in latex??
15:12:55 <revenantphx> What do you mean?
15:12:59 <revenantphx> Move it farther to the left?
15:13:02 <augur> yeah
15:13:09 <revenantphx> \-
15:13:11 <revenantphx> I believe.
15:13:12 <augur> i have some proof trees that are too wide for the page and i want to force them left
15:13:21 <revenantphx> \+ moves things right, I believe \- moves left
15:13:30 <revenantphx> that's within tabbing btw
15:13:38 <revenantphx> lemme just find the doc...
15:13:52 <revenantphx> http://www.cs.cmu.edu/afs/cs/local/tex/common/teTeX-1.0/share/texmf/doc/latex/latex2e-html/ltx-58.html
15:14:05 <revenantphx> I don't know about in the general environment though.
15:14:17 <augur> ill see if this works, thanks
15:14:36 <revenantphx> I've had issues with it conflicting with other indentation in weird complex cases, but it should be fine.
15:14:37 <monochrom> it probably fundamentally depends on how you obtained the indentation in the first place.
15:14:58 <augur> yeah, wont work
15:15:09 <augur> it cant tab to the left of where the tabbing starts
15:15:10 <augur> :\
15:15:23 <augur> monochrom: its just the default indentation
15:15:31 <augur> i suppose a negative margin would work too
15:15:35 <monochrom> there are a million default indentations.
15:15:53 <revenantphx> augur: that might work.
15:15:54 <augur> well whatever you get from article document classes :P
15:15:58 <monochrom> there is \indent. there is \begin{itemize}. there is \begin{tabbing}. ...
15:16:02 <augur> i just have an item in text thats too far to the right and i need to move it right
15:16:14 <augur> its just a paragraph, basically. nothing special
15:16:21 <monochrom> \noindent
15:16:49 <augur> that doesnt help tho, cause its already right up against the left page margin
15:16:53 <monochrom> anyway I'm off. so please don't "hpaste"
15:17:04 <revenantphx> hpaste
15:17:16 <revenantphx> Guys, do you prefer gist or hpaste?
15:17:28 <revenantphx> Could you elaborate on your opinion, making sure to mention hpaste as often as possible?
15:18:17 <monochrom> It just seems genetic when a person reports a problem whether he/she pastes actual code or just dodgely "describe in your own words".
15:18:52 <revenantphx> I tend to paste it, and additionally fill the chat with at least 5 lines worth of rant/explanation/info
15:18:55 <monochrom> "o hi how do I cancel type errors?"
15:19:26 <revenantphx> Enterprise Haskell is: overriding that pesky type system.
15:19:56 <kmc> \hspace{-100pt}
15:19:57 <kmc> or something
15:22:24 <ion> I tend to use \setlength{\parskip}{\medskipamount} \setlength{\parindent}{0pt} in my documents, but that’s probably not what augur was after.
15:22:58 <revenantphx> Hey guys, could I get any of you to join in with me in my efforts to assassinate the MLA "commitee"?
15:23:07 <revenantphx> MLA as a standard needs to *dissapear*.
15:23:18 <revenantphx> My moron history teacher thinks MLA is "nicer than Chicago". 
15:23:21 <revenantphx> No, it's not.
15:23:32 <revenantphx> Parenthetical citations lose to foot notes EVERY TIME.
15:23:33 <elliott> revenantphx: What has this got to do with Haskell?
15:23:46 <revenantphx> Well you see...
15:23:58 <revenantphx> I'm using haskell for the killbot AI
15:28:06 <nus> which channel was -blah, again? <-;
15:28:38 * ddarius wonders if there is a #not-not-math channel.
15:30:57 <augustss> ddarius: constructive or classical?
15:31:38 <copumpkin> I think we can all agree there should be a #not-not-not-math though
15:31:42 <ddarius> augustss: Well clearly it would be a place to stick all those non-classical mathematicians.
15:31:48 <nus> #knot-knot-math
15:33:26 <pgavin> #gordian-knot-math
15:35:19 <roconnor> ddarius: #constructive-math
15:36:27 <Eduard_Munteanu> Is there destructive math?
15:36:42 <roconnor> Eduard_Munteanu: it is called paraconsistent math
15:36:55 <Eduard_Munteanu> Oh yeah, that's pretty destructive.
15:37:14 <Eduard_Munteanu> Also considering the axiom of explosion.
15:42:58 <ousado_> what a wonderful conversation
15:43:28 <medfly> MLA?
15:43:36 <medfly> no, I cannot google.
15:55:20 <sm> source links stop around http://hackage.haskell.org/packages/archive/mtl/2.0.1.0/doc/html/Control-Monad-State-Lazy.html#t:StateT .. where might that source be ?
15:55:48 <sm> oh, I can look at the module source
15:57:05 * sm is no wiser.. later then
16:01:02 <roconnor> sm: best to avoid the mtl :)
16:01:37 <sm> oh, is it superseded ? just trying to fix my darcs
16:06:04 <lispy> sm: I already sent in a patch to let darcs compile with any version of mtl
16:06:13 <lispy> sm: I don't know why it wasn't applied yet
16:06:33 <sm> ah.. thx
16:08:07 <Eduard_Munteanu> Hm, haskell.org is back. At least for me.
16:08:49 <lispy> Eduard_Munteanu: yes, it's 100% back modulo DNS caching
16:17:57 <Eduard_Munteanu> I suspect they lower TTLs when they set up "for sale" pages.
16:23:42 <lispy> Eduard_Munteanu: it was a weird thing too.  The domain was paid for at least a year more but they somehow took it.  There is speculation, but no official ruling.
16:25:33 <Eduard_Munteanu> I see.
16:26:31 <monochrom> perhaps Network Solutions has a year-2010 bug
16:28:16 <Makoryu> lispy: Homeland Security, perhaps?
16:28:19 <Makoryu> （　°‿‿°）
16:29:11 <monochrom> Master Control Program
16:29:16 <phao> hey
16:29:16 <Twey> Haha
16:29:24 <Twey> I hear they're re-releasing Tron
16:29:33 <monochrom> yes, today. that's why!
16:29:34 <phao> is it possible, in the haskell's way, to do everything that'd be done in a programming language with assignment?
16:29:39 <Twey> Oh
16:29:45 <monochrom> not releasing. sequel.
16:29:49 <monochrom> err
16:29:49 <Twey> phao: 1) Yes. 2) No.
16:29:50 <overscore1> hey twey
16:29:52 <monochrom> not re-releasing. sequel.
16:29:57 <phao> Twey, how so?
16:30:11 <Twey> Hey, ⁻
16:31:00 <Twey> phao: Yes: 1) It's Turing-complete, so you can write any program you can write in any other Turing-complete language; 2) it has assignment
16:31:17 <phao> Twey, haskell has assignment?
16:31:23 <phao> I mean.. I know you can define a name
16:31:26 <phao> name = value
16:31:32 <monochrom> it has classes, tests, and exams too.
16:31:34 <phao> but you can't change name's value anymore
16:31:35 <c_wraith> IORef and STRef
16:31:40 <phao> monochrom, hahehuauhahueahuahuea
16:31:42 <Twey> phao: No: While you can write any such program, the way you do it, if you don't resort to imperative coding, will generally be different
16:31:49 <c_wraith> Both of those allow changing the value of a mutable cell
16:32:07 <c_wraith> It's just in a library, rather than a language-level primitive
16:32:24 <Makoryu> phao: Haskell has mutable references which work kind of like pointers in C. But instead of special operators for assigning their value, you use functions
16:32:28 <Twey> phao: IO implements a full-featured imperative language.
16:32:31 <overscore1> phao: you can use "do" to hack in that support
16:32:43 <Twey> overscore1: What, no
16:32:48 <overscore1> ah
16:32:50 <phao> right
16:32:54 <Twey> do is just syntax sugar
16:32:54 <phao> so
16:32:58 <Twey> It doesn't change the semantics at all
16:33:20 <phao> haskell is multiparadigm?
16:33:24 <Twey> IO is what allows imperative programming.  do-notation just makes it a bit more like other imperative languages.
16:33:33 <overscore> but it's syntactic sugar for much more complex mechanisms that allow it, no?
16:33:34 <Twey> s/makes it a bit/makes it look a bit/
16:33:38 <Twey> overscore: No
16:33:49 <overscore> then forget what I said
16:34:15 <c_wraith> overscore, I think you have a very over-exaggerated idea of the importance of monads.  IO and ST are special.  Monads and do are not anything special.
16:34:16 <Twey> overscore: It's syntax sugar for a (quite simple) common interface that's useful for, amongst other things, ‘sequential operations’
16:34:32 <Twey> IO isn't the only thing that uses it
16:35:00 <overscore> ok
16:35:04 <phao> monochrom, that was amazing
16:35:06 <phao> =)
16:35:06 <overscore> i'm sill banging my head on functors
16:35:11 <overscore> still
16:35:21 <Twey> overscore: Oh, you're doing the whole tower from the bottom up, huh?  Good on you
16:35:35 <overscore> what'd that be?
16:35:38 <phao> Twey, btw... do you frequent other channels?
16:35:43 <Twey> phao: Many
16:35:53 <Twey> phao: I think I've seen you in ##English
16:35:55 <phao> I remember seeing you in some other channel
16:35:59 <phao> yes!
16:36:04 <phao> that's where.
16:36:26 <Twey> overscore: Some people start out with Monad because it's useful for IO and they want to do IO
16:36:34 <phao> your whois info only shows, to me, that you're here.
16:36:37 <c_wraith> overscore, IO is a Functor, too.  But you never hear anyone talk about haskell being about Functor. :)
16:36:55 <monochrom> Haskell is about Functor.
16:37:03 <c_wraith> Well, never until monochrom 
16:37:09 <Twey> overscore: That's generally considered unwise, now, since it turns out to be much easier to explain Monad once you understand the classes it's built on, like Functor and Applicative
16:37:12 <danr> what is a haskell being? :)
16:37:35 <Twey> phao: Oh, that's Freenode.  I wish I could take that off, but every time I reconnect it gets set again.  :-\
16:37:39 <Eduard_Munteanu> Is there a ##english channel? :)
16:37:43 <Twey> There is
16:37:55 <overscore> Twey: so basically you're saying i'll grasp Monads better if I have pior knowledge with functors?
16:37:59 <Twey> overscore: Yes
16:38:13 <Twey> overscore: You could maybe go and read Typeclassopedia
16:38:13 <Eduard_Munteanu> Ah.
16:38:18 <Twey> overscore: That explains it quite well
16:38:18 <overscore> so, how's it unwise
16:38:50 <overscore> i'm going to finish learnyouahaskell
16:38:54 <Twey> overscore: Basically, Monad is just a combination of Pointed and Functor, plus another special operation called join
16:39:25 <danr> :)
16:39:47 <Twey> Pointed gives you ‘pure’ (or ‘return’ as it's called in Monad), which wraps a value in the type, return :: a -> m a
16:39:51 <overscore> yeah I won't grok monads if i don't get functors
16:39:55 <c_wraith> Functor is really a lot easier to pick up than Monad.  But once you understand what it does, you have basically all the pieces you need to understand what Monad is.
16:40:18 <phao> Twey, so.. if you whois me... you'll only see me in #haskell?
16:40:18 <overscore> i realise the c++ concept is another beast
16:40:29 <Twey> Functor gives you the ability to transform the value inside the type with a function: fmap :: (a -> b) -> f a -> f b
16:40:32 <monochrom> Functor just says you may use fmap. The type sig of fmap tells you 90% of the information about it. There is nothing to understand.
16:40:38 <c_wraith> overscore, yeah, the C++ concept is "we don't have first class functions"
16:40:51 <c_wraith> err, actually, it's "we don't have closures"
16:40:55 <Twey> And Monad gives you the ability to ‘collapse’ a doubly-wrapped value into a singly-wrapped value
16:41:02 <Twey> join :: m (m a) -> m a
16:41:44 <monochrom> If anything just admire at a million examples like "[] is a Functor, so you may use fmap :: (a->b) -> [a]->[b]", "Maybe is a Functor, so you may use fmap :: (a->b) -> Maybe a -> Maybe b", etc.
16:41:46 <Twey> phao: Yep… it only allows you to see channels you share with the person you're querying
16:42:04 <Twey> I think Maybe is the easiest example of a Functor
16:42:15 <Twey> > fmap (+ 1) Nothing
16:42:16 <lambdabot>   Nothing
16:42:18 <Twey> > fmap (+ 1) (Just 3)
16:42:19 <lambdabot>   Just 4
16:42:20 <Twey> Tada
16:42:36 <overscore> what I don't undersand is how we can take the value "inside" an unknown opaque type
16:42:43 <c_wraith> overscore, you can't.
16:42:44 <overscore> or whether it makes sense even
16:42:48 <Twey> overscore: It doesn't have to be literally inside it
16:42:56 <Twey> overscore: It's just an interface
16:43:13 <c_wraith> overscore, what happens instead is that every type that is an instance of Functor has its own implementation of fmap that is how you do it *for that type*
16:43:14 <Eduard_Munteanu> Every monad instances defines those on its own.
16:43:17 <monochrom> this is why fmap sends your a->b function inside. no one is taking anything outside. in fact there is probably nothing to take outside.
16:43:23 <Twey> overscore: In the case of IO, for example, Functor allows us to pretend that we can reach inside and change the value inside
16:43:30 <Eduard_Munteanu> (though unfortunately 'join' isn't part of the typeclass definition)
16:43:44 <Twey> overscore: In reality, of course, there is no value inside, and the transformation will be applied after we get the value we want
16:43:59 <Twey> > join (Just Nothing)
16:44:00 <lambdabot>   Nothing
16:44:03 <Twey> > join (Nothing)
16:44:04 <lambdabot>   Nothing
16:44:09 <Twey> > join (Just (Just 5))
16:44:10 <lambdabot>   Just 5
16:44:23 <monochrom> If you write "newtype Wrapper a = Whee", you get a Functor. "instance Functor Wrapper where fmap f Whee = Whee".
16:45:00 <kmc> too strict
16:45:08 <monochrom> oh, oops.
16:45:14 <monochrom> fmap f _ = Whee
16:45:24 <Twey> fmap _ _ = Whee, even :þ
16:45:39 <Twey> fmap = const id
16:45:44 <overscore> hrrm
16:45:54 <monochrom> Note how nicely the type "Wrapper Int" does not "contain" an Int and so there is nothing to take out.
16:46:28 <monochrom> Instead fmap sends f inside Wrapper. But since Wrapper is so dumb inside, there is nothing for f to do, and so we can even discard f.
16:47:40 <overscore> pure "hey" Nothing is still "hey"
16:47:53 <monochrom> The whole point of Functor, Applicative, Monad is no one is extracting anything. We're only sending more things into those black holes.
16:47:54 <Twey> overscore: ‘pure "hey" Nothing’ is a type error
16:48:10 <overscore> ghci doesn't bail out at least
16:48:14 <Twey> overscore: ‘pure’ only takes one argument: it doesn't yield a function (well… usually)
16:48:27 <Twey> Yeah, you've got an Applicative instance for functions in scope
16:48:54 <Twey> For functions, pure = const
16:49:13 <Twey> So pure "hey" Nothing = const "hey" Nothing = "hey"
16:49:30 <Twey> Functions are a rather confusing instance of most things, though.
16:49:58 <c_wraith> I intentionally used liftM2 for functions recently.
16:50:02 <monochrom> functions die die die
16:50:09 <c_wraith> functions the the the?
16:50:13 <kmc> :t fmap fmap fmap fmap fmap
16:50:14 <lambdabot> forall a (f :: * -> *) a1 b. (Functor f) => (a1 -> b) -> (a -> a1) -> f a -> f b
16:50:29 <monochrom> funktions tod tod tod
16:50:42 <c_wraith> :t liftM2 (>>) -- is what I used, specifically
16:50:43 <lambdabot> forall (m :: * -> *) a b (m1 :: * -> *). (Monad m, Monad m1) => m1 (m a) -> m1 (m b) -> m1 (m b)
16:51:03 <kmc> c_wraith, i once used (>>) where i meant liftM2 (>>), which was an annoying mistake not caught by the type system
16:51:11 <kmc> (>>) for functions is perfectly well defined and entirely useless
16:51:24 <kmc> > (pred >> succ) 7
16:51:24 <lambdabot>   8
16:51:30 <c_wraith> heh.  oops
16:51:44 <Twey> c_wraith: I intentionally use liftM2 for functions all the time
16:51:50 <shachaf> (>>) should give a warning on commutative monads. :-)
16:51:55 <Twey> I think it's probably my most common use of liftM2
16:51:57 <kmc> i extensionally use liftM2 for functions all the time
16:52:04 <c_wraith> liftM2 is actually pretty convenient for functions
16:52:07 <KSkrzet> i'm planning to have several GHC versions installed and kept completely separate. therefore i want to keep several cabal-install versions as well. is there a way to keep config file for different versions separate or do i have to swap .cabal/config each time i switch to different GHC?
16:52:14 <Twey> kmc: Heh
16:52:37 <Twey> kmc: And if you set the gradient function of a function to zero, you can find a pencil?  ;)
16:52:37 <monochrom> I accidentally liftM2
16:53:51 <Saizan> KSkrzet: why do you want to keep different cabal-install versions?
16:54:18 <monochrom> not really different cabal-install versions. different .cabal/config files.
16:54:53 <c_wraith> I think there's an environment variable you can set to tell cabal where to look for its config file
16:54:57 <monochrom> but actually I keep different cabal-install versions in sync with different haskell platform versions too.
16:55:18 <c_wraith> Well, the entire cabal settings directory, really
16:56:03 <Saizan> there's --config-file=
16:56:43 <Saizan> anyhow, cabal install will by default avoid mixing libs from different ghc installations
16:57:14 <Saizan> so unless you have extra needs there's no need to use different config files just for that
16:57:21 <monochrom> but breaks havoc with the haddock docs
16:58:25 <KSkrzet> Saizan: GHC 7.0.1 requires never version of Cabal library, and cabal-install needs to be linked against that
16:58:49 <KSkrzet> also, haddock doesn't really work with multiple versions of GHC
16:58:51 <Saizan> ah, true, but i'm pretty sure you can add $compiler to the docdir to solve that
16:59:12 <Saizan> KSkrzet: you can use the newer cabal-install with older ghcs
16:59:13 <monochrom> I should do that.
16:59:43 <monochrom> .cabal/config is the most well-documented config file in the world
17:00:08 <KSkrzet> well, I didn't know about $compiler for sure
17:00:11 <KSkrzet> thanks for the tip
17:00:23 <KSkrzet> I think I may work out something
17:01:08 <KSkrzet> too bad there are bugs in Cabal/cabal-install that make me delete my entire installed package base every few months
17:01:48 <Saizan> (btw, you can delete the packages for just one ghc, since ~/.ghc/ has specific subdirectories)
17:02:34 <KSkrzet> yes, the problem is, if you have say, template-haskell-2.4.0.1
17:02:49 <KSkrzet> and it's installed without some flags
17:02:56 <Saizan> i don't know how to make cabal pick the right haddock for the right ghc, you can manually override with --with-haddock though
17:03:16 <KSkrzet> good idea too, I will try that
17:03:19 <KSkrzet> anyway
17:03:35 <KSkrzet> then if you install a package that requires dynamic linking for example
17:03:51 <KSkrzet> then it will install template-haskell in --user package dir
17:03:55 <monochrom> I put the ghc-haddock-cabal triplet under /usr/local/haskell-platform-2010.2.0.0/bin
17:04:07 <KSkrzet> (and the first is in --global)
17:04:17 <monochrom> or under /usr/local/haskell-platform-2009.2.0.2/bin if it's another version
17:04:31 <KSkrzet> it will then reinstall this second package forever each time it installs anything that depends on it
17:04:41 <monochrom> so I just have to change PATH to get a different version
17:04:59 <Saizan> yeah, that's a long-standing bug
17:05:06 <KSkrzet> pretty frustrating one
17:05:26 <KSkrzet> and lately i just stepped into a number of other bugs
17:05:36 <KSkrzet> just while trying to install 'timeplot'
17:05:38 <Saizan> basically it can't cope with the same version of the same package installed multiple times
17:05:51 <monochrom> ghc can't anyway
17:06:16 <Saizan> ghc can if instructed appropriately :)
17:06:38 <KSkrzet> basically i managed to damage my database just with 'cabal install' command without any special ninja stuff
17:07:36 <KSkrzet> monochrom: PATH is a good thing, but for good separation I also need to have .cabal/config different for different cabal's 
17:07:45 <KSkrzet> * cabal-install's
17:08:14 <KSkrzet> but the $compiler trick might just be good for that
17:09:21 <roconnor> it is sebastian's reddit birthday!
17:09:45 <monochrom> reddit tod tod tod
17:10:00 <Cale> http://ngrams.googlelabs.com/graph?content=sprynge%2Ctrappe&year_start=1750&year_end=2000&corpus=4&smoothing=7 -- new google toy is cool
17:10:02 <Saizan> ($compiler and friends are documented by example in the commented out defaults in ~/.cabal/config)
17:11:02 <Cale> http://ngrams.googlelabs.com/graph?content=yes%2C+no&year_start=1750&year_end=2000&corpus=4&smoothing=7 -- this one is amusing
17:12:14 <Saizan> hah
17:26:23 <parcs> is there any way to have `cabal configure` automatically install missing dependencies?
17:26:39 <monochrom> no
17:26:43 <kmc> 'cabal install' does
17:36:32 <pastorn> I'm gonna make a module to handle a specific file format, where in my module heirarchy should i put it?
17:36:37 <Eduard_Munteanu> Bynbo7 is Axman6?
17:36:44 <pastorn> Filetype.X ? Data.XFile ?
17:37:27 <dankna> hm
17:37:44 <monochrom> Text.XML.XFile
17:38:01 <pastorn> monochrom: not XML
17:38:12 <pastorn> this is a reverse engineered proprietary file format
17:38:55 <Eduard_Munteanu> It makes me wonder what was at 5 :)
17:41:33 <pastorn> Codec.X ?
17:41:51 <augustss> yo!
17:42:03 <pastorn> augustss: hello
17:43:55 <monochrom> you may benefit from a variety of examples
17:44:17 <dankna> not Codec - a codec is not just a file format, it's a stream-based one
17:44:39 <monochrom> pdf and svg are file formats. they go under Graphics
17:44:48 <pastorn> my file format is a TOC and then a lot of data which is zipped, all concatenadet
17:44:53 <hpc> Codec.Proprietary.X
17:45:08 <dankna> Data.Format I guess
17:45:24 <monochrom> mpeg is a file format. it goes under Media
17:45:25 <hpc> er, that
17:45:40 <pastorn> the TOC says gives the filename, a 'filetype', offset, compressed and uncompressed size
17:45:46 <monochrom> various xml-based file formats go under Text.XML
17:46:04 <pastorn> bah! i'll just do File.X
17:46:04 <monochrom> arguably, programming languages are file formats too. they go under Language
17:46:15 <pastorn> or maybe Container.X
17:46:20 <pastorn> yes, Container, that's it
17:46:28 <dankna> Container, good call
17:46:30 <monochrom> I think these are enough examples for you to learn that "I have a file format" is simply irrelevant.
17:47:13 <pastorn> monochrom: yeah, but this format is too general to fall into one category... stuff that's stored are images, videos, sounds, text files and some other random data
17:47:46 * pastorn refactorizes like crazy
17:51:26 <mtnviewmark> File.Container.Foo
17:51:28 <mtnviewmark> I'd say
17:51:52 <pastorn> ok, so i've been using lazy bytestrings so far (testing on 100 MB files isn't fun if it's strict), but if i'm using Handles and seek instead of readFile, will i avoid giant memory allocations?
17:52:03 <pastorn> so i have a 100 MB file, but only need the first 2 MB
17:52:49 <dankna> the sense in which lazy bytestrings are lazy is
17:53:04 <pastorn> well, i'm thinking of switching to strict
17:53:15 <dankna> if you concatenate or truncate them, you get an immediate result on O(1) and possibly a later result slower
17:53:17 <pastorn> well, not thinking about, but curious about pros/cons
17:53:28 <dankna> at least that's my understanding
17:54:01 <pastorn> so later on i might want to cast my bytestrings to something like a Ptr Word8
17:54:22 <dankna> cast?  heh
17:54:28 <pastorn> "convert"
17:54:30 <pastorn> whatever
17:55:06 <Saizan> if you read just 2 megabytes in a strict bytestring you'll just consumed 2 megabytes + an handful of works for the metadata
17:55:35 <pastorn> ok
17:56:03 <pastorn> so hGet will only consume as much as number i feed it?
17:56:23 <pastorn> (i have to grab some header data before i can get to my 2 MB)
17:56:38 <Saizan> ?hoogle hGet
17:56:38 <lambdabot> Data.ByteString hGet :: Handle -> Int -> IO ByteString
17:56:38 <lambdabot> Data.ByteString.Char8 hGet :: Handle -> Int -> IO ByteString
17:56:38 <lambdabot> Data.ByteString.Lazy hGet :: Handle -> Int -> IO ByteString
17:56:48 <Saizan> yeah, afaiu
18:04:54 <pastorn> heh, why does installing lambdabot give me Language.Brainfuck ?
18:05:02 <hpc> pastorn: fun!
18:05:18 <Saizan> because it has a brainfuck interpreter
18:07:25 <pastorn> Saizan: do you know how to use it? (show me?)
18:07:52 <Saizan> @bf ++++
18:07:52 <lambdabot>  Done.
18:08:04 * Saizan doesn't know brainfuck
18:08:04 <pastorn> ehm... "ok"
18:08:18 <pastorn> @bf ++-+-+[+++]
18:08:18 <lambdabot>  Done.
18:08:28 <Hunner> @bf +++.
18:08:28 <lambdabot>  Done.
18:08:41 <pastorn> i have no clue what that does, i just know the syntax, sort of
18:08:49 <pastorn> Hunner: what does . do?
18:08:58 * Hunner thought it was the print command
18:09:28 <Saizan> 3 doesn't print to anything visible, probably
18:09:40 <Hunner> @bf ++++++++>+++++++++<.>.
18:09:40 <lambdabot>  Done.
18:09:45 <Hunner> :(
18:09:55 <pastorn> Hunner: could you write an infinite loop?
18:10:05 <Hunner> @bf [+]
18:10:05 <lambdabot>  Done.
18:10:13 <pastorn> ehm...
18:10:24 <Saizan> maybe @bf is actually something else :D
18:10:29 <Saizan> or it got disabled
18:10:37 <Hunner> @bf +[+]
18:10:38 <lambdabot>  Done.
18:10:40 <Saizan> @help list
18:10:40 <lambdabot> list [module|command]
18:10:40 <lambdabot> show all commands or command for [module]. http://code.haskell.org/lambdabot/COMMANDS
18:10:43 <ion> @dc [lolssdsl0lqx]sx[1+lddd*lld*-ls+dsdrll2**lo+dsld*rd*+4<kd15>q]sq[q]9ksk[d77/3*2-ss47lxx-P1+d78>0]s00[d23/.5-3*so0l0xr10P1+d24>u]dsux
18:10:43 <lambdabot> Maybe you meant: do rc
18:10:47 <ion> What, no dc interpreter? ;-)
18:10:55 <Hunner> I bet it doesn't do anyting. It all seems liniar time with no IO
18:11:12 <monochrom> I don't know how to use dc anyway.
18:12:41 <ion> Paste that to dc’s stdin, or dc -e 'that'. But beware, dc has the ! command that runs system commands. I assure that program is safe, but of course, there’s no reason to trust me. :-)
18:14:38 <ion> Its output: http://johan.kiviniemi.name/stuff/dc/mandel.output
18:14:55 <dankna> heh that's pretty neat
18:15:08 <overscore> cool
18:16:21 <ion> A link to the source i pasted, too: http://johan.kiviniemi.name/stuff/dc/mandel.dc
18:19:10 <overscore> nice sqrt(8)
18:25:34 <Saizan> @bf ++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.
18:25:34 <lambdabot>   Hello World!
18:26:49 <dankna> @bf >>>>>++++++++[<+++++++++>-]<+[>>[>]+[<]<-]>++++++++++[<+++++
18:26:49 <dankna> +++++>-]<[>>[+>]<[<]<-]<++++++++[>++++++++[>>->->->>>>>>>>>>
18:26:49 <lambdabot>  Done.
18:26:49 <dankna> >->>>->>>>>>->->->->>->>>->>>>->>>>>->->>>>>>->>>>->>>>>->->
18:26:49 <dankna> >>>>->>>->>>>>>>->-[<]<-]>>++>++>->>+>++>++>+>>>>++>>->+>>->
18:26:49 <dankna> >>>++>>+>+>+>--->>->+>+>->++>>>->++>>+>+>+>--->>-->>+>>->+>+
18:26:50 <dankna> >>->>+>++>+>+>->+>>++>++>->>++>->>++>+>++>+>>+>---[<]<<-]>>>
18:26:52 <dankna> ++++>++++>+++>--->++>->->->>[-]>->-->[-]>+++>++>+>+++>--->>>
18:26:54 <dankna> --->[-]>+>+>+>--->[-]>+++>++>+>+++>->+++>>+++>++>---->->->+>
18:26:56 <dankna> --->[-]>->---->-->>+++>++>+>>+++>->++>++>+>->+++>+++>---->--
18:27:00 <dankna> >-->+++>++++>->+++>---->--->++>>+>->->---[[<]<]+++++++++[<+<
18:27:02 <dankna> +++++++++++>>-]<<[>>>>>[<]>[.>]>--[>.>]<[<<]>++>>>[.>]>[>]>[
18:27:04 <dankna> .>]<[[<]<]>>[.>]>--[>.>]<[<<]>++>>>[.>]>[.>]>[>]>[.>]<[[<]<]
18:27:05 <Saizan> ...
18:27:06 <dankna> <<[<]>>>+<[>-]>[>]<[+++++++++[<+<->>>>>+<<<-]+<<[>>-]>>>[<]<
18:27:08 <dankna> <<++++++++++>>[>>[-]+<<-]>>-<<]>>>-[>]>-<<[<]>[.>]>--[>.>]<[
18:27:10 <dankna> <<]>++>>>[.>]>[>]>[.>]<.[[<]<]<<[<]>>-<-]
18:27:12 <dankna> oops
18:27:12 --- mode: ChanServ set +o Saizan
18:27:18 <dankna> sorry
18:27:20 --- mode: Saizan set -o Saizan
18:27:20 <dankna> that wouldn't have worked anyway, as it would have been too long for an irc line
18:27:23 <danderson> oops is correct :)
18:27:30 <augustss> double oops
18:27:51 <dankna> I appear to have almost tripped Saizan's mental spam-filter, heh
18:28:19 <danderson> more like DoS protection at that point :P
18:28:36 <Saizan> well, since such flooding can't be stopped at the source, my usual solution is to ban the user temporarily :)
18:29:07 <Saizan> though i guessed it wouldn't be too long in this case
18:29:45 <dankna> well, anyway, yeah, I should have exercised better judgement
18:30:22 <ion> 0) it can be stopped at the source (/server purge in irssi), 1) decent clients ask for confirmation before sending multiline pastes in the first place. :-)
18:30:48 <dankna> yeah, xchat aqua is a port of a very old version of xchat, and is by no means a decent client.
18:31:42 <pastorn> dons_: what's the idea behind the pony package? what was your thought process?
18:31:53 <dankna> @hackage pony
18:31:53 <lambdabot> http://hackage.haskell.org/package/pony
18:32:26 <Saizan> pastorn: that people asking for a pony deserve unicorns?
18:33:13 <ion> I wish one could browse the package’s source code in hackage.haskell.org, à la CPAN.
18:33:18 <pastorn> dons_: also, how far have you gotten with pony-2.0 ?
18:33:28 <pastorn> i'd really like a sequel
18:33:43 <dankna> yes, CPAN envy is a common problem :)
18:33:59 <pastorn> ion: i have no clue as to what that is... example linky?
18:34:37 <Saizan> ion: the haddock docs have links to the sources
18:34:55 <Saizan> which is not exactly the same, i guess
18:35:08 <ion> pastorn: For instance, hit “Source” in http://search.cpan.org/~dconway/Acme-Bleach-1.12/lib/Acme/Bleach.pm
18:35:43 <ion> where http://search.cpan.org/~dconway/Acme-Bleach/ would be akin to http://hackage.haskell.org/package/pony
18:36:23 <dankna> ahahahaha even the source to the program itself is bleached
18:37:08 <pastorn> wait, is this i a whitespace program?
18:41:35 <overscore> Twey++
18:49:20 <sshc> How should I catch any exception, run an action, and re-throw it to an outside handler?
18:49:37 <ion> > let do_not f = mzero `asTypeOf` f in do_not $ do x <- [1,2,3]; return x+1
18:49:38 <lambdabot>   No instance for (GHC.Num.Num [a])
18:49:38 <lambdabot>    arising from a use of `e_11231' at <in...
18:49:56 <ion> whoops, forgot ()
18:50:10 <ion> which kind of ruined the joke
18:51:19 <sshc> Will throwing the SomeException exception work?
18:51:34 <ion> And pointfree: do_not = asTypeOf mzero :-P
18:53:26 <Saizan> sshc: btw, onException
18:56:45 <sshc> Saizan: Ah, thanks.  Out of mere curiosity, would using catch on a function :: SomeException -> IO () which performs an action and then throws that exception have equivalent behaviour?
18:57:57 <Saizan> sshc: yeah, that's how it's implemented, i think
19:05:00 <pastorn> System.IO.Unsafe.Really.IMeanIt.reallyReallyAbsurdlyUnsafePerformIOShameOnYou
19:06:59 <Kaidelong> http://www.haskell.org/haskellwiki/Maintaining_laziness#Checking_laziness
19:07:04 <Kaidelong> this proposes replacing
19:07:17 <Kaidelong> many :: StateT [Word8] Maybe a -> StateT [Word8] Maybe [a]
19:07:19 <Kaidelong> with
19:07:27 <Kaidelong> many :: StateT [Word8] Maybe a -> StateT [Word8] Identity [a]
19:07:33 <Kaidelong> but why not just
19:07:41 <Kaidelong> many :: StateT [Word8] Maybe a -> StateT [Word8] [] a
19:27:43 <Gracenotes> I wonder if a collection types that contained details about asymptotic behaviors of various functions on the collection might allow for neat optimizations
19:27:54 <Gracenotes> I wonder what it would take to do something like on the type level
19:41:23 <dmpeters63> hello
19:41:54 <new-lisper> dmpeters63: hello
19:53:52 <imcmeans> Hey guys - I'm going through project Euler to teach myself haskell, and I'm confused about why something doesn't work:
19:54:08 <imcmeans> executing this seems to hang: fibs = 0 : 1 : [fibs!!n-2 + fibs!!n-1 | n <- [2..]]
19:54:25 <revenantphx> one of the few pieces of code I have memorized...
19:54:31 <imcmeans> as a definition of the fibonacci infinite list. Why is that?
19:54:45 <revenantphx> > let fibs = 0:1:[a+b|(a,b) <- zip fibs (tail fibs] in take 20 fibs
19:54:46 <lambdabot>   <no location info>: parse error on input `]'
19:54:56 <revenantphx> > let fibs = 0:1:[a+b|(a,b) <- zip fibs (tail fibs)] in take 20 fibs
19:54:57 <lambdabot>   [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181]
19:55:09 <roconnor> imcmeans: more brackets
19:55:16 <revenantphx> Thats the definition I know... >_<
19:55:17 <imcmeans> yeah, I see that there are other definitions that do work, but I'm curious why mine doesn't.
19:55:32 <revenantphx> Hm, I'm sure someone here can answer it in a couple seconds.
19:55:34 <roconnor> > let fibs = 0 : 1 : [fibs!!n-2 + fibs!!n-1 | n <- [2..]] in fibs
19:55:37 <lambdabot>   mueval-core: Time limit exceeded
19:55:43 <roconnor> > let fibs = 0 : 1 : [fibs!!(n-2) + fibs!!(n-1) | n <- [2..]] in fibs
19:55:44 <lambdabot>   [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946...
19:55:48 <revenantphx> :)
19:55:52 <imcmeans> ah! thanks!
19:56:00 <revenantphx> order of operations strikes again.
19:56:10 <revenantphx> damn you fixity!
19:56:22 <imcmeans> What does the "in fibs" at the end mean?
19:56:32 <imcmeans> is that to make it work as a let expression?
19:56:33 <revenantphx> lambdabot is like ghci, you have to use let/in
19:56:37 <roconnor> let x = 7 in x + x
19:56:42 <roconnor> > let x = 7 in x + x
19:56:43 <lambdabot>   14
19:56:55 <revenantphx> > let x = 7
19:56:56 <lambdabot>   not an expression: `let x = 7'
19:57:01 <revenantphx> see what I mean?
19:57:11 <revenantphx> It's actually *not* like ghci, bad analogy.
20:10:24 <DrSyzygy> What's going on with planet haskell and unicode?
20:10:40 <DrSyzygy> My latest blog post looks kinda screwy, in the “full of unicode escapes”-sense.
20:15:12 <lars9> what happened to haskell.org?
20:16:15 <sciolizer> Yeah. Is it down or is the DNS just out of date. Can we change our /etc/hosts to point to a different ip?
20:18:37 <revenantphx> When most people just say, "Shit, it's down.", #haskell (and most freenode chans) say "How can I edit my hosts file?"
20:19:03 <pastorn> it never was down for me...
20:19:20 <revenantphx> it's not down for me actually.
20:19:24 <pastorn> what's this problem everyone keeps talking about... though i rarely visit the front page, i must say
20:19:32 <pastorn> i always go directly to hackage.haskell.org
20:19:52 <sciolizer> both haskell.org and hackage.haskell.org are down for me
20:20:01 <sciolizer> Probably a DNS TTL issue.
20:20:13 <pastorn> TTL = Time To Live?
20:20:16 <sciolizer> yeah
20:20:21 <pastorn> i suck at TCP/IP
20:20:26 <pastorn> why would that be an issue?
20:20:27 <sciolizer> Would you mind running "host haskell.org" and "host hackage.haskell.org" for me?
20:20:44 <pastorn> haskell.org has address 78.46.100.180
20:20:46 <pastorn> hackage.haskell.org has address 69.30.63.204
20:21:05 <pastorn> so, how does TTL factor in to this?
20:21:51 <sciolizer> pastorn: somewhere along the chain of servers that my machine asks to resolve the address haskell.org to an ip address, I'm hitting a machine whose cache has not been updated to the new ip.
20:22:24 <pastorn> oh, can't you ask the source instead?
20:22:26 <Bynbo7> do we own haskell.org again or not?
20:22:32 <pastorn> well, some machine beyond that machine?
20:22:43 <pastorn> schroedinbug: traceroute to the IP or something
20:23:01 <sciolizer> For some reason, haskell.org resolves to 78.46.100.180 for me, but I still get the network solutions landing page.
20:23:17 <sciolizer> However, adding 69.30.63.204 to my /etc/hosts allows me to connect to hackage.haskell.org. Thanks pastorn!
20:23:35 <pastorn> i'm awesome - know
20:23:37 <pastorn> (lolwut?)
20:23:49 <pastorn> *i know
20:23:59 <revenantphx> You know what I'd like as a shell feature...
20:24:19 <revenantphx> Some way to run something in the background, *but get notified when it finishes*
20:24:31 <revenantphx> and somehow cause it to lock things to keep you from unwittingly f'ing it all up.
20:24:41 <pastorn> revenantphx: everything this already does? http://plan9.bell-labs.com/sys/doc/rc.html
20:24:47 <revenantphx> Pretty much.
20:25:07 <revenantphx> Plan 9 just didn't catch on XD.
20:25:27 <pastorn> why doesn't google seize the moment with ChromeOS
20:25:29 <pastorn> ?
20:25:33 <revenantphx> ?...
20:25:33 <lambdabot> Not enough arguments to @.
20:25:38 <revenantphx> Because ChromeOS is a web browser.
20:25:40 <pastorn> They should just build something new and pretty on top of Plan9
20:25:50 <revenantphx> pastorn...
20:25:56 <revenantphx> Plan9 is based on "lets have everything be filesystem devices"
20:25:56 <pastorn> :/
20:26:09 <revenantphx> ChromeOS is based on "let's *not have a filesystem*"
20:26:12 <pastorn> revenantphx: sure, but that can be virtual files
20:26:29 <revenantphx> Someone could make an in-browser plan9 virtual shell service, I'm sure.
20:27:02 <pastorn> revenantphx: and seriously, how much of the actual OS implementation is necessary for something like Chrome OS?
20:27:17 <revenantphx> Let me put it this way.
20:27:25 <revenantphx> It needs display drivers, and it needs something to run Chrome.
20:27:26 <pastorn> what they need is some fast rendering libraries and sound
20:27:29 <revenantphx> *thats about it*
20:27:33 <revenantphx> Yes, and sound.
20:27:36 <pastorn> yeah, precisely
20:27:41 <revenantphx> kernel + display/sound
20:27:48 <revenantphx> That's kind of the idea though.
20:27:52 <pastorn> so why not just write drivers for plan9?
20:28:06 <pastorn> i'd really like to try it out sometime...
20:28:07 <revenantphx> I think you're missing the concept behind ChromeOS.
20:28:15 <revenantphx> Why not just *use plan9*
20:28:35 <pastorn> revenantphx: i have a dual monitor setup with an ATI card and i haskell *a lot*
20:28:36 <Kaidelong> not made here
20:28:53 <pastorn> revenantphx: i'd never get anything running :/
20:28:57 <revenantphx> pastorn: cool story.
20:29:10 <revenantphx> So... is haskell a verb?
20:29:10 <Kaidelong> revenantphx: why did google make Dalvik?
20:29:20 * edwardk waves hello.
20:29:20 <pastorn> revenantphx: of course!
20:29:23 <Adamant> they didn't, they bought it
20:29:25 <Adamant> IIRC
20:29:30 <revenantphx> Kaidelong: because they for some reason wanted Java syntax (god knows why).
20:29:31 <Adamant> it was part of their acquisition
20:29:51 <Kaidelong> ah okay that makes more sense then
20:29:55 <revenantphx> That was not a good move imo...
20:30:05 <revenantphx> but then again, I have a semi-irrational hatred of Java.
20:30:09 <Adamant> at the time it was created (2005-ish), Java syntax looked pretty reasonable
20:30:15 <Kaidelong> Java's runtime is alright
20:30:22 <Kaidelong> well, the Sun one is
20:30:33 <Kaidelong> Dalvik had some weird limitations when I had to do a project for android
20:30:41 <revenantphx> Ahem.
20:30:43 <revenantphx> Dalvik...
20:30:43 <kmc> revenantphx, making Dalvik is neither necessary or sufficient for having "Java syntax"
20:30:45 <revenantphx> is not a JVM.
20:30:47 <Kaidelong> I think the most crippling one was that it didn't let you link libraries dynamically
20:30:49 <revenantphx> Dalvik... is not Java.
20:31:00 <kmc> they could have used the stock JVM.  they could have compiled Java to ARM assembly directly
20:31:03 <danderson> revenantphx is correct.
20:31:12 <danderson> it's a virtual machine optimized for constrained embedded systems
20:31:14 <revenantphx> I did some research a while back.
20:31:18 <Adamant> kmc: they didn't want to use the stock JVM due to licensing issues
20:31:19 <revenantphx> danderson: yep.
20:31:19 <revenantphx> An
20:31:21 <danderson> which happens to have a binary translator for JVM bytecode.
20:31:35 <revenantphx> And Dalvik is register based, not stack based...
20:32:00 <revenantphx> the bytecode isn't even the same.
20:32:08 <Kaidelong> either way, getting my project working on android was not trivial because the program that got compiled ended up being much larger
20:32:13 <revenantphx> There's a conversion utility (which according to people Ik now, doesn't even work)
20:32:17 <Kaidelong> and couldn't fit on the phone
20:32:20 <danderson> the internals of dalvik allows it to share a lot of data between different running apps, much moreso than regular JVM code running on a linux VM.
20:32:22 <revenantphx> So basically its a restricted, optimized not-quite-java bytecode interpreter, which interprets stuff in a completely different way.
20:32:41 <revenantphx> Yeah, the main bit I think is that multiple VM's are run.
20:32:46 <danderson> revenantphx: it also has a JIT since recent releases, iirc, but you are quite correct on the general principle
20:32:50 <revenantphx> Yes, JIT as of 2.2
20:33:23 <revenantphx> Is Dalvik a clean room implementation?
20:33:25 <danderson> the main point is that things like static data used by libraries can be safely shared between different VMs, which the JVM doesn't allow
20:33:47 <danderson> so you have a single instance of the system runtime for all running Dalvik processes, for example.
20:33:47 <edwardk> obvious in retrospect newsflash, you can tweak packrat parsing to handle layout by including the layout stack as part of the 'position' you memoize (but you only need to include it in the position if the parser actually needed to know something about the indentation depth)
20:34:19 <danderson> revenantphx: given that it's not really java, I don't think cleanroom applies
20:34:26 <edwardk> this made me very happy today =)
20:34:27 <revenantphx> I guess.
20:34:34 <revenantphx> danderson: However, the point is that multiple VM's are run.
20:34:40 <revenantphx> It's *not* a single shared VM on the device.
20:34:41 <danderson> yup.
20:34:50 <danderson> to provide isolation between applications and processes
20:34:51 <Kaidelong> oh I see what you guys were talking about now
20:35:00 <danderson> so that you don't take the entire phone down if a single VM crashes
20:35:03 <revenantphx> Guys, go make a haskell phone.
20:35:10 <revenantphx> I can see it now...
20:35:17 <revenantphx> "You have to be in the PhoneCall monad"
20:35:24 <Kaidelong> not that google should have been using Plan9 rather than starting from scratch but that chrome OS would be easier to implement atop Plan9?
20:35:33 <revenantphx> Kaidelong: *this is just not true*
20:35:44 <revenantphx> Plan9 and ChromeOS have CONFLICTING DESIGN PHILOSOPHIEs.
20:35:56 <pastorn> Kaidelong: that's what i meant...
20:36:00 <revenantphx> ChromeOS is supposed to basically not have an OS beyond being able to run the web browser XD
20:36:03 <danderson> well, arguably you could use the plan9 kernel, whatever its name is these days, instead of a linux kernel
20:36:17 <revenantphx> danderson: yes.
20:36:23 <Kaidelong> then why not go for something like singularity really
20:36:25 <revenantphx> However the Linux kernel is more actively supported.
20:36:33 <edwardk> yeah but then the carriers would want to make sure that the phone call monad and the wifi monad lacked a coproduct to keep their costs low, etc.
20:36:33 <revenantphx> I can see the logic behind that choice.
20:36:37 <danderson> but: google has linux expertise in house, much moreso than plan9 expertise; and working with partners on linux is much easier than trying to sell them on the concept of writing drivers for plan9
20:36:38 <revenantphx> At least its not NT 5
20:36:48 <revenantphx> danderson ^
20:36:50 <revenantphx> Oh you're right.
20:36:56 <revenantphx> They could piggyback on existing linux drivers.
20:37:08 <danderson> right.
20:37:20 <Kaidelong> if you want drivers I can't think of a better place to go than linux
20:37:27 <danderson> and when you're working with a hardware manufacturer, it's less hard to ask them for a linux driver for, say, a trackpad, than a plan9 driver
20:37:36 <pastorn> i'm just saying that it would be nice to someday go beyond the technology of the late 70's
20:37:36 <danderson> there's half a chance they'll have linux engineering in-house to do the work
20:37:39 <revenantphx> Kaidelong: I can... New York.
20:37:43 <revenantphx> Those drivers are off the chain.
20:38:13 <danderson> and, in general, the value proposition of ChromeOS is in what happens in userspace
20:38:25 <danderson> how the hardware is run is pretty much irrelevant, as long as it runs well
20:38:39 <pastorn> danderson: what do you mean by "value proposition"?
20:38:48 <revenantphx> I foresee a dim future for ChromeOS
20:38:55 <revenantphx> I don't mean it's not going to be successful though.
20:39:12 <danderson> pastorn: what it hopes to change in terms of what it has to offer to users, our relation to computers...
20:39:13 <revenantphx> I mean that it's going to be repeatedly overhyped by the media as "the big thing" until it kind of becomes the big thing, but not really.
20:39:21 <revenantphx> It's like the whole 3D movies crazy.
20:39:24 <revenantphx> craze*
20:39:27 <edwardk> revenantphx: i'm curious to see how it does. i think apple may have eaten their potential market with the ipad though
20:39:37 <revenantphx> It's a media generated craze.
20:39:48 <danderson> the value proposition is "the browser is the OS", not "the OS is an exciting new monadic runtime system"
20:39:51 <edwardk> but then i expected android to do worse than it has
20:40:08 <revenantphx> I'll be brutally frank, to the people who say "Apple is a bad company, I hate their products", etc... Look at the facts. Three times in a row, apple has *created an entire market*.
20:40:09 <danderson> I don't disagree that the latter would be interesting to pursue
20:40:26 <Kaidelong> as a user, I don't think android really is mature enough to merit people using it
20:40:26 <revenantphx> Arguably three and a halfish, given the iTouch/App Store
20:40:30 <danderson> but it's just not what ChromeOS wants to do, and for what ChromeOS wants to do, linux is the path of least resistance to a working product
20:40:33 <danderson> </rant> :)
20:40:37 <revenantphx> danderson: I agree.
20:40:48 <Kaidelong> I was surprised to find out for example, that despite being multitasking, it doesn't actually come with a task manager by default
20:40:50 <revenantphx> Kaidelong: Neither was Windows when it first came out (or today arguably).
20:41:03 <edwardk> revenantphx: and if you just talk about Jobs, you can add even more markets with pixar, next, etc.
20:41:05 <Adamant> revenantphx: I don't really agree with that, unless you're counting App Store
20:41:10 <revenantphx> oh, of course.
20:41:12 <revenantphx> Pixar.
20:41:18 <danderson> Kaidelong: um, it does?
20:41:21 <Adamant> Pixar was bought by Jobs
20:41:24 <revenantphx> Adamant: I was going with iPod, iPhone (smartphones/multitouch), and iPad
20:41:28 <Kaidelong> danderson: I heard they added it in 2.2
20:41:34 <revenantphx> Adamant: um. no.
20:41:35 <Adamant> he didn't invent the market for any of those
20:41:39 <danderson> also, task management should be made irrelevant by the runtime's ability to freeze/thaw running processes as needed
20:41:42 <Adamant> revenantphx: yes.
20:41:45 <Kaidelong> but it is not on MY phone
20:41:51 <Adamant> it was an existing company
20:41:52 <danderson> pre-2.2 this was a little dicey, because of lack of computing power on the pre-2.2 hardware
20:41:59 <revenantphx> Oh, right.
20:42:01 <danderson> but nowadays it works pretty well
20:42:03 <revenantphx> sorry. sorry.
20:42:05 <danderson> Kaidelong: which phone?
20:42:10 <Kaidelong> HTC-56
20:42:15 <revenantphx> Apple is not Steve Jobs XD.
20:42:22 <Kaidelong> HERO200
20:42:24 <revenantphx> Anyways, they didn't "create the first product"
20:42:24 <pastorn> In ChromeOS, what can i do offline? Can i write on my docs and then have the work synchronize once i get a connection?
20:42:31 <revenantphx> but they essentially created the "market".
20:42:36 <Adamant> revenantphx: Rio, Windows Mobile, and MS Tablet PC's
20:42:37 <pastorn> i mean, some things has to be stored on the device, right?
20:42:38 <danderson> oh, the Hero
20:42:41 <revenantphx> They made those classes of products the big deal.
20:42:48 <revenantphx> Adamant: except NO ONE CARED ABOUT THOSE.
20:42:53 <revenantphx> MS Tablet PC's were jokes.
20:42:53 <kmc> not haskell
20:42:56 <danderson> neat platform, but unfortunately a little anemic.
20:42:58 <Adamant> revenantphx: stop shouting
20:43:04 <edwardk> its not about being first to market, its about holding the market
20:43:04 <revenantphx> Caps don't mean I'm shouting.
20:43:05 <revenantphx> XD
20:43:11 <revenantphx> (this is why I try to use ** instead)
20:43:21 <danderson> pastorn: yes.
20:43:22 <revenantphx> "oh look, it's windows XP, except on a smaller screen. Look how hard it is to press a link"
20:43:24 <danderson> is the simple answer :)
20:43:24 <Adamant> revenantphx: and yeah, your assertion about developing the market is correct
20:43:27 <kmc> @faq Can Haskell somehow relate to endless arguing about the iPad?
20:43:27 <lambdabot> The answer is: Yes! Haskell can do that.
20:43:44 <Philippa> -blah is thataway ->, folks
20:43:45 <revenantphx> @faw Can Haskell create world peace?
20:43:45 <lambdabot> The answer is: Yes! Haskell can do that.
20:43:52 <edwardk> kmc: i tried to offer up a topic on packrat parsing, but nobody bit ;)
20:43:59 <revenantphx> @faq Can Haskell blow a man for $10?
20:43:59 <lambdabot> The answer is: Yes! Haskell can do that.
20:44:00 <Philippa> @fuq Can Haskell make people STFU?
20:44:00 <lambdabot> The answer is: Yes! Haskell can do that.
20:44:01 <danderson> pastorn: a large fraction of the apps on the chrome web store have offline functionality, but the current build of chromeos has only fairly basic cloud syncing support
20:44:06 <pastorn> kmc: insert NaCL (googles Native Client) and haskells LLVM output
20:44:06 <Adamant> packrat parsing = ad hoc?
20:44:16 <pastorn> kmc: there, all related now
20:44:21 <danderson> pastorn: simply because the team prioritized other thing for the initial release.
20:44:21 <revenantphx> brb
20:44:23 <Philippa> no, packrat parsing's an algorithm for parsing PEGs
20:44:24 <edwardk> adamant: just memoized
20:44:30 <Adamant> ah
20:44:32 <danderson> but the idea is indeed that, when you go offline, most stuff should Just Keep Working
20:44:38 <new-lisper> bash.org anyone?
20:44:42 <Bynbo7> Philippa: NaCl has some pretty interesting restrictions on the code it can accept
20:44:47 <danderson> docs, gmail, games, ...
20:45:01 <Kaidelong> danderson: I think Google might have vested interests there...
20:45:02 <Bynbo7> uh, pastorn 
20:45:07 <Bynbo7> sorry Philippa 
20:45:09 <Adamant> danderson: HTML5 would at least make that posible
20:45:24 <sshc> Shouldn't cabal recognize the TupleSections extension?
20:45:31 <edwardk> i was banging out a parser in scala, but their parsec clone is backtracking enabled by default, so they really need to lean on packrat parsing to make it tolerable, but the language i was parsing had haskell-style layout
20:45:32 <Kaidelong> hard to deliver advertising to people while they are offline
20:45:34 <Philippa> edwardk: I'd talk parsing, but I should be heading off - just passing through. We should go find some poor unsuspecting master's student to write the parsing papers that are implied by your work and the odd tidbits I've thrown your way though!
20:45:36 <danderson> Adamant: exactly. It's all HTML5 features under the hood, nothing particular.
20:46:01 <Philippa> edwardk: complete with parse-error rule? If so, ow
20:46:08 <danderson> Kaidelong: arguably, the last 20 years have demonstrated that we're rapidly converging to being online all the time
20:46:18 <edwardk> philippa: nah, i don't have the parse error rule. i just special case if. ;)
20:46:20 <edwardk> er in
20:46:39 <edwardk> i make up the language, i get to make up the parsing rules ;)
20:46:45 <Kaidelong> danderson: personally, I am used to unreliable connections. But I suppose ChromeOS is not meant for people like me.
20:46:58 <danderson> Kaidelong: actually, it is. Well, it will be :)
20:47:03 <Philippa> danderson: asymptotically, though - dunno about you, but I spend time with no stable connection once in a while even with a mobile in my pocket
20:47:24 <danderson> the initial cr-48 build doesn't fully support it yet, but it's not because it's not wanted, just because it's not done yet :)
20:47:25 <Adamant> internet, in most places in the world, is not set up to be particularly robust against natural disasters
20:47:43 <Adamant> all the last mile shit goes down very quickly
20:47:46 <danderson> but anyway, I think I saw some actuall Haskell questions go by, so perhaps we should stop the off-topicness in this channel?
20:47:49 <sshc> Wow, I much like the new site!
20:47:50 * sshc bed
20:47:50 <Adamant> yes
20:48:05 <danderson> and going back to Haskell, has anyone played with HaLVM ?
20:48:18 <edwardk> philippa: i'm actively looking into how i can abuse VPA's though
20:48:20 <danderson> I've been meaning to, the idea is quite intriguing.
20:48:56 <Philippa> edwardk: cool :-) I've made my contribution for the year, then!
20:50:42 <pastorn> danderson: before we stop completely, just out of curiousity: why do you know all these details about ChromeOS?
20:51:25 <danderson> because I watched the various interviews/talks about CrOS by the ChromeOS folks
20:52:28 <danderson> (I also work for Google, but not on ChromeOS, so that's not really relevant)
20:54:00 <pastorn> danderson: ==> #haskell-blah?
21:04:51 <revenantphx> Does anyone here have some attoparsec samples?
21:05:03 <edwardk> revenantphx: hrmm, not handy
21:05:04 <revenantphx> other than the http one.
21:13:15 <NemesisD> holy... what happened to the haskell website?
21:15:10 <Bynbo7> the domain expired >_<
21:15:26 <dankna> which one?
21:15:54 <dankna> http://haskell.org/ looks up from here
21:16:12 <NemesisD> im seeing a network solutions parking page
21:16:17 <NemesisD> how embarassing
21:16:23 <edwardk> NemesisD: it was down for a little while earlier
21:16:37 <dankna> oh.  well, that's why you go with Network Solutions instead of the cheaper guys - they don't charge a fortune to sell it back to you when that happens
21:16:40 <edwardk> nemesisd but it appears to be back up now, so you probably have it cached by your upstream in the down state
21:16:40 <imcmeans> How do I find what module a function is in, if I want to use it?
21:16:52 <dankna> DNS takes time to propagate
21:16:55 <edwardk> imcmeans: grep ;)
21:16:58 <NemesisD> hadn't visited it on this computer till today
21:17:09 <imcmeans> eg. I see the documentation for "fromJust" and I want to import it: http://hackage.haskell.org/packages/archive/haskell98/latest/doc/html/Maybe.html#t:Maybe
21:17:23 <edwardk> imcmeans: import Data.Maybe
21:17:35 <mafs> dankna: pretty sure they're not allowed to for some grace period
21:17:44 <dankna> mafs: pretty sure they are :)
21:17:47 <NemesisD> yeah itll be around, maybe you guys will have some suggestions. i need some help figuring out how test harnesses are usually set up for haskell projects. i'm going to give TDD a shot in haskell
21:18:01 <dankna> I've definitely heard of people getting bitten by that
21:18:02 <imcmeans> is there no easy way to find out what to import?
21:18:20 <edwardk> NemesisD: http://hackage.haskell.org/package/test-framework-0.3.3
21:18:25 <NemesisD> all the stuff i find on quickcheck, et al demonstrate how it works but no best practices
21:18:28 <edwardk> imcmeans: most folks use hoogle
21:18:41 <mafs> dankna: I'll trust you on it, haven't read up on it lately :) I know namecheap charges the same fee ($9.88) as it is to just renew for 30 days or something like that, though I guess I shouldn't be so off-topic in here
21:18:51 <edwardk> NemesisD: bolingbroke has a page up on how to write tests using test-framework
21:19:22 <edwardk> NemesisD: i think i also have a stackoverflow response on how to set up cabal to run a nice test harness whenever you say cabal test
21:19:55 <edwardk> http://stackoverflow.com/questions/3120796/haskell-testing-workflow/3130766#3130766
21:20:46 <edwardk> there was some work done this summer for cabal test support, but i don't know how that really wrapped up
21:21:00 <NemesisD> cool
21:21:15 <NemesisD> should be enough for my generic game of life, bowling game, etc type of exercises
21:22:09 <edwardk> i find that between hpc, quickcheck and hunit i'm pretty happy with testing in haskell
21:23:06 <edwardk> quickcheck never cries wolf, hunit can try known test cases and counter examples, and hpc lets me know i'm actually testing everything
21:23:16 <edwardk> at least branch wise
21:23:54 <kmc> now integrate QuickSpec somehow :D
21:26:05 <NemesisD> guess i chose a bad time to start all this. cabal update gives me: Codec.Compression.Zlib: incorrect header check
21:27:03 <edwardk> why run cabal update?
21:27:14 <edwardk> in general its not what you want to do
21:27:43 <edwardk> cabal install packages you want, specific versions if need be and leave cabal to do its magic
21:28:12 <NemesisD> edwardk: i just installed it. it needs the list of packages which i'd get from cabal update right?
21:28:44 <edwardk> ah sorry
21:29:08 <edwardk> it was 'cabal upgrade' that i was thinking of which is problematic
21:29:15 <NemesisD> "ah yes
21:29:52 <edwardk> i think your cabal update problem is related to the fact that you can't access haskell.org
21:30:02 <edwardk> its probably just failing to retrieve the package list
21:30:40 <NemesisD> anything proactive i can do or do i just need to wait it out?
21:30:51 <edwardk> you could drop: 69.30.63.204 hackage.haskell.org in your hosts file as a stopgap
21:31:40 <edwardk> (and 78.46.100.180 haskell.org) for that matter 
21:32:56 <NemesisD> woo. now im cookin
21:33:20 <augur> what happened with the site??
21:33:48 <augur> dons's explanation on reddit confuses me
21:34:14 <edwardk> augur: site registration snafu, afaik its been fixed, but the placeholder page got cached in a few places around the internet, so you may have to wait for it to come back for you
21:34:25 <augur> oh no its fine for me
21:34:33 <augur> im just curious what happened
21:35:40 * augur sits on Gracenotes
21:36:30 * Gracenotes bites
21:36:53 <Gracenotes> nay, nibbles
21:37:49 <augur> i was quite pleased the other day when i successfully implemented the fibs infinite list in the lazy scheme i built :T
21:38:08 <Gracenotes> lazy? doin' graph reduction old-school style?
21:38:17 <augur> (define fibs (cons 0 (cons 1 (zipWith + fibs (cdr fibs)))))
21:38:21 <augur> graph reduction? what?
21:38:32 <Gracenotes> or possibly not
21:38:48 <augur> what are you talking about
21:38:56 <Gracenotes> how did you implement laziness?
21:39:06 <Gracenotes> just by doing normal evaluation order?
21:39:13 <augur> thunks
21:39:24 <augur> everything is thunkified
21:40:16 <Gracenotes> makes sense... intuitive semantics for laziness can't go that wrong
21:40:19 <augur> typical SICP fashion, nothing fancy
21:42:30 <pelotom> hallo
21:43:25 <pelotom> is there a word that means "functor isomorphism"?
21:43:50 <roconnor> natural transformation
21:43:55 <roconnor> well
21:44:00 <roconnor> natural isomorphism
21:44:03 <pelotom> e.g. an isomorphism in Cat
21:44:22 <roconnor> pelotom: you mean an isomorphism between two functors, right?
21:44:29 <Bynbo7> Mrow!
21:44:30 <pelotom> roconnor: no, between 2 categories
21:49:18 <elliott> Gracenotes: you've abandoned us :'(
21:49:43 <Gracenotes> OMG THE GHOSTS OF MY PAST
21:50:18 <elliott> Gracenotes: verily
21:50:29 <Gracenotes> elliott: err... which channel now -.-.. #esoteric ??
21:50:42 <elliott> Gracenotes: Yes :P
21:50:47 <pelotom> for instance, if you view [] as a functor from Hask to Lst, it is an isomorphism... but if you view it as an endofunctor Hask -> Hask, then it is not, because not all elements of the codomain are mapped to
21:51:50 <elliott> Gracenotes: You cannot ever truly escape. Remember that.
21:51:58 <Gracenotes> elliott: then again people were mostly pinging me by wrongfully tab-completing the other guy whose nick began with Gr :)
21:52:14 <pelotom> personally I vote "isofunctor" :)
21:52:23 <imcmeans> Is there a big-int type?
21:52:28 <elliott> Gracenotes: It's okay, we've killed him off and now his corpse lines our walls and floor. You can come back now.
21:52:34 <augur> Gracenotes!
21:52:36 <augur> read my paper?
21:52:44 <Gracenotes> augur: published one?
21:52:49 <augur> no :(
21:52:52 <augur> but linkable!
21:52:54 <Gracenotes> .. or arxiv'd one?
21:52:57 <imcmeans> I'm using Int for a function I wrote, but I think I might be hitting the bit-width limits? (not sure)
21:53:27 <Bynbo7> imcmeans: Integer, it's unlimited
21:53:28 <Gracenotes> imcmeans: Integer, o course
21:53:34 <Bynbo7> > 2 ^1234 :: Integer
21:53:34 <lambdabot>   295811224608098629060044695716103590786339687135372992239556207050657350796...
21:53:55 <augur> Gracenotes: http://wellnowwhat.net/linguistics/Derivationality%20and%20Merge%20over%20Move%20-%20Darryl%20McAdams.pdf
21:54:18 <Gracenotes> well... Integer might be limited to 2^(2^32) I think. sad to say.
21:54:27 <imcmeans> cool, thanks. Is Int a typeclass then?
21:54:29 <elliott> Gracenotes: that's a GHC implementation detail
21:54:33 <elliott> imcmeans: no, Int is just a limited data type
21:54:42 <Bynbo7> practivally unlimited*
21:54:48 <Bynbo7> @src Int
21:54:48 <lambdabot> data Int = I# Int#
21:54:52 <elliott> Practivally? :P
21:54:59 <Bynbo7> c*
21:55:05 <Bynbo7> @src Integral
21:55:05 <lambdabot> class  (Real a, Enum a) => Integral a  where
21:55:05 <lambdabot>     quot, rem, div, mod :: a -> a -> a
21:55:05 <lambdabot>     quotRem, divMod     :: a -> a -> (a,a)
21:55:05 <lambdabot>     toInteger           :: a -> Integer
21:55:05 <Gracenotes> oh yes, I forgot, we can wish away implementation details
21:55:20 <elliott> Bynbo7: I think I will henceforth use "practivally" to mean "theoretically true, and practically basically true".
21:55:22 <kmc> imcmeans, why did you think Int is a type class?
21:55:33 <augur> hey elliott
21:55:33 <elliott> Integer is practivally unlimited; in theory, it is unlimited, and in practice, it is practically unlimited.
21:55:39 <elliott> Gracenotes: Yes. Yes we can.
21:55:46 <augur> practivally! :D
21:55:51 <elliott> Gracenotes: There's no reason a (non-C) implementation of Haskell couldn't have truly unlimited bignums.
21:56:07 <elliott> (C does not allow for truly unlimited bignums, at least not without abusing POSIX; I am fairly sure ANSI C is not Turing complete.)
21:56:12 <imcmeans> I was confused about what typeclasses are :) They're types parametrized on other types, right?
21:56:14 <elliott> (Or if it is, then it relies on a libc quirk.)
21:56:19 <elliott> imcmeans: No. Those are just types.
21:56:20 <kmc> imcmeans, no
21:56:29 <Gracenotes> elliott: I look forward to Haskell with unary bignums
21:56:29 <kmc> type classes are "interfaces"
21:56:30 <augur> i like how this channel has so many #esotericists :3
21:56:32 <elliott> imcmeans: Typeclasses are hard to explain :) Think of them like OOP interfaces, if you're familiar with those.
21:56:40 <kmc> i don't think they're hard to explain
21:56:41 <augur> haskell is truly the worlds first widely used esolang
21:56:42 <elliott> imcmeans: They can also be used to accomplish similar goals to C++ templates.
21:56:48 <kmc> i don't think we should be so quick to say that every Haskell concept is hard to explain
21:56:51 <elliott> kmc: well, they don't have a one-line fits-all-cases explanation
21:56:56 <elliott> it's more that i'm a lazy explainer :)
21:56:59 <kmc> heh
21:56:59 <elliott> Gracenotes: So do I.
21:57:01 <imcmeans> OK, so that would be like "bounded" or "show"?
21:57:04 <kmc> yes exactly
21:57:06 <kmc> those are both type classes
21:57:08 <imcmeans> gotcha
21:57:14 <elliott> augur: erm #esoteric's user list is vastly smaller than #haskell :) but this is offtopic
21:57:18 <Gracenotes> typeclasses don't exist.. it's all tables man.. OPEN YOUR EYES
21:57:22 <imcmeans> so Int implements Bounded and Show?
21:57:25 <elliott> imcmeans: yep
21:57:36 <kmc> "instance Bounded Int where ..."
21:57:41 <Gracenotes> and don't you *%$& about implementation details
21:57:49 <augur> imcmeans: type classes are just specifications of some functions that must be defined for instances of a type class
21:57:57 <elliott> Gracenotes: everything is just a pure function of one argument
21:58:59 <Gracenotes> BAM average-size conal blogpost http://conal.net/blog/posts/everything-is-a-function-in-haskell/
21:59:11 <kmc> everything is S, K, or application
21:59:21 <augur> imcmeans: all it really does is give you a convenient way of doing data-directed programming, where a single function is overloaded by type in a well-behaved fashion
21:59:24 <Bynbo7> everything is iota!
21:59:32 <elliott> Bynbo7: naw
21:59:37 <elliott> Bynbo7: iota depends on S and K
21:59:42 <elliott> even if you inline them, it's not a supercombinator
21:59:43 <Boxo> what, Avast popped up "trojan blocked" when I clicked on that conal link!
21:59:49 <elliott> (S and K) is a more minimal language base than iota, IMO
21:59:55 <Gracenotes> yeah. one day I'll implement a language that evaluates via SKIYB etc.
22:00:03 <kmc> 's been done
22:00:17 <Gracenotes> no, I implementing such a language has never been done
22:00:21 <imcmeans> Yeah, I got a warning from MSE :(
22:00:27 <Gracenotes> I mean there's SASL, Miranda, etc. etc. Turner's stuff
22:00:41 <augur> imcmeans: did that make sense at all?
22:01:01 <Boxo> why doesn't lambdabot have @ski?
22:01:08 <elliott> Gracenotes: lol (App (App (App S x) y) z) = lol $ App (App x z) (App y z); lol (App (App K x) _) = x
22:01:35 <pelotom> If you understand Comparator in Java, that's a type class!
22:01:44 <imcmeans> yeah, the analogy to templates fits well here - bounded is like c++'s numeric_limits class.
22:01:45 <Gracenotes> elliott: I say it's ready for the enterprise
22:02:00 <elliott> Gracenotes: absolutely.
22:02:07 <kmc> i don't think learning Haskell by analogy to Java or C++ is a good idea
22:02:10 <Gracenotes> seriously though, conversion from lambda calculus to extended SK (*with* efficient shortcuts)
22:02:26 <augur> imcmeans: i have no idea what templates are, but..
22:02:30 <imcmeans> yeah, I've seen people say that before so I'm trying to avoid mental translation to more familiar languages
22:03:19 <augur> seriously, just take type-classes as data-directed programming
22:03:24 <augur> thats all it is, really.
22:03:36 <kmc> a monad is just a monoid object in the category of endofunctors
22:03:39 <kmc> that's all it is really
22:03:40 <JETkoten> hi all
22:03:52 <augur> kmc: :p
22:04:22 <augur> its true tho, right? i mean, typeclasses let you specify generic operators
22:04:25 <augur> to use a SICP term
22:04:34 <Boxo> @google sigfpe from monoids to monads
22:04:35 <lambdabot> http://blog.sigfpe.com/2008/11/from-monoids-to-monads.html
22:04:35 <lambdabot> Title: A Neighborhood of Infinity: From Monoids to Monads
22:04:39 <Boxo> it's true
22:07:02 * PHO_ extensively (ab)uses C++ template to write so many type-level functions, and every time I use them I feel a pain
22:07:13 <PHO_> at work.
22:07:50 <Bynbo7> you hould write templates to write those templates for you, it'll save you a lot of time dawg
22:08:04 <PHO_> :(
22:08:13 <PHO_> Haskell is not allowed in my workplace
22:08:42 <kmc> my coworkers mostly know Haskell and have some respect for it, but haven't found a use for it at the company
22:08:48 <kmc> this is much better than the typical situation
22:09:05 <kmc> (i'm also doing some work for a company writing an iPhone game in Haskell :D)
22:09:14 <PHO_> iPhone game!
22:09:21 * Bynbo7 is working in a haskell only company :)
22:09:28 <PHO_> what!?
22:09:30 <kmc> galois?
22:09:36 <Jafet> (How many people here are *not* working for that company, now?
22:09:40 <kmc> hehe
22:09:40 <Jafet> )
22:09:41 <Bynbo7> Tsuru Capital
22:09:46 <kmc> ahh
22:09:49 <kmc> those guys :)
22:10:08 <shachaf> kmc: It's kind of a similar situation here. Well, not "mostly" anymore, I suppose, but still a fair number.
22:10:39 <Bynbo7> i've learnt a lot in the two weeks i've been here, how to use monad transformers, and i have a basic understanding of iteratees now (though i taught myself that)
22:10:58 <Bynbo7> we use iteratees a lot internally
22:12:58 * shachaf keeps hoping to sneak some Haskell in but it's not really likely.
22:16:15 <pelotom> I showed Haskell to some coworkers, they were very receptive
22:16:33 <pelotom> got them reading LYAH
22:16:55 <JETkoten> tryhaskell.org is pretty nice too
22:16:58 <pelotom> I will slowly turn my entire team to the dark side
22:16:59 <Schalken> Is there a ByteString version of getDirectoryContents? I am writing a filesystem scanning application and I quickly run out of memory storing all the file paths in memory as Strings, but I would like to avoid packing the Strings from getDirectoryContents into ByteStrings manually.
22:18:04 <Bynbo7> Schalken: i doubt it, it's not really something that would be used that commonly
22:18:06 <kmc> your filenames might contain non-ASCII characters
22:18:12 <kmc> you could pack them to Text instead
22:18:33 <kmc> ByteString.Char8 is an abomination
22:18:38 <Bynbo7> though, it would be nice if there was say a ByteString and/or Text prelude which had ByteString/Text versions of all string functions in the prelude/base
22:18:42 <Schalken> Bynbo7: Is there something that is?
22:18:44 <kmc> yes
22:19:07 * Bynbo7 agrees that you should use Text
22:26:50 <NemesisD> could anyone give me a hint as to what i may be doing wrong? http://pastie.org/1386679
22:27:32 <NemesisD> i'm trying to specify quickcheck should pass the test parameters a and [a]
22:32:00 <PHO_> NemesisD: I guess you need to give prop_insertAt_head a type signature like :: forall a. a -> [a] -> ...
22:32:56 <PHO_> type variables are monomorphic by default
22:36:11 <PHO_> prop_insertAt_head :: (forall a. a -> [a]) -> Bool
22:36:32 <PHO_> I haven't tried it though
22:37:35 <Bynbo7> that says it takes a function a -> [a]
22:37:41 <NemesisD> PHO_: how do i get an Eq a constraint in there? i'm not familiar with this
22:38:27 <Boxo> @djinn (a -> [a]) -> Bool
22:38:27 <lambdabot> Error: Undefined type []
22:39:50 <PHO_> Bynbo7: oh yes...
22:40:03 <PHO_> NemesisD: forall a. Eq a => a -> [a] -> Bool? I'm not familiar with QuickCheck
22:40:46 <nejucomo> Why is there no standard abstraction for containers, like "class Mappable m k v where insert :: k -> v -> m -> m" ?
22:42:09 <Bynbo7> not m k v -> m k v?
22:42:16 <NemesisD> seems like quickcheck doesn't like it when you put a type both on the prop method and in the where type bit
22:42:49 <kmc> nejucomo, there's various abstractions
22:42:59 <kmc> Functor, Foldable, Traversable, ListLike
22:42:59 <phao> http://ix.io/1k1 I'm trying to run this code, but I'm getting a problem with the sum_sq_100. What is wrong with it? ghci tells: http://ix.io/1k2
22:43:10 <kmc> it's hard to make one library that makes everyone happy
22:43:40 <nejucomo> Right.  I just thought it'd be fun to write different map or set implementations and test their performance for different cases.
22:43:57 * nejucomo looks up Traversable.
22:44:10 <Bynbo7> PHO_: you'll need to make it (Num a, Enum a) => a
22:44:14 <Bynbo7> uh, phao 
22:45:51 <nejucomo> woah: haskell.org is a domain squatter?!
22:46:16 <nejucomo> worse yet it advertises php and sql tutorials.
22:46:16 <Bynbo7> that's been fixed now nejucomo, you'll need to refresh your dns cache
22:46:27 <nejucomo> Ok.  Phew.
22:46:30 <kmc> nejucomo, it is fun
23:08:24 <jdahm> Hi, I've programmed C, C++, Fortran, etc for a long time.  I'm taking a class next term on differential equations numerical methods (the exact topic is unnecssary for this discussion), and I am looking for a challenging language to learn.  I have seen haskell before that thought I'd give it a go.  Is this a good application for haskell?
23:11:35 <Kaidelong> jdahm: that's the same as asking "Is there a good application for C++?" or "is there a good application for Fortran?"
23:12:02 <Kaidelong> Haskell is a general purpose language, it's not specialized for any particular application domain like Octave or R
23:12:50 <Kaidelong> so yes
23:13:01 <Kaidelong> numerical computation is a good application for haskell
23:13:05 <ManateeLazyCat> jdahm: What kind application you expect? Haskell can do everything you want...
23:13:31 <jdahm> Kaidelong: I was about to go finish more of the tutorial on haskell when I saw to my dismay that the website was down.  my question was more: is there a concept of "state" in haskell?  e.g. can I timestep algorithms?
23:14:04 <jdahm> someone once told me that would be difficult to do in haskell..
23:14:34 <Kaidelong> jdahm: there is no state at the top level of Haskell, but there is state inside certain contexts
23:14:45 <Kaidelong> I do not find it terribly difficult
23:15:01 <jdahm> OK maybe I'll give it a go then.  Thanks!
23:15:03 <Kaidelong> in some cases (like random numbers) abstracting away the statefulness is actually convenient
23:15:40 <Kaidelong> jdahm: if you get used to Haskell's type system you'll be fine from there on. Get used to checking the types of things
23:23:50 <ManateeLazyCat> Haskell make me really feel very discouraged, no matter how hard you try, you can not find a Haskell job.
23:24:08 <pastorn> ManateeLazyCat: make one up!
23:24:22 <pastorn> ManateeLazyCat: freelance as a web/tool developer
23:24:41 <pastorn> everybode wants a homepage, right? (ok, maybe 10 years ago they did...)
23:25:01 <ManateeLazyCat> pastorn: I haven't enough money build haskell company, if i have, i will build haskell company.
23:25:35 <pastorn> ManateeLazyCat: a company doesn't have to be big... you could be a consultant
23:25:56 <pastorn> "hire me, i'll make tools to improve your workflow"... the client wouldn't have to know about haskell...
23:26:04 <pastorn> ManateeLazyCat: ==> #haskell-blah
23:31:17 <jdahm> ManateeLazyCat: what is the speed of a haskell-implemented algorithm versus the same one in c++, for instance? (e.g. using GHC)
23:31:35 <kisielk_home> depends how you implement it
23:31:47 <ManateeLazyCat> jdahm: Haskell is not minimum memory language, but fast enough, at least, faster than Java
23:32:41 <Bynbo7> jdahm: you wouldn't implement the same algorithm in C++ and Haskell
23:34:10 <kisielk_home> I'm still fairly new to haskell, but it seems a lot of problems favour recursive or infinite list type solutions
23:34:13 <Bynbo7> jdahm: you can write some extremely fast programs in haskell
23:34:17 <Cale> Well, you might, but as a beginner, it's hard to see what's really the same and what's different until you understand how evaluation proceeds and are pretty comfortable with it.
23:34:28 <kisielk_home> whereas in C/C++ you usually solve those things by iteration
23:34:41 <Cale> kisielk_home: right
23:34:45 <Cale> kisielk_home: Lists are our loops
23:34:56 <Bynbo7> kisielk_home: when you're starting you use things like lists, then you find faster ways to do things ;)
23:35:30 <Cale> Just like a loop either doesn't happen at all (because its condition isn't met) or consists of an iteration followed by another loop, a list is either empty or consists of an element followed by another list.
23:35:39 <kisielk_home> right, I just mean to point out the solution style is very different from procedural type languages
23:35:53 <kisielk_home> so the solutions aren't necessarily directly comparable
23:35:57 <Cale> yeah
23:36:08 <Bynbo7> kisielk_home: yeah
23:36:12 <kisielk_home> doing deeply recursive stuff in C/C++ usually leads to trouble, at least in my experience :)
23:36:48 <imcmeans> I installed a module using cabal, but when I import it, it complains it can't find it. What is the loca/global distinction with packages?
23:36:51 <laurus> Has anyone here used manatee before?
23:36:52 <Cale> Instead of writing recursion directly, you usually *try* to use higher order functions on datastructures, but of course at some point those are built in terms of recursion.
23:36:57 <imcmeans> Is that just whether it's installed for one user or everyone?
23:36:58 <Cale> ManateeLazyCat has ;)
23:37:09 <laurus> Oh, he's here!
23:37:18 <Cale> imcmeans: Which module?
23:37:31 <imcmeans> Digits - http://hackage.haskell.org/package/digits/
23:37:45 <Cale> imcmeans: do  ghc-pkg list digits  in the terminal and see if it shows up
23:37:49 <Bynbo7> oh ffs!
23:37:54 <laurus> ManateeLazyCat, I'm a little confused about what Manatee is actually.
23:38:09 <Bynbo7> why does each new ghc release have to break everything related to packages? it's such a pain in the arse!
23:38:31 <ManateeLazyCat> laurus: Manatee is OS
23:38:36 <Bynbo7> not two hours ago i blew away my .ghc and .cabal directories to start fresh, and it's already broken itself!
23:38:37 <imcmeans> WARNING: cache is out of date: C:/Program Files (x86)/Haskell Platform/2010.2.0 0\lib\package.conf.d\package.cache   use 'ghc-pkg recache' to fix.
23:38:54 <Cale> imcmeans: give that a shot
23:38:56 <imcmeans> and that complains it doesn't have permission
23:38:59 <Cale> hmm
23:39:00 <laurus> ManateeLazyCat, I heard about it from Xah Lee, and it looks sort of like an Emacs-type interface. Are you planning to build a text editor into there?
23:39:15 <Cale> maybe something went weird with perms on your system
23:39:39 <imcmeans> I think it's win7 being weirdly strict about it. I'll see if I can run it with admin permissions or something...
23:39:42 <Cale> Check that you have write permissions there
23:39:52 <Cale> actually...
23:40:03 <Cale> Hmm, on windows, is the default to install globally?
23:40:12 <ManateeLazyCat> laurus: It's multi-processes framework that you can build *any* application in it, not just text.
23:40:35 <ManateeLazyCat> laurus: It just looks like Emacs or XMonad, but it's really different thing than Emacs or XMOnad.
23:40:43 <laurus> ManateeLazyCat, I see
23:40:46 <Cale> You should generally try to avoid installing globally anything other than GHC's core packages or Platform.
23:41:09 <Cale> And install the rest as user, which makes it comparatively easy to fix things if your packages get messed up
23:41:11 <ManateeLazyCat> laurus: I just build many application confuse you, you just understand it's is a "application framework" 
23:41:32 <ManateeLazyCat> laurus: In principle, Manatee just need Linux Kernel and GTK+ library.
23:41:37 <laurus> ManateeLazyCat, I see
23:41:38 <Cale> (but this advice is more for Linux/Mac -- I don't know how things are on Windows)
23:42:01 <laurus> ManateeLazyCat, what is the point of it exactly? To have one framework that runs all of one's applications?
23:42:30 <imcmeans> OK, I modified the permissions, and now running "list digits" gives this output:
23:42:32 <imcmeans> C:\Users\Ian\AppData\Roaming\ghc\i386-mingw32-6.12.3\package.conf.d:     digits-0.2
23:43:31 <danderson> so, um, what's up with hackage.haskell.org?
23:43:38 <danderson> parked domain?
23:44:50 <ManateeLazyCat> laurus: Manatee's aim is build a *style* environment, that you can use keyboard do everything in it, then you can work efficient like Emacs, but more powerful.
23:45:20 <laurus> ManateeLazyCat, ahh okay. That is pretty neat
23:45:23 <ManateeLazyCat> laurus: No menu, no button, use keyboard finish everything.
23:45:34 <laurus> ManateeLazyCat, I like it! :)
23:45:42 <kisielk_home> ManateeLazyCat: isn't that like xmonad ? :P
23:45:52 <ManateeLazyCat> laurus: You just need write any application, then Manatee can use it's framework mix your application with other applications...
23:45:53 <laurus> ManateeLazyCat, can one run Emacs inside it? Or is there no text editor for Manatee yet?
23:46:34 <ManateeLazyCat> laurus: Manatee has it's own editor, but if you want emacs or vi , look : http://www.flickr.com/photos/48809572@N02/5237505999/lightbox/
23:46:48 <ManateeLazyCat> kisielk_home: http://haskell.org/haskellwiki/Manatee#NOTE
23:47:08 <ManateeLazyCat> kisielk_home: Manatee's split window feature, XMonad CAN'T do 
23:47:21 <ManateeLazyCat> kisielk_home: If XMOnad can do that, i won't create Manatee.
23:48:09 <laurus> ManateeLazyCat, the reason I'm asking all this is that I know nothing at all about Haskell, but I was very intrigued by Manatee
23:48:25 <laurus> So I'm wondering if it's worth learning Haskell and "switching" "from" Emacs to Manatee.
23:49:27 <ManateeLazyCat> laurus: Manatee is open framework with DBus protocol and some interface, you even can use *any* language write application for it, but best use Haskell since core is implement by Haskell.
23:49:47 <laurus> ManateeLazyCat, that's neat.
23:49:55 <laurus> I'm really excited.
23:49:58 <ManateeLazyCat> laurus: Manatee [15:49:21] 
23:50:10 <laurus> Sorry?
23:50:21 <ManateeLazyCat> Manatee still in early stage, i'm not recommend use it as productive tool
23:50:21 <imcmeans> Cale: So it seems the Digits package is installed properly (according to "list digits"), but I still can't import it. What else would stop it from being imported?
23:50:33 <laurus> ManateeLazyCat, oh I know, thanks. I'm just planning for the future, kind of
23:50:42 <laurus> It already looks really cool and ufn
23:50:43 <laurus> fun
23:50:55 <Bynbo7> imcmeans: how are you trying to import it?
23:51:08 <laurus> And if I ever wanted to write a program I'd want to write it for something like Emacs or Manatee... but Emacs is annoying a little bit
23:51:31 <Cale> imcmeans: see what happens when you start ghci with   ghci -package digits
23:51:51 <laurus> ManateeLazyCat, the other thing is that I don't really get what makes Haskell better than something like Scheme, other than the lazy evaluation type stuff
23:51:53 <ManateeLazyCat> laurus: Manatee use multi-processes (sandbox) protected every application in separate process, so it's perfect safety, core and other extensions won't crash if current one crash.
23:52:27 <Bynbo7> laurus: we have more awesome tools, like super simple concurrency and parallelism, and haskell's faster
23:52:40 <Cale> imcmeans: It's weird that it wouldn't find the Data.Digits module. You're typing  :m + Data.Digits  or  import Data.Digits  in ghci, right?
23:52:41 <ManateeLazyCat> laurus: Haskell's thread mechanism is awesome.
23:52:53 <laurus> ManateeLazyCat, that's cool. The one thing I'm unsure about is that Emacs has very good features for "introspection", like evaluating inner sexps, finding the value of variable, function, etc
23:53:04 <laurus> I worry that with Haskell I'd lose those nice things
23:53:23 <imcmeans> yeah, I have "import Data.Digits" at the top of my .hs file. I'm using winGHCi, but I'd imagine it works the same way?
23:53:41 <Bynbo7> laurus: ew
23:53:50 <laurus> Bynbo7, what?
23:53:51 <ManateeLazyCat> laurus: Yes, lisp is very powerful some place, but you know Haskell have it's advantage.
23:54:09 <Cale> imcmeans: hmm... yeah, that should still work
23:54:13 <ManateeLazyCat> laurus: Haskell is better language than elisp.
23:54:19 <Cale> imcmeans: I don't know much about winGHCi
23:54:36 <Cale> imcmeans: But normal ghci will autodetect which packages are needed
23:54:50 <Cale> imcmeans: and so I'd expect winGHCi to do the same
23:54:56 <laurus> ManateeLazyCat, well I'll give it a shot then. Thanks for talking to me about it!
23:55:12 <laurus> I think I remember that Xah Lee doesn't like Haskell very much...
23:55:13 <ManateeLazyCat> laurus: If you want, you can use any language write extension for Manatee, but Haskell is easiest since i have build many low-level libraries for it. :)
23:55:38 <laurus> ManateeLazyCat, well part of the reason I'd learn Haskell is to read and understand the Manatee source code actually
23:55:41 <ManateeLazyCat> laurus: He give up, and choose Ocaml. :)
23:55:48 <laurus> ManateeLazyCat, haha, right
23:56:14 <ManateeLazyCat> laurus: manatee-core manatee-anything manatee is core packages.
23:56:35 <ManateeLazyCat> laurus: And simplest extension is manatee-editor, you can research it's source code.
23:56:45 <laurus> ManateeLazyCat, thank you, I will check it out!
23:56:52 <laurus> Have you found some other contributors yet by the way?
23:57:24 <ManateeLazyCat> laurus: https://patch-tag.com/r/AndyStewart/manatee/snapshot/current/content/pretty/AUTHORS
23:57:55 <ManateeLazyCat> laurus: Jens Petersen send some patches, but he is very busy guy.
23:58:01 <ManateeLazyCat> laurus: Now just me. 
23:58:11 <laurus> ManateeLazyCat, cool. Thanks for chatting with me about it!
23:58:13 <ManateeLazyCat> laurus: Any suggestion and contribution are welcome! :)
23:58:22 <laurus> Ok :) Thank you :)
23:59:29 <ManateeLazyCat> laurus: I'm looking for Haskell job recently, perhaps haven't so much time on new features, but i'm promise i will back and bring my energy to haskell community...
23:59:47 <laurus> ManateeLazyCat, oh that's ok, don't worry about it, hehe, you're so dedicated!
