19:20:51 --- topic: '["Grassroots efforts take effort!", "The Haskell programming language" ,"http://haskell.org " ,"Paste: http://hpaste.org " ,"Logs: http://tunes.org/~nef/logs/haskell/", "visualise #haskell's social network : http://tinyurl.com/ytzeab"]'
19:20:51 --- topic: set by dons on [Tue Feb 12 17:14:51 2008]
19:20:53 <glguy> davidL: it's going to have a superset of features
19:21:08 <glguy> (pretty much does already)
19:24:19 <Samburger> Still learning the ropes, "let" is used for what precisely?
19:26:42 <dmwit> It defines a local variable.
19:27:21 <EvilTerran> byorgey, my hed is hpastet on yey?
19:27:51 <byorgey> EvilTerran: uh... right!
19:28:34 <byorgey> > let x = 4  in  x*x + 2   -- Samburger
19:28:37 <lambdabot>  18
19:28:59 <Samburger> thanks, got it
19:29:48 <dino-> It kind of makes me nervous to call it a 'variable' since it can't vary. Is that being too picky?
19:30:22 <byorgey> dino-: no, that's certainly a valid quibble. =)
19:30:56 <dmwit> By golly, these look downright Haskell-y! http://pyeuler.wikidot.com/toolset
19:30:57 <lambdabot> Title: PyEuler: Toolset
19:30:57 <dino-> Is it that it really binds an expression to some identifier(s)?
19:31:10 <byorgey> dino-: yes.
19:31:20 <wagle_home> starts out as a computation, maybe turns into a value..  sorta varies..  8)
19:32:01 <dons> dmwit: broken, slow haskell, yes.
19:32:05 <dbpatterson> dino-: but in math we call them variables too, dont we?
19:32:18 <byorgey> dmwit: they look more downleft Haskell-y to me.
19:32:20 <dons> dmwit: groupby is a definite sign of origin
19:32:31 <dino-> I suppose we do.
19:33:35 <byorgey> also, if a function has a parameter called 'x', that same variable 'x' could represent different values in different calls to the function.  so it is a variable in that sense.
19:33:55 <byorgey> dino-: but I agree it is a possible point of confusion for people coming from an imperative background
19:34:21 <dino-> I think that's probably the real source of uneasiness. I have a lot of trouble letting that business go.
19:36:02 <byorgey> yeah, many people coming from an imperative background have a moment where they try to write something like let x = x + 1 in ...  and then wonder why their program goes into an infinite loop =)
19:36:44 <dons> that'll learn 'em.
19:36:49 <dino-> _|_
19:37:01 <dmwit> > fix (+1)
19:37:02 <lambdabot>  Exception: <<loop>>
19:37:18 <dmwit> A very fast _|_.
19:39:55 <Samburger> learning haskell is probably easier if I repeatedly head butt a wall to get brain damage and hopefully forget all my C and Java
19:40:10 <jaredj> no you need your brain :)
19:40:27 <dmwit> You'll get it.
19:40:46 <dmwit> The great thing is that no matter how much you understand about Haskell, there's more to learn.
19:40:47 * jaredj offers a standard-issue brain
19:40:55 <jaredj> ohh, nm
19:49:22 <brailsmt> how do I get a random number, or pick a random item from a list?
19:49:51 <EvilTerran> ?docs System.Random
19:49:52 <lambdabot> http://haskell.org/ghc/docs/latest/html/libraries/4/System-Random.html
19:50:04 <EvilTerran> ?go site:haskell.org System.Random
19:50:05 <lambdabot> http://www.haskell.org/hoogle/hoodoc.cgi?module=System.Random&mode=module
19:50:08 <brailsmt> EvilTerran: thx
19:57:35 <BMeph> ?go ballistic
19:57:36 <lambdabot> http://www.ballisticpublishing.com/
19:57:36 <lambdabot> Title: Welcome to Ballistic Publishing
19:57:43 <BMeph> :)
20:01:32 <monochrom> Dear great glguy, I have a little beef I have always had with hpaste.  Why is the top banner clickable all the way to the white, including a vast amount of blank space?  It is detrimal to my window switch habit of clicking on an obviously blank spot in a window, and I am sure my habit is not a fringe habit.
20:02:17 <dons> curious monochrom
20:03:01 <monochrom> I don't expect blank space to have side effects.
20:03:26 <monochrom> s/white/right/
20:03:56 <dons> ah, that's a convincing line.
20:04:04 <monochrom> haha
20:04:35 <EvilTerran> ?pl (,) `fmap` ($so) `ap` ($not) $ maybe
20:04:36 <lambdabot> (maybe so, maybe not)
20:05:16 <monochrom> @pl (maybe so, maybe not)
20:05:16 <lambdabot> (maybe so, maybe not)
20:05:26 <monochrom> @pl \(so,not) -> (maybe so, maybe not)
20:05:26 <lambdabot> maybe *** maybe
20:05:56 <monochrom> w00t, now it uses arrows and none of that liftM2 nonsense!
20:06:03 <monochrom> @pl \so not -> (maybe so, maybe not)
20:06:03 <lambdabot> (. maybe) . (,) . maybe
20:06:26 <jleedev> @type uncurry . (join (***))
20:06:28 <lament> that's so not cool
20:06:28 <lambdabot>     Couldn't match expected type `b -> c'
20:06:29 <lambdabot>            against inferred type `(c1, c1)'
20:06:29 <lambdabot>     Probable cause: `***' is applied to too many arguments
20:06:51 <dons> :t (maybe ?so, maybe ?not)
20:06:51 <lambdabot> forall b a b1 a1. (?not::b1, ?so::b) => ((a -> b) -> Maybe a -> b, (a1 -> b1) -> Maybe a1 -> b1)
20:09:17 <EvilTerran> ?where stats
20:09:17 <lambdabot> http://www.cse.unsw.edu.au/~dons/irc/
20:12:26 <dino-> Ah, explains why dons never got any patch for mkcabal from me. I see the message frozen in work machine queue. :/
20:13:41 <glguy> speaking of stats, hpaste has said more to the channel this year than I have :(
20:14:31 <monochrom> You are hpaste. The point of computing is to extend you beyond your reach.
20:14:54 <dino-> Use the hpaste, Luke.
20:19:27 <dons> glguy: hmm.
20:19:44 <glguy> dons: deep in thought?
20:19:49 <dons> oh, re. stats.
20:20:01 <dons> oh , i've dropped to #4
20:20:07 <DKATyler> Trying to review for a test in the morning, what are the types of Eq, Num, Integral, and Fractional?  Eq I think is a->a->Bool but I'm confused on the other 3
20:20:24 <dons> DKATyler: they're type *classes*
20:20:29 <dons> ?src Eq
20:20:29 <lambdabot> class  Eq a  where
20:20:29 <lambdabot>     (==), (/=)   :: a -> a -> Bool
20:20:29 <monochrom> a->a->Bool  is not the type of Eq.
20:20:39 <EvilTerran> type classes do not have types
20:20:43 <EvilTerran> if anything, the converse
20:20:53 <monochrom> I think you can go to sleep now. :)
20:21:01 <DKATyler> hmmmm tad confusing but think I understand it.
20:21:15 <EvilTerran> (==) :: Eq a => a -> a -> Bool, if that's what you meant
20:21:25 <EvilTerran> but that's the type of ==, not Eq.
20:21:25 <dons> they define a set of methods that are generic in some way. you then specify how to implement those methods for each specific type.
20:21:26 <monochrom> This is not confusing. Someone taught you wrong. (Maybe yourself.)
20:21:58 <DKATyler> alright, thank you
20:21:59 <dino-> Or perhaps it's some sort of trick question.
20:22:17 <DKATyler> well? I dunno, just what one of the review questions is
20:22:18 <EvilTerran> in which case, i answer "three!"
20:22:22 <DKATyler> :D
20:22:39 <EvilTerran> one to hold the lightbulb, and four to fill the bathtub with brightly coloured machine parts.
20:22:41 <monochrom> I would answer "undefined".
20:22:55 <dons> EvilTerran: heh. that's a bit like #haskell sometimes.
20:23:15 <EvilTerran> i guess you could look at <*> as a brightly-coloured machine part...
20:23:19 <dons> well, the type of Eq is the type of the Eq dictionary, i suppose :)
20:23:47 <Samburger> by convention, function names always start lowercase?
20:23:52 <monochrom> Yes.
20:23:53 <dons> by law.
20:24:06 <glguy> DKATyler: cpsc 314?
20:24:09 <BMeph> "One to point to the answer with @src, and three to give directions to use hpaste." ;)
20:24:16 <DKATyler> yep
20:24:36 <EvilTerran> BMeph, you forgot lambdabot
20:24:44 <EvilTerran> ?vixen BMeph forgot you!
20:24:44 <lambdabot> Guys who can speak latin really turn me on.
20:24:52 <BMeph> ;)
20:24:56 <BMeph> @bo
20:24:56 <lambdabot> :)
20:24:56 <EvilTerran> o.รณ
20:25:16 <BMeph> lorem ipsum, and all that. ;p
20:26:43 <glguy> hpaste_: url
20:26:45 <hpaste_> http://71.111.57.135/cgi-bin/hpaste.fcgi/
20:26:55 <BMeph> Besides, EvilTerran, lambdabot is the respondent to @src. Hm, does that make her the @src sink? ;)
20:27:02 * glguy just needed that to paste to someone
20:27:19 <dons> hmm. i think we need more white space
20:27:39 <monochrom> > replicate 160 ' '
20:27:42 <lambdabot>  "                                                                           ...
20:27:46 <EvilTerran> if you hpasted the lambdabot source code, would that then be sinking the source of the src sink?
20:27:47 * BMeph resists the urge to suggest more of... something else
20:28:05 <monochrom> hahahaha
20:28:18 <dons> glguy: any thoughts on how we extract and import the old pastes?
20:28:24 <EvilTerran> BMeph, cowbell?
20:28:26 <dons> or achive them somehow?
20:28:57 * monochrom goes archive his own http://hpaste.org/5556
20:29:24 <BMeph> EvilTerran: Even better - if you put lambdabot's code in a Gobby session, you could sync the source of the @src sink
20:29:34 * BMeph wonders if EvilTerran has a fever
20:29:36 <EvilTerran> ok, you win
20:29:40 <EvilTerran> ?karma+ BMeph
20:29:40 <lambdabot> BMeph's karma raised to 1.
20:29:55 <hpaste>  glguy pasted "colors test" at http://hpaste.org/5910
20:29:57 <wli> dons: A programming language whose syntax consists entirely of whitespace?
20:30:08 <monochrom> Oh, I have that already.
20:30:45 <glguy> dons: I dunno, I'm sure I could whip up something in a ghci session...
20:31:12 * monochrom archives his another one, http://hpaste.org/5833
20:32:54 <glguy> dons: I don't think that I'll be able to preserve the urls though
20:33:37 <gwern> > repeat "cowbell "
20:33:38 <lambdabot>  ["cowbell ","cowbell ","cowbell ","cowbell ","cowbell ","cowbell ","cowbell ...
20:33:48 <ddarius> cycle
20:33:57 <glguy> I think that the there is a lot more noise than signal though ;)
20:33:59 <gwern> eh. needs more cowbell
20:34:06 <gwern> @src cycle
20:34:06 <lambdabot> cycle [] = undefined
20:34:06 <lambdabot> cycle xs = xs' where xs' = xs ++ xs'
20:34:14 <ddarius> @src repeat
20:34:14 <lambdabot> repeat x = xs where xs = x : xs
20:34:24 <gwern> darn. I was betting that cycle was concat . repeat
20:34:32 <monochrom> > cycle "gollum!"
20:34:33 <lambdabot>  "gollum!gollum!gollum!gollum!gollum!gollum!gollum!gollum!gollum!gollum!gollu...
20:34:51 <gwern> > let cycle = concat . repeat in cycle "cowbell "
20:34:51 <lambdabot>  "cowbell cowbell cowbell cowbell cowbell cowbell cowbell cowbell cowbell cow...
20:35:09 <gwern> heh. I guess that definition works as well :)
20:35:18 <ddarius> concat . repeat is less efficient than cycle.
20:35:25 <wli> cycle = concat . repeat?
20:35:42 <glguy> ?src cycle
20:35:43 <lambdabot> cycle [] = undefined
20:35:43 <lambdabot> cycle xs = xs' where xs' = xs ++ xs'
20:35:47 <wli> Well, deforestation should hopefully happen.
20:36:28 <gwern> ddarius: efficiency is a false god! i like my definition better, it's shorter
20:37:08 <ddarius> > cycle []
20:37:10 <lambdabot>  Exception: Prelude.cycle: empty list
20:37:15 <glguy> whoops
20:37:17 <ddarius> > (concat . repeat) []
20:37:18 <lambdabot>  Exception: <<loop>>
20:37:18 <glguy> highlighting-kate is out
20:37:39 <ddarius> fix . (++)
20:38:10 <monochrom> Haha, fix . (++) wins.
20:38:11 <ddarius> There you go, that's the same as concat . repeat semantically, shorter and more efficient.
20:38:11 <gwern> hm. what's wrong with defining cycle [] = []? an infinite sequence of []:[]:[]: strikes me as being equivalent to []
20:38:19 <wli> golfed
20:38:23 <dnoxx> do haskell got any standard document?
20:38:31 <ddarius> @where report
20:38:31 <lambdabot> http://www.haskell.org/onlinereport/
20:38:47 <ddarius> dnoxx: All these questions and more are answered on haskell.org
20:39:24 <dnoxx> ddarius: thats all i wanted
20:39:30 <gwern> :t fix
20:39:30 <lambdabot> forall a. (a -> a) -> a
20:39:44 <sarehu> having cycle [] = [] is like having 0 * infinity = 0
20:40:14 <monochrom> gwern: http://www.vex.net/~trebla/haskell/fix.xhtml
20:40:24 * gwern always forgot whether 0 * infinity was a licit operation
20:40:53 <gwern> monochrom: thanx. can't quite puzzle out that definition using fix
20:41:24 <sm> evening gwern, all
20:41:54 <sm> no invaders cleanup from bernie pope yet, eh ?
20:42:10 <gwern> guess not. but I already put hinvaders on hackage
20:42:20 * gwern goes to check. I did, right?
20:42:28 <monochrom> (fix . (++)) xs = fix (xs ++) = (let xs' = xs++xs' in xs') = (xs' where xs' = xs++xs')  now it should look exactly like cycle.
20:42:47 <sm> you did, yes
20:43:02 <wli> Except no potentially informative error message.
20:44:08 <sm> discovered any more games ?
20:44:53 <gwern> sm: there's this really crappy opengl 'octanemech' one I might as well package since it compiles
20:45:07 <gwern> oh, and I'm still waiting for copyright info on mage, paratrooper, and connect4
20:45:36 <sm> hmm.. maybe we should make a good one
20:45:37 * monochrom remembers paratrooper! pretty brutal.
20:45:54 <sm> I found this old game engine, FunGen.. seen it ?
20:46:00 <sm> looks quite useful
20:46:38 <gwern> FunGen? doesn't sound all that familiar
20:46:52 <gwern> not //www.cs.kent.ac.uk/people/staff/cr3/toolbox/haskell/FunWorlds/ ?
20:46:57 <sm> http://www.cin.ufpe.br/~haskell/fungen
20:46:58 <lambdabot> Title: FunGEn - Andre W B Furtado - 2002
20:47:33 <sm> I mailed him a few days back, haven't heard anything
20:48:10 <gwern> 'This really demands some time, but the authors expect a new version to be released soon. ' <-- that is never, *ever*, a good thing to read
20:48:43 <sm> sure.. looks like it has been ignored (by them and us) for six years
20:49:05 <sm> he has written a bunch of papers on game topics since though.. seems to be still interested
20:49:34 <Samburger> is there a type called Letter in Haskell?
20:49:44 <monochrom> No.
20:49:45 <ddarius> Samburger: Not in standard Haskell.
20:49:49 * sm has high hopes
20:50:00 * ddarius remembers when FunGen was new.
20:50:03 <cjb> Samburger: Char?
20:50:34 <Samburger> Yeah I'm reading this snippet of code that mentioned Letter
20:50:42 <gwern> looks like FunGen is only ever mentioned in http://haskell.org/haskellwiki/Applications_and_libraries/Games
20:50:45 <Samburger> I guess it is defined elsewhere to be equivalent to char
20:50:55 <cjb> ah, ok
20:51:08 <Samburger> sorry, Char :)
20:51:15 <gwern> type Letter = Char strikes me as a bad idea - numerals and punctuation are all Char, no?
20:51:16 <Samburger> don't want to break any laws now
20:51:19 <sm> oh right, that's where I heard about it.. so I guess we didn't ignore it
20:51:22 <gwern> :t '.'
20:51:22 <lambdabot> Char
20:51:29 <gwern> :t '1'
20:51:30 <lambdabot> Char
20:51:38 <cjb> :t 'Foo'
20:51:38 <lambdabot> lexical error in string/character literal at character 'o'
20:52:00 <cjb> aw, I lose the lambdabot game
20:52:14 <gwern> :t "foo"
20:52:14 <lambdabot> [Char]
20:52:29 <_roconnor> @go 1 stone in pounds
20:52:30 <lambdabot> 1 stone = 14 pounds
20:52:32 <cjb> :)
20:54:18 <lekro> anyone here using HOpenGL with GLUT?
20:54:33 <lekro> is there an easy way to turn on anti-aliasing?
20:54:51 <roconnor> boy dia is a great program
20:55:04 <roconnor> screw xfig
20:55:33 * monochrom switched to dia a long time ago.
20:55:50 <dons> dia is awesome. inkscape's even better!
20:55:55 <lekro> because I'm struggling with 2D graphics. My first try was libcairo but it turned out to be really slow on Mac :(
20:56:01 <sm> is there an easy way to see the call graph of modules that don't compile ?
20:56:09 <roconnor> dons: should I use inkscape for making diagrams for papers?
20:56:16 <sm> or include graph ?
20:56:28 <lekro> but compared to cairo the opengl graphics is all jaggy and aliased, I need smooth graphics
20:56:37 <dons> roconnor: i've done so, roconnor.
20:56:39 <jeffz> I've used inkscape to do diagrams, I found dia a bit hard to use.
20:56:50 <Zao> lekro: Enable antialiasing, if available?
20:56:53 <roconnor> dons: on intresting.
20:56:57 <lekro> Zao: that was my question.
20:57:01 <lekro> Zao: how?
20:57:05 <dons> there's some diagrams in the stream fusoin paper done in inkscape
20:57:13 <Zao> Or trick someone to make AntiGrain Geometry bindings.
20:58:07 <EvilTerran> is this for printing
20:58:08 <EvilTerran> ?
20:58:20 <lekro> I thought it'd be just a few lines to turn on anti-aliasing in HOpenGL
20:59:35 <lekro> but I couldn't to find any haskell code with AA, apparently no one uses it of some reason or I used wrong google terms
20:59:51 <lekro> s/of/for
20:59:57 <Zao> I can't help you there, I usually just force it in my OS.
21:00:09 <dino-> Wow, cabal-install is really cool.
21:00:15 <Zao> Which is driver and platform dependant.
21:00:23 <dino-> (I say as a strict Debian user)
21:00:24 <lekro> Zao: I guess that only works on windows?
21:00:57 <Zao> lekro: Unixy systems with nvidia has the __GL_FSAA_MODE environment variable.
21:00:59 <lekro> Zao: I don't know of any global AA setting on Mac OS X
21:01:28 <dino-> Don't dia and inkscape do different things? As in, structured diagrams a-la Visio vs vector drawing like CorelDRAW!
21:02:36 <dino-> Perhaps there's a lot more crossover and capability in inkscape than I had any idea.
21:03:34 <lekro> another thing I don't quite understand is on http://www.haskell.org/ghc/docs/latest/html/libraries/OpenGL/Graphics-Rendering-OpenGL.html
21:03:40 <lambdabot> http://tinyurl.com/337hg2
21:03:47 <lekro> it says that is supports a lot of extensions. what does that mean?
21:03:59 <lekro> how can I access these extensions from Haskell?
21:04:17 * ddarius stumbled across an interesting paper: "A New Object-Oriented Programming Language: sh"
21:04:24 <lekro> there is no further documentation about it (or I at least I didn't see any)
21:04:35 <ddarius> (well, interestingly titled paper)
21:05:56 <lekro> Zao: thanks, unfortunately my Mac has an ATI
21:06:39 <dino-> I'm confused about something with cabal-install, if anyone is familiar. It got me things, built them and looked successful. But I don't see them in ghc-pkg list output.
21:06:39 <dino-> I did it with sudo.
21:06:39 <dino-> It plonked files in my ~/.cabal/
21:07:20 <lekro> is there any other place where I could find people with HOpenGL experience?
21:07:39 <dino-> mm, I bet I had to specify --global
21:07:54 <dons> lekro: here, and the -cafe@ list
21:08:19 <dons> dino-: hmm.
21:09:49 <ddarius> There seems to be OpenGL.GL.Antialiasing.multisample
21:13:18 <lekro> ddarius: thanks, could be worth a shot. I guess I overlooked this because it looked like a read-only state to me
21:13:20 <sm> lekro: I think you have to find out how to do it from the open gl docs, then the hopengl api will make sense
21:16:47 <lekro> sm: what I found out is that fullscreen anti-aliasing seems to be an extension
21:16:52 <sm> also http://www.haskell.org/ghc/docs/latest/html/libraries/OpenGL/Graphics-Rendering-OpenGL.html lists the extensions, I think they are just there
21:16:53 <lambdabot> http://tinyurl.com/337hg2
21:17:11 <yrzzbe> With Haskell, can one redefine a previously defined function inside a running Haskell instance?
21:17:13 <lekro> and extensions in C are accessed via GetProcAddress32 and other real low-level stuff
21:17:30 <lekro> raw function pointers etc.
21:17:53 <dino-> Huh, you know it does show up in the second section of ghc-pkg list output, my local ~ dir package.conf
21:18:26 <dino-> But a proj that needs it can't see it. I'm not very familiar with these not in /usr/local/lib/ghc-... things.
21:18:26 <lekro> ddarius: the multiSample StateVar doesn't have any effect on my machine
21:19:10 <dons> yrzzbe: no, monkey patching isn't generally possible. there's some exceptions
21:19:34 <yrzzbe> dons: I'm sorry, I don't quite understand your terminology. :-(
21:20:15 <dons> no, its not really possible :)
21:20:55 <yrzzbe> dons: I'm thinking about something like that of a REPL. Load a Haskell file, redefine a function, then the running program will "get" the redefinition.
21:21:20 <dons> you want to implement an interpreter?
21:22:09 <dons> you could always store the new definition in the state, and then run whatever the current definition is
21:22:52 <sm> dino-: you know ghc packages can be hidden or exposed ? ghc-pkg shows the former in ( )
21:23:08 <dino-> sm: These are exposed.
21:23:28 <sm> strange then
21:23:41 <dino-> Even when I blow away my newly-created ~/.ghc dir, and redo the # cabal install --global exif
21:23:46 <dino-> Same outcome.
21:24:01 <sm> the cabal manual will tell why
21:24:13 <dino-> ya, I'll dig into that tomorrow.
21:24:16 <dino-> Thanks for your help guys
21:24:20 <sm> good luck
21:24:37 <dino-> This is cool stuff, apt-like programs make me happy.
21:24:47 <sm> yes, they are appearing everywhere
21:26:10 <dons> got it working, dino- ?
21:27:01 <Samburger> does haskell equate String with [Char]?
21:27:52 <Samburger> I mean are the two interchangeable
21:28:09 <dons> ?src [Char]
21:28:09 <lambdabot> Source not found.
21:28:16 <dons> ?src String
21:28:16 <lambdabot> type String = [Char]
21:28:20 <dons> :)
21:28:28 <Samburger> i see :)
21:28:45 <dons> yes, String is a synonym for a [Char]
21:30:24 <Samburger> One day I'll stop asking noobie questions, I promise
21:33:42 <falconair> i often use excel at work for monitoring financial markets, it is nice to make changes without restarting the app., in the haskell world, is such 'live programming' possible?  are hs-plugins and "dynamic applications from the ground up" (yi, lambdabot) best examples of such?
21:35:47 <jeffz> strange that a program should need to be restarted by design
21:36:48 <oerjan> i think maybe thunks and laziness make it harder.  there are too many places where remains of the old code could persist
21:36:59 <falconair> i'm thinking in the sense of smalltalk, where apparently functions themselves can be changed while the app is running...even if the programmer never designed it as such
21:37:02 <oerjan> so you would need to recompile everything that depends on the new code
21:37:57 <oerjan> the problem here is that in strict languages, once a function has finished you know no reference to its code remains
21:38:13 <sm> falconair: yes they are
21:38:21 <ddarius> oerjan: Old code existing is no problem.
21:38:30 <falconair> perhaps the general principle of purity will cause trouble as well?  since a function can be changed to give different output, while the application is running
21:38:31 <oerjan> ddarius: for consistency it is
21:39:32 <oerjan> i would guess, that since haskell thunks can be for so many other data than functions, it may be hard for a programmer to understand exactly what _does_ remain after such a change
21:39:34 <ddarius> oerjan: The same problem happens with object-oriented languages or closures.  Y tllou can either just keep the old code until it is dead (probably the right thing to do) or replace it.
21:40:09 <ddarius> oerjan: The programmer doesn't need to care any more than he does for any other sort of data.
21:40:17 <oerjan> s/many/much/
21:40:43 <oerjan> ddarius: i mean it's a conceptual problem, say if you have an infinite list of data
21:40:56 <oerjan> which is already partially computed
21:41:36 <oerjan> and moreover, it is part of the running state of the program
21:42:12 <OceanSpray> :t take
21:42:15 <lambdabot> forall a. Int -> [a] -> [a]
21:42:28 <monochrom> What is meant by "change without restart in excel"? You change a number in a cell, and click "re-calculate"?
21:42:32 <oerjan> what i mean is, it is hard to separate runtime data from computing functions conceptually
21:42:33 <OceanSpray> so I have a function that generates an infinite assoc list
21:42:49 <monochrom> hs-plugins would be an overkill for that?
21:42:57 <OceanSpray> oh wait
21:42:58 <OceanSpray> nvm
21:44:13 <ddarius> oerjan: I don't see anything conceptually or technically difficult/different about your example.
21:44:34 <falconair> monochrom: yes, i mean changing a number and all dependents are updated, but we often end up putting in quite a bit of logic in a spreadsheet, only because we can see all intermediate values and change any number/function params, if/else and change is reflected immediately
21:44:51 <ddarius> Something analogous to Smalltalk's #become: could be used if you want to change old code/values.
21:45:16 <monochrom> Then "tangible values" can already do that.
21:45:29 <falconair> I think a better example would be what Sean McDirmid's "Living it up with a Live Programming Language"
21:46:23 <monochrom> http://www.haskell.org/haskellwiki/Tangible_Value
21:46:24 <lambdabot> Title: Tangible Value - HaskellWiki
21:47:12 <oerjan> hm
21:47:16 <monochrom> In section 4 there is an example of two cells related by a function.  You change one cell and the related second cell is updated.
21:48:14 <monochrom> In that example, granted, that function is hard-coded.  But nothing stops you from letting user enter some string, parsing it, producing a new function, and relating it by the ($) operator to other cells.
21:49:30 <falconair> ah yes, i remember seeing a google video of Conal's presentation of TVs, very interesting, they could be used as well
21:50:19 <ddarius> falconair: You may also find Vital interesting.
21:50:52 <monochrom> IMO it is actually imperative to use a pure functional language to code up a spreadsheet.  Mutable state would just cause you to pull your hair out (via the Turing tarpit - referential transparency can be emulated with great chaos by a Turing machine).  For example as soon as you want to implement "undo" you will regret choosing mutable state.
21:51:28 <ddarius> @where vital
21:51:28 <lambdabot> I know nothing about vital.
21:51:41 <falconair> http://www.cs.kent.ac.uk/projects/vital/
21:51:42 <lambdabot> Title: Vital homepage
21:51:43 <ddarius> @where+ vital http://www.cs.kent.ac.uk/projects/vital/
21:51:44 <lambdabot> Done.
21:52:35 <falconair> ok, i have enough stuff to check out, thanks folks
21:54:09 <OceanSpray> how do I do e^x?
21:55:48 <ddarius> :t exp
21:55:49 <lambdabot> forall a. (Floating a) => a -> a
21:56:19 <yrzzbe> dons: No, I'm not thinking about writing an interpreter. I'm thinking if the thing I'm asking about does exist.
22:04:39 <sm> bindTexture seems to be an obsolete HOpenGL function, would anyone know what replaces it ?
22:05:55 <Zao> textureBinding Texture2D $= tex
22:06:23 <Zao> Where tex is a Maybe something
22:06:58 <sm> Zao: thanks. Does that binds tex (a TextureObject) to a texture ?
22:07:05 <Zao> Maybe TextureObject
22:07:08 <Zao> Yes.
22:07:18 <Zao> Pass Nothing to unbind.
22:07:42 <sm> I'm a little confused.. $= is how we set state ?
22:08:02 <sm> so textureBinding is returning a state var
22:09:08 <sm> yes, I see
22:11:11 <Zao> sm: See FancyUI and Texture at http://www.acc.umu.se/~zao/Hastris/trunk/
22:11:12 <lambdabot> Title: Index of /~zao/Hastris/trunk
22:11:28 <Zao> Beware though, it's code from when I was new to Haskell, so it may make lambdakittens cry.
22:13:12 <OceanSpray> seriously though
22:13:16 <OceanSpray> pi is defined,
22:13:19 <OceanSpray> why not e?
22:13:27 <sm> thanks! I'll check it out
22:13:45 <Zao> sm: There's fugly screenshots in the parent directory by the way.
22:13:48 <sm> I'm updating the fungen game engine
22:14:13 <sm> nice, nice
22:15:00 <ddarius> > exp 1
22:15:13 <OceanSpray> oh
22:15:13 <lambdabot>  2.718281828459045
22:15:19 <OceanSpray> exp 1.1
22:15:32 <OceanSpray> > exp $ ln 2
22:15:33 <lambdabot>   Not in scope: `ln'
22:15:56 <dmwit> > log 2
22:15:56 <lambdabot>  0.6931471805599453
22:16:02 <dmwit> > exp $ log 2
22:16:04 <lambdabot>  2.0
22:16:39 <OceanSpray> oh, log = ln
22:16:52 <ddarius> > logBase 2 8
22:16:53 <lambdabot>  3.0
22:34:13 <OceanSpray> I need to pretty print a list
22:34:41 <sm> how would I get a clickable hoogle search of say HOpenGL ?
22:34:50 <Zao> > show [42, 3, 5]
22:34:51 <lambdabot>  "[42,3,5]"
22:35:04 <OceanSpray> well, an assoc list
22:35:07 <sm> this digging around is getting tedious
22:35:15 <OceanSpray> would be nice if the pairs were lined up right.
22:37:12 <Zao> sm: I usually use the hackage haddock docs and the PDF tutorial.
22:39:15 <sm> Zao: thanks. The hackage links are less hierarchical than ghc docs'.. I still must find some easier way to see all
22:43:10 <sm> hasktags can't recurse, it seems
22:43:22 <sm> handle directory trees, I mean
22:44:08 <lekro> I solved my multisampling problem with HOpenGL. it *is* really simple after all: just call initialDisplayCapabilities $= [ ... , Where DisplaySamples IsNotLessThan 4 ] or some number like that. Then it automagically activates an appropriate OpenGL extension. HOpenGL just went a lot higher in my rating. :)
22:45:13 <dons> sm, yeah, recurse in the shell, annd have it append to a file
22:45:43 <sm> ok, thanks
22:46:08 <sm> lekro: great. Thought so
22:48:04 <OceanSpray> oh screw it
22:49:09 <wagle_home> you can define your own instance of show for assoc lists..  main thing would be to do a prescan to find the max width of each field before setting the "tabs"
22:50:41 <oerjan> > let ppa l = concatMap (\(k,v) -> printf "%*s %*s\n" lk k lv v") l where lk = maximum . length $ fst l; lv = maximum . length $ snd l in ppa . map (show *** show) $ [(1,3),(310,-5),(6,8)]
22:50:42 <lambdabot> Unbalanced parentheses
22:51:08 <oerjan> o_O
22:51:40 <oerjan> oh
22:51:47 <oerjan> > let ppa l = concatMap (\(k,v) -> printf "%*s %*s\n" lk k lv v) l where lk = maximum . length $ fst l; lv = maximum . length $ snd l in ppa . map (show *** show) $ [(1,3),(310,-5),(6,8)]
22:51:54 <lambdabot>  Couldn't match expected type `[a]' against inferred type `Int'
22:52:38 <oerjan> > let ppa l = concatMap (\(k,v) -> printf "%*s %*s\n" lk k lv v) l where lk = maximum . map (length . fst) l; lv = maximum . map (length . snd) l in ppa . map (show *** show) $ [(1,3),(310,-5),(6,8)]
22:52:38 <lambdabot>  Couldn't match expected type `a -> [a1]'
22:52:57 <hpaste>  (anonymous) pasted "(no title)" at http://hpaste.org/5911
22:53:09 <radetsky> should this be printing something?
22:53:14 <radetsky> I'm not sure I'm doin it rite
22:57:42 <radetsky> anyone?
22:58:05 <oerjan> > let ppa l = concatMap (\(k,v) -> printf "%*s %*s\n" lk k lv v) l :: String where lk = maximum $ map (length . fst) l; lv = maximum $ map (length . snd) l in ppa . map (show *** show) $ [(1,3),(310,-5),(6,8)]
22:58:06 <lambdabot>  "  1  3\n310 -5\n  6  8\n"
22:58:28 <oerjan> OceanSpray: ^^
22:59:10 <OceanSpray> oh
22:59:12 <OceanSpray> thanks
22:59:12 <dons> radetsky: hmm.
23:00:00 <OceanSpray> @index printf
23:00:00 <lambdabot> Text.Printf
23:00:03 <oerjan> radetsky: maybe if you switch the forkIO and the writeChan?
23:00:15 <dons> radetsky: daemonic threads :)
23:00:24 <dons> the whole program ends when the main thread exits
23:00:25 <oerjan> in case writeChan blocks until another thread reads, that would explain your problem
23:00:40 <oerjan> oh that too
23:00:56 <OceanSpray> @index (***)
23:00:56 <lambdabot> Control.Arrow
23:02:14 <oerjan> @hoogle wait
23:02:15 <lambdabot> System.Process.waitForProcess :: ProcessHandle -> IO ExitCode
23:02:15 <lambdabot> Control.Concurrent.QSem.waitQSem :: QSem -> IO ()
23:02:15 <lambdabot> Control.Concurrent.QSemN.waitQSemN :: QSemN -> Int -> IO ()
23:02:26 <oerjan> no waitForThread?
23:02:35 <oerjan> @hoogle forkIO
23:02:36 <lambdabot> GHC.Conc.forkIO :: IO () -> IO ThreadId
23:02:36 <lambdabot> Control.Concurrent.forkIO :: IO () -> IO ThreadId
23:02:36 <hpaste>  dons annotated "(no title)" with "daemons" at http://hpaste.org/5911#a1
23:02:51 <dons> oerjan: takeMVar dude :)
23:03:58 <dons> radetsky: make sense?
23:04:04 <radetsky> I'm still thinking
23:04:06 <oerjan> @hoogle ThreadId -> IO ()
23:04:06 <lambdabot> GHC.Conc.killThread :: ThreadId -> IO ()
23:04:06 <lambdabot> Control.Concurrent.killThread :: ThreadId -> IO ()
23:04:06 <lambdabot> GHC.Conc.throwTo :: ThreadId -> Exception -> IO ()
23:04:18 <oerjan> @hoogle+
23:04:19 <lambdabot> GHC.Conc.labelThread :: ThreadId -> String -> IO ()
23:04:19 <lambdabot> Control.Exception.throwTo :: ThreadId -> Exception -> IO ()
23:04:19 <lambdabot> Control.Concurrent.throwTo :: ThreadId -> Exception -> IO ()
23:04:40 <dons> radetsky: so the main thread exits, taking with it the child thread *before* it gets a chance to print its message
23:04:52 <dons> so we can instead have the main thread do its business, then block, waiting for the child to be done.
23:05:09 <radetsky> yeah, that makes sense
23:06:29 <radetsky> ahh, threadDelay 10,000,000 at the end makes it work
23:06:37 <dons> yeah, but that's silly :)
23:06:42 <radetsky> dons: of course
23:06:50 <radetsky> it's not supposed to be good software engineering
23:06:54 <dons> hehe
23:06:56 <radetsky> it's supposed to verify your claim
23:07:37 <oerjan> are threads so lightweight that there is no way to detect if one quits without it being set up for it?
23:07:43 <dons>       In a standalone GHC program, only the main thread is
23:07:43 <dons>       required to terminate in order for the process to terminate.
23:07:43 <dons>       Thus all other forked threads will simply terminate at the same
23:07:43 <dons>       time as the main thread (the terminology for this kind of
23:07:43 <dons>       behaviour is \"daemonic threads\").
23:07:45 <dons>       If you want the program to wait for child threads to
23:07:48 <dons>       finish before exiting, you need to program this yourself.
23:08:08 <dons> oerjan: basically, yep. there's no signals. nothing. so an MVar is perfect here.
23:09:11 <oerjan> hm it would be easy to write a wrapper...
23:10:29 <dons> yep. forkAndWait f = do x <- newEmptyMVar ; forkIO (f `finally` putMVar ()) ; takeMVar x
23:10:49 <oerjan> @hoogle finally
23:10:49 <lambdabot> Control.Exception.finally :: IO a -> IO b -> IO a
23:12:13 <radetsky> dons: you never told me what that hmp3 thing was about
23:12:26 <dons> i didn't work it out -- and haven't been able to reproduce it :(
23:12:35 <radetsky> no, I mean the comment
23:13:19 <radetsky> on line 77 of UI.hs
23:14:22 <sm> Zao: would you know what is the modern equivalent of enable/disable texture ?
23:15:04 <dons> radetsky: oh hmm. the tweak for openbsd?
23:15:19 <dons> i don't remember :)
23:15:43 <radetsky> well, it said "OpenBSD console" which is why I noticecd
23:15:58 <dons> yeah, i guess some env var wasn't defined or some such
23:16:06 <radetsky> you may recall that console issues such as line buffering were suspects
23:16:20 <radetsky> oh, you mean TERM?
23:18:23 <Zao> sm: texture Texture2D $= Enabled
23:18:54 <Zao> sm: Sorry for the delay, was playing a game.
23:19:37 <sm> aha, thanks
23:29:11 <quicksilver> re lament's discussion of earlier, I'm surprised he feels that "on-the-fly" goto-tag is so incredibly important.
23:29:22 <prb> Is there any grand plan for unifying/cleaning up the time libraries in GHC?
23:29:41 <prb> System.Locale.rfc822DateFormat is an annoyance, for example.
23:29:43 <quicksilver> If I've written a function so recently I haven't even saved the file yet, then I normally know where the definition is. Because I"m writing it.
23:30:25 <quicksilver> prb: I don't know the grand plan. I can tell you that System.Time is obsolete and Data.Time.* is the way forward.
23:31:25 <quicksilver> prb: I think System.Local is probably supposed to be superseded by Data.Time.LocalTime
23:32:23 <prb> quicksilver: Unfortunately, Data.Time.Format depends on System.Locale...
23:33:04 <quicksilver> prb: oh yes, hadn't spotted that.
23:33:11 <quicksilver> prb: I guess that's due for cleanup, yes.
23:33:40 * prb has been fiddling with ISO-8601 and RFC 1123 date-times.
23:34:41 <prb> I can't imagine why whoever designed the HTTP datestamp format selecting something with the day of the week in it.
23:35:15 <adu> prb: they didn't, no one designed HTTP, it was pure accident
23:35:36 <prb> adu: Someone had to write the RFCs...
23:35:45 <adu> hehe
23:36:06 <adu> i know
23:36:09 <prb> adu: I think it's OK to tinker with the stone tablets a bit, at least for clarity.
23:37:34 <prb> Supporting conditional get on the server side in an HTTP app requires producing the RFC 1123 datetimes, and that requires computing the day of the week.
23:38:17 <flux> prb, nah, nobody's going to parse the weekday anyway, just put Mon there ;)
23:38:26 <prb> flux: Sorely, sorely tempted.
23:38:39 <flux> or maybe: Prb
23:38:59 <prb> flux: I can see someone using a regex (Sun|Mon|...).
23:39:20 <glguy> hmmm, the current syntax highlighting method I'm using might not scale well
23:39:45 <prb> glguy: It's incremental or it's O(n^2).
23:39:47 <glguy> runInteractiveProcess isn't generally a high-performance technique :)
23:40:12 <glguy> prb: no idea, its outsourced
23:41:03 <sm> ghc's IO and System.IO are different, I assume
23:42:19 <oerjan> yes
23:43:31 <oerjan> IO contains the old catch, for one thing
23:44:16 <sm> I see, thanks
23:46:00 <oerjan> while System.IO has several new functions
