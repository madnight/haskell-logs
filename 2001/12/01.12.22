00:05:40 <jemfinch> has anyone here written an interpreter in a strictly typed language like haskell or ML?
00:08:12 <jemfinch> I'm actually writing in O'Caml, but here's what I'm doing: I'm writing the backend of an interpreter (the abstract syntax tree, dynamic typesystem, etc.) and it seems the only way I can offer first-class functions is to unify the "type" type and the "abstract syntax tree" type.  Is there any way to offer first-class functions without unifying those two types?
08:00:33 * shapr reads about higher-order functions
08:09:57 <shapr> ah cool
08:10:09 <shapr> mm
08:10:14 <shapr> hi chad_
08:10:24 <shapr> ah, lambda notation
08:10:36 <shapr> so that's how it works
08:12:03 <shapr> \m -> n+m
08:12:18 <shapr> \ is the closest ascii to a real lambda character
08:14:58 <chad_> hello shapr
08:15:05 <shapr> what's up?
08:15:15 <chad_> nothing much.  trying to keep my eyes open.
08:15:29 <chad_> I got  my first haskell book, so I'm ready to rock ;)
08:15:39 <shapr> cool!
08:15:42 <shapr> which book did you get?
08:16:03 <chad_> "The craft of functional programming", i believe
08:16:09 <chad_> I'm too lazy to go look :)
08:16:52 <chad_> http://shop.barnesandnoble.com/booksearch/isbnInquiry.asp?userid=16ECZBVTZK&mscssid=98CNEHC09ARE8L37EBT0K54CFLSC61C1&isbn=0201342758
08:18:51 <shapr> ah, that's the book I'm reading right this moment
08:18:59 <shapr> I'm looking at page 174 in fact
08:19:51 <chad_> cool
08:20:06 <chad_> I'm still somewhere around page 40 :)
08:21:05 <shapr> this is the best book I've seen to learn Haskell
08:21:13 <chad_> that's good news
08:21:14 <shapr> I'm not doing all of the homework yet
08:21:24 <chad_> I'm going to try to do all of the exercise
08:21:32 <shapr> I'm reading through it first, and only playing with stuff I don't understand at all
08:21:42 <shapr> next run through I'll do all the homework
08:21:55 <shapr> at that point I will hopefully understand Haskell :)
08:22:02 <chad_> I'm teaming up with another ruby guy to learn this thing together
08:22:10 <chad_> so, we're both going to go through the exercises and compare notes
08:22:16 <shapr> nifty, does he show up here on #haskell also?
08:22:22 <chad_> sometimes
08:22:25 <chad_> not much though
08:22:33 <chad_> neither of us has much haskell to talk about yet :)
08:22:40 <shapr> yah, I understand that.
08:22:57 <chad_> it's good to idle and see what the haskellers are saying, though...
08:23:05 <chad_> good way to figure out the thought process
08:23:13 <shapr> yah, sometimes we get lots of good traffic here
08:23:21 <shapr> more often it's quiet though .....
08:23:30 <shapr> clog is a logbot
08:23:37 <chad_> same thing on #ruby-lang
08:23:48 <shapr> the channel topic has the location of the logs if you want to read them
08:23:59 <chad_> ahh
08:24:01 <chad_> that's cool
08:25:11 <shapr> lambda notation is nice
08:25:16 <shapr> Haskell is very concise
08:25:18 <shapr> I like that
08:26:10 <chad_> seems like it so far
08:26:21 * chad_ was just noticing that someone has been working on a unit testing framework
08:29:19 <shapr> yah, there's one mentioned on the haskell wiki
08:29:45 <chad_> that's where I was looking
08:29:52 <chad_> Kind of a weird concept
08:30:50 <shapr> unit testing?
08:31:07 <chad_> unit testing in haskell...
08:31:09 <shapr> or specifically with Haskell?
08:31:10 <shapr> oh
08:31:17 <shapr> seems pretty normal to me
08:31:18 <chad_> just seems a bit hard for me to get my mind around
08:31:22 <shapr> but I haven't actually tried it yet :)
08:31:32 <chad_> i'm sure it will make sense when i understand haskell better
08:31:39 <shapr> I do unit testing at work as a normal part of my daily existance
08:31:45 <shapr> but that's in Python and Java
08:31:55 <chad_> yea...I do a lot of tesitng in Ruby and Java myself
08:55:22 * shapr hacks plays with partial evaluation
23:39:10 * shapr notices that haskell's elem == python's in
23:39:20 <shapr> maybe I should write "Haskell for the Python programmer"
