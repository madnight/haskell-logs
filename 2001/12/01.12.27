08:00:11 <shapr> hi
08:00:28 <sebras> shapr: hi... rather quite channel, is it not... :-/
08:00:34 <xbill> nah
08:00:39 <xbill> we talk
08:01:17 <sebras> xbill: oh... it's like when you go into a room and everybody just get quiet
08:01:20 <shapr> yah, just depends on what people have to say
08:01:52 <shapr> sadly, I'm at work, banging my head against X.509
08:02:23 <sebras> shapr: oh, well I didn't expect a haskell channel to be nosiy... 
08:03:09 <shapr> you could always ask what a Monad is ;)
08:03:29 <sebras> shapr: "What the hell are Monads?"...
08:03:37 <sebras> shapr: read that already... :-)
08:03:38 <xbill> everyone asks that
08:04:27 <shapr> I still don't really understand the answer.
08:04:44 <sebras> shapr: but I could ask you what compilers you use. I've only tried hugs, but that doesnt compile natively... is GHC better?
08:05:04 <sebras> shapr: well, not _better_ but is it feasible to use GHC for native compilation?
08:05:23 <xbill> yes
08:05:29 <xbill> -fvia-native
08:06:11 <shapr> yup, I prefer to use GHC for everything
08:06:12 <sebras> xbill: do you know of any papers/articles/whatever that compares ghc with other compiles (haskell, C, C++, what have you)?
08:06:34 <xbill> comparing with non-Haskell compilers is apples and oranges
08:07:42 <sebras> xbill: I know that haskell and non-haskell languages are dissimilar, but it would be interesting to know what speed one could get from a ghc compiled program...
08:07:49 <shapr> lots :)
08:08:22 <xbill> sebras: there are quite a few differences in the execution model, the operations happening will make a large difference
08:08:34 <sebras> xbill: I read some article that stated that ocaml was faster than c++ today. that problably makes ocaml a feasible langauge to use, as opposed to hugs...
08:09:08 <sebras> shapr:
08:09:15 <sebras> shapr: url me! :-)
08:09:33 <sebras> shapr: at least if you have any articles handy...
08:09:55 <xbill> old news, ocaml generates higher-quality code than gcc by a longshot and C++ isfairly crappy
08:09:55 <dennisb> ghc is a fine compiler, i've not heard many complains that it is slow
08:11:08 * shapr gets tired of X.509
08:11:10 <shapr> I'm goin home
08:11:11 <dennisb> it's usually not the compiler that makes programs slow, it's the programmer
08:11:24 <shapr> yup, program design makes all the difference
08:11:27 <sebras> xbill: I know its old news, but I recently discovered ocaml...! C++ is icky no matter what... :-/
08:11:28 <xbill> event-driven programs
08:11:45 <xbill> allyou have to do is poke events fast enough
08:11:55 <sebras> dennisb: algorithms make the difference...
08:12:02 <xbill> response time is the measure of performance
08:12:50 <dennisb> sebras: yes, and understanding the hardware and lower level languages even when you program in a high level language is also important
08:13:23 <sebras> xbill: I used a theorem proving program with some GUI. all was developed in haskell, but I don'nt know what compiler the used. it was slow as h-ll...
08:13:54 <dennisb> theorem proving is usually slow by itself..
08:13:59 <xbill> don't know what to tell you
08:14:00 <dennisb> what prover did you use?
08:14:04 <sebras> xbill: hence my distrust of native haskell compilers... haven't read anything by ghc though...
08:15:10 <sebras> dennisb: it's called alga I think... some guy a Chalmers (Gothenburg, Sweden) Institute of technology though that making proofs was interesting...
08:15:32 <dennisb> yes, alfa
08:15:34 <xbill> hbc was not exactly a speed demon
08:15:37 <sebras> xbill: thats ok... :-)
08:16:19 <dennisb> Thomas Hallgren is the writer, it uses fudgets which is a widget set written fully in haskell
08:16:27 <sebras> dennisb: alfa, close at least... the lack of speed might be because of that fact that I ran the program on a solaris machine...
08:17:16 <dennisb> well, it does a lot of work also, i've seen it on normal pc:s in linux and it's not that bad
08:17:27 <sebras> dennisb: you obviously know the program.. I attended Thomas presentation of alfa in lund a few weeks back...
08:17:51 <dennisb> Oh, I thought he was in usa
08:18:14 <sebras> dennisb: :-D well... lund isn't that far away...
08:18:24 <dennisb> sebras: I'm at chalmers so...
08:19:10 <dennisb> But I bet it would be snappa and nice if it used some standard gui toolkit
08:19:52 <dennisb> snappy even, which might not be a english word anyway :-)
08:19:56 <sebras> dennisb: its compiled with ghc today?
08:20:13 <dennisb> No, I don't think so.
08:20:37 <sebras> dennisb: wouldn't it be marvelous to have the outgoing traffic pass through ispell before sending it? >;-)
08:20:41 <dennisb> He talked about it once, that he had fixed it so he could compile it with ghc, but I don't think that is what he uses
08:21:03 <xbill> what does he use?
08:21:09 <dennisb> I like these undelinings that ms word does..
08:21:12 <dennisb> hbc
08:21:16 <sebras> dennisb: then ghc might be wort a try...
08:21:58 <dennisb> ghc is fine, it's cool with the interpreter in ghc5 where you can mix compiled and interpreted code
08:22:12 <dennisb> you get something that works like hugs, but where parts can be compiled
08:22:25 <dennisb> (or everything of course)
08:23:35 <sebras> dennisb: sounds nice... I might very well try that... afaicr it's linux-friendly right?
08:23:59 <dennisb> The fudgets are not like other widgets in the unixworld, I guess some of the slowness is there
08:24:08 <dennisb> sebras: ghc works great in linux
08:24:44 <sebras> dennisb: hm... I wonder if debian has a precompiled (up-to-date!) binary...
08:24:54 <dennisb> yes, it should be
08:25:11 <dennisb> both debian and rpm-based binaries should be fine
08:25:28 <dennisb> I think ghc is even in the standard debian
08:25:39 <dennisb> (i run redhat so I don't really know)
08:26:00 <dennisb> just do some "apt-get ghc" or what it is you write... :-)
08:27:22 <dennisb> My only complaint with ghci (the interpreter) used to be that it uses a lot of memory, but now I have lots of memory so that's no problem.
08:27:24 <xbill> apt-get install ghc5
08:27:36 <xbill> ghci could be much faster
08:27:41 <dennisb> If you are on a small machine you probably want hugs
08:27:42 <xbill> I think it leaks, too.
08:27:47 <dennisb> xbill: yes, it
08:27:56 <dennisb> 's not perfect, but not bad
08:28:09 <xbill> it's very good even
08:28:34 <sebras> dennish
08:28:37 <dennisb> I agree, the last version works very well for me, the first ghci 5 was not so good
08:28:54 <dennisb> sebrash
08:29:06 <sebras> dennisb: ghc5 does exist in woody...
08:29:33 <dennisb> yes, that's what i've heard (and xbill showed me the syntax to get it)
08:29:37 <sebras> dennisb: how much memory are we talking about here? 192MB is enough?
08:29:59 <xbill> If you have trouble with hugs, just let me know (wli@debian.org)
08:30:04 <dennisb> you don't want to have less then that
08:30:16 <dennisb> but it depends on your program
08:30:35 <sebras> dennisb: naturally... 
08:31:09 <xbill> apt-cache show hugs
08:31:20 <sebras> dennisb: oh, and btw. up at chalmers functional programming (and most non-imperative programming) is used in the undergraduate courses often right?
08:31:28 <dennisb> yes
08:31:38 <dennisb> we teach it as the first language
08:32:01 <dennisb> but they don't really get to see all the nice functional stuff
08:32:55 <sebras> dennisb: but either way; it's probably more educational than the way we "learn" programming in lund... :-/ java is the language of choice...
08:33:12 <dennisb> well, we have java as the second laguage
08:33:43 <sebras> xbill: hm... dec2001-release of hugs is out...
08:33:59 <dennisb> but it is a good first language, both for people who have not programmed at all and for people that think they are gods when it comes to c-programming
08:34:02 <xbill> sebras: I'll upload a package soon then.
08:35:07 <sebras> dennisb: I wonder why a course which is a survey of different programming languages and what tradeoffs one has to make when deciding what language to use to solve a problem one has to do....  
08:35:48 <dennisb> sebras: ?
08:35:50 <sebras> dennisb: I think such a course would be of great importance. today students just see either functional or imperative programming...
08:36:24 <sebras> dennisb: a couse that explains what different languages are suitable for and why and for what problems they are not suitable
08:37:49 <dennisb> well, it's hard to get that knowledge unless you know these languages, and once you know them you don't need a course to compare them (that's my view at least)
08:37:55 <sebras> dennisb: we wrote some entertaining memory mind and tower of hanoi games in our functional programming couse. oh, and a music program, but no "real" applications...
08:38:19 <xbill> music programs can be very real
08:38:35 <dennisb> that's the bad thing, students thing one can not write "real" program.
08:39:09 <dennisb> but a first course in java would probably not be real programs either
08:39:27 <sebras> dennisb: true, at least to some extent. but for those that has knowledge _only_ of the languages taught a univ. this would be enlightening...
08:40:17 <xbill> "Here's a simulator an assembler and a C compiler, write an OS"
08:40:24 <sebras> xbill: I know of no other program that constructs chords from a melody and it's key... :-)
08:40:33 <dennisb> one of the standard laborations at chalmers is for the students to write the unix-command sort but in haskell
08:40:45 <sebras> xbill: that would also be needed... 
08:41:31 <dennisb> it's very simple in haskell, but also pretty real. Then they get to write it in Java in the next course. And I promise they all prefere the haskell solution :-)
08:41:41 <sebras> dennisb: sounds interesting... maybe I ought to inform my teachers of this...
08:41:56 <dennisb> And when they try the speed the see that haskell is usually faster also
08:42:05 <sebras> dennisb: at least if it uses a quicksort approach... :-)
08:42:22 <dennisb> but it depends on the programs of course
08:42:47 <sebras> dennisb: nice... could you send me the url to the laboration?
08:42:48 <dennisb> but java have never been about speed
08:42:54 <xbill> radixsort =)
08:43:27 <dennisb> xbill: there is always a couple of students that brings up radixsort, yes :-)
08:43:44 <xbill> no need to bring it up, just write it
08:44:28 <dennisb> sebras: i'm not sure where the lab is, i'm not involved in this course. I just know about it
08:44:41 <sebras> dennisb: oh, ok...
08:45:03 <sebras> dennisb: got to go now. nice talking to you. 
08:45:52 <sebras> xbill: I'll get hugs when you put it up. and ghc5 also... I think I've been inspired... haskell...!, here I come...  *runs into the sunset*
08:47:15 <dennisb> sebras: maybe they don't use it no more, I just found some other problems
08:47:40 <xbill> writing a UNIX shell in Haskell could be interesting
08:47:58 <dennisb> some program that gives statistics of text files seems to be this years lab, both in haskell and java
08:48:03 <dennisb> something like wc I guess
08:48:44 <dennisb> xbill: didn't someone do that?
08:51:23 <dennisb> I wrote a small demon on haskell, it worked fine. It used the double fork trick just like in C and it worked just like in C but guaranteed without buffer overruns and such bugs
08:52:01 <xbill> I wrote something like fetchmail in Haskell once.
08:52:13 <xbill> somehow managed to write dirty Haskell =)
08:52:20 <dennisb> xbill: yes, I know. haskell works fine for these kind of things
08:52:39 <xbill> not fine
08:52:42 <xbill> better
08:52:46 <dennisb> some parts looks just like in c, but there is nothing wrong with that
08:54:26 <dennisb> gtk+hs is something I really like, to bad that gtk+ is such a small part of what you usually wants..
08:54:52 <dennisb> just "small" things like gettext needs to be made bindings for..
