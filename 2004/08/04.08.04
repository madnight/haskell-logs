01:50:58 <TheHunter> good morning, #haskell
02:01:38 <Heffalump> 'lo
02:13:50 <kosmikus> hi
02:13:54 <kosmikus> I think I'll go
02:14:00 <Heffalump> ok.
02:14:09 <kosmikus> just checking flights
02:14:28 <kosmikus> I want to make sure I can afford it in case there is no money
02:17:17 <shapr> y0
02:17:25 <Heffalump> yo
02:18:26 <shapr> g'day joedj 
02:18:34 <shapr> looking for Haskell info?
02:18:35 <joedj> hi shapr :) how are you
02:18:40 <joedj> nope, just chillin'
02:18:43 <shapr> I'm doing well, how are you?
02:18:44 <joedj> <- psy ;)
02:18:48 <shapr> aha
02:19:03 <joedj> well indeed, just got offered a full-time job
02:19:14 <shapr> writing Haskell? :-)
02:19:29 <joedj> writing java :( but reading haskell, on the train!
02:19:36 <shapr> sounds nice
02:19:42 * Heffalump is writing Java for work atm and enjoying it
02:20:39 <joedj> i am slowly converting people to python from the inside out
02:21:27 <Cale> and then you get them hooked on the functional bits of python :)
04:25:30 <shapr> man I love unicycling.
04:25:49 <joedj> how long have you been doing that =P
04:25:59 <Iter> heh, haven't done that for years.
04:26:14 <shapr> I've been unicycling just a few months.
04:26:41 <Iter> it is alot of fun :)
04:26:48 <shapr> it has nice side-effects too, like the disappearance of my programmer's belly.
04:27:35 <joedj> so after a few months you can ride around quite comfortably?
04:27:52 <shapr> sure, about ten hours of practice to be able to ride around comfortably.
04:28:25 <Iter> and less if you just want to be able to ride around not so comfortably ;)
04:28:35 <shapr> right
04:29:12 <shapr> I want a Coker!
04:29:22 * joedj read the log of yesterday, and is intrigued
04:30:08 <joedj> i've never seen a unicyclist, except at the circus..
04:30:45 <shapr> it's fun, and not too hard to learn.
04:32:47 <joedj> then again, you'd probably say that about haskell too ;)
04:32:52 <shapr> yup
04:32:59 <Iter> I spent a weekend on a camp and met a professional clown who had brought his unicycle, had a lot of fun :)
04:33:40 <shapr> I tried to teach people autodidactism, but I've since realized they have to learn it for themselves.
04:33:51 <dxlvi> lol
04:35:13 * shapr grins
05:11:05 <bringert> shapr riding a unicycle and talking about monads: http://andersca.org/gallery/eurohaskell/p1010015
05:55:42 <thebug> those are some funny pictures, I like the signs too :)
06:18:12 <bringert> come next year
06:19:28 <thebug> that would be a mild bit of an undertaking
06:19:55 <bringert> where are you located?
06:20:01 <thebug> .mi.us
06:20:27 <bringert> ever been to europe?
06:20:56 <thebug> nope
06:21:20 <bringert> all the more reason to come :)
06:21:59 <thebug> certainly looks fun :)
06:27:24 <thebug> dunno how helpful I'd be at a sprint in a language I'm not too hot at ;)
06:47:07 <SyntaxNinja> Igloo: any luck w/ finding  ahost for HE?
06:48:01 <kosmikus> bringert: so there definitly will be EuroHaskell 2005?
06:48:18 <Igloo> I spoke to the amd64 guys about their experience with alioth and they seemed happy with it, although one plus point for them was the ability to allow non-DDs to upload stuff, which would probably be incompatible with having the buildds build from it
06:48:23 <Lemmih> How would one make `gen` (from the TemplateHaskell page on the wiki) recursive?
06:49:20 <Igloo> I'll try to write a mail tonight to see if that has any hope of happening, and if so if alioth would be worse than other places to do it
06:49:40 <SyntaxNinja> Igloo: yeah; I think the important thing is to have HE, the 2nd is to have more than one DD who can commit to it, and the least important thing is to have non-DDs be able to do so.
06:50:45 <bringert> kosmikus: dunno. all I know is that the subject in #haskell.se says "319 dagar kvar" (319 days left)
06:50:48 <Igloo> I think non-DDs might be more important than buildds, though. We can always put packages for buildds elsewhere, like experimental if that gets sorted out
06:50:55 <bringert> but I didn't write that
06:51:01 <Igloo> Which definitely would make alioth seem the best choice
06:51:13 <kosmikus> bringert: I see
06:51:14 <SyntaxNinja> Igloo: yeah
08:08:22 <pesco> oi
08:08:36 <pesco> omfg, how many peopel! Has it always been this much?
08:09:43 <Igloo> Normally it's more, but everyone just left when they saw you coming
08:09:45 <Lemmih> Are you trolling?
08:10:12 <pesco> Igloo: Hm, ok.
08:10:19 <pesco> Lemmih: No!
08:10:32 <Igloo> :-)
08:11:00 <Igloo> I have a vague memory of us hitting 50 quite a while ago. I think the number is fairly stable
08:11:34 <pesco> Lemmih: I remember first visiting this channel when it had five (5) people on it.
08:12:16 <Lemmih> pesco: When was that? Along time ago or just after a split?
08:12:16 <kosmikus> pesco: maybe you should visit more often
08:12:59 <pesco> Lemmih: Hahah, about 3-4 years ago.
08:13:20 * SyntaxNinja thinks he's approaching 2 years on this channel
08:13:37 <SyntaxNinja> and boy, am I getting hungry!
08:13:47 <pesco> Heh
08:14:09 <bourbaki> hi
08:14:18 <pesco> WAAHH! It's growing
08:14:22 <pesco> ;-)
08:14:32 <bourbaki> ?
08:14:41 <pesco> Erm, don't mind me.
08:14:46 <pesco> Hi.
08:15:16 <bourbaki> ok :)
08:15:32 <Lemmih> pesco: So you've been a Haskeller in more than 3 or 4 years?
08:15:56 <pesco> Lemmih: No, that's pretty much when I started.
08:16:20 <pesco> I joined this channel to ask around a bit before deciding to buy a book.
08:16:47 <Lemmih> So why haven't you visited more often?
08:17:11 <SyntaxNinja> hm. I swear that pesco has been around
08:17:32 <Igloo> Me too. Do you also hang out in Debian places or something?
08:17:47 <pesco> :) Debian places? No...
08:18:02 <Igloo> I'm sure you've been here more recently then
08:18:02 <pesco> Although I might have dropped into one at times.
08:18:16 <SyntaxNinja> 73 and counting...
08:18:22 <SyntaxNinja> !
08:18:41 <pesco> My IRC habits show occilating development.
08:18:49 <pesco> oscillating
08:18:57 <goron> SyntaxNinja, I did some advertising for Cabal :)
08:19:26 <kosmikus> yes, I remember seeing pesco here, too, although not often, and I am around only for 16 months or so
08:19:32 <SyntaxNinja> goron: oh yeah? who to?
08:20:05 <pesco> Anyway, the reason I'm here is, that I wrote a module to abstract and unify Haskell's I/O interfaces. Would anyone like to look at it and tell me their thoughts?
08:20:08 <goron> HSUnix will probably be packaged as Cabal...
08:20:31 <goron> SyntaxNinja, now still only the fptools...
08:20:35 <pesco> Update me please, what is Cabal?
08:20:52 <SyntaxNinja> pesco: where have you been!?
08:20:57 <SyntaxNinja> http://www.haskell.org/cabal
08:21:15 <goron> SyntaxNinja, some people.... (just joking)...
08:21:22 <SyntaxNinja> it's the thing that most people on here are probably getting sick of hearing about ;)
08:21:48 <goron> SyntaxNinja, The topic should be changed ;)
08:22:48 <SyntaxNinja> goron: why?
08:23:40 <goron> SyntaxNinja, to Cabal... instead of We put the Funk in the Funktion.
08:24:07 <SyntaxNinja> hehe
08:24:07 <Igloo> cabal's in there too
08:24:13 <SyntaxNinja> Igloo: there is no cabal!
08:24:29 <goron> SyntaxNinja, I see.
08:24:36 <Igloo> SyntaxNinja: You'd better get off your arse and get coding then!
08:29:41 <pesco> The Cabal proposal should use the term "Haskell system" instead of "Haskell compiler" or "Haskell implementation"!
08:30:11 <Igloo> Why?
08:30:38 * Igloo uses "Haskell implementation" elsewhere for "Haskell compiler" union "Haskell interpreter"
08:30:59 <pesco> Because it is sufficiently general and not as clumsy as "implementation".
08:31:32 <pesco> The proposal uses "compiler" for compiler|interpreter because of the "clumsyness" of the term implementation.
08:32:17 <pesco> Where dose the term "Dogfooding" originate?! :)
08:35:36 <pesco> I should crack or register my IRC client.
08:35:59 <Lemmih> How so?
08:36:06 <thebug> or use something snappy like irssi or xchat
08:36:27 <pesco> I like this one because it fits nicely with my other Mac programs. ;)
08:37:02 <pesco> But I might as well drop that stance and use irssi in a terminal.
08:37:29 <thebug> aye 'tis a fine app :)
08:37:44 <thebug> I recommend 'screen' along with it
08:38:12 <pesco> Right, worth consideration.
08:38:43 <thebug> <haven't had the opportunity to try this smitely combo on OS X yet though>
08:40:56 <SyntaxNinja> pesco: idono about 'Haskell System' it's a little vague
08:41:11 <pesco> So, did I get that right, none of 75 people on this channel would like to see The Future of Haskell File, Network, and Inter-Process I/O? ;)
08:41:14 <SyntaxNinja> pesco: I think dogfooding comes from MS
08:41:17 <pesco> SyntaxNinj: How so?
08:41:28 <SyntaxNinja> because system is vague
08:41:44 <SyntaxNinja> the software the end user is writing might be a system, the cabal migth be a system.
08:41:56 <Igloo> pesco: I'm interested, but busy right now
08:42:22 * Igloo thinks implementation is the best of the 3 terms
08:42:32 <SyntaxNinja> pesco: there's actually an ENTRY at the top so I can change all of those in one go, though, if we ever do find something less clumsy.
08:42:33 <pesco> I associate with "Haskell system" the system that lets me use the Haskell language. So that's just me?
08:42:52 <SyntaxNinja> I had "implementation" but SPJ changed it.
08:42:53 <pesco> Yee, happy term hunting. :)
08:43:17 <pesco> Ah there we are, the compiler people forcing their terminology on everybody. ;-)
08:43:33 <pesco> Just kidding.
08:43:48 <SyntaxNinja> I try to avoid using the word "system" because it has no good definition.
08:43:50 <pesco> I feel that "implementation" sounds a bit off.
08:44:05 <pesco> Like, how do you _implement_ a language.
08:44:08 <SyntaxNinja> actually, I asked spj whether he thought the hugs people would care, and he said he didn't think they'd care.
08:44:37 <thebug> 'system' sounds kind of like PHB-speak to me
08:44:40 <pesco> Of course he didn't think so! (Just spinning conspiracy theories! Don't take seriously!)
08:44:48 <SyntaxNinja> hehe
08:44:48 <Igloo> I dislike compiler because I'd be thinking "Hmm, does this work for hugs too?" while reading it
08:44:49 <pesco> What's PHB-speak?
08:44:50 * SyntaxNinja lunch &
08:45:00 <SyntaxNinja> Igloo: good point. idono. we need a new word. 
08:45:01 * SyntaxNinja &
08:45:07 <thebug> pointy haired boss <like dilbert's boss>
08:45:15 <pesco> What's wrong with "Haskell system"? I'm not convinced.
08:45:27 <pesco> Ah.
08:46:28 <thebug> there's nothing -wrong- with it, per se, I think the general consensus here is that it just sounds more ambiguous than 'implementation'
08:46:31 <ozone> pesco: check out Colloquy for a great Mac IRC client.  best i've found so far ...
08:46:47 <pesco> ozone: Thanks for the tip, never heard of it...
08:46:52 <ozone> www.colloquy.info
08:46:56 <ozone> found out about it a few days ago
08:47:05 * ozone suggests Haskell environment
08:47:12 <ozone> to one-up the vagueness flamewars
08:47:33 <thebug> hehe
08:48:15 <pesco> I think "environment" sounds absolutely vaguea.
08:48:17 <pesco> vague.
08:48:20 <boubaki> can you write .o files with ghc and bind them in otherlangs?
08:48:43 <pesco> Or actually, no environment is not vague, it's just not fitting.
08:48:52 <ski_> what should be included ?
08:49:04 <ozone> pesco: what, and "system" is less vague? :)
08:49:13 <Igloo> boubaki: Yes - check out the FFI docs
08:49:24 <ski_> compiler/interpreter.   libraries ?     possibly IDE ??
08:49:25 <ozone> can we all just be japanese and say "haskell-koto"?
08:49:33 <pesco> No, as I corrected myself, I don't actually find "environment" vague, that was just a first impression.
08:49:47 <pesco> What does koto mean? "Thing"?
08:49:57 <pesco> _Not_ IDE!
08:50:22 <ski_> heh
08:50:38 <ozone> pesco: basically, yes.  from what i understand, you can attach it to the end of a phrase, and nominalise it, i.e. turn the phrase into a noun; a thing
08:50:54 <pesco> That's cool.
08:50:57 <ozone> and then the rest of the sentence applies to that thing
08:51:28 <boubaki> Igloo isnt the ffi just to link other .o files?
08:51:29 <ozone> and of course, you can always koto later stuff too
08:51:50 <pesco> Ready your Haskell-Thing, programmers!
08:51:56 <ozone> so you can say "the thing he is doing koto is very weird koto why is that?"
08:52:16 <ozone> (of course, i say this all without speaking a hint of japanese)
08:52:28 <ozone> but i'm a geek, i'm allowed to have outrageous rampant opinions
08:52:37 <goron> Can Cabal also build shared libraries (out of the box support for ghci)?
08:53:21 <Igloo> ghci uses object files, not shared libraries
08:54:31 * ozone prays for Wolfgang's patch(es) to make it in soon
08:54:44 <pesco> Ok, here's why I find "Haskell implementation" an inappropriate term:
08:55:10 <ozone> pesco: geez dude, you need other things to rant about
08:55:16 <pesco> "Implementation" implies something abstract of which a concrete, well, implementation is produced.
08:55:33 <pesco> ozone: Am I annoying? I'm enjoying this.
08:55:41 <ozone> naw
08:55:49 <ozone> i'm just in an overly harsh mood tonight, sorry
08:56:09 <ozone> in fact, good point.  bed would be a good idea indeed.  nite!
08:56:20 <Igloo> Huh? The abstract thing is the specification, the Haskell report
08:56:26 <Igloo> The concrete thing is the implementation
08:56:26 <pesco> A Language is thus not implemented. There is no abstract description that is turned into a concrete form. The language stays the same. Haskell is the language, thus it is not implemented.
08:57:01 <pesco> Igloo: No, the concrete thing is the compiler, for instance, which is not an implementation of the _language_.
08:57:27 <pesco> It is an implementation of a compiler for said language.
08:58:47 <Lemmih> hztk_pak: Learning Haskell?
08:58:59 * Igloo disagrees and disappears
08:59:46 <pesco> Ah well. I need to write a paper on this.
09:03:00 <pesco> Environment is also incorrect, because "Haskell environment" implies the environment wrt. Haskell, I'd say that's maybe libraries, functions available, etc. What we're looking for though, is the thing that enables us to run Haskell programs. If you say "Haskell system" it appears clear to me that it is just that, a system enabling the use (in the only sensible way) of the Haskell language.
09:15:32 <goron> SyntaxNinja, This should work for the configure step of HSUnit: ./Setup.lhs configure
09:16:37 <pesco> Who told me about Colloquy? Ozone? Anayway that's a great IRC client!
09:16:40 <goron> SyntaxNinja, right?
09:18:47 <Igloo> He's probably AFK
09:24:30 <hztk_pak> [Lemmih] yeap
09:25:40 <ski_> hztk_pak : got any questions ?
09:25:55 <hztk_pak> not yet
09:26:08 <hztk_pak> let read more about haskell
09:26:09 <hztk_pak> :P
09:26:16 <hztk_pak> n thanks for the help
09:47:11 <Lemmih> ski_: I got some questions actually (-:
09:48:21 <ski_> heh
09:48:50 <Lemmih> I'm playing with the Printf template Haskell example and I can't figure out how to make 'gen' recursive.
09:50:30 * ski_ doesn't know much about template haskell :)
09:51:04 <ski_> gen @ http://www.haskell.org/ghc/docs/latest/html/users_guide/template-haskell.html doesn't look recursive
09:52:03 <Igloo> Make it recursive in what sense?
09:53:54 <Lemmih> It can only translate formats of length 1.
09:54:25 <Igloo> What problem are you having?
09:56:42 <Lemmih> Igloo: I've added it to the IRC paste page.
09:56:52 <Igloo> Where's that?
09:57:09 <Lemmih> www.haskell.org/hawiki/HaskellIrcPastePage
09:57:30 <Lemmih> But beware, I'm very new to TH.
09:58:47 <Igloo> And what error do you get?
09:58:56 <Igloo> You could write this more nicely with quasi-quotes, incidentally
09:59:35 <Igloo> Oh, you're going ot be making incorrectly typed code - is that what the error says?
09:59:39 <Lemmih> Well it's generating stuff like: `"hey"++\n -> n` when given the format [L "hey",S].
09:59:58 <Igloo> Yes, because you told it to  :-)
10:00:28 <Igloo> You could write your second RHS as [| (\n -> n) ++ $(gen xs) |] for example
10:00:34 <Lemmih> I know. The thing I don't know is how to tell it otherwise (with the lambda's first).
10:00:49 <Igloo> And your first one is just [| "" |]
10:01:29 <Igloo> You might have to have a pair of accumulating functions, one for variables and one for the expression
10:01:55 <Igloo> (or pass a tuple of such things back
10:01:56 <Igloo> )
10:03:10 <Igloo> Or you could pass   sequence (genName (filter needs_var formats)) down as an argument from the top-level
10:04:13 <Lemmih> You've lost me..
10:06:15 <Igloo> Basically you want to build ([Name], Exp) and then, once you've collected it all together, you return  lam (map varP names) exp
10:06:31 <Igloo> There are a number of ways of doing that depending on your tastes
10:14:45 <Lemmih> Igloo: thx.
10:33:13 <SyntaxNinja> back
10:34:25 <Lemmih> wb
10:34:39 <SyntaxNinja> ta
10:34:43 <SyntaxNinja> stepcut!
10:34:46 <stepcut> SyntaxNinja: !
10:35:21 <stepcut> I have not had time to file bugs against dh_make yet :(
10:35:32 <SyntaxNinja> you're just scared of the flames
10:36:08 <stepcut> bah! their just a bunch of perl weenies, what's to be afraid of ?
10:37:31 <SyntaxNinja> hi goron did you have a cabal question that went unanswered?
10:38:32 <stepcut> s/their/they're/
10:45:13 <goron> SyntaxNinja, yes.
10:45:29 <goron> SyntaxNinja, ./Setup.lhs configure does not work. 
10:46:19 <goron> SyntaxNinja, I am getting all kinds of errors. So I just typed make and then there was an executable created called setup and with that ./setup configure just worked.
10:46:32 <shapr> wheeee
10:46:43 <shapr> looks like I need to get around to creating a webpage for IOHCC
10:47:12 <ski_> as opposed to on the wiki ?
10:47:47 <shapr> yu
10:47:49 <shapr> p
10:47:52 <stepcut> shapr: what's the link to the mailing list again ? I think I mistyped my email when I tried to subscribe
10:48:18 <SyntaxNinja> goron: this is for building cabal itself?
10:48:28 <Cale> hmm... is there any (simple) way to have latex and haskell syntax colouring in emacs at the same time?
10:48:29 <goron> SyntaxNinja, no. HUnit
10:48:30 <SyntaxNinja> cabal needs to bootstrap itself w/ the makefile; it doesn't really work w/ hugs yet.
10:48:36 <shapr> Cale: mmm
10:48:41 <goron> SyntaxNinja, I use ghc
10:48:49 <SyntaxNinja> goron: yeah, you need to say "ghc -package Cabal Setup.lhs -o setup"
10:48:57 <shapr> Cale: the something multi-mode
10:49:04 * shapr goes off for more unicycling
10:49:09 <SyntaxNinja> bye shapr!
10:49:37 <goron> SyntaxNinja, how should I know that?
10:49:39 <SyntaxNinja> I guess it doesn't really say that anywhere; the runhugs thing doesn't work yet.
10:50:26 <SyntaxNinja> goron: sorry about that.
10:50:29 <goron> SyntaxNinja, I also miss some documentation about the C sources.
10:50:48 <SyntaxNinja> goron: yeah; I think the wash2hs program shows how to do that.
10:50:54 <SyntaxNinja> (the example)
10:51:08 <goron> SyntaxNinja, ok, but what about .chs files?
10:51:29 <Igloo> SyntaxNinja: Do you know if needing -package Cabal is a bug or not?
10:51:59 <SyntaxNinja> Igloo: I think it's a bug.
10:52:04 <SyntaxNinja> but actually
10:52:15 <SyntaxNinja> it doesn't depend on parsec anymore, so maybe it can be fixed now.
10:56:16 <SyntaxNinja> goron: it doesn't do any preprocessing yet.
10:57:33 <SyntaxNinja> Igloo: I think ghc-pkg doesn't do the right thing when an auto=yes package depends on an auto=no package; I won't swear to that, though.
10:58:17 <Igloo> Ahh
10:58:25 <Igloo> What's the auto=no package?
10:58:58 <SyntaxNinja> it was parsec, or text, or whatever... but I don't think we depend on that anymore.
10:59:19 <Igloo> parsec is an auto package here
10:59:50 <Igloo> It looks like HLs are auto and hslibs aren't
11:06:10 <goron> SyntaxNinja, Is there a package already packages with .chs files (probably not)? 
11:07:03 <SyntaxNinja> goron: .chs files are the output of a preprocessor, right?
11:08:05 <Si\> does anyone know of a library which can, given a Quasi Regular Expression and some sort of data-type containing a sequence of strings produce an output string? Sort of like the reverse of regular expression matching
11:10:35 <goron> SyntaxNinja, Hmm, I am not sure, I thought they were part of a distribution (tar.gz).
11:10:44 <goron> SyntaxNinja, Will check it. 
11:12:31 <goron> SyntaxNinja, Maybe he preprocessed it by hand, but it's part of a distro. 
11:13:06 <Igloo> It's probably the input to c2hs or something, no?
11:14:10 <Igloo> Another argument against Haskell system is that we might want to define a Haskell system to be a Haskell implementation + c2hs + happy + alex or something
11:14:46 * goron checks the makefile
11:16:57 <goron> Igloo, Yes, c2hs it is.
11:19:47 <goron> Igloo, Or even an operating system written in Haskell...
11:21:33 <SyntaxNinja> seen on #java: (14:21:13) ricky_clarkson: Is Haskell an interface between programming languages and academics?
11:22:28 <bourbaki> hi
11:22:59 <ski_> 'lo
11:23:17 <thebug> heh ricky_clarkson eh
11:24:28 <SyntaxNinja> #java is funny: (14:23:48) <NICK>: Are there any KNOWN issues with using cron to call a perl script which is supposed to start a Java app?
11:29:19 <thebug> that's bordering on disturbing
11:56:48 <Lemmih> Yes! It's working (-:
11:58:30 * Riastradh breaks it.
11:59:43 <ibid> i'd be annoyed if you broke my stuff without revealing how you did that ;)
12:01:55 * Riastradh cackles evilly without revelation.
12:04:44 <det> 
12:13:29 <ski_> stuck in the revolving door ?
12:14:05 <bourbaki> heh
12:14:50 <bourbaki> reminds me of buddy the christmas elf :)
12:15:03 <ski_> buddy ?
12:15:25 <bourbaki> yeah his name is buddy he was born as a human but was raised by elves
12:15:26 <thebug> this ought to be an interesting story
12:15:45 <ski_> oh. haven't read that ome
12:15:47 <ski_> one
12:16:01 <bourbaki> its a movie really cool though
12:16:40 <bourbaki> i think the english title is just elf
12:17:20 <ski_> mhm
12:25:29 <bourbaki> bk
12:26:50 <bourbaki> http://www.imdb.com/title/tt0319343/
12:27:31 <ski_> ty
12:40:58 <pesco> cptchaos: Oi!
12:41:43 <cptchaos> pesco: moin
12:42:48 <cptchaos> pesco: how is code?
12:42:53 <pesco> Good!
12:43:01 <pesco> cptchaos: Would you like to read some?
12:43:47 <cptchaos> tomorrow, I worked the hole day and can't focus on anything anymore ...
12:45:13 <pesco> Ok, mind if I send you the file now?
12:45:38 <Lemmih> You can send it to me maybe?
12:45:49 <pesco> (I've designed a unified Haskell I/O API - looking for comments)
12:45:59 <pesco> Lemmih: Yes, sure. Is DCC okay?
12:46:04 <Lemmih> Yep.
12:46:36 <cptchaos> pesco: send, I will take a look, tomorrow
12:46:38 <goron> Is any Haskell application ever exploited in any way (buffer overflows don't happen in GHC, I thought), but maybe other things? 
12:47:15 <Lemmih> eh "Connection refused".
12:47:32 <pesco> Bleh, damn masq.
12:47:42 <Lemmih> Behind a firewall/router?
12:47:45 <pesco> Yes.
12:47:55 <pesco> I thought it handled DCC...
12:48:02 <pesco> Appearently not.
12:48:27 <Lemmih> DCC = Direct Client to Client.
12:48:55 <cptchaos> pesco: does not work for me too
12:49:04 <pesco> I need to click "passive mode".
12:50:55 <pesco> Ok. That's the PDF rendition of the module, which is a literate program. (The documentation format is DocBook).
12:52:59 <cptchaos> hm, got a file of size 0 ..., my Firewall bugs t
12:53:07 <cptchaos> that too, I guess
13:00:08 <koli> are monads allowed to put constraints on the type of type that they contain ?
13:01:35 <ski_> iirc you can't have that in haskell without building it into the type class from the beginning
13:01:35 <Cale> koli: no
13:02:05 <Cale> unfortunately, this means that Set cannot be a monad in Haskell.
13:02:38 <koli> cale: ok thx.
13:02:58 <koli> i'm currently using this to get my head around them - http://www.haskell.org/hawiki/MonadsAsContainers
13:03:03 <koli> its very good ;)
13:03:05 <Cale> koli: :)
13:03:12 <Cale> Thanks, I wrote that :)
13:03:18 <koli> i know 
13:09:48 <koli> cale: when you said 'no', you're implying monads can't specify a type class. is that right ?
13:10:30 <Cale> If you make something (say m) an instance of Monad, then you can't restrict the type of a that it will contain.
13:10:47 <Cale> i.e. you must be able to deal with (m a) for any a
13:11:11 <koli> ok cool.
13:11:55 <koli> its just that i saw 'chalmers.se' in ski_'s ip.
13:12:09 <koli> chalmers is pretty hot for FP.
13:12:16 <koli> as i understand it.
13:12:17 <ski_> yup
13:12:22 <koli> :)
13:12:28 <ski_> hughes is here
13:12:38 <koli> *nods*
14:54:52 <pesco> Lemmih: What do you think?
14:55:28 <pesco> "Type classes are addictive"?
14:56:38 <monochrom> I think monads are addictive.  Then again monads are a type class.
14:57:01 <pesco> Strangely, I'm not a regular implementor or user of monads.
14:58:04 <monochrom> Do you use list comprehension?  [ x+y | x<-[1..10], y<-[100..200] ]
14:58:24 <pesco> Seldom.
14:58:33 <monochrom> Then you are very pure.
14:59:41 <pesco> Thank you. My programs usually consist of gargantuan combinations of map, (.), zipWith, and foldl.
15:00:00 * ski_ laughs
15:00:26 <pesco> My favourite function of all time, however, is still "recip . exp . succ . negate"
15:01:18 <pesco> Just because the name sounds so arcanely brutal in my head.
15:01:46 <ski_> which name ?
15:02:03 <pesco> I meant the expression I gave, sorry.
15:02:29 <pesco> Try pronouncing that as if it was Latin.
15:03:36 <ski_> pesco : you like the points-free style ?
15:03:52 <ski_> (or should i use the term "point-less" ?)
15:04:03 <monochrom> Both terms are fine.
15:04:10 <ski_> nice
15:04:47 <monochrom> point-free may be less offensive. :)
15:05:09 <pesco> ski_: Yes. Although I don't force it. I just often end up with it because I try to avoid long runs of parantheses.
15:06:21 <pesco> And I always feel that it emphasises the "funk".
15:06:31 <monochrom> true that
15:07:14 <monochrom> It also makes the program look imperative except for being Arabian.
15:07:18 <monochrom> err Arabic.
15:07:27 <pesco> lol
15:07:35 <monochrom> recip . exp . succ . negate = negate; succ; exp; recip
15:07:46 <pesco> I never thought of it that way.
15:09:24 <pesco> But it's true. And probably captures a good deal of points-free style's appeal.
15:10:21 <stepcut> hrm, I wonder how hard it would be to modify lambda bot to connect to password proteced irc servers
15:10:21 <shapr> y0 pesco 
15:10:23 <shapr> wassup?
15:10:23 <pesco> Instead of unwrapping and wrangling expressions in your head, you just mentally run through the function chain, forgetting about stages, as you pass them.
15:10:29 <shapr> stepcut: probably not too hard
15:10:35 <pesco> Ey shapr!
15:10:37 * stepcut looks into it
15:10:39 <shapr> I just got a nifty lambdabot error
15:10:49 <shapr> "Exception: <socket: 3>: hGetChar: resource vanished (Connection reset by peer)"
15:11:08 <pesco> "vanished". Sounds good.
15:11:19 * stepcut just realized that his system does not have telnet installed
15:11:41 <monochrom> functional programming: g.f   procedural programming: f; g   shell programming: f | g
15:11:46 <shapr> man I love unicycling.
15:11:46 <pesco> shapr: I made a Haskell I/O abstraction.
15:11:50 <shapr> oh neat!
15:11:59 <shapr> I rode my unicycle about 3.5 hours today.
15:12:08 <pesco> Hihih, cool.
15:12:13 <monochrom> When it comes to first-order programming, a lot of distinctions between the three are overrated.
15:12:19 <pesco> shapr: Would you like to take a look at it and tell me what you think?
15:12:22 <shapr> I can finally hop my unicycle!
15:12:26 <shapr> sure!
15:12:39 <shapr> I'm not the best qualified, but I'd enjoy looking at it.
15:12:48 <pesco> shapr: dcc? email? ftp?
15:12:55 <shapr> email
15:13:00 <shapr> shae at scanned in avian dot com
15:13:00 <pesco> I haven't got webspace ready, unfortunately.
15:13:05 <pesco> yo
15:13:07 <shapr> no worries
15:13:37 <shapr> oh, I've been trying to find a way to do semi-anonymous shared space or webspace for #haskell
15:13:51 <shapr> sfs looks promising, but it's only packaged in Debian
15:13:58 <pesco> What is sfs?
15:14:25 <shapr> it's a layer on top of nfs that lets you safely and securely mount a share across the 'net
15:14:53 <shapr> you do something like cd /sfs/share.scannedinavian.org,445987928475/ and it's mounted and ready to go
15:15:45 <shapr> I want something like filesharing for icq
15:16:01 <pesco> What is the number?
15:16:10 <shapr> you have sfs installed already?
15:16:18 <pesco> No.
15:16:21 <monochrom> http://www.google.ca/groups?selm=4uhdspcbds.fsf_-_%40shell.vex.net&output=gplain
15:16:27 <pesco> I've used AFS.
15:16:48 <shapr> monochrom: haha!
15:16:52 <Lemmih> pesco: I haven't read it yet. (My friend just installed Windows + Warcraft III Frozen Throne on my desktop /-:)
15:17:00 * shapr finds the exact number
15:17:51 <shapr> Lemmih: w3 runs under wine
15:18:20 <shapr> pesco: /sfs/@snowblind.scannedinavian.org,4rt94xy9c36gy3c6u5v5hctbrgxgf326
15:19:32 <Lemmih> shapr: I haven't got BattleNet working.
15:19:40 <shapr> what I'd like most is some sort of distributed filesystem where you only get (or cache) the parts that you access.
15:19:57 <shapr> oh, haven't tried that.
15:22:34 * Lemmih wonders what "SVCHOST.EXE" is and why it's using all my CPU time.
15:23:05 <pesco> shapr: SFS sounds cool! Thanks for the pointer.
15:23:36 <shapr> sure :-)
15:24:28 <shapr> I have the urge to write a game in Haskell.
15:25:01 <bourbaki> hi
15:25:06 <shapr> y0
15:25:08 <monochrom> A proof checker is a game.
15:25:24 <pesco> shapr: What kind?
15:25:41 <bourbaki> i need night vision goggles ;)
15:25:54 <monochrom> Computer: I challenge you that it can't be proved!  Human: Oh yeah? Here it is!  Computer: You are victorious!
15:26:27 <shapr> interesting thought
15:26:50 <shapr> pesco: I'm not sure, I was thinking about a tetrisy game at first, but maybe a spacewar.exe clone would be more fun
15:26:51 <stepcut> s
15:26:54 <stepcut> eek!
15:27:23 <pesco> shapr: Are you planning to use AFRP for it? I can recommend that.
15:27:24 * ski_ imagines a net multiplayer version of monochrom's game
15:27:49 <shapr> ski_: oh that would be nifty
15:27:51 <bourbaki> shapr you want to write a game?
15:27:56 <shapr> yup
15:28:05 <bourbaki> what about bomberman :)?
15:28:09 <pesco> What about a networked Jump'n'Bump clone?
15:28:09 <shapr> pesco: I haven't tried to use AFRP for anything real
15:28:15 <shapr> oh, I love bomberman.
15:28:22 <bourbaki> i always wanted to write an ai for it
15:28:36 <bourbaki> i think its quite channenging to write a good ai for it
15:28:38 <shapr> I played straight through bomberman once
15:28:54 <pesco> shapr: I've written a little proof-of-concept OpenGL demo (nothing fancy) with it.
15:28:56 <shapr> I think I've played Jump'n'Bump, not sure.
15:28:59 <monochrom> A multiplayer (though no net, no computer) version of my game already exists.  It is called "illegal collaboration for the Discrete Math assignments"
15:28:59 <shapr> pesco: oh I wanna see!
15:29:07 <shapr> monochrom: haha!!
15:29:12 * shapr laughs much
15:29:31 <pesco> shapr: hold on...
15:30:16 <bourbaki> would it be possible to write some small game engine here with the channel maybe?
15:30:28 <bourbaki> a sprite engine written in opengl maybe
15:31:12 <shapr> there are at least two games written with HOpenGL
15:31:26 <shapr> one is a tank game, I have the code around here somewhere...
15:31:43 <shapr> I think FunGEn came from a game
15:31:50 <shapr> (functional game engine)
15:32:09 <bourbaki> sec let me check
15:34:38 <bourbaki> shapr if you write a game make sure that you have some ai interface ;)
15:34:58 <shapr> pesco: whoa, heavy duty; have you linked to this on the libraries list?
15:35:22 <shapr> there were some recent discussions about splitting the IO monad into pieces
15:35:48 <pesco> shapr: No, what do you mean by "linked"?
15:36:16 <pesco> I must ask on some list about why the standard semaphore isn't implemented the way mine is, though...
15:36:24 <shapr> er, oh, you don't have webspace 
15:36:35 <pesco> Oh, and I've not tested that code. It just type-checks.
15:37:21 <shapr> this is just the pdf, right?
15:37:26 <pesco> Yes.
15:37:37 <shapr> is the source available also? :-)
15:37:58 <shapr> I've also wanted to abstract beyond I/O, Chans, and Sockets
15:38:12 <pesco> Of course, I can send you the generated .hs or the original .xweb file.
15:38:25 <pesco> .xweb is literate programming in XML. Doc format is DocBook.
15:38:40 <shapr> as long as I can use it, I'm happy.
15:38:56 <pesco> Ok, I'll send you both, for convenience.
15:39:06 <stepcut> I don't think ktouch is very accurate. It says I can type at 400 wpm ;(
15:39:25 <pesco> :)
15:51:50 * shapr b0ings
15:52:41 <shapr> oh, speaking of literate programming, I haven't thought of a good way to integrate 'real-time' unit tests into haddock
15:52:47 <shapr> any ideas or suggestions?
15:53:06 * stepcut does not even understand the question
15:53:27 <stepcut> I think with practice I would type around 100 wpm. but my error rate is a bit high.
15:53:28 * jao fancies shapr's house ceiling full of bumps due to his continuous boings
15:53:31 <shapr> I was thinking, when the haddocks are viewed, you should be able to see tests/examples/demos that can be executed to show you how the code should work
15:53:57 <shapr> jao: actually, since I've learned to b0ing my unicycle, I just have to buy a new tire every few weeks.
15:54:06 <jao> :)
15:54:52 <shapr> stepcut: something like fit.c2.com, like what happens if you click the "http:run.cgi" link at the bottom of http://fit.c2.com/wiki.cgi?SimpleExample
15:55:20 <shapr> tried a kinesis keyboard, and/or the dvorak layout?
15:55:37 <shapr> I get good speed and excellent error correction with hippie-expand in emacs
15:55:52 <stepcut> shapr: old school ibm keyword with dvorak
15:56:03 <shapr> ah, those are nice
15:56:32 <shapr> I prefer the key response on those keyboards, but I prefer the hand angle and modifier key layout on kinesis contoured.
15:57:08 <shapr> sadly, the kinesis key response is crap (though the built-in audible click mostly makes up for it), and the kinesis function keys are like tiny rubber erasers.
15:57:21 <stepcut> shapr: yeah, I might try a kinesis someday, but I like to annoying my neighbors with the extra loud keyclicks at 100wpm :p
15:57:37 <shapr> haha!
15:57:53 <shapr> my officemates have been highly irrated by my ibm clicky too
15:57:59 <Cale> #  Tech Support: "Type 'fix' with an 'f'."
15:57:59 <Cale> # Customer: "Is that 'f' as in 'fix'?"
15:58:16 <pesco> shapr: http://www.scannedinavian.org/~pesco/he.tar.gz
15:58:41 <pesco> Unpack, make, execute.
15:59:04 <shapr> yay
15:59:45 <pesco> Oh, and don't mind the german source.
15:59:55 <pesco> Oh, and run on a potent machine.
15:59:56 <shapr> keine problem
16:00:03 <shapr> er, dual athlon 1544MHz ?
16:00:04 <pesco> s/keine/kein/
16:00:07 <pesco> Good.
16:00:09 <shapr> whoops, thanks
16:00:18 <stepcut> shapr: you have office mate*s* 
16:00:35 <shapr> not anymore
16:00:36 <shapr> just one now
16:00:39 <stepcut> :p
16:01:12 <shapr> pesco: so, you going to enter the IOHCC?
16:01:24 <pesco> Hm, when's it held?
16:01:28 <shapr> now
16:01:32 <pesco> Uhh.
16:01:34 <shapr> until the end of August
16:01:47 <pesco> Ok... URL?
16:02:03 <shapr> um, I can point you to the contest announcement
16:02:11 <shapr> but there's no webpage until I write one
16:02:15 <pesco> Good enough.
16:02:18 <shapr> that's on my todo list for tonite :-)
16:02:21 <pesco> :)
16:02:41 <shapr> http://www.haskell.org//pipermail/haskell/2004-August/014386.html
16:02:48 <pesco> Thanks
16:03:09 <shapr> huh, haven't changed the channel topic in a long time
16:03:14 <shapr> oh, I hacked TypeModule.hs to use GHCi
16:03:19 <shapr> and added some stuff
16:03:22 <shapr> @info Eq
16:03:23 <lambdabot> -- Eq is a class
16:03:23 <lambdabot> class Eq a where {
16:03:23 <lambdabot>     (/=) :: a -> a -> Bool {- has default method -};
16:03:23 <lambdabot>     (==) :: a -> a -> Bool {- has default method -};
16:03:23 <lambdabot>     }
16:03:52 <shapr> hm, linking probs with HE
16:03:56 <pesco> coo
16:04:05 <pesco> what's it say?
16:04:07 <shapr> oh, I think it needs -package HOpenGL
16:04:17 <pesco> doesn't for me, but oh well.
16:05:07 <shapr> hmm
16:05:33 <shapr> : undefined reference to `glutKeyboardFunc'
16:05:35 <pesco> Oh, maybe I'll aim for best one-liner.
16:05:38 <shapr> I wonder what's up with that.
16:05:54 <pesco> what'n tha? Have you got the correct HOpenGL?
16:06:00 <shapr> it compiles fine, but doesn't link.
16:06:15 <juhp> what is HE? :)
16:06:25 * shapr doesn't know
16:06:28 <pesco> Oh, then it's missing the C library. Add -lglut.
16:06:32 <shapr> ah
16:06:43 <shapr> aha!
16:06:49 <shapr> whoaa
16:06:53 <shapr> that's coool!
16:07:03 <pesco> "he" is a little gfx effect I wrote in Haskell to try integration of AFRP with OpenGL/GLUT.
16:07:05 <shapr> is this like a zen meditation thingy?
16:07:10 <pesco> lol
16:07:23 <shapr> I get 50fps
16:07:30 <juhp> pesco: ah
16:07:33 <shapr> does it take any input?
16:07:41 <pesco> q quits.
16:07:45 <pesco> Zen.
16:08:01 <shapr> can I influence the dots?
16:08:04 <pesco> No.
16:08:15 <shapr> should I influence the dots? :-)
16:08:22 <pesco> No.
16:08:26 <shapr> oh
16:08:27 <shapr> ok then
16:08:28 <juhp> shapr: you built HOpenGL with greencard-3.01?
16:08:34 <shapr> I use the debs.
16:09:04 <shapr> that's pretty sexy
16:09:21 <juhp> shapr: ok sure, but which version of greencard? :)
16:09:33 <pesco> shapr: I should improve the integrator for the dots, though.
16:09:44 <Igloo> I don't think greencard is needed, BICBW
16:10:04 <pesco> It's a straight rk4 now, with fixed step-size. That's very lame.
16:10:26 <juhp> when I try to build (with greencard-3.01) I get a ghc parse error... maybe ghc needs some "old ffi" flag or something?
16:10:28 <shapr> hm, I want to influence it with input somehom
16:10:35 <juhp> GL_BasicTypes.hs:60: parse error on input ``'
16:10:47 <pesco> shapr: Then you must hack the source!
16:10:52 * shapr hacks
16:10:58 <juhp> build HOpenGL that is...
16:11:21 <Igloo> It sounds like you are trying to build the old tarball on the old site rather than the new one
16:11:25 <pesco> shapr: Watch out though, there are relics and artifacts of experiments dark and unspoken in there.
16:11:36 <Igloo> I don't know where the new one lives, if anywhere, other than in ghc tarballs and CVS, though
16:11:39 <shapr> surprisingly, I get better FPS with fullscreen
16:11:48 * pesco shrugs
16:11:49 <juhp> Igloo: ah, right
16:12:00 <shapr> ah, you already have some clicky code
16:12:02 <pesco> shapr: It was fun hunting the memory leaks.
16:12:25 * shapr wonders what ODE stands for
16:12:27 * juhp guesses it probably hasn't been released yet?
16:12:45 <shapr> ordered deterministic equations?
16:12:50 * pesco mumbles "dinary ferrential quasion"
16:12:58 <shapr> @yow !
16:12:58 <lambdabot> I'm GLAD I remembered to XEROX all my UNDERSHIRTS!!
16:13:10 <pesco> wahha
16:13:23 * pesco nods very seriously to lambdabot
16:14:02 <shapr> it looks like you had some influential code in idlefun
16:14:21 <shapr> in the cer IORef
16:14:35 <pesco> Did I? I don't remember. We were two.
16:15:29 <pesco> So there are code fragments I didn't write.
16:16:22 <shapr> what sort of FPS do you get with this?
16:16:39 <pesco> wait...
16:17:10 <pesco> ~30
16:17:23 <bourbaki> shapr oden dynamics engine?
16:17:26 <pesco> That's on a 1.5GHz G4.
16:17:30 <bourbaki> erm open
16:19:33 <shapr> pesco: you should send this to the yampa list, it's a cute demo
16:20:00 <pesco> Hm, good idea...
16:21:21 <shapr> silly question, sid == unstable ?
16:22:40 <jao> shapr, i do think so
16:23:01 <bourbaki> i have a spline interpolated 3d surface and want to determine if there is a straight line between two of the points   to do that i would have to solve the equation    spline-interpolation = line-interpolation is there some way to do that kind of root finding with haskell functions?
16:25:12 <pesco> Isn't there an easy to check condition under which the interpolating spline degenerates to a straight line?
16:25:15 <bourbaki> guess not since that would be something dynamic
16:26:13 <bourbaki> well the splines are paaralell and orthogonal like checkers so i can do some kind of optimization
16:26:45 <bourbaki> but it would be great if you could use the haskell function as data to do the derivation or integration of it
16:26:50 <pesco> You mean between any two points on the surface?
16:27:00 <bourbaki> yes
16:28:12 <bourbaki> i think i will do something like line(x) = spline-interpolation( project_xy(line(x))
16:29:42 <bourbaki> isnt there something like haskell -> octave converter ot so?
16:30:43 <pesco> I think there must be a really easy way to check for that, once you get through the theory.
16:31:07 <bourbaki> yeah i think there is i will solve that on paper :)
16:31:36 <bourbaki> but i think it still would be cool to do something like integration or derivation on functions
16:31:41 <pesco> Do that, then enter ther resulting one-liner into IOHCC.
16:32:35 <pesco> bourbaki: No problem, implement a numerical integrator or differentiator.
16:32:53 <pesco> Although I haven't seen any numerics library for Haskell. Is there none?
16:33:08 <Pseudonym> I did implement an integrator once.
16:33:15 <Pseudonym> Numerical.
16:33:26 <Pseudonym> I may still have the code.
16:33:47 <bourbaki> hm
16:34:18 <Pseudonym> BTW, "i have a spline interpolated 3d surface and want to determine if there is a straight line between two of the points"
16:34:19 <pesco> I just sent one to shapr in that Program.
16:34:29 <Pseudonym> At the risk of stating the obvious, there's a straight line between ANY two points.
16:34:47 <bourbaki> without intersection :)
16:35:09 <Pseudonym> Yup, there's still a straight line without intersection between any two points.
16:35:25 <bourbaki> how?
16:35:27 <Pseudonym> Depending on what you want it to intersect.
16:35:40 <pesco> Pseudonym: The interpolated surface, of course.
16:35:41 <Pseudonym> OK, question: Where are the points?  Are they on the spline?
16:35:43 <bourbaki> you have two points on that surface
16:36:21 <Pseudonym> OK...
16:37:05 <bourbaki> and the splines build a basis in 2d when you look from above and its also orthogonal
16:37:23 <Pseudonym> Is this a spline on a plane?
16:37:26 <Fractal> Well take a 2D cubic spline. Obviously there won't be a straight line between 2 points on the spline unless the cubic and quadratic terms in your spline's polynomial = 0 no?
16:37:41 <bourbaki> which is why i use the xy projection of the line which gives me the point from above to look up the point aon the surface
16:37:55 <bourbaki> i can then just determine the distance between the two
16:38:11 <bourbaki> Pseudonym nope the spline is 3d
16:38:23 <bourbaki> but the spline seen from above build a grid
16:38:25 <Pseudonym> Ah, OK.
16:38:39 <Pseudonym> What order spline?
16:38:46 <bourbaki> cubic
16:38:51 <Pseudonym> OK.
16:39:06 <Pseudonym> First precondition: The Bezier control hull must be concave.
16:39:09 <Pseudonym> Right?
16:39:18 <bourbaki> locally yes
16:39:33 <bourbaki> that is you have may cells that build the surface
16:39:54 <Pseudonym> Right.
16:39:56 <Pseudonym> Hmmm.
16:40:05 <bourbaki> but thats not a real problem
16:40:21 <bourbaki> it was if i had to integrate a second time over that surface
16:40:26 <Pseudonym> OK.  What you want to know is if any of the "z" components of the surface tangent change sign.
16:40:28 <Pseudonym> Right?
16:40:38 <bourbaki> but because there is a simple mapping form that surface to |r^2
16:40:45 <Pseudonym> So if S is the surface, you want to find points where dS/dz = 0
16:41:05 <bourbaki> nope
16:41:14 <bourbaki> ah yes :)
16:41:26 <bourbaki> i want to know the z of the line and the surface yes
16:41:28 <Pseudonym> Ah, no, not quite.
16:41:46 <bourbaki> that distance has to be zero if they intersect
16:42:00 <bourbaki> and the thing is linear since i integrate just over a line
16:42:10 <Pseudonym> Suppose the surface is defined as S = 0
16:42:22 <Pseudonym> Then you want to find points where the z component of grad S = 0
16:43:07 <Pseudonym> Right?
16:43:21 <bourbaki> the problem is that it all depends on splines that may change so i cant precalc
16:43:22 <Pseudonym> So dS/dz = 0
16:43:27 <Pseudonym> Right, I was right the first time.
16:43:31 <bourbaki> yep
16:43:33 <Pseudonym> Yes, I know that.
16:43:39 <Pseudonym> I'm looking around the problem.
16:43:45 <bourbaki> just that you have to take the line also into accont
16:43:53 <Pseudonym> Which line?
16:44:00 <bourbaki> the line of sight
16:44:33 <bourbaki> line(p1,p2,x) = p1 * x + p2 (1 - x)
16:45:00 <Pseudonym> Ah.
16:45:09 <bourbaki> the projection of that 3d point into the xy plane will give me the point in the surface that i have to get
16:45:15 <Pseudonym> Sorry, I missed that point.
16:45:40 <bourbaki> that is the projection of the point into the surface so i get the z component of the surface point
16:45:44 <Pseudonym> So hang on, p1 and p2 are given?
16:45:59 <bourbaki> yes
16:46:10 <bourbaki> i have ie two units on that surcafe
16:46:12 <Pseudonym> So actually what you want to know is: How many intersections are there?
16:46:14 <bourbaki> surface
16:46:20 <bourbaki> and i want to know if they see each other
16:46:24 <bourbaki> hi TheHunter
16:46:25 <Pseudonym> Given that you already have a surface and a line.
16:46:30 <Pseudonym> Oh, that's easy.
16:46:39 <bourbaki> Pseudonym yes:)
16:47:02 <bourbaki> line(x) - surface(projectxy(line(x)) = 0
16:47:25 <bourbaki> projectz(line(x)) - projectz(surface(projectxy(line(x))) = 0
16:47:36 <Pseudonym> Even easier.
16:47:45 <bourbaki> oh ?
16:47:50 <Pseudonym> The spline surface is relatively static, right?
16:48:02 <TheHunter> hi, bourbaki 
16:48:06 <Pseudonym> So you can do some precomputation on it?
16:48:12 <bourbaki> yes lets suppose so
16:48:30 <Pseudonym> OK.  So split it into 16 bicubic splines by central differencing.
16:48:51 <Pseudonym> Then any intersection will intersect one of those splines at most once.
16:49:05 <bourbaki> the points can change though
16:49:17 <Pseudonym> How often can they change?
16:49:32 <bourbaki> every time i do the query
16:49:36 <Pseudonym> Oh, by "the points" you mean p1 and p2, not the surface.
16:49:38 <Pseudonym> D'oh.
16:49:43 <bourbaki> yes
16:49:45 <Pseudonym> Sorry, my mistake.
16:49:47 <Pseudonym> OK.
16:49:50 <bourbaki> these points are on the surface
16:49:58 <bourbaki> as if you would stand in that landscape
16:49:59 <Pseudonym> Oh, I see.
16:50:19 <bourbaki> or you just have some change in the z axis if you are bigger
16:50:51 <Pseudonym> That's actually straightforward, then.
16:50:51 <bourbaki> the problem is that its not just a spline i have given but i bilinearly interpolate between the splines
16:51:07 <Pseudonym> Because p1 gives you a good initial point for some kind of Newton-Raphson root finder.
16:52:00 <bourbaki> the thing is that splinesurface(x,y) is a bilinear interpolation of splines
16:52:12 <Pseudonym> That's okay.
16:52:16 <Pseudonym> It's not a huge deal.
16:52:29 <bourbaki> i think if i write it all down on paper i can figure out how to boil it down to something easy to solve with newton
16:52:35 <Pseudonym> BTW, you leant "linear", not "bilinear".
16:52:49 <bourbaki> i wrote something like that once for splines already in c++
16:52:51 <Pseudonym> There's one parameter to interpolate between the splines, not two.
16:53:13 <bourbaki> well if i want to get a point on the surface i interpolate between two splines
16:53:29 <Pseudonym> Yes, S1 * t + S2 * (1-t)
16:53:34 <Pseudonym> One parameter, t.
16:53:38 <bourbaki> and then take the points with their tangents of these two splines and interpolate between them again
16:53:38 <Pseudonym> Therefore it's not bilinear.
16:53:52 <bourbaki> to get the point in between
16:54:07 <bourbaki> http://codemages.sf.net/homotopy1.hs
16:54:46 <bourbaki> just pretend the circle and the letters where paralell then the morph between the two are the points in between
16:54:55 <bourbaki> hi Cale
16:55:15 <Pseudonym> Er... type Point   = (Vector, Tangent) ?
16:55:17 <Cale> hi
16:55:27 <Pseudonym> I think that disobeys some laws of affine algebra. :-)
16:55:32 <bourbaki> Pseudonym :) thats a point of a spline
16:55:43 <Pseudonym> Oh, this is a Hermite spline?
16:55:44 <bourbaki> it has a tangent and a 3d point
16:55:46 <bourbaki> yes
16:55:49 <Pseudonym> Ah!
16:55:53 <Pseudonym> Well it's still not a "Point".
16:55:58 <Pseudonym> If anything it's a ControlVertex.
16:56:04 <bourbaki> yeah i know
16:56:12 <bourbaki> but all points in between have a tangent too
16:56:13 <Pseudonym> Affine algebra 101: Vectors are the difference between two Points.
16:56:28 <bourbaki> i interpolate the tangents also
16:56:31 <bourbaki> i just had no idea how to call them
16:56:37 <Cale> Vectors are the points :)
16:56:38 <Pseudonym> Ah.
16:56:39 <Pseudonym> Hmmm.
16:56:54 <Pseudonym> Cale: Wrong.  Vectors are not Points.
16:57:04 <bourbaki> well vectors have no location
16:57:08 <Cale> Sure they are. They're points in a vector space.
16:57:19 <Pseudonym> No.  They're vectors in a vector space.
16:57:32 <bourbaki> vectors can be seen as points in a special space
16:57:43 <Pseudonym> As bourbaki noted, vectors don't have location in affine space.
16:58:03 <bourbaki> Pseudonym can you compile the file?
16:58:15 <Pseudonym> I don't have Graphics.UI.GLUT, unfortunately.
16:58:42 <bourbaki> dang got debian?
16:59:03 <bourbaki> anyway i will do the interpolation as a homotopy
16:59:41 <Cale> So what is the difference between a point and a vector from 0 to that point?
17:00:02 <bourbaki> in a unit sphere its all the same
17:00:16 <bourbaki> but thats the only space where thats the case
17:00:29 <bourbaki> and its just the hull of that shpere also
17:00:36 <Pseudonym> So you're identifying the vector V with the point 0 + V.
17:00:40 <Pseudonym> Where 0 is the origin point.
17:00:48 <Pseudonym> You can do that, but you can't add two points together.
17:01:14 <Pseudonym> If you ever want to add that vector to a point, you'll need to subtract 0 first.
17:01:17 <bourbaki> well
17:01:30 <jao> and they transform differently under affine transformations
17:01:36 <bourbaki> points in 3d space can be seen as 4d vectors like (1 3dpoint)
17:01:36 <Pseudonym> Right.
17:01:51 <Pseudonym> So can vectors.
17:01:53 <bourbaki> so a vector is (1 3dpoint) - (1 3dpoint)
17:01:54 <Pseudonym> (0 3dvector)
17:02:02 <bourbaki> (0 3dpoint) is a vector then
17:02:11 <Pseudonym> That's in homogeneous projective space.
17:02:25 <Pseudonym> Which is a nice space to work in.
17:02:30 <bourbaki> yep
17:02:32 <Pseudonym> Since all planes intersect.
17:02:42 <Pseudonym> You don't have to worry about them being parallel.
17:02:46 <bourbaki> which you also use in 3d comp graphics alot :)
17:03:13 <Pseudonym> Normals, of course, transform differently again.
17:03:35 <Pseudonym> Normals are bivectors, or 1-forms.
17:03:40 <bourbaki> Pseudonym i know it just is an unhappy use of the wrong term
17:03:42 <Pseudonym> But that's another topic.
17:03:52 <Pseudonym> Sure.  It just offended me slightly. :-)
17:03:53 <bourbaki> havent been able to come up with something good
17:04:05 <Pseudonym> What you actually have is a point in phase space.
17:04:08 <Pseudonym> Kind of.
17:04:14 <bourbaki> i know
17:04:21 <bourbaki> cause it does offend me also
17:04:22 <Pseudonym> point and generalised velocity
17:04:26 <bourbaki> no offence taken
17:04:38 <Pseudonym> None intended. :-)
17:04:42 <bourbaki> :)
17:05:00 <bourbaki> bivectors as in geometrical algebra?
17:05:06 <Pseudonym> Yup.
17:05:18 <pesco> What is a bivector?
17:05:20 <Pseudonym> A normal, if you think about it, is the cross product of two tangent vectors.
17:05:23 <bourbaki> i always wanted to have a look into that field
17:05:34 <Cale> I tend to call any element of a space which has a topology on it a point, though.
17:05:36 <Pseudonym> Which is the antisymmetric part of the geometric product.
17:05:36 <bourbaki> <n,n> = 1
17:06:04 <bourbaki> Pseudonym any good script for that?
17:06:11 <Pseudonym> pesco: A bivector is a directed area.
17:06:25 <Pseudonym> It's the geometric dual of a vector.
17:06:37 <Pseudonym> It has the same dimension in 3-space, but different units.
17:06:40 <bourbaki> like the cross product in 3d right?
17:06:45 <Pseudonym> Right.
17:06:58 <Pseudonym> The cross product of two vectors should by rights be a bivector, not a vector.
17:07:16 <Pseudonym> Since it has units of area rather than distance.
17:07:33 <Pseudonym> If you're keeping track of units, anyway.
17:07:43 <bourbaki> which is why the vector lengthens if the angle decreses right?
17:07:49 <Pseudonym> Yes.
17:08:07 <bourbaki> Pseudonym a pitty that you cant compile that
17:08:14 <Pseudonym> a x b = dual(ab - ba)
17:08:20 <Pseudonym> where ab is the geometric product of a and b
17:08:33 <bourbaki> i have a newer version where you can do interpolations of spline objects with a spheral topology
17:08:39 <Pseudonym> Oh, cool.
17:08:47 <Pseudonym> How do you parameterise that/
17:08:50 <Pseudonym> ?
17:08:50 <bourbaki> i think ill buy me a book on geo algebra
17:09:00 <bourbaki> i have a book here on geo topo
17:09:00 <jao> (it is sometimes useful to think of bivectors as linear aplications from vectors to reals, right?)
17:09:07 <bourbaki> that was easy
17:09:13 <bourbaki> i just build it in a unit sphere
17:09:28 <bourbaki> so i have n rings in hozizontal view
17:09:28 <Pseudonym> Ah, OK.
17:09:49 <bourbaki> and then i do the homotopy between two of the splines depending on the section
17:09:50 <Pseudonym> jao: Uhm... kind of.
17:10:22 <jao> Pseudonym, well, iirc, that's a common definition of 1-forms
17:10:26 <Pseudonym> Technically, the product of an area with a vector is a volume, not a scalar.
17:10:33 <Pseudonym> In geometric algebra, anyway.
17:10:40 <bourbaki> Pseudonym my idea is now if you just apply the sphere on an arbitray mesh you can morph them
17:10:44 * jao nods
17:10:53 <Pseudonym> But you're right.
17:11:05 <Pseudonym> 1-forms make good bases for barycentric coordinate systems, for example.
17:11:19 * jao nods again
17:11:19 <bourbaki> how so?
17:14:19 <Pseudonym> bourbaki: If you think of a triangle, for example.
17:14:34 <Pseudonym> The three non-colinear points A, B, C.
17:15:10 <Pseudonym> Then any point inside the triangle can be identified as (u,v,w) such that P = u*A + v*b + w*C, where u+v+w = 1
17:15:13 <Pseudonym> Right?
17:15:29 <bourbaki> sec
17:15:51 <bourbaki> yes
17:16:01 <bourbaki> and thats the dot prod again
17:16:03 <Pseudonym> OK.
17:16:08 <Pseudonym> Not quite.
17:16:12 <Pseudonym> A, B and C are points.
17:16:17 <bourbaki> the bivector
17:17:33 <bourbaki> has anyone done something like shaders in hgl or so?
17:17:55 <bourbaki> i havent seen some function that lets me fetch extensions and the like
17:18:16 <Pseudonym> UIhm...
17:18:21 <Pseudonym> Have I confused 1-forms with 2-forms?
17:18:29 <bourbaki> :)
17:18:44 <bourbaki> Pseudonym do you know a good introduction paper to that?
17:18:54 <bourbaki> i see the point though i thing
17:18:58 <bourbaki> think
17:19:05 <Pseudonym> http://www.mrao.cam.ac.uk/~clifford/introduction/
17:19:23 <Pseudonym> That doesn't use terms like "1-form" and "2-form".
17:19:26 <bourbaki> ah clifford algebras :)
17:19:28 <Pseudonym> But it's a good introduction.
17:19:38 <bourbaki> yeah thanks
17:19:57 <bourbaki> id like to do some perpixel lightning with haskell
17:20:18 <bourbaki> which is the so "super cool" featrue in doom3
17:21:39 <bourbaki> id really like to write a small engine in haskell :) if it wasnt so tedious
17:26:58 <pesco> 'nite everyone
17:27:06 <bourbaki> bye
17:35:54 <TheHunter> good night, #haskell
18:46:19 <ski_> :-> http://www.verify-it.de/sub/ccard/
18:56:44 <Pseudonym> Let's play a game!
18:58:20 <ski_> Ccard ?
18:58:30 <Pseudonym> Yeah.
19:00:10 <ski_> actually i seem to understand 'Equivalent subobjects have isomorphic domains' better than the other mantras of the seventh circle
19:00:59 * ski_ was just considering printing them out ..
19:09:23 <ski_> (i actually have those three books mentioned loaned at home atm (plus a few more) ;)
20:18:25 * ski_ 's leaving
