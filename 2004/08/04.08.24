00:09:44 <pesco> Ok, this whole DocBook-XSL-FO thing is pissing me off! I'm switching back to LaTeX. 30 year-old technology that works wonderfully, because it was written by someone skilled and knowledgable instead of a bunch of crazed 15 year-olds.
00:10:01 <pesco> Yeah, I'm in rant mode.
00:10:30 * pesco prints the LaTeX cheat sheet
00:12:35 <Riastradh> I dunno, I'd not say that TeX exactly 'works wonderfully'...
00:13:29 <pesco> It has for me.
00:13:37 <Riastradh> Well, it hasn't for me.
00:13:38 <pesco> What went wrong for you?
00:13:46 <Lor> Hm? TeX is pretty neat, actually. It's LaTeX that's the kludgy monster.
00:14:01 <ibid> TeX is a horrible language
00:14:04 <Riastradh> The general system feels like a gross collection of hacks.
00:14:18 <ibid> the backend is excellent, though
00:14:45 <ibid> LaTeX is the kudgy monster because TeX makes it so
00:14:52 <pesco> Riastradh: Are you sure? Can you give an example? I've always felt it was pretty intuitive.
00:15:07 <Riastradh> The back end is excellent, sure, but it has never seemed so astonishingly excellent that I found it worthwhile to stretch my brain around the front end.
00:15:23 <Riastradh> In any case, it's too late for me to bring up any coherent arguments; I'm going to bed now.
00:15:25 <pesco> Riastradh: What are you using?
00:15:31 <pesco> Oh, ok. ;)
00:15:44 <Riastradh> teTeX, texmf
00:16:54 <pesco> Hm? You mean you write your documents in raw TeX?
00:17:22 <Riastradh> I probably misunderstood your question if that's your question in response.
00:17:31 <pesco> Yes.
00:17:42 <Riastradh> Which is not unlikely, given the hour.
00:18:07 <pesco> You can answer my question tomorrow morning. Good night. :)
00:18:12 <Riastradh> OK.
00:18:16 * Riastradh stumbles off to bed.
01:03:26 <earthy> syntaxlaptop: doesn't running unlit on the .lhs files before handing them to (say) haddock solve that problem?
01:04:20 <bringert> morning
01:47:29 <pesco> "Helvetica is usable, if at all, for setting complex technical descriptions, where the reader has to frequently interrupt his reading for reasons of understanding any way. For readable running text, however, it is, for its bulkness and lofty geometry, utterly unsuitable."
01:47:33 * pesco giggles.
01:49:07 <Lor> Well, it _is_ pretty darn annoying to read _books_ that have been typeset in a sans serif font.
01:49:31 <pesco> Guah.
01:49:53 <kosmikus> can "ghc-pkg -u" only update one package at a time?
01:50:26 <Lor> On screen, of course, sans serif fonts are quite fine since serifs couldn't be rendered accurately enough.
01:51:06 <pesco> Lor: I disagree! I have serifs on my screen. They look quite good.
01:51:36 <pesco> Granted, most font on my screen is sans serif, but that means button labels, menus etc.
01:52:48 <earthy> some serifs are useful
01:53:03 <earthy> even in a mostly sans serif font
01:53:22 <earthy> (such as the font I'm using now, it has serifs on the i and I)
01:53:26 <pesco> Heh. Right. Makes l look different from I.
01:53:32 <earthy> for instance. ;)
01:53:36 <earthy> and 1 from I :)
01:54:40 <pesco> Cool, the Mac OS terminal even lets you set vertical line distance.
01:55:11 <pesco> Woah, this is starting to look GOOD!
01:55:56 <pesco> God, you can even set horizontal spacing between characters!
01:58:06 <pesco> Great. Now I'm going to get majorly pissed at xterm when I switch back to Linux. Thanks, Apple!
01:58:09 <pesco> ;-)
02:00:56 <earthy> pesco: or even when you start X11.app :P
02:01:18 <pesco> True, although I very seldom do that.
02:04:31 <earthy> it has its uses from time to time
02:04:39 <earthy> XEphem, for instance ;)
02:05:48 <musasabi> Is there any way to send udp packets from a ptr?
02:06:25 <musasabi> hPutBuf seems to buffer the packets... which is quite evil from my standpoint.
02:07:50 <pesco> Is there a Fraktur font for LaTeX? :)
02:20:22 <pesco> I see there is...
02:21:02 <musasabi> Using a C function to do it seems evil as I would need to block on IO...
02:24:32 <musasabi> And there seems to be no way to just put a Ptr into a socket (or a fd for that matter).
02:25:05 <musasabi> anyone?
02:25:33 <pesco> @index hPutBuffer
02:25:34 <lambdabot> bzzt
02:25:52 <pesco> @index hPutBuf
02:25:53 <lambdabot> GHC.IO,System.IO
02:26:00 <pesco> @type hPutBuf
02:26:01 <lambdabot> bzzt
02:26:12 <pesco> @type System.IO.hPutBuf
02:26:13 <lambdabot> System.IO.hPutBuf :: forall a.
02:26:13 <lambdabot> 		     GHC.IOBase.Handle -> GHC.Ptr.Ptr a -> Int -> IO ()
02:26:20 <musasabi> pesco: hPutBuf appears not to work.
02:26:39 <pesco> Oh. You mean it just doesn't do what it's supposed to do? That's strange.
02:26:57 <musasabi> pesco: it buffers the output, which is not nice when the output is udp packets.
02:27:16 <pesco> How about hSetBuffering or what it's called?
02:27:26 <pesco> @index hSetBuffering
02:27:26 <lambdabot> GHC.Handle,System.IO,IO
02:29:41 <musasabi> hmm that seems to work ^_^
02:37:35 <musasabi> next on my list - recvFrom to a Ptr.
04:29:45 <shapr> d00d
04:30:05 <cptchaos> d00d?
04:30:05 <shapr> greetz, wassup?
04:30:35 <shapr> sorry, I've been spending too much IRC time with pre-teen first-person-shooter players.
04:30:53 <cptchaos> *g*
04:35:19 <shapr> hiya Si\
04:39:14 <Si\> hello
04:39:29 <Si\> do you know how fallow-overlapping-instances works?
04:40:03 <shapr> vaguely?
04:40:39 <shapr> typeclasses are essentially finitemaps that carry around instances
04:41:11 <shapr> actually, I can't think of any good explanations right now.
04:41:19 <Si\> ok
04:41:24 <shapr> I think I'm going out to buy a hamburger instead.
04:42:15 <cptchaos> could anyone tell me why ghci doesn't eat that file: http://www.hamburg.ccc.de/ck/test.hs
04:42:27 <dons> eat it?
04:42:33 <dons> hehe
04:42:45 <shapr> because GHCi wants HAMBURGERS!
04:42:59 <cptchaos> *g*
04:43:01 <shapr> Si\: I know there's at least one, maybe two papers on typeclasses, I think SPJ wrote most of them.
04:43:11 <bourbaki> hi
04:43:20 <shapr> Si\: I vaguely recall they're from around 1996, and I know they have lots of good detail.
04:43:51 <dons> cptchaos: typo on last line. 'O' instead of '0'
04:44:15 <cptchaos> ah, thanks, should change my fonts ...
04:45:33 <shapr> I did a pistol attack yesterday in AA
04:45:48 <shapr> worked suprisingly well
04:45:58 <pesco> What is AA?
04:46:06 <shapr> whoops, wrong channel
04:46:10 <shapr> america's army
04:46:12 <Aglarion> hello shapr
04:46:12 <pesco> Hehe.
04:46:24 <Aglarion> hello Philippa
04:46:32 <shapr> hiya Aglarion 
04:46:40 <Aglarion> and Hello Lor
04:48:10 <bourbaki> anonymous alcoholics ;)
04:48:47 <shapr> funktional anonymous
04:48:54 <bourbaki> ;)
04:49:06 <shapr> We put the funk in funktion!
04:49:32 <Aglarion> did you know Funktion is the german word for function?
04:49:38 <shapr> min√§ haluan hampurilainen.
04:49:46 <shapr> Aglarion: yup
04:49:48 <bringert> and the swedish too
04:49:59 <bringert> lower case f though
04:50:06 <Aglarion> upper case in German
04:50:21 <shapr> closed case in american.
04:50:26 <bringert> :)
04:50:28 <Aglarion> lol
04:51:41 <shapr> jakkarassasti!
04:51:52 <Aglarion> ?
04:58:02 <Aglarion_brb> (nick Agalrion
04:58:05 <Aglarion_brb> ...
04:59:29 * Aglarion will be back later
05:11:26 <PeterEr> I'm trying to execute the intepreter from Philip Wadler's The essence of funtional programming, put I'm stuck on a type error.
05:13:22 <PeterEr> It's specifically the function showM :: M Value -> String, wich I cannot implement.
05:14:06 <PeterEr> Here M would be some monad.
05:14:59 <Igloo> A particular monad, right?
05:15:32 <PeterEr> Well, during the article, Wadler implements it in different ways.
05:15:43 <PeterEr> Here is where it goes wrong:
05:16:25 <PeterEr> type M a = a
05:16:25 <PeterEr> unitM a = a
05:16:25 <PeterEr> a `bindM` k = k a
05:16:25 <PeterEr> showM a = show a
05:17:21 <PeterEr> It gives the error: No instance for (Show (M Value))
05:18:39 <Igloo> It's some other code, missing a Show a constraint, that is causing that error
05:19:14 <Igloo> Oh, or rather, it's the lack of a Show Value instance
05:19:52 <PeterEr> Mmm, I see.
05:22:17 <PeterEr> Ha, stupid me!  The definition was really "showM a = showval a" but I looked at showval, and didn't realise that it was defined just below.
05:25:17 <PeterEr> It works now!
05:30:08 <PeterEr> Igloo: Thanks for the suggestion.
06:25:18 <pesco> Hey, what does the monad bind operator (>>=) look like in the literature?
06:25:28 <pesco> Was it a triangle pointing to the right?
06:30:35 <Philippa> doesn't it look like >>= all smudged together?
06:30:56 <Philippa> 's the usual convention, 'nall that
06:31:42 <pesco> I think I heard that, originally, it was a triangle to the right. Might well be that in (especially Haskell-oriented) literature, a smudged form of >>= is used.
06:32:32 <pesco> Ah well. $gg$= looks good enough.
06:32:50 <pesco> I'm vamping up haskell.sty.
06:33:24 <pesco> $\circ$ is my favourite.
06:36:27 <kosmikus> pesco: don't want to use lhs2TeX?
06:36:48 <pesco> lhs2TeX, hm, I'm not sure. Wait.
06:38:16 <Igloo> Am I right in thinking there's been no work done to try to get GHC to make use of things like SIMD instructions?
06:39:56 <Philippa> I've not heard of anything on it
06:40:17 <Philippa> would be a bit difficult, certainly most stuff I've seen do it for those available on the PC uses explicit types and operations for the purpose
06:44:31 <bringert> didn't someone talk about that on one of the lists recently?
06:45:20 <Philippa> yeah, seemed to move rapidly onto parallelism in general though
07:01:26 <kosmikus> pesco: and?
07:02:39 <pesco> kosmikus: Looks cool, but I have no need. My haskell.sty is done. I like the fact that you can run the .lhs directly through latex with that, too.
07:03:59 <kosmikus> pesco: did you write a completely new haskell.sty, or did you base it on an existing style?
07:04:21 <pesco> I based it on the one by Andrew Cooke.
07:04:38 <pesco> But I changed almost everything. ;-)
07:05:00 <kosmikus> pesco: the main plus of lhs2TeX is the superior alignment, I think
07:05:08 <kosmikus> pesco: ah, so it's based on listings
07:05:14 <pesco> Yes.
07:05:23 <pesco> Listings does some alignment magic as well.
07:05:53 <pesco> I've made a habit of typing my Haskell-code pretty alignment-insensitive anyway.
07:06:14 <pesco> I never use hanging indents, for example.
07:07:31 <kosmikus> listings does some alignment magic, but it's easily fooled
07:07:53 <kosmikus> but I agree that the haskell.sty examples by Andrew Cooke look quite nice
07:10:20 <pesco> The only pity about listings is that it's impossible to tell it to set \ as a real lambda outside of strings. It will always replace it inside of strings as well.
07:11:02 <pesco> Which looks especially dumb if you use \ for multi-line continuations. *g*
07:21:50 <TheHunter> interesting... CPS and monads are the same thing
07:22:27 * Philippa wonders idly what the match for arrows is
07:22:30 <Lor> you mean continuations+effects?
07:23:57 <TheHunter> i just meant CPS as opposed to monadic style, but i think continuations+effects is the same thing, too
07:37:52 <pesco> What are coroutines?
07:38:53 <roconnor> coroutines are functions that yeild, and when called again resume where they left off.
07:39:04 <Igloo> It's when you have a producer and consumer acting as equals, rather than one calling the other, IIRC
07:39:08 <pesco> Ooh, that's cool.
07:39:54 <pesco> Igloo: Is that the same as what roconnor said?
07:40:40 <roconnor> Someone claimed that continuations is a generalization of coroutines.
07:41:10 <Igloo> I think he is talking about a particular way one might implement them
07:41:12 <pesco> That's what I just read on The Wiki, too.
07:41:35 <pesco> Igloo: Ok, so what's your general definition of a "coroutine"?
07:42:08 <Igloo> What I said above  :-)
07:42:35 * Igloo hasn't looked at them in ages. I have a feeling I read something by Knuth giving a parser+lexer as examples or something
07:42:37 <pesco> Igloo: Which I don't understand, because you're defining a noun by a sentence of the form "It's when...".
07:42:41 <earthy> What's yellow and equivalent to the axiom of choice?
07:42:55 <pesco> What's the axiom of choiceV
07:43:09 <Igloo> Ah, http://www.chiark.greenend.org.uk/~sgtatham/coroutines.html is probably what I read
07:43:20 <Igloo> OK, in the above, the producer and consumer are coroutines
07:43:43 <earthy> pesco: it's the axiom that states that for a given set you can actually choose an element
07:43:51 <pesco> Ok. I still don't understand what exactly it is that makes them that.
07:44:53 <Igloo> The idea is that you shouldn't have to arbitrarily choose one or the other to be the master
07:44:58 <pesco> earthy: Ok, so what's yellow and equivalent?
07:45:07 <earthy> Zorn's lemon
07:45:41 <roconnor> In that article, the chReturn, is what I called yield.
07:46:14 <pesco> Igloo: I see.
07:46:26 <Igloo> That URL probably explains it better than me
07:47:34 <roconnor> Hacking on coroutines with the preprocessor may not be the best way to do them.
07:48:31 * earthy shudders at the thought
07:49:04 <earthy> and thinks roconnor's definition of coroutines is as badly simple-minded as my `definition' of the axiom of choice ;)
07:50:49 * roconnor searches for an example of micro-C++ code.
07:53:14 <roconnor> http://www.student.cs.uwaterloo.ca/~cs343/examples/FullProdCons.cc
07:53:27 <roconnor> perhaps not the most illuminating code in the world.
07:53:33 * roconnor hope he can find better.
07:54:48 <LrdMtrod> anyone know what one of those old predecessor to piano, instruments is called?
07:54:49 <roconnor> http://www.student.cs.uwaterloo.ca/~cs343/
07:55:20 <roconnor> *sigh* Damn, I studied coroutines a while ago, but I don't remember them well enough to give a good explaination.
07:56:13 <roconnor> All I remember are functions that yeild and resume, in particular they are great for producer-consumer code.
07:56:14 <thebug> LrdMtrod: harpsicord?
07:56:41 <LrdMtrod> mmm, that's it!
07:56:50 <LrdMtrod> doesn't it have another name in Swedish?
07:57:24 <thebug> I can count the number of words of swedish I know on my fingers :)
07:58:13 <LrdMtrod> hehe
07:59:43 <Lor> It's "cembalo" in Finnish.
08:06:48 <roconnor> earthy: it's the axiom that states that for a given *non-empty set* you can actually choose an element
08:06:56 <roconnor> ;)
08:11:00 <TheHunter> roconnor: it's the axiom that states that for a given family of nonempty sets, you can choose an element simultanously in each set
08:11:06 <TheHunter> ;)
08:11:22 <roconnor> TheHunter: correct.
08:12:14 <earthy> as I said, badly simpleminded. :)
08:14:57 <pesco> "..tell them that repeatedly as the security staff drag you out of the building." I'm sincerely looking forward to that moment in my life.
08:15:13 <pesco> (quoting the article Igloo mentioned)
08:18:25 <roconnor> pesco: I would fire anyone who used those macros.  Good thing I'm not a manager.
08:23:51 <roconnor> the cross product of a non-empty set of non-empty sets is non-empty.
08:25:26 <Aglarion> sounds logical
08:25:43 <TheHunter> these macros don't implement coroutines, do they?
08:26:27 <TheHunter> every set can be well-ordered
08:26:56 <roconnor> TheHunter: I beleive they are supposed to implement coroutines ... expect the stack doesn't seem to be saved, etc.
08:27:44 <TheHunter> ok, i'd fire anyone who uses that macros, too
08:28:11 <earthy> nice quote yeah, pesco. ;)
08:28:19 <roconnor> God, they use it in PuTTY!
08:29:31 <roconnor> ``As far as I know, this is the worst piece of C hackery ever seen in serious production code.''
08:29:38 <roconnor> :-)
08:32:07 <roconnor> Aglarion: The claim I made is one formulation of the Axiom of Choice.
08:40:16 <goron> shapr?
08:41:21 <goron> Anyone here that has some experience with QuickCheck? I am experiencing "weird behaviour".
08:41:36 * SyntaxNinja has some
08:42:17 <goron> I have this counter that stands still for a long time as output. Or does it detects things go slow and then prints out how many tests it had?
08:42:29 <goron> When I do quickCheck myTest
08:43:27 <goron> SyntaxNinja: Do you understand what I say?
08:43:37 <Igloo> Is this a simple example test?
08:43:44 <goron> Igloo: No
08:43:51 <Igloo> If you have a precondition on inputs then it may be it's having a hard time finding valid inputs
08:44:17 <goron> But when does it prints the numbers?
08:44:21 <Igloo> Or if what it's testing is slow then it will take a long time (obviously  :-)  )
08:44:35 <Igloo> I can't remember if it's each test or each n-tests
08:44:50 <goron> Normally it says: passed 100 test
08:44:51 <Igloo> It's possible if you have a stupid terminal the numbers won't be updated, I guess
08:44:52 <goron> s
08:44:57 <Igloo> Oh, then it should have terminated
08:45:27 <goron> I am testing this exponentional algorithm, but then still. 
08:46:28 <goron> What I see is: 36 (and nothing more)
08:46:52 <goron> (and my processor finally doing something :) ) 
08:46:53 <Igloo> Oh, I missed the "Normally" on your earlier line
08:47:11 <Igloo> Another potential problem if you have your own generator is that it is making an infinite, or very large, input
08:47:17 <goron> Normally means in the reverse xs example.
08:47:43 <goron> I only have created an instance of my datatype that picks randoms. 
08:47:56 <goron> randomly I mean
08:48:40 <goron> Is it possible to write the same line two times in Haskell using standard libs? That should explain it. 
08:48:53 <goron> So in effect an "update".
08:54:24 <goron> :?
08:55:26 * Igloo doesn't understand
09:04:54 <goron> Igloo: I mean you print the value 5 to the terminal on some line A. Then you clear that line A and print 6. This is what I call an update.
09:05:05 <goron> It was now updated to 90.
09:05:15 <goron> I think it's a feature.
09:05:23 <goron> For long computations.
09:05:41 <Igloo> Oh, yes, I didn't realise that's what you were asking
09:13:18 <goron> How does such an update works in Haskell? I only know the putStrLn functions and stuff...
09:14:02 <Igloo> I imagine they're sending '\b's or somesuch
09:15:41 <pesco> Or "\r        \r".
09:16:52 <Igloo> Spaces aren't necessary as you're about to write over it
09:17:20 <Igloo> You can "| vi -" to see, as long as it doesn't look to see if there's a terminal on stdout. Or just read the source, of course
09:17:23 <pesco> True.
09:55:59 <Si\> I'm having a problem trying to define one single parameter type-class using the constraints of another double parameter type class
09:56:04 <Si\> eg.
09:56:19 <Si\> class A a b where
09:56:19 <Si\> class B a where
09:56:19 <Si\>     f1 :: (A a b) => String -> b -> a -> String    
09:56:19 <Si\> instance B a => B [a] where
09:56:19 <Si\>     f1 s b a = concat $ map (f1 s b) a
09:57:02 <Si\> I get Could not deduce (A a b) from the context (B [a], B a, A [a] b)
09:57:30 <Si\> I don't want B to be dual parameter as well, so is there anyway of solving the problem?
10:03:30 <Marvin--> Si\: that  (A a b) =>  is a claim that your function works for any combination of a and b that satisfy A
10:03:38 <Marvin--> which is probably not what you want
10:05:35 <Si\> I'll explain what I'm trying to do
10:06:07 <Si\> Class B is an XML Serializer which converts an instance to an XML tree representation
10:07:06 <Marvin--> idle thought: have you looked at HaXml?
10:07:06 <Si\> to this I need to add the facility to, depending on the types within the type-tree, add hooks to insert extra data into the tree
10:07:11 <Si\> such as type-data
10:07:46 <Si\> it doesn't provide what I need to do, I'm building a schema library and it doesn't have namespaces; I'm using the Haskell XML Toolbox
10:07:53 <Marvin--> ah
10:08:28 <Si\> anyway; the thing is different values may have different "facilities" available to them
10:08:34 <Marvin--> I still don't think you'll get it to work without making B a MPTC
10:09:11 <Si\> for example there exists a class called XSDType a, which defines the equivelant XSD type of a particular value
10:10:27 <Si\> Ok, so lets say I have a function which encodes a value to XML, it first does the job of actually outputting the values representation
10:10:38 <Si\> and it then trys to apply any hooks
10:11:05 <Si\> so if we're inserting type-data, the type being encoded also needs the constraint XSDType a
10:11:36 <Si\> but I don't want to add XSDType a to the XMLSerializer class, since this is not generic (i.e. not all XML documents are typed by XSD)
10:13:16 <Si\> so I decided to add an extra class to allow me to associated a dummy type (e.g. data SOAPEnc = SOAPEnc) to another type with the given constraints
10:13:16 <Si\> then when attempting to apply the encode function with the given hook, it would only type check correctly if for the given a, the type contraints applied to b
10:13:27 <Si\> do you understand what I mean?
10:14:07 <Marvin--> no ;) but I'm no xml guru
10:14:21 <Si\> you don't need to be
10:14:42 <Si\> XML is just a representation of a tree structure
10:15:03 <Si\> the serializer converts a Haskell typed value into a tree as XML
10:15:29 <Si\> however; at each node in this tree I may need to insert extra data (e.g. type data)
10:16:25 <Si\> the point is that each "hook" which adds this extra data in may only work with a specific set of types, defined by a constraint
10:16:52 <Si\> so obviously only typeable types can have explicity type data encoded, others merely show the representation
10:17:35 <PeterEr> I have trouble understanding the variation two of the interpreter in Philip Wadler's The essense of functional programming.  Has anyone read it recently?
10:17:38 <Si\> my question is how do I allow these hooks (functions) to have extra constraints to those imposed by the original serializer class
10:19:10 <Philippa> allow them to fail?
10:19:23 <Si\> given an encode function; encodeTree :: (XMLSerializer a) => NST -> String -> Flags -> h -> a -> XmlFilter
10:19:46 <Si\> where h is a function which does something with the a, but only if a holds with specific constraints
10:20:13 <Si\> e.g. h :: (XSDType a) => a -> ...
10:20:50 <Philippa> make h a Maybe whatever?
10:21:01 <Marvin--> sounds like you need rank 2 polymorphism?
10:21:17 <Marvin--> PeterEr: which is variation two?
10:22:46 <Si\> is there anyway of doing that in Haskell (GHC)?
10:23:05 <PeterEr> Marvin--: Well nevermind.  I realised what I'd done wrong.  I didn't know what letter to substitute with M; P or E.  The second is the one about error positions.
10:25:16 <Marvin--> Si\: actually, I still don't know what you want to do, and I fear I'm too tired to make an honest attempt at trying to understand it :/
10:27:31 <Si\> essentially, allow the type system to accept or reject a function in type-class B, if the type parameter is in an unknown type-class A
10:28:26 <Si\> by unknown I mean it isn't implied in anyway in B, but its type variable may be constrained by it
10:30:17 <Marvin--> what do you mean "accept or reject"?
10:31:32 <Si\> if I try and do "Hello" + "Goodbye" in GHCi, it is rejected because it doesn't succesfully type
10:32:27 <Marvin--> is that encodeTree function in the XMLSerializer class?
10:32:33 <Si\> yes
10:33:16 <Marvin--> so you have class XMLSerializer a where encodeTree :: NST -> String -> Flags -> (a -> ??) -> a -> XmlFilter ?
10:33:51 <Si\> yes
10:34:02 <Marvin--> and you are unsure about the "??"?
10:34:22 <Si\> no, it it always produces the same value
10:34:55 <Si\> h :: NST -> Flags -> a -> ([XmlFilter], [XmlFilter])
10:35:20 <Marvin--> uh, h is a type, you can't say h ::
10:35:27 <Si\> but a should somehow be able to have a different set of constraints
10:35:42 <Si\> sorry
10:35:50 <Si\> h =  NST -> Flags -> a -> ([XmlFilter], [XmlFilter])
10:36:14 <Marvin--> but you only want to apply h if a is in XSDType?
10:37:18 <Si\> http://savannah.nongnu.org/cgi-bin/viewcvs/haifa/haifa/src/Text/XML/Serializer.hs
10:37:41 <Si\> in that particular instance, yes
10:38:21 <Si\> that tuple is a list of extra attributes and extra elements
10:39:02 <Si\> so in this instances; _if_ (XSDType a => a) then an extra attribute would be added type="..."
10:40:46 <Marvin--> you *might* be able to do it with dynamics and Data.Generics, but I'm not sure
10:40:53 <Marvin--> I'm no type system hacker
10:42:03 <Si\> unfortunately I think Dynamic only saves monomorphic type data
10:44:39 <Marvin--> right
10:45:39 <Si\> my reason for doing it with the two parameter type-class was because I thought that I could then associate a dummy type with a set of constraints
10:46:24 <Si\> So if I has instance XSDType a => Encoder SOAPEnc a
10:46:57 <Si\> then passing SOAPEnc as e, would automatically force constraints XSDType a => a
10:48:33 <Marvin--> I still don't think what you want is a context on the function types
10:48:47 <Si\> essentially performing dependant typing
10:50:08 <Marvin--> contexts on functions in classes is a tricky subject that I don't quite understand
10:58:52 <Lunar^> Si\: Is HAIFA front-end independent ? e.g. could it be used with an SMTP front-end aside from a web front-end ?
11:02:44 <Si\> it should be when it's finished
11:03:34 <Si\> I can't remember atm, I did have a Transport type-class for doing this; but I think it got shelved.
11:04:05 <Si\> SOAP isn't bound to any specific transport however, so it should be relatively easy to apply it to something else.
11:04:24 <Si\> But at the moment I'm working out removing all the typing hacks in favour of a proper XSD typing system
11:04:33 <Si\> which is what I'm trying to sort out now
11:12:06 <shapr> hi dv^ 
11:14:12 <arauko> hello
11:14:21 <arauko> is there a shell written in haskell?
11:14:45 <Igloo> Yes.
11:14:55 <arauko> do you have any link?
11:15:06 <shapr> Hsh.hs
11:15:12 <Igloo> No, but I'm sure google does
11:15:13 <shapr> it's in the fptools cvs tree.
11:15:22 <shapr> it's passably cute
11:15:37 <shapr> I think dons has a more interesting one included in his hs-plugins
11:15:44 <shapr> since you can dynamically extend it.
11:15:50 <arauko> cool
11:15:52 <shapr> gutenabend cptchaos 
11:15:57 <arauko> hsh.hs ?
11:16:03 <arauko> thats the name?
11:16:12 <cptchaos> shapr: guten abend
11:16:20 <shapr> arauko: no one has really tried to make a 'real' haskell shell that I'm aware of.
11:16:40 <arauko> :-(
11:16:55 <shapr> but if you start up a project that has a simple plugin architecture, I'm *sure* people will contribute.
11:17:03 <shapr> in fact, I promise I'll write at least two plugins.
11:17:16 <shapr> depends on how much I end up using it.
11:17:20 <arauko> interesting...
11:17:46 <arauko> well, i really wanted to take a look at some code first 
11:17:55 <shapr> if you want a real, working, and usable haskell shell, I'd recommend you read Hsh.hs, and dons' code, and stick them together.
11:18:19 <Igloo> I saw a talk by a clean buy no a clean shell, but the extra verbosity made it a no-go I think
11:18:41 <shapr> arauko: http://www.scannedinavian.org/~shae/Hsh.hs
11:18:47 <arauko> thanks
11:18:54 <arauko> ill read it
11:19:03 <shapr> that's not the up-to-the-minute CVS version, but it's probably identical
11:19:43 <shapr> arauko: the next thing to read after that is this: http://www.cse.unsw.edu.au/~dons/hs-plugins/
11:19:52 <shapr> that's the link to dons' hs-plugins
11:19:56 <arauko> interesting code
11:20:08 <arauko> ok, let me see..
11:20:20 <shapr> I think it was originally written quite a few years back
11:20:29 <shapr> mid-nineties, I think.
11:21:11 <shapr> Igloo: I think I'd like something much like GHCi
11:21:41 <arauko> shapr, that plugin stuff is like the dlopen() in C?
11:21:49 <shapr> yes, quite similar.
11:21:58 <Igloo> So you wouldn't mind putting all your filenames in quotes, for example?
11:22:01 <shapr> I think it even uses dlopen in the internals.
11:22:10 <arauko> nice
11:22:10 <Igloo> Although admittedly you could probably largely do it with tab completion
11:22:19 <shapr> right, with tab completion I wouldn't mind so much.
11:23:50 * arauko would like to get something done 
11:24:01 <arauko> though i barely start with haskell
11:26:35 <arauko> well, if i get stuck ill yell at you :-)
11:47:06 <an9n> ehy
11:48:17 <an9n> hey shapr... saw that you 'almost' updated your blog ;)
11:49:11 <an9n> btw, any news about GHC on amd64?
11:51:12 <pesco> Hah, this is fun! Unit tests are paying off.
11:52:05 <an9n> I read something about a bug in gcc3.3 on the GHC on x64 on OpenBSD... is this related to not having a linux amd64 GHC?
12:15:11 <Igloo> The Debian GHC works fine unregisterised on amd64 AFAICT
12:35:26 <b0l0k> yo all
12:38:41 <arjanb> hey
12:44:24 <Aglarion> salut
12:45:27 <Riastradh> Zdravctvuoy.
12:47:08 <b0l0k> salut Aglarion 
12:47:23 <b0l0k> Aglarion, tu connais le haskell ?
12:47:46 <Aglarion> a little bit, but my french is bad :-)
12:48:24 <Lunar^> b0l0k: Si tu as des questions en franÁais, je peux peut-Ítre m'en charger...
12:48:40 <b0l0k> ok
12:48:54 <b0l0k> je voudrai savoir si vous avez des tuto sur haskell en en francais lol
12:49:01 <b0l0k> parce ke moi et l anglais
12:49:05 <Lunar^> b0l0k: But maybe we should do that in private
12:49:27 <b0l0k> tu parle en francais ou pas ?
12:50:03 <Lunar^> C'est un canal o˘ en parle plutÙt anglais, et je ne veux pas dÈranger, clair ?
12:50:13 <jpgil-cl> Hola
12:50:33 <Aglarion> hi jpgil-cl
12:50:36 <b0l0k> ok
12:51:18 <jpgil-cl> Aglarion: I found and excellent page discusing Oo vs Functional Progr. benefits. In Ward Cunningham's wiki
12:51:27 <Aglarion> url?
12:51:31 <jpgil-cl> let me search it...
12:51:52 <jpgil-cl> http://c2.com/cgi/wiki?OoVsFunctional
12:52:42 <jpgil-cl> I know that many of the nicks currently in this channel wrote something there.
12:53:04 <Aglarion> thanks. i know some benefits... what i really need is a soft introduction that takes me further into the haskell universe...
12:53:39 <Aglarion> lol... the first statement was all wrong for me :-)
12:53:43 <jpgil-cl> My smooth intro was to read all of that pages. I'm still stucked in the Imperative Way of Thinking, so the process is somewhat slow :)
12:54:26 <Aglarion> i guess i have adopted a lot of the functional thinking but still sometimes i find myself thinking imperative
12:55:31 <Aglarion> i tried to write a function that finds a route throu a graph from node a to b... i have not yet managed to find out how to represent the graph
12:57:03 <shapr> an9n`afk: I almost updated my blog?
12:57:40 <jpgil-cl> Mmm, last night I found the square-root in Haskell that made me laugh loudly for it's directness. But At 3.00 AM. My wife wasn't so happy as me 
12:57:46 <shapr> heh
12:57:55 <shapr> my wife is really really tired of hearing about Haskell.
12:58:10 <Aglarion> "Functional programming is a better way to program and an easier way to think, especially for new programmers. But it's hard to unlearn the OO/imperative way of thinking once you already do it." thats _very_ right
12:58:36 <Aglarion> what do you mean with finding the square root?
12:58:46 <jpgil-cl> I found another, more impressive: "Haskell is for those mathematician's brains, not for engineers". 
13:00:17 <jpgil-cl> mySqrt()... written in Haskell is funny. Something like: until veryClose approach 1  ; where veryClose = ...; approach = ...;
13:00:41 <jpgil-cl> (it's a bit more longer, but the whole idea is that)
13:01:36 <jpgil-cl> Ups. I forgot the x param. But the function, in esence, was that. Almost a direct implemetiation of the original instrucions.
13:03:57 <Aglarion> it's really tricky for me... i learned so many technical terms... but they are all german and i do not know the english terms... i just hate it :-)
13:04:14 <Aglarion> that makes it sometimes impossible for me to express my thoughts
13:05:33 <jpgil-cl> You read germa?
13:06:24 <jpgil-cl> I mean... dutch
13:06:53 <Aglarion> actually i am german and so all my education was german too
13:06:56 <jpgil-cl> http://www.cs.uu.nl/~jeroen/courses/fp-nl.pdf  is in Dutch. It's translated also to english and spanish
13:07:16 <Aglarion> i'm very bad at dutch...
13:07:18 * jpgil-cl must suppouse that Aglarion *does* speak german then
13:07:55 <jpgil-cl> Well, http://www.cs.uu.nl/~jeroen/courses/fp-eng.pdf is the english link for the course I'm studying myself.
13:08:21 <Aglarion> i'm gonna take a look at it
13:09:55 <Aglarion> well, my job is called "Mathematic technic assisstant" or something like that in english :-) i'm gonna study by october next year
13:12:20 <jpgil-cl> Good. You'll study maths?
13:13:03 <Aglarion> computer sience
13:14:56 <jpgil-cl> Wow. Nice topic indeed. Do you like theoretical topics? Or that is like Computer Engineering?
13:16:03 <Aglarion> i like theory, but i also like technical parts, like operating systems or robotics
13:17:06 <Aglarion> therefore i hope to study in Bremen, Germany, since they have a Robotics Soccer Team
13:17:24 <jpgil-cl> They will compete in the next RoboCup?
13:18:07 <Aglarion> guess so... robocup worldcup 2006 will be in bremen
13:18:27 <jpgil-cl> haha, good then! You'll be in touch.
13:19:24 <Aglarion> unfortunately i may not be part of the team myself then, because project study begins in 5. semester there
13:20:11 <Aglarion> and this will be my 3rd or 4th semester
13:21:13 <Aglarion> so i'll just be a visitor :-(
13:21:36 <PeterE> Aglarion: Ak, so may young people in here.
13:22:13 <Aglarion> how do you mean this?
13:23:28 <PeterE> Aglarion: They have so much to learn.
13:23:44 <Aglarion> so have i
13:24:42 <PeterE> Aglarion: Ok.
13:25:07 <PeterE> Aglarion: Don't mind me, I'm just rambling.
13:25:30 <Aglarion> k
13:27:07 <jpgil-cl> PeterE guessed Aglarion was a student... but it could be an old teacher in his 3rd semester at new university :)
13:27:57 <Aglarion> lol
13:28:49 <Aglarion> i need to wait a year because i have to do my civil service until end of march next year
13:29:02 <Smerdyakov> Aglarion, what country?
13:29:12 <Aglarion> germany
13:29:19 <Smerdyakov> What is this "civil service"?
13:29:31 <Aglarion> i dont know if its the right english term...
13:29:38 <Aglarion> it's a replacement for army
13:29:44 <Smerdyakov> What do you have to do?
13:30:37 <Aglarion> all german men have to go to army for nine months, but u can deny this if you think u are morally not able to use a gun. then u have to do civil service
13:30:55 <Aglarion> that means caring for old or disabled people
13:31:10 <Smerdyakov> Ha. Poor Germany. :D
13:31:12 <Aglarion> or something like this
13:31:13 <kuz> Mmm, conscription.
13:31:58 <Aglarion> smerdyakov: it's ok, since you always know there are enough people to care about needy people
13:32:30 <Smerdyakov> Wouldn't it be better if the whole social system were set up so that people had time to do that of their own volition?
13:32:52 <Aglarion> maybe i'll be off suddenly in a few seconds... but will then be back in an hour or so
13:33:20 <pesco> Also, old people are not the only ones in need of care. There's much fun to be had at Kindergartens everywhere.
13:33:57 <Aglarion> i am working in a living home for disabled children
13:34:18 <Aglarion> it's a good feeling to know you are doing something "good"
13:34:41 <Smerdyakov> Well, it's temporary good for particular people.
13:34:57 <Smerdyakov> There's lasting good to be done in changing the horrendous social structure we live in.
13:35:50 <Aglarion> in germany i think we have a good social system... (even thou they are changing it currently which does _not_ make it better)
13:36:11 <Smerdyakov> I think Germany is the birthplace of the modern kind of bad social system.
13:36:21 <Smerdyakov> Including schools designed to make people dumb.
13:36:39 <Smerdyakov> And extreme specialization.
13:36:40 <Aglarion> smerdyakov: what social system is better in your opinion?
13:36:45 <pesco> Smerdyakov: You think that was born here? Why do you think so?
13:36:46 <kuz> I thought people came that way.
13:36:46 <PeterE> Smerdyakov: Dumb people...cool.
13:36:59 <pesco> kuz: *G*
13:37:05 <Smerdyakov> pesco, I think the modern version was born in Prussia; so I'm reading in a book.
13:37:23 <pesco> Heh. What book is that?
13:37:32 <Smerdyakov> Aglarion, anarchistic systems are likely to be better.
13:37:44 <Smerdyakov> pesco, http://www.johntaylorgatto.com/underground/index.htm
13:37:52 <Aglarion> anarchy is in my humble opinion not able to work
13:38:06 <Smerdyakov> Aglarion, do you know what anarchism is?
13:38:13 <pesco> Smerdyakov: Cool.
13:38:30 <Aglarion> tell me :-)
13:38:35 <flaw>        n : a political theory favoring the abolition of governments
13:38:58 <Smerdyakov> flaw, that's a dangerously incomplete definition.
13:39:16 <flaw> Smerdyakov: complain to wordnet
13:39:22 <flaw> From WordNet (r) 2.0 [wn]:
13:39:24 <Riastradh> It is a strictly literal defeinition.  There is of course much more to be said of anarchism.
13:39:28 <Riastradh> Definition, even.
13:39:32 <Smerdyakov> Anarchism is a social philosophy based on avoiding all hierarchical power structures and relying instead on voluntary association.
13:40:05 <flaw> voluntary association? what examples in modern times are there of this?
13:40:08 <jpgil-cl> Regarding anarchism: there at least as many definitions as anarchist exists.
13:40:14 <Smerdyakov> http://hcoop.net/
13:41:42 <jpgil-cl> Don't forget Odonianism, from Leguin
13:42:03 <Smerdyakov> It's important to understand that the social setup we take for granted in the Western world is _not_ a result of evolution towards a system to suit the people.
13:42:18 <Smerdyakov> It's the purposeful creation of people in power, to consolidate their positions.
13:42:52 <flaw> well, if you really want that to take off, you're gonna need to invent a new word for it, cause anarchism probably has a tad too negative connotation to be accepted by the masses (;
13:42:56 <Smerdyakov> We start with absolute power for these people maintained through violence, and this strategy is slightly altered throughout history using different kinds of control and propaganda.
13:43:12 <Smerdyakov> flaw, "libertarian socialism" is what we use in such cases.
13:43:17 <pesco> Which has either a) gotten utterly out of control or b) converged into a fantastic conspiracy.
13:43:41 <kuz> Or the natural construction of human behavior.
13:44:52 <pesco> "Klienten avslutas"! How do they come up with such awesome words.
13:44:59 <PeterE> Hm, as exciting this may be, it do seem a bit off topic.
13:45:13 <kuz> It's not all that exciting.
13:45:21 <Smerdyakov> PeterE, have you forgotten that this is IRC?
13:45:45 <jpgil-cl> Anarchism as an unsovable flaw: it needs responsible people. And people isn't responsible.
13:46:07 <kuz> It's just your typical idealism.
13:46:22 <kuz> Most simple ideologies suffer from that sort of thing.
13:46:26 <Smerdyakov> jpgil-cl, prove it.
13:46:28 <dustin`> Human nature is subjective, and a product of the ideological superstructure.
13:46:37 <PeterE> Smerdyakov: The last time I looked, IRC had a specific functionality where the topic of the channel is spelled out.
13:47:19 <kuz> How metacircular.
13:47:20 <Smerdyakov> PeterE, in case you didn't know, #haskell is the most intellectual channel on Freenode, so it's the natural place for such conversations. ;)
13:47:52 <jpgil-cl> Smerdyakov: cut the head of a body. Next, you'll need that arms, legs and so to cooperate in a natural way. If you can have members willing to coopoerate, work, and to think in general, the anarchism would work.
13:48:08 <jpgil-cl> Example: Sourceforge communities, Haskell community, many wikis.
13:48:37 <jpgil-cl> but put a Wiki to administer, say, Xerox or Microsoft. The sole idea makes me laugh!
13:48:56 <Smerdyakov> jpgil-cl, the problem with views like the one that you first stated is that modern society is designed expressly and knowingly to 1) prevent most people from working together 2) facilitate the ability of the elite to work together as much as possible.
13:49:16 <Aglarion2> mhh
13:49:20 <Aglarion2> disconnected
13:49:31 <Smerdyakov> jpgil-cl, if you stop raising children to resist cooperation, then society will become cooperating in one generation.
13:49:46 <jpgil-cl> Welcome back, Aglarion
13:49:54 <Riastradh> jpgil-cl, if you're going to use that kind of analogy, it's not the head you're cutting off, but the clamp of existing Western society on your head.
13:50:09 <dustin`> But we'll need a period of dictatorship of the proletariat to accomplish this, no?
13:50:21 <Aglarion2> from your comments i try to recover the discussion i've lost...
13:50:43 <Smerdyakov> dustin`, I don't see that.
13:51:06 <jpgil-cl> What do you mean with Western-socs? In which they are different from Muslim, Chinesses, etc.?
13:51:07 <Smerdyakov> dustin`, you have gradual removal of acceptance of the legitimacy of various social controls.
13:51:15 <dustin`> Smerdyakov: What is to stop reactionary violence against the revolution?
13:51:17 <kuz> Modern society is one complicated design; hats off to its architect.
13:51:35 <Smerdyakov> dustin`, careful planning and use of loopholes in existing social controls.
13:53:11 <dustin`> Smerdyakov: I think violent confrontation is inevitable though.  Your system depends on a society free of inequity.  Some people in this system depend on inequity, and will thus fight to keep this.
13:53:26 <Aglarion2> i hate political discussions since they almost always seem to come to no end
13:53:31 <dustin`> Smerdyakov: However, I do believe that the end result is a possibility.  I'm just not sure of the method.
13:53:35 <Smerdyakov> dustin`, they're in the minority, though.
13:53:47 <kuz> Yup, not much point in them.
13:53:50 <Riastradh> Aglarion2, that's because politics is continuous...
13:54:00 <jpgil-cl> Aglarion2: I feel like you, but in this case there's enough good minds as to enjoy it :)
13:54:01 <Smerdyakov> kuz, for you, because you don't plan to do anything.
13:54:11 <Smerdyakov> kuz, I talk about it because it helps me decide what I should do about it.
13:54:22 <Aglarion2> maybe because i don't see the need to do anything
13:54:23 <flaw> curious, how would things like law enforcement be handled under such a "no government" government?
13:54:32 <kuz> Yes, you know me quite well.
13:54:33 <flaw> or law in general
13:54:39 <dustin`> Smerdyakov: The minority must be suppressed somehow, in order to prevent their reconsolidating of power.
13:54:45 <Smerdyakov> Aglarion, well, I do. Feel free to stay out of it if you don't. :P
13:54:56 <Smerdyakov> dustin`, just don't work for them anymore.
13:55:19 <PeterE> Ok, let me be off topic too.  Do any of you know the history of the police force in various countries?
13:55:26 <Aglarion2> i did not mean to annoy you
13:55:27 <Riastradh> Power is merely an agreement.  If a large enough majority disagrees, regardless of what written doctrines still hold, the power vanishes.
13:55:32 <Smerdyakov> flaw, people very rarely do undesirable things we think of as "illegal" now in good circumstances.
13:55:45 <dustin`> flaw: Law and order are inherent to the existing establishment to protect property rights.  They become irrelevant in community situations.
13:55:54 <jpgil-cl> PeterE: Canadians rides horses from centuries :)  I don't know much more.
13:56:04 <flaw> community situations?
13:56:35 <dustin`> Riastradh: I agree with you, which is why I'm not a Trotskyist anymore.  However, I still think there will need to be some kind of plan laid out to deal with remnants of the old order.
13:56:41 <flaw> ah, Smerdyakov, you assume crime will lower because of good circumstances?
13:56:55 <kosmikus> good evening
13:56:58 <flaw> or believe rather?
13:56:59 <PeterE> Police in Denmark was made in the early eightteen hundreds.
13:57:06 <pesco> kosmikus: Hoi.
13:57:15 <Smerdyakov> flaw, yes, in part because of decreasing number of acts that should be considered "crime."
13:57:40 * pesco giggles.
13:57:48 <flaw> Smerdyakov: who would define what a crim is?
13:57:48 <kosmikus> hi pesco, already put haskell.sty to good use?
13:57:48 <flaw> crime
13:57:51 <dustin`> flaw: Crime is a product of material conditions.  Change the material conditions, and crime becomes irrelevant.  The key question then becomes that of a method of changing material conditions.
13:58:02 <Agalrion> and who will care for me if i am weak and someone else (in our terms "criminals") tries to steal my property or to rape my wife?
13:58:10 <Smerdyakov> flaw, there's no need to. Communities make decisions about behaviors on an individual basis.
13:58:21 <pesco> kosmikus: Oh, for lack of a better word fucking yes.
13:58:28 <Smerdyakov> Agalrion, people raised in good circumstances won't rape your wife.
13:58:36 <Smerdyakov> Agalrion, and the concept of "property" would not be in effect.
13:58:38 <kuz> Haha.
13:58:58 <Agalrion> i don't think men rape women because of bad circumstances
13:59:07 <flaw> dustin`: yeah, that sounds like the key, but is it possible?
13:59:10 <Smerdyakov> I do.
13:59:21 <kuz> On what basis?
13:59:59 <Agalrion> i think most rapers rape because they are psychologically ill
13:59:59 <dustin`> flaw: I can never be absolutely certain.  I do, however, think that it is vital for the continuity of our race for such a change to occur, and thus I'm inclined to think that it is attainable somehow.
13:59:59 <flaw> Smerdyakov: what about a mentally disturbed individual, is that considered a bad circumstance? how would that be handled? asylum?
14:00:08 <kosmikus> pesco: what are/were you writing
14:00:15 <PeterE> Agalrion: Who would care for you, if your appartment was broken into?
15:08:43 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/hawiki/EuroHaskell","May 2004 HC&AR: http://www.haskell.org/communities/","http://www.haskell.org/cabal/"]'
15:08:43 --- topic: set by shapr on [Fri Jun 25 02:34:22 2004]
15:08:43 --- names: list (clog sonderblade jesse99 jadrian jesse98 opet an9n`afk cptchaos dv^ flaw kuz [dan] Si\ roconnor kimmell SamB Lemmih happibum arjanb jak XTL TheHunter lelit pesco isomer arauko LrdMtrod np_hard dennisb Smerdyakov Fractal Joachim_ keverets Philippa CLxyz cmeme Lunar^ ozone Igloo shawn_ Cale_ thebug mattam viblo shammahs emu Taaus juhp sorje shrimpx dons andersca sisko sazzle_ blackdog_ det ksandstr esap asmodai skylan Riastradh lambdabot)
15:08:43 --- names: list (eshu tic edwinb earthy norpan Hipo polli Lor musasabi flori Matt-W gdsx kosmikus wagle ibid)
15:09:31 <roconnor> fwithg = /\ SomeType -> \ x -> (g SomeType (f SomeType x)) 
15:09:38 <roconnor> or something like that.
15:10:25 <shrimpx> but that's not related to the curried function (f . g), is it?
15:10:33 <shrimpx> or g . f
15:13:59 <roconnor> Well, the intension is to make the haskell function g . f.  If you are going to pass types explicitly, now f and g are two parameter functions (the first being a type) you can't just use . to compose them.
15:38:29 <bourbaki> hi
15:53:29 <pesco> kosmikus: lhs2TeX typesets "forall a." as "forall a $\circ$"! How can that be?
16:14:01 <kosmikus> pesco: lhs2TeX doesn't parse Haskell, and the Haskell lexer treats all .'s the same
16:14:42 <pesco> Gah! So I can't have pretty foralls and pretty function composition at the same time?
16:15:01 <jadrian> what about Namespaces?
16:15:17 <kosmikus> pesco: not without either LaTeX or lhs2TeX trickery
16:15:28 <jadrian> Module.f   <-- does it use composition?
16:15:35 <pesco> And the What kind of trickery?
16:15:53 <kosmikus> pesco: if you don't want alignment involving forall's, you could try
16:16:39 <kosmikus> \def\hsforall #1\circ{\forall #1.}
16:17:00 <kosmikus> %format forall = "\hsforall "
16:18:01 <kosmikus> I usually define a different operator as function composition, though
16:18:25 <pesco> How does that solve the forall issue?
16:18:44 <pesco> This is kind of disappointing because there are wonderful foralls in the Guide.
16:18:44 <kosmikus> what?
16:19:21 <pesco> Oh, now I see.
16:20:07 <pesco> Very funny, that part says %format . = "." and %format forall a = "\forall " a.
16:21:06 <kosmikus> the part of the documentation?
16:21:13 <pesco> Yes.
16:21:22 <kosmikus> yes, as I said, I usually say
16:21:32 <kosmikus> %format `comp` = "\circ "
16:21:43 <pesco> Hm.
16:23:19 <kosmikus> pesco: but the \hsforall trick should work in most cases
16:23:29 <kosmikus> pesco: I think you explicitly must define
16:23:39 <kosmikus> %format . = "\circ "
16:23:40 <kosmikus> as well
16:24:07 <pesco> Ok. Maybe something like this should be in the default.
16:24:28 <pesco> Another thing, why does it put so little space between code and text?
16:24:45 <kosmikus> the defaults are definitely not optimal -- they've been created in a pre-Haskell 98 time, and the "forall" keyword in Haskell is still an extension :)
16:25:00 <pesco> Pre-Haskell 98?!
16:25:06 <pesco> Please update the defaults!
16:25:26 <kosmikus> lhs2TeX originates from 1997
16:25:38 <pesco> Interesting.
16:25:58 <kosmikus> it's hard to update the defaults without breaking existing documents
16:26:09 <kosmikus> that's the main reason why I haven't touched them
16:26:14 <pesco> Pah.
16:26:40 <pesco> You could publish an alternative .fmt or whatever.
16:27:16 <kosmikus> yes, for the code block layout (including vertical spacing) I'm currently working on a library
16:27:42 <pesco> Oh, that's cool.
16:27:43 <kosmikus> I can send you some files tomorrow that use better spacing
16:27:51 <pesco> Wooh! Yeah. :)
16:28:44 <pesco> pesco@gmx.de is the address, can you remember that?
16:29:01 <pesco> I'll be with my parents tomorrow, don't know when I'm coming back.
16:29:14 <kosmikus> it'll be in the logs now :)
16:29:20 <pesco> :)
16:29:50 <kosmikus> I'll try to do it tomorrow -- if I forget, please ask me again
16:30:05 <pesco> No problem.
16:30:39 <kosmikus> if you have subversion, you can actually check out the files yourself right now
16:31:02 <pesco> Right, hm. I don't think I have it. But it's free, isn't it?
16:31:14 <kosmikus> yes, it is
16:32:05 <kosmikus> sorry, it's not darcs yet ;)
16:32:06 <pesco> Cool. So checking that out will be as good as you sending me the files manually?
16:32:11 <pesco> ;)
16:32:40 <kosmikus> well, it will be better, because you will be able to update at any time
16:32:48 <pesco> Right.
16:33:13 <pesco> I was just wondering if you have everything in there already.
16:33:21 <kosmikus> otoh, the current version has a subtle bug which I haven't got round to fix yet ... but you'll probably not notice ... should be better than the default anyway
16:36:22 <pesco> Well thanks, I'm off to bed now.
16:36:26 <kosmikus> me too
18:36:55 <jadrian> hello
18:36:59 <jadrian> anyone around?
18:37:19 <Pseudonym> No.
18:37:26 <SyntaxLaptop> hi jadrian
18:37:36 <jadrian> hope I didn't wake you all up...
18:37:37 <jadrian> :)
18:37:43 <jadrian> just a quick question
18:37:48 <Pseudonym> You did.  It's almost lunchtime, you bastard.
18:37:56 <jadrian> Pseudonym: lol
18:37:57 <Pseudonym> I thought I could sleep through until mid-afternoon.
18:38:03 <jadrian> would you call this function on rose Trees a 'fold'
18:38:13 <jadrian> h                 :: (a->b->b)->b->Tree a ->b
18:38:13 <jadrian> h f e (Node a ts) = f a (foldr (\t b -> h f b t) e ts)
18:38:18 <jadrian> ...
18:38:25 <jadrian> data Tree a = Node a [Tree a]  -- the usuall
18:38:56 <jadrian> (if the code is to cryptic I can explain...)
18:40:21 <Pseudonym> Yeah, I'd call that a fold.
18:41:40 <jadrian> I was not sure because it's not uniform, in the sense that I don't go from the leafs to the root
18:41:58 <jadrian> (was that clear?)
18:42:06 <Pseudonym> Well yes you do, kind of.
18:42:38 <Pseudonym> If you think of it strictly, you call h recursively, and _then_ apply f.
18:43:57 <jadrian> a simple way to explain what I mean by uniform
18:44:27 <jadrian> I can transform a tree to a list using that function by calling
18:44:34 <jadrian> h (:) []
18:44:38 <jadrian> right?
18:44:49 <jadrian> and it's pretty efficient 
18:45:20 <jadrian> a 'uniform' fold instead of accumulating all elems like this one does
18:45:40 <jadrian> would wrap each leaf creating  a singleton
18:45:55 <jadrian> and then concatenate lists at each level
18:46:38 <Pseudonym> Ah, OK.
18:47:20 <Pseudonym> Sorry, hang on.  w*rk
18:47:23 <jadrian> k
18:53:28 <jadrian> sorry Pseudonym got to go, talkto you later
19:14:09 <shapr> aww, I missed the political discussion.
19:14:18 <Pseudonym> There was political discussion?
19:14:21 * Pseudonym checks the logs
19:14:54 <shapr> yah, Smerdyakov talking about anarchism again.
19:15:29 <Pseudonym> I didn't know he was an anarchist.
19:15:55 <shapr> yeeks "CRON-APT error W: Bizarre Error - File size is not what the server reported 3207814 3216961"
19:16:54 <shapr> I think the correct way to discuss politics in #haskell is to get those who want to make a point to write up an economic simulator that shows their ideas in action.
19:17:03 <Pseudonym> Sounds good to me.
19:17:03 <shapr> based on Yampa maybe.
19:17:14 <shapr> otherwise, it's just so much hot air.
19:17:39 <shapr> Yampa would be good for modelling a bunch of independent entities.
19:17:47 <monochrom> main = putStrLn "monochrom is right"  -- my economic simulator
19:17:56 <Pseudonym> Proving that your model is good is the big problem.
19:18:19 <shapr> first prove that your model can work at all
19:18:28 <monochrom> Heh, so the hot air is moved to arguing over whose model is right.
19:18:30 <Pseudonym> Basically, I believe in freedom.  Where "freedom" is defined as the promotion of me and people who are like me.
19:18:40 <shapr> then I want to play with the source code to see what assumptions are built-in.
19:18:56 <Pseudonym> People who are not like me are free to choose not to be like me, but they suffer the consequences in my ideal world.
19:19:28 <Pseudonym> Because the way I think is objectively superior to the way that everyone who is not like me thinks.
19:19:51 <Pseudonym> This is an expansion on monotom's system, with one exception.
19:19:53 <shapr> Pseudonym: hey, what do you think of a language where arrows are the building block, and functions etc are built on top of that?
19:19:53 <np_hard> his nick is smerdyakov
19:19:57 <np_hard> of course he is an anarchist
19:19:58 <np_hard> :-D
19:20:05 <Pseudonym> monotonom is wrong where he disagrees with me.
19:20:50 <Pseudonym> shapr: Arrows are an abstraction, which means they're pretty useless without concrete models.
19:20:58 <Pseudonym> What do you propose building the concrete models out of?
19:21:12 <shapr> real arrow instances!
19:21:15 * shapr thinks about that
19:21:22 <Pseudonym> Such as... functions, for example?
19:21:26 <shapr> too easy
19:21:39 <shapr> I think it's time for me to sleep.
19:21:43 * shapr falls over
19:21:46 <Pseudonym> Night.,
19:29:11 <monochrom> Hahaha
23:07:53 <skew> ?
23:08:27 <jpgil-cl> Zzzz...   everybody here seems to be sleeping, skew
23:08:44 <skew> usually happens this time of night
23:08:57 <jpgil-cl> 2 AM where I live. Not so late
23:09:01 <emu_> what weirdos
23:09:05 <emu_> who sleeps at 2 AM
23:09:09 * emu_ snores
23:09:12 <Pseudonym> 4pm here, so definitely sleeping.
23:09:19 <emu_> Pseudonym: that's normal
23:10:26 <jpgil-cl> Yes, I tend to got sleep between 2-3 PM more frequently than 2-3 AM
