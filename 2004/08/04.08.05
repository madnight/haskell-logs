01:30:47 <Si\> I'm trying to set up an inheritance system via type-class by assigning each data-type I have a type-class for accessing attributes. 
01:31:19 <Si\> Then I want to be able to define a super-type by simply adding the sub-type as an attribute
01:32:10 <Si\> and the somehow allowing the class default mechanism to simply use the instance of that attribute as the instance of the super-type as a whole
01:32:41 <Si\> for example, if I have a person data-type; the class would be something like
01:32:43 <Si\> class Person a where
01:32:43 <Si\>     getSurname      :: a -> String
01:32:43 <Si\>     getForename     :: a -> String
01:32:43 <Si\>     personAttribute :: Person b => b -> a
01:33:20 <Si\> then I'd provide a default mechanism for getSurname and getForename using the personAttribute
01:33:37 <Si\> e.g. getSurname = getSurname . personAttribute
01:34:59 <Si\> problem is I keep getting ambiguous type variable errors when I try to compile that
01:54:40 <pesco> woo! Darcs rocks!
01:59:15 * lelit agrees
01:59:22 <Fractal> Ya me too
01:59:27 <Fractal> What's up?
02:11:13 <pesco> Has anyone got an idea about how out of sync the haskell-libs CVS at sf.net and the hlibs darcs repo at scannedinavian are?
02:16:45 <bringert> pesco: shapr would be the person to ask about that
02:17:07 <pesco> Yes. Let's wait til he returns.
02:18:41 <lelit> bidir sync would be difficult, while single direction is very easy to accomplish, with the help of some tool like my tailor :)
02:19:53 <lelit> pesco, http://www.scannedinavian.org/DarcsWiki/ConvertingFromSubversion
02:20:24 <lelit> bad name for a tool that digests darcs, svn & CVS changesets :)
03:40:42 * shapr returns
03:48:07 <shapr> good morning #haskell!
03:48:23 <shapr> dang, it's afternoon.
03:48:58 <cptchaos> hm, morning is ok for me :-)
03:57:43 <shapr> hiya pesco 
03:57:58 <pesco> Ah, good morning shapr.
03:58:02 <cptchaos> hi, pesco, your draft looks fine,
03:58:14 <pesco> cptchaos: Cool!
03:58:52 <pesco> shapr: I've installed darcs and found the repositories on scannedinavian, I think they are out of sync with haskell-libs CVS.
03:59:03 <shapr> yes, they are
03:59:31 <pesco> It would probably good to sync them and somehow lock haskell-libs to prevent further divergence.
03:59:36 <shapr> yes, I agree
03:59:49 <pesco> I heard you've got a tool to do the syncro?
04:00:03 <shapr> yes, lelit wrote it
04:00:49 <pesco> Very good. Let me check if I have all my local changes commited to haskell-libs. I think I modified the Algebra module slightly.
04:01:01 <shapr> ok
04:02:18 <pesco> what in the hell?
04:02:23 <shapr> ?
04:02:32 <pesco> Cannot access /cvsroot/haskell-libs/CVSROOT
04:02:43 <shapr> what's up with that?
04:02:45 <pesco> No such file or directory
04:06:10 <shapr> weird
04:07:13 <shapr> anyway, I want to break the hlibs repo into per-product repositories
04:07:26 <shapr> I've been meaning to do that for quite some time
04:08:18 <pesco> That is very good, I was going to suggest likewise.
04:09:07 <pesco> Ok, I have no local changes pending
04:09:58 <pesco> The cvs.haskell-libs.sourceforge.net name points to the wrong machine.
04:10:16 <pesco> -d cvs.sourceforge.net:/cvsroot/haskell-libs worke.
04:11:46 <shapr> ok
04:15:34 <shapr> hm, I don't know if there's an easy way to split the repo and save the history
04:15:44 * pesco shrugs.
04:16:03 <shapr> at worst I could copy the repo and remove all the files that aren't in 'this project'
04:16:30 <pesco> Heh, right, that's a fall-back.
04:20:01 <shapr> have you played with darcs much?
04:20:21 <pesco> not at all yet.
04:28:20 <bourbaki> hi
04:28:30 <pesco> Mornin
04:41:31 <shapr> sf.net cvs repos are way overloaded
04:46:27 <pesco> True.
05:08:26 <pesco> Is there ifM :: IO Bool -> IO a -> IO a -> IO a?
05:09:14 <pesco> (er, let IO denote any monad)
05:17:11 <shapr> @index when
05:17:13 <lambdabot> Control.Monad,Control.Monad.Cont,Control.Monad.Error,Control.Monad.Identity
05:17:13 <lambdabot> Control.Monad.List,Control.Monad.RWS,Control.Monad.Reader,Control.Monad
05:17:13 <lambdabot> State,Control.Monad.Writer,Monad
05:17:20 <shapr> @type Control.Monad.when
05:17:21 <lambdabot> Control.Monad.when :: forall m. (Monad m) => Bool -> m () -> m ()
05:17:40 <kosmikus> I don't think it exists
05:17:41 * pesco shakes his head.
05:17:58 <kosmikus> but if you define  cond x y z = if x then y else z  , then ifM = liftM3 cond
05:18:54 <pesco> Won't that evaluate the arguments?
05:20:02 <pesco> liftM3 f a b c = {x <- a; y <- b; z <- c; return (f a b c)} ?
05:20:38 <kosmikus> oh yes, sorry
05:21:09 <pesco> Ok. FINE. I'll just write my own ifM then. ;-)
05:22:03 * pesco shambles off, rambling and cursing about various topics.
05:23:50 * Lemmih wonders why it's so difficult to install things on Windows boxes.
05:26:18 <pesco> That question is in fact equivalent to the question why anything is so difficult on Windows.
05:26:31 <pesco> You'll be a hero if you figure it out.
05:26:54 <Philippa_> I suspect Lemmih's referring to the difficulty in installing unix-oriented software under windows
05:27:19 <Philippa_> I never did get round to getting the fptools stuff working, for example, so I've not built Haddock
05:28:37 <pesco> Are you blaming Unix?!
05:29:05 * pesco waves a little sign with the word "irony" written on it twice.
05:29:29 <Philippa_> I'm blaming malformed ideas of "cross-platform"
05:29:43 <Philippa_> sure, MS haven't exactly done their best to help interoperability
05:30:38 <Lemmih> I would like to test some wxHaskell software but I can't install wxHaskell /-:
05:30:52 <Philippa_> ah, I'm trying to remember how I got that working in the end...
05:31:18 <Philippa_> what're you using to supply a *nix-like environment?
05:31:39 <Lemmih> Cygwin.
05:31:56 <Philippa_> where's the build process falling over?
05:31:58 <pesco> Philippa_: Please elaborate on your point about "malformed ideas".
05:34:08 <Philippa_> pesco: "cross-platform" = works on one particular platform [interface]. Doubly so when you pick *nix when your tool's supposed to work on all Haskell systems
05:34:59 <Lemmih> Philippa_: I'm using a birary package.
05:35:28 <Philippa_> Lemmih: ah. It's almost certainly got .hi files for the wrong version of ghc
05:35:44 <Philippa_> so you'll have to build it from source
05:36:12 <Lemmih> It should be for GHC 6.2.1 which I have.
05:36:31 <Philippa_> hrmm, interesting...
05:36:37 <Philippa_> what kind of error messages are you getting?
05:37:33 <pesco> Philippa_: You think that's some people's idea of "cross-platform"? That's harsh.
05:39:09 <pesco> Although, I openly admit sabotaging Windows by refusal to use "withSocketsDo".
05:40:43 <Philippa_> Right. This in turn tends to reduce my willingness to write to cross-platform libs myself, especially if the local alternatives have any advantages. Believe it or not, *I* don't like this situation
05:43:59 <pesco> What do you mean by "write to cross-platform libs" and "this situation"?
05:44:11 <Philippa_> using SDL and OpenGL instead of DirectX, for example
05:44:27 <pesco> Ah, ok, "writing to"="using"?
05:44:31 <Philippa_> and the situation of wanting to write cross-platform stuff and finding my efforts sabotaged by those on other platforms
05:44:50 <Philippa_> yeah. "Writing to [something matching] the lib's interface", if you like
05:46:14 <pesco> Ok. What kinds of sabotage do you mean?
05:46:24 <shapr> like weiswurst
05:46:33 <shapr> oh wait, I thought you said *sausage*
05:46:43 * pesco laughs loudly
05:47:55 <Philippa_> dependencies on a complete emulation of another platform would be a favourite - "you can't build this unless...", complete with no meaningful docs. While not sabotage per se, libs with substandard win32 implementations are also a problem - especially with GUI toolkits
05:48:43 <Philippa_> my ethic tends towards "I'll write what I want to write, but if I can make it available to others easily I'll do so" - I won't leave myself stuck with a substandard implementation on my own platform of an app I'm writing for myself...
05:49:13 <Philippa_> oh yeah, that's another one: QT's free for free apps - unless you run windows
05:49:24 <pesco> Eheh, what?
05:50:17 <Philippa_> wxWidgets, for example, doesn't do docking toolbars under win32 (or at least didn't when I last looked a couple of months ago)
06:00:18 <Lemmih> Yay. It's working (-:
06:00:52 <thebug> huzzah for breaking firewalls :)
06:03:00 <Lemmih> Grrr This is the third time I've tried to move a window to another desktop.
08:31:05 <Igloo> Should "try: foo finally: pass" (with some newlines and indentation) in python not do what I want?
08:31:33 <Igloo> Oh, no. Bah.
08:32:50 <shapr> man I love unicycling.
08:33:10 <Igloo> Grr, do I really have to make a function for this?
08:33:13 <SyntaxNinja> shapr: you've been doing a lot of it lately?
08:33:24 <shapr> yes, very much
08:33:40 <shapr> so much that my seat has become lose
08:33:50 <shapr> and I'm on my third tire
08:34:02 <shapr> and the seatpost clamp has broken off
08:34:18 <shapr> and the pedals almost came off
08:34:26 <SyntaxNinja> third tire! you said it was a unicycle!!
08:34:29 <shapr> haha
08:34:36 <shapr> I've worn out two before this :-)
08:34:47 <shapr> maybe I should buy a new unicycle, this one has had a hard life.
08:34:53 <Igloo> You can get unicycles with 3 tyres
08:35:01 <shapr> yes, but they look scary
08:35:08 <shapr> three tires mounted vertically
08:37:02 <shapr> so, any new code?
08:37:34 * SyntaxNinja is sadly writing java right now.
08:37:40 <shapr> fun code?
08:37:50 <shapr> oh, did you see pesco's AFRP thingy?
08:37:52 <shapr> it's cute
08:38:23 * bringert is writing java too
08:38:24 <Lemmih> shapr: I actually got my TH printf working last night.
08:38:29 * shapr is writing ELISP!
08:38:48 <bringert> but the program is actually cool. for a java program at least
08:38:51 <shapr> and after the elisp, then some concatenative stack-based programming.
08:38:58 <bringert> demo applet: http://www.cs.chalmers.se/~bringert/gf/translate/
08:39:05 <shapr> oh, gf is very cool
08:39:11 <bringert> requires java 1.5
08:39:36 <bringert> shapr: I can use GF grammars to parse from java now
08:39:56 <bringert> well, GF grammars converted by GF to context free grammars anyway
08:39:56 <SyntaxNinja> I actually have to think about fencepost errors :(
08:40:04 <shapr> wow!
08:40:39 * shapr is pissed off at telia
08:40:46 <shapr> they're caching my deb updates!
08:40:57 <bringert> SyntaxNinja: I feel your pain
08:41:05 <pesco> Why is Haskell such fuckin FUN!
08:41:17 <pesco> The longer you hack on a program, the prettier it gets!
08:41:18 <shapr> because it was designed by programmers instead of managers
08:41:25 <shapr> look at COBOL
08:41:27 <shapr> or Java
08:42:01 <shapr> Java is the programming equivalent of The Cheeky Girls
08:42:28 <pesco> Who are they?
08:42:36 <shapr> http://www.cheeky-girls.com/
08:42:49 <shapr> they had this song that went "we are the cheeky cheeky girls, come and touch my bum"
08:42:49 <shapr> stuff like that
08:43:23 <tic> eeep
08:43:24 <pesco> They've clearly been designed by Managers.
08:43:29 <SyntaxNinja> pesco: yes.
08:43:46 <pesco> "come and touch my bum" Wahaha
08:43:50 * shapr laughs
08:43:51 * SyntaxNinja didn't make any fencepost errors, fwiw (as far as I can tell, but who knows for sure)
08:44:20 <shapr> ah here it is " CHEEKY SONG (TOUCH MY BUM) "
08:44:24 <pesco> And they have a CHEEKY DOG!
08:44:37 * shapr cackles loudly
08:45:25 <pesco> Look, they seem to be having lots of FUN in the STUDIO.
08:45:41 <shapr> this sounds like @yow!
08:45:54 <pesco> Oh yes, I'm learning the DANCE!
08:46:02 * shapr snickers
08:46:14 <pesco> In "take your shoes off" you get to smack your BUMS!
08:47:06 <shapr> now, aren't you glad you've gotten your recommended daily requirement of pap culture?
08:47:24 <pesco> Take your shoesies off... this is too hard...
08:47:31 <pesco> pap.
08:47:36 * pesco giggles
08:48:39 <pesco> What the hell, THEY are still wearing their SHOESIES. Now I feel tricked.
08:48:58 * shapr snickers
08:49:28 <pesco> But good comparison. Java<->Shoesie Girls.
08:51:28 <pesco> Maybe they'd like to make a song about Java.
08:51:33 <shapr> oy
08:52:01 <pesco> Imagine the fan-bases joining!
08:52:46 <SyntaxNinja> man... if you want to return two things, you have to make a whole new type.
08:53:13 <pesco> Oh, in Java. Right.
08:53:21 <shapr> you could use a value object
08:53:31 <shapr> mmm, http://www.dur.ac.uk/c.t.mcbride/a-case/01credits/index.html
08:54:25 <SyntaxNinja> what's a value object?
08:55:06 <shapr> just an object that holds values
08:55:29 <shapr> sort of like an OOP tuple 
08:55:31 <shapr> I guess
08:56:07 <shapr> this magic marker presentation is great fun
08:57:02 <shapr> oh pesco, have you tried epigram?
08:57:19 <pesco> No, what's that?
08:57:31 <shapr> http://www.dur.ac.uk/CARG/epigram/
08:57:32 <shapr> it's very sexy
08:57:40 <shapr> you gotta try the tutorial
08:58:12 * shapr goes to look for food
09:08:41 <pesco> Woo, that's cool! (Epigram)
09:09:19 <kosmikus> promising indeed
09:52:58 <irsirius> hi
09:53:35 <irsirius>   = putStr (concat [ (replicate x ' ') ++ line ++ "\n"  | line <- pic ] ++ replicate y '\n')
09:54:00 <irsirius>   = putStr . concat [ (replicate x ' ') ++ line ++ "\n"  | line <- pic ] ++ replicate y '\n'
09:54:27 <irsirius> can anybody tell me why the first one works but the second one does not?
09:56:14 <pesco> (concat [ ... ] ++ ...) is not a function.
09:57:18 <pesco> (.) :: (b->c) -> (a->b) -> (a->c)
09:58:33 <irsirius> pesco: it's not a function  because of ++ ??
09:59:01 <pesco> No.
09:59:58 <monochrom> The question can be simplified.
10:00:14 <monochrom> putStr (sum [1,2,3] + 4)
10:00:21 <monochrom> putStr . sum [1,2,3] + 4
10:00:47 <irsirius> thats wrong?
10:01:08 <Lemmih_> irsirius: Are you mixing up (.) and (&)?
10:01:10 <Cale> irsirius: yeah - you're looking for $
10:01:15 <monochrom> If you understand the problem with putStr . sum [1,2,3] + 4 you're set.
10:01:45 <pesco> irsirius: (.) is function composition. It takes two functions as arguments.
10:02:54 <Cale> print . sum [1,2,3] + 4 = print . (sum [1,2,3] + 4) = print . (6 + 4) = print . 10
10:03:05 <Cale> but 10 is not a function
10:04:14 * pesco shows off his rating 2 type-checker headware.
10:04:46 <irsirius> ok
10:04:50 <irsirius> mom :)
10:04:59 <Cale> mom?
10:06:39 <irsirius> sorry, i think thats german habit :)
10:07:36 <pesco> That's right. I casually ask my mom about type errors. Everyone does that.
10:07:43 <pesco> ;)
10:08:11 <irsirius> ok, i think i got it. it's not like the output of concat is put into putStr but to define the output of a function to be taken by another function?
10:08:18 <SyntaxNinja> yes, we all ask pesco's mom about type errors.
10:09:21 <Cale> irsirius: but if your goal is to remove brackets, $ is often good for this
10:09:34 <Cale> where  f $ x = f x
10:09:57 <Cale> but it binds very loosely
10:10:01 <monochrom> f $ g x = f (g x) = (f . g) x   -- choose your poison
10:10:30 <irsirius> oh my... 
10:10:39 <irsirius> $ wasn't mentioned in this book so far
10:10:43 <monochrom> What, you don't love poisons?
10:10:53 <monochrom> Poison is good.
10:10:53 <Cale> hehehe
10:11:17 <pesco> ($) is just handy if you want to avoid the parentheses around a long function argument.
10:12:29 <pesco> As in allocaArray $ \a -> do fancy stuff with an array in a very long expression and return something. Now you don't need a ')' at the end of all this.
10:12:58 <pesco> LISP programmers will be utterly puzzled about the alleged usefulness of that, but...
10:13:19 <thebug> but but... my parens!!!
10:14:46 <pesco> Little Timmy has lost his parens!
10:15:07 <irsirius> Cale: ($) works fine. thanks!
10:15:13 <Cale> np
10:31:38 <CrewdenX> is the choice of using $ or () just a matter of style?
10:32:12 <Cale> yeah
10:32:15 <CrewdenX> ok.
10:32:47 <Riastradh> A matter of whether you prefer bad or good style, in that order!
10:32:48 * Riastradh ducks.
10:34:12 <kosmikus> ... and rightly so :)
10:34:43 <CrewdenX> Riastradh: you mean that you prefer the use of parenthesis?
10:36:19 <Riastradh> $ is ugly and implies capitalism!  Parentheses are beautiful and elegant!
10:37:55 <kosmikus> and (:) should be left-associative ;)
10:38:53 <CrewdenX> Riastradh: i see.
10:44:08 <CrewdenX> does haskell have an "implies" operator?  
10:45:26 <arjanb> no but could make one
10:45:37 <arjanb> *you
10:46:03 <CrewdenX> ok.
10:46:10 <CrewdenX> heh, i know i can make one. =)
10:52:54 <Lemmih> Any wxHaskell experts present?
10:53:28 <keverets> How "expert" do you need?
10:57:48 <Lemmih> I need someone to tell me that it's impossible to add tabs to a notebook at runtime.
11:03:54 <Lemmih> And why setting tabs has anything to do with the parent widget. (I'm looking at the "Controls.hs" example)
11:08:54 <Lemmih> D'oh. s/impossible/possible/
11:23:37 <Lemmih> I don't understand why it's cool to create a notebook, use it create a tabs layout and then add that layout to the container instead of creating a notebook, adding tabs and the add the notebook widget to the container.
11:23:54 <Lemmih> *use it do
11:35:09 <Lemmih> No one is expert enough?
11:57:47 <shapr> hey Marvin-- 
11:58:19 <stepcut> shapr: did you get a chance to look into the iohcc mailing list (ie, why I am not able to get signed up)
11:58:36 <shapr> yes, and I found the problem
11:58:47 <shapr> my MTA is not set to just vicious, it's really evil and vicious
11:58:49 <stepcut> oh? you ban all address @linspireinc.com ?
11:59:04 <shapr> no, my MTA won't send from any address that isn't an existing user on my box
11:59:11 <stepcut> heh
11:59:11 <shapr> and iohcc isn't a user
11:59:21 <shapr> so I have to talk nicely to my MTA
11:59:27 <stepcut> :p
11:59:44 <shapr> I have every postfix anti-spam feature turned on 
11:59:47 <shapr> and I still get spam :-(
12:00:11 <stepcut> yeah, my gf gets hundreds per day
12:00:16 <stepcut> :(
12:00:29 <shapr> on the good side, sourceforge cvs finally let me grab the repo with cvsync
12:00:50 <stepcut> cool
12:01:22 <shapr> so now I can resync all the repos
12:01:47 <shapr> I only get three or four spams a day, but that's impressive since it's what gets through a really evil and vicious postfix and tmda
12:02:06 <shapr> the current email system sucks bollocks
12:02:24 <stepcut> I was thinking of switch to tdma, how does that treat you?
12:02:45 <shapr> tmda is great for the most part
12:02:49 <shapr> it pisses off some people though
12:03:36 <shapr> ibid said something like 'it's throwing trash on other people's lawn's'
12:03:45 <shapr> I'd rather switch to the email pull system I've discussed before.
12:04:21 <shapr> this whole push idea is shit
12:04:23 <stepcut> pull system ?
12:04:49 <shapr> super short, RSS
12:05:09 <stepcut> hrm
12:05:17 <shapr> users send ~80char notifications, and the actual email sits on the user's host somewhere
12:05:22 <shapr> so when you want to get it, you go get it yourself
12:05:45 <stepcut> interesting
12:05:46 <shapr> imho, that adds two things, costs moves to the sender, and server accountability.
12:06:05 <stepcut> except most spam is sent by zombie windows machines...
12:06:13 <shapr> economically speaking, spam is profitable because the system itself bears the cost of transport and storage
12:06:21 <shapr> once you get it into an open relay, it's home free
12:06:40 <shapr> if a zombie sends you a notify, it's probably sent a notify to other people too
12:06:54 <shapr> one of us geeks will find that spam box, and shut it down, or add it to a global blacklist
12:07:09 <shapr> or if it's on a dynamic ip, it'll just be a dead notify
12:07:22 <stepcut> bah, you can zombie machines at a blinding rate
12:07:25 <shapr> http://www.scannedinavian.org/~shae/antispamserver.html
12:08:04 <SyntaxNinja> I wonder if a baysean filter has ever learned that messages from shapr saying, "You tried to send me a mail, but i have super-anti-spam protection..." is spam?
12:08:36 <shapr> right, but the most important point is that those who actually respond to spam, that being grannies and newbies I assume, will not get the spams then
12:08:39 <shapr> so you cut the whole market
12:08:51 <stepcut> shapr: its but much easier to pay some one in indian to filter your mail by hand :)
12:09:08 <shapr> internet newbies check their email once a week, if we shut down spam servers daily, spam won't get to its audience
12:09:20 <shapr> right now, any sent spam gets out there
12:09:32 <shapr> because the system bears the cost of transport and storage
12:09:38 <keverets> shapr: have you seen http://cr.yp.to/im2000.html ?
12:09:51 <shapr> keverets: yes, I heard about that after I had the same idea
12:10:08 <shapr> you can see my posts on the mailing list :-)
12:10:39 <keverets> haven't looked at the ml in some time
12:10:40 <shapr> wikispam has the same problem, wikis are a push system
12:11:29 * stepcut goes to lunch
12:13:05 <shapr> whoa, 1million dollars for ingres conversion tools?
12:13:29 * shapr quickly bribes bringert and the rest of the HaskellDB crew to do some speculative hacking.
12:15:10 <pesco> shapr: Have you done the hlibs-sync yet?
12:15:21 <shapr> no, I'm going to split up hlibs into separate repos
12:16:06 <pesco> I see. I'd like to contribute my Comm work. Should I just create it in its own repo?
12:16:12 <shapr> yes, good idea
12:16:54 <shapr> if you create a darcs repo in public_html I'll symlink it to the right place
12:17:04 <pesco> Ah, ok, cool!
12:17:07 <shapr> oh, this is a good chance to play with the new spiffy repo browser
12:17:17 <pesco> new and spiffy?
12:17:37 <shapr> yah, the old one is nice but the new one is very sexy
12:17:45 <shapr> here's the old one: http://www.scannedinavian.org/cgi-bin/darcs
12:17:53 <pesco> Yes, I'd found that one.
12:18:00 <pesco> Where'se the new one!?
12:18:06 * shapr looks
12:18:24 <shapr> I don't have it set up on ScannedInAvian yet, lemme see if I can find the url for the demo
12:20:54 <shapr> ah, here it is: http://abridgegame.org/cgi-bin/darcs.cgi/darcs
12:21:18 <pesco> coo
12:22:07 <shapr> if you click on 'annotate' for send_email.c here, http://abridgegame.org/cgi-bin/darcs.cgi/darcs/win32/?c=annotate
12:22:19 <shapr> you can see the red crossed out lines for deleted lines, green lines for added lines, etc
12:22:32 <shapr> and I think each line takes you to the patch that created it
12:23:10 <shapr> I'd like to have some way to include green/red unit-test output in the browser as well.
12:26:12 <pesco> Do you use HUnit for testing?
12:29:19 <pesco> Ooh, 666 spam mails in filter.
12:38:43 <pesco> shapr: Ok, repo is in ~pesco/public_html/Comm
12:39:35 <pesco> What, why did it transfer all those other files that shouldn't be under version control!?
12:51:49 <barli> how do i interpret this
12:51:52 <barli> (+) :: Num a => a -> a -> a
12:52:04 <barli> got no clue...
12:52:51 <Igloo> If a is a type in the class Num, then + can be used with type a -> a -> a
12:53:06 <pesco> barli: For any type a which is in the Num class, (+) is a function that takes two values of that type and yields a result of also that type.
12:54:32 <pesco> It's a function of a to a function of a to a
12:54:57 <barli> ok. so :: always precedes the class?
12:55:27 <pesco> The context, that is, yes.
12:55:27 <RussellOConnor> foo :: bar means that the expression foo has type bar.
12:55:41 <RussellOConnor> So the class is alway part of the type signature.
12:56:20 <barli> why doesn't my function sqr have any class
12:56:22 <barli> sqr :: Int -> Int
12:56:36 <barli> i mean variable.
12:56:56 <RussellOConnor> how is it defined?
12:57:10 <barli> sqr:: Int -> Int
12:57:10 <barli> sqr x = x*x
12:57:14 <pesco> Why do you think it should (or could) have one?
12:57:53 <slava> http://www.willamette.edu/~fruehr/haskell/seuss.html
12:57:57 <barli> i dont know. but (+) had a variable 'a'
12:58:02 <jDoctor> hi all
12:59:17 <slava> hi jDoctor
12:59:29 <pesco> barli: (+) has a polymorphic type (i.e. one with a variable) because it can work an any type of number. Your sqr function could also work on any Num, but it's OK to explicitly force a more specific type signature.
12:59:50 <jDoctor> they say Haskell is slower than C enough times for me to wonder
12:59:52 <pesco> But you're right. It might as well be sqr :: Num a => a -> a -> a
12:59:56 <jDoctor> what is haskell made with? C?
13:00:00 <pesco> Er a -> a
13:00:04 <RussellOConnor> barli: Did you explicity write sqr :: Int -> Int?
13:00:10 <slava> jDoctor, it depends on the haskell compiler you use, there is nothing inherent in the language to make it slow
13:00:30 <jDoctor> yah. this tutorial said it like that. 
13:00:30 <barli> RussellOConnor: yes, i see that this is the reason.
13:00:33 <Riastradh> And nothing inherent in C to make it fast.
13:00:40 <pesco> Heheh.
13:00:48 <pesco> That's very true, indeed.
13:00:49 <thebug> it's all in the implementation (:
13:00:56 <Riastradh> And how you write your code.
13:00:57 * arjanb wonders why so many people ask about the performance first
13:01:05 <thebug> aye, that too Riastradh, excellent point
13:01:17 <pesco> thebug: Why are your emoticons upside-down? ;-)
13:01:26 <thebug> I decided to be different for once :)
13:01:32 <Riastradh> And how how you write your code interacts with how the implementation deals with that code.
13:01:51 <thebug> and how do you know which is up and which is down? they all look sideways to me (:
13:02:11 <pesco> arjanb: Becauses programs must be fast and responsive, isn't that so?
13:02:28 <thebug> no, that is not a 'must'
13:02:35 <pesco> thebug: (:)
13:02:46 <slava> that looks like an ass
13:02:51 <thebug> I thought we were discussing (+)
13:02:53 <pesco> What.
13:02:58 <pesco> Ah, right.
13:03:06 <Riastradh> pesco, that holds true for user interactions, but that is definitely _not_ the vast majority of programs.
13:03:09 <pesco> That's an ass actually!
13:03:10 <RussellOConnor> Um C is faster because the language is more like the machine it is being run on than Haskell is.
13:03:46 <slava> RussellOConnor, a C compiler is unable to do some kinds of optimization because of this
13:03:49 <jDoctor> RussellOConnor: as in C is just parallel with today's way of computing architecture, and Haskell's goal is more on the developer's side?
13:03:56 <Riastradh> RussellOConnor, there are concrete examples of Haskell code running faster than corresponding C code.
13:04:02 <slava> RussellOConnor, due to pointer aliasing, and side effects
13:04:05 <thebug> RussellOConnor: a C implementation could be written piss-poor and run worse than haskell
13:04:16 <slava> gcc 2.9 :)
13:04:17 <thebug> ...implementations
13:04:40 <RussellOConnor> does ghc do deforrestation?
13:04:40 <Smerdyakov> It's most accurate to say that writing good optimizing Haskell compilers is much harder than writing good optimizing C compilers.
13:04:42 <thebug> I'd more hold that the gcc3 series fits that desciption than other gcc revs I've seen
13:04:52 <jDoctor> thebug: yah, but these haskell tutorials lay it out simple that haskell usually is slower. infact this one tutorial implies it may be unbarable for a developer
13:04:53 <thebug> Smerdyakov: yes! :)
13:04:56 <jDoctor> that reminds me of java
13:04:56 <Smerdyakov> Haskell provides more information for optimization, but lazyness is a real nasty constant factor performance hit.
13:05:34 <slava> Haskell might let you easily express a more efficient algorithm that would be almost impossible to write in C.
13:05:39 <Riastradh> jDoctor, don't worry about what that Haskell tutorial says about that.
13:06:43 <jDoctor> so I see it's all about the lazy deal. wouldnt this make it FASTER? it only evaluates what needs evaluation, whereas C would do all sorts of useless updates to variables
13:07:07 <jDoctor> unless it's because some C programmers end up making C also only evaluate what needs to be evaluated..
13:07:11 <Riastradh> No.  It has a significant overhead: every time you need a value, you have to check to see if it has been evaluated yet.
13:07:13 <slava> well in C, you don't usually write code whose results are not used...
13:08:47 <det> Lazy evaluation is about making normal order evaluation not slow
13:09:51 <jDoctor> ooh, Riastradh. well, why check? this is how I'd do it, if I was a haskell maker: I'd make it let developer set int X = function(). then the function might just be a pointer to an int. in that case, it'd be evaluated
13:10:21 <jDoctor> and if it wasnt, the int X would actually be a function, returning an int, but then pointing X at that int in memory
13:10:34 <thebug> jDoctor: it's not quite that simple
13:11:32 <jDoctor> hm. where could one read about the underworks of haskell
13:11:50 <thebug> from what I can tell, you can 'incrementally' evaluate an expression, so not everything is always known once you've done the computation on a part of an expression <so people who really know haskell want to correct this?>
13:12:27 <Philippa> thebug: I think you're thinking of currying?
13:12:30 <thebug> YES!
13:12:46 <pesco> jDoctor: The code still has to distinguish between a pointer to int and a pointer to function.
13:12:57 <Philippa> short version: no, it doesn't matter. Longer version: it matters if you're playing tricks
13:13:09 <RussellOConnor> jDoctor: At some point you need to check to see if the point is pointing to an int, or a function.
13:13:17 <Philippa> and branches are killers
13:13:22 <jDoctor> pesco: RussellOConnor: so this is what haskell does?
13:13:41 <pesco> Yes.
13:13:48 <jDoctor> if it was a "pointer to int", it would really just be a function that returns the int
13:13:55 <jDoctor> how about that? it THEN certainly is a function
13:14:02 <RussellOConnor> jDoctor: I believe so.  All values are contained in what is known as a THUNK.
13:14:36 <RussellOConnor> A THUNK is either computation, or the already evaluated value (which is really just a trival computation).
13:15:03 <jDoctor> hm. it's a cool idea, though even C programmers can make this happen.
13:15:22 <jDoctor> it isnt part of the C language though.
13:15:25 <thebug> ah, but in C you have to do it in a prespecified order
13:15:26 <pesco> Wah, have fun writing that down.
13:15:33 <RussellOConnor> jDoctor: It is more or less like that.  But having a function return an int, is slightly slower than just being an int.
13:15:51 <jDoctor> yah. that is such a hard decision, RussellOConnor 
13:16:02 <jDoctor> but the idea is so good
13:16:27 <Philippa> thebug: um, I thought it pretty much happens in a prespecified order in Haskell, too - just an "outermost first" order
13:16:47 <thebug> mmm I really meant, it's not quite as explicit, and you can do currying :)
13:17:41 <RussellOConnor> slava: Re Seuss: cute.
13:26:23 <Philippa> jDoctor: C is turing complete, therefore C can do anything at runtime (IO not withstanding) that any other programming language can do...
13:27:45 <RussellOConnor> I think Haskell is a language for quick development, not for quick execution.
13:28:47 <pesco> Well, and there is the FFI. Just import your time-critical code sections as C routines if that's what you need.
13:28:49 <Philippa> yep. Though you can get reasonable speed under if you make an effort to write explicitly strict code
14:02:11 <bourbaki> hi
14:02:16 <Lemmih> Hey
14:23:17 <bourbaki> how can i use + and * for other elements then Int and the other build in types?
14:24:09 <monochrom> 1.0 + 2.5  works
14:24:30 <monochrom> Ah you mean something else. Damn English.
14:24:34 <bourbaki> yes
14:24:44 <bourbaki> like vectors ie
14:24:58 <monochrom> implement the Num type class
14:24:59 <pesco> boubaki: import Prelude hiding ((+), (*)); import Algebra
14:25:01 <bourbaki> irsirius_ hi :)
14:25:30 <bourbaki> pesco oh algebra has already vectors and such?
14:25:35 <pesco> instance Additive_groupoid Foo where (+) = fooplus
14:25:47 <pesco> bourbaki: Well it does, but that's a module of my own creation.
14:25:47 <bourbaki> ah cool
14:26:07 <bourbaki> isnt there such a module in general?
14:26:11 <pesco> ;) I'll gladly share it though.
14:26:25 <bourbaki> i think it was cool to have some classes like field group and such
14:26:35 * shapr boings
14:27:21 <bourbaki> i just started my spline grid :) and it looks a bit clumsy with all the (addvec ) and such
14:28:40 <pesco> In fact I already do. http://cvs.sourceforge.net/viewcvs.py/*checkout*/haskell-libs/libs/Math/Algebra.lhs?rev=1.2
14:29:32 <bourbaki> why dont you add that to the libs on haskell.org?
14:29:51 * pesco shrugs
14:30:10 <shapr> haskell-libs is pretty well known I think
14:30:26 <shapr> I hope so
14:30:31 <shapr> if not I haven't been advertising enough.
14:30:33 <shapr> Cabal will help
14:30:39 <bourbaki> what also would be nice was a good 3d mesh class
14:30:58 <bourbaki> cabal will help me with that ?:) how?
14:31:20 <shapr> because you'll be able to install Haskell packages
14:32:14 <shapr> so, Pseudonym's physics package will be relatively easy to install, and it can say that it requires something else
14:32:23 <bourbaki> pesco you also could provide some basic inpertolations
14:32:38 <pesco> Er, not in that module.
14:32:44 <bourbaki> hm so you can install stuff from the net with it?
14:32:51 <shapr> not yet, but you will be able to
14:33:10 <shapr> Cabal is just to install from a 'package'
14:33:32 <shapr> but adding another layer on top that goes to a central repo to find packages won't be too hard
14:34:41 <shapr> so if you want to install my mailing list search app 'curryspondence', it would go get WASH and then HaskellDB which requires HSQL, and install them all.
14:35:02 <bourbaki> nice name ;)
14:35:13 <bourbaki> thats quite cool
14:35:28 <bourbaki> can you also unintsall?
14:36:09 <shapr> yup
14:36:23 <shapr> not that I've tried it ;-)
14:36:38 <bourbaki> does it run in windoze ghc also?
14:36:39 <shapr> speaking of which, I gotta send my QuickCheckM package to SyntaxNinja
14:37:16 <shapr> it should, it was designed to work on all common platforms.
14:41:39 * shapr reads darcs docs
14:48:18 * shapr gives up on an elegant solution
14:53:06 <shapr> pesco: your Comm repo is up on the darcs browser: http://www.scannedinavian.org/cgi-bin/darcs
14:53:22 <pesco> Woopie!
14:53:53 <shapr> and of course, anyone can grab from it with 'darcs get http://www.scannedinavian.org/~pesco/Comm'
14:54:03 <thebug> <click>
14:56:21 <pesco> Notice however, that the repository contains only the unprocessed xweb source, i.e. you need an XSLT/literate xml/docbook environment to produce the Haskell code. I'm not sure whether I should check in the produced .hs files along with the original source.
14:58:29 <pesco> I'll probably check in the stylesheets though, so an XSLT processor will suffice to produce the Haskell code.
15:06:01 <shapr> would be nice to refactor lambdabot plugins so that they can include their .o requirements in a separate file
15:06:23 <bourbaki> can i get the n-th and n-th + 1 element with the list comprehensions?
15:06:25 <shapr> pesco: seen dons' hs-plugins?
15:06:42 <shapr> bourbaki: how so?
15:06:56 <pesco> No. Is that based on the old runtime-loader hack?
15:07:10 <shapr> yup, but it's a much better extension
15:07:14 <shapr> http://www.cse.unsw.edu.au/~dons/hs-plugins/
15:07:39 <shapr> in the example app, if you change the source and run the plugin again, it automatically rebuilds and reloads the plugin
15:07:57 <shapr> as Lor put it, this is all as safe as Haskell's Dynamics
15:08:08 <bourbaki> shapr i want to build a spline homotopy between two splines and they are listed so i need always the two splines that are next to each other in the list
15:08:13 <pesco> acesome
15:08:15 <pesco> awesome
15:10:08 <irsirius_> bourbaki: hiho
15:10:40 <bourbaki> irsirius_ hi :)
15:10:57 <bourbaki> irsirius_ what capter are you reading now?
15:11:01 <bourbaki> chapter
15:11:11 <irsirius_> end of chapter 6
15:12:47 <bourbaki> shapr any idea for my prob?
15:13:38 <shapr> bourbaki: what about 'pairs <- zip list (last list : tail list)' ?
15:14:04 <shapr> only slightly cheesy
15:14:30 <shapr> that assumes head and last are next to each other
15:14:53 <bourbaki> hm
15:15:00 <shapr> is that what you want?
15:15:14 <bourbaki> i want the frist and the second element in one pair
15:15:23 <bourbaki> and the second and the third
15:15:23 <bourbaki> and so on
15:15:31 <pesco> zip xs (tail xs)
15:15:33 <shapr> right, but, what about the last element?
15:15:45 <shapr> should it come with the first element? or should it be dropped?
15:16:05 <shapr> @define a [1,2,3]
15:16:06 <lambdabot> a defined
15:16:08 <bourbaki> oh nope not needed
15:16:21 <shapr> ok, pesco's code is it then
15:17:33 <bourbaki> ah :) not bad not bad at all ;) thanks
15:21:15 <pesco> That's a nifty expression, isn't it?
15:21:55 <bourbaki> yes once you see it its so obvious :)
15:22:03 <pesco> One of those typical Haskell expressions that doesn't strike you until you find it, but then it's all "ooh" and "aah".
15:22:41 <bourbaki> yep :)
15:22:48 <bourbaki> thats what i like about haskell so much
15:23:21 <pesco> Happens all the time. "Wait, what is it actually, that I want? *think* *think* *hack* *hack*. Whah, THAT's what it looks like?! Oh joy!"
15:23:41 <bourbaki> :)
15:24:15 <arjanb> these nifty one liners should be collected on the wiki
15:24:26 <pesco> Yes, probably.
15:29:30 <bourbaki> http://rafb.net/paste/results/GZbgn531.html
15:29:55 <bourbaki> i love the reusability of the code in haskell :)
15:31:45 <pesco> bourbaki: Are you using my Algebra module?
15:31:59 <bourbaki> nope not yet
15:32:08 <pesco> Oh ok, just curious.
15:32:22 <bourbaki> sec
15:32:52 <bourbaki> http://rafb.net/paste/results/snaaCS81.html
15:33:01 <bourbaki> thats what the whole thing looks like
15:33:14 <bourbaki> what i really love is that uncurry line :)
15:33:57 <pesco> heh
15:34:37 <bourbaki> the coolest thing is that with the spline grid i can use
15:35:25 <bourbaki> map (uncurry (splineGrid)) [(x,y)] so draw a 2d line in the spline landscape :)
15:36:01 <bourbaki> and if i plug the result in a buildSpline i can draw a spline on the landscape
15:43:22 <pesco> Haskell I/O interface: PDF available at http://www.scannedinavian.org/~pesco/Comm.pdf ; sources at http://www.scannedinavian.org/~pesco/Comm/ !
15:51:43 <shapr> hiya SyntaxLaptop 
15:53:28 <pesco> hm, darcs is cool.
15:53:43 <shapr> yes, darcs is nifty
15:53:45 <bourbaki> hi irsirius
15:54:01 <pesco> _Especially_ the fact that there is no distinction between workdir and repo.
15:55:48 <pesco> shapr: Have you had a glance over Comm.pdf? If so, do you think it's coming out well?
16:04:07 <shapr> yes, I think it is.
16:04:39 <pesco> Ok, that's good.
16:05:02 <shapr> I think Char is not a good way to communicate, Word8 is much better.
16:05:06 <shapr> I'd like to read the Design section :-)
16:05:11 <pesco> ;)
16:05:30 <pesco> I'm building Char pipes using the UTF8 codec right now.
16:06:16 <pesco> Those can then form the basis for Read/Show or XML pipes.
16:06:31 <shapr> I think the Close typeclass is nifty. You're going down the road that epigram is taking with that.
16:06:50 <pesco> What are you refering to wrt. Epigram?
16:07:05 <shapr> Epigram encodes a lot more information in the type
16:07:12 <pesco> Ah, yes.
16:07:35 <pesco> I think there's some rationale for class Close in the "Design Notes" appendix.
16:07:37 <shapr> it's hard to specify operational semantics in the type
16:07:43 <shapr> usually
16:08:23 <shapr> but it would be nice
16:10:56 <shapr> I've been trying to think of some way to make protocol combinators, something like smtp >>> tcp >>> ip
16:12:43 <pesco> At least for TCP/IP there's the problem that TCP is not really independent of IP.
16:13:09 <shapr> this reminds me a bit of Inferno's URI stuff
16:13:12 <pesco> Although, is it?
16:13:28 <shapr> well, I could use SCTP instead of TCP
16:13:40 <shapr> or ICMP maybe
16:13:42 <pesco> Hm, what's SCTP?
16:14:15 <shapr> it's mostly designed to do telephone over ip
16:14:46 <CrewdenX> pesco: the current dr. dobbs has an article on it, if you're interested in reading about it.
16:14:49 <shapr> it has a bunch of nifty features that are designed to make it easy to stick IP in the place of the existing phone systems.
16:23:05 <bourbaki> cool the function map does a real mapping form one space into another now :)
16:23:40 <bourbaki> map land 2dline    maps a line from the euclidian space to the landscape :)
16:34:40 <pesco> Ok, I'm off to bed. Good night all.
16:36:40 <bourbaki> hi Pseudonym
16:36:45 <Pseudonym> G'day.
16:37:07 <bourbaki> Pseudonym http://rafb.net/paste/results/Sj9SbU60.html my spline grid :)
16:37:39 <Pseudonym> A, cool!
16:37:43 <Pseudonym> Very compact.
16:38:04 <Pseudonym> Do you have the line of sight thing solved yet?
16:38:34 <bourbaki> not yet i do some 3d render tests if the gird code is correct
16:38:56 <Pseudonym> Definitely.
16:39:01 <bourbaki> the cool thing is you can map things between euclidean space and that grid :)
16:39:18 <bourbaki> map land 2dline ie
16:39:18 <Pseudonym> Dan Wexler called this "visual debugging".
16:39:24 <bourbaki> just did that for the test
16:39:39 <bourbaki> i do that alot thats how i learned math :)
16:40:02 <bourbaki> also you can build a homotopy of these surfaces now also
16:40:15 <bourbaki> i wonder if i could do some origami with it
16:42:03 <RussellOConnor> bourbaki: Odd definition of point. :-)
16:42:09 <bourbaki> heh cool i have a twisted grid :) so my diagonal looks quite funny
16:42:13 <bourbaki> yeah i know
16:42:22 <bourbaki> it should be element
16:42:41 <bourbaki> maybe i will clean the code and post it on my site
16:42:53 <bourbaki> i want to write a small game with that landscape like a tabletop game
16:43:38 <bourbaki> you can move like in 2d space then its transformed into the landscape where i use something like an integral of that spline in the landscape to measure height and make you slower at hills and the like
16:44:02 <RussellOConnor> cute: "zip sl (tail sl)"
16:44:21 <pesco> Screw sleep, I think I've found your combinators, shapr!
16:44:37 <bourbaki> http://rafb.net/paste/results/rbTmPQ14.html
16:44:45 <bourbaki> thats the test with ogl
16:44:53 <Pseudonym> RussellOConnor: I complained about the definition of Point, too. :-)
16:45:11 <bourbaki> :) i would have done so also if it wouldnt be my coe
16:45:25 <Pseudonym> The thing is, I can't think of a better name for it either.
16:45:33 <bourbaki> code, back in the company i worked at they had some strange definitions of these things also and it made me go mad
16:45:46 <RussellOConnor> Pseudonym:  It should be called TangentBundle?
16:45:51 <Pseudonym> Where did you work?
16:45:59 <bourbaki> www.codecult.com
16:46:03 <bourbaki> as an engine programmer
16:46:10 <Pseudonym> RussellOConnor: I think of a point + tangent vector as a point in phase space.
16:46:22 <Pseudonym> So in that sense, "Point" ain't so bad.
16:46:33 <Pseudonym> Accurate but misleading, if you like.
16:46:35 <bourbaki> some shote of the demo we wrote for nvidia http://www.nvidia.com/object/games_codecult.html
16:46:46 <Pseudonym> bourbaki: Cool.
16:47:09 <bourbaki> yeah i also thought of it of some point in a 6d space rather
16:47:14 <Pseudonym> Very nice.
16:47:37 <Pseudonym> I used to work for these guys: http://www.dotcsw.com/
16:48:03 <Pseudonym> They do offline software rendering, not interactive real-time.
16:48:03 <bourbaki> i should rewrite my code so that these points get interpolated so that i can get the tangent and the point in 3d space at any time
16:48:07 <RussellOConnor> *l* If it were up to me I would rename Point to TangetBundle, Vector to Point, and Tanget to Vector.
16:48:38 <RussellOConnor> s/Tanget/Tangent/g
16:48:48 <bourbaki> that is usefull if you want to build homotopies of surfaces now i have to rebuild the normal with a triangle in 3d space on the surface
16:49:31 <RussellOConnor> ... and get rid of PointList.
16:49:52 <RussellOConnor> Everyone knows that [Foo] is a list of foos.
16:50:09 <stepcut> heh
16:50:47 <bourbaki> :)
16:53:26 <RussellOConnor> bourbaki: Yikes.  I hope you don't mind me making comments about your code.  I don't mean any offense.  I just like thinking about stuff.
16:53:52 <bourbaki> sure
16:54:02 <bourbaki> any comment is welcome
16:54:22 <Pseudonym> Well in that case, you smell funny.
16:54:28 <bourbaki> as i said i will clean the code once it works :) then i also could relese the spline word thing also
16:54:40 <bourbaki> i smell funny?:)
16:54:57 <Pseudonym> You said any comment was welcome.
16:55:18 <bourbaki> well i like to know how other ppl would name the stuff
16:55:24 <RussellOConnor> After taking a Differential Geometry class, I've become quite opinionated on how to write Vector/Point data types.
16:55:30 <Pseudonym> I would name it Frank.
16:55:35 <Pseudonym> Frank is a nice name.
16:55:40 <bourbaki> :)
16:56:11 <bourbaki> RussellOConnor maybe you could help me to do differentials on that thing :)
16:56:47 <RussellOConnor> bourbaki: Err, computing limits is hard. ... kinda impossible actually.
16:57:03 <RussellOConnor> Especially with floating point.
16:57:50 <RussellOConnor> limit :: (Floating a) => Stream a -> a.  ;-)
16:57:54 <bourbaki> hm
16:58:22 <RussellOConnor> limit :: (Floating a) => Stream a -> Maybe a.  ;-)
17:00:24 <bourbaki> hm that looks a bit strange :) dang
17:01:58 <bourbaki> the next thing i would like to do is project the tangent space of the surcface into a 2d space
17:03:54 <RussellOConnor> bourbaki: ??? The tangent space of a 2d surface is already 2d.
17:04:22 <bourbaki> i have a 3d surface and want to project the normal not the tangents into a texture
17:04:38 <Pseudonym> bourbaki: An easy way to visualise that is using colour.
17:04:51 <bourbaki> then i can render that texture with a nice lighting on a quad and i will gain speed
17:04:54 <Pseudonym> Interpret normalised tangents as (r,g,b) triples.
17:04:56 <RussellOConnor> scalePointlist is a strange function.
17:05:07 <bourbaki> Pseudonym thats the idea :)
17:05:16 <Pseudonym> Ah, good. :-)
17:05:21 <bourbaki> thats the whole point of per pixel lighting
17:05:27 <bourbaki> RussellOConnor why ?:)
17:05:51 <bourbaki> i used that to scale the letters for the spline words
17:06:07 <bourbaki> http://codemages.sf.net/homotopy1.hs
17:06:29 <Pseudonym> Actually, bourbaki, I guess you're pretty familiar with OpenGL, right?
17:06:32 <bourbaki> thats the word circle homotopy demo
17:06:45 <RussellOConnor> because it both scales the vector part, and the tangent part.
17:06:55 <bourbaki> well yes and no i always had the luck to be able to use our own interfaces at the company
17:07:00 <Pseudonym> Ah.
17:07:12 <bourbaki> RussellOConnor oh :) thanks i will have a look into that
17:07:18 * RussellOConnor ponders bourbaki's use.
17:07:30 <Pseudonym> Still, you might know the answers to some basic questions. :-)
17:07:30 <bourbaki> my use ;)?
17:07:38 <bourbaki> yes i guess so
17:07:42 <RussellOConnor> use of scalePointList
17:07:52 <bourbaki> ah well have a look at that url
17:07:56 <RussellOConnor> I must admit it seems pretty reasonable.
17:07:59 <Pseudonym> First off: What's a "plane"?  As in: "main plane", "overlay plane", "secondary plane".
17:08:07 <bourbaki> a letter is scaled in the unit interval
17:08:25 <bourbaki> and i need to scale the word back to the unit interval once i have added letters
17:08:50 <bourbaki> Pseudonym a plain in ogl?
17:08:58 <Pseudonym> Right.
17:09:01 <bourbaki> in what context?
17:09:05 <bourbaki> for clipping?
17:09:12 <Pseudonym> No.
17:09:16 <Pseudonym> I know what a geometric plane.
17:09:17 <Pseudonym> is
17:09:35 <Pseudonym> However, I've heard OpenGL people and documents talk about "mainplane", "overlay plane" and "secondary plane".
17:09:49 <bourbaki> never heared that :)
17:09:54 <Pseudonym> Ah, OK. :-)
17:10:01 <Pseudonym> I wonder if there's an OpenGL channel.
17:10:04 <Pseudonym> Probably is.
17:10:12 <bourbaki> but as i said i am not too familiar with the interal stuff of ogl and dx
17:10:16 <Pseudonym> Sure.
17:10:19 <Pseudonym> Thanks anyway.
17:10:19 <bourbaki> there is afaik
17:11:12 <TheHunter> good night, #haskell
17:11:19 <bourbaki> bye
17:11:26 <Pseudonym> Night.
17:11:39 <bourbaki> hm i think i could wite a small shader lang for haskell
17:12:02 <Pseudonym> Sure could.  For software rendering, at least.
17:12:08 <bourbaki> yes
17:12:19 <bourbaki> ie for the landscape lighting
17:12:23 * Pseudonym nods
17:12:33 <bourbaki> i could use a monad for the texture filters
17:12:36 <Pseudonym> Or could could do what I did and write a shader compiler in Haskell. :-)
17:12:54 <Pseudonym> (It was for RenderMan, not Cg, but still.)
17:14:09 <bourbaki> cool
17:15:16 <bourbaki> maybe it was also fun to have something like haskell -> povray thingy
17:15:39 <Pseudonym> I have about a 10% completed RenderMan binding.
17:15:46 <Pseudonym> Which is pretty close.
17:16:13 <bourbaki> Pseudonym would you have a quick look at that test (the output that is)
17:17:36 <bourbaki> http://rafb.net/paste/results/nLEWMM16.html that output should be a diagonal
17:18:04 <Pseudonym> What's the output?
17:18:19 <bourbaki> ah dang you dont have the ogl binding :(
17:18:20 <Pseudonym> Do you have a screen dump?
17:18:23 <Pseudonym> Correct.
17:18:42 <bourbaki> could make a shot though i cant dcc you
17:36:03 <bourbaki> it seems that i interpolate in the start of the spline slower then in the end
17:39:25 * RussellOConnor wonders why bourbaki keeps checking Floats if they are equal to 1.
17:40:20 <bourbaki> RussellOConnor what line are you refering to?
17:41:07 <RussellOConnor> 29, 32, 65, 68
17:41:34 <boubaki> sry got disconnected
17:41:41 <RussellOConnor> 29, 32, 65, 68
17:42:49 <boubaki> you mean why i dont just return the point?
17:44:20 <RussellOConnor> to be honest, I'm not sure what the functions are doing.  I just get scared when floating point number are compared using equality.
17:44:52 <boubaki> :) yeah i have experienced why i guess ;)
17:49:41 <bourbaki> i wonder if that problem i got now is related to the float thing
18:18:44 <boubaki> RussellOConnor do you have hgl installed?
18:19:06 <RussellOConnor> nope
18:19:13 <RussellOConnor> is it easy to install under windows?
18:19:52 <boubaki> do you have ghc?
18:19:58 <RussellOConnor> yes
18:20:08 <boubaki> then it already is ;)
18:20:24 <boubaki> you just need to download the opengl dlls
18:20:31 <RussellOConnor> really
18:20:31 <boubaki> i can search the link for you
18:20:42 <RussellOConnor> doesn't windows come with opengl dlls?
18:20:46 <boubaki> nope
18:21:37 <RussellOConnor> I have opengl32.dll in my windows\system32 directory.
18:21:43 <boubaki> ah ok
18:21:56 <boubaki> well then sec
18:22:59 <boubaki> in that demo you will see a moveing line
18:23:10 <boubaki> that line moves along the y axis of the landscape
18:23:25 <boubaki> the line doesnt move with the same velocity though all the time
18:23:48 <boubaki> that is the interpolation is slower in the beginning and faster in the end
18:23:52 <boubaki> http://rafb.net/paste/results/xdqit561.html
18:24:18 <boubaki> im not sure where that comes form
18:24:40 <boubaki> from, you see the landscape from the x y plane and othrogonally projected
18:25:24 <RussellOConnor> Hmm, need to find glut32.dll
18:25:36 <boubaki> its on www.opengl.org
18:25:55 <boubaki> id search the url for you but my bro is downloading something so my conn is super slow atm :(
18:28:56 <RussellOConnor> I see a white line moving up the screen.
18:29:01 <boubaki> yes
18:29:07 <boubaki> ok i explain it to you
18:29:21 <boubaki> there are two splines on the left and the right side of the screen
18:29:22 <RussellOConnor> This is totally awsome
18:29:56 <boubaki> i interpolate these splines with the y coord and then get 2 points one on each spline
18:30:19 <boubaki> then i interpolate between these two points with a new spline
18:30:27 <boubaki> really?
18:30:51 <RussellOConnor> haskell is generating OpenGL stuff!
18:31:01 <boubaki> yeah i also have that other demi
18:31:11 <boubaki> http://codemages.sf.net/homotopy1.hs
18:31:19 <boubaki> there is more to be seen
18:31:42 <boubaki> and i have a third demo where i have a homoptopy on shperes
18:31:59 <boubaki> anyway
18:32:14 <boubaki> the problem is that the line should move with the same acceleration all the time
18:32:19 <boubaki> but it speeds up
18:32:38 <boubaki> and it has to be some error in the interpolation of the spline though i cant really grasp it
18:33:33 <boubaki> what i like about that program is the function at line 56 and the line 127
18:35:27 <boubaki> i also have started an l-system which i want to render 3d flowers :)
18:35:44 <RussellOConnor> Well the special cases in tt and t seem scare, but are not likely the problem.
18:36:04 <RussellOConnor> s/scare/scary
18:36:12 <boubaki> yeah i thought that they might be related also
18:36:30 <RussellOConnor> where do you specify the parameters of the spline?
18:36:38 <boubaki> the problem also occurs when i dont use the animation thing
18:36:49 <boubaki> line 127
18:37:04 <boubaki> map (uncurry land) to_some_2dline
18:37:33 <RussellOConnor> oh your grid is made up from p1 .. p6.
18:37:43 <RussellOConnor> All the control poins have 0 velocity.
18:37:49 <RussellOConnor> that's why they stop.
18:37:51 <boubaki> yep
18:38:11 <boubaki> but the line is moving slower in the beginning
18:38:26 <boubaki> and then in the middle gets slower again
18:38:34 <boubaki> plz use another 2d line
18:38:58 <boubaki> a diagonal [(n,n)] 0 <= n <= 1
18:39:19 <RussellOConnor>  sure, it start a 0 speed,  speeds up, then at the center needs to slow down to stop.  That's what you've asked it to do.
18:39:25 <boubaki> then you will see that the diagonal isnt a strait line but some curve
18:39:47 <RussellOConnor> where should I add that?
18:39:55 <boubaki> in line 127
18:40:26 <boubaki> [(1.0,1.0), (0.9,0.9), (0.8,0.8) ... (0.0,0.0)]
18:41:43 <RussellOConnor> do you want me to replace the exisitng list with that list?
18:42:00 <boubaki> yep
18:42:31 <boubaki> the list is just a diagonal line on that surface
18:42:54 <boubaki> where 0,0 is the lower left and 1,1 the upper right
18:45:01 <RussellOConnor> oh my
18:45:07 <RussellOConnor> that's not diagonal at all.
18:45:16 <boubaki> right
18:45:45 <boubaki> i think it was better to reduce the problem to one cell
18:45:46 <RussellOConnor> buildSplineGrid is probably screwed up.
18:45:51 <RussellOConnor> You should just rewrite it.
18:45:59 <boubaki> sec
18:46:21 <boubaki> grid = [[p1,p3], [p2,p4]] plz update the code like that
18:47:07 <RussellOConnor> It's at least a pretty curve.
18:47:12 <boubaki> i think its because the interpolation is slower in the beginning
18:48:15 <RussellOConnor> buildHomotopy calls sin !
18:48:24 <boubaki> does it?
18:48:44 <boubaki> ah heh thanks :)
18:50:31 <boubaki> that looks better though it seems as if i would need another interpolation for the landscape
18:52:35 <boubaki> anyway thank you :)
18:54:26 <boubaki> i think what i need is a spline where the second derivation is just one value right?
18:55:36 <RussellOConnor> Cubic spline generally have constant 3rd derivatives.  ... hence cubic.
18:56:53 <RussellOConnor> (map (\x -> ((fromInteger x)*0.1,(fromInteger x)*0.1)) [0..10])
18:57:02 <boubaki> i would like the line to move with constant speed though
18:57:42 <RussellOConnor> Then you need end points to have the correct velocities.
18:57:54 <RussellOConnor> or do a linear interpolation.
18:58:16 <boubaki> yes but then the surface was linear also :)
18:59:02 <RussellOConnor> or you need to reparameterize your curve to have constant speed.  Reparameterization is pretty hard.
18:59:16 <boubaki> yes
18:59:19 <RussellOConnor> anyhow, I'm off to bed.
18:59:25 <boubaki> thanks and good night
18:59:34 <Pseudonym> Night.
19:07:11 <boubaki> Pseudonym how do i get the tanget at a certain point in the spline?
19:07:54 <Pseudonym> In which direction?
19:08:16 <Pseudonym> If it's a spline curve parameterised by u, S(u), then it's just S'(u).
19:08:51 <boubaki> ah right
19:08:53 <Pseudonym> If it's a surface parameterised by u and v, then the tangents in each direction are dS/du and dS/dv, where they are both partial derivatives.
19:09:14 <boubaki> and the normal?
19:09:27 <Pseudonym> Cross product between the two tangents.
19:09:45 <Pseudonym> However, if you only need the normal, then you can usually do it another way.
19:10:09 <Pseudonym> If you represent the surface implicitly, as a set of points x such that S(x) = 0,
19:10:24 <Pseudonym> then the normal at x is grad S evaluated at x.
19:10:56 <boubaki> grad?
19:11:04 <Pseudonym> Gradient.
19:11:25 <Pseudonym> grad S = (dS/dx, dS/dy, dS/dz)
19:11:30 <Pseudonym> Once again, all partial derivatives.
19:11:41 <boubaki> ah ok
19:11:53 <Pseudonym> If s :: Vector -> Scalar
19:11:59 <Pseudonym> Then grad s :: Vector -> Vector
19:12:12 <Pseudonym> You can think of it as the "derivative" of a function of type Vector -> Scalar.
19:13:00 <boubaki> cause id like to have the normals of my surface at any point
19:13:34 <boubaki> hi irsirius_
19:15:20 <boubaki> Pseudonym so what i need is a derivation of spline then first right? that the the partial derivation
19:16:02 <boubaki> wow if i am able to do that i can do really good displacement maps :)
19:17:53 <Pseudonym> Right.
19:19:41 <boubaki> but i think that its not easily solvable right ? dS/du and dS/dv i mean
19:19:50 <Pseudonym> Sure they are.
19:20:03 <Pseudonym> What's the representation of your splines again?
19:20:05 <Pseudonym> Hermite?
19:20:29 <boubaki> yep
19:20:41 <Pseudonym> Let me think...
19:20:59 <Pseudonym> Basically, you write it out as a function of u and v.
19:21:09 <Pseudonym> With the points and tangents as constants.
19:21:15 <Pseudonym> And you just compute the derivative.
19:21:21 <Pseudonym> You can do it symbolically.
19:21:59 <boubaki> you mean like S(u,v) - S(u+h,v) / v?
19:22:05 <boubaki> er
19:22:11 <boubaki> S(u,v) - S(u+h,v) / h
19:22:30 <Pseudonym> Yes, though that's not necessarily the easiest way to do it.
19:22:40 <boubaki> and respectively for the other dimension also
19:22:57 <Pseudonym> Consider C(u) = a0 + a1*u + a2*u^2 + A3*u^3
19:23:10 <Pseudonym> Then C'(u) = a1 + 2*a2*u + 3*a3*u^2
19:23:17 <Pseudonym> You know, high school maths.
19:23:39 <boubaki> dS/du = S(u,v) - S(u+h,v) / h ?
19:23:49 <Pseudonym> Well, the limit as h -> 0.
19:25:27 <Pseudonym> And I think you might find that dS/du and dS/dv depends only on the input tangent vectors.
19:25:31 <Pseudonym> But don't quote me on that.
19:25:37 * Pseudonym hasn't done the maths
19:25:54 <boubaki> yeah i guess so also
19:26:05 <Pseudonym> It will also be a quadratic.
19:26:10 <Pseudonym> Since S is cubic.
19:26:20 <Pseudonym> Uhm...
19:26:25 <Pseudonym> Sorry, S is bicubic.
19:26:38 <Pseudonym> So dS/su will be the tensor product of a cubic and a quadratic.
19:26:40 <boubaki> but its starting to get fun :)
19:27:13 <boubaki> cant wait until i can see a lit surface :)
19:28:14 <boubaki> i also could write a raytracer :)
20:20:58 <boubaki> has anyone of you done something with textures in hgl yet?
