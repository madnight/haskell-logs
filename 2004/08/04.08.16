00:02:26 <dons> oi oi ozone
00:16:09 <ozone> oi oi oi!
00:17:09 <dons> take 3 $ repeat "oi"
00:21:41 <pesco> moo!
01:03:34 <musasabi> What would be the best way to do Data.List.lines, except allowing line continuations with '\' ?
01:04:11 <Pseudonym> One obvious way is to post-process the output of lines.
01:05:24 <musasabi> that seems quite expensive (take last element of list etc)
01:07:07 <musasabi> but the other trivial solution uses reverse...
01:07:19 <musasabi> or right recursion.
01:07:51 <Pseudonym> Actually, yes.  Reversing the string, then running "lines", then post-processing, then reverse . map reverse
01:08:04 <Pseudonym> Involved, but it saves you having to write code.
01:08:53 * musasabi thinks about reversing the 500kb string. Thinks again.
01:09:20 * Pseudonym wonders why you have a 500kb string
01:09:29 <Pseudonym> Oh, actually.
01:09:34 <Pseudonym> Easy solution.
01:09:51 <Pseudonym> preprocess [] = []
01:10:03 <Pseudonym> preprocess ('\\':'\\n':cs) = preprocess cs
01:10:08 <Pseudonym> preprocess (c:cs) = c : preprocess cs
01:10:14 <Pseudonym> Then run the output of that through lines.
01:10:50 <musasabi> Pseudonym: can I put many such filters in a pipeline efficiently? (would make lots of things simpler)
01:10:56 <musasabi> but that seems fine
01:11:01 <Pseudonym> Sure.
01:11:07 <Pseudonym> Lazy evaluation takes care of it.
01:27:41 * shapr yawns
01:36:02 <shapr> hi jesse98
01:36:10 <shapr> is jesse99 your twin?
01:36:28 <Pseudonym> And is jesse96 your next-door neighbour?
01:37:05 <pesco> Moin shapr!
01:37:24 <shapr> y0 pesco 
01:37:29 <shapr> how's code?
01:37:44 <pesco> Ja, I'm working on it. :)
01:38:00 <shapr> if you're an emacs user this is a rather interesting read: http://pinard.progiciels-bpi.ca/showfile.html?name=opinions/editors.all
01:38:00 <jesse98> getting younder every day!
01:38:04 <jesse98> younger even
01:38:22 <shapr> François Pinard wrote that, and I agree with him.
01:40:00 * shapr considers switching from gnus to mutt
01:40:17 <Pseudonym> And what kind of a read is it if you're _not_ an emacs user?
01:41:11 <shapr> The summary of the death of the FSF.
01:41:12 <juhp> shapr: no! :)
01:42:49 <juhp> (not so much to "from gnus", but to "to mutt" ;)
01:43:34 <Maddas> yay
01:43:42 <arjanb> mutt?
01:46:21 <Pseudonym> Interesting.
01:48:43 <shapr> François Pinard wrote PyMacs, the python interface to Emacs. He was the maintainer of 'tar' for some time, and is still the maintainer of some other FSF packages. He's been using emacs for twenty years or so. It's quite shocking for him to say that he's switching to vim.
01:48:59 <juhp> nod
01:49:06 <shapr> but I totally agree with his reasoning.
01:51:21 <shapr> In short, elisp sucks and the internals of emacs are so scrambled, minos would be proud.
01:51:55 <Pseudonym> I think I need to get going.  Nytol!
01:53:34 <juhp> shapr: indeed - we need haskell emacs ;)
01:53:52 <lelit> shapr, that's ... subversive :)
01:54:09 <shapr> juhp: I totally agree
01:54:35 <shapr> I've been using emacs for .. about five years? and I gave up on wanting to learn more elisp years back.
01:54:50 <shapr> I have been complaining about the inconsistent names inside emacs for years though.
01:54:57 <Maddas> Hello, shapr!
01:55:27 <shapr> greetings Maddas, wassup?
01:55:30 <lelit> shapr: been there, done that. Anyway, I'm **still** in love, with Emacs :)
01:55:37 <LrdMtrod> Okay I got some problems... no kidding, so help a newb out!
01:55:46 <Maddas> shapr: Just passed my driving test :=)
01:55:48 <shapr> lelit: yes, but it could be so much better!
01:55:57 <shapr> Maddas: cool, do you own something to drive?
01:56:06 <ikegami--> I heard there is a Haskell Editor project
01:56:07 <Maddas> A bicycle and a pair of skates
01:56:11 <shapr> heh
01:56:19 <shapr> I have a unicycle!
01:56:19 <Maddas> Fair enough :-)
01:56:29 <Maddas> I know, I still remember your pictures of driving it :-)
01:57:07 <Maddas> (I plan on learning to ride an unicycle too someday, but I think it's one of the things I'll never master)
01:57:14 <Maddas> (A bit like learning Monads *cough*)
01:57:22 <shapr> it's easier than you might think.
01:57:28 <shapr> LrdMtrod: you gotta ask some questions.
01:57:32 <Maddas> Which, the unicycle?
01:57:33 <heatsink> if you hav enough money
01:57:35 <shapr> otherwise we don't know how to help
01:57:38 <heatsink> to pay someone to do it
01:57:39 <LrdMtrod> I'm typing, I'm typing...
01:57:49 <LrdMtrod> I got this variable representing a line through some tiles, and I want to find out what tile it begins in by dividing it by 8 or rather shift it instead...
01:58:24 <shapr> Maddas: yes, unicycling is easier than you might think, took me about ten hours of training.
01:58:32 <Maddas> Heh. Ten hours? 
01:58:48 <LrdMtrod> and then when shifted, how do I change the variable?
01:58:51 <Maddas> But then again, you also say that Monads are easier than one might think, so who am I to trust you :-P
01:59:07 <heatsink> Is there a more concise syntax for (do {x <- f; return g x;})?
02:00:16 <shapr> :-P
02:00:57 <heatsink> LrdMtrod: What do you mean by change the variable?
02:02:25 <LrdMtrod> I mean writing to my global variable
02:02:40 <LrdMtrod> I can't figure out how to do it...
02:02:43 <heatsink> LrdMtrod: you can't write to variables in haskell
02:02:56 <heatsink> LrdMtrod: you set the value of a variable exactly once.
02:02:58 <LrdMtrod> I see... then how am I suppose to change stuff?
02:03:20 <heatsink> LrdMtrod: in some cases you use monadic data types
02:03:25 <LrdMtrod> ohooo
02:03:33 <heatsink> LrdMtrod: in other cases you redesign your algorithm so nothing changes
02:03:52 <LrdMtrod> this is not at all like C
02:03:57 <heatsink> which works more often than you would think
02:04:06 <heatsink> LrdMtrod: you're just figuring that out now? :)
02:04:40 <LrdMtrod> no, but I realise it's even a wider gap of usage
02:07:49 <heatsink> LrdMtrod: the restriction on changing values allows referential transparency, which is necessary to get most of the benefits of laziness
02:08:04 <heatsink> LrdMtrod: ...if you wanted to know about that...
02:08:57 <LrdMtrod> no harm done knowing it...
02:09:10 <Maddas> Actually, mind a question about Monads?
02:09:22 <heatsink> shoot
02:09:38 <Maddas> One way suggested to think about them is as 'containers'
02:09:47 <heatsink> yes
02:09:53 <Maddas> And I understand roughly how the List monad works, I think
02:10:09 <Maddas> Would the IO Monad just be a container containing a) the world and b) the result of the last operation?
02:10:36 <heatsink> it would contain a
02:10:42 <heatsink> You have to give it b explicitly
02:11:00 <Maddas> Right, of course
02:11:08 <Maddas> But is that an appropriate way to think of it?
02:11:13 <heatsink> yes
02:11:20 <heatsink> At least, that's how I think of it
02:11:24 <Maddas> Cool ,thanks :-)
02:12:40 <heatsink> LrdMtrod: The way you get the effect of modifiable variables in haskell is to pass all the variables forward through the program as function arguments.
02:13:19 <LrdMtrod> mhmm
02:13:30 <heatsink> This is actually what do {} does, too
02:13:51 <heatsink> Any other questions, or am I going to bed?
02:13:59 <LrdMtrod> be free to slepp
02:14:00 <LrdMtrod> *sleep
02:14:21 <heatsink> okay, i'll schlep myself off to sleep.
02:17:23 * musasabi thinks of the io-monad as a list of actions that is just evaluated.
02:18:10 <Maddas> how do you accomodate the state of the world in there?
02:18:20 <Maddas> Oh, hm, I see
02:26:42 <Maddas> OpenCroquet looks very exciting
02:39:50 <shapr> hiya hram 
03:15:07 * shapr bounces
03:17:52 <shapr> hiya dnm 
03:18:43 <dnm> Hey.
03:18:44 <shapr> is there some way to use scp to do multi-hop copying?
03:21:40 <dnm> Are you asking *me*?
03:21:43 <dnm> Or just in general?
03:22:09 <shapr> in general
03:22:12 <shapr> but if you want to answer.. :-)
03:25:55 <lelit> shapr: looking at how tramp does it's magic, I doubt :)
03:27:47 <dnm> shapr: When you say multi-hop, what do you mean exactly?
03:28:45 <shapr> like, scp shae@192.168.200.2/shapr@213.242.67.68
03:28:53 <shapr> hej ralejs 
03:28:57 <ralejs> hej shapr
03:29:29 <ralejs> shapr: Wassup?
03:29:44 <shapr> vacation is over, but I still want to write more Haskell code. Wassup with you?
03:30:51 <ralejs> Organizing my trip to Snowbird in September, and doing my last piece of homework ever ...
03:31:11 <dnm> shapr: Not that I know of by default, though it wouldn't be hard to wrap something to do that. You can, of course, copy between two remote hosts too.
03:35:26 <shapr> ralejs: does this mean you have your PhD now?
03:35:51 <ralejs> shapr: no, there's still plenty of research left to do.
03:39:01 <musasabi> How would I make the equivalent of "void print(char c) { printf("%02X",(int)c); }" in haskell?
03:45:32 <hram> musasabi: ord (from Char) and showHex (from Numeric) ?
04:12:25 <musasabi> hram: that does not have the zere prefix...
04:13:00 <musasabi> of course adding prefix x = if x < 15 then "0" else ""
04:16:08 <hram> musasabi: yes, you have to do some stuff yourself :)
04:47:28 <pesco> Yay, thanks existentially quantified data constructors!
04:51:11 <earthy> !yawn
04:53:47 <goron> @seen goron
04:53:48 <lambdabot> goron is in #haskell.
04:53:53 <goron> @seen shapr
04:53:54 <lambdabot> shapr is in #webwitches, #haskell.se, #haskelldb, #joy, #darcs and #haskell
04:54:18 <goron> shapr: hoi
04:55:48 <shapr> hoi goron 
04:55:59 <shapr> hoe gaat het met jou?
04:56:05 <goron> shapr: I just finished my curl script and it works :)
04:56:08 <shapr> spiffy!
04:56:28 <goron> shapr: Finally some Linux software that just works :)
04:57:26 <shapr> I was playing return to castle wolfenstein last night with 49 other players on the same server.
04:57:31 <goron> shapr: I pretended to be using Windows NT 5.0. 
04:57:39 <shapr> lots of discussion about how wolfenstein just 'locks up'
04:57:55 <shapr> I mentioned that I've played for eight hours straight with linux.
04:58:19 <goron> shapr: Well, there are games that you should be able to play with 64. 
04:58:46 <shapr> wolfenstein does go up to 64 players, but that server only allows 50
04:59:02 <goron> When I play UT2004, my computer doesn't like 16+ games.
04:59:30 <shapr> anyway, it led to a strange discussion, where I concluded that you get a better score with Linux
04:59:45 <goron> shapr: Hoezo?
04:59:52 <shapr> I've played with 20 players in ut2004
05:00:20 <shapr> well, if windows locks up and you have to reboot, the linux users are still playing.
05:00:26 <pesco>  /join #doom3
05:00:31 <shapr> :-)
05:00:32 <pesco> oops,
05:00:34 <pesco> :)
05:00:45 <goron> I played with 32, but it wasn't playable... You didn't say it was using Windows. 
05:00:57 <goron> But that was deducible :)
05:01:11 <shapr> I was playing ut2004 on linux 2.6.7, on my dual Athlon MP 1800+
05:01:18 <goron> Dual :-)
05:01:26 <shapr> yah, SMP is great
05:01:32 <goron> How many fps do you get?
05:01:57 <shapr> I dunno, I usually turn up the detail levels until the fps are just 'nice'
05:02:01 <Jerub> shapr!
05:02:06 <shapr> Jerub!
05:02:19 <goron> When I change resolution the program crashes :(, because X doesn't support something.
05:02:32 <shapr> that's strange
05:02:44 <shapr> have you checked the log to see what error X is giving?
05:02:47 <shapr> Jerub: how's code?
05:03:29 <shapr> goron: anyway, my tolerance for crashy or flaky software or hardware is very low. That's why I gave up on windows.
05:03:40 <shapr> at least with linux I can find and fix the problem with enough effort.
05:03:45 <goron> shapr: Well, let me crash it again to see what's going wrong. 
05:03:46 * shapr is reminded of pesco's GHC port
05:04:04 <pesco> ?
05:04:05 <Jerub> shapr: good and bad
05:04:22 <Jerub> shapr: I'm writing my demo application in qt/c++, hoping for a job with trolltech
05:04:30 <goron> shapr: I read the ghc source for a part yesterday. =>pretty darn unreadable...
05:04:38 <Jerub> shapr: I'm also raving mad over how cool erlang looks at a surface level.
05:04:48 <shapr> pesco: powerpc-unknown-linux
05:04:51 <pesco> goron: Try the dynamic linker. ;-) (being reminded of that)
05:05:29 <shapr> Jerub: erlang has a bunch of nifty features, I agree. It's worth learning.
05:05:32 <pesco> shapr: What did remind you of it? Fixing problems with enough effort?
05:05:40 <shapr> yes
05:05:46 <Jerub> shapr: its like manually typed haskell
05:05:48 <goron> pesco: I was interested in the asm creation part, but I still don't know how to search in files with Linux. Pretty darn n00b.
05:05:58 <Jerub> goron: grep
05:05:59 <shapr> goron: grep!
05:06:00 <Jerub> or /
05:06:03 <goron> I can use cat and grep
05:06:04 <shapr> and hasktags
05:06:13 <Jerub> vi <filename> /foo<cr>
05:06:14 <shapr> tags is like caching grep
05:06:24 <shapr> for a bunch of files at the same time
05:06:29 <shapr> and tags works for both vim and emacs
05:06:30 <goron> I want to search in a tree.
05:06:35 <shapr> yes, tags!
05:06:39 <goron> Ok
05:06:43 <shapr> do you use emacs or vim?
05:07:10 <goron> At the moment vim, but emacs, is also nice(we should built a Haskell version). 
05:07:23 <shapr> yes, I very much want a Haskell editor.
05:07:26 <Jerub> both support haskell tags
05:07:36 <goron> What is a haskell tag?
05:07:50 <goron> Concrete, I mean.
05:08:01 <shapr> tags is a program that pulls out function names and puts them into an index
05:08:21 <shapr> in emacs you can press M-. to jump to the definition of a function under the point
05:08:28 <shapr> and M-* to pop back to where you were before
05:09:09 <goron> shapr: With wxHaskell + Haskell, it shouldn't be to difficult to built such an editor, I think.
05:09:54 <Jerub> and with vim you set
05:09:56 <goron> But anyways, how can I search of the commandline in a directory of files in the files themselves for some string. 
05:10:02 <Jerub> :set tags+=/path/to/tagfile
05:10:07 <shapr> fgrep -r "myFoo" *
05:10:08 <Jerub> and then control-] on the identifier
05:10:22 <goron> fgrep seems logical :)
05:10:32 * goron never heard of it....
05:10:52 <shapr> it's a 'static' grep
05:11:06 <shapr> you use it when there's no regex pattern in the match string
05:11:47 <goron> Ok, is there also a program that isn't static?
05:12:05 <shapr> grep -r "myFoo\|yourFoo" *
05:12:25 <shapr> er, you may not need to escape the or, I forget
05:14:08 <goron> Ok, it's just grep -r...
05:14:13 <goron> That works...
05:22:01 <shapr> konichiwa ikegami--san
05:22:10 * Jerub fires up the espresso machine
05:22:46 <ikegami--> hi, shapr
05:23:02 <shapr> how's code?
05:24:16 <ikegami--> now, I grasp the monad and do notation mostly (but not all)
05:24:40 <shapr> monads are deceptively simple.
05:24:43 <shapr> like go
05:24:47 <Cale> :)
05:25:00 <shapr> what's the name of go in japan?
05:25:13 <Cale> igo
05:25:20 <shapr> cool, thanks
05:25:22 <ikegami--> yes
05:25:35 <ikegami--> we call also go in japanese :)
05:25:50 <Cale> shapr: so you play go?
05:26:26 <shapr> not much
05:26:27 <Cale> I was thinking go would be a good game for you, as you like unicycling, and go is all about balance. :)
05:26:41 <musasabi> go is quite nice.
05:27:16 <shapr> The only downside to go is that I see no appreciable benefit in playing the game.
05:27:30 <Cale> Oh, there are many benefits :)
05:27:42 <shapr> unicycling is good for coordination, physical condition, my amazing fanbase of children...
05:28:45 <shapr> I'll try it more then.
05:28:53 <shapr> I think I've played go once so far.
05:29:07 <shapr> against dark (Richard Braakman), who is quite good at the game.
05:30:37 <pesco> What do you think about this:
05:30:37 <pesco>     type Parameter_family = forall a. (Typeable a) => String -> a
05:30:37 <pesco>     data Cmdline = Cmdline Parameter_family [String]
05:30:38 <pesco>     command_line :: [Parameter_spec] -> IO Cmdline
05:34:16 * pesco has silenced the channel.
05:35:26 <Cale> shapr: go teaches a whole lot of useful things which are difficult to put into words. Mainly, I find, it teaches how to balance emotion with reason.
05:36:22 <ikegami--> and much surprise :)
05:37:42 <musasabi> When writing a low level module does it make sense to try import all the C functions used and code it in haskell, or just implement it in C and provide a highlevel interface for haskell?
05:41:45 <Jerub> dunno, provided you use monads intelligentlly at some level you should be alright
05:41:56 <pesco> musasabi: If by "low level" you mean "must run at ludicrous speed", implement in C. Otherwise, if the C API you're using has more complex data types than the Haskel API you need, also implement in C. Otherwise, implement in Haskell.
05:42:42 <musasabi> pesco: I don't care very much for speed, but want to use mmap, and raw memory.
05:42:51 <Jerub> woo
05:43:02 <Jerub> i almost thought I said that in #c++
05:43:36 <pesco> musasabi: I suspect, importing mmap should pose no problem.
05:44:26 <pesco> I suppose that by "raw memory" you mean stuff like malloc and pointers? You can do that in Haskell with the FFI functions.
05:45:09 <pesco> I must be going though, bye bye everyone.
05:46:43 <musasabi> bye
06:00:09 <musasabi> how do I get constants defined in header files nicely to haskell ?
06:03:25 <musasabi> seems there are too many things dependent on C :-( (like off_t which is either 32 or 64 bits)
06:09:08 <edwinb> shapr: I claim go is good for the brain, but that's only to justify it to myself...
06:13:39 <shapr> I'll try it
06:14:18 <edwinb> I'm not sure I've ever seen it compared to monads before ;)
06:37:15 <goron> Does plugin-code works as fast as normal code, when loaded?
06:49:32 <tic> int<1>dt is t, right?
06:49:55 <Lemmih> Say what?
06:50:15 <ibid> t + C
06:50:28 <tic> *nods* what I thought then. thanks.¨
06:58:11 <shapr> goron: I haven't tested it, but I assume it would.
06:58:20 <SyntaxNinja> shapr: did you see my wash debs?
06:58:27 <SyntaxNinja> hm. maybe I didn't show them to anyone yet
07:00:57 <goron> SyntaxNinja: You maintain wxHaskell debs, right?
07:01:03 <SyntaxNinja> shapr: hey, do you feel like giving me brief decriptions of each of the WASH packages? less brief than what's on the web page
07:01:22 <SyntaxNinja> goron: there are no official packages yet, but I'm putting them together, and maintain the 'unofficial' ones.
07:01:34 <SyntaxNinja> shapr: for instance, what does the email processing package include?
07:02:04 <goron> SyntaxNinja: I have those of SyntaxPolice.org(your site I thought), but they are behind two minor versions. 
07:02:53 <SyntaxNinja> goron: when was the last time you checked? 0.8 is the current one, right?
07:03:05 <goron> SyntaxNinja: Yes, I checked two weeks ago
07:03:26 <SyntaxNinja> check again :)
07:11:05 <goron> SyntaxNinja: I follow the instructions @ http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html and get 0.6. 
07:12:09 <goron> SyntaxNinja: The 0.6 I get is an official package. 
07:12:19 <goron> SyntaxNinja: So I am not getting *anything*.
07:13:17 <SyntaxNinja> http://www.syntaxpolice.org/tmp/wxhaskell/
07:13:25 <SyntaxNinja> sorry, I thought I pointed that to you last week.
07:13:48 <SyntaxNinja> haskell-experimental is on hold at the moment; hopefully these wash packages and the new wxhaskell packages will be up at the new haskell experimental soon.
07:14:31 <goron> SyntaxNinja: Not to me. At least, I didn't read it. It is in the logs if you said so, but thanks(also for maintaining). 
07:16:03 <SyntaxNinja> no problem. good luck with them; let me know if you have any problems. hopefully, I'll be uplaoding them to unstable before too long.
07:16:35 <goron> SyntaxNinja: Is this a real repository this way (as in that I can use apt-get to install)
07:18:57 <goron>  /tmp is the real repos, I think.
07:19:27 <SyntaxNinja> goron: no, it's not an apt repository, you have ot download the .deb files and install them with dpkg -i
07:19:51 <SyntaxNinja> but once these get into unstable, they might not get updated unless your remove the unofficial ones
07:20:15 <goron> SyntaxNinja: Ok, I see. 
07:20:46 <SyntaxNinja> goron: they're rather experimental, so be careful :)
07:22:10 <goron> SyntaxNinja: Does it depend on a specific version of ghc?
07:22:31 <goron> SyntaxNinja: Or can I use debian-view for that?
07:24:24 <SyntaxNinja> you'll need ghc > 6.2
07:24:54 <goron> SyntaxNinja: Ok, because some packages depend on exactly ghc-6.2.1, while I have ghc-6.3
07:27:29 <SyntaxNinja> right; they'll build-depend on ghc > 6.2, but in order to use the binary packages, you'll need the exact version that the libraries were compiled with
07:27:32 <SyntaxNinja> this is always the case with libraries
07:27:44 <SyntaxNinja> but you can rebuild it w/ debuild with your version of ghc, probably.
07:59:35 <goron> I want to do something like this: test::(Testable a)=>[a] tests = [test:: Int, test2::String] (assume instances Testable Int and Testable String exist). This should be possible I think. 
08:05:08 <SyntaxNinja> goron: nope, not quite, and there's no way to do this in haskell98
08:06:20 <goron> SyntaxNinja: Semantically it is sound, I think. 
08:09:37 <SyntaxNinja> goron: http://www.haskell.org/hawiki/ExistentialTypes
08:09:48 <SyntaxNinja> that gives an example of an extension which allows this kinda thing.
08:28:26 <goron> SyntaxNinja: Thanks
08:29:03 <SyntaxNinja> goron: no problem.
08:31:20 <goron> SyntaxNinja: On the website the relation has been made too explicit imo. 
08:31:53 <SyntaxNinja> goron: I don't understand.
08:33:33 <goron> SyntaxNinja: Ok, In my example I only said, that I have a value, and that value is a list, and contains Testable things, nothing more. I don't have a list like this [Test "a",Test 1]. 
08:34:15 <SyntaxNinja> but you want heterogeneous values in the list?
08:34:50 <goron> SyntaxNinja: Yes, but only Testable values.
08:35:18 <goron> (:)::a->[a]->[a].
08:35:22 <SyntaxNinja> and likewise, the elements of Test are Testable, in your example.
08:35:42 <goron> Those a should also be constraints defined by a class.
08:37:09 <goron> SyntaxNinja: I do not want to write down the explicit Obj data constructor, because it can be derived. 
08:37:21 <goron> http://www.haskell.org/hawiki/ExistentialTypes
08:37:55 <goron> I mean type constructor...
08:38:16 <SyntaxNinja> AFAIK, there's no other way to do it.
08:39:06 <goron> SyntaxNinja: Well, maybe not, but in theory it could be implemented. Existential types are too simple.
08:40:37 <goron> I think I will post something like this on haskell-cafe. 
08:42:23 * SyntaxNinja nods
08:57:32 <goron> SyntaxNinja: Isn't this called a functional dependency?
08:58:21 <musasabi> Is there a function to write out Ints (or Word32s) to handles ?
09:00:04 <SyntaxNinja> goron: nope: http://www.haskell.org/hawiki/FunDeps
09:18:45 <musasabi> hmm solved that with arrays...
09:19:42 <shaleh> morning all
09:20:23 <Lemmih> Good morning shaleh.
09:47:11 <shaleh> quiet Monday, people must be dealing with work ....
09:47:53 <goron> SyntaxNinja: Are you a member of the haskell-cafe?
09:48:20 <shaleh> anyone know how the haskell Debian work progresses?
09:48:50 <shaleh> especially things like the xlib interface and/or the wxWindow interface
09:49:07 <Smerdyakov> shaleh, it's a little early for most of the USA to wake up if it doesn't need to. :)
09:49:47 <shaleh> Smerdyakov: oh? it is almost 13:00 on the East coast and nearly 10:00 on the West.
09:50:00 <shaleh> most everyone who will see daylight should be up by now (-:
09:50:01 <Smerdyakov> shaleh, exactly.
09:50:20 <Smerdyakov> I don't know about that. People up all night with end-of-the-summer revelry wouldn't.
09:50:35 <shaleh> Smerdyakov: fair enough
09:51:07 <Smerdyakov> New semester starts here in 2 weeks. :)
09:51:19 <shaleh> define <here>
09:51:37 <Smerdyakov> UC Berkeley
09:51:53 <shaleh> ah
09:52:11 * shaleh is wage slaving away in San Jose right now
09:52:20 <Smerdyakov> Haha! You lose!
09:52:33 <shaleh> (-:
09:52:38 <Smerdyakov> Who's your master?
09:52:51 <shaleh> startup, doing iSCSI sans
09:52:56 <shaleh> kinda cool actually
09:53:01 <Smerdyakov> "sans"?
09:53:13 <shaleh> SAN, storage area network
09:53:18 <Smerdyakov> "iSCI"?
09:53:24 <shaleh> (-:
09:53:40 <Smerdyakov> Guess I missed a letter.
09:53:41 <shaleh> now that I explained SAN, do you know what I am referring to?
09:53:46 <Smerdyakov> No.
09:53:51 <shaleh> ok
09:53:51 <Smerdyakov> I don't know what iSCSI is.
09:54:09 <shaleh> iSCSI is a replacement for Fiber Channel based SANs.
09:54:17 <shaleh> it uses standard ethernet hardware
09:54:27 <shaleh> SCSI over IP.
09:54:29 <Smerdyakov> Let me tell you a secret: I've never taken a hardware or networking class in my life, and I have no other exposure.
09:54:54 <shaleh> Fiber Channel --> expensive, big boys toy.
09:55:07 <shaleh> iSCSI --> big boy toys for everyone else
09:55:24 <shaleh> cut a zero or two off of the cost essentially
09:56:05 <shrimpx> cool
09:56:11 <Smerdyakov> Hm. Well, what I'm doing is making a language for writing program verifiers and a compiler that produces proof-generating verifiers from it.
09:56:12 <shaleh> shrimpx: indeed
09:56:35 <shaleh> Smerdyakov: I kinda wished I had stayed in school to work on that kind of fun project
09:56:37 <shrimpx> Smerdyakov: ahve you hooked up with an advisor?
09:57:03 <Smerdyakov> shrimpx, yeah. Already had a year ago. George Necula.
09:57:08 <shrimpx> yay
09:57:25 <shrimpx> my romanian brethren :)
09:58:30 <Smerdyakov> I was in Oregon for a summer school in June, y'know.
09:58:59 <shrimpx> ah yeah, i was going to go to that, but it overlapped with school :|
09:59:02 <shrimpx> how was it?
09:59:14 <Smerdyakov> Pretty dumb, as a school.
09:59:18 <shrimpx> hah
10:01:53 <shaleh> anyone know how the haskell Debian work progresses?
10:02:25 <shrimpx> what's that
10:03:04 <shaleh> ooo, looks like 6.2.1-5 ghc package has the X11 code in it
10:03:09 * shaleh investigates
10:03:33 <shrimpx> shaleh: what are you up to these days? still writing python for a living?
10:05:19 <shaleh> shrimpx: unfortunately I never was able to write python for a living )-:
10:05:41 <shaleh> I often write it at work, but that is because my boss never seems to care the language used as long as the results arrive
10:05:49 <shaleh> but now I am back in engineering
10:05:54 <shaleh> so I write mostly C, C++
10:06:09 <shaleh> because that is what the project we are working on is written in
10:06:22 <shaleh> so I write my personal tools in python
10:06:31 <shaleh> learning haskell so I can diversify
10:07:14 <Smerdyakov> shaleh, what's your highest degree?
10:07:52 <shaleh> Smerdyakov: I did 2.5 years of college. Was young and foolish. Decided I had been programming for money for the same 2.5 years, so why did I need a degree.
10:08:06 <shrimpx> heh
10:08:10 <shaleh> I also attended a school with a crappy CS dept.
10:08:18 <Smerdyakov> shaleh, by that logic, I would have dropped out of high school. ;D
10:08:28 <shaleh> which only made my "gee I know as much as the prof does"
10:09:05 <shaleh> Smerdyakov: lessons learned.
10:09:14 <Smerdyakov> shaleh, you should go back to school!
10:09:45 <shaleh> Smerdyakov: been thinking about it. but the UC system is even harder to get into today. and it has been long enough that I will need to retake a fair amount.
10:09:56 <shaleh> so I am faced with 3 or so years of schooling
10:09:58 <shrimpx> i coded for money before i went to school, then 3 years into my degree i quit my job to concentrate on school =)
10:10:06 <Smerdyakov> UC system is pretty neat, though, 'cept for this budget business.
10:10:06 <shaleh> which in the Bay Area is hard to accomplish.
10:10:14 <shaleh> Plus, I am married and the main bread winner
10:10:37 <Smerdyakov> shaleh, take classes part time for as long as it takes.
10:10:38 <shaleh> so leaving the working world will be quite hard
10:11:04 <shaleh> Smerdyakov: yeah. I have been thinking about that a lot the last couple of months.
10:11:20 <Smerdyakov> What's the nearest UC to you?
10:11:30 <shaleh> Smerdyakov: I living in Fremont.
10:11:43 <shaleh> I could bart ot Berkeley
10:11:57 <Smerdyakov> Well, then come on over! :D
10:11:59 <shaleh> damn, /me drinks more tea. Still not typing at 100%
10:12:32 <shaleh> too late for the fall semester though, right?
10:12:32 * shrimpx will probably apply @ berkeley for kicks
10:12:40 <Smerdyakov> shrimpx, for PhD?
10:12:44 <shrimpx> ya
10:12:59 <Smerdyakov> shrimpx, if you're in this channel and you're willing to invest some effort, you can get in here for sure.
10:13:09 <shrimpx> yay
10:13:19 <Smerdyakov> shrimpx, you just need to start doing research with a prof as soon as possible...
10:13:52 <shrimpx> Smerdyakov: i have for a year; i coauthored a paper published @ icfp in september =)
10:13:54 <SyntaxNinja> shaleh: did you get your questions about debian haskell stuff answered?
10:13:55 <SyntaxNinja> ?
10:14:11 <shrimpx> s/published/to be published/
10:14:18 <shaleh> SyntaxNinja: I was wondering if the X11 support ever was added. Found that it was in the changelog. /me is happy.
10:14:23 <Smerdyakov> shrimpx, great. It couldn't hurt to do something more mainstream, too. :)
10:14:30 <shrimpx> haha
10:14:45 <Smerdyakov> shrimpx, how long till you graduate?
10:14:53 <shrimpx> i apply this winter
10:15:01 <shaleh> phd, mainstream? in the same sentence? heh
10:15:03 <Smerdyakov> shrimpx, taken GRE?
10:15:12 <shrimpx> not yet; preparing for it
10:15:15 <Smerdyakov> shaleh, we have our own world, in which functional programming is sideline.
10:15:31 <Smerdyakov> shrimpx, you know you need to take both the general GRE and a CS GRE, right?
10:15:35 <shrimpx> yeah
10:15:42 <Smerdyakov> shrimpx, OK. NO PRESSURE. :D :D :D
10:15:47 <shrimpx> :)
10:16:12 <shrimpx> my friends have gotten creamed on their GREs; i plan to rock them hard
10:16:32 <Smerdyakov> The general GRE parts that are just like the SAT's are easy.
10:16:41 <Smerdyakov> I took the old analytical section, so I can't say anything about it.
10:17:10 <shrimpx> people do bad on verbal and subject, i hear
10:17:34 <shrimpx> heh
10:18:15 <Smerdyakov> If you're applying to a CS PhD program, you should get an 800 on the math. It's embarrassing not to. :)
10:18:50 <shrimpx> yeah, from the test GREs i've seen, the math section is ridiculously easy
10:25:01 <Smerdyakov> I think it's embarrassing for a university graduate not to do well on the verbal section, too, but such is the result of extreme specialization on most.
10:26:28 * esap is extremely specialized.
10:29:42 <musasabi> There is no easy way to know how many bytes were written with a hPutStr ?
10:30:28 <musasabi> fdWrite returns the size, but I need hPutBuf too...
11:01:36 <stepcut> tehehe!
11:01:38 <stepcut>     where test' l = let str = ("This string is " ++ (show l) ++ " characters long!!") in
11:01:38 <stepcut> 			if l == (length str )
11:01:38 <stepcut> 			   then putStrLn str
11:01:38 <stepcut> 			   else  test' (l + 1)
11:01:52 <stepcut> oops, missed the first line :(
11:01:58 <stepcut> test = test' 0
11:03:03 <Marvin--> yuck
11:04:18 <stepcut> what!?
11:05:22 <stepcut> ok, it is ugly...
11:05:30 <stepcut> I will do a cleaner version later
11:05:33 * stepcut goes to drink tea
11:11:52 <Marvin--> how about  test = test' 0
11:11:53 <Marvin-->   where test' l = let str = "This string is " ++ show (observe "l" l) ++ " characters long!!"
11:11:53 <Marvin-->                    in if l < length str
11:11:53 <Marvin-->                         then test' (length str)
11:11:53 <Marvin-->                         else str
11:12:13 <Marvin--> (minus the observe if you don't want to know how many times it's called :)
11:12:36 <shaleh> hmmmm, damn, maybe X11 is not in the latest Debian ghc
11:13:16 * Marvin-- really likes observe
11:15:51 * Marvin-- goes to the supermarket to hunt for food
12:01:19 <arauko> what is a good book (hardcopy) to learn haskell?
12:05:03 <shrimpx> is de morgan's law valid in intuitionistic logic?
12:06:05 <esap> no, I think it works only on one direction.
12:08:28 <shrimpx> hm
12:08:48 <Smerdyakov> Think of it via the Curry-Howard isomorphism and it should be clear why. :)
12:08:53 <shaleh> intuitionistic?
12:09:38 <gintas> I'm a bit puzzled by the ghci module system; I'm using debian, and I have some modules in /usr/lib/ghc-6.2.1/imports, and some modules in /usr/lib/ghc-6.2.1/hslibs-imports
12:10:24 <gintas> more specifically, I wanted to try out the 'observe' function, which seems to be in hslibs-imports/util/Observe.hi
12:11:16 <gintas> how do I use that module?  ghci -v shows that only ghc-6.2.1/imports is scanned for libraries
12:11:28 <gintas> do I need an extra command line switch or something?
12:13:43 <shaleh> gintas: SyntaxNinja is a good person to start with. Ask him next time he is around
12:15:06 <shaleh> gintas: have you tried 'import util.Observe'?
12:15:07 <gintas> shaleh: yeah, I guess so.  Just that I thought this is a simple enough question that anybody on this channel could answer :(
12:16:01 <gintas> yes, but ghc won't find it: it only looks in imports, and not in hslib-imports :(
12:16:32 <shaleh> gintas: can I see the script you are using?
12:16:39 <Maddas> Riastradh: ping
12:18:02 <gintas> shaleh: just a moment, I think I found some documentation
12:18:30 <arauko> what is a good book (hardcopy) to learn haskell?
12:18:47 <shaleh> arauko: have you looked a tthe haskell website? it lists several good references
12:19:15 <arauko> shaleh, yes, but id like to hear some recomendations 
12:19:21 <gintas> shaleh: ack, I needed '-package util'. Thanks for trying to help, sorry to bother
12:19:25 <shaleh> I liked the book "Haskell School of Expressions" teaches haskell in the context of drawing polygons
12:19:33 <shaleh> gintas: no worries
12:19:47 <arauko> shaleh, is it good to learn haskell in general?
12:20:06 <shaleh> arauko: my only complaint about the book is it never shows an entire functioning script. I used the standard haskell tutorial + that book
12:20:17 <arauko> :-/
12:20:23 <Riastradh> Maddas: pong
12:20:28 <arauko> any other recommendation?
12:20:32 <shaleh> arauko: I have never written in any fp langauge before. I found it enjoyable.
12:21:04 <gintas> arauko: actually I've ordered some books on haskell recently
12:21:14 <arauko> nice
12:21:16 <gintas> one of them is School of Expression
12:21:24 <shaleh> arauko: I would recommend the book to others. It teaches the right mind set, you just need a little help with gluing it all together. The tutorial is hard to learn from, but teaches the glue well.
12:21:27 <arauko> gintas, do you want also my address? :-)
12:21:47 <gintas> huh?
12:21:55 <shaleh> gintas: to send some books to him
12:21:58 <shaleh> (-:
12:22:03 <arauko> :-)
12:22:10 <gintas> hmmm...
12:22:19 <gintas> that would cost you ;-]
12:22:40 <gintas> another one, which I'm not sure you would find useful, is Haskell Road to Logic, Maths and Programming
12:22:54 <shaleh> gintas: I am not familiar with that one
12:23:16 <gintas> from what I understand, its goal is not to teach haskell, but Haskell is used to explain mathematical concepts
12:23:19 <arauko> gintas, i want just a bok with a good explanation of the haskell language in general...
12:23:25 <gintas> or something like that...
12:23:44 <shaleh> arauko: have you looked at the haskell-cafe mailing lists history?
12:24:06 <gintas> I liked Hal Daume's tutorial very much
12:24:22 <gintas> it's available at http://www.isi.edu/~hdaume/htut/
12:24:35 <gintas> but it's not a "hardcopy"
12:25:10 <shaleh> gintas: and he wants info, blah
12:25:30 <arauko> shaleh, no
12:25:37 <arauko> gintas, let me check
12:26:21 <arauko> oh well, if it is online, and fits my needs, its better :-)
12:26:49 <gintas> I found it to be much better than the official "Gentle introduction", but that's just my opinion
12:27:08 <shaleh> gintas: I just entered "Hal Daume, hdaume@isi.edu" (-:
12:27:52 <gintas> ?
12:28:53 <shaleh> gintas: to download the pdf he wants information about who is downloading it.
12:29:00 <shaleh> so, I said I was Hal.
12:34:21 <Marvin--> gintas: -package util
12:34:35 <gintas> Marvin--: yeah, I know, stupid me....
12:34:49 <Marvin--> anything in hslibs needs explicit -package flags
12:35:46 <gintas> yep, already figured that out
12:36:18 <Marvin--> oh, sorry then :)
12:39:17 <gintas> hm, observe is neat
12:39:42 <Marvin--> yeah, I like it a lot
12:42:45 * Marvin-- looks at his tax forms and swears soundly
12:45:54 <shaleh> taxes, now?
12:52:27 <Marvin--> oh, it's a preliminary thing
12:53:19 <Marvin--> since I'm starting to work now, in the middle of the year, my income will be significantly lower than what it would've been if I'd worked for a whole year, so I'm requesting a recalculated tax rate thingy
12:54:01 <Smerdyakov> In the USA, for such situations, you will just get a refund eventually. Is that how it works there?
12:54:11 <Smerdyakov> (You'll get refund without making a special appeal, that is.)
12:54:24 <Marvin--> oh, yes
12:54:33 <Marvin--> but I'd rather have the money now than later :)
12:55:17 <Smerdyakov> I prefer to play it safe, since tax laws can be complicated.
12:55:57 <Smerdyakov> Plus, most of my income has no tax withholding now, since it comes from fellowships. :)
12:56:39 <Marvin--> well, this is just an approximate request, if I get it wrong it will still be calculated correctly after the end of the year and I'll pay the difference or get back the difference, depending on which way it was incorrect
13:08:02 <SyntaxNinja> arauko: I wrote a review of one of the haskell books: http://books.slashdot.org/article.pl?sid=04/03/12/221232
13:08:28 <arauko> nice, 
13:08:33 <arauko> SyntaxNinja, thanks
13:08:55 <SyntaxNinja> arauko: but it doesn't _compare_ books.
13:18:14 <shrimpx> Smerdyakov: oh, that makes sense
13:18:29 <shrimpx> i think
13:21:02 <shrimpx> so according to the isomorphism, a /\ b === a x b and a \/ b === <a,b>, <,> being a variant sum... if so, then with proof for a x b -> _|_ you can't construct proof terms for a -> _|_ or b -> _|_
13:34:00 <pesco> Boo!
13:34:12 <Lemmih> argh!
13:34:23 <pesco> gotcha
13:35:14 <pesco> Feierabend!
13:36:16 <Lemmih> I lige maade, du gamle!
13:36:31 <pesco> What's that mean?
13:37:22 <Marvin--> hrmm... now I know what the loud bang I heard earlier was
13:37:34 <Lemmih> Something like: "Likewise, old man". I suspect that 'feierabend' is some kind of greeting.
13:37:34 <Marvin--> an exploded car
13:37:36 <Marvin--> yikes
13:40:16 <SyntaxNinja> Marvin--: not meant for you, I hope :)
13:40:28 <Marvin--> heh, no
13:40:38 <Marvin--> but it was within walking distance
13:40:44 <Marvin--> just outside the supermarket I frequent
13:41:25 <shaleh> where is this
13:41:27 <shaleh> ?
13:42:34 <pesco> Lemmih: Heheh, Feierabend means the part of the day after work. (literally: celebration evening).
13:42:46 <Marvin--> shaleh: Gothenburg
13:43:10 <pesco> Lemmih: What language was that (I lige maade...)?
13:43:18 <Lemmih> It's danish.
13:43:24 <shaleh> Marvin--: ah
13:43:38 <Marvin--> one hell of a bang
13:43:50 <pesco> I see. I recognize "gamle" as in Gaml Dansk. :)
13:44:01 <Marvin--> pesco: hah
13:45:00 <pesco> :)
13:49:13 <pesco> Heh, dict.leo.org tells me a "bash" can mean a "great celebration". Bash night sounds kind of cool for a programmer's feierabend. "Yes! Work's done, lets BASH some real KEYS!"
14:16:14 * Marvin-- groans at the script hackery he's doing
14:29:56 <Marvin--> I wonder if I got this right
16:16:56 <palomer> what do you guys think of "clean"?
16:20:25 <jesse98> it's yummy!
21:07:58 <sazzle> hm
22:43:32 <musasabi> morning
22:43:47 <musasabi> palomer: the uniqueness typing is near
22:43:51 <musasabi> *neat even
22:51:00 <Cale> The uniqueness typing draws near... you hit the uniqueness typing with your dagger of unification +1!
22:52:37 <musasabi> It is something that would be neat in haskell too..
23:07:56 <kosmikus> The uniqueness typing breathes uniqueness. You are hit by a ray of uniqueness. You feel superfluous.
23:16:27 <stepcut> you kill the uniqness type, you are now a rank-2 inductive type
23:29:06 * kosmikus wonders if uniqueness type corpses are tasty
23:58:26 <ozone> you see a gelatinous tetrahedron of uniqueness
