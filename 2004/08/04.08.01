00:57:03 <Lemmih> Is the some way to deinitialize wxHaskell?
05:34:08 <bourbaki> hi
05:34:41 <Lemmih> Hello bourbaki.
07:26:20 <Marvin--> argh, golf on *two channels*?
07:28:19 <Lemmih> How can one play golf on IRC?
07:28:31 <Marvin--> tv channels
07:29:36 <Marvin--> booring
07:31:30 <Lemmih> You can help me get wxHaskell to play nicely with GHCi if you got nothing else to do (-:
07:45:05 <Marvin--> I thought we'd been over that countless times
07:45:26 <Marvin--> well, I don't know how to solve it *properly*, I just used LD_PRELOAD to get it to work
07:56:58 <Lemmih> Well It's not that problem...
07:59:39 <Lemmih> It links fine with wxcore and wx but it segfaults the second time I evaluate a function utilizing the library.
08:39:10 <SyntaxLaptop> marvin--, igloo, stepcut: the new cabal spec is here: let me know if you see any release-critical problems. http://www.syntaxpolice.org/tmp/pkg-spec.pdf
08:39:21 <SyntaxLaptop> Marvin--: especially take a look at the field descriptions
08:39:31 <SyntaxLaptop> this file is available in CVS under haskell-report 
09:10:12 <Marvin--> SyntaxLaptop: the example Setup.lhs on page 3 is wrong, it should import defaultMain and set main = defaultMain
09:10:44 <Marvin--> SyntaxLaptop: and I think we call it sdist, not src-dist?
09:20:36 <Marvin--> SyntaxLaptop:  \"funky, path\\\\name\"   is really broken, it should be  "funky, path\\name"
09:20:45 <Marvin--> the escapes comes from being in a haskell string in the module! :)
09:22:08 <Marvin--> hmm, now I think I remember what the issue with the dashes was
09:23:06 <Marvin--> oh, and it should be documented exactly what paths look like
09:23:41 <Marvin--> page 18 says import Distribution.Make (setup), that damn well should be defaultMain too ;-)
09:26:37 * Marvin-- wanders off to get something to eat
10:03:24 <Igloo> SyntaxLaptop?
10:11:53 <Marvin--> woot, new episodes of Charmed
10:12:16 <Marvin--> o.O "now, with more cleavage" it seems
10:12:47 <Igloo> Heh
10:13:17 <Igloo> Charmed never struck me as being particularly plotful, nor having much else going for it
10:13:47 <Marvin--> oh I agree
10:14:11 <Marvin--> great hungover-tv though
10:14:13 <Igloo> Oh, Marvin, am I being dopey or does the new spec not answer my questions about eh example at the start?
10:14:35 <Igloo> e.g. how does it know which files are part of the package
10:14:57 <SyntaxLaptop> back
10:14:59 <SyntaxLaptop> I was on the phone
10:15:31 <Igloo> Well, that's what I was going to ask you anyway  :-)
10:19:07 <Marvin--> hmm, Red Planet on tv tonight
10:19:37 <Marvin--> yet another let's-go-to-mars-whoops-houston-we-have-a-problem movie
10:19:57 <Igloo> I saw mission to mars again the other day
10:20:25 <Marvin--> is that the one with Gary Sinise?
10:20:37 <Igloo> It's the one with Quinn Malory from Sliders
10:21:05 <SyntaxLaptop> man... cell phone providers suck.
10:21:30 <Riastradh> Cell phones suck.
10:21:40 <SyntaxLaptop> Igloo: what's the question?
10:21:41 <Igloo> (not that my brain spent half the film going "It's Quinn!" or anything)
10:21:46 * Riastradh pines for phone booths.
10:21:59 <Igloo> SyntaxLaptop: how does it know which files are part of the package?
10:23:02 <SyntaxLaptop> yeah, that example needs fixed.
10:25:37 <Igloo> Well, that's an RC problem IMO  :-)
10:25:43 <SyntaxLaptop> agreed
10:35:05 <Igloo> Gah!
10:35:27 <Igloo> libhugs-foo-dev doesn't want the -dev
10:35:50 <Marvin--> hmm, true
10:36:53 <SyntaxLaptop> igloo: in debianTemplates?
10:37:11 <Igloo> That comment wasn't related to the spec
10:37:26 <Igloo> But probably there too
10:37:55 <SyntaxLaptop> Igloo: but what are you looking at?
10:38:04 <Marvin--> I think he's just thinking out loud
10:38:09 <Igloo> The inside of my brain
10:40:21 <Marvin--> hey Igloo, another fun thought
10:40:32 <Marvin--> runghc
10:40:58 <SyntaxLaptop> what about runghc?
10:41:24 <Marvin--> depending on whether it'll use ghci or compile-and-execute, we might want to put the ghci .o files in a libghc6-foo package and the .a files in a libghc6-foo-dev package
10:41:57 <Marvin--> or am I overcomplicating things?
10:42:12 <SyntaxLaptop> I'm going to go for a run and I'll brb.
10:42:13 <Igloo> It needs thinking about
10:42:19 <SyntaxLaptop> runghc already exists, which does it use? :)
10:42:24 <Igloo> We can't split them nicely sue to the way the package adding works
10:42:47 <Igloo> runghc ought to at least fall back to compile+execute as ghci isn't universally available
10:42:49 <Marvin--> there's no runghc in the ghc-cvs package...
10:44:50 <RussellOConnor> Where do I find ``trace'' a la http://www.haskell.org/hawiki/TyingTheKnot ?
10:44:56 <Igloo> Debug.Trace
10:45:07 <RussellOConnor> thanks
10:45:07 <Igloo> Assuming that is the trace you want, anyway
10:45:37 * RussellOConnor explores the replaceMin solution.
10:57:27 <RussellOConnor> Damn,  When I relace (fix f) by (f . f) (error "Do not go here") I end up with two tree traversals.
10:57:56 <RussellOConnor> replaceMin t = let f = \res -> rpMin t (snd res) in fst $ (f . f) (error "Do not go here")
10:58:06 <RussellOConnor> vs
10:58:11 <RussellOConnor> replaceMin t = let f = \res -> rpMin t (snd res) in fst $ (fix f)
11:08:18 <RussellOConnor> grrr
11:20:42 <Igloo> It might vary depending on whether you use -O
11:23:47 * RussellOConnor runs ghc.exe
11:27:02 <RussellOConnor> :(
11:27:04 <RussellOConnor> no good.
11:27:12 <Marvin--> Igloo: oh, neat, runghc seems to run  ghc -e
11:27:25 <Marvin--> I didn't even know ghc -e existed :-)
11:27:41 <RussellOConnor> I guess fix f builds a fundamentally different graph than (f . f) (error "")
11:28:07 <Igloo> It's not in the manpage, it can't exist
11:28:54 <RussellOConnor> I'm guessing bird's solution fundamentally requires the use of fix.
11:30:21 <Igloo> OK, that doesn't work when ghci doesn't work
11:30:43 <Marvin--> oh?
11:31:40 <Igloo> Well, it'll be working in exactly the same way as ghci
11:31:50 <Igloo> And that needs per-arch linker stuff done
11:32:52 <Marvin--> so, runghc needs .o files and a working ghci
11:33:56 <Igloo> Yes
11:36:08 <Marvin--> maybe it does make sense to put .o files in libghc6-foo packages and .a files in libghc6-foo-dev packages
11:36:47 <Igloo> With package.conf magic...
11:37:45 <Marvin--> oh, damn, didn't think of that
11:39:01 <Marvin--> and both ghci and ghc need the .hi files...
13:18:32 <Marvin--> why does every Mars movie start with a catastrophe?
13:19:46 <Lukhas> fate ?
13:20:44 <Marvin--> wonder what a movie based on Red Mars would be like
13:21:34 <Lukhas> amazingly long
13:21:40 <Marvin--> true :)
13:21:53 <Lukhas> and a total failure, as no catastrophe is happening in the first hours
13:22:29 <Marvin--> heh
13:23:11 <Marvin--> it's like all these movie makers are trying to hammer into us THOU SHALT NOT GO TO MARS
13:24:30 <Lukhas`> grbmlb
13:50:04 <eixei> heya everyone
13:50:50 <eixei> anyone?
13:50:54 <eixei> hmm...
13:51:02 <Cale> hi
13:51:07 <eixei> heya :-)
13:51:12 <Cale> what's up?
13:51:37 <eixei> not much, just trying to relax for a bit, and I thought I could join #haskell, haven't been here in ages :-)
13:51:56 <eixei> how about you?
13:52:46 <eixei> hi Joachim
13:54:27 <eixei> hmm... do you know of any active channel?
13:54:33 <eixei> about any interesting topic?
13:55:15 <eixei> nah, guess not :-/
13:55:19 <eixei> oh well...
13:55:22 <eixei> bye everybody
13:55:29 <Riastradh> You could bring up something interesting.
13:55:32 <eixei> oh...
13:55:36 <eixei> well :-)
13:56:03 <eixei> it's hard to bring up interesting topics that don't start a flamewar :-/
14:05:57 <RussellOConnor> Wrote up the one-pass vector normalization function @ http://www.haskell.org/hawiki/CircularProgramming
14:11:16 <ne1> Don't worry, we don't war.
14:13:09 <Marvin--> RussellOConnor: lookin' good :)
14:13:16 <eixei> :-)
14:13:50 <Riastradh> RussellOConnor, can you format that code a bit nicer so it doesn't scroll way off the right side of the screen?
14:14:32 <RussellOConnor> ahh
14:18:37 <RussellOConnor> That's a bit better.
14:19:37 <mattam_> nice example, except recip isn't defined
14:19:55 <RussellOConnor> recip is in the Prelude.
14:20:01 <Riastradh> @type recip
14:20:03 <lambdabot> recip :: forall a. (Fractional a) => a -> a
14:20:18 <mattam> ok
14:20:46 <mattam> @doc recip ?
14:20:47 <lambdabot> Sorry, I don't know the command "doc", try "lambdabot: @listcommands"
14:21:27 <SyntaxLaptop> Marvin--: Igloo I made the pkg-spec changes we talked about.
14:21:34 <Riastradh> @info recip
14:21:36 <lambdabot> -- recip is a method in class Fractional
14:21:36 <lambdabot> recip :: forall a. (Fractional a) => a -> a
14:21:39 <SyntaxLaptop> yummm mango lassi
14:22:00 <mattam> recip x = 1/x
14:22:04 <Riastradh> For great vindaloo!
14:22:54 <RussellOConnor> http://www.haskell.org/onlinereport/standard-prelude.html#$tFractional
14:23:12 <mattam> is recip a standard name for this function ?
14:23:29 <Riastradh> Given that it's in the Haskell standard, what do you think?
14:23:54 <Cale> It's known as the reciprocal
14:23:58 <RussellOConnor> recip is not a function itself, but is associated with the Fractional class.
14:23:59 <mattam> i mean in mathematical jargon
14:24:09 <mattam> ok
14:24:12 <Cale> In mathematical jargon, it's the reciprocal :)
14:24:30 <mattam> recipient wasn't convincing ;)
14:24:43 <Marvin--> SyntaxLaptop: is the pdf updated?
14:24:56 <RussellOConnor> I guess the Haskell comittee doesn't like long names as much as I do.
14:25:46 <SyntaxLaptop> shapr: around?
14:25:47 <SyntaxLaptop> Marvin--: yeah
14:27:39 <Marvin--> let me have another look at it, then
14:27:45 <SyntaxLaptop> np
14:27:57 <SyntaxLaptop> I think I'm going to use haskell-utils' bug list for now. I bet shapr won't mind...
14:28:18 <SyntaxLaptop> er haskell-libs
14:28:25 <Marvin--> I don't understand why it says "Name: angela-col", shouldn't it be "Name: angela-coll"? (two Ls)
14:29:55 <SyntaxLaptop> fixed.
14:31:29 <Cale> eixei: sorry - just noticed that I'd ignored you - I was involved in a discussion in #math at the time, and didn't notice the activity in this channel until it had scrolled past
14:33:15 <Marvin--> SyntaxLaptop: I think I remembered what the issue with dashes was
14:33:21 <SyntaxLaptop> yeah?
14:33:29 <Marvin--> SyntaxLaptop: the spec talks about "Package IDs", which is pkgname-pkgversion
14:33:33 <eixei> np Cale :-)
14:34:55 <SyntaxLaptop> hm
14:35:14 <Marvin--> SyntaxLaptop: I think this ties into API versions
14:35:39 <Marvin--> if we have API versions, the package id wouldn't need the pkgversion
14:35:52 <SyntaxLaptop> hm
14:35:56 <Marvin--> I think
14:36:17 <SyntaxLaptop> well, I'm not going to worry about it right now. if dashes in package names are a big problem, then we'll just have to change the syntax for packageIDs.
14:36:37 <Marvin--> agreed
14:36:45 <Marvin--> heck, package names already have dashes, look at haskell-src
14:37:07 <SyntaxLaptop> exactly.
14:37:20 <Marvin--> another solution is to disallow tags in the pkgid
14:37:46 <Marvin--> so if you've got  foo-bar, version 0.1.2-tag1-tag2, the pkgid would still be foo-bar-0.1.2 which isn't ambigous
14:37:59 <SyntaxLaptop> I think we'll just end up with what I originally suggested, which was "foo-bar=1.2.34-foo-bar-bang"
14:38:02 <SyntaxLaptop> or ==
14:38:11 <SyntaxLaptop> it just makes all kinds of sense :)
14:43:15 <Marvin--> that's version ranges, that's something else
14:43:29 <Marvin--> isn't it?
14:44:07 * Marvin-- fetches another beer from the fridge
14:45:54 <SyntaxLaptop> well, it's just a separator character; it seems to have a nice meaning, though :)
14:46:50 <Marvin--> yum, Belgian ale
14:47:56 <Marvin--> .. Belgian ale where the foam is bigger than the bottle, darn
14:48:09 <Lukhas> hehehe
14:51:00 <Marvin--> SyntaxLaptop: did you fix the isAlphaNum?
14:51:42 <Marvin--> SyntaxLaptop: er, ./Setup.lhs source-dist? I still think the command is "sdist"...
14:51:46 <Marvin--> SyntaxLaptop: (page 14)
14:53:00 <Marvin--> SyntaxLaptop: I still don't like the description of the path syntax
14:56:07 <Marvin--> SyntaxLaptop: and Distribution.Make passes --with-hc= to ./configure, not --with-compiler
14:56:14 <Marvin--> (page 19)
14:56:31 <Marvin--> otherwise I think we're good to go
14:56:51 <Marvin--> as long as we make a general disclaimer that both the spec and the implementation are in flux and will change :-)
14:57:50 <SyntaxLaptop> Marvin--: yeah, I fixed isAlphaNum
14:58:50 <Marvin--> wrt path syntax, the "simple" form allows alphanum and -+/_.
14:59:20 <Marvin--> and I think the spec should state clearly that the "complex" form is a haskell string, so everything should be quoted like in a haskell string
15:01:54 <SyntaxLaptop> Marvin--: I don't understnad your comment about --with-hc
15:02:02 <SyntaxLaptop> configure takes --with-compiler, no?
15:03:02 <Marvin--> which configure is that?
15:03:09 <Marvin--> Is that standardized somewhere I didn't look?
15:03:32 <Marvin--> all I'm saying is that Distribution.Make calls  ./configure --with-hc=...
15:03:41 <Marvin--> either the spec or the code should be changed
15:03:48 <Marvin--> I don't know which is "correct"
15:05:13 <SyntaxLaptop> oh, I get it.
15:05:15 <SyntaxLaptop> I fixed the spec.
15:05:39 <SyntaxLaptop> let's see; what was the example program that was using Distribution.Make?
15:06:00 <Marvin--> I don't have one yet :/
15:06:16 <Marvin--> I was fiddling with getting gtk2hs to work with it, but it needed some changes and I never got around to it
15:06:28 <Marvin--> besides, compiling gtk2hs on my laptop was no fun ;)
15:06:38 <SyntaxLaptop> hm. shit for some reason ghci -package Cabal has broken :(
15:06:46 <SyntaxLaptop> Loading package Cabal ... linking ... /usr/local/lib/Cabal-0.1/HSCabal-0.1.o: unknown symbol `__stginit_CompatziException_'
15:06:46 <SyntaxLaptop> ghc-6.2.1: panic! (the `impossible' happened, GHC version 6.2.1):
15:06:46 <SyntaxLaptop>         can't load package `Cabal'
15:07:25 <Marvin--> um, okay
15:07:37 <Marvin--> oh, Compat.Exception isn't listed in Modules:?
15:08:17 <Marvin--> yep, that's it
15:08:30 <Marvin--> you should add both Compat.Exception and Compat.RawSystem to the module list in Setup.description
15:09:33 <SyntaxLaptop> ok...
15:09:43 <SyntaxLaptop> http://www.haskell.org/cabal/
15:09:48 <SyntaxLaptop> (the revised web page)
15:10:11 <Marvin--> what's revised about it? :)
15:10:30 <SyntaxLaptop> I reorganized things like adding a "download" page and saying that there's a release and stuff :)
15:11:17 <Marvin--> oh
15:11:42 <Marvin--> note to self: force-reload to get rid of cached copies
15:12:17 <Marvin--> waaah
15:12:23 <Marvin--> I just realized
15:12:35 <Marvin--> in a week I'm starting my job at safelogic
15:12:43 <Marvin--> I'm not a student any more :-/
15:12:51 <SyntaxLaptop> hehe
15:12:53 <SyntaxLaptop> you rule.
15:13:07 <Marvin--> but I *liked* being a student :-/
15:14:00 <Riastradh> Students get all sorts of free stuff and reduced prices on cool things.
15:14:09 <Marvin--> exactly
15:14:30 <SyntaxLaptop> I pushed a patch that includes releaseNotes and those fixes to Setup.description (which i haven't 100% validated yet..."
15:15:00 <Marvin--> and now I don't have the oh-it's-all-right-he's-a-student parachute any longer
15:15:25 <Marvin--> wow, my brain is confused, I just typed "cvs pull" in the cabal dir
15:15:38 <Marvin--> no more beer tonight
15:16:11 <SyntaxLaptop> hehe
15:16:35 <SyntaxLaptop> we can code-name this release "the head is bigger than the bottle"
15:16:58 <Marvin--> er.
15:17:41 <SyntaxLaptop> let me know what you think of the release notes.
15:17:53 <Marvin--> I liked the gnome release names in the early days of gnome 2
15:18:09 <Marvin--> they were all pointless swedish sentences
15:18:37 <Marvin--> lots of Swedes involved with gnome
15:19:03 <Marvin--> yeah, the release notes look good
15:19:14 <Marvin--> (though what do I know, I suck at writing release notes)
15:19:14 <andersca> talking about gnome?
15:19:25 <andersca> oh, ok
15:19:28 <Marvin--> andersca: just reminiscing on the funny Swedish release names :)
15:20:24 <Marvin--> meh, I really need to get a new version of pyopenssl out the door one of these days
15:20:33 <SyntaxLaptop> here's the source tarball that I'm thinking of releasing: http://www.haskell.org/cabal/cabal-code.tgz
15:32:15 <Marvin--> SyntaxLaptop: I'm too tired to look at that, sorry
15:35:48 <SyntaxLaptop> ok
15:36:44 <bourbaki> hi
15:54:46 <Marvin--> well, I'm off to bed
15:54:54 <Marvin--> and catching a train to visit my parents tomorrow
15:54:59 <Marvin--> so good luck with the release
15:57:02 <SyntaxLaptop> Marvin--: thanks :)
15:57:07 <SyntaxLaptop> 'night, and good travling.
15:57:13 <eixei> n8 Marvin--
15:57:28 <eixei> o.o
15:57:39 <eixei> n8 doesn't work very well in english, does it?
15:57:51 * eixei says goodnight instead
16:09:02 <SyntaxLaptop> OK does anyone want to stop me from announcing the new release? :)
16:10:14 <Riastradh> Ooh, ooh, how about you start announcing every new commits, every new build, et cetera?
16:10:18 <Riastradh> Commit, even.
16:10:47 <np_hard> what do you think this is, prothon?
16:11:02 <Riastradh> Prothon?
16:11:27 <SyntaxLaptop> Riastradh: am I talking about it too muhc?
16:11:40 <Riastradh> I don't really notice it, but then I also don't pay much attention to this channel.
16:11:45 <np_hard> the prothon guy used to send a zillion messages about prothon
16:11:52 <np_hard> to comp.lang.python
16:12:49 <Riastradh> What's prothon?
16:13:42 <np_hard> python without classes
16:13:51 <np_hard> PROtotype-based pyTHON
16:13:54 <np_hard> I suppose
16:13:57 <np_hard> or something like that
16:14:08 <np_hard> doesn't interest me much except the guy always posted about it!
17:50:55 <Grind> hello
18:43:41 <Pseudonym> G'day.
18:43:43 <Pseudonym> Oops.
18:44:06 <Cale> wouldn't want to say something like "G'day" in #haskell, now. :)
18:44:28 <Pseudonym> I briefly thought it was a channel I'd already said g'day on.
18:44:37 <Cale> ah
18:52:21 <Riastradh> What a terribly catastrophic and cataclysmic calamity it would be to have said 'G'day' twice on one channel!
18:52:38 <Pseudonym> Yes, it would.  It would mean that I think it's a doubly good day.
18:52:47 <Pseudonym> Which it isn't.  It's only a singly good day at the moment.
18:53:08 <thebug> do you have any triply good days on tap to share with #haskell?
18:53:10 <Riastradh> What if you were ne'er to say 'G'day' on one day?  I cannot imagine the philosophical implications!
18:56:32 <sazzle> well, if the first is good day, maybe the second is great day
18:58:04 <Pseudonym> Perhaps.
18:58:25 <Pseudonym> Also, I think goodness of a day is something that you can only really determine in retrospect.
18:58:49 <sazzle> isn't g'day shorthand for wishing for a good day
18:58:58 <sazzle> as opposed to something you'd say in retrospect?
18:59:00 <Pseudonym> Hmmm... true.
18:59:22 <Pseudonym> So perhaps the problem with two "g'day"s is that too good a day might be too much of a good thing.
19:13:41 <ozone> cabal 0.1!
19:13:44 <ozone> time to hammer it
19:19:41 <dons> I think two g'days would negate each other
19:20:03 <thebug> hello dons :)
19:20:09 <dons> hey
19:20:11 <thebug> ...I come bearing docs...
19:20:17 <dons> cool!
19:20:36 <thebug> I'll put them up momentarily <need to move over to the computer where I left them hehe>
19:21:01 <dons> ok. this is exciting. maybe we'll actually get mips64 fully supported this time :)
19:22:38 <thebug> I even have multiple machines set up to test on <or use distcc to compile faster, perhaps>
19:22:55 <thebug> that would be neat :)
19:23:05 <dons> hmm. never tried distcc with ghc. does it work?
19:23:15 <thebug> your guess is as good as mine
19:23:48 <dons> hm. I wonder how you distribute .hi files across to machines that need them
19:23:54 <dons> or does it all use nfs underneath?
19:23:55 <thebug> likely it wouldn't work
19:23:56 <Smerdyakov> .hi? Haha!
19:24:28 <dons> Smerdyakov: problem?
19:24:37 <thebug> distcc uses the host machine to preprocess, than distributes that output, then gets back an assembled object, which the host machine uses to link
19:25:01 <Smerdyakov> dons, Hi! Hi! Hi!
19:25:07 <thebug> that's how it deals with c/c++, I doubt it works with anything else
19:26:28 <dons> I think .hi files created when compiling dependent objects on other machines would cause problems
19:28:32 <Pseudonym> <rant>This is a bug in the Haskell definition.</rant>
19:29:44 <Pseudonym> The fact that implementations can't generate a .hi file from the .hs file alone is a bug.
19:29:45 <dons> makes things difficult. I think this is why make -j doesn't work when building ghc
19:30:27 <Riastradh> Why can't you generate .hi files from the .hs file alone?
19:31:28 <thebug> dons: mind /msg?
19:31:35 <Pseudonym> The bug is that exported symbols don't require explicit type signatures.
19:31:37 <dons> go for it :)
19:31:57 <Riastradh> And type inference doesn't cut it because...?
19:32:06 <Pseudonym> Because of modules.
19:32:11 <Riastradh> ...?
19:32:31 <Pseudonym> Determining the types of the exported symbols of module A may in general require knowing the types of symbols which other modules export.
19:32:40 <Pseudonym> e.g. symbols which module A imports
19:32:41 <Riastradh> Yes, so...?
19:32:57 <Pseudonym> So you can't generate an interface to module A without first generating an interface to module B.
19:33:11 <Riastradh> So...?
19:33:27 <Pseudonym> So you can't generate a .hi file from A.hs alone.
19:33:31 <Pseudonym> You may also need B.hi.
19:33:37 <Pseudonym> Which may in turn need A.hi.
19:33:37 <Riastradh> ...oh, that's what you meant.
19:33:40 <Riastradh> What's wrong with that?
19:33:42 <Pseudonym> If there's recursive imports.
19:33:48 <Pseudonym> Hence the .hi-boot file nonsense.
19:33:52 <Riastradh> So don't allow recursive imports.
19:34:09 <Pseudonym> OK, so you've solved one problem, but you still don't have separate compilation.
19:34:25 <Riastradh> ...??
19:34:25 <Pseudonym> Because you need to compile the files in topologically sorted order.
19:34:39 <Riastradh> Or at least infer their types.
19:34:41 <Pseudonym> And recursive modules are generally considered a good thing.
19:34:46 <Riastradh> ...in topologically sorted order.
19:34:51 <Riastradh> By whom?
19:34:54 <Pseudonym> Yes, but that's not "separate compilation".
19:35:17 <Riastradh> What is separate compilation, then?
19:35:17 <Pseudonym> Riastradh: By people who write code that would otherwise involve huge modules. :-)
19:35:26 <dons> yep. ref. ghc
19:35:43 <Pseudonym> Separate compilation is the ability to compile modules separately.
19:35:52 <Cale> It's nice to be able to split compiles across lots of machines. :)
19:36:16 <Pseudonym> If compiling module A requires having module B partially compiled already, then it's not separate.
19:36:36 <Riastradh> So it's not _completely_ separate; what's wrong with that?
19:36:51 <Pseudonym> Because make -j should work.
19:37:20 <dons> well, --make gives you your ordering. so we could add -j support to ghc --make I guess
19:37:31 <Riastradh> Why not just make it smarter so that it would generate one job for every module that may be compiled as each module becomes compiled?
19:38:02 <Pseudonym> That sounds like a make solution to a language problem to me.
19:38:17 <Riastradh> Why is it a language problem?
19:38:21 <Pseudonym> I want to minimise the amount of time I have to wait for a make to complete.
19:38:37 <Pseudonym> Because as a programmer, my time is worth money.
19:38:48 <Pseudonym> And time I'm waiting for a compile to complete is time that I'm not working.
19:39:02 <Pseudonym> (More or less.)
19:39:14 <Riastradh> Or you could be working on something else.
19:39:30 <Pseudonym> Yes, I could pay for two context switches.
19:39:40 <Pseudonym> Generally speaking, I'm compiling for a reason.
19:39:47 <Pseudonym> e.g. I just made a modification which I now want to test.
19:40:01 <Riastradh> But really, have you measured a significant difference between a constant number of modules being compiled at once and a number of modules being compiled at once that increases to that constant?
19:40:03 <Pseudonym> Switching the context out, doing something else, then paging it back in to do the test is expensive.
19:40:30 <Riastradh> If you're doing that sort of thing, why are you recompiling the whole project?
19:40:39 <Pseudonym> I'm not, necessarily.
19:40:47 <Pseudonym> It may only require recompiling one "directory".
19:41:23 <Pseudonym> Generally speaking, there usually aren't mutually recursive dependencies between "directories", for lack of a better word.
19:41:59 <Pseudonym> I have measured a difference between compiling a small number of modules at once compared with a large number at once.
19:42:02 <Pseudonym> If that's what you meant.
19:42:26 <Pseudonym> Requiring a compile in topologically sorted order puts an effective cap on the parallelism of a build.
19:44:39 <Pseudonym> Lunch.
19:44:41 <Riastradh> Have you measured a very significant difference?
19:44:54 <Riastradh> The difference of which you spoke earlier wasn't necessarily what I was talking about.
20:41:36 <Pseudonym> Riastradh: What difference were you talking about?
20:42:12 <Pseudonym> I've found that wrt compile times, there are two things in order which are important.
20:42:17 <Pseudonym> 1. Time from start to finish.
20:42:20 <Pseudonym> 2. Predictability.
20:42:23 <Riastradh> The difference between compiling a constant number of modules at once and a number of modules that increases to that constant.
20:42:34 <Pseudonym> Why would it increase to that constant?
20:43:02 <Riastradh> Because as one module, upon which several depend, is compiled, those several may now be compiled.
20:43:18 <Riastradh> s/as one/after one/1
20:43:27 <Pseudonym> I think it depends how you structure your code.
20:43:56 <Pseudonym> I find, for example, that "foundation" modules are often very close to linear in their dependencies.
20:44:58 <Pseudonym> For example, you have a "basic" module which everything imports indirectly.
20:45:27 <Pseudonym> Then you might have one or two "quite basic" modules (e.g. the GHC identifier module) which a lot of things depend on.
20:45:29 <Riastradh> So that one is compiled first, which enables many more to be subsequently compiled.
20:45:46 <Pseudonym> No, because the "many more" will in general depend on other modules as well.
20:46:30 <Riastradh> If those 'other' modules didn't depend on the 'basic' module -- if they did, they'd fit into those 'many more' --, then they could be compiled concurrently with the 'basic' module.
20:47:40 <Pseudonym> In reasonable sized applications, there tends to be one or two modules which everything imports indirectly.
20:47:51 <Pseudonym> And then there are one or two modules which almost everything imports.
20:47:58 <Pseudonym> And the one or two more which quite a few modules import.
20:48:05 <Pseudonym> And so on, for all of the "foundation" modules.
20:48:27 <Pseudonym> The point where that stops is usually the application's central data structure.
20:48:44 <Pseudonym> After that, you can think about compiling things in parallel.
20:48:57 <Pseudonym> But before you get to that point, there's a lot of almost sequential dependencies.
20:49:05 <Pseudonym> And, of course, there are often recursive dependencies.
20:49:13 <Pseudonym> Especially around the central data structures.
20:52:28 <Pseudonym> And there are always, IME, a few "bottleneck" modules higher up than that.
20:52:48 <Riastradh> Most of those early modules rarely need to be recompiled.
20:53:01 <Pseudonym> It depends, actually.
20:53:23 <Pseudonym> There's more call for them to be recompiled in a "modern" language where you need intermodule optimisation for the program to be practical.
20:53:50 <Pseudonym> If you touch the internals of one module, it often causes a huge recompilation.
20:53:54 <Riastradh> Why does the program need to immediately be uberfast during development?
20:54:14 <Pseudonym> It doesn't need to be uberfast, but it does need to be practical.
20:54:48 <Pseudonym> Maybe it's just me, but I do work on stuff that's timing sensitive.
20:58:04 <Pseudonym> And of course when you do touch "foundation" modules, you tend to do it in bursts.
20:58:39 <Pseudonym> A module might be in high flux for a while, while you're developing on it, and then it becomes stable and you don't touch it for months.
20:58:55 <Pseudonym> And then you need something else and you're constantly changing it for a day or two.
21:05:06 <dons> you could always work inside ghci if recompilation times are a serious issue
21:05:07 <sazzle>     /w 2
21:05:09 <sazzle> oops
21:05:11 <dons> hehe
21:06:07 <Pseudonym> :-)
21:22:06 * juhp wonders what the cabal license is going to be?
21:22:12 <juhp> has that been discussed?
21:22:51 <juhp> I was actually about to send a mail but thought I'd ask here first
21:25:29 <juhp> well, guess I'll just press send :)
