01:04:08 <kaol> hmm. My code started to make more sense, once I put some Maybe monads in it. Cool.
01:11:34 * sazzle finds the fact that half the examples shipped with HaXml don't work a little annoying
01:15:04 <kaol> I'm doing a function, that does sh-like brace expansions. That is, expand "a{b,c}d{e,f}" = ["abde", "abdf", "acde", "acdf"].
01:16:40 <kaol> The first set of braces in a string expands nicely already and having the rest expanded too needs still one map and fold
01:17:24 <kaol> I'll have to just figure where to put them, to avoid a pesky infinite recursion.
01:17:29 <kaol> Fun stuff.
01:31:50 <TheHunter> good morning, #haskell
01:33:21 <stefan_> morning, hunter
02:11:24 <shapr> good morning #haskell!
02:11:37 <TheHunter> @hello
02:11:37 <lambdabot> Hello world. 
02:16:02 <shapr> what's going on?
02:18:21 <shapr> god morgon Lemmih, läget?
02:28:13 <kaol> I've my own brace expansion imitation now, and it only took 8 times fewer lines than bash's implementation in C. :-)
02:29:02 <kaol> It's still missing some special cases that bash handles, but those won't add that much length.
02:29:25 <kaol> LOC is a meaningless meter, but I think that's still impressive.
02:31:11 <shapr> wow, nifty
02:35:24 <earthy> LOC actually is not that meaningless
02:35:37 <earthy> it is flawed, but not meaningless
02:35:37 <shapr> especially when it's '8 times'
02:35:47 * earthy nods
02:35:55 <earthy> 8 times difference in LOC still is significant
02:36:13 <earthy> that's like almost an order of magnitude
02:47:19 * kaol wonders if he'll ever learn to not write haskell eight times slower than C, too
02:47:36 <kaol> ok, I exaggerate a bit
02:50:18 <shapr> :-)
02:50:30 <shapr> I usually write Haskell a lot faster than Java
02:50:59 <blackdog_> are we talking words per minute or thoughts per minute?
02:51:52 <kaol> haskell has certainly a lot better thoughts per words ratio than Java
02:51:54 <shapr> let's see, three years of writing Haskell, and Java since 1995 or 1996...
02:52:14 <shapr> I can confidently say that it takes less time to learn to write Haskell.
02:53:21 <blackdog_> hey, any generic gurus on here? I've been reading the "scrap your boilerplate" paper, and i was wondering if it's possible to write a partial function over a datatype and have the generic stuff do something sensible with the other cases...
02:53:24 <ibid> languages that are learnt later usually are learnt faster, regardless of language
02:53:52 <kaol> considering that this brace expansion function is the first thing I've done after the initial hello worlds, I'd say I'm doing pretty well
02:54:00 <blackdog_> Not true - German took me years longer than English, and I'm still terrible at it. :)
02:54:17 <ibid> blackdog: i'm talking programming languages :)
02:54:32 <ibid> blackdog: natural languages are quite different, they should be learned young
02:55:05 <blackdog> *grin* yeah, I know. although the comparison can be fun. "Haskell: the Esperanto of the computer world!"
03:09:07 <stefan_> blackdog: that's what the boilerplate stuff is all about
03:11:14 <stefan_> blackdog: although ... mmm, let my digest ... a *partial* function ... mmm ... that might be tricky
03:12:25 <blackdog> stefan_: That's what I thought, but I'm having some trouble applying it - if I have a datatype "data Foo = Base | F Foo | G Foo Foo", can I write a function that works on 'F x' only?
03:12:37 <cm> der herr ist groß!
03:16:16 <stefan_> blackdog: a more or less related (I guess) problem was discussed here: http://www.haskell.org//pipermail/haskell-cafe/2004-June/006257.html with Ralf Laemmel suggesting a boilerplate solution here: http://www.haskell.org//pipermail/haskell-cafe/2004-June/006291.html
03:17:34 <stefan_> blackdog: I'm not sure if it'll fit your needs for I haven't dived in too much yet ... it uses stuff from the second boilerplate paper, though: 'Scrap More Boilerplate'
03:19:30 <blackdog> Ok. Thanks stefan, i'll check it out.
03:20:29 <stefan_> blackdog: furthermore, constructor cases in Generic Haskell do want you want, but I'm not sure whether they were included in the last public release ...
03:52:51 <musasabi> implemented a fast serializable Int -> PackedString collection ^_^
03:53:52 <musasabi> now to test it...
04:47:00 * shapr hops
04:47:57 <Cale> http://www.cas.mcmaster.ca/~kahl/HOPS/
04:48:39 <shapr> :-)
04:48:45 <Cale> :)
04:48:51 <shapr> that looks really nifty
04:49:25 <shapr> I've been thinking of a lot of the tetris-style games as set of term-rewriting rules.
04:49:27 <Cale> yeah, it's quite fun to watch it do reductions
04:51:09 <shapr> I can't see the constant space animation
04:52:14 * shapr apt-get's stratego
04:56:42 <shapr> I have a modelling question: I'm trying to implement the Planning patterns from Martin Fowler's "Analysis Patterns" book; He has a superclass Action with two subclasses, ProposedAction and ImplementedAction. I've written that as two separate constructors for an Action type, but I'm not sure how to implement some of the other bits then.
04:57:21 <shapr> for example, an action can go from ProposedAction to ImplementedAction, but from there only to SuspendedAction, nowhere else.
04:57:31 <shapr> or CompletedAction
04:58:09 <shapr> maybe I should have a data ActionState = Proposed | Implemented | Suspended | Completed  ?
04:58:53 <Cale> depends how much data is common in them
05:00:11 <Cale> you could hide the data constructors and only provide functions in your module which perform the specified transitions
05:00:26 <shapr> that's a good point.
05:31:52 * shapr boings
05:32:28 <thebug> *bing*
05:32:33 <shapr> hiya thebug 
05:32:38 <thebug> hello shapr 
05:33:04 <shapr> I wonder how I could save the history of an Action, like when it was proposed, when it was started, that sort of stuff.
05:49:09 <shapr> konichiwa ikegami--
05:49:20 <shapr> how's code?
05:49:49 <ikegami--> helo
05:50:36 <ikegami--> today, i saw the runtime loding module with GHC
05:51:58 <shapr> cool, what do you think?
05:53:03 <ikegami--> we have to add some plugin system into our Haskell software
05:53:48 <ikegami--> http://www.algorithm.com.au/wiki/hacking/haskell.ghc_runtime_loading
05:54:18 <ikegami--> this runtime loading module is simple, but seems useful
05:55:10 <shapr> Don Stewart extendend that runtime loader in hs-plugins .
05:55:54 <ikegami--> wow
05:58:41 <ikegami--> (looking for don's library with Google now)
06:03:22 <ikegami--> ok, I find
06:03:47 <ikegami--> FYI: http://www.cse.unsw.edu.au/~dons/hs-plugins/paper/
06:06:22 <ikegami--> hm, it looks just fitting our project
06:06:37 <ikegami--> thanks :)
06:07:19 <Lemmih> shapr: lget?
06:07:56 <shapr> short for "hur läget?"
06:09:44 <Lemmih> "hur lget"?
06:10:17 <shapr> la"get
06:10:24 <shapr> it's svenska for "how's it going?"
06:10:38 <Lemmih> Oh (-: Jeg har det godt.
06:11:08 <shapr> :-)
06:11:18 * kaol wishes I could bribe someone to do my compulsory university course in swedish for me. I like learning human languages a lot less than computer ones.
06:11:31 <shapr> svenska är kul!
06:11:44 <shapr> suomea olen spiffy.
06:11:45 <shapr> :-)
06:11:57 <shapr> oli?
06:12:03 * shapr shrugs
06:14:15 <ikegami--> yeah, I have to learn swedish too
06:14:27 <shapr> why?
06:14:55 <ikegami--> because I'll visit sweden this autumn! 
06:15:01 <shapr> cool!
06:15:17 <ikegami--> for consulting our Haskell software 
06:15:40 <shapr> nifty
06:15:50 <shapr> will you be going to Chalmers?
06:15:58 <ikegami--> yes, that's right
06:16:42 <shapr> what does your software do?
06:17:53 <ikegami--> theorem prover
06:18:28 <shapr> neat
06:20:34 <ikegami--> however, it is a little problem that i don't know any swedish words, without "Cheers!"
06:20:46 <ikegami--> skall? skoll? I know the pron only
06:21:05 <shapr> skål
06:21:09 <shapr> pr0n words?
06:21:20 <shapr> I don't think I want to know.
06:21:40 <ikegami--> aha
06:23:51 <Cale> shapr: perhaps he means pronunciation
06:24:00 <shapr> there must be a better way to write state diagrams than this.
06:24:06 <kaol> Swedes talk all english, but my teachers have never liked that argument, somehow.
06:24:21 <shapr> I agree with your teachers.
06:24:31 <ikegami--> interesting
06:25:01 <shapr> I think it's good to learn as much of the language of a place you visit as you are able to do.
06:25:12 <shapr> Then you understand more about the people and the place.
06:26:43 <ikegami--> definitely
06:33:53 <kaol> skål in japanese is kampai, and svenska är kul -> suomi on kivaa
06:34:44 <kaol> but never mind me, I'm still resenting that I'm being forced to learn a language I see little use for personally.
06:38:02 <ikegami--> yes, kampai
07:02:16 <musasabi> How do I "readFile" from stdin ?
07:04:07 <musasabi> getContents ^_^
07:14:13 <SyntaxNinja> musasabi: did you answer your own question?
07:17:04 <SyntaxNinja> musasabi: look at functions like hGetContents (the 'h' is for 'handel')
07:17:37 <SyntaxNinja> or Handle maybe, we're not sure yet.
07:18:03 <SyntaxNinja> <----- classical musician
07:26:25 <musasabi> SyntaxNinja: yes, found it.
07:28:56 <Igloo> http://antarctica.mt.ut.ee/~kool42/mine.cgi - WASH minesweeper!
07:31:02 <SyntaxNinja> I'm sure it's not Haskell's fault that it's so slow...
07:32:05 <Igloo> How slow is it? I suspect it's the connectivity's fault
07:32:58 <SyntaxNinja> hm. nothing has come up yet.
07:32:59 <Igloo> It takes under a second to give the new page here
07:33:11 <Igloo> Oh, nothing at all? I wonder if it's internal only
07:33:42 <SyntaxNinja> timed out.
07:52:39 <Igloo> http://userpc15.comlab.ox.ac.uk:81/cgi-bin/ig/mine.cgi should work
08:31:51 <Maddas> Igloo: Works
08:32:18 <SyntaxNinja> yeah, here too
08:54:43 <RussellOConnor> Bool is an instance of Ord
08:54:46 <RussellOConnor> That makes me so mad.
08:55:51 <Lemmih> Why is that?
08:55:52 <Smerdyakov> Why?
08:56:22 <roconnor> False < True make no sense.
08:56:37 <roconnor> s/make/makes
08:56:56 <Smerdyakov> Well, if you are in a situation where you want an order, it probably makes enough sense.
08:59:00 <roconnor> Ah
08:59:03 <roconnor> Even LT < GT
09:00:27 <musasabi> lazy evaluation sometimes brings candies...
09:00:55 <musasabi> "maybe I should change the datastructure so that parts are loaded only on demand."
09:01:06 <musasabi> then look at haskell and see it actually doing it ^_^
09:04:49 <det> roconnor: it it wasn't an instance of ord you couldnt stick it in datastructures requiring an Ord (Trees, etc)
09:05:07 * Smerdyakov chuckles.
09:05:12 <Smerdyakov> Tree of booleans. Wee.
09:06:42 <Lemmih> Huffman trees?
09:07:35 <Smerdyakov> We are talking about trees that use booleans as keys, which leaves us with only 7 possible trees, if keys are unique.
09:09:42 <det> :)
09:09:46 <Riastradh> It could be a trie of bit strings.
09:10:39 <Smerdyakov> Having an order doesn't help much in that case, with only 2 elements.
09:10:47 <Smerdyakov> It probably even slows things down.
09:11:43 <det> how would you do it without order?
09:11:56 <Smerdyakov> Equality comparison
09:12:35 <det> you still need an order to know which subtree to use if not equal
09:13:12 <Smerdyakov> No, you can store the subtrees as a list of (edge-key, tree) pairs.
09:14:07 <det> what would the datatype for such a structure look like?
09:14:43 <Smerdyakov> data Trie a b = Trie [(a, Trie a b)] b
09:19:06 <det> well, then that wouldn't be a trie :)
09:19:12 <Smerdyakov> Why not?
09:21:53 <det> How does such a structure even terminate?
09:24:17 <Riastradh> Trie [] <value>
09:24:27 <det> oh, right
09:30:30 <det> is it really supposed to be parametized by two types?
09:30:47 <Riastradh> Yes, the type of elements of the key list and the associated values.
09:30:48 <Smerdyakov> Yup. The type of keys (which are lists) and the type of values.
09:31:55 <det> oh, we are talking about Map rather than a Set
09:32:31 <Riastradh> b would just be Bool for sets.
09:35:58 <det> so, the list size would never exceed 2?
09:36:16 <Riastradh> In tries where a is Bool, yes.
09:39:21 <goron> test: trees
09:39:33 <goron> Riastradh: I am getting tries instead of trees...
09:40:28 <Riastradh> Yes, and that's what we're saying...
09:42:03 <det> oh, I see now
09:44:35 <det> For a Bool you would just stick it as the second element if it was not equal, otherwise, you would need a comparison to insert into the list?
09:56:21 <shapr> jetz ist abba feierabend
09:56:24 <shapr> !
09:56:48 <shapr> hi roconnor, who are you?
09:57:43 <shapr> oh, you must be RusselOConnor going under a Pseudonym
09:57:44 <Riastradh> The 'r' stands for Russell, shapr.  That might give you a clue.
09:58:02 <shapr> that was too easy
09:59:38 <shapr> anyone else here read Martin Fowler's 'Analysis Patterns' ? I'm trying to port the Planning Patterns to Haskell. I'm not sure I've done a good translation from OOP into FP.
10:00:48 <shapr> any comments? -- http://www.scannedinavian.org/~shae/ProtoPlanning.hs
10:01:42 <shapr> I haven't thought of a simple way to implement the limited transitions of an Action from Proposed to Implement to Completed or Suspended etc
10:01:48 <shapr> any suggestions?
10:02:02 <shapr> makes me think of multimethods
10:06:35 <shapr> I wish it were easier to dispatch by constructor.
10:08:32 <shapr> hiya maihem 
10:11:43 * Lemmih wonders why shapr is so hyperactive.
10:12:39 <shapr> Lemmih: hardware
10:13:06 <shapr> I'm naturally much more hyperactive than what you normally see on #haskell.
10:14:34 <Lemmih> Btw, I've been thinking of 'gears' for unicycles.
10:14:55 <shapr> there do exist some designs for such, but I've never seen one mass produced.
10:16:22 <Lemmih> Do you know why?
10:16:58 <Lemmih> Are they too expensive or too large/clumsy?
10:17:09 <shapr> I'd guess it's because most of the designs I've seen used in-hub gearing systems, and the many small precision parts were too expensive.
10:17:51 <shapr> I haven't seen any systems that tried to use a geared rim, I wonder if that would allow lower precision parts.
10:18:23 <shapr> Lemmih: if you come up with some good ideas for geared unicycles, I'd love to hear about it.
10:19:04 <shapr> I've thought of way to make in-hub gearing, but it seems deceptively easy, there must be something wrong with it :-)
10:19:12 <thebug> been unicycling much lately shapr? ;)
10:19:24 <shapr> not today or yesterday
10:19:29 <shapr> it's getting cold out there.
10:19:54 <Lemmih> Man, I hate it when my english is failing me /-:
10:20:03 <shapr> feel free to explain it with danish
10:20:55 <Lemmih> tandhjul?
10:21:02 <shapr> yes, a toothed wheel
10:21:52 <Lemmih> I've made a design consisting of 3 large toothed wheels.
10:22:10 <tic> hey, any maths/algebra pro's?
10:22:13 <shapr> how is it organized?
10:22:18 <tic> mathbot, help
10:22:23 <tic> err. wrong channel.
10:22:30 <maihem> heyho shapr
10:22:49 <Lemmih> And I'm planning to explore it's possibilities as a school project.
10:22:58 <Lemmih> *its
10:23:23 <shapr> can you draw it?
10:23:48 <Lemmih> Heh I can try (-: I'm not very good with Gimp.
10:24:00 <shapr> try it with sodipodi then
10:29:57 * shapr resumes being left-handed
10:31:01 <andersca> are you left handed shapr?
10:31:31 <shapr> usually.
10:31:39 <shapr> I've been right-handed for a few months though.
10:31:53 <andersca> oh, ok
10:34:17 <Lemmih> Kugleleje?
10:34:39 <shapr> what's that?
10:35:56 <shapr> bah, must exit X to fix my mouse handedness
10:36:49 <Lemmih> Those that makes it possible to attach the frame to the wheel.
10:37:03 * Lemmih finds his dictionary.
10:37:56 <Lemmih> Ball-bearing is it called.
10:39:31 <Marvin--> varning: use of cast expressions as lvalues is deprecated
10:39:33 <Marvin--> crud
10:39:36 <Marvin--> stupid pyrex
10:44:51 <thebug> when I see a .lhs file, is the 'l' 'Literate', 'LaTeX', or something else?
10:45:17 <Lemmih> literate.
10:45:27 <thebug> thanks :)
10:49:57 <det> thebug: lamer, because only lamers use literate haskell.
10:51:38 * Lemmih looks at det and wonders if he's joking...
10:52:34 <det> :)
10:56:35 <pesco> Hello.
10:56:39 <Lemmih> Hey pesco 
10:57:15 <pesco> Moin. Interested in giving me some API feedback for the command line parser I wrote?
10:57:24 <Lemmih> Sure (-:
10:57:43 <pesco> Hold on, lemme distill out the API...
10:57:50 <Lemmih> Got it haddock'ed somewhere?
10:58:14 <pesco> No haddock. I'ts a prototype scratch implementation that will be replaced.
10:58:54 <pesco> I'll just pull the type public signatures together and put the source on the Web.
10:59:02 <Lemmih> OK.
11:00:01 <musasabi> Is cabal ready for packaging small simple libraries (or what should be used)?
11:01:22 <Marvin--> musasabi: sure
11:01:34 <Marvin--> musasabi: and if it doesn't work, we'd be interested in knowing that :)
11:05:13 * musasabi tries to use it for a trivial package
11:14:09 <Lemmih> pesco: Sleeping?
11:14:22 <pesco> No no, typing in some quick instructions.
11:17:50 <palomer> hrm
11:18:18 <palomer> it seems that to transform a modern day regexp into something computable you need to use 2 DFAs, correct?
11:18:45 <Lemmih> pesco: I'm gonna unicycling a little now. /-: But I would love to check you library when I get back (30-60 minutes from now).
11:18:58 <pesco> Ok, no prob. Have fun.
11:33:57 <pesco> http://www.scannedinavian.org/~pesco/code/Cmdline/Prototype.hs
11:34:01 <pesco> feedback appreciated.
11:47:23 <mattam> palomer: what's the second dfa's for ?
11:50:07 <palomer> mattam: start of input, start of file, end of file
11:51:06 <mattam> start of input and start of file are the same right ?
11:51:49 <mattam> recognizing start and end is no problem, just add two chars disjoint from the alphabet
11:51:51 <thebug> mattam: not always
11:52:09 <mattam> add another one for start of input if you like
11:52:46 <mattam> well, in GNU regexp you only have 'beginning of line'
11:53:35 <palomer> mattam: adding two chars?
11:53:49 <mattam> two symbols
11:53:56 <palomer> the dfa defaults to the garbage state when there's no state to go to
11:54:10 <mattam> yes
11:54:25 <palomer> so it gets the start of file symbol and the string isn't accepted
11:54:32 <palomer> besides, I'd like it to work with any stream
11:56:26 <mattam> the string can be accepted too, that depends on the string!
11:57:45 <mattam> if your string is "blabla" and your regexp is "{start-of-input}.*", it should match right ?
12:02:45 <mattam> oh nm, i think i got why you use a second dfa
12:03:57 * Lemmih is back.
12:06:08 <Lemmih> pesco: You don't like the GNU GetOpt?
12:13:20 <palomer> hrm
12:13:28 <palomer> I think I'll just invent an extended DFA
12:14:13 <Riastradh> Why don't you just use a more powerful model of computation?
12:18:37 <palomer> I think an extended DFA would work, no?
12:22:44 <palomer> (why would I want a more powerful model of computation)?
12:23:17 <Riastradh> Let me rephrase: why don't you use a less restricted method of parsing?
12:27:10 <palomer> Riastradh: hmm?
12:28:28 <Riastradh> Why are you using regexps?
12:28:44 <palomer> oh, I want to create a regexp engine
12:28:53 <Riastradh> But why?
12:28:57 <palomer> something to do
12:29:08 <Riastradh> Why not do something more useful?
12:29:22 <palomer> I'd gladly do something more useful
12:29:28 <palomer> (if it's as interesting)
13:06:50 <palomer> is there a concensus as to what a DFA should do when encountering a (state,pair) for which there is no transition?
13:17:03 <norpan> there should be a transition for every symbol
13:17:06 <norpan> :)
13:17:14 <norpan> a transition to the FUCKED UP state
13:23:49 <pesco> Lemmih: Of course not, that's a C library! ;-)
13:45:25 <Marvin--> palomer: isn't that what's referred to as a stuck configuration?
13:48:11 * palomer wouldn't know
13:57:03 <jesse99> i think blocked is often used
13:57:58 <jesse99> ie the FSM either accepts the input or blocks and refuses to accept any furthur input
14:03:51 <palomer> the latter is pretty standard, right?
14:04:15 <jesse99> as far as I remember (which isnt saying much)
14:04:31 <jesse99> why do you care what's "standard"?
14:05:25 <palomer> it's best to stick with what's done when trying something new
14:06:55 <jesse99> i doubt there's really a One True Way to handle state machines
14:07:40 <jesse99> you might want to look at UML though, it allows specifications of FSMs (altho it may call them state charts)
16:47:37 <shapr> yow!
16:49:56 <shapr> how's code?
16:52:57 <SyntaxLaptop> hi shapr
16:53:24 <shapr> jetz ist abba feierabend!
16:53:36 <shapr> um, hi SyntaxLaptop 
16:53:47 <SyntaxLaptop> erum... y0
16:53:48 <shapr> y0 pesco 
16:53:57 * shapr boings randomly
16:53:59 <pesco> yo shapr
16:54:40 <pesco> I'm not getting this. If I am to put up a website, what sort of motivation would I have to use XHTML?
16:54:48 <shapr> I don't know.
16:54:54 <shapr> I've been thinking about XUL myself
16:55:05 <pesco> What's that!?
16:55:05 <shapr> as in, WASH is pretty irritating, even though it has cool bits.
16:55:19 <shapr> do you use firebird or galeon or some mozillish browser?
16:55:30 <pesco> firebird
16:55:49 <Cale> hehe, It's called firefox now :)
16:55:56 <pesco> whatever
16:55:58 <shapr> ok, check out http://mab.mozdev.org/
16:56:10 <Riastradh> 'That newfangled Mozilla junk.'
16:56:28 <shapr> specifically, try this: http://www.faser.net/mab/chrome/content/mab.xul
16:56:34 <shapr> I think that'll work.
16:57:56 <pesco> Cool.
16:58:15 <shapr> you can build real web GUIs now.
16:58:28 <shapr> but there's not any flavor that works the same with both moz and MSIE
16:58:47 <pesco> Who invented that?
16:58:58 <shapr> I'm not sure.
16:59:19 <shapr> I know it's been gaining momentum lately. Longhorn promised to use an XML based GUI throughout
17:00:14 <shapr> java and glade can use XML to describe a gui
17:02:35 * shapr thinks about generating XUL with Haskell
17:03:22 <shapr> I wonder if it would work...
17:03:26 <pesco> Wtf. Can't these people get it right? "Use serif fonts by default."
17:05:34 <shapr> ?
17:05:41 <pesco> xulplanet.com
17:05:58 <Cale> hm?
17:08:17 <Cale> You're complaining that the fonts there aren't serifed?
17:08:28 <pesco> Serif fonts are readable. Sans serif fonts are placative. Ergo, use sans serif only where you know what you're doing. Unfortunately, people don't seem to be educated properly in regards to proper typesetting.
17:09:41 <Cale> I find that at least on screen, sans-serif fonts are fairly readable too. :)
17:10:45 <Cale> often moreso at low resolutions
17:10:59 <pesco> As far as I've heard, Fraktur is even better to read (objectively).
17:11:01 <pesco> Ack low resolution.
17:13:31 <Cale> also, you could just set the font used to a serif one if you like that better :)
17:14:25 <pesco> Tried that. Hell breaks lose if you start forcing font settings on other people's webpages.
17:14:29 <pesco> In short.
17:15:34 <Cale> well, at least for xulplanet, they're only specifying "sans-serif", so the usual browser setting will catch that.
17:16:12 <pesco> I'm not going to set my "sans serif" font setting to a serif font, if that's what you're suggesting.
17:19:11 <shapr> g'day Pseudonym 
17:19:22 <Pseudonym> G'day.
17:19:34 <shapr> developer release worked?
17:21:14 <Pseudonym> Dunno yet.
17:32:40 <shapr> hiya karingo 
17:33:56 <karingo> hi
17:34:01 <shapr> how's code?
17:37:23 <karingo> Still trying to define what exactly I am building; but I can tell you this it is an entirely new world.
17:37:34 <shapr> the world of functional programming?
17:38:00 <shapr> hi carlossch, looking for Haskell info?
17:39:04 <carlossch> just hanging out and trying a new irc client, actually.. :) but thanks
17:39:16 <shapr> ok, if you have any questions, feel free to ask.
17:41:54 <karingo> shapr: languages are incidental; their usage is circumstantial, but the paradigms which exist apart from them are techniques to be used when advantageous.
17:42:06 <shapr> sure, I agree.
17:44:49 <karingo> Some languages are more supportive of certain paradigms, but that does not preclude the use of other paradigms.
17:44:50 <arauko> ( \(x::Int) -> x * x) , any problem wiht it?
17:45:13 <shapr> karingo: you've found a new paradigm?
17:45:19 <shapr> arauko: looks okay to me
17:45:47 <Pseudonym> I'd go further.  Every decent language is multi-paradigm.
17:46:01 <Pseudonym> (This is a necessary, not a sufficient, condition.)
17:46:35 <jesse99> lot of people think smalltalk is decent and that is single paradigm
17:46:54 <Pseudonym> "Decent" is relative, of course. :-)
17:47:18 <carlossch> jesse99: blocks (is that what they're called? the closure thingies) pretty much make the language, IMO
17:47:21 <Pseudonym> Personally, I don't think smalltalk is decent, but that's probably just me.
17:47:32 <arauko> Pseudonym, why not?
17:47:34 <shapr> smalltalk has an Image problem.
17:47:40 <arauko> shapr, it doesnt work here....
17:47:41 <carlossch> i'd say that every language with first-class closures can be twisted into being a decent one
17:47:46 <Pseudonym> The point being that in any large application you need to use multiple paradigms.
17:48:09 <Pseudonym> The language either must support them natively, or otherwise support the abstraction mechanisms to fake them convincingly.
17:48:19 <arauko> not always
17:49:03 <arauko>     Illegal signature in pattern: Int
17:49:03 <arauko> 	Use -fglasgow-exts to permit it
17:49:11 <arauko> how do i pass that option to ghci?
17:49:19 <shapr> :set -fglasgow-exts
17:49:25 <arauko> thanks
17:50:00 <Pseudonym> First problem with smalltalk: It could do with stronger types.  Strongtalk is better in this respect.
17:50:15 <arauko> why?
17:51:26 <Pseudonym> arauko: Was that directed at me?
17:51:56 <arauko> yeah, logn time ago, yes :-)
17:52:04 <Pseudonym> OK. :-)
17:52:14 <Pseudonym> http://c2.com/cgi/wiki?IsSmalltalkComplete
17:52:31 <Pseudonym> I agree with Dan Ingalls' assessment about message protocols.
17:53:32 <arauko> i still dont see why smaltalk isnt a decent language 
17:53:49 <arauko> it has been one of the best language model for decades now 
17:54:00 <jesse99> me either, not like you cant point out missing features in every language...
17:54:20 <Pseudonym> First off, I'm using my own private definition of "decent".
17:54:32 <Pseudonym> Secondly, I have never tried to build anything large in smalltalk.
17:54:39 <arauko> does that word has several meanings? :-)
17:54:50 <Pseudonym> So it might actually provide the appropriate abstractions to simulate non-OO paradigms.
17:55:05 <jesse99> yeah, the "I can't define what is decent, but I know it when I see it" sort of definition
17:55:13 <arauko> oh, well, i think you should try it first, before to get a definition 
17:55:29 <Pseudonym> Having said that, I generally prefer more strongly typed languages for implementing large systems.
17:56:03 <arauko> i still dont see your point 
17:56:04 <Pseudonym> Of course, the general rule here is that almost every language is good for something.
17:56:35 <Pseudonym> I'm not sure that I have a point.
17:56:51 <carlossch> Pseudonym: if i understand correctly, the really interesting parts of smalltalk deal with metaclasses and similar? does strongtalk include those? sorry, i'm not familiar with strongtalk at all.
17:57:53 <Pseudonym> I believe it does, too.
17:58:29 <arauko> Pseudonym, i just thought you really knew smalltalk 
17:58:31 * Smerdyakov drops a meta-class out the window!!
17:59:14 <pesco> Ok. I've found the <pre> element. Now I'm starting to like HTML.
17:59:22 <arauko> so i wanted to know why you consider it decent 
18:01:43 <shammah> morning shapr :)
18:03:16 <Pseudonym> I only know a little smalltalk.
18:04:13 <Pseudonym> However, I think that my general rule is correct.  It's almost always true that any large program will require multiple paradigms.
18:04:44 <Pseudonym> Therefore, either your language supports those paradigms, or provides the abstraction mechanisms to do it, or you will have a hard time.
18:05:12 <karingo> You can always write an interpreter for a language which supports the desired paradigm in the language which is not.
18:05:34 <Pseudonym> This is true.  The non-embedded DSL approach.
18:06:08 <Pseudonym> And you may or may not be able to satisfy your performance requirements using this approach.
18:06:14 <Pseudonym> Depends how large the "primitives" are.
18:07:08 <Pseudonym> But yes, I'd agree with that.  IMO, it's the _only_ reason that some large applications have been implemented in C. :-)
18:07:41 <Pseudonym> Gotta go.  BBL
19:01:03 <ribbon> Hello -- anyone have any experience/thoughts/comments on writing cgi scripts in haskell?
19:01:29 <keverets> use WASH
19:01:45 <ribbon> I'll check that out
19:02:02 <keverets> It's quite handy.
19:03:59 <ribbon> The main thing that I'm trying to get out of this exercise is to be safe from buffer-exploits and the accidental sorts of security holes...
19:36:33 <shammah> ribbon: be aware that I don't believe WASH guarantees protection against injection attacks.
19:38:37 <ribbon> That's a hard thing to protect against -- one could do taint checking I suppose...
19:40:00 <Smerdyakov> ribbon, see http://smlweb.sf.net/
19:40:24 <ribbon> I was more thinking along the lines that a haskell program could not interact with the machine it was running on, by default, as a secure starting point for a cgi program.
19:40:33 <ribbon> Smerdyakov: Will do ~
19:43:02 <ribbon> Smerdyakov: SML programs can interact with the outside world by default? (It's been years since I use it :P)
19:43:34 <Smerdyakov> What is "the outside world"?
19:44:21 <Smerdyakov> Even better, what is "interacting with the outside world by default"?
19:44:26 <ribbon> The file system, the operating system, the internet, etc -- anything non-functional
19:44:44 <Smerdyakov> Sure, and it's much more intuitive than it is in Haskell.
19:45:17 <Smerdyakov> SML is just about the best choice for a general purpose programming language now, in my opinion. It's not a toy. It does whatever a less-informed programmer would use C++ for.
19:45:57 <ribbon> I remember dumping it for haskell because I couldn't easily get big number support :)
19:46:15 <Smerdyakov> The SML Basis standard includes "big number support" since 2002.
19:46:48 <ribbon> It's been a while for me ~
19:48:18 <ribbon> I was after something that where one needed to explicitly enable interaction with the outside world...
19:49:00 <Smerdyakov> This is much less common than you'd think, given current PL research directions.
19:49:16 <Smerdyakov> I'm not aware of anything but Java that has this feature, without explicit hacking on your part.
19:49:39 <ribbon> Java has this feature?
19:50:07 <Smerdyakov> Sure. Doing anything interesting in Java requires that a check against a custom permissions file be made.
19:50:28 <ribbon> hmmm
19:50:28 <Smerdyakov> So I guess .NET has this too, since they have stolen the Java infrastructure.
19:53:03 <ribbon> Is there, in java, a way to only give permissions to specific bits of the code?
19:53:04 <arauko> indeed ha
19:53:41 <Smerdyakov> Java is a mature platform backed by people with lots of money to throw around.
19:53:48 <Smerdyakov> It has anything reasonable to ask for in this area.
19:54:43 <Smerdyakov> (And that includes an answer of "yes" to your last question.)
19:55:39 <ribbon> Then I'd add it the list of languages to consider...
19:56:31 <ribbon> Although, atm I'm considering haskell.
19:56:50 <ribbon> (Then I'll probably consider prolog.)
19:57:29 <Smerdyakov> You don't need to use the Java language to use the Java platform.
19:58:01 <ribbon> True.
19:58:15 <Smerdyakov> Any safe language is going to support what you want, if you take the time to cut things out of the runtime system/standard library/etc..
19:58:39 <ribbon> That's the wrong way around for me.
19:59:06 <Smerdyakov> Aesthetic arguments like that don't do you much good in practical matters.
19:59:34 <ribbon> It's not a matter of aesthetics --
19:59:44 <ribbon> I remember writing a mail form script in php
19:59:44 <Smerdyakov> What's your code delivery model here? Are you going to have a trusted compiler, or will you receive the untrusted code as machine code?
20:00:17 <ribbon> I plugged all the holes I knew about in the languages to ensure that the script could not be exploited...
20:00:39 <ribbon> I the next revision of the language, they opened up another hole that needed to be plugged.
20:00:42 <ribbon> I=In
20:01:17 <ribbon> Smerdyakov: Personal project and personal paranoia :)
20:01:28 <Smerdyakov> What does that mean?
20:01:44 <ribbon> What does what mean?
20:01:49 <Smerdyakov> You will be the only one writing code, and you want to assure yourself that _you_ didn't screw up?
20:02:26 <ribbon> You've never written a program with bugs in them?
20:02:30 <ribbon> Some of them dangerous?
20:02:42 <Smerdyakov> All safe languages will avoid the truly insidious bugs.
20:02:50 <Smerdyakov> You don't need extreme sandboxing to get that.
20:03:39 <ribbon> But if I can have extreme sandboxing then I probably will.
20:03:47 <Smerdyakov> That doesn't make sense to me.
20:04:09 <Smerdyakov> No statically typed language is going to make it easy for quite unintended security-related stuff to happen.
20:04:20 <Smerdyakov> You are trusting the sandbox, anyway, even if you find a suitable platform.
20:05:00 <ribbon> This is not a matter of black-and-white, this is a matter of degrees
20:05:23 <Smerdyakov> I don't yet see that it's a matter of anything rational. :)
20:05:24 <ribbon> static typing does not solve all problems and yet somehow we find it useful.
20:05:31 <ribbon> (for example)
20:05:37 <Smerdyakov> You seem to be implying that PHP is representative of everything out there.
20:06:02 <Smerdyakov> In fact, PHP is a piece of trash. The scenario you gave will probably not appear in anything used by the sort of crowd we have here.
20:06:52 <ribbon> It's just a language I tried.
20:07:01 <ribbon> My other options were perl, c and python
20:07:13 <Smerdyakov> Nonetheless, you seem to be using your experience with it to explain why you don't want to use an out-of-the-box ML system.
20:09:07 <ribbon> If I can find and use something that is, in this particular case, better -- then why not?
20:10:37 <Smerdyakov> I think there is no practical effect of this "betterness."
20:10:52 <Smerdyakov> You are always trusting the compiler and runtime system to disallow nasty stuff.
20:11:21 <Smerdyakov> Ease of coding of working programs far dominates any "risk" coming from having system libraries linked in.
20:11:27 <ribbon> Just because I trust somethings, for now, does not mean that I must extend my trust to all things.
20:11:54 <ribbon> Smerdyakov: Your last point is worth considering.
20:12:27 <Smerdyakov> Perhaps you can explain the kind of security problem you are envisioning?
20:15:02 <ribbon> The box is mine, the cgi script is an interface on this box -- I'd like to maintain the integrity and confidentiality of the data in the box.
20:15:39 <ribbon> (the cgi script is also mine)
20:16:20 <Smerdyakov> I'm looking for a more detailed explanation of how you think using a particular compiler to develop a CGI program is any more likely to compromise those things than running the other software you use every day.
20:17:18 <ribbon> You tell me.
20:17:30 <Smerdyakov> I don't think it is, if the compiler is for an ML.
20:19:56 <Smerdyakov> If you can't provide the information I asked for, then why would you want to go through this whole song and dance?
20:21:51 <ribbon> I was talking about languages -- you were talking about compiler.
20:22:01 <Smerdyakov> The language and compiler are inseparable here.
20:22:06 <Smerdyakov> All security comes from the compiler.
20:23:34 <Smerdyakov> Clearly, if the language contains only the program "hi" and the compiler compiles this to delete your hard drive, you have a problem.
20:24:23 <Smerdyakov> You seem to be trying to apply a security point of view to a problem where you have no attacker model.
20:24:30 <Smerdyakov> This is a futile course of action.
20:25:45 <Smerdyakov> So, if you tell me what you're afraid someone will do and why you think the ML language/compiler will let him do this more easily, then maybe I can help!
20:26:39 * ribbon sighs
20:27:09 <Smerdyakov> Language-based security is my research area, BTW, so I can't let you off easy with vague paranoia. :P
20:27:26 <ribbon> Really?!
20:27:32 <ribbon> You have a webpage?
20:27:49 <Smerdyakov> http://www.cs.berkeley.edu/~adamc/
20:28:19 <ribbon> I was being to consider that you were a troll -- but I'll have to hold of that judgement for now :P
20:28:35 <ribbon> being=beginning
20:28:42 <Smerdyakov> Hm... you don't do research in PL or security, do you? :P
20:29:20 <ribbon> Nah -- I'm a graduate only
20:29:40 <Smerdyakov> What does that mean?
20:30:15 <ribbon> I have a BA in the field, and that I did not take my studies further.
20:30:45 <Smerdyakov> Ah. Are you in Europe? "A graduate" more likely means "a graduate student" 'round here.
20:31:12 <ribbon> Yep, UK.
20:31:16 <Smerdyakov> OK
21:03:36 <ribbon> Whoa, it's 5am here. I'm having a few difficulties writing down the risk I'm trying to tackle -- so I'll probably catch you another time, Smerdyakov.
21:03:49 <Smerdyakov> OK. Get a better time zone, while yer at it.
21:04:18 <Riastradh> 5 AM?  Either my clock is very wrong, or they've got daylight savings time or something activated.
21:04:33 <Riastradh> ...or my clock thinks they do, perhaps.
21:04:54 <Smerdyakov> Uh oh. Watch out if your clock refuses to close the pod bay doors.
21:05:36 <Riastradh> I'm not worrying.  I haven't forgotten my helmet.
21:06:49 <Riastradh> And I haven't forgotten my protein pills, either!
21:33:34 <Pseudonym> May God's love be with you.
21:50:48 <ozone> Smerdyakov: Necula is your supervisor, eh?  now a few things make more sense ...
21:51:16 <Smerdyakov> Like what?
21:51:25 <ozone> like your interest in language security
21:52:44 <Smerdyakov> But all the PL researchers in the USA are interested in language-based security. :)
21:53:36 <ozone> depends if you classify OO researchers as PL researchers, IMHO
21:54:16 <Smerdyakov> Yeahwell, most of the POPL crowd is at least interested in the subject.
22:50:04 <musasabi> morning
22:50:16 <shrimpx> i'm interested in language based security. =)
23:48:47 <skew> shrimpx: have you checked out E? I haven't, but it sounds relevant
