00:09:35 <musasabi> wasn't E the thing on top of java?
03:12:38 <musasabi> Is there really no function for returning the nth element of a list (!!) or Nothing i.e. get lst i = if i >= length l then Nothing else Just (l !! i)
03:17:10 <stefan_> musasabi: what's wrong with defining your own?
03:17:50 <musasabi> stefan_: I try to use standard libraries whenever possible and learn them.
03:18:19 <norpan> the standard libraries are small and arbitrary :)
03:18:33 <stefan_> musasabi: then, afaik, there is no such function
03:20:00 * stefan_ is going for lunch, so refrains from mentioning dependent types ;)
03:22:58 <goron> musasabi: You want myFunc::[a]->Maybe a?
03:27:14 <shapr> good morning #haskell!
03:27:45 <cptchaos> morning shapr
03:27:56 <shapr> how's code?
03:28:52 <cptchaos> well,  I am currently rewriting the parser of my High-Avaibillity Project
03:28:57 <goron> good afternoon ;)
03:29:19 <cptchaos> I hope I get this Project finished this summer 
03:30:49 <goron> http://www.linux-ha.org/?
03:31:55 <cptchaos> something similar, but a lot more configurable
03:33:12 <cptchaos> a year ago I got some trouble with that project, I looked at the code and thout I should write my own stuff
03:34:38 <cptchaos> an I code in Haskell of course :-), seems to me very HAlish
03:35:33 <musasabi> killed some nasty bugs in the serialisation code today..
03:36:10 <musasabi> the evil thing passed my tests but started to fail when datasizes grew over 10mb
03:42:53 <XTL> Hmm
03:51:31 * dnm waits for darcs 1.0 to ship
03:51:48 <dnm> RCs are for wimps! Push out the full version! ;]
03:53:08 <earthy> ;)
03:53:15 * shapr patches dnm with the "I enjoy RCs" changeset.
03:54:41 <shapr> :-)
03:55:05 <dnm> Heh
03:55:29 <shapr> dnm: how's code?
03:55:33 <shapr> written anything fun lately?
03:55:46 <dnm> Oh, probably not.
03:55:56 <dnm> I've been busy obsessing with this IP agreement stuff.
03:56:06 <shapr> ?
03:56:15 <shapr> what sort of IP agreement stuff?
03:56:17 <dnm> Which I think I've more or less come to a decision on.
03:56:31 <dnm> IP agreement as a condition of employment at this company I have an offer from.
03:56:35 <shapr> oh
03:56:43 <shapr> what's your decision?
03:56:50 <shapr> do they get the IP or not?
03:56:53 <dnm> Complex and currently personal.
03:58:33 <shapr> ok
03:58:46 <shapr> I was curious, because I've had the same sort of questions, but no answers.
03:58:57 <dnm> I'm hoping I can get a lot of issues resolved tomorrow. Or rather, today.
03:59:01 <dnm> Oh, shoot.
03:59:11 <dnm> IANAL, but I'm happy to provide whatever advice.
03:59:38 <dnm> I may crash on the couch here soon though.
03:59:40 <dnm> Hard to say.
03:59:43 <dnm> Kind of want to code.
03:59:48 <shapr> heh, no worries :-)
04:00:02 <dnm> Need to drag myself away from distractions like IRC and the like to do that though.
04:00:10 <shapr> yes, I should do that too.
04:00:13 <shapr> I have some work to do
04:00:29 <shapr> fix my mailer, add i18n support to my company website
04:01:11 <shapr> I'll think about these IP questions and ask you another time.
04:04:46 <dnm> Sure.
04:04:52 <dnm> Feel free to send me an email also.
04:05:05 <dnm> I will probably be more reachable by email soon than any other medium.
04:05:13 <shapr> ok
04:22:51 <musasabi> Is there a good way of writing multiline string literials in haskell?
04:27:05 <earthy> you mean, other than by embedding newlines using \n?
04:27:27 <musasabi> something like here documents.
04:27:48 <earthy> A string may include a "gap"---two backslants enclosing white characters---which is ignored. This allows one to write long strings on more than one line by writing a backslant at the end of one line and at the start of the next. For example, 
04:27:52 <earthy> "HereÂ isÂ aÂ backslantÂ \\Â asÂ wellÂ asÂ \137,Â \
04:27:55 <earthy> Â Â Â Â \aÂ numericÂ escapeÂ character,Â andÂ \^X,Â aÂ controlÂ character."
04:28:17 <earthy> (bottom of section 2.6 of the haskell report)
04:29:44 <earthy> e.g.
04:29:49 <earthy> "This \
04:29:55 <earthy> \would be a valid\
04:30:08 <earthy> \multiline Haskell string. \
04:30:23 <musasabi> thanks
04:30:27 <earthy> \\n And it would consist of two lines when printed."
04:30:38 <earthy> is a literal for
04:30:45 <earthy> This would be a validmultiline Haskell String. 
04:30:55 <earthy>  And it would consist of two lines when printed.
05:43:48 * shapr boings
05:44:41 <shapr> wassup?
05:45:02 <Lemmih> Finished a HOpenGL program.
05:45:33 <shapr> cool, can I see?
05:45:57 <Lemmih> And playing around with wxHaskell, wondering if it's complete enough to make 'real' programs with it.
05:46:07 <Lemmih> Sure. Can I mail to you?
05:46:17 <shapr> sure
05:46:25 <shapr> shae at scanned in avian com
05:51:06 <Lemmih> Done. The comments may be a little verbose... I made it for a C programmer and I would like him to understand/modify it (-:
05:51:14 <shapr> ok
05:51:42 <thebug> Lemmih: any chance I could get a copy too? :)
05:52:05 <Lunar^> shapr: btw, I'm a fresh (and a bit slow) dvorak user
05:52:21 <shapr> cool!
05:52:38 <Lemmih> thebug: Sure.
05:52:39 <shapr> I think dvorak is the first step towards finding a custom layout that's good for you.
05:53:00 <shapr> my dvorak layout is heavily (and continuously) modified
05:53:04 <Lunar^> erf :)
05:53:19 <shapr> I've realized what I really want is keyboard lego
05:53:29 <Lunar^> How could you modify your mind, also ? ;)
05:53:39 <shapr> yes, I do that too!
05:53:52 <thebug> shapr: keys with little indestructible LCD screens that you can change the key labeling on :)
05:53:59 <shapr> yes!
05:54:25 <shapr> that's the ultimate in touchscreens
05:54:41 <shapr> even better would be color LCDs in the keycaps
05:54:48 <shapr> konichiwa ikegami--san
05:55:18 <ikegami--> Hejsan shapr :)
05:55:24 * shapr laughs
05:56:35 <shapr> that's an excellent response.
05:57:24 <ikegami--> Ja.
05:57:28 * shapr is now tempted to learn more japanese
05:58:03 <ikegami--> (however, i'm learning 'svenska' just now)
05:58:10 <musasabi> does the base library have an alist function like alist_replace al [] = [al]; alist_replace (k,v) ((c,_):r) = if k==c then (k,v):r else alist_replace (k,v) r
05:59:21 <shapr> musasabi: that sounds like a tuple/FM update function
05:59:45 <shapr> I'd probably use a FiniteMap and just overwrite the value of that key.
05:59:49 <shapr> hiya SyntaxNinja 
06:00:38 <shapr> @index lookup
06:00:38 <lambdabot> Data.HashTable,Data.List,GHC.List,Prelude,List
06:00:49 <shapr> @type Data.List.lookup
06:00:51 <lambdabot> Data.List.lookup :: forall b a. (Eq a) => a -> [(a, b)] -> Maybe b
06:01:02 <musasabi> yes lookup is for finding alist elements.
06:01:04 <thebug> oooooh seirpinski, one of my favorites
06:01:28 <Lemmih> (-:
06:05:44 <SyntaxNinja> hi shap
06:05:48 <SyntaxNinja> er
06:18:44 <musasabi> Is there any mime decode library for haskell?
06:19:31 <Lemmih> musasabi: Have you checked some of the CGI libraries?
06:21:03 <musasabi> Lemmih: all the ones I have been able to find use just form-encoded data.
06:28:39 <Lemmih> musasabi: What are you working on?
06:32:29 <Igloo> Any epigram peeps about?
06:34:36 * Igloo mutters at xemacs
06:51:17 <musasabi> Lemmih: a wiki in haskell.
06:56:04 <shapr> ?
06:57:52 <musasabi> hmm?
06:58:00 <shapr> you're writing a wiki in haskell?
06:58:03 <musasabi> yes.
06:58:04 * shapr looks at the logs
06:58:16 <musasabi> "16:27 < Lemmih> musasabi: What are you working on?"
06:58:52 <shapr> ah
07:09:55 <musasabi> wash seems to have the necessary decoding routines.
07:51:36 <pesco> Hello?
07:52:30 <Lemmih> Hello!
07:52:39 <pesco> Ah, hi Lemmih.
07:52:50 <pesco> What did you think about that code I showed you?
07:52:58 <pesco> Or rather, the API, not the code.
07:55:32 <Lemmih> pesco: Actually no /-: I haven't had much time.
07:55:50 <pesco> Oh. :(
07:57:28 <pesco> What the hell. My computer's user interface is pissing me off.
07:57:48 <pesco> When are they going to start building these things in sensible ways?
07:59:35 <Maddas> What user interface are you using?
07:59:41 <pesco> MacOS X
08:00:05 <Maddas> Ok
08:00:38 <pesco> I wouldn't expect any better of Linux/X11 with any window manager though.
08:01:02 <pesco> The problem is that overlapping windows are _bad_.
08:01:08 <pesco> To be avoided.
08:01:11 <Maddas> Why?
08:01:16 <pesco> Because they overlap.
08:01:19 <pesco> ;-)
08:01:35 * Maddas scratches his head
08:01:39 <Maddas> If you say so... :-)
08:01:48 <shapr> I use ion
08:01:57 <Maddas> I was about to suggest Ion :-)
08:02:10 <shapr> because I agree with you
08:02:12 <pesco> Just try it once. Arrange a web browser, an editor, one or two chat windows and as many terminals on your screen without any overlap once. Use that for a while.
08:02:21 <Maddas> I used Ion for a while.
08:02:34 <pesco> Then get pissed at the though of doing that arrangement on every log-on.
08:02:52 <pesco> I know Ion. I remember trying it. I also remember that something didn't work.
08:02:53 <Maddas> I don't arrange things that way manually :-)
08:03:06 <shapr> the window config sticks when you set it with ion
08:03:11 <Maddas> I used Ion because Ratpoison broke for me and the current version didn't compile.
08:03:20 <shapr> you'd have to write some Lua code to get certain apps to start in certain frames though
08:03:31 <pesco> shapr: That's it.
08:03:44 <Maddas> shapr: I know, I meant to emphasize that I don't do it manually (I don't have my windows that way)
08:03:54 <shapr> pesco: we could always fix  it...
08:04:24 <pesco> Yes, that was part of my point. I don't want to fix my computer, I want to _use_ it.
08:04:27 <Maddas> I think I see why you like it, though
08:04:53 <shapr> maybe make it easier to do that?
08:04:57 <pesco> I'm not blaming ion developers, of course. I'm kind of blaming the state of the industry. Those people are supposed to help me use my computer, which they do insufficiently.
08:05:20 <Maddas> Ion isn't really part of the industry, is it?
08:05:34 <shapr> one thing I'd like is menus with n-sided polygons
08:05:37 <pesco> No, that's what I meant. Apple certainly is.
08:06:11 <shapr> and menus that shade according to the amount of subcontent
08:06:12 <Maddas> Apple seems to help you, just for other values of "help" :-P
08:06:17 <Maddas> shapr: Heh.
08:06:17 <pesco> shapr: Does Ion support multiple virtual screens?
08:06:26 <Maddas> OpenCroquet looks interesting
08:06:36 <thebug> Squeak isn't it?
08:07:02 <shapr> pesco: yes, it does
08:07:03 <thebug> err OpenCroquet is written in Squeak? or maybe it was true smalltalk '80 I'm thinking of
08:07:09 <pesco> shapr: That's good.
08:07:20 <shapr> and it supports having a separate screen for floating windows, so you can still use the gimp
08:07:29 <pesco> Cool.
08:07:33 <pesco> I think that's a newer feature.
08:07:34 <shapr> that's how I use it.
08:07:36 <Maddas> Smalltalk, but I don't know any more than that. Didn't look at it very closely :-)
08:07:38 <shapr> yes, it's recent
08:07:45 <Maddas> (Also, I don't know anything about Smalltalk)
08:08:02 <shapr> Smalltalk is nifty.
08:08:11 <thebug> nifty language indeed
08:08:11 <shapr> Squeak isn't exactly smalltalk though.
08:08:24 <pesco> shapr: Hey, I have a webpage!
08:08:29 <shapr> is OpenCroquet the latest incarnation of Croquet?
08:08:29 <Maddas> I hear that often, and I plan learning it :-)
08:08:29 <thebug> no, it's like smalltalk + extensions + desktop ++
08:08:37 <shapr> aha, it is
08:08:39 <shapr> http://www.opencroquet.org/
08:08:56 <thebug> Maddas: if you're of the C persuasion, Objective C is very smalltalk-esque
08:08:56 <Maddas> Oh, it's just called Croquet.
08:09:15 <shapr> ah, I like this.
08:09:21 <Maddas> thebug: I'm not much of any persuasion, but Objective C is quite nifty in a relative way
08:09:22 <shapr> multiuser shared 3D space
08:09:28 <Maddas> shapr: Indeed, looks cool.
08:09:30 <thebug> or Cocoa, as Apple would like you to believe Objective C is called :/
08:09:43 <shapr> pesco: cool where is it? ;-)
08:09:46 <Maddas> Why? Isn't Cocoa just the framework?
08:10:04 <pesco> shapr: http://www.scannedinavian.org/~pesco/ :)
08:10:06 <thebug> yes, cocoa is just the replacement Appkit + others frameworks
08:10:17 <Maddas> thebug: I wasn't aware of any confusion there :-)
08:10:17 <shapr> heh, nice quote
08:10:27 <thebug> <?>
08:10:39 <thebug> s/rs/r/
08:11:09 <Maddas> What's funny about "scannedinavian"? I keep thinking about it but don't get the pun, assuming it's supposed to be one :-)
08:11:15 <shapr> Scanned In Avian
08:11:30 <shapr> do you know what an avian is?
08:11:33 <Maddas> No
08:11:48 <Maddas> I always thought it was a pun on "scandinavian" :-)
08:11:51 * shapr lags horribly
08:11:56 <shapr> yes, it is
08:12:05 <Maddas> Hm...
08:12:06 <shapr> Avian is the class of birds
08:12:13 <shapr> @wn avian
08:12:15 <lambdabot> *** "avian" wn "WordNet (r) 2.0"
08:12:15 <lambdabot> avian
08:12:15 <lambdabot>      adj : pertaining to or characteristic of birds
08:12:20 <shapr> genus or one of those flavors
08:12:44 <Maddas> Ok.. What does scanned mean in this context? 
08:12:59 * SyntaxNinja pictures a sparrow on a scanner
08:13:08 <shapr> if you strapped a penguin onto a scanner.
08:13:18 <Maddas> ?
08:13:18 <thebug> <sparrow> cheeeeep cheeeeeep!!!!
08:13:19 <pesco> *wtt* *wttt* *wwwwt*
08:13:37 * Maddas gives up 
08:13:50 <shapr> You'd have a Scanned In Avian.
08:13:58 <Maddas> Oh, ok
08:14:10 <pesco> scanned-in actually.
08:14:13 <thebug> *rimshot*
08:14:36 <tic> *cough
08:16:03 <shapr> ok, fair enough :-P
08:16:51 <shapr> I think it came from some joke I made about being a Penguin in the Virtual World, and living in Finland in the Real World.
08:17:02 <shapr> making me a scannedinavian.
08:17:06 <pesco> shapr: Isn't it nice (the webpage)? I love the fact that it uses only <pre> (except for the boilerplate and links) and doesn't display on IE at the same time.
08:17:25 <Maddas> shapr: Ok :-)
08:17:33 <Maddas> pesco: haha
08:17:46 * shapr grins
08:17:51 <shapr> pesco: nice!
08:18:00 * pesco grins.
08:18:20 <shapr> any thoughts on an XUL <-> Haskell interface?
08:18:43 <pesco> No, but I recommended XUL to a collegue at work today. :)
08:19:04 <shapr> oh, what do you get paid to do?
08:19:23 <shapr> I like your division into code/ and distfiles/
08:19:31 <pesco> :) Cool.
08:19:36 <shapr> I think I'll do that too.
08:19:50 <Maddas> Maybe I should try Ion again for a while
08:20:03 <Maddas> I think I only used full-screen windows last time anyway :-)
08:20:44 <Maddas> The other things just distract me even more
08:21:00 <pesco> shapr: I get paid to work with an aging LISP monstrosity terribly lacking in documentation that's supposed to do knowledge-based configuration.
08:21:17 <shapr> oh, is it an expert system? what LISP flavor do you use?
08:21:22 <pesco> Allegro CL.
08:21:32 <pesco> What's your definition of expert system?
08:21:59 <shapr> um, I guess a big flowchart that lets the user answer yes or no questions and leads to a useful diagnosis or treatment for a problem.
08:22:19 <pesco> Yeah, pretty much.
08:22:34 <Maddas> pesco: cool (ignoring the "monstrosity" and "terribly lacking" part)
08:23:10 <Maddas> OTOH, Emacs seems to be taking over the role of my WM :-)
08:24:15 <pesco> Basically, given a suitable knowledge base, it asks the user "What would you like to build?" and follows with stuff like "Which constituent parts should make up the 'something'? You have the following possibilities." or "What value would you like for parameter X of 'something'?". Checks constraints and stuff, thenn says "Construction finished".
08:24:35 <pesco> ;-)
08:25:22 <pesco> They have a shitload of extensions (mostly undocumented, mind you). They used it to build cabinet interiors of airplanes, for example.
08:25:51 <Maddas> Wow, nice!
08:26:52 <pesco> We're currently trying to get it to configure car electronics. I.e. chose some features, the thing tells you which sensors, other hardware, and software components you need to put into the car.
08:27:10 <Maddas> Heh. When will it work for choosing partners? :-P
08:27:34 <pesco> Heh. :) I could try building a knowledge base for that.
08:27:39 <pesco> Great idea!
08:27:55 <Maddas> Driven entirely by need :-P
08:28:53 <pesco> I'm pretty sure I'd run into a dozen constraint conflicts with my answers.
08:33:31 * shapr grumbles
08:33:54 <pesco> "Entzerrungsschmerz"?
08:34:13 <pesco> (The pain you feel after a hyper space transition)
08:34:18 <Maddas> Heh.
08:34:42 <shapr> dump shock?
08:34:49 <pesco> Heh.
08:35:07 <pesco> Actually, it looked like a self-telefrag.
08:36:55 <shapr> that's a cool word.
08:37:12 <pesco> And a cool thought.
08:37:50 <pesco> Ok, croquet sounds cool! Where's the catch?
08:38:03 <shapr> um, I dunno?
08:38:31 <pesco> Yes, "the post-browser Internet".
08:39:06 <thebug> the catch is that there isn't anything available for you to use yet
08:39:20 <thebug> "We intend to make a developer's release of Croquet available here by September 2004."
08:39:20 <shapr> yah, that's the only sucky part
08:39:23 <shapr> I WANT CODE.
08:40:05 <pesco> That stinks. But Sept. '04 is right around the corner. They better meat their own deadlines.
08:40:08 <pesco> meet.
08:40:16 <shapr> right, or just throw it out there.
08:40:26 <shapr> I've been thinking about how to do that same thing in Haskell
08:40:45 <shapr> I realized that for most of those nifty ideas you need something like Erlang's mnesia database.
08:40:54 <Maddas> I'm reserving the release of Croquet as an occasion to learn Smalltalk
08:41:10 <Maddas> Mind giving a short explanation of what's nifty about mnesia? :-)
08:41:31 <shapr> you can run a 'local' database that's shared by a bunch of boxes
08:41:38 <Maddas> oh, cool
08:41:58 <musasabi> and it is very very fast.
08:42:09 <shapr> and you only store as much locally as you actually access, or enough that if one or two of the others go down, you can quickly reorganize the data such that you can still handle another box going down
08:42:20 <Maddas> I wonder how well Croquet and the multi-user stuff will work over the crappy internet connection I am using most of the time (often with high ping and packet loss)
08:42:44 <shapr> Maddas: should be fine actually
08:42:45 <Maddas> 'as you can actually access'?
08:42:58 <Maddas> shapr: That'd be nice. 
08:43:10 <shapr> one of the studies they did with this tech is how packet loss and painful ping would affect 3D interactions
08:43:29 <shapr> they said that for social interactions, it's just not that important
08:43:29 <Maddas> Right, I read that they paid attention to it, but I'm skeptical ;-)
08:43:43 <Maddas> Hm, makes sense.
08:43:59 <Maddas> As long as it doesn't just freak out and make me teleport around
08:44:11 <pesco> lol
08:44:24 <shapr> anyway, I'd like to hack up something like that in Haskell
08:44:30 <shapr> hiya Si\! ltns! how's life?
08:44:38 * pesco imagines an OS freaking out on its user(s).
08:45:06 <Si\> not so bad, I'm getting there with this XML Schema library, but it'll take a long time
08:45:07 <shapr> thing is, there's no good way to transport a complex value + type from one running Haskell RTS to another.
08:45:15 <shapr> at least, not that I know of...
08:45:18 <thebug> pesco: I believe a fair number of consumer OSs out there now already do that
08:45:34 <Si\> do you by any chance know how to convert an Int to a Hex Number as a String?
08:45:43 <shapr> yes, showHex
08:45:45 <pesco> thebug: Depends on your definition.
08:45:45 <shapr> @index showHex
08:45:46 <lambdabot> Numeric
08:45:53 <shapr> @type Numeric.showHex
08:45:55 <lambdabot> Numeric.showHex :: forall a. (Integral a) => a -> String -> String
08:48:21 <Si\> much obliged, thankyou
08:50:15 <shapr> can I serialize a Data.Dynamic value, and reconstitute it on another RTS without having the source available?
08:51:03 <pesco> What source?
08:51:15 <shapr> for a Tree type for example
08:51:38 <shapr> data Tree a = Nil | Node (Tree a) a (Tree a) -- for example
08:52:18 <Smerdyakov> I would guess that that's very unlikely, due to generativity of data.
08:52:28 <shapr> eh?
08:52:39 <Smerdyakov> Do you know what generativity is?
08:52:55 <shapr> nope
08:53:04 <Smerdyakov> data One = One
08:53:06 <Smerdyakov> data Two = Two
08:53:13 <Smerdyakov> These are two distinct types.
08:53:17 <Smerdyakov> Even though they're isomoprhic.
08:54:53 <shapr> so?
08:58:04 <Smerdyakov> So unmarshalling a value in a way that respects generativity requires knowledge on all visible data definitions.
09:03:09 <shapr> Marvin--: y0
09:13:27 <Marvin--> hey
09:14:18 <Marvin--> SyntaxNinja: did you work out the problem with the darcs upload?
09:17:38 <Marvin--> I told a friend that I'm currently working with XML and XSLT at work
09:17:49 <Marvin--> he told me I wasn't welcome in his house any more :/
10:22:27 <Lemmih> shapr: Around?
10:25:19 <Maddas> Hah
10:27:56 <SyntaxNinja> Marvin--: yeah almost. I've prepared a new upload that'll fix it.
10:28:40 <SyntaxNinja> I was just pinging david to see if he minds 0.9.23+1.0.0rc1-1
10:28:43 <Marvin--> SyntaxNinja: btw, want to try a script I've been hacking on to make use of the shlibs system for library dependencies?
10:28:55 <Marvin--> it's a frickin' release candidate, who cares? :)
10:29:20 <SyntaxNinja> well, it might end up being the package that goes into sarge, considering the timing.
10:29:46 <Marvin--> wouldn't it have to be built on all arches for that?
10:30:07 <Marvin--> and the buildd backlogs being what they are...
10:32:16 <Marvin--> SyntaxNinja: http://www.mdstud.chalmers.se/~md9ms/mk-haskell-deps.sh
10:32:17 <SyntaxNinja> hm. is that the criteria for inclusion in sarge?
10:32:29 <Marvin--> I don't know how it works
10:32:43 <Marvin--> but isn't that one of the propagate-to-testing criteria?
10:32:47 <Marvin--> that it has to be in sync
10:33:00 <SyntaxNinja> well, it's never built on all arches, and it has propagated to testing...
10:34:28 <Marvin--> hm, well, if it's never built on a particular arch, it won't matter if it's out of date on that arch
10:34:52 * SyntaxNinja wonders if latex will torpedo its chances on ia64 again
10:36:40 <SyntaxNinja> so the version is goign to be 0.9.23+1.0.0rc1-1 unless someone stops me
10:36:46 <SyntaxNinja> david hasn't replied and i want to get this out there.
10:37:26 <SyntaxNinja> should the next one be 1.0.0rc1+1.0.0rc2-1?
10:37:45 <Marvin--> uh
10:37:57 <Marvin--> 1.0.0rc1anything is > 1.0.0-1
10:37:58 <Marvin--> so no
10:38:01 <SyntaxNinja> oh right
10:38:04 <SyntaxNinja> hehe
10:38:08 <SyntaxNinja> don't worry, Marvin--.
10:38:10 <Marvin--> you'd do 0.9.23+1.0.0rc2
10:38:15 <SyntaxNinja> you're in good hands.
10:39:18 <pesco> Marvin--: 1.0.0rc1 is > 1.0.0-1? Doesn't the rc stand for release candidate?!
10:39:34 <SyntaxNinja> yeah! Marvin--!!
10:39:43 <stepcut> :p
10:40:08 <Marvin--> pesco: dpkg --compare-versions doesn't deal with the gazillion of special cases that some people might perhaps want to use
10:40:16 <Marvin--> SyntaxNinja: did you look at the script?
10:40:51 <pesco> Marvin--: Oh, you're refering to dpkg's behaviour.
10:41:06 <Marvin--> yes
10:41:38 <Marvin--> I can't help that you decide to jump into the discussion without knowing the context, can I? :)
10:41:45 <SyntaxNinja> Marvin--: I got it and am staring at it, but I won't be able to do much before my meeting that was supposed to start 10 minutes ago.
10:41:53 <Marvin--> ok :)
10:41:55 <pesco> Marvin--: Right. I'm sorry. :)
10:41:56 <Marvin--> you and your meetings
10:42:01 <SyntaxNinja> Marvin--: don't get me started
10:43:37 * SyntaxNinja has been spending at least 1/4 of his time in meetings.
10:44:21 <stepcut> down with meetings! up with irc!
10:44:59 <SyntaxNinja> Marvin--: so this parses the package.conf file and adds a dependency line to the debian control file?
10:46:06 <Marvin--> SyntaxNinja: well, it mangles the library_dirs variable to point into debian/$deb so you can compile a dummy program using the package you're building
10:46:26 <Marvin--> and then I run dpkg-shlibdeps on that binary to get a substvar
10:47:47 <SyntaxNinja> cool.
10:48:43 * SyntaxNinja uploads with his fingers crossed
10:49:00 <Marvin--> SyntaxNinja: I was thinking of using it for my gtk2hs package
10:49:23 <Marvin--> maybe we could integrate it with your ghc-variables script and call it dh_haskell :P
10:50:41 <SyntaxNinja> what ghc-variables script?
10:53:28 <Marvin--> maybe it's Igloo's
10:53:51 <Marvin--> debian/make_vars in the wxhaskell deb
11:01:47 <SyntaxNinja> yeah; not mine  :)
11:06:16 * goron thinks the Debian package format is *overcomplicated*. Ever seen a PKGBUILD of ArchLinux?
11:07:00 <cptchaos> it is still a lot more robust than rpm ...
11:08:37 <goron> cptchaos: Imo it's almost the same... Rpm has a bad name, because of the ziljion different distro's that are using it, and let people believe it works together.  
11:09:10 <shapr> I switched from redhat to debian, I prefer debs myself.
11:09:18 <shapr> have you ever tried to upgrade RedHat?
11:09:21 <thebug> heh, debian's package format doesn't change on a whim though, like the format of RPM seems to with every rev of the packager itself
11:09:32 <shapr> I love unicycling!
11:09:40 * shapr hops tiredly
11:09:41 <goron> shapr: We know that :)
11:09:53 <shapr> goron: well, maybe you missed it before :-)
11:09:53 <thebug> work out a way to put some gears on there yet? ;)
11:09:55 <Marvin--> it's not so much the debian *package format*, that doesn't really matter
11:10:05 <shapr> Marvin--: it's the debian packaging *culture*
11:10:21 <Marvin--> the strength is the strict policy and all the tools that help you build good packages
11:10:36 <goron> shapr: Well, you only say it a *ziljion* times... (I am reusing components, you see?)
11:10:44 * shapr snickers
11:10:56 <shapr> I only say it when I really happy about it.
11:11:12 <shapr> I just got back from a satisfying session of hopping.
11:11:14 <goron> I like Snickers :()
11:11:21 <cptchaos> i switsched from debian to Fedora Core, and the fist thing I got managed is to Fuck Up the rpm package database
11:11:27 <shapr> I haven't quite reached uni-boinging yet.
11:11:59 <goron> cptchaos: I didn't say RedHat was good, but I said that you should have a look at a PKGBUILD off archlinux.org.
11:12:14 <goron> /s/off/of
11:12:53 <shapr> I was amazed the first time I upgraded Debian across major versions. Everything worked without a problem.
11:13:13 <cptchaos> goron: ok, they are both a bit to complex, I agree
11:13:13 <shapr> it even preserved all my old config files and made a real effort to use their settings with all the new versions.
11:13:46 <shapr> The saying in the Debian community has been "sure the installer sucks, but that's because once you install, you can upgrade forever."
11:13:58 <shapr> Happily, the Debian installer is much much better now.
11:14:06 <shapr> In part due to the efforts of Marvin--, btw.
11:14:17 <goron> shapr: I noticed, only there is one f*ckup in it.
11:14:21 <shapr> what's that?
11:14:33 <shapr> Taiwan? :-)
11:14:34 <goron> shapr: And that's not in the bug tracker, I think (didn't check)
11:14:57 <Marvin--> goron: so report it
11:15:00 <shapr> well, you should check the bug tracker, and if it's not listed, submit it
11:15:00 <goron> shapr: Put two cd in your cdrom drive. One installer and one random different one.
11:15:23 <Marvin--> I'm pretty sure I've seen that reported before
11:15:27 <goron> shapr: Then it happily says that it can't find the packages...
11:15:29 <Marvin--> but I haven't been keeping up lately
11:15:39 <shapr> goron: submit it!
11:17:24 <goron> shapr: It looks like the development model is: Put on your website that you are going to make something *great*. Create something random, wait for bugreports and fix it... I think it has some truth in it...
11:17:42 <shapr> have you heard of an essay named "Worse is Better" ?
11:18:08 <goron> no
11:18:18 <Marvin--> goron: on the contrary, the design idea was pretty clear, but since none of us had ever written an installer before, we sorta had to stumble about a bit :)
11:18:27 <shapr> http://www.jwz.org/doc/worse-is-better.html
11:18:30 <shapr> goron: you should read that.
11:19:35 * Marvin-- watches the table tennis
11:19:40 <shapr> that essay discusses what you just said in great depth.
11:20:24 <sorrow_> Marvin--, how is it?
11:20:56 <Marvin--> Sweden's gang of old men are playing pretty well
11:21:07 <sorrow_> hehe
11:21:49 * stefan_ enjoyed two Dutch golden medals earlier today <:o)
11:22:06 <Marvin--> this is J-O's fifth olympic games
11:22:19 <shapr> goron: that essay is the source of some of the greatest quotes in the Unix world.
11:22:46 <shapr> It also outlines Unix as the source of agile programming.
11:23:38 <shapr> amusingly, Richard Gabriel wrote a follow-up book...
11:23:56 <sorrow_> Tabletennis is quite a cool sport.
11:24:04 <shapr> doh
11:24:59 <shapr> goron: ah, here's the entire saga: http://www.dreamsongs.com/WorseIsBetter.html
11:26:42 <shapr> hi mikef 
11:26:48 <shapr> how's code?
11:26:52 <mikef> Yo.
11:27:34 <mikef> Non-existant at the moment. I tried learning Haskell a couple of months back, but didn't get very far.
11:27:40 <mikef> I should give it another go, really.
11:27:59 <shapr> how far did you get?
11:28:07 <shapr> have you written a Hello World kind of thing?
11:28:44 <mikef> Erm -- I don't think I een got that far. I was mainly trying to look up the things I know in SML and how to do them in Haskell. Probably the wrong approach.
11:28:49 <mikef> *even
11:29:16 <goron> shapr: About quotes:"Unix and C are the ultimate computer viruses."
11:29:26 <shapr> well, things are a bit different in Haskell. Not hugely different, but significantly different.
11:29:30 <shapr> goron: yes, that's one...
11:30:23 <shapr> mikef: seen something like this before? : http://www.scannedinavian.org/AvianWiki/HaskellDemo 
11:30:49 * mikef looks.
11:31:10 <mikef> Aha!
11:31:34 <mikef> Oh, that's cool. I'll read this now.
11:31:38 <mikef> Thank you :)
11:31:45 <shapr> :-)
11:33:47 <shapr> if you have any other questions, feel free to ask.
11:34:45 <mikef> Okay then -- do you use (or have you used) hugs?
11:35:24 <mikef> If I've got it right, I put all the definitions in a file, then I can only query and evaluate things when hugs is running.
11:35:40 <Marvin--> yes
11:35:42 <goron> Why are Strings not implemented as array or linked list in such a way, that when there is no continous block of memory available, it's a linked list, and otherwise it's an array?
11:36:12 <shapr> mikef: GHCi is a bit better than Hugs in that respect.
11:36:15 <Marvin--> because that'd be frickin' complicated compared to  type String = [Char] ?
11:36:31 <shapr> there is PackedString, which is much faster.
11:36:35 <shapr> and uses less space
11:36:36 <goron> Marvin--: I mean implemented in the compiler. 
11:36:41 <goron> shapr: I know that one.
11:37:00 <shapr> I don't :-) I've never gotten to the point where one of my Haskell programs was so slow I had to switch.
11:37:08 <Marvin--> well, it could be implemented as an optimization, I suppose
11:37:22 <Marvin--> I have no idea how hard it is
11:37:24 <goron> shapr: I only know it from the Haddock (never used it before).
11:38:01 <shapr> String# I guess
11:38:10 <shapr> I wonder if that's how PackedString actually works.
11:38:25 <goron> The guys at Cambridge are interested in programtransformation and stuff, not in stupid optimizations, I think.
11:38:28 <shapr> I know that was discussed a few times on the GHC list, but I forget the outcome.
11:39:23 <shapr> well, Simon Marlow's speed advice is something like, don't use [Char], strictify as much as you can, then squash the inner loop.
11:39:33 * shapr misquoted that somehow...
11:40:38 <Lemmih> shapr: Did you look at my sierpinski program?
11:40:55 <edwinb> It ought to be possible, I think, to have raw strings as a back end and [Char] as a front end, but I bet it wouldn't be easy...
11:41:02 <shapr> Lemmih: no, I still didn't get it :-/
11:41:44 <edwinb> Hmm, and you'd have trouble with polymorphic things to I guess.
11:42:35 <shapr> Cale_: britney.bizrate.com is now banned
11:42:52 <musasabi> darcs sources have a very nice FastPackedString.
11:43:03 <stepcut> shapr: :(
11:43:11 <shapr> stepcut: ?
11:43:17 <stepcut> you banned me!!!
11:43:20 <shapr> er, is that you?
11:43:25 <stepcut> :p
11:43:26 <stepcut> no
11:43:30 <shapr> I didn't think so.
11:43:37 <shapr> it seems unlikely that you would spam the wiki.
11:43:52 <musasabi> then again average programs don't need to handle 5mb strings ;)
11:44:04 <stepcut> musasabi: I do... 
11:44:20 <shapr> anyway, I was in the midst of trying to make a NewBinary Instance for Data.Dynamic when I had that unicycling urge...
11:44:23 <shapr> I wonder if that will work.
11:44:43 <shapr> anyone know how Data.Dynamic works?
11:44:46 <musasabi> stepcut: look at darcs sources then. 
11:45:02 <musasabi> stepcut: I use the module with minor modifications and it works great.
11:45:15 <goron> Wine build complete.
11:45:26 <shapr> hm, I should apt-build wine
11:45:34 <goron> I didn't expect they could beate something that compiled.
11:45:35 <shapr> with -march=athlonmp
11:45:45 <goron> /s/beate/create
11:45:51 <goron> This is winex.
11:46:01 <goron> Does debian also have it?
11:46:28 <shapr> goron: amusingly, wine (and winex) runs faster on my computer than equivalent windows. I think that comes from the fact that wine can actually use the second CPU.
11:47:05 <shapr> no, transgaming said that if debian or anyone else packaged winex, they'd change the license and close the source instantly.
11:47:24 <Marvin--> transgaming suck
11:47:32 <shapr> yes, transgaming sucks ass.
11:47:35 <goron> I already thought so. Marvin:: Why?
11:47:47 * shapr stabs transgaming
11:48:19 <Marvin--> uh, because throw around the threat of closing the source if we don't do as they like?
11:48:25 * shapr agrees
11:48:31 <goron> shapr: You will have to come up with some more effective methods to accomplish something. 
11:48:49 <Marvin--> next they'll be wanting a pint of blood and our first-born sons or they'll close the source
11:49:08 <shapr> transgaming grabbed wine, an existing working open source project, they extended it, and now are making money and threats.
11:49:20 <goron> Uhm, ok, seems clear. What about EBUILDS of gentoo?
11:49:22 <shapr> would you want to work for or with those people?
11:49:49 <Marvin--> I think there is an ebuild for gentoo, and I haven't understood why they allow that
11:50:03 <Marvin--> of course, there's a problem with the ebuilds now that transgaming are tagging the downloads
11:50:07 <goron> shapr: Well, if they really give the project value, they deserve something. 
11:50:16 <mikef> I think Gentoo relies on the user downloading it.
11:50:33 <mikef> Is there an operator to concatenate lists?
11:50:34 <goron> A la java.
11:50:37 <goron> ++
11:50:43 <mikef> :)
11:50:48 <Marvin--> goron: of course, but they damn well shouldn't claim they're doing free software
11:50:52 <Spark> presumably the people who own the copyright to wine gave specific conditions to transgaming
11:50:57 <Marvin--> because in effect they have a no-binary-redistribution clause
11:51:21 <shapr> right
11:51:21 <Marvin--> Spark: no, but wine used to use a bsd-style license so it wasn't much they could do about it
11:51:40 <goron> Marvin--: Are they claiming it officially? 
11:52:11 <Spark> can the fork of a bsd style license be closed source?
11:52:11 * goron don't thinks so.
11:52:28 <goron> I think so. 
11:52:44 <shapr> I think bsd allows you to close the source and reuse it.
11:52:45 <Marvin--> goron: if you mean, "is it in the license text", then no
11:52:46 <goron> BSD means: you can do like *everything*
11:53:06 <Spark> never gonna use that then, its detrimental
11:53:09 <Marvin--> goron: if you mean, "pounce down and complain and bitch and moan as soon as someone posts an intent-to-package winex for Debian", then yes
11:53:09 <shapr> That's one reason I'm a fan of the GPL.
11:53:20 <Spark> to the course of the packages continued success
11:53:46 <shapr> Spark: commercial-friendly open source programmers say that's the only way to get companies to use OSS, they say the companies want some assurance for their investment.
11:53:57 <shapr> in fact, this happened recently with Computer Associates and Plone!
11:54:15 <Spark> what is assurance, technically?
11:54:20 <Spark> they want an asset back?
11:54:26 <goron> I don't mind as long as it compiles. I would stab them to if they add bugs to the CVS sources, before I download it. 
11:54:27 <Spark> (one that only they own)
11:54:53 <shapr> from the viewpoint of the companies, if they pay for some source code, they own it 100%
11:55:03 <shapr> they view source as a product, not a service.
11:55:23 <Spark> winex was never paid for though was it
11:55:26 <shapr> so they want to be able to close the source, and only distribute binaries.
11:55:49 <thebug> Spark: the original authors of OSS can release it under multiple licenses remember...
11:55:49 <Marvin--> uh, if they buy the copyright they can assign whatever license they like
11:55:50 <Spark> what are their motives anyway
11:56:10 <shapr> From my viewpoint, programming is a *service* and source is a commodity.
11:56:10 <goron> I don't understand why I can download it from CVS *for free*.
11:56:33 <shapr> goron: because *you* can *do* that, and most linux gamers don't know how.
11:56:54 <goron> shapr: I know, but why do they give me the option.
11:56:57 <shapr> most linux newbies want to play their same old games, and they're willing to pay a $5 a month subscription fee to get the packages that transgaming makes themselves.
11:57:10 <thebug> I was under the impression that the winex cvs stuff was still quite hobbled compared to the $$ winex
11:57:15 <Spark> so in effect they want to profit from the inexperienced users
11:57:18 <shapr> right
11:57:27 <shapr> if you make a debian package of it, then they can't
11:57:29 <Spark> while allowing those who program a back door
11:57:45 <shapr> so, they want to take advantage of the open source programmers, and make money from the newbies.
11:57:53 <thebug> so even if you can get it free, you're not much better off than just running the game in vanilla wine
11:57:56 <shapr> that's the way I see it, at least.
11:58:16 <Spark> yeah that would make sense
11:58:16 <goron> shapr: Seems like a typical busisness strategy (that doesn't mean it aren't suckers then)...
11:58:22 <Spark> i wonder if they plan to do that in the long term
11:58:26 <Spark> or just to pay developers to 'finish it off'
11:58:27 <shapr> yes, the monthly subscription gets you a different (and better) winex than the anon cvs.
11:58:29 <goron> There are lots of suckers...
11:58:47 <Spark> so the newest versions are closed source?
11:58:52 <shapr> yes, but I try to educate, not take advantage.
11:59:45 <thebug> Spark: the anon cvs has lots of helpful code taken out, like I said, it's better, but not much better than just using regular wine, in my experience
11:59:46 * shapr is an idealist
12:00:08 <Spark> a technically minded idealist
12:00:10 <Spark> how do you manage that
12:00:12 <shapr> I read slashdot news about 'Cedega' which is WineX 2.0, completely forked from Wine now.
12:00:18 <Spark> i lost faith in the human race a long time ago
12:00:30 <shapr> Spark: yes, but you also tell me that I never say anything mean to people :-)
12:00:33 <Marvin--> what do you mean "completely forked"?
12:00:39 <Spark> heh :)
12:00:40 <shapr> Marvin--: I don't know, I haven't looked into the details.
12:01:00 <Spark> they cant have rewritten it surely
12:01:06 <Marvin--> "now it's really forked, oh boy it's forked, yep can't get much more forked than this"
12:01:15 <shapr> I don't know what it means.
12:01:15 <Marvin--> "fork off"
12:01:17 <shapr> heh
12:01:18 <shapr> totally
12:01:18 <goron> shapr: But how would you ever make money creating *free* software? I mean if I just look at your sources, I could give support too. 
12:01:28 <shapr> goron: yes, that's an *advantage*
12:01:30 <thebug> Cygnus solutions did just that
12:01:37 <thebug> for a -long- time
12:02:05 <shapr> if programming is a service, and I release any code I've written to my clients under the GPL, then you can maintain it, and so can anyone else with the same skills.
12:02:21 <thebug> they developed using GPL, provided the source, and the support was what they charged for
12:02:34 <Spark> open source funds terrorism and murder
12:02:58 <Marvin--> oh grow up
12:03:21 <shapr> programming as service rewards writing the best code you can, using whatever tools are available.
12:03:22 <Spark> you havent seen the t shirt then? ok :)
12:03:49 <shapr> it's the opposite of '101 ways to increase you job security through obfuscated source'
12:04:02 <Spark> where i work theres an interesting situation
12:04:03 <shapr> in fact, I've written just this on our company website.
12:04:17 <Spark> there is no incentive to write well designed code because the managers cant code themselves
12:04:25 <Spark> and if they are supervising you, you can do what you want as long as it works
12:04:54 <shapr> we provide a list of other companies in this area that can do what we do, and we provide the clients with a login and password such that if we walk in front of a bus, another company can pick up where we left off.
12:05:04 <Marvin--> oh god
12:05:10 <Marvin--> Spark: I'd hate to work at such a place
12:05:12 <shapr> that's the ultimate security for the client
12:05:43 <Spark> heh, mikef is about to start at a similar place :)
12:05:48 <shapr> goron: does that sound workable to you?
12:05:58 <Spark> having said that there are many individuals who take enough pride in their work to do it properly anyway
12:06:03 <shapr> Spark: that's good to hear.
12:06:25 <shapr> Spark: btw, idealist is a synonym for 'prima donna' from some viewpoints.
12:06:25 <Spark> but then the integration people who actually assemble the product hack it to pieces before it gets shipped to the customer :)
12:06:42 <Spark> you know plato's 4 types of people
12:06:44 <Marvin--> so... in essence, a lot of work is done twice?
12:06:44 <shapr> I get called a pre-madonna quite a bit :-)
12:06:55 <Spark> rationals, idealists, guardians, artisans
12:07:12 <shapr> sounds related to myers-briggs
12:07:16 <Spark> Marvin--: sort of its normally just tweaking of parameters though, rather than restructing of anything
12:07:25 <Spark> shapr: ah yeah plato + mb = keirsey
12:07:28 <shapr> heh
12:07:35 <Spark> mb is just the 4 flags
12:07:47 <Spark> keirsey spots that they can be grouped to form plato's stereotypes
12:07:52 <shapr> anyway, I'm happy being a poor idealist / starving artist / whatever
12:08:12 <Spark> yeah i know what you mean
12:08:13 <shapr> I don't always have enough money, but I sure do have *fun*
12:08:28 <shapr> and I believe in what I do, which is very important to me.
12:08:37 <goron> Well, it's true that the industry really doesn't care how something works. 
12:08:44 <Spark> my theory is the best paid jobs are well paid because theyre incredibly dull and taxing
12:08:50 <shapr> heh, I agree with you.
12:09:10 <shapr> I had a chance to get $65,000 a year with VC++ and MS SQL Server
12:09:37 <goron> But you didn't want to join the devil :)
12:09:38 <shapr> my other option was half that working with Linux at an ISP...
12:10:17 <Spark> im on ÃÂ£15000 at the moment, twiddling my thumbs
12:10:21 <shapr> goron: even so, you're right about it being hard to balance open source and eating regularly.
12:10:25 <Spark> which is prolly $25000
12:10:37 <Spark> but its only a summer placement then im back to uni for a masters
12:10:38 * goron needs to get unicode, so it eems...
12:10:47 <goron> /s/eems/seems
12:10:48 <Watermind> hello
12:10:56 <Spark> utf8 is a sensible thing to use on irc :)
12:10:58 <shapr> hi Watermind 
12:11:05 <Watermind> Hi shapr  
12:11:09 <shapr> looking for Haskell info?
12:11:13 <Watermind> yeap some
12:11:19 <shapr> how may we assist you?
12:11:20 <Spark> shapr: you could work in pr though :)
12:11:27 <shapr> heh, you think so?
12:11:54 <Watermind> in imperative languages whenever I want to access data by order of cost, generally speaking Heap seems like a nice choice
12:12:40 <Watermind> it also seems pretty straightforward to implement an Heap as a recursive structure (bin tree) in Haskell
12:13:21 <shapr> Spark: only if I believed in the product :-)
12:13:26 <Spark> hehe
12:13:34 <Watermind> but is there any efficient implementation when it comes to dealing with changes in the costs of nodes?
12:13:53 <goron> Spark: Can you create theat symbol before 15000, once again?
12:14:21 <Watermind> if the costs only got worst it would be easy
12:14:27 <shapr> Watermind: you may want to read Okasaki's thesis and book. He's improved over the cost of imperative structures with lazy amortized structures.
12:14:36 <Spark> goron: ÃÂ£
12:14:51 <Watermind> shapr: hmm ok
12:15:01 <shapr> it's impressive stuff.
12:15:26 <Watermind> I've hard about it
12:15:40 <Watermind> and I think some of it is even included in ghc
12:15:58 <shapr> if you're looking for basic implementations of functional datastructures, you may like Rabhi and Lapalme's book "Algorithms : A Functional Approach" 
12:16:00 <Watermind> but I thought that might existe some standard classic implementation I never heard of
12:16:04 <shapr> maybe I missed a word in the title.
12:16:08 * shapr googles
12:16:13 <Watermind> shapr: I have that one
12:16:20 <shapr> I really like that book.
12:16:22 <Watermind> I has heaps
12:16:29 <Watermind> but doesn't deal with changes in nodes
12:16:30 <shapr> It has heaps of good stuff ;-)
12:17:09 <Watermind> in fact I'm a little afraid that I start studying heaps and that is not even the recommended ADT in haskell for this situations
12:17:10 <shapr> DData might have Heaps
12:17:19 <shapr> which situations?
12:17:27 <shapr> ah, data by order of cost?
12:17:40 <Watermind> nope, DData doesn't...
12:17:46 <Watermind> yes shapr  
12:18:14 <Watermind> everything seems quite easy, except improving the cost of some nodes...
12:18:25 <shapr> I'm not sure. You could ask Pseudonym, I'm sure he knows.
12:18:38 <Watermind> because to rebuild the tree you'd have to access the parents of that node...
12:18:41 <shapr> I don't really know what you mean by order by cost.
12:18:59 <Watermind> parent with better cost than all sons
12:19:09 <Watermind> standard definition for heap
12:20:00 <Watermind> brb
12:20:07 * shapr googles for cluefulness
12:21:28 <shapr> Edison seems to have a bunch of different Heap implementations.
12:22:11 <shapr> and is included with GHC
12:26:50 <mikef> Right. I'm a little happier with this now. I've finally got a qsort, and most of the higher order functions have the names I expect them to.
12:27:00 <shapr> yay!
12:27:11 <shapr> mikef: lambdabot has a useful command called @index
12:27:18 <shapr> @index foldr
12:27:18 <lambdabot> Data.List,GHC.Base,GHC.List,Prelude,List
12:27:24 <shapr> @type Data.List.foldr
12:27:28 <lambdabot> Data.List.foldr :: forall b a. (a -> b -> b) -> b -> [a] -> b
12:27:31 <mikef> Aha.
12:27:50 <shapr> for the most part, they're just duplicates of GHCi commands
12:27:56 <shapr> the @index command uses Haddock though
12:28:06 <shapr> Watermind: here's the Edison docs: http://www.haskell.org/ghc/docs/edison/
12:28:07 <thebug> an even more useful command [for dispensing humor, of course]
12:28:10 <thebug> @yow
12:28:10 <lambdabot> My pants just went to high school in the Carlsbad Caverns!!!
12:28:21 <thebug> :)
12:28:23 <shapr> but those docs don't cover the Heaps
12:28:36 <shapr> I've visited the Carlsbad Caverns a bunch of times, they're gorgeous.
12:28:47 <shapr> In fact, I visited them IN HIGH SCHOOL, WHILE WEARING PANTS!
12:28:51 * shapr gasps
12:28:52 <thebug> (!)
12:29:09 <shapr> oh the synchronicity!
12:30:13 <shapr> Watermind: it seems that the Heaps are part of the Collections in Edison/Coll/*Heap.hs
12:30:36 <shapr> SplayHeap, MinHeap, LeftistHeap, and LazyPairingHeap
12:30:39 <shapr> @fortune
12:30:48 * shapr wonders
12:30:59 <shapr> did I break fortune on snowblind?
12:31:18 <thebug> certainly didn't work in the lambdabot stuff I was playing with the other day
12:31:37 <shapr> oh my, I think the fortune file format has changed.
12:31:50 <shapr> I have to rewrite the parsing code.
12:32:29 <shapr> hm, something's wrong, I think it should be working
12:32:36 <shapr> @fortune
12:32:37 <lambdabot> The greatest productive force is human selfishness.
12:32:37 <lambdabot> 		-- Robert Heinlein
12:32:49 * shapr blinks
12:32:59 <shapr> @foruten
12:33:00 <lambdabot> Sorry, I don't know the command "foruten", try "lambdabot: @listcommands
12:33:01 <shapr> @fortune
12:33:02 <lambdabot> Texas A&M football coach Jackie Sherrill went to the office of the Dean
12:33:02 <lambdabot> of Academics because he was concerned about his players' mental abilities
12:33:02 <lambdabot> "My players are just too stupid for me to deal with them", he told the
12:33:02 <lambdabot> unbelieving dean.  At this point, one of his players happened to enter
12:33:02 <lambdabot> the dean's office.  "Let me show you what I mean", said Sherrill, and he
12:33:04 <lambdabot> told the player to run over to his office to see if he was in.  "OK, Coach
12:33:06 <lambdabot> ,
12:33:08 <lambdabot> the player replied, and was off.  "See what I mean?" Sherrill asked.
12:33:08 <shapr> that's really weird.
12:33:10 <lambdabot> [2 @more lines]
12:33:23 <shapr> I wonder if the pRNG seed isn't initialized or something.
12:33:52 <Lemmih> @more
12:33:52 <lambdabot> "Yeah", replied the dean.  "He could have just picked up this phone and
12:33:52 <lambdabot> called you from here."
12:34:22 * shapr snickers
12:35:20 <musasabi> A short api question related to monads: I am creating a "withFoo :: Bar -> (Foo -> IO a) -> IO a" function, now some callers will want a version with the monadic return value for the parametric function, others a pure version. What is the cleanest approach? of course one can provide both of them "withFooPure :: Bar -> (Foo -> a) -> IO a".
12:35:37 <shapr> hi jesse98, how's the cloudy city?
12:36:15 <jesse98> sunny :-)
12:36:19 <shapr> shocking
12:38:11 <shapr> I try to keep as much of my code pure as possible, then lift where necessary.
12:38:18 <stefan_> musasabi: you cannot pass return as a parameter of type Foo -> IO a
12:38:29 <stefan_> @type return
12:38:30 <lambdabot> return :: forall m a. (Monad m) => a -> m a
12:38:56 <shapr> work would with Foo -> IO Foo, right?
12:39:02 <stefan_> yes
12:39:12 <musasabi> stefan_: yes, but is that a good interface?
12:39:56 * shapr disappears to watch DS9
12:40:07 <musasabi> that is should I make it impure by default? or is the other solution resulting in IO (IO a) even more ugly...
12:40:30 * musasabi tries to decide... maybe I will just go with IO and be damned.
12:41:14 <stefan_> musasabi: I'm not sure what you want to use your function for
12:42:44 <musasabi> stefan_: well my real function is "withPage :: String -> (Page -> IO a / a) -> IO a" which takes the name of a wikipage and does an action with the loaded page.
12:43:47 <stefan_> musasabi: does the function load the Page itsself or does it just get the Page from some data structure?
12:43:58 <Lemmih> Is it possible to use something like '-o' with hmake?
12:44:11 <Igloo> Marvin--, SyntaxNinja: If ghc-vars does what I think it does I think it should actually come from something in the GHC package, but that's a post-sarge issue for me
12:44:37 <musasabi> stefan_: it loads the page from disc or from a cached representation in memory.
12:46:00 <stefan_> musasabi: it seems to me that then there's no need for your function argument to perform IO stuff, so you could go with withPage :: String -> (Page -> a) -> IO a
12:46:07 <Marvin--> Igloo: the make_vars script you mean?
12:46:45 <Marvin--> Igloo: it adds substitutions for ${ghc-min-version} and ${ghc-max-version} to a substvars file
12:46:48 <Igloo> The thing that make the deps be on the appropriate version of GHC
12:46:49 <Igloo> Right
12:46:50 <goron> My Debian crashed! On Id "5" respawning too fast... I read something on Google, but it takes hours to track down where it goes wrong I think. How annoying...
12:47:25 <Marvin--> Igloo: have a look at http://www.mdstud.chalmers.se/~md9ms/mk-haskell-deps.sh and tell me what you think
12:49:24 <musasabi> stefan_: true... (except if it wishes to e.g. print the page)
12:50:12 <Igloo> Marvin--: OK, so that's in addition to the GHC deps, right?
12:50:32 <musasabi> maybe I'll just provide withPage and withPageM
12:51:05 <Igloo> I'd like to have the GHC deps themselves be in the GHC package somewhere to save duplication
12:51:35 <stefan_> musasabi: okay, that complicates stuff of course ... just for the record the proposed type does not prevent you from stuff like printing ... if print :: Page -> IO (), then withPage "foo" print :: IO (IO ()) ... but that's quite ugly of course :S
12:51:50 <Marvin--> Igloo: right, it's to get the proper package dependencies for packages that use extra_libraries
12:52:04 <Igloo> OK, cool
12:53:15 <musasabi> hmm Control.Monad.join
12:53:30 <stefan_> @type Control.Monad.join
12:53:32 <lambdabot> Control.Monad.join :: forall a m. (Monad m) => m (m a) -> m a
12:54:18 <stefan_> musasabi: that would flatten out the nesting
12:57:29 <musasabi> so I can define just:
12:57:32 <musasabi> withPageM name fun = join $ withPage name fun
13:01:26 <stefan_> musasabi: eh, yes ... withPageM ::? String -> (Page -> IO a) -> IO a
13:08:20 <musasabi> yes, works nicely.
13:08:46 <stefan_> glad to hear ... er ... read ;)
13:16:14 <[dan]> 123
13:22:07 <Marvin--> hmm
13:24:36 <Marvin--> Igloo: any idea why http://packages.qa.debian.org/p/pyopenssl.html says that it's out of date on mips but your status page http://people.debian.org/~igloo/status.php?packages=pyopenssl says that it's "installed"?
13:25:14 <Igloo> Because qa updates daily and I update hourly
13:25:48 * Igloo disappears
13:27:17 <Marvin--> aha
13:40:26 <Lemmih> Hello jay_23 
13:40:55 <Lemmih> Looking for Haskell info or just wanna chat with other Haskellers?
13:54:33 <Marvin--> "One final point to note is that Newham will be using Internet Explorer. Steel explained that this is because Microsoft is very serious about addressing security concerns."
13:57:49 <musasabi> How would I perform an action once? That is writing something to output like void foo(void) { static int done; if(!done) { done++; foo(); } } ?
13:58:15 <musasabi> void foo(void) { static int done; if(!done) { done++; print(...); } } ?
13:58:35 * musasabi wonders why being tired makes variable selections go wrong
13:59:07 <jesse98> the whole point of functional programming is that functions always do the same thing with the same args
13:59:25 <jesse98> so if you want to do something diffeernt pass in diff args...
14:01:42 <musasabi> hmm...
14:01:55 <musasabi> Maybe I'll just wrap the whole thing inside a monad.
14:02:13 <musasabi> -> planning (with paper and pen)
14:02:14 <stefan_> musasabi: needless to say that there is no pure solution, but I guess you're prepared to work inside the IO monad ...
14:02:24 <jesse98> my question is, how do you handle exceptions in a pure functional language that supports partial values?
14:03:01 <stefan_> musasabi: you might want to check out the STRef stuff
14:03:13 <musasabi> stefan_: my problem is more or like "have I already initialized things when I land in the IO exception handler"
14:04:09 <musasabi> doing it with a monad which encapsulates the default initialisation might be the best.
14:11:16 * stefan_ calls it a day ...
14:11:20 <stefan_> goodnight all
14:11:25 <shapr> g'night!
17:22:31 <Pseudonym> Greetings.
18:10:44 <jesse98> hmm, why bother with exceptions if you adopt erlang style eror handling?
18:13:42 <stepcut> nice! My bug wiped the disk on the build machine :p
18:13:58 <stepcut> but only because it teamed up with a bug in the iso builder :-/
18:13:59 <roconnor> erlang style error handling?
18:14:24 <stepcut> well, its more like an ego perserving bug. "Oops, I made a mistake, better destroy the evidence"
18:14:54 <jesse98> yeah, you run tasks in isolated threads/processes if there's an error the thread/process is killed and the supervisor can decide what to do (often restarting)
18:15:44 <jesse98> exceptions seem really sticky in pure functional languages, but termination and threading are easy...
18:15:46 <roconnor> Sounds like exceptions are more flexible.
18:16:07 <stepcut> rm -rf needs a --one-file-system flag...
18:16:21 <jesse98> maybe, but termination will usually be more robust
18:16:39 <roconnor> unhandled exceptions usually naturally lead to termination anyways.
18:17:11 <jesse98> yes, but the difference is that in erlang you expect termination and can handle it
18:17:29 <Pseudonym> Anyone here know anything about solving sparse linear systems?
18:17:46 <Pseudonym> Discrete elliptic PDEs, to be precise.
18:18:42 <roconnor> Haskell handles threads in the IO monad, no?
18:19:17 <jesse98> i only have a basic knowledge of haskell...
18:19:42 <roconnor> I haven't used theads in Haskell.
18:46:26 <shammah> roconnor: erlang dosn't have threads either, just very lightweight processes.  And the isolation is required for the error containment required for their error-handling strategy to work.
18:47:34 <jesse98> well thread in a pure function language == process in erlang
18:48:43 <shammah> jesse98, yes, but calling them threads can lead to confusion.
18:51:20 <shammah> It is also worth noting that the three key features underpinning erlang's strategy are: Process Isolation; Supervisor Trees; Automatic logging of faults with debug info.
18:51:37 <shammah> you need all three of the system breaks down.
18:52:17 <jesse98> i'm reading his thesis now, but why do you need automatic logging?
18:52:50 <jesse98> (aprt from systems that need very high MTBF)
18:53:33 <shammah> jesse98, That's also in the thesis.
18:55:49 <shammah> but it comes down to permitting the freedom to 'let it crash', because the runtime will provide you with enough logging to debug the fault post crash you don't need to catch the errors in order to obtain it.
18:57:16 <jesse98> logging only seem like an essential attribute if you're writing server type stuff though
18:58:39 <shammah> jesse98, That seems like a strange statement.  Logging is critical if you are planning on being able to debug any application, regardless of where it is running.
18:59:07 <shammah> it wasn't logging, but *automatic* logging that is the issue here.
18:59:27 <jesse98> well you need access to debug info somehow, but breaking into a debugger would work just as well or better for a lot of apps
19:01:17 <shammah> jesse98, that's fine at the top of the supervisor tree, but below that it precludes the supervisor based restart.
19:01:53 <shammah> The expectation is that the application hasn't crashed, just one module, which will soon be restarted.
19:01:56 <jesse98> i dont see that, supervisors just need an indication of why a child failed: they don't need any sort of debug info
19:03:07 <jesse98> only reason I see for automatic logging of debug info is to stay on top of the reason the software is faulting so you can maintain a high MTBF and to ease debugging during development
19:03:31 <jesse98> and make it easier to debug problems in the field i guess
19:04:25 <shammah> The supervisors don't get the debug info.  I said logging, so it's being logged external to the program.  
19:04:52 <shammah> Still as I said at the start, read the thesis for a fuller description/defense ;)
19:59:22 <Sili> is haskell in much use today?
20:00:26 <Smerdyakov> No. Wait until tomorrow at 3 PM.
20:01:12 <Sili> thank you for that most useful answer :|
20:01:51 <Smerdyakov> Haskell is much in use in research communities.
20:01:54 <Smerdyakov> Barely in use anywhere else.
20:02:09 <Sili> ah. i barely learned of it
20:02:22 <CrewdenX> what kind of research?
20:02:35 <Smerdyakov> Mostly programming languages.
20:02:49 <Smerdyakov> Certain enlightened individuals in other areas have learned of Haskell from their PL researcher friends.
20:02:58 <CrewdenX> heh, thought so.
20:03:18 <Sili> PL?
20:03:22 <Sili> programming lang?
20:03:52 <Smerdyakov> Sili, yes, but in the plural.
20:04:39 <Sili> gratsi
20:42:34 <jesse98> heh, "Haskell is an ivory tower language: full of lofty ideas, built on solid semantic foundations, praised by grey-bearded professors and about as much use in the real-world as a chocolate teapot"
20:47:40 <shrimpx> i use lots of chocolate teapots. they're more expressive and safer
20:49:24 <ozone> who dares diss chocolate teapots?
20:50:55 <jesse98> it's from a paper on adding exceptions to haskell
21:03:37 <ozone> fighting words, they are
21:05:38 <Pseudonym> I can't think of a single Haskell luminary with a grey beard, apart from Phil Wadler.
21:06:33 <jesse98> sounds like an existence proof to me!
21:06:59 <Pseudonym> Not at all.  The charge was that there were at least two grey-bearded professors.
21:07:25 <jesse98> heh
21:09:02 <Pseudonym> I tell a lie.  Phil's beard isn't grey yet.
21:09:10 <Pseudonym> http://homepages.inf.ed.ac.uk/wadler/Pics/phil.gif
21:13:42 <Pseudonym> OK, John Hughes' beard appears to be grey.
21:13:45 <Pseudonym> So that's one.
21:14:42 <Riastradh> It is?
21:14:51 <Pseudonym> http://andersca.org/gallery/eurohaskell/p1010026
21:14:55 <Riastradh> The picture of him on his web page shows at most two grey hairs.
21:15:01 <Pseudonym> Hard to see, but I think that's grey.
21:15:17 <Riastradh> No, that's not grey.
21:15:46 <Pseudonym> Hmmm... OK.
21:15:52 <Pseudonym> So no grey-bearded professors so far.
21:16:37 <jesse98> well they dont have to be "haskell luminaries"
21:17:06 <Pseudonym> True.
21:38:26 <Pseudonym> OK, I just checked every member of the Haskell community on orkut with a photo of themselves.
21:38:28 <Pseudonym> No grey beards.
21:45:00 <dons> hmm. does the paper provide a citation for the greybeard how gave the praise? ;)
21:45:53 <dons> or maybe it should be "not praised by a single grey-bearded professor"
22:10:54 <musasabi> morning
22:11:01 <Riastradh> 'Night.
22:12:07 <musasabi> jesse98: One uses frequently exceptions in erlang code.
22:33:02 <earthy> Good Morning #Haskell!
22:33:19 <ozone> good moaning earthy
22:33:29 <earthy> time to get to the uni. :)
22:34:38 <earthy> btw, Robin Milner has a grey beard
22:34:49 <earthy> not very haskell, but quite luminary ;)
22:35:21 <Riastradh> Hindley probably has a grey beard as well.
22:38:59 <Pseudonym> Typical ML people having grey beards.
22:42:32 <dons> has anyone used the -fruntime-types option to GHC?
22:43:27 <musasabi> moeninf eathy
22:43:31 <musasabi> morning even
22:44:07 <heatsink> moeninf
23:51:08 <stefan_> good morning all (or choose your own time-zone dependent greeting)
23:52:13 <Pseudonym> Semi-salutations.
23:52:39 <stefan_> kind of
23:59:35 <ibid> good $TIME_OF_DAY all
