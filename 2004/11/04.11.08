00:21:05 <musasabi> How can I match any token with parsec?
00:27:36 <Lemmih> musasabi: anyToken (-:
00:29:46 <musasabi> thanks
01:08:26 <musasabi> and how do I skip untill a specific parser matches and return the results of that parser?
01:10:55 * musasabi looked at the source and found his answers
01:11:25 <Lemmih> Parsec have extensive documentation.
01:36:38 <earthy> :)
01:36:43 <earthy> nice realname ;)
01:55:22 <blackdog_> bah. external core can't cope with foreign calls... this isn't great.
02:04:23 <Lemmih> External core?
02:05:24 <dons> blackdog: really?
02:05:41 <dons> are you saying the parser doesn't handle it?/
02:08:10 <dons> hmm. maybe this is known, iirc
02:09:04 <dons> Lemmih: external Core is the totally desugared form of Haskell ghc does all its optimisations over.
02:09:13 <dons> sorry, Core is.
02:09:28 <dons> external Core is a user-friendly format of Core
02:10:02 <dons> you can get it via -fext-core
02:14:57 <Lemmih> Nice.
02:20:25 <blackdog_> dons: ah, i was hoping you were here. :)
02:20:59 <blackdog_> ghc-6.2.2: panic! (the `impossible' happened, GHC version 6.2.2):
02:20:59 <blackdog_> 	Mkexternalcore Died: Can'T Handle "Foreign Label" Declarations
02:20:59 <blackdog_> Please report it as a compiler bug to glasgow-haskell-bugs@haskell.org,
02:21:02 <blackdog_> or http://sourceforge.net/projects/ghc/.
02:21:20 <blackdog_> which is a massive pain in the arse.  Do you know where it gets handled in ghc?
02:23:53 <dons> in coreSyn/MkExternalCore.lhs
02:25:03 <blackdog_> sorry, was imprecise. I mean where the foreign calls get handled - the parser doesn't handle them, and nor does the prettyprinter...
02:25:03 <dons> you might have a bit of hacking to get it working. not sure
02:25:51 <dons> hmm. handled in what sense?
02:26:59 <blackdog_> well, afaict there isn't even a way to represent foreign calls in Core. I assume it gets preprocessed away somewhere?
02:27:24 <dons> prelude/ForeignCall.lhs might be useful
02:27:44 <dons> not sure. haven't looked at this very closely
02:28:00 <dons> ForeignCall says: 
02:28:00 <dons> data ForeignCall
02:28:00 <dons>   = CCall   CCallSpec
02:28:20 <dons> hehe. data Safety
02:28:22 <blackdog_> ok, thanks.
02:28:29 <dons>   = PlaySafe | PlayRisky
02:29:03 <dons> yeah. looks like that's where you want to go
02:30:03 <blackdog_> ah hah! %external it is...
02:30:08 <blackdog_> cheers
02:32:21 <dons> "Look, but Don't Touch." .. scary
02:33:01 <blackdog_> the DrIFTstuff? :)\
02:33:58 <dons> yeah. binary is always fun
02:34:14 <dons> that's the same stuff as the .hi file parser in hs-plugins
02:34:17 <dons> really fragile
02:34:37 <blackdog_> thought you managed to get rid of that...
02:34:47 <dons> parsing .hi files?
02:35:13 <dons> it's not fragile, I guess. no more than ghc is, when it parses .hi files
02:35:42 <blackdog_> i thought you managed to blag the hi parser from ghc, though.
02:35:51 <dons> it just feels fragile, cause you've got no types
02:35:58 <dons> yep. basically that.
02:36:33 <blackdog_> scary, no? Like tightrope walking without a pole and a net. 
02:36:45 <dons> yeah. and C programmers do this every day
02:37:19 <blackdog_> <straightfaced> but don, c has a static type system </>
02:37:21 <dons> you can get the same effect with unsafeCoerce# though
02:37:34 <dons> yeah. sure.
02:38:26 <dons> it's just as strong as the weakest level of typing in Haskell
02:38:38 <dons> which makes me nervous
02:47:30 <musasabi> Is there a way to dump what parsec has parsed until an error occurs?
03:27:08 <blackdog_> dons: Yeah, I know. I just can't resist stirring.
03:53:32 <morbidi> hello
03:54:06 <Lemmih> Hey
03:54:19 <morbidi> could anybody say if in a runhugs script I could run some files of my own
03:54:20 <morbidi> ?
03:55:41 <morbidi> I look it up on google
03:55:49 <morbidi> but I didn't find anything
03:55:50 <morbidi> :|
03:57:20 <Lemmih> You could probably pass the filenames to runhugs.
03:57:22 <Philippa> er, does hugs have System.Process or similar yet?
03:57:28 <Philippa> or is that not what's meant?
04:04:08 <Lemmih> morbidi: What effect are you tried to achieve?
04:04:18 <Lemmih> *trying
04:05:24 <morbidi> I'm trying to do a hugs script and running the script from runhugs
04:05:34 <morbidi> the hugs script is done
04:06:13 <morbidi> but I want to run the script from the bash
04:06:43 <Lemmih> Did you add "#!/path/to/runhugs" in the top?
04:06:51 <morbidi> yep
04:06:54 <morbidi> that's done
04:08:04 <Lemmih> Did you make it executable?
04:08:08 <morbidi> yep
04:08:13 <morbidi> w8
04:08:23 <morbidi> I have an idea
04:08:38 <Lemmih> `chmod +x hsfile`
04:10:33 <morbidi> I know that
04:10:39 <morbidi> but it's not it
04:10:56 <morbidi> I'm trying to run my t1.hs from a different file
04:11:00 <morbidi> is it possible?
04:11:10 <morbidi> like a bash scriptting file
04:12:26 <Lemmih> Can you just execute it like a normal program?
04:12:39 <Lemmih> *Can't
04:13:13 <morbidi> nope
04:13:27 <Lemmih> Why not?
04:13:35 <morbidi> dunno
04:13:59 <Lemmih> You don't get any error messages at all?
04:15:41 <morbidi> yep
04:16:01 <morbidi> w8
04:17:08 <morbidi> the thing is
04:17:45 <morbidi> how do I put 
04:17:53 <Lemmih> @seen shapr
04:18:09 <morbidi> #!/usr/bin/runhugs
04:18:10 <morbidi>  
04:18:10 <Lemmih> @seen lamdabot
04:18:10 <morbidi> module Main where
04:18:10 <morbidi> main = putStr "hello\n"
04:18:20 <morbidi> I have this
04:18:49 <morbidi> but I wanna run a separeted file
04:18:54 <morbidi> from this script
04:19:02 <morbidi> is that possible?
04:19:25 <morbidi> I'm going to lunch
04:19:26 <morbidi> bbl
04:19:33 <bourbaki> moin
04:19:34 * morbidi is gone: lunch...
04:20:29 <maihem> hi bourbaki new pic at http://maihem.org/images/out.png
04:20:53 <bourbaki> maihem did you see the papers i gave to bogel?
04:21:03 <maihem> three spheres, ambient, diffuse, and phong shading from two point light sources
04:21:06 <Lemmih> morbidi: You can do it with System.Cmd.system or System.Posix.Process
04:21:14 <maihem> I saw one about P Noise
04:21:34 <bourbaki> maihem i mean the two about bdrf lighting
04:21:42 <maihem> It looks like an inverse wavelet transform to me, with random coefficients
04:21:45 <maihem> no
04:22:13 <bourbaki> can you dcc?
04:22:27 <maihem> I can receive, but not send due to firewall.
04:22:31 <bourbaki> the cool thing about perlin noise is that its tileable
04:22:39 <bourbaki> ok then i send you the two papers
04:22:45 <maihem> cheers
04:23:27 <bourbaki> imho the best idea is to make the lighting a single function
04:23:34 <bourbaki> so you can interchange the lighting model
04:24:16 <maihem> yeah, that's what I've done
04:24:36 <bourbaki> what about texture stuff and such?
04:24:40 <maihem> I'm just working out the interface to add more interesting texturing and support for shadows
04:24:58 <bourbaki> have you seen the articles at flipcode?
04:25:12 <bourbaki> www.flipcode.com
04:25:46 <maihem> I'm passing the list of light sources, the parametric equation of the ray, the distance along the ray of the strike, the object that is struck, and about to add all the objects in the scene -> into the lighting function
04:25:48 <bourbaki> and on www.magic-software.com youll find some stuff on volume rendereing which isnt that hard to implement i thinkg
04:25:50 <bourbaki> -g
04:26:25 <bourbaki> i think it might be cool to have something like a function tree
04:26:27 <maihem> 04shading.pdf no worky
04:26:34 <bourbaki> heh ;) no worky sec
04:26:50 <maihem> thanks
04:27:06 <bourbaki> np
04:27:14 <maihem> I'm thinking about projecting the silhouette of a surface, instead of tracing rays
04:27:37 <bourbaki> for shadows?
04:27:53 <maihem> No, ingeneral.
04:28:01 <maihem> But I'm not if if/how it could work
04:28:10 <maihem> s/if /sure 
04:32:56 <bourbaki> maihem you could also build volumetric objects quite easily
04:34:09 <maihem> bourbaki: BTW, what sort of speed do you get from your ray tracer. On Athlon 1.1Ghz, On that 1024x1024 image, I get ~15 secs user
04:34:25 <maihem> I want to speed up a bit, so I want to find where I'm going wrong
04:34:37 <bourbaki> i dont write a raytracer :)
04:34:47 <maihem> oh, oops. I thought it was you :)
04:34:55 <bourbaki> nope bogel does
04:35:04 <maihem> ah, heh
04:35:17 <bourbaki> but on that flipcode site there where some optimization techniques
04:40:31 <musasabi> Why does "many foo" succeed but "many (choice [foo,...])" not?
04:40:38 <musasabi> with parsec that is.
04:41:03 <Philippa> likely because it's predictive
04:41:17 <Philippa> try many (choice [try foo, ...])
04:41:25 <Philippa> a partial match on foo without a try 'round it will fail outright
04:42:44 <musasabi> hmm still the same. 
04:43:23 <musasabi> "many (choice [try foo])" works, but "many (choice [try foo,bar])" not.
04:44:11 <musasabi> solved ^_^
04:44:12 <Philippa> you may need a try on bar as well?
04:46:16 <musasabi> no, bar was doing "funny" things with zero lenght input.
04:47:49 <Philippa> ah
05:51:28 <arjanb> yay darcs 1.0.0 has been released
06:06:09 <Philippa> it might be chewing up 99% of my CPU time, but at least it connects :-)
06:34:57 <Philippa> testing...
06:35:19 <Philippa> there's something daft going on with the control I'm dumping all the IRC stuff into, which is... irritating
07:28:14 <bourbaki> moin
07:32:51 <maihem> what does moin mean, and what language is it?
07:33:26 <bourbaki> its morning in northern german accent :)
07:35:32 <bourbaki> and the best thing is you can use it all day ;)
07:36:27 <Igloo> http://en.wikipedia.org/wiki/Moin
07:37:35 <maihem> freaky
07:37:38 <bourbaki> heh
07:38:15 * Igloo doesn't really know why it suddenly became hip fairly recently
07:38:33 <bourbaki> cause i use it all the time ;) and me is hip ;))
07:38:52 <bourbaki> anyone in here familiar with scale spaces
07:38:54 <bourbaki> ?
07:39:19 <bourbaki> actually i have two hips
07:39:33 <maihem> I'm so hip its a wonder my legs don't fall off
07:39:48 <bourbaki> :)
07:40:09 <bourbaki> can i use lambda bot to parse the chan logs from in here?
07:40:25 <bourbaki> i wanna know when the first occurancy of moin was ;)
07:41:16 <bourbaki> @arr
07:46:46 <morbidi> Lemmih: how?
07:46:51 * morbidi is back from lunch... after 3 hrs 27 mins 12 secs
07:58:13 <Boegel> hello #haskell
07:58:42 <bourbaki> hell-0 Boegel
07:59:21 <maihem> hi Boegel 
07:59:27 <maihem> moin :)
07:59:31 <bourbaki> heh
08:12:39 <Boegel> maihem, can I see some renders of your raytracer ? Especially scenes with specular reflection, because I'm not sure about my images
08:21:36 <bourbaki> is there a good haskell editor for windoze?
08:21:49 <Boegel> emacs for win32 :p
08:21:57 <bourbaki> atm im useing xemacs in cygwin
08:22:18 <bourbaki> and i like it but the highlighting isnt working propperly :(
08:25:59 <maihem> maihem.org/images/out.png is the only one up ATM
08:28:29 <Philippa> bourbaki: textpad with the haskell syntax file's OK
08:28:41 <Philippa> not emacs or vi-clone class, but it's a good MDI-with-workspaces editor
08:29:32 <bourbaki> urghs non free sw ;)
08:31:13 <maihem> bourbaki: you're running windows, you've already sold your soul. You're not turning all pious on us are you?
08:31:18 <Igloo> If you want free software, www.debian.org is the place for you!
08:31:27 <maihem> hear, hear.
08:31:39 <bourbaki> :)
08:38:07 <bourbaki> maihem and who said that i bought windoze MUHAHAHAHA !
08:39:18 <Boegel> maihem, can you give me the coordinates you used for your view point, camera, spheres and lights ? so I could do the same render and see if it's similar ?
08:44:46 <maihem> Boegel: Just a sec
08:45:29 <maihem> Scene [PointLight (Vector 5 5 0),PointLight (Vector (-2) 5 (-2))] [Sphere (Vector 0 0 7) (Scalar 3), Sphere (Vector 3 0 7) (Scalar 2), Sphere (Vector (-3) 0 7) (Scalar 2)]
08:45:53 <maihem> The camera is at 0,0,0 looking through 0,0,1 with 0,1,0 up
08:46:50 <maihem> the x range is -1 to 1 at a distance of 1 from the camera (along the z axis), and y is the same
08:47:39 <maihem> the spheres are 0.05 ambient, 0.4 diffuse, and 0.55 specular, with the power of the specular function as 32
09:02:04 <bourbaki> moin TheHunter
09:02:16 <musasabi> Can ghc optimize type classes away if they are used in a monomorphic context?
09:02:31 <TheHunter> moin bourbaki 
09:03:53 <cptchaos> musasabi: in what respect, as far as I remember core (ext) does not know classes.
09:06:40 <musasabi> cptchaos: yes it reduces them to the tuple representation.
09:08:30 <musasabi> cptchaos: mainly that given "instance FooC Bar where foo = fooBar" are "fun1 :: Bar -> Int \n fun1 = foo" and "fun2 :: Bar -> Int \n fun2 = fooBar" different?
09:09:08 <cptchaos> \me parsing
09:11:18 <cptchaos> musasabi: I don't get the point, maybe I'm to tired
09:11:37 <mattam> fun 1 :: FooC a -> Int maybe ?
09:12:34 <Boegel> maihem, what do you mean with this  ? "The camera is at 0,0,0 looking through 0,0,1 with 0,1,0 up"  (especially the up part)
09:13:33 <maihem> you could have a camera where "up" is diagonal
09:13:48 <maihem> It is a term from povray
09:14:21 <bourbaki> diagonal?
09:14:49 <maihem> I've just got a straightforward camera where objects with greater positive y value are higher in the image (0,1,0) is up from (0,0,0) rather than (1,1,0) being up from (0,0,0) - the second is diagonal
09:15:01 <musasabi> the point is that do typeclasses cost something when used in a monomorphic setting.
09:15:34 * musasabi is pondering whether to use them only in polymorphic cases or simply in all cases when generating code.
09:15:44 <bourbaki> maihem Boegel you two know about point ptojection in homogenous spaces?
09:16:03 <maihem> bourbaki sounds like maths to me
09:16:13 <bourbaki> maihem it is :)
09:16:28 <maihem> what does it mean - it seems like gibberish
09:16:29 <maihem> :)
09:16:47 <bourbaki> well vectors look like
09:16:52 <bourbaki> (x,y,z,0)
09:16:59 <bourbaki> and points look like
09:17:03 <bourbaki> (x,y,z,1)
09:17:25 <bourbaki> and if you project then the 4th coordinate gets bigger the farther you go away
09:17:47 <bourbaki> and since the space is homogenous you need to scale the vector back to 1 in the last component
09:17:59 <maihem> I don't understand... a point is further away than a vector?
09:18:05 <bourbaki> so (x/w,y/w,z,1)
09:18:18 <bourbaki> a vector is not a point
09:18:52 <bourbaki> so (x/w,y/w,z,w)
09:18:58 <bourbaki> so (x/w,y/w,z,w/w)
09:19:00 <bourbaki> :)
09:19:01 <maihem> bourbaki: I don't understand
09:19:09 <cptchaos> mussabi: got it ...
09:19:19 <bourbaki> its a normal point projection
09:19:24 * maihem thwacks bourbaki
09:19:58 <bourbaki> maihem bogel you can get the opengl red book for free in html form on the internet
09:20:05 <cptchaos> musasabi: however I don't know if it optimizes it away it
09:20:21 <bourbaki> there are things about the camera matrix you are interested in like the different projections and stuff
09:20:35 <maihem> oh, the whole w coordinate for describing translation in a matrix?
09:21:06 <bourbaki> maihem right so the farther you get away form the camera point the bigger gets the w coord
09:21:27 <bourbaki> and thus the smaller get x and y when you scaled it to the right space again
09:21:43 <maihem> oh, wait, I get it. So you can have a orthographic projection by being really, really far away.
09:22:11 <bourbaki> no orthorgraphic projection looks different
09:22:48 <bourbaki> maihem Boegel http://fly.cc.fer.hr/~unreal/theredbook/appendixg.html
09:22:55 <maihem> Oh, but I could use this to make my sphere with two side spheres actually look like the two side spheres are on the sides instead of looking like they're behind?
09:24:07 <bourbaki> ?
09:24:16 <bourbaki> sry i didnt get that :)
09:24:49 <maihem> my picture at maihem.org/images/out.png is supposed to have the two little spheres on the sides of the big one. but they look behind because of the perspective.
09:25:13 <maihem> Is this what I would use to make it look more like it is
09:25:18 <bourbaki> ah i see well there are the two projection matrices you want to implement
09:25:26 <Igloo> IIRC it's just a way of thinking about what maths to do for the projection I've forgotten the name of
09:25:46 <Igloo> It won't actually change what you see on the screen
09:26:02 <bourbaki> point projection does of course
09:26:10 <bourbaki> it makes farther away objects smaller
09:26:20 <bourbaki> orthogonal projection doesnt do so
09:27:23 <maihem> If I reduce my view angle and move the objects further away (so I'm "zooming"), would that make the image look more like the scene it is supposed to represent?
09:27:40 <Igloo> But the above is used for point projection (which I'm sure has another name), isn't it? Well, I guess if you ignored w instead of dividing by it you'd get orthographic
09:27:41 <bourbaki> i guess yes
09:27:58 <bourbaki> just apply the matrix on the site i gave you :)
09:28:08 <Igloo> Been too long since I looked at this stuff
09:28:41 <bourbaki> why dont i get the == for free once ive introduced a new type?
09:29:10 <Igloo> say deriving Eq
09:29:41 <bourbaki> data IGingLineType  = ChangeingYangLine |
09:29:41 <bourbaki> 		      StaticYangLine    |	
09:29:41 <bourbaki> 		      StaticYingLine    |
09:29:41 <bourbaki> 		      ChangeingYingLine
09:29:52 <bourbaki> and in the end deriving Eg?
09:30:10 <Igloo> Eq
09:30:21 <bourbaki> er yes sry :)
09:30:29 <Igloo> For Equal or Equality or something
09:31:33 <Boegel> bourbaki, i think you mean to say that vector's should always have length 1 when using them in lighting calculations and such
09:31:54 <bourbaki> Boegel no thats just a normalized normal
09:32:11 <bourbaki> that is v /in V , |v| = 1
09:32:13 <maihem> I've invented the tangentized tangent
09:32:31 <bourbaki> does anyone want to use my iging thingy :)?
09:33:21 <maihem> you keep your iging thingy to your self. I don't know what it means to ig, but it doesn't sound very pleasant :-P
09:33:36 <bourbaki> hehe
09:33:41 <bourbaki> ig nobel prize
09:33:56 <bourbaki> no its that anchient chinease oracle thingy
09:34:22 <maihem> ?
09:35:02 <bourbaki> you use three coins and throw them 6 times and build a hexagramm which gives you an answer to a previously asked question
09:35:41 <maihem> ?
09:36:23 <bourbaki> http://en.wikipedia.org/wiki/Book_of_Changes
09:36:45 <maihem> sry, I'm going to have to go AFK now. I've got to tidy up for tomorrow (the letting agency is bring a potential new tenant to look at the flat I'm moving out of)
09:37:02 <bourbaki> heh
09:38:24 <maihem> shame, its a nice flat, good price. nice area. If anybody is looking for a flat in the Bury/Rochdale area in the UK, contact AJ Properties www.ajproperties.co.uk
09:39:14 <bourbaki> :)
09:39:55 <Boegel> maihem, I'm rendering now
09:41:06 <maihem> cool, let me know how long it takes, I want to compare.
09:41:38 <Boegel> we'll, mine is really inefficient right now :)
09:42:01 <Boegel> because specular and diffuse are seperate functions now, so I recheck shadows for both specular and diffuse
09:42:13 <Boegel> and also re-calculate the dir vectors for the lights
09:42:49 <maihem> That's how I'm intending to do mine. I thought it wouldn't be a problem with Haskell
09:42:57 * maihem really is AFK now
09:43:07 <Boegel> maihem, getting the camera exactly right is really hard, but I can get a similar render
09:43:13 <Boegel> maihem, 5 min's ;)
09:45:18 <marcot> Hello.
09:45:26 <Boegel> hello marcot
09:45:28 <Boegel> new ?
09:45:42 <marcot> What's the difference between data with one constructor and newtype:
09:45:43 <marcot> ?
09:46:10 <marcot> Boegel: here? Not so much.. I use to come here sometimes..
09:48:00 <Boegel> marcot: I haven't seen you here yet (I think), so that's why I ask
09:48:29 <marcot> Boegel: ok, no problem.. =)
09:48:47 <marcot> Boegel: but do you know the answer to my question?
09:49:50 <Boegel> marcot, no, I'm sorry... I'm still learning Haskell really :)
09:50:29 <KiMoS> what does `div`  do  ?
09:50:49 <KiMoS> it give the answer without floatings?
09:50:55 <bringert> @type div
09:51:15 <bringert> where's lambdabot?
09:51:29 <Boegel> maihem: http://studwww.ugent.be/~kehoste/thesisPublic/specTest.png
09:51:45 <Boegel> bringert, he went to sleep, because he was tired
09:51:46 <Boegel> :p
09:51:58 <Boegel> maihem, I don't seem to have the perspective problem...
09:52:29 * maihem notices the bright red text
09:52:49 <maihem> well you've got the little sheres not so little ;)
09:53:07 <marcot> And is deriving necessary when I'm going to define a instance of the function later?
09:53:14 <Boegel> ow, they're smaller :s
09:53:15 <marcot> of the data type.
09:53:15 <Boegel> woops :)
09:53:18 <Boegel> moment
09:53:25 <marcot> Os is it optional?
09:53:32 <ibid> marcot: deriving is not allowed in such a case
09:53:47 <kosmikus> marcot: a newtype doesn't change the representation of the underlying type, i.e., the constructor is only present to steer the typechecker, but doesn't have any implementation-related representation
09:55:21 <kosmikus> marcot: deriving a class is like giving an instance for the class on the type you are defining; this means, you can either define an instance manually, or derive an instance, but not both
09:56:23 <marcot> ibid: kosmikus: Thanks.
09:56:55 <Boegel> maihem: http://studwww.ugent.be/~kehoste/thesisPublic/specTest2.png
09:57:30 <bringert> KiMoS: it's integer division, i.e. it gives an integer quotient
09:57:39 <bringert> Prelude> 12 `div` 5
09:57:40 <bringert> 2
09:57:46 <Boegel> maihem, also, I think your ambient is higher than 0.05 :)
09:57:51 <bringert> div :: Integral a => a -> a -> a
09:57:52 <marcot> kosmikus: Is the constructor fom newtype a function like the one from data?
09:58:28 <Boegel> maihem, and nevermind the slight difference in highlight, that's just because the camera's aren't 100% the same
09:58:44 <KiMoS> ok bringert  thanks  
09:59:04 <KiMoS> what is the best book to get for haskell?
09:59:14 <dash> _Alice In Wonderland_.
09:59:15 <Boegel> Haskell School of Expression !
09:59:19 <KiMoS> or a very good tutorial?
09:59:43 <KiMoS> The Craft of Functional Programming,
09:59:43 <KiMoS> Simon Thompson, Addison Wesley.
09:59:46 <KiMoS> isnt that good?
10:00:01 <KiMoS> the craft of Functional Programming, ?
10:01:39 <marcot> dash: then I'm very lucky, cause I'm reading without even knowing that it's a Haskell book! =P
10:02:09 <dash> "The best book on programming for the layman is _Alice In Wonderland_, but that's because it's the best book on anything for the layman"
10:02:58 <kosmikus> marcot: I don't understand the question
10:04:20 <marcot> kosmikus: a data constructor can be defined as a "special" function, like: data Shape = Circle Float ; Circle :: Float -> Shape. Is it true for newtype constructors.
10:05:19 <maihem> Boegel: how to you calculate the contribution of each light source for each of diffuse/specular, plus the ambient?
10:05:33 <marcot> dash: sorry, what's layman?
10:06:29 <dash> someone who's not in a profession 
10:06:41 <marcot> dash: ok! =)
10:06:53 <dash> opposite of 'expert', sort of :)
10:07:14 <ibid> who's not in  _the_ profession
10:07:20 <ibid> :)
10:07:25 <dash> yeah, that is what i meant :)
10:07:31 <ibid> most people are in _a_ profession
10:07:32 <ibid> :)
10:07:33 <marcot> dash: =) I understood...
10:07:41 <Nomius> If I have [[a]]: how can I take all the firsts elements of all the sublists?
10:08:22 <maihem> map head thelist
10:08:50 <Nomius> yeah! that's it :)
10:08:51 <monochrom> I am a professional student.
10:08:55 <Nomius> thanks :)
10:08:59 <maihem> I am a professional dosser
10:09:10 <monochrom> By that I mean being a student has become my profession. :)
10:09:46 <monochrom> I am an expert in keeping teachers happy.
10:09:47 <Nomius> something like: f [(x:xs)] = map head [(x:xs)]?
10:09:57 <kosmikus> marcot: yes, a newtype constructor is also more or less like a function; constructors additionally allow pattern matching
10:10:10 <monochrom> Just write f s = map head s
10:10:14 <maihem> Nomius or f = map head
10:10:35 <monochrom> Or just inline it everywhere you need it.  "map head" is not a lot to type.
10:10:57 <maihem> then f [[0,1],[1,2],[2,3],[3,4]] = [0,1,2,3]
10:11:45 <Boegel> maihem, I use the algorithm :p
10:11:47 <Nomius> <monochrom> Just write f s = map head s, no, cuz I need the rest of the list to make recursion...
10:11:59 <maihem> Algorithm?
10:12:05 <monochrom> map does the recursion for you
10:12:29 <dash> Nomius: it sounds like you are not explaining all of what you want
10:12:34 <Boegel> maihem, for every intersection I cast a ray to each light source, and add the different diff/spec components to get the total diff/spec
10:12:47 <Boegel> ambient is caused by an AmbientLight
10:12:52 <Nomius> I'm trying to traspose a matrix...
10:12:55 <maihem> I'm currently doing spec*(sum of all specular highlights/numlights) + diff*(sum of all specular highlights/numlights) + ambient
10:13:03 <Nomius> transpose :: [[a]] -> [[a]]
10:13:10 <marcot> kosmikus: ok, thanks.
10:13:14 <Nomius> transpose [(x:xs)] = (map head [(x:xs)]):(transpose [xs]
10:13:17 <Boegel> maihem, same here, but why do you ask ?
10:13:34 <monochrom> List.transpose
10:13:34 <Boegel> maihem, why do you do /numlights ?
10:13:36 <maihem> cos my ambient is *definately* + 0.05
10:14:22 <monochrom> @info List.transpose
10:14:22 <Boegel> maihem, it's strange, because the bottom of your sphere's are clearly visible, and 0.05 isn't much (and no light is able to reach the bottom of your spheres)
10:14:39 <maihem> Boegel: so the surface quality of the object is easily guaranteed to never hit one (to only touch it)
10:14:39 <Boegel> maihem, how long do your render take ?
10:14:47 <maihem> 15 seconds :)
10:14:55 <Boegel> wow, that' really fast :)
10:15:01 <Boegel> I'm doing something wrong then ;)
10:15:12 <maihem> Boegel: look for all strictness.
10:15:17 <Boegel> but I have to check performance issues, I'm not really paying attention to that
10:15:23 <Boegel> maihem, what do you mean ?
10:15:46 <monochrom> http://www.haskell.org/onlinereport/list.html#sect17.3
10:16:15 <maihem> I used to get really bad performance with all haskell stuff till I realised I should stop trying to work it like C and force things to be calculated. Now I'm just letting the compiler worry about it, and I just write each function to be simple and clear as to what it means
10:16:57 <maihem> also, if you are writing pixel values to an aray, use an MArray, rather than normal array
10:17:35 <Boegel> maihem, how do you store your file ?
10:18:22 <KiMoS> i dont understand what gcd  do  anyone?
10:19:25 <maihem> I have a function putPGM that takes the x and y resolution and does roughly: map trace [(x,y) | y <- [0..w-1], x <- [0,h-1] so the output comes in the right order to be converted to [Char] and written straight out.
10:19:31 <Boegel> maihem, I have to go now, I hope I can discuss this with you later
10:19:38 <maihem> sure, bye
10:20:15 <monochrom> gcd x y is the greatest common divisor (highest common factor) of x and y.
10:21:07 <KiMoS> monochrom is there any website that decribt all thos types?
10:21:24 <monochrom> http://www.haskell.org/onlinereport/
10:21:45 * maihem goes back to tidying
10:23:14 <KiMoS> thanks
10:27:31 <KiMoS> http://www.informatik.uni-bremen.de/~cxl/docs/ZVON/Outputprelude/index.html     monochrom thats a beter webby :)
10:32:56 <bourbaki> is there a function which deletes spaces from strings?
10:33:18 <Igloo> filter (' ' /=)
10:34:40 <bourbaki> thx
11:15:17 <bourbaki> tada! done :) who wants to know his fortune ;)?
11:16:28 <xkb> hit me
11:17:43 <bourbaki> xkb http://rafb.net/paste/results/XYWkN754.html :) ill ask shapr to add it to lambdabot
11:18:38 <xkb> wow.. is that I-Ching?
11:18:44 <bourbaki> yep
11:18:50 <xkb> nice
11:19:03 <xkb> It only needs to be translated I guess :d
11:19:06 <bourbaki> i just didnt add the interpretation things cause that was too much for a chan :)
11:19:12 <bourbaki> yeah some of the names
11:19:27 <bourbaki> i just copied it from the inet ;)
11:19:31 <xkb> bourbaki: the source of lb is available
11:19:33 <bourbaki> the names that is
11:19:40 <xkb> there even is a darcs repos
11:19:41 <xkb> I think
11:20:00 <bourbaki> is it easy to make it a command for the bot?
11:20:05 <bourbaki> like @iging ?
11:20:25 <xkb> I think so.. I have the source right here.. old version though
11:21:00 <bourbaki> xkb do you stay a bit longer? i need to fix me some noodles then ill have a look at it and also change the names :)
11:21:20 <xkb> Ill be around for some time..
11:21:30 <xkb> and otherwise Im here 2morrow ;)
11:21:41 <bourbaki> ah ok ill need about 30 min to fix and eat my noodles
11:21:53 <bourbaki> tomorrow ill be entangled with something else :)
11:21:56 <xkb> ok.. have a nice dinner :D
11:22:04 <bourbaki> ill finish that thing today or never ;)
11:24:10 <maihem> Oh, that's the thing you were talking about :)
11:28:11 <bourbaki> maihem right :)
11:39:30 <bourbaki> bk
11:40:02 <bourbaki> i invented the make one dish dirty spaghetti cooking :)
11:50:42 <maihem> how?
11:50:53 <bourbaki> heh
11:50:58 <maihem> eat out of the pan?
11:51:05 <bourbaki> nope
11:51:12 <bourbaki> id have to wash that then everytime
11:51:13 <kang> hi:)
11:51:16 <bourbaki> no good :)
11:51:21 <kang> shouldn't : allEqual x y z | x == y && y == z = True
11:51:22 <bourbaki> no i cook the noodles
11:51:26 <kang> | otherwise = False
11:51:28 <kang> works ? 
11:51:43 <monochrom> You can omit "= True". It's redundant.
11:51:47 <maihem> break up the spaghetti, swallow them, then swallow boiling water?
11:52:02 <monochrom> Oh there is more redundancy than I think.
11:52:15 <bojohan> eating out of the kitchen sink
11:52:18 <monochrom> allEqual x y z = x==y && y==z
11:52:20 <maihem> lol
11:52:29 <kang> so it gives back true/false automatically ^^
11:52:32 <kang> oki
11:52:34 <kang> thx:)
11:52:49 <bourbaki> and then i have mixed tomatoes in a tube which i do into the bowl then just apply alot of chili and such and oil throw the noodles in stir done :)
11:54:19 <monochrom> If you eat out of the fridges and shelves in the supermarket, I'll be amused.
11:54:39 <bourbaki> hm
11:54:46 <bourbaki> you give me a lot of new ideas :)
11:54:58 <bourbaki> but i cant cook the noodles there ;)
11:55:22 <Sky_hawk> that's a nice mini-mob: just start eating with a group of people in a supermarket
11:55:42 <Sky_hawk> take bread, butter, jam, etc, etc,
11:55:56 <Sky_hawk> milk from the carton :)
11:56:00 <bourbaki> :) you could make a french picknick ;) with cheese wine and baghuette :)
11:56:09 <Sky_hawk> bourbaki: yea!
11:56:13 <kang> monochrom: it gives me variable not in scope *hides* (with allEqual :: Int -> Int -> Int -> Bool as def)
11:56:30 * kang brings french cheese 
11:56:42 <bourbaki> the funny thing is if you throw something down in the supermarket you dont have to pay it
11:57:23 <bourbaki> so all you would have to do is let someone lie down on one of these trolley and then let it fall into his mouth
11:58:33 <bourbaki> kang theres no need to bring it its already in the supermarket ;)
11:58:49 <kang> bourbaki: but mine is real and on my table ;p
11:59:09 <monochrom> kang: I cannot reproduce the error you reported.
11:59:10 <bourbaki> heh are you from france?
11:59:58 <kang> im 
12:00:23 <kang> monochrom: arhg ^^ well i tried using eclipse + haskell plugin as well as command line hugs98, but its not like if i knew too much 
12:08:19 <sarah> lol
12:08:20 <sarah> ^^
12:08:34 <kang> bonjurno
12:08:44 <sarah> haskell seems to be a famous language xD
12:08:54 <bourbaki> :)
12:08:59 <kang> haskell rocks :D
12:09:24 <sarah> thats a matter of opinion ^^
12:09:38 <maihem> no, its official
12:10:00 <maihem> Haskell roxors more than everything :)
12:10:27 <musasabi> haskell is quite nice ^_^
12:11:06 <sarah> well, im fighting with eclipse+haskell plugin/ghci and its the last crap :)
12:11:15 <sarah> poor me *sigh*
12:11:22 <bourbaki> he
12:11:24 <bourbaki> h
12:11:31 <musasabi> sarah: you might find emacs more comfortable.
12:11:39 <Cale> ghci is usually pretty nice -- I don't use eclipse though, so I couldn't tell you about that.
12:12:15 <sarah> i heard emacs is quite good, but im forced to use eclipse
12:12:48 <Sky_hawk> musasabi: you might, but i dought it
12:12:52 <bourbaki> sarah which uni are you at that uses eclipse and hx?:)
12:13:00 <Sky_hawk> doubt even
12:13:02 <sarah> fu berlin
12:13:29 <Cale> emacs + haskell-mode is pretty usable. I choose the less-smart form of autoindenting and the only annoyance for me is that backtick matching and paren matching in the presence of \'s is a little broken
12:13:32 * Sky_hawk used eclipse, but with java and php, never haskell
12:13:48 * kang thinks vim is good for all that ^^
12:14:07 * Sky_hawk uses vi or ultraedit for haskell or any other languege for that matter :)
12:14:15 <Cale> sarah: you couldn't just use another editor and claim that you used eclipse?
12:14:16 <Cale> :)
12:15:07 <Cale> I also use vim for Haskell quite often.
12:15:14 <sarah> yeah, but im as bad as coding as <...> xD
12:15:21 <sarah> in*
12:15:28 * monochrom dictates code to his secretary.
12:15:46 <kang> as kang
12:15:47 <kang> :D
12:16:00 <wagle> speech recognition
12:16:09 <Sky_hawk> monochrom: that's would be cool
12:16:23 <sarah> well, can someone tell me what "Data constructor not in scope" error msg means?
12:16:40 <sarah> some ghci experts here? ^^
12:16:53 <Sky_hawk> sarah: you probebly used "Data" like it was a type ?
12:16:56 <Cale> What's the line of code it applies to?
12:16:57 <monochrom> It means it meets a data constructor but it finds no declaration of the data constructor in scope.
12:17:14 <Sky_hawk> wow
12:17:23 <Sky_hawk> that's hel for ya
12:17:26 <Sky_hawk> +p
12:17:32 * Sky_hawk shuts up
12:17:54 <bourbaki> sarah do you do your introduction CS courses in haskell?
12:17:59 <sarah> lol
12:18:08 * sarah = girl
12:18:13 <sarah> no coding questions please
12:18:16 <sarah> O_o
12:18:35 <sarah> well
12:18:38 <sarah> thats my code:
12:18:39 <sarah> AllEqual :: Int -> Int -> Int -> Bool
12:18:40 <sarah> AllEqual x y z = x==y && y==z
12:18:44 <kang> Cale: the one i pasted higher
12:18:57 <monochrom> change it to allEqual.  small letter a
12:19:13 <sarah> roger
12:19:15 <bourbaki> sarah im a bit confused :) what course do you use haskell for then ?
12:19:17 <monochrom> Why is everyone doing allEqual today?
12:19:32 <sarah> lol, it compiles!
12:19:33 <Cale> first letter capitals are reserved for use in data constructors -- the things that you can pattern match
12:19:36 <sarah> a miracle
12:19:39 <kang> monochrom: guess ^^
12:19:45 <sarah> merci :)
12:20:08 <monochrom> function names must begin with a small letter
12:20:35 <bourbaki> the wonders of #haskell ;)
12:20:55 <monochrom> later you will learn user-defined data types and you will see what names must begin with capital letters, as Cale says.
12:21:30 <kang> .oO(people should use C)
12:21:31 <bojohan> the "paren matching in the presence of \'s is a little broken"-problem should be fixable
12:21:35 <kang> .oO(*runs*)
12:21:47 <monochrom> I agree with you kang.
12:22:12 <sarah> the code even works :D
12:22:16 <sarah> awesome
12:22:25 <sarah> merci guys :)
12:22:31 <monochrom> People should use C, so I can use Haskell and I complete more programs with fewer mistakes and in less time than people.
12:22:40 <kang> well
12:22:44 <kang> people should use C#
12:22:45 <kang> :>
12:23:04 <monochrom> Ah. C# is not that bad.  People should use C++ so I can use C# and ...
12:23:14 <kang> that's more how i see it
12:23:25 <bourbaki> sarah do you study computer science?
12:23:41 <kang> well - having probs understanding the full logic in haskell :)
12:24:09 <Philippa_> kang: it's pretty simple, the only problem is it's nothing to do with most other languages
12:24:14 <sarah> sadly yes ^^
12:24:23 <sarah> i think ill switch
12:24:31 <bourbaki> sarah hehe :) to what study?
12:24:38 <sarah> business
12:24:41 <bourbaki> i quit CS also :) twice
12:24:43 <kang> Philippa_: that should be my problem :p well, i guess i would have to really learn it, i just looked up docs a bit to help Sarah out
12:24:50 <monochrom> You have to give up on mutable state variables in order to understand haskell.
12:24:57 <Philippa_> oh dear, *another* one quitting CS for BS
12:24:58 <bourbaki> urgs :)
12:25:27 <monochrom> It is possible to give up on mutable state variables.  Try to write programs in Java or C# with immutable objects.
12:25:59 <monochrom> In Java, String, BigInteger, ... are immutable objects.
12:26:20 <bourbaki> sarah are you in the first semester?
12:27:50 <bourbaki> are there any demo coders here in #haskell?
12:27:54 <Philippa> 'lo shapr
12:27:56 <bourbaki> hi shapr! :)
12:27:57 <monochrom> If you like both computers (but not to the point of programming them) and business, there are IT degrees of sorts.
12:28:02 <maihem> yo
12:28:09 <shapr> greetings!
12:28:09 <bourbaki> shapr you need to add my iging to the bot :)
12:28:13 <shapr> Wassup? Any nifty code?
12:28:21 <shapr> your ig'ing?
12:28:33 <Philippa> monochrom: that kind of combination is worrying. IT without programming = IT that's full of holes, 'cos it's the only point folks have to do anything rigourously
12:28:33 <musasabi> writing dirty C++ interface thing for haskell..
12:28:39 <maihem> Just don't ask him to get his ig out again
12:28:56 <maihem> There are ladies present now
12:28:59 <shapr> I just noticed I have a bunch of lambdabot patches in my inbox, from kosmikus, dons, and shaleh
12:29:08 <Philippa> maihem: I've been present a fair while now...
12:29:13 <Philippa> heh
12:29:22 <bourbaki> shapr http://rafb.net/paste/results/XYWkN754.html
12:29:52 <bourbaki> @arr
12:29:53 <lambdabot> Well me hearties, let's see what crawled out of the bung hole...
12:30:01 <shapr> lambdabot needs autoreconnect code..
12:30:07 <shapr> maybe there's some in the various patches I've got.
12:30:18 <bourbaki> shapr ask the iging if this is a good idea ;)
12:30:21 <shapr> bourbaki: hey that's nifty!
12:30:31 <shapr> it's usually called I Ching in engish.
12:30:34 <monochrom> There are a lot of rigorous things to do about computers besides programming.  Cost accounting, for example.
12:30:37 <bourbaki> heh ill do a translation though for the few german words
12:31:21 <shapr> do you have tetragram lookup code as well?
12:31:25 <sarah> monochrom: i would aim to become it-manager
12:31:36 <shapr> er, trigrams
12:31:41 <Philippa> monochrom: I rarely run across people who can work out an accounting system off their own back who couldn't program
12:31:52 <bourbaki> shapr hexagrams :)
12:32:03 <bourbaki> shapr you mean what they mean the interpretation?
12:32:05 <dash> Trigrams? Like in ISO C? >:D
12:32:28 <shapr> right, - - --- - -
12:32:30 <bourbaki> shapr they are often very long i can search for some online interpretations and add then as an url in the answer
12:32:34 <dash> bourbaki: also make it say "A Suffusion Of Yellow" sometimes 
12:32:39 <Philippa> but really, IT folks who really can't code at all are not who you want implementing a big database and network setup
12:33:06 <shapr> bourbaki: so, you're going to write a lambdabot plugin for that code?
12:33:10 <Philippa> if they couldn't do it at the print "FOAD world" level, why're they going to be able to do that when it's costing six orders of magnitude more?
12:33:21 <bourbaki> shapr its always 2 trigramms that make one iging :)
12:33:23 <shapr> FOAD?
12:33:31 <monochrom> whatever
12:33:32 <Philippa> Fornicate Off And Die
12:33:34 <shapr> aha
12:33:38 <bourbaki> shapr if its not too hard sure i wanna have a @iging :)
12:33:45 <shapr> sure, go for it!
12:33:47 <shapr> write it!
12:33:58 <Philippa> monochrom: do you really want to let them loose doing the database if they can't handle SQL?
12:34:04 <bourbaki> shapr what do i have to add to make it run?
12:34:24 <shapr> look at the example plugins in lambdabot, they're straightforward
12:34:43 <bourbaki> its freezing cold here :( my hands are nearly shakeing
12:35:01 <shapr> long-term, cold hands is bad for RSI
12:35:19 <bourbaki> shapr is there an online thing where i can look at the plugins?
12:35:32 <bourbaki> yeah i think ill get or maybe even have RSI already :(
12:35:43 <shapr> sure, browse the darcs repo - http://www.scannedinavian.org/cgi-bin/darcs.cgi
12:35:50 <bourbaki> thx
12:39:55 <bourbaki> shapr im a bit confused again :) do i just have to make my code a module?
12:40:44 <stepcut> shapr: did you see that I republished NewBinary ?
12:40:50 <shapr> I'd probably do IgingModule.hs that just imports your module and wraps some commands.
12:40:58 <shapr> stepcut: no, where is it?
12:42:01 <stepcut> http://www.n-heptane.com/nhlab/repos/NewBinary
12:42:11 <stepcut> ghc6ized, cabalized, debianized, and darcsized
12:44:47 <bojohan> Cale: [haskell-mode] what is "backtick matching"?
12:45:09 <Cale> oh, when you type ` it jumps back to the previous backtick for a second
12:45:12 <shapr> stepcut: awesome!
12:45:20 <Cale> the annoying part is that it does this even with opening backticks
12:45:44 <Igloo> Nah, the annoying part is the cursor jumping randomly around the screen while you're typing  :-)
12:46:05 <bojohan> it does?
12:46:09 <Cale> well, it's nice for actually closing parens
12:46:37 <Cale> so that you can see which paren you just closed
12:47:24 <bojohan> use show-paren-mode
12:47:47 <bojohan> it uses highlighting instead of jumping
12:48:54 <bojohan> sth like this should improve matching of (\(x,y)->x)
12:48:54 <bojohan> (eval-after-load "haskell-mode" '(modify-syntax-entry ?\\ "_" haskell-mode-syntax-table))
12:49:35 <shapr> the nested colored parens code has been RSN for years.
12:50:06 <bourbaki> shapr where have all the types gone? isnt all i have to write a igingRandom?
12:51:18 <musasabi> Is there a preprocesssor for haskell that supports here documents and converts them to standard notation?
12:51:21 <stepcut> grr, I wish I could remember why DBDirect sometimes gets the types all wrong
12:52:54 <sarah> bye ++
12:53:38 <stepcut> maybe it is because the server is 4.0.20 but my libmysqlclient is 4.0.22
12:56:38 <shapr> bringert: hey, any further development on BLob?
12:57:36 <bourbaki> shapr which file contains the code that calls the quoting modules?
12:57:48 <shapr> um, probably IRC.hs right now.
12:57:53 <shapr> sad but true
12:58:54 <bourbaki> shapr hm? ok i think this surpasses my skills :(
13:00:16 <bringert> stepcut: haskelldb with MySQL <4.1 is pretty much useless
13:00:27 <bringert> because of the lack of nested queries
13:00:43 <bringert> hmm, but the types thing is strange
13:01:00 <bringert> shapr: I can't remember :)
13:01:17 <bringert> I think I did start to rework it a bit, dunno if I finished that
13:01:27 <bringert> do you have threaded comments display
13:01:37 <bringert> that's the last thing I remember working on
13:03:46 <bringert> a few months ago I think
13:10:05 <bourbaki> shapr cant you give me a little more help ? :(
13:12:29 <stepcut> bringert: do you know why sometimes DBDirect gets the types wrong ? For example, the column is really int, but mysql things it is a string...
13:13:01 <cptchaos> has anyone ever thought of doing something like inline assembly in Haskell (I would like to write some sse optimized linear algebra functions)
13:14:04 <cptchaos> but Haskell seems a bit slow for that, does too much unecesary management with data for such kind of numerics
13:15:01 <cptchaos> and I would definitely not link to an extern asm file, becaus calls are quite solw (does not matter on many algorithms however)
13:16:55 <cptchaos> wired idea I guess ...
13:16:59 <Etaoin> cptchaos: the first thing that comes to my (inexperienced) mind is to use the ffi interface and write your fast stuff in C (but I'd probably use one of the already-existing linear algebra libraries instead)
13:19:07 <cptchaos> Etaoin: Using an exern fast linear algebra lib would be possible sure, but than I would write all the numeric stuff in that language
13:19:24 <bojohan> "To an ordinary computer scientist, an algorithm is polynomial-time. To Knuth, it takes 3*n^2 + 17*x + 5 steps on MIX, not counting the time required to display the output, but there might be a way to reduce the number of steps to 3*n^2 + 17*x + 4." -- review of TAOCP on amazon.com
13:21:23 <cptchaos> I intended to open Haskell for numbercrunching and scientific computing in that field 
13:21:40 <Etaoin> yay
13:21:42 <shapr> bojohan: I like that
13:21:50 <shapr> that's my kind of complexity measurement.
13:22:03 <Etaoin> inline asm sounds awfully platform-dependent though
13:22:26 <shapr> bringert: I don't remember if I have threaded comments or not, I was just about to setup BLob again, and thought I'd check with you for further developments first.
13:23:08 <cptchaos> Etaoin: Yes but you could simply force an alternative platform independent variant of your algorithm as fallback
13:23:46 <shapr> cptchaos: if you want Haskell numbercrunching, what about the parallel arrays stuff?
13:24:04 <shapr> why use inline asm when you probably have a bunch of idle desktops lying around?
13:24:28 <cptchaos> thought that this for multi processor systems
13:24:32 <cptchaos> it is
13:24:57 <bringert> stepcut: hsql gets the types wrong for some combinations of drivers, backends and column types, the haskelldb BUGS file lists some of those
13:25:16 <cptchaos> so, I still don't see why the clean backend seems to be able to generate code near to c spead while the haskell backend isnt
13:25:36 <shapr> cptchaos: it can also be for clusters
13:26:14 <cptchaos> shapr: don't have reasonabel cluster resouces here ...
13:26:18 <cptchaos> :-)
13:26:25 <bringert> shapr: darcs repo at http://burns.rot.sgsnet.se:8080/~bjorn/blob/
13:26:41 <shapr> yay
13:26:43 <bringert> I don't know what the current state of that code is though :)
13:26:53 <shapr> anything at all is fine with me
13:27:20 <shapr> ah yes, six new patches, happiness!
13:27:30 <shapr> Is there a license on BLob?
13:27:51 <cptchaos> but the drawback with clean is, that it has only few libraries and it is not so linux friendly (or portable in genaral) as haskell
13:28:18 <cptchaos> and haskell seems to have better docs (but I may be wrong)
13:28:31 <bringert> shapr: eh, sure, GPL fine?
13:28:57 <shapr> cptchaos: seems likely to me that you'll get more net profit out of using spare cycles of nearby computers to execute code that's easy to change, rather than going with inline assembly. Of course, I could be wrong...
13:29:03 <shapr> bringert: sure, anything OSS is fine with me.
13:29:29 <bringert> RSS.hs is stolen from stepcut, it is public domain, including my changes to it
13:29:39 <bringert> I'll add a license file
13:29:58 <stepcut> bringert: I have a new version of RSS, btw
13:30:17 <stepcut> bringert, it's different... not sure if it is better yet :p
13:30:18 <bringert> cool, where?
13:30:27 <stepcut> I don't think it is published yet
13:30:33 <cptchaos> shapr: depends on the algorithms
13:31:12 <shapr> cptchaos: if you have straightforward 'naive' code, it's really easy to change the algorithms.
13:31:24 <cptchaos> fast linar algebra would also make high quality 3D games with software rendiring components doable in haskell
13:31:37 <shapr> Just my opinion, as explained in my most recent blog entry.
13:31:39 <cptchaos> but it is just a wish :-)
13:32:04 <shapr> did you check Hal Daume's HBlas?
13:32:10 <shapr> I couldn't get it to build, sadly.
13:32:23 <shapr> Greeting Agent Goerzen
13:32:29 <shapr> doh, missed an s
13:32:31 <cptchaos> hm, will check it, maybe it is what I am looking for
13:32:33 <cptchaos> thanks
13:32:36 <shapr> hej kolmodin 
13:32:43 <kolmodin> hej shapr 
13:33:36 <kolmodin> i have formatted my router (threw win2k3 out and gentoo back in)
13:33:53 <shapr> Anyway, anything you can cast to array ops can probably be faster using Manuel Chakravarty's parallel array code.
13:33:59 <kolmodin> .. :)
13:34:00 <shapr> yay! another victory for Linux!
13:34:37 <kolmodin> I just wanted to try win2k3 and then I was to lazy to switch back :)
13:35:06 <shapr> I'm too lazy to try windows again.
13:35:14 <shapr> windows is so much work!
13:35:59 <shapr> I'd be a lot happier with windows if something like ssh -X worked on a default windows setup.
13:36:05 <bourbaki> shapr you wrote windoze !?
13:36:22 <shapr> I used windows95 and 98 some years ago.
13:36:37 <kolmodin> too mush school work but now I finally had the time. it still took me since last saturday... had problems with a HD so I had to do everything twice. grrr!
13:36:44 <shapr> suck
13:36:45 <bourbaki> aha ok :) i thought i had found the one responsable for my misery ;)
13:37:45 <tuomov> the biggest problem I have windows is the ui.
13:37:50 <tuomov> +with
13:37:54 <cptchaos> shapr: HBlas looks fine, but its nature in BLAS is shining through 
13:37:55 <tuomov> I want my Ion!
13:38:00 <tuomov> and apt-get too
13:38:10 <bourbaki> tuomov cygwin :)
13:38:15 <bourbaki> whats ion?
13:38:25 <shapr> ion is a window manager.
13:38:28 <goron> hej shapr
13:38:31 <bourbaki> ah
13:38:38 <shapr> hoi goron!
13:39:13 <shapr> ion is great because you can use it entirely from the keyboard if you want
13:39:30 <shapr> and I do
13:39:51 <goron> I read Novell has some closed source version of OpenOffice, but OpenOffice is GPL. How can it be closed source? I thought that when you add something that's GPL, than the sum is still GPL. 
13:40:12 <tuomov> is it gpl?
13:40:18 <tuomov> I thought it was some sun's special license
13:40:23 <tuomov> in the style of the mozilla license
13:40:44 <goron> Hmm, than the logic is correct, only the assumptions fail. 
13:40:56 <goron> What's Mozilla's license in short?
13:41:04 <Igloo> Also, they can have a closed source OOo as long as they don't distribute it either
13:41:23 <goron> Igloo: I read that. 
13:41:31 <tuomov> goron: gives netscape the right to use the code in closed-source projects
13:41:34 <tuomov> or something like that
13:42:00 <goron> tuomov: Probably not only Netscape?
13:42:13 <tuomov> well, whatever owns them now
13:42:14 <goron> Although it was a NetScape project.
13:42:18 <tuomov> I don't know the details
13:42:57 <Spark> as the copyright holder, you can release code under multiple licenses
13:43:22 <tuomov> but you can't use others' gpl contributions
13:43:32 <Spark> if you release under gpl, someone else extends, you are both copyright holders and only both of you together can rerelease it
13:43:42 <Cale> Global Variables and IO initializers is generating so much list traffic :)
13:43:49 <bringert> damn, blob requires lots of stuff
13:44:24 <Spark> id guess open office doesnt have much of a developement community though, what with it being such a monster
13:44:29 <Spark> same with mozilla?
13:44:57 <shapr> bringert: yes it does :-)
13:45:03 <Spark> anyway, does anyone bear clue in the area of intersection types? :)
13:45:12 <bringert> hmm, ow HSQL doesn't compile?
13:45:19 <bringert> *now*
13:45:37 <shapr> er, you can get it to compile, but I forget how you have to kick it
13:45:50 <shapr> what's the error?
13:46:28 <bringert> hugs chokes on an #ifdef
13:46:34 <shapr> I would use BLob if I didn't have to rebuild HSQL and HaskellDB every time new debs are released.
13:46:49 <shapr> of course, I could just make debs...
13:46:51 <tuomov> "In order to contribute code to the project, you must submit the Joint Copyright Assignment form. This form jointly assigns copyright over your work to yourself and to Sun Microsystems."
13:46:55 <stepcut> bringert: it looks like drivers/sql/Common.hs does not have an instance of toFieldType for SqlMedInt, and that is what was causing my problems...   
13:46:55 <tuomov> http://www.openoffice.org/license.html
13:47:26 <Spark> ah presumably that gives any rights you have to them - including the right to rerelease it under a different license?
13:47:32 <shapr> one thing darcs gets right: I can still send in patches from an anonymous checkout.
13:47:48 <tuomov> yes, and it is dual-licensed under gpl and "sissl"
13:48:42 <goron>  MySQL is also dual-licensed. But it seems weird that the company gets all the money (I am not sure about that). 
13:48:50 <bringert> stepcut: oh, ok, I'll add that. which HaskellDB version are you using btw?
13:49:01 <shapr> whatever's in CVS as of two days ago.
13:49:07 <shapr> er, I'm not stepcut, doh
13:49:10 * shapr smacks himself awake
13:49:15 <tuomov> goron: stupid managers buy their software because they want to make sure they're on the safe side
13:49:27 <bringert> shapr: haha
13:49:41 <shapr> though there are some bugs in the CVS version of HaskellDB :-)
13:49:48 <tuomov> at my previous job they paid for mysql for a product although they didn't even use the libraries; the customer could have just installed mysql separately
13:49:57 <stepcut> bringert: haskell-0.9
13:50:04 <stepcut> bringert: cvs does not build for me :(
13:50:14 <Russell> hey guys! Does it exist a minix compiler for haskell?
13:50:15 <shapr> I got it to build, but it required a big stick
13:50:50 <tuomov> and you have to pay for mysql if you use their libs, because they're gpl
13:50:59 <Russell> or.. an haskell compiler for minix (it's better) :D
13:51:39 <stepcut> tuomov: or release your project as open source, yes ?
13:51:50 <shapr> bringert: a) hs-plugins is not a configure option, I had to turn it off manually to get the cvs version to build and b) dependency problems in the Makefile require manual building of a lot of .o files before the make command would do the rest
13:51:58 <tuomov> stepcut: or that.
13:52:18 <tuomov> the product was actually something no-one will ever see..
13:52:55 <shapr> Russell: I don't see minix mentioned on - http://www.haskell.org/implementations.html
13:53:15 <shapr> But I'm sure you can get the Hugs interpreter working on Minix.
13:54:04 <goron> Goodnight to all...
13:54:19 <bringert> stepcut: are you having the problems with haskell cvs as shapr?
13:55:04 <stepcut> build/ghc/Database/HaskellDB/DynConnect.hs: can't locate import `Database.HaskellDB.DriverAPI'
13:55:18 <bringert> ah, just got that myself
13:55:22 <stepcut> heh
13:55:37 <bringert> I haven't been working on the code for a while, only chucky has
13:55:48 <stepcut> yeah, me neither :(
13:56:01 <bringert> just talked to him, he's out of the country right now, I'll see what I can do
13:56:07 <stepcut> Someday I would like to look at the sql generator, but I doubt that will ever happen :(
13:57:28 <bringert> oh, he's cleaned up the Makefile-mess
13:57:29 <bringert> cool
13:57:55 <dons> you could probably run nhc98 on minix
13:58:02 <dons> it runs on everything else
13:58:56 <bringert> wait, did I do this?
13:59:01 <stepcut> haha
13:59:31 <stepcut> crud, this query would be one query in 4.1, but is about 2k queries with 4.0 :)
13:59:38 <stepcut> damn missing sub-selects
14:00:16 <stepcut> I wonder if there is a better way to simulate joins...
14:01:43 <bourbaki> gonna go to bed now nighto
14:02:51 <Boegel> good evening #haskell
14:02:58 <joao> Hello
14:02:59 <shapr> hoi Boegel 
14:03:04 <shapr> óla joao 
14:03:08 <joao> :)
14:03:35 <bringert> argh, the Makefiles and configure use differnet variable names
14:03:41 <shapr> suck
14:03:51 <bringert> stupid untyped unchecked languages
14:04:01 * shapr snickers
14:04:03 <shapr> hey, there's always maak
14:04:28 <bringert> hmm, actually, that wasn't the problem
14:04:38 <joao> I got a doubt. I'm using Control.Monad.State StateT. I define "type ST = StateT InstanceVars Error", where Error is Error monad (like Maybe, but with error message)
14:04:58 <joao> When I do something like do {....; return 1;} it returns (Ok 1)
14:05:01 <joao> Right?
14:05:25 <bringert> make is funny
14:05:56 <bringert> it seems that the order in which it builds files that are included into the makefile is not deterministic
14:06:03 <bringert> or at least very odd
14:06:23 <shapr> Philippa: hey, what's the latest Flippi codebase? should I stick with 0.3 and make my changes there?
14:06:53 * joao waves
14:07:43 * Boegel waves back
14:07:57 <joao> <joao> Right?
14:07:58 <joao> :-)
14:08:14 * Boegel doesn't know, but wonders why joao doesn't just test it
14:08:28 <joao> I've tested, of course :)
14:08:42 <joao> The next question is based on yout answer :)
14:08:49 <joao> s/yout/your
14:09:08 <Boegel> joao, right ! (and now the question...)
14:09:23 * joao smiles
14:09:31 <joao> How do I return a Err "something" ? :)
14:09:55 <Igloo> With fail, probably
14:10:25 <Boegel> joao, what does return 0 do ?
14:10:43 <joao> Ok 0
14:10:48 <joao> Igloo, fail nopes...
14:10:57 <joao> Igloo, it generates an exception
14:11:13 <joao> I want explicitly Err "message", but I'm not understanding
14:12:37 <Igloo> Looking at the source for the standard  libraries it looks like fail should work to me
14:13:50 <joao> *Camila.Examples.StackObj> run prog
14:13:50 <joao> *** Exception: Igloo
14:13:50 <joao> *Camila.Examples.StackObj>
14:14:04 <Boegel> joao, show us your code
14:14:48 <joao> I can't paste it here, can I?
14:15:59 <Boegel> @wiki HaskellIrcPastePage
14:15:59 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
14:19:20 <Lemmih> bringert: I've found a bug in HaskellDBs optimizer.
14:19:34 <bringert> great, more bugs :)
14:19:40 <bringert> what is it?
14:20:12 <joao> Boegel, check it, please
14:20:35 <shapr> hey, at least you know HaskellDB has users!
14:21:15 <bringert> :)
14:21:53 <joao> Boegel, so, do you have idea how do I return Error ? :)
14:22:44 <Sky_hawk> joao: return an error ?
14:23:07 <Sky_hawk> joao: like Error "an error, you dummy :))" 
14:23:12 <joao> Sky_hawk, Err "something"
14:23:30 <joao> Sky_hawk, have you read the previous lines?
14:23:51 <joao> Or have you checked the paste page?
14:24:07 <Sky_hawk> hehe, you got me, i just tuned in
14:24:13 <Sky_hawk> wait i'll read back
14:26:54 <Sky_hawk> joao: hm, I don't know really, I've never actually used that, do you have an example pasta ?
14:26:56 <Sky_hawk> paste ?
14:27:25 <joao> Ok ok....
14:27:35 <joao> Igloo, fail works.. for Maybe
14:27:52 <joao> Hmmm
14:31:02 <joao> It works!
14:31:12 <joao> I forgot to define fail function in Monad instance
14:31:15 <joao> Thanks, Igloo  :)
14:32:48 <bringert> stepcut, shapr: I'm on to the CVS build problem
14:33:10 <shapr> happiness
14:33:35 <bringert> stepcut: I'll fix the SqlMedInt thing too
14:33:58 <bringert> but a I've got a phone call now, so no fixes tonight
14:34:29 * shapr is patient
14:34:30 <shapr> or something...
14:39:52 <Boegel> http://studwww.ugent.be/~kehoste/thesisPublic/website -> some new high resolution tests... I should really check out my performance :s
14:41:18 <Oejet_> Boegel, do you have a profile of those runs?
14:41:58 <Boegel> Oejet_, not yet, but I could make one
14:42:01 <Boegel> let's do that :)
14:44:06 <Oejet_> Boegel: Please do. :-) I'm curious.
14:47:10 <Boegel> Oejet_, profiling now...
14:47:27 <Boegel> I have mentioned my friend who is also working on a thesis in Haskell, right ?
14:48:02 <kosmikus> shapr: lambdabot patches? really? I didn't send you any new ones, I think
14:48:14 <Boegel> here are some of his results: http://studwww.ugent.be/~arbracke
14:48:20 <kosmikus> a thesis *in* Haskell, wow
14:48:22 <shapr> no, I but I still haven't applied the old ones...
14:48:29 <Boegel> kosmikus, you know what I mean :p
14:48:55 <kosmikus> shapr: did you find out why they bounced yet/
14:49:01 <blackdog_> well, it's not difficult to write a file that can be understood by latex and ghc. :)
14:49:07 <shapr> g'day blackdog_ 
14:49:15 <Boegel> Oejet_, weird
14:49:16 <blackdog_> g'day shapr
14:49:22 <shapr> kosmikus: no, not yet. I've been distracted by other things.
14:49:45 <shapr> speaking of plugins, vixenlove should really go in
14:49:51 <Boegel> profiling takes 54 seconds, while actually running my program takes 5 minutes :s is that normal ? is that because the actual IO is not being executed ?
14:50:01 <kosmikus> blackdog_: true, my thesis is also only input to lhs2tex
14:50:36 <blackdog_> shapr: what, my version?
14:50:55 <blackdog_> or has someone scooped me?
14:51:39 <Oejet_> Boegel: Do you change to program before profiling?
14:52:03 <Boegel> Oejet_, no
14:52:26 <Boegel> but 24% of the time is needed for writing the actual file
14:52:38 <Boegel> maybe it's because the IO is not being performed... or is it ?
14:52:59 <Boegel> Oejet_, I did do the other run with ghci, not ghc... could that be it ?
14:53:11 <Oejet_> Could you post the a.out.prof?
14:53:20 <Boegel> Oejet_, one moment :)
14:53:56 <Oejet_> Yes, I can imagine that ghci doesn't optimize so much compared to ghc.
14:55:24 <dons> I don't think it optimises at all, iirc
14:55:45 <Boegel> Oejet_, check the website http://studwww.ugent.be/~kehoste/thesisPublic/website
14:55:52 <Boegel> there's a link to the profile there
14:56:21 <Boegel> sub does most of the work ! :o)
14:56:48 <dons> "we have disabled optimisation when using the interpreter"
14:57:02 <Oejet_> What does sub do?  What was your -O flag?
14:57:02 <Boegel> dons, ow okay :)
14:57:11 <Boegel> then I should always compile with ghc :)
14:57:25 <dons> the idea is that code that wants to run fast should be compiled, and loaded as static modules into ghci
14:58:30 <Boegel> dons, it's a real relief knowing that my program doesn't need 5 minutes, but 1 minute to execute the program :)
14:58:40 <dons> hehe
14:59:04 <dons> 24% of time needed for writing the file?
14:59:05 <Boegel> btw, I could do _a lot_ of optimalisation, becuase getDiffuse and getSpecular have a lot in common
14:59:10 <Boegel> dons, yep
14:59:15 <Boegel> but it's a 8mb file
14:59:18 <dons> that's not too good. you could use, say, hPutBuf 
14:59:25 <dons> yi had the same problem
14:59:35 <dons> it can writee 64M files in fractions of a second now
14:59:43 <dons> let me see...
15:00:15 <shapr> g'day Pseudonym 
15:00:17 <dons> do hPutArray h arr end >> hFlush h >> hClose h
15:00:20 <shapr> blackdog_: yes, your version
15:00:26 <Pseudonym> G'day.
15:00:30 <Boegel> ow, my friend (the one working on sound samples), asked me how he could read big files into a list in a fast way ?
15:00:46 <dons> don't put it in a list.
15:00:53 <Boegel> because compiling needs 16 minutes now for him, because he has hardcoded his sound sample in his program
15:01:03 <shapr> Boegel: is your friend using the Haskell DSP code from sourceforge?
15:01:21 <blackdog_> shapr: ok, i'll check out the interface to lambdabot.
15:01:34 <Pseudonym> Lambdabot needs some hard-coded sound samples.
15:01:50 <Oejet_> Boegel: Did you use the -O2 flag when compiling?
15:01:54 <shapr> well, if we go SILCnet, that would work.
15:01:56 <Boegel> shapr, I don't think so, what does that do ?
15:02:06 <shapr> sound processing =)
15:02:16 <Boegel> Oejet_, I did, why ?
15:02:37 <Oejet_> He, just curious.
15:02:48 <Boegel> Oejet_, what do you think about the profile ?
15:03:01 <Boegel> shapr, in what way ? would it be of any use for him ?
15:03:23 <shapr> what's he trying to do? I didn't really stare at the dutch enough to understand it.
15:03:32 <Oejet_> Boegel: What does sub do?
15:03:40 <Boegel> @index hPutBuf
15:03:42 <lambdabot> GHC.IO,System.IO
15:03:49 <shapr> Boegel: http://haskelldsp.sourceforge.net/
15:03:51 <Boegel> Oejet_, it subtracts a vector from another vector :)
15:04:05 <dons> Boegel: also hPutArray
15:04:16 <Boegel> @index hPutArray
15:04:16 <lambdabot> Data.Array.IO
15:04:25 <Boegel> @index hFlush
15:04:25 <lambdabot> GHC.Handle,System.IO,IO
15:04:38 <Boegel> are those modules imported by default ?
15:05:04 <dons> imported by default?
15:05:13 <Oejet_> Boegel: That's really odd, that sub is the bottleneck.
15:05:34 <Boegel> Oejet_, it's weird to me to :)
15:06:32 <Boegel> I can understand createPPM (being pure IO) and intersectRayWith, because that's the whole idea behind ray tracing, calculating ray-object intersections
15:06:33 <Boegel> but sub :s
15:06:41 <Boegel> dons, like Prelude
15:07:14 <dons> no
15:07:20 <Boegel> ow okay
15:07:25 <Boegel> I'll check that out later
15:08:05 <Oejet_> It's the sub in intersect => intersectRayWith => sub,  but outside solveq.  Hm.
15:12:03 <Boegel> Oejet_, that could be because I'm recalculating light directions, normals and such in both getDiffuse and getSpecular
15:12:21 <Boegel> if I'd put those 2 together, that wouldn't be such a big problem
15:13:04 <Oejet_> Thus calling sub less times.
15:14:57 <Boegel> Oejet_, idd
15:24:03 <Boegel> Oejet_, I have placed the profiling file for the first render too...
15:25:54 <Boegel> it only takes 17 seconds more for 3 more spheres to intersect.. I think that's a good sign :)
15:26:40 <Oejet_> Yeah.
15:42:16 <Cale> My favourite scene to raytrace is a tetrahedron of tangent spheres with the same radius with differently coloured lights placed at the points directly in the middle of each face of the tetrahedron joining their centres.
15:44:05 <stepcut> Cale: totally!
15:44:16 <Boegel> Cale, what does 'tangent' mean ?
15:44:23 <Pseudonym> My favourite scene is a frame from the Pixar film "Red's Dream".
15:44:23 <Cale> touching
15:44:27 <Boegel> and can you show me an example of such a scene ?
15:44:34 <Pseudonym> Pixar had the file on its ftp site some years ago.  I still have a copy.
15:44:43 <Boegel> Pseudonym, show us :)
15:44:54 <Pseudonym> Hang on, I'll render it up.
15:45:20 <Jan_w> cool
15:45:25 <Jan_w> wanna see too :)
15:46:13 <Cale> http://vx.hn.org/autoshare/colours-3.png
15:46:33 <Jan_w> Dict tangent:
15:46:34 <Jan_w> Making contact at a single point or along a line; touching but not intersecting. 
15:46:34 <Jan_w> Irrelevant
15:47:19 <Boegel> Cale, that's a render from wolfgang8k, right ?
15:47:44 <Cale> It's the scene I made using wolfman8k's raytracer
15:47:51 <Boegel> ow, okay :)
15:47:57 <Cale> (which I've been fiddling with)
15:48:09 <Boegel> can you show me the coordinates of the spheres and lights ?
15:48:26 <Boegel> I haven't got any reflection yet inmy raytracer, but I will implement it :)
15:49:05 <shapr> I've never seen Red's Dream, though I very much want to.
15:49:28 <Boegel> I'm looking for some decent colors for my website, http://studwww.ugent.be/~kehoste
15:49:41 <Boegel> now it's just plain ugly :)
15:49:57 <Boegel> shapr, if you look hard enugh, you can find it
15:50:32 <Pseudonym> Hang on, still rendering.
15:50:38 <Pseudonym> This doesn't have any of the shaders in it, BTW.
15:51:19 <Jan_w> shapr: I'll put Red's Dream in gear, hold on
15:51:37 <Pseudonym> I think all of the old Pixar shorts are on their web site.
15:51:52 <Pseudonym> Including Andre & Wally B, which isn't technically Pixar.
15:52:12 * Pseudonym had to bump up the gamma on the image and re-render
15:52:28 <blackdog_> Cale: that image's very cool.
15:53:38 <Pseudonym> http://andrew.bromage.org/bikeshop.tif  (2.5Mb)
15:55:04 <Jan_w> shapr: red's dream is n pixar's site, so i dont have to put it for download :)
15:56:26 <Boegel> Pseudonym, why that scene ?
15:56:38 <Pseudonym> What do you mean?
15:56:54 <Boegel> why i that your favorite scene ?
15:57:21 <Pseudonym> It's great for stress-testing your renderer.
15:57:40 <Pseudonym> It has lots of geometry, lots of object which cross the eye plane, quite a few lights...
15:58:42 <Boegel> oh, like that :)
15:59:00 <Boegel> we'll, maybe my ray tracer could handle it later on, but not now anyway :)
15:59:02 <Pseudonym> Also, it's the only frame from an actual film that I happen to have.
15:59:17 <Boegel> I'm off to bed, I have a Phd defense to attend to tomorrow
15:59:22 <Pseudonym> Night.
15:59:31 <Boegel> so I'd better be awake, to ask naughty questions :p
16:00:43 <Boegel> bye !
16:02:33 <shapr> hiya pesco 
16:02:39 <pesco> Hoi shapr.
16:02:55 <shapr> nice hostname
16:03:00 <pesco> ;)
16:03:00 <shapr> 6to4 ?
16:04:05 <pesco> No, my own all-new shiny subnet, tunneled over v4 mind you.
16:05:12 <shapr> dang, red's dream requires quicktime support in the browser.
16:06:25 <pesco> Unfortunately my Uni doesn't seem to have v6 connectivity. Fools.
16:07:45 <shapr> whoa, pixar has bandwidth!
16:07:58 <shapr> I *like* getting 1.08M/s
16:08:04 <xerox> damn
16:08:10 <xerox> you have bandwidth..
16:08:35 <shapr> obviously not as much as pixar though.
16:08:41 <xerox> -_-
16:09:26 <xerox> btw they are going to give me (and other people in this country) 1.2Mbit for less price than this 640kbit ADSL in some months
16:09:44 <xerox> \o/
16:12:29 <shapr> nice
16:12:34 <shapr> Red's Dream is great :-)
16:13:20 <xerox> ì_ì
16:13:24 <tuomov> pixar killed firefox
16:13:31 <shapr> "For the Birds" is hysterical.
16:13:31 <tuomov> I'm really getting fed up with this browser
16:13:43 <shapr> tuomov: I just downloaded the mov and fed it into gxine
16:14:01 <shapr> probably saner to have a mozilla transcode plugin
16:14:41 * Oejet_ has 210KB/s and sharing it with his neighbour.  :-)
16:15:29 * Jan_w used to have 100mbit, but now back to 64KB/s *snif*
16:15:39 <Jan_w> *shoke*
16:15:42 <Pseudonym> I'm a little upset about the censorship in Knick Knack, though.
16:16:10 <shapr> huh?
16:16:15 <Pseudonym> http://www.misinformer.com/archive/2003/05/31/
16:16:26 <shapr> That bikeshop render is nice.
16:16:41 <Pseudonym> Yeah, it's handy to have around.
16:16:50 * Pseudonym probably can't redistribute it, BTW
16:18:08 <shapr> I guessed as much.
16:19:13 <Pseudonym> Something interesting is that there are no NURBS objects anywhere in the scene.
16:19:28 <Pseudonym> (It's circa 1990 according to the metadata in the file.)
16:19:48 <Pseudonym> It's all bilinear/bicubic patches and quadrics.
16:20:39 <Pseudonym> Oh, and if anyone is curious, it weighs in at about 2.5Mb.
16:20:52 <Pseudonym> Which is about three orders of magnitude smaller than a modern Pixar scene.
16:21:59 <tuomov> they've got bandwidth, allright. I got 2MB/s
16:22:26 <pesco> I'm off to bed. G'night.
16:25:21 <HaskellersBR> hello
16:25:28 <Lemmih> Hey
16:25:32 <shapr> hiya
16:25:43 <HaskellersBR> need some help with DB interface :(
16:26:07 <HaskellersBR> can´t even get it to work... :(
16:27:06 <HaskellersBR> does anyone could help me please?
16:27:10 <Lemmih> Sure.
16:27:16 <Lemmih> What's the problem?
16:27:54 <bourbaki> moin
16:27:56 <HaskellersBR> I´m using HaskellDB, is it the best option? Already tried hsql but couldn´t get it to work
16:28:08 <HaskellersBR> I installed but it didn´t work
16:28:16 <HaskellersBR> many error msgs on ghc
16:28:27 <Lemmih> HaskellersBR: HaskellDB is dependent on HSQL.
16:28:49 <HaskellersBR> that explains a lot :)
16:29:25 <HaskellersBR> when I tried to use hsql it kept saying some error msg in hqsl.hi
16:29:28 <Lemmih> HaskellDB is just a SQL unwrapper. It allows you to generate typesafe SQL.
16:29:45 <HaskellersBR> wow, I feel stupid :S
16:30:18 <HaskellersBR> what would you recommend to a simple program that uses mysql database
16:30:46 <Lemmih> HSQL. But the build process is somewhat broken.
16:31:42 <bringert> I'll try to fix the HSQL and HaskellDB problems tomorrow, must go sleep now
16:32:00 <shapr> g'night bringert 
16:32:23 <shapr> HaskellersBR: if you have problems with the .hi files, you may need to rebuild from the sources
16:32:24 <bringert> good night
16:32:43 <HaskellersBR> huuum...I see
16:33:02 <HaskellersBR> so I must download the sourcecode and rebuild the hsql.hi file
16:33:07 <HaskellersBR> I´ll give it a try
16:35:59 <shapr> óla ows 
16:36:16 <shapr> HaskellersBR: you're not using HSQL from the source?
16:36:27 <HaskellersBR> nope
16:36:45 <HaskellersBR> I downloaded the .exe file
16:36:48 <shapr> oh, I see.
16:36:49 <HaskellersBR> I´m using windows :(
16:37:06 <shapr> In that case it probably means your installed version of GHC doesn't match the version of GHC used to build the .exe
16:37:09 <ows> Hi
16:37:37 <HaskellersBR> I checked already, I´m using hsql 1.4 and ghc 6.2.1
16:37:55 <shapr> what's the .hi error you get?
16:37:56 <HaskellersBR> I think it should work
16:38:27 <HaskellersBR> something like...wrong version...expected 6021, found 6020
16:38:29 <HaskellersBR> I think
16:38:56 <shapr> that means you have ghc 6.2.1 installed, but the .exe was built with ghc 6.2.0
16:39:05 <HaskellersBR> ow
16:39:08 <HaskellersBR> :S
16:39:10 <HaskellersBR> makes sense
16:39:35 <HaskellersBR> so I should download ghc 6.2.0 and everything should work
16:39:36 <HaskellersBR> or
16:39:46 <HaskellersBR> compile everything from sourcecode
16:39:51 <shapr> right
16:39:58 <HaskellersBR> wich I think is very complicated for me :(
16:40:07 <shapr> if you go from source, you should probably upgrade to 6.2.2, it's the latest
16:40:21 <HaskellersBR> hum, I have it downloaded
16:40:38 <HaskellersBR> so I download the sourcecode and compile it
16:40:44 <HaskellersBR> every single file
16:40:52 <HaskellersBR> isn´t an easy way to do it?
16:42:11 <shapr> y0 SyntaxNinja!
16:42:22 <blackdog_> not really... it's not so hard.
16:42:27 <SyntaxNinja> hi shapr
16:42:36 <blackdog_> g'day syntax
16:43:39 <HaskellersBR> ok, I´ll try it
16:43:44 <HaskellersBR> thanks for all the help
16:44:44 <SyntaxNinja> hihi blackdog_ how's it going?
16:45:32 <blackdog_> not bad. trying to convince core to play nice with foreign calls...
16:47:21 <HaskellersBR> sorry but I´m having trouble again :D
16:47:50 <HaskellersBR> how do I compile it? ghc --make hsql.hsc ?
16:49:06 <SyntaxNinja> blackdog_: sucks
16:49:37 <blackdog_> yah, but we will overcome. :)
16:50:45 <shapr> HaskellersBR: .hsc files need hsc2hs from c2hs 
16:52:27 <HaskellersBR> :)
16:53:40 <shapr> you might want to start by going back to ghc 6.2.0 if you're on windows.
16:54:05 <shapr> I've never tried to build HSQL/HaskellDB on windows, so I'm not sure how hard it will be.
16:55:06 <HaskellersBR> I´m using some other libraries so I would have to find those libraries for that particulary version of ghc
16:55:16 <HaskellersBR> I prefer to learn how to compile
16:55:17 <Igloo> hsc2hs is unrelated to c2hs
16:55:21 <HaskellersBR> :)
16:58:10 <SyntaxNinja> heh I seem to have a 6th sense about darcs releases.
16:58:24 <HaskellersBR> well, I´ll try another time
16:58:25 <SyntaxNinja> I don't really read the list every day, but sometimes I'm like, "I should check to see if it's been released..."
16:58:28 <HaskellersBR> thanks for all the help folks
16:59:00 <HaskellersBR> bye
16:59:36 <blackdog_> some kind of haskell jedi telepathy
17:02:19 <shapr> Igloo: oh, my confusion
17:02:28 <shapr> what is hsc2hs then?
17:03:00 <Igloo> It's either part of ghc or just in fptools. It does a similar job but is simpler and less powerful
17:03:20 <blackdog_> hey, is it possible to tell "make" that there's a way of converting  .foo files to .bar and to do all in a particular directory if the timestamps don't match?
17:04:46 <dons> ghc/utils/hsc2hs
17:04:55 <Lemmih> hmake can do that.
17:05:09 <dons> -- Program for converting .hsc files to .hs files, by converting the
17:05:09 <dons> -- file into a C program which is run to generate the Haskell source.
17:05:25 <shapr> ah, ok then.
17:07:53 <SyntaxNinja> blackdog_: yep
17:08:22 <Igloo> bd: Something like a rule %.bar: %.foo and all: $(pat-subst $(wildcard *.foo,.foo,.bar))
17:09:03 <blackdog_> thanks
17:27:25 <shapr> can I use e2fsck to find out the minimum file allocation size on a partition?
17:28:08 <shapr> like, how much space is used if I touch a file?
17:29:45 <tuomov> dumpe2fs?
17:30:32 <shapr> thanks, I'll check that out
17:55:02 <shapr> d00d
17:55:12 <shapr> the code, it's flowing!
17:55:47 <stepcut> gross!
17:56:11 <shapr> oh, never mind, just a boot sector virus
17:57:48 <dons> shapr: when do you want yi 0.1?
17:57:55 <dons> or, what do we need
17:58:08 <shapr> hm
17:58:11 <dons> I think we're almost there. and I'm tossing up whether syn hl should go inn
17:58:33 <shapr> I'm a great fan of release early and often.
17:58:34 <dons> it's probably another week if we want syn hl
17:58:48 <dons> true.
17:59:13 <shapr> I'd say release it, and say that APIs change with each minor version number
17:59:13 <dons> also, did you see www.cse.unsw.edu.au/~dons/yi.html
17:59:33 <shapr> so APIs should stay stable inside 0.1.*
17:59:39 <shapr> oh you have a LOGO!
17:59:42 <shapr> whoa!
17:59:50 <dons> hmm. that's a good point.
17:59:52 <shapr> oh yeah =)
17:59:55 * shapr bounces excitedly
18:00:11 <dons> hehe
18:00:37 <dons> igloo sent it over yesterday, i added a shadow
18:00:43 <shapr> I need to setup a cron job for the Yi repo to pull from yours
18:00:47 <dash> mmm time for more codin'
18:01:04 <dons> you don't have a cron job?
18:01:13 <dons> it's being manually updated. gasp
18:01:30 <shapr> I've only updated it twice :-P
18:01:37 <Igloo> I wouldn't want something that could introduce conflicts in my working repo to happen automatically
18:01:39 <shapr> I use the third strike rule
18:01:59 <dons> Igloo: i think this is supposed to be a mirror, though
18:02:02 <shapr> right
18:02:14 <Igloo> And I don't think I can take too much logo-creation credit - I just fired up gucharmap and took a screenshot  :-)
18:02:20 <Igloo> Ah, I see
18:03:18 <dons> hehe. I see shapr dives in and updates the mirror
18:04:58 <dons> ok. I'll ponder the api issue.
18:05:32 <shapr> or you may just want to say, until 1.0, don't expect anything
18:05:38 <shapr> just send patches
18:06:22 <dons> that's a good idea. make the announce. point to resources, and suck in the hackers
18:07:14 <dons> i'm more inclined to do that, considering how fast things are moving atm
18:07:37 <shapr> I think that's a good plan
18:08:23 <dons> ok. look for an announce in a few days, I think
18:09:18 <shapr> I haven't any real code for this release, so I'm just offering suggestions...
18:09:24 <shapr> I will get in there and hack when I have time
18:09:30 <shapr> but lately paying work is in my way
18:10:14 <dons> that's fine. if people want to write editor keymaps, that would be useful
18:10:22 * stepcut works on his ed keymay for YI
18:10:24 <dons> i'm certainly not going to write the emacs binding
18:10:27 <shapr> :-)
18:10:30 <dons> stepcut: cool
18:10:59 <stepcut> I want to work on the emacs binding with the new lexer stuff, but I won't have time for atleast a few days :(
18:11:00 <shapr> I do think Yi should be multithreaded, I think that's something emacs really lacks
18:11:19 <dons> that's going to be a little while yet, probably. once syn hl is in
18:11:28 <shapr> I also think simplicity is more important than speed, especially for an early hacker release
18:11:35 <shapr> you want the code to be as easy to change as possible
18:11:43 <shapr> and as easy to understand as possible
18:11:51 <dons> well, i haven't done profiling in a couple of weeks now
18:12:00 <shapr> but then, words are cheap, I haven't sent in any patches to make these sorts of changes :-)
18:12:51 <shapr> I'm thrilled with Yi :-)
18:13:00 <dons> that's good to hear.
18:13:16 <shapr> I think it totally kicks ass!
18:13:27 <dons> stepcut: ok then, I'll hold back the announce till the emacs mode is back in business
18:13:47 <shapr> I'm getting closer to switching entirely to yi, since emacs is pissing me off even more often
18:14:05 <stepcut> dons: ok, I will let you know if it looks like it's not going to happen
18:14:05 <dons> hehe. me too. i think i need syn hl though
18:14:12 <dons> sure. thanks
18:14:21 <shapr> yah, I'd like that too
18:14:28 <shapr> but then, if I switch to Yi, I'll surely write it.
18:14:36 <dons> but it's only just syn hl now.
18:14:38 <shapr> Do you know how the in-buffer eval will work?
18:14:52 <shapr> how will the elisp-like scripting work?
18:14:57 <dons> I've got a preliminary branch for this
18:15:18 <dons> atm, just: :let f = mapM_ insertE "cool fun"
18:15:28 <dons> binds 'f' to a new haskelll code chunk
18:15:32 <shapr> ah, nifty
18:15:52 <shapr> can you bind a key to a function that doesn't yet exist?
18:15:56 <dons> yep
18:16:03 <shapr> extraspiffy
18:16:13 <dons> you're augmenting thhhe lexer table with a (Key,Action) pair
18:16:36 <dons> same principle as the existing  :map f jjjj
18:17:04 <dons> where "jjjj" is used to get a [Action] from the lexer table, which are glued together with >> and bound to 'f'
18:17:55 <dons> it's just that with eval you create your new Action at runtime
18:19:01 <shapr> hm, no paste yet
18:19:11 <shapr> either that or I don't know how to use it
18:21:46 <dons> 'y' and 'p' should work
18:21:52 <dons> sorry, 'yy'
18:22:27 <dons> no y-movement style yank selection though
18:22:34 <Igloo> How about this in vim:    :map z ifoo<ESC>:s/foo/    ?
18:22:58 <dons> yeah, so switching modes is  still an issue. 
18:23:10 <shapr> also doesn't have numeric commands, 4dd for example
18:23:18 <dons> you can only either :map z cmd-actions, or  :map! z insert-actions
18:23:19 <Igloo> Oh, it wasn't that I meant, it was the partial command at the end I meant
18:23:46 <Igloo> So vim will have :s/foo/ on the status line at the bottom after you press z and wait for you to complete it and press enter
18:24:12 <dons> "Fail: Prelude.foldl1: empty list"
18:24:19 <dons> wasn't supposed to do that.
18:24:42 <Igloo> I didn't think foldl1 existed
18:24:55 <dons> there's no conceptual problem with partial commands. you're just in the middle of a lexer
18:25:22 <Igloo> Ah, OK, Actions must not be what I thought they were then
18:25:39 <dons> the individual chars in :s/abc have actions bound to them
18:25:52 <dons> so ':' write ":" to the command window
18:26:02 <dons> and s/abc accumulate chars in the state, while echoing too
18:26:14 <dons> until you reach ^M, which performs the regex sub
18:27:15 <dons> atm, :map f s/abc actually does print the right stuff, but it isn't setting the accumulator in the threaded state properly
18:27:22 <dons> todo
18:27:45 <Igloo> Hmm, vim seems to work in a dynamic binding style, so   :map a ifoo<ESC>   :map z a   :map a ibar<ESC>   gives you z inserting bar
18:28:10 <Igloo> I think allowing both would be cool, though
18:28:26 <dons> we can stack lexer tables, to achive this, I think
18:28:40 <dons> that's kinda cool, though
18:28:51 <Igloo> Even in the same command, so :map z a!a would do whatever a is bound to when z is pressed, then whatever a is bound to when z is bound
18:28:58 <dons> i guess it's just looking up an entry that's been over writtten
18:29:25 <dons> in yi it shouldn't be too hard to do :map a b :map a d :unmap a :unmap a
18:29:32 <Igloo> (that syntax is meant to be "a then !a" if that wasn't clear)
18:29:59 * Igloo doesn't follow - are you talking about a stack of bindings?
18:30:18 <dons> yep, so unmapping takes you back 1 layer of bindings for 'a'
18:30:24 <Igloo> *nod*
18:30:52 <Igloo> Sorry I haven't been able to contribute any code, BTW - haven't had much time and things are moving too fast for me (which is good!)
18:31:17 <dons> :)
18:36:34 <Igloo> The alt text for the logo should be "", BTW
18:36:55 <dons> "should be", why ?
18:38:18 <dons> w3m doesn't seem to like "" as alt text. hmm
18:38:46 <Igloo> Because it doesn't add anything to the text, especially given it's followed by "yi: just syntax". I can't explain it very well - something like the bobby page or web accessibility guidelines would probably do better if you're interested
18:39:34 <dons> ok. I relaced it with "yi:" and dropped yi from the other img alt
18:39:36 <Igloo> Roughly speaking, you should think about what a blind person would find it useful to have read out to him
18:39:44 <Igloo> Fair enough  :-)
18:39:49 <dons> ah. ok. good poiint
18:40:09 <dons> I've been thinking more of how it would render in w3m
18:40:29 <dons> which is obviously not the right way to approach this
18:40:35 <Igloo> How is w3m unhappy with alt=""?
18:40:53 <dons> it ignores the alt, and prints the img file name
18:41:01 * Igloo closes the source before I start ranting further  :-)
18:41:02 <Igloo> Oh, odd
18:41:54 <Igloo> Hmm, same here
18:44:05 <Igloo> Well, http://www.w3.org/TR/html4/struct/objects.html#adef-alt explicitly recommends it, so it looks like w3m is just being silly
18:44:16 <dons> ok
18:46:02 <shapr> can I create symlinks with GHC?
18:46:17 <shapr> oh duh
18:46:28 <shapr> @index createSymbolicLink
18:46:29 <lambdabot> System.Posix,System.Posix.Files
18:47:39 <shapr> y0 Ray, wazzup?
18:47:55 <juhp> dons: is there some way to quit yi when it says "... keymap not ported to lazy input type"? :)
18:47:59 <CosmicRay> hey shapr
18:48:07 <CosmicRay> debugging exim4
18:48:57 <CosmicRay> shapr: I hate tracking down C porting issues.  hate hate hate.
18:49:09 <CosmicRay> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=280213
18:50:10 <shapr> you could always use an MTA written in a sane language.
18:50:12 <Igloo> Hah! Try tracking down sed-and-perl-screwing-with-assembly-code porting issues some time
18:50:19 <CosmicRay> Igloo: heh
18:50:26 <CosmicRay> Igloo: what package?
18:50:30 <shapr> GHC, I bet
18:50:33 <Igloo> This week, nhc98
18:50:34 <CosmicRay> hah
18:50:41 * CosmicRay doesn't even try with nhc98
18:50:44 <shapr> the Evil Mangler is *very* evil.
18:50:57 <CosmicRay> they explicitly say they do not work on every platform of interest to me :-)
18:51:02 <CosmicRay> (alpha, amd64, ppc64)
18:51:02 <Igloo> ghc's mangler is a nastier piece of work, but at least it's not essential
18:51:09 <Igloo> :-)
18:51:32 <CosmicRay> Igloo: for added fun, try hacking it on AIX.
18:51:38 <shapr> there's a memory leak in linux kernel 2.6.8
18:51:46 <shapr> or maybe the nvidia drivers
18:51:49 <CosmicRay> shapr: did 2.6.9 fix it?
18:51:52 <shapr> but something is leaking
18:52:11 <shapr> I don't know, I haven't built the nvidia drivers for 2.6.9 yet
18:53:02 <shapr> five days uptime, top says I should be using about 400MB of ram, but 700MB is being used.
18:53:08 <CosmicRay> shapr: http://changelog.complete.org/articles/2004/11/08/latest-experiment-exim/
18:53:18 <CosmicRay> shapr: have you checked your shared memory?
18:53:36 <CosmicRay> ipcs -a as root
18:53:50 <shapr> when I exit X and shutdown *everything* there's still about 300mb of ram used
18:54:06 <CosmicRay> what does free(1) say?
18:55:02 <CosmicRay> btw it is normal to have shared memory in use while you're running things like X or apache
18:55:07 <CosmicRay> (wrt the ipcs -a output)
18:58:35 <CosmicRay> hmm, shapr seems gone... he must have been erroneously garbage collected :-)
18:59:10 <shapr> no, shapr is trying to fix something else now...
18:59:17 <CosmicRay> heh
18:59:39 <shapr> seems that postgresql wants pg_ctl to be executed as user postgres, but /etc/init.d/postgresql stop must be executed as root...
19:00:19 <shapr> bit strange
19:02:31 <CosmicRay> all the init scripts assume they run as root
19:02:53 <CosmicRay> the init script should run pg_ctl as the correct user already
19:12:20 <Lemmih> Unicycling in the city at 4am is great fun.
19:57:52 <BrunoLuigi> hello people
19:58:31 <BrunoLuigi> anyone from Brazil here?
19:58:31 <Lemmih> Hello BrunoLuigi
19:58:42 <BrunoLuigi> hello Lemmih
19:59:57 <Pseudonym> G'day.
20:00:38 <Lemmih> I think Boegel is from Brazil.
20:00:52 <Pseudonym> But he's not here.
20:00:58 <Pseudonym> Actually, I think he's from Belgium.
20:01:11 <Pseudonym> So apart from your good self, doesn't look like it.
20:01:24 <BrunoLuigi> :S
20:01:43 <Pseudonym> So stick around.  That way we'll have at least one.
20:01:52 <Pseudonym> And eventually we'll outnumber the Scandinavians.
20:01:59 <blackdog_> it's ok: with the advent of the internet, IRC got a lot more interesting.
20:02:23 <BrunoLuigi> I see
20:03:25 <Cale> blackdog_: heheh
20:04:07 <Pseudonym> Actually, it arguably got _less_ interesting.
20:04:17 <Pseudonym> If you go by some networks, anyway.
20:04:40 <BrunoLuigi> I´m curious, does everybody here uses linux?
20:05:01 <Lemmih> marcot and HaskellersBR are from Brazil.
20:05:01 <Pseudonym> I think everyone here has at some point.
20:05:07 <Pseudonym> Ah, there you go.
20:05:25 <blackdog_> I still think it's very cool that I can come to #haskell and meet interesting people from all over the place. I'm sure there are moronic channels around, but I seem to have avoided them.
20:05:39 <BrunoLuigi> actually I connect as HaskellersBR earlier, I was at my friends house, we were trying to do some project to a college class
20:05:47 <BrunoLuigi> and I came here for some help
20:06:02 <BrunoLuigi> now that I´m alone and at home I´m using my name here
20:06:10 <blackdog_> you could probably make a case that haskell is a prime "early adopter" language.
20:07:36 <BrunoLuigi> what do you mean by "early adopter" ?
20:08:41 <Pseudonym> .next
20:08:41 <blackdog_> there's always a leading edge of people who are willing to try new things.
20:08:44 <Pseudonym> Whoops.
20:09:34 <BrunoLuigi> I got it
20:13:59 <cm> ls
20:14:02 <cm> blech
20:14:39 <Pseudonym> send_pingflood www.haskell.org
20:14:42 <Pseudonym> Whoops!
20:14:44 <Pseudonym> Sorry, wrong window.
20:15:33 <blackdog_> kill president with fork bomb?
20:15:51 <Pseudonym> blackdog_: I'd watch what you say.  This channel is logged.
20:16:04 <Pseudonym> You don't want the thought police turning up at your door like the poor kid on livejournal.
20:16:26 <blackdog_> First they came for the smalltalkers, and I was silent.
20:16:32 <Pseudonym> :-)
20:16:49 <Pseudonym> Actually, I don't blame the secret service for turning up.  THey're just doing their jobs.
20:17:17 * blackdog_ mutters about banality of evil
20:18:22 <Pseudonym> Where's Smerdyakov when you don't need him?
20:18:25 <Pseudonym> Oh, that's right.  Banned.
20:18:40 <blackdog_> Really? What did he do?
20:21:26 <Pseudonym> Scaring off newbies, mostly.
20:21:47 <blackdog_> Ah. yeah, fair enough. he did have a bit of an attitude.
20:26:48 <ozone> he's been banned again?
20:27:42 <blackdog_> oh, g'day andre. how's tricks?
20:28:59 <ozone> hey, all good
20:30:09 <blackdog_> have you seen quicksilver? bloody awesome app for macs...
20:31:37 <blackdog_> hey, anyone got any thoughts on why core gets cranky about
20:31:41 <blackdog_> foreign import ccall unsafe "stdlib.h &free" finalizerFree :: FinalizerPtr aforeign import ccall unsafe "stdlib.h &free" finalizerFree :: FinalizerPtr aforeign import ccall unsafe "stdlib.h &free" finalizerFree :: FinalizerPtr a
20:32:00 <blackdog_> ...uh, trying that gagain.
20:32:22 <blackdog_> foreign import ccall unsafe "stdlib.h &free" finalizerFree :: FinalizerPtr a
20:32:45 <blackdog_> but happy with foreign import ccall unsafe "stdlib.h free"    _free    :: Ptr a -> IO ()
20:37:22 <ozone> blackdog_: i looked at quicksilver, it's nice, though i haven't used it enough yet to adjust my workflow for it
20:37:28 <ozone> (which is really when you get the most benefit out of it)
20:38:37 <blackdog_> yeah... i'm still adapting to macs anyway, so it's not too hard to integrate. (used to being able to do everything from th ekeyboard...)
20:39:15 <ozone> you're using macs now?
20:39:30 <ozone> mr. seafood has been getting to you, eh?
20:39:40 <blackdog_> Yep. borrowed a g4 laptop from work
20:39:57 <blackdog_> no, one of the mac guys at work, actually... think he's trying to build an empire.
20:40:11 <ozone> which one?  (i presume you mean SS when you say work)
20:40:25 <blackdog_> yeah. Chris Petrov.
20:40:41 <blackdog_> oh, which laptop? tibook 667 Mhz
20:40:41 <ozone> ah, so chris is the mac man
20:41:00 <ozone> i'm installing tiger on my desktop tomorrow, will see how decent it is
20:43:07 <blackdog_> Cool. (hey, don't suppose I could pinch those Bebop backgrounds...?)
20:43:09 <BrunoLuigi> I´m going now, bye folks
20:43:41 <ozone> bye bruno
20:43:47 <ozone> blackdog_: yeah, hang a sec ...
20:43:55 <BrunoLuigi> bye ozone
20:44:15 <Pseudonym> Night.
20:44:17 <BrunoLuigi> I´ll be back to bother everybody with some newbie questions some time soon
20:44:29 <BrunoLuigi> :D
20:45:18 <Etaoin> okay!
20:45:30 <BrunoLuigi> gone
21:55:04 <blackdog_> is there a good explanation of the haskell FFI online?
21:56:16 <blackdog_> nevermind, found the addendum
23:03:54 <dons> juhp: I think 'q' does it. Look at the key map
23:04:00 <dons> keymap (c:cs) = do msgE "emacs keymap not ported to lazy input type"
23:04:00 <dons>                    if c == 'q' then quitE else keymap cs
23:04:34 <juhp> dons: thanks
23:23:49 <musasabi> nirbubg
