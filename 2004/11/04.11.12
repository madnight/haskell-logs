00:12:08 <mornfall> franta nestiha
00:12:14 <mornfall> (hlavni konkurent v me skupine)
00:12:23 <mornfall> oops
00:12:26 <mornfall> wrong window, sry :)
00:49:19 <boegel> hello everyone
00:49:22 <boegel> is bourbaki here ?
01:20:25 <bourbaki> moin
01:20:51 <Lemmih> Hey bourbaki
01:21:19 <Lemmih> Boegel was looking for you half an hour ago.
01:22:30 <bourbaki> heh i slept till like 10 mins ago
01:22:50 <bourbaki> did he solve his prob?
01:23:56 <Lemmih> He didn't mention a problem. He just asked for you and then left.
01:24:12 <bourbaki> i see
02:06:32 <tic> "Monotone Satisfiability": Is it always the case that |Ci| = 2?
02:32:40 * earthy must be weird for not considering Attribute Grammars interesting
02:48:54 <stud> musasabi, how was the implementation of length using foldr? 
02:50:27 <Lemmih> foldr (\ _ b -> b + 1) 0
02:50:45 <musasabi> Lemmih was faster..
02:54:02 <tromp> or length = sum . map . (const 1)
02:54:26 <tromp> where sum uses the foldr:)
02:54:39 <tromp> oops, typo
02:55:13 <tromp> length = sum . (map . (const 1))
02:55:24 <tromp> argh!
02:55:33 <tromp> length = sum . (map (const 1))
02:56:58 <Lemmih> length = foldr (curry (succ . snd)) -- pointfree
02:58:19 <Lemmih> Add a '0' to that.
03:00:12 <tromp>  length = foldr ((+).(const 1)) 0
03:01:28 <tromp> curryfree :)
03:01:44 <tromp> but then yours is constfree:P
03:02:20 <tromp> and mine doesn't succ :D
03:09:43 <stud> is it somehow possible that foldr returns two variables: a list and an Int?
03:11:03 <stud> Now I know how to do length using foldr and filter using foldr, but I need to put them in one function
03:12:17 <stud> http://mait.pri.ee/haskell.html <- that's what I'm doing
03:15:49 <tromp> you can use a function mapping pairs to pairs
03:17:05 <stud> what does that mean?
03:18:46 <stud> something to do with function "map" ?
03:19:23 <musasabi> stud: pair was the important word.
03:19:45 <tromp> foldr ((a,b)->(f a, g b)) (0,[]) list
03:19:45 <stud> ok
03:20:54 <tromp> foldr (\x (a,b)->(f x a, g x b)) (0,[]) list
03:21:54 <tromp> that just combines foldr f 0 list and foldr g [] list
03:39:33 <stud> tromp, if g is an Int. What should I do then? So far I tried to do something like this(look at the bottom) http://mait.pri.ee/haskell.html 
03:43:34 <tromp> you can't use xs in f
03:44:24 <stud> you mean in m and n?
03:44:33 <tromp> yep
03:44:59 <tromp> also your b has things in wrong order
04:00:47 <bourbaki> moin
04:03:39 <Lemmih> Hey bourbaki.
04:03:42 <boegel> hey #haskell !
04:03:49 <boegel> hey bourbaki :)
04:04:15 <bourbaki> hi
04:04:25 <bourbaki> did you solve the prob?
04:04:25 <boegel> I have a question, again :)
04:04:33 <boegel> almost :)
04:04:47 <boegel> I checked the orignal C code of perlin, and parsed it too haskell
04:05:01 <bourbaki> what was the prob?
04:05:14 <boegel> it works pretty good now, only, what I dont understand, perlin allows both negative and positive values as a result of the noise function
04:05:35 <bourbaki> that sounds a bit illogical to me
04:05:51 <boegel> but you can't multiply a negative noise value with a color, because a negative color doesn't make any sense
04:05:58 <bourbaki> cause its based on the plane distance so negative values arent possible there
04:06:18 <boegel> we'll, he allows negative values for the gradients, so the result of the noise function can be negative too
04:06:32 <bourbaki> give me a pic of your texture and the code again plz :)
04:06:52 <bourbaki> but the principal remains the same doesnt it?
04:07:07 <boegel> g3[i][j] = (float)((random() % (B + B)) - B) / B;
04:07:14 <boegel> where B is 256
04:07:33 <boegel> that runs in an for-loop with j=0..2
04:07:44 <boegel> and for i=0..255
04:07:50 <bourbaki> ok thats the gird
04:07:57 <boegel> he normalizes every g[i] too
04:08:16 <boegel> bourbaki, the values in the grid can be negative this way, correct <
04:08:19 <bourbaki> you mean all the vectors?
04:08:23 <boegel> s/</?
04:08:35 <bourbaki> the vectors can be negative yes
04:08:42 <boegel> bourbaki, he normalizes the grid vectors, yes
04:08:52 <boegel> for (j = 0 ; j < 3 ; j++)
04:08:52 <boegel> g3[i][j] = (float)((random() % (B + B)) - B) / B;
04:08:52 <bourbaki> but when you do the dotproduct with the other vector its always positve
04:08:57 <boegel> normalize3(g3[i]);
04:09:16 <boegel> I'm not sure about that...
04:09:18 <bourbaki> oh well no :)
04:09:26 <boegel> I've tested it
04:09:30 <boegel> zith normal noise
04:09:37 <bourbaki> of course it can be negative
04:09:41 <boegel> and with abs (noise), and I get a different image
04:09:49 <boegel> so the noise can be negative
04:09:53 <bourbaki> anyway i wanna see a pic
04:10:12 <bourbaki> yeah but you can make it positive by adding 1
04:10:14 <boegel> it's hard to show you images btw, because i'm at university, and my laptop doens't have a floppy drive :s
04:10:27 <boegel> and I haven't got any cd's with me or so :s (pretty stpid)
04:10:29 <bourbaki> er no sqrt 2
04:11:02 <bourbaki> the distances you can get are 0<= d <= sqrt 2
04:11:22 <boegel> if I make it positive with abs, I get sharp edges in my images (which makes sense)
04:11:24 <bourbaki> the distances you can get are -sqrt 2 <= d <= sqrt 2
04:11:55 <bourbaki> but the rest remained the same? with the dotproducts and interpolation yes?
04:12:09 <boegel> bourbaki, yes
04:12:21 <bourbaki> ah ok
04:12:31 <boegel> I changed, my code though, according to the way Perlin does it in C, but the idea is the same
04:12:46 <bourbaki> what did you do differently?
04:13:04 <bourbaki> anyway you just need to know what the lowest val is
04:13:21 <boegel> idd, I do
04:13:23 <bourbaki> and its sqrt 2 so just add sqrt 2 and you wont have negative dps anymore
04:13:33 <bourbaki> idd?
04:13:36 <boegel> if I don't do abs, the image looks quite good, but it's too dark
04:14:11 <bourbaki> just scale it up
04:14:42 <bourbaki> and if you want positive values add the lowest bound to the value and devide it by the range
04:14:51 <bourbaki> then you get a val [0..1]
04:15:19 <bourbaki> and then you can multiply this with the range you wanna have ie 255
04:15:30 <boegel> idd
04:15:52 <bourbaki> i bet it also would look cool if you had a map for all three chans different that is
04:16:02 <bourbaki> idd = i dont do?
04:16:11 <boegel> idd = indeed
04:16:13 <boegel> :)
04:16:20 <bourbaki> ah strange
04:16:30 <boegel> it's msn speak I think :p\
04:24:37 <arjanb> i think it's dutch
04:24:55 <bourbaki> heh still strange :)
04:26:33 <boegel> arjanb, indeed = english, idd = indeed - n,e,e :p
04:30:43 <arjanb> inderdaad -> in-der-daad -> idd  seems more likely..
04:31:13 <bourbaki> thats one word in dutch?
04:31:25 <arjanb> yes
04:31:36 <bourbaki> in german its 3 words :)
04:31:39 <bourbaki> in der tat
04:32:08 <boegel> arjanb, you could be right :)
04:32:20 <boegel> sorry ;)
04:34:50 <bourbaki> boegel what are you doing at uni ?
04:35:08 <boegel> computer sciences
04:35:31 <boegel> bourbaki, the min value is between -.16 and -.17
04:35:32 <bourbaki> no i mean why are you there atm if you write your thesis you shouldnt need to attend to more courses
04:35:45 <bourbaki> thats strange
04:35:58 <bourbaki> lets say youre in the upper left corner
04:36:09 <boegel> bourbaki, I don't have much courses, just a few
04:36:10 <bourbaki> and you do the dot product with the inner vector
04:36:17 <boegel> like 10 hours / week orso
04:36:20 <bourbaki> then the length of this vec is maximally sqrt 2
04:36:41 <bourbaki> (1,1)
04:36:44 <boegel> but I had a course this morning, and I have one at 14h30, and I can't go home in between, it's too far
04:37:00 <bourbaki> sqrt (1^2 + 1^2) = sqrt 2
04:37:34 <boegel> bourbaki, the length of which vect ?
04:37:41 <bourbaki> 0.75 * 1 + 0.75 * 1 = 1.5
04:37:57 <bourbaki> the one where you subtract the edge points from
04:39:40 <bourbaki> er 0.707 * 1 + 0.707 * 1
04:39:52 <boegel> bourbaki, the length of that vector is maximum sqrt(3)
04:40:05 <boegel> because it only works with 0.x values
04:40:42 <boegel> I have to do x - floor (x) or x - ceiling(x) to get the vector, so the max value of each of it's elements is 1
04:40:43 <bourbaki> but then sqrt 3 is too big
04:40:55 <bourbaki> its lim is sqrt 2
04:41:05 <bourbaki> yes
04:41:11 <boegel> sqrt (1^2 + 1^2 + 1^2) = sqrt(3)
04:41:17 <bourbaki> a^2 + b^2 = c^2 :)
04:41:22 <bourbaki> and and b are 1
04:41:26 <bourbaki> a and :)
04:41:55 <boegel> I _really_ don't get what you're trying to say :)
04:42:01 <bourbaki> so the sup of the space is (1,1)
04:42:19 <bourbaki> and the gard that maximizes this vec is
04:42:20 <boegel> bourbaki, I'm working in 3D
04:42:28 <bourbaki> (0.707, 0.707)
04:42:46 <bourbaki> its the same :)
04:44:36 <boegel> I don't see how you get to .707
04:44:59 <bourbaki> no thats in 2d
04:45:13 <bourbaki> but your right with sqrt 3 sry
04:46:00 <boegel> damn, I thought I was going crazy ;)
04:46:52 <boegel> it's strange that the noise function only yields points between 0.17 and -0.17 dough...\
04:54:00 <boegel> bourbaki, so I should do: (noise + sqrt(3))/sqrt(3) to get values between 0 and 1 ... ? that doesn't seem right to me...
04:54:16 <bourbaki> sec phone
04:55:16 <bourbaki> ok
04:55:31 <bourbaki> no add sqrt 3
04:55:39 <bourbaki> and / 2 sqrt 3
04:55:41 <boegel> I don't see how I can link the -0.17..0.17 values to sart(3)
04:55:46 <boegel> s/sart/sqrt
04:55:56 <bourbaki> (noise + sqrt 3) / 2 sqrt 3
04:56:12 <boegel> bourbaki, then my brightest value doesn't even come close the my original object color
04:56:16 <bourbaki> well sqrt 3 is the special ... er case
04:56:23 <bourbaki> i dont know the english word vor lage
04:56:54 <bourbaki> then your vals aer [0..1]
04:56:57 <boegel> I have (255,0,0) as object color, but the brightest color of the perlin noise is approx (158,0,0)
04:57:02 <bourbaki> and then you scale it up to the thing youw ant to have
04:57:17 <bourbaki> ((noise + sqrt 3) / 2 sqrt 3) * desired upperbound
04:57:22 <bourbaki> like 255
04:57:34 <bourbaki> so your vale are between [0..255]
04:58:09 <bourbaki> well you have to keep in mind that you cant really get 255
04:58:34 <boegel> (-.17 + sqrt 3) / ( 2 * (sqrt 3) ) = 0.45
04:58:35 <bourbaki> you still interpolate between 8 valuex
04:58:36 <bourbaki> s
04:59:07 <bourbaki> then just take .5 of the sqrt
04:59:26 <bourbaki> or really calculate the maximum of all the interpolations
05:00:01 <bourbaki> ((noise + 1/2 sqrt 3) / sqrt 3) * desired upperbound
05:02:42 <bourbaki> did you do the shift on the dp?
05:03:06 <bourbaki> ((DP + sqrt 3) / 2 sqrt 3) * desired upperbound
05:03:08 <boegel> how should I shift ?
05:03:19 <bourbaki> ((DP + sqrt 3) / 2 sqrt 3)
05:03:29 <boegel> I implemented this: http://mrl.nyu.edu/~perlin/doc/oscar.html
05:03:30 <bourbaki> then your dp is [0..1]
05:03:39 <boegel> float noise3
05:03:44 <boegel> exactly the same...
05:04:27 <boegel> I think that should really work...
05:06:01 <bourbaki> bleh i have to go training today again ...
05:07:29 <boegel> bourbaki, it seems like perlin suggested some imporvements on perlin noise
05:07:35 <boegel> http://mrl.nyu.edu/~perlin/paper445.pdf
05:14:13 <boegel> bourbaki, I have to go, I have a class in 10 min's
05:14:37 <boegel> I'm getting some nice result if I use this: http://www.noisemachine.com/talk1/21.html
05:14:42 <bourbaki> and i have to go to the training :( though id rather like to chill in my chair
05:14:55 <boegel> it's only the brightness of my colors that's not 100% yet
05:14:58 <boegel> almost there
05:15:10 <boegel> I'll show you some images tomorrow most likely
05:15:29 <bourbaki> sure see you then
05:15:30 <boegel> bye now !
07:00:25 <chucky> hello
07:00:33 <bringert> hi chucky
07:00:40 <bringert> welcome home
07:01:07 <chucky> thanks
07:01:17 <chucky> did you get those bugs worked out?
07:01:49 <bringert> think so
07:02:00 <bringert> it builds fine for me now anyway
07:02:14 <bringert> and the build system is a bit cleaner
07:02:20 <bringert> less hackery with package flags
07:02:56 <chucky> nice
07:03:06 <chucky> did you commit it?
07:03:51 <chucky> ooh you did. cvs diff just didn't work the way I wanted
07:03:56 <chucky> or expected, rather
07:06:57 <Oejet_> Greetings.
07:52:35 <bourbaki> moin
07:54:26 <Oejet_> Someone mentioned making a programmers LiveCD some time ago.  I have some suggestions regarding that.
07:54:37 <bourbaki> that was me :)
07:54:46 <bourbaki> but im too lazy to do something like that
07:55:04 <bourbaki> im willing though to help comeing up with the stranges languages to put on that cd :)
07:55:23 <Oejet_> bourbaki: I'm shure you are. :-P
07:55:40 <bourbaki> but lets hear your suggestion
07:57:22 <Oejet_> bourbaki: I have had the same thoughts.  It looks very easy to do with the GoboLinux ISO building kit.
07:58:40 <Oejet_> I haven't tried it yet, though, and I have to clean up my partitions really well to fit the necesarry 1.8GB somewhere.
07:59:10 <Igloo> 1.8G?
07:59:42 <Oejet_> Yep.  Take the current LiveCD and extract it.  Make modificatons and compress it back.
08:00:25 <Igloo> How much compression does it get?
08:01:03 <Oejet_> Some advantages:  GoboLinux has recipes for GHC and some Haskell tools, but not all.  The LiveCD is the way to install GoboLinux, so it includes an installer.
08:01:28 <Oejet_> Igloo: Guess down to 650MB or there about.
08:06:38 <Oejet_> I'll have more on the subject later.
08:25:33 <bourbaki> what kind of music do you listen to when you code?
08:27:50 <kristnjov> black metal, death metal, or acoustic stuff :)
08:27:56 <Igloo> I mainly play Beatles, Meatloaf, Queen, but when I'm actually coding I don't hear the music
08:28:04 <xkb> Pearl Jam atm :P
08:28:08 <tuomov> the same as usually (90% metal). Except when intensely coding I usually forget to put on any music once the previous album finishes
08:28:13 <xkb> not coding though now
08:28:21 <Igloo> Or at least, I don't think I do. It's possible I sing along without realising it too
08:28:44 <kristnjov> i rarely sing along to the music i listen to, since most of the time you can't figure out the words
08:28:55 <kristnjov> and growling isn't a hobby of mine
08:28:56 <xkb> sing along to emperor :P
08:29:02 <kristnjov> sing along to cannibal corpse
08:29:09 <xkb> lol
08:29:09 <tuomov> growling is a percussive instrument :)
08:29:18 <kristnjov> cannibal corpse karaoke.. i'd buy it :)
08:29:22 <Igloo> Pah, metal is all just noise
08:29:28 <bourbaki> no one in heres listening to ambient tunes and the like?
08:29:36 <kristnjov> Igloo, that's what you hear, we hear it differently :)
08:29:39 <bourbaki> i wonder that you can listen to something with words while you code
08:29:50 <Igloo> kristnjov: Yeah, but I'm right and you're all wrong. So nyaah.
08:29:51 <basti_> bourbaki mike oldfield or tangerine dream.
08:29:52 <kristnjov> bourbaki, i listen to ambient sometimes when i want to relax but not hear the computer noise
08:29:53 <basti_> or bach.
08:29:54 <dottedmag> bourbaki: Jean Michelle Jarre is ok
08:29:57 <kristnjov> Igloo, darn
08:29:58 <basti_> or Nine Inch Nails
08:30:12 <Igloo> bourbaki: Like I say, I'm fairly sure I don't hear the words while I'm actually coding
08:30:18 <dottedmag> bourbaki: Or songs on the language you don't understand
08:30:20 <tuomov> ambient stuff is occasionally cool
08:30:21 <Igloo> Or the music for that matter
08:30:37 <tuomov> and jazz and classical and whatnot
08:30:43 <tuomov> but mostly I listen to metal and such
08:31:05 <bourbaki> http://205.188.234.37:8038
08:31:28 <bourbaki> try that stream out thats really good for codeing imho :)
08:32:00 <basti_> my stereo unrules at the time. its a mono actually.
08:32:09 <basti_> one of the cables broke, apparently.
08:32:09 <bourbaki> heh :)
08:32:18 <bourbaki> i need a new amplifier
08:32:24 <basti_> i need a new cable
08:32:31 <bourbaki> and new boxes as well :)
08:32:35 <basti_> i need a solder iron.
08:32:42 * basti_ writes list for christmas
08:33:03 <bourbaki> heh
08:33:29 <bourbaki> when i earn money again im gonna spend like half a years wage into my stero hifi stuff
08:33:56 <basti_> my gf's father has nubert boxes.
08:34:24 <basti_> i dont.
08:34:33 <basti_> my stereo were 400 DM well spent.
08:35:49 <bourbaki> basti_ ah youre from gog?
08:36:21 <basti_> g og?
08:36:27 <bourbaki> good old germany ;)
08:36:28 <basti_> germany yes
08:36:29 <basti_> ah
08:36:33 <kristnjov> straight outta compton!
08:36:34 <basti_> k ;)
08:36:48 <bourbaki> compton england?
08:36:51 <kristnjov> :/
08:37:04 <bourbaki> i comp my hair ;)
08:37:06 <kristnjov> i was referring to the way rappers say where they're from
08:37:14 <bourbaki> oh
08:37:17 <basti_> i was in australia for vacation and now i say i'm lucky im not from YEERONGPILLY for example.
08:37:35 <basti_> no rapping with that word.
08:37:59 <kristnjov> yeerongpilly, straight to da picadilly, i want my boys to fill me..
08:38:01 <kristnjov> heh...
08:38:13 <basti_> wrong channel? ;)
08:38:14 <bourbaki> bleh
08:38:16 <kristnjov> yeah :)
08:40:25 <basti_> we're doing Category Theory in Uni at the moment
08:40:50 <basti_> thats fun
08:40:56 <basti_> -point-point-point- true
08:41:13 <basti_> did you know that Subcategories make up Topologies?
08:41:30 <bourbaki> :)
08:41:35 <bourbaki> basti_ which uni are you at?
08:41:36 * basti_ is living in the wrong world he thinks now and then
08:41:38 <basti_> marburg
08:42:42 <bourbaki> ah
08:42:52 <basti_> thats where all the strange philosophers live
08:43:00 <bourbaki> well CT is something closely related to topology
08:43:20 <bourbaki> i studied in fulda once
08:43:28 <basti_> well i think i'm thinking "the other way round"
08:43:51 <basti_> as in "the submonads of certain monads make up a topology"
08:44:13 <bourbaki> a topology like what?
08:44:23 <basti_> uhm like in "Filters" i think
08:44:45 <bourbaki> to me nearly anything is a topology :)
08:44:57 <basti_> hmmh.
08:44:58 <basti_> ;)
08:45:17 <bourbaki> whats a submonad btw?
08:45:31 <bourbaki> you mean a constuction where you have a monad in a monad?
08:45:31 <basti_> wait a sec i get the definition
08:45:35 <bourbaki> sure
08:46:14 <bourbaki> ah i guess its like in a subgroup
08:46:30 <bourbaki> where you have a subset that also form a monad
08:46:33 <basti_> am an embedding
08:46:45 <bourbaki> am an?:)
08:46:54 <basti_> that commutes the Funktor square 
08:47:09 <basti_> with injection
08:47:14 <basti_> and U->F(U)
08:47:21 <basti_> and A->F(A)
08:47:26 <basti_> and injection from U to A
08:47:38 <basti_> and then neccisairly an incection between the F's
08:47:56 <bourbaki> and F is what?
08:48:12 <basti_> if you have such a submonad, they build a set of "open" sets like in a topology
08:48:17 <basti_> the Funktor
08:48:39 <bourbaki> which funktor?
08:48:40 <basti_> not neccisairly all funktors give a meaningfull topology.
08:48:55 <basti_> pick one... Potence Set (en?) for example
08:49:05 <bourbaki> power set
08:49:07 <basti_> then you got the discrete topology me would deem
08:49:09 <basti_> k
08:49:10 <basti_> power set
08:49:28 <bourbaki> ok and on this new structure you have the monad?
08:49:46 <basti_> uhm no i think the funktor is a monad.
08:49:53 <basti_> i think any funktor is.
08:50:06 <basti_> just if it makes sense to view it as a monad in the haskell sense...
08:50:11 <bourbaki> ? a monad consists of 3 functions
08:50:22 <basti_> uhmmmhyes axioms.
08:50:25 <basti_> =)
08:50:39 <basti_> these would be given by the pick of the funktor
08:50:42 <bourbaki> two natural transformations and one other things
08:51:07 <bourbaki> and where comes the sub into play?
08:51:08 <basti_> any funktor has for example the axiom that F(id(a))=id(F(a))
08:51:22 <basti_> well now we have a certain funktor
08:51:28 <basti_> and can assure it has subfunktors.
08:51:32 <bourbaki> for me sub implies something like the subset of elements where your structure is defined on
08:51:43 <basti_> as in, Funktors that are on an embedding of the set
08:52:09 <basti_> when you got something like a "state monad" that means that the STATES are not restricted
08:52:10 <bourbaki> an embedding is what?
08:52:21 <basti_> uhm a subset.
08:52:32 <bourbaki> whats the german word for it :)?
08:52:35 <basti_> teilmenge
08:52:41 <bourbaki> ah
08:52:43 <basti_> die kann man als injektion (einbettung) darstellen
08:53:03 <basti_> but now this still holds the funktor laws
08:53:11 <basti_> or, when it holds, then you got a submonad.
08:53:22 <basti_> (methinks.)
08:53:26 <bourbaki> so you have a submonad on these Us and As?
08:53:34 <basti_> U is a submonad of A
08:53:48 <basti_> that means that the U set is a subset of A
08:53:55 <bourbaki> right
08:53:59 <basti_> and that the funktor still makes sense.
08:54:05 <bourbaki> i just dont see what F is good for :)
08:54:15 <basti_> as in, commutes the square U->A over F(U)->F(A)
08:54:21 <bourbaki> i mean its like in a subgroop then
08:54:21 <basti_> well its the symbol of the monad
08:54:25 <basti_> yes right
08:54:32 <basti_> you can view it subgroupwise
08:54:36 <basti_> but subgroups are dual
08:54:46 <basti_> their arrows are the other way round.
08:55:05 <basti_> they have UxU -> U
08:55:13 <basti_> and not U -> U^U (?)
08:55:24 <basti_> where U^U would be the type of F(U)
08:55:28 <basti_> i think
08:55:37 <basti_> and thats the reason why submonads behave different.
08:55:49 <basti_> as in they are like topologies, not like groups.
08:56:12 <bourbaki> you can have topological groups :)
08:56:18 <basti_> wow :)
08:56:29 <basti_> and then we go Cantors way.
08:56:39 <basti_> know what happened to Cantor?
08:56:53 <bourbaki> no idea maybe he died? :)
08:57:15 <basti_> after his mathematical period his mental condition deterioated rapidly
08:57:42 <basti_> after realizing that there were more than infinite more numbers than infinity.
08:57:56 <basti_> he had a period of forced hospitalisation
08:58:09 <basti_> probably he never touched that stuff again.
08:58:10 <basti_> ;)
08:58:15 <bourbaki> yeah i feel often like im going mad as well
08:58:24 <bourbaki> too much thinking is bad
08:58:28 <basti_> hehe
08:58:42 <basti_> you're one of the guys in the institute that talk to nobody?
08:58:51 <bourbaki> yes
08:59:03 <basti_> who eats absent-mindedly in a corner?
08:59:06 <bourbaki> and its no joke really too much thinking is harmfull
08:59:13 <basti_> yep.
08:59:20 <basti_> you need to have a counterweight.
08:59:26 <bourbaki> i dont eat in corners but in the place next to the place where i get my fork
08:59:31 * basti_ recommends psychedelics
08:59:38 <basti_> i see.
08:59:39 <bourbaki> cause anything else is irrational
08:59:50 <basti_> read feynman?
09:00:03 <bourbaki> no
09:00:14 <basti_> he was like that too
09:00:46 <basti_> he always took the sweet thing with choclate for after the dinner instead of thinking too much about it.
09:00:46 <bourbaki> heh so its not that bad
09:00:59 <basti_> i think conclusions in both directions are not valid.
09:01:22 <basti_> I for example have a stunning blonde and a nice musical-loving arabian as dinner companions
09:01:26 <basti_> =)
09:01:30 <bourbaki> you just need to have enough fields of interest
09:01:37 <basti_> not always but now and then ;)
09:02:11 <bourbaki> i just dont like small talks
09:02:33 <bourbaki> and ppl are usually interested in these things so i just go on thinking about whatever i have in mind
09:02:33 <basti_> aww you can ignore that with blondes.
09:02:36 <basti_> ;)
09:02:56 <bourbaki> basti_ do you have a script?
09:03:11 <bourbaki> im blond
09:03:26 <basti_> mmh handwritten yes.
09:03:34 <basti_> but no mention of the topology stuff in that so far
09:03:35 <bourbaki> wargh!
09:03:43 <basti_> but there's a book too
09:03:52 <bourbaki> no i just want to read on submonads but cant find anything on the net
09:03:54 <basti_> I have it I'll look up if there's a mention
09:03:59 <bourbaki> which book?
09:04:20 <basti_> mmhm
09:04:22 <basti_> where is it
09:04:26 <basti_> "universelle algebra"
09:04:30 <basti_> ihringer & gumm 
09:04:42 <bourbaki> ah
09:05:07 <basti_> -dig-
09:05:46 <basti_> but if you want i can scan my script (its not complete)
09:05:53 <bourbaki> sure
09:05:59 <bourbaki> whats the name of the course?
09:06:16 <basti_> "zustandsbasierte systeme"
09:06:22 <bourbaki> aha
09:08:11 <basti_> hmm
09:08:19 <basti_> (coalgebra = monad)
09:09:12 <basti_> uhm quote me on it... i will be back after buying things
09:09:16 <bourbaki> http://www.win.tue.nl/zic/eklund.pdf
09:09:27 <basti_> -opens-
09:09:46 <basti_> oh yes.
09:10:30 <bourbaki> my prof will like it if i come up with some connection of that to logics cause hes a logic freak :)
09:10:38 <basti_> hehe
09:11:11 <bourbaki> ah as i thoght you can see the def of a sub monad there
09:11:44 <bourbaki> ah fine now i have something to read for the eve :)
10:10:39 <shapr> whoa, d00d
10:10:51 <dash> hello!! monad question!
10:11:00 * stepcut does the funky monad
10:11:19 <dustin`> bind baby bind!  monad inferno!
10:11:24 * shapr wibbles
10:11:36 <dash> "a >>= b" will pass whatever is 'return'ed from a (assuming do-notation) as an arg to b, correct?
10:12:52 <shapr> only if b takes exactly one arg
10:13:12 <shapr> otherwise you need to do a >>= \thatthing -> b arg1 thatthing arg3
10:13:40 <dash> ... and a >> b will "throw away" the returned value. am I OK so far?
10:13:44 <shapr> yup
10:13:47 <dash> OK COOL
10:13:55 <shapr> a >>= \_ -> b
10:14:14 <shapr> dash: getDirectoryContents ".">>= \f ->zipWithM_ renameFile f$ map ((\ (a:b:c:d:_) -> concat [c," [",a,"-",b,"] - ",d]).split " - ") f
10:14:23 * dash boggles a little
10:14:30 <shapr> I suspect that can be cleaned up a bit
10:14:58 <dash> anyway it looks like i can rewrite the function that does 'progn' in this lisp interpreter a lot nicer then
10:15:09 <dash> sesequenceMeaning exprs = foldr1 (>>) exprs
10:15:18 <dash> s/se//
10:15:42 <shapr> yah, fold is so much fun with one or more of ($), (.), (>>=), (>>)
10:15:48 <dash> hee
10:16:04 <shapr> It took me awhile to figure out that ($) is useful for folding.
10:16:15 <dash> i would not have guessed that immediately
10:16:32 <shapr> I didn't either.
10:16:38 <dustin`> What is ($) again?
10:16:49 <shapr> it's function application.
10:17:08 <shapr> usually used to lower precedence of function application
10:17:14 <dash> (a -> b) -> a -> b
10:17:28 <shapr> function application binds most tightly
10:17:41 <dustin`> ahh
10:17:47 <shapr> \f ->zipWithM_ renameFile f$ map ((\ (a:b:c:d:_) -> concat [c," [",a,"-",b,"] - ",d]).split " - ") f
10:17:56 <dash> anyway it looks like making this interpreter monadic is cleaning it up a lot
10:18:01 <dash> we'll see if it actually runs, later....
10:18:08 <shapr> without that $ it would be "renameFile f map" which makes no sense
10:19:23 <tuomov> $ is really convenient in shortening e.g. foo (bar (baz quk)) to foo (bar $ baz quk)
10:19:25 <dustin`> Oh!  I usually just use extra parens to force precedence
10:19:53 <dustin`> Then again, my introduction to FP was scheme, so its natural enough for me.
10:34:05 * shapr boings
10:36:32 * shapr chortles
10:36:43 <shapr> Peti's latest Postmaster commit is funny.
10:37:22 <Igloo> oh?
10:37:43 <shapr> Fri Nov 12 18:31:46 CET 2004  simons@cryp.to
10:37:43 <shapr>   * keep joke :-)
10:37:46 <shapr> A walk through "Config.hs" -- still incomplet and incorect!
10:43:24 * shapr throws a lambda boomerang at Oejet_ 
10:43:56 * Oejet_ ducks in slowmotion like in The Matrix.
10:44:30 * maihem hides shapr's happy pills
10:44:32 <bourbaki> why is there no #haskell meeting once a year?
10:45:30 <shapr> bourbaki: there is!
10:45:32 <shapr> EuroHaskell!
10:45:34 <stepcut> bourbaki: we meet everyday! ... online
10:46:56 <bourbaki> where is the euro haskell?
10:47:10 <shapr> In Gothenburg, Sweden in the summer.
10:47:21 <bourbaki> oh ok thats far a way
10:47:27 <shapr> stepcut is organizing the Continental US #haskell meeting this year.
10:47:37 * shapr grins
10:47:50 * shapr is teasing stepcut 
10:49:19 <Spark> pills? where?
10:51:12 <shapr> mine! you can't have them!
10:58:49 <musasabi> away for the weekend (visiting friends @ Tampere)
10:58:51 <musasabi> =>
10:58:59 <shapr> have fun!
10:58:59 <bourbaki> florida?
10:59:08 <shapr> nah, that's "Tampa"
10:59:19 <bourbaki> all the same :)
10:59:21 <shapr> Tampere is more northerly, and a good bit easty.
10:59:44 <bourbaki> of what?
10:59:57 <shapr> of Florida
11:19:40 <bourbaki> nighto
11:20:07 <shapr> hej magnus--, what's up?
11:20:07 * shapr lags
11:20:11 <shapr> g'night bourbaki 
11:20:31 <magnus--> hej
11:25:36 <Oejet_> Hey, let's do some Java bashing.
11:26:54 <chucky> nah, it's too easy. :)
11:29:05 <shapr> I'd rather bash up some code =)
11:29:07 <shapr> at least I've fixed my local postfix enough that it can send email to my server.
11:32:23 <Oejet_> Java bashing is much more fun in #java at QuakeNet. :-P
11:33:15 <chucky> there is actually a #java? I thought noone really liked the language, they just had to use it...
11:34:42 <magnus--> newbie question: haskell compared to sml, what makes haskell better?
11:35:06 <magnus--> (for real world getting things done)
11:35:28 <Oejet_> The standard library, me thinks.
11:35:35 <Igloo> Haskell code is more beautiful
11:35:40 <Igloo> And laziness is sometimes really handy
11:36:33 <stepcut> magnus--: type classes!
11:36:43 <shapr> Theoretically, laziness is more efficient than strictness.
11:36:46 <stepcut> and the standard library (compared to ocaml)
11:36:58 <shapr> In practice, laziness sometimes bites.
11:37:01 * maihem gets it on with type classes and laziness
11:37:08 <stepcut> and Strings as [Char]!! 
11:37:12 <shapr> But in general, laziness is great.
11:37:47 * stepcut is trying to do write a lazy algorithm in ocaml at the moment ;(
11:37:51 <magnus--> is there a simple way to force a result to be computed strictly?
11:37:52 <Etaoin> can't type classes be duplicated with parametric modules?
11:38:17 <stepcut> Etaoin: like the ocaml module functors ?
11:38:23 <Etaoin> stepcut: right
11:38:40 <Etaoin> dunno whether sml has them
11:38:40 <stepcut> Etaoin: Some aspects, but it is not as nice
11:38:44 <shapr> magnus--: yes, there's seq and $!
11:38:49 <Igloo> Laziness was really handy in the regex matcher builder - I pass in what states come after this bit of regex when I won't know what they are until I've built both this bit and the next bit
11:38:51 <shapr> there's also DeepSeq for more strictness.
11:38:53 <maihem> I've only yet had problems with thunks (which happens in strict languages too), and evaluation and output being defered even though it could be completed sooner (and mapM_ seems to fix that for all the cases I've hit so far)
11:39:40 <Etaoin> stepcut: I agree that it's not as nice, but it's still a similar ability.
11:39:41 <stepcut> Etaoin: with ocaml, you can't just call 'show', you would have to do Int.show Real.show String.show, etc
11:39:46 <magnus--> Okay, how about unicode and gui?
11:41:09 <stepcut> Etaoin: There are certainly similarities, but haskell type classes are still more elegant and powerful that ocaml module functors
11:41:24 <Etaoin> stepcut: yes
11:42:08 <magnus--> The program i would like to make is a vocabulary trainer for chinese
11:43:52 <magnus--> I have made one in scheme, but i would like to see what it would would be like in a language in the ML family
11:44:04 <chucky> wxhaskell is good for creating guis in haskell
11:44:40 <magnus--> okay, I'll have a look at that
11:46:07 <Oejet_> The Haskell module system is not as elegant as SML's.  :-/
11:47:09 <pesco> Hello channel Haskell.
11:47:46 <magnus--> it seems that wxhaskell does not support unicode
11:47:50 <Jan_w> hello pesco
11:47:59 <pesco> Hi Jan_w. What's up?
11:48:17 <Jan_w> pesco: a blue ceiling here, at yours?
11:48:29 <pesco> Wow, mine's just white.
11:49:34 <shapr> wxHaskell?
11:50:12 <pesco> Hey shapr!
11:50:17 <Jan_w> hoi shapr
11:50:18 <Jan_w> :)
11:55:40 <Philippa_> magnus--: erk, that's not good. IIRC wxWidgets supports it
11:57:07 <shapr> greetings pesco!
11:57:14 <shapr> hoi Jan_w 
11:57:19 * shapr is lagging via IPv6
11:57:50 <shapr> I know gtk2hs supports Unicode, it comes with Unicode demos.
11:58:23 <pesco> shapr: Do you get IPv6 from your ISP natively?
11:58:29 <shapr> heck no
11:58:33 <shapr> though they want to sell it to me
11:58:52 <pesco> Ugh!
11:59:12 <shapr> They said that they'd have to run an IPv6 trunk north from stockholm or something like that.
11:59:48 <shapr> I asked before summer, they said that could not possibly be available before end of summer, even if they started on it right then.
11:59:57 <pesco> Er. What are they talking about?
12:00:06 <pesco> Ah well.
12:00:14 <shapr> IPv6.org has that same ISP, telia, listed as one of the top three IPv6 providers in the world.
12:00:45 <pesco> Interesting.
12:01:01 <shapr> It took me several hours of searching to find out how to purchase a native IPv6 connection from them.
12:01:21 * pesco shakes his head.
12:01:54 <pesco> Sadly, SixXS still haven't fixed my reverse delegation. :(
12:01:59 <shapr> So, the entrenched long-run ISPs obviously suck, but I haven't figured out how to do open-source long-run ISP stuff yet.
12:02:23 <pesco> What's "long-run ISP stuff"?
12:02:46 <shapr> the guys who run a cable from say munich to berlin.
12:03:23 <pesco> Oh. So you haven't found any open source long-run cabling equipment? That sucks. ;)
12:03:35 <shapr> OSS people could take over the metro ISP stuff and do it right, but I don't yet know how to do long-run stuff without railroad access or so.
12:03:38 <Philippa_> Sign up to CommieNet today!
12:04:00 <pesco> CommieFagNet mind you.
12:04:11 <Philippa_> aw, no fun - where're the commie dykes?
12:04:18 <shapr> I think DNS needs replacing with a distributed, decentralized, p2p lookup that allows multiple instances of the same name.
12:04:49 <pesco> Philippa_: Okok. ;)
12:04:59 <chucky> for a moment there, I actually read "distributed" as "disturbed". I'm not sure how that should be interpreted. :)
12:05:00 <magnus--> shapr: okay, checking out gtk2hs then
12:05:02 <Philippa_> I don't know about you, but I cba disambiguating hostnames while I'm browsing
12:05:15 <shapr> chucky: disturb Network Solutions, I hope.
12:05:38 <shapr> Philippa_: won't be a problem if it's like MIT's Ants browsing lookups
12:06:17 <shapr> you'll ask six people around you where to find slashdot.org, and if you get five of the same and one different...
12:08:32 <Philippa_> pesco: it could be worse, I know a number of women who like watching gay sex
12:08:36 <chucky> shapr: not if we all have the Blaster virus mk 2 which makes us send false info
12:08:40 <shapr> TMI!
12:08:41 <shapr> TMI!
12:08:44 <Philippa_> generally the same people who make up a fair proportion of the audience for slashfic :-)
12:09:24 <pesco> Philippa_: Wow, I've never heard of that. Interesting.
12:10:25 * Philippa_ knows a number of people who write slashfic for fun
12:10:38 <Philippa_> admittedly some of them do it to break people's brains - legolas/treebeard, anyone?
12:10:50 <shapr> ick
12:11:49 <shapr> that's like Haskell/Forth
12:12:04 <Philippa_> how *do* you fuck a language anyway?
12:12:12 * shapr points to sun.com
12:12:13 <Philippa_> I mean, aside from letting Stroustrup design an extension to it?
12:12:51 <shapr> Let's see... Sun Research had Self, the "Better Than Smalltalk" language... and they flushed the project and built Java instead.
12:12:52 <dustin`> *rimshot*
12:13:28 <shapr> there was definitely some scrooch pooing in there.
12:14:21 <Philippa_> I'm not sure that doesn't sound worse than pooch screwing...
12:14:48 <shapr> What kind of stupidity does it require to dump Self and write Java?
12:14:51 * pesco grins
12:43:26 <shapr> y0 Coz, wazzup?
12:43:39 <CosmicRay> hey shapr, I'm trying to track down an example of haskell code I remember seeing, and I think you're the one that reccommended it to me :-)
12:43:52 <shapr> uh oh...
12:43:56 <CosmicRay> the code in question parses something by using a function data type with a recursive definition
12:44:06 <CosmicRay> ie, data Fun = Fun (String -> Fun -> String)
12:44:08 <shapr> like, a monad?
12:44:17 <CosmicRay> No, I don't think it was a monad
12:44:20 <shapr> that sounds a lot like a monadic parser.
12:44:27 <CosmicRay> hmm, well ok maybe then :-)
12:44:48 <CosmicRay> you wouldn't happen to remember what monadic parser code you would have pointed me to, would you? :-)
12:44:57 <shapr> there's gobs of it lying around.
12:45:00 <shapr> Parsec for example
12:45:25 <shapr> hiya tooki 
12:45:45 <tooki> hi shapr
12:45:49 <CosmicRay> hmmm, afair, Parsec doesn't have that peculiar recursive definition there
12:45:50 <tooki> hi channel ;)
12:47:28 <CosmicRay> good afternoon
12:48:22 <shapr> CosmicRay: you mean something that works like parser :: String -> (Thingy,String) ?
12:48:47 <CosmicRay> No, I mean something that builds up a function that yuo can pass arguments too
12:48:49 <CosmicRay> s/too/to
12:49:00 <shapr> umm
12:49:02 <CosmicRay> I *thought* that I had seen this in a Printf implementation, or maybe MIME.
12:49:09 <CosmicRay> but I can't find it in any of those.
12:49:33 <Philippa_> what kind of way? I mean, there's no reason a Parsec parser can't return a function
12:49:49 <Philippa_> in fact, it's the cheaparse way to write a desk calculator with it :-)
12:50:56 <CosmicRay> the trick this thing used was the recursive function thing, like the data Fun = Fun (String -> Fun -> String) example.  That way, they simulated being able to require variable numbers of arguments
12:51:14 <shapr> oh, look at XmlRpc then
12:51:18 <CosmicRay> ah!
12:51:24 <shapr> it does variable numbers of arguments, and I don't really see how.
12:51:28 <CosmicRay> excellent.
12:53:07 <CosmicRay> yes!  that was it!
12:53:13 <CosmicRay> sweet.
12:53:20 <CosmicRay> thanks much, shapr.
12:53:33 <CosmicRay> shapr: were you a librarian in a former life? :-)
12:53:45 <shapr> My mother has a master's degree in library science.
12:53:54 <shapr> I learned a lot while she was getting her degree.
12:54:02 <shapr> I helped her do her homework =)
12:54:06 <CosmicRay> heh
12:54:28 * CosmicRay imagines a 5-year-old shapr, quietly organizing books by cover color... :-)
12:54:57 <CosmicRay> then saying "bah", and throwing them all in a big box and memorizing the location of each
12:55:26 * shapr laughs
12:56:01 <CosmicRay> now I remember what set me on to this project.  I was thinking that if I can use xml-rpc from Haskell to Python to simulate printf, then surely I can do it in pure Haskell without the python part or the xml-rpc bit
12:56:12 <shapr> Usually I just read a book once with the goal of remembering all of the content.
12:56:19 <shapr> Then I don't have to know where I put it.
12:56:23 <CosmicRay> heh
12:58:05 <bourbaki> moin
13:04:28 <CosmicRay> shapr: btw svk is looking more appealing to me than darcs
13:05:21 <shapr> well, use what you like :-)
13:06:10 <shapr> I like using an SCM I can hack on, and I think darcs has the potential to outstrip everything SCM I've seen yet.
13:06:42 <CosmicRay> svk being written in perl is a downer for me, fo course
13:06:58 <CosmicRay> otoh philosophically it is very similar to darcs
13:07:13 <CosmicRay> but with the glue to potentially use any backend -- subversion, cvs, arch, even darcs
13:15:54 <shapr> wow, BabelBot is cool.
13:20:46 <kolmodin> shapr: another bot: http://www.skinner.se/stuff/Aftonbladet_vs_Draparn.txt
13:23:21 <pesco> I'm off to bed, good night everyone. And good coding.
13:23:38 <shapr> g'night pesco 
13:24:08 * pesco waves and falls asleep
13:26:05 <kolmodin> the url is to a log of some conversations. the bot doesn't fool anyone yet... i found the log some days ago on http://buzz.bazooka.se/
13:26:20 <shapr> vixenlove at least confuses people.
13:46:20 <kolmodin> shapr: if you read the logs you will see that they are only trying to make the bot talk about music, food, licker and sex. the reactions are mixed.. :)
13:47:01 <shapr> S'funny... Here we are in the "Space Age" right? Seems like IM users are still in the Dark Age.
13:47:31 <chucky> I would think only sex would suffice
13:47:58 <shapr> Admittedly, I prefer sex over code. So maybe I'm not in the Space Age either.
13:52:00 <monochrom> What is dark-age about IM users?
13:53:57 <Spark> this is text conferencing :)
13:54:12 <Spark> its a superset of instant messaging
13:54:29 <shapr> right, exactly.
13:54:49 <Spark> msn is just a list of ex girlfriends anyway
13:55:32 <goron> I think subset fits better. As in text conferencing is a subset of IM.
13:55:48 <Spark> well neither are a set :)
13:56:09 <monochrom> They are categories.  You need functors...
13:56:22 <Spark> is category theory worth knowing about?
13:56:25 <goron> Well, yeah, lets talk about the true nature of Instant Messaging... 
13:56:26 <monochrom> No.
13:56:37 <Spark> my type theory lecturer dissed it in a major way
13:56:59 <goron> @webster something
13:56:59 <lambdabot> Sorry, I don't know the command "webster", try "lambdabot: @listcommands
13:57:03 <monochrom> My category theory teacher dissed type theory, but hey...
13:57:13 <shapr> heh
13:57:43 <Spark> i think i shall study 'advanced issues in object orientated programming' tonight
13:58:21 <goron> I don't think "dissed" is an English word (Webster thinks so).  
13:58:30 <shapr> I shall study dons' lambdabot patches and hopefully get them all added.
14:00:43 <monochrom> I risk leaking my true nature as a bot.  I mean I just took a sentence, reversed its sense, and said it out, without even checking the words used...
14:01:07 <monochrom> Oops wrong window.
14:01:17 <Spark> heh
14:01:22 <shapr> 'dis' is ebonics for "disrespected"
14:01:34 <Spark> fireworks outside
14:20:47 <goron> Ebonics
14:20:48 <goron>      n : a nonstandard form of American English spoken by some Black
14:20:48 <goron>          people in the United States syn: Black English, Black
14:20:49 <goron>          English Vernacular
14:21:45 <goron> Now the question is whether Spark is black. 
14:28:47 <goron> shapr: In Dutch we also have the word "dissen". 
14:37:04 <dash> if i have a list of type [Binding String Expr] or such and i want to map a function over the data wrapped in that type, is there a nice function for that or am I going to have to pattern-match?
14:38:18 <monochrom> It is a list, so you can use map.
14:39:19 <monochrom> Example.  map (\(Binding s _) -> s) (your list here)  will extract the strings and put them in a list in the original order.
14:39:44 <dash> Mmmmm this is true. 
14:39:56 <dash> so the answer is "yes, pattern matching"
14:42:33 <Etaoin> dash: there's also this:
14:42:37 <Etaoin> http://rafb.net/paste/results/N4PciS24.html
14:42:52 <dash> yeah
14:43:01 <dash> on second thought i want a zip sort of thing
14:44:29 * Oejet_ was fooled by the bot on #java  :-(
14:44:38 * dash thinks
14:45:56 <CosmicRay> hey dash
14:46:13 <CosmicRay> you wouldn't have any interest in maintaining a nice Python IMAP synchronizer, would you? :-)
14:50:45 <dash> CosmicRay: i work for a company that does already. >:D
14:51:04 <CosmicRay> really
14:51:08 <CosmicRay> what company?
14:51:17 <dash> http://divmod.com/
14:51:30 <CosmicRay> voip?
14:51:55 <CosmicRay> ah I see
14:52:04 <CosmicRay> not quite the same thing as offlineimap, but hey -- you'd be perfect! :-)
14:52:11 <CosmicRay> (I hope you saw the post to c.l.p)
14:52:25 <dash> it has been a long time since i have read c.l.p :)
14:52:59 <CosmicRay> bah
14:53:07 <CosmicRay> I'm trying to find someone to take over offlineimap
14:53:10 <CosmicRay> because I suck at it
14:53:12 <CosmicRay> because to me, it's done
14:53:23 <CosmicRay> it Just Works
14:53:57 <CosmicRay> huh.  Google served up this ad on my blog: "Spam Fitler for Domains.  Send email thru a Firewall Filter No Software. $9.95 entire Domain."
14:54:04 <CosmicRay> wtf is the point of spam-filtering my outbound mail?!
14:54:16 <CosmicRay> I'm not sending spam, and if I was, I wouldn't want it filtered.
14:54:42 <dash> it's to cut down on spam coming from zombie windows boxes in your net!
14:55:24 <CosmicRay> hah
14:56:07 <monochrom> It is a good rehearsal.  If your local filter lets a message through, there is good chance your correspondence's filter will let it through too.  And vice versa.  If a message can't get through, better know earlier than later.
14:56:15 <CosmicRay> haha
14:56:41 <dash> Hmm
14:56:42 <dash> installBindings bindings =  uncurry letExtend (unzip $ map (\(Binding n v) (n, v)) bindings)
14:57:32 <dash> wonder if i could do that better
14:58:34 <monochrom> map (\(Binding n v) -> letExtend n v) bindings
14:59:01 <dash> eh, no good
14:59:09 <dash> letExtend takes "names vals"
14:59:53 <monochrom> Ah. Nevermind.
15:02:13 <tic> sleep & LISP time.
15:23:58 <stepcut> suck! My program is crashing from stack overflow, not heap overflow :(
15:25:14 <dons> it happens to all of us :)
15:25:56 <dash> i think i am very confused
15:26:07 <stepcut> dash: oh ?
15:26:26 <dash> well, here is a type declaration
15:26:27 <dash> type ArnisEval = StateT ArnisState (ContT Val (Either EvalError Val))
15:26:32 <dash> hugs doesn't like it
15:26:48 <dash> saying: "ERROR "arnis.hs":16 - Illegal type "ContT Val (Either EvalError Val)" in constructor application
15:26:50 <dash> "
15:28:06 <dash> anybody got a clue on how ContT works? :)
15:38:22 <Janni> Hi.
15:40:58 <Oejet_> Hello, Janni.
15:41:38 <stepcut> lazy evaluation in ocaml is a *pain*
15:53:28 <monochrom> Quite.
15:53:49 <monochrom> Yes, to the point I made my own lazy list module.
15:53:55 <xerox> hi reffie ;)
15:53:58 <reffie> yo
16:06:24 <desrt> C has lazy evaluation abilities.  it is also a pain.
16:06:44 <desrt> well... actually it's not that bad
16:06:55 <desrt> there are even toolkits to help you
16:09:17 <shrimpx> well since ghc compiles to C, it obviously does, right? =)
16:13:20 <stepcut> monochrom: did your lazy list module have a lazy span ?
16:14:32 <stepcut> my lazy span has stack overflows :(
16:16:48 <monochrom> what does span do?
16:18:31 <stepcut> it takes a list and a predicate, and returns a pair of lists
16:18:58 <stepcut> hrm, this description is going down hill
16:18:59 <stepcut> hold on
16:19:26 <monochrom> I don't have span, takewhile, dropwhile.  I only have take and drop
16:20:00 <stepcut> hrm, but you do have a lazy take then ?
16:20:24 <monochrom> But I suppose if my take and drop don't overflow, my span-to-be won't either. :)
16:20:57 <stepcut> monochrom: well, if you make span from your existing take and drop, then that is true, but it will also be slower than doing it in one shot
16:22:30 <stepcut> span p xs is equivalent to (takeWhile p xs, dropWhile p xs)
16:22:49 <monochrom> my lazy list module makes use of ocaml's "lazy" and "force" operators.
16:26:06 <monochrom> http://www.cs.utoronto.ca/~trebla/lazyList.ml  and lazyList.mli  you can see what I did.
16:33:46 <stepcut> looks useful
16:34:44 <stepcut> for fun and profit, try to do a lazy, single-pass span that does not stack overflow
16:39:17 * stepcut ponders for a moment
16:39:22 <stepcut> maybe I just need a lazy reverse
16:39:58 <stepcut> hrm
16:40:04 <stepcut> maybe that is not a good idea after all 
16:40:27 * stepcut wavers back and forth
19:24:18 <TheHunter_> waheee!
19:45:42 <TheHunter_> part man part monkey, yaeh, that's me
20:34:56 <Spark> 97% chimp? :)
20:48:35 <TheHunter_> 100% chimp
21:07:34 <TheHunter_> morning themaximus
22:23:29 <dash> Mmmm, new exciting error messages
22:23:39 <dash> ERROR "arnis.hs":145 - Instances of (MonadError EvalError ArnisEval, MonadState ArnisState ArnisEval) required for definition of letMeaning
22:24:26 <dash> whatever can it mean
22:24:39 <dash> other than that i have reached too far into monad cleverness
22:25:08 <dash> http://ghostwheel.ddts.net/~washort/arnis.hs
22:37:55 <Etaoin> it means you're trying to use MonadError and MonadState stuff on types that don't have an instance defined for those classes, I guess?
22:42:33 <dash> well
22:42:53 <dash> what i've got is: "data ArnisEval a = StateT ArnisState (ContT Val (Either EvalError) a)
22:42:55 <dash> "
22:43:03 <dash> i don't know what else i need
22:47:35 <Etaoin> I think "data" is not what you want
22:47:57 <Etaoin> because that makes a new constructor StateT
22:48:05 <Etaoin> but I don't know what you do want
22:50:05 <dash> hrm.
22:50:13 * dash tries 'type' and 'newtype', for kicks.
22:51:00 <dash> mmmm nope
22:51:57 <dash> hmm. or yes
22:52:11 <dash> it changed the error message anyway
22:52:20 <dash> ERROR "arnis.hs":131 - Instance of MonadError EvalError (StateT ArnisState (ContT Val (Either EvalError))) required for definition of abstractionMeaning
22:55:08 <dash> ERROR "arnis.hs":131 - Instance of MonadError EvalError (StateT ArnisState (ContT Val (Either EvalError))) required for definition of abstractionMeaning
22:55:12 <dash> errk wrong button
22:59:27 <dash> anyway that confuses me because EvalError appears to be an instance of MonadError
