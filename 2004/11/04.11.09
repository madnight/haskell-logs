00:14:26 <Jan_w> hoi shapr
02:07:50 <musasabi> Attributes can be made very very nice with GADTs
02:45:35 <dons> juhp: you writing an emacs binding, perchance?
02:46:28 <juhp> dons: keybindings for yi you mean?
02:48:48 <dons> hmm. language is funny. emacs emulation for yi -- yeah
02:49:04 <dons> in the form of a key binding
02:49:45 <musasabi> Does yi have haskell syntax highlighting currently?
02:49:55 <juhp> dons: no time right now for hacking haskell unfortuntately ):
02:50:17 <juhp> hopefully later I'll have some more time to contribute something
02:50:29 <dons> ok. :)
02:50:45 <dons> musasabi: not yet. though we're getting close to that point
02:50:51 <dons> hopefully in a few days
02:51:01 <dons> i've got a scheme...
02:51:24 <dons> [insert evil laugh]
02:52:00 <dons> musasabi: you waiting for syn hl?
02:52:29 <dons> you don't use an editor not elem of [vi, emacs] do you?
02:52:50 <dons> I'm looking for more key bindings
02:53:29 <musasabi> dons: I am using emacs with vi emulation currently.
02:53:52 <musasabi> so yi looks quite promising for me.
02:54:01 <dons> oh. cool.
02:54:21 <musasabi> (the vim haskell-mode is not very nice, but I don't like emacs key-bindings)
02:54:29 <dons> no, i agree entirely
02:54:56 <dons> i've been forced to use vim-in-emacs for isabelle/proof general stuff, and it's not so much fun
02:55:03 <tuomov> so, is it going to be a full parse tree system, or something simpler?
02:55:28 <dons> for syn hl? real lexer, at least
02:56:06 <dons> probably using the lazy lexer library, because then user's can add their own lexer fragments in config files
02:58:36 <tuomov> parse trees would help proper autoindent a lot
02:58:51 <dons> for indent, I'm certainly going to use a parser
02:59:02 <dons> "We need real indenting"
02:59:17 <tuomov> writing nice autoindent code for jed is a mess
02:59:22 <dons> even ghc -ddump-parsed does a better job than some I've seen
02:59:30 <dons> same for vim
02:59:52 <dons> very painful writing a parser for a real language in a bizarre world like vim script
02:59:53 <tuomov> so often the standard modes have very poor autoindent support. another more complicated is bound to be buggy
03:00:26 <dons> yep.
03:01:34 <dons> I think this is one problem we're going to be able to solve really well
03:01:42 <tuomov> There's functions like goto_matching_paran, but there's no easy way to find the matching function/while/for/etc. for an 'end', for example
03:02:27 <tuomov> So my Lua mode finds it half of the time, because I'm too lazy to start writing a better parser in s-lang
03:02:54 <dons> goto_matching_paren looks like a [Token] traversal, whilst the latter examples are going to be easy with a syntax tree
03:03:01 <dons> s-lang, yikes
03:03:14 <tuomov> nicer than elisp :)
03:03:21 <dons> yeah!
03:04:32 <musasabi> elisp is not that bad
03:05:19 <dons> it's pretty weird compared to what we're used to in the 21st century
03:06:15 <tuomov> is the keybinding api how stable?
03:06:39 <tuomov> if I found the spirits to start hacking on a joe mode one day..
03:06:50 <dons> hmm. I think there will be one change, to keymap :: [Char] -> [Action]
03:06:59 <dons> but otherwise quite stable
03:07:27 <dons> by this time tomorrow I'll lock it down
03:08:21 <musasabi> how is mouse supported then?
03:08:43 <dons> we have 32 bit chars in Haskell ;)
03:09:25 <dons>  KEY_MOUSE   \631
03:11:15 <dons> haven't tried any mousey things yet though. patches welcome
03:11:33 <xkb> does it use a gui lib? yi
03:11:41 <dons> actually, I never use the mouse in ion. that's probably why
03:11:45 <xkb> or is it textbased
03:12:04 <dons> xkb: ncurses. a [insert-gui-lib] binding should be fairly easy though
03:12:18 <dons> it's on the todo list anyway
03:12:28 <xkb> ncurses is nice :)
03:12:33 <dons> we don't depend on very much of ncurses
03:13:46 <dons> well, i'm not sure if it is "nice" ;)
03:14:00 <xkb> hehe
03:14:09 <xkb> well it works quite nice for cli applications
03:14:20 <dons> yeah, sure
03:14:24 <xkb> eh make that terminal based or whatever you want to call it :D
03:14:41 <xkb> ncftp is still one of my favorite ftp clients
03:19:03 * musasabi will get a simple fltk interface ready one of these days..
03:25:14 <xkb> how does the type safe cast of dynamic work in haskell?
03:25:44 <xkb> in Clean its like check ( a :: Bool, arg) = (patternmatch)
03:26:01 <xkb> (patternmatch) was just an example, not a statement
03:26:23 <dons> which method, there are a few ways to do it in Haskell with Dynamic
03:26:39 <xkb> in general
03:27:28 <dons> you wrap an unsafeCoerce# with a check againt the TypeRep carried  by the value
03:27:31 <xkb> Im working on an idea for exception handling, using dynamics as "the carrying vehicle"
03:27:53 <dons> hmm. isn't that like dynamic exceptions?
03:28:11 <xkb> its turning out to be somewhat like it indeed
03:28:35 <dons> @type Control.Exception.throwDyn
03:28:37 <lambdabot> Control.Exception.throwDyn :: forall b exception.
03:28:37 <lambdabot> 			      (Data.Typeable.Typeable exception) =>
03:28:37 <lambdabot> 			      exception -> b
03:28:41 <xkb> having problems with the +, just as SPJ did.. so I guess this is another dead end
03:29:41 <dons> if you want to play with dynamics at the lowest level, there's an alternative Dynamic library in hs-plugins
03:29:44 <dons> it would be easy to hack
03:30:00 <xkb> Ok, Ill have a look at it
03:30:13 <dons> AltData.Dynamic
03:30:33 <dons> it's pretty much the same as the original library, but easier to modify
03:30:49 <dons> (and it works with dynamic linking -- that's why it exists)
03:35:19 <kosmikus> ghc-6.2.2-src.tar.bz2 on the ghc homepage has been modified -- anyone knows why?
03:36:23 <morbidi> @type enumFrom
03:36:24 <lambdabot> enumFrom :: forall a. (Enum a) => a -> [a]
03:36:51 <morbidi> @all
03:36:51 <lambdabot> Sorry, I don't know the command "all", try "lambdabot: @listcommands"
03:36:56 <morbidi> @type all
03:36:58 <lambdabot> all :: forall a. (a -> Bool) -> [a] -> Bool
03:41:16 <tuomov> I prefer curses programs to gui programs
03:41:51 <tuomov> switching to command line is so much more convenient then
03:42:02 <tuomov> I wouldn't mind graphical non-wimp programs running within the xterm, though...
04:01:02 <blackdog_> tuomov: surely as long as you can control everything with the keyboard in a natural way, graphical programs are ok?
04:02:51 <gfxmonk_com> howdy all, im having troubles getting haskell (winhugs to be precise) to recognise the wxhaskell import modules.. anyone up for helping a noob? ;)
04:04:39 <tuomov> graphics are cool. wimp is not.
04:04:46 <tuomov> I don't need those stupid widgets cluttering my screen.
04:29:13 * shapr yawns
04:29:17 <shapr> good morning #haskell!
04:29:32 <shapr> hoi KiMoS, hoe gaat het?
04:29:47 <KiMoS> goed  met jou?
04:29:53 <shapr> also good
04:30:09 <KiMoS> do u know you?  :)
04:30:11 <shapr> It's a beautiful cold day out there, I'm glad I'm inside.
04:30:15 <KiMoS> do i know u
04:30:18 <shapr> Yes, I definitely know me.
04:30:21 <KiMoS> yea it is
04:30:25 <shapr> I've known me for years!
04:30:26 <KiMoS> who are you?
04:30:34 <shapr> Hi KiMoS! I'm Shae Erisson.
04:30:38 <shapr> Who are you?
04:30:51 <KiMoS> philps moris
04:31:04 <KiMoS> :)
04:31:07 <shapr> Nice to meet you Philps!
04:31:19 <shapr> Are you learning Haskell?
04:31:22 <KiMoS> nice to meet u too
04:31:27 <KiMoS> yes 
04:31:34 <KiMoS> what about u
04:31:53 <shapr> I learned Haskell about three and a half years ago, and I use it as much as I can.
04:32:08 <KiMoS> you can help me then
04:32:09 <shapr> I really enjoy writing Haskell code.
04:32:14 <shapr> I hope so!
04:32:35 <shapr> Are you learning Haskell for work, school, or fun?
04:32:47 <KiMoS> where did u leanred thos dutch words?
04:33:16 <shapr> I have some Dutch friends. And I used to live with a Dutch girlfriend :-)
04:33:33 <KiMoS> good good
04:33:43 <shapr> She was from Nijmegen. I really like the strong rough G sound from there.
04:33:43 <KiMoS> where are u at ?
04:34:01 <KiMoS> i hate it
04:34:08 <shapr> I live in Boden, Sweden, about 800 kilometers north of Stockholm.
04:34:13 <shapr> Oh, where are you from?
04:34:19 <KiMoS> the hague
04:34:29 <shapr> Maybe you prefer the soft Flemish sound?
04:34:53 <earthy> ey, un hagenees!
04:35:06 <earthy> (his G is even harder than the Nijmegen version, probably ;))
04:35:06 <shapr> ah, Den Haag :-)
04:35:07 <KiMoS> jah
04:35:19 <shapr> hoi earthy, hoe gaat het?
04:35:33 <earthy> I'm totally uninspired today
04:35:34 <KiMoS> lol earthy
04:36:14 <KiMoS> yea my G is harder then the Nijmegen version
04:36:19 <shapr> wow, cool
04:37:01 <shapr> So, are you learning Haskell for work then?
04:37:10 <KiMoS> uni
04:37:17 <shapr> Are you doing international e-government with Haskell? :-)
04:37:20 <KiMoS> i have to do haskell for my master 
04:37:28 <shapr> Oh! That sounds like fun!
04:37:58 <KiMoS> not 
04:38:17 <KiMoS> too old to learn a new language
04:38:18 <shapr> Well, I really like programming, and I especially like programming with Haskell.
04:38:26 <shapr> Hah, really? How old are you?
04:38:34 <KiMoS> what do u think
04:38:38 <shapr> 24!
04:38:39 <tic> 12?
04:38:40 <KiMoS> im sure im older then u
04:38:41 <shapr> Is that right?
04:38:43 <earthy> me thinks he's 19
04:38:46 <earthy> or 20
04:38:51 <KiMoS> older
04:38:52 <shapr> I don't think you are older than me.
04:38:55 <tic> 68?
04:38:57 <shapr> But I could be wrong.
04:38:59 <earthy> I have to concur with shapr. :)
04:39:10 <KiMoS> 25
04:39:10 <earthy> I even doubt you're older than I am ;)
04:39:12 <earthy> exactly :)
04:39:15 <KiMoS> what about u
04:39:23 <earthy> that's not too old to be learning a new language
04:39:24 <shapr> I'm eight years older than you.
04:39:32 <earthy> man, I learned Python back when I was 25 ;P
04:39:39 <xkb> lol
04:39:46 <shapr> I started learning Haskell when I was 30.
04:39:50 <KiMoS> ohh im the smallist one in here
04:40:01 * earthy is at the halfwaypoint between kimos and shapr where it comes to age ;)
04:40:04 <KiMoS> and i thought im the oldist one 
04:40:10 <xkb> lol
04:40:12 <KiMoS> 29 ?
04:40:16 * earthy nods
04:40:29 * gfxmonk_com is possibly the youngest here then ;)
04:40:32 <KiMoS> where do u live 
04:40:37 <tic> gfxmonk_com, how old are you, then?
04:40:39 <earthy> though, given your dunglish it does seem that you have no real knack for languages. :)
04:40:40 <shapr> I still like to learn new programming languages.
04:40:41 <gfxmonk_com> 18
04:40:41 <tic> you know, 25 isn't old. :)
04:40:49 <tic> gfxmonk_com, seems so.
04:40:54 <earthy> gfxmonk: nah, you're not really the youngest...
04:40:55 <tic> shapr, white-space is pretty nifty.  
04:40:59 <GFX_Monk> ahh, better
04:41:03 <shapr> g'day GFX_Monk 
04:41:06 <earthy> istr someone 'round here that was 16
04:41:16 <GFX_Monk> g'day :D
04:41:18 <xkb> isnt boegel younger?
04:41:26 <shapr> Yes, at least one 16 year old, and one 17 year old here in #haskell.
04:41:29 <earthy> nah, I think he's in his early 20s
04:41:40 <earthy> he's doing a masters in belgium... that means >18
04:41:54 <shapr> GFX_Monk: I've never tried to use wxHaskell with Hugs, only with GHC.
04:42:01 <earthy> but, to get back to a question, I live in several places
04:42:12 <earthy> during the day I live in the office, which is in Utrecht
04:42:20 <GFX_Monk> well i have GHC as well, it's giving me the same problem
04:42:25 <tic> shapr, some in my class are going to be developing a Haskell IDE.  Heard anything from them?
04:42:31 <shapr> GFX_Monk: What's the problem?
04:42:33 <earthy> evenings and nights are divided between Nijmegen and The Hague. :)
04:42:38 <shapr> tic: yes, kolmodin et al
04:42:41 <GFX_Monk> it says it can't find the module, i think it may be because it's a .hi file (not .hs)
04:42:58 <KiMoS> lol earthy how are they devided ?
04:43:00 <earthy> is it even supposed to work with hug?
04:43:04 <tic> shapr, yah.
04:43:14 <shapr> tic: seen the website, though I don't remember the address at the moment.
04:43:18 <earthy> kimos: I spend one to two nights a week in The Hagua
04:43:20 <GFX_Monk> not sure, but the same happens with ghc
04:43:22 <earthy> Hague even
04:43:34 <xkb> earthy ah.. im at Nijmegen 2.. but you allready know that I think
04:43:35 <shapr> KiMoS: can I point you to some learning Haskell webpages?
04:43:37 <tic> shapr, d3proj.dyndns.org:8080
04:43:41 <earthy> xkb: yes, I did. :)
04:43:46 <KiMoS> what do u do there earth
04:43:55 <earthy> my gf lives in The Hague. currently. :)
04:44:07 <earthy> we're moving in with eachother an house we recently bought in Utrecht
04:44:10 <earthy> +in
04:44:15 <xkb> halfway :D
04:44:17 <earthy> -n
04:44:31 <earthy> xkb: indeedy. and a 15 minute walk from my office :)
04:44:34 <KiMoS> sharpr  no not now im working on something else
04:44:40 <KiMoS> you bought a house?
04:44:41 <xkb> earthy, nice :D
04:44:47 <xkb> nice place 2, Utrecht
04:44:53 <xkb> I studied there
04:44:56 * earthy happy as a clam :)
04:44:57 <KiMoS> full with students
04:45:12 <shapr> KiMoS: ok, when you want to read about Haskell, I can give you some good urls and a nice introduction to the Haskell style of programming.
04:45:13 <xkb> lived near Overvecht
04:45:25 <earthy> we're going to live in Rijnsweerd...
04:45:27 <shapr> GFX_Monk: what exactly is the error you're getting?
04:45:57 <KiMoS> never heard of it  :)
04:45:58 <tuomov> 25 is practically dead and buried
04:46:01 * tuomov 's 25
04:46:04 <xkb> lol
04:46:14 <tuomov> 30 is the final doom's day
04:46:15 <xkb> hmm.. then this must be a zombie channel
04:46:23 * shapr lurches 
04:46:29 <KiMoS> shapr give me the urls ill add them to my fev list
04:46:35 <shapr> KiMoS: ok!
04:46:47 <GFX_Monk> ok, now i feel dumb :|
04:47:04 <GFX_Monk> i just ran it to see what message it gives and suddenly it works O_O
04:47:10 <shapr> KiMoS: These two are good to start with - http://www.haskell.org/learning.html http://www.haskell.org/hawiki/HaskellDemo 
04:47:30 <shapr> The "Yet Another Haskell Tutorial" is nice if you don't want to buy a book.
04:47:55 <KiMoS> i was planning to buy the craft bla bla book
04:48:04 <shapr> Haskell's style of programming is called "purely functional" and it's really neat! I think it's easier to maintain than Object Oriented Programming.
04:48:27 <shapr> But it's possible that the purely functional style just fits my head better.
04:48:44 <shapr> GFX_Monk: we're so good we fixed it with telekinesis!
04:48:48 <earthy> gfx_monk: daan just stated wxhaskell isn't even supposed to work with hugs
04:49:00 <shapr> Is daan in the same room with you?
04:49:22 <GFX_Monk> lol you folks are magic ;)
04:49:29 <earthy> shapr: he was just now
04:49:58 <shapr> He's a cool guy. I guess he's too productive to show up on IRC :-)
04:49:58 <earthy> (btw, the reason hugs and wxhaskell don't work together is due to hugs not fully supporting the haskell ffi standard)
04:50:03 * earthy nods ;)
04:50:19 <xkb> wx works with ghci
04:50:20 <musasabi> How does parsec handle user state when backtracking?
04:50:23 <GFX_Monk> whats the ffi?
04:50:30 <earthy> foreign function interfac
04:50:32 <earthy> +e
04:50:40 <GFX_Monk> ahh
04:50:43 <earthy> musasabi: why should it?
04:50:59 <earthy> what state would you want to keep while parsing?
04:51:10 <musasabi> earthy: symbol table.
04:51:15 <earthy> (that is not undone in the backtracking)
04:51:35 <musasabi> I want to have it undone if a try inside it was modified fails.
04:51:40 <earthy> the symbol table changes done in the part you're backtracking over need to be undone
04:52:02 <musasabi> so is it done automatically or should I do it by hand?
04:52:52 <GFX_Monk> oops, i think i had errors because i copied the includes over to the hugs directory, but forgot to copy them to ghc
04:52:55 <GFX_Monk> :sheepish:
04:52:59 <earthy> I think, given that you are dealing with pure datastructures, the undoing is automatic
04:53:21 <musasabi> thanks
04:56:38 * shapr bounces cheerfully
05:00:01 <shapr> hoi boegel 
05:00:12 <boegel> hello #haskell (and shapr)
05:00:31 <boegel> @seen maihem
05:00:32 <lambdabot> maihem is in #haskell.
05:00:36 <earthy> boegel, just for reference, how old are ou?
05:00:38 <earthy> +Y
05:00:55 <boegel> earthy, 21
05:01:06 * earthy nods ;)
05:01:09 <boegel> why ? building statistics of #haskell ?
05:01:16 <earthy> nope.
05:01:26 <earthy> just checking my guesstimate
05:01:35 <earthy> someone was claiming to be the oldest present at 25
05:01:45 <earthy> someother was claiming to be the youngest at 18
05:01:58 <GFX_Monk> me ;)
05:02:03 <earthy> then people mentioned you as possibly younger...
05:02:12 <GFX_Monk> so am i still winning then ? ;)
05:02:14 <boegel> were they right ? (is ' were' correct ?)
05:02:24 <earthy> no (and yes)
05:04:46 <boegel> earthy, who guessed me younger ? am I such a screw-up ? :)
05:04:58 <GFX_Monk> lol
05:05:01 * earthy grins
05:05:14 * earthy discretely refuses to divulge that information :P
05:05:22 * boegel gets his stick
05:06:26 * boegel asks earthy again, with his stick ready is his left hand...
05:06:28 * Jan_w rehashes
05:07:20 <GFX_Monk> can't you just scroll up, earthy?
05:08:19 <GFX_Monk> i have a quick haskell question, what does := do?
05:08:26 <GFX_Monk> as in..
05:08:27 <GFX_Monk> do f    <- frame    [text := "Hello!"]
05:08:44 <earthy> this is wxHaskell code, right?
05:08:48 <GFX_Monk> yeah
05:09:04 <GFX_Monk> its not in regular haskell then?
05:10:15 <earthy> nope. they are from Graphics.UI.WX.Attributes
05:10:22 * boegel is forced to hit earthy with his stick, and prepares a bigger one, with rusty nails on it
05:10:36 <GFX_Monk> ahh ok thanks
05:10:38 <earthy> sticks and stones may hurt my bones but IRC never will :P
05:10:58 * earthy has to protect the innocent keyboard extensions :P
05:11:04 <GFX_Monk> dammit i can't read .hi files :(
05:11:41 <earthy> indeed, you can't
05:11:52 <earthy> http://wxhaskell.sourceforge.net/doc/
05:11:58 <shapr> You need my special Haskell glasses! For only three small payments of 99 euro, you too can read .hi files!
05:12:19 <GFX_Monk> lol
05:12:23 <GFX_Monk> thanks earthy
05:13:30 * boegel hates it he has to wait 1.5 hours ...
05:13:41 <shapr> What are you waiting for?
05:14:00 <GFX_Monk> the apcoloypse? O_O
05:14:28 <boegel> we'll, there's a Phd defense at 16h, but I'm kinda stuck here now, because it's 45min to my home, so it's not worth it to go back there
05:19:32 <earthy> so go code something fun
05:19:55 <shapr> yes! code!
05:20:06 <shapr> I'd rather be hacking on Flippi right now.
05:20:22 <shapr> I want to release the first version of Fermat's Last Margin
05:21:44 <boegel> http://studwww.ugent.be/~kehoste/thesisPublic/website/08_11_2004/2.png
05:22:08 <boegel> does anybody see cirles in this image ? I mean, in the colors ?
05:22:42 <boegel> because on this screen here, the colors aren't right, and I didn't have that problem at home///
05:22:45 <shapr> looks like a black&white picture of a pokemon to me.
05:22:48 <boegel> s/////...
05:23:22 <boegel> shapr, you don't see the boundary between two shades of gray ?
05:23:29 <shapr> http://www.cse.unsw.edu.au/~dons/yi.html
05:23:55 <shapr> the sharp edges look a bit ragged after close inspection, but that's all
05:24:16 <boegel> okay, it's just a stupid screen then here ;)
05:24:23 <GFX_Monk> i can see a bit of colour ringing :|
05:24:27 <shapr> for example, the border between the right ear and the head is a tiny bit gritty
05:24:33 <GFX_Monk> nothing too noticeable though
05:24:53 <shapr> I don't see that at all... but my screen is 24-bit color and 1280x1024
05:25:14 <xkb> is darcs cgi also written in haskell?
05:25:26 <shapr> nah, it's perl I think
05:25:27 <GFX_Monk> mine's 32 O_O
05:25:27 <boegel> shapr, this screen is 32bit color, so that's not the problem...
05:25:51 <shapr> xkb: there are two darcs cgi, one is haskell, one is perl
05:25:59 <boegel> GFX_Monk, do you see anything strange on the image ?
05:27:25 <earthy> seems to be 2 light sources
05:27:47 <maihem> Hi boegel 
05:28:01 <earthy> with a slightly weird reflection on the `mouth'
05:29:04 <boegel> earthy, idd, there are two light sources
05:29:13 <boegel> earthy, which strange reflection
05:29:17 <boegel> hi maihem !
05:29:28 <earthy> boegel: reflection from the shadow
05:29:39 <GFX_Monk> i guess its not anything particularly strange, i was just looking for bands ;)
05:29:49 <boegel> how did you run your ratracer program for the 1024x1024 scene ? ghc or ghci ?
05:30:08 <maihem> ghc -O2
05:30:31 <earthy> there does seem to be some colorbleed though
05:30:38 <boegel> earthy, I think that's normal... it shows that my shadows are working ok now (finally)
05:30:39 <earthy> on the internal screen in my mac it has a bluish hue
05:30:55 <earthy> on the SUN screen it has a somewhat greenish hue
05:31:08 <earthy> in the fade from the highlight to the neutral gray
05:31:30 <earthy> (not that these are prefectly colorcalibrated)
05:32:04 <boegel> earthy, I think that your eyes playing with your head :) it's not possible to find green or blue values in the image... every RGB value is (x,x,x), so a shade of gray
05:32:19 <boegel> maihem, your scene takes 40 seconds for me (1024x768)
05:32:29 <boegel> without any optimalisation though :)
05:32:31 <maihem> probably different gamma for the three channels on the monitor
05:32:44 <earthy> boegel: this may well be due to the color-correction in the colorprofiles for these screens ;)
05:32:48 <maihem> good, and yuo have shadows. I expect a similar result when I've done shadows
05:33:05 <boegel> maihem, I'm pretty sure I can speed up things...
05:33:15 <boegel> I think I can get it to 20sec
05:33:19 <boegel> at least
05:33:31 <maihem> BTW, my ambient is definitately correct, checked it in the GIMP
05:34:07 <boegel> maihem, I think I add the ambient component to my background as well, that's probably the reason :)
05:34:19 <maihem> heh :)
05:36:48 <boegel> I'm planning to do perlin noise next... it looks really cool :)
05:38:52 * shapr uses his copy protection +3 on xerox 
05:39:01 * xerox cries
05:39:16 * shapr gives a box of toner cookies to xerox 
05:39:25 * xerox : <<grrrr...>>
05:39:58 <shapr> All the printers and copiers I used long ago required lots of toner.
05:40:24 <shapr> too bad they put it in nice sealed cartridges nowadays, it's a great toy.
05:40:49 <boegel> shapr, toner as a toy ?
05:42:12 <earthy> the stuff is black, clingy and gets everywhere...
05:42:20 <shapr> yes, exactly!
05:42:44 <shapr> concealed packages of toner are wonderful office warfare weapons.
05:42:59 <shapr> greetings karingo, how's code?
05:43:28 <karingo> Aging.
05:43:41 <shapr> How many people here make notes on their research papers?
05:45:49 <boegel> shapr, why shouldn't you ?
05:46:01 <shapr> shouldn't what?
05:46:58 <boegel> make notes...
05:47:41 <shapr> oh, I think you *should*
05:47:48 <shapr> I'm just wondering who actually *does*
05:48:05 <shapr> I'm looking for alpha testers for Fermat's Last Margin
05:48:14 <xerox> what is it?
05:48:39 <shapr> you know the story of Fermat's Last Theorem?
05:48:47 <xerox> "the story", no
05:49:10 <shapr> well, you know why the theorem is such a big deal?
05:49:11 <boegel> does Haskell provide a function that generates random numbers ?
05:49:11 <xerox> just the demonstration..
05:49:16 * xerox hides
05:49:38 * boegel found xerox already " There you are !" 
05:49:40 <Philippa> boegel: no, and it can't possibly do so. *Pseudo*random numbers... :-)
05:49:49 <shapr> Fermat wrote in the margin of a book "I've thought of a neat proof for this theorem, but this margin is too small to contain the proof"
05:49:59 <shapr> but he never wrote down the proof
05:50:03 <xerox> ouch
05:50:05 <GFX_Monk> lol
05:50:07 <boegel> Philippa, it's +always_ pseudo random on a computer :)
05:50:33 <Philippa> roll on quantum computing :-)
05:50:36 <GFX_Monk> what about if you get it from real sources (liike background static in a microphone?)
05:50:47 <boegel> can you show me the way to such a function in the Prelude or something like that ?
05:50:55 <maihem> That's merely unpredictable
05:50:58 <shapr> so it's been called Fermat's Last Theorem, since no one could do the proof, but everyone believed that Fermat really did figure it out.
05:51:10 <GFX_Monk> lol
05:51:14 <Philippa> GFX_Monk: then it's not the computer providing it
05:51:32 <GFX_Monk> true..
05:51:39 <xerox> what a .. !
05:51:42 <GFX_Monk> but does it matter who provides it?
05:51:45 <Philippa> boegel: sadly no, and I wouldn't think it's in the prelude, though maybe the standard libs
05:51:50 <shapr> here's the story - http://www-gap.dcs.st-and.ac.uk/~history/HistTopics/Fermat's_last_theorem.html
05:51:55 <boegel> shapr, haven't they found the proof yet ? I heard that if someone could prove that the theorem is false, it would mean a disaster for mathematics
05:51:59 <bringert> Philippa: well, what if you have random number generation hardware in the hardware?
05:52:08 <bringert> surely that could count as part of the computer?
05:52:12 <Philippa> GFX_Monk: to an extent, yes. If you can keep IO out of the equation, certain things're easier
05:52:21 <Philippa> bringert: for what value of "computer"?
05:52:24 <bringert> :)
05:52:29 <GFX_Monk> lol
05:52:56 <boegel> nobdoy knows about a pseudo-random function in Haskell ?
05:53:15 <GFX_Monk> nope
05:53:18 <shapr> boegel: System.Random
05:53:26 <GFX_Monk> you want it for ints, or floats?
05:53:33 <boegel> http://astronomy.swin.edu.au/~pbourke/texture/perlin/
05:53:43 <boegel> GFX_Monk, float between 0 and 1
05:53:48 <xerox> divide!
05:54:12 <GFX_Monk> ahh thought so
05:54:26 <GFX_Monk> its just that my friend sent me one he made this very day, but its just for ints
05:54:44 <boegel> woops, I pasted the wrong URL :)
05:54:46 <GFX_Monk> its probably not very random though, i'm currently writing a function to try and prove such ;)
05:54:51 <boegel> http://www.informatik.uni-freiburg.de/~thiemann/haskell/haskell98-library-html/random.html
05:55:10 <bringert> Prelude System.Random> (randomIO :: IO Double) >>= print
05:55:11 <bringert> 0.8750168202386743
05:55:32 <boegel> GFX_Monk, you can easliy use that to generate random float's... like xerox said: divide !
05:55:36 <bringert> if being in the IO monad is ok, that's probably the easiest
05:56:07 <GFX_Monk> mm true, but i doubt its terribly random anyways
05:56:15 <boegel> ;)
05:56:32 <boegel> bringert, I don't get the syntax of what you're showing me...
05:57:23 <bringert> @type System.Random.randomIO
05:57:24 <lambdabot> System.Random.randomIO :: forall a.
05:57:24 <lambdabot> 			  (System.Random.Random a) =>
05:57:24 <lambdabot> 			  IO a
05:57:56 <bringert> randomIO gives you a random number of any type that has an instance of the Random class
05:58:10 <GFX_Monk> theres a random class? cool :D
05:58:24 <bringert> (randomIO :: IO Double) explicitly says that the result should be a Double
05:58:40 <boegel> bringert, oh I see, so you need to specify which type you want... but then I can get values higher than 1, right ?
05:59:33 <bringert> boegel: you need randomRIO for that
05:59:36 <bringert> Prelude System.Random> (randomRIO (0,10) :: IO Double) >>= print
05:59:36 <bringert> 4.0502032402554065
06:00:15 <bringert> well, you don't always have to explicitly give the type that you want, only if the compiler can't figure it out
06:00:56 <boegel> bringert, I need a list of random values, so I think randoms would work better for me
06:01:00 <boegel> @type randoms
06:01:01 <lambdabot> bzzt
06:01:11 <bringert> @type System.Random.randoms
06:01:12 <lambdabot> System.Random.randoms :: forall a g.
06:01:12 <lambdabot> 			 (System.Random.Random a, System.Random.RandomGen g) =>
06:01:12 <lambdabot> 			 g -> [a]
06:01:13 <boegel> @index randoms
06:01:13 <lambdabot> System.Random,Random
06:01:42 <boegel> let's give it a shot !
06:13:41 <boegel> damn, I can't install GHC here :(
06:14:00 <boegel> stupid pc's :(
06:14:35 <boegel> @eval take 5 (randoms StdGen :: [Float])
06:14:35 <lambdabot> (line 1, column 25):
06:14:35 <lambdabot> unexpected ":"
06:14:35 <lambdabot> expecting simple term
06:14:47 <boegel> it was worth a try :P
06:15:05 <boegel> @type randoms StdGen
06:15:06 <lambdabot> bzzt
06:15:26 <boegel> @type System.Random.randoms System.Random.StdGen
06:15:27 <lambdabot> bzzt
06:16:46 <maihem> Boegel, I'm having a problem with shadows. The surface that has just been struck is occluding the light sources for some pixels. I can just refuse to occlude on that object (because if I add a transparent surface feature I want to occlude on the *other* side of the object). I think I need to set a minimum strike distance larger than 0. What are you doing?
06:16:51 * boegel cries :'(
06:17:57 * maihem thwacks the IEEE for floating point numbers
06:19:07 <boegel> maihem, I use a factor to correct it... 0.05 or so
06:19:17 <boegel> that's just due to imprecision
06:19:48 <maihem> what, just refuse to acknowledge strikes closer than 0.05? yep, just having a go now...
06:21:54 <boegel> maihem, yes, that's right... you shouldnt be able to notice it when there i a intersection within that distance...
06:22:14 <maihem> woohoo! 10s compile, 24s render: http://maihem.org/images/out.png
06:24:39 <boegel> nice :)
06:24:47 <boegel> raytracing is fun, isn't it :P
06:25:03 <maihem> yes, more so raytracing with haskell :)
06:25:13 <boegel> you should try my scene... the pokemon thingie
06:25:33 <maihem> what are the locations and sizes of the spheres?
06:25:33 <earthy> btw, maihem, if you are totally fed up with IEEE floats, there *are* exact real arithmetic packages out there
06:26:04 <boegel> maihem, I'll post them on the HaskellIrc wiki
06:26:13 <maihem> I'll have to put up with the floats, for the speed. but thanks for the suggestion
06:26:13 <boegel> @wiki HaskellIrcPastePage
06:26:14 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
06:27:56 <boegel> maihem, posted it on the wiki
06:28:00 <earthy> well, you don't really have to put up with floats... you could do a fixed-point lib...
06:31:36 <boegel> maihem, are you testing it now ? because I have to go... get me a nice seat for the Phd defense
06:32:54 <maihem> testing...
06:35:25 <maihem> http://maihem.org/images/outface.png
06:35:39 <maihem> My lighting obviously takes different parameters
06:35:59 <KiMoS> what is $$  ?
06:36:42 <shapr> money?
06:37:02 <KiMoS> nah 
06:37:05 * shapr grins
06:37:06 <KiMoS> :)
06:37:45 <boegel> nice, I'm out now
06:37:45 <shapr> oh hey, I just thought of a way to sort of do name-based virtual hosting for SMTP
06:37:48 <boegel> bye !
06:37:57 <maihem> seeya later
06:38:11 <shapr> cya boegel 
06:42:29 <edwinb> Is there a way, in ghc, to pass arbitrary options through to the linker?
06:43:52 <edwinb> Oh, ignore that, I've found it...
06:46:47 <shapr> hiya edwinb, how was the epigram weekend?
06:47:05 <edwinb> Er, we didn't get much work done. But at least we had a meeting...
06:48:29 <edwinb> Basically it was about getting people to volunteer to do stuff.
06:48:41 <edwinb> Incidentally, Conor's grant got funded. Hoorah!
06:48:54 <edwinb> Not that that helps me in the short term, but it's still good!
06:49:05 <shapr> yay!
06:51:09 <Janni> Hi.
06:52:46 <bringert> shapr: ulfn just got a unicycle as a gift after presenting his licenciate thesis
06:54:09 <Janni> Can I use ghci like runhugs somehow? I want to run the program in vim by :make. Compiling takes too long and I don't want to type "main<LF>" every time...
06:56:33 <shapr> bringert: awesome!
06:56:49 <shapr> bringert: did he get a coker?
06:57:10 * shapr checks the unicycling forums
06:57:37 <shapr> hiya Janni!
06:59:14 <shapr> bringert: maybe he got a KH20 Trials? or KH20 Freestyle? I'm going to bet he got a KH20 Trials, from what I've read about Ulf
07:00:05 <shapr> bringert: er, wait, Ulf Norell?
07:02:23 <earthy> Janni: yes, you can
07:02:46 <KiMoS> so what is $$ exactly?
07:03:00 <KiMoS> and why is it 5 ?
07:03:39 * shapr bounces around
07:03:52 <shapr> bringert: which ulf? norell or karlsson?
07:03:56 * shapr bounces impatiently
07:04:02 <shapr> I'm about to go unicycling myself.
07:05:54 <shapr> yes, must be Ulf Norell
07:07:25 <shapr> bringert: does Ulf unicycle already? or is this is something of a joke gift?
07:11:52 <bringert> ulf norell
07:12:02 <kristnjov> who is this ulf norell guy?
07:12:02 <shapr> does he already know how?
07:12:12 <bringert> he said "it seems to be missing one wheel" after unpacking it, so I guess he doesn't
07:12:15 <shapr> Seems there are quite a few unicyclists in Gothenburg.
07:12:47 <jadrian> how do you break in a unicycle?
07:12:52 <shapr> I'd love to go unicycling with Ulf Karlsson, I'm sure I'd learn a lot.
07:13:40 <shapr> jadrian: oil the seat post, tighten all the bolts, check that the spokes are evenly tightened, even out the bearing holders
07:14:19 <shapr> depending on the type of unicycle, change the wheel pressure, possibly install a new tire, new brakes, new seat.
07:15:08 <bringert> if you change the seat and the tire, there's not much left of your original unicycle, is there?
07:15:23 <bringert> :-P
07:15:28 <shapr> well, the frame is a very important part.
07:15:41 <shapr> my first uni was a 20" Dodger training uni, and bits of it kept breaking off
07:15:54 <shapr> but then, it was designed for 75kilos or less, and I was 107 kilos.
07:15:58 <jadrian> my question was how do you "break" though... in the sense of using breaks, slowing down...
07:15:59 <bringert> :)
07:16:27 <shapr> jadrian: oh, I thought you meant "break in" as in "get a uni ready for serious riding"
07:16:32 <jadrian> no no :)
07:17:01 <shapr> My new mountain unicycle handles any amount of weight, drops, hops, falls, flying through the air, falling through trees, etc with no problem.
07:17:43 <jadrian> errr not that kind of break also lol
07:17:55 <shapr> jadrian: with brakes - http://www.unicycle.com/Shopping/shopexd.asp?id=466
07:18:19 <jadrian> nice
07:18:40 <shapr> I was definitely limited by my hardware with the 20" uni. Now I'm only limited by my own skill.
07:18:48 <jadrian> :)
07:19:10 <shapr> see me hop on my uni - http://www.scannedinavian.com/images/uni-hop.jpg
07:19:25 <kristnjov> doesn't it hurt in your scrotum if you jump with a unicycle in the mountains?
07:19:37 <jadrian> kristnjov: was just about to ask that
07:19:40 <shapr> no, because you don't land on your testicles
07:19:45 <shapr> that would not be fun
07:19:45 <kristnjov> sure you do
07:20:01 <dash> i would imagine you land on your feet
07:20:02 <shapr> really, I don't
07:20:09 <tromp> what if your feet lose contact with the pedals?
07:20:16 <kristnjov> how old are you shapr?
07:20:30 <shapr> There's hopping and jumping. Hopping means the seat is under you, jumping means seat out in front or seat out behind. Jumping gives a lot more height.
07:20:53 <tromp> do you know any unicyclists using SPD pedals?
07:21:03 <shapr> My pedals are concave aluminum alloy spike covered anti-mud mountainbiking models
07:21:19 <kristnjov> wow.
07:21:32 <shapr> I have never slipped off the pedals, it's even very hard to adjust my feet on them while riding.
07:21:35 <kristnjov> mine are concave aluminium alloy spike covered anti-mud non-mountainbiking models
07:21:43 <shapr> kristnjov: I am thirty three years old. How old are you?
07:21:47 <kristnjov> i'm 18
07:22:04 <shapr> Have you tried unicycling? =)
07:22:09 <shapr> tromp: what's SPD?
07:22:53 <shapr> I'm using the snafu pedals that come with the stock KH24
07:23:42 <shapr> I dearly love my Alex DX32 rim, but I can barely wait till the 65mm large marge rim comes in 24"
07:24:37 <shapr> A 65mm rim is a perfect rim for any amount of snow, sand, mud, or any loose terrain.
07:26:05 <tromp> those click-in pedals
07:26:24 <shapr> oh, I wouldn't use those.
07:26:52 <tromp> any1 else crazy enough to do so?
07:27:00 <shapr> There are one or two professional unicyclists who do use pedals that attach to your feet, but they're the only ones I've heard of.
07:27:17 <tromp> that shows extreme confidence:)
07:27:22 <shapr> Truly.
07:27:37 <shapr> In my opinion, a unicycle is safer than a bike, because you can always just get off.
07:27:48 <tromp> either that, or sheer stupidity:)
07:27:59 <shapr> You pick your feet up, the unicycle runs off, and you put your feet down.
07:28:10 <jadrian> shapr: but easier to get off can be bad too :)
07:28:21 <tuomov> you might not want to do that from high speed..
07:28:37 <tromp> what's your top speed?
07:28:54 <shapr> Probably a fast jog.
07:29:20 <shapr> Since unis are always direct-drive, top speed is much lower than bicycles.
07:29:33 <tromp> wonder what the world record is:)
07:29:48 <shapr> On the good side, since you're always pedaling, you end up with a lot more leg strength, so I can pass just about any bike when going uphill.
07:30:03 <tromp> can't you use a speedhub?
07:30:11 <shapr> My uphill speed is nearly as fast as my downhill speed.
07:30:12 <tromp> like Rohloff makes, 14 gears
07:30:23 <tuomov> which reminds me, I should try find a suitable allen wrench to tighten my breaks..
07:30:33 <tuomov> s/break/brake/
07:30:43 <shapr> tuomov: I have an excellent collection of allen wrenches, too bad I can't DCC some to you.
07:31:20 <shapr> Geared unicycles are just starting to happen. Several designs exist, and three companies claim they'll start mass production this year or next.
07:32:44 <shapr> From what I've heard, geared unis aren't as tough or climate-proof as direct-drive. I've uni'd in ankle-deep water with no problem, I wonder if geared hubs will deal with that.
07:33:02 <shapr> Man, after all this talking, I gotta go ride!
07:33:05 * shapr disappears
07:44:03 <arjanb> hey HET2
07:52:46 <HET2> hi
08:02:19 <Janni> earthy: How (can I make ghci invoke "main :: IO ()"?
08:03:57 <bringert> Janni: just call main from the ghci prompt
08:04:55 <Janni> Of course, but I want to run the program from vim with "make" and don't want to type in main everytime
08:07:25 <bringert> Simon Marlow wrote a runghc program that does that
08:08:50 <bringert> a hacky solution would be "echo main | ghci MyProg.hs"
08:09:06 <bringert> I think runghc is in ghc 6.3
08:09:26 <earthy> http://a5.repetae.net/~frederik/hs-interp
08:09:48 <earthy> but also read http://www.mail-archive.com/haskell-cafe@haskell.org/msg05537.html
08:10:07 <Janni> thx
08:11:00 <earthy> The OBFUSCATION-THROUGH-GRATUITOUS-PREPROCESSOR-ABUSE Project ...
08:11:31 <earthy> author{Simon Peyton Jones \and Alastair Reid
08:11:33 <earthy> hmmm. :)
09:02:17 <Oejet___> Hello, #haskell.
09:16:04 <shapr> man I love unicycling!
09:16:54 * shapr bounces around  ecstatically
09:16:58 <shapr> w00h00!
09:23:05 <Spark> shall i spend 46 quid on a ticket to a rave :o
09:23:13 <Spark> http://www.livejournal.com/users/snarfc0re/26700.html#cutid1
09:23:43 <shapr> dude, you could buy TaPL for less than that.
09:24:21 <shapr> greetz wilx 
09:24:57 <Spark> i have tapl :)
09:25:07 <Spark> this is just the ticket too
09:25:11 <Spark> fuck knows how much ill spend inside
09:31:55 <musasabi> Why cannot GHC derive Enum for newtypes like newtype Foo = Foo Int ?
09:32:27 <shapr> good question.
09:32:35 <shapr> um, can't it do that with 6.3?
09:32:58 <shapr> deriving was changed in either 6.2.2 or 6.3 to do extra cool stuff, and I think it does that now.
09:33:02 <musasabi> does not appear to work with 6.3.20041106
09:33:03 <shapr> or will.
09:33:09 <shapr> ok, then maybe it was something else.
09:33:25 <shapr> maybe I'm thinking of deriving Enum from type Age = Int
09:33:41 <shapr> Have you looked at Ulf Norell's deriving TH code?
09:35:53 <Igloo> ghc is fine deriving the above Enum for me
09:36:07 <Igloo> deriving for type doesn't make any sense, though
09:37:14 <musasabi> yes, the newtype is the critical one..
09:38:48 <wilx> Hi shapr.
09:39:50 <wilx> Hmm, call me a beginner but isn't newtype something that constructs a _new_ type without any relation to the old type? :)
09:40:40 <wilx> Hence the lack of deriving keyword...?
09:41:58 <shapr> I can never remember the differences between type, newtype, and data
09:42:00 <Igloo> Oh, actually, it works in 6.2.2 but not CVS for me
09:42:02 <shapr> so I'm not the one to ask.
09:42:07 <shapr> hey basti_, ltns
09:42:09 <shapr> how's code?
09:42:29 <basti_> mmmh more like, category theory at the moment
09:42:49 <Igloo> Ah, but I have an old ghc-cvs
09:43:23 <shapr> Igloo: btw, your ghc6 and ghc-cvs packages have really made my life easier, thanks!
09:43:34 <shapr> where do I send the ebeer vouchers? :-)
09:44:24 <shapr> oh, I remember.. the CD wishlist
09:44:37 <musasabi> wilx: well it is usually unrelated (as cannot be mixed) but it usually shares many traits.
09:45:09 <shapr> I am sometimes surprised that debian developers don't keep a a wishlist on their debian homepages for people who want to thank them.
09:45:23 <wilx> I see.
09:46:11 <Igloo> That would seem a bit cheeky to me
09:46:37 <Igloo> And thanks, I'm glad they're useful  :-)
09:46:38 <shapr> Well, how else can people express their appreciation?
09:47:39 <shapr> In my experience, people are more willing to donate a few quid rather than a few hours.
09:47:42 <shapr> hiya SyntaxNinja!
09:47:42 <Igloo> Yo Syn
09:47:44 * shapr hugs SyntaxNinja 
09:47:55 <SyntaxNinja> hihi shapr, Igloo
09:49:37 <Igloo> Syn: Does http://www.haskell.org/pipermail/cvs-all/2004-November/036296.html mean the haskell-cabal Debian package should be removed?
09:49:38 <sarah> ahoi
09:49:40 <shapr> Guten abend sarah 
09:50:15 <sarah> oh, deutsch?
09:50:55 <shapr> no, but I can pretend for minutes at a time.
09:51:01 <shapr> ich habe keine ahnung!
09:51:29 <sarah> schade :)
09:51:48 <shapr> Are you learning Haskell?
09:52:05 <sarah> i try, but im desperated right now ^^
09:52:11 <basti_> =)
09:52:16 <basti_> where's the problem?
09:52:17 <sarah> u aint a haskell expert, are you?
09:52:24 <sarah> many probs :)
09:52:30 <sarah> i need to slove some tasks
09:52:38 <sarah> and ive no plan about anything xD
09:52:38 <shapr> I am not an expert, no. But if you ask your questions, someone here might be able to help.
09:52:42 <basti_> we do everything but homework questions.
09:53:12 <shapr> As for homework, we can't give answers, but we can give small hints.
09:53:27 <shapr> At least, I think that's ethically okay.
09:53:55 <sarah> lol
09:54:05 <sarah> codex, hm?
09:54:10 <shapr> ?
09:54:11 <basti_> om.
09:54:11 <tuomov> the problem with donations is that there's no globally working payment method
09:54:18 <tuomov> not everyone has or can get a credit card
09:54:22 <shapr> tuomov: good point.
09:54:26 <basti_> www.opensourcemoney.org
09:54:27 <basti_> ;)
09:54:37 <tuomov> something like an amazon wishlist is quite neat an idea otherwise
09:54:45 <shapr> hoi xkb 
09:55:12 <xkb> hi shapr
09:55:13 <shapr> Yes, I should put an amazon wishlist link on my homepage. Then rich and thankful people can buy me books I want.
09:55:28 <shapr> Not that I know any rich people.
09:56:03 * shapr bounces around cheerfully
09:56:12 <Igloo> Are Amazon wishlists able to cope with people who buy things from places other than Amazon?
09:56:17 <Spark> when will you read them all though :()
09:56:17 <Spark> :0
09:56:18 <Spark> :)
09:56:24 <Spark> fucksakeicanttypeitsnotfairunhappysmiley
09:56:39 <shapr> I read fast.
09:56:48 <Spark> that is a useful ability
09:56:48 <shapr> I read a book last night. And one the night before.
09:56:53 <Spark> its like living for longer, almost :)
09:57:07 <shapr> It usually takes me a coupla hours to read a sci-fi or fantasy book.
09:57:11 <Spark> erm i could probably read a graphic novel in a day :)
09:57:18 <Spark> jesus
09:57:25 <tuomov> I take from two days to two weeks depending on the book
09:57:30 <sorje> shapr, are you one of these speed reading guys? ;-)
09:57:32 <shapr> Yah, but graphic novels require more time so you can look at the artwork.
09:57:37 <Spark> yeah
09:57:42 <shapr> sorje: I dunno, I just like reading.
09:57:49 <dash> good things are in books
09:57:57 <shapr> dash: like dead flowers!
09:58:02 <Spark> heh
09:58:06 <dash> not in any of mine
09:58:08 <Spark> you're gay :)
09:58:09 <shapr> and remnants of pecans I've cracked
09:58:13 <shapr> am not!
09:58:17 <shapr> just a little peril!
09:58:19 <basti_> i've got to go buy things, but it's snowing outside.
09:58:25 <Spark> :o
09:58:29 <Spark> could be worse
09:58:36 <shapr> Bad naughty Zoot!
09:58:42 <shapr> Leaving on the Grail-shaped lantern!
09:58:52 <karingo> but you have to kill them to get any good out of them.
09:58:56 * shapr hears the solid tone of the flatline...
09:58:59 <shapr> beeeeeeeee
09:59:13 <dash> shapr: did you think you were in #python ;D
09:59:26 <shapr> Sorry, years-old IRC reflex...
09:59:50 <dash> :D
09:59:58 <shapr> speaking of which... SILCnet looks good.
10:00:43 <basti_> ITS SNOWING.
10:00:45 <basti_> argh.
10:00:53 <basti_> bbl...
10:01:02 <shapr> S'okay, I was unicycling on ice earlier.
10:01:30 <shapr> dash: hey, did you know I started the great #python migration from EFNet to openprojects?
10:01:35 <shapr> pissed off glyph :-)
10:02:19 <shapr> dash: anyway, the next migration is apt-get install silky
10:02:26 <shapr> IRC is dead, long live SILCnet!
10:03:31 <Igloo> SyntaxNinja?
10:03:56 <dash> shapr: does epic support it?-)
10:04:38 <shapr> I dunno.
10:04:53 <tuomov> does someone still use epic?-)
10:05:01 <dash> me 
10:05:12 <shapr> SILC is UTF-8 only, encrypt only, netsplit resistant, supports MIME message types, etc etc
10:05:14 <dash> is there a better client? :)
10:05:20 <tuomov> irssi?
10:05:24 <shapr> ERC?
10:05:26 <dash> i have tried irssi
10:05:37 <dash> but it confused me 
10:05:41 <tuomov> takes some work to remove all the colours while retaining bolding, though...
10:06:20 <Spark> mm
10:06:27 <Spark> it does that out of the box these days, doesnt it?
10:06:34 <dash> i would try ERC, but that would mean leaving irc every time i crashed emacs :)
10:06:35 <tuomov> no.
10:06:45 <tuomov> it has awful flashy colours out of the box
10:06:59 <shapr> you crash xemacs?!
10:07:15 <tuomov> set colors off removes colouring, but also some bold attributes
10:07:36 <dash> shapr: well, hitting ^G in the middle of GC will kill it pretty reliably
10:08:06 <tuomov> huh?
10:08:11 <tuomov> they allow that?
10:08:26 <dash> emacs suxxxxx
10:09:21 * dash goes back to wrestling with mysql
10:09:27 <tuomov> the silc homepage is confusing
10:09:32 <tuomov> it's like a corporate webpage
10:10:45 <Spark> nothing like an academic web page, in red and green with a stupid backdrop that prevents you from reading the text :)
10:11:11 <shapr> dash: strange, I can't seem to do that with xemacs. What version are you using?
10:11:27 <tuomov> those have been made 10 years ago when that was cool and nobody has bothered to change them since then :)
10:12:03 <dash> 21.4.15
10:12:48 <shapr> I'm using ERC Version 4.0 $Revision: 1.693 $ with XEmacs 21.4 (patch 15) "Security Through Obscurity" XEmacs Lucid (i386-debian-linux, built 2004-10-23)!
10:12:53 <shapr> odd
10:13:03 <shapr> how do I start a big GC?
10:14:19 <shapr> sarah: You never asked any questions. Do you have some questions?
10:15:24 <Igloo> There's a performGC or somesuch
10:15:44 <dash> shapr: anyway. i never saw a compelling reason to use ERC and it's more convenient to have my emacs and my irc client independently restartable :)
10:16:19 <sarah> shapr: many...e.g. whats the difference between functions and operators?
10:16:26 <shapr> nothing
10:16:50 <sarah> theres no difference?
10:16:57 <shapr> well, a tiny bit of difference
10:17:02 <kang> shapr: and eg trying to find what represents f x.g y <= x multi g and y ?
10:17:25 <shapr> kang: er, huh?
10:18:01 <shapr> sarah: let add x y = x + y ; 2 `add` 3
10:18:35 <sarah> i thought like an operator needs 2 arguments to work
10:18:41 <sarah> like (+) 2 3
10:18:58 <sarah> and maybe a function not ^^
10:19:01 <shapr> that's true
10:19:15 <sarah> so that would be a difference, wouldnt it be?
10:19:18 <shapr> there are ways to make multiargument operators, sort of...
10:19:46 <shapr> yes, that's a difference.
10:20:03 <shapr> greetz stepcut 
10:20:04 <sarah> but else an operator is a function?
10:20:20 <Igloo> Except - is a unary operator
10:20:20 <stepcut> greetz shapr
10:20:29 <shapr> right, you can use "(+) 2 3" or "2 + 3"
10:20:50 <sarah> oki merci
10:21:08 <shapr> de rien
10:21:22 <shapr> parlez vous français aussi?
10:21:48 <shapr> eller talar du svenksa? =)
10:22:29 <sarah> hmm
10:22:34 <sarah> if u talk to me im german :)
10:22:38 <sarah> kang is french
10:23:29 <CosmicRay> join #darcs
10:23:45 <sarah> another thing: can i call "sqrt : R -> R" a function? (R means real numbers)
10:24:28 <shapr> salut kang, comment ça va?
10:25:03 <kang> shapr: fighting with my isp
10:25:19 <shapr> oboy, fun fun
10:25:29 <kang> my adsl loses synchronisation every 3min ^^
10:25:35 <kang> and hej ^^ 
10:25:41 <musasabi> back
10:25:45 <shapr> quelle dommage
10:25:48 <shapr> heippa hei musasabi 
10:26:34 <musasabi> sarah: yes, that is a function.
10:26:55 <sarah> oki
10:27:00 <kang> shapr: you know what does mean f x.y z ? the . 
10:27:06 <sarah> i thought its more a signature
10:27:30 <shapr> kang: function composition?
10:27:34 <kang> shapr: yeah
10:27:51 <Spark> anyone know about intersection types?
10:28:00 <shapr> Spark: yah, they're cool!
10:28:09 <shapr> type slicing, right?
10:28:16 <waltz> I have no clue whatsoever :|
10:29:58 <Oejet___> sarah, well "sqrt :: Double -> Double" is a type signature.
10:30:45 <musasabi> which defines sqrt to a function from Double to Double.
10:30:56 <sarah> :: would be a signature, but its only sqrt :
10:30:58 <sarah> so i wonder
10:31:19 <shapr> sarah: http://www.haskell.org/hawiki/HaskellDemo
10:32:15 <sarah> much code, yes ^^
10:32:33 <Igloo> "sqrt : R -> R" is math or pseudo-code for what would be "sqrt :: Float -> Float" (or similar) in Haskell
10:33:32 <Spark> shapr: cool i dont actually know much about them
10:33:36 <Spark> but im supposed to be researching them
10:33:38 <Spark> :)
10:33:44 <shapr> they're way spiffy.
10:33:48 <sarah> oki, but then its no function, is it?
10:33:48 <Spark> what are they good for
10:33:52 <Spark> besides overloading
10:33:53 <sarah> or u mean its a math function?
10:34:20 <shapr> Hm, I don't remember.
10:34:55 <Spark> :o
10:36:30 <shapr> If intersection types are the same as, or related to, type slicing, then they're good for a bunch of things.
10:37:39 <SyntaxNinja> hi Igloo...
10:37:52 <tuomov> What little I read, I think intersectioni types were about bringing theory closer to practical type inference algorithms
10:38:53 <SyntaxNinja> Igloo: idono, simon didn't say anything about this to me.
10:39:08 <SyntaxNinja> the debian packages should stick around at least until a version of GHC with cabal is released.
10:39:31 <Igloo> *nod*, OK
10:39:52 <Igloo> There's no shared component, right?
10:42:06 <Spark> shapr: A&B is the greatest lower bound of A and B, considering the subtype relation (i think) :)
10:42:17 <sarah> igloo? ;)
10:42:21 <SyntaxNinja> Igloo: shared component?
10:43:29 <Igloo> sarah: ?
10:43:35 <basti_> re
10:43:44 <Igloo> SyntaxNinja: Like a program, or datafile, or anything like that
10:44:57 <sarah> Igloo: [19:33] (sarah): oki, but then its no function, is it? :)
10:45:20 <Igloo> I don't undersstand what you mean by "function"
10:45:31 <sarah> a normal function
10:45:33 <Igloo> It's not valid Haskell
10:45:37 <sarah> oki
10:45:42 <sarah> so its a math function?
10:45:53 <Igloo> I don't know. Where did it come from?
10:46:47 <sarah> it was on the blackboard, and i wonder if its a function or not :)
10:46:54 <sarah> the topic was haskell of course
10:47:05 <sarah> but for me it looks like a wrong signature
10:47:23 <musasabi> sarah: maybe someone was being lazy when writing on the blackboard ;)
10:47:30 <Igloo> I would say it's a function
10:47:44 <Igloo> Just not written using Haskell syntax
10:47:48 <sarah> musasabi: no :)
10:47:50 <sarah> oki
10:47:52 <sarah> merci :)
10:48:27 <Igloo> (or at least a partial function)
10:54:26 <SyntaxNinja> Igloo: I don't follow. shared component between whom?
10:55:34 <Igloo> the cabal packages for ghc6, hugs etc
10:57:39 <SyntaxNinja> oh, I think I see what you're saying.  well, there's only a cabal package for ghc6 right now (in debian)
11:04:51 <kang> if f(x.(g y))  like f x.g y ?
11:06:18 <basti_> i think not
11:06:39 <basti_> because the latter would be read like (f (x.g y))
11:06:58 <basti_> uhm
11:07:17 <basti_> or?
11:07:22 <kang> so
11:07:25 <kang>  f(x.g) y would be right ?
11:07:29 <kang> and anything like
11:07:40 <basti_> depends on what you want to do.
11:07:42 <basti_> -?-
11:08:03 <kang> just to know if it means the same
11:08:05 <dv> ((f x) . (g y))(z) = (f x)((g y)(z))
11:08:10 <kang> or (f x.g) y probably
11:08:50 <kang> f x.g y = fx (g y) so ?
11:08:51 <basti_> i think the braces in f (x.g) y are unneccesairy
11:09:01 <basti_> i think . binds tighter than ( )
11:09:50 <basti_> f x.g y = f x g y   under some assumptions.
11:10:07 <basti_> namely that x and g are like A->B
11:10:31 <dv> isn't f x . g y partial application?
11:10:48 <basti_> hm
11:10:57 * basti_ tries it
11:11:23 <kang> well eg f x.g y means (fx).(gy) or f(x.g)y or what exactly ? ^^ 
11:11:28 <basti_> WAH
11:11:28 <basti_> ;)
11:11:35 <dv> i mean, whats the point of composing two functions if their composition takes no arg?
11:11:50 <sarah> i think its a syntax question :)
11:11:53 <basti_> yes.
11:12:06 <kang> yeah
11:13:04 <dv> (f.g)(z) = f(g(z)) then add the x and y and you get (f x)((g y)(z))
11:13:32 <kang> why add a x ? ;)
11:13:49 <kang> just trying to find an equivalent way or expressing f x.g y
11:13:56 <kang> without z or any other letter
11:14:17 <dv> that makes no sense to me
11:15:17 <sarah> he just wants to know if fx.gy is the same as if he writes f(x.g)y or if its nonsense
11:16:02 <basti_> mmmh.
11:16:09 <basti_> i think i see where that came from now lol
11:16:16 <dv> you can't compose like that
11:16:28 <Spark> is "." function composition?
11:16:31 <basti_> uhm you could but it makes not much sense.
11:16:32 <dv> yes
11:16:32 <sarah> yes
11:16:34 <basti_> yes
11:16:35 <Spark> okey dokey
11:16:37 <Spark> :0
11:17:17 <sarah> so e.g. f(x.g)y would work for composition?
11:18:14 <basti_> its syntactically correct haskell (plus or minus the epsilons ;)
11:18:28 <basti_> (f (x.g) y) can be correct.
11:18:29 <sarah> oki
11:18:37 <basti_> if it makes any sense... well.
11:18:51 <sarah> u need brackets around it too?
11:18:55 <sarah> without it doesnt work?
11:18:59 <basti_> in most places
11:19:16 <basti_> i think except in function definitions like in "  x = f (x.g) y"
11:19:35 <dv> well if x and y are constant values then it doesnt make much sense does it
11:19:42 <basti_> no.
11:19:44 <basti_> it doesnt.
11:20:37 <kang> hm
11:20:38 <kang> so eg hm (f x).(g y) wouldn't work right?
11:21:27 <dv> you have to apply the composition to something
11:21:56 <musasabi> no...
11:23:39 <musasabi> kang: that can legal too.
11:23:56 <kang> legal ?
11:23:57 <musasabi>  (\f x g y -> (f x).(g y)) (const id) 'a' (const id) 'b' "foo"
11:26:05 <kang> but then hm its k or not ?;)
11:26:08 <kang> you're loosing me
11:26:31 <musasabi> well (.) is just a function itself.
11:26:34 <musasabi> @type (.)
11:26:36 <lambdabot> (.) :: forall c a b. (b -> c) -> (a -> b) -> a -> c
11:27:21 <dv> i still don't understand what this is for
11:27:37 <musasabi> (.) g f v = g (f v)
11:27:39 <kang> a deseperate try to understand something ^^
11:27:49 <musasabi> the same as in math.
11:28:25 <dv> but why is he putting x and y in it
11:28:41 <kang> ok, where can i find a real reference and explanation of the whole haskell language, from 0 ? 
11:29:07 <dv> well for starters you can find out about function composition in any math book...
11:29:12 <musasabi> kang: I would start with a tutorial ;) (e.g. haskell.org/tutorial)
11:29:51 <kang> ok thanks ;)
11:30:15 <kang> can you just tell me if what i said higher was right or just wrong ? then im into reading 
11:31:32 <musasabi> kang: (f x).(g y) is quite legal if they have suitable types 
11:31:42 <dv> you can't transform f x . g y without applying it to something, similiarly as f.g is f(g(...?))
11:35:24 <sarah> could i say f(x.(g y)) are equal to f x.g y?
11:35:58 <basti_> re
11:36:00 <dv> no
11:36:23 <sarah> and (f x.g) y?
11:37:28 <dv> well assuming the result of f x is some value and not a function then how would you compose it with g?
11:37:32 <musasabi> @type (\f x g y ->  f(x.(g y)))
11:37:33 <lambdabot> (\f x g y ->  f(x.(g y))) :: forall t b c t1 a.
11:37:33 <lambdabot> 			     ((a -> c) -> t) -> (b -> c) -> (t1 -> a -> b) -> t1 -> t
11:37:48 <musasabi> @type (\f x g y ->  f x . g y)
11:37:49 <lambdabot> (\f x g y ->  f x . g y) :: forall t b c t1 a.
11:37:49 <lambdabot> 			    (t -> b -> c) -> t -> (t1 -> a -> b) -> t1 -> a -> c
11:37:49 <sarah> dv: so thats wrong too?
11:38:17 <musasabi> sarah: are the types the same?
11:38:31 <dv> wrong, horribly misguided; withever you prefer.
11:38:34 <sarah> its undefined, its just syntax question
11:38:35 <dv> which*
11:38:45 <sarah> oki :)
11:39:07 <sarah> so ill erase f(x.(g y)) and (f x.g) y from my memory :)
11:39:29 <musasabi> they just mean different things
11:39:38 <dv> i suppose it could be valid in some unbelievably strange situation, but generally it's not going to be the same
11:39:58 <sarah> alright, merci :)
11:40:16 <sarah> ah
11:40:17 <sarah> hmm
11:40:20 <sarah> a last thing
11:40:51 <sarah> are there functions which dont have an inverse?
11:41:10 <dv> yes
11:41:21 <sarah> which?
11:41:22 <dv> only bijective functions have inverses
11:41:23 <musasabi> f x = 0 ?
11:41:47 <dv> ie, each argument must map to exactly one value
11:42:01 <stepcut> yikes, subselects in mysql 4.1 are *slow*
11:42:08 <sarah> so all functions are not inverse but bijective ones?
11:42:25 <dv> so if you draw a graph then for every horizontal line you make it must intersect the graph in exactly one spot
11:42:36 <dv> or no spot at all
11:42:57 * sarah scratches her head
11:43:04 <kosmikus> not "a function is inverse", but "a function has an inverse"
11:43:05 <sarah> no general rule?
11:43:11 <sarah> ah oki
11:43:38 <dv> f x = x+1 has an inverse function g x = x-1
11:43:49 <dv> f x = x^2 has no inverse function
11:44:03 <sarah> "g" indicates an inverse?
11:44:24 <dv> f g h are usually used to mean functions
11:44:29 <kosmikus> no, not any more than "f" indicates a function
11:44:58 <musasabi> f^-1 is usually the inverse of f.
11:45:14 <sarah> oki merci :)
11:45:17 <sarah> i think i understood
11:45:24 <musasabi> but that is just a naming convention nothing more.
11:45:24 <kosmikus> yes, usually, maybe, but they're just *names* -- if you don't say what you mean by a name, it doesn't have any meaning
11:46:01 <stepcut> my query takes 0.6s with an inner join, and 10 secs with sub-selects :p
11:47:38 <sarah> thx for helping me out guys! :)
11:47:41 <sarah> bye :)
11:47:45 <stepcut> I think I need to write a join optimizer for haskelldb
11:48:18 <basti_> back.
12:07:29 <maihem> I've got a part of my lighting function in my raytracer that recurses to trace another ray for the reflection. It is quite possible to go on forever. It may also be considered pointless by the user to go beyond a given precision if the intensity reduces with each reflection, or beyond a certain number of reflections if compute time is limited...
12:07:48 <maihem> It seems foolish to put these options as an argument to the lighting function (and every function that calls it)
12:07:50 <shapr> you could use until
12:07:58 <maihem> Is this what monads are for?
12:08:11 <maihem> (I still haven't really worked them out yet :)
12:08:48 <shapr> could be if you want
12:08:57 <shapr> but there's an easier way.
12:09:03 <maihem> what's that?
12:09:11 <shapr> monads are like objects, both are ways to structure your program.
12:10:04 <shapr> maihem: http://www.scannedinavian.org/~shae/src/haskell/Mandelbrot-0.2.hs
12:10:19 <shapr> @index until
12:10:19 <lambdabot> GHC.Base,Prelude
12:10:22 <shapr> @type until
12:10:23 <lambdabot> until :: forall a. (a -> Bool) -> (a -> a) -> a -> a
12:10:54 <shapr> look at doPoint
12:11:09 * maihem looks
12:11:31 <shapr> you know how to graph a fractal?
12:12:14 <maihem> err, iterate until you are satisfied that the point is in the set?
12:12:44 <shapr> but, sometimes the point is not in the set, you know it will rapidly go to infinity
12:12:50 <shapr> or sometimes you just tired of iterating
12:13:24 <shapr> so the bail function there checks for both of those, going to infinity is easy to check for, but maxiters gets passed in.
12:13:57 <shapr> the until function takes a 'check' function, and an "iterate_once" function
12:14:00 <shapr> you see?
12:14:10 <maihem> yep
12:14:38 <shapr> and, with partial application of the bail function, you can easily change the maxiters.
12:14:43 <shapr> You can do the same thing with your raytracer.
12:14:49 <shapr> no monads required.
12:15:36 <stepcut> I wonder if I can get a grant to write a really good optimizing relational algebra -> SQL compiler
12:15:37 <maihem> so I could let the user provide a bail function (user being the top level code), to either bail on number of recursions, precision, never bail, or anything.
12:15:43 <shapr> stepcut: probably!
12:15:52 <shapr> maihem: exactly!
12:16:02 <stepcut> shapr: I have no idea how to get a grant though...
12:16:15 <shapr> Talk to the NSF, I guess.
12:16:17 <stepcut> but haskelldb needs a better RA->SQL generator
12:16:21 <shapr> I agree.
12:16:29 <shapr> so does the HaskellDB team.
12:16:31 <stepcut> my query takes 0.6 seconds with an inner join and 10 seconds with a sub-select :p
12:16:42 <maihem> cool!
12:16:49 <maihem> thanks shapr
12:16:57 <shapr> sure, anytime.
12:17:02 <shapr> hej kristnjov 
12:17:04 <kristnjov> tja
12:17:18 <kristnjov> i just got my results back from the haskell exam, i got the grade 4/5 :)
12:17:18 <stepcut> and, oddly enough, 6 seconds if I do some of the work in my application logic...
12:17:47 <shapr> I'd very much like an RA -> SQL rewriter that allowed back-end specific code.
12:18:06 <shapr> then HaskellDB could be the fastest way to convert your databases from one back-end to another.
12:18:19 <shapr> or do synchronization, or anything.
12:18:30 <shapr> It's still powerful stuff just the way it is.
12:18:55 <kristnjov> congratulations kristnjov that rocks
12:19:54 <shapr> good deal kristnjov :-)
12:19:58 <kristnjov> hehe
12:25:37 <Oejet___> That's great kristnjov.  I wish, I could take an exam in a Haskell course.  Ah, maybe the program analysis course, where you can use any language for the program transformations.
12:26:02 <kristnjov> haskell is a fun language, i wouldn't mind taking the exam again for a higher grade
12:26:06 <kristnjov> and i believe i will try
12:26:09 <kristnjov> next year
12:28:28 <shapr> greetings gst 
12:29:00 <gst> hi.
12:30:21 <shapr> how's code?
12:36:02 <gst> not much code yet :) /me just started coding for functional programming exercise (at technical university in vienna) which he has to have finished by tomorrow :)
12:36:26 <shapr> fun
12:37:16 <kristnjov> gst, i recently passed a course like that, trust me when i say you should do your exercises :)
12:37:48 <goron> Anyone that knows a program so that I can print 4 pdf pages on one page? gpdf borks.. and acroread doesn't support it...
12:38:04 <basti_> goron uh oh
12:38:21 <basti_> goron pdf2ps pstops (!not! ps2ps) ps2pdf
12:38:28 <gst> shapr: yep. i've already had 4 exercises before (1 per week) and somehow it makes more fun than coding python (which i thought wouldn't be possible :)
12:38:32 <basti_> or nup instead of pstops
12:38:56 <goron> I will check the docs. Thanks..
12:40:02 <gst> but currently the tasks are rather easy. converting integers to roman numbers and stuff like that.
12:40:14 <goron> basti_: pstops is not an option.
12:40:16 <gst> (that's the task i'm currently working on)
12:40:25 <goron> basti_: nup too.
12:40:36 <basti_> hmm
12:40:43 <basti_> from where are you coming?
12:40:55 <basti_> how do you author your document?
12:41:34 <goron> basti_: No idea of what you mean? I don't what to print something I created. I want to create someother guys stuff.
12:41:52 <goron> create->print
12:41:59 <basti_> yes i see
12:42:02 <basti_> that was what i thought
12:42:26 <basti_> acrobat distiller should be able to do it
12:42:36 <goron> basti_: That's Windows?
12:42:43 <goron> basti_: I am on Linux.
12:43:26 <basti_> yep
12:43:36 <basti_> so why are nup and pstops no options?
12:43:50 * shapr watches inspirational unicycle movies
12:43:58 <stepcut> haha
12:44:15 <kristnjov> shapr, could you send a couple of them?
12:44:18 <kristnjov> dcc
12:44:47 <goron> basti_: Well~$ pdf2ps --help
12:44:47 <goron> Usage: pdf2ps [-dASCII85EncodePages=false] [-dLanguageLevel=1|2|3] input.pdf [output.ps]
12:45:13 <shapr> kristnjov: http://83.226.177.116/~shae/unifilms/
12:45:23 <basti_> goron....?
12:46:08 <goron> basti_: You claimed there was an option nup or pstops
12:46:38 <goron> basti_: It will try kpdf. 
12:46:38 <basti_> i did?
12:46:41 <basti_> yep.
12:46:43 <kristnjov> lol it's the ripley's-guy
12:46:46 <basti_> *nods*
12:47:39 <goron> Me?
12:47:50 <goron> Anyway, kpdf does not bork :)
12:47:59 <goron> Thanks for the help, ;)
12:48:00 <basti_> :)
12:48:03 <basti_> -shrug-
12:48:55 <shapr> hiya Godeke, wazzup?
12:49:35 <gst> shapr: hehe, i recently stumbled accross the homepage of some guy here in austria who combines unicycling with mountainbiking
12:49:37 <shapr> kristnjov: the french videos are by Yoggi Toulouse, he's amazing.
12:49:38 <gst> http://einradfreak.at/4images/details.php?image_id=81
12:49:54 <kristnjov> i'll check em out :)
12:50:04 <shapr> gst: Oh, I do that too :-)
12:50:04 <shapr> I have a mountain unicycle.
12:50:09 <shapr> I'm not as good as that guy though.
12:50:22 <Godeke> Hey there shapr, Just dropping by to see what was going on in this neck of the woods. 
12:50:39 <shapr> happy coding!
12:50:54 <shapr> gst: this is me on my mountain unicycle --> http://www.scannedinavian.com/images/uni-hop.jpg
12:51:14 <Godeke> Been playing with functional languages (ocaml mostly) and the haskell kept coming up :)
12:51:23 <shapr> Haskell is really neat.
12:52:17 <shapr> gst: as you can see, I can't get off the ground so well, but I'm practicing.
12:52:19 <gst> shapr: nice, i wanted to buy one myself, but i recently broke my arm because of an accident with a normal mountain bike. guess i have to wait until next year.
12:52:43 * goron saved some trees :)
12:53:28 <gst> http://einradfreak.at/4images/categories.php?cat_id=22
12:53:34 <gst> (houserunning + unicycling)
12:53:38 <shapr> Unicycling is safer than biking, mostly because unicycles are slower. Unis have no gears, only direct drive. But, unis are more agile I think.
12:53:54 <shapr> houserunning?
12:54:18 <shapr> whoa, that guy is nuts.
12:55:41 <shapr> Spiked pedals are wonderful for ice and mud, but they sometimes bite. I need leg armor.
12:55:58 <shapr> Godeke: have you used Haskell before? Do you have any questions? Do you want the quick intro?
12:56:17 <shapr> hiya mornfall
12:56:20 <shapr> how's code/
12:56:56 <goron> What code? This is #offtopic WHOEHAHA...(whatever)
12:57:15 <mornfall> moin moin
12:58:15 <Godeke> I have toyed with it in the past. I just joined in to lurk more than anything: I'm reading www.haskell.org and checking things out (for example, I'm looking at the Haskell web server at the moment).
12:58:30 <shapr> HWS by Simon Marlow?
12:58:38 <shapr> it's nice.
12:58:44 <shapr> Needs a config monad though :-)
12:59:35 <shapr> all my man pages look like crap since I switched my locale to UTF-8. What's up with that?
12:59:48 <Godeke> I have a wierd language learning hobby... always looking for good concepts. My day job requires I program in more prosaic procedural languages, but I think functional thinking helps even there.
13:00:23 <shapr> Yes, I agree. I also learn languages for fun, specifically to find new mental tools (toys :-)
13:00:40 <shapr> Have you tried concatenative languages like Joy? Or prototype-oriented languages like Self?
13:01:04 <shapr> Seen nested data parallelism? Or algorithmic shape in FISh?
13:02:19 <shapr> 'Region allocation' in Moscow ML allows you do some strange compilation tricks that guarantee that memory can be freed when an operation is done, allowing unusual and nifty benefits.
13:02:57 <Godeke> I have worked a bit with Lua (as a scripting language for C++), Lisp, befunge (to mess with my head), ML/oCaml, scheme, perl, python, smalltalk (via squeak), R and a bunch of others.
13:03:05 <Godeke> I'm familiar with Self, but never used it. 
13:03:47 <Godeke> Never worked much with parallelism, except insomuch as Oz/Mozart has it via communication between processes.
13:03:50 <shapr> There's a hardware description domain specific language embedded in Haskel called Lava, it can compile to Xilinx FPGAs. Think of being able to give your programs access to a reprogrammable coprocessor :-)
13:04:53 <shapr> I have a neat collection of mental toys like that, but that's all that comes to mind right now.
13:05:57 <Godeke> Have you played with CxC? They run the Gridwars contests each year: a 2 dimentional programming language for FPGA clusters.
13:06:30 <shapr> oh cool!
13:06:39 <Godeke> http://www.gridwars.com/
13:06:43 <shapr> I've thought about 2D proglangs, and I've seen Piet, but I don't know of CxC.
13:06:54 <Godeke> They have a free download of the environment and the test arenas.
13:06:58 <bourbaki> moin
13:07:19 <shapr> I've been thinking about how to efficiently encode programs in images.
13:07:38 <shapr> Or even just how to make a fun turing machine sort of language that uses images as input.
13:08:02 <Godeke> Well, this might give you some ideas: you can only "see" the processors next to the one executing. All of the processors execute their logic and send output to adjacent processors.
13:08:16 <Godeke> Of course, in a real grid, they all process in synch.
13:08:39 <shapr> Interesting. I've been thinking about SMP turing machines where multiple machines crawl a 2D 'tape'
13:08:40 <Godeke> Somewhat between Tim Conway's Life and Corewars.
13:09:20 <shapr> I've been trying to match that up to concatenative languages like Joy, because I'd like to implement an SMP capable concatenative language someday.
13:09:43 <Godeke> If you like 2D programming, befunge has a 2D instruction pointer: http://home.wandoo.nl/wimrijnders/bef.htm ... more of a mental puzzle than a real language.
13:09:58 <shapr> Yes, that's what got me started on this path.
13:10:39 <shapr> By the way, IBM and Sony's new Grid/Cell CPU is probably something like this.
13:10:45 <shapr> At least, the way rumors are going.
13:11:01 <Godeke> Yes, but from what I can gather, each Cell is pretty powerfull itself.
13:11:28 <Godeke> I think it will be more loosely coupled (I hear rumors of working over TCP/IP for example).
13:11:53 <Godeke> Not that I can't think of uses for being able to recruit remote processing power :)  More power is *always* a good thing.
13:11:58 <shapr> I agree.
13:12:10 <shapr> I've also been looking for languages that let me use SMP without threads.
13:12:26 <Godeke> For example, I have heard that one idea would be to have all those idle cycles in an office available to the engineering software on demand.
13:12:26 <shapr> For me, that was one of the draws to FP.
13:12:55 <Godeke> Make a RPC that includes code (the first time: it would cache after that) and then get notified of the completion.
13:12:58 <shapr> That can be done today, if you use PVM for example.
13:13:22 <Godeke> Yeah... I think the marketing for Grid/Cell computing has been awful fuzzy.
13:13:28 <Godeke> Lots of "imagine what you can do"
13:13:33 <Godeke> Not much detail about how. :)
13:13:40 <shapr> That might mean it's just the same old CPU repackaged... but I hope not.
13:14:07 <Godeke> Well, the other side of the coin is that I have heard you can tighly couple over busses... I think they are throwing a wide net.
13:14:24 <shapr> What do you mean?
13:14:40 <Godeke> Trying to have parallel computing in local machines, remote workload sharing and at the farthest end leasable compute time.
13:15:11 <Godeke> I have heard all of the above spouted off by IBM.
13:15:22 <Godeke> I can't really imagine a protocol that would be efficent at all three scales.
13:15:41 <shapr> I can't either.
13:16:06 <Godeke> Locally, you probably want some kind of shared memory, in a LAN shared disks (SAN) and remote compute would have to be cached heavily.
13:16:21 <Godeke> So I wonder how much is vapor. :)
13:16:52 <shapr> We need details.
13:16:57 <Godeke> Oh, just found Joy's page :)
13:17:26 <Godeke> This reminds me of the Lisp vs Trac debates of old.
13:17:36 <shapr> Joy is great fun. Concatenative languages are a bit mindtwisting, in a good way.
13:18:46 <shapr> Who was the sci-fi/fantasy author who wrote about tattoo magic? Haplo was the main character using tattoo magic. Raymond Feist?
13:18:57 <Godeke> I built myself a Trac interpreter way back on the Commodore 64.
13:19:08 <shapr> Anyaw, I've thought about how to design a language around hexagons, I think that would be neat.
13:19:32 <shapr> I'd also like to find a good language for writing code on whiteboards with 'fridge magnets'
13:19:55 <shapr> I think that would be fun too.
13:20:11 <shapr> Only thing I did on the C64 was play Telengard.
13:21:17 <Godeke> That's where I learned to program. Look a Fortran class at the Arizona State during junior high (thanks to PSAT) and got a Vic 20 that cristmas. Wrote a life program in assembly on that machine and then graduated to the C64.
13:22:07 <Godeke> Haplo is from Death Gate: Margaret Weis and Tracy Hickman.
13:22:11 <shapr> I started writing BASIC on a Sinclair Spectrum. I spent my college money on an IBM XT in 1988.
13:22:48 <shapr> So, I don't have a college degree, but I sure have had a lot of fun with computers.
13:23:19 <shapr> I suspect you and I are close in age.
13:23:52 <Godeke> I would imagine :)
13:25:08 <tromp> hey, i also started on a ZX spectrum. still have the bugger:)
13:25:27 <Godeke> Self taught programmers I think have some advantages, especially if you keep up with a large number of languages: flexibility.
13:25:38 <tromp> but my next one was an Amiga 500
13:25:57 <Godeke> Ah, the Amiga.
13:26:09 <Godeke> I loved my 1000, and then I had a couple of 500s.
13:26:13 <shapr> I'd say self taught programmers have passion.
13:26:45 <tromp> now my thinkpad has hostname amiga :)
13:27:09 <Godeke> Yep. You find that passion in some of the schooled programmers, but there are an equal number or more who learned enough to get by and never really loved what they did.
13:27:33 <shapr> I have trouble dealing with programmers who don't have passion.
13:27:39 <shapr> I don't really know how to relate to them.
13:28:08 <tuomov> around the mid-90s most went into cs for the money
13:28:15 <Godeke> Right now I work with one other programmer that has the passion. We went through a lot of "I'm here for a paycheck" guys before we found him.
13:29:03 <shapr> The downside of passion is that it *really* hurts to do the stupid stuff that business sometimes requires.
13:29:19 <Godeke> Yeah, a lot of them in the 90s did go for the money, and now the market has busted you find the old guard pretty untouched.
13:29:26 <tuomov> self-thaught programmers have a passion.. and opinions
13:29:59 <tuomov> businesses mostly want people to work on crap, and this doesn't suit people who didn't go into it just for the money so well
13:30:21 <Godeke> Yes, the down side of self-taught: not wanting to do "boring" stuff and perhaps a bit dismissive of others.
13:30:42 <tuomov> I don't consider the first a downside :)
13:30:50 <Godeke> :)
13:30:53 <tuomov> a lot of boring stuff is boring only because someone else has decided it should be so
13:31:02 <Godeke> I consider it a downside when I have to do it :)
13:31:21 <tuomov> in my ex job someone had decided that the some thing should be documented three times over without any automation
13:31:23 <shapr> Most of the boring stuff can be automated. The rest either will be done if it's explained how it's important, or will be ignored if it's just there to satisfy managers who can't bear to not have control.
13:31:41 <tuomov> I told them how brain-damaged that was and they fired me :)
13:31:50 <shapr> tuomov: good move :-)
13:31:58 <shapr> óla masm 
13:31:58 <Godeke> I'm currently working on a large web base insurance package: most of the "exciting" work is behind us, but we still find a gold nugget here and there to work on.
13:32:38 <Godeke> I was the lead designer, and I have to say, that was a heck of a three years as we scaled it out. Now it is mostly routine stuff: integrate with system X, add minor feature Y.
13:32:40 <tuomov> before that they wanted me to update a design document from a specification document
13:32:47 <tuomov> fortunately I managed to kill that task
13:33:02 <shapr> I'm working on a multilingual website for tracking trends in e-education in Europe and Latin America. It's mostly routine, but it has some good sides.
13:33:03 <Godeke> We do all of our documentation in a private Wiki.
13:33:28 <shapr> Have you read "The Pragmatic Programmer" ?
13:33:32 <Godeke> Yes.
13:33:37 <shapr> Those guys are great.
13:33:49 <shapr> The two books I recommend to all beginning programmers are tPP and SICP.
13:33:58 <masm> Olá shapr.
13:34:25 <Godeke> We release a new version every month or less, and work very iteratively.
13:34:38 <shapr> That sounds a lot like Extreme Programming.
13:34:51 <shapr> Or at a minimum, an 'agile process'
13:34:59 <tuomov> detailed specifications in advance are doomed to failure
13:35:04 <shapr> Heck yeah.
13:35:05 <Godeke> More ot the later. No pair programming...
13:35:05 <Godeke> :)
13:35:20 <shapr> Pair programming is really great.
13:35:28 <tuomov> some high-level planning is good when you have multiple people working on a project, but no more
13:35:29 <shapr> If you can find the right partner.
13:35:37 <Godeke> Yes, but harder to do when the team is in several cities.
13:36:07 * esap never understood pair programming.
13:36:08 <Godeke> I developed my development methods back coding Muds with programmers around the world.
13:36:08 <shapr> True, but if you have multiple people in the same location, you can do it then. Or can have sprints.
13:36:16 <shapr> esap: try it sometime, then you will.
13:36:46 <Godeke> Rapid prototype, violent code review and then to testing.
13:36:49 <esap> shapr: I think I've tried it, though I'm not at all sure we did it right.
13:36:50 <shapr> esap: If you and I ever end up in the same building with a laptop one of us owns, I'll show you what a rush it can be.
13:37:20 <shapr> Godeke: have you tried test-driven-development?
13:37:26 <Godeke> I have done a bit of pair programming (when my main programmer and I are on site.) Not formal: we just sit down and hash things out.
13:37:33 <Godeke> Yes, I believe in test driven programming.
13:37:49 <shapr> I hacked up a version of QuickCheck to do TDD in Haskell.
13:38:07 <shapr> Are you familiar with random testing, aka stochastic testing, aka generative testing?
13:38:25 <Godeke> Our back end is built on N-unit tests (I just tipped my hat to what I code in all day). But being a web app, we also have to do awkward testing of the browser interface via Test Complete :(
13:38:33 <shapr> ouch, N-unit.
13:38:44 <Godeke> Hey, better that nothing :)
13:38:57 <shapr> Have you seen fit.c2.com and fitnesse.org ?
13:38:59 <Godeke> I considered rollinig my own, but N-unit gets it done.
13:39:19 <shapr> Test Complete is the test scripter from rational?
13:39:53 <shapr> dang, transcode can't export theora?
13:39:59 <Godeke> Nah, from Automated QA.
13:40:21 <Godeke> Uses scripting languages so after you capture a test session (record) you can edit it up and encapsulate.
13:40:43 <Godeke> We have to test that the client side Javascript behaves.
13:41:01 <shapr> I use Zope/Plone for most of my paying work, so I get to do testing with xml-rpc.
13:41:05 <shapr> In haskell!
13:41:23 <Godeke> The most awkward part of the job. The other awkward part is all the SQL depenent tests: massive test harness setups. :(
13:41:26 <shapr> javascript testing is rough.
13:41:33 <shapr> Oh, have you seen HaskellDB?
13:41:40 <Godeke> Testing the classes are the easy part :)
13:42:21 <shapr> HaskellDB lets you do relational algebra in Haskell, and generates the SQL for you. You get static type-checking of SQL queries, higher-order queries, all sorts of wonderful features.
13:42:39 <Godeke> Now that looks cool.
13:43:01 <shapr> I call HaskellDB a database UNwrapper because it exposes the relations directly, rather than just exposing the SQL.
13:43:01 <Godeke> I have played with D4, which is a "true" relational language. Built on top of SQL server though :(
13:43:15 <shapr> Heard of Tutorial D?
13:43:18 <Godeke> Yep.
13:43:20 <shapr> greetz SyntaxNinja 
13:43:29 <shapr> Do you read lambda-the-ultimate.org ?
13:43:44 <Godeke> The version I downloaded wasn't very far along (yes, I read lambda).
13:44:10 <shapr> Have you seen my name there before?
13:44:14 <shapr> I've seen yours :-)
13:44:40 <SyntaxNinja> hihi
13:54:27 <shapr> ozone: hey, did you write the theora transcoder docs?
14:02:41 <shapr> Godeke: if you're interested in software testing, QuickCheck is really neat.
14:03:57 <Godeke> Hmmm. Looking at that next. fitnesse.org is pretty cool. Since our guys already use a wiki, that's not much of a stretch.
14:04:21 <kristnjov> QuickCheck is god
14:05:26 <Godeke> Gremlins style test case generator. :)
14:05:30 <shapr> I sent a coupla emails to Koen about QC, I hope he integrates some of my changes. And some of SyntaxNinja's changes too.
14:05:55 * earthy thinks kristnjov has a *weird* religion
14:06:14 <kristnjov> it's called hughes-ism
14:06:19 <kristnjov> a bit new age
14:06:32 <SyntaxNinja> shapr: :)
14:07:01 <blackdog_> this y combinator, which was given to you for the recursion of sins
14:09:28 <earthy> lead me not into global state
14:24:53 <blackdog_> yea, though i should walk in the walley of imperative code, i shall fear no evil, for your monad comforts me still
14:25:03 <blackdog_> dammit. /walley/valley/
14:25:07 * shapr laughs
14:25:13 <shapr> man, I'm going to quote you guys.
14:26:57 <blackdog_> i don't think bash.org has a religious section...
14:29:26 <shapr> @wiki QuotesPage
14:29:26 <lambdabot> http://www.haskell.org/hawiki/QuotesPage
14:29:39 <bourbaki> @arr
14:29:39 <lambdabot> Arrr!
14:29:42 <shapr> @yow
14:29:43 <lambdabot> I'm into SOFTWARE!
14:30:06 <bourbaki> shapr i still didnt get it what to do to get the iging in the bot
14:30:23 <shapr> Godeke: oh, as for cute software written in Haskell, there's the irc bot lambdabot, the wiki Flippi, and a bunch of other fun stuff.
14:31:34 <shapr> What commands would you want for an IgingModule ?
14:34:01 <bourbaki> shapr @iging i think
14:34:09 <bourbaki> thatd just throw out the iging then
14:35:15 <shapr> ok, and you'll want a random number seed, right?
14:35:29 <bourbaki> just any int value
14:35:44 <bourbaki> but i need no seed i do all that in the code
14:39:55 <blackdog_> shapr: thanks for correcting the spelling mistake. :)
14:40:20 <shapr> :-)
14:43:11 <bourbaki> i got to go to bed now shapr would you mind to finish that tomorrow?
14:43:22 <shapr> we can talk about it tomorrow, sure.
14:43:28 <bourbaki> cool thanks
14:49:57 <musasabi> Would it be sensible to differentiate between inspecting and altering world state?
14:51:39 <Philippa_> in what circumstances?
14:51:49 <Philippa_> (in some, *fuck* yes)
14:54:20 <musasabi> FFI mostly.
14:54:46 <Philippa_> hrmm, how much differentiation are you thinking of?
14:54:53 <Philippa_> I mean, I like knowing which funcs're just queries...
15:05:10 <musasabi> Philippa_: yes, but how would I mark the query function?
15:05:30 <musasabi> as it needs to be in IO (because foreign values are pointers...)
15:05:41 <Philippa_> yeah, there's prolly not a lot you can do typewise
15:05:48 <Philippa_> just dub it isFoo or something like that
15:06:02 <Philippa_> it's enough for the user to pick up and the language clearly doesn't give a crap :-)
15:10:33 <musasabi> ok
15:11:22 <blackdog_> anyone know if don has a darcs repo for hs-plugins?
15:11:27 <shapr> he doesn't
15:11:30 <shapr> just cvs
15:11:50 <shapr> as he explained to me, hs-plugins is 'official' and chilli uses cvs.
15:11:56 <blackdog_> ah, gotcha.
15:12:24 <shapr> This has motivated me to look for ways to convert chilli to darcs of course =)
15:12:56 <blackdog_> it'd be hard: ~chakcvs is pretty big. it'd have to be pretty painless and offer a big upside.
15:13:13 <shapr> painless I can do, still thinking about big upside.
15:13:49 <shapr> offline commits?
15:14:03 <shapr> you can work with a repo on a plane.
15:14:21 <shapr> comes with a sexy cgi browser, written in Haskell, easily hackable...
15:14:49 <blackdog_> i should check that out - one of my big problems with cvs was that i couldn't find a neasy way of browsing repos.
15:14:55 <shapr> I dunno. I suspect if I sent an email along those lines to Chilli, the whole idea would pretty much bounce.
15:15:15 <shapr> blackdog_: http://www.scannedinavian.org/cgi-bin/darcs.cgi
15:15:34 <blackdog_> and if you don't trust and feel comfortable with source revision tools, you tend to create blah.old dirs all over the place... one of my very very bad habits.
15:15:49 <shapr> yah, that's a lot of trouble.
15:18:33 <shapr> What do you think of the browser?
15:20:30 <blackdog_> i think you shouldn't keep .o and .hi files in your source tree. Evil child. :)
15:20:41 <shapr> eh?
15:20:48 <shapr> where?
15:20:50 <blackdog_> in curryspondence....
15:20:58 <shapr> doh!
15:21:17 <blackdog_> what's a file that's had heaps of revisions? 
15:21:18 <shapr> that must have been before darcs add had the 'boring file' feature :-(
15:22:23 <Pyoko> bbl. doing coursework
15:22:40 <shapr> blackdog_: I dunno what?
15:22:42 * shapr waits for the punchline
15:23:55 * blackdog_ groans
15:24:08 <blackdog_> lord save us from hacker humour
15:24:12 * shapr gins
15:24:15 <shapr> er, "grins"
15:24:21 <blackdog_> this early in the morning?
15:24:31 <shapr> it's 00:24 here
15:24:41 <blackdog_> doesn't get much erarlier.
15:26:12 <shapr> hey kosmikus, your patches made it in!
15:26:18 <shapr> and I have no idea how, why, or when.
15:27:12 <shapr> blackdog_: the scribble file in wikiwiki
15:27:37 <Igloo> What patches?
15:28:26 <shapr> lambdabot patches.
15:28:55 <shapr> At some point in the last few days, they made it into the repo. But they were MIA for days.
15:29:11 <shapr> Probably my thrice-b0rked mail server.
15:29:19 <shapr> I really gotta switch to Postmaster.
15:31:29 <Philippa> note to self: place power cable where you can't kick it out
15:31:40 <shapr> haha
15:31:50 <blackdog_> but what if they build a better idiot?
15:32:39 <Philippa> then the world'll trap mice with it
15:35:29 <shapr> blackdog_: pretty darcs diffs - http://www.scannedinavian.org/cgi-bin/darcs.cgi/wikiwiki/scribble?c=annotate&p=20040926185330-6d30c-52b6c4a9862f239c95bd03cc83f4a890138b0d5d.gz
15:35:48 <Philippa> oh well. In a further display of idiocy I yanked the cable from switch to router out and ran it round the back of the table just now
15:35:59 <Philippa> OTOH I did so fast enough none of the TCP connections dropped, so no biggie
15:36:03 <bringert> shapr: Koen will give a talk on QuickCheck 2 on thursday btw
15:36:07 <bringert> http://www.cs.chalmers.se/Cs/Research/Functional/Meeting/2004/index.html#Koen-Nov-11
15:36:08 <shapr> oh BOY!
15:36:49 <shapr> man, I want a preview copy of QC2 so much!
15:37:11 <bringert> come to the talk and ask nim :-P
15:37:15 <bringert> well, off to bed now
15:37:18 <shapr> I wish. No way I can.
15:37:21 <shapr> g'night bringert 
15:37:31 <bringert> g'night #haskell
15:37:56 <shapr> Man, I should email him for a transcript.
15:40:12 <Pseudonym> Free cakes.  BBL
15:56:15 * shapr boings
16:00:00 <Lemmih> Hey shapr.
16:00:05 <shapr> greetz Lemmih 
16:00:11 <shapr> how's the wheel treating you?
16:01:07 <Lemmih> It's not so bad.
16:03:08 <Lemmih> shapr: Feeling like installing HSQL and HaskellDB?
16:04:01 <shapr> not really, more in the mood to hack on Flippi on the way to Fermat's Last Margin.
16:09:49 <stepcut> darcs pull seems to hang for me quite often...
16:12:22 <Igloo> Is it using CPU when "hung"?
16:17:56 <kosmikus> shapr: great, thanks
16:41:26 <Pseudonym> Mmmm... free cakes.
16:41:41 <Pseudonym> Cakes are like software.  Better when they're free.
18:10:51 <blackdog_> code in the morning, beach at lunch... god, i'm glad to be living in sydney...
18:12:59 <dons> blackdog: I live in sydney too... and I know what the weather is like today ;)
18:14:00 <blackdog_> the water's still freezing, though.
18:14:41 <dons> oh. I guess another month or so till it gets toasty warm
18:15:13 <blackdog_> don: quick dumb question: is there a way to make ghc look for GHC.Blahmodule locally? I'm feeding it the hcr file on the command line, but it insists on using the installed version...
18:15:48 <dons> ah, so you want to turn off searching for modules in some other dir?
18:16:06 <Igloo> Is it in GHC/Blahmodule.whatever?
18:16:29 <Igloo> AFAIK . should win. -v will show you where it's looking
18:16:39 <dons> you could use -i to set empty the list of dirs to search, then -i. to set it to only pwd
18:16:57 <blackdog_> ok, i'll try that. cheers.
18:17:03 <dons> also, n.b. there's some behaviour change wrt -i. between 6.2.2 and head
18:17:37 <Igloo> What are you trying to do OOI?
18:17:55 <Igloo> And is it going to work when the base package gets linked in?
18:18:20 <dons> sounds a bit suspicious, doesn't it ;)
18:18:24 <blackdog_> i've got some code that analyses hcr and feeds back in c--.
18:18:37 <blackdog_> i can worry about the linking at the other end. :)
18:18:46 <dons> hehe
18:31:46 <stepcut> dons: I think I figured out one of the things that makes the emacs mode tricky
18:32:28 <stepcut> In vi, if you hit : and then start entering characters, nothing is evaluated until you hit enter
18:33:15 <dons> yep. sort of (we still echo to the screen on each char)
18:33:43 <stepcut> in emacs, if I hit C-x it starts evaluating and if I hit C-c next, then it immediatly runs the action, or if I hit C-x C-y, it immediately recognizes that there are no key sequences that start with C-x C-y
18:34:34 <dons> would C-x switch lexers, using the new framework, then?
18:34:53 <dons> what action is run by C-x C-c?
18:35:03 <dons> and what is evaluated by C-x alone?
18:35:05 <stepcut> that is how I did it before, when you hit C-x, it then switched to a 'lexer' that understood anything that could come after C-x
18:35:17 <stepcut> C-x C-c is quit 
18:35:36 <dons> sounds good. in vi mode ':' switches lexers too
18:35:48 <stepcut> C-x by itself does not do anything
18:36:11 <dons> except perform the lexer switch, right?
18:36:22 <stepcut> right
18:36:39 <dons> I think this sounds doable. Similar issues were /foo and :s/x/y/g in vi mode
18:36:49 <stepcut> The other part that makes it tricky is writing the describe-key command...
18:36:53 <dons> yes
18:37:19 <stepcut> namely, I hit C-h k, and then I enter a key sequence and it will tell me what it does
18:37:35 <dons> one idea would be that emacs keys bind to, say, EAction Action String
18:37:51 <stepcut> right, that is what I did in the previous generation
18:38:04 <dons> so the lexer associates a key with both an action, and any doc for that key.
18:38:27 <stepcut> and then I can stick something in the state that says where to run the action or print the help stuff
18:38:54 <dons> yep. that would do.
18:39:03 <stepcut> the third piece is how to rebind keys to actions
18:39:25 <dons> but I think that is pretty easy now. if you look at the :map/:unmap code in Vi.hs
18:40:03 <dons> though, binding to Haskell function names hasn't been done yet.
18:40:08 <dons> you could do that with a table though
18:40:28 <dons> or with eval
18:40:44 <stepcut> what do you currently do in :map  ?
18:40:47 <dons> rebinding keys to sequences of other keys is easy now, is what I mean
18:41:00 <dons> :map f jkjk
18:41:21 <dons> binds 'f' to the actions (joined with >>) that 'jkjk' would produce
18:41:26 <stepcut> so it is like a macro ?
18:41:35 <dons> yep. nullary macro
18:42:04 <stepcut> hrm
18:42:07 <dons> now, something like :let f = insertE '!', i'm playing around with hs-plugins eval for this
18:42:27 <dons> just dealing with linker issues atm
18:42:37 <stepcut> cool
18:42:58 <dons> but the idea would be to compile the rhs to a new Action at runtime, and bind 'f' to it, generating a new lexer fragment to augmment the current lexer table
18:43:22 <stepcut> right
18:43:43 <dons> other things we might like, :m + Module (adds a module to the scope for :let commands)
18:43:47 <dons> or :type
18:44:04 <dons> :eval foo inserts the result of show (foo) into buffer, perhaps
18:44:29 <dons> :type might print the type of the function at the current point
18:45:39 <stepcut> so, let's say that I have a toplevel lexer that recognizes C-c (among other things), and switches to a lexer that recoginizes anything that can come after C-c
18:45:51 <dons> yep
18:46:19 <stepcut> then, let's say that I want to rebind C-c C-x, that means I need to create a new C-c lexer, and then create a new top-level lexer that calls the new C-c lexer, yes ?
18:47:31 <dons> hmm. you create a new C-c lexer, and then use >||< to add it to the current (top-level) lexer
18:47:59 <stepcut> I would need to add it to the start of the current lexer so it has precedence ?
18:48:15 <dons> as the second argument to >||<
18:48:22 <dons> eval_map st emode lhs rhs = mode >||< bind
18:48:27 <dons> bind     = string lhs `action` \_ -> Just (foldl (>>) nopE as)
18:48:44 <dons> so, that takes an existing lexer ('mode') and generates a new lexer ('bind')
18:48:53 <dons> joins 'bind' onto 'mode'
18:48:59 <dons> and returns the result
18:49:27 <dons> if 'bind' overlaps any regexes in 'mode', the 'bind' ones are used instead
18:50:10 <Igloo> You probably want to warn or something if ^C or ^C^X<anything> is bound already
18:50:21 <dons> maybe. 
18:50:44 <dons> to do that, call execLexer with "^C", and if you get back and Action, you know it is already bound
18:51:07 <dons> fancier ways of inspecting the lexer table are still todo
18:51:14 <stepcut> right, so I can not update an existing lexer, but I can add a wrapper around it that checks for overrides, and then if no matches are found, pass-through to the original lexer ?
18:51:42 <dons> no. you can update an existing lexer with >||<, generating a new lexer
18:51:47 <Igloo> Hmm, if I ":map zz ifoo<ESC" ":map z ibar<ESC>" then after pressing z once it gives me a second after which it inserts bar
18:52:07 <Igloo> zz quickly inserts foo immediately. zx inserts bar and deletes the r immediately
18:52:07 <stepcut> dons: hrm, I will have to look at how >||< works internally
18:52:19 <Igloo> (in vim)
18:52:54 <Igloo> But you probably didn't want to know that  :-)
18:52:54 <dons> much the same as a FiniteMap that detects for collisions on insert
18:53:06 <dons> hehe
18:53:53 <dons> the only reason the ctk lexer isn't in terms of a finitemap is because they are slower on small tables than arrays and difference lists
18:53:56 <Igloo> Actually, I think it's fairly easy if you have a trie-like thing mapping input to actions
18:54:18 <Igloo> You just wait for $delay if you both have an action and have children
18:54:45 <dons> hmm. I wonder how to do that in the currrent framework
18:55:13 <dons> also, remember there is no constraint on how you write the binding, other than the type of keymap.
18:55:21 <dons> so you don't have to use the lexer lib
18:55:45 <Igloo> Although if the timeout happens you have to reparse the input from the end of the first command
18:56:31 <stepcut> dons: right, though, I think this lexer lib is the way to go
18:56:51 <dons> I think so for vi[m] and emacss
18:56:52 <stepcut> dons: looking at the code, i think I understand how >||< works now
18:57:24 <dons> it's just an edsl for the kind of tables we were trying to construct with FMs last week, I think
18:57:42 <stepcut> dons: right, it looks like a much better way of doing the same thing
18:58:02 <dons> maybe nano mode can get away with just a case key of 'a' -> action.. style binding
18:58:13 <stepcut> heh
18:58:17 <stepcut> probably
18:58:40 * Igloo plays a but more with things like mapping zifoobar and typing zifooq and thinks this could get quite tricky. OTOH, as long as the design is very simple I think it should be easy to make it all work out
18:59:18 <dons> maybe we don't need to emulate the bizarro mapping behaviours, though
18:59:40 <dons> i'm quite open to more logical behaviour
18:59:51 <Igloo> It would be cool (ultimately, not in 0.1 or anything) to be able to emulate everything out there, though
18:59:58 <dons> yep. 
19:00:21 <Igloo> I don't defend what vim does as logical - I didn't know what to expect until I tried it  :-)
19:00:42 <Igloo> But it does seem to be consistent within itself, at least
19:00:58 <dons> that's good to know :)
19:01:22 <stepcut> i finished my ed mode, it's pretty short -> keymap cs = mapM_ (\_ -> msgClrE >> msgE "?") cs
19:01:43 <Igloo> :-)
19:02:06 <stepcut> :p
19:02:14 <dons> huh
19:02:19 <Igloo> MS Yi: keymap cs = mapM_ (\_ -> msgClrE >> msgE "I notice you are trying to edit a file. Do you want some help with that?") cs
19:02:31 <dons> hehe
19:02:34 <stepcut> dons: have you used ed ?
19:02:40 <dons> not in ages
19:02:55 <dons> it's like ex though, isn't it?
19:03:11 <dons> but more sed-ish
19:03:25 <dons> hmm. we should write a sed mode too. that might be fun
19:03:29 <Igloo> $ ed
19:03:29 <Igloo> d
19:03:29 <Igloo> ?
19:03:29 <Igloo> y
19:03:29 <Igloo> ?
19:03:32 <Igloo> q
19:03:34 <Igloo> $ 
19:03:42 <dons> hehe
19:04:04 <Igloo> (OK, so you have to type enter after each letter, but other than that it's accurate)
19:04:18 <stepcut> printing ? is the all most people ever get ed to do, then they log into a different console and run 'killall ed'
19:05:15 <Igloo> ed is intuitive, for vi users at least, though. I was able to edit a config to fix a machine with /usr broken without ever having used it before and without any docs
19:05:55 <stepcut> it is not the least bit intuitive for non-vi users
19:06:02 <stepcut> except maybe edlin users...
19:08:01 <stepcut> sadly, ed is not statically linked on my system... making it much less useful
19:08:49 <Igloo> Nor here, but if it exists then so does /lib
19:09:08 <stepcut> well, if /lib exists, i can just use vi :p
19:09:25 <stepcut> well, I guess not
19:09:34 <stepcut> vi is in /usr/bin not /bin
19:10:26 <stepcut> actually, there is a vi in my /bin 
19:10:57 <stepcut> elvis-tiny
19:11:03 <stepcut> 3660 bytes...
19:11:57 <dons> now that's an editor
19:12:40 <stepcut> elvis-tiny = 3660 bytes, ed = 38544 bytes
19:22:18 <stepcut> aha, /bin/vi calls /bin/elvis-tiny which is 67416 bytes
19:22:40 <blackdog_> 2.3M for yi already... don, why is the static version smaller?
19:23:26 <dons> no hs-plugins linked in
19:23:36 <dons> you can strip the binary, and it goes down to about 400k, afaik
19:23:58 <dons> hs-pluginss pulls in posix, haskell-src hmm, other stuff too
19:25:27 <dons> shapr was talking about this a week or 2 back
19:29:22 <dons> strip libHSyi.a
19:37:41 <dons> $ du -hs yi-static 
19:37:42 <dons> 668K    yi-static
19:38:02 <blackdog_> is anyone working on it but you atm? 
19:39:12 <dons> there are a few (3,4?) people writing editor bindings, at various speeds
19:40:09 <blackdog_> anyone writing X/Carbon guis to it? Have you got a clearinterface API yet?
19:40:23 <dons> not you too!
19:40:36 <dons> talk to patrykz about X/Carbon.
19:40:51 <dons> the interface is pretty clear. it would be nice to have someone write this though
19:41:50 <dons> someone will want a wxHaskell ui bad enough, eventually, to write it
19:49:04 <blackdog_> development through the desperation of others? Nice. :)
19:50:00 <dons> lazy development
19:50:14 <dons> they'll eventually force themselves
19:50:38 <dons> I just don't have time to write code that I won't use
19:51:06 <dons> but I'm trying to make it fairly easy to write other ui's
19:51:09 <blackdog_> That's more or less evident through the design of yi. :)
19:51:36 <dons> what, "don't have time", or "fairly easy ui's" ?
19:52:04 <blackdog_> well, i've been wanting to play with HOC for a bit anyway. Maybe i'll take a stab at it.
19:52:21 <dons> ah. that  would be nice indeedy
19:52:25 <blackdog_> don't have time. anything that can be done by a plugin is left to that...
19:53:38 <dons> yep. it's an editor core as a library. sjw says it is an (forall a. editor-gui-edsl of a)
19:54:29 <dons> reminds me to make ncurses a plugin
19:55:05 <dons> -Werror is my new favourite flag
22:44:55 <psi> ugh! how long does it take to build ghc? it's been working for over 4 hours now on my g4 1.2 GHz
22:48:08 <dons> about 17 minutes on a p4 2.5ghz
22:48:16 <dons> maybe 2 hrs on a 700mhz celeron
22:48:25 <dons> it depends on your build flags, a lot
22:48:57 <dons> are you building with hslibs? with profiling? with profiled libraries etc
22:49:29 <dons> is it a g4 mac, or a g4 linux? makes a difference too, I think
22:49:49 <dons> (g4 linux probably doesn't work registerised, so twice as slow)
22:49:53 <psi> i have no idea, to be honest :) i just wanted to give darwinports a whirl, and i didn't specify anything
22:50:12 <psi> it's on os x
22:50:17 <dons> well, you'll get the lot. but 4hrs should be at the far end. 
22:50:22 <dons> what's building now?
22:51:05 <dons> oh. they probably bootstrap via a binary, rather than doing a .hc bootstrap, that's slower too
22:51:27 <psi> there is very little output. they have stripped away all make output
22:51:34 <psi> it just says building ghc with target all
22:52:26 <psi> it's doing it from ghc-6.2.2-darwin-bootstrap.tar.bz2
23:00:58 <musasabi> morning
23:03:01 <psi> i think it's building hslibs now
23:58:38 <WhiteZero> @find Mega Man Zero 3
23:58:39 <lambdabot> Sorry, I don't know the command "find", try "lambdabot: @listcommands"
