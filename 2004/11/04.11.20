00:21:58 <musasabi> morning
03:11:47 <jeff2> are you allowed to use an if..then in a where clause?
03:12:50 <TheHunter> you mean like if b then where {...} else where {...}? Nope.
03:13:04 <jeff2> like:                  where t = if True then False
03:13:24 <TheHunter> that's ok, but you always need an `else'
03:14:11 <jeff2> oh ok. that makes sense
03:14:21 <jeff2> thanks
03:34:07 <flodin> how do you return bottom?
03:34:36 <TheHunter> error "foo" or undefined.
03:34:56 <musasabi> or "bot = bot"
03:35:32 <musasabi> all return a slightly different error message
03:36:24 <musasabi> exception: {<<loop>> (for the recursive), undefined (for undefined) and "foo" (for error "foo")}
03:36:46 <musasabi> of course different implementations will behave in different manners
03:38:04 <jeff2> flodin: error "foo" is usually the most useful
03:39:29 * TheHunter thinks there should be a short alias for undefined in the prelude (like `bt
03:39:41 <TheHunter> ' or `bot'
03:40:39 <jeff2> Prelude> undefined
03:40:39 <jeff2> *** Exception: Prelude.undefined
03:44:20 <flodin> okay, seems there's not just one bottom :P
03:45:48 <TheHunter> well, if you don't enter the IO monad they're indeed all the same (however, you can still distinguish undefined :: a -> b and const undefined :: a -> b using seq)
03:54:10 <flodin> but can you do pattern matching on bottom?
03:56:25 <TheHunter> the short answer: no.
03:56:51 <TheHunter> the long answer: http://www.cs.chalmers.se/~nad/software/ChasingBottoms/docs/
03:57:36 <flodin> :) thanks, i'll settle for the short answer today
03:58:22 <TheHunter> Things like non-termination obviously can't be caught.
03:59:59 <flodin> hm right, that's pretty obvious when you think about it, unless you mark a function as nonterminating manually somehow
04:00:02 <flodin> that solution seems kinda shaky
04:01:22 <TheHunter> indeed, it's a hack, and you need a really good reason for doing such stuff.
04:35:28 <Lunar^> sleep mode off
04:39:52 <Lemmih> Good morning, Lunar^.
04:40:04 <Philippa> flodin: the long answer has its uses
04:40:14 <Philippa> like seq, IIRC
04:41:31 <flodin> seq?
04:42:42 <Philippa> useful function for avoiding laziness
04:43:24 <Lunar^> flodin: "x `seq` y" force x evaluation and returns y
04:43:57 <flodin> i see. That answers a question suspected I would need to ask soon :)
04:44:51 <flodin> well, partly. Can you force evaluation and return same? Or rather, is there a shorter way than x `seq` x
04:45:55 <flodin> for cache locality it makes sense to perform a series of computations right away rather than wait with some until later. I know all of them are going to be touched on eventually
04:46:51 <musasabi> that is easy if you put seq in the right places*
04:46:51 <flodin> then again maybe that doesn't usually come up as a bottleneck...
04:46:52 <Lunar^> flodin: x `seq` x doesn't really mean anything
04:46:54 <Philippa> $! might help, IIRC
04:47:07 <musasabi> *) right place is quite nontrivial.
04:47:12 <Philippa> and you'll probably want a deepseq variant
04:47:25 <Lunar^> flodin: what's used is : f $! x = x `seq` f x
04:47:33 <Philippa> "oh look, I've got a head-strict list! Too bad the rest's lazy"
04:48:34 <Lunar^> flodin: I've seen another trick in Tomasz' code : use unreachable guards to force evaluation
04:48:52 <musasabi> and case instead of let
04:49:00 <Philippa> if they're unreachable, how do they force evaluation?
04:49:07 <Philippa> I'd figured the case instead of let
04:49:19 <Philippa> case rather inherantly has to evaluate that which is being matched
04:49:20 <Lunar^> flodin: f x y z | x `seq` y `seq` z `seq` False = undefined
04:49:53 <Philippa> ah, it's an unmatchable guard rather than an unmatchable pattern
04:50:01 <Lunar^> yes
04:50:17 <Philippa> I wouldn't say the guard were 'unreachable', I read that as meaning you never get as far as testing it
04:50:31 <Lunar^> it's exactly the opposite :)
04:50:37 <Philippa> right :-)
04:57:22 <flodin> well, i'll have to get back to you on that when i've read up on guards, let, case, and $! ;)
05:12:16 * shapr awakens
05:18:40 * shapr boings
05:18:50 <shapr> good afternoon #haskell!
05:19:02 <shapr> hiya sadjester, learning Haskell?
05:20:33 <Lemmih> It's getting too cold to unicycle /-:
05:20:46 <vegai> "shapr awakens" by Anne Rice ;-)
05:21:10 <shapr> Lemmih: I can unicycle in -18Â°C, but I haven't tried anything colder.
05:21:16 * shapr lurches towards vegai 
05:21:25 <vegai> eep!
05:21:26 <shapr> hoi jyp, hoe gaat het?
05:21:42 <jyp> Ok I guess ;)
05:21:57 <jyp> My dutch hasn't much improved though
05:22:08 <shapr> vegai: "The Moomin Returns, Part III - Vegai the Hunted"
05:22:13 * vegai chuckles.
05:22:16 <shapr> Yah well, not mine either.
05:22:41 * shapr viciously fuzzes vegai as is Moomin standard behaviour.
05:23:46 * shapr tries to figure out how to dynload yi-core while using yi.
05:24:53 <shapr> dons: main and remain, heh!
05:27:19 <Lunar^> shapr: I'm trying to debug yi-inplace on Mac OS X
05:29:54 <KiMoS> what im doing wronge in this script  
05:29:54 <KiMoS> 	cijfersom :: Int -> Int
05:29:54 <KiMoS> 	cijfersom n = n `rem` 2 + n `div` 10
05:30:29 <KiMoS> cijfersom  must count the int     like  cijfersom 123    will return 6   (1+2+3 = 6 )
05:30:31 <Lunar^> shapr: Do you have your Yi build handy ?
05:30:51 <kristnjov> script?
05:31:08 <KiMoS> module.. ?
05:31:17 <kristnjov> pork chop?
05:31:21 <KiMoS> i dont know what u call thos things in haskell 
05:31:30 <kristnjov> well a function i'd call it
05:31:45 <KiMoS> yea function  :)
05:32:47 <KiMoS>  n `rem` 2   <<< return the first int in the  enterd int like   123   return 1  
05:32:58 <KiMoS> and the div  return the last one
05:33:09 <KiMoS> ohh sum
05:33:31 <KiMoS> nope
05:37:44 <Lemmih> KiMoS: cijfersom :: Int -> Int
05:37:44 <Lemmih> cijfersom 0 = 0
05:37:44 <Lemmih> cijfersom n = n `mod` 10 + cijfersom (n `div` 10)
05:39:11 <KiMoS> Lemmih thanks alot :D  i was close 
05:40:04 <KiMoS> you call cijfersom again to get the int in the middle if the int is more then 3 element  right?
05:40:07 <Lemmih> KiMoS: It's a very unorthodox way of looking at numbers.
05:40:49 <KiMoS> yea
05:42:16 <KiMoS> why do you use cijfersom 0 = 0 ?   i didnt get this one
05:42:22 <Lemmih> Are you sure you don't want to use a String instead of an Int?
05:43:02 <kristnjov> read (head (show n))::Int
05:43:02 <kristnjov> try that
05:43:19 <kristnjov> that didn't work no..
05:44:42 <Lemmih> KiMoS: You must understand that the number 123 isn't stored as '1' followed by '2' followed by '3'.
05:47:39 <KiMoS> its stored  1 using the rem and then again 2 using the rem and the 3 using the div  
05:47:41 <KiMoS> right?
05:50:44 <Lemmih> I think you totally misunderstood me.
05:51:13 <KiMoS> ... how?
05:54:55 <Lemmih> Do you know of other number representations that the decimal system?
05:56:07 <kristnjov> i wouldn't count on it since he refers to this as scripting
06:08:38 <Lunar^> dons: It seems that each .o gets its own __module_registered symbol
06:09:33 <Lunar^> dons: This symbol come from StgMacros.h:800 (START_MOD_INIT) on GHC 6.2.1
06:10:31 <Lunar^> dons: With ar, libHSyi.a and HSyi.o get this symbol defined 21 times
06:14:58 <Lunar^> dons: though it's always marked as 'b' (lowercase mean local, the manpage says)
06:24:00 <Lunar^> dons: I need tu build GHC CVS on OS X, because this code in the linker seems to have moved a bit
06:57:21 * shapr explorbs
06:57:26 <shapr> Riastradh: EXPLORB!
07:00:10 <shapr> Lunar^: hiya! how are ya?
07:03:46 * shapr bounces cheerfully
07:04:02 <shapr> sadjester: hiya! Are you new here?
07:08:15 <shapr> aha
07:08:17 <shapr> :reboot
07:08:19 <shapr> that's pretty obvious
07:08:38 <shapr> works just fine as far as I can tell.
07:09:26 <shapr> dons: can I call make at the same time as reboot? or I do I need to rebuild outside the editor.
07:10:44 <shapr> vim doesn't have some way to open new files after the editor is already started?
07:11:55 <Igloo> :e
07:37:08 <Lunar^> shapr: Could you please run an 'nm libHSyi.a  | grep module_reg | wc -l' please ?
08:34:24 <shapr> Lunar^: 21
08:36:40 <Lunar^> shapr: I think that GHC 6.2.1 OS X linker doesn't handle local symbol well
08:42:50 <shapr> that sucks
09:03:38 <Lunar^> shapr: I need to build GHC CVS, but I feel lazy
09:07:09 <shapr> same here, and me too
09:16:01 <Lunar^> shapr: same here ?
09:16:15 <Lunar^> uh ok :)
09:16:28 <shapr> yes, I need to build GHC CVS, and I feel lazy.
09:21:22 <tromp> are you gonna beat the world record of tall unicycles, shapr:-?
09:37:53 <shapr> tromp: nah, best I've seen yet is over 110 feet unsupported.
09:42:55 * Riastradh hiccups.
09:55:56 * shapr boings
09:56:09 * xerox takes photos
09:56:52 <shapr> I was hopping my unicycle today in the middle of the pedestrian shopping area. Amusingly, the kids are all used to me now, only the adults continue to be amazed.
09:57:07 <xerox> hehe, nice
09:57:13 <shapr> Man, I want to talk to Henning Thielemann.
09:57:14 <xerox> is it difficult to learn?
09:57:36 <shapr> Unicycling? No, not really.
09:57:48 <shapr> It's sort of like learning to walk I think.
09:57:58 <xerox> haha :)
09:58:12 <xerox> i skate and do bmx ^__^
09:58:20 <shapr> Requires a lot of practice and falling over at first, and then becomes so easy it's hard to believe you never did it before.
09:58:22 <xerox> more skate than bmx btw
09:58:48 <shapr> I used to do skateboarding, but unicycling is a lot more fun.
09:59:00 <xerox> how much does it cost a unycicle?
09:59:19 <shapr> A good starter uni is about 100euro.
09:59:40 <xerox> mmh i'll think about it, videos are really nice to see, it seems a lot of fun
09:59:51 <shapr> A really excellent mountain unicycle is about 400 euro.
10:00:06 <shapr> The next step up is the 1400euro deluxe model of that same type.
10:00:20 <xerox> whoa
10:00:38 <shapr> Unis come in several flavors, mountain, trials, freestyle, commuting, and learning.
10:01:30 <shapr> Freestyle is like artistic dancing, or artistic ice skating. Trials is like vertical and horizontal obstacle courses.
10:02:05 <shapr> The others are obvious, I think.
10:02:50 <xerox> :D
10:03:26 <xerox> time to learn emacs!  (trought the tutorial)
10:03:30 <shapr> I'd like to get a trials uni, but I think I'd kill it since I weigh 93 kilos. So I've been doing trials stuff with my mountain uni. Even so, my KH24 makes scary creaking noises when I put heavy pressure oni t.
10:03:46 <shapr> I can help you with emacs if you have some questions.
10:03:50 <vegai> j is a surprisingly good text editor, btw
10:04:14 <vegai> considering the source (har har)
10:04:15 <shapr> I use emacs for news, mail, irc, shell, editing, music playing, etc.
10:04:44 <shapr> But... emacs has some warts that I don't think will ever be fixed.
10:04:46 <xerox> i didn't like the C-something thing
10:04:58 <shapr> So now there's a new editor, written in Haskell of course.
10:05:01 <xerox> too much, but reading carefully and slowly it seems to make sense
10:05:20 <xerox> and i don't like elisp :\
10:05:22 <vegai> I definitely don't want an editor war, but check this if you have java: http://www.armedbear.org
10:05:28 <shapr> Yes, I don't like elisp either.
10:05:38 <shapr> I also don't like Java.
10:05:44 <vegai> me neither
10:05:56 <shapr> Though I'm willing to steal features for Yi
10:05:58 * xerox agrees
10:05:59 <vegai> I'm having a terrible dilemma ;)
10:06:10 <shapr> What's your dilemma?
10:06:12 <xerox> shapr which kind of behavior will Yi have?
10:06:22 <shapr> anything you want.
10:06:23 <vegai> shapr: that I like j but almost loath java
10:06:26 <xerox> vi-like, emacs-like.. or Yi-like :D
10:06:31 <vegai> what's yi?
10:06:33 <shapr> Right now Yi does mostly vim and only some emacs.
10:07:01 <xerox> console or x11 ?
10:07:06 <xerox> or console and x11 :)
10:07:14 <shapr> http://www.cse.unsw.edu.au/~dons/yi.html
10:07:26 <shapr> Yi is console only right now, but the UI is just a plugin.
10:07:34 <shapr> Also, Yi is 36 days old as of today.
10:07:47 <xerox> nice ^_^
10:07:48 <vegai> sounds promising!
10:08:02 <shapr> Haskell allows for rapid development. Dons kicks butt at high-speed coding.
10:08:33 <shapr> Yesterday, Dons got Yi to beat emacs is terms of dynamic behaviour.
10:08:51 <shapr> emacs is pretty much an elisp interpreter with window bindings.
10:09:02 <xerox> neat
10:09:04 <shapr> you change anything elisp in emacs while it's running.
10:09:05 <vegai> what do you mean with "Yi does mostly vim and only some emacs."?
10:09:17 <shapr> vegai: it's just a matter of changing your keybindings.
10:09:19 <vegai> I guess Yi doesn't need a scripting language ;)
10:09:38 <vegai> is it aware of the code as well as emacs is?
10:09:48 <shapr> Right, I had the idea to write a Haskell emacs that used something like Joy for a scripting language, but Yi doesn't *need* a scripting language.
10:09:58 <shapr> vegai: not yet, but it will be much much better than emacs or vim
10:10:09 <shapr> modes and synhl will be based on parsers.
10:10:15 <xerox> not for emacser neither for vimmers :P
10:10:26 <shapr> So you'll be able to do neat tricks like parse tree macros.
10:11:02 <shapr> yi 0.1 will be released once the basic syntax highlighting is in place.
10:11:09 <vegai> my needs are simple. I want that when I press tab, the editor indents correctly
10:11:17 <vegai> and yes, syntax highlighting
10:11:26 <shapr> Last night dons added the ability for Yi to reload itself entirely when editing itself.
10:11:43 <shapr> So, yi is more flexible than emacs at this point.
10:11:50 <shapr> You can edit the core and run :reboot
10:11:51 <xerox> i want type inference to do smart autocompletition ^_^
10:11:56 <shapr> xerox: soon :-)
10:12:10 <xerox> so i should stop learning emacs?
10:12:13 <shapr> vegai: there is neither indentation nor synhl at the moment.
10:12:16 <xerox> hehe
10:12:51 <shapr> but basic synhl is the next feature, then 0.1 will be ready for release.
10:12:56 <xerox> (what does 'yi' stands for?)
10:13:05 <shapr> You know what GNU and HURD and etc stand for?
10:13:10 <xerox> yea
10:13:12 <shapr> They're all recursive names.
10:13:17 <shapr> Gnu's Not Unix
10:13:20 <xerox> yep
10:13:27 <shapr> well, Yi is the most recursive name you could ever wish for...
10:13:35 <shapr> Do you know lambda calculus?
10:13:36 <xerox> uuuh
10:13:40 <xerox> yep
10:13:46 <shapr> you know the Y and I combinators?
10:13:54 <shapr> @eval Y I
10:14:01 <xerox> i don't know haskell :(((
10:14:16 <shapr> Y and I are pretty standard lambda calculus combinators.
10:14:24 <lambdabot> out of fuel - use @resume to continue
10:14:26 <shapr> the very most basic combinators are S, K, and I
10:14:32 <shapr> @get-definition S
10:14:32 <lambdabot> S = \f g x.f x (g x)
10:14:36 <xerox> i know lambda calculus in terms of scheme programming
10:14:38 <shapr> @get-definition K
10:14:39 <lambdabot> K = \x y.x
10:14:41 <shapr> @get-definition I
10:14:42 <lambdabot> I = \x.x
10:14:46 <shapr> @get-definition Y
10:14:46 <lambdabot> Y = \f.U(\g.f(U g))
10:14:56 <shapr> @get-definition U
10:14:56 <lambdabot> U = \f. f f
10:14:57 <xerox> what does "." means ?
10:15:14 <shapr> it means 'start the function'
10:15:18 <shapr> \x -> x + 1
10:15:21 <shapr> \x . x + 1
10:15:28 <shapr> lambda x: x + 1
10:15:31 <shapr> that last is Python
10:15:33 <xerox> \f is (define f (lambda ..
10:15:45 <xerox> ok i know python enought to understand translations
10:15:52 <shapr> nah, \f means name the input f
10:16:00 <xerox> (it was a question)
10:16:03 <shapr> what does a lambda look like in scheme?
10:16:07 <xerox> (the "\f is .."
10:16:10 <shapr> I've forgotten... :-(
10:16:11 <xerox> "lambda"
10:16:20 <xerox> or the greek letter in some wacky ides :D
10:16:23 <shapr> how do you write a function that takes a number and adds one to it?
10:16:30 <shapr> with a lambda?
10:16:38 <xerox> (define foo (lambda (x) (+ 1 x)))
10:16:42 <shapr> ok
10:16:56 <shapr> @get-definition Y
10:16:56 <lambdabot> Y = \f.U(\g.f(U g))
10:16:59 <shapr> @get-definition I
10:16:59 <lambdabot> I = \x.x
10:17:13 <xerox> i'm starting to understand..
10:17:15 <shapr> (define I lamdba (x) x)
10:17:24 <shapr> I is sort of like "execute"
10:17:37 <shapr> @get-definition U
10:17:38 <lambdabot> U = \f. f f
10:17:38 <xerox> "eval x" ?
10:17:43 <shapr> sort of, yeah.
10:17:48 <xerox> (define I (lambda (x) (x)))
10:17:52 <xerox> oki
10:17:54 <shapr> ah, right.
10:18:12 <shapr> (define U (lambda (x) (x x)))
10:18:22 <xerox> applyes x to itself
10:19:01 <shapr> (define Y (lambda (f) (U (lambda (g) (f (U g))))))
10:19:03 <shapr> I think that's right.
10:19:35 <xerox> let me indent it :P
10:19:38 * shapr grins
10:21:09 <xerox> ok now time to understand it hehe
10:22:04 <xerox> argh !
10:23:14 <shapr> @get-definition Y
10:23:15 <lambdabot> Y = \f.U(\g.f(U g))
10:23:34 <shapr> @get-definition I
10:23:34 <lambdabot> I = \x.x
10:25:09 <shapr> xerox: Do you see that it's infinitely recursive?
10:28:05 <Maddas> What does that kanji on the Yi page mean?
10:28:11 <Maddas> (assuming it is one)
10:28:31 <shapr> Yi is also the name of the Confucian concept of "The Source of all Righteousness"
10:28:54 <shapr> Guten Tag Maddas.
10:29:27 <Maddas> Guten Abend shapr.
10:29:28 <xerox> shapr: nearly
10:29:29 <xerox> ;)
10:29:31 <shapr> for info on Yi - http://en.wikipedia.org/wiki/Confucius#Theory_of_ethics
10:29:32 <Maddas> :-
10:30:08 <Maddas> Cool :-)
10:30:33 <xerox> such a thing :)
10:30:55 <shapr> "Yi is based on reciprocity." Pretty good for an open source project, yeah?
10:31:30 <xerox> ^__^
10:31:30 <shapr> xerox: as you can see, the name Yi is significantly more recursive than GNU, or HURD, or those names.
10:31:37 <Maddas> shapr: Heh, indeed
10:31:37 <xerox> absolutely.
10:32:18 <shapr> Yi is not yet ready for daily use, but it's getting close.
10:32:28 <xerox> another reason to learn haskell
10:32:29 <shapr> For now, you will need to know Haskell to use it.
10:33:31 <xerox> and of course
10:33:36 <xerox> a pretty-lambda thing
10:33:40 <xerox> \ is ...
10:34:30 <xerox> (somebody dissents.. ?
10:34:34 <shapr> ?
10:34:42 <Maddas> ?
10:34:45 <xerox> ouch.
10:34:50 <Riastradh> ?
10:35:09 <xerox> :(
10:35:11 <shapr> Riastradh: have you tried yi?
10:35:24 <shapr> xerox: what do you mean by a pretty-lambda thing?
10:35:45 <xerox> displaying the greek nice character
10:35:50 <xerox> instead of \ !
10:37:22 <xerox> ?
10:37:30 <shapr> ah, yes
10:37:34 <shapr> greetings SyntaxNinja!
10:37:39 <SyntaxNinja> hihi shapr
10:37:43 <Riastradh> What's yi?
10:37:52 <shapr> Yi is a editor written in Haskell.
10:38:19 <Riastradh> Link?
10:38:25 <xerox> how much time will pass before referring it as "teh editor"
10:38:33 <SyntaxNinja> shapr: how's hack?
10:38:37 <shapr> well, it's 36 days old now.
10:38:41 <xerox> ^_^
10:38:58 <shapr> SyntaxNinja: hack is good! dons got Yi able to reload/reboot itself and continue editing where you left off.
10:39:09 <shapr> Riastradh: http://www.cse.unsw.edu.au/~dons/yi.html
10:39:40 <SyntaxNinja> c00
10:41:11 <shapr> SyntaxNinja: how's hack with you?
10:41:17 <shapr> qabbalistic?
10:43:19 <SyntaxNinja> yes!! cabal's mascot is sitting here with me
10:44:51 <jadrian> hello
10:45:00 <shapr> greetings jadrian 
10:45:05 <jadrian> hello shapr
10:45:22 <shapr> hiya Sidney 
10:45:36 <Sidney> what a surprise
10:45:53 <jadrian> lists have sub-lists, trees have sub-trees,... what do you call these in the general case?
10:45:57 <jadrian> sub-data?
10:46:27 <jadrian> subdata :: a -> [a]  <---
10:46:30 <emu> recursively defined data-structures?
10:46:42 <emu> datatypes
10:47:22 <jadrian> emu: yes I'm talking about (simply) recursively defined data-structures
10:47:52 <jadrian> emu: and the question was, what do you call the sub-"things"... sub-data?
10:48:33 <emu> well, i don't know if there really is such a term.  but maybe sub-expressions
10:48:45 <jadrian> right...
10:48:52 <jadrian> expressions doesn't sound bad...
10:49:12 <jadrian> I thought of subterms too, but can't use "terms" since it is a specific data type I'm using
12:08:51 <shapr> hej ski 
12:09:08 <ski> hejhopp
12:09:22 * ski laggar tror han
12:09:46 <shapr> eller jag laggar...
12:09:50 <Maddas> What's the nick that Peter Simons uses again?
12:09:57 <shapr> peti
12:10:01 <Maddas> Thanks :)
12:44:19 <wilx> Who's Peter Simons?
12:45:02 <kristnjov> some founder of functional programming i think
12:45:06 <kristnjov> i'm probably wrong though
12:45:33 <wilx> Hmm, googling...
12:46:17 <Spark> rings a bell
12:46:47 <kristnjov> efnet:
12:46:47 <kristnjov> peti is peti@unixbyte.org * I'm not a real spoof, just a fake.
12:46:49 <kristnjov> peti on @#ddos.pl 
12:47:10 <kristnjov> quakenet:
12:47:10 <kristnjov> peti is peti@saved.name * I'm not a real spoof, just a fake.
12:47:10 <kristnjov> peti on @#hl2 @#!coding @#peti @#cpp @#kenshi @#mykristina @#hel1x 
12:48:14 <kolmodin_> didn't he write something on fast block based io in haskell? like a wc written in haskell thats faster then /bin/wc
12:48:50 <wilx> Seems so.
12:48:53 <shapr> Peter Simons wrote Postmaster, hsemail, hsdns, hopenssl
12:48:54 <wilx> I
12:48:58 <shapr> Y
12:49:04 <wilx> 'm reading about it now.
12:53:04 <xerox> wherE?
12:53:48 <wilx> http://cryp.to/
12:54:19 <ibid> heh, djb is a ripoff? ;)
12:59:51 <shapr> ibid: cr.yp.to is djb
12:59:56 <shapr> I think he was first.
13:00:42 <ibid> shapr: i know cr.yp.to is djb
13:00:48 <ibid> shapr: that's what prompted my comment
13:04:03 <shapr> ah, ok
13:04:20 <shapr> I should put more cycles into checking inputs before responding.
13:07:47 <SyntaxNinja> anyone know how long haskell-mode 1.45 has been out?
13:07:51 <SyntaxNinja> there are no changelog entries (
13:08:00 <shapr> no, I don't know.
13:08:24 <shapr> I think the gnumacs guy made the changes.
13:08:30 <SyntaxNinja> it's one of my few packages that I turned on a watchfile, and only noticed the new version because of that :)
13:08:37 <SyntaxNinja> I saw seme notes from an xemacs guy too
13:08:48 <SyntaxNinja> it's hilly around here! I did some biking and those hills killed me!  
13:09:00 <shapr> That's a great opportunity for exercise!
13:09:45 <SyntaxNinja> I was "sprinting" which means "not moving backward" :)
13:10:39 <stepcut> hey SyntaxNinja 
13:10:49 <SyntaxNinja> hi stepcut
13:11:27 <stepcut> haskell-mode 1.45 is for the weak, really haskell programmers use YI now :p
13:11:56 * shapr laughs
13:12:04 <shapr> speaking of which, have you seen last night's changes?
13:12:09 <stepcut> no...
13:12:15 <shapr> Yi is now more dynamic than emacs.
13:12:26 <stepcut> heh
13:12:27 <shapr> Emacs is Elisp written in C, then emacs written in elisp.
13:12:40 <stepcut>   * First go at rebooting yi ?
13:13:02 <shapr> At this point, Yi can edit its own core, save it, and 'reboot' the whole editor in about a second, coming right back to where you were.
13:13:10 <stepcut> nice
13:13:22 <shapr> emacs requires manual recompilation.
13:14:00 <SyntaxNinja> is there a debian package for yi yet? :)
13:14:08 <shapr> Don't think so.
13:14:11 <stepcut> now it just needs to run 'darcs pull -a' automatically
13:14:20 <shapr> stepcut: I was thinking about that.
13:14:55 <SyntaxNinja> I was reading the 'make' book, and was truly amaized by all the old tools it talked about, and how happy I am that they're gone.
13:15:10 <SyntaxNinja> "RCS is starting to be a strong contender against SCCS..."
13:15:16 * shapr coughs
13:15:17 <stepcut> SyntaxNinja: haha
13:15:23 <SyntaxNinja> "make has good support for FORTRAN"
13:15:31 <SyntaxNinja> etc
13:15:36 * shapr gicks
13:15:42 <SyntaxNinja> so of course, now we have darcs and Haskell
13:15:45 <SyntaxNinja> but what replaces make?!
13:15:51 <Lor> gmake :)
13:15:51 <stepcut> cabal ?
13:15:59 <Lor> sml's cm?
13:15:59 <shapr> SyntaxNinja: maak
13:16:00 <SyntaxNinja> yeah, gmake is only slightly better
13:16:07 <shapr> maak is realyl nifty.
13:16:13 <SyntaxNinja> stepcut: aww, you get brown-nose points ;)
13:16:31 <SyntaxNinja> OK, gmake makes make tolerable, so that's more than slight I guess
13:16:51 <stepcut> maybe an epigram derivative would make a good makefile language
13:16:58 <shapr> maak is written in Haskell, and it uses a very functional approach to.
13:17:02 <shapr> too
13:17:20 * Lor stfw, but can't find maak.
13:18:09 <shapr> first hit under "maak haskell"
13:18:11 <SyntaxNinja> so let me take a quick straw poll
13:18:21 <SyntaxNinja> for debian users, or those who can picture being debian users
13:18:38 <Lor> Bah, my browser doesn't support ssl.
13:18:44 <SyntaxNinja> would you prefer that I upload a package that is slightly broken, or even very broken, and let the autobuilders or the unstable users find bugs
13:18:57 <SyntaxNinja> or would you rather I wait a week until I have time to test the package properly
13:19:27 <stepcut> I vote for (b)
13:19:38 <shapr> er, what's the package? :-)
13:19:51 <ibid> depends on the package
13:20:22 <ibid> anything that people might use for real should go to (b)
13:20:48 <SyntaxNinja> well, let's say darcs... darcs had a dependency on tetex-utils that I didn't know about, and I really should have built it in a chroot partition.  this has never been a problem before, but the autobuilders choked on it this time, and the bug reporter was a little pissed.
13:21:01 <SyntaxNinja> ibid: this is unstable debian, though, ya know?
13:21:20 <ibid> SyntaxNinja: you are not supposed to upload stuff you *know* are broken to unstable
13:21:21 <SyntaxNinja> but in a few hours, I was able to reupload the package, and no problem.
13:21:28 <stepcut> SyntaxNinja: what tool do you use for building in chroot ?
13:21:34 <SyntaxNinja> ibid: I'm not talking about stuff I know are broken
13:21:40 <Lor> Incidentally, is anyone planning on going to Tallinn next September?
13:21:42 <SyntaxNinja> stepcut: I just do it by hand
13:21:45 <ibid> SyntaxNinja: neither should you upload a package you have not tested superficially
13:21:52 <stepcut> SyntaxNinja: how do you make the chroot though ?
13:21:54 <ibid> SyntaxNinja: okay, what *are* you talking about?
13:22:07 <shapr> Lor: ICFP?
13:22:09 <SyntaxNinja> stepcut: debootstrap, etc?
13:22:18 <ibid> SyntaxNinja: tried pbuilder?
13:22:19 <Lor> sharp, yeah.
13:22:19 <stepcut> SyntaxNinja: ok, just wondering
13:22:20 <SyntaxNinja> ibid: I also did test it superficially.
13:22:26 <shapr> Yes, I'm planning on going to ICFP.
13:22:27 <Lor> +^t
13:22:27 <ibid> SyntaxNinja: ok, then you're in the clear imho
13:22:50 <ibid> SyntaxNinja: you are not expected to find all bugs before uploading :)
13:22:56 <SyntaxNinja> ibid: I even have a little sanity check script to install, uninstall, purge, check out a basic repo, take a look at the changes, lintian check it, etc.
13:23:11 <ibid> i usually also try a simple use case
13:23:14 <SyntaxNinja> I only do that for darcs, but I mean to make the script more general
13:23:19 <ibid> not all of them and not even all important ones
13:23:32 <ibid> right, you said that :)
13:23:37 <ibid> my bad
13:24:16 <SyntaxNinja> so in general,, my point is, that I expect unstable users to be happy to flush out bugs, but I find that they're really abrasive when they report them
13:24:28 <ibid> not all of them :)
13:24:28 <shapr> Lor: http://www.scannedinavian.org/~shae/maak-trunk.tar.bz2
13:24:31 <SyntaxNinja> in this case, it didn't even affect anyone, since the autobuilder wouldn't build it, everyone just got the old version.
13:24:38 <SyntaxNinja> ibid: agreed :)
13:24:39 <shapr> SyntaxNinja: I totally agree with you.
13:24:58 <SyntaxNinja> I haven't tried pbuilder.  I'm planning to spend part of today cleaning up my procedures and such to make life easier
13:25:09 <ibid> SyntaxNinja: though the attitudes seem to be stronger than before about build breakage that could be detected by building in a chroot
13:25:15 <tautologico> maybe that's because debian stable is so out of date ?
13:25:26 <ibid> tautologico: it's not
13:25:33 <SyntaxNinja> I don't have much room on my laptop, but I have a woody chroot that I'm going to delete and put a sid chroot on there so I can do this easier, so tool suggetions would be most welcome
13:25:36 <ibid> well, depends :)
13:25:42 <tautologico> no ?>
13:25:52 <ibid> tautologico: but that's no excuse to use unstable if you can't stomach it
13:26:09 <ibid> tautologico: it's an excellent server distro still :)
13:26:16 <stepcut> SyntaxNinja: I wrote an ocaml program for making chroot's based on arbitrary sources.list files ... 
13:26:27 <ibid> blah
13:26:35 * ibid hates the c preprocessor
13:26:41 <tautologico> ibid: yes, and that's because I've given up using debian :)
13:26:42 <SyntaxNinja> testing is a nice compromise, so few people seem to run it
13:26:43 <Lor> If you want something reasonably stable and up-to-date, ubuntu might nowadays be worth checking.
13:26:46 <stepcut> (It, of course, requires that the sources.list actually include dists that have all the essential packages)
13:26:50 <tautologico> *that's why
13:26:51 * Lor has heard lots of praise about it.
13:26:56 <SyntaxNinja> ooh, haskell-mode 1.45 fixes "this --bug"
13:27:14 <stepcut> SyntaxNinja: -- sweet!
13:27:18 <tautologico> I heard about ubuntu
13:27:22 <shapr> I do think that Ubuntu needs to push fixes upstream into Debian or they'll piss off a bunch of people.
13:27:24 <ibid> SyntaxNinja: testing is not security-supported so it cannot be recommended for any real use
13:27:25 <tautologico> might check it 
13:28:36 * SyntaxNinja nods 
13:29:00 <SyntaxNinja> I use testing for my work computer. it's new enough that I get the latest of everything, but it rarely gets as severely broken as unstable can get
13:29:18 <ibid> i hope it's behind a firewall :)
13:29:35 <shapr> ScannedInAvian uses unstable, and has used it for more than a year.
13:29:39 <shapr> Haven't had any problems.
13:29:48 <shapr> Well, not any problems caused by debian at least.
13:39:35 * SyntaxNinja uploads new haskell-mode to debian
13:40:47 <Lor> Hm, I remember I once did a small change to my local haskell-mode because it was annoying in some way...
13:40:59 <shapr> probably the prompt-regex change.
13:41:01 <shapr> That's what I did.
13:41:09 <xerox> get the lastest and diff it out :)
13:41:38 <SyntaxNinja> and forward me the changes!
13:41:58 <SyntaxNinja> haskell mode has had the wrong type for getLine for probably its entire existence.
13:42:01 <Lor> No, it had to do with indenting.
13:42:03 <shapr> oh
13:42:08 <shapr> no surprise there
13:42:11 <SyntaxNinja> Lor: I hope you forward it upstream!!
13:42:35 <Lor> This was Ages ago, I'm surprised if it isn't fixed already.
13:43:48 * SyntaxNinja wouldn't be surprised
13:43:54 <SyntaxNinja> (scroll up 3 lines)
13:44:22 <Lor> Yep, my hacked haskell-mode is from 2000.
13:44:27 <Lor> I'm still using it. :)
13:49:22 <SyntaxNinja> hmm. somehow my debian QA page knew there was a newer upstream version, but I don't have a watchfile. how could this be?
13:49:36 * shapr has no clue
13:58:00 <Igloo> It guesses at what the watchfile should be given URLs in debian/copyright, I think
13:58:32 <Lor> What's a watchfile?
14:00:17 <SyntaxNinja> Lor: it's a tool for keeping track of whether there's a new upstream version of a package, by way of a regular expression.
14:06:58 <shapr> hej bojohan 
14:07:05 * shapr boings cheerfully
14:07:53 <bojohan> quiet tonight, eh?
14:08:01 <shapr> yah, there is much coding.
14:08:28 <shapr> Yi can now edit its own core and 'reboot' coming back to the same state.
14:09:22 <ibid> how does it do that?
14:09:37 * shapr cackles evilly
14:10:26 <Lor> Wow.
14:10:50 * ibid hates conditional compilation
14:10:57 <Lor> Its own core, _except_ for the hs-plugins bit that loads everything else?
14:11:22 <shapr> At this point, hs-plugins loads Boot.hs, and that loads everything else.
14:11:53 <kristnjov> in case anyone cares to listen to my new chipmod song, here it is http://kristnjov.com.loopiadns.com/krv-mich.XM
14:12:21 <shapr> I know that hs-plugins can be loaded inside hs-plugins, and I think reloaded too. I don't know whether Yi supports that at the moment.
14:13:38 <shapr> I do know that Yi is getting closer to full run-time reloading. Personally, I'm happy. Now I can edit Yi with Yi and reload the whole thing.
14:14:03 <Lor> Without closing the program?
14:14:13 <shapr> right
14:14:27 <Lor> What happens if you change datatype definitions?
14:14:40 <shapr> I don't know. I haven't tried that yet.
14:14:58 <shapr> You want to try it?
14:15:29 <Lor> Yi looks really interesting, but not right now.
14:15:40 <shapr> ok
14:15:41 <xerox> any chance to have the source without darcs?
14:15:47 <shapr> I can send it to you.
14:15:56 <xerox> thanks
14:17:09 <shapr> Lor: if you get into Yi and have questions, feel free to bug me.
14:17:24 <Lor> Will do.
14:17:43 <tuomov> I actually started writing a joe mode fro yi, but I can't get yi to compile anymore
14:17:59 <tuomov> does it require some new version of hs-plugins again, or?
14:18:07 <shapr> yes, it needs the latest nightly
14:18:23 <tuomov> where was it?
14:18:48 <shapr> um
14:18:54 <tuomov> ah, yafc had put it in bookmarks
14:19:10 <shapr> tuomov: http://www.cse.unsw.edu.au/~dons/hs-plugins/hs-plugins-Z-H-2.html#node_sec_1.1
14:19:26 <shapr> actually, ftp://ftp.cse.unsw.edu.au/pub/users/dons/hs-plugins/snapshots/
14:21:42 <shapr> xerox: http://www.scannedinavian.org/~shae/yi.tgz
14:21:50 <xerox> thank you
14:22:10 <tuomov> config.status: error: cannot find input file: mk/config.h.in
14:22:13 <shapr> greetz jadrian 
14:22:18 <shapr> tuomov: autoreconf ?
14:22:20 <jadrian> hello again shapr! 
14:22:42 <tuomov> that helped
14:29:13 <shapr> hiya jeff2
14:29:18 <shapr> looking for haskell info?
14:29:19 <jeff2> hey there
14:29:31 <jeff2> sure
14:30:06 <shapr> Spiffy,what's your prior exposure to functional programming?
14:30:15 <shapr> scheme? lisp? a stick? ;-)
14:30:29 <jeff2> none really
14:30:32 <shapr> ok then
14:30:38 <jeff2> just picked up haskell yesterday
14:30:43 <shapr> For school?
14:30:47 <shapr> Work? Fun?
14:30:49 <jeff2> nah for fun
14:30:53 <jeff2> i'm liking it a lot
14:30:58 <shapr> yah, it's great
14:32:05 <shapr> http://www.haskell.org/learning.html is the collection of learning resources.
14:32:06 <jeff2> i'm taking this discrete structures course in school, we programmed in imperative pseudo-code functions to determine various properties of sets and relations. its amazing how much simpler the haskell equivalents are
14:32:08 <shapr> Do you have any specific questions?
14:32:17 <jeff2> thanks, ill check it out
14:32:19 <shapr> Yes, I agree.
14:32:30 <xerox> shapr! do you play go?
14:32:36 <shapr> Not yet.
14:32:42 <xerox> whoa i saw a screenshot
14:32:47 <shapr> oh
14:32:50 <xerox> http://www.scannedinavian.org/~shae/ned-go.png
14:32:53 <shapr> ned wrote that.
14:32:56 * shapr waves to ned
14:33:05 <shapr> That's his Haskell OpenGL Go client.
14:33:16 <xerox> that's nice.
14:33:54 <xerox> the "yet" means that you're going to play it?
14:34:00 <psi> shapr: there is a go tournament in luleå the 28th :)
14:34:03 <shapr> Yes, I have a thunk to learning go.
14:34:24 <jeff2> shapr: can you look over my code at http://rafb.net/paste/results/yYB6Dp29.html?
14:34:25 <psi> i've signed up. i'm going to get so owned :)
14:34:33 <shapr> problem is that I tend to binge on new things, so I'm going to wait to learn go until I can play way too much go in a small amount of time.
14:35:16 <psi> 27th, even
14:35:32 <xerox> color faces of you emacs are *cough* *cough*
14:35:36 <shapr> :-P
14:35:38 <shapr> everyone says that.
14:35:42 <shapr> I claim hardware differences.
14:35:52 <shapr> xerox: that's the nicest thing anyone has said about my emacs color-theme.
14:35:59 <shapr> Most people says "AUGH MY EYES ARE BURNING!"
14:36:24 <xerox> haha
14:36:28 <xerox> it's just strange
14:36:29 <shapr> That what bringert and chucky said at EuroHaskell
14:36:36 <xerox> but this is nice: http://www.scannedinavian.org/~shae/pre-latex.png
14:36:42 <xerox> i mean, the upper part.
14:36:52 <shapr> Yah, that's emacs preview-latex mode.
14:36:59 <shapr> jeff2: you may want to investigate DData.
14:37:15 <shapr> DData has a Set type, I think. And it'll be the standard soon.
14:37:41 <Maddas> psi: Heh :-)
14:37:56 <Maddas> I tried playing Go on the 'net a little. I got so owned by everybody :-)
14:38:15 <jeff2> shapr: will do, thanks
14:38:21 <shapr> jeff2: domain == map fst, range == map snd
14:38:40 <shapr> There's some code in Data.Set I think.
14:38:47 <shapr> @index inverse
14:38:47 <lambdabot> bzzt
14:38:53 <shapr> @index transitive
14:38:53 <lambdabot> bzzt
14:38:57 <shapr> maybe not.
14:39:08 <Lor> What's the best go client for linux these days?
14:39:14 <psi> Maddas: i've played most of my on a real board, with the local go club. i think it's more fun than on the net.
14:39:27 <psi> but i haven't played in several weeks now, and i was never any good :)
14:39:35 <shapr> psi: are there any people interested in type theory in luleÃ¥?
14:39:42 <jeff2> @index set
14:39:42 <lambdabot> Graphics.UI.GLUT,Graphics.Rendering.OpenGL,Graphics.Rendering.OpenGL.GL
14:39:42 <lambdabot> Graphics.Rendering.OpenGL.GL.StateVar
14:39:48 <shapr> I'd like to chat with some functional geeks in person.
14:40:14 * Lor nowadays always hands out coins like go stones.
14:40:21 <psi> shapr: ugh. i don't even know what that is :)
14:40:46 <shapr> like people who study Haskell's type system.
14:40:50 <Lor> It's just such a neat way of holding flat circular objects.
14:40:57 <shapr> Are there any heavy Haskell geeks at luth?
14:41:08 <shapr> Lor: what's that?
14:41:17 <Maddas> psi: Oh, you actually play Go. I thought you just signed up without ever playing before :-)
14:41:27 <xerox> http://www.scannedinavian.org/~shae/wiggly.png <- ai guassing thing ?
14:41:41 <xerox> Maddas do you play on KGS ?
14:41:41 <shapr> That's from the ICFP content before the last.
14:41:52 <Lor> shapr, between your middle and index fingers, the index finger below the middle finger.
14:42:01 <shapr> huh, nifty.
14:42:06 <shapr> I gotta try that.
14:42:08 <psi> shapr: i don't know tbh. i guess the ones handling the haskell course :)
14:42:26 <xerox> Lor i think KGS client is the best, if you like to chit-chat
14:42:57 <xerox> IGS clients are nice, expecially the OpenGL one, but no chat.. only playing, a little boring :P
14:42:58 <psi> håkan jonsson is really cool, but i don't know how much a haskell geek he his
14:43:31 <Maddas> xerox: I tried for a few times :-)
14:43:44 <Lor> Well, I rather chat on irc.
14:44:04 <xerox> anybody better than 8k ? ^_^
14:44:04 <psi> Maddas: no, hehe. i wouldn't dare.
14:44:12 <Lor> I dislike non-irc chat systems for the same reason I dislike non-nntp message boards.
14:44:34 <Lor> Well, of course I also dislike irc heavily.
14:44:48 <Maddas> So you dislike all chat systems? Yay :-)
14:44:51 <xerox> so, i'm the Go-geek of #haskell \o/
14:44:52 <xerox> :D
14:44:56 <jeff2> haskell.org has a picture of a forall symbol in the logo, is there a standard forall function in haskell? it doesn't seem to be in the prelude
14:45:06 <shapr> Cale, SyntaxNinja play go.
14:45:07 * Philippa really ought to learn Go properly
14:45:14 * Maddas too
14:45:14 <Lor> jeff2, List.all
14:45:16 <Philippa> I've liked what little I've played, but not got round to it seriously
14:45:35 <Lor> I have never understood chess, but go is just beautiful.
14:45:40 <Cale> I'm a single digit kyu, maybe 4-5k
14:45:41 <xerox> feel free to contact me on KGS (nick: edi) to play and review games
14:45:42 <Maddas> But then again, I should learn many other things too. So much to learn, so little time :-)
14:45:46 <shapr> I understand chess, but I suck at it.
14:45:48 <xerox> ok ask Cale^_^
14:45:49 * SyntaxNinja has no clue of his rating
14:45:59 <Maddas> I suck at chess but I'd like to be decent.
14:46:00 <Lor> The rules are so simple and intuitive, but the complexity of tactics that arises from them is astounding.
14:46:02 <shapr> Go looks way too sexy for me to try it while I'm not living on a big paycheck.
14:46:06 <psi> i WANT to learn it properly, but i'm too lazy :(
14:46:15 * stepcut is a terrible go player
14:46:31 * Lor just realizes that he's now living on a (reasonably) big paycheck, and can actually afford getting proper go equipment.
14:46:42 <stepcut> i watched, like, 80 episodes of hikaru no go, and I still suck :p
14:46:43 <shapr> Lor: you got hired?
14:46:50 <Lor> Yeah.
14:46:55 <xerox> i like it very much, i use to open an high-dan match and watch it before sleeping
14:46:56 <psi> stepcut: hah
14:46:57 <shapr> where ya workin?
14:46:57 <Lor> I get paid for coding Scheme. :)
14:47:01 <shapr> wow, nice!
14:47:04 <Philippa> shapr: unlike MtG it won't cost you once you've started :-)
14:47:13 <Riastradh> Lor, coding what sort of applications in Scheme?
14:47:18 <shapr> The greatest cost is time.
14:47:21 <xerox> stepcut hikaru gives energy.. i ever won right after finished viewing an episode.
14:47:23 <Lor> shapr, ssh.
14:47:31 <xerox> Lor wow!
14:47:35 <stepcut> xerox: hehe
14:47:57 <Lor> Riastradh, sorry, I've already disclosed as much as I'm allowed to. :)
14:48:14 <xerox> you can't tell even the topic?
14:48:50 <Lor> Well, you can probably formulate some guesses by yourself.
14:48:54 <Riastradh> We want...information!
14:49:24 <xerox> so it's for government
14:49:30 <xerox> *g*
14:50:18 <Philippa> I would've guessed military, but hey
14:50:38 <xerox> what would military do with scheme programs ..
14:50:52 <Maddas> What would the government do with Scheme programs?
14:50:55 <Philippa> god knows, they even use Ada
14:51:04 <xerox> good question :P
14:51:19 <xerox> AI for human-less aircrafts
14:51:35 <xerox> (i read it somewhere)
14:51:55 <xerox> http://www.wired.com/news/medtech/0,1286,65438,00.html
14:52:06 <jadrian> hylo is  cata . ana
14:52:11 <Maddas> Oh boy, I think I'll take the ship/train :-)
14:52:11 <xerox> ''Somewhere in Florida, 25,000 disembodied rat neurons are thinking about flying an F-22.''
14:52:11 <jadrian> what about ana . cata
14:52:17 <jadrian> does it have a name?
14:52:22 <shapr> hylo
14:52:30 <shapr> oh
14:52:30 <shapr> wait
14:52:32 <jadrian> :)
14:52:34 <shapr> never mind
14:52:40 <Riastradh> olyh
14:52:43 <Riastradh> Duh.
14:52:46 <shapr> I thought they were the same thing.
14:52:47 <jadrian> eh
14:52:49 <xerox> lohy
14:52:53 <jadrian> shapr: maybe they are...
14:53:03 <jadrian> shapr: I'm still thinking...
14:53:04 <SyntaxNinja> lots of industry jobs are very secretive too
14:53:17 <shapr> I never have understood that.
14:53:20 <vegai> SyntaxNinja: who told you that!
14:53:21 <shapr> I'd much rather advertise.
14:53:34 * vegai looks at everyone suspiciously.
14:53:35 <Lor> In case I didn't make it clear, "ssh" was the answer to the question "where ya workin?"
14:53:38 <xerox> shapr they will STOLE your IDEAS!
14:53:41 <SyntaxNinja> shapr: well for some companies, their ideas are all they have, and if a larger company can take their ideas and beat them to market...
14:53:43 <jadrian> what I have here in fact it that I destroy an object of type A
14:53:45 <Maddas> heh
14:53:53 <jadrian> and construct an object of the same type A
14:54:01 <shapr> I guess I'm lucky, I live with an excess of ideas.
14:54:08 <jadrian> so I guess I could call it an end-anamorphism...
14:54:17 <jadrian> s/end/endo
14:54:22 * TheHunter vagely rembembers having seen a paper about something like ana . cata
14:54:26 <Maddas> "If I'd get fifty cent for every million-dollar idea I have, I'd be a rich man by now."
14:54:28 <xerox> openssh guys pays you for some scheme program? *G*
14:54:30 <SyntaxNinja> shapr: but you have no interest inm marketing them :)
14:54:53 <shapr> well, I wouldn't mind getting enough money that I could code for fun 100%
14:55:15 <shapr> or even more money so I could fund open source dev
14:55:36 <jadrian> I really don't know how to call this pattern :-|
14:55:38 <shapr>  Other than that, you're correct. I have no commercial interest.
14:55:49 <shapr> I just want to make useful artifacts.
14:56:05 <shapr> I am an artificier(?).
14:56:20 <shapr> @wn artificier
14:56:25 <lambdabot> No match for "artificier".
14:56:35 <Riastradh> Artifactory.
14:56:36 <shapr> hm, what's the word for someone who makes artifacts?
14:56:37 * Lor has only some time ago realized that money can actually be useful. You can buy more books and other tools to do good stuff.
14:56:48 <Lor> artificer
14:56:50 <shapr> Yes, tools and books are handy.
14:57:01 <shapr> @wn artificer
14:57:02 <lambdabot> *** "artificer" wn "WordNet (r) 2.0"
14:57:02 <lambdabot> artificer
14:57:02 <lambdabot>      n 1: someone who is the first to think of or make something [syn:
14:57:02 <lambdabot>            {inventor}, {discoverer}]
14:57:02 <lambdabot>      2: a skilled worker who practices some trade or handicraft
14:57:04 <lambdabot>         [syn: {craftsman}, {artisan}, {journeyman}]
14:57:06 <lambdabot>      3: an enlisted man responsible for the upkeep of small arms and
14:57:08 <lambdabot>         machine guns etc. [syn: {armorer}, {armourer}]
14:57:08 <shapr> nifty.
14:57:28 <Lor> lambdabot ought to reformat the dict output to take less lines.
14:57:34 <shapr> truly
14:57:37 <Lor> Each entry on its own line.
14:57:38 <shapr> the repo is online =)
14:58:03 <Lor> Btw, here's a nifty script I use: xclip -o | tr '\r\n' '  ' | sed -e 's/^[[:space:]]\+//g;s/[[:space:]]\+$//g;s/[[:space:]]\+/ /g' | xclip -i
14:58:29 * vegai cowers.
14:58:38 * shapr horsers
14:58:52 <vegai> @wn horser
14:58:53 <lambdabot> No match for "horser".
14:59:00 <Lor> It makes an X selection pasteable in irc, i.e. removes newlines and extra space.
14:59:16 * vegai smirks.
14:59:52 <shapr> I have S-y bound to insert-selection in xemacs. That pastes the X selection.
15:00:14 <Lor> Where have you bound super?
15:00:14 <jadrian> For catamorphisms there is the paramorphism generalization. Is there something similar for anamorphisms?
15:00:19 <vegai> perhaps the slogan in the old US nuclear attack videos was "duck and cower" 
15:00:30 <shapr> I have super on Home and PgUp
15:00:44 <Lor> Where's your pageup then? :)
15:00:53 <shapr> M-v
15:00:55 * Lor 's pgup and pgdn are broken.
15:01:15 <Lor> I've bound M-Home and M-End to them.
15:01:25 <Lor> Or vice versa.
15:01:38 <Lor> Is "binding" a symmetric relation?
15:01:52 <Lor> Are "a is bound to b" and "b is bound to a" interchangable?
15:02:13 * shapr doesn't know
15:02:38 * Maddas doesn't either
15:02:42 <jadrian> Lor: nope
15:02:50 <Philippa> wouldn't make sense for it to be
15:02:54 <Maddas> I wouldn't think so either, though
15:03:09 <Maddas> "I've bound tab to control" doesn't imply the opposite
15:03:15 <Philippa> many-to-one - ctrl-c or shift-insert, say. Or whatever conventions you happen to use
15:03:29 <Lor> So, is a variable bound to a value or a value bound to a variable?
15:03:47 <jadrian> variables are bound to values
15:04:44 <jadrian> the usuall meaning (at least in the contexts I've seen it) it is a mapping from variables to values
15:05:13 <Lor> So it's wrong to say 'in "let x = 2 + 2 in e" the value of the expression "2 + 2" gets bound to the variable "x"'?
15:05:21 <jadrian> no
15:05:35 <jadrian> the other way around
15:05:46 <bojohan> "Binding: A key sequence gets its meaning in Emacs by having a binding, which is a command (q.v.) [...]"
15:05:52 <bojohan> (info "(emacs)Glossary")
15:05:54 <jadrian> x is bound to the expression
15:06:24 <jadrian> key-sequences (vars) actions (values)
15:06:49 <jadrian> you can have several vars (key seqs) bound to the same actions
15:06:51 <Lor> "bound to the variable" returns 5000 hits in google.
15:07:03 <Lor> So at least it is used.
15:07:24 <jadrian> "variable is bound to" 6540
15:07:28 * ski goes to bed
15:07:32 <Riastradh> I try to be consistent in saying 'bind <variable> to <value>,' though I have really no idea which order is correct.
15:07:43 <Lor> jadrian, I certainly don't dispute the correctness of that usage.
15:07:52 <Lor> Merely whether the other way is allowed, too.
15:07:57 <jadrian> right
15:08:12 <jadrian> personally, I've never seen it, but that is not saying much...
15:09:00 <jadrian> notice that in some domains you can bind variables to other variables, so I'd take those results with a grain of salt
15:09:27 <jadrian> for instance in many domains you bind variables to terms, but vars are terms themselves
15:10:07 <jadrian> so in those domains it's quite common to say variable x bound to variable y
15:18:06 <TheHunter> wtf has happened to google?
15:18:13 <shapr> is it broken?
15:18:30 <shapr> seems to work 
15:18:50 <TheHunter> if I search for haskell, i get as first result for example:
15:18:53 <TheHunter> http://www.google.de/url?sa=U&start=1&q=http://www.haskell.org/&e=9578
15:19:03 <TheHunter> not just a link to www.haskell.org
15:19:25 <shapr> That looks like they're trying to track 'click-through'
15:19:37 <Lor> I've occasionally noticed something like that, too.
15:20:25 <TheHunter> anyone know a good search engine?
15:20:32 <Lor> Uh, google isn't one?
15:20:52 <Lor> fwiw, my search for "haskell" on google.de returns just plain links.
15:21:17 <Nioate> same for me
15:22:16 <TheHunter> hmm, it's ok again.
15:24:39 <TheHunter> so they're spying on a small percentage of their users?
15:24:53 <Lor> Or just occasionally.
15:25:03 <esap> I wonder what happens once all the people that try to influence google results notice that.
15:25:27 <TheHunter> right, i meant occasionally.
15:25:51 <Lor> or just s/users/searches/
15:26:15 <jadrian> Argh, I always, and I mean always, put the options pragma declaration *before* the \begin{code} when using lhs files :-|
15:26:39 <jadrian> and it still takes me quite a while to find out what's wrong...
15:26:40 * esap never uses \begin{code}
15:27:11 <jadrian> hi esap! 
15:27:14 <xerox> goodnight!
15:27:16 <esap> hi
15:27:38 <jadrian> I wanted to tell you something (can't elaborate it to much since I'm a little busy now)
15:27:50 <jadrian> anyway I gave that subtyping chat we had some more thought
15:27:57 <jadrian> and yeap, I guess you were right
15:28:11 <jadrian> it makes sense to think of subclassing in those terms
15:28:35 <esap> ok
15:28:43 <jadrian> that is a type variable would be higher in the pre-order relation
15:29:02 <jadrian> as any other is its subtype
15:29:19 <jadrian> then in the leafs we'd have Int, Char etc
15:29:29 <jadrian> which have no subtypes
15:29:38 <esap> right
15:30:03 <jadrian> and in between we'd have type variables which belong to classes
15:30:58 <esap> exactly
15:30:59 <jadrian> therefore I re-state what I said as, it would be handy to me to be able to, define other subtyping relationships other than those...
15:31:28 <esap> you mean like record subtyping?
15:31:32 <jadrian> yeap exactly
15:31:36 <jadrian> those are the ones I wanted
15:32:02 <esap> Record subtyping is actually pretty interesting, because it's pure extension.
15:32:53 <jadrian> what does "pure" mean in this context?
15:33:04 <esap> nothing deep
15:33:53 <esap> just that I think record subtyping doesn't include other kinds of subtyping/classing aspects.
15:34:01 <jadrian> right
15:34:14 <esap> because subtyping/subclassing terms have been overloaded
15:34:19 <esap> to mean lots of things
15:35:47 <esap> I'd rather distinguish as many different meanings as possible.
15:37:14 <jadrian> and in the same spirit, extensible records would also be nice
15:37:44 <esap> you can build extensible records by adding one type parameter for your records.
15:38:12 <esap> data Record a = Record { ... ; extends :: a }
15:38:34 <jadrian> yes but that way you'll get nested records to had multiple fields
15:38:39 <esap> not quite the same, since it doesn't work for all record types, but close enough
15:40:01 <jadrian> s/had/add
15:41:01 <esap> yes, not very convenient, extensible records would be better from evolution perpective as well.
15:41:09 <jadrian> yeap
15:43:32 <esap> but inheritance is somewhat dangerous [it's too easy to use it when you shouldn't]
15:45:06 <TheHunter> have you guys looked at http://www.cs.uu.nl/~daan/download/papers/fclabels.pdf ?
15:46:01 <jadrian> hmm not yet
15:46:15 <esap> that's pretty new paper, I don't remember seeing that.
15:46:27 <jadrian> that reminds me daan never replyed my emails about parsec :-|
15:46:38 * jadrian found a couple of documentation bugs
15:47:05 <TheHunter> i've only skimmed through it yet, but seems pretty nice.
15:47:09 <shapr> I ended up bothering Daan at ICFP.
15:47:14 <shapr> He's a nice guy.
15:47:43 <shapr> He never replied to my emails either :-)
15:47:52 <jadrian> lol
15:48:25 * TheHunter doesn't want to know how many people are pissed at him because he never replied their emails.
15:48:37 <shapr> Yah, I just roll with it.
15:48:43 <shapr> If someone replies, cool, if not, cool.
15:49:28 <jadrian> yeap, I didn't really mind, it's just that it would be nice to have the docs fixed...
15:49:49 <shapr> parsec is in the fptools repo, send the changes to those guys.
15:50:02 <jadrian> oh!
15:50:10 <jadrian> I might do that then
15:50:50 <shapr> What's the default web request?
15:50:59 <shapr> It's not GET *, or GET /
15:52:20 <TheHunter> good night, channel.
15:52:24 <shapr> g'night
15:52:39 <esap> shapr: maybe GET /index.html or something like that.
15:52:48 <shapr> maybe so...
15:55:10 * shapr gives up
15:55:14 <shapr> I don't really need to know...
15:57:18 <musasabi> dark snowy night.
15:57:29 <musasabi> typoing dark makes it close to darcs
15:58:01 <shapr> darcs snowy night
16:09:54 * jadrian has a question...
16:10:09 <jadrian> I got a multiparameter type class
16:10:38 * musasabi waits
16:10:40 <SyntaxNinja> Igloo: and anyone else interested, are you OK with adding multiple haskell packages to a single cabal package?
16:10:44 <jadrian> which should be simetric
16:11:15 <jadrian> in the sense that whenever I have   T a b, I'll also have  T b a
16:11:41 <jadrian> so when defining the default methods for T a b
16:11:54 <jadrian> I wanted to use the fact that I also have T b a
16:12:20 <jadrian> that is, in the definition of the method f for T a b
16:12:32 <jadrian> I want to use the fact that I also have f for T b a
16:12:38 <jadrian> is this possible?
16:13:03 <musasabi> "T a a" could at least be a problem
16:13:20 <jadrian> not really...
16:13:26 <jadrian> at leats I don't see how
16:13:31 <jadrian> why do you say that?
16:13:53 <musasabi> T a0 a1 => T a1 a0 => T a0 a1 => ...
16:14:09 <musasabi> but then again I am very tired (02:11)
16:14:21 <shapr> it's earlier in sweden!
16:14:44 <jadrian> still can't see what would be the problem :-|
16:14:59 <shapr> Not enough hours in a day. That's the problem.
16:15:02 <jadrian> that also happens when b /= a
16:15:56 <jadrian> to be more precise, 
16:16:10 <Igloo> Syn: You mean libghc6-foo and libghc6-bar from from cabal package baz?
16:16:11 <jadrian> I'll use this with mutually recursive datatypes
16:16:38 <jadrian> so maybe a simple example would be defining a map for mutually recursive datatypes
16:17:00 <SyntaxNinja> Igloo: not multiple debian packages, multiple haskell packages, so a single cabal package 'baz' could have the -package Foo and -package Bar libraries.
16:17:13 <SyntaxNinja> but maybe that's what you mean :)
16:17:29 <jadrian> you have Class MFunctor a b where
16:18:17 <Igloo> SyntaxNinja: What binary deb is the stuff for -package foo in, and which the stuff for -package bar?
16:19:05 <SyntaxNinja> Igloo: I'm not talking about debian packages at all
16:19:22 <Igloo> Oh, I see
16:19:29 <Igloo> I thought that was already possible, then
16:19:35 <SyntaxNinja> nope
16:20:03 <SyntaxNinja> there's a one-to-one correspondence between cabal packages and haskell packages
16:20:09 * Igloo has memories of discussing that we'd like to do it for wxcore/wxhaskell or something
16:20:19 <SyntaxNinja> right
16:21:22 <SyntaxNinja> there's also some talk about changing ghc-pkg so that we don't actually have to run 'register' on the taret
16:21:24 <SyntaxNinja> target
16:21:50 <SyntaxNinja> so I'm thinking of adding a 'postinst' function that's guarenteed to be run on the target
16:24:40 <Igloo> I thought that was decided against?
16:24:49 <Igloo> Sounded like a bad idea to me - breaking the abstraction boundary and all
16:25:19 <SyntaxNinja> what was decided against? the change of ghc-pkg?
16:26:28 <Igloo> I thought so
16:27:12 <SyntaxNinja> not really, no one has expressed a strong opinion, so if you think it's a bad idea, you should probably post to the list
16:30:56 <jadrian> ok sorry for the delay
16:31:03 <jadrian> that example was bad... 
16:31:25 <jadrian> here is a striped down example of what I want:
16:31:44 <jadrian> (small flood)
16:31:46 <jadrian> ---
16:31:47 <jadrian> data A = NodeA Int  [B] 
16:31:48 <jadrian> data B = NodeB Char [A]
16:31:48 <jadrian> class Mutual a b | a -> b where
16:31:48 <jadrian>     sub :: a -> [b]
16:31:48 <jadrian>     bar :: (a->[b]->a) -> (b->[a]->b) -> a -> a
16:31:49 <jadrian>     bar f g x = f x (map (bar g f) (sub x))
16:31:52 <jadrian> ---
16:32:28 <jadrian> is there a way to say that  Mutual a b => Mutual b a
16:34:04 <jadrian> hmmm can I do that in an instance declaration?
16:34:23 <jadrian> instance Mutual a b => Mutual b a where
16:34:33 <jadrian> and define the default methods there?
16:35:29 <SyntaxNinja> Igloo: I think I'm going to add a postinst function either way
16:35:55 <Igloo> Oh, that reminds me - does install also do register if no prefix is given?
16:36:48 <SyntaxNinja> it does
16:36:59 <SyntaxNinja> and it'll do postinst as well
16:37:52 <Igloo> What should I be using if I don't want that then?
16:38:22 <Igloo> And if it only does so when there is no prefix given, please don't
16:38:32 <Igloo> Inconsistency just causes more headaches
16:39:00 <palomer> is there a general curry function?
16:40:03 <SyntaxNinja> Igloo: you mean you want to install without running the postinst function, but you don't want to install into a different prefix?
16:40:14 <Igloo> Yes
16:40:44 <SyntaxNinja> idono, why would you want to do that :) you're going to have a broken system.
16:41:14 <Igloo> I can't remember why I wanted to do that, but I did. install and install prefix=foo should differ only in where the files end up.
16:41:38 <SyntaxNinja> hmm. that adds annoying extra steps for simple uses.
16:41:45 * jadrian is sooo lost :(
16:41:46 <SyntaxNinja> I could add --no-register and --no-postinst flags
16:42:09 <Igloo> You could have a separate function that does all 3
16:42:11 * jadrian needs a Multiparameter Classes expert :-|
16:42:34 <Igloo> install = copy; register; postinst   or something
16:43:06 <SyntaxNinja> or we could add a 'copy' target that just does what you want
16:43:13 <jadrian> can you do something like, given a    Class C a   define a default method for cases when you have  Eq a ?
16:43:14 <SyntaxNinja> s/target/command
16:43:18 <jadrian> so that would be 
16:43:26 <jadrian> Class C a where
16:43:30 <jadrian>   foo :: ...
16:43:35 <Igloo> I think that's what I meant
16:43:41 <jadrian> Instance Eq a => C a where
16:43:44 <jadrian>   foo = ...
16:43:48 <Igloo> So the install target is equivalent to copy; register; postinst
16:43:49 <SyntaxNinja> Igloo: install, to me, means more than just moving the files into place
16:44:04 <jadrian> so then you could define
16:44:11 <jadrian> Instance C Int where
16:44:13 <jadrian>   bar...
16:44:21 <jadrian> and use the default method foo
16:44:31 <jadrian> it doesn't seem to works this way
16:44:58 <jadrian> it complains about overlaping instances
16:45:26 <jadrian> but I don't want to define C for all Eq a, just define a default method for all Eq a...
16:45:27 <SyntaxNinja> Igloo: I'm starting to like that idea hmm
16:45:38 <SyntaxNinja> so install always does copy;register;postinst
16:45:43 <SyntaxNinja> "copy" just does copy
16:46:01 <SyntaxNinja> then maybe we get rid of the --install-prefix on the install command
16:46:11 <SyntaxNinja> move that to copy
16:46:44 <jadrian> brb, need to think
16:47:09 <Igloo> Yup
16:48:26 <SyntaxNinja> Igloo: OK I'll post a proposal...
16:48:33 <Igloo> Cool, ta
16:48:58 <Igloo> Also, it seemed to me that unregister was missing a --user option, although I haven't looked to see if that's been fixed recently
16:49:27 <palomer> so, there's no general curry function?
16:49:44 <shapr> palomer: hey you! get off of my lawn!
16:49:45 <Igloo> palomer: What do you want it to do? What type should it have?
16:50:03 <palomer> Igloo, some weird type
16:50:08 <palomer> there are many weird types
16:50:14 <palomer> Shammah, you get off MY lawn
16:50:17 <SyntaxNinja> @type curry
16:50:18 <lambdabot> curry :: forall c b a. ((a, b) -> c) -> a -> b -> c
16:51:00 <Igloo> You could write one for a fixed number of tuple sizes
16:52:37 <shapr> hiya TNKS_ 
16:53:13 <shapr> how's code?
16:53:22 <TNKS_> hello everybody... I'm writing an expect script, and I started writing it in Python, because I found a Python expect module.
16:53:37 <TNKS_> but then I started looking for Haskell Expect modules.
16:54:05 <TNKS_> I found a page that talks about something like that existing... but no links.
16:54:49 <shapr> It's part of UniForM isn't it?
16:55:11 <TNKS_> yeah.
16:55:14 <TNKS_> that's the page.
16:55:28 <TNKS_> but I was hoping that their "expect" was related to Libe's expect.
16:56:13 <shapr> looks like you gotta grab the cvs tarball of UniForM and look in there for the sources.
16:56:25 <TNKS_> actually... reading the page.. it doesn't seem like it's the same.
16:56:50 <TNKS_> nevermind... it does look like the same thing.
17:00:08 <TNKS_> well.  I'm grabing their code now.
17:00:14 <TNKS_> It's huge.
17:00:19 <TNKS_> this application is way more than I need.
17:00:24 <TNKS_> I just need a snippet.
17:00:29 <shapr> yes, but it also has Haskell-Expect code.
17:00:36 <TNKS_> yeah.
17:00:43 <TNKS_> I wonder how just code that really is.
17:00:50 <shapr> I don't know.
17:02:03 <flodin> Paul Hudak et al's haskell introductions lists this simple program:
17:02:08 <flodin> main :: IO ()
17:02:14 <flodin> main = do c <- getChar
17:02:20 <flodin>            putChar c
17:02:51 <flodin> but I can't get it working in hugs, it says "Last generator in do {...} must be an expression" for the putChar line
17:04:18 <SyntaxNinja> flodin: the p in 'putChr' should line up with the 'c' in the line above it
17:04:32 <SyntaxNinja> flodin: watch out for differences between spaces and tabs, they can be tricky
17:05:14 <flodin> ugh I had a suspicion it might be something like that, but i figured it just had to be either to the right of the '=' or of the 'do'
17:06:17 <flodin> anyway, i was going to ask... this is just syntactic sugar right? I mean behind the scenes, there's supposed to be an IO monad being passed in and out of the getChar & putChar functions right?
17:06:58 <SyntaxNinja> yep
17:07:03 <SyntaxNinja> main = getChar >>= putChar
17:07:18 <SyntaxNinja> or main = do c<- getChar; putChar c
17:07:36 <flodin> is there any way to write it in more "basic" haskell if you get my meaning, without the sugar
17:07:49 <flodin> just for my understanding
17:09:35 <SyntaxNinja> that's what I just posted after "yep"
17:09:42 <SyntaxNinja> main = getChar >>= putChar
17:09:42 <flodin> ok
17:10:00 <SyntaxNinja> you can think of ">>=" as "suck the output from the left command and pass it to the right command"
17:10:18 <flodin> what does >>= evaluate to?
17:10:27 <SyntaxNinja> what do you  mean 'evaluate'?
17:10:37 <flodin> as in, what is the value of main
17:11:10 <SyntaxNinja> it's still the same
17:11:18 <flodin> a+b evaluates to the sum of a and b, but what does a >>= b evaluate to
17:11:36 <SyntaxNinja> @type (>>=)
17:11:37 <lambdabot> (>>=) :: forall m b a. (Monad m) => m a -> (a -> m b) -> m b
17:11:40 <TNKS_> man... this code is intense.
17:11:51 <TNKS_> (UniForM).
17:11:53 <Igloo> >>= :: IO a -> (a -> IO b) -> IO b   is built in to the compiler
17:12:09 <Igloo> You can't decompose it
17:12:13 <SyntaxNinja> so a has to be a monad that "evaluates" to an element that gets passed to the function 'b' which evaluates to a monad
17:13:15 <flodin> and the monad is returned from main
17:14:21 <flodin> i guess it left associative, so a >>= b >>= c would equal (a >>= b) >>= c, hence the value of (a >>= b) has to be the IO state after the a and b actions
17:14:27 <flodin> to be passed into c
17:16:32 <shapr> code, code, code, codity code!
17:16:42 <shapr> Code, code, code, and Eggs.
17:17:22 <SyntaxNinja> Igloo: done!
17:17:31 <Igloo> Cool  :-)
17:17:40 <SyntaxNinja> none of this should be too hard either, thankfully.
17:17:44 * shapr throws an egg at flodin
17:17:52 <SyntaxNinja> shapr: !!
17:17:57 <shapr> TNKS_: UniForM really is heavy duty.
17:18:02 * shapr hugs SyntaxNinja 
17:18:03 <shapr> Hiii!
17:18:07 <flodin> if you have a function that deals with Char, and getChar returns IO Char there's some way to go from IO Char to just Char though, right?
17:18:26 <shapr> TNKS_: it even includes an emacs interface. It's impressive.
17:18:36 <SyntaxNinja> flodin: yeah, but you still have to be in the IO monad.
17:18:58 <shapr> and with IO you can only go 'forward'
17:19:01 <flodin> SyntaxNinja: so basically once you input data, all of your program has to be in the IO monad?
17:19:18 <flodin> i mean, all of the part of your program that makes use of the input
17:19:29 <SyntaxNinja> main = do l <- getLine ; putLine (reverse l)
17:19:35 <SyntaxNinja> so 'reverse' doesn't have to be in the IO monad
17:19:46 <shapr> oh wow, there's a new jabberd that uses mnesia!
17:19:48 <SyntaxNinja> but the call to reverse has to be
17:20:10 <shapr> that's seriously cool. distributed fault-tolerant jabberd.
17:20:16 <flodin> hmmm ok
17:20:18 <SyntaxNinja> poor libraries list
17:20:41 <TNKS_> shapr: I don't even know what it does.
17:20:53 <flodin> shapr: good, the 'official' jabberd isn't very fault tolerant
17:20:55 <Lunar^> shapr: URL ?
17:21:08 <flodin> it seems to crash twice / week just about
17:21:12 <TNKS_> shapr: I'm just trying to grab a small section of it.  I think it's even just one file.
17:21:18 <TNKS_> Expect.hs
17:21:46 <TNKS_> But I had problems compiling that alone.
17:21:58 <SyntaxNinja> what's the state of 'hackage' can we get it moved to haskell.org? :)
17:22:06 <SyntaxNinja> flodin: making sense?
17:22:46 <shapr> Lunar^: apt-cache search ejabber
17:22:57 <shapr> SyntaxNinja: no clue
17:23:01 <shapr> Lemmih: y0
17:23:20 <Lunar^> shapr: cool
17:23:29 <shapr> SyntaxNinja: the major problem I have is that I really really don't want to setup and maintain postgresql, hsql, haskelldb, etc on redhat.
17:23:38 <shapr> I'm just not that much of a masochist.
17:24:15 <shapr> I would be happy to do lots of sysadmin work on a debian/unstable box, maybe community.haskell.org  ?
17:25:09 <Igloo> You could put Debian on a chroot on the RH machine  :-)
17:25:22 <flodin> SyntaxNinja: yeah that makes sense, thanks. I just took your 'you still have to be in the IO monad' too broadly i guess
17:25:45 <flodin> SyntaxNinja: it looks though from your code fragment as if the IO Char is implicitly converted to just Char?
17:26:08 <SyntaxNinja> it's really telling that debian users would rather set up a whole new machine than install a few pieces of software on redhat
17:26:34 <SyntaxNinja> flodin: the "<-" bit sorta sucks the "Char" out of the "IO" and binds it to "c"
17:26:59 <Lunar^> Igloo: or we can change this RH machine into a Debian... :)
17:27:06 <flodin> alright
17:27:37 <SyntaxNinja> shapr: have you asked to see if john will install those packages if you take care of hackage itself?
17:27:43 * Igloo wonders how easy it is to get a profiled ghc
17:29:06 <SyntaxNinja> shapr: is this still the cannonical location of hackage for now: http://www.scannedinavian.org/cgi-bin/hackage/hackage
17:29:38 <shapr> as far as I know.
17:29:59 <shapr> I haven't asked John, no.
17:30:03 <shapr> I think Lemmih did.
17:30:37 <SyntaxNinja> shapr: I'm starting to get worried because people are building cabalized packages and I don't even know who all is using it now!
17:30:45 <SyntaxNinja> I'd love to have a database :)
17:31:09 <shapr> I switched to debian because of the redhat dependency hell. I've been using RedHat FC1 recently because a client chose it. I have discovered that I still very much prefer Debian.
17:31:10 <Igloo> That's a reason to rejoice, not worry  :-)
17:31:43 <Lunar^> shapr: ejabberd is neat
17:31:51 <shapr> yah, it looks really nifty.
17:31:51 <Lunar^> shapr: http://ejabberd.jabberstudio.org/ canonical URL
17:32:05 <SyntaxNinja> shapr: what if we make it "hackage.haskell.org"? does anyone have a machine where we could do that? scannedInAvion with some rewrite rules?
17:32:28 <SyntaxNinja> Igloo: yeah, I definitely rejoice, but I'm also losing track of them :)
17:33:29 <shapr> SyntaxNinja: s'okay by me, but ScannedInAvian will be changing ISPs soon.
17:33:36 <Lunar^> SyntaxNinja: I can do that !
17:34:21 <Lunar^> SyntaxNinja: what does it need exactly ?
17:34:22 <SyntaxNinja> shapr: does that matter? would Lunar^'s machine be better?
17:34:44 <SyntaxNinja> Lunar^: what shapr said a few minutes ago; I'm not too familiar with it really, I didn't write it :)
17:34:45 <shapr> Also, ScannedInAvian is a 600MHz box. postgresql searches are not exactly speedy.
17:34:59 <desrt> desrt.ca is a 266MHz box.  mysql searches downright suck
17:35:00 <desrt> :)
17:35:19 <SyntaxNinja> Lunar^: can shapr have a login on your box? :)
17:35:23 <shapr> Lunar^: Hackage needs HSQL and HaskellDB.
17:35:24 <Igloo> I don't think we will have enough packages to worry about SQL search speed (assuming the SQL doesn't suck)
17:35:38 <SyntaxNinja> I added a link from the cabal home page http://www.haskell.org/cabal
17:35:57 <shapr> I'd rather ask yale.edu for a community.haskell.org that runs debian.
17:36:01 <Igloo> Hmm, there should be a "in the near future" in there
17:36:01 <Lunar^> I would prefer to do it, but I can. It will be on an UML running on a P IV 2 Ghz
17:36:03 <shapr> but that's just my bias
17:36:17 <Lunar^> 2.80 Ghz exactly
17:36:32 <Igloo> Lunar^: That didn't make sense
17:36:48 <shapr> It didn't?
17:36:55 <Igloo> "I would prefer to do it, but I can."
17:36:57 <dons> moin
17:37:11 <shapr> I think the second half refers to shae having an account.
17:37:18 <shapr> g'day dons!
17:37:23 <shapr> :reboot is cool =)
17:37:24 <Lunar^> Igloo: sorry, I would prefer to set up hackage myself, but I can give shapr an account
17:37:39 <Igloo> Ah, right
17:37:50 <shapr> I always prefer someone else doing the work =)
17:37:56 * Lunar^ --verbose
17:37:57 <SyntaxNinja> shapr: yeah, I would prefer that it be at yale.edu too, but who is going to make it happen? :)
17:38:03 <dons> shapr: yep. and it shows how to reload config files too. just call back to the boot loader. hmm. would work in riot too
17:38:07 <shapr> um, I don't know.
17:38:27 <shapr> How did haskell.org end up at yale anyway?
17:38:28 <Igloo> It would be slightly preferable to have 2 or 3 people who can prod it when it breaks, but it's not that important
17:38:51 <Lunar^> Igloo: I trust shapr enough to give him access on my server
17:38:58 <SyntaxNinja> we can always move it later
17:39:01 <Lunar^> Igloo: it's no big deal
17:39:03 * shapr hugs Lunar^ 
17:39:06 <SyntaxNinja> without changing the interface :)
17:39:15 <Lunar^> shapr: GHC me, please :)
17:39:17 <SyntaxNinja> shapr: so community.haskell.org/hackage ?
17:39:19 * shapr laughs
17:39:29 <shapr> sounds good
17:39:40 <shapr> can you think of a better hostname?
17:39:41 * SyntaxNinja notes that GHC are all leters in HUGS.
17:39:53 <shapr> HUGC?
17:39:53 <Igloo> Except C...
17:39:57 <Lunar^> community.haskell.org/wiki ?
17:39:59 <SyntaxNinja> oh
17:40:03 <SyntaxNinja> details
17:40:07 * shapr laughs
17:40:19 <SyntaxNinja> Lunar^: you mean move the wiki?
17:40:20 <SyntaxNinja> meh
17:40:30 <shapr> moving the wiki would be easy.
17:40:36 <Lunar^> community.haskell.org/reports for HC&AR ?
17:40:43 <shapr> and, I could change the license at the same time.
17:40:48 <shapr> but there's no real need.
17:40:58 <shapr> there *is* a real need for a website index.
17:40:59 <SyntaxNinja> let's do it!
17:41:02 <shapr> and for unified searching.
17:41:07 <Lunar^> If we are thinking about new URLs, let's try to think of the whole thing :)
17:41:13 <shapr> good point
17:41:22 <shapr> I wish we already had a Zope replacement.
17:41:24 <shapr> in Haskell
17:41:42 <shapr> There are two projects that might turn into that.
17:41:56 <Lunar^> shapr: Two ?
17:41:59 <shapr> something like gforge?
17:42:03 <SyntaxNinja> Lunar^: we don't need to move everything at once; I just think we need to bootstrap by getting a new box w/ hackage up there, then we can branch out, move to yale whatever
17:42:15 <shapr> Yes, Simon's HAIFA, and Alexander Jacobson's thingy.
17:42:47 <SyntaxNinja> Lemmih: alive?
17:43:00 <shapr> speaking of which, I need to send an email to Alexander, and ask him what's up with that project.
17:43:04 <Lunar^> shapr: Never ear (?) about the latest
17:43:13 <shapr> No one has =)
17:43:18 <shapr> well, three people.
17:43:30 <SyntaxNinja> so who do we ask about the DNS
17:43:32 <SyntaxNinja> focus people!
17:43:39 <SyntaxNinja> ;)
17:44:08 <Igloo> haskell.org DNS seems to be run by Yale
17:44:26 <Lunar^> We can host hackage on poivron.org temporarily, move it to yale afterwards.
17:44:43 <SyntaxNinja> yes! but it would be nice if the domain would resolve nowish so we don't have to change it.
17:44:56 <Lunar^> sure :)
17:44:58 <SyntaxNinja> shapr: could we keep scannedinavion as a test platform?
17:45:10 <shapr> sure
17:45:30 <shapr> lemme see if haskell.org hosts its own dns
17:46:35 <shapr> nope
17:47:12 <shapr> John is the haskell.org registrant.
17:47:27 <SyntaxNinja> I'll email him and CC you guyys
17:48:27 <shapr> I'm willing to do lots of sysadmin work on a debian/unstable box, but not on RedHat. It's just too much trouble, and debian has more Haskell packages.
17:48:57 <Igloo> Is the last point true yet?
17:49:11 <shapr> debian having more haskell packages?
17:49:16 <Igloo> yup
17:49:23 <shapr> well, with haskell-unsafe, I think so.
17:52:15 <shapr> Speaking of moving things around, DarcsWiki is getting a lot of traffic. I'm going to try to move it darcs.net
17:52:27 <Lunar^> Good idea
17:53:09 * shapr fights minihttp
17:53:17 * SyntaxNinja emails john
17:53:23 <shapr> yay!
17:53:28 <SyntaxNinja> poor john... won't know what hit him when the haskell cabal gets through with him!!
17:53:56 * shapr snickers
17:54:58 * SyntaxNinja is a productive hacker today
17:55:26 * shapr cheers for SyntaxNinja 
17:55:36 <palomer> ho hum, not I
17:55:40 <palomer> I was a documentation monkey
17:55:59 <shapr> that's productive.
17:56:16 <shapr> Oh, I haven't read Colin's darcs part II blog entry yet.
17:56:28 <Lunar^> shapr: URL ?
17:57:01 <shapr> um
17:57:20 <shapr> http://planet.debian.org/
17:57:22 <shapr> third one down.
17:59:43 <dons> this reboot thing is too much fun
18:00:00 * Lunar^ wonders when he would be able to keep two different typographic conventions together in his head
18:00:20 <shapr> Lunar^: what do you mean?
18:00:24 <Lunar^> dons: I've tried to understand about the OS X failure btw
18:00:45 <Lunar^> shapr: In french, you write "pourquoi ?" whereas in english it's "why?"
18:00:54 <Lunar^> shapr: « pourquoi ? » even
18:00:58 <SyntaxNinja> shapr: his blog entry was actually based on an argument I had with him on #osuoss :)
18:01:23 <shapr> heh, I am entertained.
18:01:28 <SyntaxNinja> and his hatred of subversion is because of when we hacked togehter on apt-secure :)
18:01:39 <shapr> I still think arrows can fix the inefficiency problems of darcs.
18:01:45 <dons> Lunar^: yep, the mulitple "module-registered" symbols?
18:02:08 <shapr> Lunar^: you mean the space between the word and the question mark?
18:02:36 <shapr> comma use is weird in swedish. "one, two and three." but in english "one, two, and three."
18:02:41 <Lunar^> dons: It's defined in 
18:02:57 <Lunar^> START_MOD_INIT from StgMacros.h
18:03:00 <shapr> I cc'd an email asking about arrows to David Roundy, but I never heard from him.
18:03:29 <shapr> I wonder if that means "Stupid Question" or "wtf are arrows?" or what.
18:03:42 <Lunar^> dons: It seems that OS X Linker.c in GHC 6.2.1 is unable to handle multiple local symbol ('b' in nm)
18:04:05 <dons> Lunar^: yep. every module has this symbol though. so I wonder how other .o archives are handled?
18:04:09 <Lunar^> shapr: Yes, I meant that
18:04:35 <dons> e.g. the hier libs. how are they built  -- because I thought I was doing the right thing
18:04:44 <Lunar^> dons: Yeah, but in normal modules, there is only one module hence one symbole
18:04:45 <dons> maybe there is a special trick for the mac
18:04:56 <dons> but not in, say, HSbase.o
18:05:03 <dons> which is what HSyi.o is similarr to
18:05:40 <Lunar^> 'nm /usr/local/lib/ghc-6.2.1/HSbase.o | grep _module' returns nothing
18:05:49 <dons> hmm. that's interesting.
18:06:34 <Lunar^> mhh... fptools Makefiles digging session
18:06:35 <dons> and they're not in my openbsd HSyi.o
18:06:36 <Lunar^> yahoo
18:06:53 <Lunar^> mhh?
18:07:25 <dons> $ nm HSyi.o | grep module doesn't return anything
18:07:30 <SyntaxNinja> does anyone use haRe?
18:07:51 <dons> but they're there in linux.
18:07:58 <palomer> does haskell have higher order modules?
18:07:59 <dons> 00000050 b _module_registered
18:08:04 <Lunar^> dons: once ?
18:08:20 <dons> 20 times or so. Once for each .o in the archive
18:08:28 <dons> 00000000 b _module_registered
18:08:28 <dons> 00000004 b _module_registered
18:08:29 <dons> 00000008 b _module_registered
18:08:31 <dons> etc
18:08:36 <Lunar^> dons: ok.. 21 exactly :)
18:08:50 <Lunar^> dons: And the ELF module loader seems to handle them well
18:08:54 <dons> yep.
18:09:00 <dons> looks like.
18:09:25 <dons> but they're not in HSbase.o ...
18:09:34 <dons> so we're not building the lib correctly somehow
18:09:54 <dons> hmm.
18:09:57 * jadrian solved multiparameter classes with overlaping instances problem :)
18:10:00 <shapr> darcswiki index page: 55,430 hits
18:10:05 <Lunar^> gee
18:11:53 <Lunar^> dons: .mk rules seems the same
18:12:48 <Lunar^> LD_X !
18:12:58 <Lunar^>        -x     Strips the non-global symbols; only saves external symbols.
18:13:00 <cm> herro
18:13:04 <dons> whoo
18:13:10 <dons> that's it.
18:13:15 * cm strips shapr 
18:13:37 <dons> I had in the back of my mind: "should work out what why they use LD_X.."
18:14:12 <Lunar^> dons: look at "dnl Check whether ld supports -x" in aclocal.m4 in GHC 
18:14:23 <dons> yep. I'll grab it now.
18:16:03 * Lunar^ tries to hack configure.ac
18:17:05 * Lunar^ tries to hack his Makefile
18:17:43 <Lunar^> works ! 
18:17:48 <SyntaxNinja> jadrian: cool
18:18:01 <Lunar^> that's it, just add ld -x recognition to configure
18:18:08 <dons> great.
18:18:13 <dons> darcs send !
18:18:26 <Lunar^> I don't have enough autotools knowledge to do it properly though
18:18:41 <dons> did you pull in the macro from aclocal.m4?
18:18:58 <dons> or  just hard code it, to see if it worked?
18:19:20 <Lunar^> hard code it, after remembering the mess autotools is
18:19:34 <Lunar^> s/is/are
18:19:45 <dons> hehe. ok. I might try to adapt that aclocal -x test somehow.
18:25:39 <jadrian> SyntaxNinja: the workaraound was actuall
18:25:43 <jadrian> SyntaxNinja: the workaraound was actually simple
18:26:08 <jadrian> just didn't declare those functions as methods
18:26:20 <jadrian> so I could do 
18:26:25 <jadrian> foo :: (MRecData a b, MRecData b a) => (a->[d]->c)->(b->[c]->d)->a->c
18:26:50 * jadrian is off to bed!
18:34:21 * Lunar^ has just added :<linenum> support !
18:34:26 <Lunar^> Yi is so cool !
18:34:36 <Lunar^> Should I make a patch ?
18:36:02 <dons> please do!
18:36:16 <dons> is this for vim mode?
18:36:33 <Lunar^> yes
18:36:35 <Lunar^> darcs push ?
18:36:42 <dons> oh, like <linenum>G ?
18:37:02 <Lunar^> dons: I always use :33 to go to the 33rd line
18:37:06 <dons> that's cool. you should also patch vi mode then as well, cause I think it has the same behaviour
18:37:21 <dons> use  'darcs send' to post it to me
18:37:39 <Igloo> Shouldn't vim mode just modify the vi mode?
18:37:41 <dons> 'darcs push' only works on repos you have login and write access to
18:38:10 <dons> Igloo: probably. it's been easier to develop them separately though
18:38:23 <Igloo> Fair enough
18:39:02 <Lunar^> dons: done
18:39:13 * Lunar^ should update his darcs
18:39:35 <dons> from 0.9.20? yes ;)
18:39:43 <Lunar^> :)
18:40:23 <dons> :reboot is great fun. does it work on the mac?
18:40:46 * Lunar^ spent the evening at MozParty for Firefox 1.0, but darcs 1.0 was a much bigger event for me :)
18:40:51 <Lunar^> dons: yes !
18:41:08 <dons> cool. it's like :reload in ghci
18:41:27 <dons> now, to save a bit more state between reboots.
18:46:46 <SyntaxNinja> I'm really tempted to buy some kind of robot kit
18:47:37 * Lunar^ hopes Trac get darcs support soon
18:47:57 <Igloo> Trac?
18:48:13 <Lunar^> Igloo: http://projects.edgewall.com/trac/
18:48:25 <Lunar^> Igloo: Wiki + BTS + VCS
18:48:34 <Lunar^> all integrated
18:49:00 <Lunar^> cool they've released 0.8
18:57:25 <shapr> what's the secret to getting a binary file from a network handle?
19:28:52 --- topic: '["The Nov 2004 HC&A Report is released! - http://haskell.org/communities/","Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - http://www.cis.upenn.edu/proj/plclub/contest/results.php#first"]'
19:28:52 --- topic: set by ksbot on [Wed Nov 10 14:16:59 2004]
19:28:53 --- names: list (clog cm palomer ows themaximus flippo LrdMtrod kristnjov jeff2 bojohan rhw Riastradh Cale jesse99 Jan_w monochrom det norpan arjanb gnufan borism_ kosmikus_ sjanssen Nioate flodin opet shapr dash Matt-W Taaus psi mattam kolmodin_ tuomov kpk mflux Itkovian desrt CLxyz isomer Godeke seidan Lor earthy r3tex musasabi Nomius vegai cmeme ibid djw Igloo lambdabot creichen juhp aj polli asmodai edwinb tromp Perite Maddas gdsx tarantul emu thebug)
19:28:53 --- names: list (ned wagle ozone tumm keverets shrimpx Lunar^ sorje andersca shawn dryan SamB esap Kelt flori themus reffie Lemmih dons wilx Spark Shammah)
19:35:27 <TNKS> does anybody here use haskell as a shell script the way people use Python?
19:35:38 <TNKS> I was wondering how successful that might be.
19:35:50 <shapr> it works fine.
19:36:19 <shapr> getDirectoryContents ".">>= \f ->zipWithM_ renameFile f$ map ((\ (a:b:c:d:_) -> concat [c," [",a,"-",b,"] - ",d]).split " - ") f
19:37:48 <shapr> ghc -e is handy too.
19:39:08 <shapr> TNKS: there's the hsshellscript libs from Volker Stolz
19:40:32 <cm> i'm tired :|
19:40:37 <shapr> me too.
19:40:47 <shapr> No reason to stop coding though.
19:40:49 <cm> but it's only 22:40 here ;)
19:40:51 <shapr> I'd rather code than sleep.
19:40:52 <cm> i'm weak.
19:40:58 <shapr> It's 4:40 here.
19:41:07 <shapr> Or maybe you just get up earlier than I do.
19:41:08 <cm> yeah :|
19:41:16 <cm> i worked long hours this week
19:41:37 <shapr> I didn't do much paying work this week. Wrote an article about Software Patents.
19:44:14 <dons> yay. Lunar's patch arrived
19:44:40 <Lunar^> yeah :)
19:45:51 * shapr thinks
19:45:56 <shapr> 2xx is always success, right?
19:46:28 <shapr> google is so smart.
19:49:02 <cm> i wonder whether it's smart to recommend to my semi-previous employer to switch to python for a new product line
19:49:05 <cm> they are using PHP, atm
19:49:43 <shapr> what's the product?
19:50:02 <cm> multiple products.. web framework, content management system, web applications
19:50:14 <shapr> imho, PHP is a good domain specific language. it's great for 'web scripting'
19:50:38 <cm> the product domain way exceeds "web scripting", though.
19:50:55 <shapr> There are a bunch of different nifty web frameworks for Python.
19:51:04 <shapr> Zope and Plone are very powerful.
19:51:20 <shapr> Quixote is neat.
19:51:22 <dottedmag> cm: we use PHP as the business-logic language. Due to historical reasons, but... that's still a good choice.
19:51:47 <shapr> I find it har to believe that PHP is a good choice for business logic.
19:52:01 <cm> dottedmag: so are we, and it's a bad choice less to the language (which sucks, but it doesn't matter) but to the request-response style model
19:52:15 <cm> s/matter/matter as much
19:52:22 * Igloo goes to bed muttering something about PHP using strings to build lambdas under his breath as he goes  :-)
19:52:27 <cm> (i guess.. i'm unsure)
19:52:41 <cm> Igloo: haha, figure how my closure() function is implemented ;-)
19:52:46 <cm> nn
19:53:24 <dottedmag> cm: yeah, RR style does not fit long-living/resident systems, but our business logic is the business logic of Web application
19:54:13 <cm> is it complex?
19:54:21 <cm> (vague question, i know)
19:54:40 <dottedmag> cm: yes. Actually, we trying to switch to the another language :)
19:54:45 <cm> hah!
19:54:49 <cm> which one?
19:55:38 * shapr wants Haskell for his next web project.
19:56:13 <dottedmag> cm: We still not decided it. OCaml/Haskell won't fit the most developers' brains, python scares their minds due to it's indentation, C++ is too low-level. We are searching for the apropriate language currently.
19:56:49 <cm> wow. i've never taken the indentation "argument" for serious. :|
19:57:02 * dottedmag thinks I should not even mention Lisp/Scheme/Ruby
19:57:15 <dottedmag> cm: yeah, but some people do.
19:57:29 <cm> yeah, maybe i should.. i just don't get it.
19:57:31 <dottedmag> dottedmag: and, unfortunately, most people do :(
19:57:46 <cm> what's wrong about ruby for you guys?
19:57:56 <cm> like what's the main argument against it?
19:57:58 <cm> speed?
19:58:28 <dottedmag> cm: It looks too strange for, mm, most developers.
19:59:01 <dottedmag> cm: unfortunately, not too many developers may easily switch to the another language.
19:59:26 <dottedmag> cm: and, anyway, we have a big amount of old code we have to interact with.
19:59:37 * palomer doesn't like the another language
19:59:39 <shapr> Can you port the code?
19:59:49 <cm> i do understand the point about ocaml..scheme, but with python/ruby the only reason I see is legacy code which would have to be ported
19:59:53 <dottedmag> shapr: are you joking?
19:59:56 <cm> (for us)
20:00:07 <cm> s/understand/share
20:00:27 <shapr> No, I'm not joking.
20:00:39 <shapr> How big?
20:01:03 <cm> also, i'm not sure whether python gives enough to justify a switch. ruby would at least simplify a lot of stuff with its blocks.. I'm still waiting for PEP 310 to come through
20:01:14 <dottedmag> shapr: imagine the code nobody maintaining for a 3 years, written without documentation and by already fired programmers.
20:01:31 <shapr> That sounds a very good reason to port it so that you do have peope who understand it.
20:01:40 <shapr> Maybe refactor is a better word?
20:01:43 <cm> shapr: highly agreed.
20:02:28 <dottedmag> shapr: but nobody will wait for the 3 years to port it. Our company was taken by the other company only due to the releases planning: we didn't release too long and lost the customers.
20:03:07 <dottedmag> Everyone knows we should rewrite everything from scratch, but we just don't have a time to do it.
20:03:14 <shapr> I think monthly releases is about the longest you should wait.
20:03:27 <dottedmag> (even top managers know we should rewrite everything)
20:03:30 <cm> but porting != rewriting from scratch, IMO
20:03:48 <cm> because you transform the domain-specific knowledge inside the code.. or you should
20:04:01 <shapr> Yes, I think the same thing.
20:04:19 <shapr> Slowly port your code from the old language, and keep the new code tight.
20:04:35 <dottedmag> cm: noone know what exactly logic hides under the ugly code :(
20:04:35 <shapr> I like test-driven-development.
20:04:44 <cm> dottedmag: you will find out..
20:04:54 <shapr> That logic is a big part of the value of your company.
20:04:55 <cm> dottedmag: hey, even I do at my new job :-)
20:04:56 <dottedmag> cm: after years of digging
20:05:06 <palomer> I like verified code
20:05:06 <cm> dottedmag: after minutes of digging!
20:05:39 <dottedmag> cm: after years. I know, I already digged a small pieces of our code :(
20:05:47 <dottedmag> cm: it takes too long
20:06:00 <cm> dottedmag: definitely difference experience for me, then.
20:06:11 <dottedmag> cm: we digged different code :)
20:06:17 <cm> yeah I guess
20:06:25 <cm> anyway..
20:06:46 <cm> can you write <buzzword> services to access legacy functionality?
20:07:21 <dottedmag> cm: you mean encapsulate legacy functionalty?
20:07:43 <cm> no, provide an interface to it via some language-neutral interface
20:07:50 <cm> soap, xmlrpc, socketserver, whatever
20:08:05 <cm> some functionality that allows your new code to reuse old suff, and gradually port over on a by-need base
20:08:09 <cm> basis
20:08:09 <shapr> I test my zope code with Haskell via xmlrpc.
20:08:10 <dottedmag> cm: yeah, that's the exactly encapsulation in the wide sense
20:08:41 <cm> [it's useless to debate about "widened" terms ;)]
20:08:44 <shapr> You could keep the core logic in an expressive language like Haskell, and let the other developers act as clients for the core code.
20:08:56 <shapr> Then you can call the Haskell from PHP.
20:09:02 * Lunar^ goes to bed
20:09:16 <shapr> Lunar^: g'night!
20:10:15 <dottedmag> the language-neutral interfaces are ok. We are moving in this direction, but very slow. I'm trying to speed up the things.
20:11:26 * dottedmag even remembers the discussion yesterday where we decided PHP isn't able to provide required functionality and wrote shell script to work around it.
20:11:53 * shapr laughs
20:11:59 <shapr> that's depressing.
20:12:08 <shapr> Reminds me of some things I've done myself :-)
20:12:21 <cm> what was PHP incapable of?
20:12:41 <dottedmag> cm: reacting to the event where there is no browser requests at all
20:13:26 <dottedmag> cm: never imagined PHP daemon :)
20:13:44 <cm> hum ;)
20:13:54 <dottedmag> ok, guys, thanks for the fruitful discussion, time to go to the work.
20:13:59 <cm> cya
20:14:50 <cm> shapr: which languages do you see as most suited for the domain i tried to describe above?
20:15:02 <shapr> what, business logic?
20:15:22 <cm> "web framework, content management system, specific web applications"
20:15:35 <cm> (2nd/3rd using 1st)
20:15:58 <cm> (including business logic of course)
20:16:23 <shapr> I'm not sure. I've used a bunch of different languages, and things don't always work out like I expected.
20:16:31 <shapr> Haskell is very expressive.
20:16:37 <shapr> But Python is very popular.
20:16:53 <shapr> I think the language that you should choose really depends on your developers.
20:16:54 <cm> it's gonna be a lot easier to convince people of using Python
20:17:07 <cm> you mean Java? :)
20:17:25 <shapr> if you could ignore management and only ask your developers, what would they choose?
20:17:46 <shapr> If you had six weeks to introduce all your guys to various languages and systems, what would they pick?
20:17:57 <cm> 50% of the relevant developers are management
20:18:09 <shapr> That's either wonderful or terrifying.
20:18:09 <cm> (besides me)
20:18:22 <cm> the other 50% know Java and PHP
20:18:51 <shapr> Why not run a pilot project?
20:18:51 <cm> the other 40% have no idea what they are supposed to like (hardly beyond the programming basics) ;)
20:18:56 <shapr> ouch
20:19:49 <shapr> Haskell is the best language for our company web dev work. Because... I'm the programmer.
20:20:13 <cm> a pilot project involving other programmers than me and other programming languages than PHP or Java would require other programmers to have a look at other programming languages than Java or PHP before the pilot project could start :/
20:20:17 <cm> in their free time, I guess
20:20:32 <shapr> In my last job, Java was way too high level for 95% of the programmers.
20:21:06 <shapr> Why can't you mix learning the language into the pilot project?
20:21:22 <shapr> I get the feeling I am seriously out of touch when it comes to the average coder.
20:21:52 <cm> an idea I've been considering for a while is to ask my "semi-previous" employer to give me a (paid) month to prototype new stuff and present both the language used and the prototype (and its implementation) to the other developers
20:22:10 <cm> maybe present the language first in order to make them interested
20:22:12 <shapr> Can you scrape up a four man team of explorers to do that?
20:22:51 <cm> [language presentation -> prototype (not in the sense of throw-away) work -> prototype presentation/evaluation]
20:22:52 <shapr> My first experience with commercial webdev in Zope started a week before the due date =)
20:23:12 <cm> how do you mean that question (hard time parsing it, sorry)?
20:23:15 <cm> :)
20:23:50 <shapr> Maybe some people in your company are natural explorers? Do you have a few people who want to learn new things?
20:24:10 <shapr> Can you start a steady pipeline of knowledge building in your company?
20:24:23 <cm> we've one guy who has quite some potential about software development IMO, and who would be able to adjust quick to new idioms in new languages
20:24:49 <shapr> Can you hook up with him to do your prototype stuff?
20:24:58 <cm> but I will most definitely not be able to convince management of "using" him for that project
20:25:01 <shapr> ah
20:25:12 <cm> I think.. he's doing all serious work at the moment
20:26:04 <cm> (now that I work at Ubisoft, I'm not regularly working at the company anymore.. basically just R&D stuff at the moment, maybe more once/if I got back after 1 year)
20:26:06 <shapr> I think the only way you'll really know what's good or not is to try it yourself.
20:26:34 <shapr> I think you can write a website prototype in a week with Zope.
20:26:42 <shapr> And less time with the smaller Pythonic web frameworks.
20:26:49 <cm> I'm not sure we should use Zope.
20:27:01 <shapr> Yah, Zope has its problems.
20:27:02 <cm> I don't think it quite fits into our "vision" of the future product line
20:27:07 <shapr> But you won't know till you try...
20:27:19 <shapr> J2EE, maybe two weeks?
20:27:28 <shapr> I'd like to try WebObjects sometime.
20:27:43 <shapr> a prototype with WASH would probably take a week =)
20:27:45 <cm> I've to get a decent concept for a test application, first
20:28:15 <shapr> What does the company do?
20:28:24 <cm> homepages and web applications
20:28:34 <shapr> that's pretty broad
20:28:57 <cm> well.. homepages for larger businesses, and customer-specific intranet applications
20:29:14 <cm> intranet applications in the broader sense
20:29:19 <cm> but always over the browser
20:29:24 <shapr> Zope is a real powerhouse for web apps, but it hurts to upgrade and it can be quite fragile sometimes.
20:29:46 <cm> is it easy to integrate something like, say, gmail-style GUI into Zope?
20:29:46 <palomer> I'm inventing a new, revolutionary language. it will have such cutting edge features as lazy evaluation and matching. I'm calling it "Baskell"
20:29:55 <shapr> I've never used gmail.
20:30:30 <shapr> What sort of features?
20:31:05 <cm> hm, basically the responses are JS-code, which is eval'ed from javascript
20:31:15 <cm> (using a GUI library which is loaded into a hidden frame)
20:31:27 <shapr> oh, trickle down gui updates?
20:31:32 <cm> and asynchronous requests using XMLHttpRequest
20:31:50 <cm> yeah, allows you to make the GUI really responsive
20:31:58 <shapr> still an ugly hack
20:32:02 <cm> more of a "desktop-style application" feeling
20:32:07 <shapr> Yah, I know what you mean.
20:32:09 <cm> a hack which works wonderfully.
20:32:12 <cm> :)
20:32:20 <shapr> if your browser has javascript...
20:32:23 <cm> with back button, with open-in-new-tab
20:32:39 <cm> we already assume that, so that's no issue.
20:32:54 <shapr> There was some work on that for Zope/Plone, but I don't know the details.
20:33:19 <shapr> Our clients want websites with customers in south america right now. I've seen hits from Netscape 1.x
20:33:36 <cm> hehe, thank god I don't have to deal with that. but with PHP.. what is worse?
20:33:42 * cm shuts up
20:34:15 <shapr> Zope and Plone are good at getting the power into the hands of the website users.
20:34:56 <cm> last time I checked Plone wasn't satisfying to our needs, but I will re-evaluate Zope/Plone once I got a solid idea what will are going to want in the future
20:35:20 <shapr> Personally, I think Haskell is the best choice, because it's really powerful.
20:35:31 <shapr> I don't think your management will go for that though.
20:35:37 <shapr> Mine doesn't usually =)
20:36:03 <cm> :)
20:36:07 <shapr> Our company is just me and my fiancee. She's the social and organization side, and I'm the tech side.
20:36:34 <cm> and she doesn't like Haskell? :-)
20:36:37 <shapr> It's amazing how much stuff we get done.
20:37:02 <shapr> Nah, she doesn't really care one way or the other about Haskell. But she does want community support so we can take vacations.
20:37:25 <shapr> Zope and Plone have a big community, and if vanish from the face of the earth, someone else can take over.
20:37:40 <shapr> That's more difficult with Haskell.
20:37:48 <shapr> Though I think it's getting easier.
20:38:12 <shapr> Haskell web apps and libs are improving.
20:39:09 * shapr shrugs
20:39:14 <cm> hm
20:39:26 <cm> i want too much, and know too few
20:40:14 <shapr> Haskell isn't a complex language, and it doesn't have that many moving parts.
20:40:20 <cm> i guess i'll ly into my bed, finish searching for new stuff in "C++ Coding Standards" and check out "Programming Ruby" (2nd Ed) ;-)
20:40:30 <cm> I love haskell.
20:40:48 <shapr> But those few parts do a lot. So you need developers with a certain mindset, and a willingness to expand their horizons.
20:40:59 <cm> other people might have a hard time to adjust, though. hmm.
20:41:30 <cm> And a way to convince management that losing money for a specific amount of time will make them more money later ;-)
20:41:34 <shapr> Languages like Java are like training wheels, I think.
20:41:47 <shapr> They're safe, but you can't go very fast.
20:42:31 <shapr> I'd much rather hire four Haskell programmers and pay them 100,000 a year, instead of hiring fourty Java programmers making 20,000 a year.
20:43:01 <shapr> But maybe I'm a purist or extremist.
20:43:04 <cm> although this is mostly due to development not scaling proportional to the number of programmers ;)
20:43:22 <cm> but i see your point
20:43:43 <shapr> On the other hand, sometimes you just need some code that works.
20:44:01 <shapr> And in those cases, a Java monkey with an associates degree in OOP will suffice.
20:44:06 <tuomov> I'd much rather hire four good programmers without regard for the language they know atm, than fourty <insert buzzword> monkeys
20:44:14 <shapr> tuomov: too true
20:44:50 <tuomov> but it seems to me that most companies do exactly the opposite..
20:45:05 <shapr> And then they get upset when they have low quality code.
20:45:16 <shapr> or when no one can understand the code of those who left.
20:45:20 <cm> it's sad when the monkeys are the majority, anyhoo.
20:45:31 <cm> but i like the challenge of transforming monkeys into developers :-)
20:45:53 <shapr> does that really work?
20:46:01 <cm> anyway, i think part of the problem is that is's Really Fucking Hard to find good people
20:46:09 <tuomov> I don't even know how to use any of the common buzzwords..
20:46:11 <shapr> yah, probably so.
20:46:21 <cm> for the 90+% of the companies that are not called Google, anyway
20:46:38 <cm> (or MS Research, or whatever)
20:46:55 <cm> I remember us looking for weeks or even months for a good additional programmer
20:47:00 <tuomov> consider the much of the industry develops uninteresting shit, it isn't surprising
20:47:03 <tuomov> +ing
20:47:08 <tuomov> s/the/that/
20:48:04 <tuomov> I'd prefer programming mathematical stuff, but such jobs seem rare
20:48:17 <shapr> I like working on neat problems.
20:49:04 <shapr> Getting paid to work on neat problems is even better.
20:49:22 <tuomov> those people are rare
20:50:43 <tuomov> depending of course on what one considers a neat problem.. I'm very picky
20:51:14 <tuomov> I'd like to work on problems where there's chance to do something new instead of just reinventing the wheel
20:51:15 <cm> I'm pretty easy to motivate :)
20:54:16 <shapr> How many #haskell people in Montreal?
20:54:31 <shapr> Where's McMaster?
20:55:05 <cm> :(
20:55:36 <cm> I think I saw at least 20 girls running around with McMaster jackets last week-end..
20:55:54 <shapr> I am often amazed that university homepages don't have an address.
20:56:02 <cm> ..and it's not that the jackets look especially trendy.
20:56:14 <shapr> Aha, Hamilton  Ontario
20:56:23 <shapr> whatever that means.
20:56:47 <shapr> well, it's 6am, that's my bedtime.
20:56:52 <cm> "other state", it means ;)
20:56:58 <cm> good night shapr-san
20:57:04 <shapr> g'night 
20:57:09 <cm> i'm afk reading
20:57:11 * shapr disappears
21:07:19 <palomer> all hail baskell
21:42:53 <dons> yi hackers: try out :reload. it's much fun. recompiles ~/.yi/*
21:56:48 <palomer> when is haskell going to get higher order modules?
22:09:39 <palomer> omg
22:09:43 <palomer> I'm going to kill someone
22:09:45 * palomer kills baskell
22:10:43 <Riastradh> palomer, do you say 'omg' that frequently in real-life conversation?
22:11:56 <palomer> no
22:12:15 <np_hard> oomg
22:13:44 <monochrom> I know some people who use "lol" as though it were period when chatting online.
22:14:40 <monochrom> I don't want to imagine how annoyingly they would laugh out loud every ten seconds in real conversations.
22:18:11 <Riastradh> One would think that they'd notice how annoying saying 'lol' ten seconds is as well.
22:18:35 <dash> http://www.thecoolkids.org/articles/editorials/onlinelang.php
22:19:24 <palomer> omg
22:25:41 <Lemmih> Good morning, #haskell.
22:45:07 <segphault> whats up y'all?
