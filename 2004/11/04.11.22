00:01:51 <blackdog> g'day all
00:02:19 <blackdog> dons: tried to get in contact for the harbour cruise with PGMG and les savy fav, but couldn't find you...
00:08:00 <musasabi> What about mainloops?
00:08:09 <musasabi> most windowing toolkits like to have their own..
00:36:20 <edi> 'morning
01:18:48 <xerox> yawn
01:21:33 <musasabi> Is there a reason that ghc source does not use 'do' in addition to history?
03:20:59 <bones_> does anyone know antoni diller?
03:22:59 <bones_> i'll take ur silence to mean no
03:24:44 <Lemmih> I haven't heard of him.
03:26:33 <bones_> hes no one particularly famous
03:26:35 <bones_> a friend of mine
04:02:26 <musasabi> How should Show instances be created (with deriving) for mutually recursive modules?
04:04:31 <Si\> you can't
04:05:07 <Si\> instances are not allowed in hi boot files, so you have to include them in an external modules
04:05:13 <Si\> so you can't use deriving
04:05:55 <Si\> terribly annoying
04:08:30 <musasabi> nasty..
04:11:19 <musasabi> wasn't there a way to "derive" instances with TH? I remember someone saying something to that effect...
04:14:31 <Si\> yes
04:14:37 <Si\> but only for particular classes
04:14:40 <Si\> Typeable and Data
04:14:57 <Si\> there might be one for show somewhere
04:19:52 <Itkovian> anybody any experience with darcs 0.9.20
04:20:20 <Itkovian> i can get, pull, etc. but doing a diff spawns 4 darcs processes that take no cpu time whatsoever after like 5 secs
04:20:57 <musasabi> Itkovian: I would try updating darcs first.
04:21:34 <musasabi> Si\: if you happen to have the url, I could look whether that can be easily adapted..
04:22:06 <Itkovian> yeah well , my gentoo portage tree doesn;t really agree on that :-(
04:22:39 <musasabi> Itkovian: on gentoo do: ACCEPT_KEYWORDS="x86" emerge darcs
04:22:51 <Itkovian> i know, i know ...
04:23:05 <Itkovian> but i'd rather keep only stable stuff ...
04:23:11 <Itkovian> might give it a try tho.
04:23:24 <musasabi> well darcs 1.0 is more stable than 0.9.2 ;)
04:23:38 <musasabi> only it has not been in gentoo for very long.
04:23:39 <Itkovian> do different versions keep the same formats for their patches and metainfo?
04:23:56 <Itkovian> it doesn't really crash ... just hangs ;-)
04:24:16 <Itkovian> btw, musasabi thx for the excellent gui on setting it up
04:24:22 <musasabi> they should be compatible iirc (try first out of course, but it should just work)
04:24:22 <Itkovian> *guide
04:26:21 <Itkovian> emergeing right now ...
04:26:49 <Si\> http://www.cs.chalmers.se/~ulfn/th/DeriveData.hs
04:28:42 <musasabi> thanks.
04:34:52 <shapr> foo
04:38:11 <Itkovian> forget it ... 1.0.0 also spawns and then stops, at least that's what I'm seeing ...
04:38:47 <Itkovian> this one even refuses to die with a kill -15
04:39:10 <shapr> what os are you using?
04:39:15 <shapr> ah, gentoo
04:42:34 <Itkovian> yeah
04:43:14 <Itkovian> i can do e.g. an annotate
04:43:18 <Itkovian> no problems there
04:44:48 <musasabi> I tried darcs diff on gentoo 2004.3 (darcs 1.0.0 from portage) for a 20mb repository with changes and it worked fine.
04:45:24 <musasabi> Itkovian: maybe a stale nfs mount?
04:47:11 <Itkovian> erm, nope, no nfs there
04:47:29 <Itkovian> i think it does about everything but diffing
04:47:46 <Itkovian> will try some more stuff ...
04:49:29 <xkb> Does haskell have a bottom value? something that fits all types?
04:49:43 <xkb> Im actually looking for something like it in clean
04:50:42 <musasabi> xkb: yes.
04:50:43 <Si\> undefined
04:50:52 <musasabi> xkb: error "foo", undefined, bot = bot
04:50:56 <xkb> spelled like that?
04:50:58 <xkb> ah
04:59:22 <xerox> what does Pt means in data Point a            = Pt a a
04:59:23 <xerox> ?
05:00:00 <Lemmih> It's the data constructor.
05:00:19 <xerox> where can i find a reference to lookup things like data contructors ?
05:00:36 <xkb> grep :P
05:00:48 <Lemmih> www.haskell.org/tutorial
05:01:28 <Lemmih> 2.2 User-Defined Types
05:01:28 <eixei> hi there
05:01:31 <Lemmih> Hey eixei
05:02:16 <eixei> could I ask you a question that has little to do with haskell? :-) (if I'm not interrupting anything that is)
05:02:41 <Lemmih> Sure. Ask away.
05:02:41 <eixei> please please please *puppy-eyes look*
05:02:52 <xkb> oh darn.. another puppy
05:03:00 <xerox> Lemmih that's what i was reading O_o
05:03:28 <eixei> Have you ever done anything with the coding of turing machines using "Goedelnumbers"?
05:04:24 <eixei> I was wondering how you code in that a state is either the start state or an end state (in case that is the correct terminology, which I doubt, but I hope you understand me anyway)
05:04:51 <Lemmih> xerox: Oh. Then there shouldn't be a problem.
05:05:13 <eixei> xkb: don't you like puppies? :-)
05:05:21 <xerox> Lemmih i restart the paragraph, maybe i'll understand myself
05:05:30 <xkb> depends.. not when they shit allover the floor
05:05:48 <eixei> sorry... it won't happen again :-(
05:05:57 <xkb> just kiddin
05:06:10 <eixei> aye *g*
05:09:06 <Lemmih> xerox: The Bool data type is a pretty good example. True and False are constructors which creates a Bool. It's the same with the data type Point; Pt is a constructor which creates a Point but it's a little different tho, because it has two arguments.
05:09:44 <xerox> Point is what is defined, Pt is an haskell constructor, ok 
05:11:15 <eixei> nvm... just found out that q? always is the starting state and q? the ending one... at least in our definition :-))
05:11:52 <xerox> Lemmih, pardon, another question: a -> a -> Point a, what's the meaning of two '->' ?
05:13:06 <Lemmih> Are you familiar with (+)?
05:13:10 <Lemmih> @type (+)
05:13:12 <lambdabot> (+) :: forall a. (Num a) => a -> a -> a
05:13:30 <xerox> i'm not familiar with haskell :) trying to learn it
05:13:41 <Lemmih> It takes two numbers and evaluates to their sum.
05:13:47 <xerox> i read the short introduction and now the documents
05:14:47 <xerox> i lost something :)
05:14:54 <Lemmih> xerox: Take a look at the 'inc' declaration (under section 2).
05:15:17 <xerox> i understood inc
05:15:20 <xerox> head and tail
05:15:39 <xerox> takes Interger returns Integer is a correct read?
05:15:46 <xerox> takes list returns element
05:16:36 <Lemmih> Yes. So what do you think ':: a -> a -> Point a' means?
05:17:27 <xerox> a -> a means everything that is the same type no?
05:17:40 <Lemmih> That is correct.
05:17:57 <xerox> but why there is another '->'
05:18:26 <Lemmih> Because it takes two arguments.
05:18:58 <xerox> i would have thought a a -> Point a
05:20:12 <xerox> maybe i misunderstood '->' itself
05:29:56 <Lemmih> xerox: There's a tutorial aimed at the "imperative programming crowd" located here http://haskell.org/complex/
05:31:15 <xerox> i'll take a look thanks
06:29:48 <xkb> xerox: also take a look at curying
06:29:55 <xkb> although that may not clarify things
06:31:21 <xerox> where?
06:35:05 <xkb> google around for it
06:35:15 <xkb> and its also in the haskell tutorial I think
06:43:17 <xerox> okie :)
06:45:12 <xerox> http://www.zvon.org/other/haskell/Outputglobal/index.html <- ?
06:46:43 <ned> xerox: (+) :: a -> a -> a means that (+) take a, take a, give a  :  (+) 2 3 = 5 ; ((+) 2) is of the type a -> a   :  ((+) 2) 3 = 5
06:47:26 <xerox> the last -> thing is "give" in every case?
06:47:45 * shapr yawns
06:47:49 <ned> hum .. i think :) others, am i wrong ?
06:47:54 <xerox> :D
06:48:06 <xerox> and what about the parens around x ?
07:20:05 <Lemmih> I would say that it's take a, give (take a, give a).
07:20:47 * Lemmih is back from the most intense unicycle training section ever.
07:20:58 <shapr> did you learn new stuff?
07:21:35 <shapr> My muscles are all sore from yesterday's training session. Most of the strain is the temperature though :-/
07:21:46 <shapr> It was -21Â°C on the ride to school today.
07:23:28 <shapr> Lemmih: oh, I can do a rolling hop of about 30 cm
07:32:21 <Lemmih> shapr: Nice.
07:35:56 <Lemmih> shapr: The weather is so sucky that there weren't any kids on the local playground (it's next to the football field where I usually train) so I had it all for my self.
07:37:31 <Lemmih> Anyhow, I'm off for a shower.
07:50:17 <shapr> hiya arauko 
07:51:17 <Itkovian> update on the darcs stuff ... the 'diff' command still fails for some reason, but whatsnew performs very well :-)
07:51:19 <arauko> Hello All.
07:51:21 <arauko> shapr, hello buddy
07:51:28 <shapr> arauko: I like your signoff message.
07:51:34 <shapr> I very much agree with it.
07:51:37 <arauko> :-)
07:52:03 <shapr> I think it extends even further than that.
07:52:13 <arauko> *nods*
07:52:25 <shapr> I've found two kinds of library source code. Code I would write myself, and code that I can't understand.
07:52:47 <shapr> Code that I would write myself is far more valuable because I can immediately understand it and use it.
07:52:54 <eixei> lol
07:53:22 <shapr> I'm realizing that one of the greatest strengths of open source is that I can invest my time in learning some tools, and I can keep those tools for the rest of my life if I want.
07:53:44 <shapr> closed source software can't claim that same benefit.
07:54:51 <shapr> closed source tools that do almost what I want will probably never be fixed by the company that owns them.
07:54:52 <dottedmag> shapr: yeah, but some ppl push this strength to the limit and do not provide any documentation.
07:55:06 <shapr> Docs are good.
07:56:18 <shapr> But the greatest strength of OSS is that I can become familiar with a bunch of libraries and applications, and then I have lots of tools. I can build my own, or hack existing tools to do what I want.
07:58:56 <shapr> dottedmag: what do you think about unit tests as both API docs and examples?
07:59:02 <dottedmag> shapr: and more: you can hack exisisting tools and contribute back to the community.
07:59:26 <dottedmag> shapr: that's excellent idea. But not so much code follows this strictly :(
07:59:28 <shapr> right, the network effect that each contributor improves it for every user.
08:00:03 <shapr> I'm trying to follow that.
08:00:19 <shapr> I think I should make some extremely clear Haskell examples for both HUnit and QuickCheck
08:02:00 <dottedmag> shapr: but it's a field of research how to make reliable and fast test system for the low-level system utilities, such I'm developing most time. I have an ideas, but until some open-source virtualization software invented, it's hard to implement.
08:02:20 <shapr> like which system utilities?
08:03:33 <dottedmag> shapr: utilities operating on many software packages installed and mainly due to side-effects. My field is mostly a hosting integration.
08:03:56 <dottedmag> shapr: it's hard to test utility which works on bind/apache/qmail and so on
08:08:12 <shapr> have you seen QuickCheckM ?
08:09:19 <dottedmag> no. looking at it right now.
08:13:11 <dottedmag> shapr: there is another level of problems that just testing problems inside one computer. I have to parallel this to the different virtual machines under different OSes. Testcases are pretty trivial, but they have to be managed outside.
08:24:51 <shapr> you can do it with QuickCheckM, but I'm not sure QCm will give you any benefits over user mode linux with return codes.
08:25:30 <dottedmag> shapr: even worse, I have to use VMWare for now.
08:26:01 <shapr> I haven't used VMWare more than five minutes, can you talk to it from the host OS?
08:26:12 <dottedmag> shapr: ssh :)
08:26:40 <shapr> yeesh
08:27:18 <xerox> yes, there are some extension
08:27:31 <xerox> it works well if you emulates windows inside windows :Prrr
08:28:25 <dottedmag> xerox: ah, i didn't mentioned. Only *nixes are considered
08:28:41 <xerox> i think there are extension for linux & fbsd
08:29:03 <dottedmag> xerox: which extension do you mean?
08:29:15 <dottedmag> xerox: host sytem can mount VMWare disks
08:29:28 <dottedmag> xerox: and can control start/stop VMs
08:29:32 <dottedmag> xerox: but nothing more
08:30:24 <xerox> mmh
08:31:03 <xerox> i think there are some extension
08:31:13 <xerox> i don't remember the purpose and i don't have vmware offhand
08:31:43 <dottedmag> xerox: yes, there are 'VMWare Tools', buth they provide mostly interactive features useless for the batch testing
08:31:50 <xerox> yeah :P
08:54:06 <CosmicRay> does anybody know where I might find a reference to the ghc pkg file format?  (or what the auto=True or auto=False line means?)
08:56:48 <Lemmih> If it's loaded without being explicit requested, perhaps.
08:57:00 <CosmicRay> ah, that makes sense
08:59:56 <shapr> right
09:00:17 <shapr> CosmicRay: one good example, haskelldb used to be auto loaded, but -fglasgow-exts was automatically on then
09:00:39 <shapr> xerox: do you have a type sig like that?
09:01:00 <CosmicRay> shapr: I'm packaging hsql right now, fyi
09:01:07 <CosmicRay> shapr: once it's in, somebody could package haskelldb too
09:01:19 <shapr> w00
09:01:22 <shapr> awesome!
09:01:34 <xerox> data Point a            = Pt a a
09:01:37 <shapr> the day I get around to learning how to make debs, I'll be dangerous.
09:01:41 <xerox> Note that the type of the binary data constructor Pt is a -> a -> Point a
09:01:47 <CosmicRay> shapr: hsql's example pkg file sets Auto=True, but cabal sets it false, and I was trying to figure out the correct behavior.  I think false is correct here; we don't want every program to have to link in database libs.
09:01:58 <CosmicRay> shapr: I thought you already did :-)
09:02:05 <shapr> nah, never got around to it.
09:02:09 <CosmicRay> shapr: aren't you on the debian list?
09:02:10 <shapr> is there a make your own debs tutorial?
09:02:12 <shapr> um.
09:02:12 <shapr> yes?
09:02:20 <shapr> I'm an avid user mostly.
09:02:23 <CosmicRay> shapr: debian-haskell@lists.urchin.earth.li, I mean
09:02:28 <shapr> right, I'm on there.
09:02:43 <shapr> xerox: do you understand that?
09:02:56 <xerox> nope
09:03:09 <shapr> have you used C?
09:03:45 <shapr> if you want to make a point type in C you probably would have to make two separate types, one for int, and one for float.
09:04:00 <shapr> data Point a = ... means that Point can have other types inside it.
09:04:06 <CosmicRay> shapr: for rolling your own debs, see: http://www.debian.org/devel/, especially the developer's reference and new maintainer's guide
09:04:20 <shapr> so, "Point (1 :: Int) 1" will have type of Point Int
09:04:30 <CosmicRay> shapr: you can also use missingh as an example of packaging up a pure haskell package
09:04:39 <shapr> but Point (1.0 :: Integer) 1 will be Point Integer
09:04:39 <shapr> xerox: make sense?
09:06:14 <shapr> CosmicRay: for Depends pglibs | mysqllibs | sqlite
09:06:21 <shapr> and maybe odbc, I haven't tried that.
09:06:23 <xerox> sorry
09:06:30 <CosmicRay> shapr: that's not right, because we have to have versioning info
09:06:35 <shapr> oh
09:06:40 <CosmicRay> shapr: ie, pglibs (>= 7.3.5) 
09:06:50 <shapr> hm
09:06:54 <CosmicRay> shapr: otherwise we can run into all sorts of icky library issues
09:07:00 <shapr> scary thought.
09:07:12 <CosmicRay> shapr: normally dh_shlibdeps will automatically scan your generated code and put whatever you need in there
09:07:25 <CosmicRay> shapr: however, it doesn't seem to peek inside the .a files for Haskell libs
09:08:16 <shapr> xerox: do these all make sense? "data PointI = Pt Int Int ; data PointII = Pt Integer Integer ; data PointF = Pt Float Float"
09:08:33 <CosmicRay> There are some manual workarounds that can tell dh_shlibdeps exactly what dev package to look at, but I'd rather avoid them if possible
09:09:14 <shapr> hoi swiert 
09:09:36 <swiert> hi shapr
09:11:35 * CosmicRay uploads hsql to incoming.
09:11:58 <CosmicRay> shapr: btw I have compiled it with postgresql, mysql, sqlite, and odbc support
09:13:31 <shapr> happiness!
09:13:51 <shapr> btw, if you put stuff in haskell-unsafe first, I'd be happy to test it out.
09:14:28 <CosmicRay> ok, I may do that next time.  Usually I have less than 3 hours between "need to have this" and "uploaded to incoming"
09:14:35 <shapr> ah, I see.
09:14:37 <CosmicRay> of course then there are three weeks before "goes into sid" :-)
09:14:41 <shapr> in that case, full speed ahead!
09:14:44 <shapr> heh
09:15:03 <CosmicRay> last time I had made about 5 cabal releases before it actualyl got into sid
09:16:08 <xerox> i'm sorry
09:16:13 <xerox> mom bothering me.. i read
09:16:28 <reffie> damn moms.
09:17:14 <xerox> <shapr> so, "Point (1 :: Int) 1" will have type of Point Int
09:17:15 <xerox> ?
09:17:25 <xerox> <shapr> but Point (1.0 :: Integer) 1 will be Point Integer
09:17:57 <xerox> <shapr> xerox: do these all make sense? "data PointI = Pt Int Int ; data PointII = Pt Integer Integer ; data PointF = Pt Float Float"
09:18:23 <xerox> Pt is an Haskell defined thing or an user one?
09:21:03 <xerox> @Pt
09:21:03 <lambdabot> Sorry, I don't know the command "Pt", try "lambdabot: @listcommands"
09:21:07 <Lemmih> It's user defined. It could just as well be data Point a = MakeAPoint a a.
09:21:18 <xerox> oh, thank you very much.
09:21:40 <kristnjov> http://xs4.xs.to/pics/04481/p556222.gif
09:21:57 <Lemmih> kristnjov: ?
09:22:14 <kristnjov> what? can't a guy type random letters on irc anymore?
09:25:36 <ibid> jyghjmtghgerdfvjmiujkk?
09:25:40 <Lunar^> Lemmih, shapr: Have you seen John Peterson answer ?
09:30:55 <shapr> Lunar^: yes, I'd like to switch haskell.org to debian/unstable
09:31:00 <shapr> what do you think?
09:31:15 <Lunar^> shapr: unstable ?
09:31:22 <shapr> works for me :-)
09:31:33 <shapr> I've been using debian/unstable on ScannedInAvian for ... over a year.
09:31:34 <Lunar^> shapr: sarge seems good enough, or do we really need unstable ?
09:31:51 <Lunar^> shapr: Yeah, sure, and it was broken sometimes :)
09:32:06 <shapr> all the times ScannedInAvian.org broke it was my fault =)
09:35:01 <Lunar^> yeah sure
09:35:21 <Lunar^> anyway, we can dbootstrap the current box, but it's a lot of work
09:35:27 <CosmicRay> shapr: I run unstable on my server too
09:35:34 <CosmicRay> shapr: however, unstable *does* break.
09:35:58 <CosmicRay> shapr: whoever admins it needs to 1) have a good deal of experience with Debian, and 2) keep up-to-date with development, and especially security, extra carefully
09:36:45 <CosmicRay> shapr: as an example, sed broke recently.
09:37:01 <Spark> why run unstable and not testing?
09:37:01 <CosmicRay> shapr: testing may be a better choice
09:37:11 <CosmicRay> shapr: it does break too, but much more rarely
09:37:14 <Spark> sarge is close to becoming stable now
09:37:16 <Spark> so it wont break :)
09:37:36 <shapr> I'm willing to admin haskell.org ...
09:37:45 <shapr> if it's debian =)
09:37:52 <CosmicRay> who hosts it?
09:37:57 <shapr> yale.edu
09:38:38 <CosmicRay> are they having troubles with it, or...?  (what prompted this discussion?)
09:39:00 <shapr> Lemmih wrote Hackage, Hackage requires HaskellDB, HSQL, etc.
09:39:13 <shapr> haskell.org is redhat something (fc1?) right now.
09:39:28 <Lunar^> shapr: http://wiki.debian.net/index.cgi?DebianTakeover
09:40:00 <shapr> I don't enjoy sysadmin work on redhat. I do enjoy sysadmin work on debian.
09:40:36 <shapr> I got root on haskell.org because of being wiki admin, and I picked up some other tasks along the way.
09:41:22 <shapr> John Peterson wants Hackage on haskell.org, I think it's a great idea but I don't want to maintain it on redhat.
09:41:40 <shapr> CosmicRay: was that convoluted enough? =)
09:41:48 <CosmicRay> shapr: I followed :-)
09:42:03 <xerox> shapr so, data Point Int = Pt Int Int does make sense?
09:42:06 <shapr> In short, I actually kind of enjoy sysadmin work, but only on Debian.
09:42:20 <shapr> @wiki HaskellDemo
09:42:20 <lambdabot> http://www.haskell.org/hawiki/HaskellDemo
09:42:23 <Lunar^> xerox: Not much
09:42:23 <shapr> xerox: read that url
09:43:25 <xerox> data Temp = Cold | Hot
09:43:30 * Igloo suspects the Yale people will want to admin any box in Yale, and have a number of RH machines
09:43:34 <shapr> Plus, most of the debian haskell maintainers hang out here, so any problems could quickly be discussed.
09:43:48 <Igloo> You'll probably have more luck (starting off) with a hackage.haskell.org Debian box elsewhere
09:43:57 <xerox> this Cold and Hot must be defined somewhere, or acts as "Constants"
09:43:58 <Igloo> BICBW  :-)
09:44:06 <shapr> xerox: constants
09:44:16 <xerox> it clarifies :D
09:44:26 <Igloo> xerox: That data statement defines the two data constructors Cold and Hot, and the type Temp
09:44:42 <xerox> data constructors = functions
09:44:43 <xerox> ?
09:44:57 <Igloo> Not exactly
09:45:09 <Igloo> They act as functions, but can also be used for matching patterns against
09:45:16 <Lunar^> Igloo: John Peterson said that he would prrefer having a single box
09:45:28 <Igloo> Lunar^: In Yale, or full stop?
09:45:47 <Lunar^> "There's no particular reason that haskell.org has to do redhat.  The
09:45:47 <Lunar^> local admin folks have been messing around with various linux systems
09:45:48 <Lunar^> and would probably be fine with Debian.  "
09:45:58 <Igloo> Oh, OK, nice
09:50:51 <Lunar^> Igloo: question is: should we be hardcore and hot transform the current box into a Debian, or should we wait for another box
09:51:04 <Lunar^> Igloo: in either case, how could we minimize the downtime
09:51:46 <Lunar^> Igloo: (another box means a box freshly installed, JP said that Yale could not afford two boxes for Haskell)
09:51:46 <Igloo> New box almost certainly means fewer headaches, if it's an option
09:53:22 <xerox> so in data Point a = Pt a a, Pt is the type constructor AND the data constructor because of myPoint = Pt 1 1 ??
09:53:39 <Lunar^> xerox: Not the type constructor
09:53:56 <shapr> Just give me a fresh debian installation, and I'll be a happy camper.
09:53:57 <Lunar^> xerox: Try ":t myPoint" in GHCi or hgus
09:54:26 <Lunar^> shapr: Sure, but we need them to get it online... which could mean a while
09:54:32 <shapr> I hope not.
09:54:46 <xerox> Prelude> data Point a = Pt a a
09:54:46 <xerox> <interactive>:1: parse error on input `data'
09:54:47 <xerox>  ?
09:55:31 <Lemmih> xerox: Save it in a file and then load it.
09:57:17 <Lunar^> shapr: Should we schedule  a real IRC meeting with all people interested in haskell.org admin ?
09:57:28 <shapr> sure, who is that?
09:57:35 <Lunar^> that's my point
09:57:59 <Lunar^> Make a public annoncement, set up an admin@haskell.org malling-list, and so on
09:58:12 <shapr> let's ask SyntaxNinja 
09:58:16 <Lunar^> sure :)
09:58:35 <shapr> I got the impression from John that he doesn't care, as long as someone does sysadmin.
09:58:56 <Lunar^> shapr: remember our talks about where to host hOp ?
09:59:04 <bourbaki> moin
09:59:10 <Lunar^> shapr: I was quite annoyed because I didn't know who I should ask
09:59:13 <SyntaxNinja> did john reply? i can't get to my email.
09:59:19 <Lunar^> SyntaxNinja: yes
09:59:34 <Lunar^> SyntaxNinja: to sum up: "One box only in Yale, could be a Debian"
10:00:02 <Lunar^> SyntaxNinja: and he would prefer that everything stays on a single server
10:00:38 <SyntaxNinja> so he's willing to convert haskell.org to debian?
10:01:20 <eixei> ooopsie, I forgot to say bye!
10:01:22 <Lunar^> SyntaxNinja: not sure about that _he_ would do it
10:01:29 <shapr> SyntaxNinja: http://www.scannedinavian.org/~shae/haskelldotorg.text
10:01:33 <eixei> bye everyone, and good luck with your admin thingy!
10:01:42 <shapr> bye eixei 
10:01:53 <shapr> :-)
10:01:53 <Lemmih> bye eixei
10:02:07 <SyntaxNinja> shapr: thanks.  that sounds pretty reasonable.
10:02:10 <xerox> Prelude> :load "c:/test.hs"
10:02:11 <xerox> can't find file `c:/test.hs'
10:02:14 <xerox> something like it? :D
10:02:33 <shapr> xerox: try :l "test.hs" maybe?
10:02:47 <kang> hey, how do i do the sum of the result of the counts of lists ? i can do count of lists but i want to sum them up inh the same function
10:03:23 <Lemmih> @type sum
10:03:25 <lambdabot> sum :: forall a. (Num a) => [a] -> a
10:03:25 <kristnjov> explain it more in detail what you want to do kang
10:03:30 <xerox> can't find
10:03:34 <xkb> kang why in the same function?
10:03:45 <Lunar^> SyntaxNinja: I was thinking about making a real call for a meeting
10:03:53 <Lemmih> xerox: Shouldn't it be c:\\test.hs?
10:03:59 <SyntaxNinja> Lunar^: ?
10:04:01 <shapr> why not just ask the official admins? 
10:04:01 <Lunar^> SyntaxNinja: something about creating an admin team for Haskell.org
10:04:11 <SyntaxNinja> Lunar^: hmm. eeeenteresting.
10:04:23 <SyntaxNinja> how do other projects do this? in my experience it's all pretty ad-hok
10:04:23 <xerox> Lemmih doesn't work
10:04:41 <Lemmih> xerox: Where did you save the file?
10:04:47 <xerox> c:\test.hs :D
10:04:51 <kang> xkb: why not :) well, doesn't really has to;) but i wanted
10:05:03 <shapr> I don't know how other projects work.
10:05:05 <xerox> bah i restarted emacs & GHCi and now works
10:05:05 <xerox> dunno.
10:05:19 <Lunar^> SyntaxNinja: currently, it's pretty obscure about who manage haskell.org
10:05:35 <SyntaxNinja> I mean projects like debian and such.
10:05:38 <Lunar^> SyntaxNinja: Having a team would help haskell.org to be the main place for haskell thingy, IMHO
10:05:55 <SyntaxNinja> yeah; I'd be willing to have root on it and do minor maintinence, fwiw.
10:06:09 <Lunar^> SyntaxNinja: AFAIR, there is a sysadmin team in Debian
10:06:32 <shapr> I'd be willing to do lots of sysadmin stuff on a debian haskell.org
10:06:37 <SyntaxNinja> there is
10:06:49 <shapr> I think that would also encourage creation of debs.
10:07:06 <shapr> I know I'd sure want debs for, HaXml,HSQL,HaskellDB, etc.
10:07:13 <shapr> even to the point of creating them myself.
10:07:16 <SyntaxNinja> we could .debianize hackage :)
10:07:21 <shapr> good point
10:09:20 <Lemmih> But how are we gonna install Debian on haskell.org without downtime (or with the least amount)?
10:09:43 <SyntaxNinja> we probably should actually create a whole new box in parallel to haskell.org
10:09:50 <SyntaxNinja> then do the switchover.
10:10:10 <Lunar^> SyntaxNinja: or use http://wiki.debian.net/index.cgi?DebianTakeover
10:10:31 <Lunar^> which would mean some downtime, but not much
10:10:58 <shapr> From what John said, there's one box for haskell.org, and that's it.
10:11:15 <Igloo> From the tone of the mail I'd have thought a 1 month overlap with boxes was OK
10:11:48 <SyntaxNinja> meeting bbiab
10:11:50 <Igloo> It would probably be sensible to do the Debianisation before the switch
10:12:13 <SyntaxNinja> yeah, there should be overlap, otherwise, there will be much more stress, pain, and criticism.
10:12:27 <Lunar^> yeah sure
10:12:55 <xerox> *Main> :t myPoint
10:12:55 <xerox> myPoint :: Point Integer
10:17:31 <Lemmih> xerox: Great.
10:18:59 <xerox> uh
10:19:44 <xerox> it's making somewhat clear
10:22:35 <Lunar^> xerox: toplevel is really useful when you don't get something
10:39:50 <Lunar^> anyone already built something in fptools/libraries without building the whole compiler ?
10:41:03 <shapr> I wrote an assertEqualM extension for HUnit, but I can't see some way to mix monadic and non-monadic tests into the same test run.
10:42:17 <shapr> Is there a way to do it? I can't think of anything.
10:42:44 <tromp> hi folks
10:43:01 <xerox> dinner, later ppl :)
10:43:05 <shapr> hiya tromp 
10:43:06 <tromp> bon appetit
10:43:19 <Igloo> You could just map return across the non-monadic ones
10:54:49 <shapr> Igloo: good idea, thanks
10:55:45 <Igloo> You might also be able to do scary thing with existential quantification, but that would involve selling your soul
10:57:11 * Lunar^ enjoys LiterateProgramming
11:01:27 <tromp> hi Ian
11:01:47 <Lunar^> though I really think that it's only suitable for student work :)
11:02:17 <shapr> I wish I could have literate code that shows results of the code.
11:02:20 <dash> yeah, you can only do it for programs you understand
11:02:22 <shapr> like, inline unit tests.
11:02:36 <dash> and if you're writing only programs you understand
11:02:40 <dash> then, well, what's the point?
11:06:57 <Lunar^> shapr: You can with lhs2Tex
11:07:08 <Lunar^> shapr: \eval{} runs GHCi
11:08:54 <shapr> hm!
11:15:50 <kosmikus> thanks, Lunar^  :)
11:20:36 * Igloo looks a bit worried at an nhc98 compiler error that takes longer to appear if I allow it a larger stack
11:21:06 <Igloo> (but appears fixed by giving it a bigger heap)
11:21:09 <Lunar^> kosmikus: ? :)
11:23:31 <shapr> Tao of Programming say: In programmer's office, lack of garbage collection cause heap overflow!
11:39:54 <kosmikus> Lunar^: for advertising lhs2TeX ...
11:40:11 <HET2> how do i convert an integer to a string in haskell
11:40:30 <kosmikus> HET2: show
11:40:48 <HET2> thanks
12:28:41 <Lunar^> Is there anything special for describing O(n) in LaTeX ?
12:28:54 <Lunar^> (aside from puting $ around it)
12:29:48 <tromp> nope
12:35:37 <Lunar^> thanks
12:42:59 <kosmikus> I've seen $\mathcal{O}(n)$ being used, but $O(n)$ is just fine
12:43:07 <kristnjov> is that haskell?
12:43:24 <kosmikus> what? LaTeX? no.
12:44:04 <Lunar^> ?
12:44:16 <Lunar^> kosmikus: Thanks 
12:46:28 <CosmicRay> @index TyCon
12:46:29 <lambdabot> Data.Dynamic,Data.Generics,Data.Generics.Basics,Data.Typeable
12:56:14 <Lunar^> kosmikus: I can't remember how to escape accolads :(
12:56:34 <Lunar^> bracket in corret english
12:57:03 <TheStar> Haskell is a...  I dunno what the word is, but something about "wholly different in a way I can never imagine"
12:57:16 <kristnjov> read: functional programming language
12:57:41 <kosmikus> Lunar^: you don't
12:57:57 <TheStar> kristnjov: Takes some getting used to :)
12:58:19 <kristnjov> TheStar, indeed it does, but when you know haskell it's so awesome that you can actually quickly write a PROGRAM which DOES something :)
12:58:57 <monochrom> "exotic" is the word.
13:03:56 <Lunar^> kosmikus: how do make people have papers with an e-mail like {user1,user2}@domain, then ?
13:06:15 <TheStar> kristnjov: I'm just learning haskell for inspiration of programming style, but perhaps it will come to actually using it.
13:06:18 <kosmikus> oh, I thought bracket = [. You can escape { using \{
13:06:34 <Lunar^> kosmikus: That doesn't seem to work in \email{...} though
13:06:43 <kristnjov> TheStar, perhaps it's not very fast compared to other languages, but when i don't need speed i certainly pick haskell
13:07:51 <Igloo> parenthesis (), bracket [], brace {}
13:08:22 <kristnjov> many use "brackets" for all of those
13:08:27 <Lunar^> Igloo: thanks.
13:08:27 <kosmikus> Lunar^: what's email?
13:08:35 <kosmikus> I mean, what does \email do?
13:08:43 <kristnjov> some call () brackets and [] square brackets
13:08:46 <Igloo> I've never seen a native English speaker call {} brackets
13:08:48 <Lunar^> kosmikus: used by \maketitle in article class
13:08:51 <kosmikus> maybe $\{$ helps ...
13:09:14 <Lunar^> Igloo: Hope that you have noticed my flacky english :)
13:09:15 <kosmikus> Lunar^: \maketitle in the article class uses \title, \author, \date, and nothing else
13:09:30 <Igloo> bracket (), square bracket [], brace {}    is common usage though, yes
13:10:30 * Igloo doesn't remember any regular here being particularly noticably bad
13:10:47 <Lunar^> kosmikus: I should read more context about examples I find on the web
13:11:10 <kosmikus> what documentclass are you using?
13:11:17 <Igloo> There's a certain word order Germans tend to use a lot that I notice at conferences, but I can't think what it is now
13:12:07 <TheStar> Igloo: Reminds me of reverse polish notation :)
13:12:26 <TheStar> Igloo: I think they say the object first, then it's action.
13:12:33 <Igloo> :-)
13:12:43 <Philippa> what're we talking about here? (Smalltalk? C++?)
13:12:46 <kosmikus> Igloo: I think the problem is that German allows more choice in word order than English does
13:12:58 <Philippa> ah
13:13:10 <Philippa> kosmikus: with or without latin-style changes to the words?
13:13:18 <kosmikus> with
13:13:22 <Igloo> kosmikus: I'm not good enough at English to know if it's even wrong, it just really stands out to me  :-)
13:13:23 <kosmikus> that's why
13:13:30 <kosmikus> Latin is an extreme
13:13:39 <kosmikus> English is close to the opposite extreme
13:13:44 <kosmikus> German is somewhere in the middle
13:14:46 <kosmikus> Lunar^: ^^^ the documentclass?
13:16:43 <Lunar^> kosmikus: it's article, I've smoked about \email
13:18:25 <Muad_Dibber> anyone has ghc / hugs running in 64 bits?
13:18:46 <Lunar^> Muad_Dibber: which arch ?
13:18:55 <Muad_Dibber> amd64
13:19:17 <Igloo> Works on Debian (only unregisterised ghc currently)
13:19:32 <Lunar^> Muad_Dibber: GHC support has been greatly improved in latest GHC though there still is unregisterised builds
13:19:43 <Lunar^> (latest means CVS)
13:20:44 <CosmicRay> is there a way to group patterns in a case?  for instance:
13:20:46 <CosmicRay> case x of
13:20:52 <CosmicRay>   1 | 2 | 3 | 4 -> "foo"
13:20:57 <CosmicRay>   5 | 6 -> "bar"
13:20:57 <Muad_Dibber> so i should get the CVS version Lunar^?
13:21:00 <CosmicRay>   _ -> "blah"
13:22:30 <kosmikus> Lunar^: so, again, where do you have problems with \{foo,bar\}@...
13:22:46 <Lunar^> kosmikus: fixed... thanks, anyway
13:23:02 <Lunar^> Muad_Dibber: It's broken right now.. 
13:23:32 <Lemmih> CosmicRay: No.
13:23:55 <Muad_Dibber> Lunar^: heh, lesson one on my software engineering course: never break the trunk :P
13:24:34 <Lunar^> CosmicRay: use: let { c1 = "foo" ; c2 = "bar" } in case x of { 1 -> c1 ; 2 -> c2 ; ... ; 5 -> c2 ; ... }
13:24:51 <Lemmih> CosmicRay: But you can do: case x of x | x `elem` [1..4] -> "foo"; x `elem` [5,6] -> "bar"; otherwise -> "blah"
13:25:13 <Lunar^> CosmicRay: with lazyness, c1 or c2 will not be evaluated if there is no reason to
13:25:14 <Igloo> Using guards to decide what to return can sometimes be nicer
13:26:03 <CosmicRay> hmm
13:26:22 <CosmicRay> ok, that makes sense
13:26:31 <Lemmih> I'm having problems with HaRe: CMD:["rename","Test.hs","newF","3","1"] \n message: CAUGHT EXCEPTION: Can't find module name
13:26:46 * shapr bounces off the walls and ceiling like a small kamikaze rubber ball 
13:27:50 <shapr> yow, #haskell is up to 105
13:28:04 <Lunar^> shapr: ?! :)
13:28:08 <xerox> users :D
13:28:12 <shapr> 105 unique clients on #haskell
13:28:14 <xerox> chatters ?
13:28:15 <xerox> clients!
13:28:16 <xerox> :D
13:28:20 <shapr> at least three bots though...
13:28:29 * Lemmih tries to bounce but is way too tired and just lies down on the couch.
13:28:41 <Igloo> clog, lambdabot and shapr?
13:28:46 <xerox> haha
13:28:47 * shapr cackles
13:29:38 <shapr> man, I want an inline lambdabot command syntax.
13:30:16 * shapr goes back to test-driven-coding
13:31:02 * monochrom bounces on shapr.
13:32:06 * shapr is suddenly seeing the world in black and white.
13:32:15 <shapr> I can only see.. monochrom!
13:33:19 <wilx> Colour blindness?
13:39:00 <shapr> years of looking at my emacs color-theme...
13:46:37 * shapr bounces cheerfully
13:55:49 <Philippa> 'lo
13:56:18 <Riastradh> Hi.
13:56:52 * SyntaxNinja pounces on shapr
13:57:32 * shapr bounces around with SyntaxNinja holding on...
13:57:58 * Riastradh hops on.
13:58:04 * shapr squishes
13:58:29 <shapr> Some of my earlier unit tests are also fixtures for later tests.
13:58:44 <shapr> I need a TestChain or something.
13:59:06 <shapr> where subsequent unit test only get executed if the earlier ones pass.
14:01:47 <shapr> Does this happen to anyone else? should I write up a reusable TestChain?
14:07:51 <Lunar^> shapr: What is the key to rewrap a whole paragraph in Emacs ?
14:07:55 <shapr> M-q
14:07:58 <Lunar^> thx
14:08:12 <shapr> there's also various auto-wrap modes.
14:08:38 <shapr> I use auto-fill-mode
14:13:30 <Lunar^> lhs is better done manually wrapped IMHO
14:15:17 <shapr> I'm not surprised. Emacs has real trouble indenting Haskell.
14:15:33 <shapr> Can barely wait till Yi gets better than emacs at doing Haskell.
14:18:13 <xerox> anybody uses haskell-mode in emacs?
14:18:41 * Riastradh
14:22:29 <Philippa> shapr: there's a point - remind me to build it next time I boot Debian
14:23:47 <Pseudonym> Greetings.
14:27:18 <xerox> nobody uses emacs + haskell-mode? unbelievable.
14:27:19 <xerox> :D
14:27:51 * Riastradh !
14:28:18 <xerox> Riastradh! do you know how to fix the erc-like ghci-mode's behavior
14:28:24 <blackdog> Oh, do be quiet, Riastradh, we're trying to find someone who uses emacs + haskell-mode...
14:28:30 <xerox> in putting the prompt in the middle of the buffer
14:28:30 <xerox> ?
14:28:37 <Riastradh> No, sorry.
14:28:47 <xerox> it' *really* annoying.
14:29:04 <dash> xerox: i do 
14:29:38 <xerox> dash! please tell me
14:29:47 <dash> what was the question?
14:30:36 <blackdog> shapr: anyone working on that? (I'm greedy, I want tab completion of identifiers as well. and in an ideal world, only type-correct identifiers would be in scope, too. :)
14:30:41 <xerox> dash do you know erc
14:30:47 <dash> xerox: i've heard of it
14:30:59 <xerox> better, do you know ghci mode
14:31:00 <xerox> of haskell-mode
14:31:07 <shapr> blackdog: according to the boss, the next feature is syntax highlighting, and then 0.1 is released.
14:31:15 <xerox> the prompt is recentedered when it touches the bottom
14:31:16 <xerox> of the buffe
14:31:20 <xerox> r
14:31:31 <xerox> do you know how to stuck it in that position? (at the bottom)
14:31:32 <dash> xerox: never used ghci
14:31:34 <blackdog> shapr: kickass.
14:31:35 <dash> er ghci-mode
14:31:45 <xerox> maybe it's the same with hugs-mode
14:32:09 <xerox> erc has a feature to enable-disable
14:32:11 <xerox> this behavior
14:32:12 <shapr> blackdog: then the real language modes start happening.
14:32:16 <xerox> i can't find it in haskell-mode
14:32:26 <shapr> best thing you can do is to jump in help
14:32:27 <kosmikus> xerox: vertical re-centering has nothing to do with haskell-mode, has it?
14:32:27 <xerox> do you know enough elisp to code this thing ?
14:32:46 <xerox> kosmikus mmh
14:32:50 <shapr> it does actually
14:33:01 <kosmikus> it's normal emacs behaviour, afaik
14:33:07 <shapr> it is, but it doesn't have to be
14:33:18 <shapr> but I don't remember how to do it.
14:33:23 <xerox> kosmikus that's the problem
14:33:29 <shapr> plus I'd rather work on Yi.
14:33:52 <Riastradh> In this font, 'Yi' looks almost the same as 'Vi'...
14:33:55 <kosmikus> C-l is sufficient for me most of the time
14:33:57 * Riastradh was startled for a moment.
14:36:11 <xerox> C-l doesn't seem to fix that
14:36:23 <xerox> the prompt stays in the middle of the buffer
14:40:02 <kosmikus> I know. It performs vertical centering on its own.
14:51:27 <shapr> greetings Heffalump.
14:53:39 <Heffalump> 'lo
14:53:57 <xerox> :(
14:54:10 <xerox> kosmikus do you know how to add something like an hook who recenters at the bottom?
14:55:07 <shapr> Heffalump: how's life?
14:57:06 <Heffalump> ok. I'm a C hacker now.
14:57:14 <Riastradh> DIE!
14:57:21 <Riastradh> KILL KILL HATE HATE MURDER MURDER MUTILATE
14:57:52 <dash> riastradh: you seem to have a lot of anger towards the world to work through. Why is that?
14:59:08 <Riastradh> What do you think?
15:01:07 <xerox> hahaha
15:01:25 <Riastradh> Can you elaborate on that?
15:02:25 <xerox> only if you are going elaborate "KILL KILL ..."
15:02:43 <Riastradh> This is not a healthy way of thinking.
15:02:46 <dash> Probably 'cause you were dropped on your head when you were a baby!
15:02:53 <monochrom> where is lambdabot?
15:02:55 <Heffalump> C hacking is good.
15:03:10 <Riastradh> What happened when I was a baby?
15:03:39 <Riastradh> ...eh, hrmph.  M-x doctor is giving boring today!  I give up.
15:04:05 <Riastradh> (Everything starting from 'What do you think?' was generated by M-x doctor.  I was hoping for something a bit better than _that_, though...)
15:05:13 <Pseudonym> Were you traumatised by a C program when you were a child?
15:06:53 <Riastradh> Yes, I saw what C & Unix did to the world then.
15:06:55 <xerox> ahahha
15:10:38 * np_hard has been hacking javascript for 5 days now
15:10:51 <np_hard> did you know it has first-class functions and lexical closures?
15:10:56 <np_hard> well, now I do
15:11:13 <np_hard> soon so will my co-workers, perhaps to their chagrin
15:11:16 * np_hard grins evilly
15:11:50 <Riastradh> Write all your loops recursively using the Y combinator!
15:13:09 <monochrom> me love Y
15:15:11 <np_hard> I was dismayed to learn of IE's long-standing garbage collector bug
15:15:34 <np_hard> namely that circular references between javascript objects and DOM objects are not detected
15:15:39 <Lunar^> should I eat something now that deadline is crossed?
15:15:50 <np_hard> but fixing it wasn't that hard
15:15:55 <shapr> Lunar^: what deadline?
15:16:09 <Lunar^> shapr: something for the university
15:16:12 <shapr> oh
15:16:16 <Lunar^> shapr: I've sent the mail 15 minutes late btw :)
15:16:19 <shapr> oops
15:16:23 <np_hard> I fear if I do much more javascript hacking I will have to write my own DOM gatekeeping object to handle creation and destruction of these things
15:16:32 <Lunar^> shapr: no big deal, they have greylisting on :)
15:16:33 <stepcut> np_hard: heh
15:16:37 <Lunar^> shapr: I can argue :)
15:16:41 <shapr> hehe
15:16:53 <np_hard> or find one, but the publically available javascript code seems to, well, suck
15:17:02 <np_hard> it's hard to google for, maybe
15:17:08 <shapr> Lunar^: hey, will you have time for a Yi sprint on sunday?
15:17:21 <shapr> stepcut: what about you? time for a Yi sprint on sunday?
15:17:23 <monochrom> "real world" programmers love to use inferior algorithms, especially when superior algorithms are both simpler and more correct.
15:17:25 <shapr> dons: or you?
15:17:36 <shapr> monochrom: I think that's a truism.
15:17:40 <stepcut> shapr: possibly
15:17:41 <Riastradh> It's all about constant factors, _duh_, monochrom!
15:18:00 <Riastradh> Algorithmic complexity is for incurable academics.  Poor ivory tower fools.
15:18:12 <monochrom> For example PGP used Fermat's test rather than Rabin-Miller for a long time.  Python used reference counting (like the IE case here) for a long time.
15:18:15 <Pseudonym> "Real world" programmers love to use algorithms that are "good enough", but they don't have to write.
15:18:31 <shapr> Python still uses reference counting, but now it has loop detection.
15:18:43 <np_hard> IE uses mark-and-sweep
15:18:48 <np_hard> that's the bitter irony of it
15:18:59 <Riastradh> Gotta have code that makes it look like you know what you're doing by having a jumble of horrible code, and gotta bum it out so it looks like you know about efficiency!
15:19:03 <np_hard> the issue is that DOM objects are not created in the same pool as Javascript objects
15:19:13 <Lunar^> shapr: nothing, I have kept this particular sunday to save a bit of my social relationships
15:19:20 <np_hard> circular references not involving DOM or ActiveX are collected fine
15:19:33 <shapr> Lunar^: pas de problem
15:19:47 <Heffalump> but effectively there's reference counting at the interface between them?
15:20:06 <np_hard> probably, I don't know the implementation specifics
15:20:17 <np_hard> Firefox works fine of course, and that's my personal browser
15:20:32 <Heffalump> well, if they have separate GC that's what you effectively have to do, I guess..
15:20:38 * np_hard also took advantage of algorithmic complexity in this project
15:21:00 <np_hard> essentially I download a 5000-element address list and allow text inputs to autocomplete using it
15:21:11 <np_hard> well, it works fine with 5000 elements anywa
15:21:27 <np_hard> without using binary search over a sorted array it is unacceptably slow
15:29:04 <shapr> Pseudonym: hey, have you had a chance to try Yi?
15:29:24 <Pseudonym> No, not yet, unfortunately.
15:30:46 <shapr> dons recently added :reboot, so you can now hack the core of Yi with Yi and :reboot will reload everything from the ground up.
15:31:42 <shapr> At this point, yi beats emacs for dynamic self-editing ability. Emacs requires gcc to rebuild the core.
15:34:02 <shapr> I want to test my 'wget' haskell command, is there some nice way to both run the side-effect function and check the resulting file size in a unit test?
15:45:17 <Lunar^> getting a file size isn't a side-efffect ?
15:46:45 <shapr> I think I need to do "assertEqualM file-size (whsave url savename >>= getFileSize savename)"
15:46:56 <shapr> testing side-effects sucks.
15:48:43 <Lunar^> shapr: yes, especially when you have to set up a full directory of things
15:50:39 <Pseudonym> Side-effects suck.
15:54:23 <Lunar^> without side-effect, programs will do nothing... programs doing nothing means that we don't have to write programs... nice holidays, yoohoo :)
15:56:30 <monochrom> In that sense, all programs are alpha-equivalent to each other.
15:56:48 <monochrom> err, all pure programs, of course
16:24:00 * shapr grumbles at HTTP.hs
16:24:14 <shapr> 127.0.0.1 is not a hostname.
16:29:01 <Janni> G'evening
16:29:44 <shapr> hiya
16:30:22 <shapr> Is there a debian package for a dyndns-style server?
16:31:28 <shapr> aha, dhis-server
16:51:17 <fusss> evening; What is the most thorough Haskell introduction online? at least for someone who has done some functional programming in Scheme
16:56:32 <Lunar^> fusss: http://www.isi.edu/~hdaume/htut/
16:57:53 <fusss> Lunar^: thanks
16:57:56 <fusss> :-)
17:13:53 <dons> moin
17:13:57 <Lunar^> plus
17:20:30 <dons> what's this about a yi sprint?
17:25:33 <dons> what are you up to Lunar?
17:26:54 <Lunar^> dons: I was wondering if .au was Austria or Australia
17:27:08 <dons> Australia :)
17:27:12 <Lunar^> dons: Thus checking your timezone :)
17:27:18 <dons> yep.
17:27:34 <dons> Tue Nov 23 12:23:10 EST 2004
17:28:40 <dons> isn't austria .at ?
17:28:52 <dons> yep. I think so.
17:29:25 <Lunar^> dons: Your darcs cgi-bin seems a bit old, or am I dreaming of something better ?
17:29:55 <dons> it is really old. the new one is on scannedinavian
17:30:02 <Lunar^> uh ok
17:30:42 <dons> but the old one is still useful for a quick view of what has just changed
17:31:14 <dons> "Source by web" link is shapr's mirror
17:33:42 <Lunar^> dons: Does :reload works with yi-inplace too ?
17:33:46 <dons> yep
17:33:50 <Lunar^> neat
17:34:06 <dons> yi-inplace is just a shell script to run yi_ with the correct library path
17:34:10 <Lunar^> die Emacs, die
17:34:17 <dons> yay!
17:34:56 <dons> (I only ever use yi-inplace, anyway .. installing wastes too much time when developing)
17:35:26 <Lunar^> That's what I was thinking of
17:35:50 <dons> so :reload works nicely? you can change the colour settings?
17:36:39 * shapr cheers for yi
17:36:50 <shapr> dons: I had the idea to take sunday for a Yi sprint.
17:37:07 <dons> sounds great! patches patches patches
17:37:16 <shapr> Do you see 0.1 release being somewhere close?
17:37:52 <dons> not sure. depends on synhl probably. and there's other outstanding issues, such as long lines not wrapping
17:38:03 <Lunar^> that's an issue
17:38:08 <shapr> is there a list of issues?
17:38:14 <dons> in the TODO list
17:38:18 <dons> approximately
17:38:22 <shapr> ok
17:38:50 <dons> not all of the v0.1 issues aree actually crucial.
17:39:05 <dons> but undo/redo, line wrapping and maybe syn hl probably are
17:39:10 <shapr> are they in order of importance?
17:39:15 <dons> no
17:39:31 <shapr> ok
17:39:40 <dons> I welcome any comments on what v0.1 should be. what kind of behaviour will people expect?
17:40:19 <shapr> I think demos of the various features is a good idea.
17:40:49 <shapr> like a step-by-step use of :reload and :reboot
17:40:50 <shapr> I can do that.
17:41:21 <dons> good idea. we need usage docs, yes.
17:42:23 <Lunar^> dons: Yi's not building currently on OS X
17:42:42 <dons> I added a LD_X patch, maybe you could check that
17:43:02 <dons> what is the problem, though?
17:43:08 <Lunar^> dons: I'm getting a fresh tree to be sure
17:43:17 <Lunar^> dons: Symbolsined redef
17:43:30 <dons> hmm. weird.
17:43:37 <dons> oh. I know...
17:43:52 <dons> I moved Yi/Curses.hsc into Yi/Curses/
17:43:57 <dons> but the old .o files will still be around
17:44:01 <Lunar^> dons: Seems related to your recent Curses changes
17:44:14 <dons> so you'll get the old and new Curses.o relinked
17:44:18 <Lunar^> exactly
17:44:28 <dons> you need to make distclean, and then remove any extra .o files you see
17:44:34 <Lunar^> I still have a Yi/Curses.hs though
17:44:45 <dons> because it is generated from Curses.hsc
17:45:00 <Lunar^> ok
17:45:17 * shapr bangs his head on the stupid bug.
17:45:34 <Janni> If anyone wants to have a look at some standard functions I have written and give his comment about them (if they are badly implemented or already presend in the standard libraries) have a look at ftp://ftp.rochel.dyndns.org/. (Don't expect something extraordinary...
17:45:38 <shapr> ok, I now officially wish getHostByName would show the offending input.
17:45:40 <Lunar^> shapr: I've just noticed scannedinavian website, that's cool
17:45:45 <shapr> which website?
17:45:54 <shapr> scannedinavian has lots.
17:45:57 <Lunar^> shapr: scannedinavian main
17:46:10 <shapr> there's two scannedinavian main, scannedinavian.com and scannedinavian.org
17:46:22 <Lunar^> shapr: .org
17:46:44 <Lunar^> Halipeto looks great
17:46:49 <shapr> yes, it does.
17:46:57 <shapr> Halipeto is ZPT
17:47:15 <shapr> Janni: where in there?
17:47:26 <shapr> did you see stepcut's halipeto site?
17:47:31 <Janni> Err, pub/JanniLib.hs
17:47:47 <Lunar^> shapr: where ?
17:48:17 * Lunar^ is really enjoying his return to activity on #haskell
17:48:26 <shapr> Lunar^: http://n-heptane.com/n-heptane/
17:48:34 * shapr is enjoying Lunar^'s activity too.
17:48:51 <shapr> Janni: is profile the same as union?
17:49:09 <Lunar^> shapr: cute
17:49:21 <Janni> No, I don't think so. union doesn't treat the elements "uniquely" (checking that)
17:50:10 <shapr> isn't combine the same as >>= on lists?
17:50:17 <Lunar^> dons: I hope we could make -fvia-C disappear quite soon, C-- everyone ! :)
17:50:49 <dons> yeah. I've got to get around to writing the C-- gunk for ghc. But i'm always working on yi
17:51:03 <shapr> :-)
17:51:28 <shapr> Janni: combine by is neat
17:51:33 <dons> attempting to build yi on mips64/irix ...
17:52:03 <shapr> Janni: any code that mentions secret envy is very cool.
17:52:10 <Janni> shapr: profile /= union. union "aaa" "a" = "aaa", while profile "aaa" "a" = "a".
17:52:20 <shapr> Janni: can you put an explicit copyright and license on it?
17:52:37 <shapr> @index fst3
17:52:38 <lambdabot> bzzt
17:52:44 <shapr> huh, I thought that already existed.
17:52:47 <Janni> shapr: You're flattering me
17:52:48 <Lunar^> dons: I would like to integrate Bossa to GHC
17:53:00 <shapr> dosLines is cute.
17:53:14 <Lunar^> dons: http://www.emn.fr/x-info/bossa
17:53:25 <shapr> Janni: if you put an explicit copyright and license on it, I'll keep a copy of this for my toolbox.
17:53:27 <Lunar^> dons: That would remove the need for Scheduler.c, I hope
17:53:43 <Janni> shapr: What toolbox?
17:54:03 <shapr> I have ShaeTools.hs, and it imports a bunch of other files.
17:54:22 <shapr> Also, there's LicensedPreludeExts on the Wiki.
17:54:42 <Janni> Where can I find the ShaeTools?
17:54:53 <shapr> um, I don't think it's online...
17:55:24 <shapr> but I can fix that :-)
17:55:34 <dons> Lunar^:; that looks really cool
17:55:54 <Janni> shapr: Is the copyright stuff necessary?
17:56:01 <shapr> yes.
17:56:06 <Janni> I mean, I don't mind other people using it
17:56:07 <shapr> Because otherwise I can't use it.
17:56:12 <Lunar^> dons: That could be a research project IMHO, I need to talk to my teachers about that
17:56:26 <dons> yep. it sounds like a nice language/os cross-over project
17:56:41 <Lunar^> dons: GHC RTS is a micro-kernel :)
17:56:52 <Janni> shapr: Will you? I mean, fix that ShaeTools bug...
17:57:00 <dons> Lunar^: we know that now :)
17:57:11 <shapr> Janni: all you need to do is something like  (c) copyright 2004 $NAME - released under the terms of the Gnu GPL v2
17:57:38 <Lunar^> dons: I'm tring to integrate my Trie.hs to :e for completion
17:58:16 <dons> oh. that would be really good. cool
17:58:35 <tuomov> dons: do you have any plans of a proper line editor for yi?
17:58:46 <tuomov> I started working on a joe mode finally, but I need that line editor..
17:58:56 <tuomov> I could hack something up, but maybe you have already thought of it?
17:58:57 <shapr> Janni: it's not anywhere close to clean - http://www.scannedinavian.org/~shae/ShaeTools.hs
17:59:06 <Lunar^> tuomov: There's some readline like code in hOp
17:59:10 <shapr> I should add urls to the imports.
18:01:09 <dons> tuomov: line editor for what is currently the cmd line?
18:01:11 <shapr> Janni: ok, it's somewhat updated.
18:01:26 <shapr> tuomov: busy on sunday?
18:01:35 <tuomov> me busy? newer.
18:01:38 <dons> I do have a plan -- I'll turn it into a buffer too, and then just use the standard editing bindings
18:01:39 <tuomov> s/w/v/
18:01:47 <shapr> want to join the yi sprint? :-)
18:02:10 <dons> turning the cmd line into a proper instance of Buffer is on the todo list
18:02:28 <tuomov> I don't know.. depends on the spirits
18:02:39 <shapr> I think if we get several people working on yi at once, network effect will speed up all of them.
18:02:42 <shapr> yah, I understand.
18:04:10 <tuomov> coding is nice in that it makes you forget other things while you're doing it, but it is often hard to get started
18:04:41 <shapr> Yes, I agree.
18:04:56 <shapr> On the good side, once you get started, the world just goes away.
18:05:00 * shapr sighs happily.
18:05:10 <shapr> tuomov: oh hey, test-driven-development really helps with that.
18:05:26 <Lunar^> dons: What's "Ctrl+N" ?
18:05:33 <shapr> I think because it makes the next step easy and obvious.
18:06:34 <Janni> shapr: If I don't put any copyright/license note on this little library, it won't hurt, will it?
18:06:43 <shapr> Janni: I won't be able to use it.
18:07:04 <shapr> but it's always your choice.
18:07:08 <shapr> hei irce 
18:07:17 <dons> ^N is line down in vi, isn't it?
18:07:21 <shapr> irce: hyvÃ¤Ã¤ huomenta
18:07:54 <Lunar^> dons: It's next completion in vim
18:08:13 <Lunar^> dons: But it seems quite hard
18:08:19 <dons> oh, that's true. feel free to override it -- there's already about 5 ways to do linedown in vim
18:08:32 <dons> next and prev completion? nah. just use strstr
18:08:43 <dons> like with the / command
18:08:44 <Lunar^> dons: ?
18:09:04 <shapr> irce: oppiatko Haskelle?
18:09:10 * shapr wonders how bad that was...
18:09:18 <dons> Lunar^: what seems quite hard
18:09:20 <dons> ?
18:09:40 <Lunar^> dons: integrating this kind of completion with my current knowledge of Yi
18:09:53 <irce> huomenta
18:09:54 <tuomov> shapr: quite bad..
18:10:05 <tuomov> shapr: but quite standard me-not-talk-finnish -sounding
18:10:07 <irce> pitää tehä ohjelma haskelilla kyllä
18:10:23 * shapr laughs
18:10:25 <tuomov> shapr: opiskeletko/opetteletko Haskellia
18:11:06 <dons> oh. ok. I don't think it is too hard, it just involves scanning the buffer, but it is cruicial to use the FastBuffer.searchB call, I think
18:11:07 <shapr> I'll get back to learning finnish sometime in the next coupla years I think.
18:12:23 <shapr> irce: do you have any questions?
18:13:13 <tuomov> Also 'oppia' => 'opitko Haskellia' would mean more like "are you getting Haskell"
18:13:26 <shapr> oh, neat.
18:14:13 * shapr adds that to his notes
18:15:01 <tuomov> opiskella/opetella = to learn/study, oppia = to learn/get
18:16:01 <tuomov> or something like that
18:16:47 <shapr> One day I'd like to read the Kalevala in Finnish.
18:19:25 <irce> shapr: not yet but I will have later on when I start coding
18:20:16 <shapr> irce: ok, feel free to ask questions when you find some.
18:21:38 <fusss> is it true that I can't define functions in Haskell at the prompt?
18:21:47 <Lunar^> Is ther an opposite for -Werror ?
18:22:20 <shapr> fusss: you can with ghci
18:22:47 <fusss> how about hugs? it looks really cute
18:22:50 <shapr> fusss: but those functions disappear when you load a file, change directory, etc
18:23:16 <shapr> I don't think you can with hugs. At least, I haven't heard of way to do it.
18:23:19 <dons> Lunar^: that sounds scary ;) but the way to do it is to remove it from mk/config.mk
18:23:27 <fusss> shapr: I don't care :-) I just wanna test things by typing them at the repl.
18:23:36 <shapr> I'd suggest GHCi then.
18:23:47 <shapr> Even then, some things you can't test from the repl.
18:23:51 <tuomov> hmmm..
18:23:57 <dons> -Werror doesn't seem to have a reverse
18:24:13 <tuomov> the kind of worksheet ui as in maple would suit learning haskell quite well
18:24:23 * shapr has never used maple
18:24:44 <fusss> what is the most newbie friendly Haskell implementation? In ML, I prefer SML/NJ to, say, MLton. In Scheme, PLT over Chicken. In Common Lisp, CLISP over the rest, etc.
18:25:16 <tuomov> you enter stuff to a "worksheet" and it evaluates them, and presents you with a new prompt, but you can go back to edit and re-evaluate the old ones
18:25:53 * Janni has lincensed his little module (ftp.rochel.dyndns.org/pub/JanniLib.hs)
18:25:59 <shapr> Janni: cool!
18:26:15 <shapr> fusss: I'd suggest GHC, it does pretty much everything.
18:26:31 <fusss> shapr: Ok :-)
18:28:24 <tuomov> shapr: iki.fi/tuomov/m.png
18:28:47 <shapr> nifty
18:29:14 <shapr> tuomov: http://www.cs.kent.ac.uk/projects/vital/overview/
18:30:24 <shapr> I'd try that if it didn't require Java.
18:30:41 <shapr> Might be nice for those less picky than me.
18:30:47 <tuomov> looks interesting..
18:34:42 <Lunar^> dons: I don't get the `meta` operator
18:36:22 <dons> it is like the `action` operator, but also supplies you with the current lexer state
18:36:32 <dons> you then return an action, a new state, and a new lexer to continuewith
18:36:57 <dons> so you use `meta` when you want to modify state, or make a state transition to a different lexer
18:37:14 <dons> for example, switching from command to insert mode
18:37:17 <Lunar^> dons: ok... so I'm a bit stuck
18:37:42 <dons> we tend to modify state a fair bit in vim (acummulating count args, for example) so meta gets used a fair bit
18:37:45 <Lunar^> dons: I need to call msgE, and to modify St{acc} with some external data
18:38:04 <Lunar^> (read IO)
18:39:06 <dons> hmm.. the token type we return is an IO action, so you would use >> or do- to insert an io action
18:40:11 <shapr> what's the easy way to delete a file? unlink or something?
18:40:28 <dons> Lunar: you might want to read the ctk lexer paper?
18:40:43 <shapr> I wish lambdabot did substring searching as well.
18:41:23 <dons> `meta` \token state -> (with (io_action >> msgE "foo"), modify_state, Just $ cmd st)
18:41:27 <Lunar^> dons: scheduled
18:41:54 <Lunar^> @index unlik
18:41:54 <lambdabot> bzzt
18:41:55 <Lunar^> @index unlink
18:41:55 <lambdabot> bzzt
18:41:57 <Lunar^> @index unlinkFile
18:41:58 <lambdabot> bzzt
18:42:02 <Lunar^> @index removeFile
18:42:03 <lambdabot> System.Directory,Directory
18:42:12 <Lunar^> here it is
18:42:19 <shapr> ah, thanks
18:44:20 * Lunar^ would like System.Path now
18:45:10 <dons> I wonder what Lunar^ is up to?/
18:46:17 <shapr> 5' 9" ?
18:46:23 * shapr grins
18:46:28 <Lunar^> dons: :e <tab> = completion
18:46:44 <shapr> Actually, Lunar^ is probably up to 176 or so.
18:47:01 <Lunar^> ?
18:47:04 <shapr> cm?
18:47:14 <dons> Lunar^: sounds good.
18:47:14 <Lunar^> hehe :)
18:51:31 <Nioate> (>>) is associative, right?
18:52:11 <shapr> which one is associative?
18:52:34 <shapr> oh yes
18:52:40 <Nioate> which what?
18:52:52 <shapr> (a >> b) >> c == a >> (b >> c)
18:52:57 <Nioate> right
18:53:06 <Nioate> so this is not unreasonable:
18:53:10 <Nioate> instance Monad m => Monoid (m ()) where
18:53:10 <Nioate>     mempty = return ()
18:53:10 <Nioate>     mappend = (>>)
18:54:10 * shapr is too sleepy to remember.
18:54:44 <shapr> I think that maybe monads should be monoids anyway, but I could be wrong.
18:55:08 <Nioate> the online ghc docs don't show monads to be an instance of monoid
18:55:12 <cm> bonjours
18:55:39 <shapr> Nioate: I think that's considered an oversight in the h98 standard by many people.
18:55:46 <shapr> y0 cm
18:55:50 <shapr> how's the web?
18:55:56 <Nioate> no prob. I can just insert those three lines I pasted
18:56:34 <Janni> Anybody has an idea for a name for a 3D-CAD program written in Haskell? I have the tic to always try to find a good name for a program before even beginning to implement it (though there is already remarkable effort). My current name is HADes (Haskell Aided Design), though I don't really like it... Any proposals?
18:57:56 <shapr> Combinator Aided Drafting?
18:58:14 <cm> shapr: it's flowing :-)
18:59:52 <shapr> Janni: you could call it World#
19:00:14 <Lunar^> shapr: why # ?
19:00:39 <shapr> isn't that the name of the state of the world as passed around in the IO monad?
19:00:46 <shapr> oh wait RealWorld#
19:00:56 <shapr> Isn't that it?
19:01:39 <shapr> You usually try to model the world with CAD programs, right?
19:01:43 <dons> off to uni. ciao
19:01:46 <Janni> Never heard of it ('#') but that's probably because I haven't heard about a lot of things
19:02:23 <Janni> shapr: Yes, RealWorld# doesn't sound bad. But I have to find out, what that # means...
19:02:41 <shapr> it means unboxed, I think.
19:02:57 <shapr> like Int# means an integer with no box.
19:03:22 <shapr> so I guess you could say it's thinking out of the box about how to model the real world.
19:04:04 <Lunar^> shapr: pretty cool
19:04:19 <shapr> very silly too :-)
19:04:35 <Janni> Yes, but good :)
19:05:31 * shapr is getting sleepy
19:05:42 <shapr> but I have to find out what happens next!
19:05:54 <Riastradh> shapr, and now my machine is only about two feet from where it was when I left for a little while!
19:06:27 <shapr> one neat thing about programming is that it's like reading a book that you're writing. It's exciting to read the next chapter.
19:06:39 <shapr> Riastradh: if that's two feet of wall, then I can understand why it took that long.
19:07:05 <Riastradh> Nope.
19:07:07 <Riastradh> Two feet of air.
19:07:14 <shapr> oh
19:07:48 <Riastradh> The desk it was on was rotated ninety degrees, too.  It's on a different part of the desk now.
19:08:05 <Riastradh> So it really went on a long & treacherous journey!
19:08:52 <shapr> I see.
19:10:04 * Lunar^ stops broking Yi and goes to sleep
19:11:52 <Lunar^> dons is killing me... every time he shows up, it's already 2am here
19:15:38 * shapr grins
19:15:47 <shapr> that's why we need a daytime sprint
19:16:18 <tuomov> it's 5:15... I woke up at around 16 :)
19:16:18 * shapr follows Lunar^s example.
19:16:39 <shapr> it's 4:16, I woke up at 8
19:16:57 <cm> 8 hours ago? ;)
19:17:07 <Lunar^> http://www.onboard.jetbrains.com/articles/04/10/lop/
19:17:08 <shapr> 8am
19:17:24 <shapr> Lunar^: yah, as if we didn't know.
19:17:40 <cm> cells are the new s-expressions
19:17:59 <shapr> Lunar^: it's amazing that the rest of the world is finally figuring this out!
19:18:01 * shapr hOps
19:18:07 * shapr falls over asleep
19:18:13 * cm y0ws
19:19:30 <cm> silly me, this made me giggle.
20:07:57 <dons> Lunar^: got basic ^N completion working on the bus on the way to uni :)
20:08:22 <dons> will commit soon
20:09:36 <cm> so how does that haskell-vim work
20:09:41 <cm> in 2 sentences max! ;)
20:10:21 <Riastradh> Magic.
20:10:34 <Riastradh> Beat that: I didn't even have to use two _words_, let alone two _sentences_!
20:11:04 <cm> you are a true wizard.
20:11:24 * Riastradh sports his SICP t-shirt with pride.
20:11:45 <cm> what does it look like? *googles*
20:12:00 <Riastradh> It looks like the cover of SICP.
21:04:27 <Helicopter> where can I find a ghc build for cygwin ? (not the windows installer)
22:48:24 <dash> Hmm 
22:48:30 <dash> monad confusion!
22:48:38 <musasabi> morning
22:48:44 <dash> hello
22:49:03 <Nioate> dash: yay
22:49:37 <dash> i have a function of type Val -> ArnisEval ()
22:49:53 <dash> where type ArnisEval = StateT ArnisState (ErrorT EvalError (Cont (IO ())))
22:50:17 <dash> i want to do putStr from within this function
22:50:25 <dash> liftM and liftIO don't seem to be what I want
22:50:37 <musasabi> you should define a lifting operator like arnisLiftIO
22:50:42 <dash> oh ho
22:51:00 <dash> yeah, that suspicion was sort of lurking in the back of my mind :)
22:51:46 <musasabi> something like arnisLiftIO p = lift $ lift $ lift $ liftIO p
22:51:47 <Nioate> or use ContT instead of Cont (IO ())
22:52:00 <musasabi> probably wrong, but you have to get it right just in one place
22:52:08 <dash> musasabi: right
22:52:19 <dash> Nioate: yeah
22:52:42 <dash> that used to say "Cont String"
22:52:58 <dash> but some of the I/O stuff has to move inwards I think
22:53:52 * musasabi killed ErrorT from his StateT ErrorT IO thing a while back and started using Control.Exception
22:54:17 <dash> yeah, i thought about just using callCC
22:54:23 <dash> but whatever, this has been working mostly
23:06:49 * dash confuses more and more
23:30:12 <dash> aw man
23:30:24 <dash> foldM would be great, if only it has a foldr version
23:40:23 <Lemmih> Good morning, #haskell.
23:57:51 <Shammah> mmm what's the estimate on fixing the wikispam?
