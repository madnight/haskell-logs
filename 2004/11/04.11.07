01:14:26 <maihem> @type fail
01:14:27 <lambdabot> fail :: forall m a. (Monad m) => String -> m a
01:56:00 <musasabi> Has anyone managed to get the gtk2hs ListStore working nicely?
01:56:27 * musasabi would like to have only a very simple model but it wants to force me into MVC madness
01:59:58 <musasabi> (fast reboot - brb)
02:57:22 <redhatPT> hi there! how can I invert a list ?
02:57:47 <jadrian> reverse
02:59:43 <redhatPT> thx
03:00:44 <musasabi> What would be the best way to drop all trailing spaces from a string?
03:01:36 <Lemmih> Two reverse's and dropWhile isSpace, I think.
03:01:37 <musasabi> clean s = reverse $ dropWhile ((==) ' ') $ reverse s ?
03:02:04 <jadrian> Lemmih: that wouldn't work
03:02:10 <jadrian> and it's quite inefficient
03:02:11 <Lemmih> jadrian: Why not?
03:02:17 <jadrian> just use "filter"
03:02:30 <Lemmih> trim = reverse . dropWhile isSpace . reverse
03:02:31 <jadrian> wait
03:02:39 <jadrian> what's the meaning of trailing?
03:02:53 <tuomov> "xxx    " -> "xxx"
03:03:12 <jadrian> "xxx xxx" -> ?
03:03:12 <Lemmih> I so love (.)
03:03:15 <swiert> musasabi: why not use an accumulating parameter - then you can do it in one traversal.
03:03:23 <jadrian> "xxxxxx" or "xxx xxx" ?
03:03:31 <tuomov> jadrian: latter
03:03:35 <jadrian> oh
03:03:40 <jadrian> nevermind then
03:04:34 <musasabi> swiert: don't I still need one reverse?
03:05:02 <swiert> musasabi: no - trim x = trimAc [] x
03:05:14 * Spark gets back from a club at 11am :s
03:06:15 <Lemmih> And how's trimAc defined?
03:06:23 <jadrian> by accumulating the elements he'll get them in reverse order...
03:06:36 <swiert> trimAc spaces [] = []
03:06:58 <tuomov> and starting to accumulate from the end, you need to traverse there first, and given lazyness, that's practically the same as reverse
03:07:26 <swiert> trimAc spaces (x:xs) = if isWhiteSpace x then trimAc x:spaces xs else spaces ++ trimAc [] xs
03:09:12 <swiert> the idea being to just keep track of a list of spaces you encounter. If it turns out to be the list bit of whitespace, throw it out, otherwise prepend it to the result.
03:09:27 <swiert> *last
03:09:40 <musasabi> hmm that works.
03:10:45 <tuomov> only it doesn't work in that the spaces are in wrong order
03:10:51 <tuomov> if we support more than just ' '
03:11:29 <swiert> well - its not quite one traversal (I use ++) but you can fix that by using function composition (I think)
03:12:29 <Oejet_> A DFA ought to do it in linear time.
03:13:06 <tuomov> the reverse-based one is linear, isn't it?
03:13:14 <jadrian> yes of course
03:13:18 <Oejet_> Yes.
03:17:08 <jadrian> hmmm isn't there an "initLast" ?
03:17:29 <Lemmih> If x is not a whitespace then it's ignored?
03:17:50 <jadrian> initLast :: [a] -> ([a],a)
03:18:07 <shapr> good morning #haskell!
03:18:21 <jadrian> Lemmih: yes but that's easy to fix...
03:18:39 <jadrian> Lemmih: ... x: trimAc [] xs
03:18:41 <jadrian> hi shapr !
03:19:00 <shapr> Ã³la jadrian!
03:19:07 <jadrian> :)
03:20:08 <jadrian> it not really just one pass
03:20:24 <jadrian> but maybe it would be more readable use groupBy 
03:20:30 <jadrian> to get the spaces together
03:21:02 <jadrian> and then drop the 1st and last element of the resulting list if they're spaces
03:21:15 <jadrian> and concat 
03:22:07 <jadrian> then again, maybe using a reverse is even more efficient
03:22:59 <swiert> jadrain: but you can make it one pass if you avoid using ++ (and sacrificing even more legibility).
03:23:24 <jadrian> swiert: yes 
03:24:58 <shapr> Anyone suggest any good programming RSS feeds?
03:25:13 <shapr> I have lambda-the-ultimate, but I don't know of anything else spiffy.
03:29:15 <Boegel> hello everybody
03:30:07 <shapr> hoi boe
03:30:09 <shapr> Boegel: 
03:30:16 * shapr smacks his irc client
03:30:39 <earthy> shapr: the daily wtf
03:31:23 <shapr> where's that?
03:31:42 * shapr googles
03:32:27 <jadrian> lambda-the-ultimate?
03:32:31 * jadrian googles too
03:33:10 <jadrian> nice
03:33:19 * Boegel thinks shapr is funny
03:35:35 <shapr> I'm funny?
03:35:56 <shapr> I wish more people thought that. Then I could make a living as a comedian.
03:36:14 <jadrian> I know I shouldn't have this kind of doubts anymore...
03:36:21 <shapr> my unicycle shorts ripped :-( I can't unicycle!
03:36:31 <jadrian> since it sounds like newbie stuff...
03:36:54 <jadrian> but why is  map (g.f) better than  map g . map f ?
03:37:10 <shapr> doesn't matter what anything sounds like...
03:37:16 <jadrian> I do understand that in a strict language the 1st transverses the list once
03:37:19 <shapr> if you have a question, it's better to know the answer
03:37:29 <Boegel> shapr, can't you unicycly without your shorts then ? :)
03:37:29 <jadrian> and the 2nd trasverses twice
03:37:47 <shapr> Boegel: it's -1Â°C, that might be dangerous.
03:37:49 <musasabi> jadrian: they are equal with ghc.
03:37:51 <jadrian> but in a lazy language seems like it should make that much of a difference
03:37:53 <shapr> I do want to have kids someday.
03:37:54 <musasabi> rewriting rules...
03:38:09 <shapr> musasabi: was that a purposeful pun?
03:38:41 <musasabi> hmm? 
03:38:49 <shapr> dude, rewriting totally rules!
03:38:55 <jadrian> ah lol
03:38:56 <musasabi> ^_^
03:39:09 * shapr laughs
03:39:21 <jadrian> yes I've written the reductions plenty of times...
03:39:22 * shapr bounces around randomly
03:39:26 <kristnjov> i hate puns
03:39:35 <shapr> kristnjov: that okay, we love you anyway.
03:39:36 <kristnjov> np: the hives - no pun intended (vbr/02:20)
03:39:39 <jadrian> and I can't say one is better then the other
03:39:44 * shapr hugs kristnjov 
03:39:49 * kristnjov hugs haskell 98
03:39:52 <jadrian> so is it worthless to try and use fusion laws and such?
03:40:08 <kristnjov> shapr, btw, was that hug a pun? :P
03:40:08 * shapr lights a fuse
03:40:19 <kristnjov> i mean your hug
03:40:21 <shapr> kristnjov: no, but it was punny.
03:40:34 * shapr bounces around the room
03:40:53 * kristnjov quickly writes a 4d opengl application
03:41:02 <shapr> I found a whoe bunch of legal grates music! yay! --> http://www.legaltorrents.com/
03:41:12 <jadrian> for instance changing foldr f e . map g  into a foldr h e'
03:41:15 <shapr> um legal gratis
03:41:19 <shapr> I can't spell today.
03:42:06 <shapr> the only downside is that I've sucked down about 5gb in the last two days and now I need to clear out some drive space.
03:42:31 <kristnjov> i've got 13 Mb so it easily fills my drives up quickly
03:42:42 <musasabi> Has anyone GUI code to display [[String]] in a table? I would like to avoid gtk2hs MVC if possible or at least have a layer on top of it.
03:42:44 <kristnjov> and i have 340 GB space :P
03:42:44 <shapr> 13Mb of what?
03:42:49 <kristnjov> 13 Mb connection
03:42:59 <shapr> I have 54GB in ~/music
03:43:05 <jadrian> kristnjov: I hate you :P
03:43:09 <kristnjov> i have >100 GB of mp3
03:43:16 <jadrian> I hate everybody with over 512Kb/s
03:43:17 <kristnjov> all legal of course ;P
03:43:21 <shapr> I only have a 120GB drive because I went for the 7200RPM with 8MBcache
03:43:29 <jadrian> damn 13Mb is a lot
03:43:34 <jadrian> kristnjov: is that at home?
03:43:36 <kristnjov> jadrian, i ain't complaining :)
03:43:39 <kristnjov> yes it's at home
03:43:49 <jadrian> nice
03:43:49 <kristnjov> at the university we have like 5Gb or something they told us
03:43:49 <shapr> musasabi: I think there's something like that in GenUtil.hs in ginsu
03:44:05 <Lynx> I'm from RIAA
03:44:05 <jadrian> where do you live? Sweden? Netherlands?...
03:44:10 <shapr> musasabi: at least there are some table utilities.
03:44:16 <kristnjov> Lynx, hey all my music is totally legal!
03:44:21 <Spark> :o
03:44:24 <shapr> Sweden! I love Sweden!
03:44:29 <shapr> Sweden has the most bandwidth.
03:44:36 <shapr> and cute blonde chix too.
03:44:37 <Spark> heh im at hte opposite end of legality
03:44:46 <Spark> i spent 40 quid on class A drugs last night :(
03:44:53 <shapr> Actually, all of my music is legal.
03:44:57 <ikegami-_> though I am Japanese, I love Sweden too :)
03:45:05 <Lynx> let me check
03:45:07 <kristnjov> in sweden we have an anti-piracy organisation.. but also a pro-piracy organisation
03:45:29 <Lynx> send me some GB, I've 0 GB of mp3 on my HDs
03:45:32 <shapr> If I want people to respect the GPL agreement I put on my code, I should respect whatever agreement they put on their bits, right?
03:45:33 <musasabi> thanks, I'll look that up.
03:45:55 <Spark> sounds non-hypocritical
03:46:06 <shapr> musasabi: er, now that I think about it, it's not GUI code, it's just ASCII print-out code.
03:46:17 <Spark> for some reason i have this mindset where its ok to pirate music
03:46:25 <Spark> i dont know why
03:46:28 <Spark> its blatantly immoral
03:46:37 <Spark> i think its because its *so* expensive if you dont
03:46:43 <tuomov> I have absolutely no respect for ip.
03:46:44 <shapr> Spark: do you think it's okay for people to use GPL code for commercial purposes without releasing their changes?
03:46:48 <Spark> if it was 2 or 3 quid an album then i would go for that i reckon
03:46:57 <tuomov> information is there to be copied.
03:47:03 <tuomov> and to be used.
03:47:06 <Lynx> Spark: could be ok like even moral but it's going to be more illegal day by day
03:47:14 <jadrian> shapr: you can do that
03:47:21 <jadrian> shapr: can't you?
03:47:33 <shapr> yes, you can... but redistribution requires releasing changes
03:47:34 <jadrian> shapr: you just have to distribute changes if you distribute the binaries
03:47:40 <jadrian> yes
03:47:40 <shapr> right, exactly
03:47:41 <Spark> shapr: theres personal use though and 'use to make profit'
03:48:00 <Spark> you dont redistribute if its personal use
03:48:46 <Spark> downloading msoffice is equivelent to MS downloading apache, hacking about with it, and then running it internally
03:48:58 <Lynx> in italy there is somebody thinking that there is profit if even you use for personal use as you don't waste money to buy original music. so law interpretation when you go to court is final answer.
03:48:59 <Boegel> shapr, do you kow how I can solve this problem ? : http://studwww.ugent.be/~kehoste/screenshot.png
03:49:08 <Boegel> shapr: check the Nothing keyword
03:49:15 <shapr> Well, I disagree with the current state of music licensing, so my approach is 1) follow all music licenses to the letter and 2) make my own music and release it under some open license like Creative Commons.
03:49:55 <shapr> So far I have only a bunch of lyrics, nothing recorded yet. But I bought my woman a really nice microphone last week.
03:49:56 <Spark> :)
03:50:01 <tuomov> yeah, well, simply ignoring badly licensed data is probably the best way to kill IP
03:50:11 <Spark> exactly
03:50:16 <shapr> right, just don't buy stupidly licensed data.
03:50:24 <Spark> if those who pirated windows used linux instead...
03:50:27 <Lynx> the same for GPL but it's not moral
03:51:11 <shapr> Lynx: if some company uses GPL binaries and doesn't follow the license, and then no one buys their product, they die.
03:51:30 <Spark> they also get sued by ibm? :)
03:51:37 <shapr> maybe that too.
03:51:51 <shapr> it's really sad that 'being sued' is a worse punishment than going to prison.
03:51:52 <Spark> the fsf would be pretty fucked without someone to pay legal fees
03:51:58 <Spark> heh
03:52:03 <Spark> you cant send a company to prison though
03:52:17 <Lynx> you can kill it
03:52:20 <Spark> and the only crime here is cheating at the game
03:52:27 <shapr> you can do worse than that... you can totally own their ass in public... far worse than doing that in prison ;-)
03:52:27 <Spark> theres no violence etc
03:52:37 <Lynx> yes
03:53:02 <tuomov> but you can't necessarily bring those within the company responsible to this to justice
03:53:13 <tuomov> s/to/for/
03:53:18 <shapr> sure we can
03:53:27 <shapr> keep a public record of the responsible people
03:53:31 <shapr> hiya sisko 
03:53:39 <sisko> hi shapr
03:53:47 <shapr> how's code?
03:53:52 <Spark> :)
03:53:58 <Spark> i havent coded for some time
03:54:03 <sisko> me too
03:54:04 <Spark> apart from contrived prolog assignments
03:54:09 <shapr> that's terrible!
03:54:12 <Spark> i know
03:54:12 <shapr> code is expression!
03:54:16 <Spark> creativeness stifled
03:54:22 <Spark> its for a good cause though
03:54:25 * shapr sniffles
03:54:26 <Spark> education!
03:54:42 <Spark> explore the whole of the island before you build your house
03:54:43 <Spark> or something
03:55:02 <Spark> i think i should maybe cut down my intake, and only go out eveyr other weekend
03:55:14 <sisko> why do you use haskell? education or job?
03:55:21 <Spark> this might insulate me from health problems and also free up time for more academic pursuits
03:55:23 <tuomov> fun.
03:55:40 <Spark> i actually (ashamed) dont know haskell, but i will learn it some day
03:56:09 <Spark> maybe for my project this summer
03:56:23 <sisko> ok. i need it for scool, but ist is of course fun too :)
03:56:49 <Spark> good fun for graph processing algorithms and things like that
03:56:59 <Spark> anyway
03:57:18 <Spark> i think i need to lie down, im a bit knackered
03:57:34 <Spark> back in an hour :p
04:00:00 <shapr> sisko: I use Haskell for both education and job.
04:00:50 <shapr> I don't have a computer science degree (or any degree) so Haskell is one way I educate myself.
04:01:01 <shapr> and I get paid to write code that does stuff, and Haskell is really good at doing that.
04:01:30 <shapr> oh hey! I have a strangely on-topic question
04:02:33 <shapr> I'm writing a blog entry about how software isn't for computers, it's for programmers. 
04:02:47 <sisko> cool
04:03:04 <shapr> and how programs are more for brains than for silicon...
04:03:19 <sisko> lol
04:03:28 <shapr> well, look at Vedic maths - http://www.vedicmaths.org/Group%20Files/tutorial/tutorial.asp
04:03:39 <shapr> and slide rules, and so much other stuff
04:04:00 <shapr> programming is a collection of shortcuts in reality, and computer are just our assistants in that process.
04:04:12 <shapr> They can take some of those shortcuts much faster than humans.
04:04:57 <shapr> So I'm trying to find a collection mental programming algoritms.
04:05:45 <shapr> Cale: ayh?
04:06:28 <maihem> 1) wait for alarm, 2) a <- read time, 3) stop alarm, 4) goto 1
04:06:34 <sisko> hmm, sounds interesting
04:06:54 <shapr> I think that the tricks of instant calculation and so much other 'child prodigy' stuff is just knowing how to do it. I think it's a skill we can learn.
04:07:10 <maihem> I think its table lookup
04:07:25 <shapr> I'd like to be able to do 'geometry on my feet' where I can quickly tell how tall a building is by measuring it according to my arm length or so.
04:08:14 <shapr> Anyway, I'm writing a blog entry about this, but I haven't found many resources on this topic. If you guys know of anything, I'd like to hear about it.
04:08:41 <shapr> My basic idea is that programming should not require a computer, it should be stuff we can do in our heads.
04:08:55 <shapr> and that it's just a skill we can learn.
04:09:48 <shapr> There must be more out there other than Vedic maths.
04:15:58 <shapr> ok, maybe that wasn't on-topic...
04:16:28 <maihem> kevin trudo had a "mega memory" product to train your memory. perhaps you can find something about him, he also produced a mental arithmetic thing like Vedic maths.
04:16:45 <maihem> A speed reading thing too.
04:17:33 <shapr> thanks for the pointer, I'll look him up.
04:17:48 <musasabi> back from shopping food (gfs...)
04:17:57 <musasabi> shapr: :-(
04:18:17 <musasabi> I have the ascii print out code myself...
04:19:31 <musasabi> takeN n str = take n (str ++ spaces)               spaces = repeat ' '
04:20:23 <shapr> arauko: btw, I think this 'Internal Computing' idea extends the idea that source code is first and foremost for programmers, and only for computers as an afterthought.
04:21:14 <shapr> well, time for work...
04:26:57 <arauko> Where did that come from?!
04:31:05 <jadrian> off-topic
04:31:56 <jadrian> do you know where to find Gentzen deduction systems for other logics other than classic propositional, 1st order...
04:32:05 <kristnjov> ge mig nåt som tar mig någonstaaaaaaaaaaaaaaaaaaans aaaaahhhhhhhhhhhhhh
04:32:44 <jadrian> and I thought my question might sound weird...
04:35:48 <jadrian> does anyone have access to the journal of formal logic?
04:43:25 <maihem> Wondering if anybody has seen this: http://www.eweek.com/article2/0,1759,1714680,00.asp
04:43:52 <maihem> Could it be the forerunner to similar action for Haskell, given Microsoft's input?
04:44:56 <jadrian> well they invented the internet
04:45:16 <jadrian> so they have the right to do that...
04:55:10 * esap is thinking about homsets.
05:38:22 <musasabi> Is it better to use symlinks from System.Posix.Files or Network.BSD ?
06:11:03 <kristnjov> musasabi, from Data.Char
06:59:09 * Oejet_ wished that ASCII had more mathematical symbols.
07:26:11 <maihem> shapr: you appear to be an IPv6 progressive
07:29:44 <tarantul> dottedmag: 
07:37:38 <shapr> maihem: yes, I am a progressive.
07:37:48 * dash is a regressive
07:37:50 <shapr> not progressive enough to hack IPv6 support into GHC though.
07:37:56 <dash> shapr: how do things progress!
07:38:01 * Philippa_ is a lateralist
07:38:12 <shapr> dash: [shapr..]
07:38:22 <tuomov> shapr: source code is a formalism for expression computational ideas. Computers are a tool for executing those computations.
07:38:28 <shapr> dash: progressive things tend to succ
07:38:33 <tuomov> s/sion/sing/
07:38:57 <shapr> tuomov: yes, I agree. I'm pursuing that subject, whatever it is called.
07:39:14 <shapr> but I'm having trouble getting enough information together to write a blog entry about it.
07:39:50 <shapr> my website is named Notions of Computation, but I thing I need a better name for it.
07:40:10 <shapr> Compunotion?
07:40:30 <Philippa_> I caught a vaguely related idea reading Iain M Banks again...
07:40:38 <dash> mmm, Banks
07:40:51 <Philippa_> (PoG - the more general meaning of "Azad")
07:41:11 <tuomov> I'm in the process of reading the algebraist..
07:41:28 <Philippa_> any good?
07:41:49 <tuomov> I've read consider phlebas and player of games so far.
07:41:56 <shapr> Maybe that subject is just the real computer science.
07:41:59 <tuomov> player of games I liked a lot, consider phelbas not so much
07:42:05 <tuomov> algebraist is somewhere between those so far
07:42:07 <shapr> Consider Phlebas was way depressing.
07:42:10 <dash> tuomov: read _Excession_ next :)
07:42:12 <Philippa_> yeah
07:42:16 <shapr> well written, but I wouldn't read it again.
07:42:17 <dash> shapr: yeah! but an awesome kind of depressing
07:42:23 * shapr shrugs
07:42:26 <Philippa_> Excession was cool, but Inversions is well worth a go too
07:42:33 <dash> _ooh_, banks has a new one out?
07:42:37 <shapr> I don't like books where the main character dies, and then his entire culture is wiped out.
07:42:39 <Philippa_> State of the Art can be left late, Look to Windward is a good follow-on for Phlebas as it were
07:42:40 <shapr> Just doesn't do it for me.
07:42:42 <tuomov> consider phlebas would make a plot for a hollywood movie
07:42:42 <dash> Philippa_: i couldn't get into Inversions.
07:42:51 <Philippa_> dash: shame, it's subtle and it's great
07:43:01 <dash> Philippa_: it was too subtle for me, i guess
07:43:17 <shapr> I read Monstrous Regiment and Going Postal recently. 
07:43:21 <shapr> GP is awesome!
07:43:25 <dash> yes
07:43:29 <dash> GP was awesome 
07:43:31 <shapr> MR is decent
07:43:31 <dash> MR, not so much
07:43:34 <dash> meh 
07:43:38 <Philippa_> spoilers for either will not be appreciated ;-)
07:43:44 <Philippa_> (I'm an afper, but can't afford the damn books atm)
07:43:45 * shapr won't say anything
07:43:49 <dash> pratchett occasionally seems to write these one-joke books
07:43:56 <dash> MR was one of those
07:43:57 <Philippa_> OK, OK, I know a little about the regiment's composition
07:44:00 <shapr> I haven't read wee free men yet.
07:44:04 <Philippa_> WFM's cool
07:44:10 <dash> if it was a joke I thought was funny, i might have found the book to be better :)
07:44:14 <shapr> what's the one before WFM?
07:44:25 <Philippa_> TAMAHER?
07:44:49 <Philippa_> dash: will let you know what I think when I've read it, I suspect it may be a little more subtle than that
07:45:15 <shapr> TAMAHER? no clue what that stands for.
07:45:24 <Philippa_> The Amazing Maurice And His Educated Rodents
07:45:25 * shapr googles for a bookography
07:45:28 <shapr> oh, never heard of it.
07:45:30 <Philippa_> or you could just grab the afp FAQs
07:45:39 <shapr> sounds cute.
07:45:47 <Philippa_> TAMAHER and WFM are both written for children, at least in theory
07:46:55 <Philippa_> though mostly that amounts to mildly more simplistic language and toning down Nanny Ogg a bit
07:47:44 <shapr> ah, too bad
07:47:50 <Philippa_> heh
07:47:54 <Philippa_> nah, they're good books
07:48:07 <Philippa_> it's only mildly more simplistic - pterry doesn't treat kids as idiots
07:48:21 <shapr> yah, I like that.
07:48:30 <shapr> I don't treat kids like idiots either.
08:09:46 <marcot> Good Afternoon.
08:11:23 <musasabi> What would be the best approach to generate an interface to a C++ library in haskell?
08:14:25 <Philippa_> er, depends somewhat
08:14:30 <Philippa_> how C++ish is the library?
08:14:38 <Philippa_> (as opposed to Cish)
08:14:49 <shapr> I wonder if Wolfgang Thaller's autogen code works only on ObjC, or if it could be hacked to work on C++ also.
08:15:07 <Philippa_> eg how much use of templates (feel free to scream if they're important), or exceptions?
08:15:28 <shapr> Thaller uses TH to generate a binding from the source files themselves, I think.
08:15:47 <Philippa_> cool
08:16:30 <shapr> I bet that would mix nicely with Alistair Reid's Knit
08:18:24 <musasabi> no templates or exceptions, but lots of inheritance.
08:20:00 <Philippa_> inheritance isn't so bad as the other things, thankfully
08:20:28 <Philippa_> If nothing else, I *know* I've read an article on how to deal with it
08:20:48 <musasabi> and lots of polymorphism too.
08:21:00 <Philippa_> in the C++ sense?
08:21:03 <Philippa_> that's no biggie
08:21:06 <musasabi> yes. 
08:21:23 <musasabi> I know it can be eliminated but that results in ugly haskell most of the time.
08:21:40 <Philippa_> is the problem in binding it at all, or in making it look good?
08:21:59 <Philippa_> (I figure a type class for each class-that-adds-to-the-interface makes sense)
08:22:43 <Philippa_> http://www.reid-consulting-uk.ltd.uk/docs/ffi-Common_Problems.html#SECTION00030200000000000000
08:22:46 <musasabi> well making a good looking interface is my priority, on technical level I think I understand how things can be done, but not necessarily how they should be done
08:23:52 <Philippa_> wxHaskell seems to do a decent job of it
08:24:59 <musasabi> that contains just one example. I'd like to have foo instead of {aaa,bbb,ccc}Foo which is the normal result from eliminating polymorphism. This can of course be solved with per function type classes, but is that good?
08:25:41 <Philippa_> it can be per group-of-functions typeclasses
08:25:49 <Philippa_> er, wait. Not quite
08:26:09 <Philippa_> yeah, I see the issue - do you have any instances of two different, unrelated functions foo?
08:26:40 <Philippa_> (and does it matter particularly? I have to admit I'd consider the per-function typeclass bad Haskell style)
08:26:46 <musasabi> well foos are semantically the same, but they might be quite different otherwise.
08:27:04 <Philippa_> all the foos are within one inheritance hierarchy?
08:27:14 <musasabi> of course if they have a different number of arguments one needs to wrap those somehow (maybe FunDeps)
08:27:29 <Philippa_> argh, yes, bloody C++ overloading
08:27:46 <Philippa_> porting that /would/ be bad Haskell style IMO
08:28:00 <musasabi> all objects inherit from a baseclass but foo is not inherited from there just defined to a subset of the subclasses.
08:28:19 <Philippa_> so foo's not a member function. Great
08:28:32 <tuomov> I think most core libraries should be written in quite primitive C, so that it is easier to write wrappers for each language in the style that languages is meant to be used
08:28:34 <musasabi> but the alternative results in horrors like treeViewColumnAddAttribute
08:28:46 <musasabi> Philippa_: a member function but not inherited.
08:29:04 <tuomov> And not in some awful OO C as is common these days.
08:29:29 <bourbaki> moin
08:29:34 <musasabi> class Base {}; class D1 : public Base { void foo(void *); }; class D2 : public B { void foo(void*); };
08:29:54 <Philippa_> tuomov: I'm inclined to agree. I mean, as a C++ coder I liked nice C++ interfaces with additional safety...
08:30:31 <Philippa_> musasabi: nice. Would it have been reasonably possible to refactor the class hierarchy (possibly with massive use of MI) to remove issues like that?
08:30:39 <Philippa_> not necessarily a typeclass for foo, but one for foo-and-related-funcs?
08:30:48 <musasabi> Philippa_: there is no good reason to do that in C++.
08:31:29 <Philippa_> musasabi: sure, that's not why I'm asking
08:31:30 <musasabi> with typeclasses that would more or less amount to the typeclass for each polymorphic function approach.
08:31:50 <Philippa_> more or less, but it's per function-grouping which is not as bad IYSWIM
08:31:59 <Philippa_> 'spretty much what wxHaskell does AFAICT
08:32:21 <Philippa_> plus you can quite reasonably bung helper functions in the typeclass then
08:33:27 <musasabi> so is there any tool to create such interfaces, or should I just create some dirty perl?
08:33:58 <Philippa_> do dirty TH rather than dirty perl? But yeah, not that I know of - wxHaskell generates stuff via existing Eiffel bindings
08:35:12 <musasabi> what is the best approach to getters/setters?
08:35:42 <Philippa_> dunno on that one. I like wxH's attribute system, but YMMV
08:41:30 <musasabi> that looks very nice..
08:41:40 <musasabi> and solves many problems ^_^
08:48:39 <jadrian> anyone with access to ACM around?
08:49:14 * jadrian probably shouldn't ask this... oh well...
08:49:39 <dottedmag> jadrian: no, for now :(
08:50:11 <jadrian> :-/
08:50:21 <jadrian> I keep needing papers from ACM...
08:51:14 <jadrian> I just find it weird that I can't access it through my university
08:51:41 <Boegel> hello everyone
08:51:53 <jadrian> since we have quite a few acm editions
08:51:55 <Etaoin> hi
08:51:58 <Boegel> has anybody heard anything about wolfgang8k lately ?
08:52:23 <jadrian> he was here a couple of days ago I think
08:52:41 <arjanb> he was going on vacation..
08:52:44 <Boegel> @seen wolfgang8k
08:52:45 <lambdabot> I haven't seen wolfgang8k
08:53:02 <Boegel> ow, how was his progress with his ray tracer ?
08:54:56 <musasabi> I can msg you what he said about it on the channel, if you want.
08:55:56 <arjanb> i don't know, you could try the logs of wedneysday
08:56:00 <musasabi> but should be in the logs too.
08:56:04 <musasabi> thus web.
08:56:32 <Boegel> musasabi, msg'ing me sounds easier, I'm quite lazy ;)
09:04:26 <shapr> jadrian: I find it weird that tax-funded papers can't be read by those who paid the taxes.
09:04:51 <jadrian> shapr: yeap me too
09:05:07 * Philippa_ really gets irritated about the ACM because her uni'll still only get her access to stuff from 1990 onwards...
09:05:15 <Philippa_> it's a real PITA
09:05:16 <jadrian> shapr: I was lucky in this case though, the papers I wanted were in citeseer
09:05:20 <Philippa_> heh
09:05:25 <Philippa_> citeseer's useful like that
09:05:33 <shapr> I've considered setting up citella
09:05:34 <Philippa_> checking the author's homepage helps too
09:05:51 <jadrian> I just found it weird that a google search didn't show citeseer...
09:06:02 <jadrian> and since it was not available to public in acm
09:06:05 <shapr> look at robots.txt on citeseer
09:06:12 <jadrian> I didn't expect it to be available elsewhere
09:06:32 <tuomov> and even when the papers aren't tax-funded, it is only the publishers who get money. neither the editors nor the authors get paid.
09:06:59 <jadrian> there is a p2p network for scientific stuff
09:07:09 <shapr> jadrian: this is why google doesn't show these - http://citeseer.ist.psu.edu/robots.txt
09:07:10 <jadrian> I tried it once and it seemed pretty cool
09:07:31 <jadrian> shapr: right
09:07:54 * jadrian is now using  "cite:" in konqueror to search in citeseer
09:07:57 <shapr> anyway, if I ever write and release Fermat's Last Margin, I think it'll help.
09:08:14 <jadrian> :)
09:09:53 <Boegel> damn, wolfgang8k was really producing some cool images :)
09:11:17 <shapr> salut Lunar^ 
09:11:37 <shapr> connais tu Yoggi Tolouse?
09:11:41 <Philippa_> shapr: you waiting on any new Flippi features to do that?
09:11:56 <Philippa_> though I'm putting more time into whirc atm (wxhaskell IRC client)
09:12:02 <shapr> ah, nifty
09:12:16 <Philippa_> it's GHC-only atm, sadly, needs forkOS etc etc
09:12:22 <shapr> I don't remember FLM status atm
09:12:24 <Philippa_> oh, and threadDelay
09:12:29 <shapr> my head is full of Python code.
09:12:33 <Philippa_> heh
09:12:34 <shapr> greeting Guidan 
09:12:52 <Guidan> hi Shapr
09:13:02 <shapr> looking for haskell info?
09:13:34 <Guidan> no just came by to check it out.
09:14:18 <shapr> ok, have any questions?
09:14:25 <Guidan> is it easy to learn shapr?
09:14:44 <shapr> it is, but it's very different from C/Java/Perl, etc
09:14:55 <shapr> so you may have to unlearn some other stuff first, if you already know those.
09:14:56 <Boegel> Guidan, it's fun :)
09:15:20 * Boegel thinks shapr should do the tour-thing again
09:15:24 <Guidan> Shapr: I dont know c/java/perl
09:15:29 <shapr> Guidan: lucky you...
09:15:34 <shapr> do you know any programming languages?
09:15:46 <Guidan> just a little of pelr
09:15:49 <Guidan> perl
09:15:52 <Guidan> little
09:15:55 <Guidan> very little
09:16:09 <shapr> do you know any math?
09:16:18 <Guidan> lol
09:16:20 <Guidan> yes
09:16:30 <shapr> does that mean, yes lots?
09:16:30 <Boegel> Guidan, why lol ?
09:16:52 <Guidan> i would think every one knows  math
09:17:08 <Etaoin> he's asking about math, not about arithmetic
09:17:16 <Boegel> Guidan, there's math and there's math
09:17:16 <Etaoin> I think
09:17:27 <Guidan> ohhh
09:17:38 <Guidan> math computer language?
09:17:43 <Boegel> no
09:17:54 <shapr> Guidan: if addition is 1 and category theory is 8, where are you on a scale of 1 to 10?
09:18:11 <Boegel> like, differentials (is that right?), group theory, fuzzy stuff...
09:18:29 <Guidan> wow i dont know
09:18:30 <shapr> I probably fit into a nice 4 ;-)
09:18:42 <Guidan> ohhh
09:18:53 <Philippa_> Boegel: for "differentials" you mean calculus?
09:19:03 <shapr> Anyway, Haskell is math-like in that you describe how to simplify rather than giving steps to accomplish.
09:19:27 <Boegel> Philippa_,  I'm not sure how to put it in english
09:19:29 <shapr> Here's the quick demo - http://www.haskell.org/hawiki/HaskellDemo
09:19:31 <Guidan> shapr: what can  haskell do?
09:19:43 <Philippa_> Boegel: all the dy/dx stuff etc?
09:19:48 <shapr> anything?
09:19:54 <Philippa_> Guidan: a lot. I'm writing a wiki clone and an IRC client atm
09:19:58 <Boegel> Guidan, pretty much everything, like every programming language
09:20:06 <Philippa_> the wiki clone's had a couple of releases, shapr can point you at a running copy
09:20:06 <Boegel> I'm writing a raytracer
09:20:15 <Boegel> Philippa_, right, that stuff
09:20:22 <Boegel> that's pretty basic though ;)
09:20:23 <Philippa_> oh, I've written interpreters in it too (Haskell is very, very good at interpreters)
09:20:26 <shapr> I've written a spam filter, an mailing list search webapp, xml transformations, etc
09:20:27 <Guidan> does it use up alot of memory l ike perl?
09:20:33 <Philippa_> Boegel: yeah, that's sort of My First Calculus :-)
09:20:33 <CLxyz> Boegel how is the raytracer going?
09:20:43 <shapr> Guidan: depends on what you mean by a lot of memory.
09:20:49 <Boegel> CLxyz, I'm working on it... I'm updating my images now
09:20:52 <Philippa_> and to an extent on what you're doing
09:21:01 <Guidan> usage?
09:21:31 <Philippa_> it depends in that there're some ways it's unfortunately easy to use a lot more memory than you expected
09:21:41 <Philippa_> but things aren't too bad if you avoid those
09:22:34 <Guidan> how do u write haskell? with a  txt>
09:22:35 <Guidan> ?
09:23:02 <Boegel> Guidan, prefferably something with syntax highlighting, like emacs, but you can write it in notepad or something like that
09:23:16 <Guidan> like vim?
09:23:17 <Philippa_> a text editor, yeah
09:23:18 <shapr> hiya viv 
09:23:24 <Boegel> Guidan, sure
09:23:24 <CLxyz> vim > emacs ;)
09:23:36 <Guidan> umm do u excute it than?
09:23:46 <Guidan> how do u excute it*
09:23:57 <Boegel> with Hugs or GHC
09:23:58 <shapr> yi > (vim || emacs)
09:24:11 <Boegel> http://www.haskell.org/hugs    http://www.haskell.org/ghc
09:24:22 <Guidan> r those for dos?
09:24:25 <shapr> Anyway, I gotta go back to work.
09:24:28 * shapr disappears
09:24:31 <Boegel> hugs in an interpreter, ghc is a compiler (with ghci as interactive tool)
09:24:40 <Boegel> Guidan, dos, unix, mac, you name it
09:25:00 <Guidan> whats hugs than?
09:25:09 <Boegel> interpreter
09:25:21 <Guidan> ok
09:25:30 <Philippa_> both're available pretty much anywhere you can get GCC to work AFAICT
09:25:33 <Boegel> it allows you to just load the file and execute functions, without having to compile
09:25:42 <CLxyz> hrm, havent tried yi yet
09:25:50 <Philippa_> Boegel: mac is unix these days :-)
09:26:34 <Boegel> Philippa_, I know ;)
09:27:06 <Philippa_> also, I'm not aware of a DOS GHC build, only win32
09:28:52 <Boegel> Philippa_, I'm guessing that's what he means to say... I doubt anybody is using DOS these days
09:32:21 <Boegel> is there anybody here who knows something about graphic stuff ?
09:32:52 <Boegel> I've implemented specular lighting with Phong, but I'm not sure the image produced by my raytracer is correct
09:35:13 <Philippa_> Boegel: give it five years so I can emulate an old PC fast enough and I'll be using it to run older games again
09:36:57 <Boegel> Philippa_, really old games you mean ;)
09:39:50 <Philippa_> pre-win95 ones
09:40:18 <Philippa_> like I dunno, the good bits of the X-Com series, the only decent fighting game the PC ever saw, one of the better silly racers...
09:40:27 <Philippa_> Tyrian. Haven't played that in /ages/, it was great
09:40:58 <Philippa_> pretty much anything 2D that isn't TBS or RTS, basically :-)
09:44:18 <Etaoin> terminals don't get keydown and keyup events huh. I guess I need some gui library?
09:45:20 <Boegel> Etaoin, are you sure about that ? 
09:45:26 <Etaoin> I'm asking
09:45:53 <maihem> Boegel: I'm having a go at a raytracer, but my diffuse lighting looks wrong.
09:45:56 <Boegel> I think they do
09:46:03 <Boegel> maihem, show me
09:46:14 <maihem> um, wait a mo
09:48:25 <maihem> just compiling up and producing some output
09:48:32 <Boegel> kay
09:49:21 <maihem> hm, I appear to have bollocksed it :)
09:50:46 <Boegel> meaning ?
09:51:00 <maihem> I was making some changes and I'm not using revision control :)
09:51:28 <Boegel> neither do I, ever
09:51:33 <Boegel> what s revision control ?
09:51:47 <maihem> is that irony or you mean it?
09:52:55 <dash> hello, haskelloids
09:52:59 <Boegel> eh, I mean it
09:53:26 <dash> for what reasons would "hmake foo" fail with a big stack of linker errors when ":load foo" works fine in hugs?
09:53:34 * Boegel is getting scared and gets out his stick to defend himself
09:55:10 <Boegel> update: http://studwww.ugent.be/~kehoste/thesisPublic/website/
09:55:25 <Boegel> I'm not quite happy with the specular reflection yet though... I think I did something wrong
09:55:31 * Boegel -> food
09:55:49 <maihem> Boegel: http://maihem.org/images/out.png
09:55:51 <maihem> oh
09:57:02 <Boegel> maihem, what's wrong with it ?
09:57:15 <Boegel> (brb)
09:57:23 <maihem> heh, I went to an IBM Linux course, and all I got was this lousy staple remover: http://maihem.org/images/staple_remover.jpg
09:57:53 <maihem> The edge where the light no longer strikes the surface seems too "sudden"
09:59:16 <dash> i'm importing Text.ParserCombinators.Parsec in my code
09:59:33 <dash> ghc6 gets along with that fine, but then the linker pretends it's never heard of such a thing
10:00:00 <dash> with complaints like:
10:00:01 <dash> ArnisParser.o(.text+0x1b): In function `__stginit_ArnisParser_':
10:00:01 <dash> : undefined reference to `__stginit_TextziParserCombinatorsziParsecziToken_'
10:00:20 <maihem> -package 
10:00:36 <maihem> -package parsec
10:00:38 <dash> Meh! it came with the compiler, why doesn't it know about it? ;)
10:00:50 <dash> maihem: Thank you.
10:01:18 <maihem> The haskell heiarchical libraries docs have the required package names down the right hand side
10:01:37 * dash grumbles
10:01:54 <Etaoin> or you can do ghc --make Main.hs
10:03:40 <dash> you guys ever used Hat? is it useful?
10:06:35 <Etaoin> I have not used it
10:07:39 <Boegel> maihem, that's normal
10:07:52 <maihem> cool, I thought I'd buggered it up :)
10:08:01 <Boegel> that's the point where the sphere begins to bend to the 'other side' 
10:08:14 <Boegel> see my images
10:08:42 <Boegel> http://studwww.ugent.be/~kehoste/thesisPublic/website/24_10_2004/1.png -> sudden
10:08:59 * Philippa_ learns a valuable lesson about exceptions and iteration-via-tail-recursion
10:09:13 <Philippa_> you do /not/ want your catch block to include the bit where you recurse - talk about space leak
10:09:13 <Boegel> that's just because the light is not able to strike that part of the sphere, and that happen fairly sudden
10:09:43 <maihem> right
10:10:11 <Boegel> woops :)
10:10:21 <maihem> how do you do phong specular?
10:11:18 <Boegel> http://fuzzyphoton.tripod.com/rtref/rtref_p.htm#phonghighlight
10:11:31 <maihem> thx
10:11:33 <Boegel> but that doesn't really look like my images
10:11:42 <Boegel> I have a strange glow around the highlight
10:12:31 <dash> Crud
10:12:45 <dash> hat doesn't support enough ghc extensions to work with parsec =/
10:29:20 <dash> oh ho! hugs has Hugs.Observe
10:35:16 <bourbaki> Boegel www.flipcode.com might be of interest for you therere some raytrace things atm
10:35:33 <Marios> hello,i want to return the result of a function ive written in a string but dont know exactly how to do it. for example lets say i have a function that gives me an Int for result, then i want to write a function to have my previous result in this form : lets say the Int i got was 10, my other function will return : " ..the result of john was 10 and for mike was.."  
10:35:39 <Marios> any ideas, thank u
10:35:41 <maihem> woohoo, phong shading added with minimal changes! And only a fraction of a second added to runtime for a 1024x1024 raytrace.
10:35:54 * maihem squeezes ghc
10:36:24 <bourbaki> is everyone writeing a raytracer here now ;)?
10:36:25 <maihem> Marios: show 5 is "5"
10:36:38 <maihem> bourbaki: I think so ;)
10:37:26 <Etaoin> Marios: yes. use show
10:38:17 <Marios> k thanx
10:38:31 <bourbaki> is there something like a fixed size array in haskell? ive got a pointer to an image in c and want to pass something into haskell where i dont have to use c functions to optain the colour at a certain point
10:38:58 <dash> bourbaki: i am not :)
10:40:13 <tromp> @index array
10:40:13 <lambdabot> Data.Array.Base,Data.Array.Diff,Data.Array.IArray,Data.Array.Unboxed,Data
10:40:13 <lambdabot> Array,GHC.Arr,Array
10:41:00 <whirctest> testing, testing, testing...
10:41:04 <bourbaki> and that corresponds to a normal array in c?
10:41:15 <Philippa_> yay, it's not /completely/ broken!
10:42:11 <Philippa_> though I should probably make it polite enough to QUIT properly
10:42:33 <kristnjov> Philippa_, you're making an IRC client in haskell?
10:42:37 <Philippa_> right
10:42:47 <Philippa_> a GUIfied one using wxhaskell, hence the name
10:42:48 <kristnjov> are sockets in haskell very different from sockets in c++?
10:42:56 <Philippa_> not massively
10:43:10 <kristnjov> is it open source?
10:43:12 <Philippa_> though the simplified stuff in Network (as opposed to Network.Sockets) is easier
10:43:23 <Philippa_> whirc? It will be once it's in a less embarassing state
10:43:29 <kristnjov> hehe
10:43:43 <Philippa_> right now it's pretty much a glorified raw connection with a crappy UI
10:43:47 <kristnjov> i made an irc client in c++, pretty much using raw commands :P
10:44:14 <kristnjov> the worst thing about making an irc client in c++ was the parsing
10:44:21 <kristnjov> all the time, parsing, parsing, parsing...
10:44:37 <Spark> bleh
10:44:39 <Philippa_> heh
10:44:47 <Philippa_> you see why I'd rather do it in Haskell, then :-)
10:44:58 <Spark> mm
10:45:03 <kristnjov> yeah i'd love to do it in haskell although i'm not sure if i could make it
10:45:05 <Spark> the irc protocol is quite pleasant to parse though
10:45:13 <Spark> its not xml, for instance :)
10:45:29 <Philippa_> right now I've a major space leak to track down...
10:45:37 <Philippa_> like, the client's constantly leaking space as it runs
10:45:38 <Spark> writing an irc bot is a fantastic way to learn a language
10:45:43 * Philippa_ blinks
10:45:45 <Spark> memory?
10:45:52 <Philippa_> no tail recursion optimisations without -O, right?
10:46:12 <tromp> no, bourbaki, you have to initialize it all at once, and thereafter can only read it
10:46:15 <Philippa_> that would explain it rather quickly :-)
10:46:42 <Philippa_> nope, it's leaking with -O as well. Damn.
10:46:57 <bourbaki> and how would i pass my image then form c to haskell?
10:47:00 <tromp> or create copies with changed entries
10:47:16 <Philippa_> scratch that, it didn't recompile it on account of having a valid .o already. Trying again...
10:47:17 <dash> Spark: Hmm
10:47:27 <dash> Spark: why is writing an IRC bot a fantastic way to learn a language?
10:47:39 <Philippa_> yep, 'sleaking. Crap.
10:47:54 <Philippa_> parsing, a decent amount of IO, room for interpreter-type stuff...
10:48:06 <maihem> a recursion like this perhaps?: recurse 0 = 1; recurse n = 1 + $ recurse (n - 1)
10:48:17 <Spark> yeah
10:48:25 <Spark> and also links with whatever you want - http, dict.org, etc
10:48:25 <dash> I ask because #python sees 5-12 people asking for help writing IRC bots every week
10:48:30 <Spark> its a hub for lots of things
10:48:40 <Spark> and also... you get motivated because you show it off to your mates and they ask for features
10:48:47 <Spark> and it becomes a big software engineering maintance task
10:48:49 <maihem> so it builds up a list of "must add one to the result of "must add on to the result of "must add one to the result of ... ?
10:48:51 <dash> Hm.
10:48:56 <Spark> also it fits well into a modular structure
10:48:57 <dash> Spark: This is all very true. :(
10:49:18 <Spark> i learned java this way :)
10:49:24 * dash tries to think of a way to exploit this mentality
10:49:46 <Spark> i wrote a bot that did lots of things, including sending sms's to people from irc and stuff :)
10:49:57 <Spark> none of it works any more of course
10:50:10 <Spark> cos they were all wanky http interfaces and cheap html parsers
10:50:15 <Spark> and all the sites have shut down / changed now
10:51:58 <dv> hugs doesn't have the Network module?
10:52:32 <kristnjov> i don't know what i'd do without hgus
10:52:35 <kristnjov> hugs*
10:52:50 <kristnjov> btw is there any graphical GUI editor for haskell?
11:00:39 <Cale> kristnjov: not that I know of, but if you'd like to code one, that would be quite cool :)
11:01:43 <Cale> glade support would be neat, then you don't even have to write the UI editor
11:03:50 <Cale> kristnjov: and without hugs, you'd probably use ghci :)
11:07:41 <Spark> yeah do it with glade
11:07:49 <Spark> i quite like glade
11:08:10 <Spark> its great until you need a custom widget
11:08:37 <kristnjov> sure i'll just do it! or no!
11:10:27 <Spark> aw
11:10:36 <Spark> code code code, no time for dinner
11:10:45 <Spark> through the night and through the day
11:19:16 <jadrian> spaces in both ends of the urls in the channel topic wouldn't hurt...
11:19:34 <jadrian> it would be easier for irc clients to parse it
11:23:09 * Philippa_ found the space leak
11:23:26 <Philippa_> appears to be very much not my fault - I set an on idle function on my main window, and it looks like it's not being GCed
11:23:27 <kristnjov> was it replicate ' ' n ?
11:23:36 <Philippa_> heh
11:23:37 <kristnjov> or perhaps that would be replicate n ' '
11:24:47 <Philippa_> eek, mebbe not
11:25:03 <Philippa_> I mean, the idle loop is definitely the memory leak, but doing a performGC in it isn't helping
11:42:31 <Philippa> *bollocks*
11:42:35 <Philippa> the leak's due to threadDelay
11:44:08 * Philippa curses loudly
11:44:23 <Philippa> not a damn thing I can do about that, and removing it makes whirc a badly behaved app in terms of CPU usage...
11:47:31 <Cale> why is threadDelay causing a space leak?
11:54:21 <Marios> im trying to work out something i asked earlier,need to write a function to return a string for example like "the score for john is * and for nick is * " where the * will be the results of some other functions and will be Int,tried to use show didnt work-im not sure what the type of my new function will look like
11:54:26 <Marios> any ideas,thanx
11:57:49 <jadrian> Marios: well you take 2 Ints and return a String...
11:58:48 <Philippa> Cale: I have no idea
11:59:20 <Marios> no, my result must be a String or somethin
11:59:29 <Marios> and must include the ints in that
11:59:54 <musasabi> /c/c
12:00:18 <Philippa> Marios: so you end up converting the Ints to Strings and building a bigger String
12:00:22 <Philippa> you're still returning a String
12:00:32 <musasabi> Marios: ("foo"++show bar++"baz++show baz)
12:00:33 <Philippa> oh yeah, ++ is string/list concatenation
12:00:38 <Philippa> musasabi: you're too nice :-)
12:00:53 <Etaoin> do I have to do something special to use ffi?
12:01:29 <Etaoin> I'm getting a parse error on "foreign import ..."
12:01:48 <Philippa> which haskell implementation are you using?
12:01:55 <Etaoin> ghc
12:02:01 <Igloo> -fffi
12:02:55 <Etaoin> thanks
12:02:59 <Cale> heh, hey how's about a raytracer where instead of R^3 the space is L^2[0,1]? :)
12:03:57 <bourbaki> Cale L^2 ?
12:04:09 <Cale> Square integrable functions.
12:04:57 <Marios> thanx,itworks
12:05:09 <bourbaki> Cale and whats so interesting about them?
12:06:28 <Cale> well, it's a Hilbert space
12:07:28 <Cale> just like R^3 is, so you can do basically all the geometry you can do with ordinary vectors, but it happens to also be an infinite dimensional space
12:08:00 <Cale> my guess is that it might be hard to actually compute anything :)
12:09:03 <bourbaki> heh
12:29:37 <Philippa> yay, 3 line spaceleak app!
12:29:45 <Philippa> module Main where
12:29:45 <Philippa> import Control.Concurrent
12:29:45 <Philippa> main = (threadDelay 1000) >> main
12:31:34 <arjanb> so threadDelay has a buggy implementation?
12:33:06 <Philippa> quite possibly
12:33:23 <Philippa> GHC 6.2.1 under win32, the standard binary distro
12:33:38 <Philippa> dunno if it leaks on other systems
12:34:02 <Philippa> it's a bit of a bugger if you need threadDelay to avoid eating all the CPU time in a wxHaskell app's idle loop though
12:34:14 <musasabi> btw I noticed that using fltk for my GUI needs is the easiest way with haskell.
12:34:28 <Spark> is it just a wrapper around sleep though
12:34:37 <Spark> or nanosleep or whatever
12:35:16 <Philippa> I believe it's eventually implemented that way, but it's not safe for me to just call that via the FFI
12:35:49 <Philippa> the windows/minGW implementation appears to run an OS thread for every RTS thread
12:36:07 <Spark> mm
12:36:37 <Philippa> of course, I'm trying to write portable (between hardware platforms if not compilers) code here
12:40:46 <Oejet_> musasabi: Is there a Haskell FLTK library?  Do you have some links?
12:42:27 <musasabi> Oejet_: no, but just using it and doing FFI between C++ code using it and Haskell results in fewer lines than gtk2hs.
12:43:37 <Oejet_> musasabi: So doing it "by hand"?
12:44:28 <musasabi> yes, I don't have the time to create yet another widget toolkit.
12:52:18 <Spark> :)
12:53:06 <Spark> if you were to write a program in every language, for the purposes of comparing the languages
12:53:11 <Spark> what program would it be
12:53:31 <musasabi> depends what language you would want to advocate ;)
12:53:33 <Spark> something that is quite involved, that used many features of them all
12:53:37 <Spark> :)
12:54:46 <Spark> i bet eventually when the research into languages dies out, we'll end up with a single language that has zillions of features and is good for everything
12:55:36 <Spark> although people have been trying to find the sweet spot between imperative / declarative for years havent they
12:55:53 <musasabi> Spark: then it is too large.
12:56:03 <musasabi> Spark: e.g. Scheme vs Common Lisp
12:56:06 <Lor> Hey, folks. "Type checking", "type-checking" or "typechecking"?
12:56:18 <musasabi> or Oz
12:56:36 <EviL_DORK> argh, apparently ghc doesn't work in freebsd 5 :(
12:56:41 <Spark> is size a problem if the language is universal though
12:56:49 <Spark> does it mean its too complex for anyone to implement
12:58:14 <dash> well
12:58:19 <EviL_DORK> yeah, not everybody who speaks english needs the vocabulary of william faulkner to communicate
12:58:32 <musasabi> Spark: complex for programmers to learn.
12:58:35 <dash> the problem is that there are no general purpose languages
12:59:01 <dash> there are just languages that make it easier or harder to implement special-purpose languages on top :)
12:59:05 <musasabi> Lor: I would write it separately, but I not sure about it.
12:59:53 <Lor> I noticed that I use both "type checking" and "type-checking" inconsistently. Then I decided to use whatever Pierce uses, but he writes "typechecking".
13:00:01 <jadrian> we're just in the early days of programming...
13:00:02 <mflux> lor, I think "Haskell does type checking" but "haskell is a type-checking language"
13:00:14 <dash> mmm 
13:00:19 <mflux> of course, I'm not a native ;)
13:00:20 <Spark> go with pierce, follow the leader :)
13:00:27 <dash> are there any non-typechecking languages?
13:00:29 <dash> well, sh i guess
13:00:33 <Spark> bash
13:00:34 <Spark> :)
13:00:38 <dash> aye
13:00:44 <Lor> google gives 15k hits for typechecking, and 190k hits for the others (cannot distinguish between them)
13:00:45 <Spark> you get languages where eveyrhting is the same type
13:01:06 <Spark> assembly isnt type checked :)
13:01:17 <Lor> There is no single language called "assembly".
13:01:26 <Lor> Some symbolic machine languages _are_ type checked.
13:01:32 <Spark> are they?
13:01:40 <Lor> Yep.
13:01:44 <Lor> Pretty neat, too.
13:01:45 <Spark> oh i see what you mean yeah
13:02:09 <Lor> http://www.cs.cornell.edu/talc/
13:03:41 <jadrian> it needs to evolve right now, then eventually simplified, in terms of syntax unification and to be generaly dumbed down, 
13:03:56 <jadrian> just like math
13:04:07 <dash> heh
13:04:20 * Lor decides to go with the space.
13:04:30 <dash> jadrian: what needs to?
13:04:37 <EviL_DORK> ultimately I'd be happy if there was a language that could cover both the lowest levels of the system and make a nice user interface while covering everything in between without getting too messy
13:04:42 <jadrian> dash: of course
13:04:50 <jadrian> dash: look at how math is teached
13:05:01 <dash> jadrian: what needs to evolve?
13:05:12 <EviL_DORK> then it needs to be implemented
13:06:03 <dash> EviL_DORK: common lisp comes close, some days
13:06:07 <jadrian> dash: programming languages in general
13:06:14 <dash> it's been done before, it'll be done again
13:06:21 <jadrian> dash: ever looked at old mathematical writing?
13:06:25 <EviL_DORK> was done with unix
13:06:27 <dash> jadrian: no
13:06:30 <dash> EviL_DORK: Well.
13:06:36 <jadrian> dash: It's awfull
13:06:36 <EviL_DORK> still is being done
13:06:38 <dash> EviL_DORK: It's debatable whether C is too messy or not :)
13:06:46 <dash> EviL_DORK: but in principle you are right
13:06:51 <EviL_DORK> no doubt about it C gets pretty messy
13:06:58 <EviL_DORK> but it works well enough to parse command-line arguments
13:07:00 <jadrian> dash: one wonders how they were able to think with that kind of language
13:07:15 <jadrian> dash: everything was so verbose
13:07:23 <dash> jadrian: two things
13:07:25 <EviL_DORK> which was really essentially the extent of what a user interface was back in the day
13:07:36 <dash> 1) the clash between programming languages is primarily semantic, not syntactic
13:07:37 <Spark> :)
13:07:51 <Spark> when i code in C i end jup joining together loads of libraries
13:08:12 <dash> in math, you have to get pretty deep into things before people disagree on what a number is, for example
13:08:12 <Spark> readline, glib, etc
13:08:22 <jadrian> dash: oh but I'm not talking about uniformization of languages
13:08:23 <dash> 2) the difference between math and programming languages is that programming languages have to deal with time and space
13:08:39 <dash> oh, guess i missed something. what are you talking about?
13:08:56 <jadrian> just evolution of programming in general
13:09:08 <EviL_DORK> well, I think it's agreed that nobody has designed the programming language to end all other programming languages yet
13:09:20 <jadrian> and how we learn it
13:09:20 <dash> EviL_DORK: you can't end all programming languages :)
13:09:29 <tuomov> m$ gets to decide we'll be clicking and dragging objects around
13:09:35 <dash> jadrian: by writing IRC bots, obviously
13:09:41 <jadrian> :D
13:09:45 <EviL_DORK> MS looks like they're going java-style
13:09:46 <dash> that seems to be the most popular option these days =|
13:09:53 <Spark> heh
13:10:00 <Spark> programming for cartoonists
13:10:02 <EviL_DORK> C# is imperative isn't it?
13:10:09 <dash> EviL_DORK: heh heh
13:10:20 <dash> EviL_DORK: what do you mean by "is"? ;)
13:10:44 <jadrian> dash: for instance, until highschool kids learn plenty of calculus as almost no algebra
13:10:44 <EviL_DORK> dash: dunno what you're getting at
13:11:05 <dash> EviL_DORK: i mean that the quickest way to confusion is to ask whether a programming language "is" something or "is not" something
13:11:14 <Boegel> bourbaki, I've already seen the pages at flipcode.com, but thanks anyway :)
13:11:26 <jadrian> dash: on may say calculus is easier to teach, algebra is to abstract and you don't have all those formulas etc
13:11:30 <bourbaki> Boegel np
13:11:30 <Boegel> maihem, can I see an image of your Phong shading ?
13:11:33 <dash> EviL_DORK: for example, if i said "Python is a functional language", how would you respond? :)
13:11:36 <Spark> im not really happy with the definition of declarative
13:11:40 <Spark> because even in prolog
13:11:41 <jadrian> dash: but that's mainly because it as not been dumbed down
13:11:41 <dash> jadrian: Huh?
13:11:44 <Spark> you have to be aware of the unification algorithm
13:11:50 <jadrian> and algebra is important for programming
13:11:52 <Spark> otherwise you end up in infinite loops and stuff
13:11:53 <jadrian> and so is logic
13:12:38 <tuomov> Yeah, calculus is over-emphasised, also in university basic courses.
13:12:42 <Spark> and functional programming is all about knowing how the function is 'excecuted'
13:12:42 <dash> jadrian: I am utterly confused.
13:12:57 <tuomov> And I've studied too much analysis and now can't decide if I want to continue that route or jump to more cs-related math or tcs.
13:13:01 <jadrian> dash: just saying that kids get to college with an huge background on stuff like calculus when compared to algebra, logic and other disciplines that are very important when it comes to learn how to program
13:13:20 <dash> jadrian: Meh
13:13:34 <bourbaki> why not learn a bit of everything?
13:13:35 <dash> i don't find calculus, algebra, or logic very relevant to most programming
13:13:38 <dash> bourbaki: Time.
13:13:45 <jadrian> dash: maybe not yet
13:13:46 <bourbaki> is an illusion
13:13:51 <Spark> its just a way of expressing a sequence of events in a simple recursive way, rather than in a list with control flow :)
13:13:53 <dash> jadrian: what's going to change?
13:13:55 <tuomov> dash: abstraction, indirectly
13:13:59 <jadrian> dash: but maybe it could be
13:14:19 <Boegel> grr, i hate it: my scroll doesn't work on my mouse in linux
13:14:24 <dash> clearly there are bits where it's important
13:14:25 <Boegel> I'm _so_ used to using that
13:14:33 <Spark> Boegel: you can make it work you kow...
13:14:34 <Spark> know
13:14:35 <dash> why do you think those bits will become more prevalent?
13:14:41 <jadrian> dash: maybe you can dumb down many programming related formulas, just like you do in calculus, with integrals and stuff
13:15:15 <Boegel> Spark, if I'd only knew how...
13:15:32 <jadrian> dash: and don't just think abstract algebra, it's not that dificult to simplify algebraic structures like trees, queues, etc
13:15:33 <Boegel> I think it has worked before, and as far as I know, I didn't change a thing
13:15:34 <Spark> Boegel: XF86 config, put some lines in about zaxis mapping
13:15:35 <Spark> google
13:15:46 <jadrian> dash: then you can teach them early on
13:15:49 <Spark> also make sure your mouse driver is correct
13:16:16 <Spark> jadrian: there are some useful skills when programming, but i dont think they are maths related as such
13:16:27 <Spark> when testing, youre essentially designing a scientific experiment
13:16:30 <tuomov> maths teaches abstraction
13:16:33 <Spark> with controlled variables and stuff
13:16:33 <EviL_DORK>         Option      "Buttons" "5"
13:16:35 <Spark> when debugging, rather
13:16:40 <tuomov> testing is evil.
13:16:42 <tuomov> I hate testing.
13:16:48 <jadrian> Spark: I do...
13:16:49 <EviL_DORK> put that in the mouse section of your xf86config
13:16:56 <EviL_DORK> given that you're using xf86 4
13:17:01 <Spark> and to design modular code, you need to be able to factor out various things
13:17:13 <tuomov> (traumas from old job)
13:17:19 <jadrian> Spark: I'm not saying that's just it... it was one example
13:17:23 <Spark> these are skills that are useful in maths too... but does teaching maths practice these skills better than just practicing programming?
13:17:42 <jadrian> Spark: there are 2 answers
13:17:48 <Boegel> EviL_DORK, where can I find that conf. file ?
13:17:56 <jadrian> Spark: 1. yes I think they are very important 
13:18:04 <EviL_DORK> Boegel: by looking for it
13:18:14 <EviL_DORK> start by reading the manual pages
13:18:15 <jadrian> Spark: 2. I'm not talking just about abstract nonsense kind of math
13:18:30 <bourbaki> jadrian whats abstract nonsense :)"?
13:18:46 <dv> topology
13:18:55 <jadrian> bourbaki: acstract algebra, categories, topology etc
13:19:00 <sorje_> Boegel, that config should be somewhere in /etc/X11
13:19:00 <bourbaki> topology is nonsense? and why is that?
13:19:00 <jadrian> ;)
13:19:08 <dash> bourbaki: nobody understands it!
13:19:15 <dash> or rather
13:19:18 <jadrian> Spark: think about studying abstract data type properties for instance
13:19:20 <dash> the people that do are all crazy
13:19:22 <tuomov> basic point-set topology is nice
13:19:23 <bourbaki> jadrian ok but haskell uses monads which have their roots in CT
13:19:30 <tuomov> I'm not so much into algebraic topology and stuff
13:19:30 <jadrian> bourbaki: I know...
13:19:34 <jadrian> bourbaki: and functors
13:19:36 <EviL_DORK> sorje_: or it could be in /usr/X11R6/lib/X11/
13:19:36 <tuomov> that's abstract nonsense
13:19:42 <jadrian> bourbaki: and arrows... etc
13:19:44 <dash> come, now
13:19:52 <sorje_> EviL_DORK, yes, but often it is not.
13:19:54 <dash> haskell is _the_ language for abstract nonsense
13:19:56 <dash> don't get too uppity
13:19:57 <Spark> one thing i really like about compsci is great scope it covers between theory and practice :)
13:20:00 <bourbaki> and topology isnt nonsense either
13:20:09 <bourbaki> it has strong relations to a lot of other fields
13:20:14 <bourbaki> like logic for instance
13:20:23 <Spark> i need to grab some chav food from the local semen-in-the-mayonaise joint
13:20:26 <Spark> i shall return
13:21:08 <jadrian> for instance, if we stick to haskell
13:21:15 <jadrian> how complicated is it to learn laws like
13:21:25 <Boegel> hey wait :)
13:21:26 <jadrian> map f . map g = map (f.g) 
13:21:29 <jadrian> etc
13:21:44 <Boegel> something strange... the scroll works in X-Chat, but not in Firefox or Nautilus
13:21:45 <bourbaki> is that complicated?
13:21:49 <jadrian> no
13:21:53 <jadrian> that's my point
13:22:04 <bourbaki> but its not complicated in math either
13:22:11 <jadrian> highschool math is much more complicated than that
13:22:15 <jadrian> exactly
13:22:33 <EviL_DORK> they just don't teach programming early enough
13:22:37 <jadrian> and how complicated is the concept of pre-order trasversal?
13:22:49 <EviL_DORK> only reason why I have any interest in it is my dad let me putter around in logo when I was 4
13:23:29 <bourbaki> imho programming is about ideas
13:23:40 <bourbaki> you want to solve something otherwise you wont program
13:23:46 <jadrian> all I'm saying is that, eventualy, comp sci will be dumbed down and we'll see it being taught in early years
13:24:16 <EviL_DORK> it is being taught in the early years in the right places
13:24:18 <jadrian> that's what happened with many math fields
13:24:23 <jadrian> like?
13:24:24 <bourbaki> i had comp sci in school
13:24:34 <bourbaki> and math is taught in school ever since
13:24:47 <jadrian> bourbaki: really? what did you learn?
13:24:59 <EviL_DORK> my cousin is taking a mandatory class that teaches BASIC in the 6th grade
13:25:03 <bourbaki> just some programming in pascal nothing specially
13:25:10 <jadrian> we have that here too
13:25:13 <EviL_DORK> say what you will about the evils of teaching kids basic
13:25:20 <jadrian> but that is completely different from what I'm talking about
13:25:23 <EviL_DORK> but at least it's something
13:25:29 <jadrian> it's not just programming
13:25:44 <bourbaki> but the compsci core is math
13:25:49 <jadrian> exactly
13:25:52 <Lor> Were those classes _called_ "computer science"?
13:25:57 <bourbaki> so more math is what you have to do
13:26:14 <jadrian> yeap that's my opinion
13:26:40 <bourbaki> and i say learn a bit of everything :)
13:26:59 <jadrian> brb
13:27:15 <EviL_DORK> well
13:27:20 <bourbaki> imho its better to know a bit of everything and deepen your knowledge if needed then to be too specifically trained to one field
13:27:27 <tuomov> I'd like to a lot of almost everything..
13:27:30 <tuomov> +know
13:27:32 <EviL_DORK> I think what's most important with teaching computer science
13:27:39 <tuomov> but there's no time
13:27:41 * dash shrugs
13:27:44 <EviL_DORK> and I obviously don't know jack about CS
13:27:57 <EviL_DORK> despite being in my 3rd year of a college CS program
13:28:01 <dash> most of the programming i'm interested in is pretty far removed from math or formal logic
13:28:09 <EviL_DORK> but what we could teach kids about programming
13:28:18 <dash> EviL_DORK: most people teaching CS don't know jack about computer science
13:28:21 <EviL_DORK> is the ability to express ideas in a set of code
13:28:24 <Spark> :)
13:28:26 <dash> and even less about professional programming
13:28:37 <Spark> the best ones are hte theoretical types
13:28:38 <EviL_DORK> there needs to be more of an emphasis on that
13:28:40 <EviL_DORK> rather than
13:28:44 <Spark> they often have mathematical backgrounds
13:28:57 <EviL_DORK> a familiarity with common programming idioms
13:29:03 <bourbaki> CS is math
13:29:04 <EviL_DORK> as our school seems to be obsessed with
13:29:15 <tuomov> not all cs is maths. 
13:29:18 <Spark> its novelty maths, for people who dont understand maths
13:29:19 <bourbaki> just a special field of it
13:29:28 <tuomov> e.g. there's not much math in UIs.
13:29:41 <bourbaki> Spark weve got a cognitive math faculty here
13:29:42 <tuomov> theoretical cs is maths.
13:30:02 <Spark> yeah lambda calculus, type theory, complexity, etc
13:30:15 <dash> non-theoretical CS is programming with an inflated sense of importance ;)
13:30:15 <bourbaki> designing uis is not a science to me :)
13:30:29 <Spark> why not?
13:30:42 <dash> mwoo hah hah
13:30:46 <bourbaki> where is the science in there?
13:30:46 <tuomov> technically its more of an art. But it is grouped in cs.
13:30:47 <Spark> this is just the attitude that produces shit software :)
13:30:49 <dash> can we debate the meaning of "science" please? :D
13:31:09 <Spark> id go with tuomov actually :)
13:31:20 <bourbaki> to where ;)?
13:31:25 <Spark> to paris
13:31:31 <bourbaki> ah heh
13:31:35 <Spark> WHERE ELSE
13:31:49 <dash> Spark: the jungles of antarctica
13:31:49 <EviL_DORK> designing the body shape of a car is an "art" that requires a fair bit of science
13:32:12 <EviL_DORK> as is designing a gui
13:32:14 <Spark> engineering
13:32:33 <bourbaki> how do you effeciently store an image in haskell so you can apply filters to it?
13:32:33 <tuomov> engineering is waving of hands claiming to by applying science
13:32:40 <EviL_DORK> both require aesthetic appeal as a component of the design specification
13:32:42 <dash> Spark: industrial design, maybe
13:32:44 <Spark> engineering is more about applying the abstractions that mathmos have devised, in a way that suits you :)
13:32:54 <dash> mmh not really
13:33:14 <dash> engineering is about applying theory in such a way as to be on time and on budget
13:33:31 <Spark> yeah
13:33:31 <tuomov> applying theory without the theory
13:33:39 <Spark> calculating the unknowns
13:33:44 <Spark> that arent important to the specification
13:33:51 <Spark> well
13:34:01 <Spark> that arent specified, but have to be right for it to work
13:34:12 <Spark> or maybe...
13:34:23 <Spark> using theory to decide if a design will work or not
13:34:30 <Spark> where the design part is the art phase
13:35:00 <tuomov> using theory to justify designs even if the theory says something completely different
13:35:00 <Spark> right thats enough bollocks from me im hungry
13:35:23 <EviL_DORK> I for one would appreciate a gui that can work a little bit more like my bash prompt in redirecting input and output of things
13:36:15 <EviL_DORK> the clipboard is a great idea
13:36:31 <EviL_DORK> and though there have been a few attempts at extending it
13:36:36 <bourbaki> Boegel how do you store your image?
13:36:36 <tuomov> I'd like the bash prompt to be able to display graphics..
13:36:44 <dash> tuomov: xmlterm!@
13:37:03 <tuomov> it's a step in the direction, but seems a bit clunky
13:37:21 <musasabi> -> sleep
13:37:28 <bourbaki> maihem how do you store the image for your raytracer?
13:37:36 <EviL_DORK> is it me or does everything that involves xml end up being a little clunky?
13:37:53 <tuomov> no, it's not just you
13:38:07 <EviL_DORK> like
13:38:08 <Spark> theres nothing inherently wrong with xml
13:38:09 <EviL_DORK> web browsing
13:38:10 <Boegel> bourbaki, I write it to a file (PPM format)
13:38:11 <Spark> apart from the hype :)
13:38:11 <EviL_DORK> for example
13:38:26 <EviL_DORK> there's nothing at all wrong with xml
13:38:34 <bourbaki> Boegel no i mean beforehand before you write it away
13:38:40 <tuomov> xml is used too much for things it isn't suited for: config files, document formats. These need to be editable by humans.
13:38:43 <tuomov> XML isn't.
13:38:45 <Boegel> bourbaki, [Color]
13:38:55 <Spark> its a primarily machine-read structured file format, it'd be hard to fuck up such a thing :)
13:39:01 <bourbaki> Boegel ah ok but thats not really efficnet :(
13:39:21 <Spark> yeah tuomov is right, if your files are primarily human read, you need a special language
13:39:32 <Spark> and to dig out the lexer/parser
13:39:58 <tuomov> but these days the trend is crappy special editors for every file format instead of one good text editor
13:40:11 <Spark> wasnt the point of xml to unify the editting tools
13:40:13 <Spark> but i havent seen any
13:40:22 <EviL_DORK> tuomov: that really bugs me
13:40:28 <EviL_DORK> Spark: that's my main gripe
13:40:37 <Boegel> bourbaki, what do you mean ?
13:40:53 <EviL_DORK> I haven't seen one iota of the unification and standardization that the xml was supposed to bring
13:41:06 <EviL_DORK> all I've seen are xml schemas galore
13:41:22 <bourbaki> Boegel i want to do some image processing in haskell that is ill get an image from c from the webcam and there a list isnt very performant is it?
13:41:46 <EviL_DORK> and how that is supposed to help the disaster that creating a web page is in this age of html/css/javascript
13:41:51 <EviL_DORK> I don't know
13:42:49 <EviL_DORK> apparently, you're supposed to separate your content from your presentation
13:43:06 <EviL_DORK> and then you can tweak the presentation to your liking
13:43:24 <EviL_DORK> but it doesn't work like that at all
13:43:31 <Boegel> bourbaki, probably not, but for me [Color] is really nice, because I have to calculate the color of _every_ pixel
13:44:13 <bourbaki> Boegel yep
13:46:04 <Boegel> I still find that my specular reflection looks kinda odd... I don't really like Phong I guess :s
13:49:48 <Philippa> anybody know where I should report the space leak/GHC RTS bug I mentioned earlier?
13:55:17 <bourbaki> Boegel why dont you do bdrf lighting?
13:55:57 <bourbaki> Boegel http://www.andrew.cmu.edu/course/16-720/lectures/04shading.pdf
13:56:36 <bourbaki> Boegel http://www.andrew.cmu.edu/course/16-720/lectures/04shading.pdf
13:56:52 <bourbaki> Boegel http://www.cs.colostate.edu/~cs510/Lectures/L05.pdf
13:57:20 <Philippa> np - a bit of RTFM and I know where to submit the report
13:59:21 <Boegel> bourbaki, I'll look into it (brb)
13:59:57 <conleymt> can someone help me with overloading (>) and (<) on a type i made
14:02:31 <conleymt> i'm just a poor noob with a project due in a few hours
14:02:35 <arjanb> what's the problem?
14:03:19 <conleymt> say i want to have    type Manager = (String, Integer)
14:03:33 <Boegel> bourbaki, that looks _really_ interesting, thanks !
14:03:47 <conleymt> and i would like to be able to order them by that Integer component
14:04:09 <bourbaki> Boegel np :)
14:04:40 <bourbaki> Boegel and make sure you can perturbate the normals with your noise texture
14:05:55 <Boegel> bourbaki, I don't understand "perturbate" ...
14:06:17 <bourbaki> Boegel well the texture should be able to modify the normals
14:07:15 <Boegel> why does a texture need to modify the normals ?
14:07:30 * Boegel -> away for 15 min's
14:08:15 <arjanb> conleymt: do you know type classes?
14:09:10 <conleymt> i'm reading about them right now
14:09:29 <conleymt> arjanb i somewhat understand them... don't really know how to do my own thing though
14:10:38 <conleymt> arjanb: so i think the prelude sorts i'm wanting to use require the Ord class
14:11:37 <np_hard> that is an astute observation
14:11:59 <conleymt> heh
14:12:25 <np_hard> kind of hard to sort without defining any order over the set
14:12:57 <conleymt> so what if i want to sort my own type
14:13:11 <conleymt> how do i link it to the Ord class and define > or <
14:13:13 * Boegel = back
14:13:26 <bourbaki> Boegel think of cracks in marble
14:13:36 <bourbaki> Boegel or small fisures in wood
14:13:40 <Boegel> bourbaki, you mean like bump maps and such ?
14:13:47 <bourbaki> Boegel bingo
14:14:12 <Boegel> bourbaki, I'm not planning to write a real extensive raytracer (at least, for my thesis I'm not)
14:14:31 <bourbaki> Boegel but you get that kind of for free with the perlin noise thing
14:14:35 <Boegel> bourbaki, the first things I need to do are reflection, transparency and perlin noise
14:14:57 <Boegel> perlin noise doesn't need to adjust normals, does it ?
14:15:15 <np_hard> instance MyType Ord where
14:15:18 <Boegel> I've read a pretty good article on perlin noise yesterday
14:15:26 <np_hard> and then define the operators required by Ord
14:15:32 <bourbaki> Boegel nope but if youd look at the tex coord and look at the surrounding pixels youd be able to calc a normal
14:15:33 <np_hard> http://www.haskell.org/tutorial/classes.html has info
14:15:43 <bourbaki> Boegel which one?
14:15:50 <np_hard> and that's instance Ord MyType :)
14:16:22 <conleymt> i'm actually at that page right now
14:17:13 <conleymt> i wouldn't have to define all of the operations would i?
14:17:52 <Boegel> bourbaki, http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
14:18:29 <arjanb> no they have default implementations, for Ord you need either (<=) or compare
14:18:44 <np_hard> yep
14:19:00 <bourbaki> Boegel http://mrl.nyu.edu/~perlin/
14:19:01 <conleymt> np_hard: so i tried doing that and it gives an error  "cannot use type synonym in instance head"
14:19:27 <np_hard> since that's all you need for sorting, a partial order
14:20:03 <SyntaxNinja> howdy
14:20:07 <Lor> Oh, the quikwriting guy.
14:20:13 <Lor> Quikwriting is neat.
14:22:32 <Boegel> bourbaki, there are no articles on perlin noise there ? that's just the guy who 'invented' it ?
14:22:47 <Boegel> just meaning without disrespect ;)
14:22:52 <bourbaki> Boegel no idea and yes
14:23:20 <bourbaki> anyway im gonna go to bed now
14:23:45 <bourbaki> nighto
14:23:58 <Boegel> g'night bourbaki 
14:24:02 <EviL_DORK> what's quikwriting?
14:24:19 <Boegel> I'll probaby stick to Phong shading for now, because I have some other stuff to do :)
14:24:24 <Etaoin> Boegel: http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
14:24:41 <Boegel> Etaoin, that is the url I gave to bourbaki  :)
14:25:09 <Boegel> like 7 minutes ago :p
14:25:10 <Etaoin> so I see
14:39:14 * Boegel = dodo
14:39:20 <Boegel> sleep tight everybody
14:39:29 <Lemmih> Bye Boegel.
14:47:45 <dons> moin
14:48:09 <Pseudonym> G'day.
15:01:39 <bik> has anyone ever played with 'curry' ? it's haskell with logic variables
15:01:59 <Pseudonym> No, but it sounds ghastly.
15:02:03 <Pseudonym> :-)
15:02:07 <bik> :( it is
15:02:31 <bik> completely ridiculous
15:02:40 <Pseudonym> There's a lot to be said for logic programming.
15:02:56 <Pseudonym> But there's also a lot to be said for functional programming's simple dataflow.
15:03:39 <bik> my CS course is using curry, and it's a joke because there is approximately zero information on the web about it
15:03:52 <bik> and no book
15:03:59 <Pseudonym> Eek.
15:04:04 <Pseudonym> It's not first year, I hope.
15:04:35 <bik> no, but it's the first time half the class has seen haskell
15:05:35 <bik> on the curry web page it states that the sum total of all curry programs is less than 2 megabytes
15:06:02 <Pseudonym> That's probably no longer true if you're using it for a subject.
15:06:08 <Pseudonym> You may have collectively doubled it.
15:06:15 <bik> hehe
15:07:15 <bik> dunno.. I think I'm screwed. Without a bunch of documentation to read and examples to dig through, or a book to read, I don't even know where to start
15:12:48 <EviL_DORK> bik: I know how you feel
15:12:54 <EviL_DORK> I had to take second semester calculus twice
15:13:10 <EviL_DORK> because I made the mistake of taking "computer-based" calculus
15:13:16 <bik> heh
15:13:48 <bik> aside from everything I just mentioned. I'm working on a midterm, and haven't received a single piece of homework back
15:13:50 <EviL_DORK> where our instructor was rather adept at seeing the calculus concepts in maple
15:14:13 <EviL_DORK> but knew nothing about maple or programming in general to be able to explain to us how to make proper maple instructions on our own
15:14:22 <EviL_DORK> of course
15:15:26 <EviL_DORK> we all had to write maple programs on the tests that he didn't write
15:15:37 <bik> yuck
15:16:06 <EviL_DORK> and that sucked up a whole nasty chunk of our time because at the time maplesoft didn't have much in the way of documentation available online
15:16:30 <EviL_DORK> so everybody basically camped out in the lab all night trying to figure out how it all worked
15:16:46 <bik> yeah, at this point I'm just trying to decide whether or not I should cut my losses, and quit spending the time on it, because it's dominating my work
15:19:10 <EviL_DORK> I hear that
15:21:19 <bik> plus there are very few CS profs at my school, so I have to tell her that she's full of shit, in a nice way
15:22:09 <EviL_DORK> that sucks
15:29:55 <EviL_DORK> hmmm
15:30:19 <EviL_DORK> default xorg fonts seem different than the default xfree86 fonts
15:30:31 <EviL_DORK> not sure which I like better
15:31:27 <stepcut> whoa! my isp has darcs pre-installed :p
15:31:33 <stepcut> version 0.9.11 though..
15:32:28 <arjanb> heh are you your own isp?
15:34:19 <stepcut> no, pair.com
15:34:58 <stepcut> I wonder if they will start offering mysql 4.1 soon
15:35:34 <EviL_DORK> could anybody recommend the best way to run ghc6 on freebsd 5?
15:35:50 <EviL_DORK> it won't compile in 5.x according to the ports
15:35:55 <Pseudonym> From the command line is the usual way.
15:36:43 <EviL_DORK> Pseudonym: hahaha, then maybe you could recommend the best ghc6 to run from the command line
17:42:30 <dons> anyone got a .png of the yi character?
17:47:02 <Igloo> http://urchin.earth.li/~ian/yi.png
17:48:49 <dons> thanks Igloo. Time for a logo, and a yi homepage
17:49:45 * dons fires up the gimp
18:20:44 * Igloo actually tries to use hat on a real program at last
18:21:43 <Igloo> And gets horribly confused
18:31:17 <stepcut> haha
18:36:08 <Igloo> It doesn't help that all the interesting bits of my program get shown as (\..)
18:48:45 <dons> http://www.cse.unsw.edu.au/~dons/yi.html
20:15:11 <cm> freude schoener freiheitsknoten!
20:33:25 <Pseudonym> Tochter aus elysium!
20:33:29 <Pseudonym> Or something.
22:10:51 <Lemmih> Yay! Greencard rocks for high level abstractions.
22:11:47 * Lemmih throws some respect at the authors whoever they are.
22:42:56 <musasabi> morning
22:43:20 <maihem> morning
22:47:57 <Lemmih> G'morning.
22:48:33 <Lemmih> 7:50, press return.
22:49:22 * maihem presses return... nothing happens
22:49:39 <Cale> that's because it has to be 12:50
23:53:30 <maihem> If I am calculating the mean of a list of numbers, I can just do a tail recursive sum, and divide by the length, because although the length function also does tail recursion, the compiler will factor out the recursion, and mix together the calculation of the running totals (sum and length), right?
23:54:11 <maihem> To what extent does placing the definition of such functions as the summation and the length into separate modules inhibit this compile time optimisation?
23:55:00 <musasabi> maihem: I would have done just a single fold manually, but if GHC can do that, very nice.
23:55:25 <maihem> well, I don't know if it can, for sure. but I don't seem to have too shabby performance from it :)
