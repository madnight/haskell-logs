00:00:02 <SyntaxNinja> dons: you and I should form the anti-cpp-enforcement league 
00:00:24 <SyntaxNinja> we can be superheros
00:00:28 <heatsink> you're against cpp enforcement?
00:00:37 <heatsink> yay freedom!
00:03:41 <Lemmih> @seen shapr
00:03:41 <lambdabot> I saw shapr leaving #haskell.se 5 hours 46 minutes 59 seconds ago.
00:05:44 <Janni> Has anyone ever used wxhaskell? I _really_ don't understand its type system...
00:06:57 <Janni> OK, I know how to creat Frames and such by using sample code, but I really don't know how to inherit a Widget.
00:08:59 <Janni> Ah! Just got it!
00:09:06 <Janni> It's always the same.
00:09:27 <Janni> One day long, I try to find some documentation about a topic.
00:09:29 <SyntaxNinja> heatsink: that's the (anti-cpp)-enforcement-league, not the anti-(cpp-enforcement)-league ;)
00:09:47 <Janni> Then I finally decide to ask at #haskell.
00:10:17 <Janni> Then while waiting for an answer, I search around a little bit more, and then I find it!
00:11:55 <SyntaxNinja> Janni: that's because #haskell works on telepathy. the hard-core hackers never type anything on the channel, they just see the questions and beam the documentation references to you
00:12:29 <SyntaxNinja> it would be easier if we all were embedded with RFID tags too
00:12:30 <heatsink> Janni: Maybe it's because you tried something different after you gave up.
00:12:42 <heatsink> Janni: Next time, pretend you already asked, then try searching :)
00:12:54 <Janni> heatsink: You're right.
00:13:52 <Janni> Before asking I tried to search systematically. Then I just searched in a very wild, confused completely hopeless way.
00:14:13 <SyntaxNinja> that's where the RFID tags come in handy
00:47:10 <Lemmih> Time to unicycle!
02:49:35 <musasabi> Did a new release of hs-fltk.. Now it appears to support most of the things I need.
02:50:40 <vegai> yeah, too bad about CPP.
02:51:00 <vegai> the distro I use doesn't want (or can't) provide anything but the latest gcc
02:51:37 <vegai> so I can't build a native package for them. But nice that they're working on it
03:28:50 <bourbaki> moin
03:28:57 <TheHunter> moin
03:29:54 <musasabi> morning
04:20:42 <tnks> morning all.  I was wondering... does anybody use Haskell for UNIX shell scripting?
04:21:32 <tnks> Common shell scripting languages seem so hackish, that I was wondering if there were viable languages with more modern approaches.
04:21:32 <arjanb> http://www.volker-wysk.de/hsshellscript/
04:21:50 <tnks> Python seems common enough, but I already know Haskell.
04:23:09 <tnks> crazy (hsshellscript)
04:23:51 <tnks> Other than something like hsshellscript, what do you guys recommend for scripting?
04:25:07 <Lemmih> What do you require?
04:26:01 <tnks> Well, I'm sure Perl and Python would satisfy what I need to get done.  
04:26:18 <tnks> I'm just wondering if I'm missing out on some other promising solution.
04:26:48 <tnks> Because I don't know either Perl or Python, I have more freedom to start somewhere interesting.
04:27:27 <tnks> I was dealing with Tcl, because of an old expect script I had, and it was just a saddening experience.
04:27:50 <tnks> I'd like to never touch Tcl again.
04:40:13 <mayhem> yop yop
04:41:04 <Victor> hi
04:41:28 <arjanb> hallo
04:42:03 <Victor> i got a lil haskell prob, just starting out
04:42:20 <Victor> isKwadraat :: Int -> Bool
04:42:20 <Victor> isKwadraat n = (ceiling (sqrt n)) == (floor (sqrt n))
04:42:43 <Victor> now, when loading the file Haskell gives me:
04:42:44 <Victor> ERROR "opgave3.hs":49 - Instances of (Floating Int, RealFrac Int) required for definition of is
04:42:44 <Victor> Kwadraat 
04:43:07 <Victor> my guess is i have to import some stuff but the modules i've tried don't solve anything
04:43:43 <Victor> anyone who knows what's up?
04:44:34 <arjanb> @type sqrt
04:44:36 <lambdabot> sqrt :: forall a. (Floating a) => a -> a
04:46:30 <arjanb> so you need to convert n first with  fromInt n
04:47:44 <Victor> ah ok, works now, thanks
05:19:02 <boegel> heya #haskell
05:21:40 <Lemmih> Hey boegel
05:22:45 <boegel> I finally got my marble perlin noise to work :)
05:23:35 <Lemmih> Yay
05:23:46 <boegel> indeed
05:25:04 <boegel> it was quite simple really, but it's like that most of the time :p
05:25:24 * Lemmih throws a shuriken after C++
05:25:48 <boegel> Lemmih, shuriken ?
05:27:30 <Lemmih> A star with sharp edges. Ninja's like to use them.
05:28:09 <Lemmih> http://www.completemartialarts.com/information/weapons/images/shuriken.gif
05:32:41 <boegel> nice, I didn't know how one calls that
05:32:43 <boegel> now I do
05:33:06 * boegel supports the shuriken with a goedendag
05:33:14 <boegel> is that the same in English ?
05:33:52 <boegel> hmm, I guess not
05:34:01 <Lemmih> goedendag?
05:34:20 <boegel> a stick with a black ball on it, ona chain, and with pins on it
05:34:45 <boegel> it's called 'goedendag' in dutch, which means the same as 'hello' :)
05:35:14 <Lemmih> I think it's called a morning star.
05:35:33 <boegel> oh, that's possible :)
05:35:42 <Lemmih> Like this: http://www5.airnet.ne.jp/ruthd/photo/morning-star.JPG ?
05:36:09 <boegel> http://ew2.lysator.liu.se/loth/l/r/lrolfe/morning_star.jpg
05:36:10 <boegel> :)
05:36:18 <boegel> yep
05:40:17 <boegel> it's hard to get a nice texture with the marble thingie
05:48:02 <boegel> I think I'll change the different pictures I have now on my website to 1 big image
05:48:09 <boegel> with 20 spheres in it or so
05:48:27 <boegel> it will take a while to render, but that way I'll get 1 nice image
05:53:55 <boegel> hello Oejet_ 
05:54:30 <Oejet_> Hej boegel.  How's your day?
05:55:02 <boegel> Oejet_, quite good so far... I had some trouble getting out of bed, but hey, what else is new :p
05:55:14 <boegel> hello TheHunter 
05:56:06 <TheHunter> hey boegel 
06:03:01 <TheHunter> boegel: about that code on the paste page: you can write "print something" instead of "putStr $ show something ++ "\n"" and you don't need the "in".
06:04:39 <boegel> TheHunter, I knew about the 'in' already
06:04:49 <boegel> but thanks for the 'print' tip :)
06:04:54 <boegel> I didn't know that
06:05:04 <boegel> TheHunter, it was just a test function btw
06:05:10 <Oejet_> boegel: You can see how print is defined in http://haskell.org/onlinereport/standard-prelude.html
06:06:02 <boegel> okay, thanks ! =)
06:06:41 <TheHunter> also, depending on what you want to do, "replicateM 10 (randomRIO (0,100))" might be more convenient.
06:07:03 <boegel> this marbly thing is pretty neat :)
06:07:17 <boegel> @type Random.replicateM
06:07:18 <lambdabot> bzzt
06:07:27 <boegel> @index replicateM
06:07:28 <lambdabot> Control.Monad,Control.Monad.Cont,Control.Monad.Error,Control.Monad.Identity
06:07:28 <lambdabot> Control.Monad.List,Control.Monad.RWS,Control.Monad.Reader,Control.Monad
06:07:28 <lambdabot> State,Control.Monad.Writer
06:07:46 <boegel> TheHunter, what does it do ?
06:08:04 <TheHunter> @type Control.Monad.replicateM 10 (Random.randomRIO (0,100))
06:08:06 <lambdabot> Control.Monad.replicateM 10 (Random.randomRIO (0,100)) :: forall a.
06:08:06 <lambdabot> 							  (System.Random.Random a, Num a) =>
06:08:06 <lambdabot> 							  IO [a]
06:08:20 <TheHunter> it gives you a random list of length 10 (inside the IO monad)
06:08:31 <boegel> what's the difference with take ?
06:08:53 <boegel> ow,wait, I don't need randomS to then...
06:09:01 <boegel> why is using replicateM better ?
06:09:06 <boegel> more random ? faster ?
06:09:12 <TheHunter> mainly it's shorter.
06:09:21 <TheHunter> i don't know about speed, though.
06:11:15 <boegel> and I don't need a generator either ?
06:11:18 <boegel> that's nice :)
06:13:56 <TheHunter> it generates 100000 numbers in 3 seconds in ghci vs. 2.5 seconds with randomRs.
06:14:36 <boegel> small difference... and I only need 1 list of length (256*3)
06:16:26 <shapr> good evening #haskell!
06:16:27 <Lemmih> Hey shapr.
06:17:00 <TheHunter> hiya shapr 
06:17:17 <boegel> evening ? :)
06:17:20 <boegel> hey shapr
06:17:36 <shapr> I just wrote a short blurb on software patents for a client, anyone feel like suggesting improvements or edits? - http://www.scannedinavian.com/2004-11-17.html
06:21:05 <bringert> shapr: IMO: "Should an equation be patented?" -> "Should an equation be patentable?"
06:21:16 <shapr> This blurb is going out to several thousand EU Project workers in Europe and Latin America, so I want it to look good :-)
06:21:24 <shapr> bringert: excellent point
06:22:03 <bringert> also, if it's an EU project, you might want to try and find a european quote instead of the US constitution one
06:22:11 <shapr> Yah, true.
06:22:25 <shapr> Unsurprisingly, I'm more familiar with the US Constitution.
06:25:13 * shapr reads up on UK Patent Law
06:26:38 <bringert> shouldn't there be some EU patent law?
06:27:36 <shapr> afaik, it's only per-country right now.
06:28:06 <bringert> ah, is that why the EPO can go nuts with software patents?
06:28:13 <Igloo> Even if there was, I'm sure every country would have local laws to make it completely different anyway  :-)
06:28:40 <bringert> otoh, all we're looking for is a nice portal paragraph
06:28:47 <shapr> The EU Parliament is trying to make software patentable EU-wide. I hope they fail.
06:29:16 <boegel> stupid assholes
06:29:21 <bringert> hmm, I thought the parliament voted against sw patents last time
06:29:21 <boegel> why do they want to do that ?
06:29:32 <bringert> but then the council reversed that
06:29:43 <bringert> so now the parliament is going to have to vote again
06:29:49 <Lemmih> boegel: It would work to their advantage.
06:29:56 <boegel> Lemmih, how ?
06:30:16 <tuomov> To "Should an equation be patentable?" an uber-capitalist of course anwers "Yes"
06:30:16 <shapr> It would work to the advantage of Nokia, Ericsson, Sony, Philips, and Alcatel.
06:30:45 <tuomov> iirc in jordania math is patentable
06:30:54 <boegel> because they have some patents on things that are used every day ?
06:31:05 <shapr> Yes.
06:31:18 <Oejet_> "Hvad er godt for onkel Mærsk, er godt for Danmark".
06:31:29 <boegel> they're going to kill themselves again... why can't they think in long terms :s
06:31:50 <bringert> the multinational corporations aren't EU citizens, we are
06:31:51 <tuomov> "MikÃ¤ on hyvÃ¤Ã¤ Nokialle, on hyvÃ¤Ã¤ Suomelle."
06:32:09 <shapr> Microsoft's recent patent noises are even more terrifying. They claim patents on parts of TCP/IP,DNS, and zillions of other basic internet protocols. They also say you won't be in danger from those patents if you agree to their new license. Their new license is directly incompatible with the GPL, of course.
06:32:14 <Oejet_> tuomov: I can understand that. :-)
06:32:22 <tuomov> it's absurd to think that there's such a thing is "good of a nation"
06:32:35 <bringert> the European Paliament answers to us, not the big corporations
06:32:41 <tuomov> yeah, right.
06:33:18 <boegel> bringert, do you really believe that ? if Nokia and Sony and such each put $100.000 on their bank account they'll listen to them,not to us
06:33:19 <shapr> bringert: The turnaround in attitudes of the parliament makes me wonder about that.
06:33:38 <shapr> If you're right, I'm staying in Europe =)
06:33:43 <tuomov> megacorps say we'll take 1M more jobs to india and china, what's the eu parliament gonna do about it?
06:33:51 <tuomov> and anyway, the decisions are ultimately made by the eu commission
06:33:57 <bringert> well, I don't believe that's what they think or how they act. but it's what they should do and what any reasonable constitution says
06:34:05 <shapr> Yes, I agree.
06:34:27 <shapr> I truly hope that software becomes *un*patentable according to EU Law.
06:34:48 <boegel> bringert, not all of them are like that... but the big coorporations will never ask them anything... because it would leak
06:34:53 <bringert> boegel: fortunately the EU still has a bit less institutionalized corruption than the US
06:34:55 <boegel> they just ask enough (poor) countries
06:34:58 <shapr> Otherwise software writing will be as dangerous in the EU as it is in the USA. 
06:35:15 <bringert> boegel: true
06:35:20 <boegel> shapr, that would be just plain stupid
06:35:29 <dash> free markets will destroy capitalism 
06:35:36 <boegel> they should know that acting like the US does isn't a good thing
06:35:38 <bringert> it's not the members of parliament that decide really, it's their parties in the home countries
06:36:28 <tuomov> dash: free markets destroy information capitalism, but I don't think that applies to physical products
06:36:29 <boegel> bringert, I know, but I think those parties are even more unreliable
06:36:33 <bringert> maybe the recent US election results will at least have the positive effect that europe will be less likely to look to the US for everything
06:36:39 <boegel> if I see what kinda shit is going on in our country :s
06:36:50 <boegel> bringert, that might be true
06:36:58 <tuomov> dash: megacorps already own everything, so it is difficult for small companies to enter markets
06:37:08 <shapr> I've been thinking of ways to get toasters and other small household appliaces to play video and audio formats, and then suing those companies for not providing hardware copy protection according to the DMCA.
06:38:00 <bringert> or crack CSS by hand and have yourself declared an illegal circumvention device in the US
06:38:06 <boegel> I can warm my hands on the heat produces by my laptop... that can't be a good thing :)
06:38:08 <shapr> heh
06:38:23 <shapr> Someone actually has a DeCSS tattoo, that's funny :-)
06:38:40 <bringert> boegel: watch out: http://www.theregister.co.uk/2002/11/22/man_burns_penis_with_laptop/
06:38:47 <boegel> what's CSS ? cascading style sheets ?
06:38:58 <shapr> nah, it's the DVD encryption.
06:39:04 <Lemmih> Unicycle time!
06:39:12 <shapr> oohh, unicycle... mmm.
06:39:36 <shapr> oh speaking of which, I want to transcode *all* of my video to theora, has anyone found a good way to do that? transcode is being difficult.
06:40:17 * boegel takes his laptop off his lap, and puts some ice in his pants
06:40:25 <shapr> Is there an open source implementation of the SWF player, that actually works in a browser? Or is there a similar standard? Does SVG do anything like animation?
06:41:11 <dash> there's opensource-ish SWF stuff
06:41:19 <dash> the w3c's standard for stuff like that is SMIL
06:41:27 <shapr> Is there a decent SMIL player?
06:41:28 <dash> and svg has some animation support
06:41:32 <dash> doubt it
06:41:38 <shapr> hm, ozone might know.
06:41:54 <boegel> shapr, you mean the band ? :p
06:42:15 <shapr> dash: oh, you're the one who introduced me to the SVG-> html table converter. That's excellent code humor :-)
06:44:14 <shapr> Where should I be looking for an EU equivalent quote to the US Constitution citation?
06:45:07 <shapr> I think that any patent that I can accidentally trip over when writing my own software is probably not novel enough to have been granted in the first place, but I may be wrong.
06:45:29 <boegel> shapr, here ? : http://www.unizar.es/euroconstitucion/Treaties/Treaty_Const.htm
06:46:29 <shapr> ah, neat
06:53:28 <Victor> @type digitToInt
06:53:29 <lambdabot> bzzt
06:54:34 <boegel> Victor, what do you want to do ?
06:54:50 <Victor> i have a list of strings
06:54:56 <Victor> and i want to convert the strings to numbers
06:55:06 <Victor> map (map digitToInt) (decimalen s)
06:55:20 <Victor> decimalen s gives stuff like ["12", "34"]
06:55:39 <Victor> ERROR - Undefined variable "digitToInt" 
06:55:40 <Victor> :(
06:55:42 <boegel> Victor, you'll have to write it yourself probably
06:55:49 <TheHunter> @index digitToInt
06:55:49 <lambdabot> Data.Char,Char
06:55:50 <boegel> @index digitToInt
06:55:51 <lambdabot> Data.Char,Char
06:55:53 <boegel> :)
06:56:03 <boegel> @type Char.digitToInt
06:56:04 <lambdabot> Char.digitToInt :: Char -> Int
06:56:18 <boegel> @type Char.digitToInt '4'
06:56:20 <lambdabot> Char.digitToInt '4' :: Int
06:56:21 <Victor> thx
06:56:26 <boegel> @eval Char.digitToInt '4'
06:56:27 <lambdabot> <<EM Dynamic -> EM Dynamic>>
06:56:29 <TheHunter> Victor: do you want [[1,2], [3,4]] or [12, 34]?
06:56:32 <boegel> eh ? :)
06:56:38 <Victor> [12, 34]
06:56:48 <Victor> oh i see
06:56:50 <TheHunter> then you can just use read.
06:57:06 <TheHunter> map read (decimalen s)
06:57:25 <Victor> oh ok, cool
06:58:06 <cptchaos> @arr
06:58:06 <lambdabot> Is that a hornpipe in yer pocket, or arr ya just happy ta see me?
06:58:14 <xerox> @yow
06:58:14 <lambdabot> BELA LUGOSI is my co-pilot..
06:59:36 <shapr> @fortune
06:59:37 <lambdabot> "The New York Times is read by the people who run the country.  The
06:59:37 <lambdabot> Washington Post is read by the people who think they run the country. The
06:59:37 <lambdabot> National Enquirer is read by the people who think Elvis is alive and running
06:59:37 <lambdabot> the country ..."
06:59:37 <lambdabot> 		-- Robert J Woodhead
07:00:32 <Victor> hm
07:00:37 <Victor> how's this read thing supposed to work?
07:00:46 <boegel> @index read
07:00:47 <lambdabot> GHC.Read,Prelude,Text.Read
07:00:58 <boegel> @type read
07:00:59 <lambdabot> read :: forall a. (Read a) => String -> a
07:01:07 <boegel> @eval read "12"
07:01:08 <lambdabot> unbound variable: read
07:01:23 <Victor> Prelude> read "12"
07:01:23 <Victor> ERROR - Unresolved overloading
07:01:23 <Victor> *** Type       : Read a => a
07:01:23 <Victor> *** Expression : read "12"
07:01:26 <boegel> Victor, just do this: read "12" :: Double
07:01:46 <boegel> you have to specify what the type of the result should be, I think
07:01:53 <Victor> yeah that works
07:01:57 <Victor> so why the ::?
07:01:58 <Victor> typecast?
07:01:59 <boegel> I meant: read "12" :: Int
07:02:08 <boegel> it says what the type of the result is
07:02:19 <boegel> you can see read if defined forall a
07:02:31 <Victor> ah ok
07:03:17 * boegel managed to answer a question *yay*
07:03:22 * shapr cheers
07:03:27 <Victor> :)
07:03:28 * boegel cheers even louder
07:03:43 <Victor> i'm still not able to put it all together tho..
07:03:50 <Victor> with a map
07:04:04 <Victor> map (read [??]) ["12", "34"]
07:04:24 <TheHunter> map read ["12", "34"] :: [Int]
07:04:41 <Victor> thx
07:04:53 <TheHunter> or map (read :: String -> Int) ["12", "34"].
07:04:59 <TheHunter> but in most cases, it should be enough to just write map read [...]
07:05:16 <TheHunter> if you're not in an repl, that is.
07:05:23 <boegel> TheHunter, repl ?
07:05:25 <Victor> hm i'm not sure i'm supposed to know this at this point in my school's course :p
07:05:50 <boegel> Victor, just use it, and impress your teacher :) make him look up this sutff ;)
07:05:56 <Victor> :)
07:06:06 <TheHunter> repl = read-eval-print-loop, ie. if you're interacting with hugs or ghci.
07:06:14 <boegel> oh, okay
07:06:18 <boegel> thanks
07:07:43 <boegel> hello Nomius mornfall 
07:08:47 <Nomius> hi :)
07:08:54 * shapr boinks
07:09:54 <Lemmih> I hate my unicycle /-: And I hate being too poor to buy another one.
07:11:35 <shapr> What kind of uni do you want? Trials?
07:12:15 <shapr> freestyle?
07:12:45 <boegel> shapr, one with one wheel :p
07:12:45 <Lemmih> I want one with a proper frame. Round borders isn't nice at all.
07:13:06 <shapr> gliding is pretty much impossible with a round-topped fork.
07:13:07 <mornfall> hello boegel, shapr 
07:13:23 <shapr> greetings mornfall 
07:14:38 <shapr> I've been trying to do trials stuff with my mountain uni, it's not working so well.
07:15:14 <shapr> Lemmih: did you grab all the movies I have up?
07:15:15 <Lemmih> mornfall: ... no greeting to me? (-:
07:15:29 <mornfall> greetings all =)
07:15:33 <mornfall> Lemmih included
07:16:07 <Lemmih> shapr: Not the ones in "not.quite.so.cool".
07:16:22 <mornfall> O_O
07:16:28 <mornfall> movies? =)
07:16:34 <shapr> Well, those don't suck... they're just ...
07:16:38 <Lemmih> Greetings mornfall.
07:16:48 <shapr> mornfall: unicycling films... still interested? :-)
07:17:27 <shapr> They're freely available elsewhere, the only advantage of getting them from me is that I have decent bandwidth, and they're all in the one place.
07:17:28 <mornfall> shapr: heh, not really :) i don't have drive space for any films anyway...
07:17:31 <Lemmih> shapr: Are they on your desktop? I noticed that they became unavailable when you went offline.
07:17:44 <shapr> yes, they're on my desktop.
07:17:50 * mornfall downgrades sed
07:18:08 * bringert downgrades self
07:18:19 * shapr downgrades grading
07:18:37 * mornfall upgrades shapr 
07:18:46 * shapr becomes shapr 2.0 !
07:18:51 <bringert> hey, someone stole my mug
07:18:57 * mornfall installs pperl
07:18:59 <shapr> whoa, taht sucks!
07:19:06 * boegel hides the mug
07:19:11 * bringert goes on a mug hunt
07:19:22 <mornfall> bringert: u sure u didn't just forget it somewhere?
07:19:23 <Igloo> Maybe it got downgraded to a cup
07:19:28 <mornfall> heh
07:19:40 * Oejet_ looks innocent.
07:20:00 * Riastradh slurps from an unspecified beverage vessel.
07:20:08 <shapr> I have a kuksa.
07:20:16 * bringert found the mug in another office
07:20:53 <bringert> shapr: many of us have one, but we don't bring it up in polite conversation
07:21:01 <bringert> oh, never mind
07:21:14 <Riastradh> Dare I ask what a 'kuksa' is?
07:21:16 * shapr laughs
07:21:24 * boegel wants to know too
07:21:42 * bringert misread what shapr wrote
07:22:01 <shapr> kuksa - http://www.aitogalleria.com/index.php?manufacturers_id=13&sort=2a&language=en
07:22:45 <boegel> bringert, what did you think shapr said ?
07:23:01 <shapr> kuk == cock in Swedish :-)
07:23:02 <Igloo> &language=en doesn't seem to help much
07:23:43 <bringert> shapr: fyi "kuksa" is "kÃ¥sa" in swedish
07:23:53 <shapr> heh, good point, I hadn't even noticed it was in finnish.
07:24:01 <shapr> neat word
07:24:17 <shapr> I should take a picture of my kÃ¥sa, it's had an interesting life.
07:24:24 <boegel> bringert, you really should have read that twice then before responding like that :)
07:24:44 <shapr> The neat thing about drinking coffee from a wooden cup for several years is that when you run out of coffee, you can put in water and get just about the same caffeine.
07:24:53 <bourbaki> moin
07:24:55 <Riastradh> shapr, the meaning of _that_ sentence could _really_ be butchered if the 'sa' were inadvertently left off...
07:25:08 <Lunar^> @index getArgs
07:25:09 <lambdabot> System.Environment,System
07:25:13 <shapr> salut Lunar^ 
07:25:26 <Igloo> I don't think shapr wants you to butcher his kuksa
07:25:33 <shapr> definitely not!
07:25:47 <shapr> Riastradh: hey, where were you? did you take a sabbatical?
07:25:48 <bourbaki> kuksa?
07:26:02 <boegel> shapr, funny :)
07:26:07 <boegel> heh,bourbaki :)
07:26:23 <bourbaki> boegel got some marbel?
07:26:25 <Riastradh> I was without a machine to run an IRC client on continuously, as it was going to be moved elsewhere during this building's renovation.
07:26:42 <mornfall> Riastradh: moin! :)
07:27:06 <Riastradh> I didn't get around to moving it for a while, and it turned out that it didn't have a new place to be moved, so it ended up just being shifted about five feet onto a desk next to the one it previously sat on.
07:27:28 <shapr> I forget which wood is used in kuksas, but it absorbs some of whatever you put in the cup. The directions say to 'fix' the kuksa by putting some whisky or other alcoholic drink in it the first few times.
07:28:11 <shapr> I put a tiny bit of some whisky in it about five years ago when I got it, and I still occasionally get a taste of that whisky.
07:28:15 <Riastradh> That doesn't make your other drinks, ah, interesting?
07:28:17 <Riastradh> Ah.
07:28:20 <boegel> bourbaki, yeah
07:28:24 <boegel> it works quite well
07:28:31 <boegel> I'll render some stuff in a minute
07:28:48 <boegel> I'm working on wood now, and coming close to it
07:29:24 <bourbaki> boegel that niose thing was a good idea right ?:)
07:29:31 <shapr> Nowadays I only drink coffee out of this kuksa. Also, I've realized that I never again want to put low-quality coffee in this cup. I still get hints of some really low-end coffee I once put in :-(
07:30:07 <boegel> bourbaki, a very good idea :)
07:30:12 <Igloo> What are the advantages of it?
07:30:17 <boegel> it will make my scenes nicer a lot
07:30:21 <boegel> a lot nicer :)
07:30:25 <tuomov> The plural of "kuksa" in the type of sentences as "many kuksas" is "kuksia", and that word does have another meaning...
07:30:27 <boegel> damn Dutch :p
07:30:27 <bourbaki> heh :)
07:30:39 <bourbaki> boegel i thought you were in belgium
07:30:59 <boegel> bourbaki, I am, why :)
07:31:09 <bourbaki> why dutch then?
07:31:19 <boegel> you don't think everyone speaks French here do you ? :)
07:31:43 <mornfall> how does that relate?
07:31:48 * mornfall confuses mildly
07:32:21 <boegel> bourbaki, northern part of Belgium = Dutch, southern part of belgium = French
07:32:23 <shapr> tuomov: heh
07:32:28 <boegel> with a small German part in the east
07:32:29 <shapr> finnish is so cool =)
07:32:50 <mornfall> cool and unintelligible
07:36:19 <boegel> hello dottedmag 
07:37:22 <boegel> bourbaki, making some nice wood is quite hard... but I'll show you what I've got so far
07:37:40 <bourbaki> cool thanks
07:38:12 <boegel> maybe I'll just drop the wood thing, because I can't seem to get it rigth..
07:39:10 <boegel> I'm getting in trouble with my quota on my webaccount though :s
07:40:28 <bringert> boegel: I thought dutch when spoken in belgium was called flemish?
07:43:47 <boegel> bringert, true, but it's very mutch like Dutch
07:44:02 <boegel> just intonation really
07:44:08 <boegel> and some words we never use, but they do
07:44:21 <boegel> they just sounds silly really :p
07:46:31 <bringert> :)
07:46:44 <bringert> more of a dialect then?
07:47:22 <boegel> not really a dialect... flemish has it's own, very different, dialects
07:48:37 <bringert> but all flemish-speaking people understand dutch and v.v.?
07:48:41 * shapr hops randomly
07:48:48 <shapr> the hills are alive!
07:48:53 <bringert> hOps?
07:56:00 <Victor> you guys are the ones using weird words!
07:56:02 <Victor> :p
07:56:15 <boegel> oh here we go :)
07:57:28 <boegel> hello monochrom 
07:57:37 <monochrom> hello
08:19:31 <boegel> heya danja 
08:21:30 <bourbaki> boegel whats up with my pics?
08:21:39 <boegel> bourbaki, sorry it takes so long :)
08:22:00 <boegel> I'm trying to produce nice pics, and that takes a while, playing with the settings...
08:22:24 <boegel> I have a wood texture online already...
08:22:27 <boegel> check my website
08:22:30 <bourbaki> url?
08:24:39 <boegel> http://studwww.ugent.be/~kehoste
08:26:35 <bourbaki> boegel you know that wooden ball in minorityreport?
08:27:21 <boegel> euh... I've see, the movie
08:27:28 <boegel> s/see,/seen
08:27:45 <boegel> bourbaki, keep refreshing, I'll update it every few minutes
08:29:42 <Lemmih> What would be a good name for a ClanLib binding?
08:30:22 <boegel> bourbaki, what about the wooden bal in minority report ?
08:31:56 <bourbaki> you know it?
08:32:09 <boegel> we'll no
08:32:14 <boegel> but I've seen the movie
08:32:19 <boegel> is there a wooden ball in it ?
08:32:29 <boegel> it's been a long time since I sawit
08:34:36 <boegel> bourbaki, the ball where the name of the criminal is carved in ?
08:34:41 <boegel> I remember it vagely
08:34:43 <bourbaki> yep
08:34:53 <bourbaki> that one looks cool you should render that
08:36:21 <boegel> hmm :)
08:36:30 <boegel> then I'll have to find a picture of it
08:36:47 <boegel> I know it doesn't look much like wood :)
08:37:45 <musasabi> Is anyone working on local type class instances for GHC ?
08:39:12 <boegel> bourbaki, refresh and check out marble
08:41:12 <bourbaki> boegel but its ... its ... its PINK!
08:43:09 <boegel> :)
08:43:21 <boegel> pink marble, it exists, doesn't it ?
08:43:47 <earthy> yup
08:43:49 <earthy> it does
08:44:33 <earthy> but it's nowhere *near* that color :)
08:45:11 <boegel> earthy, those are just tests :p
08:45:32 <boegel> earthy, it's much lighter pink, am I right ?
08:45:35 <marcot> Good Afternoon.
08:45:45 <earthy> yeah
08:46:05 <earthy> actually, the veining is pink in pink marble, and the base color is white or cream
08:46:10 <earthy> IIRC
08:46:12 <bourbaki> :)
08:46:31 <bourbaki> pink hurts my eyes
08:46:37 <marcot> Can I do something like data Valor = Vb Bool | Vi Int; instance Eq Valor => Eq Valor2, where valor2 is another data type?
08:46:39 <boegel> :)
08:46:47 <bourbaki> and soon ill have to go for cocktails again :) today is all day happy hous
08:46:49 <bourbaki> hour
08:46:54 <boegel> hmm, I think I can achieve that effect... give me a while ;)
08:46:55 <marcot> I mean, can I use in the context something that doesn't have any variable, like Eq a
08:46:56 <marcot> ?
08:47:41 <bourbaki> boegel make a minorityreport sphere ! :)
08:49:14 <Lemmih> marcot: Yes.
08:49:44 <bourbaki> damn i just ate a chinease noodle dish and an arabian wrap and something in the caffeteria and am still hungry ...
08:50:32 <dash> oh no! cultural war in your stomach
08:51:05 <bourbaki> boegel you really should use the noise to effect the normals also
08:51:15 <Lemmih> marcot: With the right compiler flag to GHC.
08:51:29 <bourbaki> dash thats it! thats why the food is gone after some seconds all the time :)
08:52:23 <Oejet_> Lemmih, did you just send a message to me?
08:52:41 <Lemmih> Not to my knowledge.
08:53:12 <boegel> bourbaki, yes I could do that...
08:53:21 <boegel> to get a bumpy effect
08:53:37 <boegel> bourbaki, give me a pic of the wooden in in minorityreport, then I can atleast try ;)
08:53:43 <bourbaki> boegel thats what i told you like a week ago already :) that perturbation of normals
08:54:01 <boegel> bourbaki, I just got perlin noise working like it should :)
08:54:06 <bourbaki> boegel heh i dont have that movie i just saw it once on tv and not till the end also
08:54:20 <boegel> and I want to get the code finished this week
08:54:23 <boegel> if possible
08:54:28 <boegel> so the normals will have to wait :)
08:54:32 <Oejet_> Lemmih: Ok, I'm just compiling a GHC snapshot and during "ar" Kopete gets a bit out of sync with itself because of disk IO.
08:54:38 <boegel> first reflection/refraction/transparency
08:54:50 <bourbaki> boegel thats all the same
08:55:07 <bourbaki> i thought you had reflection alreay
08:55:09 <boegel> reflection isn't the same as refraction
08:55:16 <boegel> Nomius, I have specular lighting :)
08:55:20 <bourbaki> no its all normal based stuff
08:55:30 <boegel> relfection is seeing one ball being reflected in the other one
08:55:33 <boegel> I don't have that yet
08:55:39 <bourbaki> and adjusting the normal accorting to the noise is easy
08:56:16 <boegel> I know :)
08:56:41 <boegel> but then I have to adjust my normal stuff, like I had to adjust my material stuff
08:56:51 <boegel> and I'll wait with that until I have some extra time
08:56:58 <boegel> I know you want to see the effect :p
08:56:59 <bourbaki> ok
08:57:07 <bourbaki> yes *sniff*
08:57:19 <boegel> now I have a lot of time, but next month I won't
08:57:30 <Victor`> gtg, thx for the help
08:57:36 <boegel> I'll have a huge project then, which we have to finish before January
08:57:54 <bourbaki> what kind?
08:59:03 <boegel> software development and object-oriented analysis
08:59:13 <boegel> in J2EE
08:59:41 <bourbaki> analize what?
09:00:05 <boegel> analize a big application
09:00:14 <boegel> bourbaki, refresh and check out the licking fire effect
09:00:16 <bourbaki> as in profile it?
09:00:18 <monochrom> or a big enterprise problem
09:00:52 <boegel> monochrom, you're right
09:00:57 <bourbaki> i like the lava ball
09:01:05 <monochrom> object-oriented analysis means study the requirement and come up with an OO architecture or model that solves the problem.
09:01:06 <bourbaki> whats an enterprise problem?
09:01:12 <bourbaki> something like a broken warp kernel?
09:01:18 <boegel> bourbaki, like a bank or something
09:01:23 <bourbaki> especially the green one
09:01:34 <dash> monochrom:  Tee hee.
09:01:36 <boegel> bourbaki, neat effect huh :)
09:01:39 <bourbaki> and what can you analyze there?
09:01:52 <monochrom> an enterprise problem/requirement may be "our company needs to computerize our customer relations"
09:01:52 <dash> bourbaki: warp kernel? are you talking about OS/2
09:02:06 <bourbaki> no aber star trek enterprise
09:02:08 <boegel> how you will solve the problems that occur, and how you will provide the needed functionality in a efficient way
09:02:32 <bourbaki> thats something invented by business guys
09:02:38 <bourbaki> and i dont like that shit they do
09:03:04 <bourbaki> a project plan is up to date until you finish it ;)
09:03:37 <boegel> bourbaki, any idea's for use of the turbulence function (like the lava ball ?)
09:04:45 <bourbaki> boegel hm
09:13:22 * shapr bounces happily
09:13:39 <shapr> Seems my client is happy with the article so far, I may get to write more =)
09:13:49 <boegel> *yaay*
09:14:19 <shapr> Being paid to write a series of articles on Open Source in Europe should be fun. I already have two in mind, one for e-education, and one for e-government.
09:15:52 <boegel> shapr, how do you get these assignments ?
09:16:03 <boegel> bourbaki, found a pic yet ? :p
09:16:20 <bourbaki> boegel no as i said i dont have the movie :)
09:17:03 <shapr> Same way I got this job in the first place, someone else was supposed to do this, and just didn't do it before the deadline. So they ask around for someone to save their butt.
09:17:17 <boegel> bourbaki, you can look for it on the net :p
09:17:36 <boegel> shapr, the butt-saver !
09:17:44 <bourbaki> boegel you need transparency first anway
09:18:43 <boegel> bourbaki, I could give it a try :p
09:18:49 <boegel> is the ball transparant ?
09:19:06 <bourbaki> boegel yes and under the transparent thing its wooden
09:19:18 <boegel> ows, it's covered by glass ?
09:19:25 <boegel> that's on idea !
09:19:58 <boegel> check this out: http://www.noisemachine.com/talk1/21.html
09:20:07 <boegel> a planet with an atmosphere :)
09:20:46 <bourbaki> :)
09:21:28 <boegel> but that's not that easy for me...
09:21:38 <boegel> I would have to write an extra function orso...
09:21:47 <boegel> because that's double shading
09:22:02 <bourbaki> you could make it two objects
09:22:13 <bourbaki> so the one also casts shadows on the other
09:22:14 <boegel> and the outer one transparant :)
09:22:22 <boegel> but I don't have that yet
09:22:32 <boegel> damn, and I woudl have to adjust some stuff for that
09:22:44 <boegel> because that's not possible now, only the outer one will be visible...
09:24:06 <ows> boegel, you really like my nick ;)
09:24:28 <boegel> heh :)
09:24:45 <boegel> you should choose another one then ;)
09:25:16 <boegel> I mean to say 'ow sorry', but then I realize 'sorry' is too long ;)
09:27:02 <ows> no, it's not necessary :)
09:27:13 <boegel> ;)
09:30:26 <ows> are you a CS student?
09:30:59 <boegel> bourbaki, new update
09:31:03 <boegel> I have to go no, food
09:31:23 <bourbaki> kk :)
09:31:58 <ows> Hi bourbaki, how is it going in germany?
09:32:22 <bourbaki> heh good i think
09:32:31 <bourbaki> though im most of the time inside ;)
09:33:23 <ows> do you have hard work (projects) to do this academica year?
09:33:28 <ows> *academic
09:33:31 <bourbaki> nope
09:33:42 <bourbaki> but i make my own work :)
09:33:46 <bourbaki> that is i read papers and such
09:33:55 <bourbaki> and tinker on toy projects
09:33:57 <ows> wow, so you can pass rest of your time on your future thesis work
09:34:03 <bourbaki> and soon im working on a commercial game again
09:34:29 <ows> so luck..
09:34:47 <ows> are you in a cog. science or compt. science coursE?
09:34:57 <bourbaki> well ive also started to work on my thesis like a year at least ago :)
09:35:03 <bourbaki> cog sci
09:35:23 <ows> with application on informatics, right?
09:37:38 <bourbaki> in general?
09:37:40 <ows> what classes do you have this semester?
09:37:49 <bourbaki> we have CS courses crappy ones though
09:37:57 <bourbaki> just neuroinformatics
09:38:09 <bourbaki> autonomous robots
09:38:14 <bourbaki> and machine learning
09:38:42 <ows> well.. it's like an AI course
09:39:23 <bourbaki> its "advanced" topics
09:39:55 <ows> what are you gonna learn in ML?
09:40:17 <ows> SVM?
09:40:31 <bourbaki> heh no :)
09:40:37 <bourbaki> thats what the "" where for
09:40:46 <bourbaki> SVM is on the neuroinfromatics course
09:40:55 <bourbaki> computational learning theroy ie
09:42:07 <ows> k :)
09:45:48 <boegel> ows, what do you mean by CS ? Computer Study ? (just a guess)
09:47:12 <bourbaki> computer science
09:47:15 <kosmikus> boegel: ?
09:47:17 <boegel> ah
09:47:53 <boegel> kosmikus, I was thinking something Computer Graphics, because we're talking about raytracing all the time
09:48:01 <kosmikus> sorry, I assumed it was a joke -- guess I cannot imagine someone not knowing that abbreviation
09:48:22 <boegel> kosmikus, I'm not used to chatting in English :)
09:48:28 <boegel> that's probably why
09:48:58 <boegel> ows, yes I am
09:49:16 <boegel> I study CS (:p) at the uni in Ghent, Belgium
09:50:36 <boegel> kosmikus, now I think of it, it was pretty stupid not to know what CS stands for :p
09:50:52 <boegel> bourbaki, how do you like the images (overal) ?
09:51:19 <kosmikus> boegel: never mind
09:51:26 <kosmikus> boegel: btw, do you know Hannes Verlinde?
09:51:42 <bourbaki> boegel quite good but you need to switch on the lighting
09:52:36 <boegel> kosmikus, I do :)
09:52:40 <boegel> he helps me with my thesis
09:53:11 <boegel> kosmikus, http://allserv.ugent.be/%7Ehverlind/jpg/krawietel.jpg :)
09:53:19 <boegel> http://allserv.ugent.be/%7Ehverlind/
09:53:51 <boegel> kosmikus, how do you know him ?
09:53:58 <kosmikus> say hello to him from me, then (we met at afp)
09:54:18 <boegel> bourbaki, I'm doing that right now... but I have to go in 10mins
09:54:25 <boegel> kosmikus, say hello from who ? :)
09:54:34 <boegel> and what afp ? is that that thing in Spain ?
09:54:44 <kosmikus> no, it was in estonia
09:54:56 <boegel> oh, yeah, you can see it on his website
09:55:03 * shapr cackles happily
09:55:29 <boegel> those trips are really great when you're doing a PhD
09:55:56 <kosmikus> boegel: I leave it as a simple exercise to find out who I am -- hint: try www.kosmikus.org ;)
09:57:03 <boegel> I hope I won't forget ;)
09:57:13 <boegel> because I won't see him until next week
09:57:42 <boegel> because there's some conference on formal methods tomorrow and friday in Ghent
09:57:47 <boegel> so he doesn't have time to see me
09:59:51 <boegel> bourbaki, I'll rerender all 8 scenes with 1 light point, and update the page tonight
09:59:54 * kosmikus is away role-playing ...
10:00:07 <bourbaki> boegel k
10:00:49 <boegel> I have to go now, so bye !
10:00:54 <bourbaki> bye
10:05:08 <mitchkov> anyone knows how to convert a Double to an Integer ? I did it with (read . show) [Double] but the compiler throws an error: *** Exception: Prelude.read: no parse
10:05:51 <ibid> you need to specify which type you want to read to
10:06:05 <mitchkov> how do ya do that ?
10:06:09 <ibid> though i'm sure there is a more direct way to do that :)
10:06:32 <ibid> mitchkov: ((read . show) [Double]) :: Integer, for example might work
10:06:42 <ibid> no, actually
10:06:56 <ibid> mitchkov: ((read . show) 4.0) :: Integer, for example might work
10:07:13 <ibid> doesn't
10:07:17 <mitchkov> k, i'll try that, thx ibid
10:07:19 <ibid> but that's the basic idea
10:07:24 <ibid> blah
10:07:25 <ibid> sorry
10:07:29 <ibid> the problem isn't there
10:07:45 <ibid> of course Integer-read cannot read a Double-show
10:08:08 <boegel> mitchkov, try fromIntegral
10:08:14 <mitchkov> again :)
10:08:18 <boegel> @index fromIntegral
10:08:18 <lambdabot> GHC.Real,Prelude
10:08:29 <boegel> oh no
10:08:30 <boegel> wait :s
10:08:49 <boegel> that for parsing Int to Double (or Float or whatever)
10:08:53 <boegel> my mistake :)
10:08:54 <mitchkov> jup
10:08:59 <ibid> not parsing, really :)
10:09:13 <boegel> btw, mitchkov bourbaki asked me if I knew Hannes Verlinde :)
10:09:22 <boegel> ibid, converting, whatever
10:09:28 <mitchkov> never heard of boegel :)
10:09:45 <bourbaki> hannes verlinde?
10:10:55 <ibid> mitchkov: use these:
10:10:56 <ibid> Prelude> [truncate 4.7, round 4.7, floor 4.7, ceiling 4.7]
10:10:56 <ibid> [4,5,4,5]
10:11:06 <ibid> depending on what semantics you want :)
10:11:22 <mitchkov> thx ibid
10:12:02 <boegel> oh, no it wasn't bourbaki, it was kosmikus 
10:12:14 <boegel> anyway, really have to go now
10:12:15 <boegel> bye
10:12:44 <bourbaki> bye
10:13:29 <boegel> bourbaki, refresh for light marble with lights ;)
10:13:32 <boegel> bye ! ;)
10:13:36 <bourbaki> no
10:13:38 <bourbaki> url again
10:13:48 <boegel> http://studwww.ugent.be/~kehoste
10:13:52 <bourbaki> thx
10:14:07 <bourbaki> much better
10:36:52 * shapr sings cheerfully
10:39:16 <shapr> So, I really like SILCnet, but the place is pretty dull. Not many people using it.
10:39:31 <vegai> hmm!
10:39:45 <vegai> shapr: chicken&egg...
10:39:48 <shapr> And the existing clients don't support enough of the standard to do the really exciting stuff.
10:39:49 <shapr> yup
10:40:18 <shapr> Even so, I think I'll start a haskell channel there.
10:41:22 <shapr> SILC defaults to UTF-8 and encrypted, so that's two ways it is an immediate improvement over IRC.
10:41:58 <vegai> shapr: I'll join ya
10:42:11 <vegai> once I get this thing installed...
10:42:34 <shapr> cool :-)
11:27:22 <shapr> lesson learned: at -16Â°C soft inviting grass feels just like concrete to knees.
11:30:07 <CosmicRay> heh
11:33:21 <Etaoin> would "indention as syntax is optional in haskell" be a true statement?
11:34:42 <musasabi> well you can use {};...
11:35:03 <musasabi> do { foo; bar; baz ; ... }
11:35:08 <Etaoin> it's optional if you choose to use no newlines, right?
11:35:15 <Etaoin> which kind of makes it a false statement
11:35:17 <Etaoin> ?
11:38:27 <Janni> Hi
11:38:40 <Etaoin> hi
11:40:54 <dash> well if you use semicolons you don't need indentation
11:41:02 <dash> so yeah, it's basically optional
12:06:56 <shapr> At -17Â°C, I require more than just a t-shirt under my sweater.
12:10:05 * shapr waits for his toes to thaw before returning to unicycling.
12:10:49 <stepcut> heh
12:11:01 * stepcut goes to lunch
12:11:06 <earthy> is it that cold?
12:11:07 <earthy> wow.
12:15:31 <Janni> Using wxhaskell, I'm trying to implement a Loading-Dialog using the "on idle" event. During a short period of time the file should be loaded partly, where loading means parsing, executing OpenGL commands, so it's not too easy to seperate this task into small steps.
12:16:25 <Janni> Can I somehow make a "command" being executed partly?
12:16:51 <Janni> s/being/be
12:17:19 <shapr> yah, I think you can
12:17:34 <shapr> can't you thread yield calls through any monadic calls?
12:18:00 <Janni> I read something about wxhaskell not supporting threads
12:18:17 <Janni> Err, wait...
12:19:11 <Janni> I think I don't have to use wxwindows' thread facility (which is not supported by wxhaskell)
12:19:24 <Janni> I'll use Haskell's...
12:19:40 <Janni> Sometimes I'm quite... dumb *sigh*
12:19:55 <kristnjov> is there any cool mathematical principle to use if i want to count the amount of prime numbers <= 1 million?
12:20:26 <Janni> A "cool" one?
12:20:50 * Janni has no clue (though he should be having)
12:20:54 <kristnjov> fast one ...
12:20:59 <musasabi> kristnjov: that is so small that a basic sieve should do.
12:21:14 <kristnjov> sieve?
12:21:23 <shapr> erastothenes(?) sieve
12:21:28 <musasabi> yes.
12:22:07 <Janni> kristnjov: Though this one, you should use _only_ with lazy languages...
12:22:12 <tromp> 78498 primes found in 0.003sec
12:22:49 <musasabi> http://youzen.b2.fi/~musasabi/alku.hs
12:22:54 <kristnjov> cool
12:22:59 <Oejet_> kristnjov: There is some approximate function f(n) for the number of primes below n.  Something with the logarithm.
12:23:12 <tromp> n/ln(n)
12:23:14 <kristnjov> Oejet_, yeah i figure there is such a thing
12:23:16 <musasabi> that is the simplest algo. then you can do better.
12:23:58 <tromp> http://youzen.b2.fi/~musasabi/alku.hs is not really a sieve though
12:24:14 <tromp> it does trial division by alrd found primes
12:24:26 <tromp> rather than casting out multiples of alrd found primes
12:25:04 <tromp> the latter is somewhat more difficult in haskell
12:29:47 <Janni> Anybody knows a good documentation resource for using threads with ghc?
12:30:32 <tromp> no haskell sieve yet at http://primes.utm.edu/links/programs/sieves/Eratosthenes/
12:30:34 <Janni> Of course I'm still searching, but experience taught me, to ask _before_ searching too long by myself
12:36:55 <Oejet_> Janni: I found this educational (after taking a course on concurrent programming): http://haskell.org/ghc/docs/papers/concurrent-haskell.ps.gz
12:37:50 <Janni> Thx.
13:15:20 <Janni> Hmm. "Haskell concurrency does not work correctly (yet) with a GUI event loop". Dang!
13:15:35 <DeezNuts> ohhh
13:15:41 <DeezNuts> and i was just about to come in and ask if haskell still sucks
13:15:55 <DeezNuts> but janni answered it before i asked!
13:15:56 <DeezNuts> ohhh
13:16:06 <Janni> It's not Haskell but wxHaskell which sucks in this case...
13:16:15 <DeezNuts> awww, too bad, i wanted to knock haskell
13:16:36 <vegai> from ibm.com, even
13:16:50 <Janni> DeezNuts: No reason for such actions...
13:17:21 <dash> as we say in #python
13:17:23 <DeezNuts> vegai: how keen
13:17:26 <dash> "wx" stands for "do not use this software"
13:17:31 <DeezNuts> lol
13:19:44 <DeezNuts> Janni: who says i need reason when i can have... NONSENSE!
13:41:00 <Jan_w> DeezNuts: haskell doesn't suck, /me enjoys it greatly
13:42:08 <vegai> haskell doesn't suck, it's a programming language!
13:42:28 <dash> what
13:42:35 <dash> you mean haskell _does_ suck, it's a programming language
13:43:36 * xerox missed it
13:55:47 <boegel> oh, is bourbaki out already ?
13:55:52 <boegel> @seen bourbaki
13:55:52 <lambdabot> I saw bourbaki leaving #haskell 1 hour 22 minutes 58 seconds ago.
13:56:24 <boegel> damn, I rendered the images he wanted...
13:56:37 <boegel> and I managed to improve my wood texture ! *yaay*
13:56:42 <boegel> it actually looks like wood now :)
13:57:11 <jyp> Lemme guess... doing ray tracing with haskell?
13:57:23 <boegel> jyp, yes :)
13:57:25 <boegel> why ?
13:57:40 <jyp> It's a standard application ;)
13:57:51 <boegel> jyp, i'm doing it for my thesis :Ã 
13:58:02 <jyp> good ;)
13:58:12 <boegel> want to see some of my results ?
13:58:32 <boegel> I guess not then :s
13:59:29 <boegel> oh, there you are :)
13:59:42 <boegel> I'll ask again: want to see some of my results ?
13:59:52 <jyp> Sure
14:00:01 <boegel> http://studwww.ugent.be/~kehoste
14:00:09 <boegel> feel free to comment on the images :)
14:00:50 <jyp> Neat
14:01:15 <jyp> Maybe you should add a "bump map" 
14:01:16 <boegel> how do you like the wood texture ? does it look like wood ?
14:01:37 <boegel> jyp, I know, but I should implement reflection, refraction and transparency first
14:01:51 <jyp> of course ;)
14:01:59 <boegel> I'll see if I'll implement bump mapping with perlin noise... I don't know if I'l have the time
14:02:21 <boegel> any comments on stuff I could improve?
14:03:14 <jyp> Maybe the noise frequency is too high for some textures
14:03:24 <boegel> which ones jyp?
14:03:55 <jyp> I say marble & wood
14:04:17 <jyp> But it's largely a matter of taste
14:04:33 <boegel> marble should have high distortion, else I just get stripes.. you could be right on the wood texture though.. lemme try :)
14:06:15 <boegel> jyp, why do you say the noise is too high on marble ?
14:06:46 <jyp> On 2nd thought, it's no really too high
14:06:50 <DeezNuts> dash: lol!
14:07:01 <jyp> It just feels like the ball is 5 feet wide
14:07:21 <jyp> And you look at it from afar
14:07:55 <Janni> Bye
14:08:16 <DeezNuts> jyp: thats how i feel all the time
14:08:31 <boegel> jyp, if I would allow lower noise, it would look like marble anymore...
14:08:42 <boegel> you were right on the wood noise though, I'm updating the image now...
14:11:13 <boegel> jyp, updated ! resfresh too see the result
14:12:22 <boegel> how can I count the number of lines of code in an lhs file ? is there a command I can use in unix (because every line starts with '>' )
14:12:33 <segphault> wc -l
14:12:49 <segphault> if you just want to get the ones with '>', you can do: cat file | grep -v ">" | wc -l
14:12:54 <boegel> segphault, that gives me the total number of lines...
14:13:02 <boegel> oh, okay :)
14:13:03 <boegel> thx !
14:13:18 <segphault> oops
14:13:21 <jyp> make it cat file | grep -v "^>" | wc -l
14:13:24 <segphault> without the '-v'
14:13:42 <boegel> segphault, your first version does the job...
14:14:00 <segphault> the -v paramter will give you all the lines without the grep pattern in it
14:14:17 <boegel> oh okay :)
14:14:30 <segphault> jyps suggestion that you use "^>" is a good one, because my version will give you all lines that have ">" anywhere in them
14:14:31 <boegel> so : cat file | grep "^>" | wc -l
14:14:38 <segphault> right
14:14:45 <boegel> and ^> means > in the front...
14:14:53 <segphault> yeah, like a normal regexp
14:15:19 <boegel> wauw, my raytracer is only 306 lines of code :)
14:15:22 <segphault> if you are using an archaic unix distribution, you might need to use grep -e in order to do that
14:15:25 <boegel> and I have to merge some stuff...
14:15:34 <DeezNuts> will learning haskell make me a good analytic philosopher?!
14:15:52 <dash> DeezNuts: it didn't make me a good analytic philosopher
14:16:00 <jyp> DeezNuts: It can't hurt anyhow ;)
14:16:00 <dash> but you are probably smarter than me 
14:16:41 <boegel> hello monochrom 
14:17:14 <segphault> DeezNuts: if philosophy is your interest, this would be a better investment of time: http://users.compaqnet.be/cn111132/wittgenstein/tractatus_logico_philosophicus.htm
14:17:42 <jyp> Is everyone here in belgium, or what ? ;)
14:17:53 <segphault> DeezNuts: and prolog would probably be a better programming language for a philosopher
14:17:55 <Lunar^> Is there any wxHaskellers on IRC ?
14:18:08 <dash> haha wittgenstein
14:18:27 <boegel> jyp, I am
14:19:05 <jyp> I'm too, and now that .be again... Is it new earth center of gravity ;)
14:20:09 <segphault> I need to figure out a good way to deal with namespace issues in haskell
14:20:26 <boegel> jyp, where are you from ?
14:20:49 <jyp> Virton orginally, now in Brussels
14:21:04 <boegel> so you speak French ?
14:21:18 <jyp> boegel: I sure do
14:21:23 <Lunar^> segphault: import qualified ?
14:21:55 <boegel> jyp, how old are you ? are you still in school ? uni ?
14:22:02 <jyp> segphault: import qualifed!
14:22:09 <segphault> in ocaml, rather than making my functions have names like get_all_x and get_all_y I would make modules with structs. I would make an 'All' module nested in the 'Get' module, and then when I wanted to call the functions I could do Get.All.x. The neat thing is, I could define function x in Get and Get.All, and have it do different things in both.
14:22:24 <DeezNuts> segphault: I believe ludwig has since renounced that tractatus
14:22:24 <Lunar^> segphault: That's import qualified
14:22:31 <jyp> boegel: 25, graduated in 2000
14:22:35 <segphault> Lunar^: thx
14:22:38 <boegel> graduated in ?
14:22:55 <DeezNuts> segphault: read this: http://www.amazon.com/exec/obidos/tg/feature/-/539219/ref%3Ded%5Fwui%5Fbb%5Frees/104-0718321-4751937
14:23:09 <DeezNuts> segphault: just because its funny
14:23:14 <Etaoin> segphault: also import qualified x as shortername is nice
14:23:15 <segphault> DeezNuts: the Tractatus was a thought experiment. he said it was never meant to be taken literally, but he didnt necessarily denounce it. it still has incredible amount of value
14:23:32 <segphault> Etaoin: neat trick. kind of pythonic
14:23:34 <jyp> boegel: CS
14:23:40 <boegel> jyp, where ?
14:24:04 <DeezNuts> segphault: yeah... i love teasing my friends cuz i can always tell them 'im just kidding' afterwards ;)
14:24:08 <jyp> boegel: Free University of Brussels
14:24:15 <boegel> jyp, nice :)
14:24:18 <boegel> I'm in Ghent
14:24:44 <jyp> boegel: Your URL gave that up ;)
14:25:11 <boegel> oh, right :)
14:25:18 <boegel> hello psi 
14:26:15 <DeezNuts> segphault: tell me when your done reading the link
14:27:09 <psi> boegel: hi
14:27:15 * DeezNuts is curious, do you still need to learn category theory to implement IO in haskell?
14:27:24 <DeezNuts> oops im sorry
14:27:29 * DeezNuts is curious, do you still need to learn category theory to *use* IO in haskell?
14:27:32 <jyp> DeezNuts: nope ;)
14:27:55 <DeezNuts> jyp: it has since changed?! no more monadic macabre?
14:28:30 <stepcut> DeezNuts: still monadic madness, but better tutorials now :)
14:28:30 <jyp> That monadic thingie is really intuitive
14:28:35 <bringert> DeezNuts: you need to *use* monads, not understand them
14:28:37 <jyp> imho
14:28:57 <DeezNuts> yeah but i *hate* using things i dont understand
14:29:16 <jyp> But you *do* understand it :)
14:29:16 <bringert> I take it you don't have a girlfriend?
14:29:30 <bringert> ok, sorry, that was bad
14:30:21 <boegel> bringert, that was genius :)
14:30:35 * bringert has had a few beers
14:30:40 <DeezNuts> bringert: that was beautiful
14:30:51 * boegel likes bringert when he had some beers :)
14:31:04 <DeezNuts> yeah, since i hate using things i dont i understand i just fuck'em
14:31:34 <DeezNuts> ok maybe im offending people now lol ill stop... i need s33p
14:31:37 <DeezNuts> sl33p too
14:32:06 <boegel> sleep tight DeezNuts 
14:32:14 <DeezNuts> im still at work though
14:32:24 <DeezNuts> ... i wonder if i can make a cube hamock
14:32:25 <boegel> so just sleep at work :)
14:32:38 <DeezNuts> like they do in post-industrial china?
14:32:41 <arjanb> DeezNuts: try reading http://www.nomaware.com/monads/html/
14:32:49 <DeezNuts> arjanb: thanks!
14:37:29 <boegel> arjanb, bookmarked !
14:37:44 <monochrom> I think post-industrial china hasn't happened yet.
14:39:26 <segphault> DeezNuts: I read it. Magnificent!
14:41:41 <bringert> oh yeah: http://kwiki.ffii.org/PolandDoesNotSupportCouncilVersionEn
14:42:07 * shapr cheers for the ffii
14:42:19 <bringert> looks like the EP is on our side again
14:42:31 <shapr> DeezNuts: y0 ltns
14:43:21 <boegel> shapr, check out my wood texture on my website, and give me some grades on it ;)
14:43:26 <jyp> Too bad the EP has little to say.
14:43:46 <jyp> No final cut.
14:44:10 <shapr> At least the decision was put off until after the new EU countries got in...
14:44:31 <shapr> The new countries had made it clear they were against it before they were allowed to vote on it.
14:44:59 <jyp> Good
14:45:04 <shapr> bringert: I think I have to quote your monadic girlfriend comment.
14:45:07 <ibid> what EP has to do with that?
14:45:44 <bringert> shapr: hmm, it's hardly politically correct
14:46:08 <shapr> bringert: funny things often aren't
14:46:15 <monochrom> monadic girlfriend?!
14:46:32 <ibid> that poland thing affects the european council, not the european parliament
14:46:39 <shapr> monochrom: are you into bindage?
14:46:48 <monochrom> No. What is bindage?
14:46:52 <jyp> rofl
14:46:53 <ibid> jyp: ep has enough to say, it can bring it down
14:47:04 <ibid> the problem is that not enough of the meps want to
14:47:05 <shapr> >>= girlfriend
14:47:06 <bringert> don't do UnsafeIO
14:47:45 <shapr> I haven't even had beer :-)
14:47:53 <shapr> jyp: hey, are you coming to the next EuroHaskell in the Summer?
14:47:59 <ibid> there are more ways to get drunk than beer ;)
14:48:04 <bringert> speaking of IO: http://andersca.org/gallery/eurohaskell/p1010060
14:48:15 <shapr> speaking of eurohaskell...
14:48:15 <monochrom> ">>= girlfriend"  that's sick.
14:48:19 <jyp> Where's it held?
14:48:28 <shapr> jyp: Gothenburg, Sweden
14:48:31 <dash> monochrom: but safe!
14:48:37 <shapr> dash: haha!
14:48:45 <Lunar^> shapr: I'm stuck at building WxHaskell on that *@!#$ Fedora Core 2 of my university
14:48:46 <monochrom> I guess I don't get it.
14:49:00 <boegel> Lunar^, Fedora Core rules
14:49:01 <Lunar^> shapr: Any idea of where wxHaskellers could hang ?
14:49:14 <shapr> >>= is also called bind, but at least it's side-effect safe
14:49:18 <shapr> Lunar^: what's the problem?
14:49:34 <Lunar^> 'In file included from wxc/src/ewxw_main.cpp:1:'
14:49:43 <Lunar^> first thing it tries to compile with make...
14:49:50 <jyp> shapr: k... I'll see in due time. ;)
14:49:52 <Lunar^> Seems to be an header problem, but I'm not sure
14:50:14 <Lemmih> Lunar^: There should be more than that.
14:50:16 <shapr> did you yum install wxwidgets-dev or whatever it's called? and g++ ?
14:50:23 <segphault> when I define a module in a haskell file, it spits out errors. am I supposed to define modules by themselves in external files, or am I doing something wrong? (i'm using hugs, could that be the problem)?
14:50:43 <shapr> segphault: yes, define modules by themselves in a file
14:50:44 <Lunar^> Lemmih: yes, quite a lot, I don't want to paste it here
14:50:46 <shapr> @wiki HaskellDemo
14:50:46 <lambdabot> http://www.haskell.org/hawiki/HaskellDemo
14:50:50 <boegel> segphault, do you import the modules where you need them ?
14:50:52 <Lunar^> shapr: I don't have root access
14:50:53 <shapr> Lunar^: paste it on the wiki
14:50:59 <shapr> Lunar^: oh crap
14:51:05 <Lunar^> shapr: That's a full --prefix=/tmp/haskell build :)
14:51:22 <boegel> Lunar^, that might br your problem, no root access...
14:51:30 <shapr> how the heck are you supposed to actually use wxHaskell without the ability to install new packages?
14:51:47 <shapr> oh I know, you could always run debian in qemu or in UserModeLinux
14:52:11 <Lunar^> shapr: Build wxWidgets --prefix=/tmp/haskell ; build wxHaskell 
14:52:11 <boegel> hello whee 
14:52:23 <Lunar^> shapr: s/Widgets/Windows/g
14:52:32 <whee> boegel: hi
14:52:49 <Lunar^> shapr: I've already built GHC 6.2.2, Greencard, HSX11, HGL, Buddha that way
14:53:22 <Lunar^> shapr: That will not do it : I would like my correctors to run "make boot" to get a big tarball
14:53:43 <shapr> man that's nuts.
14:54:03 <shapr> I have to do some swedish homework before tomorrow...
14:54:05 <Lunar^> I won't bow to O'Caml !
14:54:09 * shapr agrees
14:54:41 <Lunar^> I stand firm, but following the wind, like a nicely crafted lamxbda
14:54:42 <shapr> Lunar^: I don't think any wxHaskellers hang out on irc, email is probably your best bet.
14:54:48 * shapr laughs
14:55:21 <Oejet_> shawn: Or use rootless GoboLinux, http://www.gobolinux.org/index.php?lang=en_US&page=rootless
14:57:35 <segphault> when I use import qualified, how do I make it find the module? I have the files in the same directory.
14:57:42 <boegel> I should catch up with the Haskell mailing lists... haven't read them for a week or so :s
14:57:59 <boegel> segphault, it shouldn't be any problem then ?
14:58:02 <Lunar^> segphault: Which HC ?
14:58:13 <segphault> i'm using Hugs
14:58:37 <Lunar^> segphault: Are your module and file name matching ? case-sensitively ?
14:58:41 <segphault> when I actually want to build an executable i'll use GHC, but I prefer to use hugs while developing because I can debug faster
14:58:48 <segphault> no
14:59:12 <Lunar^> segphault: rename your files then
14:59:15 <segphault> just did
14:59:16 <segphault> thx
14:59:18 <segphault> that did the trick
14:59:31 <Lunar^> segphault: I've teached Haskell a bit :)
15:00:12 <segphault> must be a hard language to teach
15:00:16 <segphault> its certainly hard to learn
15:00:28 <Lunar^> I think its easier than many other
15:00:42 <Lunar^> toplevel and equational reasoning certainely helps
15:00:43 <boegel> Lunar^, how do you begin your course then ? lambda calculus ?
15:01:02 <Lunar^> boegel: I followed School of Expression mostly
15:01:13 <jyp> I've tried to teach assignation to math-enclined people and failed.
15:01:14 <Lunar^> It has a really well thought learning curve, IMHO
15:01:25 <jyp> So I believe it's cultural.
15:01:44 <segphault> I'm not a math person, so functional programming was very difficult for me
15:02:36 <segphault> ocaml was my first functional language, and even tho it doesnt particularly emphasize the mathematical aspects of functional programming the way that haskell does, it was still very hard for me.
15:02:55 <boegel> hello rhw 
15:04:41 <Janni> re
15:05:29 <Lunar^> segphault: sure, O'Caml makes any code look like mud
15:05:48 <Lunar^> (troll detected)
15:05:54 <jyp> Ha ;)
15:05:54 <segphault> lol
15:05:57 <segphault> it does
15:06:24 <segphault> but it was easier to learn than haskell because its a lot less abstract
15:06:55 <Igloo> I find "let foo(x, y : int * int):int = ..." a most ugly syntax
15:07:23 <jyp> Yup; haskell is so abstract that you may have to learn a new language for each library you use.
15:07:49 <jyp> You know, the DSL stuff.
15:07:53 <segphault> replace haskell's peculiar type system with an extremely simplistic object model that vaguely resembles that of C++, take away *all* of the cool syntactic sugar, add a hell of a lot of speed, and you have ocaml
15:08:22 <Lor> Umm...
15:08:55 <Lor> ocaml's type system has lots of neat stuff, and its object model is not "extremely simplistic".
15:09:27 <segphault> ocaml's type system is like a watered down version of haskells
15:09:33 <dash> i wonder what the word "object" means here :)
15:09:36 <Lor> Admittedly it doesn't have list comprehensions or sections (or do notation, but then again, it doesn't need monads as much as haskell)
15:09:40 <segphault> the oop syntax is insidious
15:10:05 <segphault> I actually wrote a cp4 extension that adds list comprehensions to ocaml
15:10:37 <Lor> Ocaml has polymorphic variants, equi-recursive types, and a higher-order module system.
15:11:05 <Lor> And union patterns.
15:11:13 <segphault> doesnt haskell have all that too?
15:11:18 <Lor> No.
15:11:23 <segphault> I dont know what "equi-recursive" types are
15:11:38 <segphault> but I do know what recursive types are, and haskell certainly has them
15:11:56 <segphault> and haskell's support for polymorphism is better all across the board
15:11:56 <Lor> An equi-recursive type is a type that directly refers to itself.
15:12:13 <segphault> I've always seen that called "recursive type"
15:12:13 <Lor> Polymorphic variants are, um, something else.
15:12:20 <segphault> what does the "equi-" indicate?
15:12:32 <Lor> Haskell's recursive types don't _directly_ refer to themselves, only via a _name_.
15:13:17 <Lor> segphault, GIYF. I'm too tired to explain more precisely at the moment, sorry.
15:13:22 <segphault> eh? maybe I misunderstand... this is a recursive type, right: data MyType = A String | B MyType
15:13:30 <segphault> thats ok
15:14:33 <Lor> Yeah, that's an iso-recursive type.
15:15:01 <Lunar^> Lor: OCaml has polymorphic variant ? since when ?
15:15:17 <Lor> An equi-recursive type would be type MyType = Either String MyType.
15:16:06 <segphault> funky
15:16:15 <Lor> lunar, since, um, about ocaml 3.00.
15:16:22 <Lunar^> Lor: uhh...
15:16:24 <Lunar^> ok
15:18:36 <segphault> oh! the thing where you put the backtick in front of the name
15:19:24 <Lor> Yeah. Most useful at times. Not quite full union types, but close enough.
15:19:34 <segphault> I always thought of those as typeless variants
15:19:54 <segphault> I never found a use for them
15:19:58 <Lunar^> Lor: that's not real union types, ok. (Just erased something ;))
15:20:21 <Lunar^> segphault: Left | Right | Up | Down 
15:20:36 <Lor> segphault, they give you subtyping.
15:20:37 <Lunar^> segphault: But Left is already used by Either
15:20:44 <Lor> Haskell has no subtyping, except for classes.
15:21:17 <Lor> But off to sleep now. G'night.
15:21:22 <segphault> good night
15:23:05 <boegel> bye Lor 
15:23:51 <jyp> down too; nite
15:28:22 <shapr> ah, new Paul Graham essay - http://www.paulgraham.com/usa.html
15:28:34 <dons> good morning shapr
15:28:48 <kosmikus> hi everyone
15:28:55 <stepcut> the new nikon d2x camera can be remote controlled from your computer via 802.11
15:30:13 <boegel> hi kosmikus 
15:30:53 <shapr> g'day dons 
15:31:07 <shapr> hoi kosmikus 
15:32:21 <dons> shapr, we have a nicer buffer implementation in yi now. no more coerce ;)
15:32:24 <boegel> I should go to bed too... I hope I can implement reflection an transparency tomorrow
15:32:30 <shapr> spiffy!
15:32:41 <dons> chilli gave me a good talking to about why the ffi is much better :}
15:32:47 <shapr> dons: btw, I still buffers might be better if they didn't hold the point
15:32:51 <boegel> bye everyone
15:33:06 <shapr> I was thinking about commands like dd
15:33:09 <shapr> and p
15:33:20 <dons> shapr: really? I guess it could be entirely in the window, and just a param
15:33:22 <kosmikus> stepcut: the d2x looks cool, but it's a bit out of my range ;) I'm still wondering whether I should be content with the canon 300d or go for the 20d
15:33:31 <shapr> in that case you're not really putting things in char by char, it's more chunks that get ripped out or stuck on
15:33:35 <dons> we have point-less versions for some commands already. moveTo, read
15:34:23 <dons> but you still need somewhere to start from, right?
15:34:38 <shapr> not necessarily
15:34:40 <dons> (I could be convinced of this, though)
15:34:40 <whee> kosmikus: you buy me the eos-1ds mark II and I'll give you my s400 ;)
15:35:26 <dons> on the other hand, we may want more points in the buffer. for arbitrary marks
15:35:55 <Lunar^> Worked !
15:36:07 <shapr> I think a buffer should be able to take 'slabs' of changes as well as char by char changes
15:36:08 <Lunar^> wxhaskell CVS + wxGTK 2.4.2
15:36:10 * shapr thinks
15:36:34 <Lunar^> dons: IIRC, you are working on hs-plugins ?
15:37:17 <kosmikus> whee: no, thanks ;)
15:37:51 <shapr> hiya Oejet 
15:37:59 <shapr> dons: I'll think about it more.
15:38:26 <dons> Lunar^: yes. that's me
15:38:47 <Lunar^> dons: How is hs-plugins working with profiling ?
15:39:06 <Oejet> Hello, shapr.  Just trying out BitchX.  My computer likes not having to run X.
15:39:15 <dons> profiling the library?
15:39:39 <dons> the build system doesn't build profiled at the moment. this is a dumb bug on the todo list
15:39:43 <Lunar^> dons: profiled plugins with a non-profiled main is what I am thinking of
15:39:56 <dons> oh. that's interesting. haven't considered that
15:40:15 <Lunar^> dons: :)
15:40:21 <dons> it would be the user's fault, though. dumping a .p_o file into a .o file
15:41:02 <dons> just like tricking ghc into statically linking .p_o files with normal .o files
15:41:07 <Lunar^> dons: I would like to dynamically load a profiled plugin, and head myself inside RTS internals to display sensible values
15:41:28 <Lunar^> abut what's hapenning inside it
15:41:39 <shapr> have you considered mixing buddha and hs-plugins?
15:41:44 <Lunar^> but maybe it's a little too mind twisted
15:41:53 <dons> hmm. I think you should be able to load a profiled plugin, yes. if you can in ghci
15:42:22 <Lunar^> O:)
15:42:25 * shapr cackles at The Register
15:42:49 <Lunar^> dons: I will try to do that quite soon, I will keep you in touch with how it goes
15:42:49 <dons> but I'm a bit confused about what you want to do this for? can you expand
15:42:56 <shapr> Piracy funds Terror, Guardian lesson tells schools. -- Balanced discussion of copyright issues begins.
15:43:00 * shapr laughs hysterically
15:43:32 <Lunar^> dons: making something to compare efficiency of different algorithms
15:43:54 <shapr> oh, neat idea
15:44:05 <shapr> meta-profiling
15:44:43 <shapr> In that case, you could even make all the performance data available via template haskell or something, and automate the whole process.
15:44:51 <Philippa> shapr: piracy in the mass-production-counterfeit sense quite possibly does. I find it hard to believe the IRA splinter groups and so forth aren't involved in it in Ireland, for example
15:45:01 <shapr> self-checking run-time recompilation =)
15:45:08 <shapr> Haskell's own TransMeta
15:45:22 <tuomov> warez is not piracy :)
15:45:24 <Lunar^> shapr: The idea is semi-automation: I would like to have a GUI for input 
15:45:45 <tuomov> warez is non-profit volunteer work :)
15:45:51 <Lunar^> shapr: then the whole sets of implementations is run and nice colored curves appear
15:46:16 <dons> Lunar^: this sounds fun. if you try it, I'll promise to try to support it :)
15:46:19 <shapr> Even so, it could easily be extended to a Haskell app that iterates over a bunch of different compilation settings, and chooses the one with the best profiling data on the current machine.
15:46:37 <Lunar^> shapr: Neat !
15:47:03 <Lunar^> shapr: S^2 would be intersted in this, I think
15:47:11 <shapr> who?
15:47:18 <shapr> oh!
15:47:30 <Lunar^> the dual-headed monkey :)
15:47:35 <shapr> well, it's just an extension of hs-plugins and run-time available profiling data.
15:47:38 <Lunar^> or was that three ? :)
15:48:03 <Oejet> Good night.
15:48:11 <shapr> g'night Oejet 
15:48:29 <shapr> I should sleep too, I have class tomorrow, and bunches of homework. Or I could do my homework tonight.
15:48:55 <Asim> hello
15:49:05 <Lunar^> shapr: same for me, but, anyway...
15:49:05 <shapr> Hi Asim, how do you like your Coconuts?
15:49:12 <dons> there may be no change to hs-plugins required. but I think the application would have to be compiled profiled 
15:49:19 <Asim> whole, with a hole
15:49:28 * shapr grins
15:49:37 <shapr> Asim: are you part of the Coconut team at mcmaster?
15:49:43 <Lunar^> dons: Otherwise it will not be linked with profiling RTS
15:49:52 <Lunar^> dons: that what I think
15:50:17 <Asim> if I didn'tk now much about computer, I'd freak out right now
15:50:18 <Asim> shapr: Actually I have no idea there was a Cononut team
15:50:20 <shapr> Asim: That's okay. We don't mind if you freak out.
15:50:22 <Lunar^> dons: But haven't you said that hs-plugins can't be build with profiling ?
15:50:27 <dons> yep. it will be loaded into an app that isn't running with profiling counters and friends
15:50:40 <dons> hs-plugins itself can't be, at them moment. which is a bug
15:50:41 <shapr> Asim: is this your first time visiting #haskell? Are you learning Haskell or a long-time user?
15:51:00 <Lunar^> dons: but -prof -package looks for a _p.so ...
15:51:09 <Asim> shapr: First time visiting, learning Haskell in my 3rd year Software Engineer course
15:51:19 <dons> yep. so you probably would have a hard time building a profiledd app that uses plugins..
15:51:22 <shapr> Ah cool! Haskell is a good thing to learn.
15:51:33 <Asim> Yeah I'm starting to like it
15:51:43 <shapr> How far have you gotten? Do you have any questions?
15:51:44 <Lunar^> Asim: which school ?
15:51:57 <Asim> I've gotten hold on lists, function def, some patern matching
15:52:06 <Asim> Lunar^: McMaster, Canada
15:52:08 <Lunar^> dons: Have you any track for the build erre ?
15:52:14 <Asim> as shapr pointed out
15:52:16 <shapr> Have you wrapped your head around using recursion for almost everything?
15:52:25 <Asim> my prof. is really fond of Haskell
15:52:27 <Lunar^> shapr: Go to sleep ! :)
15:52:40 <shapr> Oui mon Capitan!
15:52:46 <Asim> the course is actually called Design of Programming Languages but we start with Haskell
15:52:47 <shapr> =)
15:52:49 <Lunar^> Capitain :)
15:52:52 <shapr> whoops
15:52:56 <Lunar^> Capitain_e_ !
15:53:10 <shapr> Capitain?
15:53:19 <Lunar^> I'm loosing my french
15:53:28 <shapr> I'm losing your french too.
15:53:29 <Lunar^> Asim: This is a good starting point
15:53:44 <shapr> But I never had it in the first place =)
15:53:48 <Lunar^> Asim: because Haskell is one of the most designed langugage I know
15:53:50 <Asim> heh, I should know some french, (I'm Canadian, aye?!) but I have no clue ;)
15:54:02 <Asim> yes Lunar^ :P
15:54:33 <Lunar^> Yeahaaa ! :) WxHaskell in /tmp/haskell ! :)
15:54:47 <Asim> actually, I was wondering of anyone knows of a good book, website, coursesite with Intro. to lexsers, pharsers using Haskell
15:55:11 <Lunar^> Asim: you mostly have two optionns
15:55:21 <Asim> lexing, pharsing, etc. because that's what's in my course right now, but I lost!
15:55:35 <Asim> I'm lost^
15:55:40 <Asim> Lunar^: yes?
15:56:01 <Lunar^> Asim: either the yacc-like approach, which is Alex (lexer)/Happy (parser)
15:56:18 <Lunar^> Asim: or monadic parsing library like Parsec
15:56:36 <Lunar^> Asim: or more interesting, the one used in EHC
15:57:03 <dons> also, lazy, dynamically constructed lexers like the one in CTK (and in yi now)
15:57:10 <Asim> I'm new to lexers and parsers, I only know some basic BNF theory but don't know how to implement it in Haskell
15:57:24 <Lunar^> dons: I should take a look at yi
15:57:45 <Asim> no, I just need very basic lexing and parsing, using regular expressings and BNF
15:58:42 <dons> Lunar^: yes!
15:59:15 <Lunar^> dons: btw, hs-plugins is 100% dependent on dlopen(), right ?
15:59:33 <Asim> hm.. maybe I'm asking for too much :P
15:59:42 <Lunar^> Asim: no, you're not
15:59:44 <dons> 100% dependent on ghc's rts dyn linker, which uses dlopen, but has also been ported to windows etc
16:00:00 <Asim> ok, how about this: what's a good book for intro to lexing and parsing theory
16:00:04 <Lunar^> dons: I would like to get module support in hOp for free :)
16:00:08 <Asim> basic ^
16:00:15 <Igloo> Huh? I thought it doesn't use dlopen?
16:00:44 <kosmikus> Asim: I quite like the Utrecht script for "Grammars and Parsing", but I'm afraid it's only available in Dutch
16:00:51 <Lunar^> Asim: http://www.cs.uu.nl/groups/ST/Ehc/WebHome look at the doc here, it's damnly interesting
16:01:10 <dons> it doesn't it's own relocations, but does call dlopen: hdl= dlopen(dll_name, RTLD_NOW | RTLD_GLOBAL);
16:01:16 <dons> s/doesn't/does do/
16:01:30 <dons> val = dlsym(dl_prog_handle, lbl);
16:02:03 <Lunar^> Asim: http://haskell.org/happy/ http://haskell.org/alex/
16:02:20 <kosmikus> Asim: the Parsec manual isn't too bad either
16:02:21 <Igloo> Ah, fair enough
16:02:49 <Lunar^> Asim: and this one http://www.cs.chalmers.se/~markus/BNFC/
16:04:02 <dons> Lunar^: that would be cool. and I've thought about it. I don't know how you'd deal with the "load .o from disk" design of hs-plugins
16:04:13 <dons> with hacking, I guess ;)
16:05:05 <Philippa> dons: what's the state of hs-plugins and win32?
16:05:27 <dons> Philippa: you always ask this
16:05:30 <Lunar^> dons: loading .o from disk (or more exactly grub thingy right now) is in House
16:05:39 <Philippa> not always, I've held off for a while now...
16:06:01 <dons> well, I'm waiting for 6.4 to be released. then i'll have a portable System.Process library
16:06:07 <Philippa> ah, yes, d'oh
16:06:09 <dons> rather than writing my own one
16:06:14 <Philippa> fair enough
16:06:16 <dons> for win32, which I can never test on
16:07:14 <dons> Lunar^: ok. cool. you could probably get stripped down .o loading working then.
16:07:23 <Lunar^> dons: I hope so
16:07:31 * Lunar^ needs time time time
16:07:31 <dons> the fancier stuff, such as chasing dependencies by looking though .hi files, that seems harder
16:07:58 <Lunar^> I think a storage system is needed before that
16:08:09 <Lunar^> I'm going to follow a course on driver next semester :)
16:08:26 <dons> so maybe you should just start with the ffi binding to the rts functions in Load.hs, and forget about all the other code in hs-plugins.
16:08:29 <Lunar^> maybe I could convince the teacher to make exercices in hOp
16:08:33 <dons> that's enough to load single .o files
16:08:51 <dons> that would be cool :)
16:10:27 <Lunar^> dons: Is there any homepage for yi ?
16:10:43 <dons> http://www.cse.unsw.edu.au/~dons/yi.html
16:11:11 <Lunar^> It's not in the HC&AR
16:11:17 <dons> yes it is ;)0
16:11:28 <dons> oh, the website isn't. no.
16:11:35 <dons> it was only created a few days ago
16:11:50 <Lunar^> uh ok :)
16:12:24 <kosmikus> Asim: oh, the Grammars and Parsing script is available in English, although I can't find any recent version; try: http://www.cs.uu.nl/~johanj/publications/MAIN.ps
16:12:28 <dons> yi is 35 days old
16:12:51 <Lunar^> dons: only ?!
16:13:07 <Lunar^> dons: I thought more... time is strange lately
16:13:29 <dons> hehe
16:14:37 <kosmikus> shapr: apropos HCAR, I'm afraid I don't understand your suggestion ... do you mean, you'd like a table of contents for the HTML version that is not the index?
16:15:18 <blackdog_> dons: Les Savy Fav was unbelievable.
16:15:38 <dons> oh. cool. rub it in
16:16:52 <blackdog_> Alright. The lead singer is certifiably insane... 40yo dude with a bald head, hobo beard and pot belly who kept rubbing his nipples, kissing people in the audience and stealing their beers. Wasn't just kissing girls, either: totally indiscriminate.
16:17:22 <stepcut> hah
16:18:02 <dons> scary.
16:19:09 <Lunar^> What kind of university am I in... ssh segfaults :(
16:19:35 <dons> that is really scary. what version, what os?
16:19:58 <Lunar^> I don't want to know, I have no choice
16:20:19 <Lunar^> The whole undergrad network just suck
16:20:35 <dons> ssh is never supposed to segfault. otherwise openbsd developers' get their heads kicked
16:21:11 <dons> stupid apostrophe
16:21:19 <Lunar^> dons: I think that's hardware related
16:21:35 <dons> oh ... yikes
16:23:00 <Lunar^> dons: I've never seen ssh segfault before
16:24:14 <dons> I've seen it once, on a cvs version. But there is a lot of effort going into not having that happen :)
16:24:42 <dons> hmm.. maybe someone should write an ssh protocol implementation in haskell
16:24:57 <dons> or cryptol
16:25:06 <Lunar^> hOp hOp !
16:25:19 <Lunar^> postmaster without OpenSSL
16:25:27 <Lunar^> time !
16:25:40 * Lunar^ should relax a bit
16:25:59 <uffe> hello!
16:26:01 <monochrom> perhaps ssh itself doesn't segfault, but a library it uses does.
16:26:37 <uffe> would someone like to explain this to me: http://www.haskell.org/hawiki/TyingTheKnot
16:26:53 <uffe> the first example.. i really don't get it
16:27:54 <monochrom> Do you understand the intention of data DList a = DLNode (DList a) a (DList a) ?
16:28:08 <uffe> yep!
16:28:26 <uffe> i think i understand the whole idea, it's the source code i don't get!
16:28:49 <monochrom> Do you understand the source code of mkDList ?
16:29:35 <uffe> no
16:30:07 <uffe> mkDList xs = let (first,last) = go last xs first
16:30:07 <uffe>              in  first
16:30:22 <monochrom> Yuck, I don't understand it fully either.
16:30:29 <uffe> rats :)
16:30:37 <uffe> but do you understand this:
16:30:37 <uffe> mkDList xs = let (first,last) = go last xs first
16:30:37 <uffe>              in  first
16:31:02 <uffe> cause i can't get it.. what will last and first be bound to?
16:31:51 <monochrom> I believe it is more useful to understand go first, or at least, to find out its intention (if not how it works internally).
16:31:53 <kosmikus> it's a cyclic definition
16:32:13 <monochrom> The text says something about go.
16:33:12 <uffe> kosmikus, last and first are only defined in go?
16:34:13 <dons> huh. vim uses more heap than yi on big files
16:34:28 <dons> haskell rules
16:35:11 <kosmikus> uffe: no, they're not defined in go, they are defined in the let statement
16:36:45 <uffe> kosmikus, yeah.. but what values will they be in the first evaluation of 'go last xs first'?
16:36:59 <monochrom> go takes three parameters: prev (a dlist), xs (a normal list), next (a dlist).
16:37:49 <kosmikus> uffe: there's no such thing as a "first" evaluation of go
16:38:03 <uffe> oh..
16:38:20 <kosmikus> go is a functions and it has some inputs and some outputs
16:38:29 <kosmikus> the outputs are reused as the inputs
16:39:05 <kosmikus> because of lazy evaluation, this works as long as go does not consume too much of its inputs prior to generating sufficient output
16:39:22 <monochrom> It constructs a new dlist.  In the new dlist, the leftmode node points back to prev; the rightmost node points forward to next; in between is a doubly-linked list bearing data from xs.
16:40:58 <monochrom> It returns two pointers in a pair.  A pointer to the leftmode node, and a pointer to the rightmost node.  I may be wrong here.
16:41:07 <uffe> kosmikus, i'm confused.. how can a function use only the outputs from itself as inputs? how does it start?
16:42:44 <kosmikus> uffe: let's play the simple case through where the list has only one element
16:43:02 <uffe> okey
16:43:33 <kosmikus> we call "go last xs first", where we don't know "last" and "first" yet, and "xs == [x]"
16:44:01 <kosmikus> in "go", the second case matches
16:44:15 <uffe> i'm with you :D
16:44:32 <kosmikus> so, "prev" is bound to "last", "next" is bound to "first", and "x" is bound to "x", and "xs" is bound to "[]"
16:45:00 <kosmikus> in the let, the variable "this" is bound to "DLNode first x last"
16:45:01 <uffe> yeah
16:45:06 <kosmikus> no sorry
16:45:11 <kosmikus> "DLNode last x first"
16:45:32 <kosmikus> the second line is
16:46:10 <kosmikus> (rest,last) = go (DLNode last x first) xs first
16:46:18 <kosmikus> or even
16:46:31 <kosmikus> (rest,last) = go (DLNode last x first) [] first
16:46:34 <kosmikus> still with me?
16:46:57 <uffe> wait a sec.. (don't know yet :)
16:47:29 <kosmikus> ah, it's bad that this thing is called last again
16:47:55 <uffe> it's another last?
16:48:01 <kosmikus> yes
16:48:24 <kosmikus> let's assume the second line of the let reads "(rest,final) = ..."
16:48:30 <uffe> yes
16:48:33 <uffe> that's better
16:48:38 <kosmikus> and then "in (this,final)"
16:48:43 <uffe> good
16:48:48 <kosmikus> then, in this situation, we have
16:49:02 <kosmikus> (rest,final) = go (DLNode last x first) [] first
16:49:04 <kosmikus> ok?
16:49:20 <uffe> okay
16:49:31 <kosmikus> now, in the recursive call of go, the first case matches
16:50:12 <uffe> yes
16:50:25 <kosmikus> that means, "go (DLNode last x first) [] first = (first, DLNode last x first)"
16:50:51 <kosmikus> thus, "rest == first" and "final == DLNode last x first"
16:52:40 <kosmikus> argh, I made another mistake
16:52:56 <kosmikus> irc isn't made for this ;)
16:53:02 <uffe> :)
16:53:19 <kosmikus> once more
16:54:01 <kosmikus> this = DLNode prev x rest = DLNode last x rest  (NOT "DLNode last x first", as I said before)
16:54:13 <kosmikus> that's the first line of the let
16:54:31 <kosmikus> thus, (second line of let):
16:55:25 <kosmikus> (rest,final) = go this xs next = go (DLNode last x rest) x first = (first, DLNode last x rest)
16:56:06 <kosmikus> uffe: still there? ;)
16:56:09 <uffe> sorry
16:56:40 <uffe> i'm here, i'm not exactly with you anymore, put please go on! i'll read this through later.. i'm getting the idea!
16:56:47 <uffe> i'll read this through later!
16:56:55 <kosmikus> ok, we're almost done
16:57:19 <kosmikus> we now return (this,final), which is according to the computations
16:58:30 <kosmikus> (DLNode last x rest, DLNode last x rest)
16:59:04 <kosmikus> rest == first, so we return (DLNode last x first, DLNode last x first)
16:59:48 <kosmikus> this means that first is bound to (DLNode last x first)
17:00:00 <kosmikus> and last is bound to (DLNode last x first) as well
17:00:49 <uffe> (still here) :)
17:01:15 <kosmikus> that's it
17:01:23 <uffe> oh, you were done! sorry! :)
17:01:31 <uffe> you really lost me, but i'm very thankful
17:02:08 <uffe> thanks a lot!
17:02:39 <uffe> i will be able to get it now
17:02:44 <uffe> i'm just a bit tired
17:02:51 <kosmikus> well, this example is very complicated, I think
17:03:04 <kosmikus> I'd try to understand something like repmin first, it's easier in my opinion
17:03:30 <uffe> the thing was, i didn't see that the evaluation of go was just normal recursion (cause it is, right?)
17:03:33 <uffe> what's repmin?
17:04:05 <kosmikus> repmin is one of the standard examples for attribute grammars
17:04:28 <kosmikus> you have a binary tree with labels in the leaves
17:04:41 <uffe> yes
17:04:56 <kosmikus> the task is to compute a new tree of the same shape where each label is replaced with the minimum label in the original tree
17:05:47 <uffe> that sounds easy?
17:05:49 <kosmikus> you obviously have two aspects of the computation: (1) compute the minimum label, (2) distribute the minimum label
17:05:52 <uffe> did i understand the problem?
17:05:55 <uffe> aha
17:06:05 <uffe> you want me to do (2) ? :)
17:06:07 <kosmikus> it's easy to do it in two steps
17:06:27 <kosmikus> in Haskell, you can do it in one step, using a cyclic computation
17:06:35 <uffe> aha
17:06:45 <kosmikus> the expression looks like this
17:07:12 <kosmikus> (minimum_value, final_tree) = rep_min minimum_value original_tree
17:08:03 <kosmikus> notice the similarity with the DLList example; you have minimum_value appearing both left and right
17:08:25 <uffe> yes
17:08:47 <uffe> what does rep_min look like?
17:09:14 <kosmikus> ok, let's assume you have "data Tree = Leaf Int | Node Tree Tree"
17:09:26 <uffe> yep
17:10:03 <kosmikus> rep_min m (Leaf n) = (n, Leaf m)
17:10:29 <uffe> okaay...
17:10:30 <kosmikus> why is this? well, the minimum of a Leaf containing label n is just n
17:10:49 <kosmikus> and the copy of the tree with all labels replaced by the global minimum m is Leaf m
17:11:44 <kosmikus> always remember that I'm mixing these two completely different aspects (finding the minimum, distributing it and creating the copy)
17:12:06 <kosmikus> the other case:
17:13:14 <kosmikus> rep_min m (Node t1 t2) = let { (m1, r1) = rep_min m t1; (m2, r2) = rep_min m t2 } in (min m1 m2, Tree r1 r2)
17:14:04 <kosmikus> explanation: the global minimum "m" is just distributed; I'm calling rep_min on the two subtrees "t1" and "t2" using the same global minimum "m"
17:14:40 <kosmikus> as a result, I have to produce the minimum of the current tree, which is the minimum of the two subtrees, thus "min m1 m2"
17:15:22 <kosmikus> and the replaced tree, which is a node built from both the subtrees, "Node r1 r2" (there's a typo above, "Tree r1 r2" should be "Node r1 r2")
17:15:25 <kosmikus> that's it
17:15:46 <uffe> okeeeeey...
17:15:54 <uffe> i have to think about this one as well
17:16:08 <uffe> you're very kind!
17:16:26 <uffe> too bad it's 2:10 here.. i'm a bit slow right now
17:16:27 <uffe> :)
17:16:33 <kosmikus> I sincerely hope that I'm not scaring you :)
17:16:38 <kosmikus> same time here ...
17:16:49 <uffe> oh, where's that?
17:17:05 <kosmikus> I'm in .nl atm
17:17:37 <uffe> ...which means? :D
17:17:54 <kosmikus> .nl = netherlands
17:17:55 <uffe> neatherlands?
17:18:22 <uffe> okay, i'm in sweden
17:18:43 <uffe> no, you're not scaring me
17:19:24 <kosmikus> ok, good
17:19:25 <uffe> i think i just need time to swallow this shit :)
17:20:06 <uffe> it's always the same thing.. some things seem weird at the first glance, but once you get used to it, it becomes a part of ones everyday life :)
17:21:51 <kosmikus> :)
17:22:33 <uffe> it's really kind of you to help me out!
17:23:06 <uffe> it's just recursion, right?
17:23:09 <uffe> really?
17:23:39 <kosmikus> yes, but it only works because of lazy evaluation
17:24:23 <uffe> in another sense than with normal recursion?
17:24:36 <kosmikus> yes
17:24:51 <uffe> but if you consider "if" a function, it needs to be lazy.. not the same thing?
17:24:57 <kosmikus> well, in principle, recursion has nothing to do with the evaluation strategy
17:25:11 <kosmikus> yes, "if" needs to be lazy
17:25:34 <kosmikus> that's why it has to be a special construct in most languages, whereas it could completely be encoded in Haskell
17:25:52 <uffe> does the rep_min thing also work because of lazy evaluation?
17:25:56 <kosmikus> yes
17:26:12 <kosmikus> if you have a cyclic assignment such as
17:26:22 <kosmikus> (a, ...) = some_function_call ... a ...
17:26:36 <kosmikus> (which is what originally confused you about DLList)
17:26:54 <uffe> but this can be considered an "if", right?
17:26:56 <kosmikus> this only works because evaluation of "some_function_call" can proceed without first evaluating "a"
17:27:13 <uffe> it feels like the same thing..
17:27:29 <kosmikus> I don't see it
17:28:02 <uffe> okay.. then i'm probably wrong :) .. but let me think about it
17:28:12 <kosmikus> sure
17:31:21 <kosmikus> good night
17:31:32 <uffe> good night! thanks a lot!
17:33:14 <uffe> or are you staying?
17:35:07 <uffe> anyway, i'm leaving.. gotta sleep
17:35:11 <uffe> good night everyone
17:39:28 <dustin`> By any change, does anyone here have experience with the Isabelle/HOL proof assistant?
17:41:50 <monochrom> My understanding of go is correct.
17:46:29 <kosmikus> monochrom: it is
17:46:51 <kosmikus> dustin`: earthy should have, but he's probably asleep already
17:47:04 * kosmikus discovers that he is still awake ...
17:47:21 * kosmikus should really get some sleep
19:41:45 <Etaoin> does anyone have pointers on what to do to fix a "kind error"?
19:47:45 <dons> don't apply functions to arguments with the wrong kind of types
19:48:13 <dons> what's the error msg?
19:48:19 <Etaoin> I'm not applying any functions
19:48:22 <Etaoin> type Stream a b = a -> WriterT b IO ()
19:48:22 <Etaoin> instance Arrow (Stream a b) where
19:48:37 <Etaoin> changing to Arrow Stream doesn't help either
19:48:47 <dons> and the error message exactly?
19:49:01 <Etaoin> with ghc,
19:49:10 <Etaoin>     Kind error: Expecting kind `* -> * -> *',
19:49:10 <Etaoin>                 but `Stream a b' has kind `*'
19:49:10 <Etaoin>     When checking kinds in `Arrow (Stream a b)'
19:49:20 <Riastradh> The a in Arrow a expects two type arguments, but Stream a b expects none.
19:49:52 <dons> yep.
19:50:02 <Etaoin> changing to Arrow Stream gives a different error
19:50:07 <Etaoin>     Type synonym `Stream' should have 2 arguments, but has been given 0
19:50:07 <Etaoin>     In the instance declaration for `Arrow (Stream)'
19:50:10 <Etaoin> which confuses me
19:50:12 <Riastradh> Kinds are like a meta-type system.
19:50:26 <Riastradh> You can't instantiate classes on type synonyms.
19:50:40 <Etaoin> oh?
19:50:41 <dons> so use the original type
19:51:10 <Riastradh> To elaborate on what dons said, you have to write out this explicitly:
19:51:20 <Riastradh> ...oh, sorry.
19:51:55 <Etaoin> I guess I have to use data?
19:51:55 <Riastradh> You probably have to create a new data type for this.
19:51:58 <Etaoin> because how would I turn that type into kind * -> * -> *
19:52:04 <Riastradh> Using type lambdas!
19:52:15 <Etaoin> !
19:52:24 <Riastradh> No, they don't really exist.  (I think.)
19:52:25 <dons>  /\
19:52:34 <dons> but you can't use that.
19:52:35 <Riastradh> (At least, I don't think GHC really supports them.)
19:52:45 <dons> nope. they're in core syntax though
19:53:02 <Riastradh> (They _exist_, but only experimentally, and their ramifications would ram your brain -- they'd probably make the type system Turing-complete...)
19:53:08 <dons> it's not twelf or isabelle, after all ;)
19:54:23 <Etaoin> thanks!
19:55:00 <dons> pg. 46 of h98 report for why you can't use type synonyms in instances
19:55:22 <Riastradh> (And if the type system were made much more powerful, it would kind of need a better kind system...et cetera.)
21:37:42 <musasabi> morning
22:16:50 <desrt> Î»
22:37:47 <Etaoin> I want to do lazy IO
22:38:36 * Riastradh lounges about on a couch, inputting junk food and outputting flatulence.
22:38:45 <Riastradh> Like that?
22:39:05 <Etaoin> no
22:39:46 <dons> Etaoin: input or output?
22:39:58 <Etaoin> I suppose that's what unsafePerformIO is for
22:40:22 <dons> not really. unsafeInterleaveIO is more appropriate
22:41:02 <Etaoin> output
22:41:09 <Etaoin> hGetContents is great so far
22:41:35 <Etaoin> I'm not quite sure how to use unsafeInterleaveIO
22:42:00 <dons> you shouldn't unless you have some weird input function (say, like ncurses), and have to write your own hGetContents
22:42:44 <dons> but this is what Control.Concurrent.Chan is for
22:42:57 <dons> (which just wraps up list construction nad unsafeInterleaveIO
22:43:14 <Etaoin> does it?
22:43:21 <Etaoin> fun
22:43:33 <dons> it is lots of fun :)
22:43:51 <Etaoin> I suppose Control.Concurrent.Chan is just what I wanted to implement
22:44:21 <dons> it's a very simple module. I re-implemented it by accident without realising
22:45:18 <dons> hmm. do you want lazy output, or output while in a pure function?
22:45:44 <dons> I'm not sure what lazy output would look like, unless you write to a Handle -- which is just hPutStr
22:47:13 <Etaoin> I'm thinking in terms of unix pipes with a stream of thingies flowing in one end, a bunch of processors all snapped together and a stream of otherthingies coming out the other side
22:48:19 <dons> well, Chans behave like this rather nicely, I think.
22:48:27 <dons> and you get thread safety for free
22:48:59 <dons> so you could forkIO your chan writer, say
22:50:37 <dons> in Yi I have a thread reading input from the terminal, passing to a lexer:
22:50:38 <dons> repeatM_ $ threadWaitRead 0 >> getcE >>= writeChan ch
22:51:34 <dons> and the input gets processed: sequence_ . fn =<< getChanContents ch
22:53:47 <Etaoin> how does the second expression work
22:54:42 <dons> getChanContents returns a (lazy) list of input thingies
22:55:39 <dons> and we then apply 'fn' to that pure list of stuff
22:55:51 <Etaoin> fn is pure?
22:55:52 <dons> finally, I want to force the output, via sequence_
22:56:22 <dons> yep. just a [a] -> [b] function
22:56:36 <dons> just happens to return a list of [IO ()] ,but that is not really relevant
22:56:47 <dons> (hence the sequence_)
22:57:29 <Etaoin> okay
22:57:31 <dons> what nice is that getChanContents gets you a lazy [a], for some a
22:57:36 <Etaoin> yes
22:57:58 <Etaoin> okay
22:58:12 <Etaoin> you'd need a Chan for each processor you want to chain together though
22:58:26 <dons> unless you can (f . g) them
22:58:33 <Etaoin> yes
22:59:18 <dons> if you were modelliing shell pipes, each Chan is a |
22:59:52 <Etaoin> and a thread for each, too I guess
23:00:04 <dons> that would be the best way, then something is always running
23:00:16 <dons> and threads block nicely waiting for input, too
23:00:25 <dons> plus the buffers are unbounded. which is cool
23:00:42 <dons> it's a very nice api, I think
23:01:06 <dons> considering how hard this stuff is in, say, C
23:07:08 <Etaoin> I suppose I am scared of using things like Control.Concurrent because I don't know how they're implemented
23:08:23 <dons> well, if you just use Chan, then it's pretty simple
23:08:35 <dons> have a look at the src!
23:08:42 <Etaoin> until I get a confusing and weird and lazy error
23:08:50 <dons> sure.
23:11:30 <dons> I found it useful to debug this stuff in ghci, before dumping it into my larger app
23:24:58 <kolmodin> Etaoin: you might want to read "Concurrent Haskell". they talk about MVars, channels, forking, fairness and how it's implemented
23:25:39 <kolmodin> http://research.microsoft.com/Users/simonpj/Papers/papers.html#monads
23:26:01 <kolmodin> there is a chapter about it too in "Tackling the awkward squad"
23:28:08 <shapr> yay, my wikiwiki repo is entertaining people. Of course, someone also tried to create a php page to see if my server was stupidly insecure..
23:31:59 <Etaoin> kolmodin: thanks
23:32:15 <kolmodin> np :)
23:35:01 <shapr> yay, if you're a subscriber to lwn.net, the HC&AR is now mentioned on the Development page! w00!
23:40:14 <reffie> w00
