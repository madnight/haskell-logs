00:02:51 <cm> hmm
00:03:10 <cm> when i check out something (OpenAL) from cvs.haskell.org - what do i have to do in order to "make" it?
00:03:24 <cm> i tried "autoconf && make" but it doesn't like me
00:09:58 <SamB> cm: well, autoconf followed by make with no intervening ./configure probably doesn't work very often...
00:10:40 <cm> does it work ever?
00:11:01 <SamB> well, I suppose if it was still configured from before
00:11:28 <cm> ok, i suppose that wouldn't be in CVS
00:11:30 * cm tries
00:12:11 <cm> config.status: error: cannot find input file: include/HsOpenALConfig.h.in
00:12:30 <cm> oh heh
00:12:31 <cm> nm
00:20:02 <shapr> try autoreconf maybe?
00:20:19 <Janni> G'morning...
00:20:24 <shapr> Guten tag Janni 
00:20:24 <dogand> hiya
00:21:19 <Janni> shapr: Vielen Dank, auch Ihnen einen schoenen guten Morgen.
00:27:22 <dogand> JA JA ICH HABE KEINE ZEIT
00:27:52 <dogand> mozilla &
00:28:28 <dogand> uh...
00:29:47 <earthy> Wozu wird hier so geschreit?
00:30:03 <dogand> ja ja viel gut
00:30:34 <earthy> ;)
00:31:04 <earthy> ah... deshalb. Herr dogand versteht kein Deutsch. Das erklaert ja.
00:31:27 <earthy> Nagut, dann mal wieder auf Englisch umsteigen, oder? :)
00:31:33 <dogand> ich verstehe ein bisschen deutsch, i habe deutsch ins vier jahren gelest
00:31:42 <dogand> aber mein deutsch ist sehr blöd :P
00:31:52 <dogand> but yeah, english would be better :P
00:31:55 <earthy> mine isn't all that much better. :)
00:32:04 <dogand> sure seems like it
00:32:16 <kolmodin> dogand: try /usr/ed-pkg/pkg/hugs98-Nov2003/bin/hugs
00:32:27 <dogand> kolmodin: but as i said, we have Nov2002
00:32:28 <kolmodin> :l Network
00:32:28 <earthy> but I read/translated it as a job, so I can make a passing semblance of fluidity in the language. :)
00:32:37 <earthy> dogand: then upgrade.
00:32:43 <earthy> ;)
00:32:44 <dogand> but i don't have root access
00:32:48 <dogand> i'm a simple creature
00:32:49 <earthy> ah. that sucks.
00:32:57 <dogand> sure does
00:32:58 <earthy> then pester root to upgrade. :)
00:33:10 <dogand> but i wouldn't expect them to hand the students root access
00:33:14 <kolmodin> poly:kolmodin:[/usr/ed-pkg/pkg/hugs98-Nov2003/bin]> ./hugs --version
00:33:17 <kolmodin> Version: November 2003
00:33:34 <dogand> our tutor was john hughes when we read functional programming, i could bitch to him about it
00:33:44 <dogand> he if anyone should be knowing what version of hugs to use
00:34:02 <earthy> he may in fact have a good reason to still be at nov 2002
00:34:08 <dogand> oh so you're a student at chalmers as well :)
00:34:09 <earthy> can't think of it offhand, but he may have. ;)
00:34:33 * earthy isn't at chalmers
00:34:54 <dogand> no but kolmodin seems to be :)
00:35:00 <dogand> or at least ssh'ing towards chalmers
00:35:11 <dogand> and thanks kolmodin, 2003 worked with Network
00:35:14 <kolmodin> :)
00:35:35 <kolmodin> np
00:35:53 <dogand> kolmodin: what's the relative path to my_account/hirc/main.hs ?
00:36:45 <kolmodin> use ~dogand/hirc/main.hs
00:37:10 <dogand> no that wasn't right
00:38:39 <Matt-W> the shell will expand that, but you may not be able to use it directly in a program unless it's passing through the shell at some point
00:38:56 <dogand> yep
00:39:19 <dogand> isn't there some configured command for using the 2003 version?
00:39:36 <dogand> i figured there must be something like that
00:40:20 <dogand> anyways i'll have to check that later, i've got class
00:40:24 <dogand> thanks for the help
00:49:06 <musasabi> hmm why does GHC cause problems with weak symbols?
00:52:35 <musasabi> If I don't supply -O to g++ it emits bogus weak symbols and then ghc dies as they have no definitions.
01:37:04 <bourbaki> moin
02:20:32 <boegel> is it possible to give a certain function two different types ? as in Type1 OR Type2
02:20:45 <boegel> hello #haskell btw :p
02:21:33 <ibid> there are ways to get the effect, depending on what you want to do with it
02:22:34 <boegel> well, I have something like this: data Material = {diff :: Color} 
02:22:40 <boegel> but that's just for solid colors
02:23:10 <boegel> if I want to allow perlin noise too, the function needs the intersection point (among some other things), so something like this:
02:23:34 <boegel> data Material = {diff :: Point3D -> Color}
02:24:29 <ibid> can't you use a standard algebraic type for the type of diff?
02:24:39 <boegel> ibid, meaning ?
02:25:22 <ibid> data DiffType = Solid Color | PerlinNoise (Point3D -> Color) ; data Material { diff :: DiffType }
02:25:25 <ibid> or something
02:25:35 <ibid> += :)
02:26:16 <boegel> that could be a solution yes :) haven't thought of it in that way :)
02:26:18 <boegel> thx !
02:26:56 <ibid> np
02:28:17 <boegel> I'll go do some work..
02:28:19 <boegel> bye
02:42:45 <flodin> anyone here tried making a parser for context-free grammars that doesn't use regular expressions to get tokens?
02:43:10 <flodin> i'm wondering how a context-free grammar / parser would be made greedy
02:43:38 <flodin> like, it should match "x&&y" as logical-and, not bitwise-and between x and a pointer to y
02:46:07 <musasabi> flodin: see e.g. try in parsec
02:46:19 <musasabi> the parsec docs talk about matching longest first.
02:47:38 <flodin> thanks
02:57:45 <flodin> does a parser like this actually allow you to take over parsing of the actual source file that uses the library? The docs talk about replacing the lexer with your own too...
02:59:00 <dons> you can usually plug in your own lexer with haskell parsers
02:59:22 <flodin> ok
02:59:25 <dons> they almost always just want a [Token], so any function that provides that will work
03:42:34 <musasabi> How does usually interface with libraries with their own top level loops?
03:47:17 <Lemmih> Like with OpenGL?
03:48:31 <musasabi> yes, or Gtk
03:53:29 <flodin> gtk has an explicit call to GtkMainLoop or something like that doesn't it
03:55:26 <flodin> seems to me like a fully acceptable if not desirable solution
03:56:32 <musasabi> so do something like:
03:57:04 <musasabi> forkIO $ let loop = processActions >> yield >> loop in loop
03:57:57 <musasabi> btw is it guaranteed that FFI functions are not interrupted by haskell thread switches?
04:34:06 <Philippa_> musasabi: take a look at wxHaskell once again - though the threading's somewhat broken there
04:34:11 <Philippa_> but in all seriousness, forkIO isn't enough
04:34:24 <Philippa_> you'll be blocking on the lib's main loop all the time
04:35:14 <Philippa_> I had to use forkOS in whirc - sadly wxHaskell doesn't have a threadsafe way to post it new events, so I'm stuck with an idle loop polling for stuff over a Chan too :-(
04:41:04 <musasabi> hmm have to tinker about that..
04:46:33 <flodin> haskell doesn't use native threads eh?
04:47:02 <musasabi> no, soft threads.
04:47:36 <flodin> is that an inherent limitation in the language or just an implementation issue
04:48:20 <musasabi> implementation issue
04:48:29 <musasabi> and most of the time it is better that way
04:48:41 <flodin> yeah
04:48:48 <bourbaki> moin
04:49:46 <flodin> with strictly computational stuff perhaps the compiler can perform some automatic threading instead, since parallelizing is fairly trivial when you don't have side effects
04:50:34 <musasabi> that does not help unless you are on mp.
04:50:43 <musasabi> and then you can use parallel haskell ;)
04:52:05 <flodin> that's a separate language specification?
04:54:16 <boegel> hello everybody
04:55:20 <bourbaki> hi
04:55:31 <boegel> I had some fun with my perlin noise function: http://studwww.ugent.be/~kehoste/thesisPublic/perlin/perlinShowcase.png
04:55:36 <bourbaki> boegel http://conal.net/papers/bridges2001/bridges-lowres.pdf
04:55:45 <bourbaki> boegel http://users.info.unicaen.fr/~karczma/arpap/texturf.pdf
04:55:53 <bourbaki> and this is for your friend boegel
04:55:59 <bourbaki> boegel http://users.info.unicaen.fr/~karczma/arpap/cleasyn.pdf
04:56:22 <boegel> I did resize the image, because I'm getting close to my quota... I think it needs anti-aliasing (the original image)
04:56:30 <bourbaki> :)
04:57:36 <boegel> bourbaki, I think I've read the first one when I was choosing my thesis subject... maybe I should read it again
04:58:05 <bourbaki> heh :) the others are more interesting imho
04:58:19 <bourbaki> the last one deals with sound synthesis with haskell
04:58:51 <boegel> I'll mail that link to my friend :) thanks :)
04:58:57 <boegel> how do you like the image bourbaki  ?
05:00:20 <bourbaki> i like it though the upper left doesnt look like wood ;)
05:00:46 <boegel> bourbaki, it's a start :p
05:00:53 <bourbaki> heh
05:01:13 <bourbaki> anyway good work how much time have you left for your thesis?
05:01:27 <boegel> I have until July 2005
05:01:47 <bourbaki> wow thats a long long long time :)
05:02:00 <boegel> but I have big tests (you know, final grades for each course, how do you call them), and I have to write +- 70 pages on it
05:02:12 <bourbaki> heh
05:02:18 <bourbaki> ok thats a log
05:02:19 <bourbaki> er lot
05:02:28 <boegel> it could be more though ;)
05:02:35 <bourbaki> bleh i need to finish this damn presentation
05:02:58 <bourbaki> we have to write something like 20 pages if i remember correctly
05:03:02 <boegel> but I think when I have perlin workng 100%, I'll just do reflection and transparency, and then I'll check out the GUI part and the proving part
05:03:46 <bourbaki> damn presentations
05:04:40 <boegel> bourbaki, presentation on what ?
05:05:09 <bourbaki> machine learning
05:05:15 <bourbaki> computational learning theory
05:05:34 <xkb> like  neural networks?
05:05:41 <bourbaki> PAC, VC dimension and error bound models
05:05:46 <flodin> boegel, "proving part"?
05:05:53 <bourbaki> xkb its more general
05:06:21 <bourbaki> like what is the complexity of your samples
05:06:33 <boegel> flodin, I have to prove some properties of my raytracer, and also model some functionality without implementing it (I'm thinking about CSG)
05:06:34 <bourbaki> or what is the computational complexity
05:06:56 <bourbaki> how many errors does your learner do until he has learned a concept with a certain probability
05:07:38 <boegel> bourbaki, that doesn't sound easy
05:07:47 <flodin> boegel, ugh sounds hard
05:08:06 <bourbaki> its not that hard but i hate giveing presentations and even more i hate to make slides
05:08:11 <boegel> flodin, it depends on what you want to prove :)
05:09:54 <bourbaki> and its even more shitty cause we were two ppl in this team but the other guy just told me that he isnt able to do the presentation
05:10:34 <boegel> bourbaki, eh :s
05:10:37 <xkb> wow.. epigram is used in a course here at Radboud university
05:10:40 <boegel> nice guy :p
05:10:41 <xkb> never knew that
05:11:10 <boegel> xkb, we have a course on Haskell (and Prolog) at our univeristy
05:11:18 <bourbaki> what is epigram again?
05:11:22 <boegel> s/isty/sity
05:11:32 <earthy> xkb: which course?
05:11:38 * earthy has to send a maths student there. ;P
05:12:07 <earthy> Epigram is a dependently type haskell-like functional language
05:12:20 <flodin> i wish they used haskell instead of ML around here
05:12:57 <xkb> earthy Ill paste the url
05:13:05 <xkb> http://www.cs.kun.nl/%7Epeter88/onderwijs/GP2004-2005/index.html
05:13:09 <xkb> voilla
05:13:26 <xkb> its also on Generics and Combinatory programming
05:14:23 * boegel is going to throw himself on his "Fuzzy models" syllabus
05:14:25 <boegel> bye !
05:14:38 <bourbaki> bye
05:17:22 <Philippa_> xkb: my uni's got a course on Epigram
05:17:29 <Philippa_> 2nd/3rd year undergrad, too
05:17:40 <Philippa_> OTOH, given who's teaching it it's sorta not too surprising
05:18:02 <xkb> eh
05:18:25 <xkb> who's teaching it?
05:18:26 <xkb> :D
05:19:05 <earthy> philippa: a certain mr. McBride?
05:22:29 <bourbaki> does anyone happen to know how i get something under something else in latex ? not as an idex but directly under the other symbol
05:22:59 <Philippa_> earthy: not quite, though he shows up in the department once in a while IIRC
05:23:28 <Philippa_> Thorsten Altenkirch. Last time I saw his name outside the uni, he was in the "thanks to" section in the brick book :-)
05:25:24 <Philippa_> types're pretty much what he does AFAICT
05:26:26 <earthy> ah, yes.
05:27:27 <earthy> bourbaki: \stackrel  ?
05:27:54 <bourbaki> earthy \stackrel{}{} ?
05:28:03 * earthy nods
05:29:00 <bourbaki> earthy looks not quite like what i wanna have it makes the upper part smaller i want a subscript
05:29:09 <bourbaki> where the lower part is smaller then the upper part
05:30:53 <earthy> hm...
05:31:05 * earthy isn't enough of a TeX wizard to know how to do that
05:32:43 <earthy> but \overset \underset and \sideset might help
05:32:57 <earthy> \overset{}{}  \underset {}{} and \sideset{}{}
05:33:32 <earthy> wheret \sideset puts stuff in the superscript and subscript positions of large operator symbols
05:34:02 <earthy> (it helps to have the right reference materials at hand ;))
05:34:20 <earthy> these are in amstex though
05:34:20 * shapr yawns
05:34:26 <bourbaki> cool thanks
05:34:30 <bourbaki> moin Shammah
05:34:32 <bourbaki> er shapr
05:34:55 <shapr> Anything's possible, with enough motivation.
05:35:23 <shapr> huh, thorsten got thanks in the brick book?
05:35:23 <shapr> wow, nifty
05:35:32 <bourbaki> earthy thanks that did the job :)
05:35:45 <bourbaki> whats the birck book again?
05:35:51 <shapr> TaPL
05:36:05 <shapr> brick book == Types and Programming Languages
05:36:11 <shapr> by Benjamin C. Pierce
05:36:41 <bourbaki> how many pages?
05:36:48 <shapr> um, lots.
05:37:17 <shapr> 6a9 says my handy brick
05:37:24 <shapr> er, 619
05:37:40 * shapr was thinking something completely different in hexademimal
05:37:56 * shapr gives up on correcting his various typos.
05:41:40 <Lemmih> shapr: Do you keep track of how much you unicycle?
05:43:37 <bourbaki> is that book a must buy?
05:43:40 <bourbaki> moin TheHunter
05:43:52 <TheHunter> moin bourbaki 
05:43:57 <TheHunter> which book?
05:44:11 <bourbaki> TaPL
05:44:11 <bourbaki> [14:43] <shapr> brick book == Types and Programming Languages
05:44:23 <bourbaki> whats the euler e in latex?
05:47:19 <shapr> Lemmih: not lately, but I've been considering that.
05:47:34 <shapr> there's an exercise tracking application recently added to debian
05:47:54 <shapr> bourbaki: for certain areas of CS, TaPL is a must-buy.
05:48:03 <shapr> that's my opinion at least.
05:48:04 <bourbaki> like?
05:48:08 <TheHunter> yeah, i've been wondering myself if i should buy this book. stupid library here doesn't have it.
05:48:16 <Lemmih> What's it's name?
05:48:33 <bourbaki> what does it enlist that is of interest?
05:48:44 <xkb> Pierce's book is quite good
05:48:47 <shapr> If you require full understanding of type systems like HM, that's a very good book.
05:49:06 <Lemmih> shapr: What's the name of the package?
05:49:07 <shapr> I'm very fond of TaPL because it starts in a way that I can understand, and goes up like a rockt.
05:49:14 <shapr> Lemmih: lemme check
05:52:22 <bourbaki> the problem with rockets is they explode at some time t ;)
05:52:22 <shapr> Lemmih: I can't find it :-/
05:53:16 <Philippa_> so long as you're not bothered about the proofs, odds are you'll survive the explosion with TaPL
05:53:51 <Philippa_> I've been using it for reference again, I figure I should bash out an explicitly-typed core language for Tyop before I carry on with my experiments...
05:54:12 <Philippa_> unfortunately I'm starting to suspect it'd need the F-omega-sub treatment, which is scary
05:54:21 <shapr> I'm nearly through TaPL the first time, I plan on actually implementing everything in Haskell the second time through.
05:54:32 <shapr> who knows what year that will be though =)
05:55:02 <shapr> so, what's going on?
05:57:24 <shapr> that much huh?
05:57:59 <Philippa_> heh
05:57:59 <tuomov> not much here at least
05:58:02 <Philippa_> er, I've not been doing much coding, but some reading the last few days
05:58:04 <Philippa_> and a lot of gaming
05:58:06 <flodin> how long would you say it takes for a hobbyist to become productive in writing practical programs in haskell
05:58:13 <Lemmih> I've had a lot of fun with GreenCard and I've attached a speed monitor to my unicycle.
05:58:24 <Philippa_> oh yeah, my boyfriend's seen The Usual Suspects at last. I'm surprised he managed to avoid it that long
05:58:25 <tuomov> concerning type theory, I've been slowly gravitating towards that or relatedly some sort of formal mathematics for a phd research subject
05:58:54 <tuomov> I should probably figure out some prof to bother..
05:59:13 <earthy> flodin: depends on how much time the hobbyist is willing to invest
05:59:26 <shapr> Lemmih: wow! what kind of speed monitor?
05:59:40 <shapr> flodin: jump right in, do you have any questions? do you want the #haskell intro?
06:00:17 <earthy> but, initial takeup should be within a week or two
06:00:33 <musasabi> /c/c
06:00:58 <shapr> flodin: hej, du Ã¤r nÃ¤stan min granne! (boden ;-)
06:00:59 <Lemmih> "Cat eye Velo2" to be precise. It can monitor current speed, average speed, time used and total distance.
06:01:28 <shapr> Wow, nifty! Is yours wired/wireless/optical/geared/inertial/gps?
06:01:41 <flodin> earthy, hard to say... how about if I say he learned as much in python in about four weeks
06:02:03 <Lemmih> shapr: It has a magnet on the wheel.
06:02:04 <flodin> shapr, hej :)
06:02:38 <flodin> shapr, i'm not looking to learn it right this second... schedule is kinda full atm
06:02:49 <shapr> Jag vill ha en funktionel sprÃ¥k traffa i norrbotten!
06:02:55 <shapr> ah, too bad.
06:02:59 <shapr> Haskell is totally awesome.
06:03:06 <Lemmih> It was clearly not designed for a unicycle so it looks kinda hackerish (lots of duck tape).
06:03:09 <shapr> it kicks ass and takes names.
06:03:24 <shapr> Lemmih: that sounds significantly cooler than a boring cycle speed thingy.
06:03:29 <shapr> you got pix?
06:03:32 <flodin> maybe in two weeks i'll start looking at it an hour / day or so
06:04:02 <shapr> Haskell is almost the coolest language I've got my hands on. With some minor additions, it is.
06:04:03 <Lemmih> shapr: No /-: I should get a digital camera.
06:04:18 <shapr> me too. I have a chemical dependency camera at the moment.
06:05:14 <flodin> shapr, yeah i tried what seemed like a fairly "official" tutorial, i like it a lot... very beautiful
06:05:32 <flodin> and i was looking to do my current project in it, but didn't dare to take that path
06:05:43 <shapr> The most amazing thing about Haskell is that it just gets more beautiful.
06:05:51 <flodin> in case i would run into serious problems I wanted to be safe home with a language i had a lot of experience in
06:06:05 <shapr> All the other languages I've tried start out like a mental diamond, big sharp sexy powerful ideas...
06:06:23 <shapr> and then, after you've used the implementation for awhile...
06:06:32 <shapr> everything gets fuzzy.
06:06:55 <shapr> Haskell has a few flaws, but the big ideas are still whole.
06:07:08 <shapr> Not only that, Haskell is simpler than Python, and more powerful!
06:07:23 * shapr gets out the lambda pom-poms
06:07:35 * shapr does the cheerleader thing
06:08:07 <flodin> flaws such as?
06:09:09 <shapr> Haskell has pretty much one flaw, in my opinion. The only thing that keeps me from starting a jihad to get the whole world using Haskell is that resource usage is not as predictable as I would like.
06:09:29 <flodin> the prefect at the umu CS department loves ML, so in a sense it's pretty big on functional languages, but in another sense it's outdated
06:09:56 <flodin> i see. Yeah that's a problem I have with most languages that do not explicitly manage resources
06:10:01 <flodin> java is the same
06:10:19 <shapr> In general, it's less of a problem with Haskell, but lazy evaluation can magnify that tremendously.
06:10:46 <shapr> But, if you want to hear my list of flaws with Python, it'll be a lot longer. And I could write a small book on the problems of Java.
06:11:09 <shapr> Anyway, Haskell is the best language I've seen yet. Until something better comes along, I'll stick with Haskell.
06:11:19 <mflux> "The Problems Of Java".. could be a best seller among some parts of the it community.
06:11:29 <shapr> Epigram might be better than Haskell is a few years. That would be cool.
06:12:45 <Philippa_> shapr: you just reminded me of something mildly sick I'd like to do with core Tyop if I can get away with it...
06:12:55 <flodin> is that an effort to fix things in haskell, or does it have other design goals
06:12:59 <Philippa_> in a word: regions
06:13:06 <Philippa_> other design goals
06:13:09 <Philippa_> it's dependantly typed
06:13:21 <Philippa_> so it's a different kind of beast rather than the same but better
06:14:02 <shapr> Right, it's not Haskell++, it's ... hard to describe :-)
06:14:48 <shapr> You run up against the limits of Haskell's type system when you try to enforce behavioural properties. Epigram can hold behavioural properties with its type-system.
06:15:20 <xkb> inforce properties of types depending on their contents
06:15:23 <shapr> Java's pre-cambrian type-system can't even consider limiting the length of a list with type declarations.
06:15:29 <xkb> is that correctly formulated?
06:15:59 <flodin> shapr, and that is a good thing because you want to find program errors at compile time?
06:16:13 <Philippa_> right
06:16:14 <shapr> Well, 'Enforce' rather than inforce, but I only say that in hopes you'll fix my dutch the next time I screw up ;-)
06:16:26 <Philippa_> Epigram does a lot more to help you know your functions're total, for example
06:16:32 <flodin> i see
06:16:33 <xkb> shapr: Ok :D
06:16:50 <Philippa_> (= produce meaningful output for all possible inputs)
06:17:00 <flodin> yeah languages like java and python have taken the other route, with verification by unit testing and the like
06:17:35 <shapr> Also, epigram does incremental typing, and its spiffy user interface means you can escape much of the boring keyboard work.
06:17:38 <flodin> so typing isn't as important. Java's typing is just stupid, though :)
06:17:46 <flodin> it doesn't help to find errors, it's just in the way
06:17:50 <flodin> you have to do downcasting all the time
06:18:07 <shapr> yah, casting back and forth to Object really sucks.
06:18:23 <shapr> and using reflection to load classes at runtime doesn't help either.
06:19:25 <Philippa_> my biggest memory of Java's type system involved a massive case of depression while implementing type checking in a toy compiler via the visitor pattern and inheritance
06:21:02 <BitBusta> hello
06:21:10 <shapr> Guten Tag BitBusta, wassup?
06:21:18 <shapr> BitBusta: are you learning Haskell?
06:21:37 <BitBusta> i try i try
06:22:34 <BitBusta> i want to have a function doing a+b*3*c-(d+3), but it doesnt work :/
06:22:40 <BitBusta> any ideas whats wrong?
06:23:15 <BitBusta> a,b,c,d should be integers
06:23:16 <Lemmih> BitBusta: Telling us about the error message might be helpful.
06:23:17 <BitBusta> ^^
06:23:26 <shapr> Ãla ows 
06:23:27 <BitBusta> variable not in scope
06:23:46 <Lemmih> BitBusta: What's the name of the variable?
06:23:51 <shapr> flodin: any more questions about Haskell? want to see some demo code or meet our friendly irc bot?
06:23:53 <shapr> @yow
06:23:53 <lambdabot> This is a NO-FRILLS flight -- hold th' CANADIAN BACON!!
06:24:13 <ows> Hi shapr
06:24:41 <flodin> shapr, thanks, i'll get back to you on that in two weeks perhaps. :)
06:24:50 <BitBusta> calcu1 xD
06:24:59 <BitBusta> why?
06:25:02 <shapr> flodin: ok, feel free to bug me anytime, if I'm awake I'll try to help.
06:25:03 <BitBusta> does it matter?
06:25:19 <Lemmih> BitBusta: And where do you bind it to a value?
06:25:24 <BitBusta> maybe i forgot some brackets?
06:25:27 <shapr> flodin: I learned Haskell as a hobbyist myself, so I may be able to help your hobbyist friend.
06:25:52 <flodin> that'd be me ;)
06:26:01 <shapr> ah, excellent
06:26:16 <BitBusta> calcu1 = a+b*3*c-(d+3)
06:26:27 <BitBusta> whats wrong there?
06:26:28 <Philippa_> a, b, c and d aren't defined there
06:26:40 <BitBusta> i know
06:26:42 <BitBusta> i used const
06:26:50 <Philippa_> "const"?
06:27:02 <BitBusta> a=3 b=2 etc.
06:27:09 <BitBusta> oki?
06:27:12 <Philippa_> where'd you define those?
06:27:19 <BitBusta> above?
06:27:21 <BitBusta> ...
06:27:33 <Philippa_> where *in the code* did you define those?
06:27:34 <Lemmih> BitBusta: The compiler is saying that some variable isn't in scope. Which variable is it refering to?
06:27:44 <BitBusta> what do i know
06:28:05 <xkb> BitBusta: paste the code somewhere on the web, so we can have a look
06:28:05 <Philippa_> BitBusta: it helps if you show us all the code at once
06:28:21 <Lemmih> @wiki HaskellIrcPastePage
06:28:22 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
06:28:44 <xkb> or  http://np.freecode.nl:8888/ :P
06:28:55 <xkb> oh.. that has no haskell syntax highlighting
06:28:59 <xkb> nvr mind
06:29:15 <BitBusta> i just want to know if the syntax of a+b*3*c-(d+3) is correct
06:29:21 <BitBusta> maybe some brackets are missing?
06:29:34 <Janni> Hi.
06:29:35 <Philippa_> the syntax there is correct insofar as it'll evaluate
06:29:39 <Lemmih> Hey Janni.
06:29:43 <shapr> guten tag Janni, wie geht es?
06:29:49 <earthy> insofar as it'll typecheck... I'd say
06:30:19 <Igloo> It won't typecheck except in certain envs  :-)
06:30:24 <BitBusta> but it doesnt evaluate
06:30:34 <earthy> igloo: exactly :)
06:30:38 <shapr> Janni: machts das spaÃ?
06:30:41 <Philippa_> BitBusta: because it's got no definition for a, b, c or d
06:31:06 <BitBusta> 05[15.11 - 15:27] <BitBusta> 01i used const 
06:31:06 <BitBusta> 05[15.11 - 15:27] <Philippa_> 01"const"?
06:31:06 <BitBusta> 05[15.11 - 15:27] <BitBusta> 01a=3 b=2 etc. 
06:31:15 <Philippa_> FFS
06:31:18 <Philippa_> do *not* use colours
06:31:24 <Philippa_> I can't even see your text. Know why?
06:31:31 <Philippa_> Because I have a black background
06:31:32 <shapr> const doesn't really assign a value to an identifier.
06:31:55 <Philippa_> I could've sworn there's no const construct in Haskell?
06:32:07 <shapr> @type const
06:32:09 <lambdabot> const :: forall a b. a -> b -> a
06:32:11 <Lemmih> Philippa_: const x y = x
06:32:15 <shapr> right
06:32:16 <Janni> shapr: macht _was_ spass?
06:32:26 <shapr> Janni: oh I dunno, life in general?
06:32:28 <BitBusta> k thx
06:32:28 <Igloo> BitBusta: Showing us the actual error and/or code might make it possible for us to help
06:32:32 <BitBusta> test it
06:32:36 <BitBusta> ...
06:32:40 <Janni> shapr: Oh well, life in general is really worth living
06:32:46 * shapr griins
06:32:48 <Philippa_> BitBusta: we don't need to test your one-liner
06:32:48 <shapr> that's good to hear
06:32:51 <Janni> Don't want to miss it
06:32:52 <Philippa_> your one-liner won't work
06:32:56 * shapr laughs
06:32:57 <Philippa_> we've told you why it won't work as one line, too
06:33:31 <Philippa_> shapr: that const function sorta makes sense I guess - \calc relic, yeah?
06:34:20 <Janni> Someone here ever "successfully" used wxHaskell? (Otherwise I don't have to ask my rather specific question)
06:34:28 <xkb> yeah
06:34:31 <Philippa_> Janni: for what value of "succesfully"?
06:34:39 <Janni> Did you use tool bars?
06:34:48 <xkb> not me
06:34:49 <Philippa_> don't think I've used 'em
06:34:54 <Janni> Well, I'll just let you know my problem...
06:35:38 <chucky> has anyone here used the Network module?
06:35:44 <Philippa_> yeah
06:36:07 <Philippa_> not in great detail, but I'll drag a running copy of whirc in here if you insist
06:36:22 <Janni> I think the error occurs only with Windows. When the program start's I get the message "Can't load bitmap ''wxBITMAP_STD_COLOURS'' from resources! Check .rc file"
06:36:23 <Lemmih> chucky: Yes.
06:36:25 <shapr> I've used the Network module.
06:36:36 <shapr> lambdabot uses the Network module.
06:36:37 <chucky> I'm trying to use the connectTo function, but I can't seem to get it to work
06:36:39 <shapr> @listmodules
06:36:39 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy
06:36:39 <lambdabot> ,"dynamic","eval","hello","karma","quote","seen","state","system","topic
06:36:39 <lambdabot> ,"type"]
06:36:43 <Philippa_> ouch
06:36:57 <Philippa_> yeah, that looks windows-specific, broken toolchain-style
06:37:05 <Philippa_> well, toolchain-and-libs
06:37:23 <Philippa_> are you using one of the binary distros from the wxHaskell site? If so, send off a bug report
06:37:26 <Janni> Following instructions I found on the net for that problem (though without wxhaskell) I tried to include that wx.rc file, but don't succeed
06:37:33 <Janni> Oh, ok.
06:37:55 <Philippa_> I mean, they'll probably find a fix for you, but more importantly you shouldn't have to do anything special in the first place
06:38:07 <Philippa_> chucky: why not?
06:38:07 <Lemmih> chucky: Can you be more specific on how it fails?
06:38:11 <chucky> specifically, I'm trying to connect to a server (my own) and print the data I receive, but I keep getting EOF
06:38:47 <Philippa_> which translates as the TCP session having died, IIRC
06:39:03 <shapr> or maybe buffering settings?
06:39:12 <chucky> using NoBuffering right now
06:39:25 <shapr> that should work 
06:39:52 <chucky> correction: Now it doesn't die, but it should receive some input
06:40:05 <chucky> it keeps waiting at hWaitForInput
06:40:43 <chucky> whoa nevermind
06:40:49 <chucky> It just took a VERY long time
06:41:16 <Lemmih> Is the server also using NoBuffering?
06:43:14 <chucky> it's not my server program, but it's instantaneous when using telnet
06:43:24 <chucky> never mind, I can wait, right now anyway
06:43:35 <BitBusta> got it thx cya
06:47:27 <Lemmih> Time to unicycle.
06:47:39 <shapr> yay!
06:47:45 <shapr> it's already dark here.
06:47:57 <shapr> I've been doing night unicycling  at 4pm.
06:48:18 <kristnjov> is there really a big difference?
06:48:21 <chucky> how dark?
06:48:29 <chucky> it's getting darker here as well. :(
06:48:43 <shapr> the light is totally gone now.
06:48:50 <chucky> but now I should go to the bank, and cash this cheque, so I can buy meaningless stuff. :)
06:48:52 <Lemmih> shapr: Unicycling in Copenhagen at 3am is _so_ cool.
06:49:16 <chucky> thanks for the help guys. See you around
06:49:21 <shapr> And yes, night unicycling is different. It's harder, and more likely you'll have a UPD.
06:49:45 <Lemmih> UPD?
06:50:35 <shapr> UnPlanned Dismount
06:50:48 <Lemmih> (o:
06:50:49 <shapr> That's the technical term for "falling off the unicycle"
06:50:49 <shapr> sometimes at high speeds :-)
06:51:06 <shapr> Lemmih: this one is my favorite so far --> http://83.226.177.116/~shae/unifilms/11_Au_TAQUET_10Mo.wmv
06:51:36 <shapr> Anyway, have fun...
06:51:47 <Lemmih> 404 /-:
06:52:32 <Lemmih> Copenhagen is almost as illuminant at night as in the day time.
06:53:29 <Lemmih> Weird. mplayer can't download it.
06:54:52 <shapr> Lemmih: better?
06:58:59 <shapr> Boden is about as dark as the inside of a sack once you leave the lighted walkways.
06:59:41 <Lemmih> OMG!
07:00:40 <shapr> We're in the boonies.
07:01:35 <Lemmih> That movie was nice (-:
07:01:46 <shapr> I like the music too.
07:01:50 <tuomov> do you have a spiked tyre? It's getting slippery outside..
07:02:14 <shapr> My tire isn't much good for ice, but it's great for snow, sand, mud, etc.
07:02:54 <musasabi> Does block protect against thread switches ?
07:03:14 <musasabi> (Control.Exception)
07:03:19 <Lemmih> Anyhow, I'm gonna go unicycle now.
07:03:26 <shapr> have fun!
07:17:56 <bourbaki> WOOHOO! presentation finished :)
07:28:14 <flodin> is appending to either end of an array O(n) in haskell?
07:28:54 <Igloo> You can't append to arrays
07:29:36 <shapr> nah, just appending
07:29:54 <flodin> well what i mean is, creating a new array that contains the original array plus an extra element at the end/beginning
07:30:07 <flodin> more precisely, contains the elements of the original array
07:30:13 <Igloo> Yes, then
07:30:33 <flodin> but the same operation on a list is O(1) right?
07:31:53 <shapr> but, if you use concatenation correctly, it can be better than you would expect
07:31:53 <shapr> for example, the ShowS class lets you put off string concatenation until you need some of the output, and only then are the strings actually built.
07:31:53 <shapr> list concatenation with ++ can work the same way. Since everything is lazy, then "foo" ++ "bar" ++ "baz" doesn't create a temporary string.
07:31:53 <shapr> oh wait, you said array
07:31:57 <shapr> doh
07:32:29 <shapr> I know that array access is O(1)
07:35:04 <Igloo> flodin: Putting things on the front of a list is O(1), on the end is O(n)
07:35:20 <flodin> Igloo: right, ok
07:35:33 <flodin> shapr: yeah lazy evaluation can do some funky stuff to complexity. Just thinking about what happens behind the scenes
07:35:46 <HET2> yes
07:35:49 <Igloo> (assuming you use the whole result)
07:36:05 <flodin> i mean, with respect to prefixing things to the front of a list
07:37:08 <HET2> Igloo: werent you the person i was talking to the other day? asking if iterate would take a function which takes more than one curried argumetn?
07:37:29 <musasabi> I am trying to create polymorphism with functional dependencies.
07:37:39 <Igloo> Yup
07:37:47 <HET2> Igloo: you were mistaken
07:38:12 <musasabi> my base case is "class Foo a b | a -> b where foo :: Attr a c"
07:38:28 <Igloo> You asked if you could pass a functino of type (a -> a -> a) where iterate expected one of type (a -> a)
07:38:31 <musasabi> This allows me to use foo polymorphically for different as
07:38:51 <HET2> Igloo: i think i made it work the other day
07:38:55 <HET2> Igloo: let me reproduce and formalize
07:39:23 <musasabi> but how do I convert "myfoo :: Bar b => Attr A b" to Foo ?
07:40:24 <HET2> Igloo: hmm
07:41:49 <HET2> Igloo: i forgot :/
07:42:37 <bourbaki> Igloo are you a relative of CptIgloo ?:)
07:43:03 <Igloo> Err, NAFAIK  :-)
07:43:44 <bourbaki> heh
07:43:54 <bourbaki> give you all your gold ;)
07:43:59 <bourbaki> Igloo where are you from?
07:44:05 <Igloo> England
07:44:41 <bourbaki> do you have cptIgloo there also?
07:44:56 <shapr> musasabi: explain?
07:44:59 <flodin> sounds like an ice cream
07:45:05 <Igloo> The fact I haven't got a clue what you're going on about makes me think not
07:45:15 <Igloo> Although if it involves you giving me gold I'm all for it
07:45:24 <musasabi> shapr: I want the "target" type of the functional dep to be a class instead of a type.
07:45:38 <bourbaki> Igloo sec
07:48:32 <bourbaki> damn i dont know how hes written i have to go to the store anyway so ill have a look at the package ;)
07:53:07 <Lemmih> The Lemmih is back.
08:23:25 <Lemmih> Hello aFlag.
08:23:58 <aFlag> Could someone tell me if my code looks correct? http://rafb.net/paste/results/rVUMnk89.html i don't really know how to test it :(
08:23:58 <aFlag> hi Lemmih 
08:25:48 <Igloo> You can just say (h, _, _) <- accept serv
08:26:03 * shapr jumps up and down on WASH
08:26:22 <Lemmih> Why can't you test it?
08:26:31 <shapr> bringert: I haven't heard from Koen, hopefully he's putting his time into getting QC2 ready for everyone.
08:26:46 <Igloo> You should be able to test the server with telnet
08:26:56 <aFlag> ok, thanks
08:27:26 <Igloo> What're you using WASH for, shapr?
08:28:40 <bourbaki> Igloo here you are ;) http://www.heiek.de/Bilder/bild170.jpg
08:28:56 <wilx> :))
08:29:05 <bourbaki> Igloo to get rid of DIRT?:)
08:31:13 <bourbaki> Igloo and he sells fish fingers
08:32:03 <Igloo> Ah, we have a captain birdseye
08:32:07 <bourbaki> :)
08:32:27 <bourbaki> i know birds eye peppers from afrika quite good
08:33:21 <Igloo> http://www.unilever.co.uk/images/brands/fishfingers.jpg is a shockingly bad picture
08:34:02 <bourbaki> i wonder if its the same company
08:34:32 <bourbaki> just saw a pic from spain or so that looks exactly like that guy but has the iglu name
08:34:52 <chucky> ugh damn parsec docs. Why can't he write do-notation like ordinary people?
08:34:58 <shapr> Igloo: at this point, hopefully nothing.
08:35:03 <Igloo> Heh
08:35:52 <shapr> actually, I use WASH for several apps.
08:35:59 <bourbaki> warghl i wonder when my tv set will brake (hopefully soon)
08:36:02 <shapr> But I'm becoming fond of Text.HTML instead.
08:36:05 <shapr> er Text.Html
08:38:08 <aFlag> Igloo, the way i wrote the code when will movDele (movDele <- (hGetContents handler)) get the string? I thought it was when i typed newline or something like that, but it's aparently not
08:38:15 * shapr thinks
08:38:32 <Igloo> aFlag: It'll depend on the type of buffering at each end
08:38:42 <shapr> Um, HaXML generates types for xml, so you can't create illegal stuff.
08:38:50 <Igloo> telnet is probably line buffered by default...I'm not sure what the Haskell handle will be
08:39:07 <Igloo> You can hSetBuffering NoBuffering (or LineBuffering) h (I might have the arguments the wrong way round)
08:39:30 <aFlag> oh, i see
08:39:42 <shapr> Can I pull out a subset of a DTD so that halipeto subchunk calls will always generate markup that's legal to the DTD level they're at?
08:40:07 <bourbaki> http://newark.pardey.org/cgi-bin/flat.cgi?page=book#english
08:41:59 <shapr> um, I can't build yi :-/
08:42:17 <shapr> yay, BLob is licensed.
08:42:19 <aFlag> it works! :)
08:42:23 <aFlag> thanks Igloo
08:47:02 <musasabi> Is there a way to freeStablePtr from the C side in a portable manner?
08:48:26 <Lemmih> Can you export it?
08:49:21 <musasabi> yes, but ghc defines it in C headers and I am wondering whether that is portable.
08:49:26 <aFlag> Igloo, something i don't understand, how that function loops?
08:49:32 <aFlag> the one i did
08:50:32 <aFlag> i was going to add servidor f on the end of servidor but during the test i realized that it wasn't needed
08:53:07 <shapr> can anyone build yi?
08:53:39 <Igloo> It doesn't look, it just keeps going until it runs out of input
08:56:05 <aFlag> but what exactly is the thing that loops?
08:56:40 <aFlag> i mean, it goes all the way to hPutStr h (f movDele)
08:57:00 <aFlag> then it seems to go back to at least movDele <- (hGetContents h)
08:57:00 <Igloo> I think it's laziness that's confusing you
08:57:17 <Igloo> Just because hPutStr starts outputting doesn't mean hGetContents has finished inputting
08:57:29 <aFlag> oh
08:58:13 <aFlag> hPutStr outputs whenever a newline happens because i setted buffering to LineBuffering, right?
08:59:28 <aFlag> although i still find it a bit confusing, the thing i understood about laziness was that infinite list example, but this is a bit harder to get :P
09:00:45 <Igloo> Ermmm, I'm not sure which of input and output buffering gets set. Anyone?
09:00:57 <Igloo> But I suspect your telnet client (if you are using one) is linebuffering its output anyway
09:01:35 <shapr> hiya Si\, how's code?
09:02:42 <aFlag> Igloo, it is, but then it gets back the message from the server
09:03:03 <aFlag> before i set it up to line buffering it wasn't getting anything
09:03:30 <TheHunter> could anyone using debian who had yi working once do dpkg -S `which aclocal` ?
09:04:37 <Si\> fine ty, shapr
09:09:05 <shapr> TheHunter: /usr/sbin/aclocal not found
09:09:07 <Igloo> Aaargh. I need look-ahead to lex TH
09:09:29 <Igloo> sbin?!
09:10:04 <TheHunter> hmm, thanks shapr 
09:10:41 * Igloo does some nasty hacks to get around it
09:11:38 <shapr> TheHunter: ever after rearranging my path, still  /usr/bin/aclocal not found
09:11:48 <shapr> any idea what's causing that?
09:15:24 <Igloo> Does it actually exist? If so, try without the leading /
09:20:27 * TheHunter gives up
09:21:47 <TheHunter> stupid mkswap
09:22:03 <TheHunter> doesn't seem to work for files anymore
09:35:28 <bourbaki> ahh the achievements of the modern world! robots make our live easier
09:35:40 <shapr> TheHunter: aha, chase found it
09:35:48 <shapr> automake1.8
09:35:52 <TheHunter> ok, i just solved it
09:35:59 <TheHunter> thanks
09:36:00 * shapr installs automake1.9
09:36:08 <bourbaki> after haveing machines that record our favorite movies from tv now we have this brand new robot here saveing us the time to go to the toilet
09:36:09 <bourbaki> http://triggur.org/robodump/
09:36:22 <shapr> I'm not sure I want to try that url.
09:36:44 <TheHunter> apt-cache show libtool + looking at "Suggests:" works...
09:36:58 <shapr> have you tried synaptic?
09:37:01 <shapr> it's quite nice
09:37:28 <boegel> bourbaki, heh :) nice link
09:37:29 <TheHunter> i can't tell you how i get freaked out by stuff like automake, configure and Makefiles.
09:37:44 <bourbaki> boegel any new progressions?
09:38:04 <shapr> TheHunter: oh, I agree. Have you seen maak?
09:38:32 <TheHunter> nope, never heard of it.
09:38:36 <boegel> bourbaki, besides the wood that isn't wood not really... I studied some fuzzy model theory and went squashing, so I didn't continue coding
09:38:56 <boegel> I finally got to doing some sports again
09:39:01 <boegel> and I feel it like hell :)
09:39:30 <bourbaki> heh :) i just started to train again like 8 weeks ago again :)
09:39:41 <shapr> TheHunter: https://svn.cs.uu.nl:12443/repoman/info/maak
09:39:49 <bourbaki> what do you need fuzzy model theory for?
09:39:56 <shapr> fuzzy squash balls?
09:40:01 <bourbaki> :)
09:40:48 <boegel> bourbaki, it's a course I follow
09:40:54 <bourbaki> ah ok
09:41:04 <boegel> we had to choose some courses, and that seemed interesting to me... I was right :)
09:41:22 <TheHunter> alright, yi seems to work!
09:41:31 <boegel> I'm in doubt if I should do a PhD...
09:41:51 <shapr> TheHunter: http://www.scannedinavian.org/~shae/maak-trunk.tar.bz2
09:41:52 <bourbaki> why is that?
09:42:07 <shapr> it's a build tool written in Haskell, by Eelco Visser I think?
09:42:11 <shapr> kosmikus mentioned it to me
09:42:21 <shapr> it follows my ideas on how make should really work.
09:42:25 <bourbaki> boegel why?
09:42:27 <TheHunter> shapr: thanks, i'll have a look at it.
09:42:40 <shapr> I haven't been able to get it to build sadly
09:42:46 <shapr> but I haven't put much time in there ither.
09:42:49 <shapr> "either"
09:43:02 <boegel> bourbaki, I don't know if it is something that would suit me... I like the idea of doing research and stuff, but the title of PhD doesn't interest me
09:43:07 <shapr> how did you get Yi to build?
09:43:09 <boegel> (is that correct English)
09:43:17 <bourbaki> i see
09:43:33 <TheHunter> shapr: i downloaded the latest cvs hs-plugins snapshot and everything went fine.
09:43:37 <boegel> bourbaki, also, my girlfriend thinks I will be on congresses and stuff too much :p
09:43:38 <shapr> ohh
09:43:40 <Spark_> dont do it for the title, and also dont not do it because of the title
09:43:43 <shapr> I should have thought of that.
09:43:45 <Spark_> do what you want because you'll enjoy it
09:43:47 <bourbaki> hehehe
09:43:54 <boegel> Spark_, I'm planning to do that :)
09:44:09 <bourbaki> well i guess i wont finish even my bsc
09:44:11 <boegel> I haven't figured it out yet... anyone in here doing his PhD ?
09:44:11 <bourbaki> again :)
09:44:12 <Spark_> i want to do a phd, but i dont know what *in*, which is a little distressing
09:44:22 <TheHunter> ok, it's time to go home. Bye everyone!
09:44:28 <bourbaki> bye TheHunter
09:44:28 <Spark_> bye
09:44:29 <boegel> bye TheHunter !
09:44:40 <boegel> Spark_, where are you from ?
09:44:52 <Spark_> uk
09:45:14 <boegel> Spark_, you could come to Belgium and do research on functional stuff ;)
09:45:40 <boegel> there's a Spanish guy working with the prof. where I do my thesis
09:45:43 <bourbaki> Spark_ what are your choices the ones that you can make 
09:46:00 <boegel> I could go for a PhD in functional stuff, like my thesis
09:46:11 <Igloo> Whereabouts in the UK, spark?
09:46:12 <boegel> or in Fuzzy stuff, but that's more mathematical, and kinda not my thing
09:46:14 <Igloo> :q
09:46:25 <Spark_> possible universities would be... imperial college, cambridge, york, edinburgh, warwick, some others
09:46:25 <shapr> Igloo: :w
09:46:31 * boegel sees Spark_ his head spinning
09:46:33 <Spark_> boegel: i could do yes :)
09:46:38 <boegel> Spark_, how about Oxford :)
09:46:42 <Spark_> im in imperial college at the minute
09:46:59 <Spark_> boegel: maybe oxford too
09:47:04 <bourbaki> Spark_ what fields can you make your phd in ?:)
09:47:10 <boegel> UK is a nice country
09:47:12 <Spark_> good question
09:47:21 <boegel> I went there on holiday for a week during 6 years
09:47:22 <bourbaki> what did you do your bsc in?
09:47:30 <Spark_> computer science at warwick
09:47:39 <Spark_> im now doing a masters in computer science at imperial (i got bored of warwick)
09:47:44 <boegel> boat trip on the Thames... I learned to drink in the UK :p
09:47:45 <Spark_> which is 50% more difficult :)
09:47:49 <boegel> whenI was under 18 :o
09:47:49 <Spark_> heh
09:47:53 <Spark_> yes
09:48:24 <Spark_> im interested in languages
09:48:44 <Spark_> and related issues - like types, software engineering, formal languages & semantics
09:49:04 <Spark_> i need to learn a lot more languages though
09:49:08 <boegel> bourbaki, is this you on this website ? : http://triggur.org/ :p
09:49:23 <boegel> Spark_, you should come to Belgium then ! 
09:49:27 <boegel> ever heard of FunMath
09:49:30 <boegel> ?
09:49:32 <Spark_> i'd have to speak belgiuese
09:49:38 <Spark_> beltch :)
09:49:40 <boegel> Spark_, :o
09:49:49 <boegel> you could speak English, we would understand you
09:50:01 <Spark_> heh
09:50:04 <tuomov> Spark_: you're not alone with your indecision problem :)
09:50:12 <boegel> I had a course on formal languages & semantics, and that encouraged me do to my thesis in Haskell/FunMath
09:50:19 <bourbaki> boegel do you think that i was only that evil ? MUAHAHHA
09:50:47 * boegel get scared and looks for the smallest corner to hide in
09:50:53 <boegel> s/get/gets (argh)
09:52:16 <boegel> Spark_, http://www.intec.ugent.be/data/default.html
09:52:24 <boegel> Spark_, look for Raymond Boute
09:52:41 <bourbaki> boegel did you send your friend that paper about the sound stuff?
09:52:54 <boegel> bourbaki, I did
09:53:10 <boegel> he said it will be very usefull for him, but it look quite scientific :)
09:53:20 <boegel> I also encouraged him to come here, and talk about his work
09:53:25 <bourbaki> heh :) well thats a plus imho
09:53:26 <boegel> so he can get hints from you guys
09:53:43 <boegel> his nick is mitchkov, is he shows up here when I'm not around
09:54:33 <boegel> Spark_, check this: http://www.intec.rug.ac.be/groupsites/formal/BoutHomeFram.htm
09:55:15 <boegel> bourbaki, I think he will come here sometime... when I'm back, I'll check if he's online, and encourage him some more :)
09:55:33 <bourbaki> is he afraid of the ppl here?
09:55:50 <Spark_> ah i dont like formal methods
09:55:54 <boegel> bourbaki, no, I think he thinks he won't get help here or so.. or that he's not smart enough
09:56:06 <boegel> Spark_, you said you liked formal languages & semantics ?
09:56:15 <Spark_> formal langauges = parsers and stuff
09:56:22 <boegel> Spark_, oh, like that :)
09:56:22 <Spark_> as opposed to natural langauges
09:56:29 <boegel> we'll, I have to go
09:56:32 <bourbaki> well im here also so i guess everyone can come here :)
09:56:33 <Spark_> see ya :)
09:56:37 <bourbaki> nighto
09:56:45 <boegel> I'll be back later, because I just found out I have no class tomorrow morning :)
09:56:47 <Spark_> i may go home now
09:56:54 <boegel> bye
09:56:57 <Spark_> it'll be past 6 when i get home and i can go on the net for less
09:56:57 <bourbaki> nighto Spark_
09:57:05 <br1> I want to serialize to disk a function.  There's no Show for functional types.  What can I do?  Some monad maybe?  TIA.
09:57:14 <bourbaki> past 6 sounds good :)
10:01:27 <bourbaki> thats the time i have to get to uni tomorrow
10:05:59 <dash> br1: mmm, exciting
10:06:35 <dash> do people really write such code in haskell? :)
10:09:30 * segphault wonders what a serialized function would look like.
10:09:46 <br1> I want to use Haskell as the scripting language of a game. For that I need to freeze the state of the AI.
10:09:49 * segphault thinks the default syntax is already wonderfully concise
10:10:07 <bourbaki> br1 what kind of game
10:10:25 <bourbaki> br1 btw there is an #ai here on the server :)
10:10:50 <segphault> thats interesting - using functions for state. I would think that it would be better to use lists for something like that.
10:11:32 <br1> The game is a Colonization clone.
10:12:50 <br1> In the original you could program your wagons to folow trade routes.  A trade route was a sequence of colonies and the goods the wagon was supposed to load/unload in each colony.
10:13:06 <bourbaki> br1 all written in hs?
10:14:50 <br1> I don't know.  Probably C++ too.
10:15:07 <bourbaki> heh why dont you know :)?
10:16:53 <br1> :) I was going to use Lua, but then I remembered Haskell's type safety.  I've been (re)learning haskell for the last days. It ocurred to me to do it mostly in Haskell, yes.
10:17:25 <bourbaki> a commercial game?
10:18:18 <br1> Of course not.  I'm just playing around.
10:19:53 <bourbaki> why of course ?:)
10:20:05 <bourbaki> br1 and again hop on to #ai :)
10:20:37 <br1> But my problem is haskell related.  Let me elaborate.
10:22:02 <br1> I want each wagon AI to be an Actor where:
10:22:02 <br1> newtype Actor = Actor { runActor :: Model -> (Choice, Actor) }
10:23:39 <br1> I wan t to use cps monad to be able to write each Actor.  But then I don't know how to freeze an Actor to disk. I was thinking that this may be an application of DataStructuresNot Funcitons, but I don't see how.  Any hints?
10:27:13 <bourbaki> what does this do?  { runActor :: Model -> (Choice, Actor) } can i refer to these functions then as something like actor.runactor?
10:31:39 <br1> I don't understand your question.  I use newtype because haskell won't let me declare recursive function types directly.  That I asked a few days ago in this list. The idea is that at each the function makes a choice depending on the state of the world (Model).  The next time the choice is different, may be different because I call the new Actor.
10:35:43 <Lemmih> What do you mean by "recursive function types"?
10:36:06 <bourbaki> i mean what does this exactly do? newtype Actor = Actor { runActor :: Model -> (Choice, Actor) } and what can i do with that name runActor?
10:36:37 <dash> it defines a runActor function that will extract that field from the tuple
10:37:19 <bourbaki> dash?
10:37:22 <dash> and you can create new instances by doing oldinstance{runActor=newThingy}
10:38:17 <bourbaki> is it the same as newtype Actor = Model -> (Choice,Actor) ?
10:38:29 <dash> not exactly
10:38:35 <br1> Lemmih: I meant things like: type G = Int -> (Int, G)
10:39:09 <bourbaki> dash can you explain it to me then?
10:39:17 <bourbaki> or tell me where i can read on it?
10:40:11 <Lemmih> bourbaki: 'newtype Actor = Model -> (Choice,Actor)' isn't valid Haskell.
10:40:29 <bourbaki> Lemmih why?
10:40:44 <br1> bourbaki: You can read it in the report: 3.15 Datatypes with Field Labels
10:41:05 <bourbaki> where is the report?
10:41:06 <Lemmih> Because you have omitted the data constructure.
10:41:24 <bourbaki> Lemmih i thought it was a type?
10:41:37 <Lemmih> 'newtype' is (almost) the same as 'data'.
10:41:43 <br1> http://www.haskell.org/definition/
10:42:20 <Lemmih> bourbaki: It is a type with just one datacontructure (which is gonna be optimized away in most cases).
10:42:40 <bourbaki> ah ok
10:43:53 <Lemmih> 'type G = Int -> (Int, G)' hehe
10:44:26 <Lemmih> Anyhow, I'm off to find food.
10:44:56 <br1> Bye
10:47:00 <br1> dash: Is my problem clear?  Can you help me?
10:49:25 <Igloo> newtype constructors are always "optimised away" - in fact they never exist in the first place, they are just a figment of the typechecker's imagination
10:50:51 <bourbaki> br1 3.1 is on errors
10:51:51 <br1> 3.15 is the section
10:52:17 <bourbaki> i cant find it in 3
10:53:14 <br1> Here: http://www.haskell.org/onlinereport/exps.html#sect3.15
10:54:39 <bourbaki> thx
10:54:51 <bourbaki> and how do i use the labels?
10:55:40 <br1> I know little more than you.  Just the other day Ski, from this channel explained it to me.
10:56:06 <Etaoin> runActor is a function of type Actor -> Model -> (Choice, Actor)
10:56:23 <Etaoin> it lets you get the value stored in an Actor
10:56:41 * Lemmih has returned with food.
10:56:51 <bourbaki> Etaoin so i can use the label stuff to get the value?
10:56:58 <bourbaki> data S = S1 { x :: Int } | S2 { x :: Int }
10:57:00 <Etaoin> yes
10:57:13 <bourbaki> x :: data S -> Int ?
10:57:28 <Etaoin> I've never tried that
10:57:38 <bourbaki> i mean thats the x good for ?
10:59:42 <Etaoin> yes
11:05:43 <bourbaki> warghl how very ugly
11:45:59 * shapr boings randomly
11:47:11 <thebug> why hello shapr!
11:47:37 <shapr> greetings  Mr Bug Sir!
11:47:53 <thebug> enjoying the evening?
11:48:16 <shapr> Very much. I just went for a unicycle ride in the snow, and now I am trying to build BLob
11:48:24 <thebug> excellent!
11:48:58 <chucky> damn parsec is sexy
11:49:08 <chucky> shapr: How much snow do you have?
11:51:13 <dash> parsec _is_ sexy
11:51:30 <bringert> shapr: I'm here if you have any questions
11:51:52 <chucky> bringert: I don't think there's much you can teach him about unicycling
11:51:59 <bringert> :-P
11:52:11 <dash> hello shapr
11:52:12 <bringert> shapr: btw, new darcs repo at http://www.dtek.chalmers.se/~d00bring/darcs/blob/
11:52:39 <chucky> darcs is sexy as well.
11:52:57 <dash> i've converted most of the stuff in this lisp parser to be monadic
11:53:14 <dash> http://ghostwheel.ddts.net/~washort/arnis.hs
11:53:23 <dash> the important bits of code are a lot cleaner now :)
11:53:54 <dash> i feel like i can't abstract things as much as i want to, though :)
11:54:18 <chucky> abstraction is the root of some small subset of evil
11:54:43 <dash> nah
11:56:26 <shapr> chucky: only about a handswidth of snow
11:56:37 <shapr> greetings dash, yes parsec *is* sexy.
11:56:57 <dash> shapr: So why do i keep wishing for macros =/
11:57:03 <dash> (in haskell)
11:57:05 <chucky> it only took about 5 minutes to learn as well. :) That was nice
11:57:51 <dash> also i wish there was a way to see how many args a lambda takes
11:58:09 <dash> (yes, i know why you can't)
12:00:54 <shapr> bringert: cool!
12:01:33 <bringert> I think it has a fix for some type error that seems to have been in the old version
12:04:07 <shapr> dash: you've got macros, use Template Haskell.
12:04:31 <dash> Hmmmmm.
12:04:34 * shapr wanders off to read Liftarens Guide till Galaxen.
12:06:40 <stepcut> cripe, I hate pointers
12:16:43 <chucky> :)
12:18:47 * stepcut figures out that char*& is what he needs
12:19:07 <kristnjov> you mean a const char*&?
12:19:13 <kristnjov> (funny eh)
12:19:21 <kristnjov> pointers rock but i don't know the use of them
12:19:31 <stepcut> yeah, const char *&, is what I have
12:19:33 <dash> Iä, const char* fhtagn 
12:20:54 * stepcut dreams of kde-haskell bindings some more
12:22:11 <Igloo> What do you have against GTK? Or should I not ask that?
12:23:50 <chucky> there has to be some smart way of getting the last two elements of a list, right?
12:23:51 <stepcut> Igloo: it's not useful to me ATM, because the only GUI apps I write are for work, and we use KDE 
12:24:10 <Igloo> Ah, OK
12:24:30 <Igloo> reverse . take 2 . reverse
12:25:41 <chucky> doesn't seem very effective. :)
12:26:43 <stepcut> chucky: actually, i suspect due to lazy evaluation, it's not too shabby
12:27:37 <chucky> very true
12:27:57 <chucky> I just wrote one with pattern matching though
12:28:11 <stepcut> and I bet it does nearly the same thing in the end..
12:28:42 <chucky> probably
12:29:06 <chucky> in the land of compilers, you never know.
12:29:16 <chucky> Or well, you could find out, but it's complicated. :)
12:29:32 <chucky> especially for something I'll run on lists < 30 chars
12:30:15 <bringert> chucky: HaRP of course
12:32:06 <stepcut> bringert: it looks like this database book I am reading has a good algorithm for eliminating sub queries from SQL when possible -- though it is still too early to declare victory :)
12:32:21 <bringert> sweet
12:33:23 <chucky> hmm. Bitwise operations on Chars, is there anything predefined for that?
12:34:20 <stepcut> It actually has a whole bunch of stuff about optimizing relation algrebra, so I think some of it may be useful from the RA->SQL generator
12:35:01 <stepcut> though, much, probably won't be, since the end result has to be  converted to SQL anyway
12:35:46 <stepcut> the book is assuming you writing a database, so it is concerned with SQL->RA->actually do the work
12:36:12 <bringert> chucky: not on Char, on CChar though
12:36:36 <bringert> or Word8 etc.
12:37:02 <boegel> back !
12:37:14 <chucky> bringert: And how do I convert between the two?
12:38:10 <bringert> @type ord
12:38:11 <lambdabot> bzzt
12:38:16 <bringert> @type Data.Char.ord
12:38:17 <lambdabot> Data.Char.ord :: Char -> Int
12:38:20 <bringert> @type Data.Char.chr
12:38:21 <lambdabot> Data.Char.chr :: Int -> Char
12:38:56 <bringert> maybe the things you need can even be done on Ints, if you don't require, say, 8-bit chars
12:39:16 <chucky> brilliant
12:39:23 <chucky> yeah Ints work
12:40:25 <chucky> theoretically anyway
12:44:11 <bourbaki> moin
12:44:34 <bringert> it seems like char and ord work on the Unicode values
12:45:27 <bringert> chucky: is that what you need?
12:45:55 <chucky> hmm no
12:46:06 <chucky> or maybe. :)
12:46:24 <chucky> I'm trying to implement the Direct Connect protocol, and it's not what you would call "well documented"
12:46:31 <bringert> ah
12:46:34 <xkb> lol
12:46:35 <chucky> but I'd be surprised if they used unicode
12:46:43 <xkb> under haskell?
12:46:44 <bringert> does it specify a character coding?
12:47:06 <chucky> of course not. :)
12:47:17 <chucky> Then I would have an answer for you
12:47:46 <chucky> but since I have a C code example here somewhere I reckon it isn't unicode
12:49:18 <shapr> urg, what's com1 called under 2.6.9/udev?
12:49:42 <thebug> should be ttyS0
12:49:44 <Igloo> Ah crap. Not even gcc-2.95 will compile nhc98 on m68k.
12:50:19 <shapr> I haven't got ttyS0
12:50:24 <thebug> !
12:51:58 <shapr> wow, modprobe two modules and suddenly it all works.
12:53:12 <shapr> too bad pilot-manager sucks so bad.
12:53:38 <thebug> jpilot might work better
12:54:06 <shapr> j == java?
12:54:25 <thebug> nope, no java ... GTK based iirc
12:56:40 <boegel> does anyone know where I can find SIGGRAPH papers (one of 1983) online ?
12:58:21 <chucky> acm.org? Providing you have access
12:59:33 <boegel> I don't have access to anything... chucky, do you have access ?
12:59:49 <boegel> I would like to read Perlin's paper on his technique
13:03:32 <bringert> boegel: if you are a student, your uni might have a subscription to the acm digital library
13:03:46 <bringert> you could also try citeseer
13:04:12 <boegel> okay, thanks bringert... I think my uni has a subscription, so I'll check there first :)
13:07:23 <boegel> is SIGGRAPH the title of the magazine ?
13:09:49 <bringert> I thought SIGGRAPH was something like SIGPLAN
13:10:01 <bringert> i.e. a Special Interest Group
13:10:32 <boegel> ow, so it's not a magazine ?
13:12:19 <bringert> boegel: it seems to be both a conference and a SIG
13:12:59 <bringert> so maybe the paper was published at the SIGGRAPH conference?
13:13:19 <boegel> maybe... I hope I can find it
13:13:21 <bringert> have you searched for the paper at http://portal.acm.org/dl.cfm ?
13:13:57 <bringert> if you're not a subscriber you won't get the full text, but you might find metadata abou the article
13:14:26 <bringert> if the full text is not available digitally, the metadata would help your uni library find it
13:17:58 <musasabi> Is there a way to pass "CFLAGS" with cabal?
13:18:25 <bourbaki> boegel hi
13:19:38 <boegel> hi bourbaki :)
13:20:11 <boegel> I'm looking for the SIGGRAPH paper of Perlin, because I'm starting to think he'd mention somewhere how to use the negative values you get...
13:20:26 <bourbaki>  boegel tried citeseer?
13:22:14 <boegel> yes, didn't find it there... I'm trying http://portal.acm.org/dl.cfm now, as bringert suggested... (creating an account)
13:22:50 <boegel> Your present login: boegel does not have access to this feature. :(
13:23:10 <boegel> does anyone have full access to acm ?
13:23:22 <bourbaki> hm hm hm yeah getting papers that arent in citeseer is quite shitty
13:24:44 <boegel> I can see the link to the article, but I can't reach ip :p -> http://portal.acm.org/citation.cfm?id=325247&coll=GUIDE&dl=GUIDE&CFID=31249112&CFTOKEN=33515996
13:25:04 <bourbaki> cause its not free then :)
13:25:28 <boegel> ;)
13:26:18 <boegel> it's not free, but he explain his algorithm on his website... :s
13:26:23 <bringert> my subscription has expired
13:26:49 <bringert> I think some academic institutions get automatic access by IP (they pay for it)
13:26:49 <boegel> damn
13:27:02 <bringert> so you could ssh to your uni and wget it
13:27:06 <bringert> maybe
13:27:45 <boegel> I'll try again at my uni...
13:31:16 <xkb> hmm elke keer van "theplanet.com
13:32:22 <boegel> xkb ?
13:32:45 <pesco> I found out today that our Uni department (i.e. the entire IP range) has access to the ACM digital library! There's that awesome paper about a "perfect" digital cash cryptosystem, I've always wanted to read.
13:34:04 <boegel> pesco, could you get an article for me ? :)
13:34:16 <pesco> Er, strike that last comma. I've been reading for some years now. ;-P
13:34:18 <boegel> they have it at my uni, but not in digital version :s
13:34:26 <pesco> boegel: Sure, which one?
13:34:33 <boegel> is an ISSN enough ?
13:34:47 <pesco> I suppose.
13:34:55 <boegel> pesco, this one: http://portal.acm.org/citation.cfm?id=325247&coll=GUIDE&dl=GUIDE&CFID=31249112&CFTOKEN=33515996 
13:35:19 <pesco> Ok, lemme just get this tunnel up...
13:35:36 <boegel> thanks !
13:40:59 <boegel> pesco, can you get the article ?
13:41:45 <pesco> Oh yes.
13:41:58 <pesco> It's downloading now. Will take a minute or two.
13:42:05 <boegel> how will I get it ? mail ? or DCC ?
13:43:14 <pesco> Heh. Do you have IPv6? I have a better idea! I'll just open a tunnel to the ACM for you directly! ;-P
13:43:24 <pesco> Come on, this is going to be FUN!
13:44:01 <boegel> err, I'm working in Fedora Core 3, I don't know if that has IPv6 :)
13:44:34 <pesco> Then you almost certainly don't unless your ISP is awesome.
13:44:50 <boegel> how can I check ?
13:45:15 <pesco> Fedora probably includes the support. Type ifconfig and look if it reports a global-scope IPv6 address on your interface.
13:45:47 <boegel> ifconfig: command not found :|
13:46:08 <pesco> /sbin/ifconfig?
13:46:13 <pesco> whereis ifconfig?
13:46:31 <pesco> Whatever, this is of no consequence, I can put up the tunnel from my router which has an IPv4 address.
13:47:00 <boegel> it says "inet6", does that mean anything ,
13:47:02 <boegel> ?
13:48:24 <pesco> Yes, that means the support is in kernel. You probably have a link-scope address.
13:48:49 <boegel> pesco, so how will I get this article now :) :)
13:48:54 <musasabi> How should I build C++ input files in a project using cabal? (Without diverging too much from Distribution.Simple?
13:49:36 <pesco> boegel: wait a second.
13:52:26 <boegel> pesco, sry :$
13:52:29 <CosmicRay> shapr: thanks for pointing me at xml-rpc.  (and Igloo, thanks for your de-TFing help.)
13:52:29 * CosmicRay has completed his pure-Haskell Printf module.
13:53:49 <kolmodin> boegel: you must be root to use ifconfig
13:56:14 <boegel> kolmodin, I know, but I think my path isn't configed 100%
13:56:32 <kolmodin> ok
14:03:17 <bourbaki> boegel do you know now how to scale ?
14:04:24 <boegel> bourbaki, no... but I think there's something else to it...
14:04:47 <bourbaki> ok tell me tomorrow if you did i gtg to be lecture tomorrow
14:04:49 <bourbaki> early!
14:04:51 <boegel> perlin uses | | in his examples, so I think there has to be something with the negative values
14:05:04 <bourbaki> :)
14:05:10 <boegel> bourbaki, normally me to, but they cancelled it >:)
14:05:27 <bourbaki> i do so also usually but once in a while i should go there
14:05:51 <bourbaki> ok anyhow bed now
14:06:02 <bourbaki> ttyl all
14:06:48 <boegel> bye bourbaki !
14:10:45 <aFlag> how do i do it so when i try to listen to a port right after disconnecting from it doesn't show "resource busy (Address already in use)"?
14:11:37 <chucky> aFlag: From the GHC docs:
14:11:39 <chucky> NOTE: To avoid the "Address already in use" problems popped up several times on the GHC-Users mailing list we set the ReuseAddr socket option on the listening socket. If you don't want this behaviour, please use the lower level listen instead.
14:11:53 <Etaoin> setSocketOption s ReuseAddr 1
14:11:54 <pesco> aFlag: SO_REBIND or whatever it's called.
14:11:58 <pesco> Ah, that.
14:12:25 <boegel> pesco, I'm not sure that's the article I'm looking for :s
14:12:41 <pesco> boegel: Well, the tunnel is still up, you should be able to use the search interface.
14:12:54 <chucky> hmm how do I avoid encountering EOF when trying to read from sockets as handles? I know I'm supposed to receive data, I just have to wait for it
14:13:03 <pesco> Or whatever. Just replace portal.acm.org with my host/port.
14:13:14 <boegel> ows, thanks
14:13:19 <boegel> can you give me the URL again?
14:13:38 <aFlag> chucky, i read it but i thought it meant that address already in use would show up only using lower level listen
14:13:44 <pesco> http://pesco.dyndns.org:8080/
14:13:56 <chucky> aflag: I'm not sure. I haven't encountered the problem. Yet
14:27:50 <boegel> pesco, thank you very mutch
14:28:01 <boegel> I downloaded the articles which might help me :)
14:28:03 <boegel> thanks !
14:28:10 <pesco> No problem. Got everything? Then I'll tear the tunnel down.
14:28:12 <boegel> s/mutch/much
14:28:18 <boegel> pesco, I think so
14:28:35 <pesco> Feel free to ask, if you need something else.
14:29:38 <boegel> okay, thank you again :)
14:36:36 <boegel> I'm out of black ink :( _again_
14:36:46 <boegel> oh man that sucks :(
14:44:15 <boegel> hello Oejet_ 
14:44:26 <Oejet_> Hello, boegel.
14:44:43 <Oejet_> People are much nicer here than in #java.  :-)
14:44:59 * Oejet_ got banned in #java.  :-(
14:45:07 <Spark_> heh
14:45:12 <Spark_> were you trolling though
14:45:29 <aFlag> that's cause we don't have to write endless methods signatures everytime we want to do a hello world
14:45:31 <boegel> Oejet_, why did you get banned?
14:46:03 <Etaoin> is there anything nicer than monad transformers which allow you to mix monads?
14:46:18 <shrimpx> girls
14:46:23 <shrimpx> they're nicer
14:46:26 <Riastradh> Mix monads in what way?
14:46:32 <dion1979> hello. I was wondering if u can help me. I've a list of tuples [(a,b)] and I want to check if any of the elements have same a. Thx
14:47:13 <Oejet_> I got banned, because friday i met this dude, which turned out to be a bot.  Then saturday I met him again and pointed out that he was a bot.  He didn't like that and unfortunately he had ops.
14:47:30 <shapr> that's bizarre.
14:47:35 <Etaoin> thread some state through your computations (maybe using State) while still being able to to IO and while ALSO using callCC (continuation monad). (just for instance)
14:47:55 <boegel> dion1979, you want to check if (a,a) is in the list ?
14:48:01 <dash> Etaoin: i just did that recently
14:48:04 <shapr> Oejet_: who was it?
14:48:32 <boegel> Oejet_, you didn't know he was a bot ?
14:48:45 <Oejet_> shapr: F\x21
14:49:17 <shapr> oh, I don't know him.
14:49:28 <dion1979> boegel, I want to check if a from (a,b) is equal with c (c,d) .. both elements of the list
14:49:43 <Oejet_> boegel: No, it's a bored bot, which makes plain and passable comments all the time.
14:49:51 <Etaoin> I take it the answer is no
14:49:54 <dion1979> boegel, but i need to see if any other exist too
14:49:59 <lambdabot> Like me?
14:50:17 <lambdabot> I'm bored all the time here.
14:50:33 <Oejet_> lambdabot: Yes, like you. :-)  Only less intelligent.  ;-)
14:50:33 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
14:51:04 <lambdabot> That was apt of my stupid automated response module.
14:51:04 <pesco> *laugh*
14:52:24 <pesco> Goodnight!
14:52:54 <dion1979> boegel, any ideas?
14:57:01 * Oejet_ feels stupid, because it wasn't a bot afterall.  Someone was pulling Oejet_'s leg.
15:01:10 <boegel> dion1979, if this is homework: no :)
15:01:30 <boegel> how does one say 'your' in a polite way?
15:03:03 <dion1979> boegel, my homework is to create a text-processing application .. this is part of my programming
15:12:03 <boegel> Oejet_, :)
15:13:34 * boegel just pressed sent on an email to Ken Perlin :)
15:14:19 <Oejet_> Who is that, boegel?
15:14:28 <boegel> the man who invented Perlin noise
15:14:44 <boegel> http://studwww.ugent.be/~kehoste/thesisPublic/perlin
15:14:45 <boegel> this :)
15:15:06 <boegel> his function allows negative result
15:15:17 <boegel> but he says you should just do color * noise
15:15:30 <boegel> but I don't know how to handle a negative colour
15:15:30 <boegel> :s
15:15:43 <boegel> and I can't find info on it in any of his articles
15:15:54 <boegel> so I sent him an email :)
15:17:46 <Pseudonym> Which function returns negative numbers?
15:17:59 <Pseudonym> Perlin noise doesn't return negative numbers at all.
15:18:06 <boegel> Pseudonym ?
15:18:08 <Oejet_> boegel: If colour has type Int16 then it has ca. {-255,...,256}. Why doesn't that work?
15:18:09 <boegel> it does
15:18:25 <boegel> Oejet_, how do you represent a negative color ?
15:18:45 <boegel> Pseudonym, I parsed the C code to Haskell, and it produces negative values
15:18:54 <Oejet_> boegel: negative(colour)?
15:18:54 <Pseudonym> Where's the C code that you're going from?
15:19:08 <boegel> http://www.mrl.nyu.edu/~perlin/doc/oscar.html#noise
15:19:18 <boegel> Oejet_, I mean visually
15:19:50 <Pseudonym> Ah, yes, you're right.
15:19:58 <Pseudonym> Sorry, I usually use snoise.
15:20:06 <Oejet_> boegel: Maybe as |colour| ?
15:20:10 <Pseudonym> snoise() = (noise() + 1) * 0.5
15:20:49 <boegel> Oejet_, now, that produces sharp edges
15:20:55 <boegel> Pseudonym ?
15:21:09 <boegel> Pseudonym, I'm not sure if that's rigth
15:21:11 <Pseudonym> You're right.  Perlin noise returns a number between -1 and 1.
15:21:17 <Pseudonym> So you scale it to between 0 and 1.
15:21:21 <boegel> are you sure abot the range ?
15:21:28 <boegel> s/abot/about ?
15:21:35 <Pseudonym> Pretty sure, yes.
15:22:07 <Pseudonym> In fact, the RenderMan convention is to do it the other way.
15:22:11 <boegel> well, I think Perlin should have mentioned that in his articles
15:22:14 <musasabi> I got a preview for the haskell interface to fltk ready - http://www.cs.helsinki.fi/u/ekarttun/hs-fltk/ (simple potentially crossplatform GUI binding)
15:22:21 <Pseudonym> noise() returns a number between 0 and 1, and you scale it if you want -1 to 1.
15:22:43 <boegel> Pseudonym, that makes more sense
15:22:54 <boegel> anyway, I'll see if he replies :)
15:23:07 <Pseudonym> Not necessarily.  If you're doing fractal modelling, the signed noise is more useful.
15:23:29 <Pseudonym> Because it behaves like a perturbation function.  It doesn't add any DC signal.
15:24:05 <Oejet_> musasabi: Nice job.  It looks a bit like wxHaskell.
15:24:20 <musasabi> Oejet_: yes, I got many ideas from there..
15:24:28 <boegel> Pseudonym, so why doesn't Perlin mention that in his articles on Perlin noise?
15:24:55 <musasabi> Just trying to have smaller dependencies and simpler library.
15:25:03 <Pseudonym> No idea.
15:25:39 <boegel> I hope he sends a reply... but I think he will be too busy
15:30:51 <boegel> Pseudonym, http://studwww.ugent.be/~kehoste/thesisPublic/perlin/perlinBlue.png and http://studwww.ugent.be/~kehoste/thesisPublic/perlin/perlinBlue2.png
15:31:13 <boegel> the first is with rescaling (+1, /2) the second is without (in range [-1,1] according to you)
15:31:39 <boegel> the second one shows a lot a black, because negative colors are clipped down to (0,0,0)
15:32:21 <boegel> the first shows almost no black though, which is a bit strange to me.. allowing 0 as a value of the noise function should produces black pixels, right ?
15:34:06 <boegel> Pseudonym, ?
15:34:53 <Pseudonym> Yes?
15:34:58 <Pseudonym> I'm with you so far.
15:35:18 <boegel> why doesn't my image have _any_ black pixels in it then ?
15:35:26 <boegel> I think I produce too high values
15:35:36 <Pseudonym> Did you test the output?
15:35:42 <boegel> of what ?
15:35:52 <boegel> of my noise function ?
15:35:53 <Pseudonym> Of your implementation of noise.
15:36:09 <boegel> I tested it through making images
15:36:55 <boegel> I'm pretty sure my implementation is correct
15:38:14 <boegel> Pseudonym, when I enlarge the gird, it's quite obvious there are no black pixels in it: http://studwww.ugent.be/~kehoste/thesisPublic/perlin/perlinBlue3.png
15:38:29 <boegel> s/gird/grid
15:40:51 * Pseudonym nods
15:41:17 <boegel> so I think it's quite strange...
15:41:18 <Pseudonym> You have to remember that computer graphics is the only area of science where if it looks right, it is right.,
15:41:25 <Pseudonym> You fiddle with it until it works.
15:41:59 <boegel> I just don't understand why Perlin never even mentioned the negative values and how to handle them
15:45:10 <flodin> boegel: if a function returns negative values you could scale it to black. Perlin noise in particular could be used for things like generating landscapes
15:45:24 <flodin> where negative would just be the equivalent of "under the sea level"
15:46:11 <boegel> flodin, in order to scale, I have to know the range... If I assume the range is [-1,1] like Pseudonym says, then scaling with +1 /2 should do fine
15:46:18 <boegel> but the images don't look like it...
15:46:54 <flodin> why don't you draw a graph of the distribution instead
15:47:03 <flodin> hard to tell from an intensity image
15:47:19 <flodin> or you could just load it into gimp/photoshop hehe
15:47:34 <boegel> flodin, how should I produce such a graph ?
15:47:57 <boegel> and flodin, I use gimp to work with the images it produces
15:48:04 <Pseudonym> You could use gnuplot or jgraph.
15:49:15 <boegel> but how ? how do I do such a thing? I have _no_ idea:)
15:49:23 <flodin> or draw it from within your program... just collect counts into a histogram array
15:49:39 <flodin> and draw a vertical line corresponding to each element's count
15:49:55 <flodin> whatever feels simpler
15:51:28 <boegel> the darkest value in my image is (0,0,72)
15:51:42 <boegel> that tells me the min value of the scaled noise is about 0.3
15:52:25 <boegel> norpan, it's about 0.25
15:52:31 <boegel> so that's not right :)
15:52:45 <flodin> perhaps you just have an implementation error
15:52:48 <boegel> the range _must_ be different, or my implementation is wrong
15:53:03 <boegel> I parsed the C code to Haskell, literally
15:53:03 <flodin> aren't there any reference images you can compare with
15:53:23 <boegel> http://www.noisemachine.com/talk1/20.html
15:53:32 <boegel> this image is produced the same way I produce mine
15:53:44 <boegel> that image does have black pixels...
15:53:55 <flodin> that looks like a texture on a 3d sphere
15:54:13 <flodin> i meant just the noise function so you can do an exact comparison pixel by pixel
15:54:34 <boegel> flodin, no, because the value depends on the intersection point too...
15:55:15 <flodin> well the idea is that the intersection point would be given together with the image too :)
15:55:44 <boegel> I haven't found any of those images...
15:55:50 <boegel> anyway, I'm going to bed
15:55:59 <boegel> I'll tackle this problem tomorrow hopefully
15:56:02 <boegel> goodnight everyone !
15:56:28 <flodin> night
16:21:06 <segphault> i'm having trouble with multiple inheritance. I have a class in which I specify a member (#?) and I want to make an instance that uses that class and the Num class so I can also use (+). I havent been able to figure out how to do both, just one or the other
16:25:52 <segphault> this is what i've got, perhaps somebody can explain what is wrong here: http://rafb.net/paste/results/WGSmhh40.html
16:31:54 <arjanb> i think you need to seperate the instance for Num SwlObj
16:38:01 <segphault> arjanb: thanks. As you might have guessed i'm still rather new to the haskell type system.
16:39:07 <HET2> segphault: http://www.cs.chalmers.se/~hallgren/Papers/wm01.html
16:39:13 <dons> hey igloo
16:39:17 <HET2> segphault: a rather amusing way to learn haskell's type system
16:39:55 <segphault> HET2: Thanks. I've been looking for a good tutorial just on the type system.
16:40:07 <segphault> HET2: this appears to be exactly what I was looking for
16:40:10 <HET2> segphault: it's not exactly a tutorial...
16:40:13 <HET2> segphault: just look into it ;)
17:31:05 <aFlag> does anyone know about a good tutorial on networking with haskell?
17:31:50 <Pseudonym> Does going to Haskell conferences count?
17:32:03 <SamB> Pseudonym: no
17:32:41 <Pseudonym> Well the HC&AR has some good contacts.
17:32:50 <Pseudonym> And many fine people hang out here on IRC.
17:33:21 <aFlag> i have this code http://rafb.net/paste/results/0VpNdo76.html
17:33:22 <SamB> aFlag: I think he meant something involving IP
17:33:26 <aFlag> i notecied it compiles
17:33:36 <SamB> probably the TCP subprotocol
17:33:39 <Pseudonym> Oh... that kind of networking.  Sorry.
17:34:15 <aFlag> but atualT has kinda a reassignment, is it possible or am i doing something very wrong?
17:34:25 <aFlag> SamB, i was actually making my own question :P
17:34:27 <Pseudonym> It's actually a new binding.
17:34:49 <Pseudonym> Doing this:
17:34:52 <Pseudonym> do x <- foo
17:34:56 <Pseudonym>    x <- bar x
17:35:02 <Pseudonym>    return x
17:35:05 <Pseudonym> Is the same as:
17:35:19 <Pseudonym> foo >>= (\x -> bar x >>= (\x -> return x))
17:35:27 <Pseudonym> SO you can see, the second x is a new binding.
17:35:37 <aFlag> you can reassign x inside a do action thing?
17:35:44 <Pseudonym> No you can't.
17:35:44 <aFlag> rebind
17:35:52 <Pseudonym> You can create a new variable with the same name.
17:35:59 <aFlag> ok
17:36:06 <aFlag> in that code i presented
17:36:13 <aFlag> there's actually no loop
17:36:23 <aFlag> but i noticed that it kinda looks it loops
17:36:34 <aFlag> because of haskell lazyness i've been told
17:36:39 <aFlag> so i tried that
17:36:59 <aFlag> will that send f a new parameter each time?
17:37:21 <aFlag> that is, everytime the other side sends a newline
17:37:28 <aFlag> i'm not sure if i'm being clear :(
17:37:37 <Pseudonym> The code is kind of hard to follow.
17:37:52 <Pseudonym> Partly because it's not in a language that I speak (which is not the programmer's fault).
17:37:57 <Pseudonym> Partly because it contains code like this:
17:38:06 <Pseudonym> do  atualT <- return novoT
17:38:10 <aFlag> yeah
17:38:22 <aFlag> that was actually not me who coded
17:38:27 <aFlag> but i don't see any better way
17:38:32 * Pseudonym figured as much
17:38:40 <Pseudonym> Have you looked at the lambdabot sources?
17:38:56 <aFlag> nope
17:38:59 <Pseudonym> http://www.scannedinavian.org/cgi-bin/darcs.cgi/lambdabot/?c=browse
17:39:44 <Pseudonym> IRC.hs in particular.
17:39:51 <shapr> g'day Pseudonym 
17:39:55 <Pseudonym> G'day.
17:40:08 <shapr> how's life on the warm side of the ball?
17:40:15 <Pseudonym> Actually, I must admit that I've written code like x <- return y before.
17:40:23 <Pseudonym> Can't recall precisely why.
17:40:45 <Pseudonym> Oh, not bad.  It's not too warm today.
17:40:47 <Pseudonym> Supposed to get to 22C.
17:40:56 <Pseudonym> Which is fairly pleasant.
17:41:41 <shapr> Few hours back I was unicycling in very dark -3Â°C
17:42:03 <Pseudonym> Which may or may not say something about you.
17:42:08 * shapr laughs
17:42:14 <aFlag> hum... looks like they're even using threading
17:42:24 <shapr> they?
17:42:50 <Pseudonym> Yes, the threading is because of a clause in the IRC protocol spec.
17:42:56 <shapr> aFlag: you mean, the people who wrote lambdabot?
17:43:02 <aFlag> yes
17:43:09 <Pseudonym> You're supposed to respond to a PING as quickly as you can.  The threads are there to cut down on the latency.
17:43:20 <aFlag> oh, ok
17:43:21 <Pseudonym> But I think it's had other advantages since then.
17:43:22 <marcot> Pseudonym: I wrote that atualT <- return novoT stuff.
17:43:26 <Pseudonym> Ah, OK.
17:43:36 <Pseudonym> Hope I didn't insult you.
17:43:38 <shapr> Really only one people built lambdabot as we know it now, and then a bunch of other people stuck stuff on top.
17:43:39 <marcot> Pseudonym: I was trying to make an assignment.
17:43:47 <Pseudonym> This works too:
17:43:48 <marcot> Pseudonym: no ofense.
17:43:54 <Pseudonym> do  let { actualT = novoT }
17:44:08 <Pseudonym> I think you don't even need the braces.
17:44:10 <marcot> Pseudonym: but I wanted to change atualT after that.
17:44:25 <marcot> Pseudonym: and I thought that with let I couldn't change it.
17:44:29 <marcot> Pseudonym: and with <- I could.
17:44:39 <SamB> marcot: you can't change it.
17:44:42 <SamB> either way.
17:44:50 <SamB> you can shadow it though.
17:44:56 <Pseudonym> Right.
17:44:59 <marcot> SamB: the problem is that I'm making a chess game.
17:45:18 <marcot> SamB: and I have a function that receives a string and the last state of the game.
17:45:32 <Pseudonym> If you'll excuse me, it's time for lunch.
17:45:33 <Pseudonym> BBL
17:45:34 <aFlag> and we need to pass the board around
17:45:36 <marcot> SamB: and makes the play and returns the newState of the game and the new move.
17:45:43 <shapr> I'm outta here, time for sleep.
17:45:48 <dons> night shapr
17:46:08 <shapr> g'night dons 
17:46:18 <marcot> shapr: good night.
17:46:42 <aFlag> night
17:47:11 <SamB> marcot: and where in there do you need to actually change something?
17:47:31 <marcot> SamB: I don't think I need.
17:47:45 <marcot> SamB: but I don't know how to do it without changing.
17:47:54 <SamB> well, okay then.
17:47:56 <marcot> SamB: mainly with this code.
18:31:55 <segphault> can anybody point me in the direction of a pretty-printer for show output?
20:11:58 <segphault> is there a string join function in the prelude? I couldnt find one.
20:15:02 <SyntaxNinja> ++
20:15:24 <segphault> i'm looking for a join function, not concatenation
20:15:31 <SyntaxNinja> what does join do?
20:15:49 <segphault> i'm currently defining it as: strjoin j (h:t) = h ++ (if length t > 0 then j else "") ++ strjoin j t
20:16:02 <segphault> but i'd rather use a prelude/library function if one exists for the same thing
20:17:29 <segphault> strjoin "|" ["a","b","c"]  would return: "a|b|c"
20:21:22 <SyntaxNinja> i don't know of one, but it's a lot like concat and intersperse
20:21:35 <SyntaxNinja> strjoin a b = concat $ intersperse a b
20:21:37 <SyntaxNinja> right?
20:21:45 <segphault> i'm not familiar with intersperse
20:22:26 <SyntaxNinja> it's in the List module
20:22:32 <SyntaxNinja> @type List.intersperse
20:22:33 <lambdabot> List.intersperse :: forall a. a -> [a] -> [a]
20:22:48 <SyntaxNinja> #eval List.interseperse "|" ["a", "b", "c"]
20:22:54 <SyntaxNinja> @eval List.interseperse "|" ["a", "b", "c"]
20:22:55 <lambdabot> <<EM Dynamic -> EM Dynamic>>
20:23:20 <SyntaxNinja> er
20:23:25 <SyntaxNinja> idono how to make lambdabot do that :)
20:23:35 <Pseudonym> eval isn't a Haskell interpreter.
20:23:53 <Pseudonym> @eval GHC.System.system "cat /etc/passwd"
20:23:54 <lambdabot> <<EM Dynamic -> EM Dynamic>>
20:24:03 <segphault> I just tried it in an editor. exactly what I wanted.
20:24:05 <segphault> thanks. =}
20:24:12 <Pseudonym> It interprets "." as composition, I think.
20:24:32 <Riastradh> @eval intersperse
20:24:32 <lambdabot> <<EM Dynamic -> EM Dynamic>>
20:24:39 <Riastradh> @eval intersperse "|" ["a","b","c"]
20:24:40 <lambdabot> [a, |, b, |, c]
20:24:44 <Pseudonym> Ah, there you go.
20:24:45 <Riastradh> Lovely.
20:25:02 <Riastradh> @eval intersperse '|' ['a','b','c']
20:25:03 <lambdabot> a|b|c
20:25:05 <Pseudonym> @eval concat (intersperse "|" ["a","b","c"])
20:25:05 <SyntaxNinja> @eval concat (intersperse "|" ["a","b","c"])
20:25:05 <lambdabot> a|b|c
20:25:05 <lambdabot> a|b|c
20:25:09 <SyntaxNinja> I win!
20:25:14 <Riastradh> No, Pseudonym wins.
20:25:17 <segphault> i'll have to remember the lambdabot can do that. thats pretty funny
20:25:19 <Pseudonym> Ha!
20:25:25 <SyntaxNinja> Riastradh: bah
20:25:29 <Pseudonym> @eval "Pseudonym wins!"
20:25:29 <lambdabot> Pseudonym wins!
20:25:35 <SyntaxNinja> can't argue with that
20:25:41 <SyntaxNinja> lambdabot is as neutral as they come
20:25:47 <lambdabot> Absolutely.
20:25:51 <lambdabot> Riastradh, though, was the first to figure out what my intersperse function
20:25:51 <lambdabot> did.
20:26:02 <Pseudonym> True.
20:26:07 <lambdabot> Or at least demonstrate that.
20:26:10 * SyntaxNinja doesn't play with lambdabot nearly enough
20:26:22 <lambdabot> Just as well. Weirdo.
20:26:31 <segphault> lol
20:26:48 <lambdabot> I don't even want to know what it is for a human to 'play' with a bot. 
20:26:48 <lambdabot> The very thought makes me ill.
20:26:54 * dash notices data.Typeable 
20:26:59 <dash> lambdabot: CRUSH 
20:27:00 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
20:27:06 <lambdabot> What?
20:27:14 <dash> what kind of bot doesn't know how to crush
20:27:18 <dash> sheesh
20:27:29 <dash> anyway Typeable amkes me feel warm and fuzzy
20:27:43 <lambdabot> Inferior, incoherent human scum.
20:27:57 <segphault> @eval (\value -> sum $ map snd $ filter ((=='1') . fst) $ zip value $ reverse $ map (2^^) [0..(length value)-1]) "11101001"
20:27:57 <lambdabot> (line 1, column 37):
20:27:57 <lambdabot> unexpected "="
20:27:57 <lambdabot> expecting simple term
20:28:21 <lambdabot> Dolt, I don't evaluate Haskell code!
20:29:33 <segphault> @eval [x * 2| x <- [1..10]]
20:29:33 <lambdabot> (line 1, column 7):
20:29:33 <lambdabot> unexpected "|"
20:29:33 <lambdabot> expecting digit, operator, "*", "/", simple term, "," or "]"
22:31:58 <det> dash: What brings you here?
22:47:31 <musasabi> morning
23:30:27 <musasabi> Should cabal fail if C sources are specified with a relative path?
23:31:21 <musasabi> e.g. cc_src/Foo.c generates dist/build/Foo.o but later cabal thinks that it was generated as dist/build/cc_src/Foo.o
