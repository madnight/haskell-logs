04:59:29 <Spark> cool, TaCP has arrived
05:27:48 <kosmikus> nice
05:27:58 <kosmikus> happy reading
05:30:04 <webchat8119> hello, nobody knows how to implement regular expresion in haskell?
05:31:08 <bring> no, somebody knows
05:31:44 <bring> what is it exactly that you want to do?
05:31:45 <webchat8119> u know bring?
05:32:47 <webchat8119> i need a function that given a regular expresion and a word could resolve if the word cumplies the regular expresion
05:32:50 <webchat8119> understood?
05:33:16 <bring> have a look at Text.Regex
05:33:25 <bring> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Text.Regex.html
05:33:34 <webchat8119> ok
05:33:36 <webchat8119> thanxs
07:38:35 <eixei> heya
09:38:54 * eixei slaps everyone around with a big java program he has got to code for uni :-/
09:41:26 <Marvin--> eixei: "Java leads to pain, pain leads to ..."
09:41:45 <Smerdyakov> Pain leads to Java.
09:42:03 <eixei> it's not like I want to do it... I would rather program in cpp, or even in haskell :-/
09:43:17 <Marvin--> !
09:43:18 <Marvin--> "even" indeed
09:44:04 <eixei> Well... there are some things I don't want to program in haskell :-)
09:44:17 <eixei> Anything with IO for example *g*
10:30:12 <Marvin--> oh come on
10:30:17 <Marvin--> stupid pre-pre-pre-olympics shows
10:30:26 <Marvin--> I want to see what's happening in the curling final
10:54:24 <eixei> lol
12:35:57 <chnxt> hi :-)
12:36:50 <stepcut> hi
12:36:52 <eixei> heya
14:22:42 <eixei> bye everyone
14:24:33 <kosmikus|away> Marvin--: so you prefer curling over snooker nowadays?
14:25:44 <Marvin--> kosmikus|away: I've been watching both :)
14:26:27 <Marvin--> kosmikus|away: nothing's more boring than all the boring mind-numbing shows about the upcoming olympics
14:27:46 <kosmikus|away> agreed
14:28:17 <Smerdyakov> Marvin--, but you like to watch the real events?
14:32:51 <earthy> are there boring mind numbing shows about the upcoming olympics?
14:32:58 <earthy> wow... I'm missing things. :)
14:40:53 <Marvin--> Smerdyakov: what do you mean? If I'd like to travel to where the competitions are taking place? Nah, I'm not *that* big a fan of the sports
14:42:54 <Smerdyakov> No, I mean on TV.
14:44:05 <Marvin--> sure, both snooker and curling are interesting games of tactics and precision
14:44:17 <Marvin--> I'd like to try them myself, just for the fun of it
14:44:29 <Marvin--> there's a serious lack of snooker tables in Sweden, though
15:16:27 <camio> Anyone know of a good intermediate paper on Monads?
17:01:45 <camio> Can anyone tell me how a lazy computation comes to exist (like getContents)?  I don't see how to implement that sort of thing.
17:02:04 <stepcut> um
17:02:13 <stepcut> thunks and stuff :)
17:03:05 <camio> :)
17:03:37 <camio> Just seems kinda weird.
17:03:54 <camio> impureish
17:05:21 <ibid> camio: well, you are talking about executing it in an impure machine :)
17:05:47 <ibid> camio: if you'd just use a normal-order graph-rewriting machine, it'd be much simpler :)
17:06:51 <ibid> camio: note that getContents is impure
17:06:57 <ibid> camio: it's an ugly hack
17:06:58 <camio> Hrm, I'm confused.  It must use unsafePerformIO somehow.
17:07:02 <camio> Ahh, ugly hack.
17:07:03 <ibid> it does
17:07:10 <ibid> of course, it looks good on paper :)
17:07:24 <ibid> actually, it uses unsafeInterleaveIO
17:08:09 <SamB> a pure machine would be pretty hard to use...
17:08:53 <camio> So I guess to "pretend" that I'm using haskell on a pure machine, I shouldn't use getContents and should prefer stuff like hGetLine?
17:09:41 <ibid> camio: "should" implies some kind of a moral standard
17:09:46 <ibid> in this case, at least
17:10:18 <ibid> sometimes it's just nice to pretend that getContents is not an ugly hack :)
17:10:41 <camio> Say I'm on a machine that has an api function for getNumCharsReadFromStdin, getContents would screw up the consistancy in my haskell program?
17:11:38 <ibid> that's not an easy question to answer
17:12:09 <ibid> i can't immediately see how it would screw it up, but when we are talking about unsafe*, well, ...
17:12:41 <camio> I think I can see what you're saying.
17:13:06 <SamB> getNumCharsReadFromStdin would presumably be of type IO Int...
17:13:17 <camio> Correct.
17:13:41 <ibid> hmm:
17:14:35 <ibid> do { n <- getNumCharsReadFromStdin ; putStrLn calculateStuff ; m <- getNumCharsReadFromStdin ; assert ( n == m) }
17:15:05 <ibid> i might assume that the assert will not fail if i didn't think too deeply
17:15:38 <ibid> but if calculateStuff uses some stuff that is derived from a getContents...
17:15:43 <SamB> oh, I see what you mean... getContents is ugly indeed.
17:15:45 <camio> do { a <- getContents; let b = f a; getNumCharsReadFromStdin >>= putStr.show }
17:16:04 <camio> So the output of the above program depends on f.
17:16:28 <camio> Or if the compiler sees that b is not used and doesn't calculate f . . .
17:16:29 <ibid> camio: actually, you don't force b
17:16:48 <ibid> camio: it does not see it particularly, you just don't use it so it does not get evaluated
17:17:16 <ibid> camio: this is not some compiler optimization we are talking here but a simple fact of the lazy evaluation strategy
17:17:21 <camio> ibid: Well, it might and it might not, right?
17:17:41 <ibid> camio: not unless the compiler uses some speculative evaluation strategy
17:18:14 <camio> ibid: For example, eager haskell is still Haskell so it might evaluate f a bit.
17:18:27 <ibid> camio: that's true, but i was assuming lazy evaluation
17:18:36 <ibid> camio: which we usually do :)
17:19:01 <camio> Yeah, I'm just assuming a conforming haskell machine.
17:19:04 <ibid> haskell is really nonstrict, not lazy, but most people ignore that distinction out of convenience
17:19:42 <SamB> eager haskell is legal? are you sure?
17:19:56 <ibid> camio: well, yeah, there's nothing that forbids evaluation, as long as nonstrict beaviour is observed
17:20:06 <ibid> SamB: it is, as long as nonstrict semantics is used
17:20:23 <camio> SamB: From what I read, it just calculates values earlier as opposed to later.  It wouldn't have different output for the same program.
17:20:34 <SamB> camio: oh. right.
17:20:36 <ibid> SamB: essentially, there must be some guards against nontermination
17:21:03 <camio> Right, which is why I said it might evaluate f a bit.
17:21:13 <ibid> yes
17:21:33 <camio> So I guess it is safe to conclude that getContents is not safe.
17:21:35 <ibid> and with uIIO there's really no guarantee on when the actions are executed
17:21:50 <ibid> i believe there is the guarantee of local order preservation but...
17:22:58 <camio> Well not safe for a general machine, but could probably be considered safe given an assumption on what machine API functions are called.
17:24:27 <camio> What use does getContents have being lazy?
17:24:58 <ibid> camio: it's an easy way to convert monadic IO into stream IO
17:25:30 <ibid> as long as getContents is about the only use of the IO monad, it's quite safe
17:25:53 <SamB> isn't it safe as long as nothing else messes with stdin?
17:26:48 <ibid> it's safe as long as it's safe :)
17:26:55 <camio> hehe
17:27:03 <ibid> beyond that, it's hard to give guarantees
17:27:13 <ibid> you'd have to do a global analysis of the program
17:28:20 <camio> ibid: what use does stream IO have?
17:29:08 <ibid> camio: legacy code
17:29:30 <ibid> camio: and also it's sometimes useful to be able to postpone IO in a class
17:30:02 <ibid> though I tended to tell them to use ghci before we got into monads
17:30:46 <camio> Tell who?
17:30:48 <kosmikus|away> what do you mean by stream IO?
17:30:58 <kosmikus|away> interact?
17:31:09 <ibid> my students in my haskell class last autumn
17:32:00 <camio> ibid: Awesome, where do you teach?
17:32:01 <ibid> kosmikus|away: real stream io is more complicated, but yeah, i was thinking of interact style
17:32:11 <ibid> camio: university of jyväskylä, finland
17:32:27 <ibid> camio: though i have no haskell classes planned for the next year or so :)
17:32:47 <camio> ibid: That's awesome that you had a Haskell class offered.
17:32:58 <camio> ibid: How did student's cope with it?
17:33:15 <kosmikus|away> ibid: are you going to EuroHaskell?
17:33:38 <ibid> kosmikus|away: probably not. it's not a scientific conference so i can't really justify the cost to the department
17:33:47 <ibid> kosmikus|away: and i can't go with my own money
17:33:49 <kosmikus|away> I know ...
17:34:15 <ibid> camio: the class was problematic
17:34:30 <kosmikus|away> are you going to any conferences this year?
17:35:15 <ibid> camio: i had near sixty students at first, but that dropped to forty during the class; about twenty took the exam, all passed, but most of them did not hand in the course project
17:35:25 <ibid> camio: so there was massive dropouts
17:35:53 <camio> ibid: I can understand.  Haskell is very difficult.  What was the course project?
17:35:56 <ibid> the main problem was that it was misplaced in the curriculum
17:36:36 <ibid> it should have been a "cum laude" class, it was made a "laudatur" class by the faculty, as there was no room for new cum laude classes
17:37:01 <ibid> and so i tried to make an introduction to fp that was relevant to the laudatur level, and failed miserably
17:37:18 <ibid> kosmikus|away: LICS most likely
17:37:19 <camio> I'm not familiar with those distinctions "cum laude" and "laudatur"
17:37:25 <ibid> camio: it's a local thing
17:37:42 <camio> Like intermediate and advanced?
17:38:07 <ibid> camio: in international terms, cum laude is essentially senior undergrad and laudatur is junior graduate (where the line of graduation is at bsc level)
17:38:12 <ibid> something like that
17:38:48 <camio> Oh, okay thanks.
17:38:56 <camio> How far did you get?
17:39:06 <kosmikus|away> it should be possible to give a Haskell course for undergraduates, or not?
17:39:42 <ibid> kosmikus|away: well, for one thing, our graduation line properly is at master's level, but...
17:40:01 <ibid> kosmikus|away: it's possible, but it's the environment here...
17:40:05 <kosmikus|away> ibid: LICS is in Finland ;)
17:40:09 <ibid> kosmikus|away: exactly :)
17:40:28 <kosmikus|away> why not go to AFP?
17:40:30 <ibid> kosmikus|away: i tend to favour conferences that take place here
17:40:38 <kosmikus|away> it's not a conference, but it would be fun certainly ...
17:40:45 <ibid> kosmikus|away: AFP... it would be fun, yes
17:40:59 <kosmikus|away> and I will try to go there ;)
17:42:00 <ibid> the thing is that i don't dare propose that many conference trips, and fp is not really the center of my research focus
17:42:15 <kosmikus|away> what "environment"? just to be clear, I don't think it's your fault ... I only want to understand what exactly the problem was, because we have first-year Haskell courses with lower dropout rates ...
17:42:39 <ibid> in order to attend that kind of conferences, i'd better have an accepted paper there
17:43:04 <kosmikus|away> I see. That's hard for AFP if you don't teach ...
17:43:41 <ibid> kosmikus|away: as i said, the dropout problem was that i tried to do an integrated intro to fp and advanced fp and failed miserably
17:44:04 <ibid> kosmikus|away: as to the environment ...
17:44:54 <ibid> kosmikus|away: indeed. LICS i can get into without a paper (i did submit but it was mercifully rejected:) because of the low travel cost, and because of its relevance to my research
17:45:12 <ibid> last year, i did two conferences, both in finland, and in one i had a paper
17:46:11 <kosmikus|away> estonia is not too far away ... and it is probably less expensive than finland ...
17:46:14 <ibid> the environment... our department has historically excelled in scientific computing. all this new stuff like se and telecommunications and embedded systems are new and shiny
17:46:46 <ibid> for most of the staff here, fp is lisp in an artificial intelligence context
17:46:55 <ibid> and then there is the other department
17:47:21 <ibid> which grew up in a social sciences context, working on information systems and all that
17:47:28 <kosmikus|away> I see, but the students are "ordinary cs students", or something else?
17:47:48 <ibid> kosmikus|away: depends on how you define that term :)
17:48:46 <kosmikus|away> how's the curriculum called?
17:49:55 <ibid> the Situation is that these two departments formed the new faculty of information technology, trying to form a joint curriculum on the basic and intermediate levels; and it's hard for us now to introduce any "hackerish" stuff there as the other department would look at us quite annoyed
17:50:19 <ibid> kosmikus|away: the curricula, actually :)
17:50:45 <ibid> kosmikus|away: our department's subject is called "information technology", for political reasons
17:51:04 <ibid> the other department has information systems and computer science, two different subjects
17:51:07 <ibid> it's confusing...
17:51:28 <kosmikus|away> yeah, "information technology" or even "information science" attracts strange students, in my personal experience ...
17:51:30 <ibid> at the basic and intermediate studies level, we are mostly following acm cs curriculum
17:51:42 <ibid> kosmikus|away: it's different here, the finnish term is cool :)
17:52:40 <ibid> at advanced level, our curricula form a maze of different subjects, all alike and all different
17:53:46 <ibid> my teaching is in the advanced level, software engineering curriculum, or whatever
17:54:09 <ibid> it's hard to talk about this in english as the finnish terms are so tangled...
17:54:49 <SamB> hey, it doesn't make much sense in english to start with ;-)
17:55:00 <ibid> ?
17:55:15 <SamB> those terms
17:55:36 <ibid> our official translations are so bad that they are of no use in explaining these things to outsiders :/
17:55:36 <SamB> there are too many of them
17:55:42 <kosmikus|away> I'd like to learn finnish, or estonian ...
17:56:38 <SamB> I think it would be best to just call it "programming"
17:57:01 <ibid> ugh
17:57:15 <ibid> if we did that, the students would not allow us to teach anything else...
17:57:25 <ibid> like data structures, automata theory, and so on
17:57:47 <ibid> because programming is, after all, sitting in front of a computer and typing away ... according to them
17:58:03 <SamB> you mean that isn't programming? I could of sworn it was!
17:58:06 <ibid> and learning programming is about learning the tricks of using c++ and javascript and html
17:58:20 <SamB> (data structures, ...)
17:58:33 <ibid> SamB: you can only appreciate them as programming after you know them :)
17:58:52 <bring> ä-0
17:58:56 <ibid> SamB: well, actually, really smart people could do that even before
17:59:23 <ibid> but taking in lots of new students, well, what can you expect
18:00:24 <ibid> you know, a few years ago when we were planning the new basic/intermediate curriculum, i talked with someone from the other department about the choice of first language
18:00:33 <kosmikus|away> SamB: I also think that calling "computer science" "programming" would only make things worse than they already are ...
18:00:53 <ibid> i once suggested scheme and all hell broke loose...
18:00:56 <SamB> kosmikus|away: okay, I guess.
18:01:00 <ibid> no, we chose java
18:01:02 <ibid> :(
18:01:06 <SamB> ibid: Python!
18:01:38 <camio> Poor Scheme)))))
18:01:39 <kosmikus|away> I'm not sure if Python is better than Java
18:01:41 <ibid> at a later time i suggested the same lecturer that we could use javac as the compiler, we didn't need an ide...
18:01:42 * kosmikus|away ducks
18:01:50 <ibid> kosmikus|away: it is, infinitely better
18:01:52 <SamB> how about "the way of the code" ;-)
18:02:21 <SamB> kosmikus|away: what makes you unsure?
18:02:29 <kosmikus|away> scala seems to be a good language for teaching
18:02:30 <ibid> he noted dryly, "command line is ancient history, nobody uses it." (or something like that)
18:02:35 <SamB> java is very dry
18:02:52 <kosmikus|away> python has this "forget about types" philosophy ...
18:03:02 <camio> kosmikus|away: Good point.
18:03:05 <kosmikus|away> java does not have very strong, but at least static type checking
18:03:28 <ibid> i believe that it is good to know both styles
18:04:00 <ibid> i should probably go sleep soon
18:04:23 <kosmikus|away> me too
18:04:26 <kosmikus|away> good night
18:04:37 <SamB> hmm, java's static typing is a real pain, though... or so I've heard.
18:04:59 <SamB> I can't actually pay attention to java, it is so dry.
18:05:39 <camio> I would say that there is utility in knowing C++ after graduation.
18:06:03 <skew> SamB: aside from lots of typing, one major annoyance with Java is that the containers are more or less untyped
18:06:25 <camio> skew: Absolutely.
18:06:42 <ibid> it's changing, though
18:06:50 <skew> SamB: so you have all the writing down types of C style types, and all the type-unsafety of dynamic languages
18:06:55 <skew> the worst of both world
18:07:09 <camio> ibid: Towards what?
18:07:13 <camio> C#?
18:07:39 <ibid> camio: the next java has a generic type extension
18:08:03 <ibid> camio: in the pizza style i believe, which comes from the ml tradition
18:08:17 <SamB> skew: and worse, you can't call an arbitrary method on an Object
18:08:31 <skew> you can with reflection...
18:08:39 <SamB> that doesn't count
18:08:42 <skew> that's the way it goes, everything is possible, nothing is easy
18:08:59 <ibid> you can through downcasting, but that doesn't count either, i guess :)
18:09:10 <SamB> so basicly all the typeness is pain without gain
18:09:22 <SamB> ibid: than you have to know what class it is!
18:09:23 <camio> ibid: I think the generics in java are quite week.  http://www.artima.com/intv/generics.html
18:09:35 <skew> with some effort you could hack up a first class function system through reflection
18:09:42 <skew> of course you would get no static typesafety
18:09:52 <SamB> well, you can do Python in Java too...
18:10:03 <SamB> and intercall between Python and Java...
18:10:15 <ibid> i always wince when i haer people say type-unsafety in the context of dynamic languages. i know it's the correct style in some circles, but ...
18:10:26 <skew> where by "intercall" you mean write everything in Python :)
18:10:39 <ibid> SamB: you have to know what class the method you are calling is. you don't have to know what class the object is
18:10:42 <skew> ibid: I was speaking more in the context of Java
18:10:48 <SamB> skew: no, you can subclass java classes in Python...
18:10:50 <ibid> skew: ?
18:11:12 <skew> I thought you were refering to me saying Java has all the type-unsafety of Python
18:11:13 <ibid> skew: i think you understood what i meant
18:11:18 <SamB> ibid: yes. but that means the method has to be associated with a subtree of the class heirarchy!
18:11:27 <ibid> SamB: that's true
18:11:37 <skew> ibid: no, not really.
18:11:39 <ibid> SamB: think of it as a part of the name of the method :)
18:12:05 <ibid> skew: "the type-unsafety of dynamic languages" - that i was referring to
18:12:33 <skew> what else do you call it?
18:12:46 <ibid> skew: dynamic typing
18:12:59 <SamB> well, most dynamic languages aren't exactly type-unsafe. try playing with void*s and you'll see what type unsafe means.
18:13:14 <ibid> skew: though i do know of the other school that thinks types are a static concept exclusively
18:13:44 <skew> ibid: I was looking for a term that pointed out that you get no static guarantees in Java once you start casting through Object
18:13:48 <ibid> skew: and i see its appeal, but still, calling dynamic languages type unsafe just does not sound right to my ears
18:14:03 <ibid> skew: i don't think there are any such guarantees in any language
18:14:46 <SamB> hmm, good point. the problem is that you have to cast through object, not that doing so causes type unsafety.
18:14:47 <skew> I make a distinction between dynamic unsafety like C with void* and segfaults, and runtime type checking (maybe that's a better word), but it's still not static typesafety
18:15:07 <skew> SamB: well, the downcasts failing is the real issue
18:15:33 <SamB> Python, of course, doesn't have casts.
18:15:45 <skew> ibid: true, but you can have more (Haskell/Ocaml/etc) or less (Java/C/etc) typesafety
18:16:23 <ibid> skew: i wouldn't lump java and c together when talking about type safety :)
18:16:26 <SamB> Python is off on a third arm, methinks.
18:16:53 <ibid> skew: but yeah, you have a point, i was just making a point about the terminology, more or less
18:16:56 <SamB> ibid: what if the compiler compiled the Java almost like it was C?
18:17:05 <ibid> SamB: hmm?
18:18:30 <ibid> SamB: i believe the language spec requires strong runtime checking, unlike in c
18:18:31 <skew> SamB: then it's not properly a Java compiler. The language guarantees typechecks and such
18:18:38 <skew> array bounds too
18:18:42 <SamB> skew: hrmm..
18:18:52 <SamB> skew: what does it do if they fail?
18:19:03 <ibid> SamB: throw an exception
18:19:08 <skew> the typing on arrays requires a runtime typecheck on some operations, which really sucks for performance
18:19:40 <SamB> anyway, I don't think all that stuff would be much fun to teach.
18:19:42 <skew> I think arrays are given covariant subtyping, which is a bad idea for mutable cells
18:19:44 <SamB> all pain and suffering.
18:20:49 <skew> my school uses Scheme for the first language, which is decent enough
18:21:07 <camio> skew: Which school is that?
18:21:32 <ibid> i sometimes offer my students thoughtbites they can chew on and remember, if they remembered nothing else. on popl, my favourite is "most of innovation in language technology in the past thirty years has come from the functional community"
18:21:32 <heatsink> I think Caltech teaches scheme first, too
18:21:39 <ibid> hut too
18:21:40 <skew> thinking about types earlier would be good, but at least they get some idea of what is possible.
18:21:44 <skew> camio: Caltech
18:21:45 <camio> MIT too
18:22:22 <skew> yeah, the prof that started the modern incarnation of CS1 was fresh from MIT
18:22:32 <skew> before that it was quite a mess
18:22:57 <skew> one year they were teaching with a Java varient under (buggy) development.
18:23:09 <ibid> on some level i just love the israelian solution (well, at least one israelian university)
18:23:49 <camio> ibid: What solution is that?
18:24:41 <ibid> start with mathematical logic, give prolog apparently as a side thought and present for example tableaux and resolution using prolog
18:25:06 <saz> in a programming course?
18:25:22 <ibid> now, i mean, how they start the whole curriculum
18:25:44 <ibid> programming as a side thought appeals to me :)
18:25:59 <ibid> of course, after that they are free to get all the c++ and java and c# they like...
18:26:12 <SamB> why would they like it?
18:26:34 <ibid> i said i liked the thought :)
18:26:50 <SamB> the c++ and java and c#, I mean
18:27:02 <camio> ibid: They must not get a lot of programs from their graduates.
18:27:09 <skew> SamB: getting paid, that sort of thing...
18:27:17 <ibid> SamB: they read the papers and see what employers expect
18:27:19 <ibid> camio: oh?
18:27:24 <skew> logic is great sutff, though
18:27:32 <SamB> ibid: yes, but would they *like* it?
18:27:33 <ibid> camio: remember, this would be first semester only
18:27:47 <SamB> skew: too.
18:27:53 <skew> unfortunately most of the interesting things are quite uncomputable
18:28:06 <ibid> skew: that's where the fun starts :)
18:28:27 <ibid> decidable problems are boring
18:28:33 <camio> ibid: When would they introduce programming programs?
18:28:40 <skew> if they have computers that can run those programs, all the better!
18:29:09 <ibid> camio: "give prolog apparently as a side thought and present for example tableaux and resolution using prolog"
18:29:23 <ibid> camio: sounds to me like programming
18:29:37 <ibid> i like the idea of sneaking it up on them
18:29:43 <ibid> not make a big deal out of it
18:30:26 <SamB> I wish I could go someplace like that
18:32:01 <camio> ibid: I guess not usually what I think of when someone describes a program that they want.
19:54:41 <heatsink> How do I refer to an operator from an imported qualified module?
19:55:08 <heatsink> I tried using Parsec.<|> and Parsec.(<|>), both seem to be syntax errors
19:56:30 <heatsink> oh, no, Parsec.(<|>) is not a syntax error, it produces the error "Data constructor not in scope: Parsec"
20:00:33 <Igloo_> (Parsec.<|>) if you want to use it as a function
20:01:29 <heatsink> thanks, that worked
