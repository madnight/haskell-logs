03:30:42 <shapr> good morning #haskell!
03:31:40 <bring> good morning
03:32:48 <Jon> morning
03:34:44 <shapr> whad's going on?
03:35:31 <maihem> MyClass a => a is a type that satisfies the predicate MyClass. How can I describe a type that specifically does not satisfy a predicate?
03:37:43 <maihem> I've got two instance declarations that "overlap". one of them is Ord o => Transition o String o, the other is (Transition s t l, Transition s' l e) => Transition (Link s s') t e
03:39:07 <maihem> I want to say in the second one that Ord Link s s' is not true
03:39:52 <maihem> I mean Ord (Link s s')
03:45:44 <Jon> shapr: not a lot, personally just writing up project stuffs
03:45:59 <shapr> I think there war a recent discussion of this on the mailing lists, I don't think you can give anti-instances
03:47:11 <Jon> when would you use that information
03:47:20 <Jon> in a function which required something that didn't have certain behaviour?
03:48:03 <shapr> that sounds right
03:49:46 <maihem> I've got an instance in my state machine program that counts the number of "the" triggers that occurs, changing its state each time to reflect that count and spitting out the count as an event. and I've got a Link s s' that can link a state machine's events to the trigger of a second state machine. but Ord (Link Ord Ord), so the two instances overlap.
03:50:21 <maihem> I'll post the code on hawiki
03:53:32 <maihem> okay, its there: http://haskell.org/hawiki/HaskellIrcPastePage
03:54:53 <maihem> The problem I see is that Link Ord Ord shouldn't be an instance of Ord unless I say so, but it appears to be :/
03:57:01 <maihem> and there should only be a warning until I try to use Link Ord Ord where a Transition a t e => a is required anyway
04:28:39 <maihem> well, I've sorta worked around it, but is there a way to avoid this duplication of specifying Num n: data Num n => Counter n = Count n; instance Num n => Transition (Counter n) String n
04:29:09 <maihem> it won't compile unless I have it in the Transition instance
09:38:43 <Lor> re
10:12:46 <Marvin--> woot, snooker on TV
10:13:46 <Igloo> :-)
10:17:16 <Marvin--> Igloo: does that mean I get to poke fun at your pool playing skills again? ;)
10:18:39 <Igloo> If you want  :-)
10:19:35 <Marvin--> yay!
12:33:13 <Xur_Terra> help me !
12:38:41 <anduril1> bah, GHC takes way too long to compile
12:44:15 <skew> yeah
12:44:32 <skew> I wonder why ar takes so long to run
12:45:33 <skew> I've heard that modifying the makefile to run it with more heap can help a lot
12:46:38 <skew> I've never tried it though. I'm using gentoo and don't want to mess with the build
12:51:16 * Marvin-- ponders the intriciacies of go
12:55:50 <anduril1> skew: yeah, I'm on gentoo also
12:57:31 <anduril1> it probably doesn't help that I'm emergeing openoffice at the same time . . .
12:58:08 <vegai> sounds like a contest ;P
12:59:10 <vegai> anduril1: you could just use ghc-bin, you know
13:00:00 <anduril1> vegai: I use gentoo, I don't believe in binary packages
13:00:39 <vegai> anduril1: religious?
13:01:57 <vegai> anduril1: are you aware that you probably have ghc-bin already? =)
13:09:57 <skew> I might try to modify it the next time I upgrade GHC.
13:10:23 <skew> I've got a copy of the fptools repository, just to have the source around, so I suppose I could build in there
13:10:48 <skew> my CPU's mostly idle anyway
13:30:30 <Igloo> Can you not just use ghc +RTS -M100M -RTS instead of ghc? (I might mean -H)
13:33:55 <skew> Igloo: I think that's it. I don't think it would even be hard to set in the fptools buildscript
13:34:35 <skew> er, buildsystem. The gentoo package grabs a fresh copy of the source though, and I don't understand how they work
15:21:48 <vinc__> Hi
17:28:42 <Gahhh> what's a good book on Haskell for people without any FP background ?
17:29:02 <skew> Gahhh: The Gentle Introduction?
17:29:09 <skew> Well, I'd learned Unlambda first
17:29:24 <Gahhh> I read the gentrle into at haskell.org
17:29:36 <skew> There are probably better books out there, but I didn't use them
17:29:42 <skew> you should write some code too
17:29:57 <Gahhh> well yeah
17:29:58 <johs> What was it, "gentle like a Metallica concert"?
17:30:08 <Gahhh> but I'd like a good reference as well.
17:30:26 <Gahhh> metallica concert's been quite gentle in the last decade or so imho
17:30:40 <skew> Ah, for reference the GHC docs and the language report are nice
17:31:01 <johs> Gahhh: Yeah, they could've picked a different band, but Metallica is pretty well-known.
17:31:09 <johs> Say, Ministry.
17:31:44 <johs> "Gentle like a Ministry concert", but nobody knows how Ministry sounds.
17:31:47 <shurik> or Rob Zombie
17:31:50 <Gahhh> I do
17:32:32 <johs> I think Rob Zombie is gentle.
17:33:38 <johs> "Gentle like a Slayer concert", perhaps.
17:33:58 <johs> People will know intuitively that a band called Slayer can't have gentle concerts.
17:35:41 <Gahhh> heh
17:38:27 <johs> Did you know there's a band called Brutallica, by the way?
17:38:39 <johs> Great bandname.
17:39:12 <johs> Too bad they're a cover band.
17:40:29 <Gahhh> there's a band named "f**king c**t" as well, I believe
17:41:55 <johs> They _didn't_ want a parental advisory-sticker?
17:44:27 <Gahhh> I dont think they cared about parents or stickers
17:44:54 <Gahhh> geez, there are only a few books on haskell, and they all have poor reviews at amazon.com
17:45:37 <skew> by people who actually ended up learning Haskell somehow?
17:45:41 <shurik> Hudak's book is popular
17:46:08 <shurik> the guy who wrote Gentle Intro tutorial
17:46:17 <johs> I've got Hudak's book. It's alright.
17:46:55 <shurik> you don't need any other books, do you? you get enough example in the book and the rest is in haskell's report
17:46:57 <Gahhh> yeah it has good reviews, but one of the complaints was it was too much about "examples"
17:47:10 <Gahhh> well, maybe so
17:47:35 <johs> I guess that's true.
17:47:58 <johs> But it's an introductory text.
17:48:03 <Gahhh> ok then
17:48:08 <Gahhh> 5 left in stock
17:48:11 <Gahhh> I'd better hurry
17:50:16 <Gahhh> anybody heard the latest In Flames album ?
18:14:12 <Spark_> slipknot concerts are the worst because of the brats that go :)
18:17:55 <np_hard> bleh, the last thing I expect to see on #haskell is nu-metal discussion
20:12:29 <heatsink> I noticed that if-then-else needs to go in parentheses inside a do block to avoid generating an error
20:12:34 <heatsink> after an hour or so of frustration
20:12:55 <heatsink> This looks somewhat odd, I'm wondering if it's something you don't usually do
