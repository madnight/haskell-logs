00:00:12 * fier got tuck when BT was .torrent served by HTTP
00:00:27 <fier>      ^s
00:02:32 <fier> http://rafb.net/paste/results/m1369223.html
00:02:37 <fier> Whats wrong with this?
00:02:54 <fier> user@localhost:~/tmp/tmp011$ make
00:02:54 <fier> ghc -O -o fibo_hs fibo.hs
00:02:54 <fier> ghc -O -o fast_hs fast.hs
00:02:54 <fier> fast.hs:9: parse error on input `='
00:02:54 <fier> make: *** [all] Error 1
00:03:22 <SamB> well, torrents can be gotten any way you can get a file... I actually picked up a couple off gnutella ;-), and you can google for them...
00:04:20 <fier> SamB: :-)
00:04:35 <fier> SamB: Yea, but its not p2p
00:04:50 <fier> (As long as you dont share .torrents on Freenet ;-)
00:05:16 <fier> [Assuming Google crawls freenet.thing.net]
00:07:34 <SamB> no, its not strictly p2p. however, it is pretty cool.
00:08:17 <fier> Oh no!
00:08:51 <fier> GS errors something when opening YAHT.pdf... It opened it before nicely :-?
00:10:05 * fier notes: Download with BT from .torrents served over Freenode, search using Google.
00:11:48 <SamB> lets not forget what happens if either the tracker goes down, or a torrent is taken off the tracker...
00:12:54 <fier> Hmm... Gnutella even distributes "trackers", Ever tried OpenFT?
01:53:17 * Cale is away: sleep
02:06:02 <fier> Anyone awake here?
02:07:24 <fier> No1?
02:11:03 <Lunar^> fier: 42 would be more appropriate
02:11:25 <fier> Lunar^: :-D
02:11:43 <fier> Lunar^: Sorry, but how do i take commandline oprions in Haskell?
02:12:00 <Lunar^> fier: See System.Environment module
02:12:12 <Lunar^> @type getArgs
02:12:17 <fier> And how do i turn a string into an ElCamino integer?
02:12:34 <Lunar^> I don't know what an ElCamino integer is
02:13:14 <fier> Lunar^: Big integer, basicly integer, but it mught be expected to be 10^2000, for instance..
02:13:40 <earthy> fier: assuming you have 0 and succ for your ElCamino integers, you could then simply program it out. might take a long time to run though. :P
02:14:42 <fier> earthy: ?
02:14:46 <fier> Hmm...
02:14:51 <Lunar^> fier: You should really READ the Haskell documentation
02:15:27 <fier> Lunar^: Indeed. WHere is it?
02:16:03 <fier> (But first i want to have this little app working...)
02:16:04 <earthy> http://www.haskell.org/
02:16:11 <fier> -www
02:16:29 <Lunar^> fier: Your taking it in the wrong order IMHO
02:16:30 <fier> Lunar^: So import System.Environment
02:16:57 <fier> Lunar^: and CLA = System.Environment.getArgs
02:17:01 <fier> Right?
02:17:43 <Lunar^> CLA ?
02:17:54 <earthy> command line args
02:18:10 <fier> Yea...
02:18:25 <fier> Or a variable in fact.
02:18:44 <Lunar^> fier: http://haskell.org/ghc/docs/latest/html/libraries/base/System.Environment.html
02:18:59 <fier> Lunar^: Great! Cheers!
02:19:17 <fier> And _BIG SORRY_ for mentioning "variable".
02:25:53 <fier> ...What is Marshal?
02:28:49 <fier> @type System.Environment.getArgs
02:30:17 <Lunar^> getArgs :: IO [String]
02:30:28 <fier> :-D
02:31:00 <fier> Lunar^: Really n00b question: Where should I import? Before or after "module Main where"?
02:33:01 <Lunar^> aftert
02:34:07 <fier> http://rafb.net/paste/results/TY822521.html
02:34:17 <fier> ^^^ Can someone look at it please?
02:34:46 <fier> For bogus n00b misunderstandings, ...
02:35:08 <Lunar^> fier: You need to understand monads
02:35:38 <fier> Oh.
02:35:38 <Lunar^> fier: Ok, to keep it simple, you need to understand how I/O interactions work in Haskell
02:35:41 <fier> Lunar^: Long way
02:35:48 <Lunar^> fier: That last part is very simple
02:36:27 <Lunar^> main :: IO () <-- this means that main is a function that does I/O and that returns () <-- you could see this like void, it's actually read aloud 'unit'
02:37:00 <Lunar^> Whenever you need to do things with the real world (I/O), you have to make things _in order_
02:37:32 <Lunar^> To tell Haskell that you wants to make things in a certain order, you use the keyword 'do'
02:37:34 <fier> Okay.
02:38:09 <fier> Actually it i do:
02:38:10 <fier> do
02:38:10 <fier>     a
02:38:10 <fier>     b
02:38:15 <fier> Or something?
02:38:23 <Lunar^> fier: Your on the good way
02:38:30 <Lunar^> s/Your/You're/
02:38:35 <fier> The actual error is, like:
02:38:42 <fier> user@localhost:~/tmp/tmp011$ make
02:38:42 <fier> ghc -O -o fibo_hs fibo.hs
02:38:42 <fier> fibo.hs:8:
02:38:42 <fier>     Couldn't match `[a]' against `Integer'
02:38:42 <fier>         Expected type: [a]
02:38:44 <fier>         Inferred type: Integer
02:38:47 <fier>     In the application `toInteger getArgs'
02:38:49 <fier>     In the first argument of `(!!)', namely `toInteger getArgs'
02:38:52 <fier> make: *** [all] Error 1
02:39:01 <Lunar^> Please pay attention, it's not finished
02:39:08 <fier> Lunar^: Okay sorry...
02:39:12 <Lunar^> getArgs :: IO [String]
02:39:27 <Lunar^> This means that getArgs is going to ask the real world for a list of strings
02:39:58 <fier> Yes.
02:40:06 <Lunar^> In order to use these strings, you'll have to bind the value
02:40:13 <fier> Bind?
02:40:44 <Lunar^> Because of the sequencement, it's not '=' like in pure (without sequencing) bindings
02:40:59 <Lunar^> You have to use '<-', like in this :
02:41:01 <fier> Its "let"
02:41:04 <fier> ?
02:41:11 <Lunar^> main = do args <- getArgs
02:41:18 <Lunar^>       print args
02:41:23 <fier> Oh
02:41:23 <Lunar^> (please fix the indentation)
02:41:41 <Lunar^> let makes 'pure' bindings
02:42:00 <Lunar^> args will have type [String]
02:43:14 <fier> And can I do `toInteger args!!0'?
02:43:51 <Lunar^> Function application always has priority to any operators
02:44:05 <Lunar^> so what you typed actually is
02:44:10 <Lunar^> (toInteger args)!!0
02:44:20 <fier> toInteger (args!!0)
02:44:20 <Lunar^> See the problem ?
02:45:15 <fier> ?
02:45:19 <Lunar^> sure :)
02:45:51 <fier> Now it gives this:
02:45:58 <fier> user@localhost:~/tmp/tmp011$ make
02:45:59 <fier> ghc -O -o fibo_hs fibo.hs
02:45:59 <fier> fibo.hs:9: The last statement in a 'do' construct must be an expression
02:45:59 <fier> make: *** [all] Error 1
02:46:37 <Lunar^> 1. Pay attention to indentation 2. statement is opposed to a binding here (like 'args <- getArgs')
02:46:59 <fier> :-/
02:47:18 <Lunar^> What's the problem ?
02:47:19 <fier> user@localhost:~/tmp/tmp011$ cat fibo.hs 
02:47:19 <fier> module Main where
02:47:19 <fier> import System.Environment
02:47:19 <fier> fibo = 1 : 1 : zipWith (+) fibo (tail fibo)
02:47:19 <fier> main =
02:47:21 <fier>         do args <- System.Environment.getArgs
02:47:23 <fier>         print (fibo !! (toInteger (args!!0))-1)
02:47:34 <Lunar^> So you're hitting the 1. here
02:47:44 <Lunar^> Your code is actually parsed as
02:47:52 <fier> Well, i dont see sorry...
02:48:04 <Lunar^> main = do args <- getArgs print (fibo !! (toInteger (args!!0))-1)
02:48:13 <fier> :-D
02:48:27 <fier> Haskell ignores \n?
02:48:27 <Lunar^> You need to align the 'a' of args and the 'p' of print
02:48:40 <Lunar^> Happily NOT !
02:49:21 <fier> user@localhost:~/tmp/tmp011$ cat fibo.hs 
02:49:21 <fier> module Main where
02:49:21 <fier> import System.Environment
02:49:21 <fier> fibo = 1 : 1 : zipWith (+) fibo (tail fibo)
02:49:21 <fier> main =
02:49:23 <fier>         do args <- System.Environment.getArgs
02:49:26 <fier>                 print (fibo !! (toInteger (args!!0))-1)
02:49:36 <Lunar^> Please not that if you use 'import System.Environment.getArgs', you don't have to use the fully qualified name for getArgs after, just use 'getArgs'
02:49:40 <Lunar^> s/not/note/
02:50:11 <fier> Okay :-)
02:50:19 <Lunar^> Is this working or not ?
02:50:21 <fier> Do i have to actually align a to p?
02:50:28 <fier> With spaces?
02:50:34 <fier> 8-|
02:50:54 <Lunar^> fier: Space or, damn, tab counting as 8 spaces
02:51:09 <fier> main = do
02:51:09 <fier>         args <- getArgs
02:51:09 <fier>         print (fibo !! (toInteger (args!!0))-1)
02:51:24 <fier> This better fits my taste...
02:51:45 <Lunar^> Both works, do as you like
02:51:48 <fier> user@localhost:~/tmp/tmp011$ make
02:51:48 <fier> ghc -O -o fibo_hs fibo.hs
02:51:48 <fier> fibo.hs:8:
02:51:48 <fier>     Couldn't match `Int' against `Integer'
02:51:48 <fier>         Expected type: Int
02:51:50 <fier>         Inferred type: Integer
02:51:53 <fier>     In the application `toInteger (args !! 0)'
02:51:55 <fier>     In the second argument of `(!!)', namely `(toInteger (args !! 0))'
02:51:58 <fier> make: *** [all] Error 1
02:52:08 <Lunar^> (!!) :: [a] -> Int -> a
02:52:32 <Lunar^> Because there is the assumption that a list size will never exceed the machine word size
02:52:47 <fier> Mhhh?
02:52:58 <fier> Int and Integer are different?
02:53:02 <Lunar^> Yes
02:53:11 <fier> And what is the difference?
02:53:40 <Lunar^> Underlying implementation : Int maps directly to the processor word size, whereas Integer are encoded (libgmp)
02:53:50 <Lunar^> Int are really really faster, but overflows
02:54:02 <fier> :-)
02:54:26 <fier> And why is 0 Integer not Int here?
02:54:45 * fier likes GMP!
02:55:15 <Lunar^> fier: You're not reading the error message like it should
02:55:31 <Lunar^> fier: 'In the second argument of ...'
02:55:55 <Lunar^> fier: the proble is that you have : fibo !! x, where x :: Integer
02:56:20 <Lunar^> fier: So you shouldn't use toInteger here
02:56:21 <fier> Oh no.
02:56:27 <fier> Then what?
02:56:35 <fier> I want to pass Integer to fibo.
02:56:52 <fier> Or maybe not :-\
02:57:03 <fier> Simply toInt?
02:57:22 <Lunar^> fier: No, you are passing the number to (!!) not to fibo
02:57:37 <Lunar^> fier: fibo not a function in what you sent
02:57:40 <fier> Yes yes, fibo is a list...
02:57:57 <fier> But I want to query items of it.
02:58:24 <fier> `toInt' is nonexistent...
02:58:33 <Lunar^> fier: use 'fromInteger (toInteger ...'
02:58:49 <fier> Whoa?!
02:58:53 <ludde> why not use read instead ?
02:59:08 <Lunar^> ludde: You are right, I forget it all the time :)
02:59:17 <fier>         print (fibo !! fromInteger ((toInteger (args!!0)))-1)
02:59:34 <fier> ludde: ?
02:59:38 <fier> @type read
02:59:38 <lambdabot> read :: Read a => String -> a
02:59:50 <Lunar^> fier: ludde is right, use 'read' this is what you really want
02:59:56 <ludde> fibo !! read(args!!0) -1 or something
02:59:59 <fier> Or _read_ the docs?
03:00:23 <fier> ludde: Cheers.
03:01:18 * fier wonders what x => Y -> x is...
03:01:38 <Lunar^> fier: Read the doc :)
03:01:39 <fier> But works :-D
03:01:49 <fier> Lunar^: Big thanks!
03:02:04 <Lunar^> fier: to be short, Read (notice the caps) is a type class
03:02:32 <Lunar^> fier: Type classes should not be misunderstood by comparing it with object classes (in OOP)
03:02:47 <Lunar^> fier: It's more like Java interfaces if you know them
03:03:33 <fier>         print (fibo !! fromInteger ((toInteger (args!!0)))-1)
03:03:46 <fier> Substracts one from the fibo, not the index :-\
03:04:04 <fier> Or what, with read or cuz...
03:04:57 <fier> Lunar^: Java? Totally Chinese. I know C, Python, (and *evil* languages as Pascal, BASIC...)
03:05:34 <Lunar^> fier: I really don't have the time to explain that part
03:05:42 <Lunar^> fier: It's not easy to be clear
03:06:04 <fier> Cool it works now? Paren problem :-)
03:07:03 <fier> Lunar^: Hmm... Okay no prob. I wont define types soon I think...
03:11:04 <Lunar^> fier: You shuld !
03:11:06 <Lunar^> +o
03:11:29 <Lunar^> fier: Variants are a damnly powerfull concept !
03:12:30 <fier> I can even reimplement the whole darn thingy in Python. I really like types.
03:12:50 <fier> And Haskell is just better at them...
03:14:16 <bring> Lunar^: have you given any more thought to coming to EuroHaskell?
03:32:48 <Lunar^> bring:  Yes
03:32:53 <Lunar^> bring: I think I'm coming
03:33:04 <bring> great
03:33:06 <Lunar^> bring: Just need to get plane tickets
03:33:33 <andersca_> eurohaskell?
03:33:39 <andersca_> just keep in mind that it's not very official
03:33:40 <andersca_> :)
03:33:58 <Lunar^> andersca_: ?
03:34:12 <andersca_> s/official/organized/
03:34:21 <bring> a lot of people find hOp very interesting, me included. it'd be fun do some sprints with it
03:34:47 <Lunar^> bring: That's quite frightening
03:34:55 <bring> :)
03:35:29 <bring> it'd be excellent if you would like to list some things the need to (or would be fun to) have done
03:35:37 <bring> s/the/that/
03:35:59 <bring> andersca_: shut up :)
03:36:03 <Lunar^> I'm so busy with other issue right now :( I hope I soon will be either able to quit my job or get in the university
03:36:44 <Lunar^> andersca_: I really don't mind unofficial and unorganized things :)
03:37:19 <Lunar^> bring: getting GHCi to work would be so cool
03:37:53 <Lunar^> But it's been 3 weeks already without touching hOp's code
03:38:22 <bring> ok, I put that in the wiki
03:38:51 <bring> if you have any more ideas, just add them to the wiki page
03:38:52 <bring> http://www.haskell.org/hawiki/EuroHaskell
03:39:40 <bring> and add yourself to the list of attendees when you feel like it
03:40:00 <bring> you said you'd bring your own laptop, right?
03:41:14 <Lunar^> Yes
04:38:45 <shapr> jiihaa
04:40:02 <Lunar^> shapr: !
04:40:48 <shapr> bonjour Lunar^
08:06:29 <Igloo> Can anyone tell me what -able word I want for something that progress can be made on?
08:07:17 <skew> Igloo: possible?
08:08:02 <skew> runnable?
08:08:05 <Igloo> No - I want a word like "doable" only that doesn't imply the whole thing can be done
08:08:06 <cptchaos> Igloo: progressable ;-) ?
08:08:12 <_zZzZz> capable? :x
08:08:29 <tmoertel> tractable?
08:08:30 <skew> doesn't doable imply the whole things is possible?
08:08:41 <skew> ooh, tractable is good.
08:09:10 <Igloo> tmoertel: I thought that had a technical definition, although I couldn't easily find it with google
08:09:27 <tmoertel> more often you'll see "intractable"
08:09:33 <Igloo> progressable is the right idea but I'm not sure it's a real word  :-)  (which I guess isn't necessarily required, but would be nice)
08:10:16 <tmoertel> assailable?
08:10:29 <tmoertel> "not hopelessly intractable"?
08:10:45 <skew> Igloo: what are these things you are trying to describe?
08:11:28 <tmoertel> soluble?
08:12:18 <tmoertel> movable?
08:12:36 <Igloo> Things similar to unifications. So you can't make progress on U(v1, v2) but can on U(X(v1, v2), X(v3, v4))   (which creates subproblems U(v1, v3), U(v2, v4))
08:13:03 <Igloo> And can on U(X(anything), Y(anything))   which fails
08:13:43 <tmoertel> The "progressable" ones are unfettered; the others are not.
08:14:04 <skew> Igloo: what is the name for? a function? documentation? a paper about unification algorithms?
08:14:20 <Igloo> An algorithm description
08:14:34 <Igloo> I think I'll go with progressable, even though it sounds like an abomination to me  :-)
08:14:36 <skew> maybe unnormalized
08:14:45 <tmoertel> unrestrained?
08:14:47 <Igloo> Oh, hmm
08:16:45 <Igloo> I think progressable will flow better than talking about (un)normalised things
08:16:48 <Igloo> Thanks for all your ideas!
08:17:03 <tmoertel> thanks for letting us play Human Thesarus!
08:17:07 <skew> Igloo: maybe reducable?
08:28:07 <Igloo> Aha, better still! Ta skew!
08:28:28 <Igloo> tmoertel: Glad to have brightened up your day  :-)
08:31:33 <shapr> advancable? furtherable
08:34:28 <Igloo> I think reducible is perfect, but thanks  :-)
08:36:08 <skew> Igloo: Another correct spelling is reduce*able* ;)
08:37:22 <Igloo> Not according to dict
08:37:42 <skew> Igloo: ispell disagrees
08:38:49 <skew> or at least claims that "reduceable" is some word
08:40:07 <Igloo> Neither british nor american ispell likes it here
08:41:41 <kosmikus> does anyone know a good introduction to the pdf format apart from the specification?
08:43:48 <SamB> kosmikus: it is hairy and hard to write a parser for.
08:44:11 <SamB> at least, using a parser generator it is
08:44:14 <kosmikus> I don't want to write a parser for it
08:44:23 <SamB> thats good, than
10:00:47 <forester> tmoertel: hi there
11:49:56 <shapr> @yow !
11:49:57 <lambdabot> Clear the laundromat!!  This whirl-o-matic just had a nuclear meltdown!
11:50:23 <fier> sarahbot style?
11:50:35 <fier> Or which was first?
11:53:10 <shapr> what's sarahbot?
11:53:20 <fier> shapr: #scheme
11:53:46 <shapr> oh, I dunno which was first
11:57:46 <Cale> @yow
11:57:47 <lambdabot> ..  If I had heart failure right now, I couldn't be a more fortunate man
11:57:47 <lambdabot> !
12:02:05 <Riastradh> sarahbot preceded lambdabot's continual presence.  (I don't know when the original lambdabot was written, however.)
12:02:49 <fier> Riastradh: But is sarahbot the same? In Haskell? Or is it in .scm?
12:03:06 <Riastradh> lambdabot is written in Haskell.  sarahbot is written in Scheme, with the use of a Java library.
12:03:20 <fier> Riastradh: Ick!
12:03:24 <Riastradh> Ick?
12:03:32 <fier> lambdabot: You RuLeZ!
12:03:32 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
12:03:45 <fier> Riastradh: Java :-\
12:04:06 <Riastradh> fier, hey, sarahbot is Scheme _stealing_ from Java!
12:05:30 <fier> Riastradh: Good thieved know the value of everything.
12:05:41 <Riastradh> Huh?
12:05:56 <fier> Riastradh: Oh. Ban englush, sorry...
12:07:41 <fier> Riastradh: But stealing from Java is a bad choice.
12:08:04 <Riastradh> Why?  There are a hell of a lot more Java libraries than Scheme.
12:08:30 <fier> :-D
12:08:42 <fier> Sure, but Java is 3\/1|_!
12:09:25 <Riastradh> Right, so stealing from it is a good thing!
12:10:07 <fier> :-\
12:11:32 <fier> Riastradh: It's like, you download crap music with P2P because stealing from evil is good?
12:11:46 <fier> No! You download the best out there!
12:12:06 <fier> Scheme should have stoled grom glib or lambdabot :-)
12:12:14 <fier> stolen from
12:12:29 <Riastradh> I doubt glib has an IRC library, and lambdabot is written in Haskell, so it would be kind of hard to steal from it.
12:13:09 <fier> Riastradh: Compile to .so, link it? Or is it impossible?
12:13:28 <fier> (Okay, then stealing from irssi...)
12:13:40 <phubuh> irssi is a terrible mess
12:13:58 <fier> phubuh: May I /ver yout?
12:14:06 <Riastradh> fier, Haskell and Scheme have _completely_ different architectures as languages, and the implementations of them are even more wildly different.
12:14:17 <phubuh> fier: i don't mind
12:14:34 <fier> Oh.
12:14:36 <fier> phubuh: :-D
12:15:11 <Riastradh> irssi is great as a client, but it's just a client, not a general-purpose IRC library.
12:15:25 <fier> <flame>EMACS is Eight mmhGigabytes And Continously Swapping!
12:15:30 <fier> </flame>
12:16:12 <fier> Riastradh: Yes. Can you tell me about Scheme and Haskell implementation differences? I am quite new :-D
12:16:28 <Riastradh> fier, why don't you learn both Scheme and Haskell and come to your own conclusions?
12:16:41 <shapr> yah, that's best
12:19:33 <phubuh> http://www.dragoncat.net/lists/irssi-dev/2003-01/0003.html is interesting
12:21:04 <phubuh> he apparently has huge problems with type unsafety and heap corruption, yet he's insisting on using C for the rewrite
12:22:50 <Riastradh> Tell him very politely how moronic he is for sticking with C.
12:23:59 <phubuh> i have better things to waste my time on :-)
12:24:43 <fier> What should he use?
12:31:11 <heatsink> Is the STG-machine paper a good resource for learning how Haskell is implemented?
12:39:28 <Riastradh> fier, Scheme, or Haskell, or Erlang, or...there are a lot of better choices.
12:40:04 <Cale> There are even better imperative choices :)
12:40:13 <fier> Cale: Than C?
12:40:24 <Cale> certainly
12:40:29 * fier thinks C is quite okay.
12:43:15 <Marvin--> it's quite okay as a relatively platform-independent assembler
12:43:20 <Cale> C isn't going to take care of much of anything for you. C is the language that combines the speed of assembly with the power and expressiveness of assembly. Computers are fast now - you want to be sure that your code is correct more than you want to be sure that it's fast. For something like an IRC client, you don't need complete control over every little instruction.
12:43:29 <heatsink> irssi is an IRC server?
12:43:38 <Cale> client
12:43:44 <heatsink> ok
12:44:23 <heatsink> Cale: Have you ever tried to allocate ten variables to seven registers?
12:44:41 <Cale> It's better to have a language which will let you express things on a higher level, and see that you have all the logic right quickly, and take care of the little details for you.
12:44:41 <heatsink> Cale: personally, I'm glad I don't ever have to do that in C :)
12:44:51 <Riastradh> Marvin--, uh, no, it has lots of problems there, as well, hence C--.
12:45:01 <Marvin--> Riastradh: I didn't say "perfect"
12:46:34 <Riastradh> C combines the power and expressiveness of assembly with a high enough level to not be able to do anything useful _really_ close to hardware.
12:46:34 <fier> Sure Haskell is better than C for an IRC client, but C is still way better than most imperative languages.
12:46:48 <Riastradh> fier, 'better' in what sense?
12:46:52 <Riastradh> 'Better' for what purpose?
12:48:39 <Cale> I think that even C++ beats C for just about anything, and C++ isn't anywhere near perfect.
12:49:00 <fier> Hmm...
12:49:46 <fier> Well, Its generally accepted that C++ can not even be called a programming language, while C has its uses. For example for writing OSs, like Linux.
12:50:12 <fier> Bjarne got the OOP paradigm wrong :-(
12:50:17 <heatsink> What? Of course C++ can be called a programming language... it even is one
12:50:17 <eivuokko> Huh.  "Generally accepted"?
12:50:49 <Cale> You don't actually need C to write operating systems.
12:51:17 <fier> Cale: Yes.
12:51:26 <Cale> There are places where you might need to include some assembly.
12:51:41 <fier> Yes, C can inline asm.
12:51:47 <Riastradh> Straight ANSI C cannot be used to write an operating system.
12:51:59 <Cale> But this has nothing to do with C.
12:52:14 <Riastradh> So C is _inadequate_ for writing an OS.
12:52:20 <Marvin--> turbo pascal can inline assembly too! yay!
12:52:42 <heatsink> Is it possible to write a bootloader in anything other than assembly?
12:52:48 <fier> Riastradh: LOL
12:52:57 <fier> Riastradh: Linux is written in C
12:53:02 <Riastradh> fier, _only_ C?
12:53:09 <fier> All 3 major BSDs are written in C
12:53:13 <Riastradh> _Only_ C?
12:53:20 <fier> Even Windows is written in C.
12:53:26 <Riastradh> _Only_ C?
12:53:32 * Marvin-- wonders what Ria-... right :P
12:53:46 <Riastradh> ...?
12:53:54 <heatsink> Windows is written in C? Not C++?
12:53:57 <fier> Riastradh: Only C? No. ASM+C.
12:53:59 <Marvin--> I was trying to predict what you would respond ;)
12:54:11 <fier> heatsink: The "kernel" is in C.
12:54:15 <eivuokko> heatsink, Undoubtedly Windows kernel is written in C.
12:54:27 * fier never seen Windoze sources tho, fortunately.
12:55:49 <Riastradh> fier, did you know there's also an OS (or several, perhaps) written mostly in SML? at least one written in mostly Scheme?  Demonstrating examples of OSs written in C doesn't prove anything.
12:55:52 <Marvin--> C has its uses, it is by no means the ultimate language
12:56:06 <Marvin--> and don't forget hOp
12:56:19 <Marvin--> written mostly in Haskell
12:56:53 <eivuokko> Whoa?  What's this haskell h0p? :)
12:56:57 <ksandstr> including the memory manager?
12:57:02 <Riastradh> C had its uses thirty four years ago to write the original UNIX kernel and it ought to have died out long ago.
12:57:35 <fier> Riastradh: It demonstrated C is appropriate for OS development. I didnt say *ML wasnt!
12:57:43 <fier> Thos Scheme _is_!
12:57:46 <Riastradh> ksandstr, actually, in that Scheme OS I mentioned, it used T, a dialect of Scheme, and T's GC was written in T.
12:57:58 <Marvin--> http://etudiants.insia.org/~jbobbio/hOp/
12:58:04 <heatsink> I think C is still quite applicable to programming low-end systems, such as systems which are too small to allocate memory for general-purpose tasks
12:58:17 <heatsink> ...to dynamically allocate memory...
12:58:32 <Riastradh> heatsink, C is not the only language that can statically allocate memory.
12:58:36 <ksandstr> heatsink: also, power-sensitive systems (cell phones etc)
12:58:57 <fier> heatsink: FORTH is more appropriate for that tho.
12:59:15 <Riastradh> Low-level languages aren't inherently bad, but C is not a good language at _either_ the lower-level or higher-level ends of the spectrum.
12:59:35 <fier> Riastradh: Then what is a good MLL?
12:59:40 <Riastradh> MLL?
12:59:46 <fier> Middle Level Language.
12:59:51 <ksandstr> fier: what, because of the typically miniscule runtime environment? or the variable-size activation records?-)
12:59:52 <heatsink> Riastradh: so what low-level languages do you recommend?
13:00:06 <fier> ksandstr: ?
13:00:19 <ksandstr> fier: why FORTH?
13:00:34 <Riastradh> I recommend Pre-Scheme and Forth.
13:00:35 <holla> @find talib kweli
13:00:35 <lambdabot> Sorry, I don't know the command "find", try "lambdabot: @listcommands"
13:00:37 <fier> ksandstr: C is also good for that okay... FORTH is just more creative ;-)
13:01:18 <fier> Riastradh: Unfortunately, nor Pre-Scheme nor FORTH are imperative.
13:01:30 <Marvin--> why the heck is that unfortunate?
13:01:42 <Riastradh> fier, what do you mean when you say 'X is imperative' or 'Y isn't imperative?'
13:01:47 <ksandstr> fier: but wouldn't C be better in anything more than a one-man project since most people who'd dare go so far low-level will usually know C rather than FORTH?
13:03:07 <np_hard> you don't mean "one-man project" there, you mean "project with the management philosophy that developers should be hireable and fireable at the drop of a hat"
13:03:35 <ksandstr> np_hard: more like "open source project" really :)
13:03:54 <heatsink> Prescheme compiles to machine language... interesting
13:04:07 <np_hard> ksandstr: same thing :)
13:04:14 <fier> ksandstr: Okay.
13:04:23 <Riastradh> heatsink, languages do not compile.  Languages may _be_ compiled, or interpreted.
13:05:09 <fier> Marvin--: Riastradh: We have been talking about how good is C between the imperative languages, nope?
13:05:10 <Riastradh> Programs of languages may be compiled, that is.  There can exist compilers for languages.
13:05:33 <heatsink> Riastradh: I know that
13:05:34 <fier> Also see dict.org for C+-
13:06:04 <heatsink> Riastradh: wood doesn't burn... wood may _be_ burned ;)
13:06:24 <Riastradh> There exist at least two Pre-Scheme compilers that can result in native code.
13:06:37 * fier thinks any language can be compiled to native code.
13:08:07 * bring thinks that English might be a problem
13:08:14 * Riastradh agrees.
13:08:35 <bring> hmm, actually, he didn't say which native code
13:08:42 <bring> my native code is swedish
13:08:43 <heatsink> Scheme or Java can only be compiled to native code if bundled with garbage collectors... and possibly other stuff, I'm not sure...
13:09:10 <bring> most languages need some kind of runtime
13:09:10 * heatsink wonders if prescheme allows call/cc
13:09:14 <ksandstr> but C has a run-time as well. it's just one of the thinner ones.
13:09:19 <fier> There exist Scheme and Java compilers.
13:09:22 <Riastradh> It doesn't support CALL/CC.  Pre-Scheme is a subset of Scheme.
13:14:09 <fier> Other thing: Can you please tell me about all Off-side rule languages you know? I really like this idea...
13:14:21 <Riastradh> 'Off-side rule languages?'
13:14:25 <heatsink> What is off-side rule? I've never heard of that
13:14:29 <ksandstr> huh. that hOp stuff is interesting, to say the least. the author is going to have a lot of... "fun" if he ever decides to support user/kernelspace separation
13:14:34 <Cale> Doesn't icon use the offside rule?
13:15:10 <Cale> hmm, perhaps not
13:15:11 <fier> Cale: Yes. Icon is one.
13:15:25 <fier> Hey, Haskell is off-die rule as well.
13:15:39 <Riastradh> What is this 'off-side rule?'
13:15:43 <Cale> it does? Yeah - I played around with it a bit, but not enough that I really remember it.
13:15:50 <fier> Off-side rule ~= Indentation determines the scope
13:16:07 <Riastradh> The only ones I know of are Haskell and Python.
13:16:10 <fier> Like ABC, Python, Icon(?), Haskell...
13:16:40 <fier> Miranda was off-side rule as well, nope?
13:17:19 <Cale> there's another one - think its name started with W...
13:17:28 <fier> :-\ Okay, then i know all o'em :-)
13:17:43 <fier> Cale: W?
13:17:50 <phubuh> Occam
13:18:04 <Cale> Yeah, there's Occam
13:19:08 <fier> phubuh: Thanks, never heard of it...
13:19:27 <Cale> Can't think of what it was that started with W - perhaps it was nothing.
13:19:33 <kosmikus> make
13:19:58 <fier> kosmikus: :-D Yea, i forgot that
13:22:37 <heatsink> Riastradh: I noticed pre-scheme doesn't allow creating closures at run-time, but it allows recursive function calls (not limited to tail recursion). How does this work?
13:22:56 <Riastradh> What do you mean 'how does this work?'
13:23:54 <heatsink> I thought that for recursive functions, in the general case, each recursive invocation needs its own local variables. But pre-scheme apparently doesn't need it.
13:24:05 <heatsink> ...each nested invocation needs...
13:25:16 <Riastradh> I don't quite understand your question.
13:26:22 <ksandstr> how do the activation records add up? i suppose in traditional scheme implementations lambda-style closures and normal function calls are built in the roughly same manner
13:26:56 <ksandstr> i.e. some scheme implementations allocate space for local variables on the heap instead of the stack
13:27:23 <heatsink> So functions do allocate space for local variables?
13:27:25 <Riastradh> If you're just asking how Pre-Scheme compiles calls, look at some of the code Kelsey's compiler generates in c/scheme48vm.c from the Scheme48 sources.
13:27:47 <Riastradh> s/how Pre-Scheme compiles calls/how Pre-Scheme compilers generally compile calls/1
13:27:52 <heatsink> But this allocated space is not a closure?
13:27:57 <Riastradh> No.
13:28:05 <Riastradh> You don't need to allocate a closure when calling a function.
13:28:14 <heatsink> What if the function is recursive?
13:28:36 <Riastradh> Why would you need to allocate a closure?
13:28:43 <ksandstr> heatsink: i have no clue :) not interested in run-time design myself, never even heard of pre-scheme until now
13:30:15 <heatsink> If the function does operations on its locals after the recursive call, then it needs to store its locals somewhere until the recursive call completes.
13:30:47 <ksandstr> Riastradh: in some runtimes allocating space for the local variables is as quick as making a closure (i.e. a pointer increment) so some runtimes do that rather than manage them in the process stack. sorry for confusing anyone :)
13:31:25 <heatsink> For example, in a stack frame.
13:31:32 <heatsink> Is a stack frame not a closure?
13:32:46 <Riastradh> I'm not exactly sure how Kelsey's Pre-Scheme compiler compiles recursive, but not tail-recursive, calls; you'll have to see for yourself.
13:34:40 <heatsink> Actually, I think it explains on page 33 of the VLISP cmopiler paper, only I can't understand the notation
13:35:37 <Riastradh> It explains in the VLISP paper how Kelsey's Pre-Scheme compiler does it?
13:36:33 <heatsink> It seems to explains how a pre-scheme compiler would transform a recursive call expression into some nonrecursive expression
14:04:49 <bring> is this a common idiom in haskell, and if so, does it have a name or even an inventor? 
14:04:50 <bring> Interface: data Database { query :: Connection -> Query -> IO Result }
14:04:50 <bring> Implementation: connect :: Server -> IO Database
14:04:50 <bring> connect s = Database { query = realQuery (realConnect s) }
14:05:54 <bring> that is, something similar to OO-style interface inheritance
14:06:25 <bring> eh, sorry, that should be: data Database { query :: Query -> IO Result }
20:53:38 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","deb http://www.syntaxpolice.org/haskell-experimental unstable/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","haskelldb 0.7 released","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/hawiki/EuroHaskell"]'
20:53:38 --- topic: set by shapr on [Mon Apr 26 02:37:58 2004]
21:52:08 <Riastradh> Ugh, is haskell.org down?
22:15:40 <monotonom> Seems so.
