01:46:14 * Marvin-- gets som seriously unexpected results
02:55:53 <Marvin--> ga
02:55:54 <Marvin--> h
02:55:59 * Marvin-- swears at citeseer
02:57:51 <ibid> hm?
02:58:51 <musasabi> Smerdyakov: mathemacians don't automatically make good programmers.
02:59:05 <musasabi> Smerdyakov: (thing in the backlog)
03:05:50 <Marvin--> "CiteSeer.IST is temporarily unavailable due to maintenance."
03:10:34 <ibid> ahh
03:10:45 <ibid> i think they still are missing some stuff they used to have
03:57:17 <musasabi> Is there a way to "catch" error?
03:58:08 <Marvin--> not in Haskell98, I think, but with extensions I'm pretty sure you can
04:00:46 <Marvin--> the catch function in Control.Exception can catch error
04:07:58 <shapr> yow!
04:08:45 <Jerub> @yow
04:08:45 <lambdabot> ...I think I'm having an overnight sensation right now!!
04:10:20 * Marvin-- ponders
04:25:43 <kowey> hi all
07:38:38 <basti_> hi
07:41:16 <Lemmih> yo
07:59:17 <bring> hi
08:00:47 <basti_> hi
08:18:04 <basti_> re
08:25:13 <LittleDan> does undoing and then reapplying type constructors have high overhead in GHC or Hugs (as in the following function:
08:25:13 <LittleDan> evaluate (Statements (current:rest)) vars = evaluate (Statements rest) (evaluate 
08:25:13 <LittleDan> current vars)
08:29:24 <basti_> I dont know.
08:30:33 <ibid> well, applying a constructor is memory allocation, but ghc's memory manager is afaik written to handle lots of allocations well
09:32:29 <XTL> Mm.. Guinness.
10:23:57 <LittleDan> Is there anything in the Haskell standard libraries to convert an integer to a string?
10:25:19 <esap> littlenDan: 'show'.
10:25:46 <LittleDan> hmmm.. when I tried that before, it didn't work for some reason, but now it does
10:27:00 <esap> LittleDan: Probably tried to show a value that didn't have just one type.
10:28:55 <esap> LittleDan: That's a common problem, I think, related to using numbers in contexts that can take any type (like 'show').
10:55:21 <LittleDan> When I make an instance of Show for a user-defined type, it says Program error: pattern match failure: instShow_v1558_v1562 (Expression_Value "a"). The program is at the haskell IRC paste page. It's for evaluating the AST of a simple imperitive language I'm writing.
10:55:33 <LittleDan> could you tell me what the problem is?
12:28:49 <atom-z> wow DFT's are clever
12:59:55 <Jezral> http://www.pastebin.com/54328 - Someone help me, please (and ignore the <?php ?>)...I just don't get why that's not correct.
13:01:20 <Smerdyakov> You can't have something that has any Array type.
13:01:28 <Smerdyakov> They're represented differently.
13:05:25 <Jezral> Then I guess this won't work either:
13:05:26 <Jezral> heapExchange :: (Array a b) -> Int -> Int -> (Array a b)
13:05:26 <Jezral> heapExchange a b c = a // [(b,a!c),(c,a!b)]
13:06:39 <Smerdyakov> How would you expect it to work when a is (Int -> Int)?
13:07:08 <Jezral> a is (Array a b)
13:07:17 <Smerdyakov> That is impossible.
13:07:21 <Smerdyakov> A type cannot contain itself.
13:07:45 <Smerdyakov> Ah, I meant the type variable, not the value parameter.
13:09:29 <Smerdyakov> Do you understand what I'm saying?
13:11:08 <Jezral> Not entirely, no...but would this be better?
13:11:09 <Jezral> heapExchange :: (Array d e) -> Int -> Int -> (Array f g)
13:11:09 <Jezral> heapExchange a b c = a // [(b,a!c),(c,a!b)]
13:12:37 <Smerdyakov> Do you understand what having d, e, f, g in that type means?
13:12:55 <Smerdyakov> (That would be better for talking about it, but the compiler doesn't care either way.)
13:13:13 <Jezral> They are any type.
13:13:25 <Smerdyakov> Right.
13:13:35 <Smerdyakov> So what happens if the caller of heapExchange decides that d should be (Int -> Int)?
13:15:07 <Jezral> Well, guess that I should lock the index type to Int.
13:15:56 <Smerdyakov> If that's the only thing you want to allow. You could also specify that it belongs to the Ix type class, unless you specifically use it as Int.
13:16:01 <Cale> try putting: heapCreate :: (Ix a, Num a, Num b) => (Array a b)
13:16:18 <Jezral> Tried that before. Didn't work.
13:16:36 <SyntaxLaptop> slightly-tested and lintian-clean version of darcs 0.9.18 on Haskell Experimental
13:16:57 <Cale> works for me. There's the obvious runtime error, but other than that it compiles.
13:17:47 <Jezral> Index has to be Int anyways, since it's a heap for a heap sort thingy. But the actual values can be anything belonging to Ord...which I guess I should specify also...
13:18:31 <Cale> Or you could drop the type declaration and see what ghci comes up with :)
13:19:01 <Jezral> Using Hugs
13:23:14 <SyntaxLaptop> peace
13:23:53 <Jezral> Right, so my fancy way of storing the heap size in index 0 makes it demand (Array Int Int)...damnit...
13:24:22 <Smerdyakov> That's not fancy. It's hackish. Smells like QBASIC. :P
13:25:08 <Jezral> Couldn't figure out where else to store it since I need it available in all the functions.
13:25:18 <Smerdyakov> Have you seen tuple types?
13:25:50 <Smerdyakov> Waaait... is this number different from the size of the array?
13:26:33 <Jezral> Yes. It's the number of used elements, which usually is different from the size.
13:26:37 <Smerdyakov> OK.
13:26:54 <Smerdyakov> So have you seen tuple types? :)
13:27:30 <Jezral> You'd want me to pass around (Int, (Array Int a)) then...
13:28:51 <Smerdyakov> Yes
13:29:01 <Smerdyakov> Don't think you need the inner parens, though. :)
13:34:43 <Jezral> Ok, that actually seems to work. This way I can also dynamically increase/decrease the array size with some magic...very nice.
13:56:17 <Jezral> http://www.pastebin.com/54346 - New fun error that I really don't understand...
14:02:29 <Smerdyakov> Jezral, you seem not to understand what "do" is.
14:02:47 <Smerdyakov> Jezral, when you use x <- e in a do block, e must have a monadic type.
14:02:52 <Smerdyakov> Jezral, and there is no Int monad,.
14:03:08 <Jezral> Oh ffs...
14:03:39 <Smerdyakov> I'm not sure what kind of "ffs" that is. Is that an "oh, I just realized what I should have done?" ffs?
14:04:07 <Jezral> No, an oh ffs do requires monads. I thought it was 'just' forced sequentiality.
14:04:24 <Smerdyakov> Nope. You probably want to be using regular let's.
14:04:47 <Jezral> Yeah...or I could mash it all into a 1-liner...
14:05:42 <Smerdyakov> I'm not sure why you'd want to avoid using let's if you wanted to use do....
14:06:30 <Jezral> Don't mind me. I'm just cursing at the language in general. let will work fine.
14:06:41 <Smerdyakov> Why are you cursing at the language in general?
14:07:57 * stepcut curses at php
14:08:11 <Jezral> I'm used to procedural languages. So Haskell is both interesting and annoying at the same time.
14:28:45 <Cale> btw, Jezral, we often use http://www.haskell.org/hawiki/HaskellIrcPastePage for random Haskell pastes
14:29:51 <Smerdyakov> Cale, does that have Haskell-specific highlighting?
14:30:43 <Cale> yeah, it does (the wiki)
14:32:56 <Smerdyakov> Wowzas
14:54:01 <Jezral> newtype Heap = Heap (Int, (Array Int a)) is wrong...but why? I get Undefined type variable "a", yet I don't want to define the type...
14:56:14 <Smerdyakov> You must explicitly quantify type variables in type definitions, unlike in value type declarations.
14:58:32 <Jezral> I see...missing a as in newtype Heap a = Heap (Int, (Array Int a))
15:00:29 <Smerdyakov> Yuppers
20:04:25 * stepcut beats his head against the wall
20:27:13 <wglwill> hi, anyone know why ghc 6.2 doesn't like this compiler option -fno-prune-tydecls , the make file for greencard tries to compile a file with this option and fails to compile
20:39:03 <stepcut> fails in what way?
20:44:07 <wglwill> oh, sorry, it says it's a non existent compiler option
20:44:25 <wglwill> i'm not issuing it myself, the makefile for greencard tries to use it
20:44:40 <wglwill> i checked the flag reference for ghc and found a flag -fno-prun-decls
20:44:43 <wglwill> err
20:44:52 <wglwill> -fno-prune-decls
21:09:28 <SyntaxLaptop> anyone try the new darcs package yet?
21:09:30 <SyntaxLaptop> (debian)
21:59:28 <SyntaxLaptop> uploaded darcs 0.9.18 to unstable
22:29:15 <rt> dum dee dee.
22:44:46 <rickjames> hi
22:45:32 <rickjames> if i have a function merge [] [] = []
22:45:42 <rickjames> what is the type?
22:46:06 <saz> that's all there is to the function?
22:46:07 <rickjames> would it be: merge :: [_] -> [a] -> [a]
22:46:23 <rickjames> would it be: merge :: [_] -> [_] -> []
22:46:26 <saz> [_] doesn't mean anything
22:46:39 * vegai guesses [a] -> [b] -> [c]
22:46:39 <rickjames> no it means "anything"
22:47:59 <vegai> I've never seen [_] before
22:48:36 <vegai> _ alone, of course, but I don't think you can mix that with type definition
22:56:10 <rickjames> you can i just tried it?
22:56:38 <rickjames> hi :: [_] -> Int
22:56:49 <rickjames> hi xs = length xs
22:57:00 <rickjames> that is perfectly legal
22:57:52 <saz> you can get ghci to deduce a general type sig for your function if you do :t <fn_name>
23:02:38 <rickjames> this is just theoretically i wanted to know the type definition for a function which has two arguments which are empty lists
23:03:06 <Rafterman> most generally the type will be [a] -> [b] -> [c]
23:03:20 <Rafterman> the actually function being implemented may place further restrictions on these types
23:03:27 <rickjames> ok
23:03:50 <rickjames> but what would [_] -> [_] -> [_] be?
23:03:58 <vegai> hmm
23:04:00 <Rafterman> erm
23:04:08 <Rafterman> you don't use underscores in type signatures
23:04:11 <vegai> ah, perhaps that would be equivalent to [a] -> [a] -> [a]
23:04:30 <Rafterman> but yes, [a] -> [a] -> [a] seems to be what you're looking for
23:04:40 <Rafterman> which means that the types of each list must be the same
23:04:57 <Rafterman> which is quite probable if the "merge" you're implementing is the canonical merge
23:15:42 <rickjames> your exactly correct
23:16:49 <rickjames> but i am just talking in general for any function that deals with lists usually we write an expression with the case that both arguments are empty lists
23:17:29 <rickjames> normally the type definition we give will cover the empty lists case
23:17:52 <rickjames> but what if we only had one expression and it was the empty list expression
23:18:11 <Rafterman> then you would use [a] -> [b] -> [c]
23:18:11 <rickjames> obviously it would be a very boring function but it is possible to have right?
23:18:31 <Rafterman> since there are no restrictions on the type of each list
23:18:37 <rickjames> ok
23:25:15 <Dark|Shadow> i tried to implement quicksort and there must be an error anywhere...
23:25:32 <Dark|Shadow> hilfsquickie :: Ord a => [a] -> [a] -> [a] -> [a] 
23:25:39 <Dark|Shadow> hilfsquickie (a:[]) c d = c++[a]++d
23:25:46 <Dark|Shadow> hilfsquickie (a:b:as) c d
23:25:55 <Dark|Shadow> 	| (b>=a) = hilfsquickie (a:as) c (b:d)
23:26:00 <Dark|Shadow> 	| (b<a)  = hilfsquickie (a:as) (b:c) d
23:26:09 <Dark|Shadow> can anybody help me? :-)
23:26:42 <Rafterman> hmm
23:26:47 <Rafterman> that doesn't look right...
23:27:00 <Dark|Shadow> well, at least it works ;)
23:27:38 <Rafterman> ah, I see what you're doing
23:27:44 <saz> it's not really a quick sort
23:27:54 <saz> is it?
23:27:59 <Dark|Shadow> saz: why not?
23:28:03 <Rafterman> i think it is, but written very strangely
23:28:22 <Rafterman> actually
23:28:22 <saz> well, you're not comparing to the pivot
23:28:26 <Rafterman> no, it's not
23:28:27 <Rafterman> *ponder*
23:28:28 <saz> and your pivot keeps on changing
23:28:36 <saz> it's just a weird looking bubble sort
23:28:38 <saz> well, almost
23:29:12 <Rafterman> it's a weird looking partitioning function...
23:29:29 <Rafterman> so it's missing the recursive step
23:29:50 <Rafterman> currently it just take all the stuff less than a and puts it on the left, and the stuff bigger than a and puts it on the right
23:31:05 <Dark|Shadow> thank you :-)
