00:26:57 <shapr> yow!
00:34:24 <Si\> yay HWS-WP just successfully did it's first SOAP operation via HAC!
00:34:35 <shapr> w00!
00:34:38 * shapr cheers
00:35:28 <Si\> Ok, so all the operation was was adding 5 to 6, but it's the princaple
00:35:44 <shapr> yup
00:36:14 <Si\> btw. did you ever get Google WS working?
00:36:20 <shapr> nah
00:36:28 <shapr> I could see if they're back now
00:37:27 <Si\> well I added proper SOAP Encoding to HAIFA SOAP/1.1 last night, so apart from a few niggles I think it's now complete
00:39:44 <shapr> spiffy
00:39:50 <shapr> ohh the server is back!
00:39:51 <shapr> yay!
02:51:44 * shapr boings happily
02:52:39 <musasabi> hum?
02:53:00 <shapr> life is good, I feel happy.
02:53:01 <shapr> how are you?
02:53:47 <musasabi> working through math exercises and waiting for gf to come home.
02:54:06 <shapr> that sounds happy too
03:38:29 <BroomStik> Rafterman, u from UNSW??
03:39:11 <saz> hm
03:39:37 <BroomStik> saz, u from UNSW??
03:40:10 <saz> yes.
03:40:26 <shapr> BroomStik: are you from UNSW?
03:40:31 <BroomStik> im just trying to log into the network using putty
03:40:33 <BroomStik> yeah
03:40:39 <shapr> BroomStik: Are you from Alabama?
03:40:39 <saz> BroomStik: what's the problem?
03:40:55 <BroomStik> the networks not disconnected right??
03:41:02 <saz> no, it's obviously not
03:41:02 <BroomStik> i just keep getting access denied
03:41:06 <BroomStik> when i enter my password
03:41:13 <saz> is it your cse password?
03:41:18 <BroomStik> yeah
03:41:19 <saz> sure you don't have caps lock on?
03:41:20 <BroomStik> CSE account
03:41:25 <BroomStik> nope
03:41:26 <saz> what server are you logging into?
03:41:49 <BroomStik> server??
03:41:52 <saz> yeah
03:42:03 <saz> what server did you put in the server box in putty?
03:42:09 <BroomStik> just using the cse.unsw.edu.au    .....   port 22
03:42:19 <blackdog> Broomstik: have you acknowledged the yellow form?
03:42:22 <saz> aah
03:42:23 <saz> yes
03:42:26 <shapr> and the blue form?
03:42:35 <shapr> blackdog: nah, I'm a leftie
03:42:38 <blackdog> no, no, you wnat the yellow form. :)
03:42:41 <saz> yeah, everyone's having trouble with the yellow form
03:42:44 <shapr> blackdog: ambi on my good days
03:42:45 <BroomStik> yeah, did that a year ago
03:42:52 * saz has an authentic, real paper yellow form somewhere
03:42:53 <Lunar^> shapr: http://www.thinkgeek.com/stuff/41/caffederm.shtml
03:42:58 <BroomStik> i've already done haskell
03:42:58 <saz> ..those were the days
03:43:03 <blackdog> shapr: ah, gotcha. thought you were talking politics. :)
03:43:14 <saz> BroomStik: you're not in first year are you?
03:43:15 <shapr> Lunar^: WOW
03:43:17 <blackdog> BroomStik: you have to do it every year. New deal.
03:43:19 <BroomStik> no, second
03:43:21 <shapr> I'm in my first year!
03:43:28 <BroomStik> but i was able to logon last night
03:43:32 <saz> BroomStik: go to the helpdesk website
03:43:34 <BroomStik> and for the past 5 weeks
03:43:40 <saz> and say aye, i acknowldege yellow form
03:43:41 <blackdog> BRoomstik: I'm in SS. Trust me, hm?
03:43:51 <shapr> blackdog: any improvements in my idea for a dream laptop?
03:44:05 <saz> blackdog: you ar?
03:44:07 <saz> are?
03:44:25 <shapr> system security?
03:44:26 <blackdog> apart from chording keyboard? No, it sounds pretty sweet.
03:44:30 <shapr> what's SS?
03:44:35 <blackdog> system support.
03:44:40 <shapr> blackdog: have you seen DataHand?
03:44:45 <blackdog> no
03:45:35 <blackdog> saz: yes. I'm duty SS tomorrow, which I'm not overly looking forward to: we expired a lot of accounts today for not acknowledging the yellow form.
03:46:02 <saz> blackdog: well, no one told people they're supposed to
03:46:14 <saz> blackdog: I only knew cos someone in helpdesk told me, when organising lab0
03:46:34 <blackdog> saz: it's been coming up on login screens for a while, i think. it's certainly been in the pipeline a while.
03:46:44 <saz> blackdog: oh, really?
03:46:49 <blackdog> yah.
03:46:51 * saz doesn't log in much, usually have screen
03:47:13 <blackdog> i think helpdesk is not going to be fond of us tomorrow. apparently they manually reinstated about 100 accounts... no fun at all.
03:47:15 <saz> you need big posters and lotsa email spam :)
03:47:19 <saz> yeah
03:47:27 <saz> well, a buncha people in my tute had to go there
03:48:10 <saz> i hadn't noticed any notification of it.. and if I didn't see it.. i'm sure i'm not the only one
03:48:34 <BroomStik> how many people havent acknowledged it??
03:48:37 <saz> sux2be helpdesk tomorrow i guess
03:48:39 <blackdog> It could have been better publicised, probably.
03:48:41 <saz> BroomStik: no idea..
03:48:49 <blackdog> ~1000.
03:49:08 <BroomStik> so they gave students 5 weeks to acknoledge it??
03:49:24 <saz> blackdog: a msg on the cse front page, or in the motd when logging in.. woudl have been nice
03:49:31 <saz> and email reminders for people who hadn't
03:49:35 <saz> but *shrug*
03:50:07 <saz> it was topic in #compsoc for a while
03:50:27 <BroomStik> how long till i can log in??  just acknowledged it, entered in DOB and password
03:50:55 <BroomStik> i'd be freaking out if i had an assigment due tonight!!!
03:51:06 <saz> heh
03:51:12 <saz> i'm glad the first years don't have to do it
03:51:14 <blackdog> not too long, i guess.
03:51:23 <saz> (they have an assignment due very soon)
03:51:50 <blackdog> There was a big mailout, actually. on the 22nd, I think.
03:52:11 <blackdog> (apologies to the regulars for crapping on about distinctly non-haskellish matters)
03:52:24 <shapr> I think it's okay
03:52:24 <BroomStik> thnak you!! im in! :)
03:52:42 * blackdog bows
03:52:46 <blackdog> I live to serve.
03:52:46 <shapr> #haskell.se masquerades as #goteborg sometimes
03:53:07 <shapr> we can just add #unsw-techsupport to the topic here ;-)
03:53:14 <saz> hehe
03:53:19 <blackdog> i'm surprised you've got the critical mass for a swedish haskell group at all, nevermind staying on-topic.
03:53:34 <BroomStik> i use windows, and have cygwin, can i log onto cse thru cygwin??
03:53:43 <shapr> there's a surprisingly large number of Haskell users in .se
03:53:55 <shapr> the town next to me, Luleå, has a Haskell course
03:54:22 <shapr> Chalmers and GU both teach quite a bit of Haskell, and even have commercial Haskell work going on in Gothenburg (aka göteborg)
03:54:22 <blackdog> well, you can launch Putty from cygwin if you really want to. It doesn't make much difference, though.
03:54:35 <saz> cept the putty terminal is much nicer
03:55:15 <blackdog> commercial haskell work? Surely you jest.
03:55:54 <shapr> chalmers&gu @ gothenburg collect John Hughes, Koen Claessan(sp?), Lennart Augustsson, and lots of people here on #haskell
03:56:25 <blackdog> actually, i have to restrain myself a bit. i'm doing a bit of contract work and prototyping it in haskell: i have to be very careful not to include features that I can't reasonably implement in java.
03:56:48 <blackdog> ok, ok, i'm convinced. scandinavians have good taste in languages.
03:57:20 <shapr> dennisb, Marvin--, andersca, polli, bring, chucky, viblo, mardy, forester, ludde are the first gothenburgers that come to mind from here on #haskell
03:58:11 <shapr> oh, did I tell you about GHC fully type-safe dynamic loading with TH?
03:58:56 <blackdog> no. you teased me with it and left me hanging, you incurable flirt.
03:59:01 * shapr grins
03:59:15 <shapr> blackdog: you're cute, but not the type I usually flirt with
03:59:49 <blackdog> I've never been turned down so gently
03:59:54 <shapr> saz has a gorgeous eye though ;-)
04:00:00 * shapr laughs
04:00:34 <blackdog> eye?
04:00:37 <saz> *blush*
04:00:39 <shapr> yes, see orkut
04:01:14 <andersca> boom
04:04:17 <BroomStik2> whos lecturing the second half of haskell this semester??
04:05:39 <saz> Tim?
04:05:50 <saz> (I'm assuming comp1011 here)
04:06:03 <BroomStik2> he's doing the first i saw,  but dont they usually change midway??
04:06:07 <BroomStik2> yeah comp1011
04:06:20 <BroomStik2> when i did it, john plaice did second half
04:06:49 <saz> I'm pretty sure he's taking the whole session
04:06:57 <saz> hm, this is way off topic for this channel
04:07:00 <blackdog> shapr: ...so? dynamic loading with TH?
04:07:14 <blackdog> i'm gonna start humming Blondie tunes soon...
04:11:22 <shapr> oh, I got distracted
04:12:05 <shapr> oh, hram is another chalmers and #haskell person
04:12:27 <andersca> and ski
04:12:28 * blackdog drops laptop in shock
04:12:31 <ski> hram ?
04:12:32 <blackdog> distracted??
04:12:35 <shapr> Hampus Ram
04:12:45 <shapr> yes, I know it's unheard of
04:12:56 <shapr> did you see the quote Marvin-- put onto the HaWiki QuotesPage? :-)
04:14:07 <ski> mm
04:14:21 <ski> shapr : btw, hi !
04:14:24 <shapr> anyways, hram wrote the @ghci plugin
04:14:27 <shapr> hi ski!
04:14:48 <blackdog> hm... do you chalmers people know pete gammie?
04:14:56 <ski> yes
04:14:58 <ski> a bit
04:15:13 <blackdog> hands across the world. cool.
04:15:38 <shapr> hram's @ghci lambdabot plugin checked the type of an expression, and wouldn't allow anything that had the string IO in there
04:15:40 <ski> blackdog : he's at a course i'm at, too
04:15:51 <blackdog> ski: what's the course?
04:16:20 <ski> blackdog : Types and Programming Languages
04:16:23 <shapr> so Darius found a variety of cute tricks to get past it
04:16:45 <shapr> including $( Language.Haskell.THSyntax.Q (putStr "heya") >> [| 3 |] )
04:17:41 <shapr> the response was "heyaheya3"
04:17:42 <blackdog> shapr: hah, I was actually using that one. is TH old enough for it to be clear whether doing IO at compile time is in bad taste or not?
04:18:20 <shapr> so, if you can do IO at compile time in TH...
04:18:26 <shapr> why not the whole program?
04:19:02 <blackdog> getting at the arguments can be tricky - no-one's written Precognition.hs yet
04:20:50 <shapr> if you can do IO at TH compile time, couldn't you get the arguments then?
04:21:26 <Lunar^> TH + IO + Parsec means that you can read an external data file and generate code for it 
04:21:29 <Lunar^> Which is good :)
04:22:04 <shapr> so, I think you could execute the whole program in TH's compile-loop
04:22:12 <shapr> there by literally carrying the type-checker around with you
04:22:24 <shapr> I don't think anyone's tried it though
04:22:38 <shapr> I do know that ozone talked to Chilli about it, and Chilli said that would be slow
04:23:23 <blackdog> well, no slower than ghci, presumably.
04:23:35 <blackdog> what do you mean by "carrying the type-checker around"?
04:24:17 <Lunar^> "Q: How to run this program ? A: You need to have GHC installed, then run "ghc MainLoop.hs" on the shell. Don't worry if GHC goes in a infinite loop, it should behave that way..."
04:25:36 <blackdog> how can you tell if it's acting correctly? Maybe it'd have finished if you left it a few years... :)
04:26:31 <shapr> from what I understand of GHCi, you can't compare a dynamically loaded type with a statically compiled type
04:28:12 <Lunar^> shapr: You can
04:29:08 <Lunar^> from what I understand of what you're thinking about :)
04:37:01 <shapr> well, I'm thinking about the problem that lambdabot's @more had
04:37:36 <Lunar^> @more
04:37:38 <Lunar^> :)
04:39:54 <shapr> greets Agent Foster
04:41:01 <BroomStik> need to bother u again.....
04:41:14 <shapr> your admission prices is one haskell lesson ;-)
04:41:29 <shapr> let's start with higher-order kinds...
04:41:32 <BroomStik> when im in emacs, or an editor?? in putty, and i want to exit just that app back to the bash...
04:41:36 <BroomStik> whats the command??
04:41:48 <shapr> standard emacs exit command is C-x C-c
04:41:57 <shapr> that is control x, then control c
04:41:57 <Rafterman> blackdog: you stole all my disk quota today!
04:41:58 <shapr> BUT
04:42:17 <shapr> putty doesn't pass those keys to a remote emacs by default
04:42:35 <shapr> you need to look at the settings, and click the checkbox that says "you probably want this if you use emacs"
04:43:37 <Si> greetings shapr
04:43:49 <BroomStik> thank you!
04:45:41 * shapr starts a covert quota smuggling operation at unsw
04:52:15 <shapr> let's get some excitement!
04:52:20 <shapr> shapr: @yow !
04:52:22 <ski> @yow
04:52:23 <lambdabot> ..  Once upon a time, four AMPHIBIOUS HOG CALLERS attacked a family
04:52:23 <lambdabot>  of DEFENSELESS, SENSITIVE COIN COLLECTORS and brought DOWN their
04:52:23 <lambdabot>  PROPERTY VALUES!!
04:58:58 * shapr boings
04:59:01 <shapr> @fortune
04:59:02 <lambdabot> <drue> fermats last theorem is very simple, it's the proof that's a bugbear
04:59:02 <lambdabot> <raph> actually, i have a simple proof, but it's too small for me to type
04:59:02 <lambdabot> into irc
04:59:49 <Rafterman> that last line sounds like something stolen from GEB
05:00:14 <shapr> it's actually a long-time joke about fermat's last theorem
05:00:30 <shapr> he said "I've found a proof for this, but this margin is too small for me to fit it in here"
05:00:56 <shapr> though GEB is definitely worth plagiarizing, no argument there
05:01:22 <shapr> @fortune
05:01:23 <lambdabot> Space is big.  You just won't believe how vastly, hugely, mind-bogglingly
05:01:23 <lambdabot> big it is.  I mean, you may think it's a long way down the road to the
05:01:23 <lambdabot> drug store, but that's just peanuts to space.
05:01:23 <lambdabot> 		-- The Hitchhiker's Guide to the Galaxy
05:02:02 <Rafterman> yeah, one of the dialogues has one of them coming up with a proof for something akin to the reverso of FLastT and saying it was too small to write
05:02:32 <shapr> oh
05:02:48 <shapr> I bet you're right
05:02:56 * Rafterman looks it up
05:03:37 * shapr writes a script to find all .hi files and recreate them with the new version of GHC6.2.1
05:05:54 <Rafterman> "The equation n^a + n^b = n^c has solutions in positive integers a, b, c, and n only when n = 2 (and then there are infinitely many triplets a, b, c, which satisfy the equation); but there are no solutions for n > 2. I have discovered a truly maarvelous proof of this statement, which, unfortunately, is so small that it would be well-nigh invisible if written in the margin."
05:07:37 <shapr> well spotted
05:07:41 * ski must leave
05:07:43 <ski> bye
05:07:45 <shapr> bye ski
05:08:06 <shapr> dang, now I can't recreate the type error in lambdabot 
05:16:36 * shapr install hat-ghc6
05:16:55 <shapr> has anyone tried to build HToolkit/HSQL debs?
05:18:43 <polli> shapr: forester has tried
05:19:00 <polli> shapr: and I've tried to install them
05:19:05 <shapr> any success?
05:19:07 <polli> shapr: nope
05:19:10 <shapr> ah
05:50:25 <shapr> I know this is an evil and not nice thought, but I keep hoping someone will r00t the RIAA's linux-based website and install mldonkey.
05:52:50 <Jerub> I taught someone about lazy programming this evening!
05:52:55 <Jerub> it was exciting.
05:52:58 * Jerub goes to bed.
05:53:01 <shapr> neat, what did they think?
05:53:03 <shapr> oh, good night
05:56:09 <Marvin--> Jerub: oh come on, you can't just say something like that and then leave! :)
05:57:03 <shapr> lazy conversation too ;-)
06:00:24 <Marvin--> meh, I'm really nervous about what Koen'll say tomorrow
06:00:27 <Marvin--> silly, isn't it?
06:00:41 <shapr> yes, don't worry
06:00:54 <shapr> just make sure you're as prepared as you can be
06:01:10 <Marvin--> there's not a whole lot I can do, I sent him the draft a few days ago ;)
06:05:55 <shapr> yay, HaskellDB 0.7 has cool new features
06:08:40 <musasabi> where is the announcement?
06:09:03 <shapr> it's on the haskell@haskell.org list
06:09:12 <musasabi> ok
06:09:23 <shapr> but you can get the latest from http://haskelldb.sf.net/
06:10:07 <shapr> hey, is there some way I can ask a .hi file what version it is?
06:19:05 <SyntaxNinja> look at it, I think it says something at the top
06:19:12 <shapr> oh, ok
06:23:48 <shapr> who's oskar?
06:23:49 <shapr> hej ski
06:24:02 <ski> hej igen, shapr
06:26:05 <SyntaxNinja> I think slashdot's april fools jokes are getting more subtle
06:26:28 * ski checks date
06:26:36 <jagular> en gammal kung :)
06:26:56 <andersca> jagular: why aren't you in #haskell.se? :)
06:26:59 <Marvin--> SyntaxNinja: how's that?
06:27:11 <ski> jagular : oskar den andre ??
06:27:19 <jagular> första, tror jag
06:27:32 <jagular> andersca: vet inte
06:27:35 <andersca> ok
06:27:38 <SyntaxNinja> Marvin--: well, I think in the past the entire day has been full of obvious non-news, and today I think they're mixing it up with real news (though I haven't looked carefully yet) and a lot of ask-slashdot where it's a little ambiguous whether it's a joke
06:27:52 <Marvin--> SyntaxNinja: oh
06:28:22 <Marvin--> the morning newspaper had an april fool's story on building more student flats
06:28:23 <ski> jagular : why are we talking about him ?
06:28:38 <Marvin--> the sad part is that more student flats are *desperately* needed
06:28:38 <jagular> ski: presumably shapr noticed your hostname
06:28:46 <ski> Marvin-- : :/
06:29:11 <Marvin--> I liked the april's fool ITP on debian-devel though
06:29:16 * SyntaxNinja reads...
06:29:41 <Marvin--> ITP: apt-gentoo -- enhanced package installation
06:29:42 * ski comes to think of an old joke about oskar den andre
06:30:23 <Marvin--> "As packages are installed, apt-gentoo automatically downloads their build logs from the buildd network. The logs are then slowly scrolled past on the user's terminal to simulate building the software on the local machine."
06:30:35 <SyntaxNinja-jk> haha
06:30:36 <andersca> Marvin--: haha
06:30:48 <andersca> Marvin--: I was just thinking about writing a program that did that yesterday
06:30:57 <Marvin--> "apt-gentoo optionally, and by default, gives increased realism by spinning the CPU in a tight loop between build log lines, and writing large files to disk."
06:31:31 <SyntaxNinja-jk> apt-get build-log might be kinda cool, actually
06:31:40 * SyntaxNinja-jk hides
06:34:11 <shapr> ok, who's showing up at EuroHaskell in Gothenburg,Sweden?
06:34:19 <shapr> andersca just mentioned to me that I had the date a month off :-/
06:34:36 <Marvin--> hooray, the date is now on my birthday
06:34:44 <shapr> happy birthday Marvin-- !
06:34:56 <Marvin--> shapr: er, I was talking about June 10th
06:35:17 <shapr> well, so am I :-)
06:35:18 <Marvin--> as in, the date for eurohaskell
06:35:23 <Marvin--> so you're a tad early
06:36:40 <Marvin--> nobody's added a EuroHaskell page to the wiki?
06:37:00 <shapr> nah, I put in on AvianWiki, but you're right, I should move it
06:37:08 * ski will prolly turn up .. :)
06:37:29 <SyntaxNinja-jk> hmm. it wasn't april fools day 1 day and 14 minutes ago was it, "...If we were to look at the ''warez'' community for example, we would realize that they release much more often than we do, and are generally held in higher regard than we are..." (seen on debian-devel)
06:38:07 <Marvin--> ...
06:38:13 <shapr> hey dlk
06:38:19 <dlk> lo shapr
06:38:31 <SyntaxNinja-jk> ok, this must be a joke...
06:38:57 <Marvin--> early bird? :)
06:39:14 <shapr> dlk: silly question, you think chalmers would let us have a room with 'net access for EuroHaskell? or you think it's too late to arrange such a thing?
06:39:32 <shapr> I've never tried to organize this sort of thing before, so I don't know
06:39:57 <dlk> shapr: well. I'd have to look into it. In general there shuld be no problem. However, if they want payment that's another q.
06:40:01 <forester> shapr: now I am :)
06:40:07 <Marvin--> SyntaxNinja-jk: who posted that?
06:40:25 <SyntaxNinja-jk> Pascal Hakim
06:40:30 <shapr> dlk: yah, I wouldn't be surprised if they did want payment, any idea who I need to talk to?
06:40:36 <SyntaxNinja-jk> "Improvements to debian" yeah, it's a joke. I spoke too soon :)
06:40:41 <dlk> If there's any teacher or professor or so ac CS thath can co-arrange, then maybe it would be easy to sue their rooms. I could "borrow" some net equip perhaps (not sure though)
06:41:04 <shapr> I could email John Hughes and/or Koen Claessan
06:41:13 <sysfault> morning.
06:41:30 <shapr> I have some distant acquantaince with them.
06:41:32 <shapr> hi sysfault 
06:41:36 <dlk> shapr: please do... I can ask around at CE also...
06:41:52 <dlk> shapr: I assuem this would be an extermley low-profile thing?
06:41:58 * shapr shrugs
06:42:03 <shapr> it doesn't have to be
06:42:06 <dlk> in which case we could go "pretty pretty please"
06:42:26 <shapr> just whoever wants to show up and write some code and talk about Haskell some
06:42:42 <dlk> oki, rooms for Chalmers internal things are quite cheap... which is another reason to contact people at Chalmers.
06:42:48 <shapr> spiffy
06:43:02 <Marvin--> well it will certainly be very informal
06:43:31 <shapr> yah, it was originally thought of as a #haskell hack-fest
06:43:47 <shapr> well, I'll email Hughes and Claessan
06:43:54 <Marvin--> the EuroHaskell name is just to poke fun at EuroPython :)
06:44:10 <shapr> :-)
06:44:30 <shapr> any gothenburgers here have suggestions for venue, location, etc?
06:44:38 <shapr> or any idea how many might be showing up?
06:45:03 <Marvin--> no idea whatsoever
06:45:18 <shapr> well, I'll put up a HaWiki page and email the usual suspects.
06:47:59 <Marvin--> hooray, I made it through Shadowgate
06:48:22 <Marvin--> well, back to work I guess
06:48:27 <shapr> dlk: thanks for volunteering to spread the word, I'm sure it'll happen directly after EuroPython, but no idea about location, attendees, or anything
06:48:54 <shapr> so, if you see people who might be interested, point them here to #haskell or to the EuroHaskell page on the Haskell Wiki
06:49:06 <shapr> or to me
06:49:30 <Marvin--> the really evil way to do it would be to simply go to Chalmers and just route the traffic through someone with access to the wlan :)
06:50:07 <shapr> I try to be nice to the local sysadmins first :-)
06:50:11 <Marvin--> yeah
06:50:23 <Marvin--> but if we're not incredibly many it'd work
06:50:52 * Marvin-- goes back to proofreading
07:01:40 <Marvin--> guess I should start preparing all these humongous appendices
07:02:36 <dlk> shapr: oki
07:02:51 <dlk> Marvin--: it won't work. You have to login in to the wlan :-)
07:03:18 <Marvin--> dlk: um, but if I'm logged in and people route their traffic through me, why wouldn't that work?
07:03:23 <dlk> dunno about routong tohug :)
07:03:30 <Marvin--> I mean, if I'm acting as NAT
07:03:30 <dlk> probably... :-)
07:04:15 <Marvin--> that's why I'm calling it evil :)
07:04:19 <dlk> :)
07:04:22 <dlk> gotta go.
07:04:26 <dlk> bye
07:06:14 <Marvin--> h2fol is surprisingly few loc
07:07:58 <shapr> http://www.haskell.org/hawiki/EuroHaskell
07:08:18 <shapr> ok, if you're showing up, add yourself to the list of attendees
07:08:33 <shapr> I'd like to know whether I need to organize us a conference room or not
07:08:52 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","deb http://www.syntaxpolice.org/haskell-experimental unstable/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","lambdabot 2.0 released","related channels #darcs #haskell.se","http://www.haskell.org/hawiki/EuroHaskell"]' by shapr
07:09:49 <kosmikus|away> shapr: not a long list yet ...
07:10:05 <shapr> kosmikus|away: no, not terribly long :-)
07:11:33 <shapr> sysfault: any questions about Haskell?
07:11:36 * ski pushes button
07:12:00 <shapr> yay, two!
07:12:09 <ski> :)
07:12:21 <Marvin--> gimme a sec, I need to get galeon paged in again :P
07:12:30 <Marvin--> damn theorem provers steal all the memory
07:12:51 <shapr> kosmikus|away: you could show up too, .nl is soo close to .se
07:12:53 * ski laughs
07:13:25 * shapr emails John Hughes
07:13:44 <kosmikus|away> shapr: I'll keep it in mind, but don't count on it ;)
07:13:49 <shapr> ok :-)
07:14:18 <shapr> yay, three!
07:14:30 <Marvin--> told ya
07:14:32 <sysfault> shapr: haskell is complex.
07:14:56 <ski> sysfault : haskell is fun !
07:15:18 <shapr> sysfault: it is complex
07:15:26 <ski> yeah
07:16:11 <shapr> but it's based on a few basic principles
07:17:10 <Marvin--> hey ski, do you use spamassassin at medic?
07:17:17 <andersca> ski works at medic?
07:17:26 <ski> Marvin-- : i don't think so .. ?
07:17:32 <ski> andersca : no :)
07:17:41 <Marvin--> well, tekno, etek, whatever
07:17:56 <Marvin--> "at one system or another run by medic"
07:18:04 <Marvin--> it ain't working for me
07:18:05 * Marvin-- grumbles
07:18:10 * ski deleted perhaps 40 spam today
07:18:19 <Marvin--> oh for the love of god, make the stupid gentoo threads on debian-devel stop
07:18:40 <ski> Marvin-- : where's spamassassin ?
07:18:51 <bring> couldn't we just do EuroHaskell in Linsen, it seats what, 100 people?
07:19:20 <bring> and there's ethernet
07:19:21 <Marvin--> ski: it's in sup
07:19:29 <andersca> and wireless too, right bring
07:19:29 <kosmikus|away> Marvin--: what are they talking about?
07:19:35 <ski> Marvin-- : ok, mhmm
07:19:47 <Marvin--> kosmikus|away: I don't know, I killfile those stupid "are we losing users to gentoo?" threads
07:20:00 <kosmikus|away> ;)
07:20:18 <Marvin--> bring: don't you need nomad access for that though?
07:20:25 <kosmikus|away> there are lots of debian-related discussions on Gentoo lists, too
07:20:27 <Marvin--> andersca: yes
07:20:41 <bring> to be on the safe side, maybe someone should ask medic if it's ok to route other people's traffic using you nomad account
07:21:43 <bring> of course, I could hook up my laptop to an ethernet jack, and forget that I have a wlan card, dhcpd and NAT running
07:21:54 <andersca> :)
07:23:04 <Marvin--> bring: "whoops" :)
07:23:38 <Marvin--> kosmikus|away: really?
07:26:34 <kosmikus|away> Marvin--: you sound surprised
07:30:25 <Marvin--> kosmikus|away: well, I guess I shouldn't be... what are the normal topics?
07:31:09 <mattam> Marvin--: debian is taken as an example for its policies, and sometimes taken as a counter-example, as 'we shouldn't do that, look where it led Debian' :)
07:31:26 <Marvin--> heh
07:31:54 <Marvin--> the only damn gentoo-related threads on debian-devel seem to start with "are we losing users to" and are usually highly unproductive
07:32:45 <mattam> i saw one, i didn't know it was 'custom'!
07:33:32 <Marvin--> I don't know how often they show up, I don't follow -devel regularly, it's just waaay too high volume
07:34:04 <kosmikus|away> I have a hard time following gentoo-dev myself
07:35:51 <mattam> me too :)
07:36:20 <Igloo> Do you happen to know how volume compares with debian-devel?
07:37:20 <Marvin--> huh?
07:37:40 <Igloo> "huh?"?
07:38:11 <Marvin--> I don't understand what you mean
07:38:24 <mattam> much lower i would say. For example there have been about 20 mails in the past 8 hours.
07:38:44 <Igloo> volume = messages/hour
07:39:12 <Igloo> That doesn't sound too bad to me. Which probably means I spend too much time reading mail  :-)
07:40:55 <shapr> how long should is EuroHaskell? two days? three days? more? less?
07:41:42 <andersca> shapr: what's it gonna be?
07:41:57 <andersca> shapr: just haskell hackers hanging or paper presentations and talks?
07:42:13 <shapr> I'd rather have a gathering where people actually write code.
07:42:20 <Marvin--> andersca: way way informal, just a hacking session
07:42:26 <andersca> yeah
07:42:39 <shapr> paper presentations and talks are nice... but lots of code and a few talks would be my preferences.
07:42:55 <shapr> for example, I'd love to draft bring to talk about HaskellDB
07:43:05 <shapr> and Marvin-- to talk about dynamic loading
07:43:13 * Marvin-- grumbles
07:43:22 <andersca> and I could talk about gnome
07:43:22 <andersca> ;)
07:43:24 <shapr> Marvin--: just the same kind of talks we have here...
07:43:38 * shapr grins
07:43:39 <Marvin--> argh, why is this stupid problem suddenly satisfiable, it shouldn't be
07:43:44 * Marvin-- digs through the proof
07:43:50 <Marvin--> andersca: fix gtk2hs first :)
07:44:09 <shapr> andersca: sure, if want to talk about gnome and haskell, I'm all for it.
07:44:36 <Marvin--> you could talk about how we are going to convince the gnome community to use Haskell instead of Java or C# to replace C!
07:45:32 <shapr> so, what's a good length of time for a mostly code get-together
07:46:00 <andersca> shapr: I suppose it depends on you since all of us live in goteborg :)
07:46:19 <Marvin--> well, seeing as it's right after EuroPython, the non-Gothenburgers coming are most likely already in town
07:47:14 <Marvin--> so hacking during the days, beer in the evenings... two or three days?
07:47:14 <shapr> that's a good point, I guess it depends on whether we get any non-Gothenburgers other than me and Bea.
07:47:22 <shapr> yah, I think that sounds good
07:48:27 <shapr> well, I'll say three, but anyone who wants to show up or leave, early or late is just fine.
07:48:49 <Marvin--> exactly, it *should* be informal
07:48:53 <shapr> yup
07:49:24 <earthy> time to go home
07:49:35 <shapr> so, europython last day is june 9th
07:49:54 <shapr> so; june 10,11,12
07:50:23 <shapr> with a birthday beer for Marvin-- on the first evening :-)
07:50:54 <andersca> what's the weekday
07:51:14 <shapr> thursday, friday, saturday
07:51:19 <andersca> coo
07:51:20 <andersca> l
07:54:32 <bring> hey, we're getting serious here
07:54:44 <shapr> what, talking about beer? 
07:54:54 <kosmikus|away> what's the conference language? english or swedish? ;)
07:55:00 <shapr> Haskell!
07:55:08 * shapr grins
07:55:12 <ztre> |-|1
07:55:23 * ski laughs out loud
07:55:59 <shapr> I'll definitely speak swedish part of the time.
07:56:04 <shapr> good practice
07:56:06 <shapr> hi ztre 
07:56:30 <shapr> if it's going to be a code conference, does that mean we should organize some sprints?
07:57:38 <bring> the icfp contest seems to be june 4-7
07:57:57 <Igloo> Who's running it?
07:58:22 <bring> saw this link on slashdot: http://www.cis.upenn.edu/proj/plclub/contest/
07:59:09 <Marvin--> damn, maybe we should put EuroHaskell *before* EuroPython instead, then?
07:59:43 <Marvin--> it would be awesome to sit at Chalmers hacking on the contest problem
07:59:45 <shapr> I'm wondering that too
07:59:49 <ztre> what text editor should i use to edit Haskell sources?
07:59:50 <shapr> yes it would :-)
08:00:08 <ztre> i tried mcedit, no syntax hilight, not in vim :-(
08:00:10 <Igloo> Bah, now I'm /really/ upset at not going   :-)
08:00:11 <shapr> ztre: people here mostly use emacs and/or vim
08:00:21 <Igloo> vim has Haskell syntax highlighting
08:00:35 * kosmikus|away will probably be in Oxford june 4
08:00:37 <ztre> Igloo: vim? how?
08:00:48 <Igloo> How come, kos?
08:00:50 * SyntaxNinja-jk uses ed
08:00:56 * Marvin-- teases Igloo :-)
08:00:59 <Igloo> ztre: Same way as anything else...
08:01:05 * shapr wiggles a magnet around above the drive to edit the bits
08:01:06 <Igloo> You have :syntax on, right?
08:01:26 <bring> oh, EuroPython is at Chalmers
08:01:31 <ztre> Igloo: if i run "vim python.py", it looks hilighted :-D but not for "vim haskell.hs" :-D
08:01:34 <ztre> :-(
08:02:05 <shapr> bring: where else could it be?
08:02:17 * ztre used debug.exe
08:02:51 <forester> ztre: vim haskell hilight isn't that good anyway
08:02:57 <bring> I guess that's the most logical place, but there are a bunch of universities here, and a giant convention center
08:03:33 <bring> yeah, use emacs instead
08:03:40 <kosmikus|away> Igloo: there's a gp meeting of some sort
08:03:40 * bring is trying to start a flame war
08:04:08 * bring has never tried vi's haskell mode
08:04:56 <shapr> I've seen purpose-specific sprints happen for software like Python, Zope, Plone, etc
08:05:33 <shapr> usually something like an i18n-sprint, or a 2.0 release sprint, or...
08:06:43 <ski> shapr : what's sprint ?
08:06:55 <ztre> shapr: sprint? you mean running?
08:07:02 <ztre> shapr: competition between coders?
08:07:10 <ztre> shapr: good idea!
08:07:36 <ztre> forester, bring: so EMACS :-/ i am afraid of emacs to be hones
08:07:38 <ztre> t
08:07:47 <bring> who isn't
08:07:50 <ztre> forester: wont it be *slow*
08:07:58 <forester> http://ugglan.csbnet.se/~forester/syntax-diffs.png
08:08:10 <shapr> a sprint is where a bunch of open source programmers gather to do intense pair programming
08:08:20 <forester> just an informal compare...
08:08:28 <shapr> nah, emacs is pretty fast
08:08:32 <bring> hey, I wrote that code
08:08:33 <shapr> I use it for my irc client
08:08:39 <forester> bring: :)
08:08:52 <Igloo> kos: Oh, right, I think I might be going to that. I hope it doesn't cut into ICFPC time
08:09:24 <kosmikus|away> I didn't know until a few minutes ago that it might collide ...
08:09:31 <forester> bring: sorry for revealing the industrial secrets behind HDBRec :)
08:09:36 <kosmikus|away> maybe I should stay in Oxford for the contest, then ...
08:09:36 * shapr laughs
08:09:50 <bring> if someone wants to write a better implementation of showsRecRow, go right ahead
08:10:20 <bring> forester: nooo, our precious IP. I
08:10:29 <bring> 'm going to sue all of you
08:10:48 <forester> haha
08:11:04 * Marvin-- quickly claws out his eyes as a protective measure!
08:11:16 <shapr> I'm thrilled about the HaskellDB 0.7 changes; returning records, creating new tables/columns from Haskell source descriptions
08:11:20 <bring> all programs you ever write belong to me
08:11:32 <bring> I'm using SCO's lawyers
08:11:42 <ski> all your code are belong to us !
08:11:50 <shapr> and the General Chewbacca License
08:12:00 <bring> yes!
08:12:32 <musasabi> ok
08:13:14 <bring> we were seriously considering licensing our haskelldb version under a beer license
08:13:20 * shapr grins
08:13:28 <shapr> sharebeerware
08:13:43 <bring> that is, if you use it send one crate of beer to us, and one to Dann Leijen
08:14:34 <bring> free software people always talk about "free beer", but I've never seen any
08:15:17 <shapr> I'll buy you a beer at EuroHaskell
08:15:31 * shapr tries to remember how many beers he owes now...
08:16:09 <shapr> anyways I gotta be at EuroPython June 7th
08:16:19 <bring> what if we took a short trip across the water the first day, to get some supplies
08:16:23 * ski is happy
08:16:31 <shapr> where to? estonia?
08:16:47 <bring> well, denmark is somewhat closer from Gothenburg
08:16:52 <shapr> oh, hm
08:17:04 <Igloo> kos: Hmm  :-)  I'm not sure what the RG or Heff's plans are, if any
08:17:52 <Marvin--> PHEW
08:17:59 * Marvin-- breathes a sigh of relief
08:18:00 * musasabi could get you cheap beer from estonia, but shipping is kind of expensive
08:18:17 <shapr> musasabi: or you could bring it with you to EuroHaskell...
08:18:27 <Marvin--> note to self: if you forget the False /= True predicate, a lot of problems become satisfiable
08:18:44 <Marvin--> er, s/predicate/axiom/
08:18:48 <Igloo> lol
08:19:28 <bring> musasabi: I'm sure you could pay for your trip that way
08:19:44 <shapr> so, anyone else have a preference for having EuroHaskell before/after EuroPython?
08:20:05 <bring> though travelling with several crates of beer is not neccessarily comfortable
08:20:09 <forester> shapr: if bring could bring all beer, you don't have to bring any beer to bring you know :)
08:20:11 <Marvin--> before!
08:20:15 <shapr> the ICFP idea is good, since then we'd automatically have a coding goal
08:20:29 <Marvin--> we could form the EuroHaskell ICFPC team
08:20:52 <musasabi> only a trip to EuroHaskell would cost quite a lot.
08:20:58 <shapr> the last day of the ICFP contest clashes with the first day of EuroPython 
08:20:58 <bring> is there a limit on the team size?
08:21:18 * Igloo grabs kosmikus and Heff and establishes the UKHaskell rival team  :-)
08:21:24 * shapr grins
08:22:14 <ski> musasabi : some of us are already in gbg :)
08:22:25 <shapr> yah, I'm traveling from Boden to gbg
08:23:23 <shapr> bring: I don't think there's a limit
08:23:44 <shapr> but the contest is primarily focussed towards university students
08:23:52 <shapr> oh wait, that would be most of EuroHaskell
08:24:01 <kosmikus|away> Igloo: RG?
08:24:17 <Igloo> Research Group
08:25:00 <Igloo> Last year the RG entered, although n people with (n-1) prefered languages possibly wasn't the best approach  :-)
08:25:06 <shapr> on the downside, John Hughes, Koen Claessan, etc might want to do ICFP in their own team, so it'd be less likely they'd come to EuroHaskell
08:25:16 <Igloo> I think we ended up using more languages than people
08:25:59 <bring> I guess the language choice wouldn't be a problem at EuroHaskell
08:26:17 * shapr snickers
08:27:14 <kosmikus|away> Igloo: why not wait for the problem description, then design a language appropriate for the task on day 1, write a compiler on day 2, and solve the problem at hand on day 3?
08:27:20 <shapr> hello Student1, looking for Haskell info?
08:27:39 <Student1> hello shapr
08:27:46 <bring> shapr is not a bot, btw
08:28:05 <bring> afaik
08:28:16 * ski lols
08:28:50 <ski> you're back !
08:29:14 <ski> hmm
08:29:50 <bring> don't scare him like that :)
08:30:13 <Paperino> hello again
08:30:18 <ski> hello
08:30:52 <ski> do you know anything about haskell ?
08:30:55 <Paperino> what are you talking about?
08:31:11 <bring> a small obfuscated haskell contest at EuroHaskell could be fun
08:31:28 <bring> Paperino: haskell
08:31:30 <bring> :)
08:32:04 <Paperino> what a surprise!!!
08:32:36 <bring> we were talking about beer before
08:33:26 <Paperino> ok... is there some haskell programmer that drink beer?
08:33:42 <Marvin--> many of us do
08:33:51 <bring> yep
08:34:03 <Marvin--> http://www.mdstud.chalmers.se/~md9ms/EuroHaskell.png
08:34:38 <ski> Marvin-- : Quake II & HalfLife ?
08:34:41 <Paperino> me too
08:34:48 <ski> Marvin-- : :)
08:35:06 <Paperino> actually....not in the middle of a program...
08:35:37 <Marvin--> IANAA
08:36:11 <ski> (I Am Not A A?? ?)
08:36:28 <Marvin--> I Am Not An Artist
08:38:19 * ski accidentally misspelt hacker as hasker ..
08:39:21 <Marvin--> dinner time, yay!
08:41:55 <Paperino> Marvin...what is EuroHaskell?
08:43:36 <Marvin--> well, I'd answer, but...
08:49:31 <bring> Paperino: http://www.haskell.org/hawiki/EuroHaskell
08:50:03 <Marvin--> bring: <-- Paperino has left #haskell
08:50:10 <bring> oh
08:53:37 <ski> hello SuperKaramba
08:56:12 <shapr> Marvin--: oh, nice logo
08:56:31 <shapr> hi hram, coming to EuroHaskell?
08:57:29 <hram> shapr: Well.... maybe, maybe not :)
08:57:49 <shapr> that covers all the possibilities :-)
08:58:19 <shapr> well, if EuroHaskell happens before EuroPython and so covers the ICFP contest dates, is that a problem for anyone here?
08:59:13 <hram> shapr: I can guarantee that I will not attend the 10th... 
09:00:11 <Marvin--> I don't see a problem, I mean, not everybody have to join in the ICFPC hacking
09:00:21 <shapr> yah, that sounds good to me
09:00:38 <shapr> where ICFPC is one option
09:01:37 <Marvin--> there is one problem, though
09:01:45 <Marvin--> EP is 7-9
09:01:50 <Marvin--> ICFPC is 4-7
09:01:54 <shapr> right
09:02:04 <Marvin--> do they overlap?
09:02:08 <shapr> yes, they do
09:02:24 <shapr> EP starts at something like 8am or 9am
09:02:41 <shapr> but it's possible that I can show up at noon
09:03:34 <Marvin--> well, the ICFPC says "Monday, June 7, noon (US Eastern time)"
09:03:47 <Marvin--> gah, why can't they post the times in GMT like everybody else?
09:03:53 <shapr> oh I didn't think of that
09:03:59 <shapr> yah, I assumed it would be GMT
09:04:26 <shapr> doesn't that mean it'll end at 6am?
09:04:36 <Marvin--> so, what's US Eastern time in CEST?
09:04:49 <shapr> I *think* it's six hours back
09:04:50 <shapr> might be seven
09:05:19 <shapr> that does make it simpler for me
09:05:28 <shapr> also means the contest starts at 6am though :-)
09:05:55 <Igloo> date; TZ=EST date will tell you
09:06:18 <Igloo> So it'll start at 6pm UK time I think
09:06:49 <Marvin--> that means it'll overlap with the whole first day of EP :(
09:06:53 <shapr> suckage
09:07:22 <Igloo> Am I going the wrong way? Where does 6am come from?
09:07:54 <Marvin--> no, you're right, CEST == EST + 7
09:07:58 <shapr> yah
09:08:08 <Marvin--> so EST noon == CEST 19.00
09:08:11 <shapr> I was counting the wrong way before
09:09:31 <shapr> In that case, I'd rather have it after so we could have time for informal hacking and socializing.
09:09:48 <Marvin--> yeah :(
09:10:04 <Marvin--> well, chalmers people, what do you say about forming a EuroHaskell team anyway`
09:10:05 <Marvin--> ?
09:10:14 <shapr> yah, I think you should :-)
09:12:21 * Marvin-- laughs at Ross Paterson
09:12:32 <Marvin--> "Tell me more about Eliza."
09:12:35 <Marvin--> that's priceless
09:12:38 * shapr grins
09:14:34 <esap> Here's a question: Is there a name for a concept that is a collection of while-loops with the same loop invariant?
09:14:37 <shapr> I think we probably won't hack unless we've got a decent goal, any suggestions?
09:15:32 <shapr> quickcheck tests for GHC?
09:15:50 <shapr> a library input/searching webapp like parnassus for python?
09:16:10 <shapr> 'net focussed development?
09:16:37 <liiwi> squish
09:16:44 <shapr> what would be useful to the entire Haskell community?
09:16:45 <shapr> hei liiwi 
09:16:50 <liiwi> hej hej
09:16:52 <bring> shamelessly stealing Marvin--'s idea: http://www.dtek.chalmers.se/~d00bring/misc/eurohaskell.png
09:17:24 <bring> Haskell Application Server
09:17:28 <bring> maybe
09:17:48 <Marvin--> bring: nifty!
09:18:01 <shapr> I'd be very interested in a Haskell Application Server, but I may be biased, that's how I make a living
09:18:12 <bring> been reading TaPL to much
09:18:19 * shapr grins
09:18:47 <Marvin--> though maybe it should be a superscript instead?
09:19:19 <shapr> I was thinking System F omega -> System Haskell euro
09:19:30 <shapr> nifty
09:19:34 <bring> "haskell to the euro", instead of the "the euroth haskell"
09:19:36 <bring> hmm
09:20:08 <bring> or rather the "the lambda calculus with euro"
09:20:27 <Marvin--> details, details
09:20:49 <shapr> Si\: hey, you around?
09:21:09 <bring> hmm, isn't there any other symbol for europe than the euro sign, seeing how sweden's not even in the EMU
09:21:21 <Marvin--> not for europe as such
09:21:31 <shapr> there's the ring of stars on the Euro flag
09:21:35 <bring> true
09:21:44 <Marvin--> the EU flag, you mean
09:22:00 <shapr> right
09:23:03 <bring> lets make that the goal, coming up with a decent logo
09:23:41 <shapr> for the EU? :-)
09:23:45 <bring> :)
09:23:59 <shapr> I like the lambda euro, it's nice and simple
09:24:16 <Marvin--> europython uses the ring of stars
09:24:41 <bring> hmm, maybe we could do something with h0p, like doing everything needed to run ghc under h0p
09:24:49 <shapr> that would be *great*
09:24:56 <shapr> but we'd have to make sure Lunar^ shows up
09:25:05 <shapr> and possible sebc as well
09:25:17 <bring> including a shell of course
09:25:52 <shapr> that would be very spiffy
09:26:03 <bring> and a windowing system
09:26:12 <Marvin--> bring: slow down :P
09:26:16 * shapr laughs
09:26:31 <shapr> well, andersca has knowledge of X
09:26:45 <bring> hmm, another idea, an RDBMS
09:27:04 <shapr> or maybe an intuitive interface between an RDBMS and Haskell ;-)
09:27:14 <shapr> wait, we've already got one!
09:27:35 <shapr> actually, something like mnesia would be really neat
09:30:15 <bring> it'd be neat to write something like sqlite, but that would use some better query language than SQL
09:30:45 <shapr> assuming it hasn't already been done by then, I'd like to work on something like parnassus http://www.vex.net/parnassus/ for and in Haskell
09:31:48 <Si\> shaprL you called?
09:32:07 <Si\> that should be shapr: you called?
09:32:09 <shapr> Si\: just trying to remember the public release date for HAIFA
09:32:21 <Si\> 10th of unknown :)
09:32:32 <bring> looks like something you could write with wash and haskelldb
09:32:36 <Si\> some time between now and christmas
09:32:50 <Marvin--> make it june and come to Gothenburg to celebrate :)
09:32:53 <Si\> but seriously, hopefully next week
09:32:54 <shapr> Si\: was wondering if it would be released before June 10th or so, I've forgotten when your project ends.
09:33:19 <Si\> doesn't matter when it end, my supervisor wants it out out out!
09:33:26 <shapr> :-)
09:33:31 <shapr> sounds like my clients
09:33:44 <shapr> bring: yah, I was thinking wash and haskelldb
09:33:52 <Si\> my only problem is bugs
09:34:02 <Si\> once I make HAC steady I'll release
09:34:12 <shapr> ok
09:34:18 <Si\> but it'll only be a partial release
09:34:36 <Si\> namely HAIFA Core, SOAP/1.1 and HAC (+plugin)
09:34:37 <shapr> when do you expect a full release?
09:34:49 <Si\> ummm
09:34:54 * Igloo bounces up and down
09:35:05 <shapr> Igloo: something good happened?
09:35:07 <Si\> when I get my Skeleton/Stub Generator Done
09:35:15 <Igloo> I'm being infuriated
09:35:18 <Si\> I'll add that
09:35:25 <Marvin--> souns bad
09:35:32 <Si\> then when the WSDL builder is done, I'll add that
09:35:38 <Igloo> dpkg-deb has already had 56mins of CPU time. I want it to finish dammit!
09:35:45 <Marvin--> heh
09:36:13 <shapr> Si\: ok, just wondering whether HAIFA would be a candidate for extension at EuroHaskell
09:36:38 <Marvin--> kosmikus|away: hey, when's the official release of lhs2TeX 1.10 anyway?
09:37:01 <Si\> I don't think it's anything like of that calibre
09:37:36 <shapr> well, it's the closest thing I've seen to a Haskell Web Application Server
09:38:22 <Si\> true, you'll have to tell me what you think when I chuck out the first release
09:39:00 <Si\> anyway, you already have a really old release of the HAIFA Core, does it look anything like EuroHaskell material?
09:40:28 <shapr> I haven't looked yet, I just got my Google key a few hours back
09:41:18 * shapr looks
09:41:38 <Si\> I'll probably put HAC+HWS-WP up on my server in a few days for a test run
09:41:48 <shapr> neat
09:41:59 <Si\> with a sample application, probably only a Calculator
09:46:31 <shapr> haifa-client looks sensible
09:46:51 <shapr> I'd have to try to change/use it myself to come up with any decent critique
09:47:17 <Si\> don't try to do anything with that though, it's old and buggy and probably only works with Google
09:47:23 <shapr> well, ok
09:47:43 <Si\> Sorry, I know I just asked for your
09:47:47 <Si\> opinion
09:47:50 <shapr> no worries :-)
09:48:01 <Si\> I'm tired
09:48:28 <shapr> I'm looking forward to the next release of HAIFA
09:48:34 <Si\> I was up late last night trying to figure out why HWS-WP wasn't receiving the reply bodies from HAC
09:48:44 <shapr> did you figure it out?
09:48:44 <Si\> looked to see whether the Handle was blocking
09:48:50 <Si\> or the thread was stalling
09:48:55 <Si\> or something technical
09:49:03 <Si\> oh I yes I figured it out this morning
09:49:28 <Si\> I'd written this function called hGetChars :: Handle -> Int -> String
09:49:35 <shapr> I've noticed that staying up late to work on something rarely helps me, after good sleep, I can usually find the problem quickly.
09:49:38 <Si\> which get's a string of length n from a Handle
09:50:02 <Si\> problem whilst I'd called the base-case hGetChars
09:50:10 <Si\> I'd called the actual body getChars
09:50:16 <Si\> so it never executed
09:50:33 <Si\> or rather it crashed the thread
09:50:57 <Si\> and now it works :)
09:52:44 <Si\> amazing what trash I can write when I'm tired
09:53:44 <Marvin--> okay, now all the horribly bad april fool's joke are flooding /.
09:57:03 <vegai> they should randomize the day
09:57:12 <vegai> spice things up a little
09:57:46 <Marvin--> I don't mind april fool's jokes
09:57:55 <Marvin--> but I do mind obvious and *dumb* jokes
09:59:06 <Igloo> They're generally too "when you've seen one you've seen them all" for my liking
09:59:25 <Igloo> apt-gentoo made me smile
10:00:08 * vegai is amazed at kuro5hin.org.
10:00:18 <vegai> that site shows style
10:00:26 <vegai> and class
10:03:18 <Marvin--> yeah, apt-gentoo was really good
10:07:09 <Igloo> Did the code actually do what it claimed OOI?
10:09:58 <Marvin--> I never checked :)
11:03:14 <kosmikus|away> Marvin--: re lhs2TeX -- I cannot say. I am away next week, and writing up my thesis does not leave me much time for anything else.
11:10:17 <Marvin--> understandable
11:10:26 <Marvin--> I guess I could upload a 1.9pre1.10 version or something
11:17:30 <ski> hello zyrnix
11:17:40 <zyrnix> hi
11:18:10 <ski> have any haskell question ?
11:19:27 <zyrnix> None right now.  I was actually hoping to catch shapr for a kinesis question.
11:19:37 <shapr> ?
11:19:55 <zyrnix> Oh, hi.  In the console, does your right alt work?  Mine only works in X.
11:20:17 <shapr> I'd guess it's AltGr in console
11:20:51 <zyrnix> ok
11:20:55 <shapr> does that help any?
11:21:36 <shapr> anyways, check your console keymap, I suspect right alt will show up as AltGr
11:22:10 <shapr> no, my right alt does not work in console, even though I use the ansi dvorak keymap
11:22:30 <shapr> and I have long suspected that it's because it's set to AltGr, but have never been motivated enough to actually sit down and figure it out
11:24:01 <zyrnix> It helps narrow down the search.  I use gnus in the console so I'm working up the motivation.
11:35:45 * esap got confused by the capitalization :-)
11:54:54 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","deb http://www.syntaxpolice.org/haskell-experimental unstable/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","haskelldb 0.7 released","related channels #darcs #haskell.se","http://www.haskell.org/hawiki/EuroHaskell"]' by shapr
12:00:41 <stepcut> morning shapr!
12:04:02 <shapr> good morning stepcut!
12:04:08 <shapr> how's the AIM code and the unixy arrows?
12:04:27 <shapr> I'm playing with haskelldb 0.7's new and crunchy features
12:04:59 <stepcut> I got something working with the unixy arrows, but I am not real happy with how it came out
12:05:12 <stepcut> I think my model needs some tweaking
12:05:23 <stepcut> but I have some stuff I can send you if you want
12:05:27 <shapr> sure
12:05:29 <monotonom> wow 0.7 already! I was just looking at 0.6 two days ago!
12:05:39 <stepcut> monotonom: 0.6 has been out for a few weeks
12:05:51 <shapr> the new stuff in HaskellDB really does warrant going to 0.7
12:06:04 * stepcut is currently hacking haskellDB to add support for LAST_INSERT_ID()
12:06:13 <ztre> re :-D
12:06:15 <stepcut> which is a very useful MySQL function
12:06:27 <shapr> I'm adding a DBInfo part to the AvianWiki tutorial
12:06:40 <musasabi> stepcut: but that is very nonportable :-(
12:06:45 <monotonom> I hope the same for my mutual funds --- every time I look, it will increase behind my back :)
12:06:48 * stepcut also figured out how to build haskelldb with embedded mysql support (so you don't have to have a server running)
12:06:52 <musasabi> better sqlite support would be nice...
12:07:12 <musasabi> stepcut: sqlite does it all ;)
12:07:32 <shapr> musasabi: do you know who added SQLite support? :-)
12:07:38 <ztre> i installed emacs21, haskell-mode and python-mode. now haskell syntax highlight works fine, but python syntax highlight does not work at all. and lol i figured out that emacs is better than vim...
12:07:55 <stepcut> musasabi: sqlite does it all, except types :)
12:08:10 <musasabi> why no type support in it?
12:08:24 <shapr> ztre: using linux?
12:08:29 <stepcut> musasabi: that author of sqlite feels that strong typing is a misfeature, so sqlite is typeless
12:08:31 <shapr> hello aSandro 
12:08:55 <stepcut> musasabi: everything is a string, regardless of what you say in create table
12:08:57 <shapr> bye aSandro
12:09:00 <monotonom> We'll hack sqlite to become typeful!
12:09:01 <ztre> shapr: debian yes
12:09:22 <shapr> ztre: unstable?
12:09:25 <musasabi> stepcut: so it is typesafe if it is used only through haskelldb?
12:09:29 <ztre> shapr: sid yes
12:09:39 <shapr> hm, works for me
12:09:47 <ztre> shapr: :-/
12:10:05 <ztre> shapr: it loads the python-mode, but no highlight
12:10:07 <shapr> you installed python-elisp right?
12:10:18 <ztre> shapr: no... python-mode
12:10:34 <ztre> shapr: should i install python-elisp?
12:10:39 <stepcut> musasabi: well, everything gets turned into a string, so its type-safe in that sense, but it also means that you can't use the same code for mysql and sqlite, because an int in mysql will really be an int, but in sqlite it will be a string
12:10:59 <stepcut> musasabi: though there is talk about adding a type-safe translation layer for sqlite
12:11:00 <ztre> shapr: and is haskell-mode right (the best) for Haskell syntax highlight?
12:11:06 <shapr> I think so
12:11:37 <shapr> on the downside, emacs uses regexp-based syntax highlighting, so you'll still have some problems
12:11:59 <shapr> the only way to get around that is to do real parsing in the synaxt highlighter, and I think only semantic does that
12:12:15 <stepcut> musasabi: I agreed that LAST_INSERT_ID() may not be portable, but is there a portable way to achieve the same effect (ie. insert a record with an auto_increment field, and hten find out what the auto-increment number was set to?)
12:12:16 <shapr> ztre: I don't know if you should install python-elisp, but it doesn't hurt to try
12:13:22 <ztre> shapr: semantic?
12:13:28 <musasabi> stepcut: not really.
12:13:37 <shapr> the semantic bovinator is a parser generator for emacs
12:13:50 <shapr> it works like yacc and bison
12:13:53 <shapr> sort of
12:14:01 <musasabi> stepcut: with postgresql you would use a transaction and first get the value out of the sequence and then insert it.
12:14:24 <stepcut> musasabi: yeah, but not all db's support transactions :(
12:15:07 <stepcut> musasabi: in any case, in this case, I am adding at the application layer, not in the library itself, so I don't mind being tied to MySQL for now (I doubt bugzilla is about to switch)
12:15:58 <ztre> shapr: uh 8-? i dont want to learn a new language just to get proper syntax highlight. vim's python was excellent. emacs's haskell is good too... cant we cross the two?
12:16:46 <monotonom> Yeah you can try genetic programming.
12:16:56 <Marvin--> what's wrong with vim's haskell?
12:17:17 <kosmikus|away> Marvin--: if you want to, you can even upload it as 0.10 -- I would then make the next official release 1.11
12:17:28 <kosmikus|away> 1.10, of course
12:17:48 <Igloo> That would be likely to confuse people
12:18:03 <Marvin--> yeah, that's something of a no-no
12:18:18 <Marvin--> until 1.10 is released, I don't upload 1.10-1, but uploading a 1.9pre1.10-1 is not a problem
12:19:20 <shapr> ztre: try M-x global-font-lock-mode
12:19:32 <kosmikus|away> why would it confuse people? The current tarball denotes a fixed version between 1.11 and 1.9. I am not going to change "1.10" anymore, or something
12:19:32 <shapr> ztre: see if that gives you syntax highlighting in python source files
12:19:42 <ztre> Marvin--: vim's haskell? i just dont like it :-(
12:20:17 <Marvin--> ztre: oh, okay... shouldn't be too hard to change from .vimrc though
12:20:42 <Igloo> kos: "What version of lhs2tex do you have?" "1.10" "Huh, that doesn't exist!"
12:20:44 <Marvin--> kosmikus|away: because it's labelled as a cvs snapshot! :)
12:21:29 <kosmikus|away> so it's just a labelling problem?
12:21:32 <Marvin--> if you're not going to change it, make a release :)
12:21:43 <Igloo> Yes
12:22:11 <Igloo> Some projects have unstable source-only releases between real releases - you could do that, but then the official webpage should say so
12:22:31 <Igloo> (well, doesn't have to be source only, but generally is)
12:22:40 <kosmikus|away> I don't want to make a formal release (i.e. with announcement to the mailing lists) without having an okay from Ralf, and I don't have time for that anymore ...
12:22:44 <ztre> shapr: yes thanx! M-x global-font-lock-mode gave me python syntaxhilight... but should i type it everytime?
12:22:49 <Marvin--> it's kinda customary to use odd numbers for that, though :P
12:23:00 <kosmikus|away> Marvin--: I know ...
12:23:16 <Marvin--> but what's the problem with calling it 1.9pre1.10?
12:23:34 <shapr> ztre: you should edit your ~/.emacs file and somewhere near the bottom, add: (global-font-lock-mode 1)
12:23:39 <kosmikus|away> nothing, really ...
12:23:43 <Marvin--> actually, I could make it even more evil by putting the date in it too
12:24:00 <Marvin--> 1.9pre1.10.cvs20040324-1
12:24:06 <Marvin--> now *that's* a 1337 version number
12:24:33 <Igloo> Marvin: No, the odd number thing is generally used when you have two branches IME
12:24:53 <ztre> shapr: and what is this "global-font-lock-mode" or where do i find docs about it?
12:25:14 <Marvin--> Igloo: yeah, true
12:25:36 <Marvin--> there's a long tradition of packaging prerelease versions in Debian *cough*gcc*cough*
12:26:10 <shapr> ztre: it means that you don't have to turn on the minor mode font-lock-mode for each buffer you open, it's automatically on
12:26:22 <kosmikus|away> Marvin--: I would then update the version number of the release to 1.9pre1.10, too -- is that okay?
12:26:23 <Riastradh> Marvin--, wait, wait, you should also put the current air pressure near your keyboard when you release it, too.
12:26:54 <Marvin--> kosmikus|away: um... why?
12:27:17 <Marvin--> kosmikus|away: well, it's your tarball .)
12:27:21 <kosmikus|away> I like it better if I can distinguish bugreports ...
12:27:50 <zyrnix> shapr: thanks!
12:27:55 <ztre> shapr: :-D and what is "font-lock-mode" (completely new to EMACSen)
12:28:05 <kosmikus|away> if I use 1.10 for both snapshot and final version, then it is harder for me to distinguish which version the user actually uses ...
12:28:10 <shapr> zyrnix: you fixed the problem?
12:28:27 <Marvin--> right, that's a good general point, you shouldn't use the same version for different versions ;)
12:28:36 <shapr> ztre: it's what does syntax highlighting
12:28:49 <zyrnix> shapr: setkeycodes e038 56  # works for me.  It is mapped to altgr.  If you do 'showkey -s' then you see that hitting the right alt produces 0xe0 0x38 0xe0 0xb8.
12:29:03 <ztre> shapr: haskell works without it ;-)
12:30:11 <shapr> zyrnix: do you used ansi-dvorak also?
12:30:42 <zyrnix> Nope.  I use the standard US qwerty keyboard and then turn on the kinesis dvorak mode.
12:30:53 <shapr> ah, you have hardware dvorak
12:30:53 <zyrnix> err keyboard mode
12:30:56 <zyrnix> yeah
12:31:01 <ztre> shapr: and the ~/.emacs file doesnt exist :-( do i just simply add (global-font-lock-mode 1)
12:31:06 <shapr> ztre: yup
12:31:13 <ztre> shapr: and whats the comment sign in .emacs?
12:31:23 <shapr> ztre: it's a semicolon ; this is a comment
12:31:28 <ztre> shapr: completely new to LISP as well
12:31:45 <ztre> shapr: cool huge tHanX!
12:31:53 <shapr> zyrnix: hey, have you seen my "I am not a koala" kinesis remapping?
12:31:57 <zyrnix> shapr: But on other keyboards, I use the dvorak layout.  I don't use the ansi-dvorak layout in X (I use an xmodmap script for that).  As I recall, ansi-dvorak has some strange bindings.
12:32:29 <zyrnix> hmmm I don't think so.  URL?
12:32:40 <tic_> whee, svorak!
12:34:10 <shapr> zyrnix: I can upload it if you want, but in short, I've moved all of the modifiers under my thumbs, I've swapped Shift_L and DEL for example, and remapped home and pgup to Super; end and pgdn to Hyper
12:34:48 <shapr> and Caps_Lock is hippie-expand, Shift_R is iswitchb
12:35:10 <zyrnix> Nice.  Yeah I would like to try that out.
12:35:38 <shapr> and I'm using much of the HumanInterface stuff that kensanata and resolve, MailKey, IrcKey, etc
12:35:51 <shapr> that they wrote
12:35:52 <ztre> shapr: and how do i make EMACS not to write backups?
12:36:22 <zyrnix> ztre: But they are so nice.
12:36:43 <ztre> zyrnix: :-?
12:36:55 <ztre> zyrnix: i never really needed them
12:37:08 <shapr> try M-x customize
12:37:14 <shapr> or M-x customize-group
12:37:18 <ztre> shapr: okay thanx
12:37:18 <shapr> and say backup
12:37:35 <shapr> zyrnix: http://www.scannedinavian.org/~shae/xmodmap-notkoala
12:38:01 <shapr> zyrnix: the guiding principle there is that all chording should be done with thumbs, emacs pinky is for koalas
12:38:55 <zyrnix> ztre: I think it is (setq make-backup-files nil) ;; to disable it.
12:40:21 <ztre> zyrnix: ok i'll try thanx
12:43:55 <ztre> zyrnix: works ;-)
12:45:23 <kosmikus|away> Marvin--:  is 1.9pre1.10 really correct debian naming convention?
12:47:29 <kosmikus|away> Marvin--: shouldn't it rather be 1.10preSomething ?
12:54:52 <Marvin--> kosmikus|away: the problem is that 1.10pre-1 > 1.10-1
12:55:09 <Marvin--> so yes, we typically use 1.9pre1.0
12:55:29 <Marvin--> 1.9pre1.10
12:57:35 <kosmikus|away> hmm, that's different from Gentoo
12:57:47 <kosmikus|away> portage considers 1.10_pre1 to be smaller than 1.10
12:58:06 * SyntaxNinja-jk really wishes that he could specify the implementation of a parent class int he instance of the base class (all instances of Ord are an instance of Eq, and I'll tell you how...)
12:58:20 <Marvin--> there is something similar in Debian with ~ IIRC, but I don't know how widespread that support is yet
12:59:00 <kosmikus|away> anyway, I changed the web page to have 1.9pre1.10 ...
12:59:03 <Marvin--> kosmikus|away: so I think you should just go ahead and call the version "1.10 prerelease" and just put the date as version on the tarball or something, if you want to avoid confusion
12:59:18 <shapr> SyntaxNinja-jk: I wish that too sometimes
12:59:30 <SyntaxNinja-jk> soooo many instances!
12:59:46 <SyntaxNinja-jk> maybe I'm thinking too much like an oo developer or something with this class hierarchy
13:01:02 <kosmikus|away> Marvin--: ok, I'll change it again
13:02:24 <blackdog> <dumb question> what does haifa-client do? </>
13:02:38 <blackdog> oops, that was pages ago. damn time zones...
13:03:11 <shapr> blackdog: it's a bit like J2EE, but for Haskell
13:03:49 <blackdog> <realdumb> what's J2EE? </>
13:04:07 <Marvin--> I wonder that too
13:04:30 <shapr> Java 2 Enterprise Edition, Sun's idea of an application server
13:05:47 <shapr> <advertisement>J2EE gives easy access to databases, http sessions, authentication, encrytion, blah, blah, blah </advertisement>
13:06:14 <shapr> it's not really true
13:06:26 <shapr> J2EE is a nightmare in many ways
13:06:44 <shapr> I have more hope for HAIFA
13:07:38 <bring> speaking of encryption, anyone thinking about writing a haskell SSL lib?
13:07:43 <bring> would be nice
13:09:22 <ztre> J2EE for Haskell? i will stop learning haskell *NOW*!? tell me its an aprils fool
13:09:50 <shapr> happily, it has none of the insanity of J2EE
13:10:03 <ztre> shapr: Hugs interprets, GHC compiles, and many many more... but byte-code VMs are %*#@&!
13:10:36 <blackdog> well, ozone's working on a haskell backend to Parrot, I think...
13:11:02 <ztre> well
13:11:31 <ztre> if Haskell *can* be compiled to bytecode, its okay... but it should remain optional and rare
13:11:43 <Riastradh> What's wrong with byte code?
13:11:45 <blackdog> what's your objection, exactly?
13:11:52 <kosmikus|away> Marvin--: done
13:14:23 <ztre> Riastradh, blackdog: compiling to bytecode and interpreting that is *EVIL*
13:14:38 <Riastradh> ztre, why?
13:14:40 <ztre> there is already "compiling to native code"
13:14:43 <blackdog> you may have to come up with more solid technical reasons than tha...
13:15:05 <ztre> and if you want, there are interpreters to use during development
13:15:17 <Riastradh> Native code compilers are _considerably_ more complicated beasts than byte code compilers.
13:15:59 <blackdog> it seems a pretty natural thing to do to me. you can do all the architecture independent stuff on the bytecode, and then have a JIT compiler on the client to do the bitpoking...
13:20:44 <ztre> :-(
13:20:47 <ztre> oh no
13:21:00 <ztre> native code compilers are more complex, yes
13:21:11 <ztre> but the code at the end will be efficient!
13:21:21 <ski> and less portable
13:21:27 <ztre> ski: :-D
13:21:40 <ztre> ski: source-code must be portable, not binaries!!!
13:21:41 <blackdog> there's nothing inherently inefficient about bytecode
13:22:00 <ztre> blackdog: Yes, but there are about their JIT
13:22:24 <ski> blackdog : you mean when interpreting it ? or JITting it ?
13:22:29 <ztre> DONT LET MICROSOFT BORK YOU!
13:22:33 <ztre> sorry
13:22:42 <ztre> ski: yes
13:22:55 <blackdog> when JITting it, obviously. :)
13:23:05 <ztre> give me a single reason for byte-code
13:23:27 <blackdog> It's helpful for global optimisation. Read Manuel Chakravarty's paper on FOC
13:23:36 <Riastradh> Simplicity of implementation, efficiency much closer to native code than straight interpreting.
13:23:45 <Riastradh> Oops, that's two reasons.
13:23:49 <shapr> nibble code is too painful
13:23:50 <ztre> Riastradh: *much closer*
13:24:24 <ski> but not too close
13:24:32 <ztre> Riastradh: and when were there any point in simplcity of compiler implementations?
13:24:50 <ztre> nibble :-D
13:24:52 <Riastradh> ztre, if you have a massively complicated compiler that no one can maintain, then you've got a problem.
13:25:35 <ztre> Riastradh: if you've got a good compiler and microsoft tries to bork you to replace it with a bytecode vm, youve lost the war
13:25:41 <mattam> many features in C++ weren't in C for simplicity of compiler impls reasons.
13:26:03 <ztre> mattam: and C is still better than C++!
13:26:09 <Riastradh> ztre, pretending that all languages can run on a single unified VM is _not_ the same as using byte code.
13:26:10 <mattam> exactly
13:26:39 <ztre> Riastradh: no
13:26:49 <ztre> Riastradh: but abviously it will be
13:26:54 <Riastradh> ?
13:26:58 <ztre> Riastradh: :-D
13:27:06 <ztre> Riastradh: sorry not native
13:27:26 <ztre> Riastradh: well, so can you give me a reason for byte-code then?
13:27:40 <blackdog> he's given you two, and i've given you one. :)
13:27:42 <Riastradh> I already gave you two reasons.
13:28:04 <ztre> blackdog: what's "global optimization"
13:28:08 <blackdog> you don't want to mix up technical issues with political ones...
13:28:22 <ztre> blackdog: whats technical here?
13:28:27 <ztre> Riastradh: so:
13:29:01 <ztre> Riastradh: simplicity of implementation has lower priority than performance
13:29:16 <ztre> Riastradh: and much closer is not a reason :-D
13:29:25 <blackdog> basically inter-module optimisation. it's hard to do that at traditional compile time, because you have things like runtime loading and late linking and whatever. if you've got a suitable bytecode, you have all the information you need to do all the inter-module optimisation you like.
13:29:42 <Riastradh> ztre, how often do you really _NEED_ the extreme performance that native code provides you?
13:30:03 <blackdog> i don't believe we're talking about the extreme performance of haskell code :)
13:30:20 <ztre> Riastradh: every time i click on an icon
13:30:25 <Riastradh> If you _don't_ need it, then absolutely go for a simpler implementation.  If you _do_ need it, that's what JITs and wicked optimizing native code compilers (like MLton and Stalin) such are for, and yeah, you probably shouldn't be using Haskell anyways.
13:30:41 <ztre> Riastradh: it does matter if it takes 100 seconds to load rather than 3
13:31:16 <blackdog> i don't think you'll often see that kind of difference between bytecode JITs and native code.
13:31:35 <ztre> blackdog: there should not be such difference
13:31:40 <ztre> but there is
13:31:49 <ztre> between C and Java, for example
13:32:06 <ztre> Riastradh: and the reason for Haskell is not its performance.
13:32:24 <ztre> Riastradh: if there were a faster functional language, i would change to that happily
13:32:40 <ztre> Riastradh: purely functional, dont say O'CaML
13:32:54 <ski> Mercury ??
13:33:01 <Riastradh> Purely functional?  You're not going to get the kind of speed you want in purely functional languages.
13:33:07 <ztre> Riastradh: being functional has higher priority than performance
13:33:11 <ski> Clean ?
13:33:28 <blackdog> the java virtual machine has some unfortunate design decisions. Indirections all over the place...
13:33:29 <ztre> clean is slower than haskell nope?
13:33:46 <ztre> and mercury would be cool yes
13:33:57 <ztre> but clean and mercury are both *dead*
13:34:01 <blackdog> apparently clean actually has a mode of compiling haskell code... anyone checked it out? I kept meaning to...
13:34:01 <ski> i think it is faster for at least certain kinds of operations (not sure, though)
13:34:13 <mattam> it depends on the particular problem, and on the code and on the compiler implementations. There is a benchmark out there showing that some Java impls has better performance than C++ in some cases and is very close to C in most.
13:34:20 <blackdog> Fergus might mbe upset to hear you say that.
13:34:47 <ski> ztre : dead ?
13:35:10 <Riastradh> ztre, first: how often do you really _need_ the kind of performance you're talking about?
13:35:12 <blackdog> is there a good inter-language benchmark site these days? Doug Bagley's site seems to have been frozen for a while.
13:35:16 <ztre> mattam: dont believe those benchmarks, do that yourself and you will be surprisen how a big lie that it
13:35:42 <mattam> i don't 'believe' i tried.
13:35:53 <ztre> Riastradh: sometimes i need it. but why sacrifice it if i already had it??
13:35:56 <Riastradh> Certainly, if you're designing a rendering engine, you want that kind of speed.  But you're going to write it in C, or more likely assembly language.
13:36:18 <Riastradh> A wicked high-performance rendering engine like Quartz, I mean.
13:36:19 <ztre> blackdog: no.
13:36:45 <ztre> Riastradh: :-D
13:36:52 <shapr> blackdog: let's start a benchmark wiki
13:36:58 <ztre> Riastradh: it would be easier in haskell
13:37:07 <ztre> shapr: good idea
13:37:19 <Riastradh> ztre, then you'd get, oh, say, about six or so orders of magnitude slower than what you want.
13:37:24 <ztre> shapr: but the results should not be publicly editable
13:37:35 <ztre> shapr: like people can submit code, edit it
13:37:39 <blackdog> *grin*
13:37:51 <ztre> and a script measures exec times or something
13:37:54 <ztre> right?
13:38:01 <shapr> yup
13:38:04 <blackdog> "Look! My lambda calculus implementation with Church numerals is a hundred times faster than your assembly!"
13:38:12 <ztre> Riastradh: :-D actually no
13:38:21 <ski> blackdog : haha !
13:38:39 <ztre> Riastradh: for me, ghc-compiled haskell is ~20% slower than gcc-compiled C
13:38:46 <ztre> only ^^
13:38:59 <Riastradh> ztre, that kind of statement is totally meaningless.
13:39:34 <ztre> Riastradh: *for me*
13:39:34 <shapr> there was a C vs Haskell OpenGL rewrite happening on hopengl@haskell.org recently
13:39:55 <ztre> okay
13:39:59 <ztre> </war>
13:40:07 <ztre> but the wiki is a good idea
13:40:09 <shapr> iirc, Haskell equaled the speed of C
13:40:18 <Riastradh> ztre, 'for you?'  I don't care about whether it's for you or for me.  There are just _so_many_ variables involved that you can't say 'it's this fast.'
13:40:19 <ztre> shapr: really? cool
13:40:42 <shapr> anyway, I'm not into Haskell for the speed of execution, but instead for the expressiveness
13:40:52 <ztre> shapr: exactly
13:40:53 <shapr> speed of development
13:40:55 <blackdog> shapr: If that's so, I'll bet it's not idiomatic haskell.
13:41:04 <ztre> shapr: but would byte-code compiling help that?
13:41:12 <shapr> blackdog: Simon M did some minor modifications to the original Haskell code, I admit.
13:41:36 <blackdog> *grin* I bet if you got Ritchie to help with the C you'd do well, too.
13:41:40 * shapr grins
13:41:45 <shapr> fair enough
13:41:51 <Riastradh> ztre, byte compilation allows for _pretty_ fast code, if not _extremely_ fast code, and it's not very often that you _truly_need_ _extremely_ fast code.
13:41:53 <shapr> hello nodie, what can we do for you?
13:42:02 <Riastradh> Er.
13:42:12 <Riastradh> s/if not _extremely_ fast code/just not _extremely_ fast code/1
13:42:19 <shapr> in Core considered byte-code?
13:42:25 <nodie> really nothing, I'm only here to read
13:42:27 <nodie> :)
13:42:30 <shapr> er, GHC's Core, is that byte-code?
13:42:42 <shapr> nodie: ok, if you have any Haskell questions, feel free to ask
13:42:43 <blackdog> not really, it's just an intermediate representation.
13:43:04 <blackdog> I suppose STG defines a small abstract machine...
13:43:07 <nodie> I've use haskell in my class but I don't use it now
13:43:29 <shapr> I use haskell in my job!
13:43:34 <shapr> but not very often.
13:44:30 <ztre> :-/
13:44:33 <nodie> do you use it like script languege shapr ?
13:44:36 <ztre> hi reltuk
13:44:44 <reltuk> hello there
13:45:11 <shapr> I guess so
13:45:14 <ztre> Riastradh: okay, but what do you get in turn for pretty fast code rather than extremely fast?
13:45:30 <ztre> Riastradh: easy implementation of compilers?
13:45:31 <Riastradh> ztre, simplicity.
13:45:38 <shapr> lately I've been using it to automate some form entry via xml-rpc
13:45:39 <ztre> Riastradh: which already exist?
13:45:49 <ztre> Riastradh: simplicity where?
13:46:15 <Riastradh> ?
13:46:20 <ztre> Riastradh: it doesnt change the coding phase at all!
13:46:24 <shapr> nodie: I do use Haskell for fun. lambdabot is a good example.
13:46:38 <shapr> @yow
13:46:38 <ztre> Riastradh: what is simplified?
13:46:39 <lambdabot> Yow!  I'm UNEMPLOYED!
13:46:48 <reltuk> eep
13:47:13 <ztre> @hunt
13:47:13 <lambdabot> Sorry, I don't know the command "hunt", try "lambdabot: @listcommands"
13:47:26 <ztre> @drink
13:47:26 <lambdabot> Sorry, I don't know the command "drink", try "lambdabot: @listcommands"
13:47:27 <Riastradh> Byte code systems tend to be considerably more comprehensible during debugging phases.  Maintaining the implementation is made considerably simpler as well.  Modifying the implementation to suit your needs as well is much simpler.
13:47:28 <ski> @arr
13:47:29 <lambdabot> May the clap make ye incapable of Cracking Jenny's Tea Cup.
13:47:29 <ztre> @kill me
13:47:30 <lambdabot> Sorry, I don't know the command "kill", try "lambdabot: @listcommands"
13:47:38 <blackdog> off to work... see you, everyone.
13:47:40 <Cale> @yow
13:47:41 <lambdabot> ..  I wonder if I ought to tell them about my PREVIOUS LIFE
13:47:41 <lambdabot>  as a COMPLETE STRANGER?
13:47:43 <shapr> cya blackdog 
13:47:44 <ski> @karma+ ztre
13:47:44 <lambdabot> ztre's karma has been incremented.
13:47:59 <Cale> @yow
13:47:59 <lambdabot> I haven't been married in over six years, but we had sexual counseling
13:47:59 <lambdabot>  every day from Oral Roberts!!
13:48:08 <shapr> @fortune
13:48:08 <lambdabot> YOW!!!  I am having fun!!!
13:48:14 <shapr> that's not a fortune!
13:48:15 <Cale> haha
13:48:17 <shapr> I've been cheated!
13:48:19 <Cale> @fortune
13:48:20 <lambdabot> Why would anyone want to be called "Later"?
13:48:25 <ztre> Riastradh: :-( okay it seems i will A) have to seek an other language B) get used to this bytecode mysery :-(
13:48:27 <Cale> @fortune
13:48:28 <lambdabot> Using words to describe magic is like using a screwdriver to cut roast beef
13:48:28 <lambdabot> 		-- Tom Robbins
13:48:45 <shapr> that's a neat quote
13:49:31 <ztre> ski: why karma+?
13:49:43 <ztre> ski: karma+ is bad or good?
13:49:48 <atom-z> whats the haskell modulus function?
13:49:58 <nodie> bye
13:50:18 <shapr> @type mod
13:50:18 <lambdabot> mod :: Integral a => a -> a -> a
13:50:19 <Cale> atom-z: modulus as in magnitude?
13:50:20 <ski> ztre : good
13:50:31 <ski> ztre : but we haven't used it much ..
13:50:36 <Cale> @type magnitude
13:50:51 <Cale> ...
13:50:51 <atom-z> Cale: no, mod as in remainder
13:51:01 <Cale> ah, then yeah, it's mod
13:51:07 <ski> there's also
13:51:11 <atom-z> ok thanks
13:51:11 <ski> @type rem
13:51:11 <lambdabot> rem :: Integral a => a -> a -> a
13:51:18 <Cale> 6 `mod` 4
13:51:23 <shapr> @type faster
13:51:48 <ski> Prelude> 16 `mod` (-7)
13:51:49 <ski> -5 :: Integer
13:51:49 <ski> Prelude> 16 `rem` (-7)
13:51:49 <ski> 2 :: Integer
13:52:23 <ztre> @eval print ":-D"
13:52:23 <lambdabot> unbound variable: print
13:52:28 <ztre> @eval printStr ":-D"
13:52:29 <lambdabot> unbound variable: printStr
13:52:32 <ztre> :-/
13:53:07 <shapr> @eval "y0"
13:53:07 <lambdabot> y0
13:53:23 <ztre> @exec print show 5
13:53:24 <lambdabot> Sorry, I don't know the command "exec", try "lambdabot: @listcommands"
13:53:41 <ztre> shapr: can i /MSG lambdabot?
13:53:48 <ski> sure you can
13:53:49 <Cale> lambdabot doesn't execute haskell
13:53:56 <ztre> Cale: then?
13:54:03 <ztre> Cale: it *should*
13:54:17 <shapr> it can, but it won't while I'm hosting it.
13:54:26 <Cale> It would likely be dangerous.
13:54:26 <ski> there's an issue about security
13:55:01 <shapr> I think the sources come with the GHCiPlugin
13:55:16 <shapr> actually, I think it comes with two, one from Lunar^, and one from hram
13:55:19 <ztre> run it inside ulk
13:55:39 <ztre> user-mode linux kernel
13:56:46 <Segora> .. or with SELinux
13:56:51 <ztre> :-/
13:56:56 <ztre> maybe vmware
13:57:16 <Segora> .. or linux virtual server support
13:57:23 <Segora> Or maybe just a plain old chroot
13:57:29 <Segora> (if you manage to get it right)
13:57:39 <shapr> I may get around to trying those out one day, but probably not soon
13:57:42 <Segora> if it's BSD, you could use jails
13:57:56 <ztre> with   if [ notconfirmed ]; then persistent-hd
13:58:02 <ztre> with vmware
13:58:08 <ztre> thats 100% secure
13:58:23 <ztre> some university should host lambdabot
13:58:28 <ztre> or even better, haskell.org ;-D
13:59:31 <shapr> they probably wouldn't mind, but I think lambdabot is okay where it is
13:59:39 <ztre> apr1 over in seconds...
13:59:40 <Segora> @type putStrLn
13:59:40 <lambdabot> putStrLn :: String -> IO ()
13:59:46 <Segora> @eval putStrLn "test"
13:59:46 <lambdabot> unbound variable: putStrLn
13:59:46 <ztre> 10...9...8
13:59:55 <Segora> ah
14:00:09 <ztre> ...0
14:00:14 <ztre> :-D
14:00:15 <shapr> if you want to run a lambdabot instance with @ghci enabled inside a ulk/SELinux/etc, I think it would be a great teaching tool
14:00:18 <Segora> 13 seconds lag ;)
14:00:42 <shapr> would be spiffy if we could /msg or /dcc source files to it
14:01:02 <ztre> shapr: :-D
14:01:20 <ztre> yes
14:02:09 <Segora> well.. even better than IRC would be a public desktop which you can connect to using rdesktop, X protocol or maybe vnc. You see the other's mouse pointers (maybe along with a nickname) and can show each other stuff.
14:02:29 <shapr> yah, that would be cool
14:02:54 <shapr> I wonder if wxHaskell could do something like that
14:03:07 <ztre> Segora: i did it once with QNX
14:03:18 <Segora> shapr: what does the toolkit have to do with this?
14:03:43 <ztre> :-D
14:03:47 <Segora> ztre: You mean a shared public System?
14:03:49 <shapr> I was just thinking of a fake X display where you could drag over your apps 
14:03:53 <ztre> all we need is a spare machine!
14:04:02 <ztre> we can boot from a livecd
14:04:07 <ztre> no hd needed
14:04:15 <ztre> and run public X kiosks
14:04:18 <ztre> ;-)
14:04:23 <shapr> a communal X display would be neat
14:04:30 <ztre> Segora: kiosk desktop
14:05:03 <ztre> how off-topic :-D
14:05:16 <Cale> I'd be happy if I could just detach and reattach X windows like I can with terminals in screen.
14:05:29 <Segora> Cale: xmove
14:05:40 <Cale> hmm
14:06:03 <Segora> Cale: it's quite old and seems to be unmaintained. There are some fundamental problems.
14:06:32 <Segora> Display depth etc. should be the same for all displays you use to detach/attach.
14:06:33 <shrimpx> Cale: you mean like tabbed windows?
14:06:52 <Cale> shrimpx: no, I mean what Segora is talking about.
14:06:57 <shrimpx> ah k
14:07:00 <Cale> Tabbed windows are easy.
14:07:18 <atom-z>  6 mod 3
14:07:18 <atom-z> ERROR - Cannot infer instance
14:07:18 <atom-z> *** Instance   : Num ((a -> a -> a) -> b -> c)
14:07:18 <atom-z> *** Expression : fromInt 6 mod 3
14:07:22 <Segora> ah sh... have to go, quickly (tram)
14:07:24 <Segora> cu
14:07:36 <Cale> I didn't even think that the protocol would allow such a thing - I'll have to look at xmove's source in any case.
14:07:42 <atom-z> could someone explain whats wrong with my statement?
14:07:54 <Cale> atom-z: try 6 `mod` 3
14:08:03 <atom-z> ok
14:08:03 <Cale> (with the backticks)
14:08:05 <shapr> @type 6 `mod` 3
14:08:05 <lambdabot> 6 `mod` 3 :: Integral a => a
14:08:10 <atom-z> why do you need the backticks?
14:08:11 <Cale> or mod 6 3
14:08:12 <earthy> Z
14:08:16 <atom-z> ah
14:08:18 <Cale> mod is an ordinary function
14:08:21 <atom-z> ok
14:08:30 <ski> atom-z : also, parenthesis are good
14:08:32 <kosmikus|away> you can also write "mod 6 3"
14:09:38 <shrimpx> [14:08] (Cale) or mod 6 3
14:10:43 <ski> atom-z : the backticks are used turn a (curried) two-argument function into an operator
14:11:31 <ztre> btw, backticks should be avoided
14:11:38 <ztre> one (me) cannot type it
14:11:49 <ztre> with international keyboards you see
14:14:14 <shapr> isn't there x-compose or something?
14:15:06 <Cale> I'm fairly sure that you could bind a key. Backticks are reasonably important in unix environments.
14:15:41 <shapr> I know on win32 I could hold down the alt key, type four numbers, and release; to get pretty much anything
14:16:03 <ztre> :-D
14:16:04 <ztre> yes
14:16:13 <ztre> shapr: may work in linux
14:16:17 <ztre> but dunno
14:16:17 <Cale> x-compose is nicer :)
14:16:25 <shapr> true, I've rebound some of the keys on my keyboard to random stuff like F13, F14, etc
14:16:41 <Cale> Though somewhat more restrictive unless you go to a bit of trouble adding stuff to it.
14:17:06 <shapr> I like using x-symbol in emacs
14:18:06 <Cale> æ¥æ¬èª
14:18:21 <Cale> hmm... something went wrong with my kanji fonts.
14:18:23 <ztre> Cale: 8-|
14:18:42 <ztre> Cale: the problem is: noone else would see that other than you
14:19:03 <Cale> shapr: do you see it? You're using emacs, right?
14:19:40 <Cale> X-Chat and emacs users could see it if they're set up correctly.
14:20:03 <Igloo> My font doesn't have it if it's UTF8
14:20:17 <Cale> yeah, it should be UTF8
14:20:22 <shapr> no I don't see it, but I do see Japanese, Chinese (GB, JIS, KSC, BIG5), Cantonese, and Hangul in my HELLO buffer
14:20:38 <shapr> ok, now I've switched to UTF8
14:20:43 <shapr> try it again?
14:20:52 <Igloo> I can give you a pretty smiley  â»
14:20:56 * shapr grins
14:20:58 <Cale> æ¥æ¬èª
14:21:04 <shapr> dang, I only see ~
14:21:18 <shapr> at least the chars are the correct width
14:21:26 <shapr> well, I've had it working before
14:21:56 <Cale> It should be the Japanese for Japanese :)
14:21:57 <Igloo> I see three square boxes for Cale's. If it isn't valid UTF8 it'll have been trnaslated to iso-8859-1 though
14:22:37 <Cale> I can currently see kana, but I get boxes for kanji all of a sudden too.
14:22:40 <shapr> hi chris__ 
14:22:43 <chris__> Hi
14:22:48 <Cale> maybe something odd with my last debian update
14:23:06 <shapr> chris__: have you been here before?
14:23:07 <Cale> ã«ã»ãã
14:23:15 <chris__> no its my first time
14:23:48 <shapr> chris__: ok, welcome to #haskell. Are you learning Haskell for school, fun, or work?
14:24:06 <chris__> oh, first school and than fun
14:24:41 <ztre> :-D
14:24:44 <Cale> :)
14:24:44 <shapr> ok then, if you have other functional programming experience and you like math, you may want to try the Gentle Introduction
14:24:45 <ztre> stop it
14:24:52 <shapr> stop what?
14:24:59 <ztre> xchat doesnt even show hungarian accents it sucks
14:25:11 <ztre> even text-only irssi shows them
14:25:14 <Cale> "Yet Another Haskell Tutorial" is my favourite.
14:25:18 <shapr> if you find the Gentle Introduction to be ungentle, Hal Daume's Yet Another Haskell Tutorial is a good choice
14:25:37 <shapr> and if you wish, we can suggest several books
14:25:41 <ztre> chris__: for school? cool. which school is it?
14:25:44 <ztre> chris__: that
14:25:55 <ztre> chris__: here they only teach dumb java
14:26:21 <chris__> Oh, it's my university in Wedel/Germany
14:26:23 <shapr> most of this information is also on the webpage mentioned in the channel topic
14:27:01 <shapr> and of course, if you have any questions, feel free to ask us.
14:27:34 <chris__> I've got question
14:27:47 <shapr> yes?
14:28:00 <chris__> I tried to parse an html-document with HaXml
14:28:40 <chris__> put it can't parse entities like &lt;, just something like &#xxx;
14:29:36 <chris__> Is this is a known problem? Or maybe i'm doing something wrong
14:29:43 <shapr> I remember having that problem, but I don't remember what solution I found
14:30:05 <shapr> I think it's possible that HaXML has a way to convert the &lt; entities into &#xxx;
14:30:37 <chris__> i used this parseHtml-function
14:31:16 <shapr> which version of HaXML are you using?
14:31:46 <chris__> it's version 1.11
14:31:56 <chris__> with ghc-6.2
14:32:32 <kosmikus|away> chris__: Wedel has its own university?
14:33:04 <chris__> yes, but just a small one
14:33:16 <kosmikus|away> is it an FH?
14:33:27 <chris__> yes, that's right
14:33:34 <kosmikus|away> ah, okay then :)
14:33:49 <chris__> you're from germany?
14:34:22 <kosmikus|away> yes, although I live in .nl at the moment
14:35:23 <shapr> a quick look into Parse.hs shows some entity specific code
14:35:24 <kosmikus|away> good to hear that they teach Haskell there ...
14:36:44 <chris__> I looked at th code too, but it's to complex for me to understand
14:37:47 <chris__> I found this reference function, but i couldn't figure out what this +++-operator stands for
14:38:26 <shapr> it usually means monadic OR in parsers
14:38:26 <chris__> the documentation describes it as "symetric choice". But what is symetric choice?
14:38:34 <ski> some kind of choice operator, i'd guess
14:38:52 <shapr> it probably means try the first one, if the first one fails, try the second one
14:39:00 <ski> i guess it's a choice that doesn't cut second part if first has solutions(s)
14:39:07 <ski> yah
14:39:19 <shapr> greeting = ("gutenabend" +++ "good evening")
14:40:16 <chris__> And what is the result?
14:40:37 <ski> chris__ : i would think that assymetric choice would only try the second part if the first part has no solutions
14:40:41 <shapr> the result of the first successful one
14:41:08 <chris__> Ok, i understand
14:41:25 <shapr> cool, my checkboxes work! http://shapr.homelinux.net/cgi-bin/wash/SearchML
14:42:05 <Igloo> Perhaps one or all of them should default to checked?
14:42:09 <shapr> probably so
14:42:24 * Igloo wonders at the dateless ones
14:42:26 <shapr> at the moment if zero are checked it means it searches all the lists
14:42:41 <shapr> my date parser sucks, so if it fails it puts in a NULL
14:42:42 <Igloo> Ah, OK, then just a note saying that would make sense
14:43:04 <Igloo> Ah. Can't you parse the date on the "From " line which should be in a standard form?
14:43:28 <Taaus> shapr: Empty search string => Internal Server Error... Just a heads-up :)
14:43:30 <shapr> hm, that would be sensible
14:43:41 <shapr> Taaus: thanks, I thought I fixed that
14:48:35 <Igloo> Eurgh
14:48:45 <Igloo> /last 56 1 doesn't do what I think it should
14:48:54 <shapr> what's that?
14:49:34 <Igloo> I wanted the last time 56 was said
14:49:59 <shapr> oh
14:56:01 <shapr> some of my date parsing is still horribly broken... how did I get day 47 of month 13?
14:56:53 <ski> 2003-49-29 :)
14:57:08 <Cale> Damn these cold Smarch nights.
14:57:40 * shapr wonders
14:57:43 <shapr> is Smarch month 13?
14:58:02 <Cale> heh, yeah - I think there was mention of it on the Simpsons
14:58:41 <Cale> When it was the 13th hour of the 13th day of the 13th month.
15:02:41 <shapr> stepcut: any idea how I set a checkbox to default to checked with WASH?
15:04:08 <stepcut> shapr: no, I have been meaning to look
15:04:40 <Cale> couldn't you use attr?
15:05:08 <shapr> I think so, but I'm not sure how
15:05:26 <shapr> haskell <- checkboxInputField (attr "value" "CHECK") empty
15:05:50 <shapr> that doesn't work
15:06:08 * stepcut is having a devil of a time trying to use LAST_INSERT_ID() in haskelldb
15:06:09 <Igloo> Don't you want attr "CHECKED" "CHECKED"?
15:06:16 <shapr> the WASH-CGI/Examples/Login.hs is setting it somehow
15:06:18 <Cale> I think you just need to set the "CHECKED" attribute to anything
15:06:27 <Igloo> Assuming attr does what I think and my memory of HTML is correct
15:07:37 <shapr> yay! this works --> haskell <- checkboxInputField (attr "CHECKED" "CHECKED")
15:08:57 <Igloo> Woo!
15:09:01 <Igloo> real    20345m29.187s
15:09:01 <Igloo> user    6132m10.570s
15:09:01 <Igloo> sys     390m24.060s
15:09:16 <shapr> wow, what was it doing?
15:09:26 <Igloo> dpkg-buildpackage ghc6 on m68k
15:09:42 <shapr> I have to ask, is that 2034 hours?
15:09:42 <Igloo> Now I just need to fix ia64. Mutter mutter.
15:09:50 <shapr> er, 20345 hours?
15:09:53 <Igloo> No, it's 20345 minutes
15:09:55 <shapr> whew
15:09:57 <Igloo> Hence the m  :-)
15:10:04 <Igloo> A mere 14 days
15:10:27 <Cale> Haha, good luck gentoo users. :)
15:10:50 <Cale> That's quite a build time.
15:10:59 <mattam> indeed
15:11:13 <shapr> I'll never try to build ghc6 on a Mac SE/30
15:11:49 <mattam> ghc still consumes less time than openoffice or the whole qt+kde
15:11:50 * Igloo should mail more people with the ia64 problem as I have little idea what to do to even debug it currently
15:12:23 <shapr> I've heard Pseudonym has some ia64 cluefulness
15:12:28 <monotonom> I always thought Windows was the only OS pushing disgusting hardware upgrades.  Now I think Gentoo out-does it.
15:13:40 <mattam> no, it encourages having more computers at home.
15:14:54 <shapr> is there a standard string whitespace stripper function?
15:14:57 <mattam> thinking of that, is ghc able to cross-compile programs ?
15:20:28 <monotonom> owning more computers  \subset  disgusting hardware upgrades
15:21:59 <shapr> see, I've gone in the opposite direction
15:22:18 <shapr> I try to shrink the number of computers I own while also increasing the number of CPUs I can use
15:22:38 <shapr> I'm still saving for a Cray...
15:22:57 <shapr> sleeptime for me
15:23:10 <blackdog> anyone tried distributing builds with ghc? I saw the distcc thing a week ago and it looks interesting...
15:23:32 <blackdog> night shapr. Try not to get abducted by bloodthirsty elves.
15:27:47 <mattam> blackdog: that's what i'm thinking of :) distcc is already integrated in portage.
15:54:38 <atom-z> what does a "unification would give infinite type" error mean?
15:55:06 <ski> it means it can't create an infinity type
15:55:31 <atom-z> it gives it at compile time when i have num/e
15:55:37 <ski> this could e.g. appear if a recursive call has worng number of arguments, i think
15:56:17 <ski> which two types doesn't it want to unify ?
15:56:30 <atom-z> *** Expression     : num / e
15:56:30 <atom-z> *** Term           : num
15:56:30 <atom-z> *** Type           : (b -> b -> b) -> a -> c
15:56:30 <atom-z> *** Does not match : a
15:56:30 <atom-z> *** Because        : unification would give infinite type
15:56:42 <ski> hmm
15:57:56 <atom-z>  on the line there is where num = x*(p-1)*(q-1) + 1
15:57:59 <ski> so num is a function
15:58:24 <atom-z> by the haskell definition i believe so
15:58:44 <ski> hmm, how does the function this is inside look like ?
15:58:45 <monotonom> I can't believe it.
15:59:14 <atom-z> findD p q e x = if (num mod e == 0) then num/e else findD p q e (x+1) where num = x*(p-1)*(q-1) + 1
15:59:23 <ski> oh
15:59:29 <monotonom> Haha
15:59:39 <monotonom> num `mod` e
15:59:39 <ski> replace "num mod e" with "num `mod` e"
16:00:52 <atom-z> drat, i already made that mistake once this evening
16:01:03 <atom-z> thanks
16:01:37 <ski> also, the parens around "num mod e == 0" is not needed
16:03:12 <chris__> bye
16:03:18 <ski> bye
16:05:38 <atom-z> ok
16:05:40 <atom-z> thanks
16:06:48 <ski> mm
16:20:23 <atom-z> what does "unresolved overloading" mean?
16:20:51 <ski> it doesn't know which overloaded operation you want
16:21:03 <atom-z> but i only have one function
16:21:14 <ski> when do you ger the error ?
16:21:22 <atom-z> when i try to call that function
16:21:22 <ski> when loading into hugs/ghci ?
16:21:26 <atom-z> no
16:21:28 <ski> s/ger/get/
16:21:33 <ski> ok
16:21:34 <atom-z> when i actually run it in hugs
16:21:36 <ski> thought so :)
16:21:49 <ski> so, what's your query, then ?
16:22:02 <ski> (and what type do the function have ?)
16:22:06 <atom-z> rsafindD 5 17 3 1
16:22:31 <atom-z> i havent explicitly given the function a type
16:22:35 <ski> try ":t rsafindD"
16:23:04 <atom-z> rsafindD 5 17 3 1 :: (Fractional a, Integral a) => a
16:23:24 <ski> hmm
16:23:32 <ski> try just ":t rsafindD", as well
16:23:47 <atom-z> rsafindD :: (Fractional a, Integral a) => a -> a -> a -> a -> a
16:24:14 <ski> i think you should have a few coersions in the function
16:24:34 * ski thinks there's no type that's both Integral and Fractional :)
16:24:45 <ski> how does it look like ?
16:24:46 <atom-z> what does that mean?
16:25:07 <ski> well, Integral types are like Int, Integral
16:25:11 <atom-z> rsafindD p q e n = if num `mod` e == 0 then
16:25:11 <atom-z> 		        num/e
16:25:11 <atom-z> 		    else
16:25:11 <atom-z> 			rsafindD p q e (n+1) where num = n*(p-1)*(q-1) + 1
16:25:20 <ski> Fractional are like Rational,Double
16:25:26 <atom-z> i think its the num/e bit then
16:25:39 <atom-z> that should always yield an integer though
16:25:48 <ski> use "num `div` e" instead of "num/e" i think
16:25:58 <atom-z> ok
16:26:05 <ski> div is (truncating) integer division
16:26:17 <ski> is for exact division (well, more or less :)
16:26:23 <ski> doh!
16:26:29 <atom-z> cheers
16:26:31 <ski>  / is for exact division (well, more or less :)
16:27:06 <ski> also, perhaps you'd like to use divMod
16:27:10 <ski> @type divMod
16:27:10 <lambdabot> divMod :: Integral a => a -> a -> (a,a)
16:27:40 <ski> it gives both div and mod, at the same time (presumably more efficient than recomputing div after computing mod)
16:27:48 <atom-z> right
16:27:57 <ski> so you could do like
16:28:42 <atom-z> its probably more efficient how i'm doing it, because it will only ever call div num e once whereas the test case (for the wrong cases) will be called many many times
16:28:53 <ski> where (q,m) = num `divMod` e
16:29:49 <ski> and then use a guard like "| m == 0    = e"  "| otherwise = ..."
16:30:08 <ski> hmm perhaps
16:30:55 <ski> depends on if the hardware division always gives you modulus also, or not, i'd guess
16:31:15 <ski> well, anyways, divMod can be handy at times ..
16:31:41 <atom-z> right
16:31:51 <atom-z> ok, thanks for the help this evening
16:32:05 <ski> sure
16:32:09 <atom-z> but i'm gonna go and get some sleep now as its 1:30 over here :)
16:32:11 <atom-z> cya
16:32:14 <ski> ok
16:32:18 <ski> good dreaming
16:49:48 <wagle> anyone know any good keywords for web-searching for theoretically oriented work on converting arbitrary/noisy/adversarial inputs into type-safe data structure (or programs)?
16:50:25 <wagle> only word i have so far is "marhsalling", but that seems not exactly what i'm looking for
16:50:41 <esap> how about "run-time check" :-)
16:51:04 <ski> hello LittleDa1
16:52:00 <LittleDa1> Are monads considered superior to imperative I/O or just a way to circumvent referential transparency?
16:52:18 <esap> neither
16:52:31 <LittleDa1> what are they then?
16:52:44 <LittleDa1> they're not better or worse than imperative I/O?
16:52:52 <esap> Monads are a way to make imperative I/O work together with the type system.
16:53:15 <wagle> .. one use of many of monads
16:53:41 <Jerub> I use monads for parsing. :)
16:54:14 <wagle> there are many monads..  one class of them are state monads, an instance of which are the io monads
16:54:18 <ski> esap : not just with the type system. with referential transparency, as well
16:54:25 <ski> right
16:55:38 <wagle> there is alway unsafeatanyspeedio ..  is that a monad?  (i've only heard the boogie man stories, but never actually seen one)
16:56:08 <LittleDa1> I guess what I mean is, would monads be useful at all in a referentially opaque language?
16:56:17 <ski> LittleDa1 : the IO monad are considered better that the usual way of doing I/O in imperative languages in that it doesn't pollute the rest of the language with side-effects
16:56:32 <Riastradh> It ends up polluting the language instead with the IO monad.
16:56:40 <ski> wagle : do you mean unsafePerformIO ??
16:56:50 <ski> Riastradh : heh
16:57:12 <wagle> ski: sure, if you dont like my joke
16:57:19 <esap> riastradh: Well it's not really polluting, it's more _separating_ the I/O language with the rest of the language :-)
16:57:23 <ski> oh
16:57:44 <esap> riastradh: s/with/from/
16:57:50 * ski didn't get 'twas a joke
16:57:53 * ski blushes
16:57:57 <Riastradh> esap, ?
16:57:59 <LittleDa1> esap: But if you need something as simple as random numbers, you have to seperate that too
16:58:51 <wagle> i think people use monads in semi-imperative languages like ml and scheme
16:59:07 <LittleDa1> wagle: No, they use side effects
16:59:16 <ski> LittleDa1 : well, i think e.g. parsing monads could be useful in such a language, yes
16:59:35 <wagle> LittleDa1: more people use side-effects
16:59:36 <ski> LittleDa1 : (as a structuring mechanism, i.e.)
16:59:44 <Riastradh> wagle, monads are used for different things than they are in Haskell.
16:59:50 <esap> riastradh: I mean, operations are divided into things that can be done inside the monad, and things that can't.
17:00:17 <Riastradh> Oh, sorry, I missed in what you were substituting from for with.
17:00:28 <ski> LittleDa1 : i think most languages doesn't have a parsing monad reflected into it
17:00:40 <wagle> Riastradh: ?
17:00:40 <LittleDa1> ski: What are parsing monads and why are they better than other methods of parsing?
17:00:48 <Riastradh> wagle: 42
17:01:03 <wagle> Riastradh: base 13?
17:01:11 <Riastradh> wagle: 5
17:01:31 <LittleDa1> Riastradh: So that's 22 base 10?
17:01:37 <ski> LittleDa1 : well, they are a nice way to write recursive descent parsers  (perhaps one could also make bottom-up versions, dunno)
17:01:40 <Riastradh> LittleDa1: 23
17:01:56 <wagle> Riastradh: 6 by 9 in base 13...
17:02:01 <Riastradh> wagle: -1
17:02:28 <wagle> what monad is Riastradh?
17:02:39 <Riastradh> wagle: e
17:02:49 <LittleDa1> Riastradh: You mean 4*5^2+2*5^1==23?
17:03:07 <Riastradh> LittleDa1: pi
17:03:22 <LittleDa1> oops, I mean 4*5^1+2*5^0==23?
17:04:04 <Jerub> LittleDa1: want a monadic parser example?
17:04:10 <LittleDa1> yes
17:05:09 <Jerub> http://thorne.id.au/users/stephen/haskell/
17:06:20 <Jerub> Main.hs and ParakeetAS.hs are my own code, ParakeetToken.hs is my hack of some of the parsec source so it will bend to my will.
17:07:27 <LittleDa1> What does it do? There are no comments
17:07:48 <LittleDa1> And why not just use Yacc (or Happy)
17:09:33 <Jerub> oh sorry, heh. no comments.
17:09:37 <Jerub> it parses a small grammar.
17:10:05 <Jerub> LittleDa1: because its a recursive decent infinite lookahead parser written with only haskell.
17:10:10 <Jerub> and its quite agile.
17:11:12 <Jerub> look to the bottom, see 'echoStatement', 'assignStatement' and 'statement' for some examples of how the basics work.
17:14:03 <LittleDa1> What does <|> do?
17:14:23 <Jerub> LittleDa1: its the choice operator, same as | in EBNF
17:14:24 <ski> it corresponds to | in a BNF
17:15:33 <LittleDa1> That's cool, but why don't you want to use a parser generator?
17:15:53 <LittleDa1> it seems like that parser is just an interesting excercise
17:18:06 <Jerub> LittleDa1: I had to stop work because of carpal tunnel problems, I'm not coding at home for at least the next month.
17:19:10 <LittleDa1> so how are you typing right now?
17:19:22 <Jerub> I'm at work, I'm limiting typing to work hours.
17:19:35 <Jerub> speaking of which, workrave is telling me to take a rest break.
17:20:28 <wagle> <|> is a piece of a parser generator
17:20:38 <wagle> the <|> operator is a piece of a parser generator
17:21:10 <LittleDa1> What? You mean it's not an infix operator?
17:21:40 <wagle> yes, its an infix operator
17:22:14 <LittleDa1> so what does that have to do with parser generators?
17:22:29 <wagle> haskell is a lazy language
17:22:47 <wagle> so the arguments arent evaluated before handing them to the operator
17:23:04 <LittleDa1> so what does that have to do with parser generators?
17:23:13 <wagle> so the operator can do things about probing the arguments for there values
17:23:53 <LittleDa1> Parser generators, I thought, were where you had a new language sort of that mixed in the old language and compiled into it.
17:24:03 <LittleDa1> and it had nothing to do with lazy evaluation
17:24:09 <wagle> so the <|> operator takes two values that are parsers and parallel joins them into a bigger parser
17:24:25 <LittleDa1> I understand that
17:24:31 <LittleDa1> it's just not a parser generator
17:24:35 <LittleDa1> because it's within the language
17:25:13 <wagle> it generates a monad value that is a parser
17:25:24 <wagle> when the monad is "run"
17:25:48 <LittleDa1> then it generates a monad, it doesn't translate the parser language into a target language to be compiled
17:25:51 <LittleDa1> It's different
17:27:47 <Jerub> yes, parsec (the monadic parser library used there) isn't a parser generator, and that is recursive decent parsing, not using a parser generator.
17:28:00 <wagle> i can transparently replace the monad with one that prints a parser in your desired programming language
17:28:13 <Jerub> the thing is, parser generators were invented to make it possible to cleanly express parsers, without having to implement the nitty gritty.
17:28:43 <LittleDa1> well, that doesn't really express the nitty-gr
17:28:45 <Jerub> wagle: ooh, now that is an interesting idea.
17:28:46 <LittleDa1> oops
17:28:52 <LittleDa1> itty, but it isn't as clean
17:29:06 <Jerub> LittleDa1: thats lexer and parser in one there too. ;
17:29:33 <Jerub> and the shit up the top is mostly concerned with code generation and setting up the variables of the parsec library.
17:29:53 <Jerub> it actually generates enough parrot code to do assignments, if statements and simple expressions.
17:31:07 <LittleDa1> it generates parrot code?
17:31:15 <LittleDa1> from what>
17:32:09 <Jerub> hold on, I'll put up an example.
17:40:27 <LittleDa1> is it up?
17:40:49 <Jerub> crap.
17:40:52 <Jerub> sorry, I've got a bug.
17:41:07 <LittleDa1> put it up anyway to show me what it should have been
17:41:22 <LittleDa1> or just post a small snippet here
17:43:52 <Jerub> http://thorne.id.au/users/stephen/haskell/example.txt
17:44:13 <Jerub> I was hoping to show what parrot would do when it executed, but that doesn't work at the moment ;)
17:44:39 <Jerub> I think I was half-way through working on the equivilence operator when I stopped work last.
17:52:41 <LittleDa1> So echo isn't a function, it's built into the syntax?
17:53:09 <Jerub> yes.
17:55:01 <Jerub> ugly, I know, and I'm going to remove it eventually I think
17:55:14 <Jerub> at the moment I'm just making a little language that looks a bit like php.
17:56:28 <LittleDa1> why?
17:57:34 <LittleDa1> To make a language with mutable variables, do you need to emulate a mutable datastructure?
21:13:38 * stepcut wonders if there is a good automated way of validating form data in php
21:20:43 <Jerub> stepcut: no! I don't believe there is.
21:21:45 <Jerub> stepcut: however, my favourite approach is to have an array of objects which each validate one or more form fields.
21:43:29 * stepcut discovers pear install <package>
21:43:52 * stepcut is clearly new to this php thing
21:48:23 <Jerub> stepcut: I've never used pear, and I've been using php for years ;)
21:59:33 <stepcut> there is this FormProcessor class that (mostly) does what I want, but it requires some PEAR thing, so ...
22:10:35 <tmoertel> howdy, all!
22:17:13 <Jerub> howdy.
22:23:19 <tmoertel> anybody know what happend to POpen from the old Posix library?
22:36:43 <blackdog> tmoertel: it got moved. </unhelpful>
22:57:20 * tmoertel writes a POpen module . . .
23:20:42 <shapr> hiya tmoertel 
23:20:50 <tmoertel> hi, shapr!
23:21:10 <tmoertel> do you know whatever happened to POpen from the old posix package?
23:21:26 <shapr> er, yes
23:21:39 <shapr> but I'll need coffee to remember the new location
23:22:08 <tmoertel> i could use coffee, too, but i think sleep may be the better remedy  ;-)
23:22:29 <shapr> http://shapr.homelinux.net/cgi-bin/wash/SearchML
23:22:52 * tmoertel searches
23:22:56 <shapr> makes me wish my date parsing didn't suck so much
23:23:03 <shapr> and it's case sensitive at the moment
23:23:21 <shapr> curryspondence is definitely a work in progress
23:24:08 <tmoertel> but it just saved me a ton of googling (or writing my open popen, which I already started), so it's a *good* work in progress
23:24:12 <shapr> :-)
23:25:16 <shapr> some short searching there implies that there may be -package popen
23:26:14 <tmoertel> locate popen | grep ghc  yields only POpen's docs
23:28:17 <shapr> it looks like juhp wrote POpen.hs
23:29:35 * tmoertel downloads to compare w/ mine
23:31:29 <shapr> this says that popen is now in -package posix - http://www.mail-archive.com/glasgow-haskell-users@haskell.org/msg05968.html
23:31:56 <tmoertel> that's where it was, until ghc 6.x
23:32:31 <tmoertel> well, that email looks recent
23:34:10 <tmoertel> rpm -ql ghc | fgrep /posix/ | xargs grep -l popen
23:34:20 <tmoertel> yields /usr/lib/ghc-6.2/hslibs-imports/posix/POpen.hi
23:34:37 <shapr> yup
23:34:54 <shapr> so it seems it still is in -package posix
23:35:37 <tmoertel> funny, it eluded Haddock, because it's not in the docs (at least on haskell.org/ghc)
23:36:06 <shapr> aha, it's in the '(Old) Haskell Librarie' section
23:36:09 <shapr> under the posix package
23:37:53 * rt yawns.
23:39:08 <shapr> hiya rt, how's the biz?
23:39:56 <tmoertel> shapr: thanks for your help!
23:40:01 * tmoertel must now go to sleep
23:40:16 <shapr> :-)
23:40:22 <shapr> g'night tmoertel 
23:40:28 <tmoertel> 'night, all
