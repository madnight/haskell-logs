03:42:58 <liw> is Isaac Jones here now or ever?
04:04:26 <ibid> does ghc create static executables on hppa and friends?
04:05:51 <liw> ibid, hi
04:07:14 <liw> I don't know Haskell pretty much at all, would anyone want to help me with Isaac Jones's implementation of my benchmark: http://www.haskell.org/hawiki/IsaacJones
04:07:21 <liw> it runs out of stack space on large inputs
04:07:28 <ibid> liw: hi :)
04:08:05 <ibid> liw: i got a weird ftbfs bug on my haskell package :)
04:09:13 <liw> ibid, anything I can help with? not that I know anything about Haskell or weird bugs, but my brain is getting less mushy as I win over the flu
04:09:30 <ibid> heh
04:09:32 <ibid> 14:04  <ibid> does ghc create static executables on hppa and friends?
04:09:34 <ibid> :)
04:09:51 <ibid> strange
04:09:54 <liw> hppa being Hewlett-Packard's PA architecture?
04:09:56 <ibid> it apparently does
04:09:57 <ibid> yes
04:10:04 <ibid> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=241591
04:11:23 <liw> hm, indeed, weird
04:11:36 <ibid> ajk@paer:~/bnfc-2.1$ ldd debian/tmp/bnfc/usr/bin/bnfc 
04:11:36 <ibid>         not a dynamic executable
04:11:42 <ibid> ajk@paer:~/bnfc-2.1$ file debian/tmp/bnfc/usr/bin/bnfc 
04:11:42 <ibid> debian/tmp/bnfc/usr/bin/bnfc: ELF 32-bit MSB executable, PA-RISC version 1 (GNU/Linux), for GNU/Linux 2.4.17, statically linked, stripped
04:11:52 <ibid> the next question is a packaging question then :)
04:12:05 <ibid> how do i get rid of that ftbfs bug
04:12:47 <liw> implement dynamic linking on hppa? :)
04:13:22 <liw> you could do an ugly hack and run file on the executable and only run dpkg-shlibdeps if it is dynamically linked, I guess
04:13:29 <ibid> hmm
04:13:58 <ibid> perhaps i should ask this on #d-d
04:49:43 <shapr> liw: Isaac Jones is often here as SyntaxNinja
04:50:18 <shapr> liw: so, is Lars Wirzenius ever online?
04:50:42 <ibid> uh?
04:50:51 <ibid> liw *is* Lars Wirzenius :)
04:50:53 <liw> shapr, it happens :)
04:51:11 <shapr> I know :-)
04:57:22 <musasabi> Is a function which is waiting forever for IO said to terminate? Is a haskell implementation allowed to evaluate it eagerly or must it be evaluated at the last possible time?
05:11:32 <_Codex> musasabi: io monad's bind is strictly evaluating / it evaluates immediately.
05:24:58 <liiwi> hiya twin
08:31:27 <shapr> yeehaa
08:43:09 <shapr> there's gotta be a better hacker logo than the glider
08:43:24 <shapr> any suggestions?
08:44:04 <liw> an axe and some wood?
08:44:24 <cm_> hiho
14:18:59 <mycroftxxx> what does \s mean?
14:19:10 <stepcut> in what context?
14:20:09 <Riastradh> 42
14:20:10 <mycroftxxx> thenST :: StateT s a -> (a -> StateT s b) -> StateT s b 
14:20:10 <mycroftxxx> st `thenST` f = \s -> let (v,s') = st s 
14:20:11 <mycroftxxx>                         in f v s'
14:20:38 <mycroftxxx> Riastradh: everything means 42... the real question is, what does 42 mean?
14:20:45 <mycroftxxx> :P
14:20:54 <stepcut> its an anonymous function
14:20:56 <Riastradh> It's [[\<var> -> <expression>]] that has the meaning, not just [[\s]].
14:21:01 <reltuk> it's lambda notation
14:21:03 <reltuk> it ameks a function
14:21:06 <mycroftxxx> ahh
14:21:08 <mycroftxxx> k
14:21:25 <stepcut> (\x -> x + 1) <<-- a lambda function that adds one to a number
14:21:54 <mycroftxxx> I see... to `thenST` returns the function which returns st s?
14:22:36 <stepcut> close..
14:23:45 <stepcut> the lambda function extends all the way through f v s' in that case
14:23:49 <mycroftxxx> can you parenthesize that for me so I can see the order of operations?
14:24:16 <stepcut> helperfun s = let (v,s') = st s in f v s'
14:24:28 <stepcut> st `thenST` f = helperfun
14:24:31 <stepcut> or something like that
14:25:21 <mycroftxxx> and let is like (let ...) in scheme? defining locals?
14:25:27 <stepcut> yes
14:25:33 <mycroftxxx> and s' means?
14:25:44 <mycroftxxx> derivative? :P
14:25:45 <stepcut> nothing special
14:26:00 <mycroftxxx> ok, identifiers can have ' in them?
14:26:01 <stepcut> its a notational convention, but has no special meaning in haskell
14:26:56 <ibid> mycroftxxx: yes
14:27:10 <stepcut> so, in that case s' is a state deriving from the original state s. But it could have been called new_state or something
14:27:19 <mycroftxxx> ok
14:27:40 <mycroftxxx> and (v,s') is a tuple? or just the set of names that the let statement defines?
14:27:53 <ibid> tuple
14:28:07 <stepcut> well, its kinda both...
14:28:21 <mycroftxxx> ohh, that's right... functions can expand notation like that...
14:29:00 <mycroftxxx> (v,s') by it's self is a tuple, but let accepts anything in the tuple form as a list of names to define... something like that?
14:29:01 <stepcut> its pattern matching on a tuple and giving each componant of the tuple a name
14:29:02 <ibid> it's a pattern, really
14:29:12 <ibid> remember patterns from yesterday? ;)
14:29:22 <mycroftxxx> yep... that's what I'm talking about :)
14:30:11 <stepcut> that could be rewritten: let t = st s in f (fst t) (snd t)
14:30:16 <mycroftxxx> ok, so let defines two things, v and s', and binds them to...?
14:30:36 <stepcut> but its annoying to have to use fst and snd to get the values out of the tuple
14:30:36 <mycroftxxx> fst, snd?
14:30:42 <mycroftxxx> ohh
14:30:46 <mycroftxxx> first, second...
14:31:03 <mycroftxxx> kinda like car cdr?
14:31:06 <ibid> mycroftxxx: to the two components of the tuple st s evaluates to
14:31:23 <ibid> mycroftxxx: almost exactly like car and cdr :)
14:32:12 <stepcut> mycroftxxx: yes, but fst and snd only work on two element tuples
14:32:31 <ibid> stepcut: like in scheme, btw :)
14:32:41 <Riastradh> CAR & CDR operate only on pairs, stepcut, so that 'but' is rather irrelevant.
14:32:42 <mycroftxxx> stepcut: heh, of course
14:32:53 <ibid> the only real difference is that haskell lists are not made of pairs
14:33:01 <stepcut> ah, i thought cdr worked on lists...
14:33:19 <stepcut> ah
14:33:24 <Riastradh> stepcut, no, on pairs.
14:33:24 <mycroftxxx> Riastradh: well.. some implementations provide cadr cdar caar cddr caaar  caard, etc, etc...
14:33:38 <ibid> stepcut: it does, because lisp lists are pairs, where the second component contains the "rest" link
14:33:41 <mycroftxxx> well.. lists are linked pairs
14:33:48 <ibid> mycroftxxx: not in haskell
14:33:50 * stepcut goes to a meeting
14:33:50 <Riastradh> No, Lisp lists are _not_ necessarily pairs.
14:34:00 <mycroftxxx> ibid: right, I was talking about lisp/scheme
14:34:13 <Riastradh> A proper list is either a pair whose CDR is a proper list, _or_ nil.
14:34:22 <ibid> Riastradh: true
14:34:24 <mycroftxxx> Riastradh: smart-ass :P
14:34:26 <Riastradh> A dotted list is either a pair whose CDR is a dotted list, _or_ a non-pair, non-nil value.
14:36:17 <mycroftxxx> ok, so... "let (v,s') ..." makes a v and an s' whose values are the result of the function "st" when applied to "s"?
14:36:37 <mycroftxxx> gaa... dog wants out, brb
14:42:05 <mycroftxxx> back
14:43:08 <ibid> mycroftxxx: the function st when applied to s evaluates to a pair; v and s' are then bound to the two components of that pair
14:45:48 <mycroftxxx> ok... and helperfun has a signature "helperfun :: s -> (v, s')" ?
14:48:27 <ibid> a -> (b, c) is the most general type; it may be that a more specific type is the actual most general type but i cannot tell from that definition
14:48:49 <ibid> st `thenST` f = \s -> let (v,s') = st s in f v s' is more correctly translated as...
14:49:21 <ibid> helper st f s = let (v, s') =st s in f v s'
14:49:31 <ibid> st `thenST` f = helper st f
14:49:42 <ibid> the type of helper is then...
14:50:54 <ibid> (c -> (d, e)) -> (d -> e -> f) -> c -> f
14:50:57 <ibid> unless i am mistaken
14:51:06 <mycroftxxx> ibid: I'm readin http://www.abercrombiegroup.co.uk/~noel/research/monads.html btw
14:51:15 <mycroftxxx> to give you some contex
14:51:53 <ibid> okay
14:51:56 <ibid> so...
14:52:09 <ibid> we had...
14:52:11 <ibid> thenST :: StateT s a -> (a -> StateT s b) -> StateT s b
14:52:22 <ibid> st `thenST` f = \s -> let (v,s') = st s in f v s'
14:52:31 <ibid> that can be rewritten as
14:52:42 <ibid> thenST st f s = let (v, s') = st s in f v s'
14:52:48 <ibid> with the type signature
14:52:53 <ibid> expanding StateT...
14:53:37 <ibid> thenST :: (s -> (a, s)) -> (a -> (s -> (b, s)) -> (s -> (b, s))
14:55:35 <mycroftxxx> correct me if I'm wrong... (x -> y) means "a function that accepts x and returns y", so (x -> (y -> z)) mean "a function that accepts x and returns (a function that accepts y and returns z)" ?
14:56:11 <mycroftxxx> or, is function the wrong word here?
14:57:39 <ibid> it's correct
14:57:45 <ibid> fort both questions :
14:57:46 <ibid> :)
14:57:49 <mycroftxxx> ok :)
14:57:50 <ibid> for
14:58:10 * mycroftxxx tries translating this into python
14:58:19 <ibid> of course, we generally write x -> (y -> z) as x -> y -> z as the arrow is right-associative
14:58:27 <mycroftxxx> of course
14:58:34 <mycroftxxx> I'm just () for clarity
15:00:54 <mycroftxxx> so, one could argue that -> is a binary infix function that returns a subtype of "type function" with attributes/data/state/whatever describing the argument-to-result relationships :)
15:01:13 <Riastradh> No, there's no subtyping involved.
15:01:16 <mycroftxxx> (trying to make this oop-ish so I can understand it)
15:01:37 <mycroftxxx> erm... an "instance" of the function type with said data/whatever
15:02:51 <Riastradh> Don't try to think of it in an 'OOP'-ish sense, because a) 'OOP' unqualified is meaningless, and b) no style of 'OOP' that I know of has anything to do with Haskell's type system.
15:04:50 <mycroftxxx> Riastradh: well, rather, I'm merely trying to "objectify" it so that I can visualize it
15:05:07 <ibid> objectifying will just make it more confusing
15:07:30 <Riastradh> 'Objectifying' it is exactly what I'm advising against for exactly the reasons I just stated.
15:08:08 <ibid> i personally find calculation a much more clarifying analogy
15:10:19 <mycroftxxx> ok...
15:11:08 <mycroftxxx> is there a REPL for haskell that I can play around with... that always helps
15:11:16 <ibid> ghci
15:11:18 <ibid> hugs
15:11:20 <ibid> :)
15:11:47 <mycroftxxx> heh, "hugs" is a REPL, or are you showing admiration of the former? :P
15:11:59 <ibid> the former :)
15:12:01 <mycroftxxx> k :)
15:12:05 <ibid> it is a haskell interpreter
15:12:15 * mycroftxxx checks apt
15:19:44 <mycroftxxx> I see a package "ghc6"
15:19:50 <ibid> yes
15:19:56 <ibid> that's ghc version 6
15:19:59 <ibid> ghci is part of that
15:20:25 <mycroftxxx> k
15:20:42 <mycroftxxx> so, which do you recomend, ghci or hugs?
15:20:59 <ibid> ghci
15:33:21 <mycroftxxx> what's an RTS?
15:36:11 <ibid> runtime system
15:36:17 <mycroftxxx> ahh
15:36:34 <mycroftxxx> I kept thinking "real-time strategy" as in WarcraftIII :P
15:47:28 <mycroftxxx> ok... so "type StateT s a = s -> (a,s)" is like a function that operates on types instead of values?
15:47:57 <atom-z> anyone know of an algorithm to solve the rubiks cube?
15:48:37 <Riastradh> Bozosort comes to mind, atom-z.
15:48:49 <Smerdyakov> atom-z, do you really mean an efficient algorithm?
15:49:01 <ibid> mycroftxxx: no
15:49:10 <mycroftxxx> atom-z: I think the rubix website has cheater hints that work something like "to change the possitioning of two side peices follow this 8 step process"
15:49:29 <mycroftxxx> atom-z: i.e. the cube-face:
15:49:31 <mycroftxxx> 1 2 3
15:49:32 <mycroftxxx> 4 5 6
15:49:34 <mycroftxxx> 7 8 9
15:49:50 <mycroftxxx> to switch 2 and 4 use this process...
15:49:50 <ibid> mycroftxxx: StateT is a type constructor; StateT when applied to two types is a type identical to the type on the right-hand size where the appropriate substitutions have been made
15:50:29 <ibid> mycroftxxx: you could say that StateT is a functionm that operates on types, but it is not usually thought of in that manner
15:51:18 <mycroftxxx> and the process will leave all other _side_ peices in thier original place, but will mutitate the arangements of the corners... and then theres like a 12 step process to swap the possitions of 3 corner pieces (of the form 1 3 7 -> 3 7 1 in the cube above) without mutating any other pieces...
15:52:39 <mycroftxxx> atom-z: so from that you can write a simple algo that will first arange all the side pieces of each face, and then work on the corners
15:53:37 <mycroftxxx> ibid you mean right-hand side of the =, as in "s -> (a,s)"
15:53:44 <ibid> mycroftxxx: yes
15:54:28 <ibid> StateT s a is essentially just an alias for s -> (a,s) after that declaration
15:54:42 <ibid> StateT Int String is an alias for Int -> (String, Int)
15:54:43 <ibid> etc
15:55:12 <mycroftxxx> so "StateT type1 type2" results in a type that looks like (or "isa") type1 but is really a tuple (type1,type2) 
15:55:26 <mycroftxxx> ohh
15:55:47 <ibid> no, StateT type1 type2 is the type type1 -> (type2, type1)
15:56:32 <mycroftxxx> so "f :: String -> StateT Int String" is like "f :: String -> (String -> (Int,String))"?
15:56:40 <ibid> yes
15:56:45 <mycroftxxx> k
15:56:49 <ibid> not "like" but it is the same type
15:56:52 <mycroftxxx> a type macro :P
15:56:55 <ibid> no
15:56:58 <ibid> a type alias
15:57:02 <mycroftxxx> ok
15:57:12 <ibid> like typedef in c
15:57:19 <mycroftxxx> ok
15:57:41 <atom-z> mycroftxxx: ah ok, but what kind of timescale are we looking at for it to find a solution?
15:57:42 <ibid> note that this alias behaviour is unique to the "type" keyword; the other type declaration keywords behave differently
15:58:10 <atom-z> there are on the order of 10^19 permutations for a rubiks cube :|
15:59:20 <Etaoin> atom-z: I have an algorithm memorized :)
15:59:46 <mycroftxxx> atom-z: well... hypothetically a piece A belonging in position B would have to be "rotated" (2 -> 4 style) all the way around to B...
15:59:51 <Etaoin> atom-z: I don't imagine it would be much fun to program
16:00:10 <ibid> it's getting late
16:00:16 <ibid> i should go to bed soon
16:00:20 <mycroftxxx> ohh, and there is another one I think to rotate a side piece, i.e. swap the colors on the two exposed faces of the piece...
16:00:26 <atom-z> Etaoin: i'm not intending to program it, i just want to know how i solve the rubiks cube
16:00:28 <mycroftxxx> alight, night ibid
16:00:31 <ibid> :)
16:00:32 <mycroftxxx> thanks again :)
16:00:42 <Etaoin> atom-z: ah
16:01:04 <Etaoin> atom-z: well that's different than programming it
16:01:19 <Etaoin> I bet a google search would tell you
16:01:26 <mycroftxxx> atom-z: ohh... by hand... using those patterns, I solved it in about an hour... but that was while reading the patters off the page while doing it, and backtracking a few times, etc...
16:01:32 <Lurc> sup
16:01:37 <mycroftxxx> hey Lurc
16:01:52 <atom-z> no, i mean i want to know how i would program it, but dont intend to (have no use for it)
16:02:12 <Etaoin> well here's something I found a while ago
16:02:13 <Etaoin> http://home.t-online.de/home/kociemba/cube.htm
16:02:20 <Smerdyakov> atom-z, a guy I worked with wrote a graphical RC solver that used OpenGL. :)
16:02:27 <mycroftxxx> atom-z: right, a simple memorizable process to solve it... well those patterns were the best description I've found...
16:02:58 <atom-z> i can remember trying to solve it awhile back (by hand). Becomes quite annoying once you know you're not getting anywhere :P
16:03:38 <atom-z> Smerdyakov: hehe neat
16:03:50 <mycroftxxx> I've heard people talking about methods like: a) solve one face (which is simple enough), then b) solve the rows of each neighboring face that touch the first face... etc...
16:05:55 <atom-z> its quite an intriguing problem really
16:06:22 <mycroftxxx> sooo.... all this monad stuff I see in haskell seems to exploit the way types work... are monads type specific, or type-centric in some way? i.e. can one write monadically in dynamic languages?
16:06:51 <mycroftxxx> atom-z: I also read a paper on rubix calculus...
16:07:59 <atom-z> rubiks calculus?
16:08:02 <mycroftxxx> it started off by saying that the derivative of a sequence of moves is (of course) the reversal of the sequence (and the directions of each move)...
16:08:33 <atom-z> i saw a rather interesting thinger which represented a rubiks cube in the form of a Hypercube (4 Spatial-Dimentional Cube)
16:11:22 <Etaoin> group theory can also be applied to rubiks cubes
16:11:36 <mycroftxxx> and so, one can theoretically swap any two pieces by performing a sequence that moved the two pieces "out of the way" (in a position that isn't used anywhere in the sequence expcept for the last move) and then perform the derivative of the sequence to retain the original state of the cube minus the two pieces being relocated...
16:12:00 <mycroftxxx> it was a bit more involved, but that was what I got out of it... :P
16:12:18 <mycroftxxx> Etaoin: of course, there's always combinatorics :P
16:13:20 <atom-z> mycroftxxx: where is this article?
16:19:46 <Etaoin> mycroftxxx: you mean brute-force solution?
16:37:33 <mycroftxxx> atom-z: the rubix calculus thing? I can't remember, I was just googling around for rubix stuff
16:38:07 <mycroftxxx> atom-z: the thing I was talking about earlier (with the 8 part sequence, etc) I'm pretty sure was on the rubix site
16:38:30 <mycroftxxx> Etaoin: yeah, something like that
16:49:54 * reltuk wonders why lisp/scheme is well suited to AI programming
16:53:19 <Etaoin> there's plenty of sites that tell you how to solve a rubik's cube
17:11:47 <jlouis> reltuk: you keep asking eh? Let me give you this answer: Scheme is not more suited to AI prog. than any other language is. There has been a use of Lisp in the earlier days because of its power in manipulation of lists
17:12:13 <reltuk> jlouis: heh
17:12:22 <reltuk> both places you at
17:12:24 <reltuk> are*
17:23:18 <sankeld> How would one force execution of an expression in the IO monad (inducing exeptions if any) without printing out something?
17:26:42 <stepcut> you can use seq, but it can be a bit tricky
17:26:52 <stepcut> especially if you are dealing with lazy lists
17:27:22 <sankeld> Hrm, say I have a function, consistant :: Filesystem -> True
17:27:33 <sankeld> -> Bool I mean
17:27:50 <stepcut> Bool or IO Bool?
17:27:56 <sankeld> Just Bool
17:27:59 <stepcut> ok
17:28:05 <sankeld> This function may or may not throw an exception.
17:28:22 <sankeld> So in my IO monad, I can do a print $ consistant f
17:28:31 <sankeld> And this will induce the exception.
17:28:53 <sankeld> But if I do something like return $ consistant f . . . It doesn't throw.
17:29:14 <stepcut> you can try something like:
17:29:23 <stepcut> (consistant f) $! return 
17:29:24 <stepcut> i think
17:30:28 <stepcut> hrm
17:30:48 <stepcut> return $! (consistant f)
17:30:52 <stepcut> might be it
17:31:12 * stepcut has to help make dinner, cya
17:31:37 <sankeld> Yep that does it.
18:36:06 <LittleDa1> how is syntactically significant but flexible indentation and whitespace like Haskell has implemented in BNF/Happy/Yacc?
20:44:29 <shrimpx> does anyone know of good literature that explains compiling functional languages to C?
20:45:07 <Riastradh> That's a rather broad topic, shrimpx.
20:47:44 <shrimpx> hmm, i guess i was thinking tail calls
21:00:32 <Riastradh> shrimpx, again, that's a rather broad topic, and there are multitudes of approaches.
21:19:18 <nuffer> I'm looking at some haskell tutorial, and it's discussing continuation passing style
21:19:26 <nuffer> they have the following code:
21:19:34 <nuffer> cfold' f z [] = z
21:19:58 <nuffer> cfold' f z (x : xs) = f x z (\y -> cfold f y xs)
21:20:25 <nuffer> for starters, why does cfold' have the apostrophe at the end of it's name?
21:26:04 <nuffer> not to mention the fact that hugs won't even accept that code
21:26:57 <nuffer> I mean, the haskell info all says that it's so easy to read and understand, but all the code I've seen written so far has been terribly obfuscated
21:28:20 <Smerdyakov> nuffer, it's arbitrary. Like naming a function cfold2 in C.
21:28:22 <Riastradh> It calls cfold instead of cfold' recursively.
21:28:53 <Smerdyakov> nuffer, i.e., ' is just another valid character to include in identifiers in Haskell.
21:29:06 <nuffer> riastradh: it's supposed to be cfold' in the lambda, my mistake
21:29:13 <nuffer> Smerdyakov, okay, that clears stuff up a little
21:29:24 <nuffer> I'm just still confused about how exactly cfold' works
21:31:23 <nuffer> also, when they define the helper function
21:31:40 <nuffer> cfold f z l = cfold' (\x t g -> f x (g t)) z l
21:31:52 <nuffer> isn't that only passing two values to a three variable lambda?
21:32:20 <nuffer> oh nevermind, it's passing the lambda as a value to cfold', I see
21:36:41 <skew> nuffer: there's also currying
21:37:19 <skew> like, you might define a function andPredicate p1 p2 = (\x -> p1 x && p2 x)
21:37:36 <skew> to take two predicates and return their conjunction as another predicate
21:37:46 <skew> you don't necessarily have to supply all the arguments all at once
21:38:06 <skew> if you know some know but only your client will know the rest
21:38:30 <skew> (or other reasons, just trying to motivate it for a self-proclaimed newbie)
21:39:05 <nuffer> I thought I understood this language... then I got to CPS, and now I'm very confused
22:03:32 <Jerub> continuation passing style?
22:04:15 <nuffer> yeah
