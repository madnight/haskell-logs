00:00:46 <bring> europeans: write you MEPs, ask them to vote against software patents
00:02:23 <cuelebre> MEPs?
00:04:46 <bring> Member of the European Parliament
00:06:58 <bring> with the elections coming up in june and all, maybe they'll listen
00:08:09 <andersca> and don't forget to go vote either
00:10:08 <bring> in Sweden, the elections are they day after EuroHaskell
00:10:24 <andersca> then we can go vote
00:10:25 <andersca> :)
03:09:26 <shapr> Cale: neat, what kind of compiler/language?
03:11:14 <Cale> shapr: I'm going to be working on a bit of the symbolic computation part. From what I understand, it's intended to be a language with semantics on the level of undergraduate mathematics with an implementation that uses the high-level specification in interesting ways to produce efficient code.
03:12:37 <Cale> http://www.cas.mcmaster.ca/~anand/ -- It's called coconut
03:13:22 <Cale> Dr. Anand is hoping to produce a paper by the end of the Summer.
03:16:52 <musasabi> skew: I know that is enough (amb?)
03:17:47 <Cale> It's somewhat inspired by FFTW, which uses Caml to generate codelets in C and perform transformations to heavily optimise them.
03:21:45 <shapr> Cale: have you guys considered making an nvidia Cg compiler or something similar?
03:23:22 <Cale> Is that for shaders?  I think that the intention is that the language be used for heavy engineering/numerical applications
03:23:56 <shapr> Cale: even if nvidia's Cg isn't workable right now, it looks to me like graphics cards are aimed down the route of high powered general purpose SIMD, so it may be something to keep in mind
03:24:07 <Cale> hmm...
03:24:16 <shapr> look at OpenGL 2.0 for example
03:24:40 <Cale> my friend is working on a metaprogramming language for shaders called Sh.
03:24:49 <Cale> http://libsh.sourceforge.net/
03:25:42 <shapr> there is an Nvidia Cg compiler that makes a transputer out of a 5200 or later card, it casts the input into a texture, and the ops as shadings, etc
03:26:00 <Cale> interesting
03:26:48 <shapr> I can track down the url if you want
03:27:36 <Cale> Sure, I'd like to read about that when I get some time.
03:27:36 <shapr> seems possibly related to coconut
03:27:43 <shapr> ok
03:27:48 <Cale> Yeah, I'll have to look into it :)
03:29:03 <shapr> eek, more ram errors
03:31:07 <shapr> Cale: http://brook.sourceforge.net/
03:32:17 <shapr> I'm very interested in natively using parallel and distributed processing from inside the langs I use
03:33:43 <shapr> coconut also seems relased to Manuel Chakravarty's Nepal project
03:34:43 <Marvin--> <neo_alex> my maths teacher who looks like gandalf set us a fucking hard half yearly exam
03:34:43 <Marvin--> <neo_alex> i was just expecting him to go "YOU SHALL NOT PASS!"
03:35:35 <shapr> haha!
03:36:13 <Marvin--> brings a whole new meaning to that scene in Moria, doesn't it? :P
03:36:20 <Cale> heh
03:36:36 <Cale> anyway, I ought to get to sleep. Exam tomorrow, er, today.
03:36:39 <Cale> :)
03:36:41 <shapr> Cale: it looks like coconut is using haskell for distributed and/or parallel computation, how does it work there? hMPI? GpH?
03:37:21 <Cale> I think we have someone porting/updating pH.
03:37:34 <shapr> that's interesting
03:37:59 <shapr> you still may get better/cheaper performance from the nvidia approach
03:38:28 <shapr> anyway it goes I'd love to hear more, seems a cool project to work on
03:39:09 <Cale> yeah. I'll let you know more about it as I get familiarised :)
03:39:56 <shapr> ok, I want to know more about your pH updating as well, are you doing it directly with phil trinder? 
03:40:08 <Cale> I'm not sure
03:40:17 <shapr> I'll be patient :-)
03:40:57 <Si\> shapr: Have you tried the latest version of HXT to see if it works for you at all now?
03:41:07 <Cale> I had a chat with professor Anand a few days ago, and I seem to recall him mentioning something along those lines.
03:41:51 <shapr> Si\: no, I haven't done any xml stuff recently, new cool features?
03:42:28 <shapr> Cale: would be nice if GpH gets updated
03:42:56 <Si\> fixes for GHC 6.2, the startings of an XSL processor and some new filters for namespaces
03:43:03 <shapr> ah, that is cool
03:43:14 <Si\> oh and Parsec isn't included any more, he got it to work with the GHC one
03:43:25 <shapr> I'd like to do XSL with HXT
03:43:51 <Si\> I sent him a patch to add package support and bump the HTTP to bring's version, but I haven't had a reply yet
03:44:13 <Si\> the build tree is still a bit of a mess
03:44:36 <Si\> e.g. making clean leaves you with a different source tree to what you started with :/
03:44:49 <shapr> that sucks
03:45:27 <Si\> and the whole thing is made by simple using ghc --make on all his examples, which means that stuff which isn't used in the examples doesn't compile
03:45:37 <Si\> XSL for example
03:46:29 <Si\> but it's a damn good library never-the-less
03:46:40 <shapr> well, he accepted and integrated the patches I sent him, though not very quickly, so I'm sure we'll derive benefits from your work
03:47:00 <shapr> yah, I like the genereic tree approach with separate validation step
03:47:59 <Si\> Maybe I should send him a patch with all my extra filters then
03:48:22 <shapr> go for it :-)
03:48:57 <Si\> there are one or two things which are missing, which IMHO should be in there, e.g. you can't directly extract the namespace table, which is kinda vital if you're doing namespace processing on content rather than just on names
03:49:12 <shapr> I sent him HXT unit tests that I wrote to teach myself how to use the lib, and he integrated and improved them
03:49:58 <Si\> And he's now doing some work on relax
03:50:12 <shapr> that'll be interesting
03:50:16 <Si\> not that that's any good for W3C stuff, but oh well
03:50:44 <Si\> I'm not sure if I like XSchema anymore neway
03:54:05 <shapr> how's HAIFA doing?
03:56:32 <Si\> HAIFA core is complete
03:56:39 <shapr> yay!
03:56:47 <Si\> skeleton generator is sorta 70% complete
03:56:51 <shapr> did you have a celebratory beer?
03:56:55 <Si\> HAC works, but is a mess
03:57:16 <Si\> SOAP implementation works, but doesn't do lazy marshalling yet
03:57:28 <Si\> WSDL is non-existant :)
03:57:45 <Si\> although I do have a Data-type -> XSchema thingy
03:58:04 <Si\> but Haskell's parse library is hard to use
03:58:37 <shapr> how so?
03:59:01 <Si\> btw. if skew is listening, as per your recommendation the Marshal class now does both strict IO and lazy marshalling, but SOAP doesn't hook up yet
03:59:20 <Si\> because there's so many alternatives
03:59:39 <shapr> hoi kosmikus 
03:59:44 <kosmikus> hoi shapr
04:01:51 <shapr> wassup?
04:02:39 <kosmikus> still my thesis, of course ... one month until deadline
04:03:05 <Si\> 3 weeks till mine, except I only have 60 pages to write
04:04:05 <shapr> man, I'm still learning swedish in preparation for my academic career
04:04:25 <kosmikus> the pages are not the problem, I am at 240 by now -- they don't fit together, though ...
04:06:44 <Si\> do you think protocol agnostic is a real term?
04:07:27 <Si\> or what would you say it meant if you saw it?
04:09:26 <shapr> well not concerned with lower layers
04:09:40 <Si\> good
04:10:16 * clausen has 3.5 years left on his thesis :p
04:10:17 <Si\> "HAIFA is protocol agnostic" in the sense that it don't care what RPC protocol you happen to be usin' so long as it known how to parse it
04:11:07 <clausen> it isn't enough!
04:11:17 <Marvin--> clausen: better hurry up then :)
04:52:53 <Marvin--> joy! Simon is going to change Text.PrettyPrint not to mix tabs and spaces
04:54:01 <hram> Marvin--: congratulations :)
04:54:14 <shapr> yay!
04:54:38 * Si\ should really learn how to use Text.PrettyPrint some day...
04:58:56 <Marvin--> Si\: I did just the other week, it was really simple and really nifty :)
04:59:46 <Si\> I know it looks it, I will once I get some spare time and my code stops looking like it was written by 2xmonkeys + typewriters
04:59:54 <Marvin--> http://www.mdstud.chalmers.se/~md9ms/ProofPrinter.hs
05:01:49 <shapr> so, I wonder if I can write a zopey widget in Haskell with xmlrpc
05:01:50 <Marvin--> oh look, Jonas Ã–berg is coming to chalmers on Friday
05:01:58 * shapr ponders
05:02:07 <shapr> who's that?
05:02:14 <Marvin--> he's in FSF Europe
05:02:19 <shapr> oh cool
05:05:08 <shapr> I need to pull info out of zope, process it, and put it back
05:06:02 <shapr> probably easier to just use python :-/
05:23:50 <shapr> @yow !
05:23:50 <lambdabot> I'm a GENIUS!  I want to dispute sentence structure with SUSAN SONTAG!!
05:34:11 <earthy> by-the-by, can I recruit some contributors to the HC&AR here? :)
05:34:25 <earthy> I'd like a blurb on #haskell
05:34:39 <earthy> for instance
05:36:05 <shapr> I'll volunteer for a #haskell blurb
05:38:48 <shapr> and a haskell-libs.sf.net blurb
05:40:46 <shapr> oh, and the HaWiki blurb
05:42:53 <earthy> great! noted!
05:43:23 <earthy> (expect mail later today :))
05:43:38 <shapr> anything else I'm responsible for, but haven't thought of?
05:43:57 <earthy> gforge?
05:44:07 <shapr> oh, that's a point
05:44:34 <shapr> I've ripped it out, but would like to have it back now
05:45:52 <earthy> IOHCC? :P
05:46:04 <shapr> oh, another good point
05:46:19 <kosmikus> EuroHaskell, if the release of the report is still in time
05:46:20 <shapr> yes, I need two or four more jurors
05:46:29 <earthy> lord, kosmikus. :)
05:46:31 <shapr> bring is already drafted :-)
05:46:46 <earthy> current release goal is 21st may
05:46:47 <Igloo> Why 2 or 4?
05:46:50 <earthy> when was EuroHaskell?
05:47:02 <earthy> Igloo: you know what's up with TH?
05:47:13 <shapr> Igloo: I wanna be a juror and I want an odd number to break any ties
05:47:37 <Igloo> Oh, I assumed from what you said you currently had 2. Who's the third?
05:47:39 <shapr> last time, getting five took forever
05:48:01 <shapr> Igloo: oh right, I can't count
05:48:12 <shapr> Igloo: wanna be a juror?
05:48:12 <earthy> so you want 1 or 3 jurors? :)
05:48:13 <Igloo> earthy: I might be able to write something, but not for a week or two at least
05:48:32 <earthy> Igloo: the deadline 'll be may 7th
05:48:34 <shapr> earthy: yes, exactly
05:48:38 <Igloo> shapr: Not sure if I want to enter or not yet  :-)
05:48:43 <shapr> heh, ok
05:49:48 <Igloo> I would encourage the juror team to set themselves deadlines, though. It was a bit of a fiasco last time.
05:50:06 <Igloo> Partly due to everyone waiting for everyone else I think  :-)
05:50:07 <shapr> yah, I agree
05:50:38 <shapr> yup
05:51:49 <earthy> methinks some awfully obfuscated nastyness could come from playing with template haskell
05:53:00 <Marvin--> shapr: I could be a juror if you need one
05:56:14 <shapr> Marvin--: excellent
05:56:28 <Marvin--> what's the time frame, btw?
05:56:31 <shapr> oh, I could make a release of PreludeExts
05:56:39 <shapr> Marvin--: no clue
05:56:47 <Marvin--> okay :P
05:57:04 <shapr> Marvin--: I'd like to announce as soon as we have enough jurors
05:57:54 <shapr> oh, I'd like to add an explicit disclaimer to the HaWiki that declares a license on code or text in the HaWiki
05:58:16 <keverets> that would be a good idea.
05:58:36 <shapr> mostly for things like PreludeExts, how can I license something that so many people have contributed to?
05:58:38 <Igloo> You'd need to check with everyone who already has stuff on there though
05:58:56 <shapr> also for people wanting to use HaWiki text for teaching, etc
05:59:09 <shapr> Igloo: yes, and that seems paiful
05:59:22 <shapr> since there are unsigned coitributions
05:59:35 <keverets> there's a history, isn't there?
05:59:43 <shapr> arg, I can't type very well with this yet
05:59:59 <shapr> yes, but it shows ip or hostname, not always name
06:00:41 <shapr> I wonder if I should install a new instance of the latest moin, and declare the copyright on that
06:01:01 <shapr> then I could migrate whatever I can get permissions to
06:01:03 <keverets> or add sections to the Wiki for licensed code, public domain code, etc
06:02:30 <shapr> well, I'd like to keep HaWiki tarballs to allow offline browsing
06:02:56 <shapr> so anything I'd rather stick to DFSG compatible licenses
06:03:13 <shapr> though you have a point, a separate wiki would do that
06:08:45 * themaximus moos
06:08:54 * shapr baas
06:12:28 <shapr> so, HaWiki, gforge, IOHCC, #haskell, haskell-libs, and PreludeExts
06:12:49 * shapr pounces on SyntaxNinja 
06:13:18 <shapr> SyntaxNinja: LIP! Erwig's graphs, hscairo, what else?
06:13:51 <shapr> I think HC&AR needs a section on linux distro support
06:20:40 <shapr> so, any other HC&AR ideas or thoughts?
06:20:42 <SyntaxNinja> shapr: huh?
06:20:49 <SyntaxNinja> is it that time again?
06:20:53 <shapr> yup
06:20:56 <shapr> so soon
06:21:08 <SyntaxNinja> A linux distro section would be good.  I really would like to know what other packagers are up to.
06:21:59 <SyntaxNinja> hscairo (joint work w/ abe egnor's spare time), FGL, cairo-yampa...
06:22:14 <SyntaxNinja> that's Aetion stuff
06:22:47 <SyntaxNinja> then LIP and debian packaging, including Haskell Experimental is my stuff. maybe I became an official maintainer in the mean time?
06:22:52 <SyntaxNinja> was darcs in the last report?
06:23:29 <earthy> yes, it was.
06:23:43 <shapr> darcs is getting big
06:23:53 <earthy> which reminds me!
06:23:54 <vegai> in a good way?
06:24:01 <shapr> yes, in a good way
06:24:10 <ibid> the haskell killer app?
06:24:11 <shapr> and staying small in a good way too
06:24:12 <ibid> :)
06:24:17 <shapr> quite possibly
06:42:06 <bring> shapr: didn't know I was an IOHCC juror
06:42:17 <shapr> tada! :-)
06:42:29 <shapr> only if you agree...
06:44:47 <shapr> I know it's hard to choose between entering and judging
06:44:59 <bring> I was thinking of entering
06:45:13 <bring> but what the hell
06:45:24 <Marvin--> do enter
06:45:56 <Marvin--> I volunteered for jury duty because I know I won't get around to making an entry :)
06:46:17 <earthy> ;)
06:46:34 <shapr> oh, I could invite last year's winners to be jurors
06:46:34 <bring> is there a date yet?
06:46:37 <earthy> nope
06:46:53 <shapr> we figure out a date when we have jurors
06:47:30 <Marvin--> so this will the first IOHCC then?
06:47:52 <earthy> marvin, you're at chalmers, right? :)
06:48:13 <shapr> Marvin--: nah, Succ Zero
06:48:34 <Marvin--> earthy: technically, at Gothenburg University, but the comp.sci. institution is shared
06:50:27 <Marvin--> how so?
06:50:33 <earthy> well, could you make sure someone sends in a blurb for the research group? please? :)
06:51:06 <Marvin--> about IOHCC?
06:51:14 <Marvin--> oh, wait
06:51:15 <earthy> nope, about the research group you're in. :)
06:51:26 <Marvin--> you mean for HC&AR
06:51:29 * earthy nods
06:51:37 <Marvin--> I'm not in a research group
06:51:45 <earthy> your supervisor is. :P
06:52:09 <Marvin--> that he is
06:52:11 <earthy> and you guys are working with haskell. :)
06:52:12 <Marvin--> several, actually :P
06:52:28 <earthy> ergo, I wanna hear about it :)
06:54:38 <Marvin--> when's the deadline?
06:54:42 <earthy> may 7th
06:54:50 <earthy> there's no *real* hurry, yet. :)
06:54:53 <Marvin--> right
06:55:04 <earthy> I'm just dropping hints, the full announcement will go out this evening.
06:55:19 <Marvin--> feh, does that mean I should be writing something myself
06:55:26 <earthy> (I need to get the topics list up-to-date first :))
06:55:40 <earthy> well, yes! ofcourse! :) and kick Koen. :)
06:55:52 <Marvin--> (or maybe I'll just have Koen do it as part of the CoVer project)
06:56:00 <earthy> (I'll do some kicking as well :))
06:56:33 <Marvin--> shucks, reading QuotesPage I just realized that I forgot to kick Koen about releasing QuickCheck2
06:57:19 * earthy grinz
06:57:37 <earthy> there's still time. and good reason for me to re-include quickcheck in the hc&ar
06:57:42 <SyntaxNinja> ooh QuickCheck2?!
06:58:11 <shapr> what??
06:58:23 <shapr> where?
06:58:44 <earthy> unreleased yet. ;)
06:58:57 <Marvin--> well, I don't know if it's supposed to be a QuickCheck2 or just an update to QuickCheck or if there's anything going on at all, but I know for a fact that the version I have here has features that's not in the released version
06:59:23 <shapr> right, shrink
06:59:29 <Marvin--> for example
06:59:32 <shapr> that's what darcs does
06:59:46 <shapr> trackdown is like shrink
07:00:39 <Marvin--> I think there's also a version that's hat-aware
07:01:34 <shapr> oh, cool!
07:15:49 <shapr> urgaffel: neat nickname
07:15:54 <urgaffel> :)
07:16:07 <shapr> what does it mean?
07:16:14 <urgaffel> Its ancient norse for "fork".
07:16:37 <shapr> wow
07:19:55 <urgaffel> Mang, haskell is infinitely better than the tripe known as C that they force feed us at uni :(
07:20:38 <earthy> C is not *that* bed
07:20:44 <earthy> bad, even. :)
07:21:22 <earthy> think of the horror that was PL/I. Or Fortran. Or COBOL. Or BASIC. Or...
07:21:34 <Taaus> C could use a better type-system. That would go a long way, IMO.
07:21:37 <urgaffel> Going from C->Haskell was a bit of a headjob, but it turns out pretty well after a week or so of fiddling. Going the other direction, bleh. I shudder, thinking of all that yucky typecasting and stuff
07:21:39 <shapr> urgaffel: are you learning Haskell for shcool or fun?
07:21:56 <earthy> Taaus: have you ever seen Algol 68? :)
07:21:56 <ibid> what do you mean, or?
07:21:57 <ibid> :)
07:22:03 <urgaffel> shapr, done it last year as part of a uni course. Will continue with it into postgrad tho
07:22:11 <earthy> (it's where C badly copied its typesystem from :))
07:22:32 <Taaus> earthy: Eh, I think so. But you're an evil man for mentioning such languages!
07:22:50 <earthy> is it evil to point out truth, and history?
07:22:53 <seafood> urgaffel: I thought you were talking about Manuel Chakravarty's C->Haskell tool for a moment.
07:23:22 <seafood> urgaffel: THen I realised you were just using '->' as shorthand for "to"
07:23:29 * urgaffel smirk
07:23:38 <Taaus> earthy: Yes! Invariably! I prefer my thoughts to float on a small pink cloud of ignorance! ;)
07:24:02 <earthy> you should read the most recent `best of internet oracularities' ;)
07:24:47 <earthy> --- 1326-01 11hsg 3.9 ----------------------------------------------------
07:24:50 <earthy> to be more specific
07:24:58 <urgaffel> seafood, ah I see now why you made that reference; its your alma mater
07:25:04 <earthy> Message-ID: <c543fh$74b@moose.cs.indiana.edu>
07:25:11 <seafood> urgaffel: Correct.
07:25:27 <shapr> g'day seafood 
07:25:37 <seafood> urgaffel: It's also a fairly well known tool though. I'd heard of it before I chose Manuel as my supervisor.
07:26:02 <seafood> shapr: G'day my photocopied bird friend.
07:26:13 <shapr> heh
07:26:30 <seafood> shapr: How's it going up there? The sun's come out right?
07:26:32 <shapr> I love that mental image
07:26:48 <shapr> yup, almost warm enough to stop wearing jackets
07:27:07 <seafood> How did you fair in the darkness? Okay?
07:27:22 <seafood> Or is that "fare"?
07:27:40 <shapr> I survived, trying to get rid of my winter fat
07:27:46 <shapr> fare, I think
07:28:20 <shapr> requires unicycling
07:30:17 <urgaffel> seafood, have you heard of Søndergaard?
07:32:44 <seafood> urgaffel: Yes, but I don't know much about him.
07:36:59 <Marvin--> (4) version X has a tag attached meaning "DANGER.  Do not use unless your name is Simon".
07:37:05 * Marvin-- laughs at George Russell
07:42:35 <Marvin--> yuck, I should rewrite this in TH, but it's such a small piece of code that I can't be bothered
07:43:29 <shapr> see shae with new uni tire --> http://www.webwitches.com/~bea/beamax.htm
07:44:08 <Marvin--> neat
07:44:51 <liiwi> tireful
07:45:00 <shapr> you can tell it's had recent experiences with snowmelt
07:45:08 <Marvin--> "that pig poster behind me is the entrance to Shae's office. Comments not necessary."
07:45:12 <seafood> shapr: It must difficult holding that pose :)
07:45:15 <Marvin--> I think that comments are highly necessary :)
07:45:45 <Igloo> It doesn't look very new
07:45:51 <shapr> Marvin--: haha!
07:46:01 <shapr> Igloo: well, new tires rarely do
07:46:34 <shapr> seafood: I still haven't written the script to auto-ftp bea's webcam pix
07:48:17 <Marvin--> shapr: so, do tell :P
07:48:35 <shapr> I keep claiming that script will bea's first Python lesson, just hasn't happened yet
07:49:16 <shapr> Marvin--: bea's office is well organized, mine just has the oldest stuff at the bottom
07:49:30 <Marvin--> isn't that what well organized means?
07:49:34 <Marvin--> newest stuff on top?
07:49:37 <Marvin--> oh well
07:50:08 <shapr> bea can find stuff in her room without the need of long-term searching
07:51:07 <Marvin--> wow
08:46:27 <shapr> ooh, my back is tired
08:50:35 <shapr> this is so cool --> http://docs.freebsd.org/cgi/mid.cgi?18238.938873650.1
08:50:58 <shapr> SyntaxNinja mentioned that to me
08:54:08 <shapr> y0 peoples, what's going on?
08:57:03 <Marvin--> I'm hungry, that's what's going on
08:57:24 <liiwi> mm, food
08:58:43 <ibid> i ate too much lasagne
08:59:01 <shapr> I want hidden markov model code in Haskell
08:59:11 <shapr> that's DFSG compatible
08:59:25 <ibid> anybody know of a quality priority queue implementation in haskell?
08:59:31 <shapr> actually, I want a full speech recognition engine in haskell
08:59:57 <shapr> ibid: I think rabhi & lapalme wrote one, lemme check
09:00:36 <shapr> yes
09:00:55 <Marvin--> ah, the classic bike shed
09:00:56 <ibid> online?
09:01:15 <ibid> i know the feeling :)
09:01:33 <shapr> http://www.iro.umontreal.ca/~lapalme/AlgoFP/Chapter5/
09:02:04 * ibid is a varajäsen, whatever that's in english, in the local city technical committee
09:02:16 <ibid> i can easily see the bike shed effect happen there
09:02:34 <ibid> deputy member, apparently
09:02:58 <ibid> that is, i get to participate if a certain real member can't attend
09:03:03 <shapr> that's a great book
09:03:09 <ibid> true
09:03:16 <ibid> i have it loaned to somebody, iirc
09:57:18 * esap blinks.
09:58:15 <shapr> y0 esap 
09:58:18 <shapr> wassup?
10:01:21 * esap is bored.
10:02:00 <esap> Been thinking about while loops again :-)
10:02:41 <bring> sounds like fun
10:03:34 <esap> For example, what would be a proper 'most-general' type for the while loop? I've got: while :: (a -> Either b c) -> (b -> a) -> a -> c
10:03:57 * ibid has also been thinking about while loops
10:03:59 <ibid> but not types
10:04:15 <esap> Well of course I think about the semantics of while loops.
10:04:47 * ibid is frustrated with the fact that there is no first-order representation for weakest preconditions in general
10:04:54 <shapr> hej bonky 
10:05:02 <ibid> wps of while loops, that is
10:05:10 <bonky> hi guys, is haskell still alive?
10:05:14 <ibid> yes
10:05:21 <Marvin--> alive and kicking
10:05:32 <bonky> very much so or only so so?
10:05:35 <ibid> why would you think otherwise?
10:05:36 <shapr> yes, I wrote some haskell once
10:05:41 <esap> ibid: what do you mean with 'first-order'?
10:05:52 <ibid> esap: first-order :)
10:05:52 <Marvin--> bonky: depends on your definition, I suppose
10:06:08 <shapr> lambdabot hasn't quite reached sentience, so I have to keep improving him
10:06:11 <ibid> esap: first-order logic is also known as predicate logic
10:06:15 <bonky> is it conquering the world.
10:06:17 <bonky> ?
10:06:18 <esap> ibid: ok
10:06:20 <shapr> bonky: yes
10:06:35 <Marvin--> bonky: lazily, though
10:06:50 <ibid> esap: first-order here is in contrast to second-order and higher-order :)
10:06:55 <Marvin--> Haskell won't conquer the world until the world needs to be conquered
10:07:29 <kosmikus> esap: why not while :: (a -> Either a b) -> a -> b ?
10:07:40 <Si\> will it tell us when it's ready then? Mysterious lambdas appearing in corn fields and such like?
10:07:52 <ibid> esap: there is a higher-order representation of while loop wp semantics, but i don't like higher-order logic
10:08:05 <shapr> Si\: haha! that's good!
10:08:12 <Marvin--> Si\: dunno
10:08:26 <esap> kosmikus: I need the body of the while loop as well.
10:08:28 <Marvin--> we'll have to get to the _|_ of this
10:08:37 <Si\> anyone good at photo shop? ;)
10:08:44 <anduril1> the crop circles would be side effects . . . so no
10:08:54 <shapr> urgh :-)
10:09:15 <ibid> anduril1: not a problem. just pass the real world as the continuation :)
10:09:18 <skew> mysterious lambdas that have always been there
10:09:28 <ibid> or something
10:09:47 <ibid> to the continuation or whatever :)
10:09:48 <anduril1> they'll be there as soon as somebody looks at them
10:10:08 <_Codex> Its not lambdas that bother me. Its the normalisation and beta reduction. :)
10:11:08 <ibid> ... as few lambdas as possible ... 
10:12:31 <kosmikus> esap: then I'd expect (a -> Bool) -> (a -> a) -> a -> a for simplicity
10:12:37 <shapr> bonky: so, you write software?
10:13:52 <skew> http://www.eleves.ens.fr:8080/home/madore/lit/god.html
10:14:22 <shapr> bonky: I can point you to various bits of neat haskell software if you want
10:14:34 <Marvin--> kosmikus: isn't that the until function?
10:15:27 <esap> kosmikus: I think my version is more general.
10:15:44 <kosmikus> Marvin--: while and until is almost the same, isn't it?
10:15:45 <skew> not really. you could compose it with a function of type a -> c
10:16:02 <Marvin--> kosmikus: almost, yes
10:16:12 <Marvin--> just wanted to point out that it exists :)
10:16:30 <kosmikus> yes, thanks :)
10:16:34 <esap> while cond body = body' . cond where { body' (Left b) = while cond body $ body b ; body' (Right a) = a }
10:20:20 <shapr> greetz stepcut 
10:20:41 <_Codex> esap: isnt there something better than "while" loops - like foldr? :)
10:21:19 <esap> codex: Sure, but that's for a different purpose.
10:22:00 <kosmikus> esap: I don't see why that is more general -- it's more complicated, though
10:22:02 <esap> codex: And I would compare with generic fold :: (Functor f) => (f a -> a) -> Rec f -> a
10:25:16 <bonky> shapr, i've been using c++. it has some functional programming in it.
10:25:38 <shapr> yah, STL
10:26:22 <bonky> this thing with continuation, is it good or just a compromise?
10:26:51 <esap> kosmikus: Well it's related to the condition. If the condition has type 'a -> Bool', then you can't really pass the intermediate computations from the condition into the while loop. I think that's something that you need to be able to do [because the condition establishes the while loop invariant].
10:28:46 <ibid> uhh, what? the loop invariant holds before entering the loop, before even executing the condition 
10:28:50 <shapr> bonky: you mean continuations?
10:29:22 <bonky> shapr, yes.
10:29:49 <esap> ibid: I mean, within the loop, you can assume that the condition is true [otherwise the body is not entered].
10:30:17 <esap> ibid: And you should be able to use that information.
10:30:20 <shapr> continuations are very good
10:30:34 <shapr> but you don't often see them in C
10:30:35 <SyntaxNinja> can anyone enlighten me as to which Language.THSyntax bit is meant to cover Pattern Guards, or are they not there?
10:30:46 <shapr> actually, you sort of do
10:30:59 <kosmikus> esap: I don't see the point. If you have a Bool condition, you also know that it holds when you enter the body.
10:31:02 <SyntaxNinja> It looks like they should be within Exp, and have the form PatGuard Pat Exp
10:31:03 <shapr> SyntaxNinja: isn't pattern rewritten as case?
10:31:04 <bonky> shapr, yes?
10:31:12 <ibid> esap: that's true, yes
10:31:42 <esap> kosmikus: But then the programmer has to 'know' that this is the case. I want the type system to infer that for me.
10:31:48 <shapr> bonky: you know how the C call stack unwinds when a bunch of functions return?
10:31:49 <Marvin--> shapr: but TH operates on Haskell, not Core
10:32:02 <kosmikus> esap: ah, now I see
10:32:34 <SyntaxNinja> I say this because Guard has the form [(Exp, Exp)]
10:32:55 <kosmikus> esap: you want to have the statement "invariant holds before entering body" as a 
10:32:56 <SyntaxNinja> so I would expect that first exp to expand to (Pat, Exp)
10:32:59 <kosmikus> free theorem from the type
10:33:17 <Marvin--> SyntaxNinja: I would guess that you can't do pattern guards with TH, then
10:33:25 <esap> kosmikus: exactly.
10:33:34 <shapr> bonky: if you could freeze the callstack just before a return, and put everything that is required for that call stack to function into a variable, that would be a continuation
10:33:55 <bonky> shapr. ok.
10:34:18 <bonky> you need continuations for input/output, yes?
10:34:19 <esap> kosmikus: You might also say it like this: I don't want to lose any type information in the types of things.
10:34:19 <SyntaxNinja> Marvin--: I have had the suspicion that the stuff in THSyntax is just the AST that the parser puts together and so should include stuff like that. am I wrong?
10:34:25 <shapr> bonky: so, with a first class continuation, you could alter stuff in that value before executing it
10:34:39 <Igloo> TH doesn't permit everything GHC does
10:34:49 <Marvin--> SyntaxNinja: I have no idea, ask Igloo
10:34:52 <shapr> bonky: only in that monads are sort of related to continuations
10:34:52 <Marvin--> oh, there he is
10:34:53 <Marvin--> :)
10:35:01 <Igloo> But if you need something that's missing it can be added
10:35:13 <Marvin--> L.H.S is severely limited too
10:35:21 <bonky> monads, aha, isn't that a kind of addon to haskell?
10:35:24 <SyntaxNinja> Igloo: I'd like pattern guards ;)
10:35:30 <shapr> bonky: but you probably won't have to know or care unless you do something especially unusual
10:35:36 <SyntaxNinja> Igloo: but I guess I can get away without them.. it'll be a bit painful I think.
10:36:00 <SyntaxNinja> but I haven't been convinced that they're not there, unless you're telling me so :)
10:36:05 <shapr> bonky: much like dark corners of the C++ standard can bite you when you do something bizarre
10:36:11 <Igloo> I don't remember seeing them
10:36:24 <Igloo> And I think parallel arrays is the only thing there I ignored
10:36:31 <SyntaxNinja> ok
10:37:32 <kosmikus> bonky: no, monads are not an add-on, but an essential part of Haskell
10:37:43 <Igloo> Prod me in a couple of days if I haven't looked at it
10:38:02 <SyntaxNinja> Igloo: OK
10:38:19 <bonky> is haskell pure functional without side effects?
10:38:20 <SyntaxNinja> Igloo: do you know if they're there in HEAD?
10:38:25 <shapr> bonky: yes
10:39:15 <bonky> are monads a complicated subject?
10:39:34 <Igloo> Body is still GuardedB | NormalB which is where you'd exect them to be, right?
10:39:46 <shapr> no, but like objects they you have to sort of "get it"
10:40:12 <kosmikus> bonky: not if you only want to use them to do IO
10:40:39 <SyntaxNinja> Igloo: if you expand guardedB to [(Exp, Exp)], where the first exp is the guard, and the 2nd exp is the expression to evaluate, then expand that first Exp into somethin glike (Pattern, Exp)
10:41:05 <SyntaxNinja> Igloo: so I'd expect to see something like (PatGuard Pat Exp)
10:41:12 <SyntaxNinja> but actually, it's more complex than that, 'eh?
10:41:16 <bonky> what more could you do with monads besides io?
10:41:30 <SyntaxNinja> it's like PatGuard [(Pat, Exp)]
10:41:36 * Igloo looks confused. Can you mix guards with pattern guards?
10:41:48 <SyntaxNinja> oh, idono
10:41:58 <shapr> bonky: error stuff, stateful stuff, lots more
10:42:03 <SyntaxNinja> I don't see why not
10:42:10 <Marvin--> regular guards is just a special case of pattern guards, aren't they?
10:42:16 <SyntaxNinja> Marvin--: yeah
10:42:21 <Marvin--> | g = e   expands to   | True <- g = e
10:42:25 <shapr> bonky: it's like "what can I do with objects"
10:42:35 <bonky> shapr, hold state.
10:42:49 <shapr> ther's more than that though
10:42:55 <Igloo> Looking at http://www.haskell.org/ghc/docs/latest/html/users_guide/syntax-extns.html#PATTERN-GUARDS the syntax is a bit more complicated than that
10:43:05 <shapr> OOP also defines subtyping with inheritance
10:43:12 <Marvin--> but pattern guards are comma-separated too
10:43:24 <bonky> shapr, so monads are a way to reuse code?
10:43:31 <shapr> and all kinds of things that don't seem to go together well at first
10:43:34 <Igloo> Looks like it would be a list of statements or something. Anyway, if you can't mix them then I'd expect it to just be another body alternative
10:43:37 <shapr> bonky: yes!
10:43:54 <shapr> monads are an abstraction much like objects
10:44:04 <SyntaxNinja> Igloo: it looks to me like [(Pat, Exp)] would cover it
10:44:24 <Igloo> What about this example:
10:44:24 <Igloo> f x | [y] <- x
10:44:25 <Igloo>     , y > 3
10:44:25 <Igloo>     , Just z <- h y
10:44:25 <Igloo>     = ...
10:44:46 <Marvin--> I'm pretty sure they can be mixed
10:44:56 <bonky> are there namespaces in haskell?
10:45:19 <shapr> you have modules, does that count?
10:46:03 <shapr> "import qualified Base64" then "Base64.decode" in some other part of the program
10:46:09 <Marvin--> foo x | Just y <- lookup x [('a',1),('b',2)]
10:46:09 <Marvin-->       , even y          = y
10:46:09 <Marvin-->       | otherwise       = error "feh"
10:46:13 <Igloo> Hmm, if they can be mixed then it's all a bit less pleasant as the H98+TH case will change. Again.
10:46:16 <Igloo> Oh well
10:46:34 <shapr> bonky: is that what you're asking?
10:47:12 <bonky> shapr, i guess so. modules help avoid nameclashes?
10:47:22 <SyntaxNinja> Igloo: maybe that would be [([y], x), (True, 3), (Just z, h y)]
10:47:23 <shapr> yes
10:47:28 <Marvin--> adding a constructor of type [(Pat,Exp)] -> Exp would work, though, wouldn't it?
10:48:04 <shapr> bonky: hierarchical modules mean you can import Foo.Bar.Baz.Something
10:48:13 <Marvin--> and just let Pat be True for non-pattern guards in the comma-separated list
10:48:21 <bonky> so it seems that haskell has everything that you need?
10:48:34 <Marvin--> or, make it  [(Either Pat Exp, Exp)] -> Exp  or something
10:48:40 <shapr> bonky: I think we need more advertisng ;-)
10:48:56 <Marvin--> er, wait a sec
10:48:56 <bonky> i heard there was a speed issue?
10:49:06 <Marvin--> [Either (Pat,Exp) Exp]
10:49:22 <Igloo> I suspect the right thing is   [(Guard, Exp)] in Body and Guard is Exp or Stmts
10:49:34 <shapr> last I heard Haskell is about seven times slower than C, but still faster than Python, for example
10:49:46 <Marvin--> Igloo: oh dear, they're full-blown stmts?
10:50:03 <shapr> If you know how to tune your program, you can often closely approach the speed of C
10:50:04 <Igloo> Well, that's what I'd assume given the example pasted above
10:50:29 <bonky> shapr, but what about all that recursion going on?
10:50:46 <Marvin--> oh dear
10:51:09 <shapr> bonky: in fact, one of the Haskell compiler authors recently tuned an OpenGL program to exactly as fast as the equivalent C
10:51:10 <Marvin--> right you are, at least I could add a let stmt to my example without ghc complaining
10:51:18 * esap just wrote a while loop with type: (a -> Rec ((,) a) -> Either a b) -> Rec ((,) a) -> b
10:51:28 <shapr> bonky: recursion is a superset of looping
10:51:51 <_Codex> recursion is always a loop.
10:52:02 <esap> recursion is dual to iteration.
10:52:12 <shapr> with pattern matching, you can do handy stuff like:
10:52:21 <shapr> mylength [] = 0
10:52:23 <bonky> shapr, but it is well known that recursion is heavy on the cpu.
10:52:27 <Marvin--> there we go with the duals again
10:52:40 <shapr> mylength (x:xs) = 1 + mylength xs
10:52:47 <Marvin--> Igloo: what's the ParS constructor?
10:53:07 <Igloo> Parallel array stuff
10:53:11 <shapr> bonky: tail calls are turned into iteration internally
10:53:14 <Marvin--> array?
10:53:18 <Marvin--> you mean LCs?
10:53:27 <Igloo> Manuel was doing it recently
10:53:33 <Igloo> LC?
10:53:34 <SyntaxNinja> Igloo: so would you change GuardedB to then be (GuardedB [(Guard, Exp)])?
10:53:39 <Marvin--> list comprehensions
10:53:50 <shapr> Nepal, Parr
10:53:59 <Marvin--> [ e | p1 <- g1 | p2 <- g2 ]
10:53:59 <Igloo> Oh, don't think it's related to that. But maybe it's actually parallel list comprehension stuff. Not sure.
10:54:02 <shapr> array flattening, fusion, etc
10:54:25 <Igloo> Syn: If my first impression is right then yes
10:54:32 <shapr> anyway, there's a new Parr paper coming out soon with some neat tricks in it
10:54:59 <shapr> bonky: so, any more questions?
10:55:11 <shapr> bonky: btw, do you live in norrbotten?
10:55:17 * Marvin-- likes //LCs
10:55:32 <Marvin--> saves me from the zip monster
10:55:57 * SyntaxNinja unzips Marvin--
10:56:09 * Marvin-- blushes
10:56:12 <Marvin--> not heeerrre
10:56:21 <shapr> heh
10:56:30 * shapr gets jealous
10:56:31 * SyntaxNinja compresses marvin so he doesn't have to be unzippe
10:57:01 <shapr> man, I spent the night with both Marvin-- AND SyntaxNinja and NOTHINGHAPPENED
10:57:22 <Marvin--> that's what you think
10:57:40 <bonky> shapr, i live in stockholm!
10:57:42 <SyntaxNinja> hmm
10:57:43 * shapr laughs
10:57:56 <andersca> bonky: #haskell.se!
10:58:07 <shapr> bonky: bah, you live in the undemanding south
10:58:15 <bonky> is there any action in haskell.se?
10:58:19 <shapr> yes
10:58:30 <Marvin--> stockholm is to the far north :P
10:58:32 <shapr> lots of chalmers people
10:58:46 <bonky> ok, what about kth, do they use haskell there?
10:58:57 <shapr> bonky: oh, come to EuroHaskell! it's in Gothenburg this year
10:59:13 <shapr> Lulea uses Haskell
10:59:32 <Marvin--> speaking of EuroHaskell, I don't think we should call it a conference :)
10:59:34 <shapr> I know Karl Philip-Faxen at KTH uses Haskell
10:59:43 <shapr> what is it then?
11:00:01 <Marvin--> hackfest? get-together? sprint?
11:00:06 <shapr> I dunno how many people at KTH use Haskell
11:00:13 <Igloo> Hackfest and gathering were what came first to my mind
11:00:42 <shapr> fair enough, I think you should add all of those to the wiki page
11:00:44 <SyntaxNinja> Igloo: I'm tempted to write a "smart constructor" for pattern guards that just generates regular haskell code. should be possilbe, right?  
11:00:46 <SyntaxNinja> hack-a-thon?
11:00:56 <shapr> oh, that one too!
11:01:04 <Marvin--> SyntaxNinja: that's what I was going to suggest
11:01:09 <Igloo> Yes, but won't be pretty. Is it urgent?
11:01:25 <SyntaxNinja> it doesn't have to be perfect, but I suspect that it'll be better than doing it by hand
11:01:32 <Marvin--> depends on how general it has to be
11:01:45 <Marvin--> I didn't even know you could put lets there :-P
11:01:46 <SyntaxNinja> well, it seems liek the best way to handle a function that inputs something of the type Dynamic
11:01:50 <bonky> i'm gonna check out haskell.se
11:01:51 <shapr> bonky: so, you've seen the promotional pamphlet, are you ready to take the plunge?
11:02:07 <bonky> to go to eurohaskell?
11:02:17 <Igloo> Syn: Is it important it works in a released GHC in the near future?
11:02:28 <shapr> er, start using Haskell is what I meant
11:02:50 <Igloo> Oh, and don't forget quasi-quoting code with pattern guards in won't work either
11:02:57 <shapr> EuroHaskell will be a lot of fun though
11:03:02 <Marvin--> quasi-quoting?
11:03:05 * Marvin-- is afraid to ask
11:03:07 <SyntaxNinja> Igloo: not if it can be implemented by hand
11:03:11 * SyntaxNinja doesn't have to do that
11:03:19 <SyntaxNinja> Igloo: especially if it can be implemented in a compatible way
11:03:20 <Igloo> Marvin: [| ... |]
11:03:31 <shapr> man, I'm tempted to pick up haskell.se hostname for my evil purposes
11:03:45 <SyntaxNinja> but erum... i odn't know how important it is. what I'm doing is pretty experimental, so may or may not survive
11:03:53 <SyntaxNinja> (as one might expect, since I'm using TH)
11:04:00 <Igloo> :-)
11:04:31 <Marvin--> I'm wondering if I should write my zEnc/zDec functions with TH in a nifty way somehow
11:04:33 <shapr> bonky: I live in Boden, it's nice here
11:04:34 <SyntaxNinja> Igloo: so it may be that by the time there's a GHC release, I will have given up on doing this, or started doing it another way :)
11:04:54 <bonky> boden, do they have a uni there?
11:04:56 <SyntaxNinja> Igloo: but I would think that htis is something that's nice to support soon.
11:05:04 <SyntaxNinja> bonky: they have a BASE!
11:05:14 <SyntaxNinja> and a hospital, right?
11:05:32 <Igloo> Sure, I was only going to say that if you wanted to release something that worked with a released GHC soon then you'd need to do it the by hand way anyway
11:05:35 <shapr> all your Boden are belong.. oh never mind
11:05:43 <Marvin--> shapr: arrrghhh
11:30:42 <SyntaxNinja> are pattern guards implemented in anything besides GHC?
11:36:28 <shapr> y0
11:54:48 <SyntaxNinja> For this code:
11:54:48 <SyntaxNinja> foo :: Dynamic -> String
11:54:48 <SyntaxNinja> foo val
11:54:48 <SyntaxNinja>     | Just (a::String) <- fromDynamic val
11:54:48 <SyntaxNinja>          = a
11:54:50 <SyntaxNinja>     | Just (a::Int)    <- fromDynamic val
11:54:52 <SyntaxNinja>          = show a
11:54:54 <SyntaxNinja>     | Just (a::Float)  <- fromDynamic val
11:54:56 <SyntaxNinja>          = show a
11:55:00 <SyntaxNinja> Is this the most direct translation?
11:55:04 <SyntaxNinja> foo'  :: Dynamic -> String
11:55:06 <SyntaxNinja> foo' val
11:55:08 <SyntaxNinja>     = case fromDynamic val of
11:55:11 <SyntaxNinja>       Just (a::String) -> a
11:55:12 <SyntaxNinja>       _ -> (case fromDynamic val of
11:55:14 <SyntaxNinja>                   Just (a::Int) -> show a
11:55:16 <SyntaxNinja>                   _ -> (case fromDynamic val of
11:55:18 <SyntaxNinja>                               Just (a::Float) -> show a
11:55:20 <SyntaxNinja>                               _ -> ""))
11:55:22 <SyntaxNinja> (sorry for the flood)
11:55:42 <skew> I think so
11:56:36 <skew> At least, I think that's the only general way of translating pattern guards
11:57:53 <skew> for this particular case I think fromDyn would be cleaner
11:59:22 <skew> wait, I mean a type more like Dynamic -> (a -> b) -> b -> b
12:00:24 <SyntaxNinja> I don't quite understand.
12:01:10 <SyntaxNinja> oh, I see
12:01:23 <skew> to be used like withDyn a id (withDyn a (show::Int->String) (withDyn a (show::Float->String)))
12:04:04 <Marvin--> SyntaxNinja: isn't there a straight-forward translation via LCs?
12:11:07 <SyntaxNinja> Marvin--: not sure
12:11:34 <shapr> Marvin--: you're mean to that guy :-)
12:11:55 <Marvin--> shapr: he's kinda asking for it though
12:11:56 <SyntaxNinja> is that case translation I pasted above generic enough for all kinds of pattern guards?
12:12:04 <shapr> Marvin--: yah, he is
12:13:09 <Marvin--> SyntaxNinja: I don't know, you just translated a subset of it :-P
12:14:58 <SyntaxNinja> is the LHS always a pattern?
12:16:48 <Marvin--> SyntaxNinja: paste page
12:17:01 <SyntaxNinja> oh, I see what you mean, because the above doesn't cover the case where there are several guards for the same expression
12:17:35 <Marvin--> as Igloo said, you have a comma-separated list of statements that have to be translated somewhat in the same way as do expressions
12:17:55 <SyntaxNinja> eww
12:18:23 <Marvin--> so the general case is probably quite messy
12:20:08 <SyntaxNinja> yeah. why the heck would you want a line like that "let" there?
12:20:20 <Marvin--> symmetry? *shrug*
12:20:36 * SyntaxNinja decides not to worry about the general case
12:20:43 <Marvin--> good plan :)
12:20:48 * SyntaxNinja bows
12:21:03 <Marvin--> worry about the general case only when you need to
12:21:04 <SyntaxNinja> who is Marvin-- mean to?
12:21:12 <Marvin--> bonky
12:21:15 <SyntaxNinja> Marvin--: is that general advice, or specific to this situation?
12:21:15 <Marvin--> on #haskell.se
12:21:18 <SyntaxNinja> ;)
12:21:26 * esap got yet another type for while loops: (NList a -> Either a b) -> NList a -> (b, NList a)  [NList is a non-empty list type].
12:21:28 <Marvin--> general, of course, we're lazy, aren't we? :)
12:21:53 <SyntaxNinja> that's only because we're infinite
12:22:14 <Marvin--> SyntaxNinja: bonky seems to think that being a good programmer is somehow equivalent to knowing all the weird stunts you can pull with C++
12:22:35 * esap knows all the weird stunts you can pull with C++ :-)
12:22:40 <Marvin--> (okay, that was probably unfair over-generalization, but I'm running out of patience with this guy)
12:23:41 * SyntaxNinja has a sick desire to see the smack-down in live-action, but decides that he'd better work instead
12:23:54 <Marvin--> oh well, he left
12:24:24 <Marvin--> in all fairness, he did concede that for some problems, Ruby was a better choice than C++
12:24:58 <skew> where did he think C++ was a good choice?
12:25:14 <Marvin--> when you need sp33d!!!!!111!!!1!
12:25:58 <skew> nah, that's when you write a C library
12:26:01 <skew> and use it from Python
12:26:25 <skew> where do you need speed these days anyway?
12:26:34 <Marvin--> oh, and Java and C# is for people who don't know how to program
12:26:42 <Marvin--> everybody who know how to program use C++
12:26:44 <Marvin--> FYI
12:27:01 <skew> I'll keep that in mind
12:27:10 <Marvin--> see that you do
12:27:11 * esap thinks speed doesn't come from low-level stuff, but more like choosing the correct architecture.
12:27:25 <Marvin--> the discussion was kinda downhill after that :)
12:27:43 <Marvin--> maybe I should show him Lustre tomorrow and see what he makes of that
12:28:19 <skew> do you remember the example from the mailing list of something being optimized to several times faster than C?
12:29:12 <Marvin--> hm, no
12:29:30 <Marvin--> I liked the [0,50] code though ;)
12:30:05 <skew> what was that?
12:30:12 <Marvin--> ooh, you missed that?
12:31:12 <Marvin--> http://www.haskell.org//pipermail/haskell-cafe/2004-March/005936.html for the original problem
12:31:12 <skew> where was it?
12:31:27 <Marvin--> http://www.haskell.org//pipermail/haskell-cafe/2004-March/005937.html <- David Roundy's solution
12:31:44 <Marvin--> http://www.haskell.org//pipermail/haskell-cafe/2004-March/005939.html <- Simon Marlow's sick sick sick solution
12:32:29 <skew> Ah, I remember that
12:33:01 <Marvin--> we should put that on QuotesPage, actually
12:34:35 <Cale> heh
12:34:52 <SyntaxNinja> was he joking, btw?
12:35:26 <Marvin--> how do I get italics on the wiki?
12:35:34 <Riastradh> ''foo'' or something.
12:35:38 <skew> Roundy? Marlow? bonky?
12:36:08 <skew> hi Riastradh
12:36:15 <Marvin--> Riastradh: thanks, that was it
12:36:44 <Riastradh> I like David Roundy's solution more.
12:36:55 <Riastradh> It's probably the most efficient of _any_ of them, too!
12:37:24 <Cale> I like Stefan Holdermans solution.
12:37:33 <skew> until you change the type signature to somthing like Ratio (Peano)
12:37:43 <earthy> riastradh: however, simon marlow's is quite a bit more literal in answering the question posed. :)
12:37:45 <skew> Cale: what was that?
12:37:53 <ibid> i like both answers :)
12:37:53 <Cale> http://www.haskell.org//pipermail/haskell-cafe/2004-March/005938.html
12:37:55 <Marvin--> Cale: bah, that was actually *useful*
12:38:07 <Marvin--> we can't have that, now can we
12:38:10 <Cale> heh
12:38:27 <Cale> Solve the problem by generalising it.
12:39:24 <Marvin--> yeah, I mean, that's actually a useful problem solving technique
12:39:37 <Riastradh> Who would want to solve problems?
12:39:38 <ibid> a much more useful technique is to solve a problem by making it irrelevant
12:39:39 <Marvin--> thus, waaay off topic! :)
12:39:40 <skew> I think the most literal translation is return () :: IO ()
12:39:46 <Cale> heh
12:39:53 <Cale> skew: post it
12:40:07 <esap> have to  consume the same amount of resources from stack, otherwise it's not the same :-)
12:40:09 <earthy> skew: no, it isn't, in fact.
12:40:25 <skew> well, you do have the pointers esacping in C
12:40:30 <earthy> if you do that, you ignore the side effects. :)
12:40:51 <earthy> which is exactly why simon's solution uses alloca :)
12:41:00 <skew> they guy asked for a function equivalent to a block of statements in C
12:41:16 <skew> which is not quite right
12:41:48 <Marvin--> I think he's been humiliated enough though, let's not post more "solutions" :)
12:42:11 <skew> it's a bit old to be replying to anyway
12:42:53 <Marvin--> the scariest part of this is that Simon actually wrote that evil piece of code
12:42:57 <Marvin--> and it probably works too
12:43:21 <esap> Just proves that you can do anything in Haskell :-)
12:43:36 <skew> It looks pretty functional to me
12:43:40 <Marvin--> if you're crazy enough, yeah
12:43:45 <Cale> Oh, it's easy to see that it works. He just translated it directly from the C.
12:43:50 * earthy nods
12:44:02 <earthy> it is quite clearly a *literal* translation
12:44:24 <skew> Marvin--: you tend to be pretty crazy anyway to be using Haskell
12:44:28 <SyntaxNinja> simonPJ has actually revealed his greatest secret... simon "marlow" is just a program he wrote that generates Haskell code from C, and that's how GHC is implemented.
12:44:39 <Marvin--> skew: you do?
12:44:41 <Marvin--> skew: dang
12:44:45 <Cale> hahaha
12:44:53 <Marvin--> SyntaxNinja: LOL
12:45:01 <skew> well, try explaining a lazy fixpoint computation to a C programer and see what sort of looks you get
12:45:17 <skew> or maybe a catamorphism paramaterized by a comonad
12:45:45 <Marvin--> skew: you'll get the Evil State from me if you start talking about catamorphisms parameterized by comonads, I'll guarantee that
12:45:49 <Marvin--> er, Evil Stare
12:45:56 <ibid> try explaining a catamorphism paramaterized by a comonad to an average haskeller...
12:45:58 <skew> state is pretty evil too
12:45:59 <Marvin--> State is, of course, Evil too, though
12:46:11 <ibid> data Evil a = ...
12:46:12 <ibid> ?
12:46:15 <skew> "The Evil State"
12:46:32 * earthy ponders
12:46:45 <earthy> catamorphism, that's like a fold applied to an unfold, right?
12:46:49 <Marvin--> there are probably Haskell programmers that'd give you a blank look if you start talking about lazy fixpoint computations too
12:46:50 <skew> we should use that more often. "The biggest problem with Java, IMO, is the Evil State"
12:46:56 <skew> earthy: nah, just a fold
12:47:17 <skew> I think folding an unfold (or maybe the other way around, or maybe they are equivalent) is called a hylomorphism
12:47:23 * earthy tends to get all them morphisms mixed up
12:47:30 <earthy> cata-, ana- and hylo-
12:47:30 <skew> yeah.
12:47:32 <Marvin--> <aol/>
12:47:43 <skew> zygo-, para-
12:47:50 <Marvin--> shut. up.
12:47:50 <Marvin--> :)
12:47:55 <skew> and then you get into math proper
12:48:04 <earthy> and I'm happy enough understanding what a monad is... that I don't really feel the direct need to go understand what a comonad is. :)
12:48:15 <earthy> skew: eew... :)
12:48:28 <earthy> `You make my head hurt like math!'
12:48:34 <Marvin--> heh
12:48:35 <skew> I don't understand comonads nearly so well
12:48:40 <Marvin--> where's that from?
12:48:45 <Marvin--> I recognize it
12:48:46 <skew> sluggy
12:48:49 <Marvin--> oh, right
12:49:03 <Marvin--> gotta love Kiki
12:49:08 <skew> okay, maybe I'm just the crazy one
12:49:21 <skew> but you have to admit Haskell is pretty esoteric
12:49:35 <ibid> is it a finnish thing or do people omit one l from haskell elsewhere too?
12:49:36 <earthy> not to me
12:49:49 <earthy> but I've been indoctrinated with Logo
12:50:00 <Marvin--> skew: parts of Haskell are esoteric, but so are parts of C++
12:50:15 <Marvin--> ibid: er, no, can't say I see that a lot
12:50:19 <ibid> consistently every finnish person i know whose haskell knowledge is minimal writes haskell as haskel
12:50:24 <esap> I think Haskell is about the least esoteric language I've seen.
12:50:29 <skew> not necessarily any more complicated than C++ or something, but built on ideas pretty foreign to imperative languages
12:50:57 <ibid> i even added an exam question (worth two points) in my haskell exam, asking a) how the name of the language is spelled and b) who is it named for
12:51:02 <earthy> skew: untrue
12:51:10 <Marvin--> skew: *shrug* you said it, *to imperative languages*
12:51:19 <Marvin--> ibid: haha
12:51:23 <earthy> it's just that most designers of imperative languages didn't bother to look at e.g. Algol 68
12:51:31 <earthy> or didn't bother to really understand it
12:51:33 <Marvin--> ibid: that's almost like the people giving points for spelling your own name correctly
12:51:36 <esap> ibid: did you really ask it like "How is Haskell spelled"? :-9
12:51:47 <ibid> esap: no, i gave four alternatives
12:52:02 <skew> h4Xk3l?
12:52:08 <ibid> esap: "How is the name of the language we have been using in this course spelled?"
12:52:10 <Riastradh> What are they?  'ML,' 'Haskel,' 'Scheme,' 'Haskell?'
12:53:06 <ibid> correction, six alternatives
12:53:08 <skew> Okay, I wasn't necessarily misusing the work. Merriam Webster (www.m-w.com): 2 a : limited to a small circle 
12:53:19 <Riastradh> Oh, are Erlang and C++ in there as well, ibid?
12:54:01 <ibid> \begin{enumerate} \item Ascot \item Ascott \item Haskel \item Haskell \item Hascel \item Hascell \end{enumerate}
12:54:15 <ibid> all based on variations i have seen :)
12:54:33 <Marvin--> Ascot?!
12:54:36 <ecraven> lool :)
12:54:48 <skew> no "Pascel"?
12:54:52 <Marvin--> heh
12:55:03 <esap> Mascott?
12:55:21 <esap> That's a great idea for how to name a language :-)
12:55:24 <ibid> Marvin--: yeah, some humanist guy litterated an interview he did with me; it had Ascot when i had said Haskell :)
12:55:31 <Marvin--> yikes
12:55:36 <Marvin--> you Finns are weird
12:55:51 <ibid> i guess i pronounced it a little unclearly :)
12:56:46 <ibid> the problem was that i was faced with the possibility that most of the people passing my course would have misspelled haskell
12:57:12 <ibid> so i sent an email to the list that you might want to memorize the spelling and who it is named for, as i might ask that in the exam
12:57:20 <ibid> worked beautifully :)
12:57:27 <Marvin--> cute
12:58:01 <esap> Was there many people you didn't pass the exam due to that one question? :-)
12:58:06 <skew> yay, now there are 10 people in the world who say "Hmm, that's the thing Wirth did, right? I used it on my Mac, back in the day" when I talk about Haskell :)
12:58:17 <ibid> esap: 100 % correct answers, i think
12:58:56 <Cale> Khasghelle
12:59:00 <Marvin--> skew: err
12:59:04 <ibid> esap: well, almost all of the students who took the exams passed, but about 50 % dropped out beforehand
12:59:35 <ibid> esap: and only about a third of those who passed the exams handed in course projects
12:59:52 <esap> ibid: Sounds like one of the courses I took where all but 4 people dropped out before end of the course [from about 30 people].
12:59:53 <Cale> 50% dropped the class? That's pretty heavy. Almost as heavy as my combinatorics prof.
12:59:54 <skew> ibid: sounds about like the retention rate in our intro CS classes
13:00:15 <ibid> and so in the end only 8 people passed the course
13:00:32 <ibid> Cale: well, 50 % drop-out rate is not unusual here
13:00:36 * earthy saw roughly 1/3 of people registered actually showing up for practical sessions for the programming & correctness course
13:00:46 <ibid> Cale: since a lot of the drop-outs are never serious about the class
13:01:06 <Cale> Here they make it painful to drop a class after the first week.
13:01:41 <Marvin--> 50% dropout is normal here too, at least for beginner courses
13:01:45 <Cale> i.e. you won't get your money back and it will remain on your record.
13:01:48 <earthy> stronger: in the first introduction at the university they truly stated: `look to the left of you and look to the right of you. one of you three will drop out before the end of the first year'
13:01:48 <ibid> Cale: i believe the finnish university tradition of "academic freedom" is one of the most liberal
13:02:42 <Marvin--> earthy: ouch, that's mean
13:02:44 <Cale> Look to your left and right, behind you, in front of you, and in 12 other directions. Only one of you will pass this course.
13:02:44 <Marvin--> true, but mean
13:02:59 <monotonom> heh
13:03:16 <ibid> in my current course, i'm in a little trouble, since i estimate about 75 % drop-out rate this time
13:03:16 <Marvin--> Cale: well, seeing as university education is free in Sweden, we don't do hat
13:03:21 <Marvin--> s/hat/that/
13:03:23 <ibid> (automated reasoning, has been rough)
13:03:39 <ibid> i'll see the hard numbers next week, exam is on friday
13:03:47 <SyntaxNinja> earthy: hey! they said that at my first introduction to the university too
13:04:01 <ibid> in my introduction they didn't say that
13:04:10 <earthy> marvin--: mean but true. they continued `one of the other two may not make it to the end'
13:04:25 <ibid> instead they said, about three or four of you will eventually get a phd
13:04:31 <Marvin--> heh, if they said that over here, there'd be all hell to pay
13:04:40 <ibid> that?
13:04:50 <Marvin--> what earthy said
13:05:17 <ibid> (well, actually i think it was five to ten of you, there were about a hundred people in the room)
13:05:27 <ibid> true
13:05:33 <ibid> true that it's mean
13:05:36 <ibid> true that it's true
13:05:47 <Marvin--> mean that it's mean?
13:05:53 <ibid> that, too :)
13:05:54 <Marvin--> er, no wait :)
13:06:01 * earthy thinks that of the 40 that were in my intro, about 4 are working on their phd's
13:06:43 <earthy> I don't think even one of us finished a PhD yet
13:06:50 <earthy> (the intro was > 10 years ago)
13:06:52 <ibid> i'm still proud of the fact that our group had the biggest proportion of females since the beginning of time in our department
13:07:09 <ibid> none of my group have phd's yet
13:07:23 <SyntaxNinja> ibid: what are you saying? ;)
13:07:26 <ibid> but several are in the real soon now categrory
13:07:32 <ibid> SyntaxNinja: ?
13:07:55 * SyntaxNinja was joking about correlation between females and lack of Ph.D.
13:07:56 <earthy> he's saying he hooked up with a nerdette :)
13:08:10 <ibid> heh
13:08:17 <ibid> alas, no
13:08:41 <ibid> the funny thing is that i'm still proud of that even though i switched majors
13:09:07 <Marvin--> the number of females has fluctuated insanely much from one year to another here
13:09:25 <ibid> true
13:09:30 <earthy> sigfmd
13:09:44 <ibid> but ours was pretty close to 50 %, and that was the all-time best, we were told
13:10:33 <ibid> from my group, i know positively of three graduate students working toward a phd, myself included, and one of us is female
13:10:53 <Smerdyakov> ibid, what is your "intro"?
13:11:13 <ibid> but i never got to know everybody in our group, so it could be a higher number
13:11:28 <ibid> Smerdyakov: ?
13:11:54 <Smerdyakov> <ibid> in my introduction they didn't say that
13:12:37 <ibid> the introduction session where i and the other newbies were formally welcomed as new university students
13:12:40 <ibid> in 1997
13:13:04 <Smerdyakov> OK. Is it normal to use "number getting PhD's" as a rating of a class?
13:13:16 <ibid> no
13:13:27 <ibid> there is no class concept in that sense in finnish universities
13:13:59 <Smerdyakov> I don't know of one anywhere. I'm just curious why number getting PhD's has been mentioned here.
13:14:16 <earthy> statistics. :)
13:14:50 <ibid> Smerdyakov: i think i started when i mentioned that the vice-rector said to us that five to ten of us will eventually pursue phd's
13:15:00 <earthy> plus, the discussion was of `scare tactics when being introduced to uni'
13:15:09 <Smerdyakov> I like scare tactics. :)
13:15:24 <ibid> (the vice rector was present because he is also a prof in our dept)
13:15:38 <ibid> (he's no longer the vice rector, though)
13:15:44 <Smerdyakov> Isn't "rector" a religious term?
13:16:02 <ibid> according to my dictionaries, that's one meaning
13:16:17 <Marvin--> DYM principal?
13:16:24 <ibid> for some reason, our university uses "rector" in international correspondence
13:16:33 <ibid> rehtori in finnish :)
13:17:04 <ibid> principal would be the perfect translation if this were a high school :)
13:18:25 <monotonom> Many schools require classes to not fail too many students, e.g., "if the class size is >=20, no more than 10% may fail".  It is important to scare unfit students away early on, so you will not be under pressure to dumb down the course.
13:18:25 <ibid> in any case, the rector is elected from the professors to lead the university council (i think they call that a board in international correspondence here)
13:18:36 * earthy grins
13:18:51 * earthy actually understands the terms rector and university council better
13:19:17 <earthy> (rector is the exact word used in Dutch to describe that position :))
13:19:18 <ibid> the rector is also the lead representative
13:19:27 <ibid> of the university
13:19:36 <Marvin--> rektor in Swedish
13:19:58 <monotonom> Just take "director" and s/di//  :)
13:20:22 <ibid> monotonom: yeah, stories are told about a feared programming lecturer here, that he was almost kicked out for failing too many people
13:20:27 <Marvin--> damn you Syntax, now I'm actually writing a function for processing pattern guards
13:20:33 * SyntaxNinja fears that there's no way to expression the pattern "Just (a::String)" in TH... 
13:20:48 <SyntaxNinja> Marvin--: cool!
13:20:53 <SyntaxNinja> give it to me when you're done.
13:21:01 <SyntaxNinja> s/expression/express
13:21:23 <monotonom> Another reason to scare away unfit students early is so that at the end of the class you will get good evaluation because only good students stay.
13:21:29 <Marvin--> SyntaxNinja: you don't have to express it that way, though... annotate the RHS instead?
13:21:39 <Marvin--> read (a::Int)
13:21:49 <Marvin--> wouldn't that work?
13:22:03 <earthy> one reason to *not* scare students away in .nl is that the uni actually gets more money per graduated student
13:22:12 <esap> monotonom: Does that approach mean every course starts with the most fearsome material first?
13:22:16 <SyntaxNinja> Marvin--: probably
13:22:16 <ibid> i'm personally experiencing a teaching low point now
13:22:19 <ibid> esap: same here
13:22:29 <ibid> s/esap/earthy/
13:23:27 <monotonom> esap not exactly, but the first assignment is usually scary and marked strictly.  It is possible to teach elementary material and still give intimidating assignments based on that.
13:23:48 <Marvin--> hm, or maybe not
13:23:58 <Marvin--> SyntaxNinja: what was your original code again?
13:24:04 <ibid> my problem is that i usually give... ehm... challenging... problems even when i mean them to be easy...
13:24:14 <ibid> intend...
13:24:22 <SyntaxNinja> Marvin--: I'm leaning toward the "not" now, right along w/ ya ;)
13:24:25 * esap would like some courses that start with category theory, then go on to explain the more mundane issues :-)
13:24:39 <earthy> time to find 83 e-mail addresses
13:24:57 <ibid> esap: i started my haskell course with calculus and ended on a simple fp interpreter
13:25:15 <ibid> (calculus, that is, calculation in general, then introducing lambda calculus)
13:25:32 <ibid> esap: and note, the students had no previous experience on haskell or fp
13:26:33 <SyntaxNinja> actually, it seems to work...
13:26:34 <esap> ibid: none of them?
13:26:37 <Smerdyakov> To me, the obvious problem is that there are too many universities that claim/try to be "selective."
13:26:43 <SyntaxNinja> foo :: Dynamic -> String
13:26:43 <SyntaxNinja> foo val
13:26:43 <SyntaxNinja>     | Just (a::String) <- fromDynamic val
13:26:43 <SyntaxNinja>          = a
13:26:43 <SyntaxNinja>     | Just (a::Int)    <- fromDynamic val
13:26:43 <SyntaxNinja>          = show a
13:26:45 <SyntaxNinja>     | Just (a::Float)  <- fromDynamic val
13:26:46 <Smerdyakov> In fact, there are no enough good students to fill the classes at all such schools.
13:26:47 <SyntaxNinja>          = show a
13:26:49 <SyntaxNinja> (original)
13:26:54 <SyntaxNinja> foo'  :: Dynamic -> String
13:26:54 <SyntaxNinja> foo' val
13:26:55 <ibid> esap: most of them
13:26:55 <SyntaxNinja>     = case fromDynamic val of
13:26:57 <SyntaxNinja>       Just a -> (a::String)
13:26:59 <SyntaxNinja>       _ -> (case fromDynamic val of
13:27:01 <SyntaxNinja>                   Just a -> show (a::Int)
13:27:03 <SyntaxNinja>                   _ -> (case fromDynamic val of
13:27:05 <SyntaxNinja>                               Just a -> show (a::Float)
13:27:07 <SyntaxNinja>                               _ -> ""))
13:27:09 <Smerdyakov> SyntaxNinja, >:[] Can't you paste that somewhere else?!
13:27:09 <SyntaxNinja> foo''  :: Dynamic -> String
13:27:11 <SyntaxNinja> foo'' val
13:27:13 <SyntaxNinja>     = case fromDynamic val of
13:27:15 <SyntaxNinja>       Just (a::String) -> a
13:27:17 <ibid> esap: actually, i recruited the one who i knew to have some background as my assistant in the course
13:27:17 <SyntaxNinja>       _ -> (case fromDynamic val of
13:27:19 <SyntaxNinja>                   Just (a::Int) -> show a
13:27:21 <SyntaxNinja>                   _ -> (case fromDynamic val of
13:27:23 <SyntaxNinja>                               Just (a::Float) -> show a
13:27:25 <SyntaxNinja>                               _ -> ""))
13:27:25 <ibid> esap: you may have run into him here :)
13:27:27 <SyntaxNinja> Smerdyakov: yeah, next time.
13:27:39 <ibid> SyntaxNinja: there is a paste page in the wiki
13:27:40 <esap> ibid: :-)
13:27:49 <SyntaxNinja> jaja
13:27:54 <SyntaxNinja> sorry
13:28:24 <Marvin--> whoa, I meant only the first incarnation
13:28:26 <Smerdyakov> I will repeat my last lines.
13:28:28 <ibid> nick's vegai, can't tell him to say hi to you as he seems not be present
13:28:29 <Smerdyakov> To me, the obvious problem is that there are too many universities that claim/try to be "selective."
13:28:37 <Smerdyakov> In fact, there are no enough good students to fill the classes at all such schools.
13:29:28 <esap> ibid: I don't seem to remember him, but do have short memory on people's names/nicks.
13:29:40 <esap> ibid: s/do/I do/
13:29:58 <Smerdyakov> Does anyone agree or disagree with what I said?
13:30:25 <monotonom> Agree
13:30:26 <ibid> Smerdyakov: agree, provisionally :)
13:30:35 <monotonom> I mean yes, I agree or disagree :D
13:32:05 * esap has only heard that universities are pressured to take more students every year...
13:34:09 <ibid> esap: say that again :)
13:34:50 <Smerdyakov> Step 1. Require programming class for all citizens.
13:34:56 <ibid> i think our intake is on the order of 80 students a year
13:35:11 <ibid> our ~50 graduates last year was a record
13:38:11 <Marvin--> SyntaxNinja: hrm, looking at the patguard paper, this probably won't be as simple as I thought
13:39:00 <Smerdyakov> Hm. My universty has 33,000 students. :)
13:39:22 <ibid> that was for our department only
13:39:31 <ibid> we have some 15000 students in the whole university
13:39:42 <Smerdyakov> I still win. HAHA
13:39:57 <ibid> yes :)
13:40:03 <ibid> which uni, btw?
13:40:29 <Smerdyakov> University of California, Berkeley
13:40:45 <Marvin--> SyntaxNinja: I mean, if you just want generators, that's simple, but the general case... sheesh, the semantics of this beast is deeply entrenched in the middle of the rest of the pattern matching rules
13:40:52 <ibid> Smerdyakov: *drool*
13:41:00 <ibid> wrong country, though
13:41:08 <Marvin--> evilness like  case () of { () | q -> e ; _ -> e' }
13:41:19 <Smerdyakov> ibid, wrong country in what sense?
13:41:29 <ibid> Smerdyakov: i will never enter the usa
13:41:29 <earthy> in the sense that I'd really not want to live there
13:41:40 <ibid> Smerdyakov: the country scares me
13:41:45 <earthy> and that I'll avoid it wherever I can
13:42:05 <ibid> Smerdyakov: scared me even before george iii got the power
13:42:18 <SyntaxNinja> Marvin--: yuck
13:42:49 * SyntaxNinja reports ibid and earthy to the US thought police
13:43:03 <ibid> :)
13:43:11 <SyntaxNinja> (there's an online form ;) )
13:43:16 <ibid> SyntaxNinja: they already know about us
13:43:17 <anduril1> syntaxninja: no need, they already know
13:43:28 <anduril1> they always know . . .
13:43:30 <ibid> which explains 23:41  <ibid> Smerdyakov: i will never enter the usa
13:43:31 <SyntaxNinja> heh
13:43:44 * Smerdyakov tries to think of examples to express to his European friends how foreign news can paint an inaccurate picture of daily life in a country.
13:44:03 <earthy> heck, I don't care about the US thought police. I worry more about the Dutch thought police, me being from a military dictatorship and whatnot
13:44:27 <SyntaxNinja> seriously, though, it's not _that_ scary, is it?
13:44:43 <esap> smerdyakov: I think it's not the news, I think it's all that law drama in TV :-)
13:45:02 <earthy> (explanation: I was born in Brazil in 1975... Brazil was a military dictatorship from the late 1960's to halfway into the 1980's... I moved to .nl in 1982)
13:45:12 <Smerdyakov> The USA is probably the best country in the world for graduate study in technical areas.
13:45:20 <Smerdyakov> Because our government is so damned GENEROUS in funding students.
13:45:25 <earthy> in general, you may well be right
13:45:34 <ibid> Smerdyakov: i can appreciate that
13:45:46 <earthy> there are specific places that are almost as good outside the US
13:45:50 <Smerdyakov> I have government funding year 'round for the next 5 years.
13:45:53 <earthy> depending on your filed of study
13:45:55 <Smerdyakov> Will you find that outside the USA?
13:46:03 * earthy has government funding for 4 full years
13:46:17 <ibid> Smerdyakov: i had government funding for 55 months for my first masters degree
13:46:17 <Smerdyakov> earthy, well, from the time I started, it makes 6 years. :P
13:46:23 <SyntaxNinja> Marvin--: I really don't grok why that foo' implementation works.  I had assumed that case only matched things on the left side of the binding.
13:46:43 <ibid> Smerdyakov: and it is possible to get up to four years of government funding for graduate study
13:46:52 <earthy> this is just for the PhD. The master's was funded for five years.
13:46:53 <Smerdyakov> ibid, how is the living stipend?
13:47:08 <Marvin--> SyntaxNinja: unification, man, unification :)
13:47:09 <ibid> Smerdyakov: oh, that was the living stipend
13:47:14 <ibid> Smerdyakov: the tuition is free
13:47:25 <ibid> Smerdyakov: government-funded for everybody who gets in
13:47:36 <Smerdyakov> ibid, OK. Tuition is effectively free here, in that every funding source includes it.
13:47:40 <SyntaxNinja> Marvin--: I'm in awe
13:47:41 <SyntaxNinja> ;)
13:47:57 <ibid> Smerdyakov: of course, the living stipend could be better, but it's enough to get by
13:48:01 <Marvin--> SyntaxNinja: I mean, it's not a question of pattern matching, it's a question of typing
13:48:39 <SyntaxNinja> Marvin--: yeah, but I thought case statements worked by pattern matching
13:48:43 <ibid> Smerdyakov: they tell me that i might get three-year funding for my phd studies with part-time teaching requirement (i am wired that way, i prefer positions where i get to teach)
13:49:16 <SyntaxNinja> Marvin--: but I'm new to 1) dynamics, 2) pattern guards and 3) template haskell, so I'm learning a lot :)
13:49:22 <Smerdyakov> It doesn't count if you have to earn the money. :P
13:49:29 <SyntaxNinja> (I try to avoid extensions, but I have recently given that up)
13:49:50 <Marvin--> SyntaxNinja: well, the only trickiness is in the dynamics
13:50:12 <ibid> Smerdyakov: it's not that i earn the money by teaching, it's that it's a job where i teach part time and research part time
13:50:38 <SyntaxNinja> Marvin--: trickiness?
13:50:40 <ibid> Smerdyakov: it is possible to get up to four years of government funding for graduate study without teaching requirements
13:50:52 <Marvin--> SyntaxNinja: fromDynamic (toDyn "abc")  has the type  Typeable a => Maybe a,  right?
13:51:05 <ibid> Smerdyakov: i am just wired weird - i prefer to get teaching duties occasionally
13:51:33 <SyntaxNinja> Marvin--: ja
13:51:36 <Marvin--> SyntaxNinja: but because the dynamic carries around a representation of its type, when you unify a with String, it'll return Just "abc" and if you unify it with some other type, like Int, it'll return Nothing
13:51:50 <ibid> Smerdyakov: oh, also beyond four years, but four years is the maximum without checkpoints
13:52:24 <SyntaxNinja> Marvin--: oh, I see
13:52:34 <esap> does the checkpoint mean you have to get something actually ready? or just that it's progressing? :-)
13:52:40 <Smerdyakov> ibid, I have a feeling the living stipend here for the big gov't fellowships is better. :)
13:52:49 <ibid> Smerdyakov: it's possible
13:53:01 <Marvin--> SyntaxNinja: the type annotation is needed (or it'd be ambigous), but *where* it is doesn't matter, because the type inference will unify all the occurrences
13:53:10 <ibid> Smerdyakov: these positions are all legally government jobs 
13:53:31 <ibid> Smerdyakov: some good things in that, some bad things
13:53:36 <Smerdyakov> ibid, how much does the average graduate student near you pay per month for housing?
13:53:53 <SyntaxNinja> man... speaking of the US... Ashcroft is saying that restrictions on sharing of info between the CIA and FBI (which were put in place to protect americans) are the problem. so as its reward for failing, of course, the FBI should get _more_ power, not less.
13:54:30 <SyntaxNinja> Marvin--: got it.
13:54:56 <ibid> Smerdyakov: anything from 150 euros (in student housing) and from 300 euros up (free market); 200 or 500 euros is probably typical, depending on whether they get student housing or not
13:55:03 <ibid> per month
13:55:27 <Smerdyakov> ibid, and what's the stipend per month?
13:56:06 <ibid> Smerdyakov: a typical graduate student salary is ~1000 euros after taxes
13:56:23 <Smerdyakov> So paying half your stipend on housing is typical? O_o
13:56:33 <ibid> Smerdyakov: the undegrad stipend is ~400 euros
13:56:38 <ibid> Smerdyakov: yes
13:56:55 <ibid> Smerdyakov: but then again, ~1000 is not a bad salary in government in general
13:57:10 <Smerdyakov> OK. Fellowships here are about 4 times housing cost in expensive areas like the SF Bay Area, and about 8 times housing in most places.
13:57:44 <ibid> well, my "stipend" (salary after taxes) is 1300 euros, and i pay ~180 euros for housing
13:58:01 <earthy> wow
13:58:10 <ibid> i am lucky in that i live in student housing
13:58:16 * earthy gets some 1200 euros after taxes
13:58:24 <earthy> but 350 of that gets spent on housing
13:58:29 <Smerdyakov> ibid, you are a student, but you also handle lecturer position for classes by yourself?
13:58:59 <ibid> the 1300 is approximate
13:59:15 <ibid> Smerdyakov: yes
13:59:23 <esap> The pay in government things is quite low though compared to what companies in general pay.
13:59:24 <Smerdyakov> ibid, is that common where you are?
13:59:26 <ibid> Smerdyakov: mind you, it's not typical
13:59:29 <Smerdyakov> OK
13:59:38 <ibid> Smerdyakov: well...
13:59:45 <Smerdyakov> I imagine that it's not fair to consider your stipend typical, either, then. :P
14:00:25 <Smerdyakov> To the extent where it deserves to be quoted as "stipend" like you said because a large part of it is really a teacher's salary. :)
14:00:29 <ibid> Smerdyakov: i am not the only one in our university in this position
14:01:15 <ibid> Smerdyakov: but it's mostly because we have a shortage of qualified phd's interested in university positions
14:01:23 <ibid> Smerdyakov: and it's cheaper to let us teach... ;)
14:01:50 <ibid> Smerdyakov: as i said, there are also true stipend-like salaries, i'm just wired weird, i like to get to teach
14:02:03 <Smerdyakov> <ibid> Smerdyakov: but it's mostly because we have a shortage of qualified phd's interested in university positions
14:02:04 <Smerdyakov> !!
14:02:10 <Smerdyakov> Quite the opposite here.
14:02:17 <ibid> Smerdyakov: and they are not that much lower than my salary
14:02:19 <Smerdyakov> We should send ours to you. ;)
14:02:29 <earthy> it seems to be on par for europe
14:02:47 <earthy> in .nl there's the same problem: too few qualified people
14:02:59 <earthy> it's just not at the level of lecturers yet
14:03:07 <earthy> but at the level of filling phd positions
14:03:11 <ibid> Smerdyakov: it's highly dependent on the discipline
14:03:24 <Smerdyakov> In the USA, PhD graduates from #1 ranked programs in the country end up at schools that don't even have research components.
14:03:39 <ibid> Smerdyakov: this is true for CS/IT in general and SE in particular
14:03:40 <Smerdyakov> There just aren't enough professor positions available.
14:04:08 <ibid> Smerdyakov: i would assume that many of them would not want to come here :) it's cold and these are government jobs and therefore not well-paid
14:04:43 <ibid> Smerdyakov: but in more traditional areas such as mathematics, philosophy etc, there is no shortage of qualified phd's
14:04:43 <esap> I might assume that the 'not well-paid' part is what causes the situation.
14:04:54 <ibid> true
14:04:58 <earthy> esap: part of it, yes
14:06:02 <ibid> Smerdyakov: in fact, in many math depts here even the assistant positions (that are supposed to be grad student positions with some teaching) are manned with phds, and most of them are not postdocs :)
14:07:02 <Smerdyakov> ibid, how much interaction between academia and industry is there in CS there? How common is it for a university research project to spin off into a successful company?
14:07:25 <ibid> Smerdyakov: don't know numbers on that, but it's not uncommon
14:07:45 * esap doesn't knoe about the 'successful' part :-9
14:07:51 <ibid> Smerdyakov: however, a majority of our research projects are funded with company money
14:08:13 <ibid> Smerdyakov: especially in CS
14:08:52 <ibid> Smerdyakov: there are some projects funded by academy of finland, but almost all other projects get their money from interested companies
14:08:59 <Smerdyakov> I think a majority are government-funded here... but maybe not by much.
14:09:20 <Smerdyakov> The US military and national security apparatus fund a lot of stuff, including me. ;)
14:09:29 <ibid> Smerdyakov: most of the rest are one-man or two-man projects where the researchers are in teaching positions in the university
14:09:52 <ibid> (academy of finland is government funding)
14:10:24 <ibid> Smerdyakov: there is some defence-funded projects, but they are not the majority
14:11:11 <ibid> of course, our military is sitting on its wwii laurels and playing with hornets
14:11:41 <ibid> i sometimes fear what would happen to us if we got involved in a real war
14:11:53 <Smerdyakov> Who would want to fight with Finland? :D
14:12:13 <ibid> russia is the old enemy
14:12:34 <Smerdyakov> Those bastards
14:12:57 <ibid> the most likely scenario for a war that involves finland now would involve an expanditionist russia 
14:13:20 <SyntaxNinja> l8r
14:13:23 <Smerdyakov> That doesn't sound very likely.
14:13:40 <ibid> Smerdyakov: you don't have a border with russia
14:13:56 <Smerdyakov> Where can I get one cheap?
14:14:07 <esap> easy, just move here :-)
14:14:14 <ibid> Smerdyakov: come here to teach haskell :)
14:14:49 <Smerdyakov> I want to start a non-university organization that teaches functional programming to young children and stodgy industry professionals.
14:14:58 <mattam> russia is to busy with tchetchnia to start another war before long
14:15:07 <ibid> Smerdyakov: some parts of the russian opposition are expansionist
14:15:25 <ibid> Smerdyakov: if they should get the power...
14:15:41 <earthy> oh, goody
14:15:53 <earthy> cse.ogi.edu seems to be unreachable from where I'm on the net
14:16:26 <Smerdyakov> Well, I've connected to it.
14:16:30 <Smerdyakov> Let's see if it sends anything bac.
14:17:11 <Smerdyakov> Nope. Empty document.
14:17:32 <Smerdyakov> OGI is weird.
14:17:41 <Smerdyakov> They are like the fly-by-night graduate school.
14:18:05 <Smerdyakov> Their deadline for letting you know if you got in is just around the time the other schools require you to decide whether or not to accept their offers.
14:18:36 <earthy> otoh, they seem to do cool stuff
14:19:23 <Smerdyakov> I think they don't have much talent in graduate students, though.
14:21:35 <ibid> bah, i should be writing about herbrand structures
14:23:28 <jasonw> I got notified by OGI that I got in before most other schools had said yes/no.
14:25:09 <Marvin--> er, how do I turn a DecQ into a Q [Dec]
14:26:13 <Marvin--> ah, sequenceQ
14:27:51 <Smerdyakov> jasonw, I'm going by someone else's story. Maybe I have remembered it wrong.
14:28:37 <jasonw> However, OGI was weird in that they wanted a response in two weeks rather than the customary April 15th deadline.
14:28:52 <Smerdyakov> Oh, maybe it had it backwards.
14:28:58 <Smerdyakov> s/it had/I had
14:29:34 <Smerdyakov> jasonw, so how did you respond?
14:30:23 <eixei> hi everyone
14:30:59 <jasonw> I responded 'No' about a month later.
14:31:29 <Smerdyakov> jasonw, so where are you going?
14:32:57 <jasonw> UChicago.
14:47:05 * Marvin-- sighs
14:48:20 <Marvin--> I wanna do a PhD too :(
14:48:59 <Smerdyakov> Marvin--, prudence suggests that applying to but a single program is not the way to optimize your chances of doing that.
14:49:14 <Marvin--> Smerdyakov: gee, thanks, as if I didn't know hat
14:49:16 <Marvin--> that
14:49:22 <Smerdyakov> Marvin--, then why did you only apply to one? :P
14:49:37 <Marvin--> because I didn't have the time to do it properly dammit
14:50:58 <shrimpx> Smerdyakov: you're 1 year into yours?
14:51:40 <Smerdyakov> shrimpx, nearly
14:52:04 <Marvin--> I need to figure out a list of interesting places and when I should have applied, so I don't miss the deadlines next year
14:52:09 * Marvin-- sighs
14:53:52 <Smerdyakov> Marvin--, does anyone give a presentation on applying to graduate schools at your university?
14:54:05 <shrimpx> heh
14:54:13 <shrimpx> we need that around here
14:54:15 <Marvin--> Smerdyakov: no :/
14:54:24 <Smerdyakov> We had one every year at CMU.
14:54:32 <Smerdyakov> Very helpful
14:54:49 <Marvin--> all in all, this education feels very seriously not aimed at producing researchers
14:54:56 <Smerdyakov> But, don't fret, you can get the next best thing!
14:55:06 <Marvin--> seeing as they weren't a least bit interested in me
14:55:32 <Smerdyakov> http://www-2.cs.cmu.edu/~harchol/gradschooltalk.pdf
14:55:49 <Marvin--> I'll have a look, thanks
14:55:52 <Smerdyakov> Probably not quite calibrated for a European audience, but helpful all the same
14:56:13 <jasonw> Yeah, I found it helpful when I was applying, etc.
14:56:20 <shrimpx> a) gpa and gre doesn't matter much, research experience and personal statement are the key and b) gpa and gre totally matter if you come from a crappy university
14:56:28 <shrimpx> heh
14:57:07 <Smerdyakov> Yeah, but who's fault is it if you come from a crappy university? :P
14:57:16 <shrimpx> haha
14:57:18 <Marvin--> gpa? gre?
14:57:31 <Smerdyakov> Marvin--, GPA = average of numeric scores for marks in classes
14:57:40 <Smerdyakov> Marvin--, GRE = standardized test for grad school applicants
14:57:44 <Marvin--> oh
15:05:31 <Marvin--> it's kinda hard to compete when the people they called to interviews all had published papers
15:05:41 <Marvin--> kinda sucks
15:06:04 <Smerdyakov> You can distinguish yourself in other ways.
15:06:32 <Marvin--> the local students that were called all had part-time project employment with various research projects at the institution
15:07:08 <Marvin--> unfortunately, there was no money for hiring me or someone else at the cover project, they spent it on postdocs instead
15:07:33 <shrimpx> Marvin--: you can find a research project to slave on at any university
15:07:54 <shrimpx> as an undergrad
15:08:51 <Marvin--> well, I sort of have, my ~MSc is very closely related to a research project here
15:11:07 <Marvin--> but apparently not interesting enough
15:25:40 <Marvin--> yay, Kill Bill vol2 soon
15:26:16 <wagle> i thought the southpark movie already was out
15:26:49 <skew> kill bill /= south park
15:27:09 <wagle> really?  did you see the southpark movie?  8)
15:37:30 <monotonom> Rather, did you see Kill Bill vol1?
15:37:55 <Marvin--> very strange movie
15:56:40 <Marvin--> time to hit the sack
15:56:59 <earthy> almost
15:57:01 <earthy> but not quite
15:57:11 <earthy> I still have to send out the call for contributions
15:57:19 * Marvin-- is going to read some V For Vendetta
19:12:04 <Pseudonym> I fear I have spoiled my child.
19:12:33 * Pseudonym sighs
19:12:35 <Riastradh> Take away some of her memory and swap space so she starts thrashing without you needing to do it directly.
19:12:58 <Pseudonym> Well, she does it on her own.
19:13:13 <Pseudonym> The problem in this instance is that this weekend, she discovered that letters have names.
19:13:23 <Pseudonym> I was wearing a Perl t-shirt at the time.
19:13:31 <Riastradh> Oh dear..
19:13:33 <Pseudonym> And she was pointing to letters and asking me to name them.
19:13:42 <Pseudonym> P, E, R, L and the silhouette of a camel.
19:13:44 <Riastradh> What on earth were you doing wearing a Perl t-shirt?
19:14:02 <Pseudonym> The problem is now that any letter which she doesn't recognise must a priori be named "camel".
19:14:19 <Riastradh> You could have at least been wearing my HM t-shirt.
19:14:27 <Pseudonym> Or one with a large lambda.
19:14:53 <Pseudonym> Yes, with the HM t-shirt, any letter would be called "entails".
19:15:12 <Riastradh> I've been thinking about designing another, simpler t-shirt to add to the skicalc shop, one with the text 'Taming <lambda>,' and with an apt quote from Olin Shivers' dissertation.
19:15:26 <Smerdyakov> Riastradh, sounds dumb
19:16:06 <Riastradh> Smerdyakov, to bring that down to your level, 'just like you!'
19:16:21 <skew> I like Olin Shivers' little advisor bio
19:16:31 <Smerdyakov> Riastradh, to be more exact, I don't think many people in the FP community would give a "hey, cool!" response to that idea.
19:16:48 <Riastradh> Smerdyakov, how much do you think I care?
19:17:01 <monotonom> I am tired of repeating "deriving (Read,Show)" after every data type declaration.  Is there a way to tell ghci to do that for me?
19:17:16 <Riastradh> I'm really doing this just because I've worn out a lot of my t-shirts lately and I'm running low on them.
19:17:54 <Smerdyakov> "Hey, look, it's that guy who prints people's dissertations on T-shirts." "Stay back."
19:18:14 <Riastradh> ...mind-numbingly hilarious, Smerdyakov.
19:18:37 <Smerdyakov> "He is a weird individual." "I also agree on that."
20:21:15 <pimpbot5000> hi, does anyone know if getCPUTime, as implemented in GHC, accounts for C function calls?
20:22:54 <anduril1> c function calls?
20:23:07 <pimpbot5000> yea, via the FFI
20:23:39 <anduril1> I don't know what you mean
20:23:51 <Smerdyakov> anduril1, then you shouldn't be trying to answer this question. ;)
20:24:05 <anduril1> I suppose
20:25:05 <pimpbot5000> lets say i have a function that makes an FFI call to a C function (which takes a long time to execute).  when i measure the outer haskell call with getCPUTime, does the C function get accounted for?
