01:46:37 <Universe> hi everybody
01:47:20 <Universe> what's happening here?
01:47:48 <Universe> are you all locked out in the bathroom?
02:02:46 <Universe> ll
02:02:51 <clausen> ?!
02:03:10 <Universe> hi
02:03:54 <Universe> ciao
02:03:58 <clausen> hi
02:03:59 <Universe> bon sour
02:04:07 <clausen> sour?
02:04:12 <clausen> == day?
02:04:23 <Universe> I don't know French
02:04:27 <Universe> sorry..
02:04:39 <Universe> you are the first one answering me
02:05:05 <Universe> are you busy?
02:05:57 <clausen> not really
02:06:14 <Universe> where you come from clausen?
02:06:19 <clausen> Australia
02:06:47 <Universe> wow.. we are so far... I'm from Italy
02:07:26 <Universe> do you like Haskell?
02:07:53 <clausen> in theory
02:07:57 <clausen> though I hardly ever use it
02:07:59 <Spark> its bon soir
02:08:11 <Universe> hi spark
02:08:20 <Universe> for me also
02:09:41 <Universe> I have to make a thesis about askell and also implements a music program
02:09:54 <Universe> this will help me to graduate... I hope...
02:09:55 <Matt-W> wow, people awake
02:10:00 <Matt-W> morning everyone
02:10:01 <Universe> hi matt
02:10:27 * Matt-W has been playing with gtk2hs and liking
02:10:51 <Universe> what about you
02:10:53 <Universe> ?
02:12:46 <Universe> hi cptchaos
02:16:25 <Shammah> clausen: where in .au?
02:16:30 <clausen> melbourne
02:16:55 <Shammah> cool.  .bne here :)
02:17:23 <clausen> bne ?
02:17:33 <Shammah> brisbane
02:17:44 <clausen> I've never seen that abbreviation
02:17:51 <clausen> I guess it's been a while since I went to brisbane's airport
02:17:55 <Shammah> heh, it's the standard one.
02:20:00 <Shammah> mmm must start thinking about dinner.
02:20:07 * Shammah looks pointedly at Matt-W :)
02:21:31 <clausen> Shammah: I don't think Matt-W will be able to arrive in time for dinner :p
02:26:28 <Matt-W> clausen: I think you may be right
02:31:18 <Universe> !
07:01:14 <eixei> hi everyone
08:40:04 <jesse> how would i open a file for binary reading?
08:40:47 <jesse> nevermind
08:47:11 <Universe> hi
08:52:19 <Universe> llj
10:01:12 <eivuokko> Umm.  How is my HaskellDB fucked up when I get "Test1.o(.text+0x40):fake: undefined reference to `__stginit_DatabaseziHaskellDBziDAtabase_"?
10:08:15 <eivuokko> Eh . I guess that mean that the Windows installer doesn't bother to compile or install the libraries?  Great.
10:56:22 <Spark> seen ski
10:59:07 <shrimpx> @seen ski
10:59:07 <lambdabot> I saw ski leaving #haskell.se 2 days 19 hours 33 minutes 46 seconds ago
11:06:27 <Kh4n> hi
11:07:57 <Kh4n> the QuickSort example at haskell.org, its really amazing how simple it is compared to the C one...
11:08:19 <Kh4n> but itn't it possible to write a similar in C?
11:08:35 <Lor> Sure, it would just be awfully long. :)
11:09:32 <Kh4n> Lor: no. the C one is long there... but it is possible to write one like the Haskell QuickSort in C, nope?
11:10:04 <Lor> With proper libraries, the C code could be made shorter.
11:10:05 <ibid> Kh4n: sure. it would just be awfully long :)
11:10:06 <basti_> it'd be pretty hard... C lacks general list functions
11:10:13 <Spark> Kh4n: no, because C does not have good support for dynamically sized datastructures
11:10:21 <Lor> Then again, with a suitable library, all you have to do is to say qsort() :)
11:10:37 <ibid> Lor: then you could use sort in haskell :)
11:10:46 <basti_> I think in C++ it would be possible to write such a thing well, but it would also be longer
11:10:59 <Spark> in C++ it'd be the same as C
11:11:13 <basti_> no i mean, using C++ features
11:11:18 <Spark> with the structures in glib, you could do it quite neatly
11:11:23 <Kh4n> Oh, so it all depends on support for dyamic lists... not on Haskell being functional?
11:11:24 <basti_> to hide the list functions
11:11:37 <Spark> because you could append to one of two new lists depending on the pivot
11:11:38 <basti_> Kh4n i guess that's the main reasons
11:11:47 <Spark> recurse, and then join
11:11:53 <Spark> but it'd still be about 5x as long
11:12:14 <ibid> Kh4n: the main reason the haskell version is so readable is that haskell's syntax is much more compact and expressive than C
11:12:17 <Spark> Kh4n: functional languages are much more expressive =>  more expression on fewer lines
11:13:01 <Kh4n> Hmm...
11:13:07 <Spark> ibid: is there a core reason for this, could an imperative langauge that is very much in C's style, have as compact a syntax?
11:13:17 <ibid> Spark: sure
11:13:40 <Spark> i guess part of the problem is the explicit representation of state, in variables
11:13:43 <Kh4n> But then that Haskell QuickSort is just as simple in Python, nope? Python has lists, can cat then, can apply functiona to them. But tis still not functional at all...
11:13:56 <ibid> Spark: i believe the main reason is list comprehensions
11:14:05 <ibid> Spark: patterns are another
11:14:09 <vegai> did that qsort use laziness?
11:14:18 <ibid> Kh4n: pythn is quite functional
11:14:20 <vegai> python has comprehensions
11:14:29 <ibid> vegai: not particularly
11:14:31 <ibid> (laziness)
11:16:19 <vegai> hmm, I wonder...
11:16:47 <Lor> Comprehensions are just an alternative do notation, y'know.
11:17:00 <vegai> so?
11:17:01 <Lor> Since it's more compact, I'd prefer if you could use them for all monads, not just List.
11:17:34 * vegai rolls his eyes.
11:17:44 <Spark> list comprehension.. is that appending an element, or catting two lists together?
11:17:52 <Spark> should i say prepend
11:18:48 <basti_> list comprehension is this [ x*2 | x <- a ] feature
11:18:52 <Kh4n> Python is totally imperative, nope? They just stolen the look-and-feel from Miranda/Haskell and Icon/ABC...
11:18:58 <ibid> Lor: you used to be able to
11:19:05 <basti_> (this line would *2 every elemtent in a)
11:19:11 <Lor> Nothing is "totally imperative".
11:19:18 <Lor> Except perhaps assembly.
11:19:20 <ibid> Kh4n: now you are starting to get into semantics...
11:19:29 * basti_ .o° ( turing machines )
11:19:44 <ibid> Kh4n: there is no clear commonly accepted definition of what functional programming is
11:19:47 <Lor> Personally, I feel the imperative/non-imperative is just an insignificant syntactic detail.
11:20:00 <Lor> It's just about whether state is explicit in the syntax or not.
11:20:08 <ibid> to me, it's a difference in programming styles, not a language feature
11:20:30 <Kh4n> Lor: explicit state?
11:20:32 <Lor> Monads illustrate the issue pretty well.
11:20:43 <ibid> Kh4n: no implicit state, rather
11:20:48 <Spark> jeans, checked shirt, white t shirt, trainers, argh!
11:21:19 <Lor> You can view a monadic program at the same time as imperative (do notation) and as functional (what the do notation expands to).
11:21:58 <Kh4n> Monadic? Well, i am too n00b here...
11:22:35 <ibid> i'm considering taking my hacking life t-shirt to work tomorrow...
11:22:45 <basti_> that term scared s___ out of me...
11:28:01 <ibid> Kh4n: monadic is just a fancy way of saying action-based :) (well, that's not the whole story, but...)
11:29:19 <basti_> i'm hearing a "abstract datatypes" lecture this term
11:29:41 <ibid> basti_: monadic is an overloaded term, but in haskell, it has only one meaning
11:30:03 <Kh4n> ibid: being?
11:30:04 <Lor> Oh yeah, it always confuses me when someone says "monadic" and means unary.
11:30:44 <basti_> by now i pretty much know what an monad is and why it's useful
11:30:55 <Lor> Kh4n, you're better off reading the gazillion tutorials on the subject rather than hearing yet another one-liner summary.
11:31:01 <basti_> I even declared a monadic type myself, though just as an experiemnt .)
11:31:03 <ibid> Kh4n: action-based, more or less
11:31:12 <Spark> im not sure about monads yet, but when i get round to writing some haskell, i bet i'll find out that they are incredibly obvious :)
11:31:33 <Lor> Many things turn out to make nice monads.
11:31:43 <Lor> Those that don't, turn out to make nice arrows. :)
11:34:30 <jesse> monads i get... the distinction between monads and arrows... i dont.
11:35:10 <Spark> why is referential transparency useful?
11:36:03 <Spark> is that the right term>?
11:36:39 <ibid> depends on whether you mean it or not :
11:36:40 <Lor> arrows are static monads. Or monads are dynamic arrows.
11:37:06 <basti_> Spark uhm, you should ask, "why is not having referential transparency harmful?"...
11:37:21 <Spark> fair enough, i ask that instead :)
11:37:53 <basti_> non referential transparent would be, for example, when you can alter the value of a variable
11:38:14 <basti_> that is, having "side effects" to an evaluation
11:38:24 <basti_> like, maybe, changing some value or the other
11:38:34 <Cale> Having referential transparency basically means that your functions are actually functions.
11:38:40 <basti_> which you might not notice firsthand
11:39:06 <Kh4n> Spark: because "referential transparent" are thread safe automagically ;-)
11:39:21 <Kh4n>                                          ^programs
11:39:30 <basti_> this too
11:39:36 <Cale> Referential transparency is really handy for testing - you don't need to set up some context for the function to run.
11:40:07 <Cale> Which is why ghci makes an excellent debugger for most purposes.
11:40:44 <jesse> Lor: static how?
11:41:13 <Lor> Static in the sense that the action that follows the previous action must already be known at compile time.
11:41:22 <jesse> ok
11:41:26 <jesse> that makes sense
11:41:28 <Lor> Whereas a monadic action may choose dynamically which action to take next.
11:42:35 <jesse> so if arrows are an expression of some property of your program, what property would that be?
11:42:55 <Lor> Uh? Well, its syntactic structure.
11:45:11 <Kh4n> Haskell -> means the same as -> in math, nope?
11:45:38 <basti_> the sense is about the same but the context is different
11:45:43 <basti_> its used in lambda terms
11:45:52 <basti_> where mathematicans prefer "." for some reason
11:46:17 <Spark> shame theres no actual lambda in the haskell language :)
11:46:18 <Kh4n> Hmm... i am not a mathetacian either (YET) :-)
11:46:43 <basti_> the lisp machine actually had a lambda key
11:46:50 <Spark> cool
11:46:50 <Kh4n>                      ^macian either (YET) :-)
11:46:52 <ibid> basti_: -> is also used in types
11:46:56 <basti_> MetaTopL or something
11:46:58 <basti_> ibid yep right
11:47:00 <basti_> forgot that
11:47:04 <Kh4n> (whoops sorry...)
11:48:04 <basti_> there it's used correctly i think.
11:48:22 <Spark> yeah you're talking about a function, as a relation, as an ordered pair
11:48:38 <Spark> ie a mapping from the domain onto the range
11:49:00 <Spark> hmm i guess its not strictly used correctly
11:49:05 <Spark> its more of a partial function isnt it?
11:49:20 <basti_> mmh
11:49:42 <basti_> MMMH.
11:49:49 <Spark> then theres exceptions... :)
11:49:59 <Lor> Are you talking about the mathematical interpretation of computable functions?
11:50:40 <basti_> kinda
11:50:46 <basti_> more about the use of the -> symbol
11:50:51 <Spark> i dont think it matters at all, theyre worlds apart really
11:51:06 <basti_> haskell should use _!° in its place to avoid confusion
11:51:15 <basti_> .)
11:51:18 <Spark> heh what is that
11:51:28 <basti_> uhm i dont know
11:51:42 <Spark> i either dont have the right font, or thats not UTF-8 :)
11:51:42 <basti_> at least you couldn't confuse it and assign some meaning to it that it doesn't have
11:51:48 <basti_> no its ascii ;)
11:52:02 <Spark> nah its not ascii :)
11:52:13 <Lor> -> is not an arrow, it's a minus sign followed by a greater than -sign.
11:52:17 <basti_> its underscore-exclamantion mark-little circle
11:52:25 <Spark> little circle isnt ascii
11:52:29 <basti_> oh i see
11:53:02 <Spark> very lexical
11:54:43 * Kh4n LOL
11:54:59 <Kh4n> Haskell and math are not worlds apart...
11:55:15 <Kh4n> At least compared to most other computer languages...
11:55:19 <basti_> hehe
11:55:29 <basti_> "brainfuck" comes to mind .)
11:55:41 <tic> mm, bf... :)
11:55:41 <basti_> do you know? ;)
11:57:13 <Kh4n> Befunge is better ;-)
16:37:54 <sgiMIPS> hi :-)
16:38:40 <sgiMIPS> what book (textbook) would you suggest to read? totally new to programming, functional programming, haskell...
16:41:40 <Riastradh> http://www.htdp.org/ & http://mitpress.mit.edu/sicp/ -- they use Scheme, not Haskell, but many of the concepts you learn from them translate well to Haskell, and even those that don't are worth having learned anyways.
16:43:24 <sgiMIPS> Riastradh: thanx :-)
16:43:45 <Riastradh> (read them in that order, by the way; SICP will probably fly right over your head if you try it first)
16:48:17 <sgiMIPS> :-)
16:48:27 <sgiMIPS> cheers i go
16:53:00 <Pseudonym> I have a theory that these theoretical "how to program" textbooks are of more use to experienced programmers than to newbies.
16:53:13 <Pseudonym> Of course, I say this despite never having opened HTDP.
21:58:34 <skew> is there a library function for taking [Either a b] -> ([a],[b])
22:01:26 <Pseudonym> http://repetae.net/~john/computer/haskell/docs/GenUtil.html
22:01:37 <Pseudonym> Nothing standard, though.
22:14:40 <skew> "Subject: Re: Python-list, Exotic sex is urgently"
22:15:05 <Pseudonym> Clearly I'm using the wrong language.
22:15:14 <skew> grr, irssi is pretty sutble about which channel is active
22:15:32 <skew> It still beats some serious braindamage about configurations xchat suffers from, though
22:18:02 <skew> Pseudonym: did you ever find a nice way of writing communicating components?
22:19:30 <skew> I'm writing up a little demo program with channels
22:19:57 <Pseudonym> skew: Still haven't tried it.
22:20:00 <Shammah> jerub -  you active atm?
22:20:03 <Pseudonym> Been really busy with other stuff.
22:29:07 <skew> to a point it works well enough to have one channel recieveing messages in a request data type
22:29:36 <skew> and keeping your state in arguments to a family of mutually tail recursive functions
22:29:47 <skew> pure aside from the concurrency, like erlang
22:45:48 <Jerub> Shammah: am now~!
22:56:15 <skew> Pseudonym: I think I need to factor the state kept in the functions, into several logical subprocesses operating in parrallel
22:57:47 <skew> so logic for counting the number of clients, say, wouldn't need to be duplicated for evey state of the system
22:59:32 <skew> that in turn leads towrds using mutable variable for communicating information between different states
22:59:54 <skew> different parrallel aspects of the computation, rather
23:00:20 * Pseudonym nods
23:00:30 <Pseudonym> I'm interested in what you come up with eventually.
23:01:51 <skew> what is your interest here? I'm presenting my work in the context of modelling distributed systems
23:02:24 <skew> without too much thought about concurrent object stuff like E.
23:02:50 <skew> but if you care about anything in particular I can think about that too
23:19:27 <Pseudonym> I'm just curious what you end up with.
23:19:40 <Pseudonym> I do have a specific application in mind, but I'm writing that in C++.
