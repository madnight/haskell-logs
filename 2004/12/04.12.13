00:09:08 * wli bangs out a quick and dirty heapsort and wonders if there's a neater way to do it
00:10:21 <wli> this shouldn't take 33 LOC
00:14:26 <Itkovian> morning
00:18:08 <wli> where is treefold?
00:20:10 <earthy> heapsort in 33 loc in haskell?
00:20:29 <earthy> treefold? write-your-own.
00:20:43 <wli> sure, what's it supposed to be?
00:21:22 <dons> wli: you were asking a couple of days ago about too many weird extensions used in yi?
00:21:41 <wli> yes
00:21:53 * asmodai thwaps wli 
00:21:54 <asmodai> HI!
00:22:01 <dons> what was the problem?
00:22:07 <dons> (I'm the author of yi)
00:22:29 <wli> dons: I think some kind of template haskell extension I couldn't get a matching version of; I'll take a stab at building it real quick to see what goes wrong
00:22:34 <wli> asmodai: re
00:22:45 <asmodai> wli: How are you dude? ;)
00:22:50 <dons> wli: no, there is no TH in yi
00:22:59 <wli> dons: plugins
00:23:16 <kristnjov> what is yi?
00:23:24 <earthy> wli: something like  fold :: (a -> a -> b) -> a -> Tree a -> b; fold nodefun leafval (Tree left right) = nodefun (fold nodefun leafval left) (fold nodefun leafval right)
00:23:29 <kristnjov> sounds like some chinese dictator
00:23:32 <dons> oh, hs-plugins. there's no TH in that either, but I haven't tried to non-gla-exts it
00:23:47 <dons> kristnjov: http://www.cse.unsw.edu.au/~dons/yi.html
00:23:53 <earthy> fold nodefun leafval (Leaf x) = leafval
00:23:58 <wli> I use gla-exts
00:24:06 <earthy> wli: something *like* that (not exactly that ;))
00:24:11 <dons> hs-plugins is less portable than yi itself, however, as it depends on ghci's linker
00:25:01 <dons> but any build problems are very interesting, and bug reports are happily accepted ;)
00:25:32 <wli> dons: the plugins stuff had trouble, it seems
00:25:57 <wli> dons: dependency `template-haskell' doesn't exist
00:26:05 <dons> ah! you are using ghc-6.3/
00:26:06 <dons> ?
00:26:13 * vegai just built the latest yi successfully
00:26:37 <xkb> does yi build on osx?
00:26:44 <dons> very nicely :)
00:27:03 <xkb> nice.. /me darc's it out :P
00:27:21 <dons> wli: thanks for reminding me about this problem with template-haskell. I'll fix it now.
00:27:31 * dons kicks dons for not fixing it a couple of months ago
00:27:47 <dons> it's just a cpp issue in the package.conf file
00:31:59 <wli> it represents a type
00:32:03 <wli> like a template parameter in C++
00:39:50 <wli> DiabloD3: please, #haskell
00:54:38 <musasabi> Any ideas for building an optimized representation for packet filter rules in haskell?
00:59:57 <wli> packet filter rules, hmm
01:00:46 <wli> heaps seem to need counters
01:01:02 <wli> and so sort of defy the usual unannotated trees
01:02:04 <wli> I seem to have a CBT
01:05:24 <musasabi> The optimal search structure is probably a tree of some sort, but that should be optimized (dynamically?) according to the usage patterns to make the number of comparisons in the common case low.
01:05:40 * Lemmih is amused by John Skaller's emails.
01:07:10 <musasabi> Is there a functional equivalent of splay trees?
01:07:51 <wli> well, I just want pqueues
01:08:40 <Lemmih> Hey boegel 
01:08:42 <Itkovian> musasabi: I have an implementation in the Okasaki book
01:08:57 <boegel> hey everyone
01:11:37 <xkb> functional ds?
01:11:58 <xkb> how's that book?
01:12:05 <xkb> any good?
01:12:31 <Itkovian> I haven't read all of it ... lack of time :-)
01:12:39 <Itkovian> But it seems to be quite good, to me at least.
01:12:45 <xkb> hehe.. I know that problem :P
01:13:43 <musasabi> Itkovian: where?
01:13:48 <Itkovian> the main stuff is in SML, but at the back all the code is given in Haskell as well
01:14:03 <boegel> Itkovian: if you don't know it, you should consider 'Haskell School of Expression'
01:14:15 <Itkovian> msasabi: I'm googling for the man's home page, but no luck yet. I thought he had a lot of the code on it...
01:14:39 <musasabi> I can only find page 21 saying " not all forms of self-modification typically used in"
01:14:42 <musasabi> amortized ephemeral data structures can be encoded as lazy evaluation. In particular, splay-
01:14:45 <musasabi> ing [ST85] does not appear to be amenable to this technique.
01:14:47 <musasabi> .
01:15:12 <musasabi> That is in "Purely functional data structures"
01:16:01 <xkb> hmm what was that thing about plugins and yi again?
01:16:13 <xkb> what ghc version should I use?
01:16:51 <Itkovian> that reference only appaers on page 46, 55, 59 in my copy ...
01:17:02 <Itkovian> let me take a closer look ...
01:17:31 <Itkovian> p 219: splay trees:: 46-52, 56, 59, 198
01:18:21 <xkb> my ghc cant find package plugins
01:18:29 <Itkovian> p 46... In fact, as we will see, splay trees make an excellent implementation of heaps.
01:18:33 <Lemmih> xkb: You have to install hs-plugins first.
01:19:00 <xkb> ok.. I thought I installed it allready :?
01:19:05 * xkb checks
01:19:11 <Itkovian> musasabi: what ISBN nr does your copy have? mine has 0-521-66350-4
01:20:03 <musasabi> but the examples do have a SplayHeap.hs 
01:20:29 <musasabi> this is the version available online, I don't sadly have the real thing..
01:24:05 <xkb> whats the best way to install hs-plugins on os? Using darwinports
01:24:07 <xkb> ?
01:26:38 <Lemmih> xkb: You need a fairly new version so I think the best way is via the CVS archive.
01:26:48 <xkb> ok
01:28:25 * Lemmih wonders when bringert will be back.
01:29:19 * musasabi tries to undestand splay heaps
01:31:47 <Itkovian> you found them?
01:32:05 <musasabi> yes, but only the source code.
01:32:45 <musasabi> It seems that that memory allocation is O(log n) on insert - or does lazyness make that smaller?
01:33:02 <Itkovian> erm ...
01:34:41 <Heffalump> lemmih: back from where?
01:35:16 <Lemmih> Heffalump: I have no idea. I only know he's not here.
01:35:20 <musasabi> It seems to descend partiytion till one leaf in an lazy fashion - which seems to imply that - but how much of the work/allocation is really done?
01:36:04 <Heffalump> I sent him some darcs patches yesterday.
01:38:28 <xkb> hmm do I need any other steps to install plugins? I dled cvs snapshot, build it with prefix /usr/local. make install. Still yi build fails on missing package plugins
01:38:51 <xkb> ghc is in /usr/local/bin
01:39:03 <musasabi> xkb: you need to "make register"
01:39:09 <xkb> ok
01:39:12 <musasabi> in the hs-plugins directory.
01:39:12 <Itkovian> I have just emerged hs-plugins, but it ddoesn't seem to be registered with ghc ... maybe you need to do that as well xkb
01:39:55 <xkb> musasabi: thanks.. that did the trick
01:40:13 <Lemmih> Hey bringert 
01:40:21 <Lemmih> Speaking of the sun.
01:40:35 <Heffalump> lol
01:43:16 <bringert> hi
01:45:17 <Itkovian> musasabi: check this: http://www.eecs.usma.edu/Personnel/okasaki/pubs.html#cup98
01:49:04 <musasabi> yes, I am looking at the code.. Have to order the book though..
01:50:37 <Itkovian> You won;t regret it, I think
02:00:00 <aleator> hi!
02:00:03 <Itkovian> how do I add packages locally?
02:00:07 <Itkovian> to ghc I mean
02:01:03 <Itkovian> Can I just edit ~/.ghc-packages?
02:01:12 <xkb> is it possible to use vimrc like files for yi?
02:01:27 <Lemmih> Hey aleator 
02:08:50 <Itkovian> hmm ... ok, it seems to work...
02:10:42 <wli> hm?
02:14:33 <musasabi> I am not sure whether SplayHeaps could be adapted to SplayTrees
02:15:10 * musasabi is unsure whether to try some clever lazyness or IO/ST
02:16:37 <Itkovian> I'm afraid I cannot really help you with that ...
02:16:51 <Itkovian> Any ideas what I am missing for 'yi': Boot.hs:171: Variable not in scope: `makeAll'
02:16:56 <Itkovian> when building the thing
02:23:32 * aleator tries to choose between long parameter list or reader monad..
02:28:05 <Itkovian> reader monad?
02:28:47 <musasabi> aleator: or a record containing the data.
02:29:06 <aleator> Hmm..
02:29:19 <musasabi> usually I just refactor
02:30:41 <aleator> The problem in question is a drawing function: "strokePath -> Path -> Color -> Width -> Transformation". I've noticed that atleast the last parameter tends to persist through many calls.
02:31:17 <aleator> (Forgot the -> IO () :)
02:31:18 <musasabi> you could use partial evaluation.
02:31:35 <musasabi> (having common arguments in front makes that more nice)
02:31:44 <aleator> True.
02:34:09 <aleator> I was originally going to go with: "withImage x $ withScaling a $ do strokePath p r c" -style
02:52:37 <bringert> what wiki implementation would you recommend for a new wiki?
02:53:02 <bringert> shapr: you're the wiki man, what do you think?
02:53:39 <ibid> the only good wiki i've seen is mediawiki :=
02:53:52 <ibid> from a user pov
02:58:13 <bringert> that's the one wikipedia uses, right?
02:59:08 * musasabi uses an extensively hacked usemod and pmwiki for different purposes
03:00:40 <ibid> yeah
03:33:35 <aleator> Ok. first and very muddy iteration example of agg based haskell drawing lib is available at http://www.cc.jyu.fi/~aleator/exmpl1.html.
03:35:15 <aleator> -iteration
03:36:41 <musasabi> pretty ^_^
03:37:11 <Itkovian> idd
03:37:31 <aleator> Too bad that I can't take credit for the image quality.
03:37:50 <ibid> agg?
03:38:03 <aleator> www.antigrain.com
03:38:03 <bourbaki> moin
03:44:03 <Itkovian> dons: I've seen you're interested in correctness of FP stuff, is that right?
03:54:53 <musasabi> What would be the best thing for a small hashtable - Data.HashTable seems to have nasty overheads.
03:55:15 <musasabi> This should have 20-50 entries..
03:55:41 <ibid> hashtables cannot work fast in purely functional context
03:55:45 <bourbaki1> isnt a linear table better for 20-50 entries anyway?
03:56:06 <ibid> but if you are willing to settle with search trees, Data.FiniteMap is good
03:56:15 <bourbaki1> what was the time complexity of hashtables again?
03:58:09 <bourbaki1> is there something like a perti net but with data flow that is that the tokens have actually a type?
03:58:58 <musasabi> well I don't care about update costs in this case very much.
03:59:18 <wli> perfect hashing then =)
03:59:19 <musasabi> I think there is going to be an update for every 20000 lookups.
04:00:24 <musasabi> hmm that could work..
04:02:02 <bourbaki1> anyone in here who does genetric programming with haskell?
04:02:13 <wli> geriatric programming? whoa
04:02:28 <bourbaki1> :)
04:02:38 <bourbaki1> genetic
04:04:46 <boegel> bourbaki: why do you join twice ? :s
04:20:54 <shapr> bringert: MoinMoin is nice, but I'm switching to Flippi since it's written in Haskell.
04:22:25 <shapr> Itkovian: do you have the latest hs-plugins version?
04:22:37 <Itkovian> iwell, I've got the 0.9.6
04:22:48 <Itkovian> no makeAll anywhere ;-)
04:23:48 <shapr> you may need the latest nightly
04:25:17 <Itkovian> all rightie, i'll get that.
04:26:06 <shapr> ola arauko 
04:26:17 <shapr> ¿como est as?
04:27:22 <arauko> shapr, hola :-)
04:27:24 <arauko> Bien y tu?
04:27:34 <shapr> muy bien!
04:27:43 <arauko> :-)
04:27:54 <shapr> it's a great day for programming.
04:29:16 <bourbaki1> because my other connection died
04:29:23 <arauko> shapr, realy?
04:30:01 <shapr> It's twenty degrees below zero, it's snowing, and the sun is just going down.
04:30:21 <shapr> I'm lucky that I have a job where I can cuddle up to the warmth and light coming from my computer monitor.
04:30:38 <irce> shapr: where are you ?
04:30:55 <tuomov> somewhere around arctic circle
04:30:59 <shapr> Hidden under a snowdrift 90km south of the Arctic Circle.
04:31:32 <shapr> heippa hei irce, mittä kuulu?
04:32:12 * shapr again pretends to speak Finnish
04:32:49 <shapr> irce: where are you?
04:32:50 <irce> shapr: well just got me a Nokia 6600.
04:33:17 <shapr> I have an old 6310i it has bluetooth but a weenie display.
04:33:23 <irce> espoo near helsinki 
04:33:32 <shapr> Ah, the center of Finnish tech
04:33:48 <shapr> I used to work for a company that has headquarters in Espoo.
04:35:02 <shapr> I want a cellphone that runs Haskell instead of Java :-)
04:35:49 * Lemmih is one of the few teenagers without a cellphone.
04:36:57 * wli tries to cook up a monadic interpreter
04:37:24 * shapr tries to interpret monads.
04:37:33 <wli> presumably the method of going about this is to constrain the thing to be several monad instances, right?
04:37:38 <wli> several simultaneous ones, that is
04:37:52 <shapr> like monad transformers?
04:38:05 <wli> I can't say I understand it well enough to say.
04:38:24 <shapr> in short, yes
04:39:01 <aleator> Hmm.. I think I have a funny language with largish stack of monads somewhere..
04:39:17 * Itkovian hasn't got a gsm either
04:39:21 <wli> okay, and after I construct all the monad instances, somehow this adds up to an interpreter?
04:39:36 * Itkovian is carrying around his wife's gsm atm.
04:39:59 <wli> i.e. I can carry out this process entirely by defining monad instances?
04:40:12 <johs> I'm curious about something on the PLEAC-Haskell site. The expression "first = s!![0]".
04:40:16 <johs> It does not make sense.
04:40:27 <johs> But is there a version of Haskell for which it makes sense?
04:40:40 <johs> (As far as I can tell, !! takes an integer, not a list.)
04:41:11 <johs> Also, "s.last" where s is a string is pretty strange.
04:42:03 <johs> (http://pleac.sourceforge.net/pleac_haskell/strings.html )
04:42:46 <johs> Oops, sorry.
04:42:55 <johs> Disregard my questions, please. :)
04:43:31 <johs> Will try to properly RTFM in the future.
04:48:04 <psi> does anyone know if ghci is included in the ghc package in pkgsrc? (netbsd's ports)
04:48:18 <psi> i'm asking because it's not included in openbsd's package
04:49:42 <johs> Can't you just look in the plist?
04:50:49 <psi> thanks, i didn't know about that
04:50:54 <psi> yes, it's included
04:52:08 <wli> shapr: I'm attempting to grok the examples of this in papers.
04:56:53 <psi> ah, it's included, but when launched this message is given:
04:56:59 <psi> ghc-6.2.1: not built for interactive use
04:57:21 <johs> Maybe a build-option? Have you checked the makefile?
04:58:15 <psi> no, i wanted to try the package first. last time I built ghc it took many hours :)
04:58:19 * psi checks
04:59:55 <psi> i'm not sure if i'm reading it correctly, but i can find no such option
05:00:27 <psi> google might give a reason for this
05:03:20 <balkan> i have a file containing some rows that i would like to sort and output to a new file. is that a task for haskell?
05:03:53 <Lemmih> It can be done easily in Haskell.
05:04:02 <balkan> tell me.
05:04:49 <boegel> balkan: how do the rows look like ? what is in them ? do you have in expercience with Haskell ? in what format should they be written out ?
05:04:51 <boegel> tell us :p
05:05:23 <Itkovian> balkan: you can just as easily use bash, perl, python ... but using haskell could be nice too
05:05:24 <balkan> ok...the rows are just plain text strings. they should be sorted in alphabetical order.
05:05:37 <kosmikus> something like "main = interact (unlines . sort . lines)"
05:05:37 * Itkovian hopes the imperative pogrom hasn't started yet
05:05:49 <balkan> i want to lean haskell, so this could be a good practise.
05:05:58 <Itkovian> sure
05:06:14 <Lemmih> balkan: readFile "in" >>= writeFile "out" . unlines .Data.List.sort . lines
05:06:36 <balkan> that's a oneliner...nice!
05:06:38 <Itkovian> maybe you want to sort to certain fields in the file?
05:06:45 <kosmikus> my oneliner is shorter ;)
05:06:54 <Itkovian> just use unix sort, no?
05:07:04 <Itkovian> or are you on a windoze machine balkan?
05:07:12 <balkan> not yet. there a just some names in that file i wish to sort. running windoze yes..sorry about that.
05:07:17 <Itkovian> heh, np.
05:08:03 <Itkovian> balkan: use whichever OS you feel comfy with ...
05:08:29 <balkan> well i feel comfy with linux, but my employer doesn't!
05:08:44 * shapr boings
05:08:58 <shapr> I feel comfy with Linux, and my employer feels comfy with me.
05:09:37 <tintin> shapr: you are your own employer :)
05:09:47 <shapr> well, yes.
05:09:52 <shapr> that does make it easier.
05:10:26 * tintin puts on his Sherlok cap
05:10:59 <tintin> shapr: do you program Haskell commercially ? 
05:11:41 <shapr> yes
05:11:43 <shapr> right now in fact
05:11:55 <shapr> Though admittedly, this is only the second time 
05:12:08 <shapr> I would very much like to have more paying Haskell work.
05:13:02 <balkan> Itkovian: is it possible to run your little program with hugs?
05:13:04 <tintin> its faster than c programming ? 
05:13:05 <shapr> On the good side, the work I'm doing right now is setting up a simple Haskell app I wrote myself.
05:13:21 <Itkovian> balkan: which program?
05:13:26 <shapr> C is much faster according to execution speed, but Haskell is much faster according to programmer speed.
05:13:37 <balkan> Itkovian: the file sort
05:13:39 <shapr> I wrote curryspondence in three or four evenings.
05:13:40 <wli> I use Haskell commercially in certain respects.
05:13:48 <tintin> ah yes i did mean the programming speeed 
05:13:48 <Itkovian> shapr: i think ocaml is closing the speed gap quite fast ...
05:13:55 <Itkovian> I'd hope haskell can follow suit
05:14:10 <wli> Scripting, logfile and data file processing, and the like are part of what I do for a living.
05:14:10 <tintin> ocaml came in after Haskell ?
05:14:12 <Itkovian> balkan: it's a unix sort, not haskell :-)
05:14:29 <wli> Though not a large part.
05:14:36 <wli> There is zero language dependence for those.
05:14:39 <Itkovian> balkan: maybe it makes agood excercise for my students :-)
05:14:44 <balkan> this is unix? readFile "in" >>= writeFile "out" . unlines .Data.List.sort . lines
05:14:49 <wli> And I do them largely in Haskell.
05:14:53 <Itkovian> Hey, I didn't post that!
05:15:03 <Itkovian> Lemmih did
05:15:03 <wli> balkan: unix sort does more
05:15:07 <wli> balkan: read the manpage
05:15:22 <Itkovian> wli: he's on windows ... although he could read the man pages online
05:15:23 <balkan> Itkovian: sorry, i was mistaken!
05:15:28 <Itkovian> balkan: np!
05:15:47 <shapr> Itkovian: the difference in execution speed is so small compared to the difference in programmer speed, that I really don't care.
05:15:47 <balkan> Lemmih: readFile "in" >>= writeFile "out" . unlines .Data.List.sort . lines    how can i run this in hugs?
05:16:00 <wli> Itkovian: That probably puts him beyond my help; I'm not really good at dealing with Microsoft environments.
05:16:07 <Lemmih> balkan: Enter it at the prompt.
05:16:15 <Itkovian> wli: aren't you the linux kernel guy?
05:16:21 <shapr> All of the code I've written so far requires correct results for as little money as possible.
05:16:28 <Lemmih> balkan: But type ':l Data.List' first.
05:16:28 <wli> Itkovian: I'm the same wli who does linux kernel hacking
05:16:30 <tintin> create a compiler in ASM :D for haskell would that improve speed of execution ?
05:16:43 <Itkovian> thought so ...
05:16:46 <balkan> Lemmih: ok
05:16:47 <shapr> Since I can write a correct Haskell program in just a few hours...
05:17:00 <wli> Itkovian: I'm amazed anyone's heard of me.
05:17:09 <shapr> wli: I think many people have heard of you.
05:17:21 <wli> shapr: good things I hope
05:17:26 <shapr> You did a big part of IBM's NUMA, yes?
05:17:36 <shapr> And you did part of the rmap stuff with Rik?
05:18:17 <wli> Part of the rmap stuff, yes. I'd be a bit more specific about my IBM contributions than "NUMA".
05:18:21 <shapr> and I vaguely recall that you worked on some of the most recent realtime stuff with ingo molnar.
05:18:38 <Itkovian> wli: I do a little bit of linux kernel hacking for my own purposes (measurement, perfctr adaption), so I tend to read kerneltrap etc. And I sometimes lurk on the #linux channels.
05:19:02 <Lemmih> balkan: How's it going?
05:19:04 <balkan> Lemmih: it worked very well, thanks...i guess this little program covers a lot of haskell knowledge?
05:19:05 <Itkovian> wli: besides, somebody with such a name is not easy to forget about :-)
05:19:07 <wli> Well, I did the original latency-monitoring infrastructure. It's no longer used in that now, and I've not actually contributed any code directly toward the RT stuff.
05:19:10 <shapr> wli: you get mentioned regularly on lwn.net's kernel page, that's definitely positive :-)
05:20:21 <wli> I'm going to have several huge mopup efforts coming soon.
05:20:32 <shapr> any specifics?
05:20:44 <shapr> kernel gossip is always worth hearing :-)
05:20:45 <wli> two very large and buggy vm patches are hurtling toward mainline that are going to break things I'm responsible for keeping working
05:21:00 <Lemmih> balkan: It's not so hard once you know the weird looking functions (. and >>=).
05:21:14 <wli> "mopup" == "fix bugs in code some idiot pushed regardless of correctness"
05:21:23 <shapr> :-)
05:21:26 <Itkovian> ouch
05:21:36 <balkan> Lemmih: yepp, those were the ones i was thinking about.
05:21:48 <wli> the bugs are rolling in so fast I scarcely have time for any real programming anymore
05:21:50 <balkan> but . is composition
05:21:59 <balkan> i know that much
05:22:19 <wli> sparc32 is getting broken so badly it's ridiculous
05:22:30 <balkan> Lemmih: the >>= part i haven't encountered that before.
05:23:07 <Itkovian> wli: so we best stick with 2.6.9 or so?
05:23:12 <shapr> wli: sounds like this week's Quote of the Week on lwn.net kernel page "That's the problem with C++; it is far too easy to misuse. And with a project as big as the Linux Kernel, and with as many contributors as the Linux Kernel, at the end of the day, it's all about damage control." 
05:23:18 <Lemmih> balkan: (>>=) is for binding monadic computations.
05:23:35 <wli> Itkovian: well, sparc32 is something of a special case
05:23:44 <earthy> one I use. :P
05:23:53 <shapr> that's a snipped from the whole quote by Ted T'so
05:24:05 <balkan> Lemmih: ok...so i was right...that covers a lot of haskell territory...
05:25:08 <Lemmih> balkan: You can play around with the functions in the Hugs environment.
05:26:07 <Itkovian> ah, then I'm still on the safe side on my (t)rusted Athlon :-)
05:26:13 <shapr> I'd like to try SELinux, SynaxNinja has been talking about it lately.
05:26:16 <balkan> Lemmih: yes, i will try that...but i don't think i will ever grasp what "binding monadic computations" means by just using hugs.
05:27:03 <shapr> balkan: oh I can describe them!
05:27:07 <Lemmih> balkan: Do you have knowledge of other functional languages?
05:27:26 <balkan> Lemmih: only some haskell
05:27:41 <wli> shapr: I don't know, I just get "the kernel exploded in the face of someone we've got a multimillion dollar contract with and they're going to convert to Microsoft if it isn't fixed in 24 hours" faster than I can even load the bugreports into a web browser.
05:28:13 <aleator> balkan: simplifed to death: a >>= b --> execute a then excute b with whatever value a produces ~
05:28:19 <wli> shapr: and then the arch I maintain gets patches breaking it merged into -mm etc. faster than I can debug what the idiots who wrote the bad patches did wrong.
05:30:18 <balkan> so with our recent example: readfile "in" and send the result of that read (whatever that is) to writeFile?
05:30:51 <wli> I was trying to do some curve fitting to figure out what on earth this distribution was
05:31:15 <shapr> yow
05:31:18 <aleator> balkan: yes, do not forget the composition at the end though.
05:31:19 <wli> and another kernel explosion happened
05:32:15 <shapr> sounds like a tough job. But it must be cool to get paid to write open source.
05:32:26 <wli> might as well s/write/debug/
05:32:33 <shapr> well, that too :-)
05:32:50 <shapr> I get paid to hack on Plone, but it's more service stuff. I install, configure, maintain.
05:33:12 <balkan> aleator: yes of course. lines produces a list from a string?
05:33:41 <aleator> balkan: yes.
05:33:47 <Itkovian> balkan: brakes them at \n (newline)
05:34:00 <Itkovian> or "\r\n" depending your platform
05:34:15 <balkan> aleator: unlines does the opposite?
05:34:45 <aleator> correct
05:35:18 <wli> it basically looks like an implicit cubic curve where a cubic polynomial f(ln(x), ln(y))=0
05:35:57 <balkan> aleator: so we read the file into a string. convert it into a list of lines. sort that list. create a new string from that list and write that string to a new file?
05:36:13 <wli> so change variables
05:36:14 <aleator> balkan: Yes. mind though, that my explanation isn't the whole story behind (>>=)
05:36:46 <balkan> aleator: no i now that monads are a bit complicated.
05:36:53 <wli> then A^{ijk}z_iz_jz_k = 0, where z = (x,y,1)
05:37:02 <wli> and A^{ijk} is symmetric
05:38:26 <aleator> balkan: not that much. Idea is very simple. 
05:39:21 <balkan> aleator: ok, what is the idea behing monads?
05:39:52 <balkan> aleator: in a few words only of course.
05:44:55 <shapr> oh oh
05:44:57 <shapr> I want to answer!
05:45:02 <aleator> balkan: imagine a group of computations/operations. Monad is way to sequence these one after another. (Shapr?)
05:45:08 <shapr> whee!
05:45:28 <shapr> a "monad" is made up of three pieces, a partially filled in type, and two functions
05:45:34 <balkan> aleator: but i thought that composition took care of that?
05:46:09 <shapr> one functions fills regular values into that type, and another function sticks together two filled in types and produces another filled in type.
05:46:16 <shapr> hiya wolfman8k, how's code?
05:46:23 <wolfman8k> resting
05:46:26 <shapr> balkan: want some examples?
05:46:34 <aleator> balkan: well - they may be sequenced together with other ways than just plain composition. Listen to shapr :)
05:46:40 <balkan> shapr: ok
05:46:48 <shapr> the return function is the guy who sticks values into types
05:46:57 <shapr> the >>= function is how you put together two and return a result
05:47:03 <balkan> aleator: i'm listening, but this does not sound like a simple idea!
05:47:09 <shapr> that's it!
05:47:21 <shapr> stick values into a container, plug together two containers
05:47:33 <shapr> the idea is simple, but it can do much
05:47:57 <shapr> if you start out with a type that models something, then you can make a 'process' that deals with that correctly
05:48:04 <shapr> for example, the Maybe type models failure
05:48:07 <balkan> shapr: so i'm sticking readFile "infile" into a container?
05:48:12 <shapr> actually, yes
05:48:17 <shapr> the IO monad is a container
05:48:34 <shapr> but it's easier to start thinking about stuff like Maybe
05:48:41 <shapr> data Maybe a = Nothing | Just a
05:48:52 <shapr> do you know how the a works there?
05:49:13 <shapr> already familiar with parameterized types?
05:49:21 <balkan> shapr: yes, Maybe a can be either Nothing or Just a
05:49:35 <shapr> and you know that any other type can be filled into the a, yes?
05:49:44 <balkan> shapr: yes
05:49:48 <shapr> ok then!
05:50:10 <balkan> shapr: but that's got nothing to do with monads or?
05:50:15 <shapr> it does!
05:50:30 <shapr> if you have a function that might blow up, maybe it's an add that doesn't work for the number 2...
05:50:43 <shapr> then you can model success with Just Int or failure with Nothing
05:51:11 <shapr> brokenadd x y = if x == 2 then Nothing else Just (x + y)
05:51:36 <shapr> that's just a type that models failure, and a function that might fail.
05:51:54 <shapr> you can think of Maybe as a container
05:52:15 <shapr> If you wanted to do a bunch of possibly working adds in a row
05:52:35 <shapr> it's a pain in the butt to manually unwrap from the Just, or check for the Nothing and you end up with a bunch of crappy cut'n'paste code
05:52:38 <shapr> but there's a better way!
05:53:04 <shapr> you could decide to make a monad out of maybe and then you describe how to 'put together two containers'
05:53:16 <shapr> the return part of the monad sticks something into Just
05:53:30 <xerox> yawn, 'lo
05:53:46 <shapr> the >>= part of the maybe monad keeps the computation going if the last part succeeded, or skips the next part if it failed.
05:53:56 <shapr> http://nomaware.com/monads/html/maybemonad.html
05:54:10 <shapr> data Maybe a = Nothing | Just a
05:54:11 <shapr> instance Monad Maybe where
05:54:11 <shapr>     return         = Just
05:54:11 <shapr>     fail           = Nothing
05:54:11 <shapr>     Nothing  >>= f = Nothing
05:54:11 <shapr>     (Just x) >>= f = f x
05:54:21 <shapr> hm, maybe that was too much to paste
05:54:41 <shapr> balkan: is that clear?
05:55:06 <balkan> shapr: i have to digest this a bit...
05:55:18 <shapr> you can use the Maybe monad in the same place you would normally use a big stack of nested "if then else" in a procedural language.
05:55:43 <aleator> balkan: To clarify. I proposed that the idea is simple. I did not say its uses are :)
05:55:57 <Itkovian> I think they're neat, but I'm still trying to wrap my head around them, so to speak
05:56:09 <shapr> if you have a webshop, you might want to check doesAccountExist >>= doesAccountHaveEnoughCash >>= doesAddressExist >>= isItemInStock
05:56:10 <balkan> shapr: how would you do several "possible working" adds in a row?
05:56:45 <shapr> does the webshop line answer that?
05:56:59 <shapr> it's easier to think about when you have only one arg in, and one arg out.
05:57:20 <balkan> shapr: i think so. how do you know when to use monads and when to use plain composition?
05:57:41 <shapr> once you're comfortable with both, it's more a matter of style.
05:57:59 <shapr> monads can do lots of heavy lifting, and they're easy to combine with other monads too.
05:58:07 <shapr> but composition is even more flexible
05:58:15 <balkan> shapr: but the webshop example, could that ever be solved with compositon?
05:58:27 <shapr> not really
05:58:34 <shapr> because in that case you'd have to do all the manual checking yourself
05:58:43 <shapr> but the monadic interface is just one way to do abstraction in a program
05:58:55 <shapr> and from what I've seen, it does more than object oriented programming does
05:59:14 <shapr> it's pretty much the same thing as OOP, just in a different shape
05:59:34 <balkan> shapr: i think it has something to do with a function always returning the same value when called with the same arguments. that's not really valid for the webshob is it?
05:59:42 <shapr> sure it is
06:00:11 <shapr> you could use composition with and
06:00:11 <balkan> but a function called doesAccountExist could return different values depending on when you call it?
06:00:16 <aleator> Is it possible to have two different interfaces for single module?
06:00:31 <shapr> @type and
06:00:33 <lambdabot> and :: [Bool] -> Bool
06:00:51 <shapr> and [doesAccountExist,doesAccountHaveEnoughCash,doesAddressExist,isItemInStock]
06:00:53 <shapr> that would work too
06:01:23 <shapr> one advantage of monads is that they're extensible
06:01:51 <shapr> if you suddenly decide you want to verbosely report the failure instead of just saying "it died" you can switch to the Error monad
06:01:55 <balkan> shapr: what about the state of the world? doesAccountExist would be dependant on that i think.
06:02:22 <shapr> you can assume that account info is in the program if you want
06:02:31 <shapr> maybe it's a FiniteMap
06:02:56 <shapr> accountDatabase :: FiniteMap Name AccountRecord
06:03:40 <shapr> anyway, the maybe monad is just one instance of the monadic interface
06:03:51 <shapr> there are lots of others, and you can make your own to do whatever you want
06:04:03 <shapr> it's just like using objects for abstraction, monads can do all that (and then some)
06:04:22 <balkan> shapr: let's take the example of reading a file. that could not be solved with composition. am i right?
06:04:41 <shapr> in essence, a monad is just like plumbing, it lets you write the explicit passing once, and then it's always implied
06:04:46 <shapr> actually, it can be composition
06:05:09 <shapr> think about a calculator that has one of those M buttons
06:05:13 <balkan> shapr: i mean reading it and writing the sorted file to a new file.
06:05:38 <shapr> yes, that can still be done with composition, but the one-way IO monad gives you some advantages composition doesn't give
06:05:58 <shapr> the idea behind the IO monad is the same as explicit state passing
06:06:52 <shapr> balkan: http://www.cs.fit.edu/~satkin/monads.html
06:06:59 <balkan> shapr: ok. i think i'm gonna read "all about monads" in that link you sent me. then we can talk some more.
06:07:03 <shapr> ok, sounds good
06:07:29 <shapr> Steve Atkin's link shows an explicitly state passing implementation turned into a monad step-by-step
06:07:35 <shapr> it's also informative.
06:08:07 <shapr> in conclusion, monads are even simpler than OOP, but you gotta twist your brain around a bit to use them.
06:08:08 <wolfman8k> is it theoretically possible for a computer to verify that the monad laws apply to a monad that i write?
06:08:41 <shapr> I dunno, I know there are some QuickCheck utility functions that try to check it for you.
06:08:56 <shapr> But I think that in some cases you end up with the halting problem.
06:09:06 <balkan> shapr: oop is really simple. because it's an analogy to real life. monads seem to me much more "theoretical"...
06:09:20 <ibid> wolfman8k: program verification in general is a very hard topic
06:09:33 <shapr> balkan: bah, monads are even simpler, look under your sink =)
06:09:44 <wolfman8k> ibid: hm....
06:09:50 <balkan> shapr: i see some piped there...
06:09:51 <ibid> wolfman8k: theoretically i'm sure it's impossible, but in practice, it may be possible to get something that works most of the time, some day in the future
06:09:59 <balkan> shapr: i mean pipes
06:09:59 <shapr> balkan: right! that's a monad!
06:09:59 <xerox> \\PAVILION has been up for: 4 day(s), 0 hour(s), 37 minute(s), 55 second(s)
06:10:05 <xerox> gee, it's a laptop.
06:10:22 <balkan> shapr: you mean like pipes in unix?
06:10:40 <shapr> I mean more like real pipes under your sink
06:10:50 <shapr> but I think you can make a working monad instance with unix pipes too
06:10:55 * shapr thinks about that
06:11:00 <wolfman8k> oop sucks dick
06:11:17 * shapr turns wolfman8k into a sex object
06:11:28 <wolfman8k> hm... make it something good
06:11:34 <balkan> shapr: monads are like pipes in the sense that they connect end points?
06:12:06 <shapr> nah, more like monads automatically fill in 'plumbing code' for you
06:12:35 <shapr> plumbing is the invisible stuff that carries water in and out of your home
06:13:20 <balkan> shapr: plumbing code...nice one!
06:13:23 <shapr> with a state monad, you get state carried along invisibly. You know it's there, but you only have to write the explicit state passing code one time, and then using a monad fills it in each time you need it.
06:13:37 <shapr> look at the maybe monad instance
06:13:47 <shapr> you define something like if then else
06:13:57 <musasabi> Is the alignment of Storable used for something?
06:14:06 <shapr> musasabi: I think so
06:14:24 <shapr> I think dons and SimonM were discussing that on ghc-users not long ago
06:15:39 <musasabi> So does that mean that I cannot read things which are unaligned?
06:15:48 <shapr> balkan: with the maybe monad, you have (Just x) >>= f = f x ; Nothing >>= f = Nothing  "if the first addition succeeded, pass the result to the next addition, if it failed just keep passing the fail"
06:16:31 <Amadan> returns give you the sinks and the tanks and the reservoirs, and >> and >>= are smart pipes that split and join and branch for you in right directions so you don't have to get your hands dirty? :)
06:16:47 <shapr> balkan: http://www.scannedinavian.org/~shae/src/haskell/ProtoMaybe.hs
06:17:04 <shapr> Amadan: I like it!
06:17:09 <shapr> whee: whee!
06:17:26 <whee> hi :P
06:17:29 <shapr> y0
06:17:34 * shapr y0d3ls
06:18:33 <shapr> anyway, time to hack on some paying Haskell!
06:18:36 * shapr bounces
06:19:04 <balkan> shapr: what's the arrow mean?
06:19:21 <shapr> that's the sexy form of >>=
06:19:31 <shapr> it lets you assign a name to the result
06:20:14 <Itkovian> it seems to me the type of demo in the comment is wrong though ...
06:20:36 <shapr> could be, that's the test I wrote to understand the maybe monad
06:21:17 <shapr> in hindsight, it's not a very test
06:21:18 <Itkovian> imo it should be Maybe [Char] or Maybe String
06:21:20 * shapr fixes
06:22:23 <boegel> Itkovian: String = [Char] , right ?
06:22:29 <Itkovian> yeah, afaik
06:22:31 <boegel> @info String
06:22:32 <lambdabot> -- String is a type constructor
06:22:32 <lambdabot> type String = [Char]
06:23:16 <boegel> then technically, shapr's code isn't wrong :p
06:23:44 <Itkovian> Well, the code is correct, yes, the comment isn't
06:23:51 <shapr> I'm fixing!
06:23:55 <Itkovian> I know!
06:23:56 <Itkovian> :-)
06:23:59 * shapr grins
06:24:11 <whee> eeh, I always have major problems getting this ring off in the mornings
06:24:19 <whee> jewelry is nuts :P
06:24:52 <Itkovian> erm ... why would you want to remove a ring in the morning?
06:25:30 <whee> Itkovian: to see if I can :); it goes on fine, but it's impossible to get off early in the day since I think my fingers swell in the morning heh
06:27:18 <shapr> ok, reload ProtoMaybe.hs
06:27:47 <shapr> that's more interesting since >>= does useful work there.
06:30:04 <musasabi> What would be the best way of implementing htons and ntohs in Haskell?
06:30:48 <musasabi> Using TH to select target endianess won't work if cross compiling (but can ghc even cross compile?)
06:31:50 <shapr> you could use TH to select endianess at runtime
06:32:12 <shapr> that would be way cheesy though :-/
06:32:42 <musasabi> I am just playing around with network stack design in haskell...
06:34:19 <Itkovian> whee: soap and cold cold water help :-)
06:34:38 <boegel> Itkovian: you tried to take off your ring ?
06:34:49 <boegel> or are you just suggesting that :p
06:35:00 <Itkovian> mine go off failry well.
06:35:12 <boegel> mine goes off without a problem
06:35:40 <whee> my knuckle is stupid and it gets stuck going the other way :P
06:35:46 <Itkovian> heh
06:35:47 <boegel> but then again, I take mine off regularly
06:36:01 <Itkovian> two weeks ago, I spent ten minutes getting my wife's rings off ...
06:36:09 <Itkovian> it must have huirt like hell
06:36:34 <Itkovian> her hands are a bit swollen because of the pregnancy, and the rings hurt ...
06:36:43 <Itkovian> I never thought they'd come off ...
06:36:51 <Itkovian> but ice, soap ... well ... it did the trick
06:36:59 <wolfman8k> better to have difficulty with a finger ring then the other kind...
06:37:00 <Lemmih> shapr: Have you experienced any problems with HaskellDB and timestamp fields?
06:37:05 <whee> haha
06:37:22 <Itkovian> wolfman8k: experience?
06:37:26 <Itkovian> lol
06:38:45 <wolfman8k> well, i know this dude who got in trouble once with these body rings
06:39:14 <vegai> Itkovian: it will hurt a lot more soon
06:43:12 <shapr> Lemmih: yes, but I know at least part of it is my own problem
06:44:24 <Lemmih> shapr: Btw, is there a goto-line in emacs?
06:44:40 <vegai> (not the rings)
06:44:41 <Lemmih> D'oh. Never mind.
06:44:50 <musasabi> yes.
06:46:08 <Itkovian> vegai: i know ...
06:46:52 <whee> haha
06:47:34 <musasabi> Is there a Ptr/IOUArray like abstraction that supports subobjects and garbage collects the objects when there are no more references into them?
06:57:37 <shapr> Lemmih: yes, M-g in xemacs, 
06:58:04 <shapr> which is where any sane editor puts goto-line, imho
06:58:19 <earthy> :
06:58:26 <shapr> ;
06:58:29 <earthy> sounds sane enough for goto-line ;)
06:58:38 <shapr> I don't like modes.
06:58:44 <earthy> ofcourse, you need to be in command mode for that :P
06:58:53 <wolfman8k> (n) gg
06:58:58 <shapr> I like to stay in the same major mode throughout the whole buffer
06:59:05 <wolfman8k> any sane editor does goto-line like that :D
06:59:12 <shapr> happily, Yi can do both
06:59:16 * earthy simles
06:59:18 <earthy> smiles
07:01:44 <tuomov> I don't like use of meta
07:02:21 <tuomov> ^KL is the place for goto-line
07:03:21 <wolfman8k> how about: Control+Home Down-arrow, Down-arrow, Down-arrow, ...., (xn)
07:04:48 <xerox> What's (xn) ?
07:05:00 <wolfman8k> times n
07:05:33 <wolfman8k> bah, i suck
07:05:51 <Lemmih> wow
07:06:45 * xerox boings uncertainly
07:06:45 <Lemmih> xerox: A variable.
07:08:39 * shapr hops rapidly
07:08:46 <shapr> I have coffee! yay!
07:09:56 <Lemmih> I have cider! yay!
07:10:21 <Itkovian> I have Just cola
07:10:27 <ikegami--> green tea
07:10:41 <Itkovian> with is graudaully desolving into Nothing | Just (empty can)
07:10:45 <wolfman8k> shit juice :|
07:10:52 <Lemmih> wb wolfman8k.
07:11:06 <xerox> Black Tea here.
07:11:08 <wolfman8k> danke sehr
07:11:30 * Itkovian fetches another can
07:17:56 * shapr drinks Just Coffee
07:18:31 <Lemmih> shapr: I can only get the date 1-1-1970 out of timestamp fields with HaskellDB /-:
07:21:04 <balkan> what's the difference between 'type' and 'data' in haskell?
07:21:57 <Lemmih> 'type' declares a type synonym, 'data' declares a new data type.
07:22:13 <xerox> Coffee is evil!
07:23:02 <Lemmih> balkan: ei. String is a type synonym for [Char].
07:23:54 <balkan> Lemmih: ok, but it seems to me that you could almost choose between the two arbitrarly sometimes?
07:24:44 <kosmikus> with "data", you declare a new datatype which is different from all others; with "type" you declare a new name/abbreviation for a type, but it's just an alias, not a distinct datatype
07:25:12 <balkan> kosmikus: a bit like a typedef in c, yes?
07:26:24 <kosmikus> only a bit
07:27:13 <balkan> kosmikus: so what's the difference?
07:31:59 <kosmikus> balkan: my C knowledge is a bit rusty, but afaik you can define selector/method names in a typedef
07:32:23 <MegaMonad> @Eval "\\r\\nprivmsg #haskell :hello world.
07:32:23 <lambdabot> Sorry, I don't know the command "Eval", try "lambdabot: @listcommands"
07:32:33 <CosmicRay> heh
07:33:28 <CosmicRay> MegaMonad: hello world to you too
07:33:34 <MegaMonad> CosmicRay: Hello ... Whats the difference in the world i would be me.
07:33:35 <balkan> kosmikus: in a typedef you can't do anything. it's just an alias.
07:35:37 <Itkovian> lambdabot: @listcommands
07:35:37 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
07:35:37 <lambdabot> ,"definitions","del-definition","devils","dict","dict-help","dummy","dump
07:35:37 <lambdabot> ,"dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements
07:35:37 <lambdabot> ,"eurohaskell","eval","foldoc","fortune","gazetteer","get-definition","goodbye
07:35:37 <lambdabot> ,"hello","hitchcock","index","info","jargon","join","karma","karma+","karma
07:35:37 <lambdabot> ","learn","leave","listchans","listcommands","listmodules","lojban","moo
07:35:39 <lambdabot> ,"msg","part","prelude","quit","reconnect","resume","seen","set-fuel","state
07:35:41 <lambdabot> ,"topic-cons","topic-init","topic-snoc","topic-tail","topic-tell","type
07:35:43 <lambdabot> ,"vera","web1913","wiki","wn","world02","yow"]
07:36:05 <CosmicRay> lambdabot: YOW
07:36:05 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
07:36:08 <CosmicRay> lambdabot: yow
07:36:08 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
07:36:18 <CosmicRay> foo.
07:36:20 <Itkovian> @yow hehe
07:36:21 <lambdabot> Sorry, wrong ZIP CODE!!
07:36:28 <CosmicRay> oh, silly me.
07:36:35 <Itkovian> @yow CosmicRay
07:36:35 <lambdabot> - if it GLISTENS, gobble it!!
07:36:36 <CosmicRay> <-- not fully awake yet
07:36:47 <Itkovian> erm? wtf?
07:38:11 <Itkovian> @yow MegaMonad
07:38:12 <lambdabot> LBJ, LBJ, how many JOKES did you tell today??!
07:38:20 <CosmicRay> MegaMonad: yow?
07:38:26 <MegaMonad> CosmicRay: Yow!!  Up ahead!  It's a donut hut!!
07:38:31 <CosmicRay> haha
07:38:43 <CosmicRay> megamonad somehow got the idea
07:43:37 <Itkovian> @type (\x y z -> x z ( y z))
07:43:38 <lambdabot> (\x y z -> x z ( y z)) :: forall t t1 t2.
07:43:38 <lambdabot> 			  (t2 -> t -> t1) -> (t2 -> t) -> t2 -> t1
07:43:42 <Itkovian> cool
07:44:05 <Itkovian> lets hope the students do not use a IRC enabled gsm :-)
07:44:19 <Itkovian> not that _that_ would be an exam question, but still ...
07:53:27 <Itkovian> gotta go ... ttyl
07:54:39 <shapr> CosmicRay: y0
07:54:52 <shapr> CosmicRay: hsql barfs if it's already installed with ghc-pkg
07:55:05 * shapr had to translate that into english from swedish
07:55:09 <CosmicRay> hey shapr
07:55:22 <CosmicRay> shapr: you mean, the Debian hsql build, or...?
07:55:25 <shapr> oj, vad är den möjlighet att jag talar förmycket svenska?
07:55:48 <shapr> CosmicRay: if you have hsql already installed, and you install the deb, the deb barfs when talking to ghc-pkg
07:56:03 <wolfman8k> why do all the haskell people use debian?
07:56:12 <ikegami--> mycket mycket lite :)
07:56:15 <CosmicRay> shapr: that's probably not surprising, ghc-pkg in general does poorly when upgrading stuff
07:56:29 <CosmicRay> shapr: I've found it installing two package descriptions in its database, for instance
07:56:34 <shapr> ikegami--: du har det rätt :-)
07:56:40 <CosmicRay> shapr: .deb packages handle it by first removing the old version, then installing the new one
07:56:42 <shapr> konichiwa ikegami--san
07:56:52 <CosmicRay> shapr: there is probably no good way to deal with that particular situation in an automated fashion
07:56:54 <ikegami--> hey
07:57:09 <shapr> except maybe fix ghc-pkg
07:57:10 <ikegami--> I'm in a train for Tokyo
07:57:14 <shapr> cool!
07:57:16 <CosmicRay> shapr: true
07:57:18 <shapr> I've never been to .jp at all
07:57:38 <shapr> I did have some real japanese sake two days ago, it's much better than gekkeikan
07:57:54 <ikegami--> hehe
07:57:56 <wolfman8k> i heard that tokyo sucks for visitors
07:58:09 <wolfman8k> nothing to do, and everything is expensive
07:58:16 <shapr> friends of mine brought some sake from osaka
07:58:19 <ikegami--> exactly
07:58:39 <shapr> Which city is best to visit?
07:59:20 <ikegami--> maybe, Kyoto
07:59:31 * shapr saves that information
07:59:59 <ikegami--> because some people in kyoto speak english
08:00:19 <CosmicRay> ikegami--: english is not as prevalent in Japan as in europe?
08:01:10 <ikegami--> a few people can speak english fluently in japan
08:02:16 * Lemmih has no idea why HaskellDB acts in error.
08:08:55 <shapr> guten abend martink 
08:09:17 <shapr> Lemmih: I've had some problems with HaskellDB dates, but I forget the detials.
08:09:21 <shapr> I thought bringert had fixed them.
08:09:23 <martink> guten abend shapr :-)
08:11:46 <shapr> hiya retardo, how's code?
08:11:58 <shapr> y0 Hunter, reading anything interesting?
08:12:01 <retardo> Code's doing pretty well, thanks.  How's yours?
08:12:15 <shapr> oh, I'm delaying starting it, even though it's both paying work and Haskell.
08:12:41 <thebug> paying work and haskell, nice shapr
08:12:47 <Philippa> shapr: heh
08:12:55 <Philippa> you doing much instead?
08:13:18 <shapr> just writing up a message to pragprog about Worse Is Better
08:13:47 <TheHunter> y0, shapr, i'm just thinking about how (if it's possible at all) the Cont monad can be improved.
08:15:24 <balkan> what's the difference between 'type' and 'instance' in haskell?
08:16:17 <TheHunter> call/cc (\k x. k (\y. x + y)) 5 (i think) can't be implemented using haskell's callCC.
08:16:40 <shapr> I'd sure like to have reusable first class continuations
08:30:58 <shapr> hei XTL 
08:37:10 * shapr reads "Patterns of Software"
08:38:11 <wolfman8k> "Design Patterns"
08:41:05 <shapr> In this case, Patterns of Software is a collection of essays by Richard P. Gabriel http://www.dreamsongs.net/NewFiles/PatternsOfSoftware.pdf
08:41:42 <wolfman8k> sweet! thanks dude
08:42:12 <shapr> If you've followed the whole Patterns movement in the software engineering world, then the introduction is quite inspirational.
08:42:23 <yeti> hi :)
08:42:26 <shapr> I keep wanting to stand up and salute.
08:42:28 <shapr> hiya yeti 
08:42:51 <wolfman8k> i've only read "Design Patterns" and when i read it i thought it rocked, but now i know that oop sucks dick
08:42:58 <yeti> i bought paul hudak's haskell shool of expression off ebay, and now i'd like to try the examples - does ghc (linux) have this SOEGraphics module?
08:43:09 <shapr> yeti: yes, it's on haskell.org
08:43:16 <shapr> I forget exactly where though
08:43:25 <shapr> wolfman8k: well, I guess it's better than nothing :-)
08:44:49 <yeti> shapr: it's not on haskell.org/libraries :\
08:44:54 * Lemmih is getting frustrated.
08:45:28 <CosmicRay> MegaMonad: lemmih is getting frustrated.
08:45:34 <MegaMonad> CosmicRay: Lor feels a little frustrated.
08:45:46 <CosmicRay> Igloo: I forget the story on hppa...  is ghc going to be removed, or is cabal just stuck in dep-wait?
08:45:52 <shapr> yeti: http://www.haskell.org/soe/
08:46:14 <wolfman8k> the introduction in "Design Patterns" was actually pretty good
08:47:47 <Igloo> CosmicRay: No, haskell-cabal is installed
08:48:32 <CosmicRay> woot!
08:48:37 <CosmicRay> built Friday
08:48:40 <CosmicRay> excellent
08:48:46 <CosmicRay> I guess lamont got my e-mail..
08:49:17 <CosmicRay> now to wait for m68k to catch up....
08:49:58 <Igloo> huh?
08:50:26 <CosmicRay> sorry, I jumped to a different package there
08:51:13 <yeti> shapr: i get a 404 when trying to download the graphics library- my /usr/lib/ghc already has a Grpahics dir though - maybe it works with the examples from the book?
08:51:38 <musasabi> Is there something more sensible than (Ptr Word8,Int) for maintaining references to memory that I need to write/read marshalled values?
08:51:54 <wolfman8k> what garphics library?
08:52:20 <yeti> wolfman8k: the one i need for the examples in paul hudak's "haskell school of expression"
08:53:22 * XTL curses at his invisible 1394 card
08:56:22 <CosmicRay> Igloo: did you fix cabal on hppa or did lamont get to it?
09:02:07 <yeti> mh - i found a graphics-2.0.4.src.tar.gz which contains some of those libraries... now where should i unpack this file?
09:03:35 <Igloo> lamont I assume
09:03:43 <Igloo> He's very good at responding to requests
09:04:07 <CosmicRay> super.
09:14:11 <yeti> does anyone of you use hudak's book and ghci on linux? i have no clue how to make this work
09:14:32 <CosmicRay> yeti: I don't have the book, but I may be able to help
09:14:55 <yeti> okay, the problem is, i have no idea how to get the graphics library to work
09:15:04 <CosmicRay> have you built it
09:15:12 <yeti> hudak's book relies on a library called SOEGraphics
09:15:16 <stepcut> $ uptime
09:15:16 <stepcut>   20:59:06  up 174 days,  9:54,  3 users,  load average: 237.14, 192.36, 101.58
09:15:25 <CosmicRay> yeti: ok, have you built that?
09:15:29 <CosmicRay> stepcut: hmm.
09:16:07 <yeti> i didn't find that one, but i found a lib called 'graphics-2.0.4' on haskell.org - it's supposed to work, i think - now i unpacked the graphics-2.0.4.tgz
09:16:11 <yeti> what do i have to do now?
09:16:23 <CosmicRay> is there a file named Makefile?
09:16:30 <CosmicRay> or README, or INSTALL, or configure?
09:16:34 <yeti> no
09:16:40 <yeti> it's just a collection of *.lhs
09:16:49 <CosmicRay> show me the url you got it from
09:17:10 <yeti> err wait... let me check the right *.tar, i was listing the wrong one
09:17:13 <yeti> mom
09:17:36 <yeti> there's a file called 'Install'
09:17:40 <yeti> maybe i should read that one
09:17:45 <CosmicRay> might help :-)
09:18:01 <yeti> sorry ;) i'll bother you again if i fail :>
09:18:07 <CosmicRay> ok, please do :-)
09:18:44 <CosmicRay> MegaMonad: would you bother me again?
09:18:50 <MegaMonad> CosmicRay: This talks about performance since ghc is smart enough for me to do such things, but you don't bother me.
09:18:58 <CosmicRay> MegaMonad: well, that's a relief.
09:19:05 <MegaMonad> CosmicRay: Sorry, i'm not a very cool that you've finally got an editor backend on several windows machines which are elegant but quite hard to determine who is actually not slow either.  It is a relief.
09:19:27 <CosmicRay> MegaMonad: windows?
09:19:33 <MegaMonad> CosmicRay: I do believe that it does on windows?
09:19:46 <CosmicRay> MegaMonad: are you using that evil operating system now?
09:19:52 <MegaMonad> CosmicRay: Bit i is a system similar to the operating systems group would be a list ( [a.
09:20:22 <tuomov> MegaMonad: is that supposed to be a smiley of some kind?
09:20:29 <MegaMonad> tuomov: Dunno, what would be guaranteed to never be a smiley of some resources associated with the a?
09:20:44 <yeti> *sigh* the makefile says it's for hugs... so i'll install hugs, 'make' it with hugs, and then use ghci... *sigh*
09:22:01 <CosmicRay> give me a url please
09:22:31 <CosmicRay> if it just works with hugs, it probably will with ghci too
09:22:35 <yeti> CosmicRay: if you meant me, http://cvs.haskell.org/Hugs/pages/downloading-Nov2002.htm
09:22:51 <yeti> generic unix/haskell graphics library
09:23:00 <yeti> the makefile is specialized to use hugs
09:23:18 <yeti> strange - i didn't know that hugs can compile libraries
09:24:28 <CosmicRay> looks like you'll also need greencard
09:25:05 <yeti> sigh - what's that?
09:25:22 <CosmicRay> yeti: what unix are you running?
09:25:30 <yeti> linux 2.6
09:26:11 <CosmicRay> which dist?
09:26:15 <yeti> gentoo
09:26:29 <CosmicRay> ah.  I was giong to say, on Debian, it appears that ghc6 comes with what you need already
09:26:51 <yeti> well, i have: /usr/lib/ghc-6.2.2/imports/Graphics
09:27:10 <yeti> maybe that's what i need?! it contains only two folders: "Rendering" and "UI"
09:27:12 <CosmicRay> hmm.
09:27:23 <CosmicRay> it is perhaps different than the library you are looking for though
09:27:53 <CosmicRay> ah ha.
09:28:11 <CosmicRay> ghc source tree has what you want
09:28:16 <CosmicRay> hslibs/graphics/lib/x11
09:29:57 <CosmicRay> yeti: I think you should go to http://www.haskell.org/graphics/downloading.html
09:30:16 <CosmicRay> yeti: you seem to have an older, hugs-specific version
09:30:54 <yeti> the reaseon i dowloaded this older version is that the site said it is supposed to work with hudaks book
09:31:03 <yeti> i'll try your link though, thanks
09:31:15 <CosmicRay> yeti: the link says it's specifically updated for ghc6
09:31:22 <CosmicRay> yeti: also it has a link to greencard, which you'll need
09:33:08 <yeti> this is a lot more complicated than i imagined when i bought the book ;) i hoped it would be linux-friendly - thanks for your help though
09:54:47 * yeti starts crying and bangs his head against a wall
09:55:09 <yeti> CosmicRay! this is stuff is being mean to me :(
09:55:13 <CosmicRay> yeti: doesn't the book show example output?
09:55:24 * CosmicRay gets yeti a pillow for his head
09:55:25 <yeti> i fail at building the library
09:55:30 <yeti> i installed greencard
09:55:37 <yeti> make[1]: Entering directory `/src/HSHGL-3.00/fptools/libraries'
09:55:37 <yeti> make[1]: *** No rule to make target `boot'.  Stop.
09:55:45 <CosmicRay> wrong directory
09:55:49 <CosmicRay> you don't need to build ghc6
09:55:57 <CosmicRay> err
09:56:08 <CosmicRay> is HSHGL-3.00 the directory that it unpacked from the tarfile?
09:56:12 <yeti> yeah
09:56:52 * CosmicRay downloads the tarfile
09:57:15 <yeti> it contains a directory fptools - the makefile is there - i configured and typed "make" - then i got this error
09:57:19 <CosmicRay> did you run configure in fptools?
09:57:24 <CosmicRay> ok.
09:58:56 * CosmicRay tries
10:00:18 <tumm> tjo
10:00:51 <CosmicRay> yeti: You've got me stumped.  I'd say you should e-mail Alastair at the link on the page.
10:02:15 <musasabi> Is there a working interface to read(2) in ghc ?
10:02:24 <yeti> from the readme: Installation instructions are in graphics-@VERSION@/Install. <= there isn't even a graphics-3.0.somewhat dir...
10:02:45 <yeti> CosmicRay: thanks anyways
10:02:46 <CosmicRay> musasabi: http://www.haskell.org/ghc/docs/latest/html/libraries/unix/System.Posix.IO.html#4
10:02:50 <CosmicRay> yeti: no prob
10:02:59 <musasabi> CosmicRay: that is for Strings, I have Ptrs.
10:03:05 <CosmicRay> musasabi: though I have not needed to use it.
10:03:13 * yeti hits the haskell graphics library with a baseball bat
10:09:59 <musasabi> hmm dupping fds and using separate handles for i and o works.
10:11:56 <bourbaki> moin
10:52:08 * shapr boings
10:52:17 <bourbaki> heh moin shapr 
10:52:24 * xerox hops cheerfully
10:58:48 * stepcut rolls around
11:02:42 * bringert feels slightly sick
11:05:46 * bringert hits shapr with a gold brick wrapped in lemon slices
11:06:16 <bourbaki> is there something like a petri net but with typed data instead of simple tokens?
11:10:09 <MegaMonad> Hello! Anyone awake?
11:10:21 <CosmicRay> MegaMonad: shapr looks awake.
11:10:22 <Philippa> MegaMonad, we are all asleep
11:10:27 <MegaMonad> CosmicRay: Nice quote:"mdo has nothing to do some work done, because #haskell is awake.
11:10:33 <MegaMonad> Philippa: Shapr: ur feet are falling asleep.
11:10:42 <CosmicRay> heh
11:11:56 <musasabi> Now we only need to teach MegaMonad how to ask (or preferrably) answer undergrad Haskell questions.
11:12:09 <Philippa> heh
11:12:31 <CosmicRay> musasabi: does he have to answer correctly?
11:12:43 <Philippa> reminds me, shapr suggested I should contribute to haskell-v8. Dunno I'll get round to it, but I probably should...
11:12:52 <CosmicRay> Philippa: do you have the darcs url?
11:13:12 <Philippa> er. Somewhere
11:13:20 <CosmicRay> Philippa: http://darcs.complete.org/haskell-v8
11:13:23 <Philippa> I'm lacking a suitable toolchain, being win32-based
11:13:34 <CosmicRay> Philippa: ah.
11:13:36 <Philippa> is there any kind of plan for what things should look like?
11:13:53 <CosmicRay> it will definately not be as easy for you then, though I can always fix up broken sgml
11:14:02 <CosmicRay> Philippa: not really.
11:14:12 <CosmicRay> Philippa: we want this to be an accessible document
11:14:15 <Philippa> shapr reckoned I'd be a good person to tackle sections that go into monads in more detail, stuff like that
11:14:37 * Philippa nods - that means I'd better work on my metaphors a bit more if nothing else
11:15:05 <CosmicRay> Philippa: we are not above saying "this function takes any kind of stuff" instead of saying "a function is said to be polymorphic with respect to variable a if the function could take a value a of any type, or a certain subset of those types"
11:15:42 <Philippa> sure, and so long as the type variable doesn't appear in the rest of the type expression that's equally precise, not to mention shorter
11:15:48 <Sava> hiya guys, dont suppose anyone can give me a quick hand fixing some haskell code? ><
11:15:49 <CosmicRay> :-)
11:16:03 <Sava> its soul destroying lol :(
11:16:23 <icct> 'lo
11:16:26 <CosmicRay> Sava: well we can try
11:16:31 <CosmicRay> hi icct
11:16:47 <CosmicRay> Philippa: my other main premise is that IO is haskel doesn't suck and isn't hard
11:16:50 <Sava> its actually an assignment iv been set, so i dont need the answers just given to me, just hints :]
11:16:54 <Philippa> CosmicRay: fine by me
11:17:07 <Philippa> you may've noticed I'm a fan of using Haskell for dirty, impure work
11:17:12 <musasabi> CosmicRay: well that would be nice.
11:17:12 <CosmicRay> Philippa: it's just that most people explain it in terms of various mathematical concepts, which are fine for scholars but irrelevant for hackers
11:17:15 <CosmicRay> Philippa: <grin>
11:17:28 <icct> friend of mine is asking if haskell evaluates function call with same args every time or it doesnt?
11:17:29 <Philippa> hell, I use the concurrency features to give me statically typed erlang :-)
11:17:35 <CosmicRay> Sava: hints we can provide.  thanks for being up-front.
11:17:55 <CosmicRay> icct: I suspect that would depend on what kind of optimizations the compiler performs.
11:18:04 <Philippa> the standard doesn't require memoisation
11:18:28 <Philippa> most of the compilers will do it though, so long as you find a good way to let it work out you're doing the same thing again
11:18:40 <musasabi> IO is one of the points where things *do* get nasty.
11:18:45 <Sava> (hopes doesnt get auto-kicked for c&p this in)
11:18:47 <Sava> > mergeFile :: File -> [Dependency] -> [File] -> Dependency
11:18:48 <Sava> > mergeFile file [] list = Dependency file list
11:18:48 <Sava> > mergeFile file (x:xs) list
11:18:48 <Sava> >	| (target x) == file = list ++ (deps x) ++ (deps $ mergeFile file xs list)
11:18:50 <Sava> >	| otherwise = mergeFile file xs list
11:18:56 <Sava> basically, its the beginnings of a simple makefile
11:18:58 <Philippa> Sava: you won't get auto-kicked, but you should've asked for a paste-bin
11:19:03 <icct> CosmicRay: it would be nice to know exactly
11:19:20 <Philippa> icct: RTFM for your favourite compiler then
11:19:21 <CosmicRay> icct: I don't know.  You may need to post on the haskell mailing list where one of the compiler authors could respond
11:19:26 <Sava> as in, it runs through a filename of dependancies, and arranges how they are meant to be compiled
11:19:53 <Philippa> as a rule of thumb, you'll get memoisation on thunks, but it won't work out that you've passed the same parm to a closure twice
11:20:08 <CosmicRay> sava: ok... what is your problem?
11:20:21 <Sava> there is a data type Dependancy, which is a String for the target file (ie java.class) and a list of Strings for its dependancies
11:20:25 <CosmicRay> musasabi: ok, but no more in haskell than anywhere else
11:21:00 <musasabi> CosmicRay: actually erlang makes it easy in many cases.
11:21:15 <Philippa> musasabi: any examples that can't be duplicated with concurrent haskell?
11:21:28 <Sava> for the last line, i keep getting an error that mergeFile file xs list is of type Dependency, when its expecting type [File]
11:21:37 <Sava> (sorry Dependancy is made up of Files, not Strings!)
11:22:01 <musasabi> Philippa: Code for reading/writing binary data gets quite complex and dirty.
11:22:33 <Philippa> musasabi: fair enough
11:22:43 <Sava> but, from what i can see, it should be expecting type Dependency? (since mergeFile returns a Dependency type)
11:22:43 <musasabi> Philippa: How many lines of code is e.g. reading an ipv4 header? (1 line in erlang)
11:22:44 <CosmicRay> Sava: that's because, in your "target x" line, you are returning a [File] -- list ++ whatever, and list is a [File].
11:22:58 <CosmicRay> Sava: So in your otherwise, you are returning a Dependency instead.
11:22:58 <musasabi> (this is without optional parts of course)
11:23:08 <CosmicRay> Sava: your error is actually in the "target x" line
11:23:14 <Sava> ahh ok
11:23:29 <Philippa> I've avoided binary IO so far, but remind me to think about it properly if I ever spec out a standard library for Tyop
11:23:59 <mflux_> musasabi, is it because of great language or library features?
11:24:05 <Sava> its supposed to recursively rerun mergeFile on that list, so it runs through the entire file and gets a single line that contains all dependencies (if that makes sense)
11:24:09 <Sava> anyway, thanks a lot and il have a look at it :]
11:24:35 <Philippa> mflux_: let's put this in perspective - Haskell 98's library features for reading binary data are crap. Or nonexistant, I forget which because GHC's are bad enough
11:24:50 <CosmicRay> sava: I didn't quite follow, but that's OK.  hope that helps.
11:25:04 <mflux_> philippa, maybe so (I don't know, I haven't really done anything with haskell yet :-)), but you could write better ones for it
11:25:10 <Sava> doesnt matter, i literally never use Haskell and find it really tough to adjust to :(
11:25:15 <Philippa> mflux_: only using the FFI
11:25:24 <musasabi> mflux_: those are quite mixed. Erlang has a syntax extension for mathcing binary data in various formats, but in a language with a more flexible syntax that could be implemented on library level.
11:25:25 <CosmicRay> sava: try http://www.isi.edu/~hdaume/htut/
11:25:28 <Philippa> really, we're talking complete /crap/
11:25:30 <Sava> iv always written everything in C, so this kinda stuff just hurts =P
11:25:48 <CosmicRay> Sava: ahh  that is a big jump for you
11:25:49 <Philippa> musasabi: that sounds like the kind of thing I'd want for binary IO, at least
11:26:02 <CosmicRay> sava: you may find this useful http://www.merjis.com/developers/ocaml_tutorial/
11:26:11 <CosmicRay> Sava: it's written for ocaml, but many of the concepts apply also to haskell
11:26:17 <Sava> thanks, appreciate it :)
11:26:52 <CosmicRay> Sava: we just express things differently in haskell
11:27:17 <CosmicRay> Sava: recursion and functional programming are both powerful concepts
11:27:45 <Sava> true
11:27:55 <Sava> i appreciate at times how things could be simpler
11:28:14 <Sava> but its actually faster for me to write out a ton of C code than think out a few dozen lines of Haskell code =P
11:28:25 <CosmicRay> regarding memoization -- if we have a recursive function that generates a list, what happens if we evaluate a single member of that list more than once?  Does it re-calculate or remember (ilke OCaml streams)?
11:28:31 <CosmicRay> Sava: I understand that
11:28:40 <CosmicRay> Sava: it is always that way when learning a new language
11:28:46 <Sava> yeah i guess thats true :)
11:28:47 <Philippa> CosmicRay: I'd imagine it memoisises it
11:28:54 <Philippa> at least, in GHC
11:28:55 <CosmicRay> Sava: languages have their unique strenghts and weaknesses and it's useful to have several in your toolbox
11:29:17 <CosmicRay> Sava: you can actually acheive a pseudo-functional approach in C (have you ever toyed with function pointers?)
11:29:24 <Sava> C/Java for apps, bash scripting and Perl has been fine for a while :]
11:29:33 <Sava> yup
11:29:34 <CosmicRay> Sava: one nice thing about so many, well, non-C languages is the automatic memory management
11:29:34 <Philippa> CosmicRay: I've been known to enjoy pain, but that's a bit much
11:29:41 <CosmicRay> Philippa: <grin>
11:29:59 <CosmicRay> Philippa: I rarely use them myself unless dealing with signal handlers and the like
11:30:16 * musasabi uses explicit memory handling in haskell ;p
11:30:31 <CosmicRay> musasabi: what, you link in malloc via ffi? :-)
11:30:42 <Philippa> musasabi: I /would/ like to have access to a modified return in the IO monad that lets me set GC strategies in it...
11:30:52 <musasabi> alloca, malloc, free, ... from Foreign.
11:30:55 <Philippa> I mean, I wouldn't use it atm, but it'd be great if you wanted to take Haskell to a situation that goes a bit lower-level
11:31:11 <Heffalump> why return?
11:31:12 <CosmicRay> Sava: I have been working with haskell for about two months now
11:31:27 <CosmicRay> Sava: I know C, Java, Perl, Python, etc. too.  (though I disdain Java and Perl)
11:31:32 <Sava> lol
11:31:40 <Sava> i get annoyed with Java
11:31:50 * basti_ shrivels under the bed at the mention of bad words
11:31:53 <Sava> Perl is useful though :]
11:31:56 <Philippa> that's a lot more polite than anything I have to say about it
11:32:00 <Philippa> Java and Perl are four-letter words
11:32:07 <CosmicRay> Sava: useful if the number of lines in your program are less than about 5 :-)
11:32:14 <Sava> yup lol
11:32:18 <CosmicRay> Sava: past that point, python gets more maintainable :-)
11:32:25 <Philippa> btw, Haskell with appropriate libraries can make a good replacement for perl in a number of situations
11:32:28 <Sava> i have a book on Python somewhere
11:32:31 <CosmicRay> Philippa: very true
11:32:35 <Heffalump> 'with appropriate libraries' is an issue
11:32:42 <Sava> never really read it, but i like to think i could pick most of it up verrry quickly
11:32:42 <CosmicRay> Sava: haskell has some very powerful tools too
11:32:44 <bringert> CosmicRay: 5 lines of perl seems to be all you need for pretty much anything
11:32:47 <Spark> libraries that do exactly what you want? :)
11:32:47 <Philippa> like, you might actually be able to read your parsing code two years later instead of trying to decipher line-noise regexes
11:32:57 <Heffalump> but I'm trying to do new web-ish projects in Haskell rather than Perl now
11:33:14 <Philippa> yeah, give-or-take the need for better CGI libs Haskell's good for web
11:33:47 <Philippa> we have somebody in here atm at least partly because I showed him the codebase for Flippi :-)
11:33:49 <Darius> Philippa: You've seen WASH?
11:33:53 <CosmicRay> Heffalump: here is, for instance, a simple grep for "Haskell" in 2 lines of code
11:33:58 <Philippa> yeah, wasn't too impressed sadly
11:34:03 <CosmicRay> import MissingH.List
11:34:03 <CosmicRay> main = do
11:34:03 <CosmicRay>        c <- getContents
11:34:03 <CosmicRay>        putStr (unlines(filter (\line -> contains "Haskell" line) (lines c)))
11:34:06 <CosmicRay> err s/heffalump/sava/
11:34:12 <Heffalump> that's a very simple grep :-)
11:34:14 <Sava> lol
11:34:15 <Philippa> I mean, there's some nice ideas, but there's a reason Flippi's based around Network.CGI - and I looked at WASH first
11:34:54 <Heffalump> does anyone have any experience of using HaXml to parse real-world HTML?
11:34:56 <Sava> that what bash scripting is for :P
11:34:59 <Lemmih> CosmicRay: 'interact' is perfect for such a task.
11:35:03 <Sava> thats*
11:35:08 <CosmicRay> Lemmih: indeed
11:35:12 <Philippa> Sava: a proper grep is surprisingly easy to implement on top of that
11:35:15 <CosmicRay> Lemmih: that would take it to 1 lines
11:35:20 <Heffalump> sava: how would you do that if you didn't already have grep available?
11:35:32 <Sava> Perl? :]
11:36:12 <CosmicRay> Sava: ah, but what if you considered a line to be delimited by "|" instead of \n?
11:36:19 <Spark> perl was very pragmatic
11:36:24 <CosmicRay> Sava: trivial change to the haskell program.  reworking of your logic in perl;.
11:36:31 <Spark> it never had the benefit of a well thought out design
11:36:36 <CosmicRay> in fact, I dare say that would be easier in haskell
11:36:47 <resiak> CosmicRay: No, actually, you just set | to be the record seperator :)
11:37:03 * Philippa has long been of the opinion that parsec makes perl cry when it comes to parsing
11:37:06 <CosmicRay> resiak: pfft :-)
11:37:13 <resiak> CosmicRay: ;)
11:37:14 <Sava> lol
11:37:24 <CosmicRay> Philippa: that is true, parsec beats regexps hands-down
11:37:28 <Heffalump> the thing is that often lexing is all you need
11:37:28 <CosmicRay> for complex parsing jobs
11:37:30 <Sava> hey, at least im doing my best to learn some Haskell =P
11:37:46 <Philippa> Heffalump: it's not too bad for that, though the performance'll be lower
11:37:48 <Sava> AND it looks like i might have just fixed that bit of code, cheers buddy :]
11:37:55 <CosmicRay> Sava: great :-)
11:38:13 <Heffalump> does it have the same convenience of data capture?
11:40:38 <Philippa> Heffalump: pretty much. The fact you're in a monad and returning whatever you feel like as a (potentially degenerate) AST helps
11:40:51 <Philippa> I mean, you could write a desk calculator as a parsec parser if you wanted
11:41:09 <Heffalump> but expression parsing is obviously suited to a parser not a lexer
11:41:23 * Heffalump goes looking for some random perl code to illustrate his point
11:41:34 <Philippa> sure - OTOH, a list of tokens is just one example of a degenerate AST
11:41:51 <Philippa> not needing the full power doesn't do you any real damage
11:41:59 <Heffalump> I claim it does in terms of verbosity
11:42:14 <bringert> CosmicRay: same program with only standard libs: main = interact (unlines . filter (any ("foo" `isPrefixOf`) . tails) . lines)
11:42:30 <bringert> I'm sure there is a shorter one though
11:42:33 <Philippa> Heffalump: fair enough, though I find it to be no real loss in times of comprehendability
11:42:40 <Philippa> er, in terms of
11:42:45 <Heffalump> there is that :-)
11:42:51 <Darius> Heffalump: It would seem pretty easy to make some datastructure/combinators that you make parsers from that would handle things like that fairly succintly.
11:42:58 <Heffalump> I was just trying to work out what some of this code does ;-)
11:43:26 <Philippa> heh
11:43:34 <Philippa> for me, the comprehendability makes for a fair trade
11:43:44 <Philippa> I know full damn well regexen will be more compact, I just don't like line noise :-)
11:43:55 <Heffalump> the other thing Haskell is missing is good Apache integration
11:44:09 <Philippa> I imagine that could be done now using hs-plugins?
11:44:09 <bringert> yep
11:44:13 <CosmicRay> http://losser.st-lab.cs.uu.nl/mod_haskell/
11:44:19 <Heffalump> yes, but that's dead
11:44:24 <CosmicRay> yeah
11:44:30 <CosmicRay> but it could at least be a starting point
11:44:33 <bringert> the HSP guys at chalmers are working on that I think
11:44:35 <Heffalump> I had the impression bringert's group was doing something along those lines.
11:44:39 <CosmicRay> cool
11:44:39 <Heffalump> Ah, not you then.
11:44:44 <Heffalump> I thought you were one of the HSP guys :-)
11:44:58 <bringert> Heffalump: that's Niklas Broberg and Andreas Farre
11:45:33 <Heffalump> right. I guess I saw you were doing HTTP stuff and equated the two :-)
11:45:35 <Lemmih> I found hs-plugins too slow for a apache module.
11:46:20 * bringert writes a throwaway-program in java
11:46:25 * bringert reconsiders
11:46:29 <Philippa> Lemmih: even when half the code's pre-compiled?
11:46:35 <Heffalump> hs-plugins is one of the things you need to make a good mod_haskell
11:46:39 <Darius> @index many
11:46:39 <lambdabot> Text.ParserCombinators.Parsec,Text.ParserCombinators.Parsec.Prim
11:46:41 <Lemmih> Philippa: Yes.
11:46:46 <Heffalump> but you also need an infrastructure to interface with Apache properly
11:46:56 <Philippa> ouch, any idea what was holding things up?
11:46:57 <Heffalump> lemmih: you actually tried to make an Apache module, then?
11:47:07 <Lemmih> Heffalump: Yes. And I got it working.
11:47:25 <Muad_Dibber> apache modules in haskell? :)
11:47:27 <Muad_Dibber> cool :)
11:47:39 <Heffalump> are the results anywhere available?
11:47:47 <Lemmih> But Apache starts a new child for every new connection (unless you compile it with threads support) so you have to load the haskell module once per keep-alive connection.
11:48:00 <Heffalump> errm, no it doesn't
11:48:04 <Lemmih> Heffalump: I can put the code up somewhere.
11:48:12 <Heffalump> it keeps a pool of children around and distributes requests to them
11:48:15 <bringert> Lemmih: I know some guys here at chalmers who would be very interested in that
11:48:17 <Heffalump> that's the basis of mod_perl
11:48:36 <Heffalump> (well, to be precise they all select on the network socket, so they wake themselves to receive the requests)
11:49:19 <Heffalump> lemmih: sounds like quite a few people would be interested
11:49:20 <Muad_Dibber> where can i find mod_haskell?
11:49:31 <Heffalump> http://losser.st-lab.cs.uu.nl/mod_haskell/
11:49:36 <Heffalump> but it basically only works with hugs
11:49:45 <Muad_Dibber> bleh @ uni :P
11:49:49 <Heffalump> in principle there's a GHC version but I never got very far with it
11:50:02 <Lemmih> Heffalump: Oh. Then maybe speed wont be a problem.
11:50:03 <bringert> Lemmih: even if it's only a proof-of-concept, please consider making it available
11:50:20 <Heffalump> muad_dibber: well, the authors are still around at UU, AFAIK :-)
11:50:27 <Lemmih> bringert: Sure. I'll have shapr host first thing tomorrow.
11:50:33 <Muad_Dibber> Heffalump, yeah i know for sure :P
11:50:37 <Lemmih> Right now I need to get some sleep.
11:50:45 <Heffalump> lemmih: cool.
11:50:56 <Philippa> Lemmih: you mean you didn't bench it?
11:51:08 <Philippa> and yeah, fair enough, get some sleep
11:51:17 <mflux_> lemmih, hm, apache doesn't start a new child per connection?
11:51:27 <mflux_> or maybe you were just simplifying
11:51:27 <shapr> host?
11:51:32 <Heffalump> not unless you configure it very badly..
11:51:37 <jdrake> mflux_, that would be like a huge orgy!
11:51:39 <TD> hi, haskell newbie here, I'm trying to read lines in from a file and not getting very far. I can read the whole thing in as a [Char], but I'm not sure how to break that up into lines
11:51:49 <Muad_Dibber> Heffalump: to bad they use cvs though instead of darcs ;)
11:52:08 <Heffalump> it's pre-darcs..
11:52:22 <Heffalump> TD: look at the lines function
11:52:25 <shapr> cambrian
11:52:29 <shapr> Lemmih: host what?
11:52:31 <Muad_Dibber> Heffalump: well so what? :P
11:52:34 <Lemmih> mflux_: I know next to nothing about Apache so you are probably right.
11:52:45 <Heffalump> shapr: his implementation of Apache stuff for Haskell, nothing much..
11:52:48 <Lemmih> shapr: My mod_haskell Apache module.
11:52:50 <shapr> oh
11:53:00 <shapr> well, send me the source, point me to the repo, or whatever
11:53:02 <Heffalump> did you start from the UU mod_haskell?
11:54:28 <Muad_Dibber> anyone knows something about Helium?
11:54:28 <Lemmih> Philippa: It takes almost 0.5 seconds to load a small module with hs-plugins on my comp so I immediately noticed that it reloaded it every time I lost or created a new connection.
11:54:40 <Philippa> Lemmih: fair enough
11:54:45 <bourbaki> i need a function which acts like this
11:55:12 <Lemmih> Philippa: I thought I was because it started a new child for each connection but I was apparently wrong.
11:55:19 <bourbaki> foobar :: (a->b) -> (a,b)
11:55:29 <bourbaki> er nope sec
11:55:57 <bourbaki> foobar1 :: (a->b) -> (c->d) -> (a,c) and
11:56:08 <bourbaki> foobar2 :: (a->b) -> (c->d) -> (b,d)
11:56:41 <Philippa> Lemmih: get the code up and we'll all see what can be done
11:56:50 <Philippa> well, I probably won't sadly, as I'm win32-bound, but hey
11:56:55 <bourbaki> hm im not sure if that is what i really mean ill explain what i wanna do
11:57:04 * Philippa misses Shortarse, it was a useful box when it worked
11:57:06 <mflux_> lemmih, apache starts a new child when a child dies, and its children handle incoming connections in a round robin fashion (I think)
11:57:07 <Lemmih> Philippa: No Apache for windows?
11:57:13 <Philippa> no hs-plugins for windows
11:57:18 <bourbaki> i have two functions and i want to lets say +++ then in the arrow way
11:57:34 <mflux_> lemmih, and a child commits a suicide when it has handled n connections, n is maybe somewhere around 100
11:57:54 <shapr> iirc ghc 6.4 should make hs-plugins happier on win32, is that right?
11:57:55 <bourbaki> but i want to store the data for the functions in nodes in a graph something like maybe MyType
11:57:59 <Philippa> is there any way to prevent the suicides?
11:58:26 <Darius> Hey shapr, what all libraries does HaWiki's latex support support?
11:58:35 <bourbaki> and when i +++ two functions i have to build a new node in the network with the combined type of the two function domains and codomains
11:58:41 <shapr> Darius: anything installed on the latex installation on haskell.org
11:58:53 <shapr> it has all sorts of weird stuff I can't find anywhere online.
11:59:24 <shapr> for example, the commutative squares lib doesn't appear to be available, but is still installed on haskell.org
11:59:38 <Darius> shapr: That's XYpic 
11:59:56 <arjanb> Muad_Dibber: i tried Helium once but got annoyed quickly because it lacks type classes and i don't like error messages saying how to fix things
12:01:01 <wilx`> Heh.
12:01:09 <Darius> I was asking because I wanted to edit http://www.haskell.org/hawiki/HelpOnFormatting to demonstrate the latex support, but I wanted to list what all things were supported.
12:01:16 <Darius> (or at least suggest)
12:01:33 <shapr> I have no clue.
12:01:36 <Lemmih> mflux_: Isn't it dependent on the MPM?
12:01:39 <shapr> how can I ask latex?
12:02:00 <Muad_Dibber> arjanb: well it was especcially designed for teaching
12:02:05 <Muad_Dibber> not for development i think
12:02:08 <Muad_Dibber> nor is it fnished afaik :P
12:02:47 <Darius> shapr: I haven't the foggiest, I'm not even sure if there is an organized way.
12:03:25 <Darius> shapr: But don't worry about it, I was just asking in case you knew.
12:03:31 <shapr> sorry, can't help you
12:03:54 <shapr> if you know how I can list libraries on the drive, I can try that
12:05:47 <TD> hrm, on windows hugs can detect when i changed the file and reload it. but on linux, this seems to be not the case
12:05:57 <TD> is that a known issue?
12:06:05 <Lemmih> I think I forgot to mention that my mod_apache was for Apache2 only.
12:06:22 <bourbaki> cant you get the type of the domain and codomain of a function?
12:07:06 <Darius> shapr: There are typically external tools for configuration, but I'm in Windows right now and not much of a TeX person as is.
12:11:02 <Heffalump> philippa: you can up the count; but the reason the suicides happen is that apache is assumed to leak memory slowly
12:11:41 <Heffalump> cosmicray: you around?
12:12:02 <CosmicRay> yes
12:12:17 <Heffalump> should I be able to apt-get source haskell-hsql?
12:12:37 <CosmicRay> Heffalump: eventually, yes, but it is in incoming right now
12:12:48 <CosmicRay> Heffalump: which means it is stuck until the ftpmasters get aroudn to approving it
12:12:50 <Heffalump> how come I can get the binary package, then?
12:12:54 <CosmicRay> where?
12:13:05 <TD> I'm having problems with monads and IO (surprise surprise) - I have a "return [ ... ]" list comprehension and it works. if I then pass this list comprehension through another function, it doesn't work
12:13:14 <TD> can't convert to "IO a" says hugs
12:13:17 <Heffalump> munchkin:/home/ganesh/debs/debian# apt-cache policy libghc6-hsql-dev
12:13:22 <Heffalump> [...]
12:13:23 <Heffalump>  *** 1.4-1 0
12:13:23 <Heffalump>         500 ftp://ftp.earth.li sid/main Packages
12:13:27 <CosmicRay> Heffalump: huh.
12:13:32 <CosmicRay> I didn't realize it had been approved.
12:13:36 <Heffalump> (ftp.earth.li is an official Debian mirror)
12:13:48 <Heffalump> well, I could get the binary but not the source yesterday.
12:13:54 <Nioate> TD: do you have some source code?
12:14:08 <CosmicRay> Heffalump: hmm.  I can apt-get both the binary and the souce.
12:14:08 <kosmikus> what exactly is the LaTeX problem/question?
12:14:12 <CosmicRay> Heffalump: you might try a different mirror
12:14:23 <TD> yeah but it's a bit large. essentially I have a function which processes a list and returns a list of the same type. 
12:14:32 <Heffalump> oh. Muppet. I didn't have a deb-src line. I wonder how I ever got any source..
12:14:35 <Heffalump> sorry..
12:14:41 <CosmicRay> heh
12:14:47 <TD> simply returning the list from a little "do" function works 
12:14:57 <TD> put, passing the list to this function and then returning the results of that doesn't work :(
12:15:02 <Darius> kosmikus: How to find out what all libraries are installed (more of TeX question that LaTeX).
12:15:09 <Heffalump> btw, I cabalised and debianised HaXml, but I had some problems making Cabal handle multiple executables in the same directory.
12:15:11 <TD> so i guess the results of the list comprehension are being treated as an IO type automatically or something ...
12:15:22 <CosmicRay> Heffalump: cabal or haskell-devscripts?
12:15:37 <Heffalump> cabal; it breaks with ./cabal build too
12:15:40 <Heffalump> IM ./setup build
12:15:42 <CosmicRay> ah.
12:15:44 <Heffalump> I emailed Isaac about it.
12:15:55 <kosmikus> Darius: you can't, at least not in a portable way
12:15:55 <SamB> Darius: what *nix/tex distributions?
12:16:01 <CosmicRay> haskell-devscripts is not really well suited to pure binary haskell projects yet; it's more suited to libraries
12:16:04 <Heffalump> anyway, if you want what I've done so far, let me know. It's not all that much, but it's a start.
12:16:07 <CosmicRay> that is something I mean to fix eventually thoughj
12:16:09 <kosmikus> Darius: you can just grep the texmf tree for all .sty files as an approximation
12:16:22 <Heffalump> well, it seemed to work ok, though I had to manually push the executables from somewhere deep in /usr/lib to /usr/bin
12:16:25 <Nioate> TD: http://www.haskell.org/hawiki/HaskellIrcPastePage
12:16:27 <CosmicRay> Heffalump: I don't have time to chase things down for now, but if you need a sponsor when you have it ready, feel free to ask me
12:16:33 <Darius> SamB: I don't know, I wanted to know what haskell.org has.
12:16:35 <CosmicRay> Heffalump: ijones == SyntaxNinja, fwiw
12:16:39 <Heffalump> yes, I know
12:17:12 <Heffalump> CosmicRay: ok, I'll try to improve it when I have time. It was just that you mentioned having been on the point of ITPing it, so I thought you might want what I'd done.
12:17:25 <kosmikus> Darius: anything particular you want to know?
12:17:32 <CosmicRay> Heffalump: sure, thanks for the update
12:18:08 <TD> Nioate: done
12:18:14 <Darius> No, just an idea of what libraries are installed without having to make LaTeX code trying each.
12:18:31 <SamB> hmm, Haskell.org is running redhat, isn't it?
12:18:54 <ibid> not hOP? ;)
12:19:16 <TD> heh, haskell-mode is nice.
12:19:16 <Nioate> TD: return is a function. so in the second instance there, you're calling return with two arguments when it should only have one
12:19:23 <SamB> personally, I would say "not Debian?"
12:19:29 <TD> oh, darn it. i keep getting bitten by this one
12:19:29 <CosmicRay> samason: yes, redhat
12:19:31 <TD> i need brackets
12:19:45 <CosmicRay> SamB: heh
12:20:05 <SamB> I probably already did, though.
12:20:30 <ibid> SamB: hey, i'm a dd :) (and so are a surprising number of #haskell regulars, btw)
12:20:51 <kosmikus> Darius: seems to be a basic tetex installation
12:20:52 <SamB> a dd ?
12:20:58 <ibid> SamB: debian developer
12:21:01 <SamB> oh
12:21:04 <SamB> right
12:21:11 <TD> Nioate: thanks!
12:21:16 <Darius> kosmikus: Does XYpic come with a basic tetex installation?
12:21:17 <Heffalump> it's like being a gentoo developer, but better ;-)
12:21:21 <CosmicRay> shapr: do you have a reference to lambada in your mega haskell repository in the sky?
12:21:22 <ibid> heh :)
12:21:44 * Heffalump waits to see if kosmikus will rise to the bait
12:21:59 <CosmicRay> ibid: and the regulars that aren't should be :-)
12:22:03 <ibid> Heffalump: trolling, eh?
12:22:08 <Heffalump> me? never.
12:22:09 <ibid> CosmicRay: heh
12:22:20 <CosmicRay> MegaMonad: are you a debian developer?
12:22:22 <Igloo> He's not trolling he's *baiting*, duh
12:22:32 <MegaMonad> CosmicRay: (Me is not a developer, i'm a debian box.
12:22:44 <Heffalump> I'd be more keen on becoming one if anything ever happened.
12:22:48 <CosmicRay> ibid: shapr is a dd in my book :-)
12:22:53 <SamB> debian packages seem a lot easier and more interesting to make than RPMs
12:22:58 <CosmicRay> Heffalump: hey, debian is more than just stable :-)
12:23:08 * Heffalump prefers the RPM package build system in several ways.
12:23:20 <SamB> Heffalump: oh?
12:23:30 <kosmikus> Darius: yes
12:23:42 <Darius> kosmikus: Okay, thanks.
12:23:50 <Heffalump> it doesn't force you into the one source tarball with a defined name straitjacket
12:23:53 * Oeje1 think that GoboLinux's recipe/package system is really cool.
12:24:07 <Heffalump> (which can only be escaped with nasty hacks like dbs or whatever it's called)
12:24:11 <Igloo> I think there are plans to change that, but I've thought that for a while
12:24:14 <ibid> CosmicRay: i think i first met him on #debian-fi (where i no longer regule:)
12:24:22 <SamB> Heffalump: well, that isn't exactly an inherent problem
12:24:30 <Heffalump> it is with the current design..
12:24:38 <Heffalump> also, .spec files have all the metadata in one place
12:24:38 <mflux_> lemmih, I think the principle is the same with any model, but I'm not sure.. maybe it wouldn't make sense for children to self destruct with a threaded model, as that wouldn't release any resources, so that may be different
12:24:44 <Heffalump> and it's manipulated with one tool
12:24:51 <SamB> and it doesn't bother beginning packagers too much...
12:25:00 <ibid> and cannot be inspected but with that one tool...
12:25:11 <CosmicRay> I've never seen the one source tarball as a limitation
12:25:15 <SamB> Heffalump: you like everything mashed together, huh?
12:25:21 <CosmicRay> in fact, if you use arch or something to maintain your packages, it's not a problem at all
12:25:27 <Igloo> If you did decide to become a DD you'd want a sponsored package or two anyway, AIUI
12:25:37 <CosmicRay> moreover, it makes it easier to implement pools and things like that
12:25:44 <SamB> AIUI?
12:25:51 <Igloo> As I Understand It
12:25:54 <Heffalump> with RPM it's trivial to update an existing SRPM with a new upstream tarball
12:26:02 <ibid> Heffalump: uupdate :)
12:26:15 <ibid> trivial, if it can be
12:26:57 <Heffalump> can one have a package sponsored without implicitly being expected to become a DD after a while?
12:27:12 <CosmicRay> Heffalump: uupdate is great.  my tla-buildpackage is even better, imho :-)
12:27:15 <Heffalump> ibid: how does that interact with packages that have multiple source tarballs?
12:27:23 <CosmicRay> Heffalump: sure
12:27:38 <SamB> CVS is weak, thats all.
12:27:43 <CosmicRay> Heffalump: all you have to do is find a debian developer and say, "hey, want some c0de?"
12:27:46 <ibid> Heffalump: it doesn't, because there are none in debian ;) (the multiple taball thing is a current inherent limitation)
12:27:59 <Heffalump> right, hence a major reason I think RPM is better..
12:28:01 <ibid> Heffalump: i wouldn't sponsor a person who wasn't serious
12:28:15 <ibid> Heffalump: nobody said deb is perfect ;)
12:28:28 <CosmicRay> Heffalump: in this situation, for instance, I'm planning to maintain haxml eventually anyway.  If you do a good job packaging it, you've saved me work.
12:28:31 <ibid> (then again, i don't sponsor people)
12:28:34 <SamB> anyone want python bindings for m6502?
12:28:39 <Heffalump> CosmicRay: right.
12:29:05 <CosmicRay> Heffalump: but normally, the expectation is that the upload being sponsored will list the original packager as Maintainer, and there *is* an expectation that this person will be around for awhile and progressing through NM
12:29:06 <Igloo> In general it'd be harder to find sponsors
12:29:21 <CosmicRay> Heffalump: since that person is maintaining it.
12:29:24 <mattam> NM ?
12:29:25 <Heffalump> right.
12:29:28 <ibid> new maintainer
12:29:37 <ibid> i hate that term, btw
12:29:43 <ibid> it should be ND, new developer
12:29:45 <mattam> you've got an abbreviation for that ? 
12:29:52 <CosmicRay> ibid: it beats "pester bruce to make your account until he quits the project again" :-)
12:29:55 <Heffalump> so if I get this in a state to go into Debian, I need to decide whether to go for being a DD, or just hand it to you to maintain.
12:30:04 <CosmicRay> Heffalump: yup
12:30:09 <ibid> mattam: it's a frequently used phrase
12:30:18 <ibid> CosmicRay: i have no problems with the process. i hate the name
12:30:29 <mattam> oh well
12:30:39 <CosmicRay> Heffalump: I have no problem handing off most packages I maintain to qualified people, too.  you can always change your mind.
12:30:44 <CosmicRay> ibid: fair 'nuff
12:31:16 <Heffalump> CosmicRay: if you upgrade dh_haskell so it splits things into configure, build and install phases, that'll break existing packages, right?
12:31:42 <CosmicRay> Heffalump: depends on how I do it.  if I make it do the same thing as now when run as it is now (shouldn't be hard), it should be ok
12:32:02 <CosmicRay> Heffalump: but really, the main deal on that is, debhelper is perl, thus dh_haskell is perl, and I hate perl
12:32:02 <Igloo> You could also assume you want to become a DD to officially clock up some experience and hand it over if you decide against it in the future
12:32:11 <CosmicRay> Heffalump: let's get Sava to hack it up for u s:-)
12:32:15 <kosmikus> hi mattam
12:32:26 <Heffalump> :-)
12:32:31 <CosmicRay> Igloo: good point
12:32:36 <Heffalump> CosmicRay: ok. I was just wondering if I should build-depend on a maximum version too.
12:32:43 <Muad_Dibber> CosmicRay: all the perl haters nowadays :P
12:32:46 <CosmicRay> Heffalump: no, I don't think that's necessary.
12:32:50 <SamB> Heffalump: sometimes it is a good thing to break things
12:32:54 <ibid> hmm
12:33:02 <CosmicRay> Muad_Dibber: hey, I've been proudly hating Perl since 2000 :-)
12:33:07 <ibid> what do you call a compulsive programming language designer?
12:33:11 <Heffalump> also, does it not support the haskell:Depends substvar for anything but the lib... package?
12:33:12 <Philippa> "me"
12:33:15 <CosmicRay> ibid: Larry Wall?
12:33:16 <Igloo> Is the install-only version planned to be in sarge?
12:33:19 <ibid> Philippa: "me too"?
12:33:24 <Philippa> :-)
12:33:35 <CosmicRay> Igloo: yes.  it may already be.
12:33:40 * Philippa is in the middle of thinking through potential language design consequences of something she realised earlier
12:33:47 <ibid> the perl haters reference makes me want to publish my current spec so i can quote a particular phrase from it ;)
12:33:49 <Igloo> IM still in sarge when it releases
12:33:50 <Philippa> thankfully it seems I'm just finding verification that Tyop's type system is cool ;-)
12:33:52 <CosmicRay> Igloo: I certainly wouldn't let a big breakage like that slip into sarge
12:33:52 <mattam> hi kosmikus 
12:34:00 <CosmicRay> Igloo: probably so
12:34:22 <ibid> CosmicRay: has wall done more than perl?
12:34:28 <CosmicRay> Igloo: I am unlikely to have time to hack on it more before the new year.  major work projects going on right now (ERP switchover)
12:34:38 <CosmicRay> ibid: sure, awk, sed, C, bash... all in perl... :-)
12:34:46 <mattam> kosmikus: reminds me i have to create a darcs-cgi ebuild, i note it so that i don't forget
12:35:05 <ibid> CosmicRay: he didn't design those
12:35:22 <CosmicRay> ibid: right, that was a joke...  (he pulled parts of them all into perl)
12:35:27 <ibid> sure
12:35:30 <CosmicRay> ibid: no, I'm not aware of any other language he's designed
12:35:39 <CosmicRay> but he's always talking about it :-)
12:35:53 <ibid> but you can't call a person a compilsive pl designer if he's ever designed only one language (assuming he's old enough to have had time for several)
12:36:00 <ibid> :)
12:36:05 <SamB> ibid: yes you can!
12:36:10 <ibid> SamB: oh?
12:36:10 <CosmicRay> ibid: even if he has a beard? :-)
12:36:16 <kosmikus> mattam: ok ... I think I won't do much Gentoo-related this year anymore
12:36:16 <ibid> CosmicRay: :)
12:36:20 <SamB> if he continually adds syntactical cruft to it, yes!
12:36:31 <ibid> SamB: syntax is irrelevant ;)
12:36:37 <ibid> anyway, the phrase is:
12:36:38 <Muad_Dibber> heh kosmikus got fed up with gentoo?
12:36:53 <ibid>  - Larry Wall's Perl's sole good feature (``if`` after simple
12:36:53 <ibid>    statements) has been incorporated with thanks.
12:36:56 <CosmicRay> ibid: if you start saying "sugar is irrelevant" too, you better watch out :-)
12:37:08 <ibid> CosmicRay: oh?
12:37:19 <Igloo> incorporated into what?
12:37:25 <CosmicRay> ibid: yes, my wife is a big dessert fan :-)
12:37:27 <ibid> Igloo: into my current design
12:37:39 <mattam> kosmikus: me neither... got some research work to do
12:37:41 <wagle> sugar is irrelevant.  you will be assimilated.
12:37:44 <Igloo> Ah. What makes your design unique?
12:37:46 <CosmicRay> heh
12:37:56 <ibid> Igloo: it's been designedb by me? ;)
12:37:59 <Heffalump> lol
12:38:08 <CosmicRay> ibid: you sound like megamonad!
12:38:17 <Igloo> :-)
12:38:19 <CosmicRay> MegaMonad: what makes your design unique?
12:38:21 <ibid> (no, it's not an innovative language, if that's what you mean)
12:38:36 <MegaMonad> CosmicRay: Shopr: of the language process to evaulate a list of interesting things, like the unique of the design of my ability to understand what you're talking about. It makes the code i'm doing myself. :0.
12:38:56 <CosmicRay> yup, "it makes the code i'm doing myself" sounds about like ibid :-)
12:39:03 <ibid> (more like a conservative design based on the state of the art and certain stylistic design decisions that rule a lot of the more esoteric stuff out
12:39:17 <Heffalump> oh yes, I also have a package of the HTTP library, and that's much closer to being lintian clean ;-)
12:39:21 <kosmikus> Muad_Dibber: no. just not much time atm.
12:39:45 <ibid> CosmicRay: my point being that i regard language design as an art
12:40:05 <Heffalump> is there a good numbering convention for doing releases based on darcs repos, rather than explicit version numbers?
12:40:15 <Muad_Dibber> kosmikus: rather busy than bored ;)
12:40:22 <ibid> CosmicRay: and really, there is only one objective measure of uniqueness of art: when was it made, by whom, and how many similar things did he or she make
12:40:23 <CosmicRay> ibid: too many people don't.
12:40:30 <kosmikus> Muad_Dibber: right :)
12:40:49 <CosmicRay> ibid: I hold high regard for those that are able to craft a quality language ilke haskell
12:40:53 <CosmicRay> ibid: or python...
12:40:55 <ibid> heh
12:40:55 <Muad_Dibber> although some teachers overdo that ;)
12:41:03 <CosmicRay> ibid: so many people would come up with c++ or java :-)
12:41:08 <ibid> you'd not like what i wrote about haskell in the same document :)
12:41:20 <mattam> CosmicRay: or ocaml ?
12:41:22 <ibid> this language is btw closer to c++ and java than haskell
12:41:26 <CosmicRay> ibid: or sure, shatter my idealism :-)
12:41:29 <ibid> :)
12:41:38 <musasabi> Does monadic in math have a clear relation to monad in haskell?
12:41:40 <CosmicRay> ibid: c++ *AND* java.  now that is scary.
12:41:49 <ibid> CosmicRay: wanna see? :)
12:41:55 * CosmicRay imagines trying to read from the keyboard with some sort of UnbufferedInputCrappyStreamReader template
12:41:58 <Heffalump> musabi: no
12:42:01 <CosmicRay> <g>
12:42:03 <Heffalump> IM musasabi: no.
12:42:04 <CosmicRay> ibid: sure :-)
12:42:07 <mattam> enlighten us ibid 
12:42:14 <CosmicRay> ibid: actually most of my java complaint lies with its standard library
12:42:19 <ibid> >> Rather less obviously Stroustrup's C++ [Cpp]_ and Gosling's Java [Java]_ have been inspirational: I have written code in both and while both have their moments, I regard C an improvement on both of these successors.
12:42:30 <CosmicRay> haha
12:42:31 <musasabi> thanks.
12:42:33 <tuomov> isn't 'monadic' about the same as 'unary'
12:42:43 <ibid> tuomov: that's one meaning
12:43:10 <musasabi> This was mostly about structures consisting of the base set and unary predicates - so yes.
12:43:30 <ibid> http://kaijanaho.info/tmp/Language-Specification.html (be gentle, folks, the spec is still fluid and it has known inconsistencies, since i'm making some pervasive changes as we speak, and that's a semi-live copy)
12:43:35 <CosmicRay> mattam: I am less of an ocaml fan now that I know about haskell
12:43:55 <CosmicRay> mattam: It seems nice for those cases where laziness is annoying
12:44:03 <mattam> is monadic logic related to the fact that you quantify individuals (and if yes then why is there 2nd order ml) ?
12:44:12 <CosmicRay> mattam: also camlp4 is a great idea but the implementation is overly convoluted
12:44:54 <ibid> mattam: iirc monadic logic means that you can't have many-place relations (directly in the language)
12:45:00 <mattam> well, they retain efficiency and inference.
12:45:02 <Igloo> It sounds like a horrific idea to me  :-)
12:45:03 <ibid> mattam: nothing to do with quantification
12:45:35 <mattam> you mean one-place predicates only ?
12:45:39 <Igloo> As long as you have a consistent set of extensions in one library it's fine, but mixing and matching just sounds scary
12:46:00 <Heffalump> mattam: that's roughly what monadic unification does, but for free variables rather than predicates.
12:46:18 <Heffalump> the order just relates to what order of type your free variables can have
12:46:42 <mattam> which order ?
12:46:55 <ibid> mattam: yes
12:47:14 <Heffalump> a first order function takes ground types as parameters
12:47:22 <Heffalump> a second order function takes first order functions as parameters
12:47:23 <Heffalump> etc.
12:47:31 <mattam> yes
12:47:32 <ibid> (updated, reload if you are reading)
12:48:28 <ibid> in logic, first-order quantifies over individuals, second-order quantifies over sets of individuals, higher-order quantifies over sets in general
12:48:38 <mattam> i thought you were talking about some bizarre order related to unification, nm :)
12:48:53 <Heffalump> I was defining second-order monadic unification.
12:49:09 <Heffalump> (possibly inaccurately, since it's a while since I read about it)
12:49:38 <SamB> hmm, interesting that proprietary can mean either non-free or program-specific-tangly-internal-format/protocol
12:49:41 <mattam> sort of it mixed in my mind with rewriting and reductions orders when you said unification
12:50:06 <ibid> SamB: proprietary means essentially privately owned
12:50:30 <SamB> ibid: I figured as much
12:50:59 <SamB> I guess in software it means either "you aren't allowed to know" or you 
12:51:00 <ibid> (i'm disappointed nobody has exploded over me yet...)
12:51:06 <SamB> don't want to know
12:51:12 <SamB> stupid enter key
12:51:12 <Itkovian> evening
12:51:30 <Heffalump> can you give an example of where a standard is openly documented but still considered proprietary?
12:51:32 * Itkovian is erm ... painting doorsteps
12:51:45 <wagle> Heffalump: patents
12:51:49 <Heffalump> I would say that proprietary means restricted, either by secrecy or by legal means.
12:52:04 <tuomov> proprietary means stay away
12:52:07 <SamB> Heffalump: does COM count?
12:52:18 <mattam> proprietary means mine
12:52:19 <Heffalump> I don't know much about that.
12:52:23 <shapr> CosmicRay: two Haskell thingies named lambada , one was a GHC to JVM compiler, one was Erik Meijer at microsoft
12:52:35 <CosmicRay> shammah: I am interested in the former
12:52:42 <shapr> the JVM compiler?
12:52:45 <CosmicRay> yes
12:52:45 <Heffalump> shapr: are you in a rush for HaXml debs, btw?
12:52:46 <ibid> a person is named lambda?
12:52:53 <CosmicRay> ibid: no, lambada
12:52:56 <Heffalump> no, a thing named lambada.
12:53:15 <shapr> there were at least three GHC to JVM compiler projects, the only one that I think is still going on is happening at unsw
12:53:21 <ibid> ahh
12:53:21 <SamB> Erik Meijer sure sounds like a person to me
12:53:33 <Heffalump> I doubt Erik was at MS when he did Lambada
12:53:36 <wagle> how about haskell to .net?
12:53:39 <shapr> Heffalump: not in a rush, but I'd love to play with anything you got
12:53:40 <mattam> it's a summer dance name
12:53:53 <CosmicRay> shapr: all I can find are thesis papers
12:54:01 <SamB> shapr said he WAS one of the lambadas!
12:54:16 <shapr> do you specifically want lambada, or do you want a Haskell -> JVM compiler?
12:54:40 <CosmicRay> shapr: both, if you have them :-)
12:54:52 <shapr> I'm pretty sure the lambada project died.
12:54:53 <wagle> whoa..  compiling to .net or jvm would save me the tedium of working out the semantics of the machine language
12:54:56 <wagle> coo;l
12:55:12 <CosmicRay> wagle: yes, .net would be useful too, though somewhat less so
12:55:13 <shapr> I sent email to the lambada guy sometime back...
12:55:35 <tuomov> jvm.. yuck.
12:55:37 <shapr> Anyway, I think dons was the first guy working on the existing JVM target, and sazzle is the current person.
12:55:42 <tuomov> I have only bad experiences from such things
12:55:51 <tuomov> bloat, crash, bloat, crash
12:55:57 <wagle> CosmicRay: .net seems more friendly to multiple source languages..
12:56:30 <shapr> The problem with both .net and jvm (I think both?) is maybe the lack of support for tail calls and closures?
12:56:33 <shapr> not sure about that
12:56:44 * shapr goes back to the movie
12:57:11 <wagle> i think the mercury port pointed up the tail call probnlem
12:57:41 <Heffalump> yeah, they and several other people asked for tail calls.
12:57:53 <Heffalump> but AIUI it's still not really good enough. (in .NET)
12:58:02 <Heffalump> but at least M$ did try
12:58:04 <wagle> argggghhh..  my dns is still fubarred..  i cant google!  i may die!
12:58:23 <mattam> the jvm has tail calls since 1.3 no ?
12:58:35 <arjanb> no
12:58:43 * dblhelix thinks lambdabot should learn to google: @google some-search-term
12:59:08 <mattam> then it's the sun 1.3 compiler which did ? 
12:59:17 * SamB wants a quick way to get to the mozilla tab with a particular plugin instance running in it
13:00:11 <Heffalump> you can't express tail calls in JVM bytecode
13:00:30 <Darius> I thought there was some @google plugin upon a time.
13:00:31 <Heffalump> you can compile away tail recursion, but not mutual recursion, in the Java->JVM translation
13:00:40 <Heffalump> but that's no help for mutual recursion etc
13:01:29 <mattam> ok
13:02:00 <SamB> Darius: what?
13:02:09 <SamB> oh, that
13:02:14 <Heffalump> can anyone summarise what haskelldb provides over what hsql provides?
13:06:06 * Heffalump looks at libc6's lintian report and wonders why he bothers trying to make things lintian-clean :-)
13:06:22 <CosmicRay> heh
13:06:26 <SamB> I wonder which webpage this really cool sid file is embedded in?
13:07:09 <Heffalump> so how does one specify empty Depends: and not have lintian complain?
13:07:24 <CosmicRay> omit the Depends line
13:07:46 <Heffalump> I did that
13:07:51 <Heffalump> or rather I commented it out
13:09:47 <ibid> Heffalump: you can't comment it out
13:09:51 <ibid> Heffalump: there is no comment syntax
13:10:10 <SamB> ibid: why is that?
13:10:12 <Heffalump> well, it didn't refuse to parse it
13:10:20 <ibid> SamB: hysterical raisins
13:10:25 <ibid> Heffalump: what did you use?
13:10:25 <SamB> Heffalump: maybe it is syntax for nothing in particular?
13:10:41 <SamB> or rather, nothing remarkable
13:11:17 <Heffalump> #
13:12:27 <ibid> Heffalump: it probably just parses it as a field called #Depends
13:12:57 <Heffalump> well, it still complains about the lack of a Depends field, which is my real issue.
13:12:59 <SamB> where are these hystarical raisins?
13:13:03 <Heffalump> lintian, that is.
13:13:20 <ibid> Heffalump: what's the exact error message?
13:13:50 <Heffalump> whee: haxml: missing-depends-line
13:13:57 <Heffalump> s/whee/W/ # silly irssi
13:14:03 <ibid> and what does lintian -i say?
13:14:04 <Heffalump> I guess it is only a W:
13:14:16 <Heffalump> oh, I keep forgetting that.
13:14:35 <Heffalump> (that's equivalent to piping into linitian-info, right?)
13:14:39 <SamB> nobody in their right mind would actually name a field for use by normal programs beginning with #...
13:14:39 <ibid> SamB: in the past, where else?
13:14:59 <Heffalump> ah. It's right.
13:15:15 <Heffalump> I should have done the shlib:Depends, cos even Haskell-compiled programs have some .so dependencies
13:15:21 <SamB> the closest I can think of is a MIME header whose name began with <!--
13:15:30 <SamB> and that was only for being ignored 
13:16:37 <SamB> Heffalump: well, unless you used libc.a, yeah
13:31:04 <shapr> Heffalump: did you already get your haskellDB summary?
13:32:12 <Heffalump> not that that I noticed :-)
13:32:14 <shapr> oh
13:32:22 <shapr> HDB is a database *un*wrapper
13:32:31 <shapr> it exposes the set theory behind SQL
13:33:01 <shapr> I wrote a HaskellDB tutorial, and Lemmih revamped it for the latest version of HaskellDB
13:34:04 <shapr> about eleven years ago I wished for a "ParaSQL" where I could write generic SQL and it would 'compile out' to whatever backend I was using, or even to multiple backends at the same time.
13:34:14 <shapr> HaskellDB does that and more.
13:34:27 <shapr> http://www.haskell.org/hawiki/HaskellDbTutorial
13:35:06 * Darius wonders what he was wishing for eleven years ago...
13:35:25 <shapr> Some of the really cool features are that you can describe a set as a DBInfo record and HaskellDB can build that structure in your choice of backend, SQLite, PostgreSQL, MySQL, ODBC.
13:36:11 <shapr> HDB can also build a DBInfo structure from existing backend data, which is really handy for porting a bunch of data from one backend to another.
13:36:32 <shapr> Last time I used tools that did this sort of thing (ten years ago) something called "Erwin" was $20,000 a copy.
13:37:41 <shapr> The only flaws of HDB are things that bringert and company didn't have time to do as part of their student project.
13:38:25 <Heffalump> hmm.
13:38:36 <shapr> Right now a query compiles out to the same SQL for each backend, future work would be to have both that generic SQL, and plugins for each backend so you can tune it.
13:38:51 <musasabi> This was mostly about structures consisting of the base set and unary predicates - so yes.
13:38:59 <shapr> Also, efficient (effective?) use requires good subselects, and MySQL has only just added that.
13:39:14 <musasabi> (sorry) irssi history + very laggy connection
13:39:27 <Heffalump> I can see that a good implementation of relational algebra on top of SQL, together with some good query optimisation, would be very nice.
13:39:36 <shapr> Heffalump: since I used to maintain multi-page SQL queries, I am *thrilled* to be able to do higher-order queries and the like.
13:40:08 <basti_> sql should evaluate lazily
13:40:10 <Heffalump> that's a good point
13:40:12 <shapr> and I mean multi-page with no whitespace :-/
13:40:35 <CosmicRay> shapr: I didn't know sql came in a German version <grin>
13:40:47 <bringert> as for flaws in haskelldb: there are 20-odd bugs in the tracker, feel free to fix them :)
13:40:51 <shapr> ßQL!
13:40:54 <bringert> http://sourceforge.net/tracker/?group_id=101095&atid=629040
13:40:55 <Heffalump> does it have a darcs repo, btw?
13:41:17 <bringert> Heffalump: HaskellDB is in CVS at SourceForge
13:41:23 <bringert> darcs would be nice though
13:41:38 <bringert> is there a way to carry over CVS history to darcs?
13:41:44 <shapr> I will say that bringert and company did a spectacular job turning a Hugs-only TREX-requiring implementation into a spiffy and fun GHC implementation.
13:41:57 <shapr> yes, tailor.py by lelit
13:41:59 <Heffalump> bringert: yes, cvs2darcs, or tailor.py
13:42:00 <bringert> complete with hairy type classes
13:42:14 <Heffalump> but cvs2darcs broke when I tried it on a :pserver: repository
13:42:21 <bringert> and interesting type errors when you get your types wrong
13:42:26 <Heffalump> and I haven't used tailor.py yet
13:42:32 <shapr> And bringert got a record 58-minute single-file compile time for one of his early BoundedList implementations =)
13:42:40 <bringert> hehe
13:42:43 <bringert> that was fun
13:42:44 <CosmicRay> shapr: *wow*
13:42:55 <bringert> forester made that file
13:43:05 <CosmicRay> shapr: and I thought it was bad when ghc+gcc together used the better part of a gig or RAM and 45 seconds to compile a file :-)
13:43:06 <bringert> it had around 32000 class instances
13:43:07 <bringert> IIRC
13:43:09 <Heffalump> that sounds pretty fast for GHC ;-)
13:43:30 * xerox melts, a gig of RAM.
13:44:15 <CosmicRay> ghc had generated a 120,000-line C program iirc
13:44:56 <Itkovian> nice.
13:52:24 <ikegami--> I've reached at Tokyo
13:52:29 <shapr> long train
13:52:42 <konstantin> hello @all
13:52:51 <shapr> hiya konstantin 
13:53:39 <konstantin> is there anyone who can help with hugs + Mac OS X?
13:54:00 <konstantin> i compiled Hugs_Nov_2003
13:54:11 <ikegami--> yes, I have
13:54:24 <Sava> i installed hugs on Linux a few days ago, if its anything similar?
13:54:33 <konstantin> now, i can not use the Cursor Keys within Hugs
13:55:04 <konstantin> When i press one of the arrow keys, i get this:
13:55:14 <konstantin> Prelude> ^[[A^[[A^[[A^[[A^[[A^[[B^[[B
13:55:16 <ikegami--> (however, I have to quit soon)(I'll come back)
13:55:16 <ikegami--> at Terminal?
13:55:26 <konstantin> yeah
13:55:52 <ikegami--> I use hugs with X Window and cursor keys work
13:55:59 <konstantin> hmmm
13:56:02 <ikegami--> (on MacOSX
13:56:05 <konstantin> wait a moment, i'll try
13:57:20 <konstantin> sa as in in Terminal:
13:57:26 <konstantin> Prelude> ^[[A^[[D^[[B^[[B^[[B^[[C^[[C^[[C^[[D
13:57:54 <ikegami--> % stty
13:57:54 <konstantin> i tried to recompile hugs, this did not help
13:58:02 <shapr> sounds like terminal settings problems
13:58:12 <basti_> indeed.
13:58:14 <shapr> what does "echo $TERM" give you?
13:58:17 <konstantin> yes, but i did not change anything in terminal
13:58:17 <basti_> x resources
13:58:18 <konstantin> hmmm
13:58:21 <basti_> and the like
13:58:39 <ikegami--> anyway it seems to work on Emacs
13:58:49 <ikegami--> with haskell-hugs-mode
13:59:37 <ikegami--> if you like emacs, haskell-mode is useful
14:00:05 <konstantin> i don't like emacs :-(
14:01:24 <konstantin> where can i get help with this problem?
14:01:53 <ikegami--> try "stty"
14:02:16 <whee> konstantin: it works in X11 under OS X but not Terminal.app?
14:03:44 <konstantin> it doesn't work in X11 either
14:04:02 <konstantin> what should i try?
14:04:04 <whee> does hugs require readline for the history?
14:04:11 <Heffalump> I think so.
14:04:14 <Heffalump> it certainly used to
14:04:37 <whee> I don't think OS X has the readline library bundled, so you'll need to compile that first
14:04:55 <konstantin> @whee: I don't know, how can i check this?
14:04:55 <lambdabot> Sorry, I don't know the command "whee:", try "lambdabot: @listcommands"
14:05:06 <konstantin> (at)whee: I don't know, how can i check this?
14:05:37 <whee> konstantin: I'm running OS X 10.3(.6), and it doesn't bundle readline; you'll have to get it first
14:06:01 <konstantin> (at)whee: Where can i get it?
14:07:03 <whee> http://cnswww.cns.cwru.edu/php/chet/readline/rltop.html
14:07:44 <whee> I didn't have any problems compiling and using 5.0; you shouldn't have to do anything special other than ./configure && make
14:08:07 <konstantin> cool, thank you!
14:08:15 <konstantin> i'll try tihs right now
14:08:41 <whee> you'll probably have to reconfigure/recompile hugs after you install readline
14:14:35 <konstantin> whee, do you have to set "#define HAVE_LIBM 1" in the config.h ? Without this, Hugs won't compile on my iBook
14:15:21 <whee> I've never used hugs, so I don't really know about that; libm does exist in /usr/lib so that should be correct though
14:16:14 <konstantin> ok, thanks
14:18:58 <konstantin> is there an easy way to create a binary Mac OS X Package (.pkg) of a Hugs (or other Unix Apps that needs to be compiled)
14:19:14 <konstantin> ... installaton
14:21:40 <whee> not sure about easy; there's docs on it: http://developer.apple.com/referencelibrary/DeveloperTools/idxFilesSoftwareInstallation-date.html (but I've never done it myself)
14:21:41 <shapr> konstantin: I don't know, have you looked for a hugs pkg on haskell.org?
14:22:56 <whee> there's an OS X package for ghc, but I don't see one for hugs
14:24:33 <konstantin> woooheee! Hugs works now, thanks (at) all!
14:24:47 * shapr cheers
14:32:38 <Heffalump> can dh_installdocs be told to copy a file with one name to another name in the generated package?
14:40:26 <Heffalump> bah, where'd those hordes of Debian developers disappear to?
14:41:29 <shapr> CosmicRay: hey, what did you want with lambada anyway?
14:41:38 <CosmicRay> shapr: curiosity
14:41:48 <CosmicRay> shapr: always looking for ways to expand the reach of haskell :-)
14:41:57 <shapr> I can dig that
14:42:15 <shapr> best to talk to dons, sazzle, and chilli for more info on Haskell to JVM.
14:42:28 <CosmicRay> that, plus potential to get some things up and running fast by reusing some existing code in other languages
14:42:40 <wolfman8k> *burp*
14:43:02 <wolfman8k> shapr: that patterns book is all about oop!
14:44:03 <Heffalump> cosmicray: is it normal to copy the copyright notice manually to debian/copyright, rather than copying it during the package creation scripts?
14:44:13 <CosmicRay> Heffalump: yes, that's normal
14:44:33 <CosmicRay> in fact, usually debian/copyright is not identical to the original notice
14:44:46 <CosmicRay> for instance, it often includes a pointer to an appropriate file under /usr/share/common-licenses
14:44:46 <Heffalump> what happens if the source licence changes and you don't notice?
14:45:00 <CosmicRay> and info on where it was downloaded from
14:45:07 <CosmicRay> Heffalump: release-critical bug
14:45:20 <Heffalump> that's not much use if noone else notices either :-)
14:45:37 <CosmicRay> Heffalump: right, but "cp COPYRIGHT debian/copyright" is no guarantee either
14:45:45 <CosmicRay> upstream could always add a new copyright notice to a particular file
14:45:54 <CosmicRay> some upstreams are very sloppy about that
14:45:55 * Heffalump looks unimpressed with /usr/share/common-licenses/BSD
14:46:02 <Heffalump> true, but it's at least a better attempt
14:46:08 <CosmicRay> that's why, for instance, the haskell cryptolib isn't in debian
14:46:50 <Igloo> debian/copyright should have things like when it was Debianised, where the source came from etc too
14:47:01 <CosmicRay> and typically does
14:48:12 <shapr> wolfman8k: but wait, there's more!
14:48:28 <shapr> wolfman8k: the book is about finding new patterns
14:48:40 <Heffalump> but in this case I expect the upstream authors to accept the debian/ directory into their repo. So the time of debianisation is somewhhat irrelevant.
14:49:52 <CosmicRay> Heffalump: fwiw that sort of scheme tends to work poorly unless the debian maintainer has commit access to upstream and follows both debian and upstream closely
14:50:12 <Heffalump> but darcs is magic :-)
14:50:31 <Heffalump> gah. No copyright notices on half the files.
14:50:33 <CosmicRay> Heffalump: only if your particular magic is black ;-)
14:50:55 <Heffalump> bringert: you still around?
14:50:56 * shapr tries to crack the necrocryptocon!
14:51:13 <bringert> Heffalump: yes
14:51:25 <Darius> shapr: What is this book wolfman8k is talking about?
14:51:26 <Heffalump> could you clarify the license on the stuff in HTTP?
14:51:33 <bringert> I can try
14:51:44 <Heffalump> the LICENSE file only talks about the HTTP and Base64 modules
14:52:05 <Heffalump> Codec.Zord64 and Codec.MD5 seem to have no copyright at all
14:52:16 <bringert> true
14:52:27 <Heffalump> Network.Browser is also apparently copyright the original author and under a BSD license.
14:52:35 <bringert> those are stolen from Igloo's crypto lib
14:52:46 <shapr> Darius: http://www.dreamsongs.net/NewFiles/PatternsOfSoftware.pdf
14:52:57 <Darius> Ah
14:53:02 <bringert> ah, the LICENSE file covers Network.Browser too
14:53:06 <Heffalump> oh dear. That Igloo chap can be really hard to find :-)
14:53:10 <shapr> Darius: did you see my blog entry about "Worse is Better" being a false dichotomy?
14:53:31 <Darius> shapr: I don't read to many blogs (read effectively none).
14:53:31 <Igloo> Pick whichever of BSD, GPL and LGPL fits everything else best
14:53:34 <wolfman8k> shapr: ok, i guess i'll have to read the whole thing :)
14:53:38 <wolfman8k> shapr: where is your blog?
14:54:05 <Igloo> (or just use them from some larger library package)
14:54:09 <shapr> wolfman8k: http://www.scannedinavian.com/
14:54:18 <Heffalump> this is BSD, except the text got edited to eliminate the word 'organisation', because the author isn't an organisation.
14:54:23 <shapr> wolfman8k: if the content bores you, you can just look at the cute pix =)
14:54:26 <Heffalump> but I guess that's pretty much ignorable.
14:54:32 <Heffalump> since you're not either
14:54:35 <bringert> Igloo, Heffalump: ok, I'll remove the notice about the license covering just some of the files then
14:54:46 <Heffalump> thanks :-)
14:55:18 <Heffalump> I'll give in to the Debian mafia and make a copy in debian/copyright too.
14:55:25 <Darius> Ack! Shapr with "greater total cheerfulness".
14:55:27 <bringert> iirc, the LICENSE file is copied from Warrick Gray's (the original author) homepage
14:55:33 <CosmicRay> Heffalump: hahaha.  you think we are the debian mafia?
14:55:44 <CosmicRay> Heffalump: we are but peons who deign to guess who the real mafia is :-)
14:55:45 <wolfman8k> shapr: hm...
14:55:47 <Heffalump> you're their representatives on earth^W#haskell
14:55:50 <Igloo> I'm not sure if you should just refer to the common-licences version if it's slightly modified
14:56:06 <Heffalump> the common-licenses version is broken anyway.
14:56:06 <shapr> Darius: what? don't like that description?
14:56:11 <Heffalump> Copyright (c) The Regents of the University of California.
14:56:12 <Heffalump> All rights reserved.
14:56:13 <Igloo> broken?
14:56:15 <Heffalump> since the first two lines are that
14:56:16 <CosmicRay> Heffalump: yes
14:56:23 <Heffalump> and the rest of it says you have to reproduce the above copyright notice.
14:56:26 <Darius> shapr: Just the idea of it.
14:56:34 <Igloo> Hmm
14:56:40 <CosmicRay> Heffalump: I said in one of my files, something like "the contents of common-licenses/BSD with "Ian Lynagh" substituted for "UC Berkeley"
14:56:50 <Heffalump> well, he's not a university :-)
14:56:58 <Heffalump> and clause 3 specifically refers to "the University"
14:57:01 <bringert> hmm, should I add myself and all contributors to the LICENSE file?
14:57:05 <shapr> Darius: thing is, I have regular bouts of both cheerfulness and depression, but they can be as short as thirty seconds. So the overall score is the most important.
14:57:07 <Heffalump> bringert: I'd suggest so.
14:57:27 <Heffalump> and the bit in capitals talks about the REGENTS.
14:57:35 <shapr> Darius: can you suggest a better description?
14:58:31 <Darius> shapr: I was just messin' with you.  I have noticed at times that you've seemed somewhat down (or maybe you were rather outright about it).
14:58:45 <Heffalump> NO MESSING WITH THE SHAPR!
14:58:48 * shapr ducks
14:58:54 <Heffalump> (you don't know where it's been...)
14:58:57 * shapr laughs
14:59:12 <Darius> Heffalump: I know some places.
14:59:18 <Heffalump> well, so do I
14:59:19 <bringert> hmm, shapr: you contributed to Network.HTTP, right?
14:59:31 <Heffalump> but none of us can even begin to guess at the full reality of shapr's wanderings
14:59:58 <shapr> bringert: if you mean the "choose your own port" code, I wrote about thirty chars, which you immediately rewrote into something more usable.
15:00:23 <CosmicRay> Heffalump: I think they all have something to do with unicycling.
15:00:33 <bringert> ok, no credit for you then :-P
15:00:34 <shapr> Heffalump once said "I find it best to view shapr as a very non-linear process"
15:00:46 <shapr> I've always hoped that was a compliment.
15:00:48 <CosmicRay> hehe
15:01:02 <bringert> is the "All rights reserved" part necessary?
15:01:11 <shapr> bringert: s'okay by me, you did all the work anyway.
15:01:34 <Heffalump> the UC Berkeley one has that too
15:01:34 <Igloo> Should that be in an OS licence?
15:01:36 <Heffalump> so probably.
15:01:47 * Igloo looks confused
15:02:13 <Heffalump> doesn't it just make it clear that it's not available under any other terms?
15:03:10 * Igloo should stop trying to understand things about IP law
15:03:26 <tuomov> law is not meant for understanding
15:03:46 * Heffalump is wondering how much longer there'll be software engineering jobs in the UK
15:03:57 <Heffalump> (and if becoming a lawyer mightn't be a good move :-)
15:04:26 * shapr feels the same about Europe and the USA
15:05:13 <Darius> tuomov: Ain't that the truth.
15:05:15 <Sava> go be a lawyer, will pay 54573486 times more :]
15:05:29 <Heffalump> about that much more boring, too
15:05:40 <Sava> than being a software engineer? :P
15:05:48 <Heffalump> yes
15:06:05 <Sava> as much as i like hacking code, wouldnt want it to be my profession =/
15:06:12 <tuomov> I hate the 'engineer' part in that
15:06:30 <Sava> its the other stuff that comes with it, like all the documentation ><
15:06:34 <Darius> Yes, tuomov simply wants to be software.
15:06:53 <Heffalump> engineering is very much what most software development is about
15:07:06 <wli> I'm sure as heck not inventing anything
15:07:09 <monochrom> If you drive a bus, you are the software of the bus.
15:07:17 <wli> I'm not even being given the latitude to do so
15:07:25 <Heffalump> monochrom: especially if you hit something
15:07:27 <tuomov> hacking is not engineering
15:07:43 <bringert> Heffalump: I have pushed the new license file now
15:07:50 <Heffalump> bringert: yep, already got it, thanks :-)
15:08:12 <Sava> anyone free to give me a hand with some pretty basic Haskell code? =/
15:08:17 <tuomov> engineering is boring toil in an industry; hacking is craftmanship
15:08:19 <wli> I get stuff like
15:08:30 <wli> "$KERNEL had shared pagetables. Do it for Linux."
15:08:32 <Sava> im still only really getting started with Haskell, so im quite useless at it =/
15:08:36 <bringert> Heffalump: do you get a notice when stuff is pushed to the repo?
15:08:46 <Heffalump> nope.
15:08:50 <Heffalump> I just tried randomly just in case
15:08:54 <bringert> ah
15:09:00 <wolfman8k> Worse *is* better!
15:09:09 <shapr> false dichotomy!
15:09:10 <basti_> -= ? =-
15:09:14 <bringert> I thought maybe there was some cool feature to get notices on pushes
15:09:24 <shapr> Simplicity of Implementation == The Right Thing(tm)
15:09:31 <wli> of course, black is white, night is day, evil is good, and worse is better
15:09:42 <wolfman8k> python doesn't have a simple implementation =D
15:09:43 <wli> not to mention false is true
15:09:44 <shapr> agile processes, unix, etc have proven that
15:10:03 <shapr> I think monads will beat objects because monads are simpler.
15:10:27 <wolfman8k> false is true..... of course! it makes perfect sense! all is at peace now!
15:10:52 <wli> UNIX hasn't proven it, but rather the opposite. It's been a phenomenal failure and there are only 2 or 3 UNIX vendors left standing.
15:10:53 <shapr> Occam's Grindstone: A simpler code is more likely to be used than complicated code.
15:11:14 <tuomov> that's quite untrue
15:11:18 <shapr> I'd say Linux have proven it.
15:11:28 <Heffalump> This package was debianised by Ganesh Sittampalam <ganesh-debs@earth.li>
15:11:28 <Heffalump> on Mon, 13 Dec 2004. 
15:11:28 <Heffalump> It was downloaded using 'darcs get http://cvs.haskell.org/darcs/http/'
15:11:35 <tuomov> if it was up to the coders to decide what code to use, maybe so
15:11:37 <Heffalump> is that a reasonable bit of nonsense to put at the top of the copyright file?
15:11:45 <tuomov> but the code to be used is decided by people who don't know better
15:11:57 <wli> hm, well, that dirty laundry hits close enough to home I should probably refrain from disseminating it
15:12:36 <Itkovian> gdnight all
15:13:23 <wolfman8k> shapr: btw have you seen any python programs that use monads? :)
15:13:53 <shapr> not lately
15:14:06 <wolfman8k> but they exist? :o
15:14:32 <shapr> I've seen Perl and Scheme implementations of monads.
15:14:34 <shapr> no Python
15:14:58 <wolfman8k> wouldn't python's lack of type classes cause a problem for monads?
15:16:15 <shapr> I don't think so. You could still use the interface just fine. I doubt it would be as smooth to use, but I'm sure there are cases where it would be handy.
15:16:19 * shapr thinks
15:16:24 <shapr> actually, Python does sort of have typeclasses
15:16:36 <shapr> and they're becoming formal now with the Interface stuff
15:16:45 <shapr> __implements__ = IMonad
15:18:40 <wolfman8k> the Interface stuff is like compile time verification of classes?
15:19:49 <Darius> wolfman8k: You don't need type classes to do monads.
15:21:17 <wolfman8k> but isn't the point of monads that i use the bind function and friends without actually knowing the exact type of monad?
15:21:32 <Darius> No.
15:21:34 <Heffalump> yes.
15:21:41 <Heffalump> (fight!)
15:21:56 <Heffalump> ok, it's not the sole point
15:22:05 <Heffalump> but it's what makes them so powerful in Haskell
15:22:28 <Darius> Heffalump: If by "exact type" you mean internal details, then I agree, if you just mean lack of overloading then that's not the point at all (but is nice).
15:22:30 <shapr> I think it's the cookie-cutter effect, where you sub in one piece of code a zillion places.
15:22:57 <shapr> Darius: oh, I have a brain-teaser, how to make a design-by-contract monad where you can change the conditions at runtime?
15:25:53 <shapr> Only way I could think of was to have a separate monad for each set of conditions
15:25:58 <Sava> since you all apparently love monads, you mind giving me a quick hint on something? :D:D:D
15:26:01 <Darius> What all would be required for it to be design-by-contract?  Without OO, it seems to degenerate to simply pre- and post- conditions.
15:26:30 <shapr> sure, just pre and post, but how to have per-call granularity?
15:26:48 <shapr> not necessarily per-call
15:26:54 <shapr> Sava: like what?
15:26:56 <Darius> withPrePostCondition precondition postcondition body.
15:27:49 <shapr> that sure does sound easy
15:28:36 <shapr> I have to try that when I get the urge.
15:30:19 <Sava> its some really basic IO code im writing, im just not very good
15:30:25 <Sava> well, not very good at Haskell ;)
15:31:06 <Sava> basically, its a function that reads in a simple makefile, and builds a list of dependencies from it
15:31:41 <Sava> but im getting an error and im not sure why, although its probably a really simple syntactic mistake
15:31:49 <shapr> what's the error?
15:32:00 <Sava> its in a do { ... } construct
15:32:01 <Sava> one sec
15:32:13 <Sava> > readDependencies :: String -> IO [Dependency]
15:32:13 <Sava> > readDependencies s
15:32:13 <Sava> >	= do { 
15:32:13 <Sava> >		file <- readFile "/home/disley/Programming/Haskell/" ++ s
15:32:13 <Sava> >		let line = lines file
15:32:14 <Sava> >		while notEOF
15:32:16 <Sava> > 			(do dependencies ++ [parseDependency line])
15:32:18 <Sava> >		return normaliseDependencies dependencies
15:32:20 <Sava> >	     }
15:32:28 <Heffalump> igloo: does nhc98 conform to the Haskell Policy?
15:32:38 <Sava> apparently let is unexpected...
15:33:05 <Sava> its the first time iv ever used do notation in Haskell, im very very new to it all =/
15:33:08 <Heffalump> that ++ s at the end of the line with file looks wrong
15:33:22 <Sava> doenst make any difference if i take it away
15:33:45 <Heffalump> oh
15:33:51 <Heffalump> you need a ; after the file <- ... line
15:33:58 <Heffalump> cos you're using { ... } rather than layout
15:34:39 <Sava> ahh ok :]
15:34:46 <Sava> you see id probably have never worked that out =/
15:35:16 <Heffalump> if you get an unexplained error, always check the line above
15:35:32 <Sava> yeah i know, i just didnt realise in a do i needed semi colons
15:35:40 <Sava> or at least, that i did then
15:36:06 <wolfman8k> i just thought of a great idea for an addition to haskell
15:36:08 <Sava> umm, im getting the same error on the while now (with or without a ; above)
15:36:28 <Heffalump> so you have a ; on the line with the let?
15:36:40 <Sava> makes no difference
15:36:44 <Heffalump> and do you have one on the line after the while?
15:36:51 <Heffalump> (but not on the line with the while itself)
15:37:07 <Sava> yup
15:38:50 <Sava> does the general construct of the function look ok though?
15:39:09 <Sava> parseDependency creates a Dependency type from a string
15:39:35 <Sava> normaliseDependencies just rejigs the dependencies so they are in the right compilation order
15:42:56 <Heffalump> oh, you're missing brackets around the argument to return
15:43:02 <Heffalump> but generally it looks right
15:43:11 <Heffalump> I generally use layout, not { ... ; ... ; ... }
15:44:48 <Sava> ok stuck brackets in, but is there a reason it doesnt expect a while there?
15:45:14 <Sava> there must be, but i just cant see it (my code looks almost identical to an example while loop thats in a book i have here)
15:47:18 <shapr> Man, I wish I had already finished FLM, I'd really like to use it for "Patterns of Software"
15:47:48 <Sava> i dont suppose you see the glaring error do you shapr? =/
15:47:56 * shapr blinks
15:47:57 <Sava> Haskell depresses me :( lol
15:48:08 <shapr> Sava: can you put it on the paste page?
15:48:12 <shapr> @wiki HaskellIrcPastePage
15:48:12 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
15:49:00 <Sava> hmm, thats quite funny
15:49:05 <Sava> the first one on the top of that page
15:49:40 <Sava> the readDependencies one, thats the same question im doing lol
15:50:42 <Heffalump> sava: sorry, sleepy, just finishing off some stuff then going to bed.
15:50:42 <shapr> oops
15:50:59 <Sava> no worries buddy, thanks anyway :)
15:51:24 <Sava> i pasted the code ^^ somewhere btw shapr
15:51:30 <Sava> i think i might just give up on it tonight
15:52:01 <Darius> shapr: How are you going about making FLM?
15:53:38 <shapr> hacking on Flippi till it gives in
15:54:11 <shapr> Philippa wrote flippi, a simple Haskell wiki, I'm using darcs for distribution and synchronization
15:54:21 <shapr> imagemagick to produce page images
15:54:33 <Heffalump> you have a decent imagemagick haskell binding?
15:54:57 <shapr> no, but  shell calls sort of works for both imagemagick and darcs 
15:55:23 <shapr> anyway, I just want a first version out there, I'm sure actual users will have some completely different idea of how to use it than I have
15:56:01 <xerox> Someone (/me points shapr) should implement paste.lisp.org facility in lambdabot ^___^
15:56:03 * xerox runs.
15:56:35 <shapr> xerox: lambdabot was designed as a code-toy for the channel... feel free to write a plugin :-)
15:56:45 <shapr> well, maybe not designed that way, but it ended up being that
15:57:11 <xerox> gee, i still not know enough Haskell :-(
15:58:10 <shapr> well, jump in!
15:58:16 <shapr> hack on it till it works
15:58:26 <Darius> xerox: That didn't stop some of the other contributors
15:58:37 <shapr> I don't know enough Haskell to write FLM, but I just learn more stuff until I know how to write the next part.
15:58:58 <monochrom> what is FLM?
15:59:09 <shapr> Fermat's Last Margin
15:59:12 <xerox> hmpf, You'll go crazy about Fermat's Last Margin. :-D
15:59:30 <shapr> my solution for annotating research papers in electronic format, and sharing the annotations
16:00:00 <xerox> Ok, I add it to the TODO list, now i've to finish homework (Scheme implementation of Von Neumann's Machine, so much fun.)
16:00:07 <shapr> fun!
16:00:46 <xerox> I did one, this is a rewrite. Here's the first: http://paste.lisp.org/display/4207
16:02:02 <shapr> neat!
16:02:07 <xerox> ^__^
16:02:31 <xerox> It can 'run programs, 'step through and.. load programs.
16:02:39 <wolfman8k> weesher
16:03:21 <xerox> Now I'm embedding (make-state) and have the vnm getting the program while making it. I also switched from lists to hash-tables
16:03:30 <xerox> (for the instruction-set)
16:03:55 <xerox> http://paste.lisp.org/display/4342 (-:
16:04:09 <bringert> Heffalump: pushed your patches
16:06:26 <Heffalump> thanks
16:07:48 <Heffalump> who do I ask if I want an account on cvs.haskell.org ?
16:08:19 <shapr> one of the galois guys
16:08:22 <shapr> I forget which
16:08:26 <shapr> Andy maybe?
16:08:28 <Heffalump> Jeff Lewis?
16:08:31 <Heffalump> oh, Andy Moran?
16:08:36 <shapr> oh maybe it is Jeff
16:08:37 <Heffalump> I think Jeff runs the ghc repo.
16:09:31 <Heffalump> ah, they are the same place
16:12:59 <bringert> Heffalump: Simon Marlow set up my account
16:13:24 <Heffalump> it looks like Jeff runs it at the moment, so he's probably the best one to ask.
16:14:24 <Heffalump> I'll keep my changes in a respository on urchin (a hosted machine I co-own) and if a lot of stuff builds up while you're away (unlikely) I'll do something about it.
16:26:29 <Heffalump> will anything horrible break if I let dash be /bin/sh ?
16:27:44 <stepcut> undoubtably!
16:28:06 <stepcut> but I'll be damned if I know what
16:28:47 <shapr> I think there are differences between sh and dash, but I don't remember what.
16:29:11 <wolfman8k> what's dash? a shell written in haskell? :D
16:29:31 <stepcut>  "dash" is a POSIX compliant shell that is much smaller than "bash".
16:29:31 <stepcut>  We take advantage of that by making it the shell on the installation
16:29:31 <stepcut>  root floppy, where space is at a premium.
16:29:49 <wolfman8k> whoah, check this out if you can view flash: http://www.saunalahti.fi/arimaij/blackdudefalling.swf
16:30:01 <stepcut>  It can be usefully installed as /bin/sh (because it executes scripts
16:30:01 <stepcut>  somewhat faster than "bash")
16:30:05 <stepcut> (according to debian)
16:31:17 <stepcut> wolfman8k: somehow I think I just wasted 2 mins
16:31:36 <shapr> at least he survived...
16:32:13 <stepcut> was their sound ? (don't have sound hooked up at the momment)
16:32:57 <wolfman8k> stepcut: shit, you missed the sound?!??!?
16:33:00 <shapr> I had sound. The music was better than the graphics.
16:33:04 <wolfman8k> stepcut: forget it. your experience is ruined
16:33:10 <stepcut> heh
16:33:52 <stepcut> well, I can tell you, without sound, it is not very good :)
16:33:58 * shapr grins
16:34:14 <shapr> Have you seen cookiethievery? That's really great flash snippets.
16:34:40 <Heffalump> does it keep repeating?
16:34:47 <Heffalump> ah, no.
16:35:53 <shapr> see now this is ..... something - http://cookiethievery.com/afro/
16:36:24 <shapr> sort of like a cross between Kermit the Frog and Shaft.
16:37:14 <xerox> Does it loop forever?
16:37:24 <shapr> yup
16:37:32 <xerox> Nice graphics.
16:38:21 <shapr> lots of crazy goodies - http://wtf.cookiethievery.com/
16:49:03 <stepcut> ok, it is somewhat better *with* sound :)
16:49:29 <wolfman8k> yeah baby!
16:49:42 <stepcut> the flash plugin does not seem to work right with jacklaunch
16:49:59 <shapr> flash plugin doesn't work right with linux
16:53:59 <stepcut> true
16:54:04 <stepcut> though 7.x is better than 6.x
16:54:23 <wli> ghc7.x is out?
16:55:09 <stepcut> no, flash 7.x plugin for linux :)
17:04:40 * Jan_w wants a gmail account :) anyone have any credits left ?
17:05:02 * shapr goes to sleep
17:05:19 <Jan_w> g'night shapr
17:06:57 <Heffalump> jan_w: I might
17:07:12 <Jan_w> Heffalump: that would be nice
17:07:32 <Heffalump> I haven't used my account for ages though
17:07:46 <Jan_w> could you check for me ?
17:08:18 <Heffalump> just looking
17:08:22 <Jan_w> k
17:08:34 <Heffalump> yeah. email address?
17:09:49 <Heffalump> sent, hopefully.
17:09:56 <Jan_w> thanks, checking
17:10:06 <Heffalump> I should have gone to bed hours ago.
17:10:38 <wli> are there singular value decomposition -based solvers out there?
17:11:44 <Jan_w> Heffalump: many thanks, i works
17:11:46 <Jan_w> it
17:12:02 <xerox> 'night
17:12:06 <Jan_w> g'night..
17:21:25 <wli> hmm
17:21:58 <wli> I guess I just need Householder reflections.
17:22:19 <stepcut> my sense of high load average was seriously altered today
17:22:30 <stepcut> one of our servers had a load avg of 273 :p
17:22:32 <wli> load average of 1000+?
17:22:49 <stepcut> fortunately, it was not 1000+
17:23:01 <wli> it's easy to get things arbitrarily high
17:23:04 <wli> on linux anyway
17:23:07 <stepcut> heh
17:23:22 <wli> uninterruptible sleep contributes to it
17:23:37 <wli> so sleeping processes can jack it up
17:23:40 <stepcut> we turned of our servers for an upgrade over the weekend (don't ask), and on monday when they turned the servers back on, all the clients connected at once :)
17:23:49 <stepcut> turned off
17:24:06 <stepcut> (as in thousands of clients)
17:24:25 <wli> forking server, of course?
17:24:49 <stepcut> apache..
17:25:32 <wli> apache's not terribly intelligent
17:25:57 <stepcut> heh
17:28:13 <wli> it's possible to extract effectively infinite client capacity out of most boxen by using explicit overlays etc.
17:30:07 <wli> I could easily cook up a bunch of userspace and kernel hacks to get something qualifying as an embedded system to handle 1M clients
17:33:01 <Tesl> are there any common causes of the error "Last generator in do { ... } must be an expression" ??
17:34:11 <yrlnry> Would it be ingenuous to suggest that the most common cause is failing to end a "do" block with an expression?
17:34:37 <np_hard> Tesl: your last statement can't be foo <- bar
17:35:08 <Tesl> lol yrlnry
17:35:13 <Tesl> it IS an expression
17:35:24 <yrlnry> Are you sure?
17:35:27 <Tesl> well
17:35:30 <Tesl> its actually a return
17:35:39 <Tesl> >			return [parse x | x <- lines $ contents, x =/ "" ]
17:36:04 <stepcut> Tesl: improper indentation ?
17:36:23 <Tesl> doesnt seem to be
17:36:41 <Tesl> and when i put it in { } with ; terminating each statement it still doesnt work ><
17:37:25 <stepcut> can you paste the code to a pastebin ?
17:37:52 <Igloo> If {;} don't help then this isn't the problem, but we suggest not using tabs anyway
17:38:21 <stepcut> Igloo: even without tabs, sometimes I just line things up wrong :)
17:38:59 <Tesl> > readStuff :: String -> IO [FileInfo]
17:38:59 <Tesl> > readStuff s = do 
17:38:59 <Tesl> >			contents <- readFile s
17:38:59 <Tesl> >			return [parse x | x <- lines $ contents, x =/ "" ]
17:39:19 <Tesl> tis quite simple
17:41:51 <Igloo> Is the error in the previous function?
17:42:19 <Tesl> dont think so
17:42:25 <Tesl> sec
17:42:28 <Igloo> Oh, you mean /= not =/
17:43:05 <Igloo> (probably)
17:43:09 <Tesl> im actually still getting the same error, but thanks for pointing that out :P
17:43:35 <Igloo> Ah, OK, I was wondering why that should break like that  :-)
17:44:16 <Igloo> Also, what's after that function?
17:44:17 <Tesl> apparently i cant help but type the =/ face wherever i go =/
17:45:07 <Darius> Tesl: lines $ contents is kind of pointless, lines contents is the same thing.
17:46:16 <Tesl> readFile gives one long string doesnt it? so using lines to process each line at a time?
17:46:38 <Darius> I'm just saying the ($) is superfluous.
17:47:27 <Tesl> oh ok
17:47:35 <Tesl> im new to all this, as long as it works i dont care :p
17:49:12 <Darius> Well, another possibility could be code following the above, though that seems unlikely.
17:49:44 * Darius realizes that's what Igloo asked.
17:58:07 <Tesl> looks like the problem was with the following function
17:58:14 <Tesl> not exactly sure how that worked out, but its all sorted now :]
17:58:58 <Tesl> another quick question though if i may...
17:59:36 <Tesl> that function was about collecting information out of a file, and it had return type IO [FileInfo]
18:00:12 <Tesl> iv a function i wanted to pass it into which is of type [FileInfo] -> [FileInfo] , is there an easy way to do this? (im getting errors now that the types are incorrect)
18:00:35 <kpreid> mapM
18:00:57 <kpreid> er, no
18:01:01 <kpreid> liftM
18:01:40 <Tesl> better have a look, thanks :]
18:02:11 <kpreid> (I shouldn't have said anything; it's been too long since I've used Haskell)
18:03:01 <Tesl> lol :]
18:11:56 <Tesl> how exactly does liftM work? ><
18:12:11 <kpreid> @type liftM
18:12:12 <lambdabot> bzzt
18:12:13 <Tesl> sorry i am trying, iv never worked with Monads before
18:12:18 <kpreid> hmm
18:12:20 <Darius> @type Control.Monad.liftM
18:12:21 <lambdabot> Control.Monad.liftM :: forall r m a1.
18:12:21 <lambdabot> 		       (Monad m) =>
18:12:21 <lambdabot> 		       (a1 -> r) -> m a1 -> m r
18:12:55 <Darius> liftM function computation = do result <- computation; return (function result)
19:00:38 <wli> aj: it's critical for presentation purposes
19:00:47 <wli> aj: i.e. I am required to present the patches
19:01:19 <wli> as meaningful things to be discussed etc. etc. so they have to be in order, be preserved as units of whatever, be shoved to the end atop a known baseline, etc.
19:01:57 <wli> aj: I'm seeing a much different phenomenon at work
19:02:21 <wli> aj: but that can be dealt with elsewhere; I'm more concerned about functionality atm.
19:03:28 <wli> aj: in particular, nailing down a patch ordering and reproducing some precise baseline after a merge or whatever 
19:03:31 <wagle> wli: i have some books that might help if googling doesn't..  you want them?
19:03:34 <wli> shite
19:03:45 <wli> wagle: yes
19:03:53 <wagle> sigh..  #offtopic2 went over the top
19:04:20 <wagle> you at your apt?
19:04:26 <wli> yep
19:04:58 <wagle> i'm at coffee people, and my storage area is near cornelius pass road
19:05:08 <wli> I'm parked in
19:05:18 <wli> I can do it during the day in general.
19:05:37 <wagle> googling for "singular value decomposition" doesnt get you anything useful?
19:05:47 <wli> not computationally useful, no
19:06:34 <wli> I know what it is, U^t*S*V, just not how to choose U and V
19:06:48 * wli recalls that S falls out of finding U and V
19:06:56 <wagle> (will take me 30-45 minutes to find my books, from the early 90's, with stewart's classic in there..  I think i sold some of my newer stuff (older editions) to powells)
19:07:28 * wli has new books
19:07:37 <wli> ideals, varieties, and algorithms
19:07:46 <wli> some diff. geom stuff
19:07:52 <wli> some elliptic curve stuff
19:07:53 * arauko wonders if anybody can send him a book from US.
19:07:55 <wli> etc.
19:08:07 <wli> arauko: amazon.com can
19:08:12 <arauko> Since you talk about books :-)
19:08:20 <arauko> wli, no, i don't have credit card :-(
19:08:40 <wli> arauko: get one?
19:08:52 <arauko> wli, that is not easy here. 
19:09:32 <arauko> i would if i could :-)
19:09:36 <wli> arauko: banks should issue them for normal account access
19:09:43 <wli> arauko: as a standard procedure, even
19:09:51 <wli> arauko: not a line of credit per se, but usable as such
19:10:06 <arauko> wli, no, they require you to have dozens of more things here.
19:10:19 <arauko> it isnt as easy as in other countries to get a credit card.
19:10:24 <wli> arauko: you're in a strange place with strange laws, then
19:10:33 <arauko> yes, 
19:12:51 <wli> arauko: normally the card itself has no specific meaning
19:13:10 <wli> arauko: it is just a mechanical device for accessing the account
19:13:24 <arauko> wli, i know. but we usually use debit card here.
19:13:27 <wli> arauko: a "credit card" is one for accessing a revolving account, which involves a line of credit
19:13:29 <arauko> not credit card.
19:13:36 <wli> arauko: a "debit card" is one for accessing a checking account
19:13:50 <arauko> yes, most of the people use that.
19:13:53 <wli> arauko: the debit cards distributed in .us work on amazon.com
19:14:02 <wli> arauko: the debit cards in your country may also work
19:14:15 <arauko> really?
19:14:17 <wli> arauko: it depends on the banking network
19:14:36 <wli> arauko: if it says "VISA" or "MasterCard" or "Discover" on it, it should work
19:14:45 <wli> arauko: if it doesn't, there is a larger question
19:14:48 <arauko> wli, here it is too difficult to get a credit card.
19:14:55 <arauko> No, it doesn't say anything like that.
19:14:59 <wli> arauko: the "debit card" should work in many instances
19:15:07 <wli> arauko: depending on the banking network
19:15:08 <arauko> here, debit cards don't have those names.
19:15:38 <wli> arauko: "VISA" and "MasterCard" are just banking networks (there is a real name for them; I made that up because it seemed descriptive)
19:16:04 <wli> arauko: Yours may not be one of those. In that case whether it is supported is something I can't answer immediately.
19:16:31 <arauko> i doubt they are.
19:16:52 <wli> arauko: this is not the only case where that happens; in .us lesser-known banks use "nonstandard" banking networks that are not widely accepted
19:17:01 <wagle> wli i remember doing this in 1992 or so..  was hoping i'd actually snarfed stewart..  but i suspect golub is more what you are looking for
19:17:23 <wli> I have Golub and van Loan; it lacks details.
19:17:39 <arauko> wli, i thought amazon only works with credit cards.
19:18:05 <wli> arauko: banking networks, not credit cards per se
19:18:17 <wagle> hrm..  there was a complement for golub..  sigh..  but i think i sold it to powells
19:18:31 <wagle> now i'm curious
19:18:35 <wagle> sigh
19:19:13 <arauko> wli, but the debit card i got it says nothing about visa or mastercard, or any other big banking network.
19:20:03 <wli> arauko: you'll have to try punching it into amazon.com's forms to see whether it's understood by their banking stuff
19:21:13 <wagle> wli: you are looking for "singular value decompostion" and "householder reflections"?
19:21:23 <wli> basically yes
19:21:34 <wagle> any other keywords i should look for?
19:22:16 <arauko> wli, but what i don't understand is why they always talk about credit card instead or banking networks or debit cards?, ive never seen anything about debit cards here.
19:22:42 <wli> arauko: "credit card" is confusingly used to refer to any bank account access card
19:23:04 <wli> arauko: even those not for revolving accounts (the line of credit etc.)
19:23:43 <arauko> wli, checks cards == debit card ?
19:24:31 <wli> arauko: they're called that because they're cards that give access to bank accounts
19:24:46 <wagle> debit card lets you only spend money that you actually have in the bank
19:24:49 <wli> arauko: like I said, I don't use a true credit card for amazon.com I use what would be a "debit card" or "check card"
19:24:56 <wli> well, that's vague
19:25:07 <arauko> wagle, yes.
19:25:09 <wli> debit card grants access to a checking account
19:25:26 <wli> a "true credit card" grants access to a revolving account
19:25:33 <wli> no one card
19:25:34 <arauko> i always watched it since the wagle's perspective.
19:25:34 <wli> no one cares
19:25:52 <wli> all they care is that they can get your money by hammering in the number you gave them
19:26:01 <arauko> Ahhh.
19:26:05 <wli> if that works, they'll say "it all worked"
19:26:07 <arauko> you know, that sounds cool.
19:26:13 <wli> if that doesn't work, they'll say there's some problem with your card
19:26:19 <arauko> mmm....
19:26:24 <arauko> i should give atry.
19:26:27 <wli> so you just register with amazon
19:26:34 <wli> enter in your "check card" number
19:26:46 <wagle> wli: i'm heading to my storage: any other keywords i should look for?
19:26:49 <wli> if it works, then your purchases will say "everything went okay"
19:26:56 <wli> wagle: that's about it
19:27:11 <wli> if it doesn't work, then your purchases will complain that they couldn't do the transaction
19:27:21 <wli> i.e. there is no harm whatsoever in trying
19:27:22 <arauko> wli, wait, but you don't need to type a password with your debit card everytime you buy something with it?
19:27:57 <wli> arauko: you need your amazon.com account password
19:28:15 <wli> arauko: that's all that's between the net and your debit card
19:28:37 <arauko> wli, no, i mean, when i go to pay with my debit card here, i always need to type a secret password none else knows.
19:28:55 <arauko> if not, they just can't get my money. it is the way i give people acces to my money.
19:29:05 <wli> arauko: you'll need to type in extra numbers from the back of your card and so on
19:29:14 <wli> arauko: I don't believe there's room for those passwords
19:29:38 <wli> arauko: the same is true of my debit card
19:29:46 <wli> arauko: for most stores etc. I have to use a passcode
19:29:57 <wli> arauko: for some stores and for online stores, I don't have to use a password
19:30:07 <arauko> mm.. interesting.
19:30:29 <wli> arauko: e.g. gas stations require neither a signature nor a passcode
19:31:32 <wli> arauko: similarly for some restaurants
19:31:51 <wli> arauko: online stores likewise; they use "other" methods, and give detailed instructions of what kind of information to put in
19:32:07 <wli> arauko: gas stations and restaurants are just "exempt" because they charge very little
19:32:22 <wli> arauko: anything under US$20
19:32:45 <wli> arauko: so give amazon.com a try; the "check card" may work if they have access to your (Spanish??) banking network.
19:33:15 <wli> arauko: it seems improbable they'd bother doing business in your country unless they'd arranged that kind of affair
19:33:39 <arauko> wli, my credit card is a Maestro
19:33:45 <arauko> have you heard about it?
19:33:53 <arauko> debit card i meant
19:34:14 <wli> arauko: No, but I'm not aware of major aspects of European business.
19:34:25 <wli> arauko: If that is a "big name" I'd try it
19:34:30 <tintin> wli all Maestoro cards do that
19:34:39 <tintin> wli: mastercard
19:34:40 <wli> tintin: do what?
19:34:47 <tintin> need a pin
19:34:58 <wli> arauko: Your Maestro card will work. It's MasterCard
19:34:58 <tintin> which only you know of 
19:35:30 <tintin> Maestro is an electronic card 
19:35:45 <wli> tintin: but it's on the mastercard banking network?
19:36:00 <tintin> yes but not the same as mastercard ...
19:36:17 <wli> tintin: doesn't matter, if it's on their network then it should be recognized
19:36:36 <tintin> its on their network just like visa and visa electron 
19:36:41 <arauko> wli, yeah, im checking on google, it is an international network.
19:36:58 <wli> tintin: i.e. amazon.com will recognize it like VISA, MasterCard, and Discover
19:37:02 <arauko> this looks cool.
19:37:10 <wli> arauko: I think you should be able to buy from amazon.com with that
19:37:25 <arauko> terrific.
19:37:30 <tintin> if its a debit card you need to ask your bank ... 
19:37:44 <arauko> tintin, me?
19:37:48 <tintin> if its a credit card i think you can go ahead and use it .. 
19:37:50 <tintin> yes
19:38:06 <arauko> what should i ask for?
19:38:21 <tintin> internet purchases via my mastro card ... 
19:38:33 <tintin> they usually disable that on debit cards 
19:38:39 <tintin> for security reasons 
19:38:59 <wli> tintin: so arauko won't be able to do it on the maestro card he has? feh
19:39:00 <arauko> oh
19:39:05 <arauko> :-(
19:39:16 <wli> tintin: what does it take to get it enabled?
19:39:29 <arauko> i could call to my bank right now to ask.
19:39:36 <tintin> maybe just a call to the call center ...
19:39:54 <tintin> or a fax to the bank with your signature on it
19:39:58 <wli> arauko: tintin knows and can help; I only know the vaguest generalities about banking and that not even specific to your country
19:40:12 <wli> tintin: please take over, I just don't know these things
19:40:21 <arauko> wli, you have helped me also.
19:40:28 <arauko> to understand a few things.
19:40:47 <arauko> tintin, yes, i'll do that.
19:40:58 <arauko> i'll call them right now.
19:45:28 <tintin> arauko: where are you ?
19:46:17 <arauko> tintin, venezuela
19:47:15 <tintin> do you have a paypal account by any chance ? 
19:47:46 <tintin> the easiest option is to send money to any of your friends in us and get the book ...
19:49:24 <Pseudonym> Please help me, I am Robert Umboto, brother-in-law of the late deposed Foreign Minister of Nigeria.  We need to buy a textbook...
19:50:00 <tintin> :)
19:50:10 <tintin> Pseudonym: is that spam ?
19:50:31 <Pseudonym> I made it up, if that's what you mean.
19:51:10 <tintin> I seem to get these mails where they want you to claim billions from Nigeria 
19:51:15 <Pseudonym> Right.
19:51:18 <Pseudonym> www.419eater.com
19:51:21 <Pseudonym> Very amusing site.
19:51:22 <tintin> and it had a similar tone :)
19:51:29 <Pseudonym> I based it on those, yes.
20:03:23 <shammah> we got a physical letter here @work.
20:08:28 <arauko> wli, tintin, check http://www.mastercardmerchant.com/copyright.html 
20:10:08 <arauko> Maestro is a MasterMoney card which is from Mastercard network.
20:34:01 <tintin> arauko: yep Maestro is in the Mastercard network 
20:34:44 <tintin> Maestro is all electronic and Mastercard has a magnetic strip for those gas stations with no swiping machines 
20:34:57 <tintin> the electronic swiping machines ie
20:36:52 <Janni> G'morning
20:54:34 <Pseudonym> G'day.
20:54:41 * Riastradh wanders off to bed.
20:54:52 <Pseudonym> 20 hours down to 2.5 mins is a significant speedup, isn't it.
20:55:48 <wolfman8k> oh man i'm screwed, but bad
20:55:58 <Pseudonym> ?
20:56:48 <Gahhh> you mean 'and', not but ?
20:58:43 <wolfman8k> i mean that i'm in deep shit
20:59:00 <Gahhh> that part is crystal clear. What happened ?
20:59:10 <Pseudonym> Or what is about to happen?
20:59:15 <wolfman8k> i'm not sure... i just have this very bad feeling
20:59:21 <Gahhh> heh
20:59:47 <Pseudonym> So are you actually screwed, or are you clinically paranoid?
20:59:47 <Gahhh> just a feeling ? like a psychic ?
20:59:51 <wolfman8k> a lot of things in my life are sort of coming together in a way... like the cosmos are aligne and shit... and something big is gonna happen
20:59:57 <Gahhh> heh
21:00:09 <Gahhh> you're getting married, arent you
21:00:14 <wolfman8k> no
21:00:15 <wolfman8k> worse
21:00:22 <Pseudonym> You're not currently consuming any illicit pharmeceuticals, are you?
21:00:27 <wolfman8k> negative
21:00:35 <wolfman8k> freenode needs a #therapy btw :|
21:00:43 <Gahhh> you can pm me anytime
21:00:57 <wolfman8k> are you a psychiatrist?
21:01:00 <Gahhh> no
21:01:11 <Gahhh> hey
21:01:13 <wolfman8k> ok... i guess you'll do anyway :)
21:01:16 * desrt hugs wolfman
21:01:22 <Pseudonym> Group hug!
21:01:29 <Gahhh> if you think it's that serious, I'd say go and see a real one.
21:01:35 <wolfman8k> hehe, not a good idea
21:01:38 <Pseudonym> Unfortunately, we don't have an Eliza bot around here.
21:01:46 <Gahhh> Pseudonym: let's all foldr
21:01:49 <desrt> wolfman8k; just giving you something to talk to your therapist about :)
21:02:01 <wolfman8k> last time i saw a therapist it gave me a shit load of trouble
21:02:15 <wolfman8k> anyway, the thing is, today is my last tuesday as a civilian... at least for a while :(
21:02:22 <Gahhh> oh, military service ?
21:02:27 <wolfman8k> yeah
21:02:34 <Gahhh> which country ?
21:02:38 <wolfman8k> israel
21:02:51 <desrt> that's gotta be interesting these days....
21:02:56 <aj> ooo :-/ best wishes
21:02:59 <Riastradh> M-x doctor
21:03:17 <wolfman8k> thanks man... anyway, it's just sort of hit me these past few days
21:03:18 * desrt directs ria to #emacs
21:03:28 <aj> (a friend had some israeli cousins over once, yay for chicks who can reassemble m-16s in a matter of seconds :)
21:03:38 <wolfman8k> so i've been up all night now doing crazy shit
21:03:40 <Gahhh> Riastradh, we're better off with MegaMonad, thanks :)
21:04:26 <vdrab> how long is the service?
21:04:30 <wolfman8k> 3+ years
21:04:36 <vdrab> wow...
21:04:43 <vdrab> good luck man
21:04:47 <wolfman8k> thanks
21:04:47 <Pseudonym> aj: Must be a hit at parties.  If you get invited to that kind of party, anyway.
21:05:04 <Gahhh> wolfman8k: I've known people who got f***ed up during military service, but you gotta do what you gotta do if your country needs you. Not much else to do about it.
21:05:26 <vdrab> nope, you're serving a higher-order function now.
21:05:28 <wolfman8k> yeah.. well... it's not really that it's the military that i'm worried about
21:05:28 <aj> Pseudonym: well, we had to take their claims on faith
21:05:30 <vdrab> ... wow that was lame
21:05:57 <wolfman8k> i just feel that i don't know what the hell i'm supposed to be doing and stuff
21:06:04 <Pseudonym> aj: Well.  I can strip-down an M113 armored personnel carrier in 3 mins.  Worship me!
21:06:12 <Pseudonym> Ah.
21:06:25 <Gahhh> wolfman8k: you're supposed to learn the stuff they are trying to teach you, and cover your rear end, afaik.
21:06:25 <Pseudonym> Yes, adapting to post-millitary life.
21:06:31 <vdrab> I'm sure there's plenty of people that 'll tell  you what to do.
21:06:54 <wolfman8k> the thing is, i'm going into this computer unit
21:07:00 <wolfman8k> and they say that it's just like a day job
21:07:10 <Gahhh> wolfman8k: isnt that much safer and fun ?
21:07:11 <Pseudonym> One of the problems of post-military life, especially if you've been in a while, is that there _aren't_ people telling you what to do for a change.
21:07:49 <wolfman8k> the problem is
21:07:53 <vdrab> wolfman: that just made it all sound a lot better. wouldn't you agree?
21:07:53 <wolfman8k> i'm the type of person who
21:08:05 <wolfman8k> vdrab: which part?
21:08:12 <vdrab> the computer unit part
21:08:14 <wolfman8k> i'm the type of person who is sort of "out of it"
21:08:19 <wolfman8k> vdrab: yeah
21:08:21 * Pseudonym noticed, wolfman
21:08:27 <wolfman8k> vdrab: i worked hard to get this job
21:09:12 <vdrab> doesn't that go for every guy and gal your age in Israel? why wouldn't you be able to get it back when you're done? (i dunno, just asking)
21:09:34 <wolfman8k> get what back?
21:09:38 <wolfman8k> civilianship?
21:09:43 <vdrab> the job you worked hard for
21:09:49 <Gahhh> I dont understand what you meant by "out of it".
21:09:51 <wolfman8k> i mean the job that i'm gonna get in the army
21:09:55 <vdrab> oh
21:10:07 <wolfman8k> Gahhh: in general, like in school i never knew when tests were and what homework there was in stuff
21:10:33 <Pseudonym> Wolfman, tell me something.
21:10:35 <Gahhh> wolfman8k, so you are worried about having to be more responsible and organized ?
21:10:35 <wolfman8k> i think part of my issues is that i still feel like a kid :(
21:10:44 <Pseudonym> What are you interested in?
21:10:47 <Pseudonym> Academically.
21:10:48 <wolfman8k> Gahhh: i'm not sure
21:10:55 <wolfman8k> Pseudonym: computers i guess, and math
21:10:59 <Pseudonym> Specifically.
21:11:07 <wolfman8k> dunno
21:11:13 <wolfman8k> i mean
21:11:17 <Pseudonym> Are you reading anything interesting at the moment?
21:11:31 <wolfman8k> not really, these last few days i've been sort of a mess
21:11:36 <Gahhh> wolfman8k, can you read and finish long books on computers ? (or have you ever..)
21:11:39 <Pseudonym> OK.  What most recently?
21:11:42 <wolfman8k> Gahhh: yeah
21:12:12 * Gahhh is reading whatever URL Pseudonym pastes nowadays...
21:12:18 * Pseudonym grins
21:12:22 <wolfman8k> hm... i think my main problem is that i haven't slep in 24 hours :/
21:12:35 <Pseudonym> Wolfman, I'm just testing out a theory with these questions.
21:12:38 <Pseudonym> You might have what I have.
21:12:44 <wolfman8k> Pseudonym: a novel?
21:12:50 <Gahhh> what do you have Pseudo ? ADD ?
21:12:56 <Pseudonym> Non-fiction wise.  What did you read most recently.
21:12:57 <Pseudonym> ?
21:13:00 <Pseudonym> Gahhh: Nope.
21:13:19 <wolfman8k> Pseudonym: i think it was "More Effective C++", Scott Meyers
21:13:19 <Pseudonym> I have what my psychologist calls "absent-minded professor syndrome".
21:13:25 <Gahhh> heh
21:13:37 <Pseudonym> Which means that I have a lot of memory for the abstract, but none for the concrete.
21:13:45 <Gahhh> seriously ?
21:13:52 <Pseudonym> Seriously.  Almost none.
21:13:59 <Pseudonym> I never knew when homework was due at school.
21:14:05 * Riastradh has a feeling he has that, too.
21:14:14 <Pseudonym> Things creep up on me.
21:14:23 <Gahhh> I always knew, for precise timing. I had to do it the night before.
21:14:31 <wolfman8k> yeah, i'd be like, "hm... we have a test today? .... ok :) "
21:14:37 <Pseudonym> Exactly!
21:14:49 <Pseudonym> One of the things that absent-minded professors do is they go from topic to topic.
21:14:50 <wolfman8k> i never really cared really i guess. i didn't worry or get upset or anything
21:14:59 <Pseudonym> You get really, really interested in something for a month or two.
21:15:06 <Pseudonym> Then you go onto something, often completely different.
21:15:18 <wolfman8k> hehe, that sounds exactly what i've been doing with computers for the last 10 years
21:15:21 <Riastradh> I tended to take in the material very well, but I could never remember, for example, what happened in the last class, or what the homework was.
21:15:27 <Pseudonym> Right!
21:15:45 <Pseudonym> Wolfman, you need a diary or a PDA.  Seriously.
21:15:51 <Gahhh> Pseudonym: I've read about such tendencies, but I tend to think people draw conclusions prematurely and diagnose in a rush.
21:16:00 <Pseudonym> My palm pilot saved my life.
21:16:14 <wolfman8k> Pseudonym: i've figured out how to manage with myself... i would write the math excersise numbers on the inside of the math book cover :)
21:16:24 <Pseudonym> :-)
21:16:39 <Pseudonym> My psychologist (who I've only seen once, BTW) has it too.
21:16:50 <Gahhh> Pseudonym: I have reminder software running. Does that mean I have what you have, too ?
21:17:00 <Pseudonym> He keeps a diary and every day copies what needs to be done from one day to the next.
21:17:11 <Pseudonym> And you never, EVER trust your memory.
21:17:19 <Pseudonym> You don't say "oh, I'll remember that" because you won't.
21:17:32 <Pseudonym> You cross your finger or something and you don't uncross it until it's written down in your diary or PDA.
21:17:45 <wolfman8k> hm... my memory isn't that bad though
21:17:55 <Pseudonym> No, I think I'm a more extreme example than many.
21:18:05 <Gahhh> My memory is excellent. I still wouldnt trust it, so I use reminders of all sorts.
21:18:15 <Pseudonym> My memory is shocking.
21:18:17 <vdrab> are you sure you want to call all this a syndrome , I mean, really? sounds like some sort of character trait to me. reading everything you people write makes me go "hey, I have that too. and that too. and that too..."
21:18:28 <Pseudonym> Don't ask me what I had for lunch yesterday.  Ask me about quantum mechanics, though.
21:18:41 <Pseudonym> @wn syndrome
21:18:43 <lambdabot> *** "syndrome" wn "WordNet (r) 2.0"
21:18:43 <lambdabot> syndrome
21:18:43 <lambdabot>      n 1: a complex of concurrent things; "every word has a syndrome
21:18:43 <lambdabot>           of meanings"
21:18:43 <lambdabot>      2: a pattern of symptoms indicative of some disease
21:18:44 <Gahhh> vdrab: As I said, people over-generalize quite often.
21:18:55 <wli> hmm
21:18:57 <Pseudonym> See, a syndrome is a collection of symptoms.
21:19:08 <Pseudonym> It's not necessarily a disease or disorder.
21:19:22 <Pseudonym> All I'm doing is describing the symptoms which are often seen together.
21:19:50 <vdrab> I know, it just sounds so medical when it really looks like some sort of attitude or disposition thing. 
21:19:59 <Gahhh> Yes, they are probably correlated. However, in my opinion some of them are not necessarily that highly correlated.
21:20:00 <Pseudonym> No, it's not attitude or disposition.
21:20:11 <Pseudonym> Believe me, I really, really wanted to remember shit.
21:20:20 <Pseudonym> I just couldn't.
21:20:28 <Pseudonym> And I still can't.
21:20:41 * Gahhh knew Pseudonym was a wacky character from get go!
21:21:23 <Pseudonym> Yup.
21:21:26 <vdrab> maybe you just have a really short attention span for all the trivial and boring things around you in everyday life... I dunno... it's just ... if that's a disease, lord knows I 'm terminal too then
21:21:34 <Pseudonym> It's not attention span either.
21:21:47 <Pseudonym> If you're forced to concentrate on it for a while, it still disappears.
21:21:51 <Pseudonym> If it's concrete.
21:22:02 <Pseudonym> It's just the way my brain is wired.
21:22:03 <Gahhh> Pseudonym: There are techniques you can use. I 've seen some in some books.
21:22:09 <Pseudonym> Of course.
21:22:22 <Pseudonym> My techniques are external. :-)
21:22:23 <Gahhh> However, PDA's can be easier
21:22:24 <wolfman8k> my memory is pretty good though.... i can remember dates and numbers and chess boards :)
21:22:26 <Gahhh> yeah
21:22:26 <Pseudonym> Right.
21:22:38 <Pseudonym> wolfman8k: Yeah, but what did you have for lunch yesterday?
21:22:46 <wolfman8k> i didn't :)
21:22:51 <Gahhh> Pseudonym: I was in fact thinking on buying a PDA. Any advice ?
21:22:54 <vdrab> see, I can't remember that either
21:23:12 * Gahhh had a pasta toss with chicken. His interview candidate had a salad.
21:23:51 <wli>  /msg #debian-devel You can compute an empirical probability of someone from a dynamic IP being a spammer.
21:24:06 <Gahhh> lol
21:24:28 * vdrab remembered yesterday's lunch after almost a minute of memory poking
21:24:51 <wolfman8k> hm.. i can't remember what i had for lunch 2 days ago
21:24:59 <wolfman8k> i can't remember anything at all from 2 days ago
21:25:14 <wolfman8k> oh wait i remember i went to a movie in the evening :)
21:25:21 <Gahhh> hey, it was a nice weekend then ;)
21:25:22 <wolfman8k> ah, now it's all coming back to me
21:25:53 <Gahhh> MegaMonad: What did you have for lunch today ?
21:26:12 <Gahhh> Ugh
21:26:20 <vdrab> he can't remember
21:26:23 <vdrab> he's one of us
21:26:29 <Gahhh> It
21:26:31 <Gahhh> is not here
21:26:40 <wolfman8k> anyway, i guess i'll just take confort in the fact that even though i am feeling weird and edgy and shit, there is nothing i can do about it and i just have to wait until next week when i will be eating sand. haha
21:26:58 <Gahhh> wolfman8k, dont worry be happy
21:27:05 <wolfman8k> yep
21:27:19 <wolfman8k> i think another one of the issues is that i'm freezing cold right now
21:27:28 <wolfman8k> and i've been sitting here freezing for the past 8 hours
21:27:36 <vdrab> yeah, if there's nothing you can do about it, you may as well try to have some fun while at it.
21:27:40 <wolfman8k> i gotta go eat breakfast or something
21:27:47 <Gahhh> wolfman8k, hug your CPU for warmth
21:28:21 <wolfman8k> i just feel so old :( i wish i could be 12 again :'(
21:28:42 <Gahhh> being 12 was fun. I used to play soccer for 6 hours a day. tee heee.
21:28:58 <wolfman8k> i sort of fucked up my teenage life i think. oh well :)
21:29:36 <Gahhh> no. there are no standards when it comes to life. Everyone has one and no one is supposed to have another.
21:30:13 <wolfman8k> yeah... i mean i accept the way that things have been so far... it's just weird thinking about what i could have done differently
21:30:23 <wolfman8k> but i just say to myself that i am still young :)
21:30:40 <wolfman8k> and i'm just glad to be out of that piece of shit high school
21:30:42 <Gahhh> you'll say that more often as you get older. The answers never change.
21:30:59 <wolfman8k> army can't be half as bad as high school. i'm sure of this
21:31:09 <Gahhh> well, at least you get a weapon too !
21:31:29 <wolfman8k> i actually probably won't get to keep one :(
21:31:39 <Gahhh> you dont wanna keep one anyways
21:32:32 <wolfman8k> yeah... i also gotta hope that a mega war doesn't break out... otherwise i get sent into battle :\
21:33:08 <wolfman8k> it's just so weird thinking about this stuff
21:33:24 <vdrab> OT : anyone up for a cool mind game puzzle thing? I've been staring at this for 20 minutes and I can't get it...
21:33:31 <vdrab> http://media.euniverse.com/funpages/cms_content/1964/001_image001.gif
21:33:31 <Gahhh> vdrab, shoot
21:33:36 * wolfman8k looks
21:33:40 <vdrab> look at the gif, 
21:33:47 <vdrab> before the shift, there's 12 guys
21:33:53 <vdrab> after the shift there's 13
21:34:07 <vdrab> where does the 13th guy pop up?
21:34:16 <vdrab> it's driving me mad
21:34:32 <wolfman8k> didn't the japanese invent this kind of trick?
21:34:40 <vdrab> hehe... I'm in japan.
21:34:46 <wolfman8k> there's one with a spinning wheel with a bunch of ninjas on the perimiter
21:34:53 <wolfman8k> and when you spin the wheel the number of ninjas changes
21:35:05 <vdrab> haven't seen that one
21:35:51 <vdrab> can you see the .gif ?
21:35:55 <wolfman8k> yeah
21:35:57 <vdrab> or is the url broken
21:35:58 <Gahhh> uh, I cannot
21:35:59 <vdrab> oh ok
21:36:24 <vdrab> maybe this is better: http://moneycentral.groups.msn.com/sasyboys/general.msnw?action=get_message&mview=1&ID_Message=32
21:37:22 <Gahhh> lol, I have no web browser in this linux box
21:37:33 <vdrab> dl the .gif file
21:37:44 <vdrab> isn't there some viewer there?
21:38:18 <vdrab> well, anyways, it's nothing very important. just thought I'd spread the madness on here... I think it's really well-done.
21:38:42 <Gahhh> I am curious now
21:39:34 <vdrab> open the url in lynx or something, then save the .gif file to disc and open it with some viewer, no?
21:40:38 <aj> in the fewer people image, they're taller than in the more people image, the extra person comes from bits of lots of people
21:40:44 <aj> (i think)
21:41:13 <vdrab> well, it has to be something like that, obviously.... I just can't see when/where it's happening
21:44:09 <vdrab> great, I just killed all life on #haskell.... lol.
21:44:23 <wli> are there inductive logic programming engines in Haskell going around?
21:45:10 <Gahhh> vdrab, this is great
21:45:17 <aj> vdrab: in the first picture, everyone has some body parts in the lower half of the image, in the second image, the guy third from the right doesn't, but he only loses the bottom of his shoes
21:45:36 <Gahhh> wli, I've seen some computer algebra stuff in haskell on the web
21:46:06 <wli> rather different
21:46:08 <wli> OTOH
21:46:12 <wli> that could also be useful
21:46:19 <aj> err, sixth from the left even?
21:47:16 <Pseudonym> Sorry, boss key.
21:48:12 <wli> inductive logic programming == AI thing
21:48:19 <Pseudonym> The moral of the story, that I was talking about, is that it helps if you know what you're like.
21:48:19 <vdrab> aj: so, what's your point?
21:48:22 <wli> tries to guess rules from examples
21:48:24 <Pseudonym> If you know what you're like, you can cope.
21:49:12 <Pseudonym> Oh, that trick is an old one.
21:49:37 <vdrab> Pseudonym: enlighten me.
21:49:56 <Pseudonym> The extra person is made from a little slice of all of the other people.
21:50:00 <Pseudonym> They all get a little shorter.
21:50:10 <vdrab> huh?
21:50:21 <Gahhh> their torsos especially
21:50:24 <Pseudonym> Well, after the shift, look at the leftmost person.
21:50:30 <Pseudonym> The top of their head is missing.
21:50:56 <vdrab> yes, I see that... how does that explain it?
21:50:58 <Pseudonym> And the highest person has the bottom of their feet missing.
21:51:13 <Pseudonym> Basically, a little slice was taken out of everyone, and reassembled to be a new person./
21:51:41 <vdrab> so where's the magical reassembling?
21:51:56 <Gahhh> vdrab, follow the cut-line. There are 11 pairs of feet under it.
21:52:24 <Pseudonym> vdrab: That's what the shift effectively does.
21:52:41 <Pseudonym> Only the people are placed cleverly so you only need two geometric pieces moved.
21:53:06 <vdrab> yes. I can see all that. I can see which is the guy that gets added. I just can't see how. I mean, I can't get the exact moment when my brain is being deceived.
21:53:26 <Gahhh> You do wanna pause the animation
21:53:33 <vdrab> I can't 
21:53:57 <Pseudonym> There is no single guy who gets added, as such.
21:54:01 <vdrab> well, no
21:54:03 <Pseudonym> OK, here's a better way of thinking about it.
21:54:09 <Pseudonym> | | | |
21:54:11 <Pseudonym> | | | |
21:54:14 <Pseudonym> | | | |
21:54:15 <Pseudonym> | | | |
21:54:21 <Pseudonym> | | | |
21:54:26 <Pseudonym> Four vertical lines.
21:54:35 <Pseudonym> Now imagine you cut through them diagonally.
21:54:37 <Pseudonym> | | | |
21:54:43 <Pseudonym> \ | | |
21:54:45 <Pseudonym> | \ | |
21:54:49 <Pseudonym> | | \ |
21:54:53 <Pseudonym> | | | \
21:54:54 <Pseudonym> | | | |
21:54:55 <Pseudonym> Right?
21:54:59 <vdrab> sure
21:55:07 <Pseudonym> Now move the upper triangle down and to the right.
21:55:11 <Pseudonym> \ | | | |
21:55:26 <Pseudonym> | \ | | |
21:55:30 <Pseudonym> | | \ | |
21:55:32 <Pseudonym> | | | \ |
21:55:39 <Pseudonym> | | | | \
21:55:55 <Pseudonym> There are now five lines, each of which is a little shorter.
21:56:06 <Pseudonym> Which is the line that got added?
21:56:28 <aj> the one at the end :)
21:56:35 <Pseudonym> :-)
21:56:50 <Pseudonym> It's like that, only the shuffling is a bit more subtle than a simple slide.
21:57:09 <Pseudonym> The ninja one that wolfman8k mentioned is based on a slide, only it's a rotation.
21:57:22 <Pseudonym> The ninjas are around a circle, and you rotate the circle.
21:57:24 <Pseudonym> Which is like a slide.
21:57:24 <aj> okay: here's what each guy's lost: top of hair, chest, nothing, nose, waist, bottom of feet, shoulders, calfs, eyes, stomach, nothing, mouth and thighs
21:58:17 <vdrab> lol... that just makes no sense at all. I need to look at this one frame at a time
21:58:27 <vdrab> not saying you're wrong
21:58:32 <vdrab> I just don't see it
21:58:34 <aj> it's not in the frames, it's just the start and the end
21:58:53 <aj> have a look at the guy second from the right -- his chest turns into his face
21:59:16 <Pseudonym> What might help, BTW, is to look at how the figures are placed.
21:59:34 <vdrab> 3 2 2 3 2
21:59:35 <Pseudonym> In the unshuffled version, they're in "lines" which go from bottom-left to top-right of the picture.
21:59:51 <Pseudonym> Parallel lines.
21:59:58 <vdrab> ooo
22:00:08 <Pseudonym> That's like the figure of the lines that I drew.
22:00:17 <Gahhh> vdrab, after the shift, the guy on the left above the first guy has no feet imho
22:01:01 * vdrab staring intensely...
22:01:08 <Gahhh> ugh
22:01:19 <Gahhh> sorry I was wrong. damn picture viewer
22:01:41 <Pseudonym> Before the shift, there's a "gap".
22:01:44 <vdrab> yes
22:01:48 <Pseudonym> To the right of the fourth guy.
22:01:55 <Pseudonym> After the shift, someone moves into that place.
22:02:03 <Pseudonym> But they don't have any bottom of their feet.
22:02:12 <Pseudonym> Sorry, to the right of the fifth guy.
22:02:38 <vdrab> the funny thing is, I see all that
22:02:52 <Pseudonym> Can you see the pattern in the way that the people are placed?
22:03:07 <vdrab> yes, diagonally 1 2 432
22:03:18 <vdrab> and 1 2 4 4 2
22:05:19 <vdrab> lol ... am I the only one not getting this?
22:06:02 <Spark> what perverse muntery is this
22:06:06 <aj> there were 12 people, now there are 13, each missing a body part
22:06:11 <vdrab> hahaha
22:07:07 <aj> but none of the people are assembled from 13 different body parts, each one's got body parts from two original people, except for one which has body parts from only one person (missing the soles of his feet)
22:07:38 <vdrab> aj: but how/when/where does the switch happen. I mean, I want to be able to see the three separate parts being assembled in such a way that they give 12 guys this way and 13 guys that way. I just don't see it
22:07:56 <aj> the switch happens when the people get moved around :)
22:08:04 <vdrab> duh. :-)
22:08:10 <Gahhh> vdrab: just open it in gimp
22:08:13 <Gahhh> or something
22:08:15 <vdrab> that's cheating
22:08:27 * Gahhh cheated
22:08:27 <aj> there's no special trick to it
22:09:09 <aj> when they get moved around htey lose the body parts, they've been carefully arranged so that the surgery can be done in a straight line
22:09:44 <vdrab> but each upper body gets attached onto a lower body again, no?
22:10:03 <Gahhh> yes
22:10:04 <aj> right, but the upper body was cut off above the stomach, and the lower body was cut off below the stomach
22:10:15 <vdrab> .... so?
22:10:19 <ibid> g'morning
22:10:25 <aj> so now you've got a person with no stomach
22:10:29 <Gahhh> one dude drops his feet below the ankle and in turn gets maybe 50% of the shoes.
22:10:43 <aj> and the stomach's gone to someone how now doesn't have a chest
22:11:20 <vdrab> but they're both still one person, be it a bit deformed, right?
22:11:40 <Gahhh> They are 'a' person, somewhat deformed.
22:12:28 <aj> sure
22:12:39 <vdrab> why am I so bad it this... lol.
22:13:03 <Gahhh> It could be neat if I could mathematically describe how this happens and what the minimum number of persons and their arrengements have to be, etc.
22:13:10 <aj> but it's like this: take 50 people with about $50 each, and have each of them give $1 to a pool, now you've got 51 lots of about $50! free money!
22:13:36 <Gahhh> aj: are you the son of a certain Nigerian person  ?
22:13:39 <vdrab> aj: you're not helping :-)
22:13:49 <Pseudonym> Gahhh: You can do it with one person turning into two.
22:13:49 <vdrab> lol at Gahhh
22:14:12 <Pseudonym> If you don't mind each final person only being half the size and missing half their body instead of a small section out of th emiddle.
22:14:51 <vdrab> pseudo: but they don't really get sliced, they just get the top half removed.
22:14:56 <Gahhh> Pseudonym, then the requirement is that if body parts are numbered 1-2-3-4-5-6, each half person needs to have even/odd numbered parts.
22:15:43 <aj> vdrab: it's not the top /half/
22:16:07 <vdrab> ok, looking diagonally from upper-left to lower right, you have : 1 2 4 3 2 shifting to 1 2 4 4 2
22:16:20 <Pseudonym> Gahhh: Sorry, I don't follow.
22:16:29 <Pseudonym> Even/odd numbered parts?
22:16:34 <Pseudonym> Each person is missing one part.
22:17:15 <Gahhh> Pseudonym, I thought you implied the resulting half persons could not appear continuous. It looks like you didnt.
22:18:36 <Gahhh> So, if I were to take a picture of a man of 200 pixels long, I could shift the odd numbered pixels to the right and end up with two men where each picture is 100 pixels long
22:19:33 <Pseudonym> Ah, OK.
22:19:49 <Gahhh> It wouldnt surprise us then. With 12 people, it baffles us for some reason.
22:19:56 <Pseudonym> But in this case, what you'd do is slice the picture in half, and end up with the top half of a man 100 pixels long and the bottom half of a man 100 pixels long.
22:20:13 <Pseudonym> Probably 1/12 is small enough that you don't miss the bits that were taken out.
22:20:34 <Gahhh> yeah, 1/12 is small enough for us to think that there is something odd.
22:20:56 <Pseudonym> And 12 is small enough that it's still feasable to count.
22:21:01 * vdrab feels cafeine levels dropping fast. back in a bit...
22:21:23 <Gahhh> just like that famous "roundoff error in cents goes to the hacker's account". We want an audit !
22:21:32 <Pseudonym> :-)
22:21:55 <Gahhh> so you are at work, Pseudonym ?
22:22:02 <Pseudonym> Yes.
22:22:07 <Gahhh> cushy job ?
22:22:12 <Pseudonym> Nah.
22:22:22 <Pseudonym> Intellectually stimulating job, but the pay is crap.
22:22:25 <Gahhh> taking frequent breaks ?
22:22:36 <Pseudonym> Which is okay because we're going to be bought soon.
22:22:41 <Gahhh> ah, nice
22:22:49 <wli> what .com?
22:22:52 <Pseudonym> Currently a university research project, soon to be bought by a corporation.
22:22:57 <Pseudonym> www.teratext.com.au
22:23:08 <Gahhh> then the intellectual portion of the job will be replaced by greedy upper management who will make you code MFC gui's.
22:23:15 <Pseudonym> Nope.
22:23:24 <Pseudonym> Not if the people who want to buy us do buy us.
22:23:26 <wli> mass layoff?
22:23:37 <Pseudonym> The people who want to buy us are like us.
22:24:11 <Gahhh> So, what good is this stuff ?
22:24:44 <Pseudonym> Gahhh: If you have a terabyte or so of text, you need to find stuff in it.
22:24:57 <Pseudonym> We write a database server which is optimised for text.
22:25:06 <Pseudonym> Or structured text (e.g. MARC, SGML, XML).
22:25:27 <Gahhh> I see
22:26:27 <wli> Pseudonym: hmmm
22:26:43 <wli> Pseudonym: is there any useful way to make equivalence classes out of words
22:26:56 <Gahhh> Pseudonym, looks interesting. I am sure it has all kinds of benefits.
22:26:59 <Pseudonym> wli: Yes, for a relative definition of "useful".
22:27:11 <Pseudonym> You can, for example, attempt "stemming".
22:27:11 <wli> Pseudonym: like suppose you have a spamfilter and you're trying to recognize spam phrases
22:27:19 <Pseudonym> "stemming" |-> "stem"
22:27:28 <Pseudonym> Or you can do thesaural expansion.
22:27:37 <Pseudonym> Search for "stem" and get "twig".
22:27:59 <wli> Pseudonym: and you want minor misspellings, capitalizations, interspersing of spaces, periods, etc. between the letters of the words, and so on to still allow the word to be recognized
22:28:17 * Pseudonym nods
22:28:21 <Gahhh> I always think that the solution to all these problems is to invent AI at C3PO levels...
22:28:33 <wli> Pseudonym: So what's out there already can do all that?
22:28:49 <Pseudonym> No idea.  We don't do that sort of thing.
22:29:01 <Pseudonym> :-)
22:29:16 <Gahhh> wli, google does something like that
22:29:34 <Pseudonym> Google has some advantages that our product doesn't have.
22:29:36 <Pseudonym> And vice versa.
22:29:48 <Pseudonym> For example, google has a team of people analysing queries and adjusting the search engine to suit.
22:29:53 <Gahhh> haha
22:30:02 * Gahhh thinks he knowns somebody in that team
22:30:16 * Gahhh loves fudge factors
22:30:32 <Pseudonym> OTOH, Google only really handles a small number of collections.
22:30:43 <Gahhh> why small ?
22:30:44 <Pseudonym> Whereas ours is much more flexible.
22:30:50 <Pseudonym> The web, news etc.
22:30:51 <wli> I'm looking for one 
22:30:56 <wli> and exactly one
22:30:59 <wli> spam vs. non-spam
22:31:02 <Pseudonym> The WWW is one collection.
22:31:05 <Pseudonym> Usenet is another.
22:31:11 <wli> which is email
22:31:32 <Gahhh> Oh, you meant the total number of collections, not the total size of the collections.
22:31:37 <Pseudonym> Right.
22:32:04 <Pseudonym> In database parlance, the Google engine(s) is/are written with a hard-coded schema.
22:32:07 <Gahhh> wli, I have seen some ways that the antispam filters had been defeated such that I lost belief in filters
22:32:13 <musasabi> Any recommendations for a book to get together with Okasakis "Purely Functional Datastructures" ?
22:32:25 <wli> Gahhh: Please enumerate those...
22:32:47 <Pseudonym> musasabi: "The Da Vinci Code" is supposed to be a good read.
22:33:22 <Gahhh> wli, I am sure you have seen way better spam. The latest one I realized that made through our filters was including some random blonde joke in an html email (super tiny font) and the rest was an attached gif. It looked like someone sent you a joke.
22:33:45 <wli> Gahhh: hmm, I classify everything like that as spam
22:34:09 <Gahhh> wli, personally, so do I. But how do I get the computer to do it for me ?
22:34:20 <wli> Gahhh: not sure I need to fix it
22:34:27 <wli> Gahhh: for myself also that is
22:34:33 <wli> Gahhh: I have worse problems though
22:34:40 <Gahhh> wli, then I forgot your original woe
22:34:44 <wli> Gahhh: e.g. basic email infrastructure is too crappy for me to deal with
22:34:55 <wli> Gahhh: I get spammed so hard it DDoS's me
22:34:59 <Gahhh> oh I see
22:35:04 <wli> Gahhh: as in off the net entirely
22:35:28 <Gahhh> doesnt that sort of stuff need to be fixed in the ISP level >
22:35:29 <Gahhh> ?
22:35:55 <wli> what makes you think ISP's can do anything?
22:36:11 <wli> they call me saying they're going to pull the plug unless I stop getting DDoS'd
22:36:36 <Gahhh> wli, I dont know what they can do. But if the mere fact that 2 million emails make it to your address, then it doesnt matter if you can classify them as spam or not.
22:36:45 <wli> they're not going to fix my spam problem, they're going to drop my service
22:36:57 <wli> Gahhh: oh, that's what it's for
22:37:00 <Pseudonym> Anyway, must dash.
22:37:03 <wli> Gahhh: classify the spam
22:37:05 <Pseudonym> Nytol!
22:37:09 <Gahhh> nite pseudo
22:37:11 <wli> Gahhh: then look for IP blocks in the discovered spam
22:37:19 <wli> Gahhh: i.e. "where is spam coming from?
22:37:29 <wli> Gahhh: then tarpit those IP blocks
22:37:46 <Gahhh> wli, you mean you will ask your ISP to block those IP addresses ?
22:37:50 <wli> no
22:37:56 <wli> I'll be doing so myself
22:38:12 <wli> the packet rate goes down by several orders of magnitude because they get stuck in TCP retry loops
22:38:24 <Gahhh> I see
22:38:45 <wli> and eventually they pull me off IP lists b/c I appear persistently unresponsive
22:38:49 <Gahhh> so you can do something about the bandwidth if you know for sure that a certain IP is an offender.
22:39:02 <wli> it takes a few hours (actually over 24) for it to register 
22:39:20 <wli> but after I stop packetfiltering for a while it starts up again
22:39:37 <Gahhh> what kind of legitimate email do you receive ?
22:40:25 <musasabi> hmm have read that.
22:40:46 <wli> I'm on something like 250 mailing lists, a number of which are high-traffic
22:41:06 <Gahhh> wli, can you read the lists from the archives ?
22:41:15 <wli> No, I have to have sub-minute response times.
22:41:42 <Gahhh> and you wanna be able to reply to some Joe Random who just joined the list yesterday...
22:41:51 <wli> no, usually flamewars
22:41:57 <Gahhh> heh
22:42:14 <Gahhh> are you a moderator ?
22:42:20 <wli> no
22:42:40 <wli> it's basically part of my job to watch what's going on on some of these mailing lists and respond rapidly
22:43:04 <Gahhh> well, anyways, it doesnt look like we can restrict your incoming email based on "From:".
22:43:10 <wli> nope
22:43:21 <wli> it wouldn't help in isolation
22:43:33 <wli> for one
22:43:42 <wli> if I accept the connection I'm already dead
22:43:55 <wli> it can't be decided after the fact
22:44:02 <wli> I have to refuse illegitimate connections
22:44:26 <wli> and the only way to discriminate is source IP
22:44:32 <Gahhh> did you already implement a blacklist of IP addresses ?
22:44:49 <wli> if I hadn't I would already have had my internet service shut down
22:45:19 <Gahhh> just curious, how many IP's have you blacklisted, approx figure ?
22:45:27 <wli> I don't blacklist individual IP's
22:45:32 <wli> I blacklist IP blocks
22:45:39 <wli> a number of /16's and /24's
22:46:01 <wli> the /24's generally correspond to spider farms
22:46:09 <wli> the /16's are mostly dynamic IP blocks
22:46:54 <wli> so what I want to do is to classify spam, then analyze its sources
22:47:08 <wli> once I determine the largest single source of spam, I tarpit it
22:47:15 <Gahhh> Are the list archives updated fast enough ? You may be better off manually polling them.
22:47:21 <wli> No, they are not.
22:48:18 <wli> I actually do all of this privately b/c corporate email is extremely slow.
22:48:28 <wli> so slow I would not be able to do my job
22:48:38 <Gahhh> lol. is your boss aware of that ?
22:48:57 <wli> the 10 bosses I've had over the past 5 years were all aware of it.
22:49:12 <wli> None of them could fix the company-wide email.
22:49:13 <Gahhh> is the company paying for it ?
22:49:16 <wli> nope
22:49:28 <Gahhh> so you're getting the 'atta boy' award
22:49:40 <wli> there's no award
22:49:44 <wli> it's baseline performance
22:50:03 <Gahhh> I was being sarcastic
22:50:39 <wli> moving on
22:50:48 <Gahhh> Well, you are trying to solve the most general spam problem everybody else is experiencing.
22:51:00 <wli> not really
22:51:16 <wli> I suspect spam classification may already exist
22:51:25 <wli> I do need offline classification
22:51:28 <Gahhh> well, yes there are filters
22:51:29 <wli> but I think they work that way also
22:51:48 <wli> so I can just take their results and do IP stats
22:52:06 <Gahhh> ever heard of bayesian filters ?
22:52:12 <wli> I'm using them.
22:52:22 <wli> I already do by hand what I would like to be automated
22:52:43 <wli> which is to smoke out which IP blocks spam is coming from
22:52:48 <Gahhh> ok
22:52:53 <wli> and then I tarpit them by hand
22:53:16 <wli> long rule lists are a problem
22:53:22 <Gahhh> how big this spam problem is disgusting. Somebody ought to do something about it.
22:53:26 <wli> I'm going to need something to "condense" the blacklists
22:53:56 <wli> Gahhh: zombie networks for spam dissemination have time rented on them as it stands
22:54:45 <wli> Gahhh: i.e. the "real crackers" get themselves zombie networks by trojaning/etc. bloze boxen and get paid something like US$250 for each 1M spams sent.
22:55:32 <wli> Gahhh: So it's basically organized crime.
22:55:59 <Gahhh> wli, I knew that part, yes. Very sad.
23:14:13 <Lemmih> shapr: Ping.
23:19:46 <Gahhh> Is there a person here with a degree in mathematics ?
23:20:29 <Gahhh> oh, there is #math
23:21:01 <wli> yes
23:21:20 <wolfman8k> you want Cale :)
23:42:20 <jesse98> if I have a product type with four components is there a nice way to create values of that type using default values for some components?
23:42:46 <wli> hmm, I'm having trouble with Householder transformations
23:43:01 <wli> or more properly SVD implemented using Householder transformations
23:44:52 <Gahhh> svd = singular value decomposition ?
23:44:55 <wli> yes
23:45:15 <wli> I'm getting NaN's so I've divided by 0 somewhere
23:46:24 <Gahhh> are you implementing your own SVD ?
23:46:27 <wli> yes
23:46:43 <wli> I couldn't find one in Haskell which I'm using to script the rest of the processing
23:46:57 <Gahhh> oh, you are writing it in haskell, too
23:48:33 <paf> wli: I would like to see your SVD function when it's done (if you don't mind), i'm interested too.
23:48:42 <Gahhh> If you are getting NaN's, they are probably not caused by divide by zeros.
23:49:50 * Gahhh tries to remember IEEE754
23:50:00 <wli> well, I'm just trying to do least squares
23:50:07 <Gahhh> wli, I guessed
23:50:27 <wli> (obviously in any real problem the normal equations produce gibberish instead of a result)
23:50:29 <jesse98> divide by zero should give you an inifity
23:50:33 <Gahhh> wli, you can also do Gauss-Jordan. How badly do you need SVD ?
23:50:36 <wli> and I've got a real problem
23:50:45 <wli> Gahhh: they're blatantly inconsistent
23:50:45 <jesse98> 0/0 will give you a nana
23:50:57 <wli> Gahhh: i.e. there will never be a solution from G-J
23:51:17 <wli> Gahhh: it's also massively overconstrained
23:51:24 <Gahhh> wli: I've had systems that SVD couldn't converge, as well.
23:51:49 <wli> well, SVD and SVD-like affairs are effectively the only ones that can produce an answer at all
23:52:04 <Gahhh> wli, how big are the matrices ?
23:52:17 <wli> about 10 columns and a few thousand rows
23:53:04 <Gahhh> wli, pretty big. I've had problematic systems with under a thousand rows and under a hundred columns.
23:53:13 <wli> small number of columns, though
23:53:18 <wagle> NaN = 0/0
23:54:22 <wagle> gnight
23:56:31 <Itkovian> meuning
