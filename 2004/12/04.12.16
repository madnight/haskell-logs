00:00:06 <dons> sure you do. I build .hc bundles every night
00:00:47 <dons> http://www.haskell.org/pipermail/cvs-all/2004-December/037036.html
00:01:05 <dons> last night's build. generated .hc, then did a bootstrap.
00:01:18 <svend> The log from 'cd H/libraries; make boot && make -k' is 1974 lines long.  What should I be looking for re. the missing .hi files?
00:01:22 <Gahhh> you can build the tar file and it will have the compiler hc files. Are you sure it has library hc files too ?
00:01:46 <dons> unless something has broken in stable since the release
00:02:37 <dons> libraries .hc file generation works fine.
00:02:48 <svend> Gahhh: I haven't built the tar yet.  I am at the step where I am running make under libraries, but I am not getting the .hc files.
00:03:14 <Gahhh> svend, I had the same problem and got around it by editing the makefile. Here dons says that I don't have to, tho
00:03:39 <dons> well, the nightly tarballs have .hc files in them, and it auto-bootstraps nicely
00:03:51 <dons> maybe you're using the wrong flag, Gahhh?
00:04:18 <Gahhh> dons, I get hc files. It's just that I don't get *all* the hc files.
00:04:27 <svend> Gahhh: what did you change in the libraries/Makefile?
00:04:54 <dons> well, this is all very strange. it works for me fine.
00:05:36 <Gahhh> dons, after which stage am I supposed to get all the hc files ?
00:06:05 <dons> hmm, they should be there after 'make boot stage=2 && make stage=2
00:06:14 <dons> except for ghc/utils/
00:07:21 <dons> all you do is build the libraries with GhcStage3HcOpts = -O -dcore-lint -H24m -fvia-C -keep-hc-file
00:07:36 <Gahhh> dons, stage3 opts ?
00:07:45 <dons> Stage2 will do fine
00:07:57 <dons> (it does Stage3 in the nightly builds, for no special reason)
00:08:06 <dons> GhcLibHcOpts = -O -H24m -dcore-lint -fvia-C -keep-hc-file
00:08:21 <Gahhh> dons, I had to edit the libraries/Makefile to add SRC_HC_OPTS += $(GhcStage$(stage)Opts)
00:08:38 <Gahhh> because I couldnt figure out how else it would ever use those flags
00:08:41 <dons> but GhcStage* is for ghc/ files. GhcLibHcOpts is for the libraries
00:09:02 <dons> is that the problem?
00:09:16 <Gahhh> First time I heard of that variable
00:09:33 <dons> svend: try adding -fvia-C to GhcLibHcOpts in mk/build.mk
00:09:46 <dons> Gahhh: it's on the bootstrap page.
00:09:58 <dons> GhcLibHcOpts = -O -H32m -keep-hc-files
00:10:25 <Gahhh> dons, yes, the unregisterised build. I am not making an unregisterised build tho. Argh.
00:10:29 <dons> no, -O still implies -fvia-C in ghc-6.2.2
00:10:41 <dons> Gahh: same flags
00:10:54 <dons> the only difference is GhcUnregisterised = YES
00:11:01 <dons>         GhcWithNativeCodeGen = NO                                                         
00:11:05 <dons>         GhcWithInterpreter = NO  
00:11:49 <dons> you should start unregisterised though, and then use that to build a native registerised version
00:12:15 <dons> however, directly jumping into registerised isn't any harder, unless registerisation doesn't work for some reason
00:12:32 <Gahhh> dons, that GhcLibHcOpts variable doesnt seem to be used by libraries/Makefile.
00:12:43 <dons> it would be used in mk/*.mk though, right?
00:13:02 <dons> most of these vars are in $fptools/mk/*.mk, not under libraries/
00:13:10 <Gahhh> dons, it would be defined there. I am asking the consumer of the variable.
00:13:31 <svend> dons: I added -fvia-C but I'm still only getting two .hc files after runing make in libraries/
00:13:52 <dons> Gahhh: building libraries seems to use it: SRC_HC_OPTS     += $(GhcLibHcOpts)
00:13:57 <dons> in mk/package.mk
00:14:32 <dons> svend: yep. can't think of any other reason, without detailed error messages
00:14:50 <Gahhh> I see
00:14:54 <dons> you can send a report to glasgow-haskell-users, if you can't get passed it in another couple of attempts.
00:15:43 <dons> porting ghc is good for your karma, so keep trying :)
00:16:26 <Gahhh> dons, anyway, by hacking the makefile, I got a full set of hc files from linux for the cygwin build.
00:16:42 <dons> cool. shouldn't need to hack it though ;)
00:16:44 <Gahhh> dons, I build the stage1 ghc-inplace as well. 
00:16:47 <svend> dons: I put the entire 'make boot && make -k' log up at http://pleiades.physics.wsu.edu/ghc-log.txt
00:17:05 <Gahhh> dons, yes, I'd like to do it properly next time.
00:17:57 <Gahhh> dons, but the ghc-inplace I built fails silently while trying to generate dependencies (-M) for a bunch of other files. So I got frustrated.
00:18:01 <dons> svend: looks like the ieee option is the killer
00:18:31 <dons> hang on - wheree are the -fvia-C -keep-hc-files flags?
00:18:48 <Gahhh> dons, are you asking me ?
00:19:02 <dons> svend. but just talking to myself atm.
00:19:38 <svend> svend: sorry, that log I posted was before I added the flags
00:20:46 <dons> should have  -fvia-C -keep-hc-file in the ghc args
00:21:31 <svend> dons: new log at http://pleiades.physics.wsu.edu/ghc-log2.txt
00:23:14 <dons> are you getting .hc files now?
00:24:06 <dons> hmm. looks like the ieee issue stops GHC/Base.hs getting built, which breaks everything after it
00:24:41 <dons> maybe you'll have to work out what's happening there. or try starting over in a clean tree
00:25:01 <svend> dons: I only have Base.hc and PrimopWrappers.hc
00:25:34 <dons> oh. ok. that's a good  sign. at least Base.hc got generated. I can't see the problem though.
00:27:37 <sethk> ish
00:29:10 <Gahhh> ish ?
00:30:04 <svend> I'll start fresh on a different Linux box.
00:37:17 <desrt> just wondering...
00:37:25 <desrt> how would one write the y combinator in lambdacalc?
00:40:07 <dons> isn't it Y = \y.(\x.yxx)(\x.yxx) ?
00:40:50 <desrt> do you mean "y x x"?
00:41:12 <dons> yeah, lambda calc 1-letter var name convention ;)
00:41:46 <dons> ah, here we go: http://en.wikipedia.org/wiki/Y_combinator
00:42:10 <desrt> Y = 位f.(位x.(f (x x)) 位x.(f (x x)))
00:42:30 <desrt> i feel like i want to be sick :P
00:42:43 <dons> nah. it's all good. do you have barendreght's book?
00:42:49 <desrt> no
00:43:32 <dons> it's a good one. "The Lambda Calculus: Its Syntax and Semantics"
00:44:22 <desrt> L = 位abcdefghijklmnopqstuvwxyzr.(r (t h i s i s a f i x e d p o i n t c o m b i n a t o r))
00:44:25 <desrt> i love it
00:44:28 <desrt> hahah
00:48:10 <desrt> http://www.willamette.edu/~fruehr/haskell/evolution.html
00:48:21 <desrt> this is easily the funniest page on the humour site
00:52:56 <svend> dons: could you clear part of the instruction for me?  When editing config.mk on the host machine, I changed TARGETPLATFORM and Target{Platform_CPP,Arch_CPP,OS_CPP,Vendor_CPP} and LeadingUnderscore to match config.mk on the target machine.  Do I change the line:  i386_unknown_linux_TARGET=1 to alpha_unknown_netbsd_TARGET=1 ?
00:53:37 <dons> yep
00:56:33 <desrt> i leave you all: http://www.willamette.edu/~fruehr/haskell/ChurchLFP.jpg
00:56:42 <desrt> nite.
00:57:09 <svend> So there are ten variables to check.  I guess I missed four of them.
00:58:30 <dons> could be. I've missed them before. Should write a script.
01:02:07 <svend> Maybe the instructions should be clarified.  They say to "change TARGETPLATFORM  appropriately, and set the variables involving TARGET to the correct values for the target platform." when some of the variables start with "Target" (not all uppercase).
01:21:29 <TheHunter> morning boegel 
01:21:37 <boegel> hey TheHunter 
01:22:21 * TheHunter yawns
01:23:34 * boegel yawns with TheHunter 
01:29:39 * dblhelix is away: ...
02:09:15 * TheHunter is away: lunch
02:35:18 <svend> dons: are the .hc files created during the 'make boot' or 'make' step?
02:47:12 <marcot> Hello, where can I get doc about using a C function in a Haskell program?
02:48:00 <marcot> Is it possible?
02:54:08 <Lunar^> marcot: Search for FFI
02:54:38 <dons> svend: during 'make'
02:54:48 <Lunar^> marcot: http://haskell.org/hawiki/FfiTutorial
02:55:11 <Lunar^> http://haskell.org/hawiki/FfiCookbook
02:58:14 <svend> dons: I just got a lot more of the hc files by modifying libraries/mk/boilerplate.mk according to the instructions at http://www.mail-archive.com/glasgow-haskell-users@haskell.org/msg05221.html
02:59:19 <svend> dons: I have 177 hc files under libraries so far (it's still building)
03:02:17 <svend> I ended up with 220.
03:20:14 <dons> cool.
03:20:49 <dons> yep. the pgmltrue trick is to be preferred. I should have remembered that
03:23:45 <Lemmih> marcot: You might also wanna check out GreenCard and hsc2hs.
03:34:13 <svend> I ended up with 440 hc files in the tarball.  Are there some missing?
03:51:32 <dons> I've got 473 from ghc-6.2.2. so I wonder what the difference is?
03:51:46 <dons> oh, could be readline, maybe?
03:52:32 <svend> The target build failed with some errors about readline.
03:52:56 <svend> Why are the readline files missing.
03:54:04 <dons> do you have readline installed on the netbsd machine?
03:54:30 <dons> anyway, you don't need to build readline - avoid it by commenting out the readline stuff in mk/bootstrap.mk
03:57:21 <svend> Do you mean comment it out on the target machcine?
03:57:52 <dons> yep.
03:58:09 <dons> this will just skip building libraries/readline for now
03:58:37 <dons> you can sort it out later, if nec. once you've got a working ghc on the alpha
03:58:39 <irce> what does a Maybe Char egual to? 
03:58:59 <dons> Maybe Char is a type.
03:59:05 <dons> Just c | Nothing
04:10:10 <irce> dons: ok, thanks
05:00:16 <musasabi> home
05:00:24 * wli works from home
05:01:00 <musasabi> svend: The library issues are most probably due to things being under /usr/pkg/{include,lib} which is not found by things.
05:04:24 <irce> how do I get the first or last item from a tuple ? 
05:05:05 <Lemmih> irce: That depends on the tuple.
05:06:13 <irce> (1,[Char])
05:06:36 <Lemmih> irce: 'fst' and 'snd' from the Prelude.
05:07:17 <irce> yes thanks
05:09:54 <tintin> isnt 'fst' 'snd' independent of the contents of the tuple ?
05:10:30 <wli> *Gamma> :type fst
05:10:30 <wli> fst :: forall a b. (a, b) -> a
05:10:30 <wli> *Gamma> :type snd
05:10:30 <wli> snd :: forall b a. (a, b) -> b
05:11:02 <Lemmih> wli: Say "Hello" to our lambdabot (-:
05:11:11 <Lemmih> @type fst
05:11:14 <lambdabot> fst :: forall a b. (a, b) -> a
05:11:19 <wli> Hmm, this is crappy. Only about 1.0e-5 error bounds on my gamma function
05:13:11 <tintin> Lemmih: i got an impression from your statement "irce: That depends on the tuple." ... that its depending on the tuple colud you please explain ? 
05:13:50 <wli> *Gamma> gamma (0 :+ 1) :: Complex Double
05:13:50 <wli> (-0.1549496739670378) :+ (-0.49801544410828724)
05:15:25 <Lemmih> tintin: A tuples can contain more than two elements but 'fst' and 'snd' are only for binary tuples.
05:16:20 <tintin> so it handles only pairs and tuples need head or tali ... 
05:16:50 <tintin> tnx a lot Lemmih 
05:17:15 <Lemmih> tintin: There's no generic way of selecting elements from an n-ary tuple.
05:17:43 <svend> I commented out all references to readline from mk/bootstrap.mk, but I am getting the same errors.
05:18:14 <Lemmih> tintin: head and tail operates on lists and not tuples.
05:21:06 <tintin> tnx again Lemmih 
05:34:38 <wli> okay, well, I'm having trouble with darcs
05:34:50 <wli> I'm trying to do a darcs pull and it's refusing to apply the patches
05:35:04 <wli> this can be for various reasons but I can't track down for what reason this is
05:35:39 <Lemmih> An error messages would help us greatly.
05:35:46 <wli> there is no error message
05:36:02 <wli> I use darcs pull -a and it goes through without error, spewing a large amount of information
05:36:07 <wli> looks like the patches' contents
05:36:18 <wli> I do it again with the same result
05:38:25 <Muad_Dibber> good afternoon
05:39:44 <svend> I set ReadlineIncludePath in mk/config.mk.  That seemed to fix the readline problem.
05:42:14 <vdrab> hello all,
05:42:29 <Lemmih> Hello vdrab 
05:42:48 <vdrab> I think i know the answer already, but i'd like to try anyways... is it possible to define optional record fields?
05:43:01 <vdrab> ... not using Maybe
05:43:32 <ibid> no
05:43:43 <vdrab> hmmphf... thought so.
05:43:51 <ibid> well, yes, any field is in a sense optional due to laziness
05:44:04 <ibid> but there is no way to safely determine whether the option has been taken or not
05:44:30 <vdrab> but then pattern matching on the field labels becomes impossible
05:44:43 <ibid> hmm?
05:44:48 <ibid> what do you mean?
05:45:05 <Nioate> isn't Maybe good enough?
05:45:31 <Muad_Dibber> I dont know what you are trying to do, but isnt Maybe meant for optional things? ;)
05:45:33 <vdrab> when you try to match against fields that are not there, the runtime complaints... (as it should, obviously)
05:45:57 <ibid> what do you mean "are not there"?
05:46:11 <ibid> you can bind bottom to a variable, you just cannot use it :)
05:46:30 <vdrab> is there a way to specify bottom?
05:46:54 <ibid> undefined
05:47:04 <ibid> or just don't give a value to the field
05:48:11 <vdrab> Muad_Dibber: Maybe would do just fine, but the objects i'm creating can have lots of dimensions but usually don't, so i kinda got tired of writing  Myobj Nothing Nothing Nothing Nothing Just blabla Nothing...
05:48:50 <Muad_Dibber> hmm okay
05:49:07 <vdrab> but it would work, obviously
05:49:38 <vdrab> ibid: can you test for 'undefinedness'?
05:49:46 <vdrab> isBottom?
05:49:51 <vdrab> :)
05:53:05 <vdrab> this is the type of situation you'd wish for the haskell equivalent of 'Programming Perl'
05:53:14 <Lemmih> Not in a pure environment. Maybe and Either are preferred for error checking.
05:53:25 <vdrab> I see.
05:53:47 <Darius> vdrab: What you can do is make a "default" record, and make new records via record update.
05:54:26 <vdrab> Darius: what do you mean by record update?
05:54:40 <Darius> So you have, defaultMyObj = MyObj { field1 = Nothing, field2 = Nothing, etc... }, then aMyObj = defaultMyObj { field1 = Just Foo }.
05:55:29 <vdrab> defaultMyObj is a type constructor, can you use that in itself as a data constructor?
05:55:41 <Darius> defaultMyObj is a value.
05:55:47 <vdrab> oh
05:55:48 <vdrab> my bad
05:56:21 <vdrab> hmmm... that sounds like something
05:56:23 <vdrab> i like it
05:56:26 <Darius> record update has the syntax 'recordValue { fields = to_update }'
05:57:11 <vdrab> I'll see how far this idea gets me, thanks for the help.
05:58:28 <ibid> vdrab: 15:43  <ibid> but there is no way to safely determine whether the option has been taken or not
05:59:40 <vdrab> ibid: yes, that's what i figured... using laziness was one of the first things i tried
06:00:06 <vdrab> on a side note : are there any more books on haskell being written, or do the ones we have pretty much tell the whole story?
06:00:30 <ibid> i have never really understood why people insist on having n+1 books on a language
06:00:53 <Muad_Dibber> ibid: due to lazy evaluation of the books you need n+1 books :P
06:00:57 <vdrab> it's a good indication of what stage the language is in ; )
06:01:30 <ibid> vdrab: more an indication of its popularity
06:01:41 <ibid> but i've never needed more than one or two books per language
06:01:53 <ibid> Muad_Dibber: hmm?
06:02:13 <Muad_Dibber> ? :P
06:02:21 <vdrab> ibid : then you must be using either very good books or very simple languages
06:02:37 <Muad_Dibber> or use only the base constructs of those languages :)
06:03:06 <ibid> vdrab: i usually use the language specs or the "definite" books like K&R in the case of C :)
06:03:09 <Darius> ibid: More books means more choice even if you only will read one.
06:03:25 <ibid> Darius: i'm talking about why people want to *read* more
06:03:52 <ibid> Darius: writing books is fun, that i can understand, and publishing them brings money (sometimes, at least)
06:04:10 <Darius> vdrab: With regards to your question, probably.  I'm not aware of anyone specifically working on one now, but there will certainly be another before too long.
06:04:23 <vdrab> because part of what makes a new language interesting is that it gives you new ways of tackling old problems... i don't get much out of language specs other than syntax definitions
06:04:34 <Muad_Dibber> ibid: and diffeent books do different parts of a language :)
06:04:46 <ibid> Muad_Dibber: lang specs do the whole language :)
06:05:05 <ibid> i usually get style from writing in the language, and participating in the user community
06:05:08 <Muad_Dibber> ibid: there is more to a language than only the specs :)
06:05:09 <Darius> ibid: Have fun reading the C++ spec?
06:05:10 <ibid> (like this one:)
06:05:19 <ibid> Darius: i've read parts of it
06:05:38 <ibid> Darius: in case of c++, i've read the stroustrup book many times over :)
06:06:02 <ibid> Muad_Dibber: sure, but few books thell you much more
06:06:05 <Muad_Dibber> ibid: so you suggest that for building the new WTC you should just play around with some stone and then start building them? :)
06:06:12 <ibid> Muad_Dibber: nope
06:06:18 <vdrab> a good programming book can even make for fun bed time reading... a language spec never ever does... : p
06:07:50 <Muad_Dibber> ibid: i agree that we did not make clear when a book is about a language and when it just touches the language for its purposes
06:08:01 <ibid> Muad_Dibber: a programming language is like the spirit lever - you don't need much time to learn the next model
06:08:22 <ibid> Muad_Dibber: the stuff that you need to build the next WTC is spirit lever independent
06:08:32 <ibid> Muad_Dibber: and learnt better from language-independent books
06:08:51 <Muad_Dibber> ibid: notice my last comment
06:09:09 <ibid> Muad_Dibber: yes, but we *were* talking about language-specific books
06:09:24 <ibid> the question was, if there was more haskell books
06:10:09 <ibid> i have a meeting in five minutes, need to go soon
06:11:05 <Muad_Dibber> yeah :P
06:11:17 <vdrab> the thing is, you always pick up a language faster if you can learn it in the context of what it will do for you. i learnt more haskell from a book on computational semantics than any real haskell book.
06:11:30 <vdrab> thanks and have fun, ibid
06:12:13 <vdrab> hence, more books == more possible crossover points with things you want to use the language for
06:26:34 <Muad_Dibber> vdrab: well yeah, but then again the internet contains lots of documentation too
06:28:00 <vdrab> sure.
06:28:02 <MegaMonad> G'day blackdog, how's the job?
06:28:15 <Muad_Dibber> MegaMonad, g'day ;)
06:28:20 <MegaMonad> Muad_Dibber: G'day saz, ltns.
06:31:51 <CosmicRay> MegaMonad: good morning, pal
06:31:57 <MegaMonad> CosmicRay: Look at pal.in.
06:32:10 <CosmicRay> MegaMonad: where is it?
06:32:16 <MegaMonad> CosmicRay: Pseudonym: you want zoltan's phd thesis.
06:32:30 <CosmicRay> MegaMonad: oh?  what was it about?
06:32:36 <MegaMonad> CosmicRay: Oh, you'd need to discuss it with shows.
06:32:46 <CosmicRay> MegaMonad: the function?
06:32:52 <MegaMonad> CosmicRay: Lunar^: did they upgrade to the effort to write up a function on rose trees not resomorphism in this case i think in haskell.
06:33:52 <Darius> It needs a meta-markov model.
06:47:22 <svend> I'm really close to finishing the build on netbsd-alpha.  I'm getting the following error: typecheck/TcInstDcls.hc:2965: parse error before `return'
07:01:09 * Darius can now play with Ion and be online.
07:01:32 <Muad_Dibber> with what?
07:02:22 <Darius> http://modeemi.cs.tut.fi/~tuomov/ion/
07:03:56 <Muad_Dibber> looks like a hardcore de :)
07:24:34 <wli> feh
07:24:40 <wli> how do I roll back to a given tag in darcs?
07:26:24 <wli> is there any way to find out the last patch got that applied?
07:31:12 <Darius> darcs changes would be the place to start for the one.
07:31:39 <Darius> depending on what you mean by rollback there seem to be several ways
07:48:33 <wli> that came straight out of darcs
07:48:37 <wli> so I have no idea what that means either
07:48:57 <wli> so how do I unpull to the tag v2_6_9?
07:52:07 <Darius> presumably you should be able to say darcs unpull --tag v2_6_9 though that'll remove the patches from the repo and the working directory, so it may not be what you want to de.
07:52:17 <Darius> do/de
07:52:23 <wli> I want it to affect the working repo
07:52:29 <wli> so it's what I want
07:52:40 <wli> thanks
07:53:13 <Darius> There's revert which affects only the working directory but it doesn't seem to take a tag argument.
08:04:17 <bourbaki> moin
08:04:23 <boegel> hey bourbaki 
08:05:16 <bourbaki> has anyone ever used the arrow loop?
08:05:36 <bourbaki> and has anyone an idea how to do a while or simple recursion with the loop?
08:05:41 <bourbaki> moin boegel
08:06:43 <musasabi> bourbaki: you can stare at the ArrowLoop definition for monads and pure functions but that is not very helpfull.
08:07:41 <bourbaki> musasabi: right thats why i ask if anyone has used it yet for something like that i dont see any way to use it properly
08:08:00 <musasabi> the AFRP people
08:08:24 <bourbaki> AFRP? the yampa guys?
08:09:56 <bourbaki> musasabi: are some of them in here?
08:11:00 <musasabi> yes.
08:11:11 <musasabi> But I newer got around reading their code.
08:11:32 <bourbaki> you happen to know who is one of them?
08:11:33 <musasabi> "Functional reactive programming continued" is the paper iirc
08:11:55 <musasabi> No, I don't know..
08:13:12 <bourbaki> i was really confused about this yampa stuff
08:15:30 <bourbaki> i mean i just dont understand how you can do something like recursion with arrows
08:16:12 <bourbaki> since a recursion meens that you extend some structure that means that you would need to add arrows to that structure and if its just one function that doesnt seem feasable to me
08:19:39 * musasabi tries to summon wise lambdas to answer the questions
08:19:53 <musasabi> MegaMonad: can you save us?
08:19:59 <MegaMonad> musasabi: What does it save me the only thing i need experience in haskell that they begin with a sexy lang to me.
08:20:37 <bourbaki> i mean simple loops like while and such dont expand space wise right? but recursions do
08:20:59 <bourbaki> which is why i think ill just support simple loops in my graph thingy
08:21:19 <musasabi> bourbaki: tailrecursion is safe..
08:21:45 <bourbaki> ok but how would you build a recursion in a graph where the edges are functions?
08:22:35 * musasabi just today had a math exam talking gibberish about recursion..
08:22:48 <musasabi> and I still don't remember much ;)
08:23:08 <bourbaki> remember from where?
08:24:35 <bourbaki> what im doing for now is searching a possibility to do while with loop and the other thing is that i search for a way to do recursion in my graph/program thingy which is like a petri net
08:24:39 <Nioate> what are the vertecies?
08:24:42 <bourbaki> can you do recursion in petri nets?
08:24:59 <bourbaki> my vertices are domains and codomains for the functions
08:26:31 <Nioate> so then recursion would be a loop?
08:29:06 <boegel> do you guys think an extension of Haskell which allows array's to be functions could come in handy ?
08:29:47 <bourbaki> Nioate: loop is something like loop f x = let (c,d) = f (x, d) in c
08:29:58 <esap> boegel: The Array is a wrapper for a function already.
08:30:09 <kosmikus> bourbaki: no :)
08:30:20 <boegel> esap: so you mean stuff like [1,2,3] 0 is defined already ?
08:30:24 <bourbaki> esap: moin do you have an idea how to do a recursion or while with arrow loop?
08:30:34 <bourbaki> kosmikus: ? thats that my paper says
08:30:40 <esap> boegel: [1,2,3] is not an array.
08:30:56 <boegel> esap: I mean that idea...
08:31:01 <Nioate> bourbaki: I meant a graph loop
08:31:08 <Nioate> bourbaki: not arrow loop
08:31:17 <Lemmih> Hey shapr.
08:31:18 <kosmikus> bourbaki: sorry, meant boegel
08:31:29 <bourbaki> Nioate: the graph recursion is something that i dont know what it looks like
08:31:42 <bourbaki> i dont even know if its at all p[ossible without extending the graph
08:31:52 <shapr> y0 Lemmih 
08:31:56 <bourbaki> and if that is the case it cant be done useing arrows solely
08:31:56 <boegel> hello shapr 
08:32:01 <shapr> hoi boegel 
08:32:08 <esap> bourbaki: I'm thinking. I think it'
08:32:17 <shapr> MegaMonad: doughnuts?
08:32:21 <esap> bourbaki: I'm thinking. I think it's simple to build a recursion with that.
08:32:25 <Darius> Hey shapr, have any useful keybindings and things for Ion&dvorak?
08:32:28 <MegaMonad> shapr: Instead i think is a much better but not with jelly doughnuts.
08:32:39 <bourbaki> esap:  and how?
08:33:11 <Darius> boegel: Coercion of a list to a function (list!!).
08:34:08 <shapr> Darius: I'm using hyper-n for frame.next and super-n for workspace.next. I no longer use the tiling features of the standard workspace, but I do use the FloatWS for Gimp etc.
08:34:11 <musasabi> boegel: no.
08:34:21 <esap> bourbaki: loop (arr (\ ((x,z),y) -> (z,f (In (y,x)))))  something along those lines.
08:35:05 <shapr> Darius: I had some app folding code that tuomov wrote awhile back, but I don't know what I did with it.
08:35:06 <musasabi> esap: is there a small working example anywhere?
08:36:10 <bourbaki> esap: hm 
08:36:11 <esap> musasabi: I don't have.
08:36:45 <bourbaki> esap: whats f and whats ln ?
08:36:55 <Darius> shapr: Can you describe how you use ion, or is it just all fullscreen?
08:37:13 <esap> bourbaki: I meant 'In', but I guess you don't need that, you can include it in 'f' if needed.
08:37:42 <bourbaki> esap: and f is what? an arbitrary fn?
08:38:34 <esap> bourbaki, musasabi: The important point to understand of ArrowLoop is that the 'd' in a (b,d) (c,d) will specify a hidden 'state' of an object which is constructed.
08:38:48 <esap> bourbaki: yes, an arbitrary function.
08:39:48 <shapr> Darius: in the past I've used a separate tile for emacs' speedbar - http://www.scannedinavian.org/~shae/custom.png
08:40:15 <bourbaki> esap: can you think of a way to use loop to construct a while?
08:41:39 <esap> bourbaki: hmm.. I'm not sure it's possible. 'd' would have to represent the loop invariant.
08:42:08 <shapr> Darius: I never got around to writing a whole startup script, I would like it if I could start certain apps on certain workspaces.
08:42:15 <esap> bourbaki: but let me think for a second.
08:42:36 <bourbaki> esap: sure :) you can have a minute even ;)
08:43:43 <esap> bourbaki: I think it's not possible, since every iteration using ArrowLoop must produce output. And while loops do not need to do that.
08:44:13 <shapr> Darius: oh hey, I want to talk to you about some ideas, a binary based orthography and a statistically simplistic voice recog engine. I also had some ideas for improvement of slidalong
08:44:44 <bourbaki> esap: hm and what about implementing something like length with loop without useing another recursive function?
08:45:11 <bourbaki> esap: so you think that its not possible to construct something like while with arrows?
08:45:38 <esap> bourbaki: Well I think it's possible with Arrows, but not with ArrowLoop.
08:45:54 <wli> I see arrows-related stuff in ghc
08:45:59 <wli> is ghc moving to arrows?
08:46:07 <shapr> I doubt it.
08:46:14 <bourbaki> esap: ok then lets see if we can do that length thing and then lets try to do while with arrows
08:46:17 <shapr> would be nice though
08:46:27 <esap> bourbaki: I think length is possible.
08:46:50 <shapr> are you guys writing arrow code prototypes?
08:46:53 <shapr> if so, I wanna see 'em!
08:46:55 <bourbaki> esap: ive just been able to construct something that used another recursive funtion
08:47:15 <bourbaki> shapr: prototypes ?
08:47:32 <shapr> SpikeSolutions, idea tests, whatever
08:47:49 <bourbaki> well im building these networks with arrows
08:47:58 <shapr> whenever I want to learn a new thing I write small isolated prototype code to see if I understand the concepts.
08:48:02 <bourbaki> something like petrinets
08:48:25 <shapr> I learned HaskellDB by writing a tutorial.
08:48:32 <bourbaki> i just need to get that recursion and while stuff in there
08:51:05 <wli> btw
08:51:22 <wli> are there 64-bit linux x86-64 ghc ports yet?
08:54:12 <wli> it would be really handy to use the 64-bit addressing mode
08:54:45 * musasabi is more after efficient word64 operations
08:55:06 <wli> well, I'm just trying to run it natively on my box without a shell script wrapper for gcc
08:55:18 <bourbaki> is HList in std haskell?
08:55:40 <wli> (which is how I hacked around issues in running the 32-bit port on x86-64)
08:55:50 <wli> there were, of course, more issues
08:56:07 <CosmicRay> wli: yes, I am running it
08:56:37 <musasabi> bourbaki: not H98, but "standard" ghc -fglasgow-ext etc
08:56:46 <wli> CosmicRay: so current cvs builds on x86-64 now?
08:57:18 <wli> well, turkey-walking me through a build might help...
08:58:57 <Igloo> There's unregisterised amd64
08:59:15 <wli> Igloo: sounds good to me
08:59:29 <Igloo> Don't you run Debian? It should just work
08:59:40 <wli> the amd64 box is suse
09:00:07 <wli> I won't touch debian's amd64 port because it's being done abnormally and in a way completely unacceptable to me
09:00:24 <Muad_Dibber> use gentoo :P
09:00:24 <Itkovian> wli: I've been talking to a friend about your estimation problem ...
09:00:35 <wli> Itkovian: cool, any ideas?
09:00:38 <Itkovian> wli: we'll look into it further next week or so ...
09:00:49 <wli> Itkovian: sounds good to me
09:01:02 <Itkovian> wli: well, first off, we'd try to model the hashtable stuff ...
09:01:11 <Itkovian> wli: no promises though ...
09:01:28 <wli> Igloo: well, empirical results are available by just running linux
09:01:33 <wli> er
09:01:37 <wli> Itkovian: well, empirical results are available by just running linux
09:01:43 <stepcut> xb
09:01:45 <stepcut> ack!
09:01:53 <stepcut> sorry, missed the C- 
09:01:58 <bourbaki> what do i have to do in order to use HList?
09:02:38 <stepcut> bourbaki: I just downloaded the .zip and then imported a bunch of stuff till it worked
09:03:07 <wli> Itkovian: The trouble I see with modelling the hashtable is that the behavior is completely dependent on the inputs; there isn't a question about the hashtable per se, but rather, what's being put into it.
09:03:20 <wli> but maybe something will come of it
09:03:23 <stepcut> HList needs to be cabalized :-/
09:03:28 <bourbaki> stepcut: heh sounds adventureous :) what did you include? isnt the HListPrelude.hs enough?
09:03:49 <stepcut> bourbaki: I may have imported more than needed :)
09:04:07 <stepcut> bourbaki: some stuff like  GhcSyntax, or something... I am not on the machine where I use Hlist
09:04:23 <CosmicRay> wli: I don't know about cvs, but:
09:04:34 <CosmicRay> ii  ghc6           6.2.2-2        GHC - the Glasgow Haskell Compilation system
09:04:37 <CosmicRay> this is on amd64
09:04:38 <bourbaki> damn i will need to change so much code to use it but i have to ... :(
09:05:00 <stepcut> bourbaki: heh..
09:05:09 <wli> I'm about to see what explodes when I try to bootstrap it from the 32-bit binary I have.
09:05:13 <stepcut> bourbaki: HList expanded my mind :)
09:05:22 <CosmicRay> wli: one catch: ghci does not work on amd64 right now
09:05:26 <CosmicRay> wli: This is on debian
09:05:44 <CosmicRay> wli: Other than that, I have experienced no problems.  amd64 is my primary development platform.
09:05:49 <bourbaki> stepcut: i thought about the stuff in terms of what i need not of what haskell gives me :)
09:06:06 <stepcut> hehe
09:06:07 <wli> CosmicRay: well, I have to build from scratch since there are no tarball binaries etc.
09:06:16 <CosmicRay> can't you use the debs?
09:06:56 <wli> CosmicRay: it's not debian
09:07:04 <CosmicRay> what is it?
09:07:07 <wli> SuSE
09:07:21 <CosmicRay> you should still be able to use the debs, I'd hope
09:07:28 <wli> library version skew
09:07:31 <CosmicRay> I'd hope suse amd64 could run debian-built binaries
09:07:35 <CosmicRay> wli: suse is older?
09:07:45 <wli> newer glibc version
09:08:01 <CosmicRay> wli: suse is newer then?  that shouldn't be an issue
09:08:23 <wli> CosmicRay: incompatible newer version of libs AFAICT
09:08:30 <CosmicRay> bah, that sucks.
09:08:39 <CosmicRay> could you steal debian's libc6 package and set LD_LIBRARY_PATH?
09:08:42 <wli> but building it should just work
09:08:54 <wli> I need to build it anyway for other reasons
09:08:56 <CosmicRay> wli: yeah but it's a PITA if you don't have ghc on the box already
09:08:56 <Itkovian> wli: I took note about your remark of the hashtable model :-)
09:09:01 <Itkovian> ttyl
09:09:04 <CosmicRay> wli: perhaps you could use the x86 ghc to build it
09:09:07 <shapr> @yow !
09:09:08 <lambdabot> I'm gliding over a NUCLEAR WASTE DUMP near ATLANTA, Georgia!!
09:09:16 <wli> CosmicRay: that's what I have installed now
09:09:20 * xerox can yow too!
09:09:23 <xerox> (hi!)
09:09:29 <bourbaki> esap: still thinking?
09:09:34 <shapr> hiya xerox 
09:09:34 <CosmicRay> wli: ah.  is it actually working in the 64-bit environment?
09:09:42 <esap> bourbaki: Yes.
09:09:45 <xerox> If I felt any more SOPHISTICATED I would DIE of EMBARRASSMENT!
09:09:48 <wli> CosmicRay: sort of
09:09:49 <CosmicRay> I know ghc does a lot of funky stuff with lbirary loading and stuff
09:09:51 <CosmicRay> heh
09:09:53 <wli> CosmicRay: numerous hacks were needed
09:10:02 <CosmicRay> yeah, I bet
09:10:04 <esap> bourbaki: My approach is I'm trying to build a state machine that computes the length of a list :-)
09:10:13 <musasabi> wli: fetch the debian toolchain and build it from source ;)
09:10:14 <wli> CosmicRay: one of which is screwing with gcc to make it pass -m32 all the time
09:10:28 <CosmicRay> wli: but isn't that the opposite of what you want?
09:10:30 <wli> musasabi: I have source and a toolchain...
09:10:36 <CosmicRay> wouldn't that build a 32-bit ghc?
09:10:50 <wli> CosmicRay: ghc wasn't built
09:10:55 <wli> CosmicRay: ghc just installed from a binary
09:11:06 <wli> CosmicRay: the binary wanted/needed 32-bit codegen
09:11:08 <bourbaki> esap: thats cool cause if thats possible i can directly build that into my thing the idea is that this machine has to be collapsable to a single function with arrows then
09:11:10 <CosmicRay> wli: oic, you're forcing the gcc that ghc invokes to be 32-bit...
09:11:16 <wli> yes
09:11:23 <wli> SuSE moronically made 64-bit the default
09:11:37 <CosmicRay> that's not moronic
09:11:43 <CosmicRay> if you're running on a 64-bit platform, that makes sense
09:11:43 <shapr> yeesh, more disk errors on www.haskell.org
09:11:54 <CosmicRay> shapr: yipe
09:11:57 <wli> wrong, it breaks all the hardcoded 32-bit crap
09:12:06 <wli> anyway
09:12:11 <CosmicRay> what hardcoded 32-bit crap?
09:12:17 <wli> I have to start a cross-build and IIRC it's nontrivial
09:12:22 <shapr> I sent email to John Peterson and backed up the wiki, not sure what else I should do.
09:12:25 <wli> CosmicRay: e.g. the 32-bit ghc binary
09:12:27 <esap> bourbaki: the thing is, I think ArrowLoop is ideal for building state machines...
09:12:31 <CosmicRay> yeah that sucks
09:12:34 <CosmicRay> wli: that's a special case
09:12:46 <CosmicRay> wli: mostly, code should be fine for a 64-bit gcc
09:12:59 <CosmicRay> wli: I for one don't want my 64-bit machine to be building slow 32-bit code by default
09:13:15 <CosmicRay> wli: not to mention all the library confusions that that involves
09:13:16 <wli> this is a stupid dbate, I just need to kick off the damn cross-build
09:13:29 * shapr debaits his hook.
09:13:31 <bourbaki> esap: and why do you think so? i still have a problem seeing the usefullness since i never have seen an interesting application
09:13:51 <wli> do I start with autoconf or what?
09:13:56 <shapr> autoreconf
09:14:00 <wli> I have a freshly checked out source
09:14:18 <CosmicRay> wli; the procedure is pseudo-documented in the ghc manual
09:14:49 <wli> I've seen the documentation and failed to produce anything useful from it numerous times already, which is why I've never bothered trying to do unregisterized ghc builds before.
09:15:13 <wli> and/or ghc cross-builds
09:15:19 <CosmicRay> wli: it takes awhile, but it can work.  I made a ghc port to 64-bit aix that way.
09:15:30 <esap> bourbaki: Think of the type of 'loop'. It's   loop :: a (b,d) (c,d) -> a b c.
09:15:37 <wli> that's the kind of thing I'm interested in, yes
09:15:55 <musasabi> esap: I think so too, but examples how to do it don't exist.
09:15:56 <esap> bourbaki: The 'd' there represents a state that is passed from one point in time to another point in time.
09:16:14 <wli> okay, I'm ready to configure
09:16:18 <musasabi> An example of arrowloop would be very very nice.
09:16:19 <wli> autoreconf finished
09:16:38 <bourbaki> esap: yes but i have a problem to do anything usefull with it
09:16:47 <CosmicRay> wli: http://www.haskell.org/ghc/docs/6.2.2/html/building/sec-porting-ghc.html fwiw
09:17:06 <esap> bourbaki: hold on, I'm writing the length function with it... :-)
09:17:07 <bourbaki> esap: ie in length the d would have to be the length of the reminder or so right?
09:17:20 <bourbaki> esap: heh ok sry im just a bit anxious ;)
09:17:28 <wli> yes, I've seen that numerous times and failed to produce anything by following its directions numerous times
09:18:40 * CosmicRay solicits feedback on this interface: http://www.complete.org/~jgoerzen/t/MissingH.IO.HVIO.html
09:18:47 <vincenz> Hi
09:18:50 <vincenz> You people might know this
09:19:03 <vincenz> what's the typical symbol used in formal specification to denote something is a pointer to type T?
09:19:38 <vincenz> T with an arrow above it?  T with an up arrow left of it?
09:25:42 <Darius> I think the only thing I might have seen is !T, though that is also used in linear logics.
09:26:46 * vincenz nods
09:26:53 <vincenz> I'll use uparrow next to it
09:26:56 <vincenz> next..
09:28:53 <esap> bourbaki: Hmm.. it's a bit more complicated than I thought.
09:28:56 <bourbaki> stepcut: how can i make a HList a variable?
09:29:14 <esap> bourbaki: Returning a value after iteration is pretty hard.
09:29:29 <bourbaki> esap: yep but id really be glad and thankfull if youd keep on trying i havent slept 4 days because i thought i was able to do it :)
09:29:45 <esap> bourbaki: heh :-)
09:30:32 <Darius> esap: You are trying to make 'a [x] Int' with just arrowloop?
09:30:37 <bourbaki> esap: but i think  ican soon to that topological thing with the objects
09:31:21 <esap> darius: yes very close to that.
09:31:59 <esap> darius: Thought I think you need some signal actually get the output, which seems to be pretty hard.
09:32:35 <esap> darius: because every use of the function will produce one output, which is too much.
09:39:45 <Darius> well an obvious solution would be, loop (arr (\(l,len) -> (len l,\xs -> if null xs then 0 else 1+len (tail xs)))) which should work.
09:41:00 <esap> it does work.
09:41:35 <esap> I didn't realize I could store a function in the state :-(
09:42:23 <bourbaki> hm interesting :) though one cant map this to a graph right?
09:43:28 <Darius> If you're graph is an instance of ArrowLoop then it would work.  I'm wondering how yo uare making you're graph an instance of any of the arrow classes.
09:44:17 <Darius> Of course, there isn't really any point: arr length would do the same thing
09:44:21 <bourbaki> well i can give you a glimpse on my stuff if you dont mind :)
09:44:39 <bourbaki> the thing is i want to be able to write stuff with the graph
09:44:49 <Darius> If it's more than a couple lines you might want to use
09:44:52 <bourbaki> and make you able to see what you do in the graph
09:44:54 <Darius> @HaskellIrcPastePage
09:44:54 <esap> darius: I think the real challenge is this: Do it without 'arr', using just the Arrow classes.
09:44:54 <lambdabot> Sorry, I don't know the command "HaskellIrcPastePage", try "lambdabot: 
09:44:54 <lambdabot> listcommands"
09:45:04 <Darius> @wiki HaskellIrcPastePage
09:45:04 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
09:45:33 <esap> darius: But I guess from your solution, it's pretty simple.
09:45:37 <bourbaki> its not code that i want to give to you just a description of what i do and why its interesting to do what i ask for :)
09:48:29 <bourbaki>  Darius the idea is that you have a graph wheret he nodes are data containers and the edges are arrows with the domain and codomain matching to the types of the nodes or vice versa
09:49:04 <bourbaki> and then you can interpret this graph like a petri net with the data as tokens and you can fold the graph useing the arrow operations
09:49:38 <bourbaki> but to make it interestion in any sense i need to be able to represent loops or recursion in the graph of some type
09:50:22 <bourbaki> i can model something like a while loop in the graph but nothing like recursion if i want to fold it with the arrow operations cause it would expand the graph
09:52:48 <Darius> If the arrows of the graph correspond to Arrows, then wouldn't the inclusion of a Turing-complete language as the 'meaning' of the arrows make most things trivial?
09:53:42 <bourbaki> pardon ?:)
09:54:00 <bourbaki> well if its so trivial do recurion with just useing arrows
09:54:27 <bourbaki> i think its one of the reasons why visual languages dont have a high impact
09:54:44 <bourbaki> buecause its really hard or even impossible to do it with just edges
09:59:59 <Darius> So what is the issue you are having with ArrowLoop?
10:00:15 <bourbaki> Darius: the thing is i dont want to hide anything in the arrows anything that can be done in an arrow has to be dooable in the graph as well
10:00:45 <bourbaki> Darius: the thing is i want to use it to "fold" the graphs while structure into the recursive loop form
10:11:10 <bourbaki> Darius: does this make any sense?
10:14:25 <Darius> Not really.  Perhaps an example that of what "folding" the graphs "while structure" into a "recursive loop form" would be in order.
10:16:38 <bourbaki> well i dont have a while yet since im still writeing the interpreter but a while would roughly look like a circle in the graph that iterates over some arrows until a certain condition is matched and this is encoded via this operator <+> i think it is where you get this either on the right hand side so its either still looping or returning the value
10:16:50 <bourbaki> but this structure is just interpreted in the interpreter in a way like a petri net does
10:17:45 <bourbaki> that is the data is the token when all predecessor nodes have data the functions at the edges are executed and the data is written into the codomains
10:34:33 <CosmicRay> shapr: you here?
10:35:46 <shapr> CosmicRay: nope
10:35:48 <shapr> doh
10:35:52 * shapr snickers
10:35:57 <CosmicRay> heh
10:36:09 <CosmicRay> shapr: could you give me some feedback on this: http://www.complete.org/~jgoerzen/t/MissingH.IO.HVIO.html
10:36:38 <CosmicRay> shapr: I just want to make sure I've got a good idea and am taking a good path before I go and start using it everywhere
10:37:45 * shapr looks
10:39:03 <musasabi> CosmicRay: that suffers from some problems.
10:39:21 <CosmicRay> musasabi: what are they?
10:39:48 <musasabi> CosmicRay: you need existential wrapping to pass those around.
10:40:07 <musasabi> and I am not sure whether those are good in general although I am using them in a few places.
10:40:13 <CosmicRay> if you're passing lists of them, yes.
10:40:23 <CosmicRay> but one could just call vPutStr stdout "foo"
10:40:43 <CosmicRay> musasabi: are there good alternatives?
10:41:02 <musasabi> CosmicRay: not really. For my new code I am using mostly a structure of functions.
10:41:13 <CosmicRay> musasabi: yeah, I've used them too.
10:41:28 <bourbaki> Darius: do you understand my prob now
10:41:29 <Lunar^> CosmicRay: Have you read Marlow's proposals ?
10:41:49 <shapr> yeah
10:41:52 <musasabi> CosmicRay: also I don't think we need yet an another text io layer.
10:41:52 <shapr> that's what I'd suggest
10:41:54 <CosmicRay> Lunar^: I think I saw some very preliminary code awhile back
10:42:05 <CosmicRay> shapr: structures of functions?
10:42:11 <CosmicRay> musasabi: are there others?
10:42:17 <CosmicRay> musasabi: where could I find them?
10:42:17 <bourbaki> esap: are you still tying to build a fsm for length?
10:42:29 <shapr> I'd suggest you look at Simon Marlow's proposal
10:42:30 <musasabi> CosmicRay: a while back there was a huge discussion on haskell-cafe.
10:42:35 <shapr> there was a very long discussion about it
10:43:05 <musasabi> It ended more or less "we have better APIs but there is not enough consensus to do things to the standard libraries."
10:43:19 <Lunar^> CosmicRay: MemoryBuffer should by Word8, not String IMHO
10:43:32 <CosmicRay> Lunar^: that breaks unicode
10:43:41 <CosmicRay> Lunar^: or at least complicates
10:43:43 <musasabi> I am hoping to address handling binary data if I can do that as a project for the compilers course.
10:44:22 <CosmicRay> shapr: this wasn't buried in the "Global Vriables and IO initializers" thread, I hope...?
10:44:26 <shapr> um
10:44:30 <shapr> no
10:44:39 <shapr> It was before you hit the scene I think.
10:44:50 <musasabi> Something to clean up the whole IOUArray/Ptr/PArray/[Word8]/chunked list of one of them.
10:45:09 <musasabi> september-october I think.
10:46:39 <Lunar^> CosmicRay: Why do you refer to "file" in vClose documentation (as an example)?
10:46:48 <CosmicRay> Lunar^: laziness
10:47:06 <CosmicRay> Lunar^: I haven't really documented those functions that are direct equivolents of the h* functions very well
10:47:12 <Lunar^> ok
10:47:57 <Lunar^> CosmicRay: This API is highly string oriented
10:48:26 <CosmicRay> Lunar^: that's true, mostly because System.IO is as well
10:48:38 <Lunar^> CosmicRay: vReady vs vIsReadeable... why not vIsReady ?
10:49:08 <CosmicRay> Lunar^: parelleling System.IO names
10:49:15 <CosmicRay> Lunar^: System.IO has hReady, hIsReadable
10:49:46 <CosmicRay> shapr: I see a massive" Writing binary filse" thread on cafe in september
10:49:50 <Lunar^> CosmicRay: That's wrong IMHO, consistent names, blabla... 
10:49:52 <CosmicRay> and a very small IO layer thread
10:50:00 <Lunar^> CosmicRay: What if vSeek fail ?
10:50:10 <CosmicRay> Lunar^: yeah, I suppose I could take this opportunity to adjust things
10:50:17 <CosmicRay> Lunar^: same thing as if hSeek fails (IOError)
10:51:01 <Lunar^> CosmicRay: another thing, everything should be in (MonadIO m) instead of IO
10:51:23 <CosmicRay> Lunar^: why is that?
10:51:30 * CosmicRay doesn't fully understand what that means
10:52:03 <Lunar^> CosmicRay: StateT + IO + custom env is a quite nice construct
10:52:05 <CosmicRay> @index MonadIO
10:52:05 <lambdabot> Control.Monad.Cont,Control.Monad.Error,Control.Monad.List,Control.Monad
10:52:05 <lambdabot> RWS,Control.Monad.Reader,Control.Monad.State,Control.Monad.Trans,Control
10:52:05 <lambdabot> Monad.Writer
10:52:38 <CosmicRay> that would be equivolent to IO?
10:52:42 <Lunar^> CosmicRay: though merely unusable because you have to use a lot of liftIO *and* reimplement some low level constructs for exceptions
10:54:09 <CosmicRay> hmm.
10:56:06 <CosmicRay> shapr, musasabi: is this what you're thinking of: http://www.haskell.org//pipermail/haskell-cafe/2004-October/007202.html
10:58:01 <Lemmih> CosmicRay: http://www.haskell.org/~simonmar/io/System.IO.html
10:59:20 <CosmicRay> ah.;
10:59:44 <CosmicRay> that looks like more of an abstraction of some very low-level binary interactions than a general IO abstraction, doesn't it?
10:59:48 <CosmicRay> IOW, it's solving a different problem?
11:00:12 * stepcut reads his own message
11:00:28 <CosmicRay> Lemmih: I don't think it's implementable in pure Haskell, either, is it?
11:00:31 * shapr reads someone else's message
11:00:56 * stepcut switches to reading about sRGB
11:01:06 <Lemmih> CosmicRay: No.
11:01:18 <Lunar^> CosmicRay: vGetFP shouldn't be abrievated
11:01:34 <CosmicRay> Lunar^: good point.
11:01:43 <Lunar^> CosmicRay: http://ktown.kde.org/akademy/Matthias_Ettrich_Designing_Qt-style_APIs_video.ogg <- it's his fault
11:01:54 <Lunar^> This is a very very good talk, btw
11:01:55 <CosmicRay> heh
11:04:54 <musasabi> CosmicRay: that is simply lifting IO to an arrow.
11:05:05 <musasabi> or stream processors to be more exact.
11:05:29 <irce> http://otto-1.hopto.org/t.hs , whats that error ? Instance of Num [Char]. it works fine without the last two lines  
11:05:44 <shapr> irce: means you're trying to divide one string by another or something like that.
11:09:18 <Lemmih> irce: It's easier to first parse and then evaluate.
11:10:16 <Lemmih> irce: Like creating: data Expr = Plus Expr Expr | Lit Int; parseExpr :: String -> Expr; evalExpr :: Expr -> Int
11:11:20 <Lemmih> Itkovian: Oh, I also want a wxHaddock.
11:11:53 <Lemmih> (Hope it's not too late to tip in suggestions :)
11:16:22 <irce> shapr: yes it was it.
11:17:53 <irce> Lemmih: yep, smelling my spagetti code 
11:22:42 <stepcut> so, how is yi doing these days ?
11:23:35 <shapr> yi!
11:23:40 <shapr> well
11:23:53 <shapr> I dunno
11:25:16 <CosmicRay> musasabi: I've stared at Marlow's example for a bit now.  I think it looks fine.  But its main problem to me appears to be that it is big change from how things work now.  It would probably be possible to wrap up a Handle in this, but it would various supporting code to even get to the point we are at now (with Strings)
11:25:46 <CosmicRay> shapr: is http://www.haskell.org/~simonmar/io/System.IO.html what you were thinking of too?
11:26:00 <CosmicRay> are there other proposals along these lines?
11:26:15 <CosmicRay> ("yet another" seems to imply that there are, but google hasn't found me any)
11:27:24 <musasabi> CosmicRay: yes, that looks quite nice. Now one needs a layer of decoding depending on the encoding to get Strings.
11:28:08 <CosmicRay> musasabi: right, no disputing that, but we don't even have basic character set codecs yet afaik
11:29:19 <CosmicRay> musasabi: otoh, it appears that the main advantage this has over what I'm proposing is performace?  (I still haven't wrapped my head around using arrays for streams since I thought they were always bounded... anyway...)
11:30:22 <musasabi> well I think that haskell Strings are quite broken.
11:30:28 <CosmicRay> oh?
11:30:45 * CosmicRay is quite fond of them
11:31:35 <shapr> me too
11:32:03 <musasabi> http://www.haskell.org//pipermail/haskell-cafe/2004-September/006857.html
11:32:13 <CosmicRay> the fact that one can build simple filter chains based upon lazy strings is one of the main appeals of haskell to me
11:32:19 <shapr> I'm fond of the interface at least, I like String == [Char]
11:32:35 <musasabi> I don't like haskell getting dirty for my real code.
11:32:41 <shapr> not that I'm in any way interested in the behind the scenes implemenetation if it just works.
11:33:06 <shapr> I'd much rather have fast strings that work the same way
11:33:07 <musasabi> But hopefully I can get something binary done ;)
11:33:17 <CosmicRay> agreed shapr
11:33:29 <CosmicRay> the cases where the current Haskell strings are too slow... well, I haven't run into them yet.
11:33:34 <shapr> I have
11:33:49 <CosmicRay> I'm sure people have, and are, but I have trouble believing they're incredibly widespread
11:33:50 <musasabi> shapr: but you cannot even serialize a haskell string properly (and fast).
11:34:06 <CosmicRay> shapr: pfft, hPutStr
11:34:06 <shapr> can't really serialize anything properly
11:34:07 <CosmicRay> err
11:34:14 <CosmicRay> s/shapr/musasabi/
11:34:15 <musasabi> CosmicRay: for all my "real" code which uses files I have found Strings inadequate.
11:34:24 <shapr> Read and Show aren't for serializing.
11:34:29 <musasabi> shapr: those are one of the worst cases.
11:34:42 <musasabi> shapr: but you cannot write a good serializer for Strings in haskell.
11:34:47 <CosmicRay> musasabi: I've found them helpful.  map, filter, interact make powerful tools.
11:34:47 <Philippa> shapr: indeed - I feel a lil' guilty about the times I've used them as such
11:35:00 <shapr> musasabi: why not?
11:35:03 <shapr> or is it in this email?
11:35:05 * shapr looks
11:35:14 <Philippa> well, not one of them because a quick hack was the appropriate solution :-)
11:35:15 <shapr> I want a real serializable class in the Haskell standard
11:35:19 <shapr> then I'll be much happier.
11:35:35 <CosmicRay> shapr: yes.  it should be doable given that we can do Dynamic
11:36:21 <musasabi> shapr: well serializing a string is fast and compact iff 1) it can be evaluated fast 2) it has finite length 3) it is ascii (or we have the 4*x overhead for all values or use a BER like solution)
11:36:41 <musasabi> shapr: now how do we test those.
11:37:30 <musasabi> shapr: Is this string a list of chars that should be serialized in a lazy fashion and support cycles? How can we answer that inside the language?
11:37:59 <musasabi> shapr: you could do hacks like "test if the string is shorter than N bytes and hope that it can be evaluated""
11:38:27 <CosmicRay> musasabi: or you can definite that only finite data structures may be serialized.
11:39:11 <musasabi> CosmicRay: but a cyclic structure is finite.
11:39:49 <musasabi> CosmicRay: and you have cases where evaluation the length of the string may block while using it as a list of chars is fine.
11:40:17 <musasabi> (grep for unsafeInterleaveIO)
11:42:36 <musasabi> CosmicRay: I use infinite strings quite frequently when coding in haskell.,,
11:43:02 <CosmicRay> musasabi: I'm aware of that
11:43:06 <shapr> What about ReadArrow and ShowArrow classes? something where you can stop space probs?
11:50:17 <musasabi> shapr: I don't see how they would cure the problems.
11:55:40 <irce> http://otto-1.hopto.org/t.hs , just trying to read in in a continuous loop. hows that done ?  
11:55:49 <shapr> musasabi: neither do I
11:55:54 <shapr> read and show just suck for serialization.
12:03:39 <Lemmih> shapr: Any luck with HaskellDB?
12:03:54 <shapr> I wish for boxcars but I get snake-eyes.
12:04:45 <Lemmih> Did MegaMonad change nick to shapr?
12:08:51 <Philippa> Lemmih: "I wanted double sixes but I got double ones", ie no luck
12:09:28 <CosmicRay> heh
12:09:34 <CosmicRay> MegaMonad: snake eyes?
12:09:40 <MegaMonad> CosmicRay: Might i add more objects to scheme.  As far as i've figured them out, i was on the eyes.
12:10:41 <Lemmih> Philippa: ahh.
12:11:03 <shapr> You mentioned luck, I mentioned dice.
12:19:33 <Darius> MegaMonad: luck
12:19:39 <MegaMonad> Darius: Well, better luck next year or two, maybe five lines, and then using x-symbol approach is to find an xypic deb.
12:25:13 <Philippa> MegaMonad: Flippi plugins
12:25:18 <MegaMonad> Philippa: Lor: that's actually the protocol plugins and application plugins.
12:29:56 <CosmicRay> MegaMonad: what do you think of strings?
12:30:02 <MegaMonad> CosmicRay: These are fun to try to think of the strings out of me i can't test for.
13:00:57 * boegel is back
13:03:12 <CosmicRay> hi boegel
13:03:22 * shapr grumbles
13:04:19 * Darius frobbles ion to have vim-y keybindings.
13:08:54 <wli> what's ion?
13:10:14 <kosmikus> a window manager
13:10:21 <Darius> http://iki.fi/tuomov/ion/
13:16:41 <zamez> what does "read" do? where in the docs can I go to find out in future? thanks
13:18:22 <CosmicRay> zamez: your first stop should be: http://www.haskell.org/ghc/docs/latest/html/libraries/base/Prelude.html#v%3Aread
13:18:32 <CosmicRay> zamez: it is used to parse data from a string into a haskell type
13:18:36 <CosmicRay> commonly used to read numbers
13:23:54 <zamez> ok, thanks
13:30:06 <wli> hmm
13:30:12 <wli> make[3]: *** No rule to make target `AbsSyn.o', needed by `happy.bin'.  Stop.
13:31:50 <wli> creating cache ./config.cache
13:31:50 <wli> checking host system type... Invalid configuration `x86_64-unknown-linux': machine `x86_64-unknown' not recognized
13:32:17 <wli> so much for current cvs
13:32:29 <CosmicRay> that sounds like your config.guess is too old
13:32:44 <wli> that's a fresh checkout
13:32:53 <bourbaki> moin
13:32:57 <CosmicRay> that doesn't mean that whoever committed it has a current version
13:33:02 <CosmicRay> try locating a current copy on your machine
13:33:07 <CosmicRay> and copy it over what is there in the dist
13:33:18 <wli> I already configured it with --target= elsewhere
13:33:46 <CosmicRay> well hey, it doesn't hurt to try
13:33:55 <CosmicRay> and parts of the build system are separate (such as gmp)
13:33:59 <musasabi> wli: that is an autotools problem not a ghc one.
13:34:17 <wli> it's definitely rts/etc. puking
13:34:20 <goron> I have a list that possible contains double elements. I want the doubles back as a list. This looks like some standard function. Any help?
13:34:24 <bourbaki> when a function is said to be non exhaustive the compiler tries to tell me that the end thingy is missing in my function right?
13:34:44 <boegel> hey bourbaki 
13:34:47 <musasabi> "host system type" sounds very much like autotools.
13:35:01 <musasabi> I fixed tons of those while using dragonfly
13:35:18 <wli> auto* are complete crap
13:35:21 <bourbaki> moin boegel
13:35:28 <CosmicRay> wli: I agree
13:35:29 <bourbaki> any progressionon you raytracer?
13:35:33 <musasabi> wli: true.
13:35:41 <musasabi> but there is no good replacement.
13:35:41 <CosmicRay> wli: the quick fix is to update your config.guess, iirc
13:36:24 <musasabi> the update is not very clean since gmp has its own config.gues iirc.
13:36:27 <wli> I haven't the foggiest idea of what to d with autoconf stuff
13:36:47 <wli> i.e. I would have to be turkey walked through config.guess changes
13:36:49 <musasabi> wli: grep the source for e.g. grep -ri openbsd 
13:37:01 <musasabi> wli: that should give you a list of the critical files.
13:37:07 <CosmicRay> wli: just make sure you have the auto* packages installed on your system
13:37:13 <CosmicRay> wli: then find where it put config.guess
13:37:17 <CosmicRay> wli: and copy it over the one in your package
13:37:19 <musasabi> wli: now add the x64_64-unknown-linux to them.
13:37:28 <wli> I'm probably out of the game
13:37:40 <wli> I'll wait for a cvs update
13:38:01 <CosmicRay> wli: on Debian, it's in /usr/share/misc/config.guess
13:38:05 <CosmicRay> here, let me send you a copy.
13:38:07 <wli> C or Haskell I could cope with
13:38:24 <bourbaki> whats wrong with this function?
13:38:26 <bourbaki> http://paste.phpfi.com/41931
13:38:47 <wli> ### DCC handshake from CosmicRay ignored becuase it had an null address
13:38:48 <CosmicRay> wli: you'll also want a new config.sub.
13:38:51 <CosmicRay> bah
13:38:59 <CosmicRay> one sec.
13:39:15 <boegel> bourbaki: I've stopped adding new stuff
13:39:32 <CosmicRay> wli: wget http://www.complete.org/~jgoerzen/t/config.guess
13:39:35 <CosmicRay> wli: wget http://www.complete.org/~jgoerzen/t/config.sub
13:39:53 <boegel> bourbaki: now i want to get my code as elegant as possible (since it's a thesis), and I'll write a simple parser so users can input their own scenes
13:41:23 <CosmicRay> wli: grab those two, move them over the files in the offending directory, and try it again
13:41:30 <wli> g    cmm/CmmLex.x
13:41:30 <wli> make[1]: g: Command not found
13:41:35 <wli> already done
13:41:39 <wli> that was the result
13:41:43 <CosmicRay> weird.
13:41:52 * CosmicRay looks
13:42:06 <wli> looks like fptools/ghc/compiler/
13:42:34 <CosmicRay> wli: check your config.log, see if anything looks out of whack
13:42:53 <bourbaki> why is my function non exhaustive?
13:43:10 <CosmicRay> that's about the most I can suggest.  I am not an autoconf expert, just have ported things a few times
13:43:18 <CosmicRay> bourbaki: complained about non-exhaustive pattern match?
13:43:21 * boegel wonders if any more people are getting addicted to the games on yetisports.org
13:43:28 <bourbaki> CosmicRay: yes
13:43:36 <CosmicRay> bourbaki: here's an example.
13:43:40 <CosmicRay> case mystring of
13:43:42 <CosmicRay>    "asdf" -> 1
13:43:45 <CosmicRay>    "foo" -> 2
13:43:50 <CosmicRay> there are strings that have no match there
13:43:58 <CosmicRay> I could add _ -> 0 to eliminate the warning
13:44:17 <CosmicRay> if you attempt to call that code with a string such as "blat", you'll get an exception because there is no pattern to match it
13:44:25 <bourbaki> CosmicRay: yes but i have a recursion over a list and have added [] to terminate
13:44:44 <bourbaki> http://paste.phpfi.com/41931
13:45:08 <wli> my general tactic has been (a) see autoconf (b) run screaming
13:45:22 <wli> well, s/autoconf/auto*/
13:45:29 <CosmicRay> bourbaki: is Node the only constructor of Node?
13:45:39 <CosmicRay> wli: I'm much the same
13:45:51 <CosmicRay> wli: though I usually have (c) drag self back to keyboard and work around it
13:46:14 <bourbaki> CosmicRay: newtype Node = Node (Int, Sting, GraphData)
13:46:22 <CosmicRay> oh.
13:46:26 <CosmicRay> here's the bug
13:46:27 <wli> here (c) is "drop issue on the floor in favor of the other 10000 panic mode issues hitting me at once"
13:46:29 <CosmicRay> helpNodeList [] = []
13:46:31 <CosmicRay> should be:
13:46:34 <CosmicRay> helpNodeList [] _ = []
13:46:38 <CosmicRay> you forgot to match the int.
13:46:47 <bourbaki> ah dang thanks :)
13:46:58 <CosmicRay> no prob :-)
13:47:05 <bourbaki> a bit embarrising
13:47:35 <CosmicRay> no problem.  I've embarassed myself in this channel numerous times.  some of them without even knowning it, I'm sure :-)
13:47:45 <bourbaki> heh
13:53:23 <wagle> anyone wanna help porting haskell to this computer?:: http://goldfish.ikaruga.co.uk/logic.html
13:53:48 <CosmicRay> heh
13:54:16 <CosmicRay> that brings a whole new meaning to low-level io :-)
14:01:01 <boegel> wagle: cool !
14:21:15 <atom-z> wagle, neat
14:22:31 <goron> case (moreThanOnce left) of
14:22:31 <goron> 	                             []    -> (False, [])
14:22:32 <goron> 				    (x:xs) -> (True, x)
14:22:43 <goron> What's wrong with this?
14:22:54 <goron> The indentation is correct.
14:23:11 <wagle> one uses spaces, one uses tabs?
14:23:32 <shrimpx> tabs are evil
14:23:33 <Darius> mm, crap.  Now I'm going to want vim-y keybindings for ion-like things in X-Chat, and Firefox, and everywhere! dhtn everywhere!
14:23:34 <goron> So my recently new editor needs a better configuration...
14:23:38 <goron> Thanks
14:23:44 <Darius> shrimpx: Speaks truth.
14:23:52 <Darius> Er, ,/:
14:23:57 <wagle> tabs live!
14:24:36 <wagle> !live era sbat (i mean)
14:24:51 <shrimpx> took you a minute
14:24:52 <goron> Well, lets try gvim...
14:24:57 <shrimpx> :)
14:25:20 * goron thinks about stupid windows...
14:26:03 <shrimpx> so in vim people always make the horrible mistake of setting tabstop to something other than 8
14:26:10 * wagle , being more sensible, thinks about smark windows instead
14:26:20 <wagle> vim is evillllllll
14:26:33 <goron> The program didn't print enough spaces... gvim did though :)
14:26:37 * wagle muzzles himself
14:26:40 <shrimpx> when they should set softtabstop and shiftwidth instead
14:26:48 <Darius> shrimpx: soft tab stop is 4 but I always convert to spaces.
14:27:03 <shrimpx> yeah expandtab 4 lief
14:27:56 <shrimpx> i used to use vim, it was pretty decent for a vi clone
14:29:07 <wagle> i could never find the little dog to help me
14:29:15 <goron> There should be Context for Linux :(
14:29:29 <wagle> goron: context?
14:29:34 <Darius> shrimpX: What do you use now?
14:29:39 <goron> wagle: Yes, that's an editor.
14:29:42 * Darius isn't sure he wants to ask.
14:29:53 <shrimpx> haha
14:29:58 <shrimpx> Darius: the E word
14:30:14 <goron> wagle: Context has no fuckups. Only some network limitations.
14:31:33 <wagle> 4kB line length
14:32:21 <wagle> shrimpx: is curry available for download?
14:33:22 <shrimpx> wagle: pakcs is
14:34:12 <shapr> g'day Pseudonym, ever read Martin Fowler's Analysis Patterns?
14:34:56 <shrimpx> wagle: you need sicstus tho
14:34:58 <wagle> shrimpx: ahh.. wli last experience with curry was in 1999, and we were claiming development was still active
14:35:07 <wagle> prolog?
14:35:10 <shrimpx> yea
14:35:20 <shrimpx> it's used as the backend
14:36:38 <Pseudonym> G'day, and you don't waste time, do you?
14:36:46 <Pseudonym> The answer is no.
14:36:51 <shapr> ah, too bad.
14:37:08 <shapr> Thought I could hit you up for some advice on how to implement some of these patterns, particularly in Planning.
14:37:18 <wagle> hahaha..  costs money
14:37:28 <Darius> shapr: is this online?
14:38:13 <wli> what's the status update on curry?
14:38:17 <shapr> The book? don't think so.
14:38:41 <shapr> Darius: http://www.martinfowler.com/books.html#ap
14:39:13 <shapr> seems to me the planning patterns by themselves if implemented with a relatively boring GUI could beat Mr Project and friends.
14:39:23 <shrimpx> wagle: i think munster is slowly taking over as the de facto curry implementation
14:39:25 <wli> walge: what's the status update on curry again?
14:39:42 <wli> or shrimpx or whoever can answer
14:39:58 <Pseudonym> Why do I feel compelled to attach "i think munster is slowly taking over as the de facto curry implementation" to the quotes file?
14:40:18 <Pseudonym> Mmmm... curry...
14:40:56 <shrimpx> wli: status update? the community is still active, the munster compiler is fast and active, and pakcs is still kickin :)
14:41:24 <wli> shrimpx: okay, sounds good
14:41:38 <wagle> wli: shrimpx was the curry guy i was referring you to the other day
14:41:48 <wli> oic
14:42:14 <shrimpx> haha i'm a curry guy?!
14:42:23 <wagle> shrimpx: more than me
14:43:02 <wagle> i thought you were actually modifying curry
14:43:29 <shrimpx> sadly i know much more about how to implement it than about how to program in it 
14:44:38 <shrimpx> wagle: not really. we don't mess with the curry standard, anyway
14:45:49 <shrimpx> we're just looking at coming up with an implementation that doesn't suck ; which is turning out to be quite the task
14:46:05 <zamez> any alex experts around? I'm getting a token later in the rules file where an earlier one should match
14:47:53 <zamez> never mind, got it working
14:49:10 * boegel _really_ needs to go to bed right now
14:49:12 <boegel> sleep tight everyone
14:49:23 <wagle> no wait!        8)
14:49:40 <boegel> wagle: you f*cking tease
14:50:00 <boegel> :p
14:50:00 <musasabi> night
14:50:01 <boegel> bye ;)
14:57:20 <zamez> whoa, why is my binary 6MB?
14:57:31 <zamez> it's just a tokeniser
14:58:20 <goron> See static linking. There are some striptools. Search the mailinglist. 
14:58:45 <zamez> ok, thanks
14:58:56 <goron> zamez: You are new?
14:59:10 <zamez> yes
14:59:16 <goron> Welcome :)
14:59:36 <zamez> I did some Haskell a few years ago
14:59:41 <zamez> but not since then
15:04:18 <goron> he np_hard
16:26:16 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - ICFP contest 2004","Due to shortages, there will be no lambdas this Xmas","We put the Funk in Funktion","The people here like donuts"]'
16:26:16 --- topic: set by Pseudonym on [Tue Dec 14 15:09:24 2004]
16:26:16 --- names: list (clog ski skylan jdrake Darius LrdMtrod np_hard arauko zamez Pseudonym wilx kristnjov earthy cptchao1 atom-z Nioate ows mattam Jan_w tintin Lemmih_ shapr stepcut opet MegaMonad psi arjanb shawn flaw sethk svend Cale Nomius Riastradh ibid reffie Joachim_ Itkovian retardo babybo0m xerox Lemmih Godeke lambdabot Igloo KrispyKringle tic johs Taaus lament cmeme wagle musasabi Maddas chkno aleator det ozone r3tex coven andersca resiak kolmodin_)
16:26:16 --- names: list (vincenz polli norpan aj ned_ Lunar^ vegai borism CLxyz Defty shammah rossberg blackdog irce Matt-W keverets emu gdsx kpk isomer wli Amadan Lor Spark tumm tuomov Perite desrt thebug kosmikus WobL esap dons samason mflux_ dryan djw shrimpx scode asmodai flori)
16:26:27 <Pseudonym> What people are instead asking is "What programming language (singular) will get me a well-paying job?"
16:26:31 <wagle> "maintainability"
16:26:35 <KrispyKringle> Pseudonym: that's a good point. And Java pushed a lot of ideas that had a lot of resistence, like garbage collection and type safety. 
16:26:40 <Pseudonym> Yes.
16:26:49 <Pseudonym> Which was why I was initially enthusiastic.
16:26:58 <KrispyKringle> wagle: veresus what? Python, Perl, Java, all could allow you to write an application like that in fewer lines and with more legibility. 
16:27:06 <KrispyKringle> C is NOT more maintainable than any of those, IMHO. 
16:27:20 <KrispyKringle> (and yeah, I know people bitch about Perl. But thats just BS.)
16:27:34 <Pseudonym> You can write unmaintainable code in any language.
16:27:36 <wagle> i'm saying that your code needs to be maintained by other people than the original programmer
16:27:39 <Pseudonym> Perl is no exception.
16:27:55 <KrispyKringle> wagle: If a person writes something illegible in English, do we blame English or do we blame the author?
16:28:09 <Pseudonym> Actually, there is almost exactly no task that I'd use C for these days.
16:28:14 <KrispyKringle> A language that is harder to write ambiguously in is also harder to be expressive in, most of the time. 
16:28:16 <Pseudonym> I'd always choose C++ instead.
16:28:39 <Pseudonym> Because C has almost exactly zero advantages over C++.
16:28:40 <KrispyKringle> Pseudonym: even for, say, operating system or driver work?
16:28:50 <KrispyKringle> marginally faster, at least. 
16:28:54 <KrispyKringle> or the claim is that. 
16:28:58 <Pseudonym> KrispyKringle: If I was writing my own OS, I'd pick C++.
16:29:04 <KrispyKringle> hmm. 
16:29:05 <Pseudonym> And I'd use it as a better C for most of the job.
16:29:14 <KrispyKringle> you're a pretty big C++ fan, I gather.
16:29:14 <wagle> C is closer to "what you see is what you get" for machine code
16:29:15 <Pseudonym> i.e. I wouldn't do any "modern C++ design" stuff.
16:29:31 * Pseudonym points to sys_pipe in the Linux source code
16:29:31 <Darius> Heck, just trivial things like overloading would be nice for C.
16:29:33 <KrispyKringle> wagle: that's fine, but few tasks require that you write in machine code. if I wnated machine code, I'd write in machine code. 
16:29:59 <wagle> umm..  if you look above, i also claimed C was good for ..  well..  nothing
16:30:04 <KrispyKringle> I don't understand the whole fetishizing of being able to read or write assembly. I mean, I can do it, but it's painful as fuck. 
16:30:10 <KrispyKringle> wagle: good point :P
16:30:38 <wagle> sometimes performance matters
16:30:41 <KrispyKringle> wagle: sorry. I jump when peoplee talk about how great it is to be able to do assembly. it's great to be *able* to do it, but not to actually do it most of the time.
16:30:58 <Pseudonym> Oh, it's do_pipe that I'm thinking of.
16:31:02 <wagle> i want a bit twidling hyper-performing haskell
16:31:06 <KrispyKringle>  yeah, but you don't get performance most of the time by writing the whole damn thing in assembly, anyway. You optimize the parts that absolutely need it and leave the rest alone. 
16:31:11 <Pseudonym> There are six (count them, six) goto targets.
16:31:23 <Pseudonym> All of which are because C doesn't have destructors.
16:31:42 <KrispyKringle> wagle: ocaml claims to compile to be competitive with C. 
16:32:02 <wagle> yeah
16:32:22 <Pseudonym> The only circumstances under which I'd choose C over C++ are:
16:32:34 <Pseudonym> 1) Hacking an existing project.
16:32:53 <wagle> i choose java over c++
16:32:58 <Pseudonym> 2) Very, very weird constraints, like 8-bit CPUs or boot loaders.
16:33:19 <Pseudonym> 3) Library that I want C programmers to use.
16:33:22 <Pseudonym> That's it.
16:33:24 <wagle> so if i dont hafta program in C (linux kernel, gcc source), I'm not going to choose c++
16:33:31 <Pseudonym> wagle: Fairy nuff.
16:33:38 <Pseudonym> I'm not saying people should choose C++.
16:33:44 <Pseudonym> I'm saying people should not use C.
16:33:50 <arauko> C++ is pathetic.
16:33:52 <wagle> of course, llvm (gcc addon) is written in C++... soo.. umm
16:34:16 <arauko> i would even choose Java over C++.
16:34:26 <arauko> And that is a madness for me.
16:34:30 <wagle> haskell is written in C..  (sorta, kinda)
16:34:36 <Pseudonym> arauko: I used to think C++ was crap.  That was before I actually wrote something nontrivial in it.
16:34:51 * Pseudonym used to make all of the anti-C++ arguments
16:35:09 <wagle> people have convinved me that there IS a subset of C++ that is nice and clear and etc..
16:35:15 <arauko> Sorry, i really didn't mean to say the thing about Java. I would definetly use C++. 
16:35:15 <Igloo> Haskell is written in latex or somesuch. You probably mean GHC...
16:35:21 <arauko> Java is the worst crap out there.
16:35:48 <wagle> but i think C needs to die..  and C++ is too much like C
16:35:58 <jdrake> heh    http://www.cthulhulives.org/Solstice/index.html  
16:36:02 <Pseudonym> wagle: I agree that that is C++'s greatest weakness.
16:36:08 <jdrake> C has its purposes
16:36:16 <Pseudonym> Alternatively, it's also the thing that encouraged C++'s adoption more than anything.
16:36:18 <tuomov> I'd always choose C over C++
16:36:26 <arauko> wagle, but i would prefer Java to die first than C.
16:36:33 <tuomov> if C isn't enough, I'd choose some proper high-level language rather
16:36:35 <KrispyKringle> i think all the anti-java arguments are a bit weird, though. what's yours, arauko, if i may ask?
16:36:51 <tuomov> C++ just adds too much complexity
16:36:54 <arauko> KrispyKringle, it is free software.
16:36:57 <tuomov> and horrible stdlib
16:36:58 <arauko> it isnt(
16:37:11 <KrispyKringle> arauko: so?
16:37:23 <arauko> A programming language can't belong to a committe or a bunch of managers.
16:37:24 <KrispyKringle> arauko: how does that affect me, users of something i write in it, or the thing i write in it?
16:37:27 <arauko> And thats what Java is.
16:37:41 <Pseudonym> My main anti-Java argument is that it doesn't support enough styles of programming.
16:37:44 <tuomov> java is the new cobol
16:37:46 <arauko> It affects me. I can't work with Java properly in free software platforms.
16:37:56 <KrispyKringle> arauko: there are multiple implementations of java available under FSF-compatible licenses. How does the semantics of what java is or isn't affect me?
16:37:56 <wagle> you guys including java 1.5 in your accessment of java?
16:37:57 <Pseudonym> tuomov: That's true, but we did need a new COBOL.
16:38:04 <Pseudonym> The old one was even more crap.
16:38:16 <arauko> KrispyKringle, Yes, there is very limited free implementations you meant.
16:38:29 <arauko> Most of the standard libraries for Java are non-free.
16:38:33 <tuomov> java is bloated, slow, and all the jvm:s I have tried are crap
16:38:44 <arauko> Indeed. It is also bloated.
16:38:59 <Pseudonym> I think that any modern general-purpose language needs to support multiple paradigms, which Java does not do.
16:39:05 <Pseudonym> Haskell does, C++ does, O'Caml does...
16:39:13 <Pseudonym> Perl does...
16:39:16 <Pseudonym> Python sort of does...
16:39:17 <wagle> there is a movement to chop out a lot of the bloat (spring, hibernate, etc)..  i dunno how successful that is
16:39:28 <tuomov> no matter what they claim that jit could be faster than fixed native could, I have only bad experiences from running java software
16:39:28 <wagle> ... with spring, hibernate, etc
16:39:31 <arauko> Pseudonym, i agree, I have always seen Java like a procedural language that forces you to program in OOP.
16:39:38 <Pseudonym> Right.
16:39:47 <wagle> arauko: how so?
16:39:59 <arauko> So you just will end up with a disaster.
16:40:02 <Pseudonym> Now this isn't necessarily a mark against it if you don't care about it being a general-purpose language.
16:40:16 <KrispyKringle> arauko:i thought the ibm jvm was OSI-approved. 
16:40:19 <Pseudonym> If all you want is a layer of glue on top of a bunch of libraries, then Java might well be fine.
16:40:31 <wagle> i wrote a scheme interpreter (as an exercise) in java that had one (1) if statement
16:40:38 <KrispyKringle> http://www-124.ibm.com/developerworks/oss/jikes/
16:40:41 <Pseudonym> Also, as I noted previously, in a multi-language environment, Java may well be a good tool to have.
16:41:18 <arauko> wagle, 80% of the Java programmers i know they program like if they did on C. Besides with a suddenly weird usage of some OOP technique.
16:41:25 <Pseudonym> Say, write your GUI in Java and your "real code" in O'Caml or something.
16:41:41 <KrispyKringle> So if Java's so bad, what widely-supported, widely-used OO/typesafe/garbage-collected languages were available?
16:41:41 <wagle> using virtual method dispatch as subtyping wasnt especially "procedural" in the usual sense.. (of course, the spaghetti of method calls from tiny methods was disturbing..)
16:42:02 <tuomov> multiple returns values in java are horrible
16:42:13 <wagle> you can program poorly in any language
16:42:15 <KrispyKringle> Criticism of Javas flaws is fine, but it misses that Java had many improvements on the status quo, as well. 
16:42:26 <arauko> KrispyKringle, Yes, but not all of the libraries are free software, and probably they won't ever be free software so that is aproblem when programming for free software platforms.
16:42:44 <KrispyKringle> arauko: which? The standard J2SE API?
16:42:45 <tuomov> I'd rather program in C than Java
16:42:47 <Pseudonym> KrispyKringle: Right.  I'm actually more disappointed by what Java has become, rather than what Java originally was.
16:43:04 <tuomov> but then, I'd rather program such things that C is better suited for than such things that Java is usually used for
16:43:06 <arauko> KrispyKringle, Yes, the standard libraries.
16:43:11 <wagle> you guys including java 1.5 in your accessment of java?
16:43:14 <KrispyKringle> Pseudonym: that's perfectly reasonable. I think, though, you could take heart that the state of the art is always progressing. When Java was the New Thing, it was a step in the right direction. 
16:43:32 <Pseudonym> Yes, I'd agree with that.
16:43:46 <Pseudonym> And I'm am impressed that it's spawned a huge interest in mobile code, JIT compilers etc.
16:43:48 <david> have you looked at Scala?
16:43:54 <KrispyKringle> And all the talk about how GC slowed things down, and typesafety is bad, pretty much got thrown out the window, which is also a good thing. 
16:43:58 <Pseudonym> If nothing else, it's worth all the spin-offs.
16:44:32 <KrispyKringle> arauko: so your concern is that your application won't run because Sun will suddenly charge for the API?
16:44:51 <KrispyKringle> arauko: if there are JVMs that are under open source licenses, what's the concern?
16:45:11 <tuomov> stdlibs are not freely available
17:05:57 <Pseudonym> Mmm... coffee...
17:06:49 <shapr> You know what they say in the UK, no rest for the wicket.
17:07:23 <Pseudonym> Especially if Australia is bowling.
17:07:49 <Pseudonym> Actually, a friend of mine came up with the best one so far.
17:08:02 <Pseudonym> We were dining out, and the waiter put a water jug on our table.
17:08:07 <shapr> yes?
17:08:08 <Pseudonym> And my wife referred to it as "a pitcher".
17:08:23 <Pseudonym> And this friend of mine said, "in Australia, we refer to that as a bowler".
17:09:18 <shapr> I don't get it...
17:09:19 <Pseudonym> Well, it was funny at the time.
17:09:40 <Pseudonym> First off, we don't use the word "pitcher".
17:09:46 <shapr> I suspect it's because I don't really understand cricket.
17:09:47 <Pseudonym> It's a "jug".
17:09:57 <Pseudonym> Secondly, a bowler is the cricket equivalent of a baseball pitcher.
17:10:02 <shapr> it looks suspiciously like that other game with sticks and hoops and stuff.
17:10:05 <shapr> aha
17:10:12 <Pseudonym> More or less.
17:10:13 <shapr> now I get it
17:10:22 <Pseudonym> Only now it's not funny because it had to be explained.
17:10:26 <shapr> :-)
17:10:39 <Pseudonym> BTW, can I let you in on a secret?
17:10:41 <shapr> hey, you want some zero day Haskell warez?
17:10:43 <shapr> oh sure
17:10:43 <Pseudonym> Nobody understands cricket.
17:10:46 <shapr> haha!
17:11:01 <wagle> is it like blernball?
17:11:15 <Pseudonym> There are precisely zero people in existence, for example, who understand the LBW rule.
17:11:47 <ski> LBW rule ?
17:11:59 <Pseudonym> Uhm... it'd take too long to explain.
17:12:29 <Pseudonym> The theory behind it is that you're supposed to hit the ball with your bat, not your leg.
17:12:31 <wagle> 51,800 googles
17:12:43 <shapr> ah cool, this is all explicitly GPL - http://www.cs.chalmers.se/~peteg/src.tar.gz
17:12:54 <Pseudonym> So if it hits your leg, and had your leg not been in the way it would have hit the wicket, then you are out.
17:13:03 <Pseudonym> That's the principle.
17:13:12 <Pseudonym> LBW == leg before wicket
17:13:36 <Pseudonym> This raises the obvious question of how the hell you're supposed to know if the ball would have hit the wicket or not.
17:14:12 <Pseudonym> And therein lies the fun.
17:14:38 <wagle> so also an element of calvinball?
17:14:58 <Pseudonym> http://www.lords.org/cricket/lw_0000000062.asp
17:15:05 <Pseudonym> That's the actual rule.  See if you can understand it.
17:17:21 <Darius> shapr: So what is 'this'?
17:17:36 <wagle> hmm.. lbw and calvinball gets some hits
17:17:37 <jadrian> any latex package recommendation for representing operations on trees? 
17:17:40 * jadrian is using qtree
17:18:07 <wagle> s/hits/googlehits/
17:19:55 <arauko> KrispyKringle> arauko: if there are JVMs that are under open source licenses, what's the concern?
17:19:55 <arauko> <tuomov> stdlibs are not freely available
17:20:00 <arauko> That is my concern.
17:20:55 <KrispyKringle> arauko: isn't the api library contained int he sdk/vm?
17:25:44 <arauko> KrispyKringle, But what is your point?
17:27:47 <wagle> its occuring to me that the problem is that java is trying to use complex concepts that people dont understand, hence they either ignore (people just program like they do in C), or do badly
17:28:17 <wagle> they'd be worse trying to do haskell, or whatever
17:28:48 <arauko> wagle, i think that also depends on the language 
17:28:56 <arauko> Java is a monster.
17:29:21 <arauko> A hybrid between procedural and object oriented. Not even a multiparadigm language.
17:29:47 <arauko> You program procedural but forced to do it within object orientation. 
17:29:48 <wagle> what are you suggesting in its stead?
17:30:25 <KrispyKringle> arauko: i thought that there were jvms available under open source licenses, and i thought that the jvm contains the api, therefore the api is available under open source licenses. 
17:31:55 <shapr> Darius: I think it's the beginnings of the successor to Chalmers/Xilinx Lava. It's definitely based on Esterel and Lucid Synchrone. - http://gungnir.csbnet.se/~peteg/blog/2004-12-14.html
17:31:57 <arauko> KrispyKringle, of course there are jvms under open source licenses, but its libraries aren't free software, not all of them.
17:32:06 <KrispyKringle> arauko: that's what i was wondering. 
17:32:07 <wagle> (i'm not sure how to distinguish between "hybrid" and "multiparadigm"
17:32:50 <shapr> ddarius: did you get my response?
17:33:02 <ddarius> no
17:34:10 <arauko> wagle, a quick search on google http://www.jvoegele.com/software/langcomp.html
17:34:17 <arauko> Probably it will give you some idea.
17:34:36 <shapr> I think "this" is the beginnings of a successor to Chalmers/Xilinx Lava. Pete's design is based on Esterel and Lucid Synchrone. - http://gungnir.csbnet.se/~peteg/blog/2004-12-14.html
17:34:52 <arauko> KrispyKringle, well, that is the problem, not all of the stdlibs are free software, and usually the newest libraries aren't made free software once.
17:34:57 <shapr> I didn't know about dataflow languages until recently, but they don't really seem like a different paradigm to me.
17:35:03 <arauko> I think a language can't be limited in that way,
17:35:08 <shapr> To me they just look like graph reduction.
17:35:14 <shapr> Am I missing something there?
17:35:39 <wagle> again, i bring up java 1.5
17:35:45 <np_hard> what is Lava?
17:36:48 <shapr> Lava was/is a circuit design language embedded in Haskell.
17:37:12 <wagle> i dont see why message passing isnt orthogonal to oo
17:37:21 <shapr> Xilinx had their own dialect of Lava that compiled to their FPGAs via their own toolchain.
17:37:28 <ddarius> shapr: Ah (regarding the link).
17:37:56 <ddarius> wagle: It is.
17:37:58 <shapr> I'd very much like write Haskell code to 'design my own coprocessor.' I could see benefits from Linux support for FPGAs as well.
17:38:11 <wagle> proof by assertion..  wooo
17:38:15 <wagle> 8)
17:39:10 <Darius> Well's it's orthogonal as in you can have message passing without OO (unless that's how you define OO), the other way is more arguable.
17:39:31 <wagle> my understanding is that in java 1.5, primitive types automatically convert to object equivalents
17:41:25 <wagle> i just see procedural-call as a particularly "tight" message passing interface, synchronous, etc
17:42:10 <arauko> A programming language gotta be free unless it is only for internal usage of a company or institution.
17:42:11 <np_hard> is it a good thing that I wince every time I modify a variable already in scope in perl, python, java, etc. ?
17:42:18 <wagle> hmm.. of course, you gotta jump hoops to get async
17:42:30 <arauko> But not like a widely used general purpose programming language-
17:42:49 <wagle> np_hard: it is an accumulator?
17:43:55 * wagle decides to clone a new np_hard each time he wants to teach him something new
17:44:19 <np_hard> yes, it's always with good reason
17:44:23 <shapr> I'm trying to figure out where DSL ends and GPL starts.
17:44:31 <np_hard> but I still go "ack, mutable state not modeled as a function"
17:44:33 <wagle> cant modify an existing np_hard after all..  that'd be gross.  8)
17:44:34 <shapr> I'm wondering how large the 'pattern' has to be.
17:44:57 <shapr> where's the real difference between a pattern the size of monads and a pattern the size of lambda calculus?
17:45:18 <shapr> Darius: what do you think?
17:45:41 <wagle> whats a domain?
17:45:47 <Darius> That lambda calculus isn't really a pattern in the sense of Design Patterns.
17:46:04 <shapr> what is it then?
17:46:47 <Darius> A formal language.  The real issue is "what is a pattern".
17:47:01 <wagle> everything can be split into dicotomies
17:47:47 <wagle> each language has a set of patterns..  [?]
17:48:11 <wagle> which specify how to use that language to solve problems..  [?]
17:48:14 <shapr> wagle: with your minor typo that means plants ;-)
17:48:59 <wagle> 1 : a division or the process of dividing into two especially mutually exclusive or contradictory groups or entities
17:49:25 <wagle> http://www.m-w.com/cgi-bin/dictionary?book=Dictionary&va=dichotomy&x=15&y=15
17:49:29 <shapr> dichotomy vs dicot?
17:49:47 <wagle> dicotolidon? [sp]
17:50:01 <shapr> hej bojohan 
17:50:07 <bojohan> :)
17:50:12 <shapr> iirc, dicots and monocots are the two major flavors of plants.
17:51:23 * shapr is just tired and distractable.
17:51:30 <wagle> dicotyledon
17:51:35 <Pseudonym> @wn dicot
17:51:37 <lambdabot> *** "dicot" wn "WordNet (r) 2.0"
17:51:37 <lambdabot> dicot
17:51:37 <lambdabot>      n : flowering plant with two cotyledons; the stem grows by
17:51:37 <lambdabot>          deposit on its outside [syn: {dicotyledon}, {magnoliopsid},
17:51:37 <lambdabot>           {exogen}]
17:51:41 <Darius> If I can finagle a way to get Windows programs to run in X or at least roughly controlled by X I can have Ion take over my ui.
17:51:43 <wagle> monocotyledon
17:52:24 <shapr> So, if everything can be split into dicotomies...
17:52:39 <KrispyKringle> what's ion, Darius >
17:52:40 <KrispyKringle> ?
17:52:51 <bojohan> "en- och tv氓hj盲rtbladiga", i think
17:53:23 <shapr> det l氓ter r盲tt
17:53:40 <wagle> @wn dichotomy
17:53:41 <lambdabot> *** "dichotomy" wn "WordNet (r) 2.0"
17:53:41 <lambdabot> dichotomy
17:53:41 <lambdabot>      n : being twofold; a classification into two opposed parts or
17:53:41 <lambdabot>          subclasses; "the dichotomy between eastern and western
17:53:42 <lambdabot>          culture" [syn: {duality}]
17:54:04 <ski> @wn ion
17:54:06 <lambdabot> *** "ion" wn "WordNet (r) 2.0"
17:54:06 <lambdabot> ion
17:54:06 <lambdabot>      n : a particle that is electrically charged (positive or
17:54:06 <lambdabot>          negative); an atom or molecule or group that has lost or
17:54:06 <lambdabot>          gained one or more electrons
17:54:38 <Darius> http://iki.fi/tuomov/ion/
17:54:49 * Darius has been asked that so many times today.
17:54:57 <wagle> http://www.visoracle.com/sat/cc-exp2/ion-window.html [?]
17:55:49 <wagle> non-overlapping windows is a bug, not a feature. </pulpit>
17:57:35 * wagle is sick of having other peoples braindamage inflicted on him..  </whinge type=last>
18:01:23 <Darius> wagle: Floating windows are supported
18:02:08 <Darius> And who's inflicting their braindamage upon you.  People in favor of non-overlapping UI's have the much better case.
18:02:24 <wagle> i'm more grumping at gnome inflicting itself on me more and more than anything else
18:02:46 <wagle> their braindamage is not my brain damage
18:02:51 <wli> Igloo: boo
18:03:13 <wli> igloo: ping me wrt. the sparc64 bogon esp. if you did the sparc64 port
18:03:14 <wagle> i'm perfecting happy with overlapping windows
18:03:41 <wagle> if they cant cope, thats their problem
18:04:31 <np_hard> not a problem with a Mac
18:04:35 <np_hard> hit F9
18:04:37 <np_hard> zoooom
18:04:40 <wagle> it used to work perfectly in twm..  then people keep making it harder, or impossible in new window managaers
18:05:03 <wagle> i'm talking gnome
18:05:11 <wagle> oh well, i gotta go now.. gnite
18:05:30 <np_hard> i'm just sayin, get what ya pay for in some cases :)
18:06:48 <wagle>         A man goes to a tailor to try on a new custom-made suit.  The
18:06:48 <wagle> first thing he notices is that the arms are too long.
18:06:48 <wagle>         "No problem," says the tailor.  "Just bend them at the elbow
18:06:48 <wagle> and hold them out in front of you.  See, now it's fine."
18:06:48 <wagle>         "But the collar is up around my ears!"
18:06:51 <wagle>         "It's nothing.  Just hunch your back up a little ... no, a
18:06:53 <wagle> little more ... that's it."
18:06:56 <wagle>         "But I'm stepping on my cuffs!" the man cries in desperation.
18:06:58 <wagle>         "Nu, bend you knees a little to take up the slack.  There you
18:07:00 <wagle> go.  Look in the mirror -- the suit fits perfectly."
18:07:03 <wagle>         So, twisted like a pretzel, the man lurches out onto the
18:07:06 <wagle> street.  Reba and Florence see him go by.
18:07:08 <wagle>         "Oh, look," says Reba, "that poor man!"
18:07:11 <wagle>         "Yes," says Florence, "but what a beautiful suit."
18:07:13 <wagle>                 -- Arthur Naiman, "Every Goy's Guide to Common Jewish Expressions"
18:07:17 <wagle> hmm.. too long.. sorry
18:07:26 * wagle really leaves now
18:15:09 <wli> actually if whoever did the sparc64 ghc port for debian would please stand up...
18:18:16 <Darius> Anyways, 'night
19:40:43 <CosmicRay> MegaMonad: it's late for you to be out.
19:40:48 <MegaMonad> CosmicRay: As i said is that i wrote that atualt <- return novot.
19:41:01 <CosmicRay> MegaMonad: shuoldn't you be resting in persistent storage somewhere?
19:41:06 <MegaMonad> CosmicRay: I kind of collector (set, list, or other) through the data storage is a persistent programming language.
19:45:14 <Riastradh> MegaMonad, frob grovel full lexical mumble.
19:45:20 <MegaMonad> Riastradh: I mumble to those people on here knows of a system would, however, be best to post to #haskell or to 2 and tss is element of the lexical language for which t(x). Then the assumption that academics are all over it.  Remember you said you were busy or not.
19:45:42 <Riastradh> MegaMonad: grovel?
19:45:47 <MegaMonad> Riastradh: Frob grovel full lexical mumble.
19:45:51 <Riastradh> Hah.
19:46:30 <dons> that's a good one
19:47:42 <Riastradh> MegaMonad: sesquipedalian!
19:47:49 <MegaMonad> Riastradh: Eschew obfuscation. Don't indulge in sesquipedalian lexicological constructions.
19:49:53 <Riastradh> MegaMonad, frobozz?
19:49:58 <MegaMonad> Riastradh: @Eval s k frobozz 3.
19:50:07 <Riastradh> MegaMonad, frobbotz?
19:50:12 <MegaMonad> Riastradh: He needs to come out from xs -- in the case of lists) into it's head and delete you system before these two points with their base protecting it would look something like :([^\n]*)\t -> tab_complete $1; resume ":$1"     :([^\n]*)\n -> do_command $1.
19:52:20 <Pseudonym> MegaMonad, Riastradh?
19:52:26 <MegaMonad> Pseudonym: Riastradh digs out dict.org.
19:52:40 <Riastradh> Never!  I refuse to use anything but the OED & Fowler!
19:52:46 <Pseudonym> MegaMonad, Pseudonym?
19:52:49 <Riastradh> (well, OK, except quick references)
19:52:52 <MegaMonad> Pseudonym: Pseudonym, why not?
19:53:02 <Pseudonym> MegaMonad: Why not indeed!
19:53:03 <Riastradh> (except for use with quick references, that is)
19:53:07 <MegaMonad> Pseudonym: Dtb: you also could be, because i don't know what it looks like i could use something like a 2d array of the large landmasses of the word !) programming language.
19:53:41 <Riastradh> MegaMonad, does the word 'programming language' comprise large landmasses?
19:53:46 <MegaMonad> Riastradh: Tell him to join all channels c such that "forall o. (Forall c'. Join(you, c') and join(o, c')) => join(o, c')) => join(o, c)". I would argue is that prop_revrev simulates an all-haskell standalone xml-rpc from haskell to create an instance of bits? I have read enough of the large landmasses of the language to be programming it.
19:54:24 <CosmicRay> heh
19:56:19 <Pseudonym> MegaMonad, MegaMonad?
19:56:25 <MegaMonad> Pseudonym: Circuit design, speedy compiler implementation, programming language and for the quotes i posed to -cafe? Megamonad was on a parameter.
19:57:35 <monochrom> Wow MegaMonad knows first-order logic!
19:57:51 <Riastradh> MegaMonad, wow, you know first-order logic!
19:57:57 <MegaMonad> Riastradh: There is no logic in the order that the first to marshal :: a -> callvalue, and unmarshal :: callvalue -> a.
19:58:12 <CosmicRay> heh
19:58:24 <CosmicRay> MegaMonad: what are you getting me for christmas?
19:58:26 <Riastradh> MegaMonad, tell me about your mother.
19:58:29 <MegaMonad> CosmicRay: I think you would want me to the individual indices are supposed to spell merry christmas in lille.
19:58:35 <MegaMonad> Riastradh: My mother is sinhalese :-) (it's the majority of my paying work, aren't you?
19:59:07 <Riastradh> MegaMonad, sometimes a cigar is just a cigar.
19:59:12 <MegaMonad> Riastradh: Nel: but sometimes a cigar is just a cigar.
19:59:34 <Riastradh> MegaMonad, but sometimes a cigar is a massive incendiary device.
19:59:39 <MegaMonad> Riastradh: However, that's sometimes a cigar is a daoist reinterpretation of the massive traffic on the machines i edit on the other kind of device is that?
19:59:43 <CosmicRay> haha
20:11:38 <Pseudonym> MegaMonad, sometimes a cigar is a carcinogen.
20:11:44 <MegaMonad> Pseudonym: Can i ask what this is in c but sometimes a cigar is a carcinogen.
20:15:59 <Riastradh> MegaMonad, the last good thing written in C was Schubert's ninth symphony.
20:16:05 <MegaMonad> Riastradh: Musasabi, you finnish people know how to run the c people do in haskell or c on the ninth.
20:50:35 <jesse98>  hmm, is there a builtin function that returns true if a string contains a substring?
20:51:01 <wli> is there some way to convince ghc to build in parallel?
20:51:07 <blackdog> make -j?
20:51:43 <wli> it seems to get weird failures and I have to retry a bunch of stuff
20:52:11 <wli> which doesn't work well for things building in scripts that clean out the whole tree before restarting
20:52:46 <wli> something to do with AbSyn is the first one
20:52:52 <wli> there are several others it seems
20:53:00 <desrt> wli; only libraries/ is parallelisable
20:53:10 <desrt> ghc/ is not safe to use -j with
20:53:20 <wli> that's a major major PITA
20:53:34 <desrt> i run unregisterised ghc on a dual processor G5.  you're telling me.
20:53:35 <wli> because I've got plenty of cpus to throw at it
20:53:52 <wli> 6 cpus here
20:53:56 <desrt> k.  you win :)
20:54:21 <desrt> what kind of box is that?
20:54:23 <wli> That's just boxen I personally own. I've got bigger at werk.
20:54:28 <wli> UltraEnterprise 3000
20:54:32 <desrt> typical
20:54:40 <wli> typical what?
20:54:53 <desrt> typical for a 6cpu box to be from sun
20:55:04 <blackdog> What screws parallel building up? It's a tad ironic that a language built on referential transparency has order-dependent evaluation. :)
20:55:30 <wli> make(1) sucking
20:55:36 <desrt> blackdog; building the rts depends on the stage1 compiler being built
20:55:53 <wli> that should be trivial to add dependencies for
20:56:23 <desrt> i know two things to be true here
20:56:24 <dons> I think getting all the dependencies right so that ghc -M works for make -j is nearly done, or close to
20:56:32 <dons> at least in the libraries
20:56:32 <wli> just build up a list of rts targets in a var, $(RTS_TARGETS): $(STAGE1_COMPILER)
20:56:34 <desrt> (a) it hasn't been done yet
20:56:41 <desrt> (b) there are two people named simon who are very smart
20:56:54 <desrt> from (a) and (b) i conclude that it's probably very non-trivial :)
20:57:09 <wli> it's makefile crap
20:57:19 <wli> it shouldn't be *that* hard
20:57:33 <desrt> wli; it's only makefile crap if you have a realiable way of dynamically generating dependancy information
20:57:33 <wli> moving on
20:57:37 <dons> I have seen recent commits on this issue
20:57:58 <desrt> oo.  exciting.
20:58:06 <wli> I'll just take your word for it.
20:58:09 * desrt wants to see 6.4 already
20:58:23 <desrt> i have this secret hatred for 6.3 that i can't quite explain
20:58:29 <dons> desrt: yes. that's exactly it. making sure that certain weird imports are present, (like explicit Prelude imports) just so ghc -M generates nice stuff for make -j
20:59:35 <wli> is there some non-default cvs branch I have to fetch or whatever to actually get any of the things that e.g. fix x86-64 builds or parallel stuff?
20:59:54 <dons> what's wrong with x86-64?
21:00:07 <desrt> no ghci, probably
21:00:26 <wli> for i in */*hi-boot*; do \
21:00:26 <wli>     ln -s -f ../../$i stage1/$i || true ; \
21:00:26 <wli> done
21:00:26 <wli> g    cmm/CmmLex.x
21:00:26 <wli> make[1]: g: Command not found
21:00:27 <wli> make[1]: [cmm/CmmLex.hs] Error 127 (ignored)
21:00:35 <dons> you don't have alex installed.
21:00:38 <wli> that's what appears to go wrong after clobbering stuff
21:00:50 <desrt> dons; how did you know that?
21:01:05 <wli> make[2]: *** No rule to make target `AbsSyn.o', needed by `alex.bin'.  Stop.
21:01:36 <dons> you can't build alex?
21:01:58 <wli> it appears not
21:02:02 <dons> just install openbsd, and download the ghc binaries and alex binaries from last night's cvs build ;)
21:02:04 <desrt> wli; are you building cvs?
21:02:29 <wli> trying to
21:02:35 <desrt> did you do cvs up?
21:02:41 <desrt> or is this a fresh new checkout?
21:02:43 <dons> you have a working ghc on the box yet?
21:02:46 <wli> fresh new checkout
21:02:50 <wli> dons: after a fashion
21:02:50 <desrt> hum.  that's odd.
21:03:11 <wli> dons: I have a 32-bit ghc I did hacks to make run despite hating running as emulated 32-bit in various ways
21:03:27 * desrt smiles
21:03:34 <dons> nasty. ghc does run in 64 bit mode, and there are already binaries for it
21:03:40 <dons> maybe you can grab one of those?
21:03:42 <wli> dons: linux binaries?
21:03:53 <dons> I think I've seen them mentioned. let me see..
21:04:04 <wli> I've not seen them mentioned... anywhere
21:04:23 * desrt sees only solaris
21:05:10 <wli> I found mention on google
21:05:19 <wli> with no binaries up for download
21:05:26 <dons> is igloo building them for debian?
21:05:42 <dons> yes. looks like it
21:06:19 <dons> and simonM did the original port to linux, as well
21:06:24 <wli> this is suse
21:06:31 <desrt> what is the original platform?
21:06:48 <dons> simonm did the first amd64 port, and it was to a linux box, if i recall
21:06:59 <wli> I won't touch debian's crap with a 10-foot pole; any 64/32 arch where the 64-bit version requires the old 32-bit installations to be destroyed is complete shite.
21:07:10 <wli> s/arch/userspace/
21:07:22 <wli> hence, SuSE
21:07:50 <dons> looks like its also got a gentoo port.
21:07:54 <wli> (which is no better, but didn't require destroying the 32-bit userspace in question)
21:08:08 <dons> i'd say that's easy enough to do the build yourself then
21:08:22 <wli> well, guess what; it ain't workin'
21:08:34 <dons> too bad
21:09:23 <wli> I can see this is going nowhere fast.
21:09:43 * desrt hugs wli
21:21:00 <wli> Okay, I don't give a shit about these untraceable examples. This crap is broken and I don't have the patience to deal with it.
21:21:35 <wli> or the persons who spew flak at me for looking for help dealing with where it's falling over
21:46:49 <wli> seems to be getting further after a number of additional hacks trampling over userspace
21:54:48 <heatsink> Castlevania had some good music in it
21:55:53 <heatsink> Megaman tunes were catchy but fairly simple... The mario theme is quite unusual for a video game.
21:57:53 <heatsink> Arg. Wrong window.
21:57:55 <heatsink> Nevermind me.
22:07:07 <Pseudonym> So after you hide the body, let me know and I'll call the cleaner.
22:07:13 <Pseudonym> Whoops!  Wrong window.
22:12:05 <blackdog> Pseudonym: it's ok, I saw it anyway. I'll let you know.
22:15:17 <Pseudonym> OK, cool.
22:15:26 <Pseudonym> Now I just need to hack the TUNES server and clean the logs.
22:15:39 <Pseudonym> Oh, and clean that line while I think of it.
22:23:05 <Pseudonym> OK, must away.  Nytol!
22:24:54 <wli> hmm, seems to be complaining and loudly about lack of a static readline lib
22:40:02 <wli> hmm, StgRunC stopping me cold
23:09:32 * wli declares it all broken at the FTBFS level and decides not to do anything in Haskell for at least 30 days.
23:22:02 <SyntaxNinja> haskell is great! hack in haskell!
23:39:22 <paf> shapr: have you ever used haskelldsp?
