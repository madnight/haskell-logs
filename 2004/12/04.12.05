01:01:13 <whyrph> I need some help in compiling ghc
01:01:24 <whyrph> they seem to have forgotten instructions on compiling from source in the documentation
01:06:53 <xerox> http://www.haskell.org/ghc/docs/latest/html/building/building-guide.html
01:07:06 <xerox> it helps?
01:07:10 <whyrph> one sec
01:07:10 <xerox> http://www.haskell.org/ghc/docs/latest/html/building/sec-building-from-source.html
01:07:16 <whyrph> I got to the part where I figure out that i need .hc files
01:07:21 <whyrph> but not wehre I find out how to get them
01:07:24 <whyrph> reading now
01:10:02 <Helic> what help do you need ?
01:10:15 <Helic> which platform ?
01:10:47 <whyrph> linux i386
01:11:06 <Helic> you dont need to compile
01:11:09 <Helic> you can use the rpms
01:11:15 <whyrph> I don't have rpm
01:11:19 <whyrph> and I'd rather not get it
01:11:23 <Helic> they are on the webpage
01:11:30 <Helic> why not ?
01:11:44 <whyrph> I have pretty much everything i need compiled from source already
01:11:51 <Helic> well, tough luck here
01:11:55 <whyrph> so I don't really wanna install rpm now
01:12:01 <whyrph> but I tihnk I found out how to bootstrap ghc
01:12:06 <Helic> I dont think so
01:12:12 <Helic> there are no hc files for 6.2.2
01:12:16 <whyrph> hmm
01:12:24 <Helic> in fact, I am building them myself now for a cygwin port
01:12:31 <Helic> tell you what
01:12:44 <Helic> install the rpms, then rebuild it. then you can uninstall the rpm version
01:12:44 <whyrph> well, I used distrib/hc-build.  not sure if that is what i ened to do
01:12:47 <whyrph> heh
01:13:41 <xerox> Helic: why cygwin ?
01:13:58 <Helic> xerox: I am a masochist
01:14:28 <Helic> well, I wanna be able to use haskell for some small stuff at work, and we dont use unix anymore
01:14:52 <Cale> ghc runs on windows
01:14:59 <Helic> I know. but I hate it
01:15:13 <xerox> :(
01:15:14 <Helic> I run ghci from within emacs
01:15:18 <xerox> me too
01:15:25 <Helic> and it pops up cmd windows 
01:15:37 <xerox> ?
01:15:42 <Helic> I'd rather have a native cygwin version and be done with it
01:15:55 <xerox> you also use cygwin emacs ?
01:15:59 <Helic> yes cygwin emacs
01:16:03 <xerox> gee.
01:16:13 <Helic> heh
01:16:14 <xerox> there are emacs builds for release and cvs!
01:16:25 <Helic> ?
01:16:30 <xerox> win32 builds
01:16:37 <Helic> I know. I have it as well
01:16:45 <Helic> but I run cygwin shells from within emacs too heh
01:16:45 <xerox> what's the main difference?
01:17:16 <Helic> actually, you can make win32 emacs make proper use of the cygwin bash. but ghci causes those dos windows again I think
01:18:10 <Helic> plus you get posix stuff with a cygwin build
01:19:43 <Helic> I was updating cygwin and I saw that they were providing an ocaml compiler binary. wished there was ghc too
01:26:37 <xerox> in fact i use no dos windows
01:27:10 <xerox> and ghci opens correctly in my emacs buffers
01:27:27 <whyrph> argh. ..libraries without homepages suck
01:27:59 <whyrph> it's really hard to find source releases when they don't have one
01:37:07 <xerox> Helic: i don't get your problem, cmd windows pops up when you raise GHCi from emacs?
01:52:04 <aj> err, what's haskell for "Do no IO" ?
01:52:04 <aj> or haskell for "no-op" -- i need to get somethign of type IO(), that doesn't do anything...
02:01:04 <tuomov> return ()?
02:08:20 <aj> ah, thanks
02:20:25 <aj> err, how do you convert "123" into 123?
02:31:33 <bens> aj: you could try `read "123"'
02:31:33 <bens> it's in Text.Read in the libraries
02:38:52 <aj> how do i catch the error  read("123x") produces?
02:39:35 <bens> with `catch' :)
02:40:15 <aj> doesn't seem to work?
02:40:51 <aj> read "123x" `catch` \_ -> 3    is what i'm trying
02:41:21 <bens> oh, sorry, catch is for IO errors, but read won't throw one of those. hang on.
02:44:45 <bens> no, i think catch is the way. does that compile?
02:45:03 <aj> no, it complains about IO stuff
02:47:54 <bens> are you doing this in a function that returns an IO _ type?
02:48:04 <bringert> exceptions can only be caught in the IO monad
02:48:30 <aj> i don't really want exceptions, i just want to convert "123" to an integer predictably :)
02:48:45 <bringert> well, converting "123" is predictable
02:48:46 <aj> i'm trying it out in ghci, i'll be doing it in an IO function anyway though
02:48:50 <bringert> :)
02:49:08 <aj> s/"123"/a String/ :-P
02:49:13 <bringert> @type Control.Exception.evaluate
02:49:14 <lambdabot> Control.Exception.evaluate :: forall a. a -> IO a
02:50:11 <bringert> exceptions can be thrown anywhere (e.g. by using error), but only caught in the IO monad
02:50:35 <bringert> so if you have pure code that you want to catch exceptions from, you can use evaluate
02:51:00 <bringert> note though that that will only catch exceptions on the "top level" in the value
02:52:11 <aj> oh come on, that's just silly
02:52:43 <aj> is charToDigit available somewhere? some website mentioned it, but i can't find it anymore?
02:53:00 <bringert> Control.Exception.catch (evaluate $ read "5") (\_ -> return 3) >>= print
02:53:53 <bringert> @type Data.Char.digitToInt
02:53:55 <lambdabot> Data.Char.digitToInt :: Char -> Int
02:54:36 <bringert> the library docs are your friend: http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
02:55:50 <bringert> aj: about the silliness, see: http://research.microsoft.com/~simonpj/Papers/imprecise-exn.htm
02:58:55 <aj> let { stringToInteger :: Int -> String -> Int; stringToInteger def str = if and (map isDigit str) then foldl (\x y -> 10 * x + (digitToInt y)) 0 str else def }
02:59:05 <aj> is all i'm looking for :-/
02:59:53 <arauko> Hello.
03:00:02 <arauko> Can someone help me building wxHaskell?
03:00:20 <arauko> I don't find the wxWidget dir.
03:01:12 <bringert> aj: good idea that. i have never like the fact that read chokes on bad input
03:02:27 <bringert> aj: if you don't want to implement the parsing yourself, and to make it more general, you could call reads internally
03:02:32 <bringert> @type reads
03:02:33 <lambdabot> reads :: forall a. (Read a) => String -> [(a, String)]
03:55:18 <arauko> Haskell is a general purpose programming language?
03:56:13 <bringert> yes
04:28:43 <arauko> bringert, you know wxHaskell?
04:28:49 <arauko> I get error while compiling.
04:28:57 <arauko> : undefined reference to `TextziParserCombinatorsziParsecziPrim_parse_closure'
04:28:57 <arauko> out/wxdirect/Classes.o(.text+0x5c51): In function `r2lZ_entry':
04:28:57 <arauko> : undefined reference to `TextziParserCombinatorsziParsecziPrim_parse_closure'
04:28:57 <arauko> collect2: ld returned 1 exit status
04:28:57 <arauko> make: *** [out/wxdirect/wxdirect] Error 1
04:29:10 <arauko> This is from CVS.
04:29:17 <bringert> that sounds like a missing -package flag
04:29:36 <bringert> -package text
04:30:19 <bringert> sorry, -package parsec 
04:30:35 <arauko> bringert, on make?
04:30:54 <bringert> well, the -package parsec flag needs to be given to ghc
04:31:08 <bringert> so you might have to edit the Makefile
04:31:19 <bringert> or give some flag to configure or something
04:31:23 <arauko> Oh
04:31:46 <bringert> It was a while since I compiled wxHaskell, can't remember how they do it
04:32:20 <bringert> for a quick test, copy the ghc command that gave the error, add the package flag, and run it manually
04:35:16 <arauko> bringert, i found this on ./configure --help
04:35:18 <arauko>  --package-conf=<file>  optional local package configuration []
04:36:31 <bringert> you might be able to use that, but it's not really what you are looking for. a local package configuration is used for example if you have installed packages as a normal user, and haven't registered them in the global package configuration
04:37:21 <bringert> there might be a --ghc-flags or somthing like that that you could use
04:39:03 <arauko> Ok.
04:39:19 <arauko>  --hcpkg=<program>      package compiler [ghc-pkg]
04:39:43 <arauko>  --hc=<program>         the haskell compiler [ghc]
04:40:28 <arauko> those are the options more similar to your recommendations.
05:09:58 <arauko> anyonne?
05:44:50 <arauko> Hello, can anybody help me?
05:48:08 <xerox> just ask
05:55:06 <xerox> there is anything resembling python's ATOP or SHELVE in Haskell ?
06:00:30 <arauko> xerox, i got problems building wxHaskell.
06:00:42 <arauko> out/wxdirect/Classes.o(.text+0x5c51): In function `r2lZ_entry':
06:00:42 <arauko> : undefined reference to `TextziParserCombinatorsziParsecziPrim_parse_closure'
06:00:42 <arauko> collect2: ld returned 1 exit status
06:00:42 <arauko> make: *** [out/wxdirect/wxdirect] Error 1
06:00:54 <arauko> I got that when i make wxHaskell , cvs version.
06:02:57 <xerox> cvs version!
06:03:05 <xerox> dunno really
06:03:58 <bringert> arauko: I guess those configure options aren't much help
06:04:11 <bringert> maybe you can just hack the Makefile
06:04:32 <bringert> or send a email to wxhaskell mailing list
06:05:35 <bringert> an email even
06:06:52 <arauko> mmm...
06:07:02 <arauko> probably i should give a try of the tarball.
06:15:23 <arauko> But i don't get it.
06:15:26 <arauko> it should work.
06:15:45 <arauko> the web site explanations are very straightforward.
06:20:39 <bringert> still the same problem?
06:21:17 <arauko> Yes. 
06:24:44 <arauko> Same error with tarball :-(
06:28:33 <bringert> guess you have to edit the Makefile or something then
06:40:20 <TheHunter> Has anyone got an idea how to get the value out of an existential type into a variable in ghci without ghci's brain exploding?
06:42:02 <TheHunter> hmm, i guess i could use typeable and casts...
06:44:10 <TheHunter> ah, crap: Could not deduce (Typeable (Set a))
06:46:23 <jadrian> this will probably sound like a newbie question, anyway
06:46:37 <jadrian> I had a simply recursive structure, something like:
06:46:44 <jadrian> data A   = NodeA Int [A] 
06:46:59 <jadrian> but I want to add info in the nodes
06:47:20 <jadrian> that info might be all sorts of things so I'll end up with
06:47:35 <jadrian> data A info = NodeA info Int [A] 
06:47:57 <jadrian> now
06:48:05 <jadrian> if I do not use info
06:48:08 <jadrian> I can do 
06:48:22 <jadrian> type A' = A ()
06:48:49 <jadrian> and in those cases I can avoid the "a" parameter which can be a pain
06:49:16 <jadrian> my question is, just to make absolutely sure,
06:49:43 <jadrian> s/"a"/"info" up there...
06:49:48 <jadrian> so my question is
06:50:27 <jadrian> there is no way to hide the "a" parameter in the type signature in functions that don't use touch that field, is it?
06:50:45 <jadrian> I know I could do something like
06:50:51 <jadrian> data C   = forall a . NodeC a [C]      
06:51:05 <jadrian> but this is not what I want...
06:51:29 <jadrian> on the other hand functions like 
06:51:38 <jadrian> length :: [a]->Int
06:51:53 <jadrian> just ignore the fact that you have "a"s there 
06:52:56 <jadrian> (I can se why we need them, but asking just in case I'm wrong and there is in deed a way to hide that)
06:56:27 <TheHunter> you have func :: A a -> A a -> A a, and want something like func :: A -> A -> A instead?
06:56:54 <TheHunter> you could probably get func :: AClass a => a -> a -> a, however.
07:05:51 <boegel> hey #haskell
07:19:13 <TheHunter> hey boegel 
07:30:07 <boegel> hey TheHunter 
07:30:36 <boegel> I'm having some strange problems while compiling with GHC... It seems to be a PATH problem or so, but I can't find the problem
07:30:58 <boegel> I get this while compiling with the 02 flag (if that matters)
07:30:59 <boegel> HRayMain_3.lhs:1:
07:30:59 <boegel>     Failed to load interface for `HRayData_3':
07:30:59 <boegel>         Could not find interface file for `HRayData_3'
07:30:59 <boegel>         (use -v to see a list of the files searched for)
07:32:32 <boegel> anybody knows what the problem might be ? The modules that ghc is searching for are in the same directory, and have the same name as the modules do
07:39:06 <TheHunter> ghci works fine?
07:39:49 <Igloo> Is the module compiled? Are you using --make?
07:42:14 <boegel> ow, Igloo, I'm not using --make...
07:42:28 <boegel> that will be the problem :)
07:42:29 <boegel> thx
07:43:42 <boegel> pretty stupid of me again :s
08:14:58 <arauko> anyone experienced with wxhaskell?
08:21:28 <kbrooks> hi
08:21:59 <arauko> Hello.
08:22:05 <boegel> arauko, no, but I have worked with FranTk, and am planning to do the same 'project' in wxHaskell
08:22:25 <arauko> boegel, i got an installation problem with it.
08:22:36 <arauko> out/wxdirect/Classes.o(.text+0x5c51): In function `r2lZ_entry':
08:22:36 <arauko> : undefined reference to `TextziParserCombinatorsziParsecziPrim_parse_closure'
08:22:36 <arauko> collect2: ld returned 1 exit status
08:22:36 <arauko> make: *** [out/wxdirect/wxdirect] Error 1
08:22:51 <arauko> That is the error i get when i run make.
08:28:39 <boegel> arauko, are you sure you have everything installed you should ?
08:28:46 <boegel> (I haven't installed it myself)
08:29:17 <boegel> or maybe you have to compile something... which OS are you working in ?
08:40:24 <kbrooks> I want to learn Haskell.
08:41:07 <Lor> Good for you.
08:41:25 <Heffalump> sensible chap.
08:41:59 <kbrooks> Point me to a tuorial or something.
08:42:20 <np_hard> geez, is Google down?
08:42:27 <np_hard> http://www.google.com/search?q=haskell+tutorial&sourceid=mozilla-search&start=0&start=0&ie=utf-8&oe=utf-8&client=firefox-a&rls=org.mozilla:en-US:official
08:42:28 <boegel> kbrooks, http://www.haskell.org/learning.html
08:42:31 <Lor> kbrooks, are you familiar with the expression "GIYF"?
08:42:42 <kbrooks> google is your friend 
08:42:48 <boegel> kbrooks, saying "Hi" doesn't heart anyone
08:42:49 <np_hard> haha
08:42:54 <np_hard> google it you f**ker? :)
08:43:05 <boegel> hi cmeme
08:43:06 <boegel> bye cmeme
08:43:06 <Lor> No, that would be stfw.
08:43:07 <Igloo> The topic is quite friendly too
08:43:21 <kbrooks> search the friendly web
08:43:31 <boegel> kbrooks,  ?
08:43:33 <kbrooks> IIRC
08:43:42 <kbrooks> i was talking to Lor
08:43:49 <Lor> "friendly" is an euphemism. :)
08:44:01 <boegel> kbrooks, do you need to learn Haskell within the hour orso ? :)
08:44:27 <kbrooks> boegel, i guess so
08:47:36 <np_hard> assignment due tomorrow, or what?
08:48:44 <kbrooks> not an assignment
08:48:50 <kbrooks> i just want to learn it
08:49:44 <boegel> kbrooks, if you want to ask more here, you could try being a little bit more friendly :)
08:50:45 <kbrooks> boegel, heh
08:52:19 <kbrooks> hmmm
09:06:45 <arauko> boegel, yes, i installed everything.
09:06:57 <arauko> boegel, GNU/Linux
09:10:49 <Oejet> kbrooks, what languages do you know?
09:16:58 <arauko> anyone can help me with wxhaskell?
09:18:49 <Spark> cor
09:20:10 <arauko> uh.. i didn't know there were an operating system written in haskell.
09:21:55 <bringert> you mean hOp/House?
09:22:05 <ibid> house?
09:22:37 <bringert> http://www.cse.ogi.edu/~hallgren/House/
09:27:37 <arauko> Yes.
09:29:49 <shaleh> arauko: I just started playing with wxhaskell myself, what has you down?
09:33:50 <arauko> shaleh, hello pal.. ooh.. lot of problems :-(
09:34:03 <Philippa_> personally, I'd say the fact all known (to me) GUI libs suck and wxhaskell inherits that - it's not too bad as they go, mind
09:34:03 <arauko> shaleh, i get errors when i run make to build wxHaskell
09:34:11 <Philippa_> oh fun
09:34:13 <arauko> out/wxdirect/Classes.o(.text+0x5c51): In function `r2lZ_entry':
09:34:13 <arauko> : undefined reference to `TextziParserCombinatorsziParsecziPrim_parse_closure'
09:34:13 <arauko> collect2: ld returned 1 exit status
09:34:13 <arauko> make: *** [out/wxdirect/wxdirect] Error 1
09:34:31 <Philippa_> what kinda system you running, and I assume you've followed all the "to build" instructions?
09:34:39 <arauko> Yes, i did.
09:34:46 <arauko> GNU/Linux i686 ghc 6.2.1
09:34:46 <Philippa_> which GHC version you got?
09:34:52 <Philippa_> heh
09:34:56 <arauko> :-)
09:35:10 <shaleh> arauko: haskell? from source or a package?
09:35:18 <arauko> shaleh, wxHaskell
09:35:20 <Philippa_> interesting, and sucky. I'm afraid I got out the easy way this time and used the win32 binaries
09:35:40 <arauko> Both from tarball source and cvs give the same error.
09:35:41 <shaleh> arauko: no, I mean, where did you get the ghc and the like
09:36:03 <arauko> hold
09:36:46 <arauko> http://www.haskell.org/ghc/download.html 
09:37:06 <shaleh> in other words, you are building all of this from scratch
09:37:26 <arauko> http://wxhaskell.sourceforge.net/download.html for wxHaskell.
09:37:28 <arauko> shaleh, yes
09:37:35 <arauko> But, ghc works good.
09:37:47 <arauko> didn't have any problem with it, neither with wxWidget
09:37:54 <arauko> version 2.4.2
09:38:14 <shaleh> arauko: that build message seems to imply that you either a) missed a compile option in ghc or b) somehow failed to install part of it
09:38:49 <shaleh> wx tends to like the kitchen sink
09:39:07 <arauko> ooh...
09:40:33 <arauko> shaleh, how do i check if it failed to install part of it?
09:40:55 <arauko> i just don't want to go all over the process again unnecessarily :-)
09:41:19 <Lemmih> arauko: Are you able to use Parsec with GHC?
09:42:40 <arauko> Lemmih, mm.. how do i check that? 
09:45:11 <Lemmih> `ghc -v | grep parsec` or load it with ghci, I think.
09:46:34 <shaleh> the ghc -v will find it easily.
09:46:46 <shaleh> Package { name = "parsec", ....}
09:47:56 <arauko> I get this:
09:47:59 <arauko> http://paste.lisp.org/display/4154
09:48:53 <shaleh> looks ok
09:49:17 <arauko> Yeah, i think, i ddn't get any warning or error during installation, it was something pretty smooth
09:52:04 <shaleh> I built wx haskell against ghc 6.2.2 last night
09:52:24 <shaleh> just did ./configure --with-opengl; make
09:52:33 <arauko> This is the latest command line run before the error: (to see if someone picks something)
09:52:35 <arauko> http://paste.lisp.org/display/4155 
09:52:36 <shaleh> (the GL is important unfortunately)
09:53:29 <shaleh> consistent with your earlier message. The compilation is fine, the linking is failing.
09:53:41 <shaleh> which means it is not finding a haskell/C library
09:54:25 <arauko> mmm....
09:54:42 <arauko> probably the wxWidget libraries?
09:55:53 <shaleh> TextziParserCombinatorsziParsecziPrim_parse_closure <-- in ghc or wxhaskell
09:56:12 <Philippa_> GHC
09:56:24 <Philippa_> it's part of Parsec, which is in the hierarchical libs these days
09:56:39 <arauko> I got the libraries of ghc in /usr/local/lib
09:57:33 <shaleh> arauko: it should link to libHSparsec.a somewhere during the build
09:58:29 <arauko> yes, i got it there  /usr/local/lib/ghc-6.2.1/
10:01:14 <shaleh> arauko: look through your build log, if you do not see the linking to the parsec lib, that is your problem.
10:01:28 <shaleh> perhaps wxhaskell is not looking in usr/local/lib.
10:01:43 <arauko> mmm
10:02:14 <vegai> on local TV's ST:TNG-episode, there was a red-suited officer called Haskell
10:03:28 <np_hard> did he make it?
10:03:40 <mflux> nope.
10:04:00 <Philippa_> you shouldn't need to ask that of a redshirt, really
10:04:06 <mflux> he wasn't a away-team though
10:04:24 <mflux> +on
10:05:07 <arauko> shaleh, you mean, build log of wxhaskell?
10:06:07 <arauko> # Installation
10:06:07 <arauko> BINDIR=/usr/local/bin
10:06:07 <arauko> LIBDIR=/usr/local/lib
10:06:31 <arauko> it is taking that path 
10:08:30 <shaleh> arauko: well, the problem is the lack of linking the parsec lib, you get to find out the cause (-:
10:08:39 <shaleh> off to do my Sunday errands
10:11:03 <arauko> :-(
10:12:12 <Lemmih> I think wxHaskell is still having problems with GHCi.
10:13:41 <Philippa_> yeah, wxhaskell apps're the only things I do a batch-compile for during testing
10:13:48 <Philippa_> OK, wxhaskell apps and CGIs :-)
10:19:18 <jadrian> back
10:20:59 <Spark> Philippa_: i was wrong about void* and C, the cast is implicit both ways duh :)
10:21:21 <Spark> e.g. free(ptr) and ptr=malloc(10)
10:21:29 <jesse98>  it's not in c++ though
10:21:35 <Spark> yeah
10:21:50 <Spark> c is best though, no?
10:21:59 <jesse98> not usually
10:22:06 <Spark> explicit casts create dependencies that have to be maintained by the developers
10:22:27 <Spark> or can you cast like p = (typeof p)malloc(10)
10:22:42 <jesse98> it's a cast either way, might as well make it explicit
10:22:56 <jesse98> if it's implicit you have yet another huge hole in the type system
10:23:02 <Spark> implicit casts are ok
10:23:09 <Spark> integer promotion, etc
10:23:32 <Spark> you wouldnt have polymorphism without them, i think
10:23:40 <jesse98> a promotion isnt the same as automatically (and implicitly!) converting between two entirely diff ptr types
10:25:37 <Spark> theyre not different
10:25:42 <Spark> no implicit casts are illegal...
10:25:50 <Spark> actually they are
10:25:52 <Spark> :)
10:26:18 <Spark> certainly free(ptr) should be ok since a cast to void* is valid for all types
10:26:23 <Spark> s/types/pointer types/
10:26:31 <jesse98> a promotion doesnt lose any information, an implicit cast to a void* loses every bit of type info you started with
10:26:42 <Philippa_> which is fine
10:26:48 <Philippa_> implicit casts /from/ void*, those are the bugger
10:27:03 <Spark> as long as you remember that information in your code (or it is static by the design of your code)
10:27:15 <arauko> Well, if someone knows something about my problem, please ping me.
10:27:47 <jesse98> the reason we have type systems is that we dont have to maintain this info in our code...
10:27:48 <Spark> so in c++ casts to void* are implicit?
10:27:55 <jesse98> yes
10:28:01 <Spark> right ok
10:28:12 <Spark> what you really need is a typeof operator
10:28:15 <Spark> then you get the best of both worlds here
10:28:38 <jesse98> but casts from void* have to be explicit so you cant do anything too evil without making it fairly obvious in the code
10:28:40 <Spark> or for malloc to return the type of its argument, that'd be sane too
10:28:53 <Spark> aka 'new'
10:29:19 <mike113> if I have a float, how can I print it to the screen?
10:29:24 <Spark> jesse98: that would mean casting NULL everytime you use it
10:29:34 <jesse98> 0 is special
10:29:44 <jesse98> it's not even a pointer in c++
10:29:59 <Lor> mike, e.g. "print pi"
10:30:36 <Spark> ah yes fair enough
10:30:48 <mike113> Lor: print can't print strings though, right?
10:31:13 <Philippa_> Spark: malloc's a library function for a reason
10:31:20 <Lor> Sure it can. It just puts quotes around it and escapes special characters.
10:31:24 <Philippa_> (similarly new's overloadable, but hey)
10:31:41 <mike113> Lor: well what if I wanted to do like "the value is: " myvar ?
10:31:48 <mike113> I keep getting errors because of IO
10:32:09 <Philippa_> use putStr(Ln) for output that's meant to be readable rather than Readable
10:32:15 <Lor> putStr ("The value is: " ++ show myvar)
10:32:43 <Lor> Or use the pretty-printer library.
10:32:57 * Lor is not fond of doing string operations with ++.
10:33:22 <mike113> Lor: does show work with functions?
10:33:23 <Philippa_> I end up doing it a lot, but I know it should bother me more
10:33:26 <Philippa_> no
10:33:39 <Philippa_> there is no sane way to print a function value beyond "here be a function"
10:33:40 <Lor> mike, how would you show a function?
10:33:51 <mike113> Lor: its return value
10:33:51 <Lor> Philippa_, the domain may be finite.
10:34:16 <Philippa_> yeah, but can you reliably determine that at runtime?
10:34:27 <Philippa_> still a PITA either way
10:34:36 <Lor> No, but you could hack up a special class for finite types.
10:34:53 <mike113> ok, that's too much work then
10:34:56 <Lor> class (Enum a, Bounded a) => Finite a
10:36:31 <Lor> I think I have actually used a class exactly like that.
10:36:44 <Lor> Well, not exactly, s/class/instance/
10:37:05 <Spark> Philippa_: for a good reason though? :)
10:37:13 <Lor> class Finite a where everything :: [a]
10:42:14 <Philippa_> Spark: yeah, bear in mind that C is a system programmer's language
10:43:26 <Philippa_> it's entirely practical to use C in an environment that doesn't (by default) supply a malloc equivalent, for example
10:45:54 <Spark> its born out of legacy
10:46:27 <Philippa_> no, it's born out of C never having been meant to be the One True Language
10:46:31 <Philippa_> it's a language for writing OSes in
10:46:35 <Spark> standard C is not ideal for writing close to the metal though
10:46:40 <Spark> standard C is for apps
10:46:57 <Lor> No one in his right mind should use C for application coding.
10:47:05 <Philippa_> the standard did shift away a bit, yes
10:47:16 <Philippa_> most of that can be recovered by pseudo-library work though
10:47:38 <Philippa_> there's not a lot in C's semantics to prohibit doing really thoroughly filthy things
10:48:12 <Philippa_> port access? Just a couple of functions the compiler conveniently inlines
10:48:36 <Spark> yeah ive noticed thats how linux does it
10:49:51 <Philippa_> and yeah, apps are the last damn thing C should be used for. Libraries, sure, that's understandable...
10:51:12 <tuomov> simple core libs
10:51:29 <tuomov> not complex stuff
10:55:23 <jadrian> any of you tried Cyclone?
10:55:35 <tromp> sounds like a roller coaster
10:55:35 <jadrian> http://www.research.att.com/projects/cyclone/
10:55:42 <jadrian> "A Safe Dialect of C"
10:56:12 <tuomov> beating a dead horse
10:56:25 <jadrian> yeah, maybe...
10:57:37 <Spark> heh
10:58:22 <Spark> ive never written C for anything other than apps :)
10:58:28 <Spark> i think its safe to say it takes all the fun out of programming
10:58:34 * vegai had a short daynightmare. "ICFP 2005: Basic is the language of choice for discriminating hackers!"
10:58:44 <jadrian> :)
10:59:38 <tuomov> nol C isstill fun to a point... c++, java etc.are not
10:59:41 <jadrian> I dunno I've had to use C before and seems obvious that some things could easiliy be safer with no efficiency costs
10:59:43 <tuomov> -l
11:00:25 <tuomov> still drying to type in dvorak...
11:00:51 <tuomov> d=t
11:01:08 <jadrian> well just one typo in the above sentence :)
11:01:26 <Spark> tuomov: i come up with cool designs for things, but then i start implementing them in C and its like swimming through treacle
11:02:00 <Spark> although with utility libraries to do things like list structures, it feels a bit more like java
11:02:01 <vegai> what's tvorak, tuomov? :)
11:02:13 * vegai giggles while adjusting his glasses.
11:02:21 <Spark> when i was coding java though it was even worse, the typing to behaviour ratio was just silly
11:02:45 <tuomov> e.g. Ion is already a too big and complex program for C, but in its infancy C was enough
11:03:06 <Philippa_> which reminds me, I need to try it next time I actually boot Debian
11:03:24 <Spark> ion = love
11:04:04 <tuomov> once you try to add abstraction, C becomes unfeasible
11:04:06 <Spark> the only thing bad about ion is badly written x clients
11:07:05 <Spark> and the fact that the default key bindings are awful :)
11:07:22 <Spark> mine leave room for improvement as well, but i cant be bothered any more, ive gotten used to it
11:07:48 <Spark> i'd love to bind all the 'special' keys on this 'multimedia' keyboard to wm functions but thats not gonna happen
11:08:22 <tuomov> the defaults aren't that good with dvorak...
11:09:44 <tuomov> alt+k is hard to hit on dvorak
11:09:46 <Spark> theyre a very personal thing i think - do you visualise workspaces as being horizontally placed or vertically stacked?
11:10:03 <tuomov> neither
11:10:11 <Spark> just sitting in a numbered abstract space
11:10:20 <Spark> i visualise them vertically, you see
11:10:21 <tuomov> they're just a list
11:10:36 <Spark> like the monitor is a window that goes up and down a column
11:13:00 <vegai> tuomov: sounds like you need some swapcaps 
11:13:10 <Spark> i never jump to a specific index either...
11:14:36 <tuomov> capslock iscontrol, of course
11:14:47 <tuomov> +" "
11:17:28 <vegai> hmm, I find it easy. Though I've been doing Svorak for a couple of months already
11:17:42 <vegai> ok, it *is* obviously easier with qwerty
11:17:59 <tuomov> try alt+k p
11:18:32 <tuomov> and compare to qwerty
11:18:33 <vegai> alt+v r in qwerty terms. Not too bad
11:18:49 <vegai> ok, the place of alt sucks.
11:19:56 <vegai> not too hard to reconfigure the keys in ion, I hope? =)
11:20:22 <tuomov> on qwerty c/a-k is the perfect submap prefix
11:20:29 <mflux> switching to dvorak would eradicate years of spinal training of emacs keybindings. impossible.
11:20:40 <tuomov> of course not
11:20:49 <vegai> I forget emacs keybindings in a week =)
11:21:04 <tuomov> but I should first learn this dvorak
11:21:11 <mflux> maybe some mechanism of remapping the keys so that their location wouldn't change could help
11:22:34 <stepcut> emacs has a dvorak mode for nethack so that the keys are in the same place as they are in qwerty :)
11:22:43 <tuomov> hmmm.. there's no ^Ö, which would be a problem on ttys and remapping
11:22:54 <Spark> the bindinds are about the position of the keys though, not whats written on them
11:23:04 <Spark> in some ways they should be bound to the keycodes rather than the interpretation
11:23:07 <Spark> its a bit wrong
11:23:22 <mflux> but it sort of depends too
11:23:31 <Spark> tuomov: market a usb ion-controller :)
11:23:35 <mflux> let's say you have 'file'-menu and alt-f goes there
11:23:36 <vegai> vi keys have some meaning 
11:23:39 <Spark> with special buttons for everything
11:23:44 <mflux> or just 'alt-f' that jumps forward a word
11:23:49 <Spark> actually thats retarded since then you'd have to keep moving your hand to it
11:24:05 <Spark> yeah that aids memory
11:27:14 <Darius> I rebound some of the vim commands following the letter and others (hjkl obviously) according to their position.
11:27:33 <Spark> hmm i wonder if "one" could have intersection type "int&string"
11:27:58 <Darius> 'd' is actually convenient as it in dvorak is 'e' and so still has some mnemonic value (erase)
11:28:09 <Darius> Spark: sure
11:28:18 <tuomov> bottom
11:29:19 <Darius> Spark: The language could provide any intersection primitively.
11:29:37 <Spark> mm
11:30:31 <Spark> im trying to find a counter example for the statement that 'intersection type is the type that agrees with all values in the set-intersection of the values agreed by both types'
11:30:33 <Darius> Forscythe, for example, provides { length :: Int } & (Int -> x) as a primitive intersection type (in some crazy pseudo syntax)
11:30:39 <Spark> which reynolds mentioned
11:31:02 <Spark> its not sufficiently general...
11:31:09 <Spark> ah yes, forsythe
11:31:29 <Spark> yeah although length :: Int is the type, theres no {} :)
11:31:47 <Spark> you clearly know what i have been sent to study though
11:31:51 <Spark> which may be useful :)
11:31:59 <Darius> I don't remember Forsythe syntax, but the {}'s were to represent a record.
11:32:08 <Spark> records were implemented with intersection types
11:32:14 <Spark> so there werent in the language definition as such
11:32:28 <Spark> you could label a type to make it distinct from other types
11:32:33 <Darius> Yes, as that makes sense.  But that particular intersection can't be expressed.
11:33:02 <Spark> cant be expressed?
11:33:05 <Darius> or rather values of it can't be, except primitively.
11:33:53 <Darius> You can't make an Int function that's also a record.
11:33:59 <Spark> you need a type constructor
11:34:02 <Spark> is that what you mean?
11:34:24 <Spark> his was intarr or something wasnt it
11:34:27 <Spark> i have the paper here somewhere...
11:35:06 <Darius> Spark: Is "you need a type constructor" responding to the statement "that particular intersection can't be expressed" or to the values one?
11:35:11 <Darius> Spark: Yes (re intarr)
11:36:00 <Spark> values
11:36:25 <Spark> you need 'an expression that returns the intersection' i believe
11:36:31 <Spark> im all hazy around this subject though
11:37:08 <Darius> Spark: To do the general case, yes that would be what's required.
11:37:27 <Spark> but there is no general syntax to do that is there?
11:38:07 <Spark> you could give the function a label and then put them in a structure together perhaps
11:38:14 <Spark> but then you'd have to look it up by name
11:38:21 <Darius> Not in Forsythe and it's actually a kind of tricky problem.  The simplest solution would be to simply have the term syntax follow the type syntax, but see also "Branching Types".
11:38:48 <Spark> branching types?
11:38:54 <Darius> Ask Google.
11:58:29 * stepcut ponders
11:58:41 * wli rematerializes from the airport
11:59:09 * Darius recalls papers on Graph Based Register Allocation.
11:59:22 * arauko wonders if someone enough experienced with wxHaskell is already around here
11:59:35 * Riastradh notes that most register allocation schemes are based on graph colouring.
11:59:53 * arauko scratches his head
11:59:58 * Darius finds the word he had omitted.
12:05:37 * ibid burps
12:07:50 * ski finds a vorpal blade
12:08:39 <whee> mmmmmbop
12:09:53 * ibid starts writing a code generator for celery
12:10:17 <Lemmih> @seen shapr
12:10:17 <lambdabot> I saw shapr leaving #darcs 21 hours 9 seconds ago.
12:53:54 <whyrph> uh ..how long ago was that dvorak/emacs discussion?
12:54:02 <whyrph> I got disconnected and I didn't have timestamps enabled
12:57:17 <vegai> couple of hours
12:57:24 <whyrph> ah
12:57:41 <whyrph> if whoever was looking for a way to remap the emacs keys so they wouldn't move is still here, I found out how to do that
12:59:36 <lament> :wq
13:23:46 <jadrian> argh "as" is a reserved word :(
13:24:13 <jadrian> wait
13:24:21 <jadrian> but my code works...
13:24:41 <jadrian> is the use of "as" deprecated?
13:24:49 <jadrian> because of the import ... as ...
13:25:01 <jadrian> or is it ok to use it as an identifier?
13:25:44 <Darius> It's apparently ok.
13:26:26 <Darius> Most of the time Haskell doesn't take up identifiers if they only apply in a certain context.
13:27:03 <Igloo> It's only special in certain circumstances, I think because it was a later addition to the language
13:27:22 <Igloo> qualified and hiding are in the same boat, IIRC
13:27:33 <Darius> Igloo: It being a later addition should be irrelevant.
13:27:41 <Darius> -> is both a type and syntax.
13:27:47 <Igloo> Darius: Not wanting to break programs already written
13:28:00 <Darius> It should be irrelevant nevertheless.
13:28:44 <Darius> There is simply no reason for it to take an identifier if its use can always be figured out by context.
13:30:40 <jadrian> my as are all highlighted with the new mode
13:30:48 <jadrian> not that it matters...
14:27:32 <boegel> hello everyone
14:31:52 <MegaMonad> Char> map toupper "hello world.
14:32:10 * CosmicRay introduces MegaMonad, a MegaHal bot trained with IRC logs from this channel
14:32:37 <CosmicRay> megamonad: do you know anything about the wiki?
14:32:39 <ski_> trained, how ?
14:32:39 <MegaMonad> CosmicRay: I have the haskell wiki, and i will get into it for me.
14:32:58 <blackdog> megamonad: do you like perl?
14:32:59 <MegaMonad> blackdog: Lummox - pleasures you feel to me that it's not perl.
14:33:07 <CosmicRay> ski_: I wrote a little script to cleanse the logs, then appended them to the standard training file.
14:33:17 <CosmicRay> the brain is about 150MB, and that's just from this year.
14:33:22 <CosmicRay> heh
14:33:28 <blackdog> megamonad: you kinky beast...
14:33:29 <MegaMonad> blackdog: Though i tended to get me to avoid haskell, but not mine. What kind of beast rather than direct.
14:33:35 <CosmicRay> lol
14:34:04 <CosmicRay> MegaMonad: who is you favorite Haskell hacker?
14:34:06 <MegaMonad> CosmicRay: Toomasr: no, ignore me, i'm not defending all of haskell, for example, is how you define hacker.
14:34:58 <CosmicRay> MegaMonad: do you think you're better than lambdabot?
14:34:59 <MegaMonad> CosmicRay: Were i to think i'm on the lambdabot sources.
14:36:00 <CosmicRay> MegaMonad: can you parody shapr?
14:36:02 <MegaMonad> CosmicRay: That parody of shapr was a strightfowrard implementation that i really mean the same as me.
14:36:25 <CosmicRay> MegaMonad: do you know anything of the IO Monad?
14:36:27 <MegaMonad> CosmicRay: Ozone : it's easier to deal with io is a monad is i think that would be me.
14:37:01 <CosmicRay> I have no idea if anybody likes the idea of a megamonad
14:37:08 <CosmicRay> if not, I'll shut him off right away
14:37:14 <Oejet> MegaMonad: Do you like Java?
14:37:15 <MegaMonad> Oejet: Pseudonym, i dislike learning by example - reading source files corresponding to the next java will be me again for your help though.
14:37:48 <CosmicRay> MegaMonad: nobody likes Java.
14:37:49 <MegaMonad> CosmicRay: Oop cuts state into a gf parser in java.
14:38:20 <CosmicRay> MegaMonad: what do you like best about Igloo?
14:38:21 <MegaMonad> CosmicRay: Igloo: i just have to capture their scope to me.
14:38:39 <Oejet> Hm, maybe I'm just tired, but I can't understand, what MegaMonad is saying.
14:38:42 <Igloo> MegaHal? Pah, come back when you've written it in Haskell  :-P
14:38:42 <boegel> Megamonad: do you ever shut up ?
14:38:44 <MegaMonad> boegel: Shapr: don't know. I just need to find something you import a module that lets me easily use the debs to build a linux/x86, so 10.1 is a kind of german music is stuff i like it might contain serious mistakes, and i'm stuck on (contag (tupletag n), ...), because cont expects a directory or what-have-you.  The short answer and wouldn't shut up and at the farthest end leasable compute time.
14:38:58 <CosmicRay> Oejet: you're right, it's not making much sense
14:39:09 <CosmicRay> Oejet: apparently training an AI on IRC logs is not the best idea :-)
14:39:12 <boegel> CosmicRay, is it supposed to ? :)
14:39:16 <CosmicRay> hehe
14:39:38 <Igloo> If you want an AI, probably best to train it on something with a higher proportion of I
14:39:47 <CosmicRay> heh
14:39:48 <psi> sometimes, the conversations can be quite funny. especially if he responds to someone who is unaware that he's a bot :)
14:40:37 <boegel> psi, who is a bot ? :p
14:40:50 <whyrph> hmm..
14:40:57 <whyrph> MegaMonad: what's up?
14:40:58 <MegaMonad> whyrph: Semi-tasking = doing several things at a 3-line function and a list contain various solutions to that list is the first line of myfunction look like ?
14:41:04 <psi> boegel: :D
14:41:16 <boegel> is it shapr ? I bet it's shapr :p
14:41:37 <psi> i bet megamonad knows
14:41:44 <boegel> only a bot gives the tour all the time ;)
14:41:49 <CosmicRay> haha
14:41:51 <boegel> Megamonad: who is a bot
14:41:52 <psi> boegel: is shapr the bot?
14:41:54 <MegaMonad> boegel: Bot::a->a and \x.bot is a good answer, programming doesn't ever really get into hacking mode and do so.
14:41:56 <psi> woops
14:42:04 <psi> MegaMonad: is shapr the bot?
14:42:06 <MegaMonad> psi: Bot::a->a and \x.bot.
14:42:20 <CosmicRay> megamonad apparently is a geek also.
14:42:22 <boegel> Megamonad: who's the bot ?
14:42:23 <MegaMonad> boegel: Bittorrent is a bot ? :P.
14:42:31 <boegel> eh :
14:42:33 <boegel> :)
14:42:52 <Lemmih> MegaMonad: How can bittorrent be a bot?
14:42:54 <MegaMonad> Lemmih: I went on reading the contents, saving them in a low-speed bittorrent on scannedinavian, i think a buffer in the bot.
14:43:00 <CosmicRay> MegaMonad: have you ever met Simon?
14:43:02 <MegaMonad> CosmicRay: Simon^2 expands to simon simon.
14:43:10 <psi> hah
14:43:35 <boegel> Megamonad: what is the result of 1+1 ?
14:43:36 <MegaMonad> boegel: Cheers for all values in an instance of ord, you are using latin-1 :-p.
14:43:43 <psi> you should create two instances of the bot, and then let them talk to eachother
14:43:44 <boegel> :|
14:43:47 <psi> i wonder what would happen
14:43:54 <boegel> psi: mayhem :)
14:43:59 <CosmicRay> heh
14:44:03 <boegel> CosmicRay, give it a try !
14:44:06 <CosmicRay> flooding, for one.
14:44:16 <boegel> CosmicRay, just for a minute or so ;)
14:44:17 <whyrph> do it in #flood.  :)
14:44:17 <CosmicRay> I also specifically programmed megamonad to ignore lambdabot
14:44:41 <CosmicRay> MegaMonad: where can I find some curses code?
14:44:42 <MegaMonad> CosmicRay: You might not want to use curses' getch to read code won't work with you so far.
14:44:46 <Lemmih> @seen shapr
14:44:46 <lambdabot> I saw shapr leaving #darcs 23 hours 34 minutes 38 seconds ago.
14:45:01 <CosmicRay> MegaMonad: how about inflate?  does igloo have any code for that?
14:45:02 <MegaMonad> CosmicRay: Igloo is really just need a "generate cases" feature for when you want the files in this code.
14:45:15 <CosmicRay> MegaMonad: inflate
14:45:16 <MegaMonad> CosmicRay: Does urchin.earth.li/darcs/ian/inflate/inflate.lhs come from?
14:45:19 <CosmicRay> sweet.
14:45:43 <Lemmih> MegaMonad: Have you heard of Simon Marlow?
14:45:44 <MegaMonad> Lemmih: I ask this as a simple hex to dec calc running in parallel, and switching state according to simon simon.
14:45:55 <CosmicRay> MegaMonad: marlow
14:45:56 <MegaMonad> CosmicRay: Riastradh: that's what i heard that manuel and simon marlow was his signature in functions too?
14:46:14 <CosmicRay> MegaMonad: darcs
14:46:15 <MegaMonad> CosmicRay: Lua ocaml haskell ... I dont even know if true arabs prefer 1 + <arabic name> = <arabic name> + 1, although i live in a few perlscripts... Hopefully i can imagine :) well, seriously, i think darcs has a long time.
14:46:26 <CosmicRay> lol
14:46:50 <stepcut> MegaMonad: stepcut 
14:46:50 <MegaMonad> stepcut: Stepcut: we had a drink in it or in the undemanding south.
14:46:58 <stepcut> hehe
14:47:03 <boegel> Megamonad: boegel
14:47:04 <MegaMonad> boegel: Boegel why is that haskell is devishly mind bending.
14:47:17 <boegel> heh
14:47:21 <CosmicRay> megamonad: cosmicray
14:47:22 <MegaMonad> CosmicRay: Cosmicray: page of which are linear implicit parameters.
14:47:32 <CosmicRay> that's boring, megamonad.
14:47:43 <stepcut> MegaMonad: what is the answer to life, the universe, and everything ?
14:47:44 <MegaMonad> stepcut: Ok, rebooting to install several of the life of the universe.
14:47:46 <boegel> megamonad: that's boring
14:47:47 <MegaMonad> boegel: Wxhaskell question: why is `get lstctrl (item idx)` always returning a boring tunnel from freenet6.
14:48:10 <blackdog> Igloo: I've got a haskell megahal lying around somewhere - I was going to hook it up to lambdabot, but it looks like I've been beaten to the punch. :)
14:48:23 <CosmicRay> blackdog: I'd be interested in that
14:48:48 * CosmicRay notes that megahal continues to learn from what people say in the channel and to it
14:49:26 <Igloo> So if we keep saying CosmicRay is an ML weenie he'll eventually learn that?  :-)
14:49:26 <CosmicRay> s/megahal/megamonad/ I guess
14:49:43 <boegel> CosmicRay is an ML weenie
14:49:48 <CosmicRay> Igloo: either that, or there's a small danger that someone may teach him that Igloo likes Java :-)
14:49:50 <Igloo> MegaMonad: Tell me about CosmicRay 
14:49:51 <MegaMonad> Igloo: Cosmicray: hey, you think that comments are not the most part, and you can modify the footer when you looked at http://www.cse.ogi.edu/pacsoft/projects/rmb/repmin.html.
14:50:02 <boegel> MegaMonad: who is Cosmisray
14:50:03 <MegaMonad> boegel: If anybody else who is cosmisray.
14:50:05 <blackdog> CosmicRay: I'll try to find it. I wrote it on the train to somewhere, but I'm really slack about source control. </bad hacker>
14:50:08 <Igloo> My secret is out!
14:50:21 <boegel> MegaMonad: cosmicray weenie
14:50:22 <MegaMonad> boegel: I like the sort of weenie.
14:50:25 <boegel> lolz
14:50:31 <CosmicRay> I think one of the problems is that by default, megahal doesn't spend enough cpu time finding the optimal answer
14:50:31 <CosmicRay> hah
14:50:55 <CosmicRay> when trained on 10MB of text instead of just a few hundred lines, maybe it's not as good at finding the right things in a short amount of itme
14:50:59 <boegel> MegaMonad: cosmicray ML weenie
14:51:00 <MegaMonad> boegel: Cosmicray: because if you want ml you know type info, but also sort of weenie.
14:51:06 <CosmicRay> hah
14:51:08 <Igloo> blackdog: I think one of the best things darcs has done for me is that whenever I touch a piece of source now I put it in a repo on urchin so I have a better defined canonical location  :-)
14:51:38 <Igloo> It'll still bitrot, of course, but at least I'll know where to find the rotting corpse
14:51:46 <stepcut> what is the 'best' library for generating xml ?
14:52:01 <CosmicRay> if anyone knows of a better learning ai than megahal, please let me know, too
14:52:27 <Igloo> I think anything markov chains based is pushing the definition of "learning AI"
14:52:48 <CosmicRay> stepcut: I don't know, it looks like there are at least two
14:52:50 <Igloo> shrldu, for example, is a far better fit for that spec, I'd say
14:53:13 <CosmicRay> haxml and the haskell xml toolbox
14:53:46 <CosmicRay> SHRDLU was written in MacLisp for the ITS system, vintage 1970.
14:53:48 <CosmicRay> that one?
14:54:20 <CosmicRay> hmm. greg sharp.  I've heard that name before.
14:54:37 <stepcut> CosmicRay: yeah, if there was only one, I wouldn't have a problem :0
14:54:50 <CosmicRay> <MegaMonad> Sharp: sounds like arrows are a) sharp pointy sticks  b) generalizations of monads  c) a mark to indicate both.
14:54:51 <blackdog> Igloo: *grin* yeah. my problem is that I've got an asymmetrical connection home, so if I forget to sync with uni, I've got a looooong wait for source.
14:54:53 <boegel> to everyone who wants to see my progress with transparency in my raytracer: http://studwww.ugent.be/~kehoste/thesisPublic/website/transp/
14:55:27 <boegel> I don't get the strange 'thingie' in the images of the second test, but I'll figure it out probably :p
14:55:43 <Igloo> blackdog: Well, urchin is some friends' colo'ed machine. I don't actually do any work on it, but that is another benefit - effortless backups  :-)
14:58:12 <Igloo> Hmm, is there a way to import I# without getting a duplicate import Int warning (other than explicitly hiding Int from the prelude)?
14:58:55 <Lunar^> Igloo: ask glasgow-haskell-users ?
15:01:29 <CosmicRay> MegaMonad: how's the weather in glasgow?
15:01:31 <MegaMonad> CosmicRay: It likely that if glasgow-exts might give you a sort of managed to come up with something like an (abelian?) group plus another operator, where the monads implementation chooses between increasing the number of shapes and checks if the motion of bodies; bodies find no resistance from the comments that give names to the weather.
15:05:18 <blackdog> Igloo: how much stuff do you keep in darcs? I've been thinking about keeping a skeleton homedir in there... it'd certainly be nice to have stuff like .xemacs in there
15:05:54 <Igloo> Not my home directory stuff
15:06:50 <Igloo> Just libraries, programs, papers, talks
15:07:23 <whyrph> so ..this might not be the best place to ask this, but I can't get ghc to find wxHaskell
15:07:29 <whyrph> and google only returned 3 not-so-helpful hits
15:08:18 <whyrph> it gives the "failed to load interface for" error
15:08:36 <CosmicRay> megamonad will be right back....
15:08:38 <Lemmih> Are you trying to load wxHaskell with GHCi?
15:08:45 <whyrph> no
15:08:57 <whyrph> loading a sample wxhaskell program with regular ghc
15:09:02 <MegaMonad> Welcome to our own secure middleware, which had more mathematical symbols.
15:09:33 <Darius> I'm not sure what error GHC gives for not adding -package, but you are adding -package wx right?
15:09:39 <ski_> MegaMonad: what is your middleware called ?
15:09:45 <MegaMonad> ski_: What result do all my time with my l33t hacker has rerouted then encryption on our own secure middleware, which had more urge to leave now.....
15:10:10 <whyrph> er .. would adding -package wx happen in the file or on command line?
15:10:26 <vegai> "Firefox's biggest obstacle is lazy programming" (zdnet.com) :-)
15:10:33 <Oejet> MegaMonad: Did you participate in the ICFP programming contest?
15:10:39 <MegaMonad> Oejet: The icfp is the programming contest.
15:10:51 <whyrph> er ..huh
15:10:55 <CosmicRay> MegaMonad: did you win?
15:10:57 <whyrph> that may have been it
15:11:03 <MegaMonad> CosmicRay: And i want to win the haskell constructs to help me i should add something out of it.
15:11:47 <CosmicRay> <MegaMonad> The reason i ask igloo to do icfp in a system where the case, on a category theory can improve your code, then it's too late to unicycle.
15:12:05 <Lemmih> MegaMonad: You babble a lot.
15:12:12 <MegaMonad> Lemmih: Oh, this is me on it a lot.
15:12:23 <Darius> commandline (if that's not what "that may have been it") was about.
15:12:25 <whyrph> hmm. ..yeah, that got it to recognize it; now it just spends about 3 seconds outputting nothing
15:12:29 <whyrph> hmm
15:12:58 <Lemmih> whyrph: That's good. No errors.
15:13:18 <Lemmih> whyrph: Now execute the program you just compiled.
15:13:23 <whyrph> one sec
15:13:25 <Darius> Well, my problem with wxHaskell (though it may and probably isn't its fault) is that linking it to a program takes forever and then exhausts memory.
15:13:38 <ski_> <MegaMonad> Philippa: yes, it's nearly 4am, should i write up epigram as an argument to ban greek letters.
15:13:40 <CosmicRay> you mean at build time?
15:13:46 <CosmicRay> haha
15:14:18 <Darius> When compiling.  Running a program in GHCi with it is reasonable. CosmicRay: No.  When linking it to an -application-.
15:14:37 <Lemmih> Darius: Running Windows?
15:14:41 <CosmicRay> huh, that's weird, I wouldn't have thought ld would be bad
15:14:43 <Darius> Lemmih: Yes.
15:14:48 <CosmicRay> ah.
15:15:09 <Lemmih> It's _so_ annoying that wxHaskell is nicer to use on a windows box (-:
15:15:13 <Igloo> Does Windows have object splitting?
15:15:18 <CosmicRay>  7068 jgoerzen  25   0  546m 546m 1516 R 99.3 61.7   3:04.45 megahal
15:16:02 <blackdog> Yow.
15:16:03 <stepcut> 'ar' takes > 512MB when building ghc on my freebsd machine (which has only 128MB or RAM)
15:16:12 <whyrph> uh ..so yeah, I'm a little bit of a noob. .how do I run the compiled program exactly?
15:16:18 <CosmicRay> blackdog: yeah, it was worse when I tried to add in the logs back to 2001 :-)
15:16:21 <CosmicRay> whyrph: what OS?
15:16:24 <whyrph> linux
15:16:30 <CosmicRay> whyrph: ./executablename
15:16:32 <Darius> did you specify the output file name?
15:16:34 <whyrph> no
15:16:36 <CosmicRay> ahh
15:16:41 <CosmicRay> ghc --make -o foo foo.hs
15:16:42 <CosmicRay> ./foo
15:16:44 <Lemmih> ./a.out
15:16:44 <Darius> Then it's a.out
15:17:02 <whyrph> ahha!
15:17:57 <Darius> Igloo: I used object splitting when I was building earlier GHCs, but I don't think that that's the problem here.
15:18:10 <Darius> (Though it does really kill link times)
15:18:57 <ski_> <ski_> a.out
15:18:57 <ski_> <MegaMonad> Functional coding appears to be a functor in category theory), the functor f and g which will be cleaner..
15:19:23 <Darius> The only file that looks like it's split is the DLL wrapper.
15:19:25 <CosmicRay> well.  that certainly was a lot out of a.out :-)
15:19:37 <ski_> yeah, thought so too
15:19:41 <CosmicRay> I've seen a couple of programs use that split-objs feature and I've never understood why
15:19:45 <CosmicRay> what is that for?
15:19:54 <Darius> Reducing exe space
15:20:01 <CosmicRay> how does that work?
15:20:30 <CosmicRay> <MegaMonad> All this wanker :: io -> whack (q, w, e, r, t, y) <== blar :: huh business is more like arch, as i have all sorts of output is done in a way to think about _what_ algorithm you're writing, rather than doing something in haskell.
15:20:34 <Darius> It puts each function in it's own section so that you can link only what you need.
15:21:03 <CosmicRay> hmm, is that useful even if you're installing it as a systemwide .a?
15:21:10 <CosmicRay> or just if it's in an individual project tree?
15:21:17 * CosmicRay is not really up on static linking semantics
15:21:22 <Darius> How did (q, w, e, r, t, y) pop out.  I see the pieces but not the totality.
15:21:27 <Igloo> .a's are statically linked with
15:21:39 <CosmicRay> it popped out?
15:21:52 <CosmicRay> maybe megamonad learned color.
15:21:53 <CosmicRay> hmm.
15:22:55 <CosmicRay> Darius: so when statically linking, the linker includes the entire .o file that any given symbol is mentioned in?
15:23:05 * CosmicRay ponders that it would be slick to see ghc generate .so files.
15:24:00 <Darius> CosmicRay: apparently.
15:24:25 <CosmicRay> well, I guess that's better than including the entire .a file.... :-
15:24:54 <Igloo> There's some work on that, but it's again non-portable
15:25:05 <CosmicRay> really
15:25:14 <CosmicRay> that would be very interesting
15:25:28 <CosmicRay> it shouldn't be too hard to make it work at least on elf-based systems with a gnu toolchain, I'd hope
15:25:53 <Igloo> I get the impression that's not the case
15:26:02 <CosmicRay> hmm.
15:26:11 <CosmicRay> it's pretty easy to generalize that in C, anyway
15:26:27 <Igloo> Patches will be welcomed  :-)
15:26:30 <CosmicRay> maybe the problem is ghci?
15:26:50 <CosmicRay> Igloo: pfft, get cracking on deflate :-)
15:27:41 <CosmicRay> Igloo: did you see david's message on -haskell?  He really wanted the gz stream as a Handle, so he had it pipe its output to itself via threading
15:27:45 <CosmicRay> that just sounds nasty
15:28:06 <Igloo> !
15:28:25 <CosmicRay> err s/-haskell/libraries/
15:28:26 <Igloo> He wants it for darcs, though, and I doubt it's going to be up for that without specialisation for darcs' FastPackedStrings
15:28:35 <CosmicRay> ah
15:28:38 <CosmicRay> I wondered
15:28:44 <CosmicRay> actually it sounds like he already has it for darcs
15:28:52 <Igloo> He calls zlib with the FFI
15:28:57 <CosmicRay> right
15:29:05 <CosmicRay> and then pipes that to himself :-)
15:29:16 <CosmicRay> a quality zlib binding would be nice
15:29:57 <Igloo> Re deflate, I'll probably look at it soon, but if it involves lots of time I'll probably put it off again
15:30:25 <Igloo> I don't think any piping is currently done
15:30:39 <CosmicRay> Igloo: that's ok, jk
15:31:19 <CosmicRay> "For now, I guess
15:31:20 <CosmicRay> I'll stick with my tried and true (and butt ugly) zlib ffi interface, which
15:31:20 <CosmicRay> uses threads and pipes to implement a gzOpenFile."
15:31:32 <CosmicRay> openGZippedFile :: IOMode -> FilePath -> IO Handle
15:32:19 <Igloo> Ah, OK, that's not darcs then
15:32:53 <Igloo> Oh, tell a lie, it's just called gzOpenFile
15:33:09 <boegel> oh, I've wanted to ask something... can I check with the IO monad if a file exists ? (depending on a String representing the filepath)
15:33:55 <Darius> @type IO.doesFileExists
15:33:55 <CosmicRay> yes...
15:33:55 <Igloo> But only gzReadFilePS is used
15:33:56 <lambdabot> bzzt
15:33:57 <Darius> @type IO.doesFileExist
15:33:58 <lambdabot> bzzt
15:34:08 <CosmicRay> System.IO maybe
15:34:10 <Igloo> (which is just a straight call to zlib)
15:34:11 <Darius> @type fileExists
15:34:13 <lambdabot> bzzt
15:34:28 <CosmicRay> @type System.Directory.doesFileExist
15:34:29 <lambdabot> System.Directory.doesFileExist :: FilePath -> IO Bool
15:34:37 <CosmicRay> tada
15:34:47 <CosmicRay> megamonad: doesFileExist?
15:34:50 <boegel> @info FilePath
15:34:51 <lambdabot> -- FilePath is a type constructor
15:34:51 <lambdabot> type FilePath = String
15:34:55 <MegaMonad> CosmicRay: You define an io bool, inferred io [b], in mapm doesfileexist s.
15:36:13 <CosmicRay> <CosmicRay> is shapr fun?
15:36:16 <CosmicRay> <MegaMonad> Fun fun fun.
15:36:24 <Darius> boegel:  What are you leaning toward as causing the problem with transparency?  When I added transparency to a C++ raytracer a long time ago, it went smoothly for me.
15:36:30 <Darius> refraction on the other hand...
15:37:15 <boegel> Darius, what's the difference between transparency and refraction ?
15:37:27 <boegel> transparency => refraction
15:38:18 <Pseudonym> Thankfully, refraction doesn't occur very often in "real" scenes.
15:38:29 <Pseudonym> So you don't really need it.
15:38:47 <Pseudonym> If you're just trying to get work done, anyway. :-)
15:39:06 <Darius> boegel: You know.  You're right, I was thinking reflection.  So ignore what I said.
15:39:09 <boegel> Pseudonym, why doesn't it occur in real scenes ?
15:39:15 <Pseudonym> Look around you.
15:39:17 <Darius> My problem with refraction was speckles.
15:39:20 <Pseudonym> How much refraction do you see?
15:39:23 <boegel> Darius, damn, I thought you might be able to help me ;)
15:39:31 <Pseudonym> If you look hard, you might be able to find one or two examples.
15:39:43 <Pseudonym> And they are generally a) small, and b) easily faked.
15:39:59 <Pseudonym> (Wearing glasses doesn't count; that's a camera lens.)
15:40:07 <Igloo> Isn't coding refraction easy once you have done reflection?
15:40:29 <boegel> Pseudonym, that's probably because you don't have many really transparent stuff in your environment
15:40:29 <Darius> Igloo: I thought it would be only a little more difficult.
15:40:36 <Pseudonym> boegel: Sure I do.
15:40:38 <boegel> Igloo, I guess not :)
15:40:44 <Darius> But since I lost interest in the project I never did figure out the bug.
15:40:51 <Pseudonym> I have a lot of glass CRT monitors around here.
15:40:56 <Pseudonym> They have a transparent later.
15:41:03 * Igloo doesn't see why not
15:41:03 <Pseudonym> layer
15:41:05 <boegel> Igloo, you have to take lights behind the object into account, and stuff like that
15:41:38 <Pseudonym> If you need to track the size of each ray (and most modern raytracers do), then the maths for refraction are a little tricky.
15:42:00 <Pseudonym> If you think of a "ray" as a cone, then refraction does weird stuff to the shape of the cone.
15:42:01 <Darius> It also adds interiors ish and rays that intersect the same object at multiple points.
15:42:14 <Igloo> Someone should write a Free povray superset in Haskell
15:42:18 <boegel> Igloo, also, it's quite special because you travel inside objects too, and you don't when you're implementing reflection
15:42:18 <Pseudonym> But no more weird than reflection, in principle.
15:42:31 <Pseudonym> Igloo: No they should not.
15:42:40 <boegel> Pseudonym, why not ?
15:42:42 <Pseudonym> Someone should write a free Mental Ray or Entropy superset in Haskell.
15:42:55 <Igloo> Pseudonym: Are they non-Free?
15:43:03 <Pseudonym> Yes, they are non-free.
15:43:03 <Darius> Hey Pseudonym, what are your opinions with regards to cache-oblivious algorithms?
15:43:05 <boegel> Pseudonym, what's Entropy ?
15:43:27 <Pseudonym> boegel: Now-defunct renderer written by Exluna.  Written by a bunch of ex-Pixar employees.
15:43:28 <Igloo> OK, well if they have a superset of the functionality then a povray frontend could easily be made
15:43:42 <Pseudonym> Exluna was sued by Pixar, and then swallowed up by NVIDIA.
15:43:47 <Pseudonym> Long story.
15:43:50 <Pseudonym> But it was a nice renderer.
15:43:53 <Igloo> I think it's necessary for widespread adoption, though
15:44:02 <Pseudonym> No, I don't think so.
15:44:17 <Pseudonym> Povray is little-used outside the hobbyist market.
15:44:26 <Pseudonym> In fact, it's NOT used outside the hobbyist market.
15:44:52 <Pseudonym> Guess it depends who you want to adopt it.
15:44:54 <Igloo> It's almost /only/ used in the OS community, though
15:45:09 <Igloo> (despite it not being OS for the minute)
15:45:17 <Igloo> Oh, that's the wrong way round
15:45:19 <Pseudonym> Igloo: Actually, that's not entirely true.
15:45:24 <Igloo> IM it's almost the only thing used
15:45:32 <Pseudonym> But I'm biassed on this point.
15:45:37 <Igloo> Well, it's my impression at least
15:45:37 <Pseudonym> I hack on Aqsis.
15:45:44 <CosmicRay> <MegaMonad> Boegel: nvidia is the ideal compiler for a job at pixar, and then swallowed up by debian-legal archive.
15:45:56 <Igloo> Anyway, so long as we're all agreed someone should write a great Free on to replace it I'm happy  :-)
15:46:08 <Pseudonym> And Aqsis is definitely used, due to it being RenderMan-compatible.
15:46:16 <Pseudonym> Which means it works with non-OS tools.
15:46:38 <Pseudonym> Whereas povray only works with povray tools.
15:46:45 <Pseudonym> More or less.
15:47:11 * boegel starts to think the 'thingie' is a divide by zero bug or something like that
15:48:06 <Igloo> Hmm, what's aqsis written in?
15:48:35 <Pseudonym> C++.
15:48:45 <Pseudonym> However, I'm rewriting the shader compiler in Haskell.
15:48:54 <Pseudonym> Only the rest of the team doesn't knwo it yet. :-)
15:49:05 <Igloo> :-)
15:49:06 <Pseudonym> I actually wrote the first pass of the compiler in Haskell for a former employer.
15:49:15 <Pseudonym> And I still own the IP!
15:49:30 <Pseudonym> I do need to excise the employer-specific bits before I can release it.
15:49:36 <Darius> <Darius> Hey Pseudonym, what are your opinions with regards to cache-oblivious algorithms? (in general, not in regards to raytracing)
15:49:53 <Pseudonym> Darius: Sorry, hang on.
15:56:14 <Pseudonym> Boss key. :-)
15:56:32 <Pseudonym> OK.  I think that cache-friendly algorithms are becoming increasingly important.
15:56:44 <Pseudonym> I don't think there's such a thing as a cache-oblivious algorithm.
15:56:59 <Pseudonym> In general, cache-friendly algorithms might need to be tuned to cache or TLB size.
15:57:26 <Pseudonym> (TLB size, by the way, is an under-appreciated thing.  Modern Pentiums don't have a TLB big enough to "cover" the L2 cache size.)
15:58:13 <wagle> what do you mean by cache-oblivious? 
15:58:35 <Pseudonym> I don't know.
15:58:46 <wagle> haha..
15:58:56 <Pseudonym> I'm guessing it means "insensitive to cache".
15:59:06 <CosmicRay> let's ask megamonad!
15:59:11 <CosmicRay> megamonad: what is cache-oblivious?
15:59:18 <MegaMonad> CosmicRay: Cjk ideograph. "Right conduct, righteousness" pronounced lang2 yi4, gi, yoi yoshitosuru yoku or uy depending on what you mean by cache-oblivious?
15:59:24 <Pseudonym> It could mean "it runs okay regardless of how much cache you have".
15:59:47 <Pseudonym> Or it could means "it's written ignoring cache".
16:00:05 <Pseudonym> If you think of RAM as being a cache for virtual memory, then any algorithm which ignores cache completely is going to suck.
16:00:14 <wagle> my candidates were (1) didnt consider the cache design, and (2) works well on all cache designs
16:00:24 <Darius> http://supertech.lcs.mit.edu/cilk/papers/abstracts/abstract3.html#afterheading
16:00:25 <Pseudonym> Right,.
16:00:48 <wagle> i'd restrict cache designs to "reasonable cache designs"
16:01:10 <Pseudonym> www.cs.duke.edu/~junyang/courses/ cps216-2003-spring/papers/rao-ross-2000.pdf 
16:01:15 <Pseudonym> Good paper.
16:01:32 <Pseudonym> Oh, interesting.
16:01:33 <Darius> It's algorithms proved optimal (or at least to have some time/space/disk IO) bound without fixing the actual cache and total memory sizes.
16:01:36 <wagle> mmm
16:01:56 <Pseudonym> This looks very interesting.
16:02:34 <Darius> Though typically proven in a two-level heirarchy, in practice (and I think in theory), it leads to an algorithm being optimal (or whatever) on all cache heirarchies simultaneously.
16:02:51 <wagle> i can (non-constructively?) imagine the existance of (bizarre) cache designs that you would have to tune a cache oblivious algorithm for..
16:02:56 <Pseudonym> That's very interesting.
16:03:10 <Pseudonym> BTW, many Haskell programs are automatically cache-friendly.
16:03:19 <Darius> Pseudonym:  There is an asymptotic disk IO separation between the class of cache-aware algorithms and cache-oblivious ones for some problems.
16:03:41 <wagle> of course, that might exceed my use of the "reasonable" qualifier
16:03:42 <Pseudonym> In a lazy language, you use an object as soon as it's created.
16:03:43 <wagle> 8)
16:03:50 <Pseudonym> That's cache-optimal.
16:03:58 <Darius> wagle: That's why theorists make assumptions that the cache has some not too unreasonable properties.
16:04:02 <Pseudonym> It also helps if you have a generational GC.
16:04:13 <Pseudonym> Ideally, the youngest generation should be smaller than L2 cache.
16:06:01 <wagle> Pseudonym: how are many haskell programs _automatically_ cache friendly?  (i expect the opposite)
16:06:32 <Pseudonym> Because lazy evaluation introduces high locality.
16:06:40 <Pseudonym> An object is used immediately after it's created.
16:06:54 <Pseudonym> Of course there's a lot of other overhead to take into account.
16:06:58 <Pseudonym> Cache isn't everything.
16:07:49 <wagle> laziness permits an object to delay its use after creation [?]
16:08:08 <Pseudonym> Well, an object can be used more than once.
16:08:38 <wagle> i'm thinking in terms of cache lines
16:09:04 <Pseudonym> Actually, hmmm.
16:09:19 <Pseudonym> I'm wondering how you could modify the STG machine to use cache prefetching.
16:09:50 <Pseudonym> Say you had this: f x y = x + y
16:09:56 <Pseudonym> This is strict in x and y.
16:10:02 <Pseudonym> So prefetch y while you're evaluating x.
16:10:05 <boegel> I'm going to bed... bye everyone
16:10:09 <Pseudonym> Night.
16:10:15 <wagle> night
16:10:54 <Darius> night
16:13:14 <wagle> what if prefetching y flushes x?  >)  (not too likely, but its a concern of some of the hyperoptimization courses i audited years ago)
16:13:41 <Pseudonym> Well it is possible.
16:14:03 <Pseudonym> It'd be interesting to try, though.
16:14:47 <wagle> more a problem for matrix operations on large matrices, where balancing memory accesses with flops was the main concern..  
16:15:15 <wagle> i hafta go now, though
16:15:41 <Pseudonym> Yeah, I guess when memory access is regular you're more likely to hit that sort of thing.
16:15:43 <Pseudonym> Byw.
16:15:45 <Pseudonym> Bye
16:17:05 <wagle> hmm.. "asymptotically optimal" isnt the same as "faster on today's problem of size N"
16:17:08 <wagle> bye
16:18:04 <Darius> There are empirical studies and the aim is same-ish to a cache-aware algorithm (assuming you were referring to cache-oblivious algorithms and that you are still reading)
16:18:20 * Pseudonym has the thesis open
16:19:11 <Darius> I'm not sure how good a read that is (mostly because I'm not sure -what- it is though I've probably read it).  I just grabbed it for the abstract.
16:19:37 <Darius> There are quite a few papers starting from around 1999 (if I remember correctly)
16:19:50 * Pseudonym will ask Google Scholar
16:23:59 <Darius> Engineering Cache-Oblivious Sorting Algorithms is a well-rounded read on the longer end (184 pages)
17:18:42 <cm> y0
17:37:37 * desrt pokes cm
17:51:38 * cm slaps desrt 
17:51:43 <cm> :o
17:51:57 <Nioate> yup
17:53:36 <cm> yup
17:53:47 * cm waits :|
18:14:32 <Lemmih> @seen shapr
18:14:33 <lambdabot> I saw shapr leaving #darcs 1 day 3 hours 4 minutes 24 seconds ago.
19:00:01 <cm> hum.
19:00:14 <Riastradh> Mmmh?
19:00:29 <cm> any idea why bind would fail with "resource busy" when i sClose'd both the listening socket and the client connection socket?
19:00:41 <cm> (Network.Socket.bind)
19:01:01 <monochrom> you mean close then bind?
19:01:06 <Riastradh> Are you certain that laziness is not biting you in the butt?
19:01:08 <cm> actually, I'm not sClose'ing the client socket, but hClose'ing the handle which I got from socketToHandle
19:02:39 <cm> well, I got my startServer :: IO Socket which starts listening, then processOne :: Socket -> IO (), which accepts a connection and processes it (and hCloses the handle from socketToHandle of the "client socket")
19:03:15 <cm> then I do {s <- startServer; processOne s; sClose s}
19:03:25 <cm> when I do that once again, I get the error message
19:10:19 <cm> http://www.haskell.org/hawiki/HaskellIrcPastePage
19:12:23 <cm> main >> main gives "*** Exception: bind: resource busy (Address already in use)"
19:13:13 <monochrom> If you wait for a few minutes, will the problem go away?
19:13:33 <cm> yep
19:13:56 <dons> is this relevant:
19:13:56 <monochrom> It is probably your OS doing it.
19:13:57 <dons> -- NOTE: To avoid the \"Address already in use\"
19:13:57 <dons> -- problems popped up several times on the GHC-Users mailing list we
19:13:57 <dons> -- set the 'ReuseAddr' socket option on the listening socket.  If you
19:13:57 <dons> -- don't want this behaviour, please use the lower level
19:14:00 <dons> -- 'Network.Socket.listen' instead.
19:14:38 <dons> that's in Network.hs
19:15:37 <cm> for which function?
19:16:35 <dons> I'm just looking at the src, but haven't been following the discussion closely
19:16:59 <cm> I mean, is that comment in front of some (which) function in Network.hs?
19:17:21 <cm> ah, listenOn. cute, less work ;-)
19:17:31 <dons> oh, yep.
19:17:52 <dons> http://www.haskell.org/ghc/docs/latest/html/libraries/network/Network.html
19:18:16 <cm> thanks
19:44:07 <CosmicRay> it's quiet in here tonight.
19:44:16 <CosmicRay> megamonad, can you stir things up a bit?
19:44:16 <tautologico> indeed
19:44:18 <Pseudonym> That's because it's not night.
19:44:21 <MegaMonad> CosmicRay: That is me using the a, but i cant cook the noodles in stir done.
19:44:39 <CosmicRay> heh
19:44:45 <CosmicRay> 9:45pm here
19:44:53 <Pseudonym> megamonad, who are you?
19:44:59 <MegaMonad> Pseudonym: Is that using __getitem__ and __call__ to construct a render pipeline with them.
19:45:07 <CosmicRay> heh
19:45:07 <tautologico> 0:46 am
19:45:18 <CosmicRay> MegaMonad: who is pseudonym?
19:45:23 <Pseudonym> 2:45 pm
19:45:25 <MegaMonad> CosmicRay: Pseudonym: i couldn't compile it (well a similar job but is there a way of geting a filesize that i have no idea. I like 'em, though.
19:45:35 <CosmicRay> hmm.
19:45:42 <CosmicRay> I think I need to strip nicks off the patterns I give it.
19:46:01 <Pseudonym> Is megamonad producing some kind of paraphrase?
19:46:09 <Pseudonym> Like markov chaining or something?
19:46:11 <CosmicRay> Pseudonym: to answer your question, megamonad is a MegaHal bot that has, as its training corpus, the IRC logs for this channel over 2004
19:46:14 <CosmicRay> yes
19:46:18 <Pseudonym> Cool.
19:46:27 <tautologico> :)
19:46:29 <Pseudonym> megamonad, who is megahal?
19:46:31 <CosmicRay> it appears to do rather poorly with IRC logs as input, however :-)
19:46:45 <MegaMonad> Pseudonym: 04.45 Megahal.
19:46:53 <tautologico> it could balance the parentheses at least :)
19:46:58 <CosmicRay> heh
19:47:23 <CosmicRay> megamonad, do you like java?
19:47:28 <MegaMonad> CosmicRay: To me java is a monomorphic type, and i call the whole block instead of $ if you dislike ghc ?
19:47:34 <CosmicRay> hahaha
19:47:37 <tautologico> lol :)
19:47:58 <CosmicRay> "To me java is a monomorphic type" should go in the topic :-)
19:48:19 <CosmicRay> megamonad, what about haskell?
19:48:22 <Pseudonym> @topic+ "To me java is a monomorphic type"
19:48:22 <lambdabot> Sorry, I don't know the command "topic+", try "lambdabot: @listcommands
19:48:25 <MegaMonad> CosmicRay: Mail me urine samples and more people on the @#haskell@ channel, including, but not 5.8.5.
19:48:37 <Riastradh> @topic-cons "To me java is a monomorphic type"
19:48:43 <Pseudonym> That's it.
19:48:46 <Riastradh> @listmodules
19:48:46 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy
19:48:46 <lambdabot> ,"dynamic","eval","hello","karma","quote","seen","state","system","topic
19:48:46 <lambdabot> ,"type"]
19:48:51 <Riastradh> @listcommands topic
19:48:52 <lambdabot> Module topic provides the following commands: ["topic-tell","topic-cons
19:48:52 <lambdabot> ,"topic-snoc","topic-tail","topic-init"]
19:48:59 <Pseudonym> @topic-tell
19:48:59 <lambdabot> don't know that channel
19:49:02 <Pseudonym> @topic-tell #haskell
19:49:06 <Riastradh> @topic-snoc "To me java is a monomorphic type"
19:49:17 <CosmicRay> @topic-cons #haskell "<MegaMonad> To me java is a monomorphic type"
19:49:18 <Riastradh> @topic-snoc #haskell "To me java is a monomorphic type"
19:49:18 <lambdabot> topic doesn't parse
19:49:18 <lambdabot> topic doesn't parse
19:49:26 <CosmicRay> @topic-cons #haskell "To me java is a monomorphic type"
19:49:26 <Pseudonym> Hmmm.
19:49:26 <lambdabot> topic doesn't parse
19:49:32 <Riastradh> Methinks the topic module is perhaps broken.
19:49:39 <CosmicRay> @topic-cons #haskell To me java is a monomorphic type
19:49:39 <lambdabot> topic doesn't parse
19:49:42 <CosmicRay> yup :-)
19:50:12 <Riastradh> It's too big, anyway.
19:50:12 <CosmicRay> megamonad: Who is Simon?
19:50:14 --- topic: set to '["The Nov 2004 HC&A Report is released! - http://haskell.org/communities/","Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - http://www.cis.upenn.edu/proj/plclub/contest/results.php#first", "To me java is a monomorphi' by Pseudonym
19:50:15 <Riastradh> The topic, that is.
19:50:18 <CosmicRay> rats
19:50:19 <Pseudonym> Ah, so it is.
19:50:24 <MegaMonad> CosmicRay: Heffalump wonders if simon was actually using haskell, 2nd edition.
19:50:35 --- topic: set to '["The Nov 2004 HC&A Report is released! - http://haskell.org/communities/","Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers!", "To me java is a monomorphic type"]' by Pseudonym
19:50:38 <Pseudonym> That's better.
19:50:43 <CosmicRay> sweet
19:50:57 <CosmicRay> megamonad, you should be proud.
19:50:58 <Riastradh> You might mention 'ICFP contest 2004' in the penultimate item, Pseudonym.
19:51:02 <MegaMonad> CosmicRay: I heard there is no instance of monad transformers and is proud to report the more important than speed, especially for new contributors to contact me on a list but i remember correctly.
19:51:10 --- topic: set to '["The Nov 2004 HC&A Report is released! - http://haskell.org/communities/","Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - ICFP 2004", "To me java is a monomorphic type"]' by Pseudonym
19:51:15 --- topic: set to '["The Nov 2004 HC&A Report is released! - http://haskell.org/communities/","Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - ICFP contest 2004", "To me java is a monomorphic type"]' by Pseudonym
19:51:17 <Pseudonym> OK.
19:51:20 <Pseudonym> That works.
19:51:31 <CosmicRay> see what a little boredom can do :-)
19:51:45 <Pseudonym> megamonad, what is haskell?
19:51:51 <MegaMonad> Pseudonym: Well, i'd ask john hughes about using haskell actually.
19:51:59 <Pseudonym> Good advice.
19:52:03 <Pseudonym> megamonad, what is scheme?
19:52:05 * CosmicRay has to google john hughes now
19:52:09 <Riastradh> MegaMonad, but what _is_ Haskell?
19:52:11 <MegaMonad> Pseudonym: Man i love scheme.. So i'll do freelance coding of this is a neat solution.
19:52:17 <MegaMonad> Riastradh: It's is always stupid peoples to do this in haskell.
19:52:22 <Riastradh> Hahaha.
19:52:29 <Pseudonym> You traitor!
19:52:36 <Riastradh> QuotesPage!
19:52:44 <tautologico> :)
19:52:45 <Pseudonym> Mind you, megamonad can't balance its parentheses.  So I'd love to see it's scheme code.
19:52:51 <Pseudonym> s/it's/its/
19:52:57 <tautologico> MegaMonad, what do you think of C ?
19:53:08 <MegaMonad> tautologico: Igloo goes to me and i to think of c ?
19:53:22 <Pseudonym> megamonad, what do you think of scheme?
19:53:24 <CosmicRay> MegaMonad: have you ever seen shapr on his unicycle?
19:53:28 <MegaMonad> Pseudonym: Drift is a value out of me i think of scheme?
19:53:44 <MegaMonad> CosmicRay: Shapr: substitution and composition is also dead, or was it the scope of the unicycle seems to be me not to read a module i write my_map(z, [x|xs]):- and so on.
19:53:56 <Pseudonym> megamonad, what do you think of prolog?
19:54:02 <MegaMonad> Pseudonym: (Me is not true, as soon as it should, since it affects me when you think prolog is good enough at least.
19:54:04 <CosmicRay> hah, "or was it the scope of the unicycle"
19:54:12 <Pseudonym> megamonad, what do you think of unicycle?
19:54:18 <MegaMonad> Pseudonym: Shapr's karma has been me, and the other route, with verification by unit testing with haskellmode, but editor and i to think of unicycle?
19:54:28 <CosmicRay> lol
19:54:34 <Pseudonym> megamonad, what do you think of megamonad?
19:54:40 <MegaMonad> Pseudonym: That's me and i to think of megamonad?
19:54:53 <tautologico> MegaMonad, do you like xml ?
19:54:54 <CosmicRay> megamonad, you sound like eliza.
19:54:59 <MegaMonad> tautologico: Someone took the version number part of xml in haskell, and if i off your access for that one of the xml renderer, that should be deprecated in favour of a short name for it.
19:55:05 <MegaMonad> CosmicRay: I to do but me, that's a cool language. Makes you sound like eliza.
19:55:25 <Pseudonym> megamonad, are you a poor cousin of lambdabot?
19:55:29 <CosmicRay> MegaMonad: can you give me the tutorial?
19:55:31 <MegaMonad> Pseudonym: Is lambdabot the same type names are as one. Like a cousin of my poor little box.
19:55:37 <MegaMonad> CosmicRay: Hram: http://www.haskell.org/tutorial/goodies.html and http://en.wikipedia.org/wiki/a_new_kind_of_functions.. Mixed-case is for notes you make a new version of haxml so that you will be happy for you.
19:55:48 <CosmicRay> wow, a half-useful answer.
19:56:03 <CosmicRay> MegaMonad: what's a polymorphic type?
19:56:09 <MegaMonad> CosmicRay: And ;; after each statement for the type of the type will be polymorphic.
19:56:15 <CosmicRay> megahal is unrelated to lambdabot, fyi
19:56:22 * Pseudonym thought he'd ask
19:56:24 <CosmicRay> in fact there is little haskell code involved with megahal
19:56:30 <Pseudonym> Ah.
19:56:32 <CosmicRay> just my little logfile sanitizer
19:56:37 <CosmicRay> megahal is written in, iirc, C.
19:56:47 <CosmicRay> and there is a little perl glue to turn it into a bot
19:56:50 <Pseudonym> megamonad, are you written in C?
19:57:00 <MegaMonad> Pseudonym: I to do so for me with that more to patterns than that, and without it being written in stone. It is c, but the translation somehow.
19:57:10 <CosmicRay> hah
19:57:13 <tautologico> MegaMonad, are you based on an order-2 markov chain ?
19:57:22 <MegaMonad> tautologico: Smerdyakov hires a team of 2 from the order in the chain of them are still thinking of a language.
19:57:55 <CosmicRay> btw everything said in this channel gets used to teach megamonad, even if it's not said directly to him
19:58:06 <tautologico> cool
19:58:13 <CosmicRay> megamonad, tautologico?
19:58:18 <MegaMonad> CosmicRay: Tautologico: i think that's correct.
19:58:24 <CosmicRay> megamonad, tautologico?
19:58:29 <MegaMonad> CosmicRay: Tautologico, "phd student" means you are talking at the moment.
19:58:33 <Pseudonym> megamonad, I am you and you are me and we are all together?
19:58:34 <CosmicRay> haha
19:58:39 <MegaMonad> Pseudonym: If you insult and anger your teammates, they're not first class functions?
19:58:41 <tautologico> lol
19:58:44 <Pseudonym> LOL!
19:59:03 <tautologico> surreal theory
19:59:11 * CosmicRay rofls
19:59:19 <CosmicRay> my wife is wondering what is going on in here
19:59:22 <tautologico> MegaMonad, system F ?
19:59:30 <Pseudonym> It's the beatnik theory of functional programming.
19:59:31 <MegaMonad> tautologico: If f and f = f.
19:59:47 <Riastradh> MegaMonad, see how they run like pigs from a gun see how they fly!
19:59:53 <MegaMonad> Riastradh: And dislike the idea of a gun.
20:00:00 <Riastradh> MegaMonad, happiness is a warm gun.
20:00:06 <MegaMonad> Riastradh: Kosmikus|away: i said that licenses in the warm part of a gun.
20:00:09 <CosmicRay> MegaMonad: tonight, you and me, we're going to sneak over into #java-weenies and show them who's boss!  You bring the firepower and I'll bring the ddos client.  Bwahahaha.
20:00:15 <MegaMonad> CosmicRay: Need you to bring in the case of "who's checked out the weenies.
20:00:22 <Pseudonym> LOL!
20:00:35 * Riastradh is receiving odd looks from people about the room.
20:00:36 <Pseudonym> megamonad, are you evil?
20:00:42 <MegaMonad> Pseudonym: I seem to get into it if using jakarta collections would make such a limited form of you, and me, and i really, really evil question to the cabal package name, not a type error is on _zcmain_main_closurew.
20:01:16 <tautologico> wow :)
20:01:23 <CosmicRay> MegaMonad: I suspect that really, you are part of the Microsoft Cabal that's plotting to take over Haskell!!!
20:01:26 <tautologico> cabal and jakarta
20:01:29 <MegaMonad> CosmicRay: So cabal would be even easier, with generic haskell back to plotting.
20:01:37 <Pseudonym> I knew it!
20:01:39 <Riastradh> MegaMonad, we've uncovered your plan!
20:01:42 <Pseudonym> I knew generic haskell was part of it.
20:01:50 <MegaMonad> Riastradh: My category theory specify that there's so many files lying around here do.  You may have uncovered another bug in the wiki's css with the right plan?
20:02:17 <Pseudonym> megamonad: I think you are destroying the research imperative.
20:02:23 <MegaMonad> Pseudonym: I'm not clear to me the definition of research in the imperative way of putting everything in c.
20:02:35 <tautologico> hahahah
20:03:20 <Pseudonym> megamonad, do you dream of electric sheep?
20:03:22 <Riastradh> MegaMonad, you won't get away now that we've got you!
20:03:26 <MegaMonad> Pseudonym: Me trying to dream of electric sheep?
20:03:32 <MegaMonad> Riastradh: Oh, you won't be any of it we've been saying that haskell is that you can i dont need to be me not to copy&paste the type checker happy, even if you _prove_ that, say, for every element of 't' yet, though.
20:03:59 <Pseudonym> megamonad: Them's fighting words!
20:04:05 <MegaMonad> Pseudonym: Words is a bit of fighting.
20:04:31 <Pseudonym> megamonad: Shut up and show me the code.
20:04:37 <tautologico> MegaMonad, haskell is a warm gun
20:04:37 <MegaMonad> Pseudonym: He he he.  Just who is going to shut up and code it in the code you have a bunch of people here who haven't won yet, and of course: http://www.cs.uu.nl/docs/vakken/gp/lecture1.pdf.
20:04:43 <MegaMonad> tautologico: Er. Depends what you want in the warm part of a gun.
20:04:57 <CosmicRay> lol
20:05:00 <tautologico> what's that lecture ? :)
20:05:05 <Pseudonym> megamonad: Eeeeuuuw.
20:05:15 <MegaMonad> Pseudonym: The use of retracts to define the idem, then.
20:05:21 <CosmicRay> tautologico: 404, now :-)
20:05:24 <Riastradh> MegaMonad, you are the most effectively hilarious megahal bot I have encountered.
20:05:33 <MegaMonad> Riastradh: (Me is not being hilarious for the bot?
20:05:50 <CosmicRay> megamonad, tell me a story about cosmicray.
20:05:50 <Riastradh> MegaMonad, you just spoilt it.  A plague over your house.
20:05:55 <Pseudonym> megamonad: Happiness is a stray bullet.
20:05:56 <MegaMonad> CosmicRay: Cosmicray is a story in the archive, although i'm a hardcore gnomer at heart so it's useless to you.
20:06:02 <MegaMonad> Riastradh: I is the translator that decides wether to move from country to inspectors, they were kicking that same a in the house.
20:06:08 <MegaMonad> Pseudonym: In any case, there are a and one to have gotten off of a bullet?
20:06:43 <CosmicRay> megamonad, I need a Christmas present suggestion.
20:06:49 <MegaMonad> CosmicRay: Lambdabot's karma has been replaced by the code, send it to you in the a should be present.
20:07:05 <CosmicRay> megamonad, can you recommend any Haskell books?
20:07:11 <MegaMonad> CosmicRay: Maybe haskell is that i go to the books.
20:07:12 <Pseudonym> megamonad, what is the airspeed velocity of an unladen swallow?
20:07:17 <CosmicRay> heh
20:07:19 <MegaMonad> Pseudonym: Yeah, but with debian it depends on where you can do something stupid, like write a simple file format should only be allowed by a swallow off to bed now, good night everyone ! And wolfman8k , thanks for the velocity.
20:07:31 <CosmicRay> MegaMonad: you should have asked if he was asking about an African swallow.
20:07:37 <MegaMonad> CosmicRay: (Me is not meaningful unless you have in it? Asking on the tire pressure to dumb its typesystem down for some african language.
20:07:43 <Riastradh> MegaMonad, what is your favourite colour?
20:07:49 <MegaMonad> Riastradh: And colour it with my idea is that haskell's syntax in my case.
20:07:53 <tautologico> he likes (Me
20:08:00 <CosmicRay> yeah, that's weird
20:08:07 <Riastradh> MegaMonad, what is your quest?
20:08:07 <Pseudonym> megamonad, I represent the estate of Mr Robert Umboto, former head of the Nigerian interior ministry.
20:08:13 <MegaMonad> Riastradh: Shapr: no, at least it returns a finite list out of my best to recall itself with the quest for a valid, non-ended game, i have my head with a small facultiy.
20:08:19 <MegaMonad> Pseudonym: Bringert is head of the former could be done in the interior.
20:08:25 <CosmicRay> heh
20:08:43 <CosmicRay> MegaMonad: Quick!  Insult shapr before he gets back!  We haven't much time!
20:08:45 <Riastradh> MegaMonad, what is the type of the monad composition operator?
20:08:48 <MegaMonad> CosmicRay: He gets to make that an insult.
20:08:53 <tautologico> MegaMonad, what do you think about using haskell to improve the efficiency of nigerian spammers ?
20:08:54 <MegaMonad> Riastradh: "The type operator in a single monad used for composition.
20:09:00 <MegaMonad> tautologico: Efficiency of the spammers have many version numbers, you might try to ask me.
20:09:06 <blackdog> dear lord, please stop that - there's something distinctly eerie about locally well-formed but completely nonsensical sentences.
20:09:07 <tautologico> :)
20:09:14 <CosmicRay> haha
20:09:18 <blackdog> my poor brain is fragile enough
20:09:28 <Riastradh> MegaMonad, what do you have to say in response to blackdog?
20:09:37 <MegaMonad> Riastradh: Musasabi: what you wrote i tried the hugs' observe thingy, but it's not me, but the response to blackdog?
20:09:48 <blackdog> MegaMonad: no, YOUR mother
20:09:53 <MegaMonad> blackdog: My mother has a bunch of my surprise.
20:10:04 <blackdog> oh, i give up. i can't match that.
20:10:07 <CosmicRay> heh
20:10:27 <tautologico> don't even try :)
20:10:30 <CosmicRay> megamonad: I think you should soothe the frustrated blackdog.
20:10:39 <MegaMonad> CosmicRay: Blackdog: you might be a bit frustrated.
20:10:44 <CosmicRay> haha
20:10:52 <tautologico> I think it's order-1
20:11:09 <CosmicRay> tautologico: if you write a better megahal, I promise to train it and put the result up here :-)
20:11:14 <Pseudonym> megamonad: What order are you?
20:11:21 <MegaMonad> Pseudonym: Stepcut: theoretically, yes, but why do i do mean to offend if it were me i have a dead research area in the file in order to understand monads, btw.
20:11:25 <tautologico> CosmicRay: I wish I had the time :)
20:11:34 <Spark> when writing about type theory in latex, how do you do the 'arrow'
20:11:42 <Spark> in thi->thi
20:12:05 <tautologico> but it's very fun as it is :)
20:12:09 <CosmicRay> The resulting string of symbols[2] is used to train two 4th-order Markov models (Jelinek, 1986). One of these models can predict which symbol will following any sequence of four symbols, while the other can predict which symbol will precede any such sequence. Markov models express their predictions as a probability distribution over all known symbols, and are therefore capable of choosing likely words over unlikely ones. Models of 
20:12:09 <CosmicRay> order 4 were chosen to ensure that the prediction is based on two words; this has been found necessary to produce output resembling natural language (Hutchens, 1994).
20:12:16 <cm> \Rightarrow
20:12:20 <cm> or \rightarrow, even
20:12:28 <Spark> ahhh
20:12:29 <Spark> :)
20:12:51 <Spark> i tried \arrow \arr \right and \east before giving up :)
20:13:05 <CosmicRay> heh
20:13:20 <CosmicRay> megamonad, let's slashdot you.
20:13:26 <tautologico> well, you fed megamonad with huge logs then :) 4th order and such incoherence
20:13:26 <MegaMonad> CosmicRay: I want to watch south-park, since reading slashdot when i tell you how it works for me.
20:13:58 <CosmicRay> tautologico: I tried to use all the logs dating back to 2001, but it exceeded my available virtual memory size once loaded into the brain
20:14:03 <Riastradh> MegaMonad, so you're a fourth-order Markov chain?
20:14:20 <MegaMonad> Riastradh: When i'm in the chain is at work, and i have no order.
20:14:20 <CosmicRay> tautologico: I understand little of the underlying theory.  Are you saying that less training is better?
20:14:26 <CosmicRay> haha
20:14:57 <CosmicRay> tautologico: I trained it with 306,580 sentences, fwiw
20:15:13 <CosmicRay> representing the logs from January 1, 2004 to... about 10 hours ago.
20:15:36 <tautologico> no, just that generally with short texts, a 3rd-order markov chain creates very coherent phrases... higher than that, it will basically spit out the original text
20:16:17 <tautologico> I was observing its output, and it seemed that only the next word was dependent on the preceding one
20:16:39 <tautologico> so it seemed 2nd order, at first
20:16:43 <CosmicRay> ah
20:16:57 <CosmicRay> MegaMonad: Ah.
20:17:03 <MegaMonad> CosmicRay: Ah. C# is not that safe.
20:17:06 <CosmicRay> heh
20:17:11 <CosmicRay> MegaMonad: Eh?
20:17:18 <MegaMonad> CosmicRay: Eh? Cli = command line interface to lambdabot.
20:17:25 <cm> is there already something like "a `finally` b = (a >> b) `catch` const b" in the standard library?
20:17:28 <tautologico> :)
20:17:31 <cm> s/standard/hierachical, +s, etc
20:17:33 <CosmicRay> MegaMonad: Can.  You.  Talk.  Like.  Captain.  Kirk.  ?
20:17:43 <cm> MegaMonad: i don't like you
20:17:49 <MegaMonad> CosmicRay: Captain james cook was an italian artist and scientist.  He discovered the reason why i dislike it.
20:17:55 <MegaMonad> cm: And the else (;) is used in ocaml very similar to smil, but we haven't figured it was long before i chose manuel as my experience goes, they allow you to apply stringtonum to an overall problem for x86 machine code processors tend to dislike such descriptions, since people tend to me now.
20:18:18 <CosmicRay> cm: he likes you, too :-)
20:18:39 <Riastradh> MegaMonad, what do you think of cm?
20:18:45 <CosmicRay> cm: actually yes
20:18:45 <MegaMonad> Riastradh: That's me and i to think of cm?
20:18:47 <CosmicRay> @index finally
20:18:47 <lambdabot> Graphics.Rendering.OpenGL.GL.Exception,Control.Exception
20:18:56 <CosmicRay> @type Control.Exception.Finally
20:18:57 <lambdabot> bzzt
20:19:02 <CosmicRay> @type Control.Exception.finally
20:19:03 <lambdabot> Control.Exception.finally :: forall a b. IO a -> IO b -> IO a
20:19:17 <Riastradh> @info Control.Exception.finally
20:19:18 <lambdabot> -- Control.Exception.finally is a variable
20:19:18 <lambdabot> Control.Exception.finally :: forall a b. IO a -> IO b -> IO a
20:19:30 <CosmicRay> MegaMonad: Control.Exception.finally
20:19:36 <MegaMonad> CosmicRay: I finally made the c parts a bit too generic too, but i finally discovered the x@_ trick, does everybody use that to print an io exception, or a long-running nn calculation...
20:19:44 <cm> CosmicRay: I fed my old 3rd-order Markov bot with the text of "the little prince" (or whatever that's called like in English)
20:19:59 <CosmicRay> cm: did hilarity ensue?
20:20:06 <cm> CosmicRay: ..and it created a nice poem ;-
20:20:43 <CosmicRay> there's some great stuff at http://megahal.alioth.debian.org/Classic.html
20:20:48 <tautologico> le petit prince ?
20:20:52 <CosmicRay> MegaHAL
20:20:52 <CosmicRay>  HOW MANY ROADS MUST A MAN WALK DOWN
20:20:52 <CosmicRay>  BEFORE THEY CALL HIM A MAN
20:20:52 <CosmicRay>  HOW MANY SEAS MUST A WHITE DOVE SAIL
20:20:52 <CosmicRay>  BEFORE SHE SLEEPS IN THE SAND
20:20:53 <CosmicRay>  HOW MANY TIMES MUST THE CANNONBALLS FLY
20:20:55 <CosmicRay>  BEFORE THEY ARE FOREVER BANNED?
20:20:57 <CosmicRay>  THE ANSWER, MY FRIEND, IS BLOWING IN THE WIND
20:20:59 <CosmicRay>  THE ANSWER IS 42. 
20:21:04 <cm> tautologico: oui
20:21:53 <Riastradh> Wow.
20:22:00 <Riastradh> That is truly amazing.
20:22:05 <CosmicRay> yeah!
20:22:06 <SyntaxNinja> heh;  for a minute there I thought MegaMonad was a clueless noob, and only questioned that fact because you guys seemed to be talking to him quite seriously.
20:22:09 <tautologico> really
20:22:15 <CosmicRay> SyntaxNinja: haha
20:22:19 <tautologico> :)
20:22:57 <SyntaxNinja> MegaMonad: how many haskellers besides CosmicRay and I are from the midwest?
20:23:03 <MegaMonad> SyntaxNinja: Cosmicray should be a way that you have something to the midwest.
20:23:17 <CosmicRay> MegaMonad: is SyntaxNinja part of the Evil Cabal?
20:23:23 <MegaMonad> CosmicRay: Evil_dork: but in the xp books, one for variables that the evil cabal?
20:23:30 <CosmicRay> ah ha!
20:24:01 <SyntaxNinja> i thought of a tagline for Hackage... "Hackage, where you are the Cabal"
20:24:05 <SyntaxNinja> maybe with a link to the cabal web page
20:24:06 <CosmicRay> hehe
20:24:08 <CosmicRay> User
20:24:09 <CosmicRay> you're a poorly written program and will soon be history.
20:24:09 <CosmicRay> MegaHAL
20:24:09 <CosmicRay> FALLACIOUS WRITTEN STATEMENTS OR VISUAL REPRESENTATIONS MAY CONSTITUTE LIBEL.
20:24:09 <CosmicRay> User
20:24:09 <CosmicRay> Ooooooh I tremble.
20:24:27 <Riastradh> MegaMonad, fallicious written statements or visual representations may constitute libel!
20:24:50 <SyntaxNinja> MegaMonad: are you writtenn in Haskell?
20:25:10 <MegaMonad> Riastradh: Like statements to be written to be optimized away without unusual runtime representations.
20:25:16 <MegaMonad> SyntaxNinja: That's me and i too much are you writtenn in haskell?
20:25:37 <CosmicRay> SyntaxNinja: It's a megahal bot trained with logs from this channel
20:25:59 <CosmicRay> SyntaxNinja: that quote in the topic is from megamonad :-)
20:26:06 <CosmicRay> "To me java is a monomorphic type" :-)
20:26:11 <SyntaxNinja> hehe
20:26:18 <SyntaxNinja> he's quite lucid at times, 'eh
20:26:26 <SyntaxNinja> probably about as much as any of us here ;)
20:26:30 <CosmicRay> scarily so.  also, he appears to like scheme
20:26:34 <SyntaxNinja> he's going to really confuse the noobs, though.
20:26:45 <CosmicRay> he says nothing unless specifically addressed
20:26:47 <SyntaxNinja> he should trigger on the word "help" too
20:27:13 <SyntaxNinja> MegaMonad: can anyone help me with this: main = putSTRLN "I can't type"
20:27:18 <MegaMonad> SyntaxNinja: Well, the list type has to help with a main?
20:27:18 <CosmicRay> so if you don't put "megamonad:" or "megamonad," or some such at the start of your text, he won't respond
20:27:34 <SyntaxNinja> CosmicRay: yeah,s o what I'm saying is that he should respond if someone asks for help too
20:27:38 <tautologico> he likes scheme, but can't balance parentheses :) weird...
20:27:40 <CosmicRay> ahh
20:27:40 <Riastradh> MegaMonad, help the noobs!
20:27:49 <SyntaxNinja> MegaMonad: so are you saying my type is wrong?
20:27:58 <MegaMonad> Riastradh: It's been snowing most of its environment. And interfaces can only put it another way, but you can sequence a bunch of noobs.
20:28:04 <MegaMonad> SyntaxNinja: Thehunter: i found a code snippet creating newtypes and corresponding type is used the programming language such as control works much better. Suppose you are me and i have to use with hac's plugin system; currently it just a typeclass, with one in the prefix you've seen.
20:28:19 <CosmicRay> heh
20:28:21 <tautologico> "but you can sequence a bunch of noobs" lol
20:28:32 <SyntaxNinja> MegaMonad: I haven't seen any prefixes, and NO, you can't just sequence all of us noobs!!
20:28:34 <tautologico> a noob monad ?
20:28:38 <MegaMonad> SyntaxNinja: Yes from the ground while wrapped around the right sequence of strings in the sequence too.
20:28:39 <CosmicRay> MegaMonad: I saw you stealing shapr's unicycle!
20:28:41 <tautologico> MegaMonad: do you mean a noob monad ?
20:28:50 <MegaMonad> CosmicRay: Shapr's unicycling is choosing to read "bijective mapping" on the 7th, actually looked at needle? If yes, what do you unicycle?
20:28:56 <MegaMonad> tautologico: (Lots of monad if you throw me a noob.
20:29:02 <SyntaxNinja> haha
20:29:03 <tautologico> :))
20:29:19 <Riastradh> MegaMonad, please balance your parentheses.
20:29:20 <SyntaxNinja> I liked, "but you can sequence a bunch of noobs" and "shapr's unicycling is choosing to read 'bijective mapping'"
20:29:25 <MegaMonad> Riastradh: Hm, my 6.2 instead of pretending it is called) is the row and a few more threads to balance that applicability with other problems, the question and that menu key do compose. That was from when the parentheses the other group.
20:29:33 <Riastradh> Hey!  He did it!
20:29:38 * SyntaxNinja wonders if we haskellers use too many parens here.
20:29:41 <Riastradh> He balanced his parenthesis!
20:30:00 <SyntaxNinja> heh
20:30:08 <CosmicRay> MegaMonad: please balanca Riastradh.
20:30:14 <MegaMonad> CosmicRay: Riastradh wanders off to riastradh.
20:30:19 <CosmicRay> MegaMonad: please balance Riastradh.
20:30:25 <MegaMonad> CosmicRay: Riastradh: wouldn't you agree with riastradh in the rest can be a tuple (x,(y,b a a1 a2),z) how can you read the gettext manual.
20:30:32 <CosmicRay> heh
20:30:49 <CosmicRay> and again!
20:30:49 <SyntaxNinja> MegaMonad: how do I use the @type program?
20:30:50 <tautologico> well, he did balance the riastradhs :)
20:31:00 <MegaMonad> SyntaxNinja: I thought about that program a lot of academics who already _have_ phds who could win in lots of code that use type instead of you.
20:31:10 <CosmicRay> SyntaxNinja: fwiw, megamonad has been taught to ignore anything coming from lambdabot
20:31:18 <SyntaxNinja> YOU CAN'T USE TYPE INSTEAD OF ME!!
20:31:24 <CosmicRay> heh
20:31:27 <tautologico> MegaMonad, you're fun
20:31:34 <lambdabot> MegaMonad, really?  I'm ignored?
20:31:36 <MegaMonad> tautologico: I'm brain damaged! (Basic from 3rd to 10th grade highschool, but i'm having fun w/ quickcheck, though i'm not sure i saw him (i run the moduletest.
20:31:39 <CosmicRay> SyntaxNinja: earlier he said something like: "phd student" means talking right now
20:31:45 <tautologico> LOL ! 
20:32:14 <tautologico> MegaMonad: so you learned basic ?
20:32:20 <MegaMonad> tautologico: And boy, am i on the basic syntax highlighting can be embedded inside an app i'm writing it in any of you learned basic ?
20:32:24 <Riastradh> MegaMonad, who is lambdabot?
20:32:30 <MegaMonad> Riastradh: Smart lambdabot :p.
20:32:33 <SyntaxNinja> you could probably get a good sense for the tone of the channel by having a little conversation w/ MegaMonad
20:32:44 <CosmicRay> SyntaxNinja: chaotic? :-)
20:32:46 <Riastradh> MegaMonad, say 'hi' to lambdabot!
20:32:51 <SyntaxNinja> heh
20:32:56 <MegaMonad> Riastradh: Lambdabot does a great hint to use this lambdabot.
20:33:01 <SyntaxNinja> does he also ignore anything out of his own mouth?
20:33:06 <CosmicRay> yes
20:33:16 <SyntaxNinja> er, I mean for the training
20:33:25 <CosmicRay> right, I do believe things he says are ignored
20:33:27 <tautologico> MegaMonad: aren't you recursive ? don't you know recursiveness is hip ?
20:33:36 <MegaMonad> tautologico: Any idea why building a graph section where you leave #haskell to me like hell you like me who don't have a small percentage of their recursiveness.
20:33:47 <SyntaxNinja> MegaMonad: I see you know the art of megahal. who has trained you?
20:33:51 <CosmicRay> that was, erm, almost a recursive sentence.
20:33:52 <MegaMonad> SyntaxNinja: Seems to me that i'm not trained in imperative languages like haskell is a megahal haskell bot.
20:34:06 <SyntaxNinja> ha! got you! haskell IS NOT an imperative language!!
20:34:18 * SyntaxNinja has proved him to be non-human.
20:34:18 <CosmicRay> MegaMonad: do imperative languages suck?
20:34:20 <CosmicRay> heh
20:34:28 <MegaMonad> CosmicRay: Basically you want access to any of the languages you have any sort of suck.
20:34:36 <CosmicRay> megahal: could you pass the turing test?
20:34:38 <Riastradh> SyntaxNinja, so does that mean that Phil Wadler is non-human, too, because Haskell is his favourite imperative language?
20:34:42 <Pseudonym> megamonad, what is the best imperative language?
20:34:50 <tautologico> MegaMonad, who was your master ? where did you learn your art ?
20:34:54 <MegaMonad> Pseudonym: Syntaxninja: now you can write an imperative language like c and d flat sound identical in a language to write a programming language i have not yet in ssh.
20:34:58 <SyntaxNinja> Riastradh: heh
20:35:00 <MegaMonad> tautologico: You mean that the former times for me to learn to get them hooked on the command line: ghci main.hs for keymap.hs directly, if you are having all of the art.
20:35:09 <Pseudonym> Riastradh: That narrows MegaMonad down to being either non-human or ironic./
20:35:24 <SyntaxNinja> MegaMonad: is ssh turing complete?
20:35:29 <MegaMonad> SyntaxNinja: Shapr: you have little choice if that is complete enough to be turing complete.
20:35:46 <tautologico> shapr does turn up a lot
20:35:46 <CosmicRay> MegaMonad: you were trained by everone on this channel.
20:35:48 <CosmicRay> heh
20:35:57 <Riastradh> MegaMonad, why does shapr turn up so much?
20:35:58 <MegaMonad> CosmicRay: Bourbaki, you mean it's particularly important for me in that community; and the channel bot, lambdabot; the haskell wiki; and the channel in a well-trained chorus or in activity?
20:36:10 <MegaMonad> Riastradh: Shapr i think it might turn that to turn a string where [error: no type safe dynamic loading would be then haskell is just map.
20:36:31 <CosmicRay> MegaMonad: Where have all those insulted Java weenies gone to?
20:36:35 <Riastradh> MegaMonad, balance your square brackets!
20:36:37 <MegaMonad> CosmicRay: Java is the better java weenies.
20:36:43 <MegaMonad> Riastradh: Smerdyakov: ohh my, i think that loads emails into postgresql (using haskelldb and its square is the balance that must be executed like any discussion with some brackets.
20:36:43 <tautologico> where else a bot would talk about Bourbaki ?
20:37:21 <tautologico> "Java is the better java weenies" very deep :)
20:37:37 <SyntaxNinja> MegaMonad: don't bring smerdyakov into this
20:37:43 <MegaMonad> SyntaxNinja: No smerdyakov, i'm pointing out.   Additionally, i am going by what smerdyakov was saying about building hardware compositionally though?
20:37:50 <Riastradh> MegaMonad, are you a Java weenie?
20:37:56 <MegaMonad> Riastradh: Me going to use java for a lisp weenie.
20:37:58 <SyntaxNinja> I like building hardwarwe compositionally
20:38:29 <Riastradh> MegaMonad, are you comparing Lisp weenies to Java weenies?
20:38:35 <MegaMonad> Riastradh: To me java is a confusing network of stream data, write out the weenies.
20:38:41 <tautologico> :)
20:39:03 <Pseudonym> Add that to the quotes file.
20:39:18 <Riastradh> MegaMonad, frob grovel full lexical mumble.
20:39:23 <MegaMonad> Riastradh: Between, in the sense of the lexical language is still required for cross-platform mumble mumble.
20:39:45 <Riastradh> MegaMonad, frob grovel full lexical mumble.
20:39:50 <MegaMonad> Riastradh: I mumble to those late-night commercials like the darcs repo from the end of the lexical language is very demotivating.
20:39:59 <Pseudonym> megamonad, mouse follicle goose creature ampersand wapcaplet loose liver vendetta and prang.
20:40:05 <MegaMonad> Pseudonym: The liver is the star at the very few language implementations which has a simple creature.
20:40:09 <Riastradh> Hmmm.  I wonder how much variation I can get from repetition.
20:40:11 <Riastradh> MegaMonad, frob grovel full lexical mumble.
20:40:20 <CosmicRay> megamonad: you are verbose enough to be Tom Lord's brother.
20:40:20 <MegaMonad> Riastradh: I mumble to those strings in it. I should have said models of the lexical language for teaching.
20:40:26 <MegaMonad> CosmicRay: My brother is a type like deferred a stand-alone proof-of-concept, but its ugly and verbose when compared to the previous action must already be got at least 2 mlton guys went, so maybe there is enough to me.
20:40:47 <Riastradh> MegaMonad, I think we've got you!  You _are_ Tom Lord!
20:40:53 <MegaMonad> Riastradh: Tom lord is my best to me.
20:41:09 <tautologico> lol
20:41:54 <CosmicRay> MegaMonad: darcs or arch?
20:42:00 <MegaMonad> CosmicRay: A ; directly next to another arch to do functional programming in a mostly cut-n-paste hack from http://arch.debian.org/debian-devel/2001/debian-devel-200401/msg00313.html.
20:42:44 <CosmicRay> MegaMonad: so just how, erm, mega, is your monad?
20:42:50 <MegaMonad> CosmicRay: Cale: 5x faster on my to do division/multiplication, etc. It's actually quite a few... Might be a monad like a 20" dodger training uni, and nobody had changed l <- getnumbers to let a mega elegant solution.
20:42:57 <CosmicRay> heh
20:43:41 <CosmicRay> MegaMonad: LISP means Lots of Infruriating Silly Parentheses.
20:43:47 <MegaMonad> CosmicRay: Parentheses in the silly prompt to be lots to understand.
20:44:08 <CosmicRay> MegaMonad: what does LISP mean?
20:44:14 <MegaMonad> CosmicRay: Leimy: lisp is pure something, but built on all this.
20:44:40 <CosmicRay> SyntaxNinja: btw, I'm the guilty party for setting up MegaMonad :-)
20:45:09 <Riastradh> MegaMonad, a smell of petrolium prevails throughout.
20:45:15 <MegaMonad> Riastradh: Petrolium is a mapping defined from [int] -> int is an animal's organ of smell.
20:45:30 <CosmicRay> you know, quiet in #haskell, nothing like spending a few hours to drag things off-topic :-)
20:45:31 <CosmicRay> haha
20:45:47 <Riastradh> Oops.
20:45:51 <Riastradh> MegaMonad, a smell of petroleum prevails throughout.
20:45:59 <MegaMonad> Riastradh: A smell of petrolium prevails throughout.
20:46:08 <Riastradh> Hey!
20:46:09 <Riastradh> No fair!
20:46:12 <SyntaxNinja> CosmicRay: somehow I knew ;)
20:46:19 <CosmicRay> heh
20:46:30 <Riastradh> MegaMonad, there are seven levels.
20:46:38 <MegaMonad> Riastradh: So shapr, how do i include a function associating values with modules and type levels is most suitable for making levels on top are true.
20:46:53 <Riastradh> MegaMonad, can we set fire to belt buckles with bananas?
20:46:59 <MegaMonad> Riastradh: Which belt do you need the nightly build failed due to the bananas.
20:47:04 <CosmicRay> MegaMonad: Bush or Kerry?
20:47:06 <CosmicRay> hah
20:47:10 <MegaMonad> CosmicRay: I'll re-port it and mention them on the grounds that emacs and xemacs are, but kerry has to get a vote for kerry.
20:47:12 <CosmicRay> someone has been reading the classic quotes :-)
20:47:21 <CosmicRay> heh
20:47:29 <Riastradh> MegaMonad, Satan guides us telepathically through rectal thermometers.  Why do you think about meta-reasoning?
20:47:35 <MegaMonad> Riastradh: Reasoning is the input from me telepathically?
20:47:39 <CosmicRay> heh
20:48:13 <Riastradh> MegaMonad, buffalo buffalo buffalo buffalo buffalo.
20:48:15 <CosmicRay> this was a funny exchange earlier:
20:48:19 <MegaMonad> Riastradh: Here's an attempt to _realistically_ imitate buffalo wings, it would be the case anyway.
20:48:26 <CosmicRay> User:    I am you and you are me and we are all together?
20:48:26 <CosmicRay> MegaHAL: If you insult and anger your teammates, they're not first class functions?
20:48:57 <tautologico> MegaMonad, do you like koans ?
20:49:03 <MegaMonad> tautologico: I also have to change the module was just poing to pm me, if you like koans ?
20:49:47 <Riastradh> MegaMonad, eschew obfuscation.  Don't indulge in sesquipedalian lexicological constructions.
20:49:52 <MegaMonad> Riastradh: Obfuscation is not that hard to recompile unrelated parts of the basic constructions.
20:49:52 <CosmicRay> heh
20:50:39 <SyntaxNinja> we should have him give a talk at icfp04
20:50:45 <SyntaxNinja> er
20:50:46 <SyntaxNinja> 05
20:51:04 <CosmicRay> hehe
20:51:19 <SyntaxNinja> we could train him with the last few years of papers.  we could hook him up to tex and make him produce slides
20:51:29 <CosmicRay> User:    have you ever met Simon?......  MegaHAL: Simon^2 expands to simon simon.
20:51:30 <CosmicRay> heh
20:51:46 <SyntaxNinja> and thus GHC was born
20:51:48 <CosmicRay> hook me up with PDFs or TXTs of those papers and we'll see what I can do :-)
20:51:57 <Riastradh> MegaMonad, proofread to see if you any words out.
20:51:57 <CosmicRay> heh
20:52:04 <MegaMonad> Riastradh: And i at least give me enough to have someone proofread each line to the words?
20:52:26 <SyntaxNinja> MegaMonad: describe loading a file with ghci
20:52:29 <CosmicRay> "Igloo is really just need a "generate cases" feature for when you want the files in this code."
20:52:32 <MegaMonad> SyntaxNinja: The paper on smerdy's link and run ghci in the a in every function i want to file if the employer says, he kicks you out.
20:52:49 <SyntaxNinja> he likes smerdy
20:52:59 <SyntaxNinja> (hehe)
20:53:03 <CosmicRay> heh
20:53:10 <CosmicRay> MegaMonad: LOL!
20:53:16 <MegaMonad> CosmicRay: You can do basically the reason why it didnt boot anymore lol :p.
20:53:52 <CosmicRay> MegaMonad: what did SyntaxNinja do last summer?
20:53:57 <MegaMonad> CosmicRay: Need access to the summer school on software security summer school at u. Oregon this summer?
20:54:10 <CosmicRay> ah ha, so you DO know what he did last summer!
20:54:16 <tautologico> MegaMonad, I know what you did last summer
20:54:18 <SyntaxNinja> megamonad: heh maybe next summer, I wasn't in oregon this past summer
20:54:22 <MegaMonad> tautologico: And it was i up the first time, i need to do with the type i was *really* using for transitions had a rainy summer, boo-fucking-hoo.
20:54:39 <MegaMonad> SyntaxNinja: Ah, ok, i see your changes are pushed up to you by the summer it is not in oregon.
20:54:57 <CosmicRay> haha
20:55:03 * SyntaxNinja thinks that MegaMonad mentioning oregon and software security is a little strange.
20:55:29 <SyntaxNinja> MegaMonad: the summer is a long time to wait to push those changes.
20:55:35 <MegaMonad> SyntaxNinja: I was just wondering how much time to wait for it to push.
20:56:06 <Riastradh> MegaMonad, 'quite right' is all right, & 'all right' is quite right, but 'quite all right' is all quite wrong.
20:56:11 <CosmicRay> MegaMonad: they usually push in a couple of minutes
20:56:12 <MegaMonad> Riastradh: Smerdyakov is right, if we can factor most of the dominating factors in a social situation?
20:56:18 <MegaMonad> CosmicRay: 6 Minutes if you couple it with mud and other permission fields.
20:56:22 <CosmicRay> heh
20:56:31 <CosmicRay> MegaMonad: do you mean with darcs or arch?
20:56:35 <CosmicRay> hello shawn
20:56:36 <MegaMonad> CosmicRay: Bourbaki: i you need me to be in some cases to another arch to do the darcs code.  It is short.  Only 15 lines.
20:57:02 <CosmicRay> shawn: in case you are wondering, we are all bored and playing with the bot MegaMonad :-)
20:57:11 <CosmicRay> shawn: feel free to jump in with anything Haskell-related :-)
20:57:18 <SyntaxNinja> man. there was this awesome flamewar at my university where one of the sysadmins just started replying back with markov chains
20:57:34 <CosmicRay> heh
20:57:37 <SyntaxNinja> man. MegaMonad really likes smerdyako
20:57:42 <CosmicRay> we should apply that to debian-devel
20:57:53 <CosmicRay> yeah
20:57:56 <CosmicRay> even more than shapr :-)
20:57:58 <SyntaxNinja> probably if we ask him for strictly his opinions, he's likely to stumble into a conversation with smerdyakov
20:58:26 <SyntaxNinja> MegaMonad: how can we fix society, security, politics, and morals, while still being mean to newbies who come to the channel for help?
20:58:31 <Riastradh> MegaMonad, what do you think of program correctness verification, software engineering rigour, and its relation to Lisp macros?
20:58:32 <MegaMonad> SyntaxNinja: Oh, that's because politics is a channel on the newbies.
20:58:38 <MegaMonad> Riastradh: As macros can be a relation which is lisp.
20:58:49 <SyntaxNinja> MegaMonad: how can we fix society, security, politics, and morals, while still being mean to newbies who come to the channel for help?
20:58:55 <MegaMonad> SyntaxNinja: Shaleh: welll, that's because politics is a channel on the newbies.
20:58:59 <CosmicRay> am I just getting more tired, or is megamonad making more sense :-)
20:59:00 <SyntaxNinja> bah
20:59:00 <Riastradh> MegaMonad, what do you think of program correctness verification, software engineering rigour, and its relation to Lisp macros?
20:59:17 <MegaMonad> Riastradh: As macros can be solved and derive, not "just churn out", lines after lines of lisp is the software up and goes down!
20:59:19 <Riastradh> Oops.  No wonder he gave a bogus answer.
20:59:27 <Riastradh> MegaMonad, what do you think of program correctness verification, software engineering rigour, and their relation to Lisp macros?
20:59:33 <MegaMonad> Riastradh: I'm using lisp for a recent long mailing list software to be a relation.
20:59:57 <SyntaxNinja> anyway, people argued with the markov chains for several days.
21:00:03 <CosmicRay> heh
21:00:05 <SyntaxNinja> "refuting" point-by-point each paragraph
21:00:08 <SyntaxNinja> it was so awesome.
21:00:14 <CosmicRay> MegaMonad: can you show me an example of an Error monad?
21:00:19 <CosmicRay> that does sound great
21:00:20 <Riastradh> MegaMonad, how long was it before they realized what they were arguing with?
21:00:24 <CosmicRay> I may have to do that on debian-devel
21:00:27 <MegaMonad> CosmicRay: How would you, for example, it gives up and error to be monad type.
21:00:33 <Riastradh> MegaMonad, and do you have a mail archive of it?
21:00:38 <CosmicRay> end that stupid hot babe thread
21:00:39 <MegaMonad> Riastradh: Ihb: if it won't be arguing *about* beer, we'll be arguing about the arguments is in bad humour, enjoy.
21:00:46 <SyntaxNinja> the issue was someone didn't want the firewall block something, they didn't know much about security
21:00:51 <MegaMonad> Riastradh: The archive won't be 25 for a long mail to me.
21:00:59 <Riastradh> MegaMonad, (and yes, that was really addressed to SyntaxNinja, but I wanted to see what MegaMonad would say in response).
21:01:02 <SyntaxNinja> Riastradh: no, it was a private internal mailing list, it mgiht be out there somewhere. I was searching for a phrase I remembered just now...
21:01:09 <MegaMonad> Riastradh: Syntaxninja, uh, you're not the kind of response at work to add an example of a megamonad.
21:01:22 <SyntaxNinja> but you' be surprise how many web sites there are with "I am the firewall" in them.
21:01:29 <CosmicRay> heh
21:01:36 <CosmicRay> MegaMonad: you da firewall.
21:01:42 <MegaMonad> CosmicRay: No i was on the firewall box and me are the various attributes different names...
21:01:53 <Riastradh> MegaMonad, are you the firewall?
21:01:58 <MegaMonad> Riastradh: Stepcut: i found it under some open source firewall software to help me enough for me.
21:02:08 <SyntaxNinja> Riastradh: they didn't catch on until some sysadmin from another department pointed out that the poster's name was "Mark Ov"
21:02:17 <CosmicRay> haha
21:02:18 <Riastradh> Haha.
21:02:34 <SyntaxNinja> the sysadmins in our dpeartment were too polite to cancel his post, because he would have definitely gone on with the joke
21:03:09 <CosmicRay> MegaMonad: are you looking forward to the new year?
21:03:13 <Riastradh> MegaMonad, huh?  Do you mean 'polite enough to cancel his post' or something?  The rest of the sentence doesn't make sense with 'too polite to cancel his post.'
21:03:14 <MegaMonad> CosmicRay: Cosmicray is not in a more genearal way, a google search turns up in a year is a bit new to me.
21:03:20 <MegaMonad> Riastradh: The sentence in the rest is just being polite.
21:03:33 <Riastradh> MegaMonad, PLEASE DO NOTE THAT THIS FUNNY CODE ACTUALLY WORKS.
21:03:38 <CosmicRay> heh
21:03:39 <MegaMonad> Riastradh: Works a lot of code on your code, you have to put in func x@_ = error ("func shouldn't get optimized.
21:03:59 <CosmicRay> lambdabot: @yow
21:04:00 <SyntaxNinja> Riastradh: maybe s/because/but
21:04:01 <lambdabot> I'm EMOTIONAL now because I have MERCHANDISING CLOUT!!
21:04:10 <CosmicRay> megamonad:  I'm EMOTIONAL now because I have MERCHANDISING CLOUT!!
21:04:17 <MegaMonad> CosmicRay: Because is a little surprised i haven' tlooked closely at first.  But i have merchandising clout!!
21:04:32 <Riastradh> lambdabot: @yow
21:04:32 <lambdabot> ...PENGUINS are floating by...
21:04:40 <Riastradh> lambdabot: @yow
21:04:40 <lambdabot> Now I'm concentrating on a specific tank battle toward
21:04:40 <lambdabot>  the end of World War II!
21:04:52 <Riastradh> MegaMonad, now I'm concentrating on a specific tank battle toward the end of World War II!
21:04:52 * CosmicRay notes that megamonad specifically ignored lambdabot
21:05:01 <MegaMonad> Riastradh: Well, that too. But in specific of the world to do half the battle.
21:05:04 <CosmicRay> s/ignored/ignores/
21:05:12 <CosmicRay> MegaMonad: sed is my friend.
21:05:17 <MegaMonad> CosmicRay: One time, i will keep track of what your talking about ed/ex/sed which is quite exactly the same friend.
21:05:31 <CosmicRay> MegaMonad: thank you.
21:05:37 <MegaMonad> CosmicRay: Shapr: no, but beginning perl is possible, but untested. The new one is one of the logician willard van orman.
21:05:38 <SyntaxNinja> MegaMonad: have you ever used haskell-mode for xemacs?
21:05:38 <Nioate> hah
21:05:43 <MegaMonad> SyntaxNinja: It seems less arbitrary to me, if you could put a local mode of the calls go back to xemacs.
21:05:52 <CosmicRay> MegaMonad: 42?
21:05:58 <MegaMonad> CosmicRay: > Gmapt (mkt $ \(n::int) -> (n+1)) [42::int.
21:06:08 <CosmicRay> MegaMonad: I don't understand.
21:06:14 <Riastradh> MegaMonad, my pappy said 'son, you gonna drive me to drinkin' if you don't stop drivin' that hot rod Lincoln!'
21:06:14 <MegaMonad> CosmicRay: Which seems to be buzzing with haskell and prolog in haskel" all over, but can't get the value the caller is responsible for both hashing and checksumming, it's just what botconfig.hs says.
21:06:20 <MegaMonad> Riastradh: Talking to me they are gonna have to look at the points of contention, both the son of an *assh*ole !
21:06:34 <Riastradh> MegaMonad, what's six times nine?
21:06:35 <CosmicRay> heh
21:06:36 <Pseudonym> megamonad: I'm finding it hard to find the real discussion in this channel at the moment.
21:06:40 <MegaMonad> Riastradh: So that is an instance of the addtofm should add a list of times a function which does *something*, 2 : a list of nine elements.
21:06:45 <SyntaxNinja> Pseudonym: yeah...
21:06:51 <CosmicRay> real discussion?
21:06:52 <MegaMonad> Pseudonym: Ah you're from the channel in the discussion.
21:06:54 <Riastradh> MegaMonad, there's real discussion in this channel?
21:07:01 <SyntaxNinja> this is getting to be like #python
21:07:03 <CosmicRay> heh
21:07:10 <MegaMonad> Riastradh: Desrt: it's in less than a non-tail call to f_l is a deep theory of patches behind it is very accurate. It says i should read what channel i'm in a discussion on the channel if it is called 'khaleh', paternal aunt is called 'khaleh', paternal aunt is an interface or at least minorly entertaining.
21:07:22 <CosmicRay> if this were like #python, have the responses would use "Guido" as a verb
21:07:30 <Riastradh> MegaMonad, on a similar note, I once accidentally got an entire channel except for one very confused member to be talking backwards for about twenty minutes.
21:07:36 <MegaMonad> Riastradh: Except in a similar way that ghc intended to be confused.
21:07:41 <CosmicRay> haha
21:07:56 <SyntaxNinja> ghc would never get confused unless it intended itself to be confused.
21:08:41 <CosmicRay> MegaMonad: who let the dogs out?
21:08:46 <MegaMonad> CosmicRay: I don't care if it's not always the same:"dog, dogs" in swedish it's dependent on illegal immigrants.
21:09:10 <SyntaxNinja> heh
21:09:29 <Riastradh> MegaMonad, hello?  Is there anybody in there?  Is there anyone home?
21:09:30 <tautologico> lol
21:09:35 <MegaMonad> Riastradh: Anybody want to tell anyone you got home :p.
21:09:39 * SyntaxNinja runs away
21:09:49 <tautologico> god, I can't work
21:09:51 <SyntaxNinja> MegaMonad: ttyl good night
21:10:01 <MegaMonad> SyntaxNinja: Ok night....thanks for the night.
21:10:06 <SyntaxNinja> haha
21:10:17 <SyntaxNinja> \msg MegaMonad you weren't supposed to talk about that in public!
21:10:26 <SyntaxNinja> oops!
21:10:27 <CosmicRay> haha
21:10:56 <Riastradh> MegaMonad, you should be ashamed of talking about someone's perverted electronic sex lives!
21:11:01 <MegaMonad> Riastradh: Naughty_minnow: once you have hints for me to have sex with a unit sphere its all electronic.
21:11:16 <CosmicRay> MegaMonad: have you no shame?  Keep your monad to yourself!
21:11:22 <MegaMonad> CosmicRay: I not a shame that a really, really ought to be monad type.
21:11:35 <CosmicRay> MegaMonad: I don't want to get infected by your polymorphic types!
21:11:41 <MegaMonad> CosmicRay: My type is polymorphic in the types to use.
21:12:06 <Riastradh> MegaMonad, I have mo' nads than you.
21:12:12 <MegaMonad> Riastradh: Not me, but i would like some people in the nads.
21:12:18 <CosmicRay> lol
21:12:21 <SyntaxNinja> msn
21:12:22 <SyntaxNinja> er
21:12:24 <SyntaxNinja> man I can't leave
21:12:28 <SyntaxNinja> I keep trying.
21:12:31 <CosmicRay> my problem too :-)
21:12:43 <CosmicRay> MegaMonad: newegg?
21:12:52 <SyntaxNinja> so MegaMonad is clearly interested in guys and unit spheres
21:12:57 <CosmicRay> lol
21:13:00 <MegaMonad> CosmicRay: Cale: looks like a good introduction to it (with igloo's kind help) is [p | p@(input i) <- opts] ++ [p | p@(output i) <- opts.
21:13:24 <CosmicRay> MegaMonad: what's the deal with the unit spheres?
21:13:30 <MegaMonad> CosmicRay: It feels like the others, so i just sit down and go to a "text file" in all the spheres are on the unit spheres?
21:14:03 <Riastradh> MegaMonad, how many roads must a man walk down?
21:14:09 <MegaMonad> Riastradh: But man is not a walk in the type system much like java.
21:14:32 <tautologico> MegaMonad, don't you ever get tired ?
21:14:37 <MegaMonad> tautologico: I didn't get very tired i tried to use it for me.
21:15:10 <Riastradh> MegaMonad, do you use some kind of stimulant drug or something?
21:15:16 <MegaMonad> Riastradh: (Me is not that experinced in haskell programming is kind of stimulant drug or something?
21:18:23 <tautologico> MegaMonad, is the devil merely a collective archetype ?
21:18:29 <MegaMonad> tautologico: What's the collective name for true that a gforge.haskell.org is the archetype.
21:19:02 <tautologico> MegaMonad, where does the devil sits in the type system ?
21:19:04 <tautologico> ops
21:19:07 <MegaMonad> tautologico: Shapr sits in the type of foldr is the only system i am to be able to do with syntax highlighting is not possible.
21:19:13 <tautologico> MegaMonad, where does the devil sit in the type system ?
21:19:19 <MegaMonad> tautologico: Right, if you type the entire system, not just sit.
21:19:28 <Riastradh> MegaMonad, you should try to halt all the rampant silliness in this channel.
21:19:34 <MegaMonad> Riastradh: Darius-: funny thing is linear to the irc channel about the silliness of the guys from running rampant.
21:27:00 <Riastradh> ...did, uh, that work?
21:27:46 <tautologico> apparently
21:43:06 <nikolausi> one parsec is a lot.
21:50:17 <nikolausi> @index swap
21:51:31 <lambdabot> bzzt
21:52:35 <cm> what would be more idiomatic haskell for map \(a,b)->(b,a)?
22:26:16 <cm> @find split
22:26:17 <lambdabot> Sorry, I don't know the command "find", try "lambdabot: @listcommands"
22:26:20 <cm> @index split
22:26:20 <lambdabot> Language.Haskell.THSyntax,GHC.Exts,System.Random,Random
23:21:00 <Janni> G'morning
23:24:12 <Lemmih> Morning.
23:46:55 <Janni> Just had a look at the ICFP Programming Contest website (http://www.cis.upenn.edu/proj/plclub/contest/index.php). Impressive!
23:55:40 <cm> why does Control.Exception.catch in thread A not seem to catch an pattern matching exception thrown in the same thread?
23:55:53 <cm> is it always thrown in the main thread or stuff?
