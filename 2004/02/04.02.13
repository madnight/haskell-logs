00:00:07 <shapr> pre vs post
00:00:17 <CoolPops> ha! maybe I don't understand let then. how can you have the oppisite of an assignment?
00:00:27 <det> I didnt mean that :p
00:00:29 <det> I mean:
00:01:50 <det> let k f x = f x x in k (*) is the same as k (*) where k f x = f x x
00:02:32 <CoolPops> det: where does f come from?
00:03:07 <det> as an argument to k
00:03:47 <CoolPops> ok. let k = f, f = x, x = x?
00:04:01 <det> no
00:05:10 <CoolPops> det: I'm just going to keep reading and mark area's I don't understand. Maybe once I get further into the tutorial things will begin to make sense. If not, then maybe I will have gained an understanding to ask good questions and also understand the answers.
00:05:20 <det> it is the same as:
00:05:31 <det> k f x = f xx
00:05:48 <det> square = k (*)
00:05:53 <det> with k hidden
00:06:00 <det> liralen's example that is
00:06:32 * liralen stops trying to find a perfectly pointless example.
00:06:51 <liralen> The pointless-fu in me needs some work, I suppose.
00:06:54 <det> yeah, it would be really silly to right it that way
00:08:44 <CoolPops> the tutorial does not describe the -> operator.
00:09:07 <liralen> cool - you can do such as let f x = x in f 10 interactively with GHCi.  but have fun with your tutorial =)
00:09:14 <CoolPops> square = \x -> x * x (even if that is a bad example).
00:10:19 <det> -> isnt an operator, it is just syntax
00:10:27 <det> do you know what a lambda expression is?
00:10:33 <det> in a lispish language perhaps ?
00:11:09 <CoolPops> sorry. I have ssen them before but have nvere made one.
00:12:11 <det> lambda defines an anoymous function, that is a function without a name
00:12:37 <det> square x = x * x can be seen as syntactic sugar for square = \x -> x * x
00:12:37 <CoolPops> det: ok, anonymous functions I understand. lambda is just an anonymous function?
00:12:45 <liralen> (\x -> x * x) evaluates to a function that accepts one argument (let's call the argument 'x') and then evaluates x*x
00:13:08 <forcer> hm
00:13:32 <forcer> is there a canonical text to recommend to people trying to learn haskell, like i would recommend SICP to every person trying to learn Scheme? :]
00:13:36 <liralen> anyway, I've decided that I suck at explaining Haskell.
00:13:43 <forcer> (or something shorter *g*)
00:14:42 <liralen> forcer - the Gentle Introduction helped me... but I don't know about a canonical text.  I did well by a number of academic papers, such as the beginning of concurrent-haskell.ps which starts with an overview of monadic IO.
00:14:52 <CoolPops> forcer: I am reading the Yet Another Haskell Tutorial right now but never using a functional language, it's quite a bit for me to grasp.
00:15:11 <CoolPops> liralen: I have that one printed too, havn't read it yet because I'm working my way through this one.
00:15:39 <CoolPops> I think I'm gonna do as I said, just be quite, read through this, maybe then go through the Gentle one and then begin w/questions :)
00:16:39 * forcer puts both on his long-term todo list.
00:16:53 <forcer> i have a paper to write myself, so i shouldn't do something else right now :/
00:20:46 <CoolPops> but just to finish this off, something like z = (\x y -> x * y) is the same as z x y = x * y
00:28:44 <CoolPops> hum, the answer is no. but don't worry, I'll continue reading. thanks for your help today.
00:32:18 <det> they are the same
00:32:40 <CoolPops> det: the function signatures are different.
00:32:46 <CoolPops> y = (\x y -> x * y)
00:32:54 <CoolPops> y :: Integer -> Integer -> Integer
00:32:59 <CoolPops> yy x y = x * y
00:33:04 <CoolPops> yy :: forall a. (Num a) => a -> a -> a
00:33:31 <det> hhmmmm
00:33:32 <CoolPops> yy will work on Int or Double that's a big thing. y will not.
00:33:57 <det> how do you get ghci to accept definitions in the REPL
00:34:17 <CoolPops> I didn't, I put them in a file then :l 'd it.
00:36:16 <det> I guess there is a difference
00:36:44 <det> I am guesing only functions can be paramaterized by a type class
00:36:48 <det> and not values
00:36:58 <det> I am not very familiar with haskell
00:37:37 <CoolPops> det: what do you use? You seem to be familure with functional languages.
00:41:29 <det> I like SML :)
00:41:51 <det> but that is more about practicality than the language itself
00:42:07 <CoolPops> I've spent a little time with Ocaml ... Same family?
00:42:15 <det> yes
00:42:18 <det> very very similar
00:47:09 <liralen> (I've only noticed four real differences, actually: there exist many unique and special SML implementations (O'Caml only has one, for the most part), SML has a funny tendency to avoid currying in favor of tupled argments, SML has a (=)-with-exceptions rather than O'Caml's (=)-with-magic, O'Caml has camlp4)
00:48:08 <liralen> (e.g., SML has whole-program optimizing MLton and smlnj.)  (and, er, SML has a language standard.)
00:59:44 <shapr> I'd argue that haskell is pure and lazy, and the whole ML family is impure and strict
01:01:10 <liralen> oh, sorry, I read that as a question about SML vs. Haskell.  Your answer certainly makes more sense in the context of the channel =)
01:01:24 <liralen> er, "SML vs. O'Caml"
01:01:51 <liralen> Haskell also has a more powerful typesystem -- it has neither 'magic' nor 'with-exceptions' (=), for instance.
01:02:13 * liralen *hearts* typeclasses.
01:12:08 <det> liralen: yeah, I very much dislike the whole avoiding currying :/
01:12:36 <det> liralen: which also applys to ocaml vs sml
01:12:58 <det> http://www.ps.uni-sb.de/~rossberg/SMLvsOcaml.html
01:13:19 <det> liralen: with-exceptions ?
01:15:10 <liralen> det - I forget the conversation I had about that, sorry, but by it: SML's (=) doesn't work for all types.  O'Caml's does, but it does so with magic outside the type system.
01:15:47 <det> oh
01:16:00 <det> you mean, it doesnt have oveloading ..
01:16:24 <liralen> yes, no typeclasses.
01:16:33 <det> I dont imagine haskell allows = on functions ?
01:16:40 <det> sml has eqtypes
01:16:49 <det> I dont know much of them
01:17:02 <det> a very sucky overloading from what I gather
01:17:24 <liralen> @eval square x = x * x
01:17:25 <lambdabot> (line 1, column 10):
01:17:25 <lambdabot> unexpected "="
01:17:25 <lambdabot> expecting var, "head", "tail", "null", bool, num, character, "[", string, "(", operator, simple term or end of input
01:17:42 <det> lambdabot isnt haskell :p
01:18:07 <earthy> det: lambdabot's eval doesn't take plain defs
01:18:12 <liralen> @eval (\x->x+x) == (\x->x-x)
01:18:12 <lambdabot> type error
01:18:22 <liralen> oh, sure, but omit the helpful message =)
01:18:24 <earthy> @eval let square x = x * x in square 10
01:18:24 <lambdabot> (line 1, column 14):
01:18:24 <lambdabot> unexpected "="
01:18:24 <lambdabot> expecting var, "head", "tail", "null", bool, num, character, "[", string, "(", operator, simple term or end of input
01:18:29 <earthy> hmmm....
01:18:33 <liralen> "No instance for (Eq (a -> a))"
01:18:34 <earthy> that seems broken
01:18:44 <det> earthy: what does ?
01:19:07 <earthy> lambdabot not parsing the eval I typed in
01:19:52 <det> lambdabot: accepts dynamicly typed lambda calculus
01:19:52 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
01:20:23 <det> with some syntax niceities
01:22:00 <det> oh, was looking at liralen's command
06:38:32 <earthy> interesting. haskell.org doesn't have a copy of darcs installed.
06:39:58 <Heffalump> why does it need it?
06:40:35 <earthy> why wouldn't it? revision control of parts of the website?
06:40:40 <Heffalump> thank you for taking over the HC&A report, btw :-)
06:40:48 <earthy> no probs :)
06:41:11 <Heffalump> well, CVS is still the standard for that kind of thing.
06:41:27 * earthy nods
06:41:37 <earthy> it'd be nice though :)
06:43:02 <Heffalump> can you just ask for it?
06:43:57 <earthy> I'm thinking of nagging John for it
06:44:45 <earthy> might turn out to be a good way of making haskell.org more of a community-maintained effort
06:45:05 <earthy> needs a tad more thought though
08:38:39 <lordjim> hi
08:39:53 <Heffalump> hi
08:40:06 <Heffalump> what did Carthage do to you?
08:40:43 <lordjim> i'm a big fan of cato
08:41:22 <lordjim> ok i will ask a stupid question so be kind
08:41:37 <lordjim> haw can i divide a Float by an Int ?
08:41:46 <Heffalump> convert the Int to a Float first, with fromIntegral
08:41:58 <cybermanco> or convert the int
08:42:04 <lordjim> oki
08:42:05 <cybermanco> ops
08:42:06 <cybermanco> thr float
08:42:10 <lordjim> thanks :)
09:33:23 <amb> hi everybody
09:35:36 <amb> Anyone online?
09:35:45 * amb has a really small and stupid question *g*
09:37:53 <Lemmih> amb: I'm here but I'm not a very good Haskell programmer. Just ask anyway.
09:38:51 <amb> nvm, just solved it *g*
09:38:59 <amb> thanks though
10:09:00 <Lunar^> shapr: ?
11:22:25 <CoolPops> In: findElement :: (a -> Bool) -> [a] -> Maybe a ... what does the (a -> Bool) do?
11:23:12 <earthy> it is the function that states if the element is to be found
11:23:38 <earthy> usage e.g. findElement (== 0) [1,2,3,4,5,6,0,2,3,0]
11:25:28 <CoolPops> hum. I am just learning haskell and going through the Yet Another Haskell Tutorial. It seems that some concepts are used before they are explained... this is confusing me.
11:25:48 <CoolPops> earthy: I have never programmed in a functional language before so it's quite a shock to me.
11:26:21 <Lemmih> CoolPops: Have you read www.haskell.org/complex/ ?
11:26:42 <CoolPops> Lemmih: no. I will visit it now and see what it is.
11:27:29 <Lemmih> It's a very basic tutorial for people without any knowledge of functional programming.
11:27:54 <CoolPops> It might be just what I need :)
11:35:53 <earthy> coolpops: also look into the `functional programming' course notes at http://www.cs.uu.nl/~jeroen/courses/fp-eng.pdf
11:36:44 <earthy> even though it uses gofer it's good for basic concepts
11:36:47 <earthy> and gofer is quite like haskell in a way
11:48:24 <Igloo> Hmm, http://www.haskell.org/ was `last century', so it's been updated to something starting '<!DOCTYPE HTML PUBLIC "-//W3O//DTD W3 HTML 2.0//EN">'
11:50:23 <Igloo> And it doesn't even validate
11:54:09 * Igloo decides not to reply while I'm feeling ill
11:55:07 <Marvin--> LOL
11:56:02 <Marvin--> do you mind if I cruelly send a mail pointing that out, or do you want the fun for yourself? :)
11:58:37 <Igloo> I was going to try to write a polite private e-mail to John - I'm not sure if making rude comments publically in response to someone putting some work in would be wise in the longer term...
11:58:54 <Marvin--> what, aren't all organizations like Debian? ;-)
11:59:03 <Igloo> :-)
12:00:31 <Igloo> That does mean HTML 2, right? I'm not misreading it?
12:00:38 * Igloo tries to draft something
12:01:03 <Marvin--> well, apparently it's not even a valid doctype tag
12:01:24 <Igloo> Yeah, but it doesn't validate even if you tell it the document is HTML 2.0
12:01:27 * Igloo asks w3c.org
12:01:35 <Marvin--> yeah, I noticed that too
12:05:29 <Marvin--> well, I handed in a PhD student application today, still nervous and panicky but at least it's out of my hands now
12:05:43 <Igloo> Cool, congrats!
12:06:31 <earthy> big congrats
12:07:16 <Marvin--> now I should "just" make sure to graduate too :(
12:11:16 <Igloo> Oh FFS, font-size: 16px;
12:11:26 <Marvin--> argh
12:11:30 <Marvin--> very "professional"
12:30:20 <andersca> "hello" Marvin--
12:33:03 <earthy> marvin--: graduating is not the hardest thing you can do
12:34:00 <Marvin--> earthy: true, but it means finishing this report that seems to take forever to write
12:34:07 <Marvin--> andersca: er.
12:34:18 * earthy took 3 years to write his master's thesis
12:34:32 <earthy> after 9 months of doing the actual research
12:35:12 <Marvin--> yay, I'm not alone ;)
12:35:14 <Igloo> Does urchin.earth.li/~ian/em_h.txt look OK to people?
12:36:28 <earthy> it is very, well, `academic'. :)
12:37:07 <earthy> tip: first kiss up to him.
12:38:48 <earthy> `I think the site is mostly fine. It's just that it triggers one of my pet peeves, and I wold *love* for you to fix that. It might actually make your job maintaining less of a chore'
12:39:34 <Marvin--> add "kicking and screaming", you can never go wrong with a Pratchett reference ;)
12:39:56 <earthy> unless the recipient has temporarily misplaced his sens of humor
12:40:02 <earthy> which you'd better assume. :)
12:40:35 <Marvin--> andersca: why the ":s?
12:42:11 <andersca> Marvin--: just following the scheme
12:42:16 <andersca> <Marvin--> now I should "just" make sure to graduate too :(
12:42:18 <andersca> <Marvin--> very "professional"
12:42:35 <Igloo> "professional" was actually a quote
12:43:17 <Marvin--> yeah, I'm quoting from John Peterson's mail
12:43:37 <Marvin--> the "just" was more sarcasm though
12:44:30 <Marvin--> making fun of myself for never finishing this damn thing
12:46:21 <earthy> if you're quoting put it in quotes.
12:48:01 <earthy> anyway, it's a good thing to educate ;)
12:48:10 <earthy> but be educational :)
13:01:39 * Marvin-- ponders D&D issues
13:10:28 <Marvin--> oh shucks
13:10:30 <Marvin--> I'm out of whisky
13:12:46 <andersca> D&D as in drag&drop? :)
13:13:07 <Marvin--> as in Dungeons&Dragons
13:13:18 <Marvin--> we're apparently about to go up a level and I have no idea what I want to do
13:13:45 <andersca> oh
13:13:54 <amb> Marvin--, are you the GM?
13:14:12 <Marvin--> amb: no, I'm just a player, which is why I have to worry about the levelling
13:14:35 <amb> :-)
13:41:00 <andrewc> hi, anyone around to help with a homework (sef-inflicted) question?
13:41:41 <Marvin--> sure
13:41:51 <Marvin--> oh wait, that reminds me
13:41:53 * Marvin-- sighs
13:42:27 <andrewc> hey, i have a link you.  it's not really very useful, but maybe it's relevant - there's some advice on applying for computing phds at http://fortnow.com/lance/complog/
13:42:47 <andrewc> how are the diodes?
13:42:54 <Marvin--> aching
13:43:46 <amb> lol
13:44:08 <andrewc> hmm.  link has scrolled off that blog.  you'd need tolook at the archives.
13:45:03 <andrewc> anyway, question is - is the reason that the fusion rule doesn't work for lazy function sjuts because you might trigger some kind of error (that might be avoided if it was never forced)
13:46:57 <andrewc> ah, no it's sat 07. half way down.  really it just says don't worry - it's your references that matter.
13:52:04 <Marvin--> well, since I just applied locally where I study, "references" are basically writing down names of people you know at the institution
13:52:14 <Marvin--> it's when I want to apply at different places it becomes a bitch
13:53:08 <andrewc> my partner is in charge of admissions at her dept.  it's amazing the range of supporting letters she gets.  people really do write "this peson is not very good".
13:53:40 <Marvin--> wow
13:54:00 <andrewc> yeah.  i thought "the bastard!"
13:54:12 <Marvin--> might as well not write anything at all
13:54:15 <andrewc> i mean, you could just be less than enthusiatic.
13:54:17 <andrewc> yep.
13:54:39 <andrewc> maybe he slept with his wife or something.
13:54:46 <Marvin--> haha
13:55:08 <andrewc> anyway - fusion rule.  is that the reason?!
13:55:40 <Marvin--> I don't recall the fusion rule
13:55:59 <andrewc> the name given to moving a function inside a fold.
13:56:12 <andrewc> i htink.  maybe it's more general.
13:56:32 <andrewc> f . fold a b -> fold a' b' where...
13:58:19 <andrewc> apparently it's only ok for strict functions.  i'm wondering if the reason is anything other than it changing evaluation order (and so making error/bottom handling/avoidance different)
14:01:24 <Marvin--> I would guess so
14:02:05 <andrewc> yeah, me to.  :o)
14:02:25 <andrewc> i hate i when books have exercises but don't give the answers.
14:03:21 <Marvin--> meh, they shouldn't give answers, that just encourages the "eh, this is probably right, let's look at the answer" methodology, which really sucks
14:04:24 <andrewc> hmm.  maybe there's some compromise, like they give the hash of the answer so you can check.  guess not.
14:06:23 <CoolPops> \q
14:06:28 <CoolPops> opps, sorry.
14:08:00 <Marvin--> andrewc: with solutions expressed in a natural language? :)
14:35:40 <amb> bye everyone
14:35:46 <Heffalump> hello
14:36:35 <Marvin--> hi Heff
15:03:38 <Marvin--> my god, I just saw an Enterprise ep that was somewhat decent
15:04:03 <andrewc> ep?
15:04:07 <Marvin--> episode
15:07:30 <andrewc> ah.  this mut be something you need a tv to understand. ;o)
15:07:48 <andrewc> bye!
15:07:55 <andrewc> \quite
15:07:58 <andrewc> arrgh
15:08:03 <Marvin--> quite so :)
16:05:53 <SamB> someone in #python thinks a Numeric-like package would need to be ugly to be reasonably fast
16:06:27 <SamB> in particular, that you would need to use explicit monads in code that used it
16:07:33 <Cale> Which numeric package? Surely not http://www.haskell.org/onlinereport/numeric.html ?
16:08:11 <Cale> http://www.pfdubois.com/numpy/ ?
16:08:33 <opet> morning
16:08:50 <SamB> Numerical Python is the Numeric in question, yes
16:14:11 <Cale> I can't see anything there that would require the use of monads at all. In fact, most if not all of the things I'm seeing in the documentation have fairly natural functional implementations.
16:16:17 <SamB> I quote: "SamB: Mutability is a fact of life and a fundamental necessity for speed in numerical libraries, and Haskell *can't* provide that without a monad."
16:17:11 <Cale> People have something against monads?
16:17:24 <Cale> anyway, I wonder how http://haskelldsp.sourceforge.net/ compares
16:19:50 <Cale> Monads are just a way to structure essentially pure computations.
16:21:12 <liralen> SamB - I care little for the goals of NumPy, but I see two ultimate points in Haskell's favor with regards to the performance and readability of such libraries in Haskell: Haskell compilers have quite a bit more information and ability to make optimizations than C, C++, or Python; and Haskellers have a good habit of doing difficult things readably =)
16:22:28 <SamB> liralen: that is pretty much what I thought, too
16:23:07 <SamB> I think the last two points are quite closely related, actually
16:24:02 <SamB> the practice in Haskell seems to be to write simple programs and teach the computer how to transform them into efficient programs
16:26:07 <norpan> the practise is to write programs fast and consider them efficient enough :)
16:26:21 <norpan> which works for me
16:26:36 <opet> norpan: that practice is confined to haskell?
16:26:38 <opet> wow :)
16:26:47 <norpan> no, but it works very well in haskell
16:27:09 <norpan> at work we use a combination of haskell and c
16:27:13 <norpan> works very well
16:27:30 <norpan> you have to write some conversion code but you can do things that have to be efficient in c and the rest in haskell
16:27:48 <liralen> opet - sometimes you write programs fast and then discover that they have horrible memory or time efficiency, so you have to fiddle with that before you've even finished writing the really interesting parts of your program.
16:27:56 <liralen> opet - in general, not in Haskell.
16:40:12 <Darius> sometimes you write an application specific compiler in Haskell and just have it spit out ugly C from pretty Haskell.
16:45:53 <SamB> Darius: I really don't think you would need to do that for a numerical array package
16:52:24 <Darius> It wouldn't be a "whole" compiler.  This is essentially the approach taken by FFTW.
16:55:58 <Darius> As a general software engineering idea: instead of applying one's knowledge, one should -encode- it.
18:07:24 <CoolPops> In ghci if I type let nums = [1,2,3] then :t nums it results in: nums :: [Integer]
18:08:17 <CoolPops> but if I do a :t [1,2,3] it results in [1,2,3] :: forall t. (Num t) => [t]
18:09:06 <CoolPops> The first I cannot send to my practice function map :: (Int -> Int) [Int] -> [Int] but the later I can.
18:09:25 <CoolPops> I understand why I cannot send both the first and second examples to the function, but why are the first and second different?
18:13:25 <Darius> That's the monomorphism restriction and defaulting.  Many consider the monomorphism restriction to be nuisance and unfortunately it does happen to strike fairly regularly for beginner problems.
18:14:31 <CoolPops> Darius: is it something I should just ignore right now thinking I'll solve it later? I've been learning Haskell for 2 days now, never using a functional language before.
18:15:06 <CoolPops> Darius: and these are just practice functions to aid my learning.
18:15:54 <Darius> CoolPops: You never really need to "solve" it.  You can either explicitly give the type of nums, e.g. let nums = [1,2,3] :: [Int] or you could turn it off with :set -fno-monomorphism-restriction.
18:16:58 <CoolPops> Darius: ok. thank you.
19:12:54 <lzfnk> @arr
19:12:55 <lambdabot> Shiver me timbers!
20:07:28 <Lemmih> Is something like this possible: data Ntk = Ntk [Maybe] ?
20:07:59 <lzfnk> Lemmih: No, because maybe is a type constructor; you need to pass it a type
20:08:16 <lzfnk> You could do: data Ntk a = Ntk [Maybe a]
20:09:25 <Lemmih> Thx.
20:09:35 <lzfnk> No prob.
20:17:18 <SamB> it looks like Smerdyakov has been banned for about a month
20:19:02 <SamB> shapr: ^
20:32:18 <Lemmih> Why was Smerdyakov banned?
20:33:01 <SamB> see http://tunes.org/~coreyr/read.php?chan=haskell&date=04.01.15 for the log
20:34:34 <SamB> actually, I don't think he is over it yet. he still seems to think he didn't do anything wrong!
20:48:03 <SamB> does anyone have any sort of opinion on the issue, who is actually here?
20:48:13 <Lemmih> I'm _so_ gonna slap this in his face next time he bugs me :)
20:53:17 <SamB> is that supposed to be positive or negative?
20:53:27 <SamB> or neither?
20:54:01 <liralen> (http://www.userfriendly.org/cartoons/archives/03apr/uf005440.gif)
20:55:24 <monotonom> Hahahahaha
