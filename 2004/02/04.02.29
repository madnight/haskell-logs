00:01:33 <phubuh> With multi-parameter type classes and functional dependencies, I guess you don't need functors...
00:03:55 <esap> It's hard to build encapsulated resources with type classes.
00:04:41 * ayrnieu finds http://groups.google.com/groups?threadm=Pine.BSF.4.21.0108232133090.17462-100000%40shell5.ba.best.com
00:10:30 <stepcut> i could never really figure out what to do with functors
00:13:57 * stepcut goes to sleep
00:35:37 <veegee> if i have a qsort function, how can i define a type def for it. I have qsort:: Lists a -> [a], but hugs doesn't recogonize Lists as a consuctor
00:36:49 <ayrnieu> You probably want something like 'qsort :: [a] -> [a]' for a qsort of lists.
00:37:34 <veegee> how about qsort::(Ord a) => [a] -> [a]
00:38:25 <ayrnieu> yes, that looks even better =)
00:39:00 <veegee> k, thanks.. thought that would fix another problem, but it didn't 
00:39:15 <veegee> ERROR problem3.hs:64 - Cannot justify constraints in explicitly typed binding
00:39:15 <veegee> *** Expression    : sort
00:39:15 <veegee> *** Type          : Array2D a -> [a]
00:39:15 <veegee> *** Given context : ()
00:39:15 <veegee> *** Constraints   : Ord a
00:39:21 <veegee> sort is another function
00:39:30 <veegee> sort::Array2D a -> [a]
00:39:49 <veegee> sort (Array dim1 dim2 elements) = qsort ( arange (Array dim1 dim2 elements) (0,dim1-1) (0,dim2-1) )
00:39:53 <veegee> thats line 64
00:41:28 <ayrnieu> (it seems a bit odd that your sort returns a different type that it receives) but I don't know what problem you have there.  Does it compile without the explicit type?  What type does it have, then?
00:56:38 <veegee> yea it comples w.o the explict type
00:56:40 <veegee> and works fine
00:56:59 <veegee> qsort does a quick quick on the elements
00:57:20 <ayrnieu> What type does it have?
00:57:26 <veegee> like arnage returns a list of all the elements in a 2d range, im implementing a 2d array adt
00:58:48 <veegee> data Array2D a = Array Int Int [((Int,Int),a)] deriving (Show)
00:58:48 <veegee> nullarray::Int -> Int -> Array2D a
00:58:48 <veegee> alookup:: Array2D a -> (Int,Int) -> a
00:58:48 <veegee> insert:: Array2D a -> (Int,Int) -> a -> Array2D a
00:58:48 <veegee> arange:: Array2D a -> (Int,Int) -> (Int,Int) -> [a]
00:58:48 <veegee> --sort::Array2D a -> [a]
00:58:50 <veegee> qsort:: (Ord a) => [a] -> [a]
00:58:58 <veegee> crap
00:59:13 <veegee> data Array2D a = Array Int Int [((Int,Int),a)] deriving (Show)
00:59:23 <veegee> arange:: Array2D a -> (Int,Int) -> (Int,Int) -> [a]
00:59:30 <veegee> --sort::Array2D a -> [a]
00:59:35 <veegee> qsort:: (Ord a) => [a] -> [a]
00:59:50 <ayrnieu> What type does your Haskell compiler infer for 'sort'?
01:00:15 <veegee> im new to haskell, how can i determine this?
01:01:25 <ayrnieu> If you use GHC to compile this module, you may try loading it into GHCi -- which has special type-querying commands.
01:01:43 <veegee> alright
01:01:57 <veegee> i gotta jam, thanks for the help, im try it tomorrow
01:02:06 <veegee> i'll try it tomorrow
02:25:07 <dfsakjl> how do you round floating point numbers to ints?
02:28:08 <ayrnieu> @eval round 2.5
02:28:20 <ayrnieu> oh, or maybe not.
02:28:32 <ayrnieu> dfs - take a look at 'round', 'floor', and friends.
02:31:23 <dfsakjl> ayrnieu, could you take a look at a 3-line function and tell me why it won't compile?
02:33:50 <ayrnieu> dfs - maybe.  go ahead and paste it.
02:35:11 <dfsakjl> star :: Window -> Int -> Int -> Int -> IO ()
02:35:11 <dfsakjl> star w x y radius 
02:35:11 <dfsakjl>   = drawInWindow w (withColor Blue
02:35:11 <dfsakjl>       (polygon[(x,y+radius),(round(x+radius*2/sqrt(3)),round(y-radius/2)),(round(x-radius*2/sqrt(3)),round(y-radius/2))]))
02:35:25 <dfsakjl> that last line is actually one long line
02:35:30 <dfsakjl> emacs is doing the wrapping
02:35:43 <dfsakjl> ERROR "Main.hs":15 - Instances of (Floating Int, RealFrac Int) required for definition of star
02:38:55 <ayrnieu> compare, interactively, ((2 :: Int) + 3) and ((2 :: Int) / 3) and (2 / 3)
02:39:14 <ayrnieu> and investigate the 'where' syntax =)
02:41:20 <dfsakjl> yeah, i know it needs to be cleaned up
02:41:32 <dfsakjl> but ((2 :: Int) / 3) is a syntax error
02:41:46 <dfsakjl> so i guess i need to know how to go in the opposite direction
02:41:49 <dfsakjl> int to float
02:43:20 <ayrnieu> not a syntax error, a type error.
02:44:15 <dfsakjl> err
02:44:16 <dfsakjl> yeah
02:45:22 <ayrnieu> (fromIntegral x) / 3 where x = 2 :: Int
02:51:16 <dfsakjl> star :: Window -> Int -> Int -> Int -> IO ()
02:51:16 <dfsakjl> star w x y radius 
02:51:16 <dfsakjl>   = drawInWindow w (withColor Blue
02:51:16 <dfsakjl>       (polygon[(x,y+radius),(x+c,y2),(x-c,y2)]))
02:51:16 <dfsakjl>     where c = round(fromIntegral radius * 2 / sqrt(3))
02:51:16 <dfsakjl>           y2 = y - round(fromIntegral radius/2)
02:51:18 <dfsakjl> works
02:51:20 <dfsakjl> woooot
02:54:17 <dfsakjl> but the math is wrong...
02:54:26 <dfsakjl> err
02:54:31 <dfsakjl> nm
03:16:14 <shapr> hey dnm, wassup?
03:16:24 <shapr> creature: hey, what are you doing here? ;-)
03:20:14 <dnm> shapr: Oh, you know.
03:45:13 <shapr> one more time, hopefully without the nvidia kernel errors
03:53:10 <shapr> today is one of those rare days, February 29th
04:00:17 <shapr> so, what's going on?
04:00:39 <dfsakjl> shapr, i wrote my first functional program
04:00:53 <shapr> dfsakjl: cool! what did you write?
04:00:53 <dfsakjl> with only some help
04:01:08 <dfsakjl> shapr, i wrote the snowflake fractal assignment from hudak's book
04:01:24 <shapr> nifty
04:01:44 <shapr> is it one of those sierpinski things?
04:02:18 <dfsakjl> a little cooler than sierpinski
04:02:23 <dfsakjl> but similar
04:02:45 <shapr> so, have you already started on your second functional program?
04:02:50 <shapr> had any interesting insights from your first?
04:02:54 <dfsakjl> no, i have been reading
04:03:46 <shapr> have you done procedural programming before?
04:03:46 <dfsakjl> insights?
04:03:50 <dfsakjl> cleaner than C
04:03:52 <dfsakjl> lol
04:03:56 <shapr> yup :-)
04:03:58 <dfsakjl> procedural?
04:03:59 <dfsakjl> well
04:04:00 <dfsakjl> yeah
04:04:03 <dfsakjl> i have a CS degree
04:04:31 <dfsakjl> several years programming experience in C++, Java, Perl, and some assembly
04:04:33 <shapr> do you see any other interesting differences between functional and procedural?
04:04:54 <dfsakjl> lack of runtime errors is nice
04:05:07 <dfsakjl> of course, that is the holy grail for any language
04:05:12 <dfsakjl> make all errors compile-time
04:05:39 <dfsakjl> to the extent that makes sense, of course
04:05:44 <shapr> it's not 100% in Haskell, but it's a lot closer than anything else I've seen.
04:06:01 <shapr> enough to increase my frustration with Python since I've learned Haskell.
04:06:16 <dfsakjl> maybe not everyone agrees with me that that's the holy grail, but someone armed with such a language could take over the world   :P
04:06:21 <dfsakjl> i haven't use python
04:06:33 <dfsakjl> used
04:06:54 <Marvin--> it's most definitely not a holy grail for all languages
04:07:14 <Marvin--> *cough*halting problem*cough*
04:08:00 <shapr> part of the trick in Haskell is knowing how to use the type system as a simplified automated proof checker.
04:08:01 <dfsakjl> it doesn't even make sense for a language to turn infinite loops into compile-time errors
04:08:41 <dfsakjl> i mean, if you had a program that looked for counterexamples to the riemann hypothesis, and then halted when it found one
04:08:47 <dfsakjl> does that program halt or not?
04:09:01 <dfsakjl> would an infinite loop indicate a programming error?
04:09:33 <dfsakjl> or, indeed, any difference at all between the intent and performance of the program?
04:10:01 <shapr> I think the whole idea of programming is to perform according to the intent, right?
04:10:24 <dfsakjl> most people do not intend to write programs that core dump
04:10:31 * shapr grins
04:11:33 <shapr> so maybe the whole point of type systems is to check (as much as we can) if performance is equal to intent?
04:11:58 <shapr> have you read Pierce's "Types and Programming Languages" ?
04:12:05 <dfsakjl> i've never heard of that book
04:12:28 <dfsakjl> well, that is the point of type systems
04:12:37 <dfsakjl> i mean, what do they do besides throw compile errors?
04:12:49 <dfsakjl> but those compile errors would have almost always been runtime errors otherwise
04:13:02 <Maddas> depending on the type system
04:13:09 <dfsakjl> true
04:13:19 <Maddas> (or maybe I just have a very weak definition of 'error')
04:13:33 <dfsakjl> by runtime error i mean bug
04:13:47 <dfsakjl> not error message
04:16:33 <shapr> Haskell's type system is nice, I don't like explicitly declaring everything ahead of time in C or Java
04:16:43 <shapr> but there are other features that impress me more
04:17:22 <shapr> dfsakjl: anyways, as long as you're having fun
04:21:13 <dfsakjl> is Graphic an actual standard Haskell type, or just some SOE thing?
04:22:16 <shapr> I think it's an SOE thing.
04:23:33 <shapr> though there are some neat image libraries if you're looking for that sort of thing.
04:26:20 <shapr> are you looking for any particular sort of Haskell library?
04:27:37 <shapr> oh, Oleg Kiselyov joined haskell-libs
04:27:42 <shapr> Riastradh: thought you might find that amusing.
04:29:38 <dfsakjl> shapr, no, i just saw Graphic in the SOE book and i was curious
04:30:12 <shapr> do you write code for a living?
04:30:36 <dfsakjl> well, usually
04:30:40 * Marvin-- ponders the difficulty of getting friends to read 26 pages of draft report crap and get comments on it to turn it into something less crappy
04:30:42 <dfsakjl> when i have a job
04:31:03 <shapr> Marvin--: send me one!
04:31:34 <shapr> had any interesting programming jobs in the past?
04:32:09 <dfsakjl> shapr, yes
04:32:10 <shapr> cool, the takusen Oracle binding is in the haskell-libs cvs tree, if anyone wants to try it out.
04:32:45 <shapr> bring: Oracle binding is in haskell-libs, might be interesting to the HSQL/HaskellDB projects.
04:33:19 <shapr> dfsakjl: like what?
04:33:24 <dfsakjl> http://resumes.hotjobs.com/ecarter11/softwaredeveloper
04:33:27 <dfsakjl> lol, have a look
04:33:47 <shapr> wow, a real online resume
04:35:11 <shapr> watermarking and verilog, that's a wide range
04:35:41 <dfsakjl> i might have another verilog job this week
04:35:41 <shapr> have you seen the various Haskell hardware design projects such as Lava, Hawk, or BlueSpec?
04:35:49 <dfsakjl> no i have not
04:35:54 <dfsakjl> haskell hardware design?
04:36:05 <dfsakjl> you mean hardware design tools written in haskell?
04:36:19 <shapr> Haskell has a really cool testing library named QuickCheck, it's been used to test hardware descriptions in some of those systems.
04:36:20 <shapr> yup.
04:36:31 * themaximus is back (Sleep) gone for 8 hrs 2 mins 9 secs
04:36:38 <shapr> good morning themaximus!
04:36:41 <dfsakjl> i'd never heard of those
04:36:55 <shapr> I can find urls if google doesn't turn up anything.
04:37:05 <themaximus> shapr: Thanks!
04:37:27 <shapr> QuickCheck is very much worth investigating, especially if you're familiar with unit testing and friends. QuickCheck is one step better.
04:37:29 <themaximus> GRRRR!
04:37:37 <themaximus> What is alindeman's problem!
04:37:52 <shapr> who's alindeman?
04:37:58 <themaximus> Jeez, It's just a public away system
04:38:11 <shapr> well, some people don't like that.
04:38:19 <themaximus> Alindeman is a freenode staffer and he hates me, I believe
04:38:31 <shapr> well, you can't get along with everyone.
04:38:46 <shapr> I try to be nice and live with the results.
04:38:53 <themaximus> I got banned.
04:39:08 <themaximus> from #sql and probably #php as well
04:39:59 <shapr> hi Jad
04:40:04 <Jad> hello..
04:40:21 <shapr> themaximus: you could turn off your public away system and tell alindeman that you won't use it again, he'd probably let you back then.
04:40:23 <Maddas> themaximus: Getting banned for public away systems isn't anything special.
04:40:42 <shapr> yes, many channels on freenode work that way.
04:40:44 <themaximus> Eh, forget it.
04:40:50 <Maddas> Other networks, too.
04:41:08 <themaximus> Well Lemmih has one and he's never gotten banned.
04:41:11 <themaximus> Forget it....
04:41:36 <shapr> there is another alternative, you can tell only the irc server that you're away, and then when people do /whois on you, they'll see how long you've been away, and the reason.
04:42:20 <themaximus> shapr: Don't waste your time coming up with ideas for me.
04:42:40 <shapr> I always try to find win-win situations :-)
04:42:54 <themaximus> It's just people come asking for me when they're too lazy to /whois so I decided to try public-away
04:43:14 <dfsakjl> hey, i recognize someone's nick in here from #C++ like 7-8 years ago
04:43:20 <dfsakjl> _Codex
04:43:35 <themaximus> Shapr: Thanks anyways.
04:44:37 <shapr> speaking of win-win, I wish I had a Haskell NNTP library, or the time to write it before friday.
04:46:14 <themaximus> :-)
04:46:20 <shapr> I wonder if I could write just enough to do this project.
04:46:42 <shapr> anyone know of an especially simple nntp server I could use for testing?
04:48:10 * Marvin-- grumbles slightly about Friday's D&D session
04:48:23 <dfsakjl> D&D?
04:48:35 <Marvin--> Dungeons&Dragons
04:48:57 <dfsakjl> yeah, i know what it stands for
04:49:03 <dfsakjl> how old are you?
04:49:15 <dfsakjl> i haven't played that in years
04:50:57 <Marvin--> *blank look* how is my age relevant? I'm 23, I'm new to D&D but not to roleplaying in general
04:51:26 <dfsakjl> do you know other people here IRL?
04:51:45 <shapr> I bought beer for Marvin-- at the last ICFP
04:51:48 <shapr> that was fun.
04:52:02 <dfsakjl> yum
04:52:06 <Marvin--> dfsakjl: some, yeah, but the D&D comment was totally off topic :)
04:52:36 <shapr> dfsakjl: just wait, you'll be at an ICFP in a few years, I'll buy you a beer then too.
04:52:45 <dfsakjl> yay!  :D
04:52:57 <dfsakjl> now what does ICFP stand for
04:53:09 <dfsakjl> international conference on functional programming?
04:53:12 <shapr> yup
04:53:15 <dfsakjl> wow
04:53:18 <dfsakjl> that was easy
04:53:32 <shapr> they're lots of fun too.
04:53:59 <Marvin--> dfsakjl: heh
04:54:18 <shapr> I met Marvin--, blackdog, seafood, ozone, Igloo, Heffalump, and more.
04:54:54 <shapr> I tried to buy a beer for Igloo, but he doesn't drink, so I had it myself.
04:55:15 <shapr> blackdog and seafood are dangerous drinking companions, but I hope to have that experience again.
04:55:16 <Marvin--> fun people, all around
04:55:21 <shapr> yes, it was a blast.
04:55:29 <Marvin--> but it was way too chilly outside that cafe
04:55:33 <shapr> yah, it was.
04:56:08 <shapr> ozone doesn't appear to be a dangerous drinking companion, but it's just a show.
04:56:34 <dfsakjl> dangerous how?
04:56:56 <shapr> well, they're aussies, and I'm someone with no alcohol tolerance ;-)
04:57:11 <themaximus> Good for you shapr.
04:57:29 <shapr> yes, it means I'm a cheap drunk on the rare occasions that I drink.
04:57:57 <shapr> anyways, this is equally on-topic :-)
04:58:23 <shapr> dfsakjl: I think you'll like Haskell a lot, but more for the math and the theory underlying it.
04:58:39 <shapr> wait till you start on Category Theory, it's cool!
04:58:58 <dfsakjl> i had category theory in graduate algebra
04:59:03 <shapr> Type theory is also spiffy, but it's not quite so mind-expanding for me.
04:59:20 <dfsakjl> to see that in a programming language would be truly funky
04:59:22 <shapr> excellent, did you ever expect to apply CT to programming?
04:59:46 <shapr> Haskell sort-of uses CT for one of its abstractions, that being monads.
05:01:20 <shapr> on the low-tech side, lambdabot is the local codetoy.
05:01:54 <dfsakjl> lambdabot is a haskell interpreter?
05:02:04 <shapr> no, not exactly
05:02:18 <shapr> lambdabot does have a GHCi plugin, but it's not safe enough to leave it enabled
05:02:32 <shapr> there is a lambda calculus interpreter that looks a lot like Haskell
05:02:43 <shapr> @eval map (\x -> x + 1) [1,2,3]
05:02:43 <lambdabot> [2, 3, 4]
05:03:04 <shapr> @eval enumFromTo 1 5
05:03:04 <lambdabot> [1, 2, 3, 4, 5]
05:03:22 <dfsakjl> @eval [2.4, 2.1..0.3]
05:03:22 <lambdabot> (line 1, column 11):
05:03:22 <lambdabot> unexpected "."
05:03:22 <lambdabot> expecting simple term
05:03:28 <dfsakjl> awww
05:03:38 <shapr> in haskell that would be [1..5], but like I said, it's not the real deal.
05:05:34 <shapr> source for lambdabot is available, and writing plugins is pretty easy.
05:06:44 <dfsakjl> "hello" ++ "world" ==> "hello world"
05:06:49 <dfsakjl> where does the space come from?
05:06:54 <dfsakjl> i think i found a typo in SOE
05:07:04 <shapr> sounds like it.
05:07:12 <Marvin--> and anyway, the reason I'm grumbling about the D&D session is that my character has turned into a wererat, and at this rate (the party has very few magical weapons and no silver weapons), soon I won't be the only one
05:07:23 <shapr> oops
05:07:35 <shapr> I've been playing Fallout lately, it's sort of like a D&D game.
05:07:41 <dfsakjl> i recently started a game of final fantasy 7
05:08:13 <shapr> does that run on wine?
05:08:33 <dfsakjl> i don't know
05:08:37 <dfsakjl> i have it for playstation
05:08:53 <shapr> oh, I have a ps2, but only two games.
05:08:59 <shapr> it makes a great and cheap DVD player.
05:09:10 <dfsakjl> you know PS2 can play all PS1 games, right?
05:09:15 <dfsakjl> except you need a PS1 memory card
05:09:53 <dfsakjl> and a PS2 ain't that cheap for a DVD player
05:11:23 <dfsakjl> i think just a plain DVD player is about $100
05:14:26 <shapr> I don't have any ps1 games. This has been my only foray into console gaming.
05:14:26 <shapr> I suspect console gaming will turn into knoppix
05:14:26 <shapr> anyways, back to coding
05:14:29 <shapr> bonjour kowey 
05:14:31 <shapr> dfsakjl: sure, but when I bought my PS2, it was much cheaper than a DVD player.
05:14:38 <kowey> bonjour shapr, hi all
05:15:01 <kowey> i don't suppose Leon Smith is around?
05:16:05 <kowey> ... or barring that, if anybody uses his automata library: http://vorlon.cwru.edu/~lps/software/automata/
05:19:17 <shapr> I haven't but it sure looks cool.
05:20:05 <kowey> except that on the ghc 6.2, i'm getting an error like this:
05:20:11 <kowey> ./Tree234Map.hs:185: Qualified name in function definition: F.empty
05:20:11 <kowey> Failed, modules loaded: Tree234.
05:20:26 <kowey> the relevant lines, looking like this: 
05:20:27 <kowey> instance (Ord k) => F.AssocX FM k where
05:20:28 <kowey>   {F.empty = empty; F.single  = single; F.fromSeq  = fromSeq; 
05:21:02 <kowey> i'm guessing wildly that this is something that's due to some change in how ghc works between 2002 and now?
05:23:20 <dfsakjl> length xs = foldr (+) 1 (map one xs) where one x = 1
05:23:22 <dfsakjl> ???
05:23:36 <shapr> dfsakjl: cheesy
05:24:12 <dfsakjl> cheesy?
05:24:14 <dfsakjl> why?
05:24:27 <shapr> mylength [] = 0 ; mylength (x:xs) = 1 + length xs
05:24:35 <dfsakjl> oh, and the first 1 should be 0
05:25:30 <dfsakjl> an exercise in SOE is to redefine length nonrecursively
05:25:34 <shapr> oh
05:25:43 <dfsakjl> in the chapter on polymorphic and higher-order functions
05:25:48 <shapr> what about using const?
05:25:50 <shapr> @type const
05:25:51 <lambdabot> const :: a -> b -> a
05:26:20 <shapr> foldr (+) 0 (map $ const 1 xs)
05:26:53 <dfsakjl> $ ?
05:27:03 <kowey> it means map (const 1 xs)
05:27:09 <Marvin--> shapr: that'd be map (const 1) xs anyway
05:27:25 <Marvin--> shapr: your usage translates into what kowey said
05:28:32 <shapr> whoops
05:28:41 <kowey> but waitasec, doesn't func app bind veryvery tight?, so that map (const 1 xs) would be really the same as map ((const 1) xs) anyway?
05:28:49 <kowey> oh
05:28:52 <kowey> nevermind
05:29:50 <shapr> right, thinko on my part
05:31:29 <shapr> kowey: I have no idea what's going on in that instance declaration in Tree234Map.hs
05:31:50 <shapr> something very strange at least
05:32:04 <kowey> well, not to restate what the code is saying, but
05:32:36 <kowey> he seems to be trying to declare FM k as in instance of F.AssocX
05:32:39 <kowey> (sorry)
05:34:14 <kowey> doesn't seem too helpful as an error message: Qualified name in function definition: F.empty
05:34:21 <kowey> does that mean something should be unqualified?
05:34:58 <kowey> huh... 
05:35:04 * kowey systematically removes F.
05:35:12 <shapr> "import qualified Assoc as F"
05:35:29 <kowey> sorry, should have mentioned that
05:35:53 <shapr> but why is the qualified thingy on the left side?
05:36:06 <kowey> old school notation?
05:36:35 <kowey> maybe now we say that with the instance declaration, there's no need for qualified thingy, so we force the syntax to be lite?
05:37:17 <shapr> but, it looks like he's assigning operations from the local scope.
05:37:18 <kowey> in any case, getting rid of the qualified thingies makes it compile
05:37:39 <shapr> and there is an empty defined on line 26 of Tree234Map
05:38:15 <shapr> oh, I don't have Edison in my path, I wonder if I have it installed.
05:38:36 <kowey> wait... Edison is something i should install seperately?
05:38:42 <shapr> yup
05:38:48 <shapr> I think so
05:38:49 <shapr> lemme check
05:39:31 <shapr> oh, maybe it's in -package data
05:40:28 <kowey> well, empty isn't in the Prelude, so that def of empty is kosher
05:41:28 <shapr> ok, it looks like -package data does let you import module Assoc at least
05:41:47 <kowey> whew! so installing edison?
05:41:50 <kowey> no installing, i mean
05:42:19 <shapr> doesn't look like it.
05:42:39 <kowey> now what's not-so-evident is how to run that test suite of his
05:43:31 <shapr> truly
05:44:10 <kowey> the eternal debate: do i reinvent or do i puzzle over the current wheel?
05:44:23 <shapr> for what?
05:44:30 <kowey> fsa
05:44:56 <shapr> in my experience, trying to puzzle over the current wheel often teaches me a) whether I want to invent or not and b) a lot more about the problem I'm trying to solve
05:45:23 <kowey> true that... for example, this little bit of learning i just had re: qualified imports
05:45:31 <shapr> anyways, I just like fiddling with things.
05:45:32 <kowey> well, that's more about haskell in general
05:45:40 <shapr> yup, that's a good thing.
05:46:08 <shapr> I still can't figure out why this guy is trying to reassign or something.
05:46:24 <kowey> he's not reassigning
05:46:34 <kowey> there's a class F.AssocX with an empty function
05:46:49 <kowey> and he's just saying that F.empty should simply be the same as regular empty
05:46:53 <kowey> assigned to
05:47:30 <kowey> that is, there is no 're' going on here
05:47:36 <shapr> it looks like he's trying to shadow an existing instance declaration.
05:48:11 <kowey> can you even do that?
05:48:18 <shapr> I don't know
05:48:47 <shapr> I've never tried it, but I think Marvin-- once said said about it being impossible.
05:48:55 * shapr tries
05:50:16 <kowey> ... sigh... looks like the only way to grab his paper is to hunt down the proceedings on deadtree
05:50:27 <shapr> nah, he's just spelled it wrong
05:50:54 <shapr> http://vorlon.cwru.edu/~lps/papers/
05:51:04 * kowey laughs
05:51:21 <kowey> i'll send him a little note later... along with some visualisation code, maybe he'll like that
05:51:49 <shapr> standard broken link tricks, try to list the dir, try index.htm index.html etc
05:52:06 <shapr> maybe I should write a firefox plugin to do that to a link
05:52:10 <kowey> nod
05:53:31 <kowey> i wonder if one could write a simple ML <-> haskell converter
05:54:02 <shapr> I know they're similar, I dunno how similar.
05:55:42 <shapr> cm: meep
05:55:48 <cm> hiho shapr
05:55:56 <pattern> Two engineering students were walking across campus when one said, "Where did you get such a great bike?" The second engineer replied, "Well, I was walking along yesterday minding my own business when a beautiful woman rode up on this bike. She threw the bike to the ground, took off all her clothes and said, 'Take what you want.'" "The second engineer nodded approvingly, Good choice; the clothes probably wouldn't have fit."
05:56:09 * shapr laughs
05:58:51 <cm> http://www.kuro5hin.org/story/2004/2/26/175722/727 :)
05:59:56 <kowey> if you read the comments, there's this guy that got *really* upset about this
06:00:00 * kowey shakes head
06:01:11 <cm> "And, to get technical on you, this form of existential negation cannot be used for an agentive-type entity such as a human, which you presumably are."
06:02:09 <Maddas> haha
06:02:20 <Maddas> "As you can see from this, Japanese is a very simplistic language. Conceptually, it has not really advanced much since the Jomon people were living in huts 4000 years ago. They still have not gotten around to plurals or genders, to take just two examples."
06:03:16 <cm> hehe
06:05:53 <Maddas> "The importance of politeness levels is most assuredly not exaggerated. -- Sure, you can accept the free ride Japanese people are willing to give you because you're not a native speaker. Hell, just stringing a few words together makes you about as entertaining as a talking dog to a lot of Japanese folks."
06:05:56 <Maddas> (Don't worry, I won't paste more :))
06:08:55 <shapr> hey, I recognize one of the comments in there, that's Cale 
06:10:32 <Maddas> heh
06:11:38 <shapr> oh, I like the sparsely populated 2-D array comment.
06:14:08 <shapr> aww webmonkey is closing down, that's how I got started.
06:15:22 * themaximus is away: Auto-away after 30 mins
06:16:10 <shapr> hey hram, ltns, wassup?
06:16:29 <hram> shapr: much to do these days...
06:16:39 <shapr> any updates on your Smart Loader or your GHCi plugin?
06:16:47 <shapr> what sort of coding are you doing lately?
06:17:17 * themaximus is away: coding
06:17:47 <hram> well, actually some really nasty opengl stuff for one of my courses...
06:18:20 <hram> the dynamic loader is in pretty much the same state as before and nothing more is done on the ghci plugin..
06:19:15 <shapr> speaking of OpenGL, did you see the neat acmqueue article on the complexity of game development?
06:19:30 <shapr> I still think we could make a killing in the gaming industry with Yampa
06:19:54 <Maddas> yampa?
06:20:20 <shapr> the extraspiffy functional reactive programming framework from yale.
06:20:25 <hram> Nope, havn't seen (or heard of). Yes, Yampa is pretty cool, one of my friends is currently building a pretty nifty collision-engine with it.
06:20:35 <shapr> http://www.haskell.org/yampa/
06:21:04 <shapr> imho, Yampa and arrows could cut down on much of the complexity.
06:21:15 <Maddas> Oh, sounds like one of those things that I'll never truly understand. :)
06:22:09 <hram> Perhaps, but I don't see the gaming industry ever switching to Haskell... :(
06:22:34 <shapr> Maddas: just takes some reading.
06:22:47 * Maddas nods
06:22:53 <shapr> hram: I suspect the game industry would switch much faster than any other, if they saw a success they wanted to duplicate.
06:24:13 <hram> shapr: Well, yes, but speed has always (and will continue to be) a main concern and quite frankly, Haskell isn't there...
06:24:50 <shapr> I don't think it needs to be there.
06:25:03 <shapr> the speed part is usually rendering
06:25:36 <kowey> are there theoretical barriers to the speed thing?
06:25:51 <kowey> or is just not enough energy having been spent on optimising the hell out of things?
06:26:10 <hram> shapr: Na, much is boundingboxes/collision and such that still isn't in hardware...
06:26:43 <shapr> I bet it could be in hardware if you use Cg
06:27:46 <shapr> there's a recent toolkit to do transputer-style computations with nvidia FX+ hardware
06:28:44 <hram> shapr: I don't think so... It's quite a jump from the simple easy-to-pipeline stuff that is done today to the very diverse stuff you want to do in BB/collision...
06:29:20 <hram> I mean, vertex/pixelshading is cool, but extreamly simple in comparison...
06:30:05 <shapr> ok, how to speed it up? wrap a bb/collision engine written in C?
06:32:24 <hram> shapr: you could do such a thing, but you do not want to mix languages if it can be avoided... I would rather put my money on a C++ version of Yampa...
06:34:07 <cm> is the "real" speed problem of haskell due to lazyness?
06:35:15 <shapr> not usually
06:35:21 <shapr> well, sort of, it is.
06:35:30 <hram> cm: Sometimes, sometimes not... Boxing of data can also be a problem (memory!), also having a GC is always a problem if you want to control speed.
06:35:51 <shapr> it's too bad Ennals gave up on the spec_eval branch of GHC, I think that would have made a great positive difference.
06:35:52 <cm> hrm
06:36:30 <hram> I think much speed could be gained by as better backend (to ghc) that selects more optimal instructions.
06:37:13 <hram> shapr: What about SPJ optimistic evaluation, it sounded like they were planning to make it the default in some future...?
06:37:37 <shapr> happily, the better backend is nearly done :-)
06:38:02 <shapr> or maybe it's not nearly done, but it's mostly plugged in at least.
06:38:07 <hram> shapr: The cmm one?
06:38:09 <cm> better backend? who's working on that?
06:38:14 <shapr> yup, the C-- backend
06:38:27 <cm> oh
06:38:33 <shapr> I think the optimistic eval is the same as the Ennals spec_eval
06:38:54 <shapr> SPJ and Robert Ennals did the speculative evaluation paper at icfp 2003
06:39:38 <shapr> I emailed Robert recently to see what was going on with that, he said he's working for Intel Research(?) and not interested in updating it.
06:40:39 <hram> Ah, bad...
06:41:04 <shapr> he also said it would be a lot of work to get it updated from 5.04(?) to 6.2
06:42:09 <shapr> yah, tyvarr
06:42:21 <hram> shapr: Yes, probably so... Well, we just have to hope that the C-- backend performs well then...
06:42:43 <cm> i was under the impression that that one was already in use :)
06:42:56 <cm> after reading some SPJ (?) paper about it
06:46:49 <hram> The really bad thing with the current backend is that you can't switch on gcc's more heavyweight optimisations since then ghc won't recognise the asm output
06:47:40 <Lunar^> shapr: I can handle IRQ now ! :)
06:48:01 <Lunar^> shapr: (ok, not really an efficient way, but it works)
06:49:28 <cm> "I" is hOp?
06:49:58 <Lunar^> cm: sure... maybe I'm taking this too personally ?
06:50:33 <shapr> cm: maybe I'm thinking about the wrong thing, which paper?
06:50:33 <shapr> hi ustenzel 
06:50:35 <shapr> I think the C-- backend will be an improvement
06:50:36 <cm> no, sorry, I just can't associate every nick with the background information (whois, current project, ..) yet, so i double-checked ;)
06:51:14 <Lunar^> cm: Ok... but I might be taking this too personally anyway ;)
06:51:43 <cm> :)
06:51:51 <cm> it's an awesome project
06:52:01 <hram> shapr: probably so, esp. if more projects start to use C-- seriously and more effort is put into a seriously good C-- backend.
06:52:01 <Lunar^> cm: Work for 10 years :)
06:52:12 <cm> Lunar^: so better take it personally! ;)
06:52:14 <shapr> Lunar^: how did you solve it?
06:52:31 <Lunar^> shapr: It's in my dev lOg, it's quite hacky for the moment
06:52:33 <shapr> hram: the evil mangler really sucks, I'll be so happy when it's gone.
06:52:42 <Lunar^> shapr: added a new primop forkIRQHandler
06:52:46 <cm> shapr: it seems that I mixed up stuff.. SPJ \in GHC \lor C-- ;)
06:52:48 <shapr> cool, are the sources online?
06:52:57 <shapr> cm: eh?
06:53:06 <shapr> cm: it's easy to mix up SPJ stuff, he does *everything*
06:53:17 <cm> shapr: yeh :)
06:53:27 <cm> shapr: i probably read about his GHC work and a C-- paper shortly afterwards
06:53:43 <shapr> when I went to ICFP I knew I was going to meet SPJ, and I figured I'd be such a fanboy I wouldn't be able to say anything.
06:53:47 <Lunar^> shapr: Which forks a thread that is referenced (within a StablePtr) by the C IRQ handler which then put thtis StgTSO in front of thread queues and ask a context switch
06:53:57 <Lunar^> lol
06:54:02 <cm> shapr: haha :) so did you say anything? ;)
06:55:45 * themaximus is away: <<Breakfast>>
06:56:05 <shapr> actually, I had a beer or two (I think? three?) the first night at ICFP, and with my microscopic alcohol tolerance, I was feeling *fine* and when we got back to the hotel, SPJ was hanging out in the lobby with a laptop, so I was relaxed and social. (and completely smashed)
06:56:12 <shapr> Of course, I can only hope he wasn't thinking "geez, who's this drunk fanboy?"
06:56:29 <Lunar^> hehe
06:56:30 <cm> :)
06:58:51 <shapr> so, the moral of that story is that one beer is good for cutting down on inhibitions in a social situation, but more is probably not. (this may be specific to me, I dunno)
06:59:29 <cm> i hate beer, can't help myself ;)
06:59:31 <shapr> cm: SPJ is part of the C-- committee
06:59:59 <ham> hiho
07:00:01 <shapr> yah, beer tastes nasty, I agree. but it's quite helpful for geeks like me who are actually quite shy at first in person.
07:00:04 <shapr> hey ham
07:00:07 <ham> hiho
07:00:26 <Lunar^> shapr: Hope we could drink one next time you're coming in France :)
07:00:27 <cm> and apparently i'm too stupid to google for the hOp project page
07:01:20 <cm> ah there we go
07:01:48 <Maddas> ham: You said that already :-)
07:01:56 <Lunar^> cm: http://etudiants.insia.org/~jbobbio/hOp/ for my personal log
07:02:17 <cm> sweet, thanks :)
07:04:39 <dfsakjl> device drivers in haskell?
07:04:58 <dfsakjl> was alcohol involved in the conception of such a project?
07:05:57 <cm> haha
07:06:21 <emu> (a) beer tastes good (b) drink more of it
07:06:43 <Maddas> emu: No! Beer is evil!
07:06:58 <Lunar^> dfsakjl: Why do you feel bad about it ?
07:07:26 <dfsakjl> it just seems a little over the top
07:08:03 <emu> Maddas: what is wrong with your beer?
07:08:28 <Maddas> emu: I don't have any Beer. I'm talking about Beer in general.
07:08:33 <cm> shapr: hrm.. can i compile at "runtime" with C--?
07:08:33 <dfsakjl> beer tastes nasty?
07:08:42 <dfsakjl> i think you need to switch beers
07:08:56 <cm> shapr: like if i had a language that had a "compile" primitive..
07:09:03 <Maddas> dfsakjl: Switch to Tea, yes. :)
07:09:06 * emu agrees with dfsakjl 
07:09:32 <dfsakjl> tea is not an instance of beer
07:09:47 <Maddas> dfsakjl: I meant switching from beers to teas.
07:09:52 <emu> i'll do long island ice tea
07:10:14 <Maddas> I don't like most Ice Teas either :-(
07:10:16 <dfsakjl> oh man
07:10:20 <dfsakjl> now THOSE are evil!
07:11:11 <emu> Maddas: you need to go find yourself some good beer, and fast
07:11:18 <emu> urgent mission
07:11:27 <Maddas> emu: I don't drink Beer :)
07:11:51 <emu> whiskey, then?
07:11:58 <shapr> Lunar^: btw, PAR may not be a useless #ifdef
07:12:00 <emu> i bet whiskey is good with tea
07:12:05 <emu> wonder why i haven't had that
07:12:14 <emu> irish tea
07:12:24 <Maddas> Heh
07:13:14 <Lunar^> shapr: ?
07:13:16 <shapr> Lunar^: I have an SMP machine, I wonder...
07:13:41 <Lunar^> shapr: Why is there #ifdefs SMP, then ?
07:13:47 <shapr> oh, huh
07:13:55 <shapr> obviously I need to read the source myself
07:13:57 <Lunar^> shapr: Anyway, that whole Scheduler is a mess
07:14:14 <Lunar^> shapr: And we can't afford round-robin scheduling for an operating system anyway
07:15:24 * themaximus is back (<<Breakfast>>) gone for 19 mins 38 secs
07:15:31 <shapr> so, scheduler rewrite?
07:16:01 <Marvin--> themaximus: that is really annoying
07:16:20 <themaximus> Oh fine
07:16:33 <emu> was it an extra special Breakfast? with the extra <<pizzaz>> ?
07:16:51 <Lunar^> shapr: That's on the TODO-after-a-lot-of-other-things list
07:17:21 <themaximus> No, I just felt like putting those <<>>'s
07:18:02 <shapr> is the latest source online?
07:18:19 <themaximus> Moo.
07:18:50 <shapr> if you have a keyboard driver, there could be an actual shell
07:18:54 <shapr> and if there's a shell...
07:19:08 <Lunar^> shapr: Nope... I would like to write the keyboard driver first and to clean up the build process
07:19:15 <shapr> ok
07:20:00 <Lunar^> shapr: sebc's way was nice for the first release, but now it's quite annoying to work with
07:20:39 <shapr> what will it look like next?
07:21:35 <Lunar^> shapr: I don't know.. maybe I should put the whole thing in a revision control system (even GHC source)
07:21:45 <shapr> darcs? arch?
07:22:02 <Lunar^> Dracs doesn't seem to support branch, which annoys me
07:22:17 <shapr> it sort of does support branch, you just make a copy of the repo
07:22:34 <eivuokko> "Natural branch" :)
07:22:53 <shapr> it is a lot simpler, I'll say that.
07:23:10 <Lunar^> I started a arch repos on ones of sebc's boxes but it's down for the moment
07:23:13 <eivuokko> Is continuous merging easy in darcs?
07:23:13 <shapr> on the one side, that means that every darcs repo is a branch
07:23:34 <Lunar^> I will surely merge my last work when it gets up
07:23:45 <Lunar^> For the shell, I was thinking about GHCi :)
07:23:55 <shapr> eivuokko: if you and I both have copies of a darcs repo, we can pull patches from each other
07:24:23 <shapr> darcs doesn't really have braches, merging, etc
07:25:14 <shapr> or maybe it has it a lot better than anything else, it depends on how you look at it.
07:25:50 <eivuokko> Yes, so "merging", what's it called in darcs?  Bringing in patch-sets (commit sets?) or so.
07:26:36 <eivuokko> I guess I could reread darcs docs, but I dunno who actually uses it and how well it works...repositories aren't something you want to pick wrong at the start.
07:27:02 <shapr> I'm using it
07:27:17 <shapr> also, you can pull and push to/from my wikiwiki darcs repo
07:27:25 <shapr> so that's a good way to test stuff
07:28:01 <shapr> eivuokko: darcs get http://www.ScannedInAvian.org/repos/wikiwiki
07:28:12 <shapr> hi cookie 
07:29:35 <cookie> hi
07:30:59 <shapr> looking for Haskell info?
07:31:13 <cookie> yeah lol
07:31:49 <shapr> anything in particular?
07:32:15 <cookie> na a =]
07:32:27 <shapr> ok
07:32:41 <cookie> :)
07:33:31 <eivuokko> shapr, have you used darcs long?  With many people making changes at the sametime?
07:34:43 <eivuokko> I guess what I mean is how hard it's to cope with unexpected push-failures.
07:35:22 <shapr> no, I haven't used it with many people. I'd like to try that though.
07:35:50 <eivuokko> Not technically....technically it's easy on new version control systems.  "How does it feel?"
07:36:08 <eivuokko> Ah, ok.  Gotta take the leap sometime, then :)
07:38:01 <Igloo> I think it's essentially the same as fixing CVS conflicts
07:38:31 <eivuokko> "Sucks" on wide changes? ;)
07:39:16 * Igloo hasn't had much experience with either to know how they compare
07:39:52 <eivuokko> Arch's seems nice, but docs felt work-in-progress and it has assumptions on stability of homedirs vs repos and requires working dir to be in repo.
07:42:29 <shapr> I've had conflicts, they were easy to resolve
07:45:33 <shapr> the only thing I've missed in darcs so far is a patch browser
07:46:06 <shapr> I record a change on my dev box, I pull the latest changes to my production box, then I find a typo or something
07:46:16 <shapr> obvsiously that could be fixed if I really used darcs test..
07:47:05 <eivuokko> Hmmm, what's that?
07:47:13 <shapr> which?
07:47:23 <eivuokko> "darcs test"
07:47:41 <shapr> oh, you can specify something to run when checking into the repo
07:47:57 <eivuokko> Ooo, right.
07:47:58 <shapr> it should be a test suite or something, it's the last ditch sanity check
09:40:39 <shapr> Lunar^: what window manager do you use?
09:54:41 <shapr> hi
09:54:47 <SpLinux> hi!
09:55:09 <shapr> looking for Haskell info?
09:55:17 <SpLinux> yes.
09:56:17 <shapr> anything in particular?
09:56:32 <SpLinux> no...
09:57:40 <shapr> are you familiar with functional programming?
09:58:21 <SpLinux> no, I want learn haskell
09:58:26 <shapr> ok then!
09:58:28 <shapr> @learn
09:58:28 <lambdabot> http://www.haskell.org/learning.html
09:58:37 <shapr> that url gives a good place to start
09:58:47 <shapr> and when you have questions, ask here!
10:00:45 <SpLinux> bye, see later
10:00:51 <shapr> ok, see you!
10:01:00 <SpLinux> k
10:29:13 <Lunar^> shapr: I'm under OS X right now, but when using GNU/Linux, I prefer KDE
10:29:42 <shapr> ok, just curious
10:30:01 * shapr grumbles at mozilla-firebird
10:32:30 <Maddas> KHTML is quite good
10:32:58 <Maddas> shapr: Do you mean Firefox? :)
10:33:20 <shapr> I just want to rebind keys in firebird, M-number switches to that tab in gnome-terminal, and I want that in firefox too
10:34:08 <Maddas> Heh, you have so many modifier keys and now you can't even make use of them. :)
10:36:50 * Marvin-- goes "wow"
10:36:53 <Marvin--> I just saw Kill Bill
10:39:21 <Maddas> Awesome movie
10:46:54 <phubuh> It was aesthetically pleasing in a lot of ways.
10:51:19 <Maddas> phubuh: Certainly.
11:33:08 <shapr> yeehaa
11:33:14 <DeezNuts> haayee
11:33:26 <shapr> y0 Nuts, wassup?
11:34:33 <shapr> hey, magnatune.com is a record label that doesn't suck. their motto is "We're not evil"
11:34:35 <DeezNuts> just bustin phat beets
11:34:40 <DeezNuts> lol
11:34:47 <shapr> sugar beets?
11:34:49 <DeezNuts> what sort of music do they press?
11:34:52 <DeezNuts> sugar beets?
11:35:04 <DeezNuts> just bumpn' some old-school dre/snoop
11:35:12 <DeezNuts> 187 deep-cover mix
11:35:19 <creature> shapr - did you see that label flogging un-DRM'ed MP3s online?
11:35:30 <shapr> creature: I think that's probably the same one
11:35:50 <shapr> they stream all of their full albums at 128k
11:36:00 <shapr> I found this one band that I'm highly enamored of, namely "brad sucks"
11:36:03 <SamB> does mp3 support drm?
11:36:09 <SamB> if so, I shall say yuck
11:36:14 <shapr> I really like his album named "I don't know what I'm doing"
11:36:15 <Maddas> heh, I listen to magnatune.com things once in a while, shapr.
11:36:25 <shapr> I gotta buy that album, it's great.
11:36:46 <creature> Ooh, it's snowing here. 
11:37:07 <Maddas> Is that anything special, creature?
11:37:41 <creature> Maddas - well, it's not common...
11:37:55 <creature> On the one hand, it makes everywhere pretty. On the downside, it means I'm going to freeze. 
11:37:56 <Maddas> Where do you live?
11:38:13 <creature> The UK. 
11:38:16 <Maddas> Ok
11:38:19 <creature> In Kent (so south).
11:38:28 <Maddas> Oh, I've been in Kent already, I think :)
11:38:57 <creature> Where did you go? 
11:39:55 <Maddas> Visited relatives.
11:42:00 <DeezNuts> hey i gotta problem
11:42:02 <DeezNuts> with this code
11:42:05 <DeezNuts> listFactorials [x] = do
11:42:06 <DeezNuts>   return x
11:42:06 <DeezNuts> listFactorials (x:a) = do
11:42:06 <DeezNuts>   putStrLn ("Factorial of " ++ show x ++ " is " ++ show (factorial x))
11:42:06 <DeezNuts>   listFactorials a
11:42:21 <DeezNuts> no matter what its not doing the last element of thel ist
11:43:03 <Marvin--> that's not surprising, the first line states that it shouldn't do anything with a unit-length list
11:44:08 <DeezNuts> nevermind i fixed it
11:44:12 <Marvin--> but why do you need to return the last element of the list?
11:44:28 <DeezNuts> i have no idea
11:44:31 <DeezNuts> heres my new code
11:44:43 <DeezNuts> listFactorials [x] = do
11:44:43 <DeezNuts>   putStrLn ("Factorial of " ++ show x ++ " is " ++ show (factorial x))
11:44:43 <DeezNuts> listFactorials (x:a) = do
11:44:43 <DeezNuts>   putStrLn ("Factorial of " ++ show x ++ " is " ++ show (factorial x))
11:44:43 <DeezNuts>   listFactorials a
11:44:43 <Maddas> haha
11:45:07 <Marvin--> so now you have duplicated code instead, that's generally bad
11:45:08 <DeezNuts> would that be the standard way to write something that processes a list and outputs results as its processing?
11:45:14 <DeezNuts> i know
11:45:17 <DeezNuts> but
11:45:18 <DeezNuts> this is haskell
11:45:19 <creature> I'd be more inclined to write something like: 
11:45:24 <creature> listFactorials [] = []
11:45:26 <Maddas> DeezNuts: so?
11:45:27 <Marvin--> why not replace the first case ([x]) with an empty list ([]) case?
11:45:39 <DeezNuts> uhh
11:45:42 <DeezNuts> dudes
11:45:46 <DeezNuts> im NEW to haskell if u can't tell
11:45:51 <DeezNuts> and to functional programming in general
11:45:56 <Cale> Hey
11:46:03 <DeezNuts> hey there cale
11:46:05 * Cale wakes up
11:46:12 <DeezNuts> good morning
11:46:12 <creature> Actually, forget that. 
11:46:32 <Cale> heh, or afternoon, really :)
11:46:41 <DeezNuts> what time is it?
11:46:45 * DeezNuts has 2:50
11:46:52 <Marvin--> creature: yes, do forget that :)
11:47:29 <DeezNuts> Cale: first challenge of the day: How do I write my code above without duplicating the putStrLn line?
11:47:30 <Marvin--> DeezNuts: typically, you'll want one recursive case ((x:xs), or in your case, (x:a)) and one base case, []
11:47:40 <Cale> ~2:50, yeah
11:47:51 <DeezNuts> Cale: heh what time did u go to sleep?
11:47:59 <Cale> I don't know
11:48:14 <DeezNuts> Marvin--: hmm ill try something
11:48:21 <Marvin--> DeezNuts: now, the question is, what should the function do for the empty list?
11:48:22 <DeezNuts> Cale: heh did u party?
11:48:29 <Cale> Mildly.
11:48:39 <DeezNuts> Marvin--: ya... what should it do?
11:48:52 <DeezNuts> Cale: your a real party veteran aren't you ;-)
11:48:59 <Cale> heh
11:49:09 * DeezNuts want's to get ahold of some Canadian bud
11:49:11 <Marvin--> DeezNuts: what return type does your function have?
11:49:21 <DeezNuts> IO?
11:49:40 <Marvin--> the IO type takes an argument, though, IO Int is not the same as IO String or IO ()
11:51:05 <Marvin--> in any case, a value of type IO t is basically a computation that produces something of type t, for a printing function, you normally use IO ()
11:51:32 <Marvin--> there is a very simple way of constructing the "empty" computation
11:51:56 <Marvin--> it's the function return
11:52:02 <Cale> Here's how I'd do it:
11:52:10 <Cale> printFactorial n = putStrLn $ "The factorial of " ++ show x ++ " is " ++ show (factorial x)
11:52:15 <Cale> printFactorials xs = map printFactorial xs
11:52:40 <Marvin--> so you'd have listFactorials [] = return ()
11:52:44 <Cale> oops - replace x with n in the first line :)
11:53:04 <DeezNuts> Cale: no do?
11:53:05 <Marvin--> Cale: ah, but that will have return type [IO ()], which is not an IO type
11:53:10 <Cale> oops
11:53:14 <Cale> mapM
11:53:15 <Cale> _
11:53:41 <Marvin--> DeezNuts: as Cale says, there's a function that does the recursion for you -- mapM_
11:53:46 <Cale> (I'm still a bit muddleheaded -- waking up)
11:53:51 <DeezNuts> mapM_
11:53:53 <DeezNuts> ugly name
11:53:53 <DeezNuts> heh
11:54:12 <Cale> well, mapM is the version that returns an IO [a] of the results
11:54:27 <Cale> mapM_ just throws away the results of the computation
11:54:53 <Cale> (since we're just printing stuff, the results don't matter)
11:55:00 <SamB> mapM ... >> return ()?
11:55:52 <Cale> roughly
11:56:09 <Cale> sequence_      =  foldr (>>) (return ())
11:56:14 <Cale> mapM_ f as       =  sequence_ (map f as)
11:57:45 <DeezNuts> *** Expression     : show n " is "
11:57:46 <DeezNuts> *** Term           : show
11:57:46 <DeezNuts> *** Type           : a -> String
11:57:46 <DeezNuts> *** Does not match : b -> c -> d
11:58:07 <Cale> ++
11:58:33 <DeezNuts> *** Term           : printFactorials
11:58:34 <DeezNuts> *** Type           : [a] -> IO ()
11:58:34 <DeezNuts> *** Does not match : a -> IO ()
11:58:34 <DeezNuts> *** Because        : unification would give infinite type
11:59:14 <DeezNuts>      24 printFactorials n = do putStrLn ("Factorial of " ++ show n ++ " is " ++ show (factorial n))
11:59:14 <DeezNuts>      25 printFactorials n = mapM_ printFactorials n
11:59:28 <Cale> no
11:59:35 <Cale> they were separate functions
11:59:46 <Cale> I had "printFactorial" and "printFactorials"
11:59:53 <DeezNuts> oops
12:00:17 <Cale> i.e. printFactorial prints one, and then we map that over the list to get an action that prints them all.
12:00:44 <DeezNuts> ahh
12:00:49 <DeezNuts> kewl it works
12:01:05 <Cale> printFactorials [1 ..]
12:01:07 <Cale> :)
12:01:26 <DeezNuts> why is it that I dont need the 'do' in printFactorial?
12:02:02 <Cale> because you only have one IO action there
12:02:15 <Cale> do is a way to chain a bunch of IO actions together
12:02:24 <Cale> (to make a new one)
12:02:58 <DeezNuts> hmm
12:03:01 <DeezNuts> ok
12:03:11 <DeezNuts> why do we need to tell Haskell that
12:03:17 <DeezNuts> can't it just figure that out itself?
12:03:35 <cm> rere
12:03:50 <Cale> hm? There should be some notation for chaining IO things together.
12:04:03 <DeezNuts> why do they need to be chained
12:04:19 <Cale> well, you want to perform one, and then the next, and so on, usually.
12:04:33 <DeezNuts> yeah but can't haskell just tell that from the order of statements?
12:04:47 <Cale> it does, that's what do notation is
12:05:30 <DeezNuts> why is it NOT necessary in imperative languages?
12:05:37 <Maddas> it is
12:05:52 <DeezNuts> hmm maybe i used the wrong word
12:05:59 <DeezNuts> why is it not necessary in say Perl
12:06:01 <Cale> in imperative languages you have ;
12:06:20 <SamB> DeezNuts: imperative languages have implicit do blocks around everything, generally
12:06:23 <DeezNuts> but i thought haskell just uses the newline if u dont put a ;
12:06:30 <SamB> (so to speak)
12:06:31 <Cale> yeah
12:06:45 <Cale> I mean, it's the same thing, syntactically.
12:07:20 <Maddas> You can also use do { ... ; ... ; } :-)
12:07:24 <Marvin--> DeezNuts: the thing is that a Haskell program is an unordered collection of functions, the "do" keyword puts you in a sequential "mode"
12:07:29 <Maddas> (err, or was that without do?)
12:07:51 <Cale> no, you're right, it has the do there
12:07:57 <Maddas> Ok
12:07:59 <Marvin--> Maddas: the {;} syntax can be used wherever the layout rule applies
12:08:25 <Marvin--> module Foo where { ... ; class C a where { ... } ; ... ; f x = case x of { ... } ; ... }
12:08:30 <Maddas> ;}
12:08:33 <Cale> The idea is that with do notation, you have an imperative language sitting inside Haskell.
12:08:45 <SamB> you can also use ; without {}
12:10:41 <Cale> The imperative "do notation" language builds up abstract IO computations, which can then be treated as values, stuffed into lists or trees, or used in main somehow, to be run when the program executes.
12:11:23 <Cale> So in some sense, you have an imperative language sitting inside a pure functional one, and they can talk to each other in some sense.
12:13:41 <Cale> Does that make any sense?
12:14:00 <Cale> DeezNuts: you still here?
12:14:09 <Marvin--> no, he fell asleep ;)
12:14:30 <DeezNuts> sorry
12:14:32 <DeezNuts> had company
12:14:35 <Cale> ah
12:14:40 <DeezNuts> they are gone now though
12:14:44 <DeezNuts> they came to take my addies :p
12:14:45 <DeezNuts> bastards
12:14:56 <DeezNuts> ok it sort of makes sense
12:15:27 <DeezNuts> if I always put a ; at the end of my statements would that remove the requirement of the 'do' notation?
12:15:47 <Maddas> no
12:15:48 <Marvin--> you don't put ; at the end of statements in Haskell, you put them between statements, and no
12:16:02 <Cale> do notation isn't very complicated or syntactically heavy - you just write do and then list the things you want done
12:16:12 <Marvin--> the do keyword means "here comes an imperative thingy"
12:16:18 <DeezNuts> i understand that
12:16:30 <DeezNuts> im just thinking that it shouldn't be required
12:16:33 <Marvin--> actually, the do construct is just syntactic sugar
12:16:38 <DeezNuts> ya
12:16:38 <Cale> I mean, in Pascal, or something, you'd be writing "begin" and "end" everywhere.
12:16:39 <SamB> DeezNuts: this is why Hello World is not a good first program, I think
12:17:07 <Cale> you can also use >>= and return directly
12:17:16 <DeezNuts> can I use { } to say "here comes an imperative thingy"?
12:17:21 <Marvin--> DeezNuts: no
12:17:35 <DeezNuts> how is do 'just syntactic sugar' then?
12:17:37 <Marvin--> DeezNuts: {} just means "override the layout rule"
12:17:38 <Cale> DeezNuts: no, because you can use {;} anywhere you have blocks
12:17:53 <Cale> like in case statements, for instance
12:17:59 <SamB> DeezNuts: you can use >>= instead
12:18:07 <DeezNuts> how would I use >>=?
12:18:20 <DeezNuts> just in place of do?
12:18:24 <shrimpx> heh
12:18:26 <Marvin--> DeezNuts: do { x <- m1 ; m2 }  is syntactic sugar for   m1 >>= \x -> m2
12:18:44 <DeezNuts> lol
12:18:46 <DeezNuts> u know what
12:18:51 <DeezNuts> im gonna read more of this tutorial
12:19:12 <Marvin--> but forget that for now, you can write lots and lots of haskell programs without ever having to bother with >>=
12:19:48 <Marvin--> just accept do as mandated syntax when you want to do I/O
12:19:59 <DeezNuts> thats what im doing
12:20:00 <Cale> (>>=)  :: IO a -> (a -> IO b) -> IO b -- it takes an IO computation of type a, and a function which takes an a and returns an IO computation of type b, and chains them together to make an IO computation of type b
12:20:41 <Cale> (really, it works with arbitrary monads, but probably best not to worry so much about that for now) :)
12:22:07 <Cale> the thing that really made this click for me is http://www.nomaware.com/monads/html/analogy.html :)
12:24:04 <Marvin--> I like the Monads for the Working Haskell Programmer
12:25:45 <Cale> http://www.nomaware.com/monads/html/ is a really good tutorial in general.
12:27:20 <Marvin--> of course, the "Advanced Functional Programming" course that Koen gave helped :)
12:33:39 <Marvin--> though it seems like Josef is giving it now
15:25:14 <stepcut> argh, ghc really needs a machine with atleast 256 megs of ram
16:52:55 <Lemmih> stepcut: Are you sure? I haven't experienced any problems with in on my laptop (196mb ram).
18:13:16 <stepcut> Lemmih: Well, atleast for the stuff I am working on, its not unusual for ghc or ld to consume more than 128MB of ram, and then the performance just goes to crap when it starts swapping
18:13:42 <np_hard> laziness might be hurting you
18:13:43 <stepcut> if I build ghc, there is a point in time where ar consumes > 512MB of memory 
18:13:48 <np_hard> oh
18:13:49 <np_hard> nm
18:14:18 <stepcut> its actually ld that seems to be causing most of my problems
18:25:03 <SyntaxLaptop> can I ask anyone a couple darcs questions?
18:28:23 <ayrnieu> syntax - #darcs seems to exist -- but you may as well ask your questions and see what happens.
18:28:48 <Riastradh> SyntaxLaptop, you should know, being a frequent IRC user, that it's frowned upon to ask whether or not you can ask a question; just ask it...
18:29:15 <SyntaxLaptop> Riastradh: I don't buy it. I don't want to type if there's no darcs users in here :)
18:29:43 <SyntaxLaptop> I'm wondering if I can push a repository via ssh to a web server that doesn't have darcs installed
18:29:58 <Riastradh> I don't think so.
18:31:11 <Igloo> It seems unlikely given it would have to handle merging etc
18:31:22 <SyntaxLaptop> that's what I was afraid of :)
18:31:33 <SyntaxLaptop> is there any kind of simple mirror facility?
18:32:17 <Igloo> Can darcs really not be installed on the webserver?
18:35:44 <SyntaxLaptop> it can be, I just wasn't sure that's what I wanted to do
18:37:46 <Igloo> Mirroring using standard tools wouldn't guarantee you that the web server repo was consistent. It would be a good idea for darcs to be able to do it itself though, I think, where it could work on the assumption the remote repo was exactly the same as itself before the current checkin
18:38:20 <Igloo> Does a checkin lock the whole repo? Might get ugly if not
18:40:42 <SyntaxLaptop> Idon't know.
18:48:26 <SyntaxLaptop> hm, so if I started a repository on my laptop, now I want to get a mirror of that on my web server that I can push to and pull from, do I have to "get" from my laptop first?
18:49:02 <Igloo> That's how I'd do it, but I'm no expert
18:49:32 <SyntaxLaptop> hmm.
18:49:59 <SyntaxLaptop> I think I'll just start over on the server... the laptop is behind a firewall, so 'getting' will be a bit of a problem.
18:50:34 <Igloo> Ah. Perhaps inittree and push would work?
19:29:41 <SyntaxLaptop> thanksk for the help, Igloo
19:36:59 <SyntaxLaptop> this looks like it should be working, but just hangs: darcs get --tag-name "0.9.17" http://abridgegame.org/repos/darcs
19:39:09 <SyntaxLaptop> oh, maybe I should have told it verbose
19:39:10 <SyntaxLaptop> duh
20:12:09 <ozone> re
20:12:18 <DeezNuts> er
20:40:29 <SyntaxLaptop> night all
23:53:29 <earthy> moin
