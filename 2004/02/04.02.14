04:43:49 <swisscheese> Hi all! Try to run ghc from ghci via ":! ghc -c c:\data\code\main.hs" but app seems no faster than interpreted mode. Not sure i'm really running the compiled version.
04:44:01 <swisscheese> Try -> Am trying
04:56:43 <swisscheese> Sorry - cpu crashed. Did anyone answer me about ghci?
04:57:36 <Vulpyne> I think everyone is asleep.
04:57:48 <swisscheese> :-(
04:58:00 <Vulpyne> Why don't you generate an actual executable and try running that?
04:58:41 <swisscheese> You mean at a dos command prompt instead of via ghci?
04:58:51 <Vulpyne> Actually, it seems like -c makes it stop after generating .o files.
04:59:47 <Vulpyne> If you do ghc main.hs from the prompt, it should produce main.exe
04:59:54 <swisscheese> without -c it says "compilation is not required".
05:00:07 <swisscheese> ghci prompt?
05:00:12 <Vulpyne> Does main.exe, main.o already exist?
05:00:16 <Vulpyne> No, DOS box prompt.
05:00:29 <earthy> swisscheese, if you compile anyhthing in ghci, you generate wildly inefficient bytecode stuff
05:00:33 <earthy> s/compile/load/
05:00:46 <earthy> but, that is recognised by ghc as a valid compile
05:00:47 <swisscheese> I see hs o and hi files.
05:00:53 <earthy> exactly
05:01:01 <earthy> the hs are your sources
05:01:06 <earthy> the hi are the interface files
05:01:11 <Vulpyne> Try deleting .o and .hi and compile the way I said.
05:01:23 <Vulpyne> Er...
05:01:29 <Vulpyne> .hi is a text file?
05:01:35 <earthy> the o the ghc compiled (but not linked) binaries.
05:01:49 <earthy> vulpyne: no, they are symbolic interface representations
05:02:19 <Vulpyne> Ah, okay. So I was right in saying to delete them?
05:02:22 <Vulpyne> You can tell I don't compile Haskell too often. :)
05:02:46 <earthy> yes, you was right. :)
05:04:14 <earthy> well, compiling ghc you don't want to do too often, no. :)
05:10:03 <swisscheese> OK, created a shortcut to ghc.exe with main.hs and on running it makes same 2 files but no exe.
05:11:12 <swisscheese> DOS box does not stay open so not sure if it is reporting anything.
05:11:20 <Vulpyne> Umm...
05:11:32 <Vulpyne> That doesn't even sound close to what I thought I was telling you to do. :)
05:12:03 <Vulpyne> I meant go to the commandline.
05:12:08 <Vulpyne> Change to the directory with your sources.
05:12:16 <Vulpyne> Delete any temporary files like .o or .hi.
05:12:25 <Vulpyne> Then at the prompt, run: ghc yoursource.hs
05:12:34 <Vulpyne> And it should create yoursource.exe which you will be able to execute.
05:13:03 <swisscheese> I was just trying to setup a more efficient method but OK, I'll try it.
05:21:12 <swisscheese> It generates same files plus a.out
05:22:57 <Vulpyne> Hmm.
05:23:01 <Marvin--> not a.exe?
05:23:07 <Vulpyne> Heh, try renaming a.out to something.exe maybe?
05:23:09 <Marvin--> that sounds like a bug
05:23:28 <Marvin--> you can add  -o a.exe  to the command line
05:23:34 <Vulpyne> Could it be crosscompiling or something wacky?
05:25:24 <lordjim> haskell programs can run on palm ?
05:26:31 <swisscheese> -0 a.exe generated a.exe but when i run a it shows a blank dos box (BTW same for renaming a.out to a.exe).
05:27:00 <swisscheese> I presume you guys don't run on windows?
05:27:07 <Marvin--> nope
05:27:49 <swisscheese> It's weird - it seems haskell is both ahead of it's time and behind with such archaic UI like command line prompts.
05:28:30 * esap thinks command line is only archaic in windows :-)
05:29:59 <lordjim> command line is the future, it's shown in the movie alien, no windows on the screens
05:31:25 <lordjim> and alien is in the future
05:31:39 <lordjim> quid erat demonstrandum
05:31:48 <ibid> and cyborgs will be based on 6510A, see Terminator 2 :)
05:31:51 <swisscheese> Sorry guys - app it working - in ghci it works a little different.
05:32:05 <lordjim> ibid: true
05:34:15 * esap wonders what are the left and right adjoints of _(A)  [functor application with argument A]
05:36:06 <swisscheese> Thanks again - bye for now.
12:12:15 <ibid> anybody care to comment on http://www.mit.jyu.fi/antkaij/opetus/ap/2004/ver.html? (not exactly haskell-related, but close, the course will use haskell for examples:)
12:17:17 <Darius> ibid: Does the last bullet say what you want it to say?
12:18:01 <ibid> i'm trying to be vague :)
12:18:06 <ibid> in that bullet
12:18:18 <ibid> and, no, it probably doesn't
12:18:58 <ibid> moved it back to the main page, http://www.mit.jyu.fi/antkaij/opetus/ap/2004/index.en, and removed a part of that bullet
12:21:38 <Darius> oo, what's an example of a "hackerish" Haskell idiom?
12:21:44 <earthy> the `to enhance the data' part, I think
12:22:09 <ibid> removed that, yeah
12:22:17 <earthy> darius: I count phantom types to be a hackerish idium
12:22:21 <earthy> idiom even
12:23:08 <ibid> for the purposes of that class, advanced monads and tying the knot are examples
12:24:49 <ibid> ... and cps ...
12:25:39 <earthy> hm. and to think I find monad transformers a *great* help when trying to implement a higher order logic in haskell
12:26:10 <ibid> yeah, they are
12:26:36 <ibid> but i'm trying to make the class accessible to people with no background on fp
12:27:58 <pimpbot5000> is anyone here involved in the gtk2hs project?  im trying to compile the latest cvs code, but am having linking problems.
12:38:52 <rowdey> #fedora
12:41:21 <Darius> How effective is that expected to be?
12:45:18 <ibid> who are you asking that?
12:51:59 <Darius> ibid: No one in particular.
12:52:47 <ibid> okay, what's "that"? :)
12:52:57 <ibid> (which was my real question)
12:55:02 <Darius> ibid: Yeah, I thought it might be.  "That" is people joining a channel saying something and leaving immediately.
12:55:47 <Heffalump> I think they were confused.
12:56:05 <Darius> In this case, maybe.  But there are other cases.
12:56:49 <ibid> Darius: ok :)
12:58:14 <stepcut> Darius: have you seen the 'highinterested' quotes in this page? http://www.haskell.org/hawiki/QuotesPage
12:58:24 <stepcut> highlyinterested rather
13:00:16 <Darius> stepcut: I was there when SyntaxNinja made the parody and when the person he was parodying arrived.
13:00:35 <stepcut> :p
13:01:23 <stepcut> its a quality parody
13:07:42 <stepcut> what's the difference between i and j when dealing with complex numbers?
13:08:59 <Darius> If you mean i and j as I think you do, the difference is whether you are talking to a mathematician or an engineer.
13:09:51 <stepcut> so, if I am designing digital filters, I am an engineer and use j?
13:11:22 <Darius> That's the most common place I've seen j used instead of i.
13:11:39 <stepcut> http://en.wikipedia.org/wiki/Quaternion
13:18:50 <Darius> For quaternions it's something else.  i,j, and k are basis vectors of a vector that represents a rotation plane.
13:19:28 <Darius> In engineering, j is just another name for i.  For quaternions, i,j, and k are three different things.
20:54:38 <pimpbot5000> is anyone familiar with how to store data records on gtk2 widgets?
21:09:05 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/", "ghc 6.2 is out", "ghc rpms: http://haskell.org/~petersen/rpms/ghc/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html"]'
21:09:05 --- topic: set by shapr on [Sat Jan 24 08:38:50 2004]
21:09:05 --- names: list (clog shawn sergio_ malik whee emu liralen jagular noclouds tic earthy norpan liiwi Segora Vulpyne OdinX skew xkb andersca kosmikus|away ludde forester ibid gdsx wax)
