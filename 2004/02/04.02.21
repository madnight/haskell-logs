00:16:23 <DeezNuts> is the 'ord' function not in hugs?
00:21:35 <DeezNuts> damnit why do you people sleep?
00:21:46 <DeezNuts> you should be answering my questions right now, not revitalizing your bodies
00:24:34 <Swynndla> yea it is in hugs, but you need to load the Char module first
00:24:41 <DeezNuts> phat
00:24:45 <DeezNuts> is map there too?
00:24:50 <Swynndla> yup
00:25:00 <DeezNuts> ill thanks for the tip
00:25:56 <DeezNuts> doesn't seem to be
00:26:05 <DeezNuts> ord doesn't seem to be in Char
00:27:03 <Swynndla> Prelude> :l Char
00:27:04 <Swynndla> Char> ord '#'
00:27:04 <Swynndla> 35
00:27:04 <Swynndla> Char>
00:28:31 <DeezNuts> do I have to load Char in the script file?
00:28:49 <DeezNuts> cuz i can load Char fine at the interpreter prompt
00:28:52 <DeezNuts> and use ord
00:28:54 <DeezNuts> but then i do
00:28:56 <DeezNuts> :also test.hs
00:29:05 <DeezNuts> and I get a complaint that ord is undefined
00:30:12 <Swynndla> yea I think you have to load it in the file too ... like: import Char
00:32:03 <DeezNuts> thanks that worked btw u dont have to load it in the interpreter if the import statement is in the file
00:32:35 <Swynndla> gotcha
00:33:45 <DeezNuts> so how long you been haskelling?
00:33:55 <Swynndla> me? ... about a week
00:33:58 <DeezNuts> phat
00:34:02 <DeezNuts> i just poked around today
00:34:07 <DeezNuts> how are you learning it?
00:34:21 <Swynndla> online tut's .....
00:34:57 <DeezNuts> me too
00:34:59 <DeezNuts> which one are you using?
00:35:18 <Swynndla> http://www.isi.edu/~hdaume/htut/
00:35:27 <Swynndla> you?
00:36:13 <DeezNuts> ftp://ftp.geoinfo.tuwien.ac.at/navratil/HaskellTutorial.pdf
00:36:52 <DeezNuts> i was gonna get the other one but i didn't want to supply my info
00:37:38 <DeezNuts> so what are you going to use it for?
00:37:41 <DeezNuts> (haskell)
00:37:56 <Swynndla> just a personal interest
00:38:10 <DeezNuts> same here but im hoping it will help me with math
00:38:16 <Swynndla> btw ... I didn't use my real email ... I never do .. cos of security
00:38:21 <Swynndla> ahhh
00:38:36 <Swynndla> I've been learning Ocaml for a few weeks too
00:38:50 <DeezNuts> which do you like better so far?
00:39:04 <Swynndla> it's too early for me to say ...
00:39:37 <DeezNuts> is haskell very different from ocaml from what you have seen thus far?
00:39:38 <Swynndla> I mean, I like Ocaml, but I'm still in the frustration period with haskell (I went through it with ocaml too)
00:40:12 <Swynndla> no ... learning one helps with the other ... but the syntax is different
00:40:31 <DeezNuts> i was just gonna say haskell syntax is pretty elusive to me so far
00:40:46 <Swynndla> but once I'm over the syntax, it should be fairly similar ... I mean the functional programming theory etc
00:40:48 <DeezNuts> im use to perl
00:41:04 <Swynndla> yea I know perl the best too
00:41:06 <DeezNuts> i only did a tiny bit of scheme before
00:41:12 <DeezNuts> as far as functional languages go
00:41:14 <DeezNuts> perl rocks
00:41:17 <DeezNuts> i can't wait for perl 6
00:41:21 <DeezNuts> then ill cream my pants
00:41:23 <Maddas> Perl isn't too functional
00:41:24 <Swynndla> true
00:41:30 <DeezNuts> i know Perl isn't
00:41:37 <DeezNuts> its practical heh
00:41:37 <Maddas> ah, ok, misread
00:41:38 <Swynndla> no ... but at least it has map :P
00:41:38 <DeezNuts> highly so
00:41:44 <DeezNuts> kew
00:41:54 <DeezNuts> ya i use nested maps and greps a bit :)
00:42:07 <Swynndla> :P
00:42:33 <DeezNuts> :P ?
00:42:34 <DeezNuts> its fun
00:42:38 <DeezNuts> and very handy
00:42:40 <DeezNuts> for generating sql
00:42:54 <DeezNuts> but then again i haven't dont that in any other language
00:43:01 <Swynndla> one thing I like about Ocaml is what you write in the interpreter is exactly whats it the file ... so you can copy and paste from a file and it will work
00:43:25 <DeezNuts> well thats due to the particular haskell implementation i believe
00:43:31 <DeezNuts> i assume your using hugs as i am
00:43:52 <Swynndla> well, no I changed to ghc
00:43:52 <DeezNuts> i hear ghc has a 'ghci' interpreter program that can be run without those limitations
00:43:57 <DeezNuts> ya?
00:44:16 <DeezNuts> ghc is suppose to let you do that according to their website but i dunno i can't get ghc on my machine (linux-ppc)
00:44:17 <Swynndla> well no you still can't copy and paste from a file ... it gets upset
00:44:24 <DeezNuts> that sucks
00:44:31 <DeezNuts> its too bad there are so many different implementations
00:44:33 <Swynndla> ppc?
00:44:37 <DeezNuts> ppc == mac
00:44:41 <Swynndla> ahhh
00:45:05 <DeezNuts> i could get it for os x though
00:45:16 <DeezNuts> and i guess i could slog through building / bootstrapping it for linux-ppc 
00:45:41 <Swynndla> one thing that i like about haskell though ... it writes and reads more clearly than ocaml
00:46:11 <Swynndla> DeezNuts, that sort of stuff is over my head ...
00:46:18 <Swynndla> bootstrapping and stuff I mean
00:47:06 <DeezNuts> i haven't dont the bootstrapping kind of thing before
00:47:09 <DeezNuts> but i've compiled plenty
00:47:16 <DeezNuts> supposedly bootstrapping is much more tricky
00:47:17 <Swynndla> but then again (talking about how easy languages read) I haven't been tempted to learn python
00:47:33 <DeezNuts> u might like java :p
00:47:36 <DeezNuts> its quite verbose
00:47:49 <DeezNuts> im hoping haskell isn't too verbose
00:48:03 <DeezNuts> Perl spoiled me
00:48:10 <Swynndla> oic
00:48:27 <Swynndla> haskell is meant to produce smaller code
00:48:30 <DeezNuts> verbose meaning like i hope it doesn't take 100 lines to do something that would take 10 in perl
00:48:34 <DeezNuts> phat
00:48:38 <Swynndla> than c etc
00:48:52 <DeezNuts> than c, etc?
00:49:02 <DeezNuts> which languages fall under etc?
00:50:17 <Swynndla> well, non-functional languages are called imperative languages
00:50:26 <Swynndla> C, Java, Pascal etc
00:51:03 <Swynndla> and haskell is meant to produce code that is between 2 and 10 times as short
00:51:24 <Swynndla> Ocaml seems to be just as short as haskell to me so far
00:51:48 <DeezNuts> how far are you with maths?
00:52:02 <Swynndla> it's all here BTW: http://www.haskell.org/aboutHaskell.html
00:52:15 <dennisb> the common way to work both in hugs and ghci is to write in a file and reload (:r) that file when you have changed something
00:52:20 <Swynndla> maths ... so you aren't american then :)
00:53:01 <dennisb> in ghci it's possible to define new functions and such at the command line, in hugs one can only evaluate expression, not define new things
00:53:17 <dennisb> still, :r is the easiest way to work
00:53:31 <Swynndla> right
00:54:06 <phubuh> Non-functional languages are more accurately called `dysfunctional' languages. :-)
00:54:11 <Swynndla> in ghci I can do this: let x = [1,2,3]  but I can't in hugs
00:54:25 <dennisb> exactly
00:54:26 <DeezNuts> ya you can't define anything in hugs
00:54:37 <DeezNuts> unless u load it from a file
00:54:53 <dennisb> but it's easier to keep it in a file anyway
00:54:56 <Swynndla> `dysfunctional' LOL
00:55:48 <Swynndla> dennisb, imperative languages are still more natural for me ... at the moment
00:56:14 <Swynndla> I've been told it's just how I'm used to thinking
00:56:20 <dennisb> Swynndla: most people in this channel knows a lot of languages
00:56:29 <Swynndla> dennisb, gotcha
00:56:47 <dennisb> Swynndla: it's always easier to do what you are used to
00:56:52 <Swynndla> dennisb, yup
00:57:04 <DeezNuts> dennisb: its not easier to have a limitation
00:57:18 <DeezNuts> dennisb: it would be best to allow both definitions interactively and in files
00:57:23 <Swynndla> dennisb, so if you were going to write a game of checkers (aka draughts) .. what language would you do it in?
00:58:04 <dennisb> Probably C, at least for the game engine part
00:58:37 <dennisb> maybe even assembler for the innermost parts where speed is really important
00:58:38 <Swynndla> dennisb, why isn't haskell good for that?
00:59:12 <Swynndla> oh .. for the speed
00:59:55 <DeezNuts> speed
00:59:57 <DeezNuts> for checkers?
00:59:58 <Swynndla> dennisb, fair enough .. what about tic tac toe (aka noughts and crosses)?
00:59:59 <DeezNuts> geez
01:00:03 <dennisb> Depends on your ambition level. To make a good checkers program you have to search as many positions you can per second. Most important i usually to work with as small data as possible, bits and stuff
01:00:54 <dennisb> If I wanted to write a compiler on the other hand I would not do that in assembler or C. I would much rather use something like haskell
01:01:14 <Swynndla> why?
01:01:39 <Swynndla> easiest in haskell?
01:01:54 <DeezNuts> Swynndla: no cuz he likes being counter-intuitive ;)
01:02:08 <dennisb> Nice algebraic datatypes, high level constructs that makes the code easy to work with, that's mor important then getting the last 20% of speed
01:02:39 <Swynndla> dennisb, do you also program in ocaml?
01:02:56 <dennisb> Not really, but I did program ML a long time ago
01:03:29 <Swynndla> wouldn't ocaml give you the niceness of a functional language but the speed of c?
01:03:54 <dennisb> maybe, I've heard really good things about ocaml speedwise
01:04:18 <Swynndla> but the downside?
01:04:20 <dennisb> the other thing to consider is usually what other libraries that are needed exists for that language you want to use
01:04:36 <Swynndla> oic
01:04:52 <dennisb> Swynndla: I simply think Haskell is a nicer language then ML
01:05:28 <dennisb> for most projects it's the libraries that are the problem in my experience
01:05:55 <Swynndla> and haskell has better libraries than ocaml?
01:06:13 <dennisb> not at all, it's just different
01:06:26 <Swynndla> oic
01:06:45 <dennisb> in some cases you might just have to use language WHATEVER because the library you need only exists for that language
01:07:07 <Swynndla> oic
01:07:10 <phubuh> The lack of type classes makes certain things in OCaml very annoying.  IMHO, type classes is the biggest advantage of Haskell over OCaml.
01:07:41 <dennisb> I don't believe there is a language that is best for everything
01:07:44 <Swynndla> type classes ... not up to them yet
01:08:11 <Swynndla> dennisb, so you think it's wise for me to learn C as well as a functional language then?
01:08:19 <phubuh> Definitely.
01:08:24 <dennisb> I think C is very good to know
01:08:37 <Swynndla> should I learn it before I learn haskell?
01:09:02 <dennisb> You are in the #haskell channel you know :-)
01:09:09 <Swynndla> LOL
01:09:13 <phubuh> I don't think you should.  I have a feeling that going from functional to imperative is easier than going from imperative to functional.
01:09:44 <Swynndla> I already know perl ... and a bit of pascal 
01:09:55 <Swynndla> so C shouldn't be too bad for me to pick up I don't think
01:10:19 <dennisb> Just learn both then!
01:10:43 <Swynndla> :)
01:10:59 <phubuh> Learning Haskell will teach you important things about programming C, and vice versa. :-)
01:11:30 <Swynndla> ok
01:11:39 <dennisb> that is the truth, there is no such thing as a good programmer that only knows one language
01:11:51 <Swynndla> ok
01:12:26 <Swynndla> well, it's late here (for me) ... I have to go to sleep now ... thanks for all your advise :)
01:12:43 <phubuh> Sleep tight.
01:12:43 <dennisb> they usually think they are (I did too) but when one learns more languages one realise how wrong one was
01:12:53 <dennisb> night
01:13:12 * phubuh is impressed by the progress on hOp.
01:13:22 * phubuh gets an unresistable urge to hack!
01:13:23 <dennisb> hOp?
01:13:29 <phubuh> http://www.macs.hw.ac.uk/~sebc/hOp/
01:14:41 <dennisb> phubuh: looks like a cool project to play with
01:15:44 <phubuh> Very.
01:22:53 <basti|-> re
01:26:02 <phubuh> Roughly how long does GHC take to compile on a modern P4?
01:26:27 <basti_> never done this...
01:26:34 * shapr yawns
01:26:46 <phubuh> shapr!
01:27:06 <shapr> good morning phubuh!
01:27:20 <shapr> hey, I haven't seen you around lately, have you been exploring ancient temples?
01:27:38 * shapr hums the Indiana Jones music
01:28:06 <shapr> phubuh: oh, I built hOp last night, it takes awhile but it works.
01:28:28 <phubuh> Nifty :)
01:29:03 <phubuh> Wow, it finished compiling!
01:29:26 <basti_> ;)
01:29:41 <basti_> now comes a question even more exciting: will it work? ;)
01:31:39 <shapr> qemu -fda hOp.flp
01:33:26 <bring> good morning everyone
01:33:30 <shapr> hej bring!
01:33:33 <Maddas> morning
01:33:57 <bring> shapr: you're speaking swedish again :)
01:34:01 <shapr> I have questions about (Remote a) =>
01:34:01 <phubuh> hi bring and Maddas!
01:34:02 <shapr> whoops
01:34:08 <bring> but hej anyway
01:34:09 <shapr> y0 bring  ;-)
01:34:18 <bring> that's more like it
01:34:27 <bring> ok, shoot
01:34:51 <basti_> hi bring
01:35:06 <bring> hi basti_
01:35:36 <bring> basti_: have we met before?
01:35:42 <shapr> I'm trying to make the types work out for 'assertEqualM "call 2arg method" 6 (remote "http://shae:pass@shapr.homelinux.net:9673/shae_stuff/xmlrpc/add2Num.py" 4 2)'
01:35:55 <phubuh> wow, it does work!
01:35:59 <phubuh> sort of.
01:36:09 <basti_> bring yesterday, but not talked really
01:36:29 <Maddas> phubuh: :-)
01:36:30 <shapr> phubuh: hey, if we have a gothenburg hackfest, you think you could show up?
01:36:47 <phubuh> shapr: hm, maybe!  when?
01:36:49 <bring> shapr: did you try giving an explicit type to the result of remote
01:36:58 <bring> it seems it would be Num a => IO a now
01:37:01 <shapr> bring: yes, I tried IO Int
01:37:15 <bring> and what's the error?
01:37:49 <shapr> No instances for (Num String, Network.XmlRpc.Client.Remote (t -> IO Int))
01:38:23 <shapr> so then I thought maybe 'assertEqualM "call 2arg method" 6 (remote "http://shae:pass@shapr.homelinux.net:9673/shae_stuff/xmlrpc/" "add2Num.py" 4 2)' but that doesn't change anything.
01:38:24 <Maddas> shapr needs help? heh!
01:38:25 <Maddas> :-)
01:38:48 <shapr> Maddas: I'm not an FP expert, just very enthusiastic.
01:39:04 <shapr> lots of other people here know more than I do.
01:39:24 <shapr> hey jlouis, haven't seen you in awhile, what's up?
01:39:39 <bring> shapr: oh, it looks like you forgot the method name
01:40:15 <bring> hmm, not in the second example
01:40:15 <shapr> like this? 'assertEqualM "call 2arg method" 6 (remote "http://shae:pass@shapr.homelinux.net:9673/shae_stuff/xmlrpc/" "add2Num.py" 4 2)'
01:40:33 <shapr> that gives "No instance for (Network.XmlRpc.Client.Remote (t -> t1 -> IO Int))"
01:41:02 <bring> try giving that call the type IO Int
01:41:09 <shapr> phubuh: since I'll be in gothenburg for EuroPython, I was hoping for something around the same time,  juni 7-9
01:41:24 <shapr> the result of the remote call, yes?
01:41:27 <bring> problem now is that 4 and 2 have polymorphic types
01:41:28 <bring> yes
01:41:36 <shapr> same error :-/
01:41:43 <shapr> should I explicity type 4 and 2?
01:41:56 <bring> yes, of course, silly me
01:42:02 <bring> that's the probelm
01:42:13 <phubuh> shapr: it's very possible that I could come
01:42:21 <shapr> aha! explicitly typing both 4, 2, and the whole remote call works!
01:42:21 <shapr> yay!
01:42:40 <shapr> phubuh: nifty, I think that would be fun.
01:42:49 <phubuh> definitely :-)
01:44:13 <bring> shapr: it is a problem with XmlRpc that you have to make sure to give the call a monomorphic type, and that the error messages when you don't aren't exactly crystal clear
01:44:22 <shapr> bring: oh, is there some cheesy type trick I can use to have a mixed list of that type of remote call with others that return strings?
01:45:28 <phubuh> hm, without explicit yielding, forkIO in hOp only switches process like once
01:45:38 <bring> shapr: yes, that should be possible if you declare them all to return IO Value
01:45:40 <shapr> I was wondering if I could persuade GHC to believe that all those are (Remote a) => [a] or something.
01:45:53 <bring> then use fromValue to get the result
01:45:59 <shapr> ah!
01:46:31 <bring> you have to import Network.XmlRpc.Internals to do that
01:46:40 <shapr> that's fine by me.
01:47:29 <bring> you can use the same trcik if you want to call or export a function that takes or returns structs or arrays with mixed element types
01:47:59 <shapr> is that how you got remote to have the same type with different numbers of parameters?
01:48:13 <bring> basically yes
01:49:04 <bring> Remote is a type class that for IO a just calls a function that returns Value and does fromValue on it
01:50:09 <bring> for Remote b => a -> b it appends toValue a to a list of arguments and calls remote on the "b" part
01:50:18 <bring> sort of :)
01:50:39 <shapr> yah, I saw that in the source, it looks neat and slightly mysterious.
01:52:10 <bring> yeah, remote is all of about 3 lines of code, and kind of weird, it takes me a couple of minutes just to understand what it does when I need to change something
01:52:56 <shapr> is that a trick you found somewhere else? or did you come up with it in a dream? :-)
01:53:39 <bring> at first I had remote0, remote1 etc. for each arity
01:53:47 <shapr> yah, that's what I would have done.
01:53:49 <bring> but that was ugly
01:53:53 <shapr> yup
01:54:20 <bring> that's what was in my report when I submitted it
01:55:05 <shapr> btw, is the [(String,a)] part for named args?
01:55:05 <bring> then I went to talk about the project with the examiner (Josef Svenningsson), and we discussed how to get around that
01:55:17 <bring> it's for structs
01:55:25 <bring> or wait, where?
01:55:44 <shapr> ValueStruct
01:55:58 <bring> yes, that's for xml-rpc struct values
01:56:49 <bring> I had been playing with writing a general curry function :: (a1,a2,...,an) -> a1 -> a2 -> ... -> an
01:57:15 <bring> using type classes, and realized that that's basically the same problem
01:58:06 <bring> hmm, that sould be :: [a1,a2,...,an] -> a1 -> a2 -> ... -> an
01:58:20 <bring> which of cours is not possible, there is only [a]
01:58:47 <bring> so you have to wrap each argument in some monomorphic type T
01:59:31 <bring> in XmlRpc there is Value which does exactly that, so it worked out
01:59:59 * bring gives a long boring answer to a short question
02:00:34 <shapr> that's the answer I was looking for
02:00:38 <shapr> I wondered how you got there
02:00:44 <basti_> in german theres a saying... there are no stupid questions, just stupid answers
02:01:15 <bring> basti_: haha, that's really true
02:01:40 <basti_> ;)
02:02:49 <bring> shapr: I heard back from Graham Klyne, turns out he's been using HTTP.hs from XmlRpc. He thought that since those modules (HTTP, Base64, Browser) are not actively maintained they should be checked in to some public repository when they can be community supported, so I suggested haskell-libs at sf
02:03:01 <bring> s/when/where/
02:03:07 <shapr> sounds good to me
02:03:26 <shapr> do you have an sf.net account?
02:04:01 <bring> yeas, bring
02:05:05 <shapr> hej Marvin-- 
02:05:21 <bring> good morning Marvin--
02:05:37 <Marvin--> morning
02:07:07 <shapr> bring: ok, you should have cvs access to haskell-libs
02:07:23 <bring> shapr: thanks
02:09:20 <bring> I'm looking at the respository now, is there some naming scheme that should be followed? 
02:10:06 <shapr> no, but there probably should be :-)
02:10:17 <bring> shapr: hehe, browsing throw some of your old code, "Goats blown: "?
02:10:25 <shapr> hah, that's from WLI
02:10:41 <bring> so, how about using hierachical module names
02:10:49 <shapr> I think it's a good idea.
02:11:22 <shapr> On the one side, I'm tempted to have separate top-level modules for each major app/lib
02:11:34 <shapr> and on the other hand I'm tempted to have them in a hierachical module structure
02:11:37 <shapr> what do you think?
02:12:26 * Marvin-- glares at java
02:12:27 <shapr> anyways, the cvs tree needs some sort of reorganization, it's slowly grown into a mess.
02:13:25 <Marvin--> what the fuck were they smoking when they dreamed up this stupid Buffer class tree in javax.nio?!
02:14:17 <bring> that's the worst part of CVS, that it's hard to reorganize stuff, since directories can't be deleted and stuff can't be moved while keeping revision history with manual mucking around in the repository
02:15:51 <bring> Marvin--: what's wrong with it?
02:16:05 <Marvin--> bring: for one thing, it's impossible to inherit from the classes
02:16:24 * shapr thinks java's lib hierarchy is schizophrenic at the least.
02:16:37 <Marvin--> allocation isn't done with a constructor, but with the static methods allocate or wrap
02:16:51 <Marvin--> which makes inheritance sort of...impossible
02:17:28 <Marvin--> second, there's one buffer class per primitive type (ByteBuffer, IntBuffer, FloatBuffer, ShortBuffer...) but there's no buffer that lets you store more than ONE primitive type
02:18:00 <Marvin--> I mean, god forbid that I'd want to pack shorts together with ints
02:18:05 <shapr> that would be too easy.
02:18:07 <Marvin--> sheesh
02:18:11 <shapr> and Java isn't about making your life easy.
02:18:18 <Marvin--> agreed
02:18:40 <shapr> it's about making life safe for all those programming with three months of Java training between them and their McDonald's job.
02:19:13 <shapr> do they have Frasse's in the sunny south where you guys live?
02:19:33 <shapr> I was just wondering what the southern .se McDonald's equivalent is.
02:19:36 <Marvin--> It's really silly to use java for this kind of assignment (writing parts of a TCP stack) too, but since all the APIs we are supposed to use are java stuff, ... well...
02:21:05 <Marvin--> wow, wait a sec, the ByteBuffer does seem to have a putShort method
02:21:14 <Marvin--> does the java spec state that a short is 16 bits?
02:21:19 <bring> Marvin--: but it's abstract
02:21:23 <bring> yes
02:21:52 <Marvin--> bring: the whole hierarchy is abstract, that's why there are no published constructors, only the static allocate/wrap methods
02:22:10 <Marvin--> it looks like a HUGE hack to me, twisting the use of abstract classes into perversity
02:22:32 * shapr has flashbacks of working with a bunch of three months of training Java programmers.
02:23:03 <Marvin--> "optional operation"
02:23:04 <bring> right, what I mean is that putShort is abstract, and only implemented in ShortBuffer
02:23:10 <bring> exaclty
02:23:15 <Marvin--> hm
02:23:25 <Marvin--> but I used putInt in a ByteBuffer
02:23:49 <Marvin--> why the hell doesn't the docs state what happens when you call an "optional" operation that hasn't been defined?
02:23:59 <bring> ah, so it's implemented by the concrete ByteBuffer class?
02:24:13 <bring> you can't
02:24:31 <Marvin--> well, you'd think it'd throw some exception
02:24:43 <bring> only abstract class can have abstract methods, and there is now way to create an instance of an abstract class
02:24:51 <bring> oh, sory
02:25:11 <Marvin--> well, the concrete implementations are hidden away by the allocate/wrap methods
02:25:15 <Marvin--> what the ****
02:25:39 <Marvin--> what's the *point* with having putInt/putShort "optional" in ByteBuffer if they're not even specified by the Buffer superclass??
02:25:39 <bring> misunderstood you, I think it says somewhere that optional methods throw UnsupportedOperationException, but maybe that's just for the collections
02:26:10 <bring> so, does calling them work on a concrete ByteBuffer?
02:26:25 <Marvin--> I think so, going to test now
02:29:45 <bring> shapr: should we create a new module in CVS which has hierarchical module names, start giving hierarchical names to things and move them there?
02:30:09 <Marvin--> oh for ****
02:30:14 <Marvin--> constants are always int
02:30:15 <Marvin--> sigh
02:30:29 <bring> haha, yes
02:30:31 * Marvin-- adds some explicit crutche^Wcasts
02:30:47 <bring> though you can use 1L for a long, etc.
02:30:54 <shapr> bring: sure, sounds good to me.
02:30:54 <Marvin--> yep, putShort/getShort and putInt/getInt worked
02:31:02 <shapr> hoi earthy 
02:31:04 <Marvin--> bring: what's "et.c."?
02:31:05 <earthy> morning
02:31:07 <bring> afaik, there's no clean way to completely reorganize a CVS module except to make a new one
02:31:17 <Marvin--> bring: are there notation for bytes and shorts too?
02:31:18 <shapr> I agree.
02:31:24 <Marvin--> bye earthy
02:31:37 <shapr> that was a short day.
02:31:49 <shapr> he's back!
02:31:49 <bring> not sure, I had hoped the "etc." would cover that :)
02:31:59 <bring> I'll check
02:32:01 <earthy> yah, trying to get irssi to play nice ;)
02:32:40 <Marvin--> so... this appears to work in practice, but... I guess that the "optional operation" tags mean that I have absolutely no guarantee whatsoever that it really SHOULD work?
02:33:16 <bring> nope, only modifiers for longs, why the hell is that
02:33:29 <Marvin--> because the designers are morons
02:33:48 <shapr> shopping, bbl
02:33:56 <bring> Mavin--: yes, I think you're right about the no guarantee part
02:34:05 <Marvin--> seriously, this Buffer crap really really really stinks
02:34:37 <Marvin--> I mean, what's the frickin' problem, Python has struct.pack and struct.unpack that does the same thing, but with half the hassle
02:35:11 <Marvin--> I wonder if the whole point is that they have the same concrete class to implement all the Buffer subclasses
02:35:44 <Marvin--> but since there's no multiple inheritence I guess they do some butt-ugly aggregation internally
02:36:28 <Marvin--> I mean, look at the ByteBuffer, it has methods "asIntBuffer", "asLongBuffer" et.c.
02:38:01 <Marvin--> but those buffers don't inherit from ByteBuffer, they inherit from Buffer
02:38:26 <Marvin--> and why do they !(#¤% inherit at all? Buffer could just as easily have been an interface
02:38:41 <Marvin--> good grief this is crap
02:39:18 <basti_> Java is crap.
02:39:32 <Marvin--> I've noticed
02:39:36 <Marvin--> but I'm stuck with it for now
02:39:44 <Marvin--> happy happy joy
02:40:22 <bring> I've been looking through the ByteBuffer API, looks like getShort,putShort etc. are always implemented, but the putXXX methods are optional in the sense that if the buffer is read-only, they throw ReadOnlyBufferException
02:41:10 <Marvin--> good god
02:41:47 <bring> but you can check for that with isReadOnly() 
02:42:20 <Marvin--> yeah, well, I create the buffers myself for packing and unpacking byte arrays so they're not likely to be readonly :)
02:42:20 <bring> yes, java design is interesting to say the least
02:43:18 <Marvin--> but I mean... why is the friggin' putInt method abstract?
02:43:30 <Marvin--> or rather, why is the friggin' *getInt* method abstract?
02:44:22 <Marvin--> "eh, we want to hide the ugly details in an internal subclass and we were too lazy to do this decently so we'll just abuse the abstract keyword"
02:44:59 <bring> I thought it was because they have different subclasses for different platforms
02:45:07 <basti_> one should write a decent language for jvm's
02:45:26 <bring> doesn't haskell compile to the jvm?
02:45:34 <Marvin--> the jvm sucks too
02:45:59 <basti_> hm
02:46:00 <basti_> ok
02:46:35 <Marvin--> arrays have a whole slew of byte code operations that are basically similar to lots of the generic class-based byte code operations
02:46:42 <Maddas> heh
02:46:43 <Marvin--> because arrays are neither primitive nor classes
02:46:57 <Maddas> Enjoying the nice weather, Marvin--?
02:46:57 <Marvin--> (!)
02:46:57 <Maddas> :-)
02:47:09 <basti_> yeah arrays are painful in java...
02:48:11 <bring> they also mess up the generics support, since they are sort of generic themselves which gets in the way
02:48:42 <basti_> yep
02:48:48 <Marvin--> no kidding
02:49:32 <bring> Marvin--: why are you being forced to use Java?
02:49:43 <Marvin--> bring: data communications course
02:49:55 <Marvin--> it's the only language we get to use for the assignments
02:50:06 <Lunar^> Hi
02:50:21 <bring> Marvin--: great
02:50:25 <Marvin--> bring: no
02:50:55 <bring> that was a sarcastic 'great' :)
02:51:01 <Maddas> haha
02:51:04 <Marvin--> oh *really
02:51:05 <Marvin--> *
02:51:09 <bring> :)
02:51:12 <Maddas> This is too funny :-)
02:51:49 * bring has to go work on an assignment in *haskell* now 
02:52:31 * Maddas has holidays
02:52:32 * basti_ just succeeded in a compilers course where the assignments where in haskell
02:53:12 <bring> basti_: that's what I'm doing now, isn't it great?
02:53:33 <basti_> compilers are fun
02:53:34 <basti_> somehow
02:53:43 <basti_> if you dont need to do an LR(1) table by hand.
02:53:48 <bring> :)
02:53:57 <bring> ok, heading out, bbl
02:54:11 <phubuh> i'm writing a simple compiler for Scheme, it's very fun
02:54:23 <Maddas> phubuh: just for fun?
02:54:25 <Lunar^> basti_: look at Pappy, it seems grat
02:54:30 <phubuh> Maddas: yeah
02:54:32 <Lunar^> s/grat/great
02:54:35 <Maddas> phubuh: ok!
02:55:47 <basti_> pappy? *google*
02:56:32 <basti_> we were using happy
02:56:37 <Lunar^> http://www.pdos.lcs.mit.edu/~baford/packrat/thesis/
02:56:47 <ham[mer]> hiho
02:57:14 <Lunar^> Bryan Ford's thesis is really interesting 
02:57:27 <ham[mer]> brian ford?
03:01:14 <ham[mer]> Lunar^ url of that paper?
03:02:20 <Lunar^> http://www.pdos.lcs.mit.edu/~baford/packrat/thesis/
03:03:42 <ham[mer]> thx
03:35:42 <kowey> if i could ask a favour of HaWiki contributors: http://www.haskell.org/hawiki/UsingHaskellWikiMaterial
03:37:20 <basti_> when I write something there, I will do this ;)
03:37:40 <kowey> thanks in advance :-) hopefully not well in advance
03:37:47 <basti_> lol
03:38:18 <Marvin--> kowey: er, methinks that just another wikipage isn't ideal for something like this
03:38:48 <kowey> meaning the license-authorisation page or the books?
03:38:50 <basti_> honestly, i thought about writing some monad stuff
03:38:53 <Marvin--> seeing as, well... anybody could put my name there
03:39:05 <kowey> hmm.. i figured that's what recent changes are for
03:39:30 <kowey> any ideas?
03:39:42 <Marvin--> you won't get very far without digital signatures
03:39:50 <Marvin--> I mean, if you want to do it For Real
03:39:58 <basti_> hm i think that you put something on a wiki, you already accept the pd stuff...
03:40:03 <basti_> you could get the gnu documentation license
03:40:13 <kowey> well it's not specified on HaWiki
03:40:18 <Marvin--> oh dear god, GFDL
03:40:21 <basti_> gnu free documentation license or whats its name
03:40:27 <basti_> Marvin--: bad?
03:40:35 <kowey> would it be good enough, you think if i used the page only as a contact point?
03:40:41 <Marvin--> basti_: well, it isn't Free
03:41:18 <basti_> why?
03:41:52 <Marvin--> the invariant sections for example, IANAL but there's been an insane amount of more or less heated discussion between Debian and the FSF about it
03:42:13 <Marvin--> Debian doesn't let GFDL stuff into main
03:42:16 <basti_> oh
03:42:51 <basti_> hmm now that you say this section really looks a little more complicated than it needs to...
03:43:20 <basti_> thats usually a sign that it says things one won't see when reading only a few times
03:43:21 <basti_> ;)
03:43:49 <basti_> but, we could do something like that on hawiki... after all, a wiki IS public... thats the idea...
03:44:00 <kowey> ok... how about now? http://www.haskell.org/hawiki/UsingHaskellWikiMaterial
03:44:44 <Marvin--> looks better
03:45:56 <kowey> guess i'll be plugging the page at various hours.. (timezones) 
03:46:05 <kowey> hope the channel doesn't take it as spam :-)
03:46:20 <Marvin--> put it in the topic?
03:46:42 <kowey> hmm
03:46:43 <kowey> how?
03:47:07 <Marvin--> I dunno if lambdabot has some utility for it or if you just use the /topic command directly
03:47:12 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/", "ghc 6.2 is out", "ghc rpms: http://haskell.org/~petersen/rpms/ghc/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html" http://www.haskell.org/hawiki/UsingHaskellWikiM' by kowey
03:47:23 <kowey> damned guis making me stupid
03:47:35 <Marvin--> feh, the topic is waaaay too long
03:48:08 <kowey> ghc 6.2 being out not really news anymore, is it?
03:48:15 <Marvin--> trim off the "haskell-experimental.html" from syntax's url and get rid of the ghc 6.2 notice
03:48:58 * Marvin-- wanders off to the kitchen in search of coffee
03:49:30 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html" http://www.haskell.org/hawiki/UsingHaskellWikiM' by kowey
03:49:45 <Marvin--> er
03:49:57 <basti_> M?
03:50:11 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html" "http://www.haskell.org/hawiki/UsingHaskellWikiMaterial"]' by kowey
03:50:35 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html", "Donate your brain! - http://www.haskell.org/hawiki/UsingHaskellWikiMaterial"]' by kowey
03:50:42 <Marvin--> kowey: the www.h.o part is pretty redundant, I think most people know where to look if it just says hawiki/UsingHaskell...
03:51:13 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html", "Donate your brain! - hawiki/UsingHaskellWikiMaterial"]' by kowey
03:52:24 <kowey> hmm... well, thanks, Marvin--  ... i hope people do start donating
03:54:52 <Marvin--> weeeell, it's back to writing for me now, I guess
03:55:22 <Marvin--> ... when the coffee is ready anyway
03:55:39 <kowey> book? thesis? 
03:55:46 <kowey> article?
03:56:02 <Marvin--> thesis
03:56:17 <kowey> good luck!
05:15:49 <amb> hullo
06:06:39 <shapr> @yow ! CONFUCIANISM!
06:06:39 <lambdabot> Uh-oh!!  I'm having TOO MUCH FUN!!
06:10:13 <shapr> Marvin--: what sort of license is better?
06:12:00 <Marvin--> shapr: I don't know, I'm not much into specific licenses for documentation, but I'm sure you could find something if you search the debian-legal archive
06:13:53 <shapr> can you put a license on a wiki? it would seem to me that each contributor owns the copyright on their material unless they explicitly state otherwise.
06:15:53 <maihem_> "clicking edit indicates you have read and agree to the wiki contribution and acceptance contract ..."
06:17:43 <shapr> interesting idea
06:19:38 <shapr> maihem: nice suggestion, thanks
06:20:18 <shapr> I'd like to find some way that any material collected on the wiki could be under a lesser GPL equivalent license.
06:21:30 <maihem> however, if a particular administrative routine is regularly followed and advertised (including licensing/relicensing), the contributer is surely acknoledging the site administrators authority to do that, as long as copyright is not claimed/altered by others. eg, write a poem for a church and say nothing of what they can/can't do with it - they will copy it liberally and it's not illegal nor is it at all wrong.
06:22:17 <maihem> but that is a grey area
06:22:32 <maihem> and IANAL
06:26:12 <Marvin--> considering that most snippets posted on a wiki are so small that it could very well fall under Fair Use to copy them, it would probably be way simpler to have everyone agree to put their submissions in the public domain
06:26:36 <Marvin--> IMO
06:26:39 <Marvin--> and IANAL of course
06:26:43 <Marvin--> :)
06:46:19 <Lunar^> shapr: I agree with Marvin
07:16:17 <Marvin--> note to self: when listening to music on headphones, make sure it's not louder than the telephone
07:30:16 <opet> sounds like a silly idea to me. you can't ignore the phone if the music isn't loud enough :)
07:32:09 <jlouis> ''oh, did the phone ring??'
07:58:09 <shapr> jlouis: hey, haven't seen you around lately, what's going on?
08:37:27 <shapr> so, what's going on?
08:37:55 <basti_> nothing.
08:56:32 <jlouis> shapr: study
08:56:39 <jlouis> shapr: too much study
08:57:19 <cm> hi people
09:19:56 <shapr> hey cm, what's up?
09:20:39 <cm> hi shapr, I'm at work ;)
09:21:53 <shapr> cool, what do you do for work?
09:22:15 <cm> not-that-cool PHP web application work ;)
09:22:29 <shapr> oh
09:22:53 <shapr> I do the same thing in Python
09:22:57 <shapr> but I'm slowly integrating Haskell.
09:23:17 <cm> web framework with content/document management features, maybe similar to a home-grewn ZOPE (but different, no app server)
09:23:21 <cm> cool, how do you do that?
09:23:39 <shapr> bring's xmlrpc lib.
09:23:49 <shapr> Zope supports xmlrpc natively
09:24:52 <shapr> it's difficult to unit test Zope, J2EE, or any large app like that, since you can't easily write fake server responses
09:25:59 <cm> oh so you unit test the individual "business modules" using the xmlrpc interface?
09:26:03 <cm> and you write the unit tests in haskell :)
09:26:35 <shapr> right
09:26:49 <shapr> PHP supports xmlprc also
09:26:56 <cm> yeah
09:27:42 * cm giggles
09:31:00 <cm> adding that would give my boss another point for the marketing's feature list.. and me the possibility to use haskell.. tasty
10:37:35 * SamB wants Google Lists
10:44:53 <liiwi> gmane not good enough?
13:25:41 <swisscheese> Hi All. Any ideas how to speed this function up. It's taking 60% of all cpu time.
13:25:41 <swisscheese> data Nodes = Node [[Char]] Int Int Int Int Int Int Int deriving Show
13:25:41 <swisscheese> match :: Nodes -> Nodes -> Bool
13:25:41 <swisscheese> match (Node x _ _ _ _ _ _ _) (Node y _ _ _ _ _ _ _) = x == y
13:28:04 <jlouis> how many times do you call match?
13:28:15 <jlouis> I rather think it is the code around it, but I might be mistaken
13:28:47 <swisscheese> Lots ;-) I've done all I can think of to call it less.
13:29:38 <jlouis> since it only has a single datatype constructor, the compiler will optimize that away. If proper tupling is done it all comes down to a string match
13:30:05 <jlouis> Are the strings long?
13:30:23 <swisscheese> No, typically 4 or 5 chars.
13:30:32 <jlouis> can you exchange them for a cheaper datatype with terms of comparison? If not, I do not think there is much more to do
13:30:54 <jlouis> but alas, I am an strict, pedantic SML hacker, so what do I know?
13:31:16 <jlouis> furthermore I am currently pissed on writing proof trees in operational semantics ;)
13:32:08 <swisscheese> I could hash [[Char]] to Int but it would take some coding and not sure it will help much>
13:32:58 <jlouis> it would help a factor 4-5, maybe more if you are doing a lot of fetches from memory and trash your cache
13:33:24 <jlouis> My bet is you are better off hacking a better algorithm
13:33:31 <jlouis> shave some orders off ;)
13:34:09 <swisscheese> Already shaved about 10^8 off!
13:34:34 <jlouis> what are you doing?
13:35:42 <swisscheese> Building a tree and checking if new nodes match nodes already in the tree.
13:37:36 <jlouis> so I guess you are O(lg n) bounded then?
13:37:43 <jlouis> is the tree balanced?
13:37:50 <jlouis> and how much stuff do you put into it?
13:39:49 <swisscheese> Actually I'm O(n^2) but now that you mention it I suppose I should sort the list I am scanning for matches.
13:40:31 <jlouis> O(n lg n) then
13:40:35 <jlouis> probably
13:41:40 <jlouis> you must have awfully lot of data if the speed begins to matter
13:42:02 <swisscheese> Yea - ~24hrs cpu time.
13:42:16 <swisscheese> A forest so to speak.
13:42:25 <jlouis> ok
13:43:31 <swisscheese> Thanks for your help.
13:44:05 <jlouis> what kind of tree are you using?
13:44:41 <swisscheese> Actually being new to H I found it easier to build the tree in a list.
13:44:59 <swisscheese> I'm not sure what the type of tree is called.
13:45:49 <jlouis> So you have no balancing functions to ensure that the height of the tree is lg n? (Does not matter if you can guarantee your data comes in a random order)
13:47:58 <swisscheese> Using a list I don't think it would matter.
13:49:07 <jlouis> I think you would be able to shave a _lot_ off then. Not having to test for equality, but for ordering can help
13:49:17 <jlouis> and why don't you use type classes by the way?
13:50:15 <swisscheese> You mean to use == instead of match?
13:53:01 <jlouis> yes, by making Node an instance of Eq
13:54:07 <swisscheese> I'm just learning H and find it a bit mind boggling so I'm sticking with vanilla code for now.
13:57:28 <jlouis> ok, read up on the data keyword. Create some real trees. Preferably make them Red-black or AVL
13:57:49 <jlouis> or, take them from others. I believe there are some out there
13:58:42 <swisscheese> OK, thanks for your help. Gotta log out. Bye.
13:58:47 <Maddas> Bye
14:46:28 <DeezNuts> Can one write proofs in haskell?
14:51:59 <Odiseo> hey
15:06:58 <Etaoin> hi
15:58:22 <amb_> by
15:58:23 <amb_> *bye
16:27:47 <blackdog> g'day shapr
16:27:57 <shapr> g'day mrak
16:28:04 <shapr> how's life/
16:28:05 <shapr> ?
16:28:41 <blackdog> getting better. had the housewarming last night, so my head felt like a jackhammer concerto this morning...
16:31:20 * shapr discovers the bug in his xmlrpc call
16:31:32 <shapr> blackdog: as long as you had fun the night before
16:32:04 <blackdog> ...i've got this vague memory of getting drunk and telling my boss I was bored at work because there wasn't enough to do. This may not have been wise.
16:32:13 <shapr> hehe
16:32:15 <shapr> truly
16:32:41 <stepcut> shapr: have you played with the haskelldb/ghc stuff at all?
16:32:45 <blackdog> ah well. what can you do.
16:33:24 <shapr> stepcut: yes, a bit.
16:33:49 <stepcut> stepcut: I installed it last night, but I got a compilation error when I tried to compile the database generated by DbDirect...
16:33:50 <shapr> blackdog: how's the C-- conversion going?
16:33:58 <shapr> stepcut: what sort of error?
16:34:05 <shapr> stepcut: are you using the nightly snapshots?
16:34:10 <shapr> several bugs have been fixed recently.
16:34:49 <stepcut> lots of errors like:     Couldn't match `Maybe String' against `String'
16:35:00 <chucky> that one's fixed in the nightly I think?
16:35:05 <shapr> yes, I think so.
16:35:22 <shapr> stepcut: using postgresql?
16:35:23 <chucky> It should be, since I was the one who fixed it. :)
16:35:53 <stepcut> using MySQL
16:35:58 <blackdog> shapr: haven't had time to work on it. :/
16:36:10 <shapr> too bad
16:36:19 <stepcut> I will try the nightly snapshot then
16:36:44 <blackdog> I've been fiddling with stuff in my off time at work, but the c-- stuff is too complex to pick up and put down, which is why I've almost finished a Haskell version of vixenlove.
16:36:58 <stepcut> mmm, vixenlove
16:37:10 <shapr> oh my
16:37:15 <shapr> the horror :-)
16:37:35 <shapr> does it work as a lambdabot plugin?
16:37:51 <stepcut> blackdog: does your version speak AIM? or is it just the brains
16:37:59 <shapr> ya know, lambdabot with bitlbee and a vixenlove plugin would be perfect.
16:38:02 <blackdog> it's just the brains so far.
16:38:27 <shapr> bitlbee is a local irc server that speaks MSN, AIM, ICQ, and Jabber
16:38:38 <blackdog> I was going to ask you about lambdabot, actually. what do you have to do to write a plugin?
16:38:53 <blackdog> That might be the best option, actually... :)
16:39:14 <shapr> there are two levels of plugin, one just returns the sender and params of the command
16:39:32 <shapr> the other lets you add/replace/etc any IRC event
16:40:23 * stepcut is currently working on a much less exciting haskell wrapper for MAD (the mpeg decoding library)
16:41:22 <shapr> blackdog: you ever listened to Backyard Babies?
16:41:40 <blackdog> No, i haven't.
16:41:44 <blackdog> would i like them?
16:41:49 <shapr> I'm not sure.
16:42:08 <shapr> sort of like the mutant offspring of white zombie and matchbox twenty
16:44:26 <blackdog> i'm of the firm opinion that matchbox twenty ought not be allowed to breed. it's a disgusting americanism, and can only result in the farmers being forced to grow smaller potatoes.
16:45:00 <shapr> could be
16:47:57 <blackdog> argh. what's an easy way to replace ')(' with )\newline( in unix?
16:48:13 <blackdog> damn line-oriented whoosiwhatsits.
16:48:41 <shapr> C-x h M-x replace-string )( )C-q C-j(
17:03:57 * shapr snores quietly
17:04:14 <shapr> I wonder if the party is over upstairs.
17:07:52 <blackdog> i want tab completion in ghci, dammit.
17:08:14 <blackdog> Text.ParserCombinators.Parsec is too much to type over and over...
17:11:14 <chucky> blackdog: Try ghci without a working readline sometime. That's guaranteed fun. :)
17:11:27 <blackdog> eugh.
17:11:34 <blackdog> ledit to the rescue. :)
17:17:09 <bring> shapr (and anyone else playing with haskelldb): found any new bugs in haskelldb? we are planning a new release soon
17:17:56 <stepcut> bring: I installed 0.5 last night, I am going to update to the cvs snapshot tomorrow and try it out again
17:19:26 <bring> good idea, as you heard, we have fixed that bug you where having
17:19:39 * stepcut does the channel dance
17:20:37 <stepcut> I am going to port an old haskelldb app to ghc, so we will see how that goes
17:21:50 <bring> let us know if there are any problems whatsoever
17:22:13 <chucky> stepcut: What does the app do? Fun to hear if someone is using haskelldb for something useful. :)
17:22:28 <stepcut> maybe someday I will finish my code to 'eliminate' DbDirect under GHC
17:23:03 <bring> we appreciate any feedback, bugs, usage, features, questions, silly questions, flames
17:23:25 <stepcut> chucky: a simple app to track you daily stats (like, temperature, weight, etc)
17:23:33 <bring> your TH idea sounds really good
17:24:16 <chucky> ever since we heard of it we've been toying with the idea to build it. DbDirect needs a rebuild anyway. Problem is, hugs doesn't support TH. :(
17:25:03 <stepcut> chucky: yeah -- plus there are times when DbDirect is prefered. The idea of query the database during compile is great ... unless you can't query the database for some reason.
17:25:10 <stepcut> like, offline development.
17:25:28 <chucky> very true
17:25:41 <chucky> but it's so very cool. :)
17:25:51 <stepcut> yeah :p
17:26:07 <bring> we have also been thinking about the possibility of doing compile-time compilation of queries to SQL using TH, I've got it working for static queries (can do that i 1 line of code), but we haven't figured out how to do it for queries that contains values supplied at run time
17:26:24 <bring> would like to compile in 'holes' in the queries
17:26:58 <bring> not sure if it would give any real performance benefits, but it seems like and interesting thing to do
17:27:05 <stepcut> bring: yeah, that is one of the issues I looked at too -- it seems like a cool idea to work on
17:27:22 <bring> any ideas on how to handle the dynamic data?
17:27:31 <stepcut> compile time, partial optimization
17:27:48 <stepcut> no... I figured I should get basic queries to work first :p
17:27:54 <bring> :)
17:28:37 <chucky> whether or not this would be a "real" optimization is a little early to say. We don't really know where the bottlenecks in our code are yet
17:29:05 <chucky> querying databases take a lot of time right now I suspect. :)
17:29:12 <bring> I was thinking that you could compile the individual static fragements, the construct a function that takes the dynamic data and concatenates it all to a query
17:29:38 <bring> yes, there are all sorts of networking issues etc.
17:30:17 <chucky> yes... One of our problems right now is certainly how unoptimized queries can become. Compile-time optimization using TH would certainly be able to help that as well
17:30:21 <bring> it probably wouldn't decrease the total time per query much, but it have some effect on the cpu time required per query in the client
17:30:46 <stepcut> has haskelldb+mysql been tested at all?
17:30:50 <bring> yes
17:30:58 <bring> about as much as everything else
17:31:00 <stepcut> I take it, it still requires 4.1?
17:31:03 <bring> that is, very little
17:31:15 <bring> yes, don't think we'll get around that
17:31:43 <bring> unless you only use simple queries on a single table
17:32:00 <stepcut> Seems pointless to worry about it now, since waiting makes the problem go away :)
17:32:33 <chucky> that could probably be said about the hugs not supporting TH problem as well. :)
17:33:06 <stepcut> chucky: :p
17:33:45 <stepcut> Ideally the TH stuff would be optional
17:33:52 <chucky> yes
17:34:46 <stepcut> though in reality, using hugs is not that practical. Its really slow. On the otherhand, if nhc is ever ported to the palm, it would be nice to have haskelldb work with nhc
17:34:52 <chucky> linking against a database every time you compile can be both slow and error-prone. What if someone else is modifying the db while you're compiling? Could give some nice bugs
17:35:36 <stepcut> chucky: yeah. Of course, if they change the database after you compile, that can cause weird bugs too
17:36:03 <chucky> hmm well the same thing could be said about DbDirect, so my point is kinda stupid
17:36:04 <chucky> :)
17:36:26 <chucky> I looked into nhc-support a bit. Looked as if their libraries didn't support everything we need. Like System.Time
17:37:09 <chucky> and control.exception
17:37:30 <stepcut> it would be nice if there was a quick way to check at runtime to see if the database matches the compile time interface... I wonder if MySQL provides something like an md5sum that you can quickly check before every query?
17:38:01 <stepcut> (well, mysql, or any/all of the other databases)
17:38:43 <chucky> would be nice. Unfortunately, the way HaskellDB is built this would have to be supported by the underlying interface (right now only HSQL) as well
17:39:26 <stepcut> chucky: presumably it would be something like 'select database_mdsum()'
17:40:07 <stepcut> Does HaskellDB has support for transactions?
17:40:47 <chucky> if it could be used that way, it would be possible for haskelldb, yes. If it was done in some other, more "direct" way, we wouldn't be able to support it without special backend support
17:42:06 <chucky> transactions? Good question. :) My work has been mainly on dbdirect so far, and date types. So I actually have no idea. I haven't written a single query in haskelldb myself yet. :)
17:42:35 <stepcut> hehe
17:43:24 <stepcut> Transactions are definately a must for 'real world' deployment. I don't think there is any reason why it can not be done.
17:44:00 <stepcut> maybe I will look into adding it myself :p
17:44:47 <chucky> I agree. After checking it out a bit it seems that is not the case. Will have to check with the others.
17:45:55 <chucky> unless of course HSQL or ODBC does it "automatically
17:46:39 <stepcut> well, transaction support definately requires support at the database level. 
17:46:53 <chucky> yes. It seems HSQL supports it
17:47:07 <stepcut> yeah, I thought I saw that ...
17:48:18 <bring> haskelldb doesn't have transaction support, but it should definitely be added
17:48:55 <bring> hmm, it's not in the TODO, I'll add it
17:49:04 <chucky> I'm doing it right now. :)
17:49:09 <bring> ok
17:49:32 <bring> is LIMIT and OFFSET supported by most DBs?
17:49:54 <bring> MySQL and PostgreSQL seem to have it, but it's not in SQL92 as far as I can tell
17:51:10 <chucky> I found some sort of addendum to SQL92 the other day, or maybe it was some newer standard proposal. :)
17:53:02 <chucky> why does Tim Sweeney hang around on comp.lang.functional so much? Shouldn't he be working on Duke Nukem Forever? :)
17:53:14 <stepcut> :p
17:53:30 <chucky> hmm maybe they're rewriting it in Haskell. :)
17:53:52 <chucky> he certainly seems to know an awful lot of Haskell for a games programmer
17:59:14 <shapr> whoa, it's 3am, I must sleep.
18:00:24 * stepcut tries to figure out if he can/should mix the IO and Maybe monads
18:14:55 <stepcut> i think this is a job for exceptions
18:50:03 <SyntaxLaptop> any debian folks alive?
18:50:15 <SyntaxLaptop> I'm wondering where should I put high-level information from upstream about changes in a package?  I heard something about debian/NEWS and apt-listchanges, but I can't install apt-listchanges at the moment to try it out.
18:50:19 <SyntaxLaptop> this is for darcs
18:52:47 <stepcut> hrm
18:53:02 * SyntaxLaptop asked on #debian-devel, but they ignored him
18:56:41 <stepcut> debian/NEWS.Debian
18:57:27 <stepcut> NEWS.Debian has the same format as the changelog 
18:57:51 <stepcut>  xfree86 4.2.1-11 and higher has a NEWS.Debian
18:58:42 <ibid> the name in the source package does not matter (unless your rules helper expects a particular name)
18:58:59 <ibid> but it should be installed as /usr/share/dock/$(package)/NEWS.Debian (IIRC)
18:59:09 <ibid> /usr/share/doc/$(package)/NEWS.Debian
19:02:17 <stepcut> /usr/share/doc/$(package)/NEWS.Debian.gz if you want to be real picky
19:02:39 <SyntaxLaptop> it seems to recognize debian/NEWS and put it in the right place
19:02:44 <SyntaxLaptop> (debhelper I guess)
19:02:48 <SyntaxLaptop> dh_installdocs
19:02:56 <SyntaxLaptop> though the man page doesn't mention news
19:02:58 <stepcut> ah 
19:03:18 <SyntaxLaptop> but it should be in changelog format?
19:03:35 <stepcut> the xfree86 one is ... that is all I am going on
19:03:46 <stepcut> I had never heard of NEWS until you mentioned it
19:05:55 <SyntaxLaptop> looks like all of the ones on my system are too :)
19:06:36 <SyntaxLaptop> OK. I gotta go
19:06:42 <SyntaxLaptop> darcs might be uploaded tonight, though :)
19:07:10 <ibid> yeah, changelog format
19:07:32 <SyntaxLaptop> peace all.
19:12:10 <themaximus> Good Night!
19:36:09 <stepcut> hrm, I wonder how I access 2d c arrays via the haskell ffi
19:41:56 <lzfnk> @arr
19:41:56 <lambdabot> Shiver me timbers!
19:42:09 <Cale> @yow
19:42:09 <lambdabot> ...Um...Um...
19:42:15 <Cale> @yow
19:42:16 <lambdabot> Not enough people play SKEE-BALL..  They're always thinking about
19:42:16 <lambdabot>  COCAINE or and ALIEN BEINGS!!
21:35:15 <stepcut> is there some quick and easy was to convert a 'Ptr a' into an IOUArray ? Something like hGetArray that works on Ptr's instead of file handles?
21:41:22 <stepcut> i could use peekArray to get a list from the Ptr, and then use listArray, but that seems wasteful
21:41:29 * stepcut goes to dinner
22:18:02 <stepcut> @yow
22:18:03 <lambdabot> Please come home with me...  I have Tylenol!!
22:21:53 <Cale> @yow
22:21:53 <lambdabot> I feel partially hydrogenated!
22:24:14 <DeezNuts> sup
22:24:19 <DeezNuts> @yow?
22:24:20 <lambdabot> Sorry, I don't know the command "yow?", try "lambdabot: @listcommands"
22:24:43 <Cale> "@yow" prints a quote from Zippy the Pinhead.
22:24:44 <DeezNuts> Cale: what you doin up so late bro?
22:24:50 <DeezNuts> lol
22:24:52 <Cale> Not a whole lot.
22:25:04 <DeezNuts> what do you do in your spare time besides IRC?
22:25:38 <DeezNuts> not busting your balls or anything just curious
22:25:39 <Cale> For one I do artwork - mostly digital these days, but I've done some painting too.
22:25:49 <DeezNuts> nice nice
22:26:04 <DeezNuts> do u have an online gallery?
22:26:30 <Cale> http://vx.hn.org/art/index.html
22:26:48 <Cale> my net connection just got dropped, so vx.hn.org might not direct you to the right ip
22:27:06 <Cale> 65.93.151.236
22:27:58 <DeezNuts> my connection sux
22:28:05 <DeezNuts> so its takign a while to load a pic
22:28:29 <DeezNuts> hmm looking like a lorenz contract so far
22:29:04 <Cale> two-worlds?
22:29:15 <DeezNuts> subliminationPoint
22:29:20 <DeezNuts> really pretty :) firey
22:29:22 <DeezNuts> exploding
22:29:35 <Cale> yeah, I was pretty happy with that
22:30:03 <DeezNuts> is there a golden spiral superimposed on like some sort of lorenz-contract-ish type shape?
22:31:08 <DeezNuts> how do you make these pics?
22:31:15 <DeezNuts> sorry with all the questions i should stop
22:31:17 <DeezNuts> heh
22:31:18 <Cale> There's actually a whole bunch of fractal-ish type transforms involved there, iirc. One of them being an ifs, and another being a hyperbolic tiling that only shows up really subtly.
22:31:47 <Cale> I made that a few years ago, so I don't remember the exact process.
22:32:00 <DeezNuts> damn two-worlds is great
22:32:09 <DeezNuts> it really does feel like two worlds 
22:32:29 <Cale> thanks :)
22:32:57 <DeezNuts> it gives me the sense of something on the cusp of emergence
22:33:06 <DeezNuts> and exploding into full life
22:33:19 <DeezNuts> you really like these levels of extreme tension :)
22:34:11 <DeezNuts> btw im probably completely misinterpreting the artwork :p im no artist
22:34:16 <DeezNuts> but i like ur stuff
22:34:29 <Cale> no, it's cool - I'm not sure how to interpret it myself. :)
22:34:50 <DeezNuts> what programs do you use?
22:34:58 <DeezNuts> or do you like write a program to generate these?
22:35:40 <Cale> Mostly the gimp these days. Many of those are done with photoshop on a windows box. I've also used some various 3D software.
22:36:57 <Cale> I've also used mathematica to create some of the 3d models.
22:38:49 <Maddas> How do the Gimp and PS compare (for you)?
22:39:12 <Cale> They're fairly similar for the stuff that I do. They both have points on each other.
22:40:41 <Cale> I wish the Gimp had more colour models. Some of the tricks that I used to use involved switching colour models (say to L*a*b) to toy with the colour components in a different way.
22:42:22 <Cale> I really like the Gimp's IfsCompose, which is really useful for building interesting organic forms really quickly, and shaping them exactly how you'd like.
22:42:30 <Maddas> heh
22:42:36 <Maddas> What about the UI?
22:43:13 <DeezNuts> good lordy
22:43:15 <Cale> The UI is about the same. The difference doesn't affect me too much.
22:43:16 <DeezNuts> Cale is da shit
22:44:45 <DeezNuts> Cale: I want to get up to snuff on a lot of mathematics really quick, is there a silver bullet?? I keep getting discouraged at the sheer amount of time studying I will have to do to get where I want
22:46:42 <Cale> I wouldn't say that there's a silver bullet, per se. Mathematics is just huge. Perhaps the best thing that you can do is to find an area that you really enjoy and get really good at it, then see what's related and branch off from there.
22:48:07 <DeezNuts> Well I'm unsure whether I should persue abstract/linear algebra first or calculus
22:48:50 <DeezNuts> i would also like to be able to learn math that would be useful in studying AI
22:50:23 <Cale> If you haven't learned much linear algebra, try that. There's a lot of geometry there, so the better you are with imagery, the more smoothly the algebra of it will go. It's also a great push off for a lot of other stuff.
22:52:23 <DeezNuts> damn splits
22:52:57 <Etaoin> can "monadic" things still be lazily evaluated?
22:54:04 <pattern> i split, you split, we all split
22:55:57 <Cale> Etaoin: I'm fairly sure of this. Monads are just another way to structure computations, they can be lazy or strict like anything else.
22:57:59 <Etaoin> well I've heard IO in haskell refered to as an embedded imperitive language of sorts and wasn't sure if that was because it was a monad or monads are just used to hide IO stuff from the rest of the functional program
23:00:52 <Cale> One way to think of the IO monad is as a tool to construct IO actions. You can mostly think of this construction going on lazily, but when the actions run, they're often strict, or block before allowing things to continue.
23:03:53 <Etaoin> okay
