00:09:15 * shapr chortles uffishly
00:09:40 <shapr> I have 18.5 thousand spams.
00:16:39 <liiwi> spam                                (330/16888)
00:16:41 <liiwi> charset                         (4169/14223)
00:16:45 <liiwi> bogo                            (33/3824)
00:17:17 <liiwi> hmm, >30k :)
00:17:46 * earthy points people to http://www.xtdnet.nl/paul/spam/
00:17:58 <earthy> (no, that's not me ;))
01:00:33 <shapr> Riastradh: hey, snowblind is back
01:09:48 <shapr> @yow !
01:09:49 <lambdabot> I have a very good DENTAL PLAN.  Thank you.
01:16:18 <shapr> hey, who's going to ICFP04 in Utah?
01:37:11 <shapr> hej Josef
01:37:29 <shapr> long time no see, what's going on?
01:37:59 <josefs> hej. well not much.
01:38:00 <skew> shapr, you are connecting to freenode with ipv6?
01:38:28 <shapr> skew: yup, modprobe ipv6 && apt-get install freenet6
01:38:51 <shapr> then connect to irc.ipv6.eu.freenode.net 
01:38:59 <shapr> well, in your case, probably irc.ipv6.us.freenode.net
01:39:41 <shapr> josefs: oh, I heard your name recently in connection with something going on at chalmers
01:39:45 * shapr tries to remember exactly what
01:39:48 <skew> looks like I need to compile that module. I don't know if our network does ipv6 either
01:40:04 <skew> hey josefs, do you know anything about Lennart Augustson's old projects?
01:40:17 <shapr> doesn't matter if your network does ipv6, I'm using 6 over 4
01:40:22 <josefs> oh yeah? Yes, I'm conected to some stuff happening here at chalmers.
01:40:35 <josefs> What were you thinking of?
01:41:03 <skew> Like how to build Cayenne, or how to build the lml and hbc that Cayenne needs
01:41:21 <skew> two layers of bitrot is never fun.
01:41:54 <shapr> oh, you'll require a real ipv4 address to do that
01:42:12 <josefs> That can't be right. I haven't really been involved in that.
01:42:38 <shapr> I think I heard your name in connection with either compiler construction or afp
01:43:08 <josefs> Ah, sure. I gave the afp course.
01:44:07 <shapr> do you ever give afp courses in the summer?
01:44:27 <josefs> Nope.
01:44:33 <shapr> oh, tyvärr.
01:45:08 <shapr> oh, there's also the #haskell.se and #haskelldb channels if you're looking for other local attractions.
01:45:40 <josefs> ok, sounds like fun. I might check them out.
01:46:36 <shapr> I tried some grillad korv recently at Frasses. I'm not convince I'll ever be interested in swedish sausages.
01:47:14 <shapr> hey, have you seen darcs?
01:47:33 <shapr> I think darcs is the best 'killer app' for Haskell I've seen recently.
01:47:48 <josefs> haven't tried it, just had a visit to the homepage
01:48:05 <shapr> if you're using debian, I can give you the four step demo
01:48:23 <josefs> sorry, i'm on solaris
01:48:35 <shapr> do you have a working ghc on solaris?
01:48:46 <josefs> sure
01:49:05 <shapr> hm, I think someone was asking for ghc6.2 on solaris recently.
01:49:09 <shapr> oh, I think it was forcer.
01:49:17 <earthy> ghc 6.2 on solaris isn't hard
01:49:28 <shapr> anyways, if you have darcs installed, you can grab my source-wiki 
01:49:43 <shapr> with "darcs get http://www.ScannedInAvian.org/repos/wikiwiki"
01:50:32 <shapr> and if you use emacs-wiki, you might even be interested in the distributed wiki idea I'm trying out there.
01:52:15 <shapr> the four step demo is, 1. install darcs 2. darcs get http://www.ScannedInAvian.org/repos/wikiwiki 3. make a change, run darcs record 4. darcs push
01:53:46 * earthy counts 5 steps
01:53:52 <earthy> as step 3 really is 2 steps. :)
01:58:15 * shapr grumbles
01:58:37 <shapr> one of my CPU fans is dying, this is the third CPU fan that's died in this box.
03:08:05 <shapr> Lunar^: did you find the second deadlock problem?
03:08:37 * shapr wishes for Zope in Haskell
03:10:22 <Lunar^> shapr: the problem is found sure
03:10:28 <Lunar^> shapr: I searching a solution right now
03:11:10 <shapr> ok
03:25:13 <shapr> Lunar^: hey, snowblind.ScannedInAvian.org is back up, want to try a darcs repo for hOp?
03:25:22 <shapr> g'day clausen 
03:25:37 * shapr suspects his huge lagtimes are a result of the ipv6 tunnel
03:25:38 <clausen> gday shapr
03:44:46 <Jerub> shapr: I'm on ion2 now. I was finding ratpoison didn't support my work habits.
03:47:24 <tic> How to evaluate (\x -> (\y -> x + y)) 2 3? Is it (\x -> x + 2) 3?
03:47:59 <forester> no (\y -> 2 + y) 3
03:49:05 <tic> left first, then. Gotcha. Thanks!
03:49:30 <forester> (M N) -> R => M -> \x.M' M'[x:=N] -> R
03:50:10 <tic> m'kay.
04:22:30 <earthy> in (\x -> (\y -> x + y)) 2 3 the brackets go  (((\x -> (\y -> x + y)) 2) 3)
04:22:48 <earthy> thus, as you can see, the \y is initially not in redex-position
06:04:43 <Lunar^> Yah ! :)
06:04:50 <Lunar^> No more deadlocks ! :)
06:06:31 <Igloo> Ah, you have proven your code deadlock free?  :-)
06:07:16 <Lunar^> *caugh*
06:07:57 <Lunar^> Igloo: how do you do that ? :)
06:09:31 <Igloo> Well, there are tools like FDR that take specifications of systems of processes and check them for deadlocks. FDR is expensive, though, and you'd still need to get from code to specification
06:11:12 <Lunar^> Does it also "handle" (?) the concept of hardware interrupts ?
06:13:10 <Igloo> You'd encode the hardware as a process that could send interrupt messages
06:13:36 <Lunar^> ok
06:13:54 <Lunar^> Igloo: Do you have an URL ?
06:15:04 <Igloo> http://web.comlab.ox.ac.uk/oucl/publications/books/concurrency/tools/ but the FDR links seem to be dead
06:19:17 <Lunar^> Thanks anyway
06:20:33 <Igloo> Ah, looks like http://www.fsel.com/ is them
06:23:25 <Lunar^> Not free software :(
06:24:21 <Marvin--> do they use model checking and stuff?
06:25:03 <Igloo> No, "FDR is expensive, though"
06:26:01 <Igloo> Yeah, it's fallen out of concurrency research at Oxford
06:26:33 <Igloo> (I don't actually know how much it costs, but "expensive" is likely IMO  :-)  )
06:27:03 <Marvin--> heh, I assumed you meant computationally expensive
06:27:30 <Igloo> Oh, oops  :-)
06:28:06 <Igloo> Well, ISTR it can be that too, especially if you don't understand the inner magic of how it works
06:43:03 <Marvin--> note to self: the problem with listening to power metal on head phones is that they tend to fall off
06:47:43 <SyntaxNinja> heh
07:05:47 <Lunar^> dev lOg updated with more bad english
07:07:23 <gnarf> hi
07:10:26 <SyntaxNinja> hey, that reminds me, my gf is trying to get a job proofreading translated technical texts for fluency. sounds like something she should be able tog et some practice on for free software.  any idea how  I could go about finding projects that have documentation that's translated, but with bad english?
07:11:45 <Igloo> I've seen some but couldn't name any OTTOMH
07:12:18 <Igloo> Looking for Debian packages packaged by Japanese people might work
07:15:32 <cuelebre> maybe engrish.com 
07:17:08 <Marvin--> Igloo: haha
07:17:15 <Marvin--> Igloo: or french (:
07:20:06 <Marvin--> SyntaxNinja: d-i could definitely use proofreading of the debconf templates
07:21:52 <Marvin--> though I don't know if we're in string freeze right now
07:25:10 <SyntaxNinja> Marvin--: I've never messed w/ those translations; how much supervision would a non-tech-girl need to proofread those?
07:25:14 <SyntaxNinja> she uses debian
07:25:54 <Marvin--> it's not the translations that need proof reading, well maybe they do, but I assumed we were talking about English here?
07:26:04 <SyntaxNinja> yeah
07:26:19 <SyntaxNinja> OK, so she'd be proof-reading english text that isn't translated from another language?
07:26:31 <SyntaxNinja> (that's the job she's trying to get experience for)
07:26:36 <SyntaxNinja> but same difference, really :)
07:27:08 <Marvin--> oh, my bad
07:27:43 <Marvin--> well, since many of the templates are written by people that don't have English as primary language, you could argue that it amounts to the same thing, but...
07:28:00 <SyntaxNinja> are those templates int he debina-installer source tree?
07:28:06 <Marvin--> yes
07:28:22 <Marvin--> I don't know if there's a script to pull them all out
07:28:33 <Marvin--> tracking them down one by one would be painful at best
07:28:37 <SyntaxNinja> eek
07:29:05 <SyntaxNinja> so they are spread out among various source files? (sorry, I have no idea how this works)
07:29:13 <SyntaxNinja> should i RTFM?
07:29:57 <Marvin--> I don't know if there is much of a FM yet :) d-i consists of several small debian packages, each package uses debconf for user interaction, and thus uses debconf templates
07:30:11 <Marvin--> find -name \*templates  in a checkout would probably find them all
07:30:45 <SyntaxNinja> OK, I don't see them in the debian source (20040310) I should get them from CVS?
07:31:19 <Marvin--> yeah, you need a cvs checkout
07:34:31 <SyntaxNinja> ok
07:37:00 <SyntaxNinja> marvin: spot checking them, I find no errors. I'll have her look through them, though
07:41:35 <Marvin--> I have no idea how much the l10n-english people have been over them, so it may just be a waste of time
07:41:58 <SyntaxNinja> ok
07:49:24 <adept> namazu! proofread namazu docs! ;)
07:57:11 <SyntaxNinja> adept: link?
07:57:15 <SyntaxNinja> what's namazu?
07:59:15 <Marvin--> a web site indexer/search engine IIRC
08:04:30 <adept> exactly. It is easily google-able. http://www.namazu.org/
08:07:13 <SyntaxNinja> well, she can't translate japanese. are there english versions of the docs?
08:15:42 <adept> SyntaxNinja: my language preference led to english pages being displayed to me. I dont know wether they have separate link to english variant or do they relay on browser auto-detect only
08:17:52 * Lunar^ is asking himself what would be the best way to interpret keyboard scancodes
08:22:18 <SyntaxNinja> hmmm
08:41:21 <SyntaxNinja> damn. ghc crash: ghc-6.2: panic! (the `impossible' happened, GHC version 6.2):
08:41:21 <SyntaxNinja> 	tcMonoExpr
08:41:21 <SyntaxNinja>     ControlziArrow.returnA {- v r20E -} -< GHCziBase.ZMZN {- d 6m -}
08:42:51 <Lunar^> eeek
08:43:24 <Lunar^> SyntaxNinja: 6.2.1RC or stock 6.2
08:44:30 <Lunar^> ?
08:44:39 <SyntaxNinja> latest debian, 6.2-3, which I assumei s a real 6.2
08:45:17 <Igloo> It is
08:45:57 <SyntaxNinja> I phear trying to make a small test case for this one.
08:51:50 <SyntaxNinja> arrowp to the rescue!
08:51:55 <SyntaxNinja> be back after lunch
08:51:55 * SyntaxNinja &
10:21:40 <Lemmih> Anyone written a Scheme interpreter in Haskell?
10:21:50 * stepcut is writing one
10:22:00 <stepcut> I have heard of another
10:22:07 <Lemmih> url?
10:22:15 <stepcut> actually, I am writing a scheme compiler
10:22:27 <Lemmih> Is it usable?
10:22:49 <stepcut> not yet
10:23:22 <Lemmih> Will it be usable any time soon?
10:23:58 <stepcut> perhaps in the next three 3 months it will be somewhat usable
10:24:06 <SyntaxNinja> OK so is anyone using a CVS of ghc or something later than 6.2?
10:24:08 <SyntaxNinja> module Main where
10:24:08 <SyntaxNinja> import Control.Arrow
10:24:08 <SyntaxNinja> foo = returnA -< []
10:24:12 <SyntaxNinja> That breaks for me (compile with -farrows)
10:24:25 <stepcut> but, I should note that I am targeting the flash VM with my compiler, so that may not be very useful to you 
10:24:26 <SyntaxNinja> I mean, the compiler panics
10:24:49 <Lemmih> )-:
10:25:37 <stepcut> Lemmih: as I mentioned, I believe someone else is working a Scheme implemenation that might be of use to you
10:25:53 <stepcut> SyntaxNinja: let me check, I have a cvs snapshot from feb 1,2004
10:26:25 <Igloo> Syn: Same here with a reasonably recent CVS
10:26:52 <stepcut> SyntaxNinja: same here too
10:27:14 <SyntaxNinja> ah
10:27:15 * SyntaxNinja files
10:27:24 <SyntaxNinja> that wasn't as bad as I thought ;)
10:27:35 <SyntaxNinja> I used arrowp to find that actually.
10:30:15 <Lemmih> stepcut: I actually need something ala Guile or Lua.
10:31:52 <stepcut> Lemmih: dunno, I am really only familiar with what I am working on ;)
10:46:31 <SyntaxNinja> ICFP '04 in Snowbird, Utah?
10:46:45 <SyntaxNinja> never heard of it.
10:47:01 <rt> mmm.  snowbird.
10:47:33 <SyntaxNinja> I want to do some camping and such out west
10:48:23 <Marvin--> meh, when was the deadline for HW papers? I should really get off my ass and write something this time
10:51:32 <earthy> haskell workshop? Deadline for submission:         4 June, 2004
10:55:31 <Marvin--> wow, that's plenty of time
10:55:39 <Marvin--> (famous last words #513)
11:05:21 <Marvin--> oh, look, JÃ¶rgen is on the committee, I wonder if that's good or bad
11:33:28 <gnarf> hi
11:34:45 <Lemmih> yo
11:35:06 <ski> gnarf : hi !
11:35:32 <gnarf> ski: i read the first part of the "nomaware". this deepend my undcomprehensions of monads :)
11:36:11 <ski> gnarf : hmm, have you seen this http://www.abercrombiegroup.co.uk/~noel/research/monads.html ?
11:36:35 <ski> also about monads
11:37:14 <gnarf> ski: doesn't seem to be too long.
11:37:41 <ski> (it's very possible that nomaware's is better and has more extensive documentaion of different monads. just wanted to point you to this too, so you can see if you think this is any good, too)
11:37:44 <ski> right
11:41:20 <gnarf> haskell seems to be a language without a "the tutorial", so reading different text should increase understanding.
11:41:38 <ski> perhaps
11:42:47 <Si> took me about 6 months to understand the concept of monads
11:43:07 <Si> and now just as I've figured them out, they produce arrows ;)
11:43:45 <stepcut> hehe
11:43:59 * stepcut is still working on the arrows thing
11:44:11 <stepcut> the big problem with arrows is lack of example code
11:44:45 <Si> how do they relate to monads?
11:45:02 <stepcut> well, monads can be generalized to arrows ;)
11:45:44 <Si> ok, but what exactly is an arrow? I mean for example can you do IO with one?
11:45:56 <ski> and lack of a good theory background
11:46:27 <ski> (i.e. exactly which laws should we have, and which classes, parameteried in which way ?)
11:47:01 <Marvin--> Si: I like to think of it like monads are an abstraction of computation and arrows are an abstraction of functions
11:47:48 * ski hisses "comonads" to Marvin--
11:49:43 <Marvin--> ... there we go again :-)
11:53:45 <gnarf> are monads intergrated into haskell language as a sparate type or any thing like this or is it just a separate syntax (do...)?
11:54:14 <ski> as a separate type class
11:54:22 <ski> the syntax is just sugar
11:54:34 <ski> not really needed to do monads
11:54:56 <gnarf> is this separate type class defined in the prelude or is this definition within the compiler?
11:55:12 <Marvin--> in the prelude
11:55:38 <Si> I'm just learning that, stopped doin do x <- function; return x and just doing function >>= return now :)
11:55:57 <gnarf> so monads are more like a definition to make programming easier than an actual part of the language, right?
11:56:20 <Si> well actually you wouldn't you'd just do function
11:56:26 <Marvin--> Si: good, the next step is to write just "function" instead of "function >>= return" ;)
11:56:35 <Si> I just figured...
11:56:42 * Marvin-- mocks Si mercilessly ;)
11:57:10 <Si> what I should have said was do x<-func1; y<-func2; return y now becomes func1 >>= func2 :D
11:57:15 <ski> monad *syntactic sugar* (i.e. do-notation) is "more like a definition to make programming easier"
11:57:35 <Marvin--> Si: you mean  do x <- func1 ; y <- func2 x ; return y  ?
11:57:43 <ski> (make programming with monads easier, of course :)
11:57:51 <Si> whatever :)
11:57:56 <Si> it's getting l8
12:00:37 <gnarf> i think my question was a bit different. if i didn't misunderstoot something completely programming without monads should be possible. so my question is: are monads only defined in the prelude or are they actually integrated into the compiler like integers or characters?
12:01:05 <ski> monads are defined in the prelude
12:01:21 <gnarf> thanks.
12:01:29 <Si> when you fire up ghci you're in the IO monad I think....
12:01:31 <ski> some specific monad types might has special interpreter/compiler support though
12:01:37 <ski> (like IO and ST, e.g.)
12:02:12 <ski> correction, the monad type class are defined in the prelude
12:02:56 <ski> then there are some instancing of some type (constructors) as monads (with appropriate return and (>>=))
12:03:08 <ski> e.g. Maybe and []
12:18:04 <gnarf> ski: ok. read that text you gave me. it's another interesting approach i didn't knew before.
12:18:17 <ski> ok
12:18:18 <ski> nice
12:18:29 <gnarf> i think practise would be helping now
12:18:40 <ski> yes
12:19:08 <gnarf> as i am learning haskell for fun (more or less) i don't have a special aim.
12:21:43 <gnarf> i already wrote take, map, reduce, filter and some infinite lists such as primes and the fibonacci series. what could be next?
12:22:07 <ski> perhaps trees ?
12:22:10 <ski> or parsing ?
12:23:04 <Si> or writing a complete operating system?
12:23:24 <ski> that *could* be interesting
12:23:28 <ski> :)
12:23:50 <Si> we could call it "Funix"
12:24:20 <ski> gnarf : define map and fold for other things that lists, perhaps ?
12:24:27 <gnarf> good idea. i could try trees, parsing trees, trees of lists and parsing those. should be difficult enough
12:24:36 <ski> e.g. Maybe, trees, etc ..
12:24:39 <SamB> I was thinking about that, but I was worried lazyness might not agree too well with large portions of memory being remapped...
12:25:00 <gnarf> ski: what could map for Maybe be like?
12:25:02 <ski> replacing every element in a tree by the smallest one in one pass ?
12:25:04 <ski> :)
12:25:35 <ski> class Functor a where
12:25:35 <ski>   fmap :: (b -> c) -> a b -> a c
12:25:54 <ski> there you have the general map type
12:26:12 <ski> so for lists that is  (b -> c) -> [] b -> [] c
12:26:17 <ski> which is the same as
12:26:28 <ski> (a -> b) -> ([a] -> [b])
12:26:58 <ski> (but don't go and peek at the instances of Functor, now ! ;)
12:27:51 <gnarf> starting with trees seems to fit my knowledge..
12:27:54 <ski> so, can you imagine what type map for Maybe should have now ?
12:28:05 <ski> trees can also be mapped, of course
12:28:30 <gnarf> but mapping trees is much clearer in my head.
12:28:47 <ski> ok, so do that first, then :)
12:29:24 <ski> you could write a function which determines if a "mobile" is balanced, also
12:29:49 * ski is not talking about phones
12:30:08 <ski> you know what that is ?
12:30:42 <Si> ah, Haskell Micro Edition!
12:30:54 <ski> Si : huh ?
12:31:03 <Si> for mobileds
12:31:06 <Si> mobiles
12:31:13 <ski> aargh :)
12:32:01 <Si> then we could have a Haskell Enterprise Edition
12:32:38 <gnarf> no. i can't assign a meaning to "mobiles" although a meaning (without that word) may exist in my head...
12:33:10 <Si> once we've got everything off http://haskell.org/hawiki/HaskellWebApplicationServer
12:34:10 <ski> ok, it's a kind of adorment thing
12:34:21 <liiwi> ew, weblification
12:35:32 <ski> gnarf : it at a stick which hangs in a string which is attached to the stick somewhere between the endpoints
12:35:47 <ski> so the stick is supposed to hang horizontally
12:36:14 <gnarf> this sounds confusing. i should stop skipping steps.
12:36:51 <ski> now, there usually is one string with a mobile hanging from it from each of the two endpoints of the first stick
12:37:25 <ski> and those sticks which is attached to those strings may have sub-/child-mobiles, as well
12:38:01 <ski> the base case is when the thing hanging from a string is not a new sub-mobile, but some object of some weight
12:39:25 * ski is trying to find a pic of it on the net ..
12:40:10 <gnarf> ski: although i didn't understand that either i'd ask you not to try to explain it to me. i'd like to get some experience with trees first..
12:41:36 <ski> hmm, here's one pic http://www.minimundus.se/popup/leksaker/getingmamma_getingbaby.htm
12:42:32 <ski> (though not a very good one, as example for this programming exercise)
12:43:42 <ski> hmm
12:43:44 <gnarf> i'm sorry. i'll have to have a look at it tomorrow as i'm working with a strange machiene that freezes on startx ;)
12:43:58 <ski> ok
12:44:21 <ski> (perhaps, it's better if i just show you the data type definition ..)
12:44:28 <gnarf> no.
12:44:34 <ski> (s/better/better or easier/)
12:44:35 <ski> ok
12:44:46 <ski> no prob :)
12:44:50 <gnarf> perhaps it's just better if i just try to start with trees.
12:44:59 <ski> yeah, prob
12:46:54 <ski> "Also, where can I find some good documentation on IOExts, IORef, etc?"
12:47:14 <ski> what is a good answer for that ?
12:52:16 <ski> hello pattern
12:52:32 * esap blinks.
12:52:59 <ski> esap : now i must ask why
12:53:05 <esap> why?
12:53:09 <esap> why what?
12:53:26 <ski> why you bliked, of course :)
12:53:32 <ski> (blinked, even)
12:54:18 <ski> @arr
12:54:18 <lambdabot> Prelude.(!!): index too large
12:54:23 <ski> bah
12:54:26 <ski> "arr
12:54:28 <ski> @arr
12:54:29 <lambdabot> Eat maggoty hardtack, ye unkempt, jenny frequentin', son of a gun.
12:55:56 <esap> ski: I usually blink when I'm back from doing something else and have nothing to do.
12:56:11 <ski> oh
12:57:48 <ski> esap : hmm, i was thinking about record recursion yesterday
12:58:52 <ski> do you remember when you suggested \(f,g) -> fix (f . g) ?
13:10:10 <ski> hi there, FlamingRain
13:10:50 <ski> do you perhaps have any questions on haskell ?
13:11:44 <Lemmih> FlamingRain: Yo, nice to you in here.
13:13:10 * esap got taken by some network problems. I hope it doesn't repeat.
13:13:38 <ski> mhmm
13:15:07 <ski> (esap : remember the record recursion ?)
13:15:11 <esap> yes
13:16:05 <ski> i was thinking about how to define that without language-support for recursion
13:16:27 <ski> (only given a fix function)
13:17:00 <ski> the \(f,g) -> fix (f . g) scheme only works for tail recursion, no ?
13:17:56 <esap> hmm.. I guess.
13:18:09 <ski> (i.e. something like  mutRec :: ((a,b) -> a,(a,b) -> b) -> (a,b) )
13:18:14 <FlamingRain> lemmih, i'm starting a computer club at school and decided to offer haskell as a language on our machines to have a funcitonal language. I started reading some tutorials and the language seems fascinating
13:18:37 <FlamingRain> decided i'd hang out in here to pick up some knowledge
13:18:39 <ski> (for cbv, we have to s/a/a -> c/ s/b/b -> d/)
13:20:10 <FlamingRain> ski, no, no particular questoin at the moment although i will most likely have some in the near future (that is, if I hope to teach anyone about this language)
13:20:21 <ski> ok, heh :)
13:20:22 <FlamingRain> s/questoin/question/
13:20:25 <ski> mm
13:21:12 <ski> esap : i was thinking if we had callcc, we might be able to do general mutual recursion from a simple fix ..
13:21:24 <esap> ski: hmm.. I think there is a paper that says that fixed points can be built from adjoints of 'swap'.
13:21:34 <ski> oh
13:22:17 <ski> sounds funny
13:22:43 <esap> there was some constraints on when it worked. Hold on, I'll try to find that paper.
13:22:53 <ski> ok, thanks
13:23:02 <gnarf> what was the operator for shortening f ( g v ) ? wasn't it something like f . g v ?
13:23:13 <ski> (f . g) v
13:23:20 <gnarf> thx
13:23:26 <ski> f . g  $  v
13:23:28 <ski> also works
13:23:36 <ski> f $ x = f x
13:23:42 <ski> is the definition of $
13:25:35 <SyntaxNinja> btw, as per our discussion the other day, I found an example of map arrow, but, as I was afraid, it requires ArrowChoice:
13:25:35 <SyntaxNinja> mapA :: ArrowChoice a => a (b, c) d -> a (b, [c]) [d]
13:25:35 <SyntaxNinja> mapA f = proc (env, xs) -> case xs of
13:25:35 <SyntaxNinja> 		[] ->
13:25:35 <SyntaxNinja> 			returnA -< []
13:25:37 <SyntaxNinja> 		x:xs -> do
13:25:39 <SyntaxNinja> 			y <- f -< (env, x)
13:25:41 <SyntaxNinja> 			ys <- mapA f -< (env, xs)
13:25:43 <SyntaxNinja> 			returnA -< y:ys
13:26:26 <ski> what does it do ?
13:27:13 <SyntaxNinja> basically turns an arrow from c -> d into [c] -> [d], I think.
13:27:25 <ski> ok, hm
13:27:40 <SyntaxNinja> the important part is that case statement. I wante dto figure out how to do something like that without arrowChoice, hoping that laziness could help
13:28:02 <ski> is it the case that introduces ArrowChoice ?
13:28:06 <SyntaxNinja> yeah
13:28:21 <ski> hmm, oh right
13:29:00 <ski> do you want (possibly) finite lists ?
13:29:10 <ski> or would streams suffice ?
13:29:28 <ski> hmm
13:30:28 <SyntaxNinja> I don't think it matters. the trick is how to handle the empty list
13:32:16 <esap> ski: I think it's this one: http://citeseer.ist.psu.edu/hasegawa97recursion.html
13:32:19 <Igloo> If you have no finite lists there are no empty lists...
13:32:49 <ski> mm
13:32:55 <ski> esap : thanks
13:33:31 <SyntaxNinja> oh, I see.
13:33:45 <SyntaxNinja> no, I will get empty lists
13:34:05 <ski> so, perhaps the ArrowChoice is inherent, then ?
13:35:04 <ski> hmm, can you think of some Arrow which doesn't support ArrowChoice, but for which you can write a specialized version of mapA ?
13:37:17 <SyntaxNinja> ski: the arrow I want to do this with is SF in yampa, which doesn't support ArrowChoice, but I'm not clear if its impossible to do so for some reason. when I picture it in my head, it doesn't seem like it should be, but I don't yet grok ArrowChoice. I'm digging around for the paper that explains it
13:37:22 <ski> which arrows doesn't support Choice, now
13:37:23 <ski> ?
13:37:50 <ski> i think there was some static parser arrow that didn't have (dynamic) choice
13:39:04 <ski> what knid of arrow is SF ?
13:40:41 <ski> some kind of state processing arrow ???
13:40:45 <SyntaxNinja> ski: it is an instance of Arrow and ArrowLoop
13:41:12 <SyntaxNinja> state processing? hm. I don't know how to answer that :(
13:41:36 <ski> perhaps state processor was the correct term ..
13:42:14 <ski> like data AsynchSP a b = Get (a -> AsynchSP a b) | Put b (AsynchSP a b)
13:42:45 <ski> or newytpe SynchSP a b = SSP (a -> (b,SynchSP a b))
13:42:46 * SyntaxNinja looks under the hood...
13:42:54 <phubuh> Hm, does anyone has BjÃ¶rn Bringert's GHC port of HaskellDB?
13:43:34 <SyntaxNinja> ski:
13:43:35 <SyntaxNinja> data SF a b = SF {sfTF :: a -> Transition a b}
13:43:35 <SyntaxNinja> data SF' a b 
13:43:35 <SyntaxNinja>     = SFConst {sfTF' :: DTime -> a -> Transition a b, sfCVal :: b}
13:43:35 <SyntaxNinja>     | SFArr   {sfTF' :: DTime -> a -> Transition a b, sfAFun :: a -> b}
13:43:35 <SyntaxNinja>     | SFTIVar {sfTF' :: DTime -> a -> Transition a b}
13:43:37 <SyntaxNinja> type Transition a b = (SF' a b, b)
13:44:26 <ski> hmm, that looks like some kind of stream processor, i guess
13:44:57 <ski> SF seems only to be a toplevel shell
13:45:09 <SyntaxNinja> well, the input to a SF is supposed to be continuously varying, likewise with the output
13:45:19 <SyntaxNinja> all of my experience with arrows is with SF, so I don't really know anything else.
13:45:39 <ski> ok
13:46:17 <phubuh> andersca: I see some references to an Anders in the Haskell Web Tools protocols, is that you? :-)
13:46:40 <ski> i suppose they use a freeze-time-and-compute, then skip-forward-to-next-interesting-time-point, and start over again
13:47:07 <ski> (kindly like VHDL modelling of continuous time, IIRC)
13:47:19 <ski> (s/kindly/kinda/)
13:47:45 <SyntaxNinja> ski: yeah
13:47:58 <gnarf> ski: i have general trees, a general map function, a function for converting a string tree into a string, a function converting an int tree into a string tree and some testing code, but i have no idea how to parse strings into trees. i could have a look at some gentle introduction and would perhaps understand why their solution works, but i could not write similar code. please give me a hint.
13:48:26 <ski> one can make a category of dynamical systems with continuous time and discrete events
13:49:04 <SyntaxNinja> ski: sounds like Yampa
13:49:13 <ski> gnarf : hmm
13:49:21 <ski> SyntaxNinja : heh :)
13:49:58 <SyntaxNinja> ski: so do you think it's not possible for such an arrow to support ArrowChoice? can you give me some intuition as to why this is so?
13:50:17 <ski> gnarf : do you understand how to work with a list-of-successes ?
13:50:38 <gnarf> ski: no
13:55:56 <ski> SyntaxNinja : hmm, i think someone said that Either works like a product for stream processors, rather than like a sum
13:56:54 <gnarf> ski: do you think that some mathematical background would help in my situation?
13:57:17 <esap> mathematical background always helps :-)
13:57:47 <gnarf> this question came up, because i'm often thinking in a very "c-like" way.
13:58:20 <ski> gnarf : hmm, was looking on web for a paper named "how to replace failure by a list of successes" (by wadler, of course :)
13:58:35 <ski> gnarf : http://www.eecs.harvard.edu/~ccshan/papers/wadler-replace/wadler.pdf
13:58:47 <ski> gnarf : but it seems i haven't read it :(
13:59:00 <ski> gnarf : so i don't know how good it is ..
14:00:23 <ski> (hmm, actually seems a bit old. prolly it's pre-haskell)
14:00:40 <ski> anyway
14:01:05 <Marvin--> failure as list of successes sounds like backtracking/list monad
14:01:08 <ski> if we want a function that can return multiple results, return them in a list !
14:01:29 <Marvin--> or undeterministic functions if you like
14:01:34 <ski> Marvin-- : yeah, that's almost the same thing
14:02:06 * Marvin-- does some funky list monad stuff in a program
14:02:47 <ski> SyntaxNinja : hmm
14:04:22 <ski> left :: ArrowChoice (-->) => (a --> b) -> (Either a c --> Either b c)
14:04:47 <ski> SyntaxNinja : what you that do, for AsynchSP, e.g. ?
14:05:44 <SyntaxNinja> ski: sorry, I can't parse that
14:06:17 <ski> left :: ArrowChoice ar => ar a b -> ar (Either a c) (Either b c)
14:06:21 <ski> then
14:06:35 <ski> can you parse that ?
14:07:02 <SyntaxNinja> yeah. I didn't get what you were asking "what you that do, for AsynchSP, e.g. ?"
14:07:53 <ski> gnarf : when trying to parse, the problem is how to split the input string (or token stream) in the right places, and then pass those pieces to functions which parses smaller parts
14:08:44 <ski> gnarf : trying to look at it as reverse printing  (which can be done with printing sub-parts, and concatenating them)
14:09:08 <ski> SyntaxNinja : oh, sorry. my bad
14:09:43 <ski> "what should that do, for AsynchSP, e.g. ?", it should've been
14:09:46 <gnarf> ski: this is a common method using bison or writing simple parsers directly in an imperative language.
14:10:03 <FlamingRain> i have a question now
14:10:10 <FlamingRain>  data [a]               = [] | a : [a]
14:10:15 <FlamingRain> that seems to be causing me some confusion
14:10:24 <ski> gnarf : so the problem is : appending is deterministic, unappending is nondeterministic
14:10:41 <ski> FlamingRain : oh
14:10:43 <Marvin--> ski: *cough*prolog*cough* ;)
14:11:08 <ski> Marvin-- : are you complaining ?
14:11:29 <FlamingRain> I understand the basic concept of it, but don't totally understand how the ':' operates in this case. If [a] is a list, then a is sole element of the list? or does it just denote the type of the list elements?
14:11:29 <Marvin--> ski: no :)
14:11:54 <ski> data List a = Nil | Cons a (List a)
14:11:56 <Marvin--> FlamingRain: the problem is that that line isn't actually valid haskell
14:12:08 <ski> is a way to define lists without the sugar
14:12:48 <FlamingRain> Marvin--: oh, i see, well that makes it a bit more difficult
14:12:59 <ski> in haskell, the type of [True,True,False] is written like [Bool]
14:13:19 <ski> so the [...] notation is reused at both value and type levels
14:13:31 <FlamingRain> oh, i see, so a denotes the type of the list
14:13:39 <Marvin--> no, the type of the list elements
14:13:46 <FlamingRain> well, the a in [a]
14:13:59 <ski> gnarf : what would the type of unappend be ?
14:14:00 <Marvin--> [a] is the type of the list
14:14:12 <Marvin--> a is the type of the list's elements
14:14:52 <ski> gnarf : append is (++), right ?
14:15:11 <ski> gnarf : and  (++) :: [a] -> [a] -> [a]
14:15:14 <gnarf> ski: this is a point where i can follow again
14:15:23 <ski> gnarf : ok :)
14:15:48 <FlamingRain> Marvin--: okay, thanks
14:16:05 <gnarf> ski: but i think my problem is more like i didn't understand the whole concept of functional programming.
14:16:23 <ski> gnarf : (btw, here's yet another monad tutorial i found :) http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm)
14:16:39 <ski> oh
14:17:23 <ski> you do know that it focuses on evaluation expressions and calling functions, right ?
14:18:07 <ski> (instead of, say, executing statements with side-effects and updating imperative variables)
14:18:57 <ski> gnarf : hmm ?
14:19:01 <SyntaxNinja> ski: I don't know. I guess I don't  grok ArrowChoice yet. 
14:19:11 <SyntaxNinja> and I have to go home. ski, I will harass you about this soon.
14:19:18 <SyntaxNinja> thanks for your help.
14:19:37 <ski> SyntaxNinja : ok :)  bye
14:20:53 <SyntaxNinja> peace
14:26:49 * SamB wants Monads for the Playing Haskell Programmer
14:31:55 <ski> well, i'm leaving now, i think
20:50:17 <FlamingRain> quick question for anyone alive
20:50:19 <FlamingRain> add                     :: Integer -> Integer -> Integer
20:50:20 <FlamingRain> add x y                 =  x + y
20:50:24 <FlamingRain> I'm lost on this
20:50:37 <FlamingRain> Why is it Integer -> Integer -> Integer?
20:51:07 <np_hard> x -> y -> result
20:51:56 <FlamingRain> but why is it x -> y -> result? i think it's because i'm not totally sure of functional programming or the -> operator
20:52:20 <Riastradh> What would you think it would be?
20:52:32 <np_hard> add is a function with the type integer -> integer -> integer, which means that (add 5) is a function with type integer -> integer
20:53:19 <np_hard> and (add 5 6) is a function of type integer, or rather just the value 11
20:53:32 <FlamingRain> riastradh, I'm not really sure, perhaps reading up a bit more would help clarify it
20:53:44 <FlamingRain> np_hard, thanks, that clears it up a bit for me
20:53:50 <np_hard> np
20:53:53 <Riastradh> FlamingRain, if you don't have a better idea, just smile & nod and read on.
20:54:12 <FlamingRain> riastradh, heh, such is the life of a programmer
20:54:19 <np_hard> let f = add 5 in f 6
20:54:24 <np_hard> maybe this helps
20:58:16 <FlamingRain> maybe if I set up hugs i can do some fooling around and get a better feel for it
21:01:01 <np_hard> yes
21:01:07 <np_hard> highly recommended
21:08:58 <FlamingRain> my only problem is that I have about a month to become semi proficient in about 9 different languages,
21:09:31 <FlamingRain> so that I can at least introduce people to them and give a sober view of their pros and cons
21:20:22 <np_hard> why do you need to learn so many languages?
21:20:29 <np_hard> if you don't mind me asking
21:22:41 <FlamingRain> i'm starting a computer club at school and the people that will be joining will have no clue how to program or even what it involves and their interests will be very different. I know most places offer to teach them on a base language and then let them loose, but i'd like to let people get an honest opinion of the languages and then pick what they want to learn
21:22:58 <FlamingRain> esp with languages like haskell and prolog as the general mindset is different
21:23:15 <np_hard> ah
21:23:23 <np_hard> an ambitious project!
21:24:01 <Riastradh> Don't you think it could be dangerous for you to run such a club and hand out information like that when you don't really understand the languages yet?
21:24:53 <FlamingRain> riastradh, that's why i'm trying to learn, so that I can be at least informed enough to make some statements about the basics of the language
21:25:09 <FlamingRain> but yes, i do realize the danger of my own ignorance spreading
21:25:12 <FlamingRain> =p
21:25:25 <Riastradh> But if you don't _really_ understand the language, how can you convey concepts thereof?
21:25:46 <FlamingRain> well, i'm gonna try
21:26:26 <FlamingRain> I'm gonna see who all joins and where they're at and what they want to do before I make any presentation to them
21:27:15 <FlamingRain> right now I've got some easy languages on my plate: XBasic and C (since I already learned it pretty much)
21:27:22 <FlamingRain> haskell's one of the hard one's for me
22:25:59 <FlamingRain> anybody have a book on haskell?
22:27:19 <FlamingRain> I'm looking at "The Haskell School of Expression"
22:27:33 <FlamingRain> I never did learn much from online tut's
