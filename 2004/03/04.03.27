00:30:15 <shapr> yow, what's going on with all the disconnects?
00:32:33 <shapr> stepcut: what does libmysqld do?
00:32:39 <shapr> phj___: y0
04:38:51 <shapr> dude
04:38:59 <shapr> it's time to ban the bouncies
04:41:05 <Heffalump> wow, yes
04:42:00 <shapr> would you like to do the honors?
04:43:57 <Heffalump> I can't, I asked you to remove my channel privileges, remember? :-)
04:44:16 <Heffalump> you could put them back if you like now Smerdyakov is unbanned
04:54:13 <shapr> at least for the moment ;-)
04:55:20 <shapr> ok
04:57:39 <shapr> neat http://hinterlands.cc/index.php?showtopic=42
05:14:17 <shapr> hi yeoh 
05:15:16 <yeoh> hi shapr. :)
05:16:57 <shapr> are you learning Haskell?
05:17:29 <yeoh> yes, I am. :)
05:18:42 <shapr> do you have any questions?
05:18:50 <yeoh> I'm looking for on-line tutorials, trying to collect as many as I can for reading later. :)
05:19:04 <monotonom> Cannot get on to www.haskell.org.  This is not fun.  -_-
05:19:34 <yeoh> Yeah, I tried to but couldn't connect to haskell.org too.
05:20:44 <shapr> looks like the problem is somewhere at yale
05:20:56 <shapr> haskell.org has been having some IDE disk problems lately, so the drive may have crashed 
05:21:16 <yeoh> Oh..
05:21:48 <shapr> but the Haskell language still works...
05:22:10 <shapr> I'd recommend Hal Daum√©'s  YAHT tutorial
05:23:10 <yeoh> Yes, I've downloaded it. :)
05:24:19 <shapr> then you should come here and ask us when you have more questions
05:25:46 <yeoh> Yes, I will read it and try to understand Haskell. Thanks, I will ask questions if I have any doubts. :)
05:33:14 * Marvin-- grumbles and attacks LaTeX again
05:33:26 <kosmikus|away> Marvin--: what is it?
05:36:32 <Marvin--> nothing in particular ... yet :)
05:53:14 <Marvin--> yay, Sven accepted my patch
06:04:39 * Marvin-- ponders what to do with his implicit parameters
06:48:26 <Marvin--> oh well, pretty error handling be damned
07:52:33 <shapr> yeehaa
07:52:41 <Jerub> shapry!
07:52:42 <shapr> what's going on?
07:52:48 <shapr> Jerubic!
07:53:18 <shapr> ok, my task is now to write an email viewer in WASH
07:53:23 <Jerub> had a student haskell programmer trying to transliterate a C program to haskell the other day.
07:53:27 <Jerub> he got a bit frustrated.
07:53:41 <shapr> I can understand that
07:53:58 <Jerub> and he didn't want to talk about it in channel, because his tutors hang around here ;)
07:54:10 <shapr> it's like transliterating technical german into idiomatic alabamian
07:54:30 <shapr> or maybe the other way around
07:54:55 <Jerub> yes, he was having a hard time.
07:55:10 <Jerub> he didn't quite grasp "if you want a variable within a function, it has to be an ARGUMENT"
07:55:10 <YveDeLarc> a nice assignment - maybe on should implement a 'C Monad' and translate automatically to that ;)
07:55:13 <Jerub> he wanted globals ;)
07:55:17 <shapr> I feel like I been et by a wolf and shit off a cliff. or in less idiomatic terms, I feel like I've been eaten by a wolf and defecated off a cliff.
07:55:29 <shapr> now, you must translate that into german
07:56:25 <shapr> it's hard to find the balance between helping someone with their homework and doing it for them.
07:56:25 * Jerub goes to bed.
07:56:29 <Jerub> yes.
07:56:34 <shapr> but it can be done, and does happen here on #haskell
07:56:38 <shapr> g'night Jerub!
07:56:38 <Jerub> I tried to explain the concept of an accumulator.
07:56:43 <Jerub> thats all I really did.
07:57:06 <shapr> sounds good to me
07:57:12 <Jerub> he was banned from using pattern matching in writing functions! evil lecturer.
07:57:20 <shapr> wow, that sucks
07:57:26 <Jerub> yeah.
07:57:34 <shapr> but maybe the lecturer was just trying to show them that other possibilities do exist
07:57:42 <Jerub> foo xs = (bar (head xs)) : (baz (tail xs))
07:57:53 <Jerub> and no HOF, which makes no sense.
07:57:58 <Jerub> because haskell is ALL HOF.
07:57:59 <shapr> ick
07:58:01 <Jerub> anyway, bed.
07:58:04 <shapr> I subsist on HOFs
07:58:11 <Marvin--> well, depends on how far they've gotten in the course yet
07:58:21 <Jerub> Marvin--: thats true, but to ban them, ugh.
07:58:33 <Marvin--> disallowing certain features is a good way to find out if they've understood the allowed features
07:58:51 <Marvin--> and lessens the chance that they can download a program from somewhere
07:58:52 * shapr tries /mode +b #haskell side-effects!*@*
07:59:28 * Marvin-- ponders setting up a paypal account
07:59:38 <shapr> paypal pisses me off
07:59:42 <Marvin--> how so?
07:59:54 <shapr> I had an account in Finland, and they can't transfer it to sweden
08:00:04 <Marvin--> d'oh
08:00:06 <shapr> they said I have to kill my old account and start a new one
08:00:13 <Marvin--> okay, that sucks
08:00:25 <Marvin--> but aside from that, have you had any problems with ti?
08:00:26 <Marvin--> it
08:00:54 <Marvin--> I just want to be able to use it to buy stuff online, I don't want to receive money to it, that seems complicated and messy
08:01:42 * shapr laughs at inline ASP http://www.supertrapp.com/Pipeline/pipeline_page.htm
08:01:56 <shapr> gotta love the <% end if %> at the end of that page.
08:02:17 <shapr> no, I didn't have any problems with them
08:02:47 <Marvin--> I guess that adding your visa card to a paypal account isn't more insecure than using it elsewhere
08:02:59 <shapr> hey, do you have a moment to glance at my email loading/searching code and mention any obvious improvements?
08:03:16 <Heffalump> except that Paypal steal your money and refuse to give it back
08:03:22 <Heffalump> s/steal/are known to &/
08:03:34 <Heffalump> whereas most online retailers are generally well behaved
08:03:34 <Lunar^> Jerub: Wasn't he the one who asked that in haskell-cafe ?
08:03:39 <shapr> I've only transferred $260 USD totaly
08:03:45 <Marvin--> Heffalump: oh?
08:03:47 <Lunar^> Jerub: Getting a really fun answer from Simon Marlow ß
08:04:04 <Heffalump> Paypal arbitrarily freeze accounts and other stuff like that
08:04:04 <Marvin--> heh, that answer was awesome
08:04:07 <shapr> http://shapr.homelinux.net/~shae/ProtoMime.hs && http://shapr.homelinux.net/~shae/ProtoWASH.hs
08:04:38 <Marvin--> the "optimized" code was good too
08:04:40 <shapr> that's the loading and searching code so far, just wondering if anyone has any comments before I continue with them
08:04:44 <Heffalump> s'like a hotmail account; I could probably get any hotmail account I liked frozen by making a spam complaint
08:05:19 <Marvin--> shapr: wow, wide code
08:05:33 <shapr> oh, that's my screen width
08:06:22 <Marvin--> Heffalump: but as long as I don't keep money *on* the account, I should be reasonably safe, shouldn't I?
08:06:46 <Marvin--> I wanted to buy something at a site that couldn't accept visa payments from Europe or some such crap :-/
08:06:58 <shapr> I've never heard of such a thing
08:08:09 <Riastradh> Is haskell.org dead?
08:08:13 <shapr> they must not want to sell stuff
08:08:29 <shapr> Riastradh: it was having IDE problems recently
08:08:39 <Riastradh> IDE problems?
08:08:58 <shapr> dmesg showed scary IDE errors
08:11:33 <Riastradh> Oh, IDE as in hard drives?
08:12:46 <shapr> yup
08:13:06 <shapr> I have a wiki backup, but it's not very recent
08:13:09 <Riastradh> I was thinking IDE as in integrated development environment...
08:13:15 <shapr> :-)
08:21:09 <shapr> stepcut: how do I get information submitted in a request?
08:21:51 <shapr> I'm thinking something like email?msgid=<18983298@haskell.org>
08:30:48 <stepcut> shapr: so this is just a link, not a form?
08:32:50 <stepcut> there are two way to pass things in after the ? (ask defined by the CGI standard)
08:37:53 <stepcut> if there are no '=' after the ?, then the cgi program is called with the string as its argument (but first all the '+' are converted to spaces)
08:38:40 <stepcut> so my.cgi?get+something+from+somewhere, would cause the webserver to run: my.cgi get something from somewhere
08:38:42 <ibid> as one argument or multiple? :)
08:38:52 <shapr> stepcut: er, I was asking about WASH in particular
08:39:01 <shapr> I have written some CGI programs before
08:39:01 <stepcut> ibid: multiple
08:39:08 <stepcut> shapr: right, I am getting to that
08:39:16 <shapr> actually, I've written CGI programs in a multitude of languages
08:39:19 <shapr> ok, I'll be patient.
08:39:39 <stepcut> if there is and '=' then the string gets stored in QUERY_STRING and nothing gets passed in on the command-line.
08:40:05 <shapr> is n-heptane.com really your website?
08:40:33 <stepcut> so, in WASH, to handle the first case, you use the runWithHook function, and create a hook that gets invoked
08:40:49 <shapr> truly, you sound like a veteran WASH programmer
08:41:35 <stepcut> for the second case, you would just standard haskell stuff to get the environmental variable QUERY_STRING -- i am not sure if there is a function to parse QUERY_STRING into a list of tuples
08:41:47 <shapr> but it wouldn't be hard to write, I see
08:42:04 <stepcut> but really, the second case seems under supported to me
08:42:21 <shapr> do you think it's more sensible to use a form with WASH?
08:42:59 <stepcut> shapr: i thin WASH was originally developed for the purpose of form processing, so it is weak in other areas
08:43:07 <shapr> I just want to show a bunch of <tr><td>subject</td><td>date</td><tr> and have some way to click on the subject to show the whole message
08:43:22 <shapr> I had wondered about that, it looks like *everything* is done with forms
08:44:19 <shapr> thanks for your insights
08:44:23 <Si\> is haskell.org up?
08:44:27 <shapr> I don't think so
08:44:37 <stepcut> shapr: personally, I would probably either write the QUERY_STRING parser, or use the existing hook functionality and change your syntax to: emal?get+message+1234
08:44:52 <stepcut> oops, email?get+message+1234
08:45:07 <stepcut> then you can write a hook function that pattern matches:
08:45:39 <stepcut> hook ("get" : "message" : message_id ) = show_message (read message_id)
08:46:25 <shapr> I don't mind making a separate binary just to show an email, I think I'll do that for the moment.
08:46:44 <stepcut> ok
08:46:44 <shapr> I'm fond of existing functionality.
08:47:07 <stepcut> I hope to beef up WASH's support for QUERY_STRING, and for creating links in general
08:47:40 <shapr> how's your AIM code doing?
08:47:49 <shapr> have you looked at ginsu for inspiration?
08:48:12 <stepcut> n-heptane.com is my actual site, though it mostly consists of my girlfrieds activities at the moment
08:48:18 <stepcut> what is ginsu?
08:48:26 <shapr> it's John Meacham's Gale client
08:48:35 <stepcut> no, but I will definately look at it
08:48:44 * shapr gets url
08:48:48 <shapr> http://repetae.net/computer/ginsu/
08:48:51 <shapr> it's rather neat
08:48:58 <stepcut> I made some progress on the AIM client, but now I need to do a bit more design work
08:49:27 <shapr> gale is sort of an IM system
08:49:31 <shapr> it's a bit like jabber
08:49:46 <Heffalump> I played with it a bit in 1997 but got bored
08:49:46 <shapr> it's a bit like irc also
08:50:11 <cptchaos> has ist gateways to other im-Systems, and irc?
08:50:18 <shapr> your message are sent with subject lines that look a lot like usenet group names
08:50:33 <shapr> and you can limit your view to a certain author/group/etc
08:50:42 <shapr> I do wish IRC had that functionality
08:50:57 <shapr> it would be neat to limit the view to just a subset of people temporarily
08:51:05 <stepcut> shapr: agreed
08:51:14 <shapr> I'd like that especially when I'm trying to follow a category theory discussion that happened while I was afk
08:51:29 <shapr> we could add that to hircules :-)
08:51:54 <shapr> juhp: what's going on with hircules?
08:52:10 <shapr> ginsu has *lots* of useful code in it that would be great as general purpose libraries
08:52:17 * Heffalump would like a Haskell text-mode client
08:52:20 <shapr> I'm particularly interested in his curses binding
08:52:29 <stepcut> shapr: I am looking into basing my AIM library on Stream Processing arrows -- in part because it seems like it might be a good fit, but also, I need to get a good understand of Stream Processing Arrows so I can work on that Unix library ;)
08:52:31 <Heffalump> Igloo has a curses binding too, doesn't he?
08:52:38 <shapr> yes he does
08:52:41 <shapr> and I think dark wrote one also
08:52:47 <shapr> so a meeting of the libs would be in order
08:53:02 <Marvin--> shapr: dosn't that sort of require that users are competent and actually change their "subject" when switching between concurrent discussions?
08:53:11 <shapr> Marvin--: ime, they do
08:53:18 <shapr> gale doesn't have very many users
08:53:29 <shapr> they're centered around a coupla universities mostly
08:53:40 <shapr> I think Dan Egnor wrote Gale
08:53:41 <Marvin--> it sounds painful
08:53:51 <shapr> it's quite cool in many ways
08:53:58 <shapr> I especially like the transparent encryption
08:54:05 <shapr> you can't even connect unless you have a key pair
08:54:09 <Marvin--> well, I guess if you have a client with multiple windows/tabs for subjects it would be manageable
08:54:20 <shapr> you really don't even need that
08:54:27 <shapr> t limits to "thread"
08:54:31 <shapr> a limits to "author"
08:54:36 <shapr> u pops a limit
08:54:43 <shapr> you should try ginsu, it's cool
08:55:57 <Marvin--> but if the idea is that different conversation topics have different subjects you'd want it to be easy to create new subjects
08:56:14 <stepcut> shapr: i am going to eat breakfast, any other questions first?
08:56:40 <Marvin--> or am I thinking of it in a bit too fine-grained way?
08:59:34 <shapr> stepcut: no, thanks
08:59:37 <shapr> greetz hram 
08:59:50 * stepcut goes to breakfast
09:00:07 <shapr> Marvin--: it is easy to create new subjects, the subjects are only convention
09:00:12 <hram> hello. anything new exciting going on?
09:00:49 <shapr> I'm writing something with HaskellDB and WASH that search the haskell mailing lists
09:01:16 <shapr> HaskellDB is really cool
09:01:44 <shapr> the first HAIFA writeup is online
09:01:45 <hram> Ah, I've hear about that (and the NULL "bug"). Any example of a working haskelldb-program. I can't get it to work as it should... (SQLite)
09:01:49 * Marvin-- is playing with implicit parameters
09:01:55 <shapr> HAIFA - http://www.dcs.shef.ac.uk/~u1sf/haifa.html
09:02:16 <shapr> hram: http://shapr.homelinux.net/~shae/ProtoMime.hs and http://shapr.homelinux.net/~shae/ProtoWASH.hs
09:02:45 <shapr> most HaskellDB discussion happens on #haskelldb
09:03:36 <hram> shapr: hm, yet another channel...
09:03:46 <shapr> :-)
09:04:31 <shapr> hoi Ericston 
09:04:38 <Ericston> hoi
09:04:40 <shapr> hram: what's going on with you? anything new and exciting?
09:05:39 <shapr> Ericston: learning Haskell?
09:05:42 <shapr> have questions?
09:05:45 <Ericston> sort of
09:05:49 <hram> shapr: no, nothing new I'm affraid. just poking around with haskelldb (and getting upset!)
09:06:01 <Ericston> I'm just fiddling around
09:06:10 <Ericston> so maybe later :)
09:06:26 <shapr> ok, I can point you to some tutorials and Haskell implementations if you like.
09:07:06 <Ericston> that won't be necessary thanks :)
09:07:22 <shapr> hram: here's my test app: http://shapr.homelinux.net/cgi-bin/wash/Test
09:07:26 <Ericston> can find most of the stuff I need through haskell.org and google
09:07:33 <shapr> it requires %word1% %word2%
09:07:41 <shapr> since I just did foldr over like
09:08:49 <stepcut> hram: there maybe issues with SQLite because SQLite is typeless (it makes everything be a string)
09:08:57 * Marvin-- needs more coffee
09:10:58 * shapr reads docs for runWithHook
09:11:19 <shapr> I just found the WASH haddocks, I really should have checked those first.
09:12:17 <shapr> Ericston: when you do have questions that aren't easily answered from haskell.org and google, feel free to ask here on #haskell
09:13:35 <Ericston> thanks :)
09:14:05 <shapr> hi tooki 
09:14:10 <tooki> hey shapr
09:14:18 <tooki> no german words today ? ;)
09:14:41 <shapr> nah, I spoke with my family yesterday so I feel like using Southern instead
09:14:55 <shapr> howdy stranger
09:14:56 <tooki> mkay
09:15:02 <tooki> howdy
09:15:15 <shapr> welcome to our little corner of the world
09:15:19 <tooki> i applied the gradient-method to solve al sat-problem
09:15:26 <shapr> did it work?
09:15:47 <tooki> it worked for a special kind of problem
09:16:10 <Smerdyakov> The empty problem?
09:16:12 <Smerdyakov> ;D
09:16:19 <tooki> on satlib.org they have a problemset ...
09:16:21 <tooki> lol..
09:16:47 <tooki> a set of graph-problems converted to sat
09:16:50 <shapr> does anyone know if haskell.org is also the mailing list host for all the haskell mailing lists?
09:16:57 <tooki> and the algo works fine only for these
09:18:27 <tooki> but i didnt use haskell for that ;)
09:18:47 <Heffalump> shapr: check the headers of a mailing list post
09:18:52 <tooki> but a computeralgebra-system - some kind of funktional too
09:18:55 <shapr> Heffalump: oh good point!
09:19:51 <tooki> haskell.org seems to be down from my side of the world
09:20:00 <shapr> yes, same here
09:20:11 <shapr> I was hoping it was a network problem, but www.cs.yale.edu still works
09:20:33 <Smerdyakov> That's easy to fix. Just DoS them!
09:20:36 <shapr> dmesg on haskell.org was showing IDE interface errors, so it may be the motherboard
09:20:36 <tooki> is it hosted by the yale-uni ?
09:20:47 <shapr> yes, it's also haskell.cs.yale.edu
09:21:14 <shapr> seems that haskell.org is also the mailing list host
09:21:54 <tooki> if you can do a dmesg on haskell.org, how come you dont know if its the mailing host ?
09:22:18 <shapr> because I don't deal with the mailing lists
09:22:42 <tooki> and the mailingserver isnt a single process ?
09:23:14 <tooki> r u admin or user on haskell.org ?
09:23:28 <shapr> just a user, I maintain the Haskell Wiki
09:23:53 <tooki> hey wiki hey ;)
09:24:01 <shapr> wikis are cool.
09:24:13 <tooki> is haskell.org accessible be all students ?
09:24:29 <shapr> what do you mean?
09:25:03 <tooki> at the uni i was, the computerservers were accessible by all students
09:25:28 <shapr> oh, I don't think haskell.org is accessible by all yale.edu students
09:26:11 <tooki> mkay
09:26:35 <shapr> I'm not sure though, I've never been to Yale.
09:26:47 <tooki> i thought so
09:27:08 <tooki> are there other sites about haskell-stuff ?
09:27:42 <tooki> my first question about haskell today ;)
09:27:46 <shapr> yes, there's also http://haskell.readscheme.org/ , comp.lang.functional on news.google.com, and other stuff.
09:28:20 <tooki> k thx
09:28:21 <shapr> what's your question?
09:28:39 <tooki> you allready answered it
09:28:44 <shapr> oh, ok
09:30:28 <tooki> actually i was looking for docu about OO in Haskell
09:31:08 <Heffalump> you've looked at O'Haskell?
09:31:17 <tooki> address ?
09:31:28 <tooki> i meant link ?
09:31:55 <Heffalump> google works
09:32:01 <tooki> yep
09:32:34 <Igloo> Does anyone know what the recommended way of doing something like select(2) is in Haskell? (I only care about readable FDs)
09:32:59 <hram> The old module Select in hslibs?
09:33:06 <Marvin--> er, what's wrong with using hSelect?
09:33:25 * Igloo would like to avoid hslibs if at all possible
09:33:39 <Igloo> Where is hSelect, Marvin?
09:34:59 <Marvin--> oh
09:35:01 <Marvin--> well it is in hslibs
09:35:12 <Marvin--> I don't think it's been moved/ported/whatever
09:35:26 <hram> Which is quite strange...
09:35:37 <Igloo> Hmm, guess hslibs is the best way forward for now then
09:35:49 <Marvin--> I guess it might behave a bit strange in conjunction with concurrency
09:36:22 <Marvin--> I mean, there's threadWaitRead, but it takes an *Int* rather than a Handle, which kinda ... sucks
09:37:40 <hram> and it provides no multiplexing...
09:37:49 <Igloo> Hmm, is hSelecting on stdin the same thing as selecting on 0?
09:37:53 <Marvin--> wow, Mark King is really showing Ken Doherty how to play
09:38:06 <hram> Igloo: Yes it should be.
09:38:10 <Si\> has anyone written a paper about faking OO with Type Classes?
09:38:18 <Igloo> I guess as long as I never use any buffered IO function it should be at least
09:39:01 <Igloo> Oh, as long as select itself can't cause stuff to be read into the Handle's buffer
09:40:11 <tooki> someone said sometinhg about "multiply dispatching polymorphic functions"
09:40:25 <tooki> thats about faking OO
09:41:22 * Igloo reads the code and decides it looks safe, although there will be lots of pointless conversions between Handles and Fds
09:41:46 <Si\> See one problem that you've got with ever trying to implement a Full Blown XSchema type mapper is you need some form of inheritance
09:41:59 <Si\> and I think the type-class method looks the neatest
09:43:30 <tooki> i guess the "multipl... func..." serves for that, i think you cannot do with just typeclasses
09:44:45 <tooki> for inheritance the super-object could be a member of the deriving object
09:45:36 <tooki> data Heir :: Heir {super :: Super;heir1 :: ...;heir2 :: ....}
09:48:00 <tooki> and the declare a class with methods getField1, getField2 ...
09:48:19 <tooki> and make instances for Super and Heir
09:49:54 <tooki> this way one has to implement the class for each heir
09:50:58 <tooki> too laborious, maybe there's another way
09:52:47 <Si\> maybe you could have some sort of data type Object a which some how encapsulates an actual data-type
09:53:06 <tooki> the state-monad
09:53:32 <tooki> getfield :: State Objecttype Filedtype
09:53:38 <tooki> getfield :: State Objecttype Fieldtype
09:53:48 <shapr> hi Genesis, learning Haskell?
09:54:00 <Genesis> good 'vening
09:55:29 <shapr> bonne nuit
09:55:37 <Genesis> toi aussi
09:55:56 * shapr fights with runWithHook
09:55:58 <tooki> testfunction = do obj <- mkobject;field <- getfield obj;.....
09:57:01 <tooki> testfunction = do field <- getfield;.....
09:57:42 <tooki> and then : testfunction `runState` object
10:00:13 <shapr> Genesis: have any questions?
10:00:25 <Genesis> no question , all is clear
10:01:07 <shapr> ok, feel free to ask questions if you have some
10:01:12 <Genesis> no pb
10:01:12 <Si\> if the accessors are monadic, you could make all the Objects and Fields IORefs
10:01:18 <tooki> all my mind is cleared
10:01:35 <tooki> jk
10:01:38 <Si\> abstracted of course
10:01:54 <tooki> there are STRefs for that purpose
10:02:08 <Si\> or STRefs :)
10:03:19 <tooki> they are just needed if you want to change the field-values of several objects at once
10:03:32 <Igloo> Hmm, 0x00000006 is not a believable value for a CString
10:03:41 <tooki> otherwise they wont be need i guess
10:03:57 <Marvin--> Igloo: not really, no
10:04:19 <tooki> seems like a very ancient string from the boot-time ;)
10:04:38 <Igloo> I can't see anything wrong, unless I shoudln't be giving a foreign import type "Int -> IO CString" though
10:05:57 <tooki> is it short enough to paste here ?
10:08:02 <Marvin--> Igloo: I don't see how that should be a problem
10:09:21 <shapr> ok, I think I understand runWithHook now
10:09:33 <shapr> sort of
10:09:41 <shapr> SyntaxLaptop: greetz!
10:11:19 <Marvin--> hey, look, it's the Ninja
10:12:03 <Igloo> Ah, the Int -> IO Int (and similarly if I use CInts) functions are returning 4 and 5 rather than 0 too
10:14:55 <SyntaxLaptop> y0 shapr
10:17:00 <Igloo> Can someone message me the output of http://urchin.earth.li/~ian/has/ please?
10:17:24 <SyntaxLaptop> gotta run
10:17:25 <SyntaxLaptop> pax
10:18:13 <Igloo> Oh!
10:18:29 <Heffalump> why isn't that darcs pullable? ;-)
10:18:44 <Igloo> I forgot to change the name of the C function, was only changing the Haskell function name
10:19:19 <Igloo> The program it will end up in is pullable  :-)
10:19:52 <Igloo> Right, that's better
11:06:09 * shapr tries to remember to blink while coding
11:06:10 <shapr> ow ow
11:06:23 * Marvin-- laughs at "Firesomething"
11:06:32 <shapr> what's that?
11:06:37 <shapr> oh, on slashdot
11:06:46 <Marvin--> http://www.cosmicat.com/software/firesomething/
11:09:01 <shapr> wow, HaskellDB can give really big type errors :-)
11:10:41 <shapr> oh, I forgot a piece
11:13:52 * shapr swears at WASH's broken urldecoding
11:14:55 * shapr wonders
11:21:26 * shapr boings cheerfully
11:23:37 <norpan> grrr, i can't connect to haskell.org
11:23:44 <Marvin--> join the club
11:24:22 <XTL> Yes. Way to ruin an otherwise good saturday ;)
11:24:35 <XTL> (Well ok, sans the headache)
11:24:40 * Marvin-- has chocolate cake
11:24:42 * Marvin-- is happy
11:26:27 <norpan> i have chocolate chips cookies
11:26:31 <norpan> and alcohol
11:26:35 <shapr> I have elk tacos
11:26:37 <Leimy> glass of merlot here
11:26:47 <Leimy> elk tacos?!?!
11:26:49 <Leimy> cool!
11:26:53 * shapr grins
11:27:04 <Marvin--> that's a big taco
11:27:26 <shapr> it's a normal sized taco, just happens to have elk meat in it.
11:27:34 <shapr> since we have an overabundance
11:27:35 <norpan> a glass of gr√∂nsteds monopole perhaps
11:27:45 <Marvin--> norpan: damn you!
11:28:04 * Marvin-- has neither cognac nor whisky at home :-/
11:28:20 <norpan> come over to my place then
11:28:24 <norpan> i have plenty
11:29:12 * Heffalump has some whisky
11:29:18 <Heffalump> I should drink it
11:29:25 <norpan> anger.net.yale.edu is the last in my mtr tracde to haskell.org, fitting name
11:29:29 <shapr> I have some Sake that Bea recently purchased for me.
11:29:31 * XTL had enough whisky last night
11:29:37 <Leimy> hehe me too
11:29:41 <Leimy> Macallan Scotch
11:29:42 <shapr> but I am unable to build Haskell webapps after drinking Sake.
11:29:42 <Leimy> 12 year
11:29:44 <Leimy> :)
11:29:45 <Leimy> WOOOOT!
11:29:47 <Leimy> hehe
11:29:50 <Marvin--> Macallan is nice
11:30:00 <Leimy> I hope so
11:30:05 <Leimy> the bottle was pricey
11:30:11 <Marvin--> :)
11:30:16 <norpan> i'm out oc macallan
11:30:18 <norpan> of
11:31:58 <norpan> and my wife is out of town
11:32:48 * shapr cackles happily
11:33:07 <norpan> hmmmm, maybe some irish coffee will help
11:33:19 <shapr> yay! I can view emails!
11:33:35 <norpan> shapr: welcome to the last twenty years! :)
11:33:35 <shapr> now to change it so that words are automatically wrapped in percent signs
11:33:45 <shapr> ah but this is purely functional
11:33:50 <norpan> ah
11:33:54 <norpan> purely functional mail
11:34:12 <norpan> would be nice in comparision with the almost disfunctional mail i have now
11:36:47 <shapr> ok, check it out: http://shapr.homelinux.net/cgi-bin/wash/search
11:37:02 <shapr> search terms are just words separated by a string
11:37:05 <shapr> er by a space
11:37:05 <shapr> doh
11:37:20 <shapr> yes, I know it's slow
11:37:39 <shapr> anyways, as soon as haskell.org comes back I'll add support for searching multiple mailing lists
11:38:12 <Ericston> :/
11:39:06 <shapr> you only get to search the 6986 message of the mailing list that aren't MIME
11:39:43 <shapr> though I'll add MIME plaintext support in a bit
11:41:07 <shapr> of course, written entirely in Haskell with WASH-CGI, WASHMail, and HaskellDB
11:42:06 <norpan> of course
11:42:40 <maihem> I'm trying to improve my little state machine implementation (thanks to Marvin-- for previous help), but I've come across a compiler diagnostic that I don't understand: http://rafb.net/paste/results/haZ88426.html
11:45:18 <Marvin--> maihem: the base case for loop is all wrong. If you're out of t:s (i.e the list is empty), why transit at all?
11:46:44 <Marvin--> maihem: isn't the idea of loop that you should produce one e for every t in the list?
11:48:08 <maihem> Marvin--: I want the state machine to be able to be used as a lexer.
11:48:30 <maihem> so it'll only output an e when it has had several t's
11:49:13 <maihem> and if it doesn't match, I want to use the list monad around the state machine to try a different one, thus implement backtracking.
11:49:23 <Marvin--> which is why there's Maybe:s involved, yes, I understand. But surely length (loop s ts) shouldn't be > length ts?
11:50:11 <maihem> if you see transit THE _, it will output a "the" on end of stream
11:50:59 <Marvin--> but that's transit, I'm talking about loop
11:50:59 <maihem> The state machine can have an end state, or keep going forever (as in the example in the code
11:52:19 <Marvin--> anyway, let's analyze the type error
11:53:27 <maihem> I see your point, perhaps I should output on obtaining the 'e'...
11:53:39 <Marvin--> in loop, you call transit first with t (an element of the second argument), and in the second case with a []
11:54:06 <Marvin--> that means first of all that t must be a list type, which means that (t:ts) must have type [[a]] for some type a
11:54:14 <maihem> ah, and my fundep says that for a given s, t will be exactly one type in all cases
11:54:41 <maihem> I'll have to fail for end of list or something.
11:54:46 <maihem> Thanks again!
12:10:32 <_rubix> I hate Data.FiniteMap, Data.IORef and all modules whose functions all contains the name of the module
12:10:56 <norpan> do you really hate them
12:11:02 <norpan> or is it just a bit annoying?
12:11:36 <_rubix> well, I don't know, but I did write my wrappers modules who don't do that
12:11:51 <_rubix> so I can import them "qualified"
12:12:02 <Marvin--> _rubix: it's a consequence of that the default import mode isn't qualified
12:12:13 <_rubix> which do you prefer : IORef.read or readIORef ?
12:12:13 * Marvin-- considers that a design flaw
12:12:17 <Smerdyakov> I think the Haskell module system is primitive and smelly. :P
12:12:20 * _rubix too
12:12:49 * _rubix too thinks qualified should be the default
12:13:13 <Marvin--> qualified import, though, doesn't interact incredibly well with operators
12:13:13 <_rubix> Smerdyakov, I guess you are comparing with ocaml ? :)
12:13:24 <Smerdyakov> _rubix, and Standard ML.
12:14:14 <Igloo> Oh for Haskell 2
12:14:17 <Marvin--> I'm pretty fond of python's module system
12:14:56 <Marvin--> that hierarchical modules have to name their full names in the file is another wart, IMO
12:15:24 <_rubix> Marvin--, operators can be imported unqualified separately
12:15:37 <Marvin--> _rubix: I know, and it's what I usually do, but it's annoying
12:16:28 <_rubix> sure
12:19:42 <shapr> yah, I think we should change that
12:19:50 <Riastradh> If I remember correctly, Python's module system is gross because modules are first-class entities.
12:20:12 <Marvin--> Riastradh: well, it's kind of neat, everything's a namespace
12:20:25 <Smerdyakov> Riastradh, why is that gross?
12:21:23 <shapr> I do wish hierarchical modules didn't require their full name is the file
12:22:02 <Riastradh> Smerdyakov, modules are metadata that describe how to interpret (I use a loose sense of the word; a compiler interprets the code in that sense as well) code, so it simply makes no sense for modules to exist at run-time.
12:22:48 <shapr> any other useful feature requests for a mailing list searcher?
12:23:10 <Marvin--> shapr: links to the archive?
12:23:14 <shapr> I wonder if I could build a thread view without too much trouble
12:23:30 <shapr> Marvin--: I would have done that if the urls weren't offsets from the first message
12:23:42 <Marvin--> oh. ew.
12:23:52 <shapr> at least, that's what it appears to be
12:24:20 <shapr> I expected message-id, since that should be unique
12:24:57 <shapr> while importing the mailman mbox archive, I discovered that some emails have duplicate message-ids, and that some don't have any message-id
12:25:15 <shapr> so, I can see why offset is used.
12:25:22 <Marvin--> ew
12:25:25 <monotonom> MoscowML has first-class modules (or something close) and it is not gross.
12:26:29 <shapr> anyone have mbox files for the other haskell mailing lists?
12:26:42 <shapr> er mailmain mbox archives
12:26:47 <monotonom> Haskell's module system is primitive but it is sufficient.  There is always typeclass for advanced abstractions.
12:26:54 <Riastradh> monotonom, oh?  Do you have a link to a document about it?
12:27:07 <Igloo> shapr: Is it urgent? Can't you wait until you can get them from the authoritative source?
12:27:17 <shapr> Igloo: I can wait
12:27:19 <Riastradh> If it's just the regular SML module system, then you're incorrect: structures & signatures are _not_ first-class.
12:27:26 <shapr> just interested in adding multi-list support
12:28:01 <shapr> I guess I could cut the haskell@haskell.org mbox in half and pretend it's two different lists
12:31:05 <monotonom> moscow ml's module system is a proper superset of sml's
12:33:31 <Riastradh> monotonom, do you have a link to a document describing what it extends SML's module system with?
12:33:44 <monotonom> http://www.dina.kvl.dk/~sestoft/mosml/manual.pdf (or ps) page 20.
12:37:26 <monotonom> It is *wicked*.  You can keep two implementations of a sig around.  Then you select which one to actually use when the program is running. (page 23 example)
12:40:02 <monotonom> I want www.haskll.org. I want to upgrade to ghc 6.2.x and play with templates and generics.
12:40:06 * monotonom cries
12:40:23 <shapr> which platform?
12:40:34 <shapr> you may be able to borrow an install archives from someone here
12:40:38 <monotonom> redhat 9
12:40:38 <XTL> No mirrors? No vendor packages?
12:40:49 <shapr> oh, you should ask juhp 
12:41:07 <shapr> hm, I thought ghc 6.2.1 rpms were in the topic
12:41:40 <monotonom> No you people are debian fans.
12:43:12 <Marvin--> :)
12:43:36 <Marvin--> you can get a ghc deb and unpack it :)
12:44:01 <Riastradh> monotonom, and these run-time structures don't mutilate complation?
12:44:11 <XTL> Wouldn't it be nice if someone lobbied ghc into freshrpms, dag, fedora or one of those projects.
12:44:39 * Igloo humms the Debian theme tune
12:45:36 * XTL hums the Octane swing and wishes he never heard it
12:45:44 <shapr> oh, http://haskell.org/~petersen/rpms/
12:45:46 <shapr> foo
12:46:19 <Cale> shapr: whatever happened to that gforge project I remember you were working on?
12:46:43 <monotonom> Um http://haskell.org/~petersen/rpms/ is begging the question :)
12:47:06 <shapr> Simon^2, and the haskell.org maintainers didn't think it was any more useful than sourceforge.net
12:47:19 <shapr> so I took it down
12:47:34 <shapr> I'm beginning to think I should bring it back.
12:47:35 <Smerdyakov> shapr, gosh, and you yelled at me for suggesting the same thing. :P
12:48:01 <monotonom> The first person to give a good advice is always penalized.
12:48:18 * Si\ wonders if he is Simon^4 or Simon^5...
12:48:33 <shapr> if you wrote Haskell code, I would be more likely to listen to your community recommendations
12:48:48 <Smerdyakov> OK, good. The world needs more tribalism. Let's keep that up.
12:49:09 <monotonom> (Because the recipient does not recognize it as good advice until it is repeated many times by many people later.)
12:49:21 <Heffalump> what did you suggest?
12:49:25 <Heffalump> Si\: there's only one of you :-)
12:49:30 <monotonom> (By which point the recipient has forgotten to credit the first advisor.)
12:49:44 <Smerdyakov> Heffalump, I said I didn't see why a personal Sourceforge would be better than the One Big One.
12:50:01 <Heffalump> oh, right, you were on that side
12:50:10 * Heffalump thinks the one big one is too inflexible and too unreliable
12:50:16 <shapr> yes, I think so too
12:50:28 <Cale> Sourceforge is generally irritating to use.
12:50:37 <Heffalump> it's a bit of a monoculture, too
12:50:39 <shapr> and a haskell oriented sourceforge wouldn't have advertising.
12:50:39 <Smerdyakov> I don't think it's ever been irritating for me recently.
12:50:56 <Heffalump> it's rather like livejournal
12:51:04 <Cale> It takes a million steps just to download a file while you're shunted around repeatedly. :)
12:51:15 <shapr> yah, file downloading is another irritating part
12:51:16 <Heffalump> yeah
12:51:22 <monotonom> I get this experience first-hand in #math on efnet.  Someone would ask "how do you do <insert integral>?".  I would suggest "sub u=sin x".  He wouldn't listen.  Then another person would suggest "sub u=sin x", and he would thank him --- not me!
12:51:28 * Marvin-- thinks file *releasing* is annoying too :)
12:51:51 <Si\> so I'm guessing that SPJ=Simon^1, SM=Simon^2, probably Simon Thompson is Simon^3
12:52:03 <shapr> the most irritating part for me is that there's so much traffic, the cvs servers are usually between troublesome and nonfunctional
12:52:07 <Heffalump> no, Simon^2 is SPJ *and* SM
12:52:13 <Marvin--> Si\: actually, by Simon^2 we mean the two Simons
12:52:22 <Si\> ah
12:52:29 <Cale> Simon^2 expands to Simon Simon.
12:52:47 <Marvin--> if you want an enumeration of Simons, Simon_1, Simon_2, ... would be more appropriate
12:53:10 <shapr> alternatively, we could rewrite gforge with WASH or HAIFA
12:53:17 * shapr grins evilly
12:53:20 <Marvin--> yay, NIH
12:53:27 <shapr> yes, exactly
12:54:29 <shapr> well, I'll reinstall gforge and see if it's easy to get it running again.
12:55:49 <shapr> hi anduril1 
12:57:45 <shapr> dennisb: are you here? I have a Haskell + PostgreSQL question.
13:02:12 <anduril1> hello shapr
13:02:21 <shapr> anduril1: how's code?
13:02:37 <anduril1> pretty good
13:02:48 <shapr> written anything cool lately?
13:03:13 <anduril1> not really
13:03:27 <shapr> in many cases, working code is cool code.
13:03:34 <anduril1> I've been too busy writing (gag) C++ code for my data structures class
13:03:55 <shapr> that sounds exciting
13:04:20 <anduril1> I can't imagine why anybody would write a BST in a non functional language, its just ugly
13:05:26 <shapr> FP is beautiful to me
13:06:22 <tooki> wots BST ?
13:06:32 <anduril1> a Binary Search Tree
13:52:24 <shapr> WASH's execution arguments are escaped by the shell
13:52:24 <shapr> hm
13:52:57 <shapr> aha
13:55:50 <shapr> is there a standard shell unescape string function?
13:57:54 <shapr> g'day clausen 
13:58:00 <clausen> hi shapr
13:58:37 <shapr> what's going on?
13:59:25 <clausen> lots of things on
13:59:39 <clausen> rewriting my paper for submission to another conference (got rejected first time, keep trying...)
13:59:41 <clausen> (standard game)
14:00:42 <Marvin--> hey clausen
14:00:47 <clausen> hi Marvin--
14:00:53 <Marvin--> what's your paper on?
14:00:53 <shapr> I've heard it requires persistence and hard work to get academic papers published.
14:01:06 <clausen> yep
14:01:21 <clausen> my supervisor says "if you write a perfect paper, you have a 50% chance fo getting it accepted"
14:01:44 <clausen> I got 3 peer reviews
14:01:48 <clausen> 1 liked my paper a lot
14:01:56 <clausen> 1 thought it was good, but irrelevant to the conference
14:01:59 <clausen> 1 disliked it a lot
14:02:01 <Marvin--> heh
14:02:05 <clausen> it's all luck of the draw!
14:04:13 <shapr> is there an elegant way to replace several different escapes in a string ["\$","\<","\>"] with their unescapes? ["$","<",">"] 
14:04:14 <Marvin--> I'm going to write my first paper during spring and submit it to HW
14:04:21 * Marvin-- hopes he gets lucky :)
14:04:27 <clausen> Marvin--: good luck!
14:05:59 <Heffalump> shapr: map show or map read ?
14:09:35 <Marvin--> clausen: you didn't answer my question :)
14:10:00 <clausen> oh, sorry
14:10:08 <clausen> a cut down version of my thesis:
14:10:17 <clausen> members.optusnet.com.au/clausen/reputation/rep-cost-attack.pdf
14:11:13 <clausen> in the past, reputation systems have been mostly measured by social simulations
14:11:21 <clausen> (measuring how much cooperation and defection occurs)
14:11:35 <clausen> I propose an alternative measure: the cost of manipulating the reputation system
14:12:03 <clausen> then, I work towards deriving the cost of attack of Google's PageRank
14:13:18 <Marvin--> interesting
14:13:24 <Marvin--> what conference did you submit it to?
14:14:44 <clausen> AAMAS04 (Autonomous Agents and Multi-Agent Systems)
14:16:54 <clausen> a big part of the problem is that I didn't have enough space to "cover all the bases"
14:18:05 <Marvin--> heh
14:23:52 <Riastradh> #emacs is arguing about introductions to Haskell!
14:24:01 <shapr> wow
14:24:16 <shapr> dark: hoi!
14:24:43 <Riastradh> Actually, there was argument about it, but I won the argument and now a couple people are looking for simple, straightforward introductions to the general semantics of Haskell.
14:25:18 * Heffalump hands shapr some subtlety :-)
14:25:29 <shapr> bah, subtlety is for other people.
14:25:58 <Riastradh> (mathrick, is just looking for one, and edrx was complaining about the fact that there were none that described the underlying semantics, except those that explained efficient implementation details more than semantics)
14:26:12 <shapr> hey tom!
14:26:14 <shapr> what's going on?
14:26:16 <tmoertel> hi, shapr!
14:26:21 <tmoertel> not much
14:26:31 <tmoertel> I just finished reading "scrap more boilerplate"  great
14:26:49 <shapr> oh, check out my email searchy: http://shapr.homelinux.net/cgi-bin/wash/search
14:26:51 <tmoertel> I've been playing around w/ WASH/CGI, too.  Also very cool.
14:27:03 <shapr> me too!
14:27:46 <tmoertel> shapr: the email searchy is cool
14:27:54 <shapr> thanks :-)
14:28:17 <tmoertel> It look like I get to use Haskell on a paying project.  woohoo!
14:28:21 <Marvin--> there's a "scra more boilerplate"? yay!
14:28:24 <shapr> wow cool!
14:28:32 <shapr> what kind of project?
14:29:11 <tmoertel> shapr: the short version is that a group of genetics folks need a way to track the boatload of data that their studies generate
14:29:24 <shapr> ah
14:29:44 <tmoertel> there's a bunch of "interesting" contraints that apply with regard to data privacy, cross-university projects, and so forth
14:30:08 <tmoertel> I'm going to use haskell to build an executable specification for the data-management portion
14:30:28 <Marvin--> "to accomplish an additional range of applications. This includes ... test-data generation ..."
14:30:35 <Marvin--> cool, I've been thinking of that exact application as well
14:32:59 <tmoertel> shapr: do you use CGI or CGIXX in your WASH programs?
14:33:43 <shapr> not that I'm aware of
14:33:54 <shapr> I've just started using WASH, so I don't have much to say about it.
14:34:02 <tmoertel> shapr: I mean, do you import CGI, or do you import CGIXX ?
14:34:17 <tmoertel> (CGI is H98; CGIXX requires -fglasgow-exts)
14:35:01 <shapr> HaskellDB requires fundeps, so I have no reason to prefer CGI
14:35:46 <shapr> plus CGIXX wouldn't give these irritating path clashes
14:36:10 <tmoertel> "path clashes"?  what do you mean?
14:37:25 <shapr> Network.CGI was clashing because of some combination of my -i and -package options
14:37:50 <shapr> have you seen HaskellDB?
14:38:06 <shapr> oh, I think I mentioned it to you recently
14:38:34 <tmoertel> I haven't used it yet, but I may just get to for the upcoming project.
14:38:38 <tmoertel> What are your thoughts on it?
14:39:32 <shapr> In my experience, manually generating SQL query strings is more error-prone that manually managing memory.
14:39:55 <tmoertel> true, especially w/ escaping
14:40:15 <shapr> even when you do a good job with that, you still might try to add a string to a number, etc
14:40:26 <shapr> HaskellDB is designed to get around all that
14:40:56 <shapr> part of my email searchy is: restrict (foldr1 (.&&.) (map (like $ (fromNull (constant "") (t!body))) (map constant terms)))
14:41:48 * tmoertel pastes into emacs for better viewing
14:42:03 <shapr> in short, folding like over a list of terms
14:43:01 <shapr> I've written the beginnings of a tutorial here: http://www.scannedinavian.org/AvianWiki/HaskellDbTutorial
14:43:54 <tmoertel> I was just reading that  ;-)
14:44:03 <shapr> ok :-)
14:44:49 <shapr> I do think the essence of a database is set theory, and HaskellDB lets me get closer to that essence with less accidental difficulty
14:45:26 <tmoertel> I take it that "ourtable", and "ourkey" are defined somewhere else?
14:45:44 <tmoertel> Generated automagically from the SQL DDL via a preprocessor?
14:45:52 <shapr> yup, DBDirect
14:46:28 <shapr> though the HaskellDB guys are working on something where you specify the structure with HaskellDB itself, and it generates the setup for whatever backend you're using
14:46:43 <tmoertel> that would be great
14:46:45 <Heffalump> Igloo and I had a cunning idea for an IOHCC entry. I wonder what it was.
14:46:47 <shapr> I'd like that because then I could be truly backend independent
14:46:55 <Heffalump> (Igloo, if you remember don't tell the channel ;-)
14:47:05 <shapr> Heffalump: if I have my way, you'll be on the next jurors panel
14:47:18 <Heffalump> why me? :-)
14:47:33 <Heffalump> if we have a decent entry, I'd rather do that than be a juror
14:47:41 <shapr> yah, that what's everyone says :-)
14:47:46 <Heffalump> I could probably be persuaded to be a juror otherwise.
14:47:57 <Heffalump> or if we think there'll be plenty of good entries anyway
14:48:19 <shapr> probably would be more good entries if it happened on a regular and prescheduled basis
14:49:56 <hram> IOHCC? Something like ioccc? (you horrible, horrible people!)
14:50:20 <shapr> in summary, I think HaskellDB is the greatest thing to happen to databases since IBM's System R
14:50:50 * tmoertel puts HaskellDB on his "must use" list
14:50:52 <tmoertel> shapr: thanks!
14:50:55 <shapr> :-)
14:51:07 * tmoertel is hungry and can smell the scent of food -- delicious food -- wafting in from the window
14:51:17 * tmoertel hears his stomach growl
14:51:27 <Cale> Me too.
14:51:45 <shapr> I'm getting sleepy... but I want to add just one more feature to my email searchy
14:51:48 <Cale> I think I'm going to order some Chinese food.
14:52:09 * XTL starts reading about HaskellDB
14:53:13 <monotonom> shapr: do you use hugs under haskelldb?
14:53:25 <shapr> no, I use GHC
14:53:52 <monotonom> How can you do that? I thought haskelldb required trex, something only hugs provides.
14:53:58 <shapr> it did
14:54:02 * Heffalump gets reminded of the evil idea
14:54:20 <shapr> but bring, viblo, forester, and the rest of the team at chalmers ported HaskellDB to GHC
14:54:35 <shapr> now it uses functional dependencies and some other nifty stuff
14:55:01 <monotonom> Ah then I will look at the haskelldb home page again. Thanks.
14:55:02 <shapr> BoundedList handles varchar(10) and other limited size lists
14:55:10 <shapr> it's quite nifty
14:56:34 <shapr> ah, word from the haskell.org admins, the box died, they think it's a bad disk.
14:56:46 <shapr> they're working on it.
14:57:49 <hram> are the lists down too?
14:58:07 <shapr> I think haskell.org is also the list host
14:58:54 * tmoertel must walk the dog and get some food ...
14:59:27 <shapr> I hope they have backups, I want those mailman archives for my searchy
14:59:58 <shapr> tmoertel: I'd love to hear more about your genetic searchy when you have info you can share.
15:19:21 <Marvin--> I really like this gmap stuff
15:19:49 <Heffalump> how does gmap differ from fmap?
15:20:48 <Marvin--> it's generic programming
15:20:58 <Heffalump> oh, using GH?
15:21:38 <Marvin--> no, I think it's implemented fully using type classes and type safe casting
15:22:37 <Marvin--> for example, I have a function in my program that turns case expressions into let expressions
15:22:51 <monotonom> I think I am beginning to get the gist of the trex-free incarnation of haskelldb.  It looks like what Norman Ramsey does to embed Lua into SML.
15:23:40 <Marvin--> caseToLet = everywhere (mkT f) where { f (ECase e alts) = ELet [DFun "f" alts] (EVar "f" `EApp` e) ; f e = e }
15:24:23 <dark> shapr, hello :)
15:24:23 <Marvin--> mkT :: (Typeable a, Typeable b) => (a -> a) -> b -> b
15:24:34 <shapr> dark: hiii!
15:24:40 <shapr> dark: did you get my email?
15:24:47 <dark> shapr: Not sure.. when did you send it?
15:24:58 <shapr> um, about an hour ago
15:25:17 <dark> Then probably not yet :)
15:26:12 <monotonom> Hahaah the haskelldb api doc says "maintainer: dp03-7@..." 
15:26:36 <Marvin--> monotonom: and?
15:26:40 <shapr> just generally wondering, how's your game, are you going to pick up any of your Haskell projects again, that sort of thing.
15:26:55 <monotonom> Don't you find dp03-7 a bit, um, disposable?
15:27:47 <Marvin--> I'm guessing that it stands for "D Project, year 2003, group 7" so it's not likely to be reused for something else any time soon
15:28:13 <monotonom> yeah but it's a bit inhuman, like calling oneself R2D2.
15:28:28 <dark> shapr: I might blow the dust off :)
15:28:36 <Marvin--> I don't see how it's more inhuman than libraries@haskell.org
15:29:08 <shapr> dark: parts of your haSDL code are being used in hOp
15:29:17 <Marvin--> yay, code abuse
15:29:23 <Marvin--> hi dark :)
15:29:38 <shapr> dark: http://etudiants.insia.org/~jbobbio/hOp/
15:29:45 <dark> Nice :)
15:30:25 <dark> Hmm I don't see which parts could possibly be useful there :)
15:32:10 <shapr> do you still play A Tale in the Desert?
15:32:14 <dark> Yes...
15:32:22 <dark> It's responsible for much of my absence here :)
15:32:24 <dark> Bad, bad shapr.
15:32:39 <shapr> heh, oops
15:33:16 <Marvin--> wow, wonder if I bored Heff to death with the gmap stuff :)
15:33:18 <shapr> hOp is good meme, and so is HaskellDB
15:33:44 <dark> HaskellDB sounds nice.
15:33:57 <dark> I might have to make my game use it :)
15:34:02 <shapr> how's the game?
15:34:06 <dark> Dusty...
15:34:17 <dark> I'll probably want to rewrite it when I look at it again :)
15:34:39 <Marvin--> the problem with old code is that it's invariably *ugly* :)
15:34:55 <dark> Yeah I wonder why new code doesn't have that problem.
15:34:56 <shapr> I'd like to get into the Data.Generics stuff
15:35:20 <Marvin--> I can't ever remember a time when I looked back at any of my old code and said "wow, this is really elegant"
15:35:28 <Marvin--> shapr: it's nifty!
15:35:45 <dark> That's probably because the stuff you thought was really elegant when you wrote it was actually a fiendish hack :)
15:35:53 <Marvin--> there is that
15:36:07 <dark> And when you lose the context it stops being hackish and becomes just fiendish.
15:38:20 <dark> shapr: One good effect of ATITD is that I got to see the power of wiki :)
15:38:22 <dark> I'm a convert now.
15:38:35 <shapr> wikis are powerful
15:38:40 <shapr> hey, have you seen darcs?
15:38:44 <dark> Yeah.
15:38:48 <dark> I've played with it a little.
15:38:51 <shapr> have you seen darcs applied to wiki?
15:38:54 <dark> No :)
15:39:03 <shapr> do you use emacs?
15:39:06 <dark> Nope.
15:39:14 <shapr> well
15:39:20 <dark> Well, sometimes, when nvi is too stupid to allow newlines in a replacement pattern.
15:39:40 <shapr> darcs get http://www.ScannedInAvian.org/repos/wikiwiki
15:39:44 <Marvin--> shapr: I'm only sort of in the beginning of understanding it, I'm using the everywhere/everything combinators to good effect, but I haven't really gone into the deeper details of gmap and gfold and the other stuff in the Data class
15:40:07 <shapr> imho, darcs is gnutella applied to cvs
15:40:12 <shapr> hey stepcut 
15:40:26 <Marvin--> shapr: the distributed repo idea isn't new though
15:41:03 <shapr> true, but I prefer the darcs implementation of that idea above the others I've seen
15:41:22 <Marvin--> it was fun to read this new paper, one of their applications was one I've been thinking of myself - generating test data
15:41:32 <shapr> rumor has it that haskell.org will be back up on monday
15:41:48 <Marvin--> you could basically combine quickcheck and gmap to have everything that GAST has directly
15:42:37 <shapr> what's GAST?
15:42:48 <Marvin--> Generic Automated Software Testing
15:43:02 <Marvin--> it's a QC-like library for Clean that uses generic programming instead of random generation
15:43:25 * shapr thinks about that
15:43:34 <shapr> what's the advantage of GAST?
15:43:34 <Marvin--> it's a neat idea but I wasn't all that impressed by it
15:43:48 <Marvin--> well, you don't have to write generators
15:43:59 <Marvin--> the downside is ... well, you can't write generators
15:44:50 <shapr> oh
15:45:01 <shapr> so, have you tried it?
15:45:04 <shapr> gmap + QC?
15:45:36 <Marvin--> Koen and I aren't convinced that GAST is really feasible for complicated data structures, it seems like you'll just test mostly uninteresting values
15:45:51 <Marvin--> no, not yet
15:45:54 <shapr> yah, I agree
15:46:20 <shapr> on the other hand, I think generators cover up the checks for handling illegal inputs
15:46:27 <Marvin--> you have the mostly uninteresting values problem with QC too, but at least you can improve your generators to work around it
15:46:55 <Marvin--> take the ordered lists problem
15:47:15 <shapr> I think anti-tests are important too, mostly because of the Oulu team that recently found the hole in ASN.1
15:47:56 <Marvin--> what do you mean cover up the checks for handling illegal inputs?
15:48:28 <shapr> unit tests are usually designed to check that correct inputs give correct results
15:48:55 <shapr> you can make unit tests that check that incorrect inputs always give sane error results, but most people don't
15:49:01 <Marvin--> basically, the theory behind QC is that we pick N random values of a data type and test for them, whereas the theory behind GAST seems to be to take the N "smallest" values (which isn't quite true, but almost)
15:49:03 <shapr> so it's not really about QC, it's just a testing culture thing
15:49:12 <Marvin--> ah
15:50:21 <Marvin--> anyway, combining random picking + generic generation would, I think, make it a *lot* easier to write generators
15:50:26 <shapr> yah, I agree
15:50:30 <Marvin--> but still be powerful than GAST
15:51:01 <shapr> as I understand it, you're saying that I wouldn't have to write a generator for "data Seasons = Winter | Summer | Spring | Fall" if I didn't want to, right?
15:51:21 <Marvin--> writing good generators is quite hard, you have to make sure you don't generate too many trivial values and you have to make sure that the generator terminates at all (!)
15:52:31 <Marvin--> theoretically, you'd be able to replace all generators with Int generators, since you could write a generic function that makes a lazy list of all possible values of a data type
15:53:07 <Marvin--> intriguing, I must discuss this with Koen
15:53:10 <shapr> ok, I do understand what you're saying then
15:54:26 <shapr> Marvin--: I think the newly written C-- backend would be really good test of that approach.
15:55:09 <shapr> I'd guess it has a lot of existing complex recursive datatypes that would make it a pain to write custom generators for all of them
15:55:34 <shapr> and that using gmap and a few tuned generators would be much easier.
15:55:48 <shapr> and it'd improve GHC :-)
15:55:54 <shapr> I have wondered why GHC doesn't use QC
15:56:27 <Marvin--> well, L√§mmel and SPJ already mention this in the gmap2 paper, but only in passing so it's unclear how much they've played with it
15:59:26 * Marvin-- copies code from the paper into a source file
15:59:32 <Marvin--> > genUpTo 3 :: [[Bool]]
15:59:32 <Marvin--> [[],[False],[False,False],[False,True],[True],[True,False],[True,True]]
15:59:40 <shapr> what's the url to the paper?
15:59:48 <Marvin--> http://www.cs.vu.nl/boilerplate/#papers
16:00:19 <shapr> thanks
16:01:58 <Marvin--> so, *theoretically*, you should be able to say instance Data a => Arbitrary a where arbitrary = sized $ \n -> elements (genUpTo n)
16:03:41 * Marvin-- ponders putting this to the test with Language.Haskell.Syntax
16:03:55 <Marvin--> or is that too evil?
16:04:01 <shapr> I'm still reading
16:04:03 <shapr> and I'm getting sleepy
16:04:09 <shapr> so I may have to just ask you tomorrow.
16:04:40 <Marvin--> this won't work for ints though
16:04:57 <Marvin--> I won't be here all that much tomorrow though, D&D session :)
16:05:04 <shapr> oh
16:06:29 <Marvin--> No instance for `Data ()'
16:06:31 <Marvin--> !
16:06:36 <Marvin--> how did they miss that one?
16:14:21 <Marvin--> *** Exception: Prelude.(!!): index too large
16:14:23 * Marvin-- swears
16:14:40 <Marvin--> it's so nice to know *where*
16:14:47 <Marvin--> this is one of the few things that I dislike about Haskell
16:14:55 <Marvin--> the error reporting sucks
16:17:03 <Marvin--> I don't even know where to *begin* to look for this error :)
16:17:37 <_rubix> well, grep error *.hs :)
16:17:45 <_rubix> no
16:19:40 <Marvin--> I'm wondering if the elements generator is broken
16:24:32 <Lunar^> dark: I took all key related datatypes
16:24:43 <Lunar^> dark: They're quite nice designed
16:26:43 * Igloo finally gets my Haskell code to about the same level as my C code, but with a slightly shinier hcurses into the bargain
16:27:15 <Marvin--> ahh. damn. empty lists
16:27:53 <Lunar^> Igloo: which kind of level ?
16:28:21 * Marvin-- ponders how to make this work for Ints
16:28:23 <Igloo> Not a particularly high one  :-)
16:29:48 <Marvin--> maybe I should implement some AVL trees and see how this works out
16:30:08 <Lunar^> Igloo: uhh.. Haskell can go really down, or I'm really loosing my time :)
16:30:14 <Marvin--> maybe I should wait until tomorrow ;-)
16:30:49 <Lunar^> Marvin--: +RTS -xc ?
16:31:15 <Lunar^> Marvin--: Now that with GHC 6.2.1 we have -debug compiling option it's quite easy to do this actually
16:31:27 <Marvin--> Lunar^: point
16:31:35 <Marvin--> I found the bug, but I'll try to remember it in the future :)
16:33:11 <Marvin--> well, after this little session of wild experimentation, I'm off to bed
17:13:44 <dennisb> shapr: the index row size in postgresql can only be changed by altering the block size
18:42:47 * stepcut reads about 'Uniform Capitalization Rules'
23:56:57 <Cale> It's funny - I've had the Haskell report and GHC documentation on my machine for a long time, but I'd forgot that I even had it up until haskell.org went down.
