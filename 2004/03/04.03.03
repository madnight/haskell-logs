00:55:09 <shapr> blackdog: wassup?
00:56:39 <shapr> hey darius- 
00:57:07 * shapr boings
00:57:11 <shapr> good morning #haskell!
01:12:55 <Lunar^> Hi shapr 
01:17:48 <liiwi> sproing
01:19:22 <shapr> hiya!
01:19:54 <darius-> hey shapr.  i forgot about this window for a bit.
01:41:29 <Maddas> hm
01:41:46 <Maddas> 354224848179261915075
01:41:58 <shapr> 42!
01:42:06 <Maddas> My number is more powerful :-)
01:42:29 <shapr> my number is more agile than your number
01:42:39 <Maddas> An larger too, probably!
01:42:44 <Maddas> and, even.
01:42:47 <darius-> 17
01:42:59 <Marvin--> don't make me come and do a number on you
01:43:04 <shapr> oy
01:43:14 <Marvin--> vey!
01:43:19 <shapr> divided we fall, multiplied we stand
01:43:22 <Maddas> That was fib 100, by the way!
01:43:29 <Maddas> shapr: heh
01:43:33 <Marvin--> Maddas: yes, I know
01:43:52 * Maddas randomly pokes eyes
01:43:58 <Marvin--> and no, I don't take a perverse pleasure in remembering such numbers
01:44:04 <Maddas> Why? :-(
01:44:10 <Maddas> (Why not, that is)
01:44:44 <Marvin--> I simply remember it because of the discussions over whether a doubly recursive fib 100 would be faster in perl than in haskell :)
01:45:00 <Maddas> haha
01:45:08 <Maddas> The whole number or just the few digits?
01:45:09 <darius-> was it?
01:45:38 <Maddas> s/few/first few/
01:45:54 <darius-> well, with a smaller argument
01:46:26 <Marvin--> Maddas: the first few, last few and the general length, I guess I should've said "yes, that's what I would've guessed", but "yes, I know" looked more impressive ;)
01:46:59 <Maddas> Hah, ok. 
01:47:59 * Marvin-- ponders finding a mirror and practicing his nose twitching skills
01:49:01 * Maddas watches Marvin-- 
01:50:36 <Marvin--> Maddas: my D&D character has turned into a wererat
01:50:43 <Maddas> Heh
01:50:59 <Maddas> Marvin--: Are there any cats around?
01:51:06 <Marvin--> god, I hope not
01:51:19 <Maddas> Good, I'm allergic to cats!
01:51:34 <Maddas> Marvin--: Who are you playing D&D with, then?
01:52:24 <Marvin--> Maddas: a bunch of friends and fellow students here in Gothenburg
01:52:36 <Maddas> Cool
01:55:06 <Marvin--> we've been fighting wererats for a few sessions, and I suggested having me contract lycantrophy to the GM as a step on the way to kill off my character in a dramatic way (I want to play a wizard instead, we badly need one), though I still don't know how this'll turn out
01:55:28 <Marvin--> at least I'm the only one *aware* of being a lycantrophe so far, so I guess he can fudge his rolls in any direction he likes
01:56:36 <Maddas> Oh, the others don't know (yet) that you are a wererat?
01:56:56 <Maddas> And what character were you before?
01:58:10 <Marvin--> all they know is that I disappeared from my room in the middle of the night, they assumed I had been taken away by our enemies and went looking for me.. of course, I woke up in the morning in my bed and when they got back they were mightily annoyed about that :)
01:58:47 <Maddas> Heh
01:58:47 <Marvin--> I've been playing a frontline fighter, but I don't really know what to do with him and the party has no lack of fighters (having two sturdy clerics, a paladin, a monk and a rogue/ranger), but we have a serious lack of arcane magic
01:59:11 <Maddas> So are you going to proceed to bite all your people to transform them into wererats too?
02:00:13 <Marvin--> no, no, first of all, being an afflicted lycantrophe, I have no control over the shapechanging, and second of all, we just passed full moon, so there won't be any involuntary changing either
02:00:45 <Maddas> Oh, ok
02:00:52 <Marvin--> second of all, since I'm aware of the condition, I would keep my identity even when shapechanged, and only forcibly change alignment when I fail some sort of will save or whatever, I leave the technical details to the GM :)
02:00:55 <Maddas> (I never played D&D, as you might have noticed)
02:01:03 <Maddas> heh
02:01:24 <Marvin--> well, this is my first time too, I'm an experienced roleplayer, but it's the first time with D&D
02:01:30 <Marvin--> it's hella-complicated
02:01:43 <Maddas> So you are basically hoping that somebody stands on you while you are a wererat so you can start a new character? :-)
02:01:55 <Marvin--> sort of, yes ;)
02:02:57 <Marvin--> if it was a normal situation, I could just "retire" him, have him leave on his own accord, but the problem is that he has an intelligent sword that's possessed him and it's the party's most powerful and valuable item that it kinda sucks to have the party lose it just because I want to play another character
02:03:10 <Marvin--> having him killed solves that
02:03:25 <Maddas> Ah, I see
02:03:49 <Maddas> What kind of wizard do you plan to be? 
02:03:49 <Marvin--> the intelligent sword is an additional complication, of course, since they really really dislike their owners changing alignment... so.. it could be fun :)
02:03:56 <Maddas> haha
02:04:38 <Marvin--> next time I take damage in a fight, there's a chance I shapeshift involuntarily (since I cannot control it), the sword is bound to be mightily pissed by that... oh well :)
02:05:26 <Maddas> Sounds like lots of fun :)
02:05:33 <Marvin--> could be, could be
02:05:49 <Maddas> The whole D&D thing, I mean.
02:05:53 <Marvin--> oh, yeah
02:06:02 <Marvin--> I've really missed having a steady roleplaying group
02:06:21 <Marvin--> even though I'm not particularly fond of level-and-class-based systems like D&D
02:07:49 <ham[mer]> hiho
02:08:18 <Maddas> hi
02:09:12 <Marvin--> I sure hope the GM isn't going to turn more of the party into lycantrophes, because it's hard as *hell* to cure
02:09:47 <ham[mer]> ?
02:09:51 <ham[mer]> what GM?
02:10:11 <shapr> hi ham[mer] 
02:10:27 <Maddas> Gamemaster
02:10:38 <ham[mer]> i know :) but what game and where? :)
02:10:52 <Maddas> D&D, Gothenburg
02:10:53 <Marvin--> the D&D game I play in
02:10:55 <Maddas> :-)
02:11:04 <shapr> gothenburg, yay!
02:11:13 <ham[mer]> ah PnP in real life ?
02:11:14 <shapr> that's a really weird word
02:11:24 <Maddas> heh
02:11:40 <Maddas> shapr: Why?
02:11:44 <shapr> everyone should say göteborg
02:11:45 <Marvin--> uh. yeah. Pen and paper. Real life.
02:11:54 <ham[mer]> why dont you play nwn?
02:11:57 <shapr> it's like munich versuse muenchen I guess
02:11:58 <Maddas> haha
02:12:00 <Marvin--> because nwn sucks
02:12:12 <Maddas> shapr: yeah, English names are just different
02:12:17 <ham[mer]> Marvin--: ?
02:12:43 <Marvin--> pen and paper & real life is the only form of roleplaying I'm interested in, the social part of it is equally important
02:12:56 <ham[mer]> what line did i had to add again to get mouse wheel in the xf86config?
02:13:15 <Marvin--> Option		"ZAxisMapping"		"4 5"
02:13:17 <Marvin--> I think
02:13:18 <ham[mer]> yeah if you are lucky and know ppl that wanna play and all
02:13:18 <Maddas> #haskell -- where there is no such thing as off-topic! :)
02:13:43 <Maddas> yeah, that sounds right ,Marvin-- 
02:13:55 <shapr> well, we could try some on-topic stuff
02:13:58 <shapr> ok, here we go
02:14:00 <Marvin--> yeah
02:14:04 <ham[mer]> bbs
02:14:07 <Marvin--> shapr: did you finish reading my draft? :)
02:14:11 <shapr> whoops, no
02:14:24 <shapr> I have an evil plan for world domination
02:14:28 <darius-> yay!
02:14:30 * Marvin-- does evil things to shapr in an on topic way
02:14:48 <shapr> actually, it's just a plan for a web application server written in Haskell
02:14:59 <Maddas> That's already a first step to world domination!
02:15:03 <shapr> right!
02:15:46 <darius-> enterprise haskellbeans(TM)
02:15:50 <shapr> ooh
02:16:01 <shapr> I think we should renamed monads chicks
02:16:05 <shapr> er "chickens"
02:16:10 <shapr> then we can have curried chicken
02:16:11 <ham> bk
02:16:14 <shapr> darcs!
02:16:27 <Marvin--> what's wrong with curried chicks?
02:16:32 <Maddas> haha
02:16:33 <shapr> hm, good point
02:16:45 <shapr> but seriously, hws-wp, halipeto, haskelldb, what else?
02:16:55 <ozone> now we just need to invent a technical meaning for 'asian'
02:17:03 <shapr> ozone: er, why?
02:17:07 <ozone> then we can advocate that haskell is the only language with asian chicks
02:17:10 <ozone> phear!
02:17:16 * shapr grins
02:17:18 * Marvin-- laughs at o3
02:17:23 <shapr> I like it!
02:18:06 <shapr> so, halipeto is a Haskell implementation of Zope's Template Attribute Language
02:18:22 <shapr> hws-wp could allow runtime re/loading of plugins
02:18:37 <shapr> haskelldb would beat the crap out of any database interface I've used in Java or Python
02:19:41 <shapr> what other major features are found in web app servers?
02:19:47 <shapr> cataloging? i18n?
02:19:55 <Maddas> a nice logo :)
02:20:04 <Maddas> (catchy, rather)
02:20:09 <shapr> Maddas: ok, that's your job then.
02:20:17 <shapr> find a catchy logo
02:20:20 * shapr grins
02:20:32 <Maddas> okay... But you asked for it.
02:20:32 <shapr> oh, and a catchy name
02:20:45 <shapr> Hope, Hopi?
02:20:47 <shapr> g'day Jerub 
02:20:55 <shapr> Hopi would be punny on Apache
02:20:59 <Maddas> Hopi soundns catchy
02:21:02 <Jerub> hiya shapr.
02:21:13 <shapr> and could stand for "Haskell och Plug Ins
02:21:13 <shapr> "
02:21:16 <Jerub> My wife started another semester of uni today, and celebrated by raiding the library.
02:21:22 <Jerub> she brought me home a haskell book.
02:21:24 <shapr> Jerub: did you find any drugs?
02:21:26 <shapr> wow cool!
02:21:28 <shapr> which one?
02:21:33 <shapr> is it by manuel chakravarty?
02:22:06 <Jerub> thompson
02:22:12 <shapr> oh, that's a good one
02:22:17 <shapr> I have a copy of that book
02:22:28 <Marvin--> i18n is immensely important
02:22:42 <shapr> Maddas: on the downside, the Hopi had no concept of time, and that applies far too realistically to software development in general
02:22:51 <shapr> Marvin--: yes, I agree.
02:22:53 <Jerub> seeing haskell again, and recently scarred by the evils of twisted.web/nevow, I'm thinking about possibly having a bit of fun.
02:23:00 <Marvin--> Jerub: heh
02:23:11 <shapr> I wouldn't agree quite so strongly if I hadn't recently created an i18n website with Plone.
02:23:20 <Marvin--> nevow? have they turned woven inside out?
02:23:27 <Jerub> Marvin--: and back to front.
02:23:39 <Jerub> Marvin--: its scary.
02:23:43 <Marvin--> what does it do now? make coffee?
02:23:46 <shapr> I have since realized that we need to pound i18n and UTF into Haskell
02:23:51 <shapr> it's gotta be there.
02:23:55 <Marvin--> yes
02:24:21 <Marvin--> it really needs to be there, but it's so incredibly hard to do it Right
02:24:36 <shapr> yes, but if we get it right, that'll be another killer app of Haskell
02:24:48 <Jerub> resource = DynamicRenderer( html[ head[ title[ myTitle ], stylesheet ] , body[ h1[ myTitle ], ul[ [li(_class='foo')[d] for d in pageData] ] ]
02:24:50 <Marvin--> gettext, for all its charms, is a hack that works decently
02:24:51 <Jerub> )
02:24:55 <Jerub> thats how evil nevow is.
02:25:07 <Marvin--> Jerub: ouch!
02:25:20 <Jerub> it uses __getattr__ and __call__ to construct a 'little-language' in python
02:25:28 <darius-> jerub - looks ok to me
02:25:53 <Marvin--> Haskell is so much more suited for embedded languages than python :-P
02:25:54 <Jerub> myTitle and pageData could be strings, lists, or even functions.
02:26:01 <Jerub> Marvin--: this is what I'm thinking ;)
02:26:20 <Jerub> I'm just wondering how hard it would be to have a persistant haskell process laying around that could be fed requests.
02:26:28 <Jerub> but I don't know *anything* about the implementation of ghc.
02:27:32 <Jerub> heck, I hardly know anything about haskell, but lets not go there.
02:29:17 <shapr> well, WASH has html generation that works much like the nevow line you showed above
02:29:43 * Jerub downloads.
02:31:41 * Jerub corrects out of diskspace problem
02:37:11 <Jerub> shapr: the WASH stuff looks intruging.
02:37:55 <Jerub> however, I'd probably feel more comfortable if it didn't turn things around in places.
02:38:23 <shapr> WASH is interesting, but it's by no means perfect
02:38:25 <Jerub> (hlink (text name) url)
02:38:36 <shapr> on the good side, Peter Thiemann is quite responsive
02:38:47 <Jerub> I'd feel better with (a (href url) name) or something
02:39:50 <shapr> so, redefine that :-)
02:40:23 <Jerub> oh, I intend to.
02:40:34 <Jerub> but first I need to make sure I know how he's done all this.
02:40:50 <Jerub> I'd probably also feel more comfortable with it structured like:
02:41:12 <Jerub> (a @@ (href url) ## name)
02:41:34 <Jerub> @@ meaning 'add-an-attribute' and ## meaning 'add-a-child'
02:41:34 <lambdabot> Sorry, I don't know the command "@", try "lambdabot: @listcommands"
02:41:46 <Jerub> @shush
02:41:47 <lambdabot> Sorry, I don't know the command "shush", try "lambdabot: @listcommands"
02:41:51 <Jerub> ;)
02:41:58 <shapr> that could be a useful command
02:42:11 <shapr> turn off error responses for awhile
02:44:20 <Jerub> of course, peter probbably had reasons for implementing stuff the way he did, so I'm going to read his stuff *first*
02:44:55 <shapr> Peter is a cool guy, I talked to him at ICFP about turning WASH + other stuff into Zope, he seems interested
02:45:40 <Jerub> does it usually take ghc a fair while to compile?
02:45:44 <shapr> yes
02:46:44 <Marvin--> for ghc to compile haskell progams, or for compiling ghc? :)
02:46:57 <Jerub> Marvin--: the former.
02:47:11 <Marvin--> I don't think it's that bad, actually
02:47:15 <Jerub> 3 minutes 30 seconds on a single .hs file so far.
02:47:21 <Marvin--> wow
02:47:37 <Jerub> and using 150 meg of memory.
02:47:50 <shapr> oh, you're building WASH
02:47:54 <Marvin--> sure, the time difference in starting up hugs and ghci on the ancient sparcs at the university is painful, but...
02:48:13 <Jerub> 6000 line .hs file.
02:48:25 <shapr> parts of WASH take quite some time to compile
02:48:27 <Marvin--> ah, that's quite a lot
02:49:17 <Marvin--> I think my entire h2fol-compiler isn't more than 2500 lines
02:50:31 <Jerub> ahhh, I see why.
02:50:50 <shapr> ?
02:51:23 <Jerub> 334 class definitions
02:51:46 <Jerub> 4571 instances.
02:51:53 <Marvin--> heh
02:51:56 <Marvin--> lots of dictionaries
02:52:40 <liiwi> coffee
02:52:49 <Marvin--> lunch
02:53:30 <shapr> coffee!
02:53:38 <shapr> hm, where's my kuksa...
02:53:54 <Jerub> so how easy is it to from another language, call a haskell function with some inputs.
02:55:06 <liiwi> shapr: I obtained pretty nice kuksa recently too.
02:56:42 <Jerub> okay, whats kuksa?
02:57:15 <liiwi> a cup, made from wood
02:57:23 <shapr> Jerub: how do you want to call the function?
02:57:55 <Jerub> shapr: from C or Python probably, and however's easiest.
02:59:56 <shapr> you could use FFI, or xml-rpc
03:00:08 <shapr> I've been using xmlrpc to talk to zope
03:00:24 <Jerub> no PB yet then ;)
03:00:41 <shapr> no, not yet
03:00:49 <Jerub> really? its easier to talk over network than it is to embed?
03:01:21 <shapr> no, I just don't remember how to call from C into Haskell :-)
03:01:34 <shapr> I know FFI can call from Haskell into C
03:01:46 <shapr> and I've written some tiny code to do that
03:01:50 <shapr> but never the other way around.
03:02:01 <shapr> mostly because I'd rather not use C if I can escape it.
03:02:54 <ozone> Jerub: see the GHC docs (the chapter on FFI, specifically)
03:03:09 <ozone> it's pretty easy, although there are a few extra header files that you have to include with your build process
03:03:53 <Jerub> alright, I've gotta go to bed.
03:03:55 <Jerub> thanks for the tips.
03:03:59 <Jerub> ozone: thanks!
03:06:35 <ozone> shure
03:15:22 <blackdog> shapr: you're a debian guy, right?
03:15:57 <ozone> blackdog: i'm a debian guy too!  me, me!
03:16:59 <blackdog> bah. get away from me, you proprietary scum :)
03:17:25 <blackdog> you've sold out our your CLI inheritance for a mess of pottage^Wlickable icons
03:21:04 <ozone> sure, totally explains why i'm in vim about 70% of the time i'm at work :)
03:21:36 <blackdog> don't try to make me listen to reason. I've made up my mind and I don't need any of your "facts" confusing the issue.
03:22:29 <shapr> blackdog: yup
03:22:31 <blackdog> anyway, vi stands for visual. ed! ed is the system editor.
03:22:56 <ozone> i've used ed quite a few times, thank you
03:23:07 <ozone> (probably not much as don ...)
03:23:14 <blackdog> less than 30% of your time, though.
03:23:34 <shapr> you have a debian question?
03:23:46 <blackdog> shapr: how the hell do you get jikes working on debian? I keep trying  "import java", and it can't find the libraries...
03:24:02 <blackdog> sorry, jython, not jikes
03:24:08 <blackdog> i don't know why i said jikes
03:24:11 <ozone> blackdog: export JIKSEPATH="/path/to/where/jre.zip.file.is:$CLASSPATH"
03:24:15 <ozone> oh
03:24:17 <ozone> fugger off then
03:24:20 <ozone> stupid moron
03:24:23 <blackdog> Nob. :)
03:24:28 <shapr> what sort of error do you get? import java should work
03:24:28 <ozone> that's "knob", sonny
03:24:34 <shapr> admittedly, I haven't tried jython recently
03:24:36 * shapr installs
03:24:41 <shapr> what jre are you using?
03:24:41 <ozone> as if you'd use python anyway!!!
03:24:55 <ozone> blackdog: btw, i'll be at uni on friday for the GC talk
03:25:00 <ozone> that talk looks totally leet
03:25:41 <blackdog> *blush* faaaaark. that'll teach me for asking questions without checking. just grabbed kaffe and it's all good now. thought gij would be adequate, but apparently not.
03:25:48 <blackdog> sorry shapr.
03:26:12 <blackdog> ozone: yeah, looks cool. wish i could take time off to listen to the chats as well, but i'm working till 7...
03:26:32 <blackdog> ozone: well, it's to avoid using java.
03:27:20 <ozone> blackdog: d'oh, that sucks
03:28:19 <blackdog> yeah. and it's beginning of session, which means that a polite request for an hour off will be met by incredulous silence, then gales of hysterical laughter.
05:42:51 <shapr> hey pesco, ltns
05:42:58 <pesco> Oi, shapr!
05:43:40 <pesco> I wrote a Haskell plugin for eclipse!
05:43:44 <shapr> cool!
05:45:19 <pesco> And a program to enable programming Haskell in UTF-8!
05:45:28 <Maddas> hah!
05:45:48 <Maddas> One could almost think you were listening to the discussion earlier today :-)
05:45:55 <pesco> Huh?!
05:46:06 <pesco> What was it?
05:46:24 <Maddas> That Haskell needs UTF-8 and it18n (or so) support.
05:46:32 <pesco> Right.
05:48:11 <pesco> Well, with a simple converter, I can have actual lambdas, arrows, vertical bars, mathematical operators, pretty much any Unicode character I want in my source code. :)
05:48:30 <pesco> Just make sure GHC doesn't see it ;)
05:49:04 <shapr> wow, neat
05:49:12 <pesco> While at it I revisited the UTF-8 codec I had written almost two years ago for haskell-i18n.
05:49:44 <shapr> I'm becoming very interested in UTF-8 and i18n for Haskell/GHC
05:49:50 <pesco> Cool!
05:50:18 <pesco> GHC supports Unicode characters at runtime, it just rejects them in source code.
05:50:33 <shapr> I want a web app server in Haskell, and it will require that sort of thing
05:51:01 <pesco> See the haskell-i18n sourceforge project.
05:51:10 <shapr> I will, does it have recent updates?
05:51:26 <pesco> Yes, those I made one or two weeks ago :)
05:51:41 <shapr> spiffy
05:51:54 <pesco> And there have been updates to the character properties code in there, as well.
05:52:05 <pesco> I haven't looked at that though.
05:52:55 <pesco> The UTF-8 codec is in Text/Encoding/UTF8.lhs
05:53:21 <pesco> There is also an alternative version by norpan (realname forgotten)
05:53:43 <pesco> See for yourself.
05:53:52 <shapr> I will, thanks
05:54:09 <shapr> hey, have you seen the GHC-HaskellDB project?
05:54:16 <pesco> No, what is it?
05:54:32 <shapr> http://haskelldb.sf.net/
05:54:59 <pesco> woot!
05:58:00 <pesco> Has there been any talk about first-class modules lately?
05:58:19 <shapr> just wishing
05:58:27 <pesco> hahaha
05:58:33 <pesco> Too bad. :(
05:58:50 <shapr> I'd like it.
05:59:01 <pesco> I think everyone would.
06:00:58 <pesco> Next on my list for the eclipse plugin is "real tabulation" to enable (pretty) programming in variable-width fonts.
06:01:23 <Maddas> Will that force people to use hard tabs?
06:01:56 <Maddas> (if they want proper tabulation with variable-width fonts; or will eclipse try to auto-detect spaces in the beginning of lines?)
06:04:48 <pesco> Hard tabs first.
06:05:36 <pesco> Proper tabulation requires the information hard tabs provide.
06:05:50 <pesco> (If they are used right)
06:06:31 <pesco> It would be nice to infer the intended tabulation from space characters, but I'm not planning on adding that (yet).
06:06:33 <Maddas> I was afraid you would say that :-)
06:06:37 <pesco> Why?
06:06:42 <Maddas> Yeah, that sounds like it might be a bit messy
06:06:54 <Maddas> (As in very easy to parse)
06:06:58 <Maddas> s/very/not/
06:07:10 <Maddas> pesco: I don't use hard tabs in my code
06:07:13 <pesco> Remember that nobody is forced to view any program in variable-width.
06:07:31 * Maddas nods
06:07:33 <pesco> Maddas: True, it won't make existing programs prettier.
06:07:47 <shapr> I'd like to define UTF-8 operators.
06:08:07 <Maddas> heh, Perl 6 even has built-in operators as utf8. I find that annoying :)
06:08:25 <pesco> shapr: map the unicode character to some sequence `namefortheop` in the filter.
06:08:28 <Maddas> s/operators as utf8/utf8 operators/
06:09:07 <shapr> hm, that's a good idea.
06:09:23 <shapr> thing is, I want GHC to be UTF-8 clean, then I don't have to worry about it anymore.
06:09:33 <pesco> I especially like mapping the \cdot to '*'.
06:09:45 <shapr> hey, did you see the HaWiki upgrade?
06:09:53 <shapr> haskell highlighting, inline latex, etc
06:10:06 <shapr> and I'm the maintainer now too
06:10:06 <pesco> Hm? Cool!!
06:10:17 <pesco> ;))
06:10:49 <pesco> shapr: I'm not sure of course, but somehow I feel that making GHC understand UTF-8 source should not be really hard.
06:11:22 <pesco> Hopefully just a matter of adding rules to the lexer or something.
06:12:10 <pesco> shapr: The world will thank you, if you do it! ;-)
06:12:31 <shapr> yes, and so would my customers if I could do decent i18n with it
06:12:45 <ozone> i'd like a real bloody triangle instead of >>=
06:12:52 <pesco> Oh, are you selling Haskell now? Cool.
06:13:33 <pesco> ozone: Ah, is that how it's usually written in literature or something?
06:13:47 <pesco> What's the equivalent for >>?
06:13:49 <ozone> pesco: that's how it's written in richard's bird's book
06:13:58 <ozone> good question, can't remember :)
06:14:16 <ozone> i made a great function: "|> = >>="
06:14:25 <pesco> *G*
06:14:31 <ozone> problem is that other hs people look at that and think 'this guy is stupid'
06:14:36 <ozone> which i am, but that ain't the point :-)
06:14:37 <pesco> lol
06:14:50 <Maddas> heh
06:14:56 <pesco> I see I really should put that little converter program up for download... ;)
06:15:24 <shapr> yes!
06:15:25 <pesco> It's trivial to add your triangle operator once I find it in the Unicode table...
06:16:00 <pesco> Where should I put it, haskell-libs?
06:16:02 <ozone> pesco: just release is as 0.0001, and if anyone bitches, point them to the version number
06:16:07 <ozone> it's the open-source way to go, man!
06:16:24 <shapr> sure, put it in haskell-libs
06:17:24 <pesco> Ok, I'll do that.
06:17:33 <pesco> Hold on....
06:18:23 <pesco> shapr: haskell-libs was a wonderful idea.
06:18:34 <shapr> thank you
06:18:40 <shapr> it's soon to undergo a reorganization
06:18:47 <pesco> Ahm?
06:18:59 <shapr> basically, sf.net cvs bandwidth sucks bad
06:19:28 <shapr> and I'd like to switch to darcs, since I think it's better anyway
06:19:38 <pesco> Heh.
06:20:00 <shapr> so I figure I'll put webpages and nightly tarballs on sf.net
06:20:28 <shapr> and host darcs on scannedinavian.org
06:20:37 <shapr> and that's a good moment to reorganize the repo
06:20:46 * pesco nods
06:21:12 <shapr> if you have any suggestions, I'd like to hear them.
06:22:17 <ozone> check it out: http://www.algorithm.com.au/gallery/screenshots/HOC_Class_Browser?full=1
06:22:54 <pesco> shapr: Ok, I'll check it out (get it?)
06:22:59 <shapr> :-)
06:24:03 <pesco> Awesome.
06:24:41 <shapr> ozone: that's gorgeous
06:24:54 <pesco> Speaking of which, is there a Java-to-Haskell binding?
06:25:03 <shapr> there's Ashley Yakeley's binding
06:25:07 <ozone> there's ashley yakeley's jvmbridge
06:25:17 <ozone> and mayyyybe there's another one based off the work done by lambada
06:25:18 <shapr> in stereo...
06:25:20 <ozone> but i'm not sure
06:25:45 <pesco> Aha, can I only call java through it or also implement java classes in Haskell?
06:25:57 <ozone> not sure, haven't checked it out at all
06:26:01 <pesco> Ok.
06:26:08 <ozone> (get it?)
06:26:13 <ozone> sorry :)
06:27:33 <ozone> shapr: did you also spot my totally 1337 computer icon in that?
06:27:47 <ozone> (my hostname is jazz)
06:29:47 <Igloo> Eww, artifactastic
06:31:26 <pesco> shapr: Should I put the UTF-8 source converter in text/ ?
06:32:51 <ozone> hmm, since i'm here, is there some way i can write "do { foo <- someIOAction; bar foo baz }" in one line?
06:33:15 <ozone> i.e. do something like "do { bar (??? someIOAction) baz }"
06:33:35 <Igloo> That is one line  :-P
06:33:46 <ozone> pfft, fine, in one statement. :P
06:34:05 <Igloo> it's liftM (flip bar baz) someIOAction
06:34:18 <ozone> oh, great
06:34:22 <ozone> is there anything nicer than that? :)
06:34:23 <Igloo> Oh, or is it
06:34:55 <ozone> (i've always thought anything involving flip is an unreadable kludge)
06:35:06 <Igloo> No, that would put it in a neste monad
06:35:35 <Igloo> I think what you had is the nicest way of writing it, but that's not what you asked  :-)
06:36:06 <ozone> Igloo :)
06:36:34 <ozone> it's kind of annoying when you have to do that a lot, though
06:37:58 <Igloo> You could write a function that takes foo, bar, baz as arguments
06:38:43 <shapr> ozone: yes, that's totally leet, I admit
06:38:57 <shapr> pesco: sure, sounds good to me
06:40:25 <ozone> Igloo: i don't think it's possible, since you basically want something like unsafePerformIO
06:40:36 <ozone> (type-wise)
06:42:34 <ozone> Igloo: hmm, i wonder if you could do something with TH :)
06:43:51 <shapr> could you make a totally type-safe runtime loader by running the entire program inside the type-check loop of TH?
06:44:08 <shapr> wouldn't that effectively carry the typecheck around with you at runtime?
06:44:42 <ozone> shapr: i had that idea a while back
06:45:24 <Igloo> ozone: Hmm? diddle foo bar baz = do { foo' <- foo; bar foo baz } is all you want, no?
06:45:34 <Igloo> Ooops, last foo should be foo'
06:45:34 <shapr> did it work out?
06:45:35 <ozone> thought about it for ages, then i thought i was very clever, talked to chak about it, and the first thing he said was "yes, but it would be rather slow"
06:45:35 <ozone> chillix, i mean
06:45:40 <ozone> never tried it
06:46:11 <ozone> Igloo: i guess that'd work, but that requires putting a diddle in front
06:46:16 <shapr> why would it be slow?
06:46:19 <ozone> which sucks, syntactically
06:46:57 <Igloo> Well, you'd need to have /something/ for anything like that
06:47:17 <ozone> if you can put the something where foo is, that's OK :)
06:47:29 <ozone> (as long as it's no greater than about 2 characters)
06:47:55 <ozone> shapr: because you still have compilation to do
06:51:39 <shapr> I'd be willing to try it.
06:51:54 <shapr> bet it's faster than elisp :-)
06:52:53 <ozone> shapr: mayhap :)
06:53:02 <ozone> shapr: although you can do type-safe runtime loading with dynamics, anyway
06:53:16 <ozone> (i think, maybe marvin-- might have something to say about that)
06:56:01 <shapr> for some reason I thought there was a problem with that.
06:56:22 <ozone> well, another guy in our research group is doing that right now, and it works for him(TM)
06:56:36 <ozone> and he's a GHC hax0r, so if it works for him, it works for me. :)
06:57:33 <shapr> is it Don?
06:57:38 <ozone> da
06:57:43 <shapr> ok, I'll ask him.
06:58:21 <ozone> you know you're famous in the haskell community when people just refer to you by first name
06:59:10 <shapr> well, you said "another guy in your research group" and there's only like... six of you?
06:59:36 <shapr> you, seafood, blackdog, pete (does he count?), chak, gabby, don... anyone I missed?
06:59:46 <shapr> what about saz or lilith?
06:59:50 <shapr> are they in your group?
07:00:35 <ozone> yeah
07:00:40 <ozone> a few others too, who aren't online
07:01:00 <ozone> (strictly speaking, i'm not in it anymore :)
07:01:23 <ecraven> i tried googling for nntp-username etc. but nothing at all..
07:01:35 <shapr> ecraven: huh?
07:02:15 <ecraven> sorry :) wrong channel
07:02:28 <shapr> ok
07:02:46 <shapr> it probably helps to have a unique first name too.
07:02:52 <pesco> shapr, ozone: committed, cvs up to get all that Unicode goodness!
07:03:07 <shapr> how many people named shae do you know?
07:03:17 <shapr> or Sven?
07:03:19 <shapr> or André
07:03:31 <shapr> pesco: thanks!
07:04:37 <pesco> Does anybody know whether U+2218 "RING OPERATOR" is meant to be the function composition operator?
07:05:42 * shapr dunno
07:06:00 <shapr> but I would like to see a screenshot of Haskell source with all those cool symbols
07:06:23 <ozone> schweet, ta
07:21:46 <pesco> shapr: Screenshot? No problem. 500k, where to?
07:24:23 <shapr> shae at scanned in avian . com
07:33:14 <shapr> pesco: that's quite spiffy
07:33:24 <pesco> Isn't it?
07:37:37 <SyntaxNinja> whoa I made Debian Weekly News w/ my article on fixing bug
07:39:06 <shapr> url?
07:41:24 <SyntaxNinja> http://www.debian.org/News/weekly/2004/09/
07:41:55 <shapr> neat!
07:43:43 <shapr> SyntaxNinja: that's really cool!
07:44:29 <SyntaxNinja> thanks :)
07:48:55 <Igloo> Congrats  :-)
09:07:31 <Igloo> Can anyone explain why it amkes sense for <>, <+>, $$ to be infixl?
09:08:07 <Igloo> hcat etc are even defined in terms of foldr
09:14:40 <Lunar^> shapr: could this be interesting for HaWiki : http://ry4an.org/unblog/msg00018.html ?
09:26:38 <shapr> well, there's already the tunes.org log
10:52:44 * SamB wonders if there will be such a thing as "monte carlo optimization"
11:23:22 <jameson> Hrm. I could've sworn it was '=>' for options in 'case' expressions... is there some other language that uses the \Rightarrow there?
11:28:10 <Marvin--> jameson: dunno, but it's -> in Haskell
11:35:28 <ski> jameson : SML uses => in case-expressions.  (O'Caml uses -> in match-expressions.)
11:38:16 <jlouis> SamB: haha
11:41:15 <jameson> ski: Makes sense. Thanks for helping me sort my mental language -> semantics -> syntax map ;-)
11:43:02 <ski> jameson : yeah. (especially since lambda in SML uses =>, while it's -> in O'Caml)
11:44:04 <jlouis> SMLs case expression is the odd one out
11:45:43 <ski> for using => ?
11:46:00 <jlouis> no, for not having an explicit end
11:46:03 <jlouis> case ... end
11:46:11 <jlouis> like let ... in ... end
11:46:38 <jlouis> Haskell does not have this problem ;)
11:47:10 <ski> ok
11:51:39 <ski> hmm, is citeseer down ?
11:51:51 <Marvin--> oh look, Okasaki's book is on /.
11:52:14 <ski> oh, 'tis ?
11:52:51 <Marvin--> http://books.slashdot.org/article.pl?sid=04/02/19/2257203&mode=nested
12:50:34 <jameson> Hmm... is there a nice alternative to express something like "f 0 = Zero; f i | i > 0 = Succ (f (i-1))" through the likes of 'fold(l/r)' and 'map'?
12:51:08 <earthy> looks like a fold to me
12:51:19 <earthy> well, almost.
12:52:37 <earthy> f n = foldl (Succ) Zero $ rev [0 .. n]   or somesuch
12:52:54 <earthy> @type foldl
12:52:54 <lambdabot> foldl :: (a -> b -> a) -> a -> [b] -> a
12:53:25 <ski> earthy : you haven't used f
12:53:25 <earthy> ofcourse, Succ takes too few arguments. :)
12:53:34 <ski> hmm
12:53:47 <Marvin--> f n = foldr (const Succ) Zero [1..n]
12:53:48 <earthy> haven't I? I think I got the structure of f almost right...
12:54:16 <ski> earthy : sorry, you're right. i read worngly .. :(
12:54:58 <Marvin--> earthy: why reverse when you don't use the elements of the list?
12:55:23 <earthy> marvin--: point.
12:55:39 <earthy> I'm coding rather than thinking
12:55:45 <darius-> jameson - you could write a foldn function
12:55:52 <jameson> Marvin--: Nice, thanks!
12:56:06 <Marvin--> f n = foldl (\x y -> Succ x) Zero [1..n]  is the foldl version
13:00:44 <ski> perhaps one could make some unfold (anamorphism) for your natural number type ..
13:01:48 <Marvin--> stop using all that stupid category theory mumbo jumbo ;)
13:02:44 <ski> Marvin-- : i just thought the 'ana...' would perhaps be more known than 'unfold' ..
13:05:32 * Marvin-- ponders pestering chucky for svn 1.0
14:20:25 <mattam> hmm, no there's no ghc on ppc ?
14:22:16 <Riastradh> Yes there is.
14:24:36 <mattam> ha, so i've got to test the ebuild it seems.
14:29:15 <stepcut> s
14:30:35 <Marvin--> god I suck
14:30:53 * Marvin-- hasn't written another word of his report today either
14:32:34 <stepcut> well, I haven't done my taxes yet... if that helps any
14:32:39 <mattam> hmm, i need a ppc linux binary to bootstrap the compilation, but there are no such thing on haskell.org :(
14:34:13 <stepcut> http://www.haskell.org/ghc/dist/5.04.3/ghc-5.04.3-powerpc-unknown-linux.tar.bz2
14:34:38 <mattam> 5.04 ?
14:35:08 <mattam> is it the last version available for ppc linux ?
14:35:09 <stepcut> you should be able to build 6.x with 5.04
14:35:20 <mattam> ok
14:35:45 <stepcut> Its the latest that I see
14:39:17 <kosmikus> mattam: feedback about ghc ebuilds on ppc is very welcome
14:43:40 <jameson> Debian has ppc packages. Except for ghci, they seem to be working fine.
14:43:46 <jameson> (for ghc 6.2)
14:43:54 <mattam> kosmikus: i'll commit it as ~ppc if it works and otherwise bug you :)
14:44:50 <jameson> Same for alpha. I don't know about IA32, but you can definitely get that one from the web page...
14:45:00 <shapr> yow!
14:45:22 <kosmikus> mattam: sure
14:45:43 <kosmikus> mattam: I wouldn't be surprised if the ebuild needs some work
14:46:01 <SamB> ghc works fine in testing on i386
14:46:36 <kosmikus> SamB: debian? gentoo?
14:46:57 <SamB> debian testing, of course!
14:47:12 <SamB> gentoo has testing?
14:47:24 <mattam> kosmikus: don't be so humble...
14:48:42 <kosmikus> SamB: gentoo has ~x86
14:49:37 <kosmikus> mattam: I have far less time to invest in Gentoo than I'd like, which is one of the reasons why 5.04.3 is still the stable version of ghc on x86 ...
14:50:04 * kosmikus will be back in a few minutes
15:32:49 <stepcut> xb
15:51:05 <cmoline> whoohoo! im an op on channel #haskel
15:51:18 <cmoline> i feel all powerful and shit :)
15:51:31 <cmoline> anyways, sorry to butt in here
15:51:44 <cmoline> but my problem is i dont know anybodt
15:52:01 <cmoline> so i was hoping someone here could help me out
15:52:19 <whee> I can do a lot of handwaving and hopefully do something useful.
15:52:46 <cmoline> would someone please point me to the nearest group of people hopped up on shrooms and looking for intellingetn dicussion
15:53:07 <whee> this is probably even the wrong network for that :P
15:53:08 <cmoline> and by intelligent i dont mean im going to say anything intelliegetn
15:53:36 <cmoline> i mean im tired of all this shit
15:54:00 <cmoline> i dont get off on looking at trippy pictures like everyone else
15:54:15 <cmoline> but i dont know anyone else liek me 
15:54:29 <cmoline> so thats why im bothering the people on this channel
15:54:41 <cmoline> im not looking to be a pain
15:54:48 * mgoetze wonders where cmoline got the idea that he is an op
15:55:25 <cmoline> mgoetxe: i misplet haskell and so now im an op on the chanel i misplet :)
15:55:33 <cmoline> as you can see im pretty stoned
15:55:39 <whee> I'm probably the last person anyone should ask for opinions on finding friends. I have one friend. heh
15:55:40 <keveretsL> cmoline: why is it that you decided #haskell is an appropriate place for this?
15:55:41 <cmoline> again im sorry for that
15:55:52 <whee> but I suggest another network, anyway :P
15:55:54 <cmoline> keveeL
15:56:11 <cmoline> i know that haskell isnt the appropriate place for this
15:56:32 <cmoline> i know that lots of people on this channel dont want to put up with a stnoer
15:56:37 <cmoline> but thats my prob
15:56:47 <cmoline> i dont know any toehr stoners like me
15:56:59 <keveretsL> well, please look for them elsewhere.
15:57:20 <mgoetze> yeah, it's not our problem, and we don't want it...
15:57:38 <cmoline> keverestL: ok. i will go. peelase accept my apologies. i was just hoping someone here was liek me
15:58:22 <cmoline> fuck this. no wonder i want to kill myself when im not on drugs
15:58:29 <cmoline> no one to talk to. cya
15:58:43 <Pseudonym> I wonder if Haskell makes more sense when on drugs.
15:59:05 <keveretsL> Might be one way to quickly grok Monads.
15:59:08 <mgoetze> feel free to try... just don't bother us about it ;)
16:02:12 <creature> I know someone who can't maintain his code any more, because he was stoned when he wrote it and just can't do it sober. 
16:03:23 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html", "Donate your brain! - hawiki/UsingHaskellWikiMaterial","Stoners welcome!"]' by Pseudonym
16:04:44 <Jerub> Pseudonym: I did haskell at uni, only the straights got the marks. ;)
16:05:43 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html", "Donate your brain! - hawiki/UsingHaskellWikiMaterial","Category Theory: Better than drugs"]' by Pseudonym
16:06:26 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html", "Donate your brain! - hawiki/UsingHaskellWikiMaterial"]' by Pseudonym
16:24:00 <Igloo> Does anyone know why <>, <+>, $$ are infixl rather than infixr?
16:24:45 <ski> Igloo : perhaps they are associative operators ??
16:26:05 <Igloo> Functionally they are, but performancewise I'm not so sure. vcat etc are all defined in terms of foldr
16:26:25 <Pseudonym> Oh, our wasted friend saw fit to tell haskell-cafe too.
16:26:30 <Heffalump> oh dear.
16:26:32 <Pseudonym> Wanna take bets on whether or not it's a prank?
16:26:36 <Heffalump> hasn't he been on here before?
16:26:41 <ski> so you would perhaps argue for them being infixr, perhaps ?
16:26:58 <Pseudonym> A guy turning up on #haskell may be regarded as odd.  On the list as well... looks suspicious/
16:27:24 <Pseudonym> Heffalump: Rings a bell.
16:27:36 <Igloo> Well, I just don't understand why they aren't
16:28:07 <ski> Igloo : are they defined (explicitely) as infixl in the code ?
16:29:42 <Pseudonym> Now this is interesting.
16:29:47 <Igloo> Yes
16:30:03 <Pseudonym>   * Cured massive performance bug.  If you write
16:30:03 <Pseudonym>         foldl <> empty (map (text.show) [1..10000])
16:30:03 <Pseudonym>     you get quadratic behaviour with V2.0.  Why?  For just the same reason as yo
16:30:03 <Pseudonym> u get
16:30:03 <Pseudonym>     quadratic behaviour with left-associated (++) chains.
16:30:10 <Pseudonym> That's from the changelog.
16:31:13 <Pseudonym> Dated circa 1997.
16:31:39 <Igloo> I'm somewhat confused by that, as it ends "I'll send you the code if you are interested."
16:31:50 <Pseudonym> Indeed.
16:32:12 <Pseudonym> One would think that if left-associated chains were bad news, this would be made right-associative.
16:32:17 <Pseudonym> An email may be in order.
16:32:48 <Pseudonym> The "I'll send you the code if you are interested." comment is, I think, because he doesn't think his fix is a good one.
16:32:53 <Igloo> I think I'll mail libraries@ and see what they say
16:33:10 <Pseudonym> How about "Don't do that; use foldr".
16:33:25 <Igloo> But doesn't the fact it's in the changelog imply his fix has been applied?
16:33:29 <Pseudonym> That seems like a reasonable fix to me.  We know not to use foldl with (++) either.
16:33:44 <Pseudonym> Oh, good point.
16:33:58 <Pseudonym> Send email.  I'm curious about the answer too.
16:39:48 <pattern> "Haskell research and implementation is largely driven by Microsoft Research" <- is this true?
16:40:47 <Heffalump> not entirely
16:40:53 <Heffalump> but they do employ the two main developers of GHC
16:41:25 <Pseudonym> Microsoft don't drive the research agenda.
16:41:53 <Pseudonym> Yet, anyway,.
16:42:01 <stepcut> I always feel dirty sending bug reports to microsoft.com (being a lindows.com employee myself)
16:42:07 <Pseudonym> Most of the Haskell research is done outside of microsoft, though.
16:42:15 <keveretsL> I just wish they would use it to write provably correct software.
16:43:41 <Pseudonym> I think that's a bad idea, actually.
16:43:58 <Pseudonym> You'd spend less time debugging the code, but more time debugging the specification.
16:44:13 <Pseudonym> For nontrivial programs, anyway.
16:44:26 <Pseudonym> It probably has a place at the lower levels of a typical program.
16:44:34 <Pseudonym> Where specifications are easy to write.
16:46:29 <Pseudonym> Useful for mission-critical and safety-critical software, too.
16:46:38 <Pseudonym> But how much of that is written in Haskell?
16:51:09 <Igloo> I doubt those sorts of people would trust the RTS
16:51:19 <Pseudonym> Hell, I don't trust the RTS.
16:51:24 <Igloo> And you'd have to reason about laziness, space usage etc too
17:08:51 <Lemmih> Wow I've _never_ seen anything like that before!
17:10:17 <Igloo> ?
17:11:00 <Lemmih> Someone just posted a suicide note on the Haskell-cafe mailing list.
17:11:13 <Heffalump> was it the stoned guy?
17:11:22 <Lemmih> yeah
17:11:49 <ski> Lemmih : he was here, not too long ago, you know ..
17:13:42 <Lemmih> Like in this channel? Under what nick?
17:13:54 <ski> Lemmih : cmoline
17:14:19 <ski> (and yes, in this channel. seems to have left irc by now, though)
17:15:37 <LittleDan> Is it possible to make optional arguments for functions even though they're curried?
17:16:27 <ski> haskell doesn't have that
17:16:32 <LittleDan> ok, thanks
17:25:54 <mattam> ghc-split: no process_asm_block for powerpc-unknown-linux
17:25:54 <mattam> make[2]: *** [GHC/Base.o] Error 1
17:26:01 <mattam> aye
17:26:36 <mattam> anyone having any idea how i could fix this ?
17:27:14 <Heffalump> Igloo might be able to help
17:29:01 <xeon_> Can anyone in here recommend a Haskell interpretter?
17:29:01 <Lemmih> I feel kinda sorry for cmoline...
17:29:52 <ski> Lemmih : yeah
17:30:28 <Heffalump> xeon_: hugs or ghci
17:30:37 <ski> xeon_ : perhaps hugs ?  (if you will suffice with a top-level (for a compiler), then ghci (or hbci ??) might be for you)
17:31:14 <Pseudonym> I think cmonline is a hoax.
17:31:21 <Pseudonym> The more I think about it.
17:31:27 <Heffalump> I'm convinced I've seen that nick before.
17:31:47 <Pseudonym> Let me ask google.
17:32:19 * ski thinks he has seen cmoline before (perhaps here on #haskell, perhaps on some other irc channel)
17:33:09 <Pseudonym> Nothing in the IRC logs as far as google knows.
17:33:42 <Lemmih> If it's a joke then it's a _very_ bad one.
17:34:01 <Riastradh> Pseudonym, the older IRC logs (from 2003) were stored away.
17:36:08 <ski> (http://www.google.se/search?q=cache:Kbm7cx0AZWEJ:tunes.org/~nef/logs/tunes/01.11.10+cmoline&hl=sv&ie=UTF-8)
17:38:43 <Pseudonym> Ah, so it is.
17:39:26 <Pseudonym> I just searched for cmonline site:tunes.org and found nothing, though.
17:39:51 <ski> might http://cristiana.moline.tripod.com/ belong to cmoline ?
17:40:59 <Pseudonym> Oh.
17:41:02 <Pseudonym> Misspell.
17:56:50 <Igloo> mattam: The easy way is to put "GhcUnregisterised=YES\nSplitObjs=NO" in mk/build.mk
18:01:24 <mattam> Igloo: and what is/are the other way(s) ?
18:02:01 <Igloo> Finishing the powerpc support  :-)
18:02:05 <mattam> haha
18:02:10 <mattam> really ?
18:02:55 <Igloo> It's possible only the SplitObjs=NO is needed. I think Wolfgang is interested in making it work on PPC Linux now, so I suspect it'll happen at some point.
18:03:10 <Igloo> I don't know how the move to C-- affects all of this, if at all
18:03:54 <Igloo> And yes, AFAIK it just isn't done yet
18:04:59 <mattam> ok, i have the vague impression it works
18:16:22 <Odiseo> darn
18:52:13 <Optikal> pimpbot5000!
18:53:20 <Optikal> The man, the myth, the pimp. You combine the classic sensibilities of a 1950's robot with the dynamic flare of a 1970's street pimp!
18:53:36 <Jerub> hehe
18:53:54 <pimpbot5000> haha excellent optikal
19:06:06 <tty> hello
19:06:11 <Optikal> allo
19:06:50 <tty> i am looking at buying some books and wondering if I could obtain some opinions on them. Their amazon page is rather sparse.
19:07:59 <tty> The two I'm interested in are: "Compiling with Continuation" and "Intro. to Functional Programming Systems Using Haskell"
19:08:13 <tty> Has anyone read them ? Comments ?
19:08:30 <ski> i think "Compiling with Continuations" is not a beginner book
19:10:09 <ski> the other i know nothing about
19:10:26 <ski> perhaps it is a beginner book to functional programming ..
19:11:04 <ski> tty : do you want a functional programming beginner book ?  or more advanced ?
19:11:20 <tty> ski: mid to advance.
19:12:35 <ski> mid to advanced about which topic ?
19:12:47 <ski> is "Intro. to Functional Programming Systems Using Haskell" about compilation ?
19:12:47 <tty> ski: i've gone thru EOPL, SICP and have Hudak's book on haskell.
19:13:00 <ski> ok
19:13:49 <tty> The "Intro to Func. Prog. Systems Using Haskell" is a general overview of functional programming and haskell. According to the TOC it also covers SCED.
19:14:03 <tty> pretty much a smogsboard of things.
19:14:45 <tty> my main interest is compilers and program transformation with some parallel/distributed computing.
19:15:12 <tty> the compiler stuff is for my own interest, parallel/dist. is work related.
19:15:30 <Optikal> Standard ML has some pretty good books
19:15:57 <Optikal> and alot of the concepts carry over
19:16:33 <tty> yes, i will be picking up "Purely Func. Data Structures" and I believe "Compiling with Cont." is in ML.
19:16:42 <ski> it is
19:16:50 <ski> SML/NJ, i think
19:17:24 <tty> I should say that I'm still a beginner w.r.t to continuation and one thing I would like to do is improve on that.
19:17:38 <ski> tty : "smogsboard" = smorgasbord ?
19:17:53 <tty> smorgasbord :)
19:18:17 <ski> tty : or "smörgåsbord", as we swedes like to write it :)
19:19:19 <ski> have you read the Lambda papers ?
19:19:40 <ski> (Lambda the ultimate ...)
19:19:49 <tty> ski: yes, some of them.
19:20:02 <ski> ok
19:20:26 <tty> ski: however i did it outside an academic setting, i.e. if i got lost i had next to noone to bug for help.
19:20:37 <ski> mhmm
19:20:44 <tty> it made it slow going.
19:21:10 <ski> no irc channel to come and bug for help ? :-P
19:21:43 <tty> at that time i did not even know about this irc channel :)
19:21:48 <ski> ok
19:22:30 <tty> ski: whats your opinion r/g Compiling with Continuation ?
19:22:51 <ski> well i havn't read "Compiling with Cont." (though i would like to). so i guess i can't comment on that .. :(
19:23:00 <ski> heh
19:24:00 <tty> if i were to do Compiling with Monads how easy would it be to map that back to an imperative/OO language ? without writing an interpreter of course :)
19:24:37 <ski> depends on the monad, and on the effects available in the imp/OO lang, i'd guess
19:25:19 <tty> my food language is Java.
19:25:30 <ozone> re
19:25:48 <tty> food language = language i use to put food on the table :)
19:25:58 <Optikal> VB .NET?
19:26:01 <ski> (e.g. it probably support state and i/o :), but does it support some variant of call/cc ? (dynamically scoped) exceptions ? ("don't know") nondeterminism ? "don't care" ditto ?  and so on ...)
19:26:09 <Optikal> Oh java
19:26:47 <ozone> ski: i know you can do far more crazy stuff than call/cc with monads in haskell
19:27:00 <ozone> dunno if any of it is useful, mind you :)
19:27:16 <ski> ozone : such as ? ;)
19:28:24 <tty> ski: i liked the backwards monad...
19:28:33 <ski> tty : also, i'm not sure if they use callcc in "Compiling with Cont.". perhaps they only use CPS (or perhaps even just transform the object lang code to CPS form)
19:28:48 <ski> tty : yeah, that's fun
19:28:59 <ozone> ski: http://www.haskell.org/hawiki/ContinuationPassingStyle
19:29:17 <Jerub> mmmcps.
19:29:26 <ski> ozone : what about that ?
19:29:45 <Jerub> you can do CPS in more languages than you think :)
19:30:00 <ski> Jerub : talking to me ?
19:30:06 <Jerub> whoever.
19:30:12 <ozone> ski: that's the crazy stuff i was referring to.  there are few links off that page which talks about using the continuation monad to do more things than call/cc
19:30:40 <ski> Jerub : which language did you think i didn't think one could do CPS in ? ;)  (just curious)
19:31:03 <Jerub> ski: I was just making a comment about CPS in general, I'm not following the conversation.
19:31:54 <ski> ozone : sorry, don't get which part you're referring to. care to elaborate/point at it ?
19:32:09 <ski> Jerub : ok
19:32:25 <tty> ski: did you think about Eiffel :?
19:32:58 <ski> if one can do closures, then i suppose one can do CPS
19:33:20 <ski> ("closures" in the wide sense, here)
19:33:29 <ozone> ski: hmm, perhaps it's not on the wiki
19:33:41 <tty> does CPS require anoymous functions ?
19:33:49 <ski> i don't thinks so
19:34:12 <ski> think, even
19:34:44 <tty> hmmm...wonder if inner classes in Java are enough for CPS then.
19:36:07 <ski> but the syntax will of course be very clunky
19:36:29 <ozone> ski: hmm, i saw some examples a while ago, but can't find them now
19:36:37 <ozone> ski: there's a small reference to it at <http://www.haskell.org/hawiki/MonadCont>, though:
19:36:55 <tty> ski,ozone: r/g continuation monads doing more than call/cc, i believe thats in Wadler's paper on Monads vs CPS.
19:36:55 <ozone> Most of the more interesting things to do with call/cc in Scheme require some mutable state and aren't immediately applicable with this definition of callCC (perhaps ContT over State or vice versa?), further it's not immediately obvious how to make some control structures (e.g. jump/goto) with just callCC. Another possibility is to use partial (or functional or composable) continuations, the most common primitives being shift and reset.
19:37:21 <ozone> tty: sounds likely; the page i just quoted from has a reference to that paper (although the link is 404ed)
19:39:05 <ski> tty : are you thinking about composable continuations ?
19:39:44 <ski> ozone : yes, shift and reset
19:40:49 <tty> ski: sorry, do not recall from the paper, and i do not grok continuations/monads enough to say otherwise.
19:41:13 <Riastradh> tty, http://www.bloodandcoffee.net/campbell/txt/continuation-tutorial.log
19:42:16 <tty> hi Riastradh, thanks for the link.
19:42:56 <Riastradh> The code is all in Scheme, but it's nothing specific to Scheme; you could translate it to Haskell pretty easily, though you'd lose syntactic convenience (square brackets, the notation I use for 'continuation,' have meaning in Haskell).
19:45:40 <Jerub> even with named functions you can do CPS, all you need is a way of passing function pointers of some kind. :)
19:46:00 <Riastradh> Even in C you can write in CPS.
19:46:15 <Jerub> Riastradh: of course.
19:46:32 <Riastradh> It's actually a good opportunity for writing very fast code: CPS encodes so much control flow information that you can discern much more optimizations in CPS than in straight C.
19:46:59 <ski> even without proper tail-calls ?
19:47:04 <Jerub> heck, you can do CPS in php. ;)
19:47:26 <tty> don't you need to muck around with the stack return pointer though aka heap smashing ?
19:47:45 <tty> s/heap/stack
19:49:42 <Riastradh> ski, C has goto.
19:50:35 <tty> however don't you need setjump/longjmp for bridging b/w different functions ?
19:51:16 <ski> Riastradh, for tail-*recursion*, yes
19:51:44 <Riastradh> ski, I never said it would be very _clean_ or modular code...
19:54:13 <ski> but is it possible with ANSI/ISO C ?
19:54:19 <Riastradh> Yes.
19:54:40 <ski> (barring things like gcc's indirect goto's)
19:54:43 <ski> ok
19:54:51 <ski> i wasn't sure of that
19:55:18 <tty> Riastradh, could you elaborate on that since i'm curious about it.
19:55:58 <Riastradh> tty, I couldn't elaborate much because I don't have the concrete example of it in front of me; the code is pretty gross, anyways.
19:56:51 <Riastradh> A related topic, though it doesn't use CPS in the _output_ format -- only the _intermediate_ format --, is Pre-Scheme.
19:57:09 <ski> which is ?
19:57:15 <tty> Riastradh, any ideas of papers dicussing this ? the closes i got was from using Steele's Rabbit paper as a starting point.
19:58:03 * Riastradh points at http://www.bloodandcoffee.net/campbell/code/kelsey97prescheme.ps and s48.org.
19:58:43 <tty> thanks
19:59:46 <ski> the same
20:00:23 <Riastradh> I'm being very incoherent tonight for no reason I can discern.  I think I shall go to bed soon.
20:02:42 <tty> anyway does anyone have an opinion of "Compiling with Continuation" before spent money on it. the amazon commentaries were sparse.
20:02:56 <tty> s/spent/i spend/
20:04:15 <SamB> is ghci's bytecode interpreter (or whatever it is called) derived from hugs?
20:05:28 <Cale> I wouldn't think so, but I also don't really know.
20:08:45 <ozone> SamB: i believe that's a no
20:09:02 <ozone> there's some work being done now so the two runtime systems have a little more in common, but not very much
20:10:04 <SamB> oh, is that what this document is about.
20:10:21 <SamB> I'm poking about in the ghc source tree ;-)
20:11:55 <ozone> is it about a new RTS system?
20:12:20 <ozone> if it is, that sounds likely
20:22:49 <tty> thanks guys for the help/comments. ttyl
