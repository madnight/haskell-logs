00:23:54 <CodeWarrior> morning
00:38:29 <ubccoolboy> hello, could anyone tell me how i can make haskell give me say 158 and 657 666, by inputting 158 000 000
00:38:53 <ubccoolboy> i mean
00:39:03 <ubccoolboy> by inputting 158 657 666
00:39:11 <ubccoolboy> by inputting 158657666
00:40:57 <ubccoolboy> ?
00:58:42 <saz> ubccoolboy: you write a function to do it
00:58:49 <saz> ubccoolboy: are you doing 1011 or 1711?
01:00:03 <ubccoolboy> 1011
01:00:11 <ubccoolboy> yeah what function
01:02:32 <saz> one you write
01:02:47 <saz> (good)
01:02:56 <ubccoolboy> kthnxbye
01:05:37 <saz> heh
01:06:19 <saz> to be fair, they haven't really covered this much yet
01:09:58 <Jerub> 18:59 < ubccoolboy> kthnxbye
01:10:08 <Jerub> in some circles, thats enough to earn a lifetime ban ;)
01:10:22 <saz> hehe
03:12:35 <bring> shapr: didn't you have the "undefined reference to `wxGLCanvas ..." problem with wxHaskell a while back?
03:13:13 <bring> how did you fix that?
03:36:04 <shapr> bring: I think that was Igloo
03:36:36 <bring> ok, thanks. I figured it out anyway, just need to add --gl-libs in configure
03:37:03 <bring> after figuring that out, I had a look at the archives, and that solution was the first mail I saw
03:37:08 <shapr> :-)
03:38:18 <shapr> good morning #haskell !
03:40:09 * shapr boings
03:41:13 <Jerub> shapr: I am learning about data types classes and instances! I find this very exciting. :)
03:41:21 <shapr> yay!
03:41:32 <shapr> found anything particularly interesting?
03:45:11 <shapr> bring: does DbDirect also generate a showRow that lets me easily do "select * from $table;" ?
03:46:01 <bring> you mean making it easy to write the query, or to print the results?
03:46:10 <shapr> print the results
03:47:18 <shapr> I wonder if that would be useful or not
03:47:37 <shapr> I don't think I'm yet familiar enough with HaskellDB to be sure.
03:47:52 <bring> I'm not sure if it's in 0.6, it's certainly in CVS, but there is a function showRecRow :: r -> [(String,ShowS)]
03:48:04 <shapr> ah, spiffy!
03:48:42 <bring> come to think of, it's always been there, so nevermind my comment about 0.6/CVS
03:48:49 <shapr> that exactly what I was thinking about when I saw the static showRow in insert-update-delete.hs
03:48:51 <bring> it's ReadRecRow that's new
03:49:16 <bring> yes
03:49:33 <Jerub> shapr: nope! just learning stuff.
05:14:09 <blackdog> ah, man, how embarrassing... just saw TOmasz' primes generator on clf and realised I could have used * instead of sqrt. Where did i leave my head today...
05:38:09 * shapr boings happily
05:39:52 <Igloo> Wassup, shapr?
05:40:23 <shapr> life is good
05:40:32 <shapr> I have a new DVD burner and I'm playing around with it
05:40:37 <Igloo> Cool
05:40:49 <shapr> yah, it could be the solution to backing up a gforge instance
05:43:58 <shapr> what's up with you Igloo?
05:47:09 <Igloo> Not much - I'll probably tidy up the wxHaskell debs shortly
05:49:00 <shapr> one random idea that's been niggling at me lately is a "choose your own adventure" series of Haskell articles.
05:49:51 <shapr> I think each article would have a certain theme, and specific major exits for learning more.
05:50:19 <shapr> so, for HaskellDB, you have the database theme, and specifics exits are links to Set Theory, IBM's System R, etc
05:50:50 <shapr> I think dynamic loading would be another good article theme, I've seen interest in that on a regular basis.
05:50:50 <shapr> any ideas for others?
05:51:45 <shapr> oh, gui toolkits is a good one
05:56:02 <shapr> hi Jad 
05:56:09 <shapr> hei _Codex, still on vacation?
05:56:35 <_Codex> not anymore.
05:58:27 <patanisca> hey there
05:58:35 * _Codex has been trying to learn natural transformations..
05:58:46 <patanisca> is there any ftp lib for haskell?
06:01:16 <patanisca> ping
06:02:19 <shapr> pong!
06:02:22 <shapr> there is something
06:02:45 <shapr> but it's not a separate library
06:02:58 <patanisca> where can i find it?
06:04:20 <shapr> there's some code for FTP inside this: http://shapr.homelinux.net/~shae/harc-0.1pre10.tar.gz
06:04:36 <shapr> look at Client/FTP.hs
06:05:30 <patanisca> all i need is to logon, cd, and send a file. you think i can manage with this code?
06:06:30 <shapr> I think so
06:06:47 <shapr> but you may have to hack on it a bit to get it separated from the rest of that code
06:07:14 <patanisca> :-) ok. thanks a lot! 
06:07:22 <shapr> sure, have any other questions?
06:07:34 <patanisca> lol. don't thinks so... 
06:07:52 <shapr> ok, ask if you think of more.
06:08:31 <shapr> hey, do you know anything about compressed on-disk indices in Haskell?
06:15:42 <Lunar^> shapr: hOp now reads current date :)
06:16:16 <shapr> w00
06:16:20 <shapr> do you have a new flp?
06:16:36 <shapr> do you want to host stuff on ScannedInAvian.org ?
06:27:08 * shapr boings cheerfully
06:27:22 <cm> meep
06:27:35 <shapr> y0 cm
06:27:42 <cm> hi shapr-bot :)
06:27:50 <shapr> greetings cm-human
06:27:53 * phubuh hugs darcs
06:28:08 * cm hugs sensible programmers
06:28:18 <phubuh> it's so wonderfully simple and easy-to-use compared to those other, lesser VCs
06:28:19 * shapr hugs darcs too
06:28:21 <shapr> group hug!
06:28:25 <phubuh> hee hee
06:28:31 <shapr> yes, I totally agree
06:28:41 <phubuh> i love how it asks what to record
06:28:44 <shapr> did you see SyntaxNinja's rant on libraries@haskell.org ?
06:28:56 <phubuh> yeah, that's what inspired me to try it, actually :-)
06:29:03 <bring> hmm, ghc-pkg doesn't check dependencies when removing packages, so if you remove A and B depends on A, you can't compile anything anywmore, not even stuff that doesn't use A or B
06:29:15 <shapr> bring: because that would be too easy!
06:29:26 <shapr> actually, I think that was one thing that LIP wants to address
06:29:50 <bring> that, and the horrible mess that is autoconf and make
06:30:08 <shapr> I know there must be a better solution, but I don't know what it is.
06:31:34 <jak>  /msg NickServ IDENTIFY bunch34
06:31:43 <Riastradh> ...
06:31:43 <shapr> whoops
06:31:45 <jak> lol
06:31:50 <jak> whoops
06:31:50 <shapr> jak: I think you should change that
06:31:56 <jak> right away
06:32:04 <bring> I am working on a wxHaskell driver for HaskellDB, writing the driver took me 1 hour, so far it's taken me 3-4 hours to write autocnf for it, update Makefiles, recompile wxWidgets, recompile wxhaskell (5 times or something), and it's still not working
06:32:25 <bring> oh, and trying to configure wxWidgets odbc
06:32:41 <shapr> I'm a 'lazy butt' as the southeastern US expression goes, so I let Igloo do all the hardwork for me, and just install the debs he's built.
06:33:14 <shapr> Igloo's knowledge of the internals of GHC, debian, make systems, etc far surpasses mine, so I just sit around and enjoy the fruits of his labor.
06:33:57 <shapr> I'm looking forward to the updated wxHaskell deb
06:35:27 * shapr advertises HaskellDB on #emacs
06:35:32 <shapr> yay HaskellDB!
06:35:35 <bring> :)
06:45:54 <bring> it works!
06:46:27 <shapr> yay!
06:48:53 <Riastradh> Uh, what the heck are those last three new pages on the HaWiki?
06:49:07 <shapr> spam
06:49:12 <shapr> showed up on emacswiki just a moment ago
06:51:18 <Igloo> Is there an easy way to get a list of times hawiki has been spammed/defaced?
06:51:40 <shapr> not that I can think of, but I can probably remember them all
06:51:53 <shapr> this is the first porn spam we've gotten just now
06:52:09 <shapr> between three and six script kiddies FrontPage defacings before
07:05:41 <bring> defacing a Wiki, wow, that's a really cool thing to do, isn't it?
07:14:56 <shapr> so is spamming
07:29:35 <Igloo> blackdog: Are you here?
07:44:42 <jlouis> there is an economical reason
07:45:15 <shapr> for what?
07:47:01 <liiwi> squish
07:47:10 <jlouis> spam
07:47:38 <jlouis> which is why you get porn-spam on the wiki
07:48:08 <shapr> oh
07:48:11 <shapr> right
08:08:13 <bring> hmm, a simple test program using wxHaskell is 2.3M stripped, with hsql 750k (and the hsql program includes 4 different db drivers, wxHaskell just odbc)
08:09:08 <shapr> big
08:09:42 <bring> shouldn't the linker or someone figure out that most of wxhaskell isn't used and leave it out?
08:09:55 <Igloo> I think it would need to use split-objs for that
08:10:39 <bring> ah, yes, it doesn't use that
08:10:39 <Igloo> My program, which doesn't really do much is 7M and 3M {,non-}stripped
08:11:00 <bring> I only use wxcore, not wx
08:11:35 <Igloo> Do you find you have to use wx-config --gl-libs as well as --libs?
08:11:47 <bring> sometimes :)
08:12:05 <Igloo> Hmm
08:12:15 <bring> I did on my home machine
08:12:21 * Igloo adds that to the mail to send to the list
08:12:37 <bring> but not on a Linux machine at school
08:13:27 <bring> i compiled wxWidgets from scratch on the one taht didn't need it and from an SRPM on the one that did
08:13:52 <Igloo> I suspect by default it just doesn't build the GL libraries then
08:16:09 <bring> it seems that if you build from source with --with-opengl it puts the openGL stuff in the same .so as everything else, but the RPMS put the gl stuff in a separate .so
08:16:40 <bring> that way, if you build from scratch, you don't need --gl-libs, but with RPMs you do
08:18:06 <bring> either way, it doesn't seem to hurt to always use --gl-libs
08:20:20 <Igloo> Except you end up pointlessly linking against libraries you don't actually use, and it might cause problems for people who don't have the GL wxWidgets libraries
08:20:33 <bring> hmm, true
08:21:42 <bring> does wxHaskell only build the gl stuff if the GL wxWidgets libraries are present?
08:22:31 <bring> when I tried it yesterday, wxHaskell built fine, but I could link against it because wxGLsomething was missing, and I didn't use any GL widgets
08:23:59 <bring> s/could/couldn't/
08:24:22 <Igloo> No idea
08:24:38 <Igloo> New debs sitting in http://www.syntaxpolice.org/haskell-experimental/mini-dinstall/incoming/ incidentally
08:28:51 <shapr> whoa, PlayStation 2 uses MIPS-I and ELF
08:28:54 <shapr> neat
09:12:58 <shapr> ok, I'm confused
09:13:08 <shapr> I have some inverted index code written in Haskell
09:13:17 <shapr> and I'm investigating using it for an email searcher
09:13:23 <shapr> but I don't really know how to use it.
09:19:45 <_Codex> inverted index code?
09:20:25 <shapr> http://kimbly.com/code/invidx/
09:29:37 * Cale is back (gone 32:39:49)
09:33:59 <shapr> greetings lambda^
09:44:33 <Cale> It will be nice to have a full featured image library in Haskell, even if it's entirely typed in IO.
09:46:13 <Cale> I might go on and FFI up some more of the E foundation libraries after this. I'm doing Imlib2, and have ~50 foreign import ccalls and little marshalling functions left to go.
09:48:03 <Cale> (from about 450 when I started last night)
09:48:21 <lambda^> wow and somebody told me Haskell programmers were lazy
09:49:05 <keverets> Just the language
09:49:31 <_Codex> lambda: but its true.
09:50:36 <lambda^> I don't like using FFI in a functional language
09:50:40 <lambda^> it's just like a dominatrix
09:50:50 <lambda^> the more bindings you have, the more you have to ask someone else to get your work done
09:50:58 <Cale> heh
10:07:02 <tooki> joho
11:05:20 <SyntaxLaptop> Igloo: looks like you need to add a conflicts
11:05:25 <SyntaxLaptop> to libwxhaskell0.6-ghc6
11:05:36 <SyntaxLaptop> dpkg: error processing /var/cache/apt/archives/libwxhaskell0.6-ghc6_0.6-0.2_i386.deb (--unpack):
11:05:36 <SyntaxLaptop>  trying to overwrite `/usr/lib/libwxc-0.6.so', which is also in package wxhaskell-ghc6
11:06:37 <Igloo> Hmm, I was working on the assumption people using HE, especially HE unstable, would be able to handle that sort of thing themselves. Do you think that's wrong?
11:07:18 <SyntaxLaptop> you mean to not have different versions of libwxhaskell installed?
11:08:26 <Igloo> Well, libwxhaskell0.6-ghc6 and wxhaskell-ghc6 are really the same package. I just changed the name
11:09:06 <SyntaxLaptop> I see.
11:09:19 <SyntaxLaptop> well, I don't have a strong opinion. I don't see any drawback to providing a "conflicts", though.
11:09:47 <SyntaxLaptop> did you want me to remove the old one from the archive?
11:10:15 <Igloo> Well, I tend to think of HE as being packages on their way to Debian, and I wouldn't want to carry that sort of cruft forwards
11:10:22 <Igloo> Yes please (shouldn't that happen automatically?)
11:11:01 * Igloo realises I probably should have put 0.6 in the source package name too. Oh well.
11:11:35 <SyntaxLaptop> so you think it should happen automatically if the soruce package names are the same?
11:12:02 <SyntaxLaptop> looks like yr right :)
11:12:03 <Igloo> I'd have thought so
11:13:54 <SyntaxLaptop> in that case, looks like it's all set.
11:14:10 <Igloo> Cool, ta
11:47:30 <SyntaxLaptop> Igloo: you're the one who said that licenses in the LIP should be represented by "bsd3" and "bsd4" what's the diff? the advertising clause?
11:48:31 <Igloo> Yes
11:51:45 <SyntaxLaptop> do you think there should be separate fields for Copyright and License at the top of a source flie?
11:53:19 <Igloo> That sounds sensible - what's the alternative?
11:54:29 <SyntaxLaptop> I don't know what people usually do. I might say something like "Copyright: Isaac Jones 2003-2004.  (BSD4 License)" or something more verbose like "This software is made available by the terms of the BSD4 license.  See Copyright file"
11:57:07 <ibid> what are you talking about?
11:57:37 <SyntaxLaptop> ibid: just wondering how people usually express the copyright and license at the top of source files.
11:58:13 <ibid> SyntaxLaptop: for BSD and such licenses, i usually include the whole text
11:58:22 <ibid> SyntaxLaptop: for GPL, i include the fsf boilerplate
11:58:51 <ibid> in any case, abbreviations are not a good idea; refer by full name, and of there is none, include the text
11:59:35 <ibid> i have bound a key sequence in emacs into a function that adds the boilerplate
11:59:51 <ibid> the boilerplate is read from a file in the current directory
12:00:45 <SyntaxLaptop> ibid: what's wrong with indicating which kind of license you use, and then referring them to a file? It' snot even necessary to include the license in the source at all, is it?
12:01:12 <ibid> SyntaxLaptop: it must be absolutely clear what the license is
12:01:26 <ibid> SyntaxLaptop: and what it applies to
12:01:47 <ibid> SyntaxLaptop: better to err to the side of too much than too little
12:02:06 <SyntaxLaptop> maybe I'll stick the license at the bottom
12:02:28 <SyntaxLaptop> seems a little much to have it at the top hmm.
12:02:30 <ibid> what's wrong with the top? it's not that long
12:02:48 <ibid> and it's standard practice to put it on the top
12:03:22 <SyntaxLaptop> hm
12:03:32 <SyntaxLaptop> idono. seems a little crowded with the haddock template up there and all.
12:03:44 <ibid> the haddock template?
12:04:19 <SyntaxLaptop> not really template I guess; it's the text at the top that haddock parses to get the copyright, maintainer, and module description
12:04:35 <ibid> ok
12:04:41 <ibid> any examples i could look at?
12:04:53 <ibid> easily accessible, that is :)
12:05:15 <SyntaxLaptop> -----------------------------------------------------------------------------
12:05:15 <SyntaxLaptop> -- |
12:05:15 <SyntaxLaptop> -- Module      :  
12:05:15 <SyntaxLaptop> -- Copyright   :  Isaac Jones 2003-2004
12:05:15 <SyntaxLaptop> -- License     :  BSD4 (See COPYRIGHT file)
12:05:16 <SyntaxLaptop> -- 
12:05:18 <SyntaxLaptop> -- Maintainer  :  Isaac Jones <ijones@syntaxpolice.org>
12:05:20 <SyntaxLaptop> -- Stability   :  alpha
12:05:22 <SyntaxLaptop> -- Portability :  GHC
12:05:49 <ibid> ok, in structured contexts abbrevs are fine imho as long as they are clearly defined somewhere
12:05:55 <ibid> preferrably by the processor :)
12:06:35 <SyntaxLaptop> that would be cool.
12:09:07 <SyntaxLaptop> OK you've convinced me.
12:09:20 <ibid> and of course, the definition must be stable :)
12:09:28 <ibid> convinced me of what? ;)
12:10:51 <SyntaxLaptop> I'll put the license itself at the top (if haddock parsed the licenses that might be a different story)
12:10:59 <SyntaxLaptop> it doesn't look too crowded
12:11:20 <ibid> ok
12:11:23 <ibid> good to hear :)
12:30:53 <SyntaxLaptop> so is there anything relatively standard in Haskell where I can execute a process and get the output as a string or list of strings?
14:34:13 <shapr> SyntaxLaptop: shell-haskell
14:34:39 <shapr> http://www.electronconsulting.com/shell-haskell/
14:39:45 <SyntaxLaptop> yeah, I wanted something that's in the hierarchical libs, though
14:41:53 <shapr> Igloo: it works, looks cool
14:44:30 <shapr> SyntaxLaptop: POpen in posix?
14:47:36 <Igloo> Cool, ta
14:58:21 <Lunar^> KDE's kate really have nice .lhs coloration
14:58:37 * shapr is in love with HaskellDB
14:58:44 <Lunar^> :)
14:58:54 <shapr> :-)
15:43:52 <shapr> whee!
15:44:32 <blackdog>  oh, for the love of ... shapr, i thought i told you kids to stay off the roof.
15:46:42 <shapr> but dad
15:46:51 <shapr> it's fun to try to fly!
15:49:28 <blackdog> you're all hopped up on goofballs, aren't you?
15:50:11 <shapr> is that what you call small children?
15:50:28 <shapr> actually, I'm playing with HaskellDB, it's very spiffy
15:51:28 <blackdog> how so? I haven't checked it out...
15:53:22 <shapr> http://www.scannedinavian.org/AvianWiki/HaskellDbTutorial
15:53:54 <blackdog> just checked the home page... that Daan Leijen's got a finger in everything, doesn't he...
15:54:03 <shapr> yes he does
15:57:25 <shapr> HaskellDB exposes set theory ops much more directly
15:57:52 <shapr> and if you've never written code to generate SQL you're very lucky
15:58:25 <shapr> HaskellDB is the ultimate solution to generating SQL
15:58:56 <blackdog> I've never done any database work. It looks pretty cool, though. one of the nastiest things about using haskell seems to be that you have to go outside your typesafe happy place to interact with other systems.
15:59:45 <blackdog> hej, anyone know when you can safely use -split-objs in ghc? my wxhaskell proggies are way too big.
16:00:17 <shapr> I've heard conflicting data, I really don't know.
16:04:20 <Lunar^> What exactly does split-objs ?
16:05:09 <blackdog> it breaks files down into one object for each toplevel function, i think.
16:06:59 <blackdog> got a nice zenlike error message, too: ghc-6.2: flag `' is incompatible with source file `/tmp/ghc990.split_s'
16:07:23 <blackdog> what is the sound of an unused flag switching?
16:09:17 * shapr grins
16:09:24 <shapr> I thought that split-objs was only good on win32
16:09:37 <shapr> but then I think heard of someone using it on linux
16:09:42 <shapr> so I'm really not sure
16:12:28 <blackdog> i'm just trying stuff at random, really. terrible engineering practice.
16:12:45 <shapr> you've already used strip?
16:14:07 <blackdog> yeah, that helps a bit - 8megs down to 4.
16:15:13 <blackdog> it just annoys me that a really, really small program takes so much space.
16:15:16 <shapr> iirc, the basic problem is that GHC does a bunch of static linking
16:15:25 <shapr> and the solution is to fix GHC, but no one's gotten around to it
16:15:46 <shapr> the size of GHC executables issue comes up on ghc-users every five months or so
16:15:53 <blackdog> precious few research papers in small binaries. 
16:16:03 <shapr> precious little funding there too
16:16:14 <blackdog> does the package system work in nhc as well, do you know?
16:16:18 <shapr> unless you're NASA, I guess :-)
16:16:20 <shapr> no clue
16:16:22 <shapr> Igloo might know
16:16:35 <shapr> you mean ghc-pkg, right?
16:17:35 <blackdog> hm. good point. :)
16:22:27 <Smerdyakov> Any kuro5hin readers here? There's a fellow who posted a long article trying to contort C++ into having a useful operator overloading mechanism.
16:22:53 <Smerdyakov> People are still proposing ad-hoc mechanisms even after I mentioned type classes in a comment.
16:23:51 <jdrake> Smerdyakov, k5 is getting almost as bad as slashdot
16:23:52 <Cale> Many of the people on Kuro5hin and Slashdot aren't very bright.
16:24:37 <opet> Smerdyakov: I used to frequent k5, but I skipped to husi. I was always more a diary whore anyway
16:24:44 <Smerdyakov> Yes, but many of the people on k5 _are_ bright.
16:24:47 <shapr> what's husi?
16:24:51 <Smerdyakov> A better proportion than /., at least.
16:25:08 <Smerdyakov> opet, URL?
16:25:43 <jdrake> what article is it
16:25:45 <opet> www.hulver.com
16:25:53 <Cale> Sure, but you're always going to get people who make stupid suggestions.
16:26:12 <Smerdyakov> opet, so this isn't really the same kind of site as k5?
16:26:35 <Smerdyakov> opet, the most recent article on the front page is over a month old.
16:26:42 <opet> Smerdyakov: no, no articles treally. a bunch of the diary people have gone there. hulver, spiralx, mrgoat, Q, etc
16:27:21 <Smerdyakov> I've never really paid attention to anything but the articles and particular comments at either k5 or /..
16:27:29 <Smerdyakov> So those names don't mean much to me.
16:27:43 <opet> well, fair enough :)
16:28:00 <shapr> I don't pay much attention to anything at slashdot or k5.
16:28:11 <Smerdyakov> Cale, this case is pretty silly. This guy's resume only mentions C and C++ as far as programming languages go, and now he wants to design a programming language.
16:28:28 <shapr> I've been trying slashdot lately, but I'm not overwhelmed by the signal to noise.
16:28:35 <Cale> Smerdyakov: sure
16:28:35 <opet> I stopped paying attention to the articles on k5 when it got all afghanistan and iraq
16:28:39 <Smerdyakov> Cale, his web page says his new year's resolution is to learn a non-mainstream language, but he wants to design his own language first. :D
16:29:09 <Cale> Let him. It will throw the non-mainstream languages into stark contrast.
16:29:12 <shapr> any HaskellDB users here? I'm looking for some example code.
16:29:48 <jdrake> smerdy, kind of wierd - your last 30 comments are for at least one article? a little too much into it seemingly
16:30:22 <Cale> I never post my comments on less than one article.
16:30:49 <Smerdyakov> jdrake, well, look at the subject of the article! A guy advocating Scheme! :D
16:31:01 * shapr wonders how to explain project
16:31:05 <jdrake> so has Riastradh in the past
16:31:29 <shapr> what do you call it when you build a new table from parts of others?
16:31:37 <shapr> I know you can call it a view in PostgreSQL, are there other names for it?
16:33:35 <opet> iirc my db stuff a view is when you do that on the db end. i.e., the client can just see it as a normal table
16:34:08 <Smerdyakov> "View" is the standard name.
16:36:02 <shapr> ok, thanks
16:36:33 <Smerdyakov> Is there any way to make declaring a type class instance fail because of not defining enough members?
16:38:31 <Smerdyakov> Getting divergent functions by default seems rather kludgy. :\
16:39:45 <jdrake> Smerdyakov, have you ever written a K5 article specifically for ML or haskell, etc?
16:39:57 <Smerdyakov> jdrake, no, I have never written any article.
16:40:23 <Smerdyakov> I'm planning on writing a survey of language based security at some point.
16:40:24 <jdrake> maybe you should (if said things haven't already been said)
16:40:36 <jdrake> that might be interesting
16:40:50 <jdrake> btw, what do you advocate more - haskell or ml
16:41:03 <Smerdyakov> Usually ML. Not much reason.
16:41:48 <jdrake> are you equally fluent in both?
16:42:06 <Smerdyakov> No, though I could be if I practiced Haskell for a week.
16:42:30 <jdrake> the tutorial i happened to choose for haskell wasn't the best choice because of its age I think
16:42:36 <jdrake> i have to use one of the others around
16:42:43 <shapr> which one are you using?
16:42:56 <clausen> Smerdyakov: btw, a friend of mine is interested in similar stuff to you, AFAIK
16:43:06 <Smerdyakov> clausen, food?
16:43:09 <clausen> she is starting postgrad research
16:43:16 <clausen> (masters or phd, dunno)
16:43:24 <clausen> in security verification of protocols
16:43:36 <clausen> (is that related?)
16:43:40 <Smerdyakov> Vaguely similar. Like a cousin of my research. :)
16:43:49 <Smerdyakov> O
16:43:58 <Smerdyakov> I'm planning to do a project on that subject for the crypto class I'm taking.
16:43:59 <clausen> as in automated verification
16:44:39 <jdrake> shapr, little haskeller
16:44:52 <Smerdyakov> We have people doing related work here. Information flow security stuff.
16:45:13 <mattam> we have here too :)
16:45:53 <clausen> Smerdyakov: Amy Corman <amy@cs.mu.oz.au>, if you're interested
16:45:58 <clausen> (doesn't seem to have a webpage, so not very stalkable)
16:46:10 <shapr> if you have prior FP experience, you might like the Gentle Introduction
16:46:27 <shapr> you should also try Hal Daume's Yet Another Haskell Tutorial, that one's popular.
16:46:37 <mattam> shapr: i think it works for beginners too
16:46:58 <shapr> if you want to buy a book, I'd suggest Hudak's "Haskell School of Expression" or Thompson's "Haskell : The Craft of Functional Programming"
16:47:17 <shapr> I wasn't able to learn Haskell from the Gentle Intro, felt more like a brickbat to me.
16:47:35 <shapr> but then, my prior FP experience was limited to some Scheme and some elisp.
16:47:39 <Smerdyakov> clausen, hm. You think I would be particularly interested in talking to someone in a wide research field because you know her? ;)
16:47:42 <shapr> and some Python
16:47:48 <clausen> Smerdyakov: maybe
16:47:53 <clausen> Smerdyakov: I would
16:48:09 <Smerdyakov> Is she going to the summer school on software security?
16:48:15 <clausen> I think so
16:48:24 <Smerdyakov> OK. Then I can talk to her there.
16:48:49 <Smerdyakov> Not that I will, most likely. It would be very unwonted. :)
16:48:54 <mattam> i already knew ocaml, but, iirc, it goes slowly
16:50:17 <shapr> referential transparency is easy to understand, but sometimes hard to use.
16:51:34 <mattam> how so ?
16:53:26 <shapr> you have restructure everything into call-forward
16:56:26 <jdrake> shapr, i don't want to buy any of those books because they are all overpriced compared to my budget
16:56:46 <shapr> maybe they're in a nearby library?
16:56:58 <shapr> I'd recommend trying Hal's YAHT
16:57:02 <shapr> that might work for you
16:57:31 <Cale> Hal's tutorial is good. I also really like the nomaware monads tutorial.
16:57:35 <jdrake> shapr, i am afraid our local library system is really bad
16:57:49 <jdrake> i am downloaded his tutorial now
16:58:34 <jdrake> it looks ok for a tutorial (198 pages might as well be a book really)
17:18:44 <shapr> I've just started writing a list of mappings from SQL to HaskellDB, any comments? http://www.scannedinavian.org/AvianWiki/HaskellDbTutorial
17:23:12 <jlouis> shapr: it seems like you have to do about 40% more codewriting for doing the same thing in HaskellDB than in SQL. What is the catch?
17:25:03 <shapr> there's no modularity in SQL, no higher order functions, it's not type-checked at compile time, etc
17:25:31 <Jerub> shapr: seen SchemeQL?
17:26:01 <shapr> If you've ever written code to generate SQL queries for a business app, you quickly run across cases where query modularity would be handy, and it just gets worse.
17:26:06 <shapr> Jerub: no, url?
17:26:21 <jlouis> shapr: By query modularity you mean?
17:26:34 <jlouis> the ability to break queries into smaller pieces?
17:26:34 <Jerub> del.icio.us/jerub/paper possibly
17:26:50 <shapr> I mean that you have to generated a where case if you have conditions, but not if you don't have conditions
17:27:00 <shapr> but what about subqueries?
17:27:40 <Jerub> shapr: it can do unions and outer joins.
17:27:41 <Jerub> ;)
17:27:47 <Jerub> and subqueries, everything.
17:28:10 <shapr> I've had to debug page-long SQL queries with multiple nested queries, it's not fun.
17:28:16 <Jerub> dammit
17:28:36 <Jerub> http://citeseer.nj.nec.com/welsh02schemeunit.html
17:28:42 <Jerub> sorry, didn't have the url files under papers.
17:29:07 <shapr> one major problem with SQL is that it's rarely the host language for an application
17:29:16 <Jerub> shapr: yes!
17:29:50 <shapr> so you have to map your logic to SQL, figure out what parts to do in the host language, what parts to do on the server, or whether you should be using stored procedures, etc etc
17:29:55 <Jerub> same as html/xml generation. which is why I like nevow.stan
17:30:13 <shapr> then you run across the problem that different SQL servers use different flavors of SQL
17:30:17 <Jerub> shapr: schemeql allows you to have queries (and subquries) as first class variables.
17:30:34 <shapr> PostgreSQL lets you select the parts of a date field if you want, but nobody else does it the same way.
17:30:48 <Jerub> ahh, you're talking about ADODB style.
17:30:49 <Jerub> yuck.
17:32:53 <shapr> one approach is to use "generic SQL" and then remap that to backend-specific SQL, that's what SQLrelay does.
17:33:22 <shapr> in my opinion, the best approach is to have database support built into the language I'm using
17:33:26 <shapr> that's what HaskellDB does for me.
17:33:41 <shapr> I can't get the SchemeQL page
17:34:05 <shapr> http://schematics.sourceforge.net/schemeql.html
17:34:59 <shapr> Jerub: do you have any SchemeQL demo code?
17:35:32 <shapr> jlouis: also, the examples I'm putting on that page are purposely explicit in hopes of being more clear
17:35:44 <Jerub> shapr: its in the paper.
17:36:09 <jlouis> shapr: they are clear. I just do not want to type all that bollocks
17:36:12 <Jerub> I've never used it, I was just reviewing the concept of having little languages.
17:36:27 <Jerub> http://citeseer.nj.nec.com/welsh02schemeunit.html
17:37:21 <jlouis> So I was hunting for why some people would do it. Now I remember Kleisli/CLS and things like that
17:37:34 <shapr> what's Kleisli/CLS?
17:39:05 <jlouis> Kleisli/CPL was the correct name
17:39:05 <shapr> You'll end up typing less with Haskell and HaskellDB than with SQL and another language for most problems.
17:39:57 <jlouis> http://homepages.inf.ed.ac.uk/wadler/realworld/kleisli.html
17:40:18 <jlouis> there is probably some research papers out there on it too. IIRC it is an advanced SQL preprocessor
17:41:20 <shapr> I worked on a medical booking system in J2EE that was supposed to handle 200,000 students in southern finland, something like HaskellDB in Java would have made my life very much easier.
17:43:12 <jlouis> SQL is not good. 
17:43:33 <shapr> it is popular, though.
17:43:41 <shapr> and it doesn't suck too bad for small things.
17:43:53 <Smerdyakov> What?!
17:43:56 <Smerdyakov> SQL is GREAT.
17:44:01 <shapr> object databases are easier to use, but also easier to screw up.
17:44:02 <GreyLensman> thank you.
17:44:16 <shapr> yes, SQL is good for job security.
17:44:30 <Smerdyakov> SQL is GREAT for what it's supposed to do!
17:44:45 <shapr> HaskellDB is better.
17:44:48 <Smerdyakov> Which is query relational databases
17:45:09 <Smerdyakov> I'm not familiar with HaskellDB.
17:45:27 <shapr> it's worth investigating.
17:45:31 <Smerdyakov> I think any SQL bashing here is missing the realization that SQL is one of the most popular and successful declarative programming languages ever.
17:45:41 <Smerdyakov> Sorry.... s/programming// , except with some extensions.
17:45:58 <shapr> I'm bashing the lack of modularity, lack of higher-order functions, that sort of stuff.
17:46:20 <Smerdyakov> Higher order functions? That's not terribly relevant to the domain.
17:46:31 <shapr> you must not have used SQL much.
17:46:46 <Smerdyakov> I guess not!
17:48:15 <shapr> I worked on a trust management system that tracked stocks from seven international stock info brokers
17:48:39 <Smerdyakov> Oh, so you helped capitalists keep you oppressed? :D
17:48:42 <jdrake> from a story: "This body is built from the genome that was embedded within your perceptual net. We think it must have been yours, because why else hide seven gigabytes of DNA there? "   Does it seem a little small (7gb) for an entire genome?
17:48:42 <GreyLensman> Smerdyakov, is right, again, as usual.  In the real, big bad world gentleman, SQL is your trusty sidearm.  Its not perfect but its damn effective.
17:49:49 <shapr> when you've spent a few hours debugging page-long SQL queries with multiple subselects, you'll bash the lack of higher order functions to.
17:50:57 <shapr> too
17:50:58 <shapr> fooey
17:51:33 <shapr> well, I think you guys should try HaskellDB, and tell me if you think SQL is better, and why.
17:51:44 <jlouis> and it did not stand up to mapping genomes apparently
17:51:59 <shapr> what, SQL?
17:52:02 <jlouis> for smaller problems it kills though
17:52:07 <jlouis> yes, SQL
17:52:30 <shapr> that sounds neat, do you have an url?
17:56:06 <shapr> well, sleeptime for me.
18:29:18 <blackdog> jdrake: isn't there a whole lump of useless dna in the genome?
18:30:03 <clausen> blackdog: that is not known
18:30:15 <clausen> blackdog: there is lots of DNA that hasn't been accounted for, but is not necessarily useless
18:30:43 <clausen> (DNA has uses other than describing how to build proteins)
18:31:37 <clausen> (or, some proteins might be synthesized rarely)
21:58:35 <SyntaxLaptop> 'night all
23:55:14 <stepcut> lets say I declare a type --> data MyMaybe = Something a | Nuttin
23:55:46 <stepcut> oops
23:55:53 <stepcut> data MyMaybe a = Something a | Nuttin
23:56:26 <stepcut> can I declare an instance of Monad for a only MyMaybe Int?
23:56:44 <stepcut> something like: instance Monad (MyMaby Int) where ....
23:56:52 <stepcut> i think the answer is no, but...
23:57:06 <stepcut> i think my typing is terrible too
