00:16:39 <Jerub> stepcut: interesting.
00:16:43 <Jerub> stepcut: have you tried it?
00:18:23 <ibid> stepcut: Monad needs a type constructor, not a type; MyMaybe Int is a type
00:36:25 <Lunar^> clausen: Are you the author of the small note shapr pointed me about functional programming oriented filesystem ?
01:07:13 <clausen> Lunar^: probably, yes
01:07:48 <Lunar^> clausen: Are you still interested in this domain ?
01:07:56 <clausen> not really
01:08:03 <clausen> I mean, I still think it's interesting
01:08:10 <clausen> but I'm not spending any time on anything related
01:08:23 <clausen> (and don't really expect to)
01:08:36 <clausen> that said, I think it is good to be able to "multi-task"
01:09:08 <clausen> I am doing research in reputation systems now
01:10:05 <Lunar^> That's because hOp will need something like a filesystem sooner or later
01:11:25 * clausen better get back to family dinner...
01:11:34 <clausen> feel free to email me (clausen@gnu.org)
01:12:04 <Lunar^> Sure, thanks :)
01:48:41 <stepcut> ibid: thanks, that's what I "knew" but did not know how to say
02:40:38 <seafood_> Igloo: Could I ask you a question about Syntax.hs?
02:40:56 <seafood_> Igloo: Why is Module(..) not exported?
04:42:14 <Jerub> with pattern matching, say I had
04:42:22 <Jerub> instance Show Expr where
04:42:42 <Jerub>   show (App l o) = (show l) ++ (show o)
04:43:41 <Jerub> how do I make it do something different for when 'o' is one of "data Op = Plus | Multiply"
04:43:53 <Jerub> but something else where 'o' something else.
04:44:43 <Igloo> seafood_: I imagine it's just an oversight
04:44:55 <phubuh> Jerub: you could use a boolean guard
04:44:58 <cptchaos> show (App l o) = case o of 
04:44:58 <cptchaos>                           (Plus) -> plusshow
04:44:58 <cptchaos>                           _       -> default
04:45:16 <cptchaos> hm, crappy layout
04:45:42 <cptchaos> for example
04:46:08 <cptchaos> where plusshow and default are the strings, that show should return
04:46:29 <Jerub> cptchaos: yeah, but I'm going to have 10+ 'Op' things.
04:47:00 <Jerub> I really want to be able to say case type o of (Op) -> ophow
04:48:16 <cptchaos> so o is Higher Order?
04:48:45 <phubuh> values don't carry type information with them in runtime
04:49:42 <cptchaos> maybe template hakell could help, to simplyfy the case expression
04:49:57 <Jerub> okay, I'll just refactor and leave it like that. ;)
04:49:58 <cptchaos> but I don't see a way around at the moment
04:57:33 <Jerub> thats fine.
04:59:42 <Jerub> I wish I were a better programmer. :/
05:01:40 <phubuh> don't we all?
05:11:08 <Jerub> phubuh: I seldom feel helpless while programming.a
05:11:26 <Jerub> and at the moment I'm trying to write a compiler, from a made up language -> parrotcode.
05:42:59 <Lunar^> Why doesn't Control.Concurrent.QSem have something like withQSem :: QSem -> IO a -> IO a ?
05:50:34 <Jerub> *gnnnrrrr*
07:47:21 <jackofalltrades> anyone know about algebraic types in haskell?
07:48:21 <Smerdyakov> Yes
07:48:46 <jackofalltrades> great do you mind looking at some code?
07:49:23 <jackofalltrades> ata Expr = Lit Int | Add Expr Expr | Sub Expr Expr
07:49:36 <jackofalltrades> sorry
07:49:43 <jackofalltrades> data Expr = Lit Int | Add Expr Expr | Sub Expr Expr
07:50:29 <jackofalltrades> eval :: Expr -> Int
07:50:29 <jackofalltrades> \neval (Lit n) = n\n
07:50:29 <jackofalltrades> eval (Add e1 e2) = (eval e1) + (eval e2)\n
07:50:29 <jackofalltrades> eval (Sub e1 e2) = (eval e1) - (eval e2)
07:51:17 <Smerdyakov> I now see your code.
07:51:46 <jackofalltrades> it is syntatically correct, but when i use eval i always get an unresolved overloading exception
07:52:05 <Smerdyakov> Example?
07:52:14 <jackofalltrades> eval 4
07:52:25 <Smerdyakov> 4 is not an Expr.
07:52:44 <jackofalltrades> yes it is. 4 is a Lit and Lit is an expression
07:53:40 <Smerdyakov> No.
07:53:46 <Smerdyakov> 4 is not a Lit.
07:53:52 <Smerdyakov> You should re-read your book about this.
07:54:15 <jackofalltrades> ohhhhhh
07:54:22 <jackofalltrades> eval (Lit 4)
07:54:37 <jackofalltrades> right?
07:54:43 <Smerdyakov> Does it work?
07:55:14 <jackofalltrades> yeah
07:55:18 <jackofalltrades> thanks
07:55:45 <jackofalltrades> i just didnt have all the brain cells working...
09:23:56 <Lunar^> Caution : lazyness bites sometimes
09:34:19 <shapr> mostly when I get hungry and don't feel like shopping
09:34:51 <Lunar^> lol
09:36:51 <Smerdyakov> shapr, you don't live near any restaurants?
09:46:26 <Lunar^> *sigh*
09:46:42 <Lunar^> I can't find a way to describe a keymap that satisfies me :(
09:48:17 <ecraven> what do you want in it?
09:56:58 <Lunar^> ecraven: keys, deadkeys, shifted keys, alt keys, alt+shift keys
09:57:35 <Igloo> deadkeys?
09:59:05 <Lunar^> Igloo: That's orthogonal to other categories : the ability for a key to be buffered and then combined with the next key
10:00:02 <ecraven> Lunar^: under linux? x or console?
10:01:08 <Lunar^> ecraven: It's for hOp :)
10:01:14 <ecraven> hOp?
10:01:28 <Lunar^> http://www.macs.hw.ac.uk/~sebc/hOp/
10:06:00 <ecraven> cool!
10:06:32 <Lunar^> Sure :)
10:21:24 <Lunar^> There's enough now to start working on something like readline
10:21:32 <Lunar^> think think think
10:28:29 <shapr> does readline require curses?
10:29:30 <skie`> no, it's a seperate library afaik
10:29:52 <ibid> in modern unix systems, all character-cell stuff requires curses
10:29:59 <ibid> because curses contains termcap
10:30:03 <ibid> terminfo, sorry
10:30:17 <shapr> so, hOp needs terminfo?
10:30:42 <shapr> or at least enough info to place characters on the screen somehow
10:31:02 <ibid> you could perhaps add a terminfo-independent mechanism to readline that moves cursors
10:31:16 <skie`> er, doesn't curses sit on top of termcap/terminfo?
10:31:20 <ibid> terminfo is just the portable way of describing escape sequences
10:31:33 <ibid> skie`: terminfo is a part of ncurses
10:31:40 <ibid> skie`: but theoretically, you are right
10:31:54 <ibid> termcap was separate but it is obsolete
10:32:01 <skie`> ah
10:40:58 <Lunar^> shapr: Haskell should be good enough to rewrite something similar to readline, without using it
10:47:45 <stepcut> anyone know of good latex class file for formatting a two-column paper?
10:57:45 <ibid> use the publication's class file
11:01:11 <stepcut> well, there is no publication, that is the problem...
11:01:18 <stepcut> for now I am using a ieee class file...
11:02:10 <ibid> in that case, i'd just use one of the standard classes
11:22:32 <shapr> Lunar^: I agree, when can we hack on the next source release?
11:31:45 <Lunar^> shapr: *sigh* My sister has a bipolar disorder, and we're in the middle of a crisis right now. My laptop is still on repair, and I have to do this Plone work.
11:33:08 <Lunar^> shapr: One or two week more, I hope
11:34:10 <shapr> no worries
11:35:01 <Lunar^> I would like to spend all my time on this project
11:35:13 <shapr> I understand, I'd like to spend all my time writing Haskell
11:49:43 <stepcut> Lunar^: are you familiar with eros-os?
11:51:59 <Lunar^> stepcut: Never eard, sorry
11:54:38 <stepcut> Lunar^: are you at all familiar with capabilities based security?
11:55:28 <Lunar^> stepcut: I met a PhD student working on this subject 
11:55:40 <Lunar^> stepcut: But I need to learn more :)
11:55:48 <stepcut> http://www.eros-os.org/essays/capintro.html
11:56:04 <stepcut> that is a nice intro, there are a bunch of papers and articles on the eros site 
11:56:53 <Lunar^> stepcut: Thanks
11:56:55 <stepcut> by combining a safe language like haskell, which capabilites based security, it seems like you could turn out a very nice, very secure OS
11:57:09 <stepcut> s/which/with/
11:57:26 <ayrnieu> with another feature of eros-os: persistence
11:58:32 <Lunar^> stepcut: Sure :) Rewriting the scheduler is the first step anyway
11:58:57 * stepcut is off to lunch, bbiab
11:59:04 <Lunar^> stepcut: But, really, bufferflow attacks on a copying garbage-collected memory is quite hard :)
11:59:30 <shapr> that sounds like a quote
12:00:14 <Lunar^> ?
12:02:06 <shapr> that sounds like an amusing quote about implementing operating systems in Haskell
12:02:28 <shapr> I have to remember that so I can say it again sometime
12:04:29 <Lunar^> It's under copyleft :)
12:05:00 * shapr grins
12:07:53 * shapr goes off to be social
12:09:32 <Lunar^> You were social :)
12:30:04 <Lunar^> dev lOg updated
12:39:29 * Jerub waves
12:41:39 <Lunar^> stepcut: I love that one "A better solution is not to have a common file system"
12:55:01 <Jerub> scoooooooore!
12:55:06 * Jerub does a victory lap.
12:55:17 <Jerub> I slept on my problem, and now I've done it.
12:55:26 * Jerub has expressions executing properly now.
12:55:27 <Lunar^> cool
12:55:57 <Jerub> now I probably have to do something like type inference.
12:57:46 <Jerub> naah
13:44:09 <Jerub> yay! branching
13:44:16 * Jerub goes to work.
20:03:30 <reltuk> does anyone really do literate haskell programming?
20:08:01 <jdrake> interesting question, i have only heard of that 'method' of programming once or twice
20:09:18 <reltuk> some tips on doing it regarding editors and style are on the wiki...
20:09:23 <reltuk> which must mean some people are using it...
20:09:37 <jdrake> what was it again?
20:10:12 <reltuk> literate programming
20:10:42 <jdrake> method not the name
20:11:10 <reltuk> oh, you basically write about the software...the code is secondary
20:11:11 <Pseudonym> Haskell's "literate programming" isn't really the same as Knuth's.
20:11:17 <reltuk> you mark up your comments with tex or latex...
20:11:41 <reltuk> or rather...you interject your code in latex/tex files describing the software
20:11:56 <jdrake> reltuk, in haskell if I understand correctly you are describing the software 
20:12:24 <reltuk> Pseudonym, how does it differ?  less extreme?
20:12:32 <Pseudonym> Yes, less extreme.
20:13:09 <Pseudonym> The idea behind literate programming is that you should write your program in the best "literate" order.
20:13:18 <Pseudonym> Not the order which the compiler would prefer.
20:13:31 <Pseudonym> So, for example, I should be able to relegate the contents of a "where" clause to an appendix.
20:13:33 <jdrake> i write programs in the logical order i think of the things it needs
20:14:29 <jdrake> in haskell your programs are basically math proofs aren't they?
20:15:16 <Pseudonym> Uhm... I wouldn't put it that way, exactly.
20:17:14 <Smerdyakov> Pseudonym, what was the book about the thought processes of programming that you recommended in a k5 comment which went with a doomed article?
20:17:14 <Jerub> the functions are much shorter in haskell regardless.
20:17:33 <Pseudonym> Oh, The Psychology of Computer Programming.
20:17:37 <Pseudonym> Gerard Weinberg.
20:17:53 <Smerdyakov> jdrake, they are proofs, but not of all the facts you need to know to be sure your program works.
20:18:01 <Smerdyakov> Pseudonym, thanks
20:18:02 <Jerub> literate C's style of having functions split up over different files is born out of 100+ line functions.
20:19:07 <Pseudonym> I have 100+ line functions in Haskell, if you count the "where" clauses.
20:19:17 <Jerub> Pseudonym: fair enough then.
20:19:35 <Jerub> I have a compiler capable of emiting parrot bytecode in 308 lines.
20:19:42 <reltuk> holy crap...that definition of map (map f xs = [f x | x <- xs]) is great  :-p
20:19:59 <reltuk> Jerub, for what language?
20:20:50 <jdrake> in that tutorial (that I would call a book) it refers to haskell as sometimes being hard to debug. Is this true at all?
20:21:00 <Jerub> reltuk: just something I made up, it kinda looks like php.
20:21:56 <reltuk> Jerub, ahhh, sounds neat...how's Parot coming along anyway?  is it sane?
20:23:00 <Jerub> its quite insane actually.
20:23:10 <Jerub> imcc is more like pseduocode than asm now
20:23:36 <reltuk> Jerub, is that a good thing or a bad thing?
20:24:45 <Jerub> reltuk: I dunno, its kinda nice for emiting bytecode I guess
20:26:38 <reltuk> anyone know of a good example haskell program that I could look at?  nothing too complicated, but nothing trivial either?
20:27:09 <reltuk> I still don't understand how you can write a program with no mutable datastructures
20:27:34 <reltuk> things as simple as loading a 3d model seem to become impossible  :-p
20:28:17 <Jerub> http://thorne.id.au/users/stephen/haskell/
20:28:19 <Jerub> there's my compiler.
20:28:32 <Jerub> yikes.
20:28:40 * Jerub reconfigures webserver to provide that as text/plain
20:29:14 <reltuk> thanks  :)
20:30:31 <jdrake> is there any obfuscation methods for email address that work on text only and still look somewhat professional?
20:30:32 <ozone> Jerub: i see you're not the only one interested in a haskell->parrot compiler :)
20:30:43 <ozone> s/only one/another one/
20:33:22 <Jerub> jdrake: "myusername at myhost dot com"
20:33:30 <reltuk> heh, this is well over my head
20:33:50 <Jerub> reltuk: probably!
20:33:59 <Jerub> you should probably read the parsec paper if you want to understand.
20:34:34 <Jerub> reltuk: in this context, a Parser is a monad, and its parsing source using that monad.
20:34:52 <reltuk> I love how learning haskell makes me feel like an idiot  :)
20:34:57 <Jerub> reltuk: hah!
20:35:10 <Jerub> I've been feeling like an idiot for about 5 days trying to get this working ;)
20:36:12 <ozone> Jerub: parse error, Main.hs line 134
20:36:26 <ozone> Main.hs:134: parse error on input `do'
20:36:35 <Jerub> crap.
20:37:58 <Jerub> I was fiddling with that earlier, I removed the {;;} stuff because I didn't like it.
20:38:20 <ozone> you're writing a haskell -> parrot compiler?
20:39:37 <reltuk> parsec is an LL parser?
20:41:05 <Jerub> reltuk: infinite lookahead.
20:41:14 <Jerub> ozone: no, arbitary tiny language -> parrot
20:42:31 <Pseudonym> I tried to write a parrot -> parrot optimiser once.
20:42:41 <Pseudonym> A couple of years ago, when parrot was new.
20:42:48 <Pseudonym> It's not very well designed for that.
20:42:55 <Pseudonym> (Nor does it have to be.)
20:43:16 <ozone> Jerub: hmm, how are you translating expressions?
20:47:06 <Jerub> ozone: uhh, reletively simply.
20:47:10 <Jerub> I snarfed some example code.
20:47:34 <ozone> sorry, you're translating each expression to a function, via continuations ...?
20:48:08 <Jerub> oh, okay, sorry.
20:50:03 <Jerub> 'a' ++ 'b'; becomes new .Work, .PerlString ; set .Work, 'a' ; save .Work ; new .Work, .PerlString ; set .Work, 'b' ; restore .Temp ; concat .Work, .Work, .Temp"
20:51:03 <Jerub> 'restore' and 'save' are push+pop operations on a generic stack.
20:52:50 <ozone> what about applications of non-built in functions?
20:58:52 <Jerub> ozone: haven't written that yet ;)
20:59:03 <ozone> Jerub: ah :)
20:59:26 <Jerub> but, hwen I actually do it, it'll be .Work = function(.Arg, ...) probably
20:59:30 <Jerub> becuase imcc is that crazy.
21:01:18 <ozone> imcc doesn't have a function(...) construct, afaik
21:01:25 <ozone> (hopefully i'm wrong)
21:01:35 <ozone> (or maybe i shouldn't be that hopeful)
21:05:35 <Jerub> it does as of last month
21:05:36 <Jerub> :)
21:08:43 <Jerub> http://groups.google.com/groups?selm=404F3777.9040005@toetsch.at
21:08:46 <ozone> Jerub: sheezuz.  i guess that uses a specific calling convention?
21:09:20 <ozone> Jerub: oh, yeah, now i remember that message
21:09:36 <ozone> i would've thought a sub pmc adds extra overhead, hmm
21:12:32 <Jerub> ozone: how complex is the haskell run time?
21:13:26 <ozone> i don't know a lot about it, but i'd wager that GHC's runtime is pretty complex
21:13:29 * stepcut finally figured out how to use those damn o'caml functors
21:16:45 <Pseudonym> GHC's runtime is about 50kloc.
21:16:56 <Pseudonym> Conceptually, it's not that complex.
21:17:00 <Pseudonym> The devil is in the details.
21:19:00 <Pseudonym> For example, a lot of that is to support GHCi.
21:19:55 <Pseudonym> Quite a bit is to support threads, too.
21:21:38 <Jerub> interesting.
21:21:53 <Pseudonym> Well, GHC implements its own threads.
21:22:03 <Jerub> okay.
21:22:27 <Jerub> I'm thinking about writing a little language of some kind.
21:22:46 <Pseudonym> Oh, and there's a lot there to support various kinds of profiling.
21:23:01 <Jerub> I'm thinking of some kind of hybrid between nevow.stan and php
21:23:07 <Pseudonym> OK
21:23:42 <Jerub> having xml as first-class variables of course ;)
21:26:23 <Jerub> I'm having a heck of a lot of fun either ay.
21:28:02 <Etaoin> Jerub: I looked at woven a while ago. what's stan?
21:29:44 <Jerub> Etaoin: stan is crazy python voodoo
21:30:16 <Jerub> using __call__ and __getattr__ you can do span[ a(href='http://...')['bar'] + [ x for x in baz ] ]
21:30:21 <Etaoin> is that using __getitem__ and __call__ in crazy ways?
21:30:39 <Jerub> er yeah, __getitem__ not __getattr__
21:31:06 <Etaoin> neat
21:34:00 <ozone> Pseudonym: was it you who was pondering about needle?
21:34:14 <Pseudonym> I don't think so.
21:35:04 <ozone> must've been Riastradh
21:35:13 <ozone> (the other white meat)
21:36:28 <Jerub> whats needle?
21:40:20 <ozone> http://www.nongnu.org/needle/
21:51:29 <Jerub> okay.
21:51:32 <Jerub> its the ideal language.
21:52:19 <Jerub> last updated '02, is it still in development, or is it stalled?
21:56:55 <Jerub> actually, I find that facinating, becuase I'm pondering over things like "should I do string interpolation"
21:59:15 <ozone> i think it's stalled.
21:59:37 <ozone> and yes, you should definitely do string interpolation :)
22:00:06 <Jerub> yes, but *how*
22:00:18 <ozone> via a macro, i say
22:00:32 <Jerub> compile-time macro?
22:00:43 <ozone> sounds good
22:01:00 <ozone> + syntactic sugar, so that people actually use the macro
22:01:13 <ozone> (something like perl's '' vs "" is great)
22:01:23 <Jerub> I write lots of php.
22:01:31 <Jerub> I hate php's '' vs ""
22:01:49 <ozone> i presume php's '' vs "" is the same as perl's?  ('' doesn't interpolate, "" does)
22:02:05 <Jerub> '' doesn't eeven obey \n escaped things.
22:02:08 <Jerub> yeah.
22:02:37 <ozone> python also has a nice syntax for it: "" vs r"" vs u"", etc
22:02:42 <Jerub> I'd prefer pythonesque, r'\n' for a raw string
22:02:53 <Jerub> I also like triplequoted strings.
22:04:03 <Jerub> I'm even considering generalising it.
22:04:03 <Jerub> i.e.
22:04:19 <Jerub> sql'select * from foo where bar = $baz'
22:04:41 <ozone> totally
22:04:57 <Jerub> that could be user-defined too.
22:05:58 <Jerub> where a user-func gets the string and an assoc array of the interpolated variables.
22:08:08 <ozone> are you at UQ, btw?
22:09:16 <Jerub> no, I'm a UQ graduate ;0
22:09:30 <ozone> right :)
22:09:56 <Jerub> whys that?
22:12:10 <ozone> just curious
22:12:56 <Pseudonym> I like that UQ is so convenient for Parliament House
22:13:03 <Pseudonym> There isn't even a fence.
22:18:21 <Jerub> sorry?
22:19:36 <Jerub> they're not adjacent....
22:21:08 <Jerub> http://xrl.us/bssu (Link to www.whereis.com.au)
22:21:31 <Jerub> the campus is on the right, parliament house is off the map to the north-west.
22:23:10 <Jerub> ozone: how did you pick UQ anyway?
22:24:07 <Pseudonym> Oh, duh.
22:24:10 <Pseudonym> I was thinking of QUT.
22:24:21 <Pseudonym> Sorry, my mistake.
22:24:28 <Pseudonym> It's been a while since I was last in the area.
22:27:12 <Jerub> http://www.haskell.org/hawiki/QuotesPage <- I'm trying not to laugh my head off.
22:27:43 <reltuk> my laptop is so botched...it's power supply just stops giving it power from the outlet...
22:27:45 <Pseudonym> Jerub, there's an easy way to avoid laughing hard.
22:27:56 <Pseudonym> What you need to do is think about something very sombre and serious.
22:28:11 <Pseudonym> A friend of mine uses the following thought, and it helps her...
22:28:13 <reltuk> I'm hoping it's the external power thing as opposed to the actual laptop...because the external power-thing can be replaced for like $100, but the laptop getting serviced would probably cost more
22:28:16 <Pseudonym> DEAD BABY DUCKS.
22:28:52 <Pseudonym> So when you need to avoid cracking up completely, just think: DEAD BABY DUCKS.
22:34:51 <Jerub> sorry, not working
22:35:01 <Pseudonym> Oh well.
22:35:12 <Pseudonym> You need to say it in your best undertaker's voice, BTW.
22:35:14 <Pseudonym> That may help.
22:35:28 <Pseudonym> It's a very sombre thought.
22:39:24 <Jerub> ;)
22:39:29 <Jerub> hey, I'm on that page!
22:55:39 <`John> Pseudonym, more reason to follow rules.
22:55:43 <`John> that sucks.
22:55:58 <Pseudonym> Sorry, which rules?
22:57:09 <reltuk> are there any better windows postscript viewers than ghostview?
22:57:41 <Jerub> reltuk: ps2pdf with the correct fonts followed by acrobat
22:59:57 <reltuk> *grumble* why must citeseer be down?
23:00:06 <Pseudonym> You do know it moved, don't you?
23:00:13 <reltuk> to where?
23:00:36 <Pseudonym> citeseer.ist.psu.edu
23:00:58 <reltuk> yeah, that's the link I have...not connecting for some reason
23:01:13 <Jerub> citeseer
23:01:23 <Pseudonym> http://c2.com/cgi/wiki?CiteSeer
23:01:25 <Jerub> I know 4th year undergrads who've never heard of it.
23:01:37 <Pseudonym> Anyone who has used google to look for a paper has heard of it.
23:01:38 <reltuk> how can you have not heard of citeseer?
23:02:41 <reltuk> must be down for now...
23:02:51 <reltuk> I'm hardly a 2nd year undergrad and I use citeseer all the time
23:03:22 <Jerub> yes, nuts isn't it.
23:04:50 <ozone> Jerub: oh, UQ, QUT ... just saw your qld.au domain
23:10:37 <Pseudonym> Must head off.
23:10:44 <Pseudonym> Nytol!
23:39:11 <reltuk> how old is Haskell?
23:39:58 <ayrnieu> Haskell98?  Probably about 6 years.
23:44:43 <reltuk> lol
23:46:15 <Cale> Its design is influenced by Miranda which dates back to 1985 though.
23:50:54 <reltuk> gofer? (this Monad paper talks about gofer and comprehension syntax, and monad comprehension syntax, etc.)
23:51:32 <Cale> Gofer as well. iirc, Gofer was a project to make a free Miranda.
23:52:00 <reltuk> haskell > gofer?
23:52:14 <Cale> Haskell is newer than gofer.
23:52:38 <Cale> Hugs is the "Haskell User's Gofer System".
23:52:55 <reltuk> oh....interesting
23:58:52 <earthy> actually, haskell 98 incorporates much of gofer's functionality
23:59:12 <earthy> but Haskell itself *isn't* newer than gofer, they were parallel developments
