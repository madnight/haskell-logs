00:01:07 <blackdog> nobody expects purple.
00:23:13 <shapr> sam-: yes, it's in haskell-libs.sf.net cvs tree
00:23:59 <shapr> sam-: http://cvs.sourceforge.net/viewcvs.py/haskell-libs/libs/takusen/src/
00:43:50 <shapr> hi adept 
00:44:06 <shapr> so, what's the latest news in the Haskell world?
00:46:45 <Lunar^> Hi shapr 
00:46:52 <shapr> hey Lunar^, what's going on?
00:47:03 <Lunar^> surrounded by 800 servers making a lot of noise
00:47:08 <shapr> neat!
00:47:14 <shapr> beowulf cluster?
00:47:21 <shapr> colo isp?
00:47:28 <Lunar^> Nope, just saving a server from his failling disk
00:47:43 <Lunar^> Spent yesterday afternoon, the copy went all night long
00:48:03 <shapr> oh
00:48:06 <Lunar^> Seems to be good now, I will aprieciate silence after that
00:48:11 <shapr> yes, I understand
00:54:05 <shapr> hey cptchaos 
00:54:07 <shapr> wassup?
00:54:26 <cptchaos> woke up to early ...
00:54:37 <shapr> oh, that sucks
00:54:59 <cptchaos> yes!
00:55:12 <shapr> I have realized that I really like seeing sunshine
00:56:10 <cptchaos> unless it isn't darkening my screen, me too
00:56:13 <cptchaos> :-)
00:56:19 <shapr> that's true
00:57:15 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental","new HC&A Report - http://www.haskell.org/communities/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html", "Donate your brain! - hawiki/UsingHaskellWikiMaterial"]'
00:57:15 --- topic: set by kowey on [Sat Feb 21 03:51:13 2004]
00:59:41 <blackdog> hey shapr. done any haskell gui programming?
01:00:08 <shapr> not really, just played with some demos
01:00:16 <shapr> I tried gtk2hs and wxHaskell
01:00:45 <blackdog> any recommendations?
01:01:25 <shapr> according to SPJ et al during HIM 2003, wxHaskell is the choice to be encouraged
01:01:34 <edwinb> wxHaskell is nice
01:01:47 <blackdog> :) Yeah, I know. I was sitting next toyou, remember?
01:02:03 <shapr> blackdog: aw c'mon, you were across the room next to seafood
01:02:10 <shapr> I was sitting next to Wolfgang Thaller ;-)
01:02:38 <blackdog> sorry, was thinking of icfp. :)
01:02:48 <shapr> right, that was fun
01:03:06 <shapr> I really had the urge to scrape up a leather jacket like yours and we could be the lambda gang or something
01:03:11 <blackdog> yeah. man, you're lucky, swedish girls are babes. :)
01:03:40 <blackdog> sucker hackers betta reco'nise.
01:03:55 * shapr laughs
01:04:38 <shapr> aw, no pix of the leather jacket - http://www.syntaxpolice.org/pics/londonSweden/small/ICFP/6.html
01:05:14 <shapr> blackdog: so, was your ICFP laptop retired with honor?
01:05:24 <blackdog> might be some on seafood's site.
01:05:31 * shapr looks
01:05:53 <blackdog> yep. my mum's using it for email now. :)
01:06:34 <shapr> oh man, I dreamed about Fritz Ruehr last night, that was mind altering.
01:06:47 <blackdog> I've got an even heavier ibm thinkpad now.
01:07:17 <blackdog> man... what was thatstory e told us in the pizza shop? I can't remember anything but being vaguely scandalised and hugely amused.
01:07:48 <shapr> hm
01:07:55 <shapr> I don't remember either.
01:08:03 <shapr> did we have beer before that?
01:08:40 <blackdog> before, after and during, i think.
01:09:18 <shapr> I gotta drop by and drink some fosters, you know, american stereotypical behaviour and all that.
01:10:02 <shapr> what sort of gui are you writing?
01:12:09 <blackdog> ugh. please don't. Australian beer isn't great (with a few honourable exceptions: Boag's, Hazard's, Squire's and Eumundi are ok), but even I won't drink Foster's.
01:12:23 <blackdog> Ah, it's a java app, but i figured i'd prototype it in haskell first.
01:13:03 <blackdog> pretty simple, i suspect. coupla drop down menus... could have done it as a web app, really, but they want offline operation.
01:13:07 <shapr> I've done several apps with gui in Java, I usually prototype with Jython
01:13:42 <shapr> you could use XUL
01:14:05 <shapr> have you seen the Amazon Browser?
01:15:36 <shapr> http://www.infodraft.com/~faser/mab/
01:30:34 <blackdog> Hm, that's an idea. i'll have a look.
01:31:22 <shapr> XUL does require Mozilla, dunno if your clients find that limiting
01:52:13 <shapr> yow!
01:52:17 <shapr> good morning #haskell!
01:54:22 <polli> shapr: mornin'
01:54:23 <Lunar^> back to a safer place
01:54:45 * shapr bounces
01:55:25 <Lunar^> shapr: I need to spend some time on a nice way to handle bitfield
01:55:43 <Lunar^> shapr: sebc thaught about a combinator library like
01:56:28 <Lunar^> shapr: bit "InputFull" <> bit "OutputFull" <> bits 2 "Command"
01:56:54 <Lunar^> shapr: which will then be fed to TH to generate function to access and modify words
01:57:34 <shapr> sounds a lot like a record
01:58:25 <shapr> you're taking inspiration for this from Tomasz' post on haskell-cafe?
01:58:55 <shapr> how does GHC deal with bitfields internally?
02:00:19 <Lunar^> shapr: It's realted
02:01:15 <Lunar^> shapr: But Tomasz actually doesn't handle bitfield, and this way seems to copy a lot of data, which is really unsuitable for a network stack e.g.
02:05:35 <Lunar^> shapr: It's really a complicated problem, and I think new ideas we'll come by testing others
02:05:45 <shapr> yes, that's often the best way
02:06:03 <Lunar^> shapr: Maybe hOp network stack should be purely generated in order to be really fast
02:06:17 <Lunar^> I need to finish this keyboard driver first
02:06:33 <Lunar^> Then implement basic System.IO in order to be able to launch GHCi
02:06:34 <shapr> I want hOp to reach self-hosting
02:06:38 <shapr> yes
02:06:56 <shapr> I want a shell
02:07:04 <Lunar^> self-hosting... We would need a filesystem... 
02:07:21 <Lunar^> Or, we don't want file
02:07:42 <shapr> is a filesystem really necessary?
02:07:44 <Lunar^> The idea was to have something that would be able to store an AST directly
02:07:49 <shapr> I like that much better
02:08:02 <Lunar^> What do you mean by self-hosting so ?
02:08:27 <shapr> meaning that hOp can rebuild itself from inside itself, and reboot
02:08:43 <Lunar^> shapr: I understood well so
02:08:47 <shapr> right :-)
02:09:04 <shapr> anyway, once you have a shell, many more things are possible
02:09:29 <Lunar^> shapr: sure, I think I could have something for this week-end
02:09:40 <shapr> that would be immensely cool
02:09:56 <Lunar^> shapr: I found where I want to go next year btw, are you interested in seeing the proposal ?
02:10:00 <shapr> sure!
02:10:47 <Lunar^> http://www.pps.jussieu.fr/~cousinea/LMD/MPRI-soumis-11-03.pdf
02:11:30 <Lunar^> It will be hard to get in because I don't have enough "diplome" (?), but showing hOp could replace that (maybe)...
02:12:06 <shapr> I think so
02:14:26 <Lunar^> Things are moving fast (and without any real order) in France because of the harmonization of european cursus
02:14:34 <Lunar^> That could help me
02:14:56 <shapr> I think hOp will help you more :-)
02:15:37 <shapr> just because you can learn things from hOp that most schools don't teach
02:16:22 <Lunar^> shapr: Sure.. :)
02:22:25 <shapr> Lunar^: neat, that MPRI program is associated with chalmers
02:22:48 <Lunar^> shapr :)
02:31:59 * shapr grumbles
02:45:39 <shapr> hmm
02:49:11 <andersca> hey shapr
02:49:19 <shapr> hej andersca 
03:12:52 <ozone> harro
03:12:59 <shapr> g'day ozone 
03:19:24 <ozone> g'day shae
03:20:14 <shapr> hey ozone, do you use emacs and maybe emacs-wiki ?
03:20:40 <shapr> I'm trying to find victims, er, participants for my latest ideas
03:35:40 <Segora> hi
03:40:49 <shapr> hi Segora 
04:15:28 <ozone> shapr: not really, i use vimacs
04:15:52 <ozone> which is what you think it is :)
04:15:59 <shapr> yah, I've heard of it
04:16:42 <ozone> i guess i should point out that i wrote vimacs, which is why i use it ...
04:16:51 <ozone> works for me(TM)
04:18:03 <shapr> the reason I'm asking about emacs-wiki is that it's the only filesystem based wiki I've used before, and so have easy access to.
04:18:39 <ozone> filesystem-based wiki?
04:18:44 <shapr> yup
04:18:46 <ozone> is emacs-wiki an emacs mode, or a wiki progrm?
04:18:54 <shapr> both
04:18:56 <ozone> (can't quite figure it out from the context)
04:18:58 <ozone> oh, right :)
04:21:09 <shapr> hi _joey_ 
04:21:19 <_joey_> hii
04:24:10 <_joey_> enjoying programming using Haskell?:)
04:26:51 <shapr> yes!
04:26:53 <shapr> very much so!
04:27:06 <_joey_> amazing
04:27:25 <shapr> actually, using Haskell has really cleaned up some of my for-pay python code.
04:30:36 <_joey_> does ghc come with graphics library?
04:31:19 <shapr> _joey_: what sort of graphics do you want to do?
04:31:22 <Maddas> ozone: viper with emacs?
04:31:40 <ozone> Maddas: well, viper is emacs emulating vim.  vimacs is vim emulating emacs
04:31:47 <Maddas> oh, ok.
04:32:09 <Maddas> what's the difference except that emacs uses elisp and vimacs vimscript? ;)
04:32:16 <_joey_> to create idget and draw geomtrical shapes
04:32:27 <_joey_> just simple stuff 
04:32:53 <shapr> idget?
04:32:55 <_joey_> *widgets
04:32:58 <shapr> oh
04:33:29 <shapr> there's a variety of libraries, SOEGraphics does really basic stuff
04:33:33 <ozone> Maddas: not much; i just find vim to be much easier to customise than emacs
04:33:36 <shapr> if you mean GUI widgets, you'll need something like wxHaskell
04:33:44 <Maddas> ozone: ok
04:33:55 <shapr> ozone: just wait till we have hOpmacs
04:34:02 <ozone> shapr: aiee
04:34:04 <Maddas> haha
04:34:11 <Lunar^> shapr: urg
04:34:15 * shapr grins evilly
04:34:58 <Lunar^> shapr: Hard to do Plone stuff thinking about hOp all the time
04:35:04 * shapr laughs
04:35:05 <shapr> no argument there
04:35:20 <shapr> I've learned a lot about Plone in the last few weeks though.
04:36:06 <ozone> plone == ?
04:36:19 <shapr> it's a CMS for Zope
04:36:25 <shapr> plone.org
04:37:14 * Lunar^ would like to understand how to modelize FRP at OS level also
04:37:25 <shapr> me too
04:37:30 <Lunar^> Because programming driver is exactly FRP
04:37:33 <shapr> yup
04:37:58 <shapr> I'm sort of surprised arrows haven't made their way into GHC internals yet
04:38:01 <ozone> ah
04:38:07 <Lunar^> shapr: They can't
04:38:12 <shapr> why not?
04:38:16 <Lunar^> shapr: GHC is supposed to build with GHC 4.x
04:38:19 <cookie> hi shae =]
04:38:23 <shapr> I thought 6.2 broke that?
04:38:24 <shapr> hi cookie 
04:38:42 <cookie> :)
04:39:13 <Lunar^> shapr: Maybe though, I don't know.. in this case there is really a large part to rewrite
04:39:17 <earthy> A purely functional
04:39:18 <earthy> random library would be rather less useful...
04:39:24 * earthy grins at Simon M
04:39:44 <Lunar^> shapr: I think that 3 or 4000 lines could be trashed then
04:39:54 <Lunar^> shapr: Data.Generics powered
04:40:17 <shapr> Lunar^: I think that somewhere around 6.0 or 6.2 they were able to dump C source for an unregistered build
04:40:38 <shapr> I still haven't investigated Data.Generics, what do they do?
04:40:46 <shapr> should I just RTFM? :-)
04:40:59 <Lunar^> shapr: Free variable detections in just 20 lines for example
04:41:35 <Lunar^> http://www.cs.vu.nl/boilerplate/testsuite/freeNames/Main.hs
04:42:04 <ozone> shapr: they operate over the structure of a data structure
04:42:40 <ozone> or, in better terms, you can write a function and declare that function in a certain way, and then it'll work for any and all data types you throw at it
04:43:00 <ozone> e.g. think of something like ... Python's Pickle, since you're familiar with that
04:43:14 <ozone> so you could write a generic pickle function for haskell
04:43:16 <shapr> sounds more like a Visitor pattern at first thought
04:43:22 <shapr> ozone: great, I want one :-)
04:43:23 <ozone> no :)
04:43:26 * shapr laughs
04:43:46 <ozone> shapr: if you know about HaXmL, you could do a similar thing with generics
04:43:54 <ozone> (write out any haskell data structure as XML)
04:44:01 <shapr> nifty
04:44:06 * shapr thinks about that
04:44:12 <Lunar^> http://www.cs.vu.nl/boilerplate/testsuite/bits/Main.hs
04:44:16 <ozone> declare toXML/fromXML which are generic, and run it over any new data structure you like
04:44:17 <Lunar^> Here's pickle :)
04:45:11 <ozone> shapr: basically, the theory behind it is that when you define a new data type in haskell, it's an algebraic data type
04:45:41 <ozone> i.e. it is either a product, which means it's like a C struct, or it's a sum, which is like a C union
04:45:49 <ozone> and then there's the unit data type
04:46:11 <shapr> that makes sense
04:46:12 <ozone> you all you have to do is define your generic function to work with units, products, and sums, and it can merrily recurse its way through any data type you can whip up
04:46:20 <shapr> that makes perfect sense.
04:46:45 <shapr> that's how showS works with lists, for example.
04:46:48 <ozone> i tried to get pickle working the other week for functions, but gave up about 10% into it when i realised i was over my head. :)
04:46:55 <shapr> what was hard about it?
04:47:06 <ozone> i don't remember
04:47:18 <shapr> do you have any code hanging around?
04:47:30 <Lunar^> ozone: Python's pickle ?
04:47:47 <ozone> something similar to that, yeah.  (i only chose pickle as an example since i know shapr knows Python)
04:47:48 <shapr> thing is, there isn't really type identity in Haskell
04:48:25 <shapr> actually, I learned about Serializable before pickle
04:48:58 <Lunar^> ozone: for Haskell or for Python ?
04:49:03 <shapr> anyways, any code left?
04:49:50 <ozone> shapr: kinda, but it's a bit useless because GHC 6.2 (at least the version i have on mac os x) doesn't have generic instances for the basic types like Int, Char, etc
04:50:30 <shapr> hm, my 6.2 has those
04:50:43 <ozone> ok, so i'll just beat wolfgang over the head since he didn't compile it with -fgenerics :)
04:51:44 <ozone> will send it in a sec ...
04:51:50 <shapr> ok
04:53:04 <ozone> shapr: i'll email it to you
04:53:10 <ozone> shae at scannedinavian.com?
04:54:35 <shapr> you got it
04:55:08 <shapr> I admit, this looks rather stupendous
04:55:13 <kosmikus> Data.Generics is mainly intended for other things than DrIFT or GH ...
04:55:15 <ozone> sent
04:55:51 <shapr> thanks
04:56:03 <ozone> what kosmikus said
04:56:07 <ozone> he's mr. generics :)
04:56:54 <kosmikus> well, not in the sense of (the new) Data.Generics -- that's Laemmel's and PJ's work
04:58:00 <kosmikus> ozone: I didn't realize that you have to compile ghc with a certain flag to allow generics to be used ...
04:58:16 <ozone> kosmikus: this is the new data.generics stuff
04:58:40 <ozone> you can use it, but i can't seem to use some of the basic datatypes
04:58:51 <ozone> (no generic instances of them, or something like that, beats me)
04:59:15 <kosmikus> which instance are you missing?
04:59:45 <shapr> neato
04:59:50 <shapr> *GenericsTest> toXML (Angle SomethingA East)
04:59:50 <shapr> "<==SomethingA--East||!</></>@/>"
04:59:53 <ozone> GenericsTest.hs:55:
04:59:53 <ozone>     Can't derive generic code for `toXML'
04:59:53 <ozone>     because the instance type constructor `Int' was not compiled with -fgenerics
04:59:56 <ozone>     In the instance declaration for `XML Int'
05:00:07 <ozone> there you go
05:00:13 <kosmikus> hmmm
05:00:26 <ozone> shapr: ja, joo like my 1337 choice of punc7u4710n?
05:00:28 <shapr> ozone: this is very spiffy, thanks!
05:00:37 <shapr> 4bs0lut3ly
05:00:37 <ozone> schweet, i got you to say spiffy
05:00:42 * shapr laughs
05:01:48 <kosmikus> so what you are using is actually the "old" Data.Generics features, right?
05:01:53 <kosmikus> "derivable type classes"?
05:02:42 <ozone> kosmikus: errr
05:02:44 <ozone> maybe
05:02:56 <ozone> i was just following the ghc 6.2 docs :)
05:03:22 <ozone> oh, yeah, ghc 6.2 generics looks like it's based on hinze/spj stuff
05:03:25 <ozone> so you're right
05:04:23 <ozone> anyway, off to bed
05:04:27 <ozone> night!
05:04:35 <kosmikus> night
05:06:45 <blackdog> you slacker, andre...
05:07:33 <ozone> hey, blackdog, bite me!  haha!
05:07:57 * shapr snickers
05:08:04 <blackdog> i'll do better than that, i'll post an incorrect url at you...
05:08:31 <ozone> i wonder if it's indicative of something that everytime i try to read a book on design patterns, i can't help but put it down halfway and mutter "that is total bullshit"
05:08:37 <blackdog> it'll be broken  webpages at dawn
05:08:44 <shapr> I really like Design Patterns
05:08:47 <ozone> blackdog: shaa
05:08:49 <shapr> but I like Analysis Patterns more
05:08:54 <ozone> uh oh
05:08:56 <ozone> what the hell are they?
05:09:15 <shapr> the first Robert Martin book, before he wrote Refactoring
05:09:19 <kosmikus> ozone: is the code that produces the error oneline somewhere?
05:09:40 <blackdog> ozone: there's half a chance that's just you, y'know. ("Nob!")
05:10:03 <ozone> blackdog: knobber!
05:10:08 <ozone> shapr: oh, sounds totally boring :)
05:10:20 <ozone> kosmikus: sure, although it's not that interesting
05:10:22 <shapr> I'm regularly tempted to write up some sort of web calendar system in Haskell that uses the Analysis Patterns
05:10:41 <ozone> kosmikus: incoming dcc
05:10:49 <ozone> let's see if my stupid work machine can send a dcc through their anal firewall
05:10:55 <shapr> something where I can input an event/appointment/whatever via web,emacs,palm,etc and sync to all of them
05:10:57 <Lunar^> shapr: Analysis Patterns ?
05:11:22 <shapr> Lunar^: just sensible ways of modeling, designed for OO, but has some usefulness for FP as well.
05:11:28 <ozone> so, have a webpage on analysis patterns that i can read for bedtime reading?
05:11:43 <kosmikus> ozone: incoming dcc doesn't seem to work for me because of firewall or something
05:11:50 <kosmikus> ozone: email?
05:11:57 <shapr> it's funny to see places where the Analysis Patterns are simple in FP, than's where OO has problems.
05:11:59 <ozone> kosmikus: shure
05:12:12 <ozone> kosmikus: email is...?
05:12:22 <kosmikus> andres at cs dot uu dot nl
05:13:07 <shapr> I had a really neat email discussion with Alistair Bayley about the differences between FP and OO
05:13:13 <ozone> that's right, you have a uni with a cool naming policy
05:13:32 <shapr> the real eye-opener for me was that pure FP has no idea of identity
05:14:03 <shapr> you have equality, but not identity.
05:14:42 <ozone> is that a fact which is useful in any way?
05:14:50 <ozone> (excuse the harshness :)
05:14:58 <shapr> and especially not inclusional polymorphism ('sub-identity') such as subclassing.
05:15:04 <shapr> sure, it's a really useful fact
05:15:08 <kosmikus> that's because identity is an artificial concept ;)
05:15:08 <shapr> it's why CSE works
05:15:27 <ozone> what kind of identity do you speak of?
05:15:36 <ozone> i guess the mathematical definition, rather than, say, the psycological one :)
05:15:42 <shapr> you can't tell if this Int is the same one as that other Int
05:15:46 <kosmikus> that an object has a unique identity
05:15:52 <shapr> you can check to see if they have the same value, but that's all.
05:16:25 <kosmikus> shapr: you make it sound as if it is a deficiency instead of an advantage
05:16:34 <shapr> oh no, I think it's a great benefit
05:17:09 <shapr> I agree with you, identity is an artificial concept in FP
05:17:23 <shapr> it's a necessary concept in OOP though
05:18:10 <_joey_>  is anyone good in maths?:)
05:18:18 <Maddas> many people here, probably :)
05:18:19 <shapr> in essence, OOP abstracts state into small chunks, instances; where FP pulls all the state into one single chunk
05:18:24 <shapr> that's my viewpoint at least.
05:18:44 <shapr> in my opinion, pulling all the state into a single chunk makes software easier to deal with
05:19:01 <shapr> if J2EE were written that way, it'd be easy to unit test
05:19:20 <shapr> as it is, the only J2EE unit testing mechanisms are themselves J2EE Enterprise Java Beans
05:19:29 <kosmikus> ozone: the problem is that you just cannot derive a generic instance for Int
05:20:01 <kosmikus> ozone: Int is a base type; you should define an "instance XML Int" explicitly
05:20:24 <ozone> ah
05:21:38 <kosmikus> ozone: ghc probably doesn't care that Int is special; it's just noticing that there is no structure information for Int and assumes that the reason is that you did not compile the module using -fgeneric
05:22:20 <ozone> makes sense
05:22:30 <kosmikus> ozone: and if you replace "import Generics" with "import Data.Generics", you can omit the "-package lang"
05:22:47 <ozone> so, what would you put for the product/sum types for Int?
05:23:01 <kosmikus> ozone: ?
05:23:23 <ozone> oh, don't worry
05:23:24 <ozone> now i get it
05:23:39 <ozone> you mean you have to do "instance XML Int where toXML n = show n" or something like that
05:24:19 <ozone> (sorry, i'm not very familiar with generics)
05:24:30 <kosmikus> yes, something like that
05:24:49 <ozone> so for ints, you don't iterate over the structure of the thing, you just declare it as an instance
05:24:54 <ozone> there you go shapr :)
05:25:00 <shapr> ?
05:25:36 <kosmikus> ozone: yes; theoretically, you could write is as the "almost infinite" sum
05:25:43 <kosmikus> minBound :+: ... :+: maxBound
05:25:51 <ozone> hehe, i'll come up with an actual half-decent example next time
05:25:52 <kosmikus> but that's be horribly inefficient
05:26:04 <ozone> :)
05:26:07 <ozone> ok, compile started
05:26:12 <ozone> -> bed
05:32:35 <_joey_> is anyoone familiar with nested recursion?
05:32:49 * _joey_ may go to sleep too 
05:47:20 <shapr> hej kek
05:47:26 <kek> hej!
05:47:37 <shapr> have you been here before?
05:47:46 <kek> long time ago
05:47:55 <shapr> I thought I recognized your name
05:48:13 <kek> started reading haskell tutorial yesterday.
05:48:18 <shapr> have some questions?
05:48:39 <kek> not yet...
05:48:55 <shapr> ok, ask here if you think of some.
05:49:04 <shapr> you may also want to try #haskell.se
05:49:28 <kek> thanks!
05:49:53 <kek> my nick was ke before
05:51:18 <blackdog> shapr, you're almost aggressively friendly...
05:55:18 <Lunar^> Does anyone know a good TODO list manager ?
05:58:36 <kek> i'm still fighting with the emacs haskell mode... i want the hugs buffer to "scroll to bottom" when i press C-c C-r. i can only get it to work that way when i type stuff to it
06:08:55 <shapr> blackdog: I've heard that before
06:09:07 <shapr> kek: what about M-> ?
06:09:37 <kek> but automatically... that's the little things i spend too much time on
06:10:10 <shapr> I use C-c C-l
06:10:20 <shapr> does that work better?
06:10:26 <kek> and then half of the hugs window is empty
06:11:27 <shapr> I've seen some code that overrides recenter in ERC for just that purpose
06:11:35 <shapr> that same code might work for you
06:12:16 <kek> good point, i'll look it up
06:41:08 <kek> i got it to work
06:49:51 <SyntaxNinja> hello, #haskell
06:51:55 <Igloo> Hey Syn
06:52:09 <Igloo> How's it going
06:52:15 <shapr> hi SyntaxNinja!
06:52:43 <shapr> hey SyntaxNinja, I had a crazy wiki idea this morning
06:53:06 <shapr> in essence, gnutella applied to cvs
06:55:40 <SyntaxNinja> a wiki, gnutella, cvs
06:55:50 <shapr> right
06:55:50 <SyntaxNinja> (igloo: darcs!)
06:56:04 <shapr> actually, it uses darcs
06:56:14 <SyntaxNinja> Igloo: pretty good. I'm uploading my packages to my server, your idea of inittree (on the server side) and push (on the client side) seems to work
06:56:25 <SyntaxNinja> but it's taking a long, long, long time to upload hugs
06:56:28 <shapr> oh, what idea is that?
06:56:32 <Igloo> Cool
06:56:55 <Igloo> Can you send me a list of commands that make it take a long time?
06:59:31 <SyntaxNinja> shapr: I was trying to figure out a way to push my stuff from my laptop to the server, when the server has never heard of the code
07:00:17 <Lunar^> shapr: Did you write something about it ?
07:00:41 <shapr> Lunar^: yes, but it's in that same crazy wiki
07:00:55 <shapr> which at the moment requires emacs-wiki for decent formatting
07:01:32 <shapr> though you can still read the content just fine with anything that understands text
07:02:29 <shapr> SyntaxNinja: I just made a tgz copy of the repo for the initial setup, scp'd that to the server and unpacked it.
07:02:42 <Lunar^> shapr: Where is it then ?
07:02:44 <SyntaxNinja> Igloo: 1) get hugs, 
07:02:44 <SyntaxNinja> 2) import it all into a darcs repository
07:02:44 <SyntaxNinja> 3) on your server side, mkdir /path/to/repo/ && cd /path/to/repo && inittree
07:02:44 <SyntaxNinja> 4) back on your client side: darcs push --verbose --all --and-apply ijones@monk.syntaxpolice.org:/path/to/repo
07:03:01 <Igloo> And it's the push that's slow?
07:03:05 <SyntaxNinja> yeah
07:03:12 <Igloo> OK, ta
07:03:13 <SyntaxNinja> now I did this with smaller packages, and it seemed to work just fine
07:03:21 <SyntaxNinja> so I have no doubt that its's going
07:03:26 <Igloo> Oh, is your darcs compiled with libcurl?
07:03:35 <SyntaxNinja> idono, it's the packaged version
07:03:38 <SyntaxNinja> probably
07:03:47 <Igloo> Right, yup, looks like it
07:04:21 * Igloo will try to look at that tonight
07:04:39 <shapr> Lunar^: do you want to check out the darcs repo or just look at the content? "darcs get http://www.ScannedInAvian.org/repos/wikiwiki/" or http://www.scannedinavian.org/cgi-bin/darcs?wikiwiki*
07:15:19 <Igloo> shapr: Why has what my patch does to README changed?
07:15:35 <Lunar^> shapr: That's cool
07:15:48 <Lunar^> shapr: Do you know something that could turn emacs-wiki to a webpage ?
07:16:05 <Lunar^> shapr: I think that could worth the trick for my dev lOg
07:19:34 <Lunar^> shapr: Neat, it's already a base feature
07:51:57 <shapr> Igloo: I'm not really sure why
07:52:11 <shapr> oh, I think I do know why
07:52:21 <shapr> because you pushed your patch, then I pushed mine
07:52:30 <shapr> but I hadn't pulled your patch yet
07:55:02 <shapr> Lunar^: tried to push any wiki patches?
07:55:10 <ham> hiho
07:55:14 <shapr> hi ham
07:55:31 <Lunar^> shapr: nope.. I try to work this afternoon.. just a little bit :)
07:55:43 <shapr> wow! ok then
08:04:34 <shapr> hi culex 
08:04:57 <culex> hello
08:05:30 <shapr> looking for Haskell info?
08:05:45 <culex> not realy....
08:05:52 <Maddas> hrm
08:05:57 <culex> :0
08:05:59 <culex> :)
08:06:01 <shapr> culex: what can we help you with?
08:06:11 <culex> jast looking around....
08:06:58 <Etaoin> is it customary to declare the type of functions explicitly, or let it be inferenced?
08:06:59 <culex> well a good book for haskell wouldn't be a bad idia...:)
08:07:31 <shapr> Etaoin: depends on what you want
08:07:47 <shapr> culex: there's a list of good Haskell books, both printed and electronic at:
08:07:48 <shapr> @learn
08:07:48 <lambdabot> http://www.haskell.org/learning.html
08:08:18 <Etaoin> shapr: what kinds of things can I want?
08:09:05 <Etaoin> I would imagine being expilcit would help with documentation
08:09:59 <culex> tnx..
08:10:04 <edwinb> I'm always explicit with types - I find it's much easier to read.
08:11:43 <edwinb> The compiler may not need to declaration... but I do!
08:11:45 <shapr> Etaoin: in my experience, I develop faster without type sigs, but I often come back and add explicit type sigs to check my understanding
08:11:46 <Etaoin> doesn't that render type inferencing less useful?
08:12:05 <edwinb> That depends what you consider its use to be ;)
08:12:22 <shapr> most of the time, I don't use type sigs, because I know what the type is
08:12:53 <edwinb> I don't think I'd write a type for something like "test = 5"
08:13:53 <Etaoin> okay
08:14:03 <shapr> I came to Haskell from Python. Python has runtime dynamic typing. In my opinion, Haskell has compile time dynamic typing :-)
08:14:11 <edwinb> heh, yes.
08:14:50 <shapr> so a type signature gets in my way if I decide to refactor by changing the basic types I'm using, then I have to go back and change all the type sigs, and that sucks.
08:15:29 <edwinb> Hmm. Have you seen the Simon Thompson's Haskell refactoring project?
08:15:35 <shapr> but, if something weird is happening type sigs are usually the first thing I use to see where the compiler and my understand differ.
08:15:41 <edwinb> If you refactor, you also have to change the comments...
08:15:48 <shapr> huh?
08:16:01 <edwinb> hang on, I'll dig out the url...
08:16:06 <shapr> no, I know the project
08:16:13 <shapr> but why would you have to change comments?
08:16:14 <edwinb> oh, okay.
08:16:29 <edwinb> Your comments do describe what the arguments do don't they?
08:16:34 <edwinb> (okay, so mine don't...)
08:16:36 <shapr> I argued with them when they started that they should have used the Metaenvironment instead
08:18:16 <shapr> since there's already an ATerm library written in Haskell, and the stratego tools kick butt
08:21:33 <Etaoin> well thanks for the discussion
08:21:53 <edwinb> I think the answer is that it's personal preference ;)
08:22:40 <culex> do you know if haskell can use an other way to optimise the algorithm than the brute force method??
08:24:00 <shapr> culex: what algorithm?
08:24:55 <culex> I don't know....
08:25:15 <culex> anything more optimized
08:26:00 <shapr> the GHC compiler has many interesting optimizations, Common Subexpression Elimination, deforestation, etc
08:26:46 <culex> anyway I will read and come back with more idias...:)
08:26:52 <culex> oh, ok
08:27:05 <shapr> do you want more details?
08:27:32 <culex> mabye but I have to leave now.....
08:28:05 <culex> cu soon
08:28:14 <shapr> ok, have fun
08:28:16 <culex> bye
08:30:44 <Igloo> http://www.cl.cam.ac.uk/Research/SRG/netos/xen/
08:31:29 <shapr> haha, "Xen and the Art of Virtualization" !!
08:31:59 <Igloo> Oh, looks like it might require changes to the OS though
08:51:33 <SyntaxNinja> Igloo: this import has been goign for about 2 hours now, and hasn't outputted anything for about 1 hour and 55 minutes
08:51:41 <SyntaxNinja> but it is churning the hard drive
08:51:55 <SyntaxNinja> maybe a memory issue
08:52:09 <shapr> SyntaxNinja: yes, see recent discussion on darcs-users
08:52:19 <Igloo> What does top say?
08:52:25 <shapr> SyntaxNinja: the cure is, only record half of it, then do the other half
08:52:40 <Igloo> It's possible, but probably unlikely, the patches I pushed last night will fix it
08:53:13 <shapr> SyntaxNinja: I'm just guessing actually, how large are the sources you're pushing?
08:56:24 <SyntaxNinja> shapr: it's hugs
08:56:33 <shapr> oh
08:58:43 <SyntaxNinja> top says that darcs rarely gets to the top of the list for its CPU usage, but it's using 76.3% of memory
08:59:50 <Igloo> Is it generally in state D?
09:03:06 <SyntaxNinja> seems to equally be bt D and R
09:05:59 <SyntaxNinja> I'm going to kill it since I need to put my laptop away
09:06:06 <SyntaxNinja> I'll mess w/ this again later.
09:06:06 <SyntaxNinja> peace.
09:06:10 * SyntaxNinja lunch&
09:18:05 <ludde> i never remember, is it foldr or foldl that uses little stack space?
09:20:43 <Igloo> foldr
09:21:01 <ludde> how do you know?
09:21:48 <Heffalum1> it follows from the structure
09:22:10 <ludde> what do you mean?
09:23:33 <Heffalump> the recursive calls it makes to itself are data driven, not control driven
09:23:58 <Heffalump> oh, hangon, if f is strict in its second argument, it might use lots of stack
09:24:03 <Heffalump> but foldl definitely will
09:26:27 * earthy sees a foldl happily munching memory
09:26:37 <earthy> and starts getting hungry
09:29:02 <Heffalump> hmm, good point
09:29:12 <earthy> half an hour to get to the Oudegracht...
09:29:16 <earthy> should be doable.
09:29:24 <Heffalump> the 11 is fast...
09:30:01 <earthy> takes about 20 mins, including walktime
09:30:22 * Heffalump is just going to walk
09:30:35 <earthy> see you in half an hour then. :)
09:30:47 <Heffalump> yeah :-)
09:31:30 * Heffalump tries to figure out the map
09:33:13 * Heffalump figures it out and leaves in a hurry
09:37:14 <keverets> I've accidentally done something such that when I now do "ghci -package HaXml" I get "ghc-6.2: unknown package name: HaXml" ... I still have HaXml installed, but it seems that I can't convince ghc of the fact.
09:39:28 <keverets> where is it that packages are usually regisetered?
09:40:27 <keverets> /usr/lib/ghc-6.2/package.conf and package.conf.old have no mention of HaXml ... hmm.
09:41:15 <Igloo> That looks like where it should be. make install in the HaXml tree would probably reregister it, if you still have it lying around
09:41:30 <Igloo> (I'm guessing, I've never installed HaXml)
09:41:34 <keverets> I'll probably have to recompile.
09:41:43 <keverets> This is a pain.
09:49:19 <kosmikus> keverets: what did you do to "lose" HaXml?
09:49:30 <keverets> kosmikus: I wish I knew.
09:50:55 <kosmikus> but it worked before, with ghc-6.2?
09:51:02 <keverets> kosmikus: yes.
09:51:07 <keverets> quite well, in fact.
09:51:56 <kosmikus> then you should be able to just ghc-pkg --add-package it again
09:52:06 * keverets wishes he could just "apt-get install --reinstall HaXml"
09:53:14 <keverets> "ghc-pkg --add-package HaXml" dumps a usage screen ... what would I need to pass it?
09:54:15 <kosmikus> try to find a file pkg.conf that comes with HaXml itself
09:55:04 <kosmikus> then go to the directory where it is located
09:55:12 <kosmikus> and say "ghc-pkg --add-package < pkg.conf"
09:56:19 <keverets> kosmikus: that worked.  Thanks.
09:56:35 <kosmikus> great
10:31:56 <liiwi> sproing
10:32:43 <shapr> yow!
10:33:43 <stepcut> boink
10:42:38 * Marvin-- giggles as he plans some wererat roleplaying stuff for next session
10:43:09 <Taaus> As in "Eeek! Eeeeek eeek eek!" :)
10:43:40 <Marvin--> no, more like I need to practice on twitching my nose :-P
10:44:00 <Marvin--> "A wererat in humanoid form tends to be a thin, wiry individual of shorter than average height. The eyes constantly dart around, and the nose and mouth may twitch if he or she is excited."
10:44:12 <Taaus> Haha! Just watch Planet of the Apes a couple of times ;)
10:44:42 <Marvin--> Hey, that's actually a good idea!
10:46:07 <Marvin--> there
10:46:29 <Marvin--> there's also the fact I should figure out what to do when/if I actually turn into a rat, I guess
10:46:57 <Taaus> Well... Nibble things, I guess.
11:00:11 <Igloo> lamdabot needs an @email nick
11:00:36 <shapr> what about /msg nickserv info?
11:00:41 <Maddas> And a possibility to define @-commands at run-time with Haskell code!
11:00:47 <shapr> you can already do that
11:00:58 <Maddas> Crap, somebody was faster than me.
11:00:59 <Maddas> :-)
11:01:26 <shapr> I still want to port @fact to HaskellDB and plug it back in
11:03:53 <Igloo> info doesn't seem to give me an e-mail address
11:05:11 <shapr> who do you want to email? maybe I know their address?
11:05:35 <shapr> I use gnus, bbdb, and erc
11:05:43 <stepcut> shapr: have you ported lambdabot to haskelldb yet?
11:05:49 <Igloo> Syn - I've already found it in old mail, though, it's just less convenient  :-)
11:05:53 <shapr> my email client and my irc client are integrated
11:06:00 <shapr> stepcut: nope, not yet
11:06:15 <shapr> I started on it, but I got distracted by HDB bugs, and I haven't gotten back to it.
11:07:06 <shapr> BBDB is the emacs rolodex, it's got code to talk to both ERC and gnus, so I can search by irc nick
11:07:07 <stepcut> I ported my one haskelldb from hugs to GHC. Its much faster now :)
11:07:25 <SyntaxNinja> Igloo: wha was less convinient?
11:07:55 * shapr considers adding /email to ERC
11:08:17 <Igloo> Loading a large mailbox to find your e-mail address than /msg lambdabot @email SyntaxPolice
11:09:18 <Igloo> While you're here, how much RAM do you have?
11:10:22 <SyntaxNinja> 256M
11:20:42 <Igloo> Euch, I think the overflows in hp2ps still aren't fixed
11:21:59 <jlouis> Igloo: grep(1) is yer friend ;)
11:25:00 <Igloo> Syn: Try the patch I (hopefully) just pushed you with an up to date copy of David's repo (the fix I did last night looks like it will be important)
11:25:22 <Igloo> You'll probably still swap lots, but hopefully it won't be /too/ bad any more
11:25:42 <Igloo> Pushing to a local repo the .prof claims it took 9s while it takes about a minute (for a darcs built for profiling)
11:26:00 <Igloo> (with 1G RAM, 1G swap available)
11:27:37 <SyntaxNinja> did anyone send in their resumes to Aetion? http://www.haskell.org//pipermail/haskell/2004-February/013699.html3
11:27:56 <SyntaxNinja> Igloo: can I apply the patch to the 0.9.17 version?
11:28:05 <Igloo> Hmmm, the push doesn't seem to have happened in all cases though. I wonder if it got killed for being OOM
11:28:19 <Igloo> Syn: Well, you'll need a patch from David's repo anyway
11:28:26 <SyntaxNinja> the latest?
11:29:42 <Igloo> "Use foldr rather than foldl to show hunks" and "Rewrite applyHunkLines" are probably the important patches
11:30:24 <ludde> why foldr instead of foldl ?
11:30:43 <Igloo> Because it needs to be lazy
11:31:10 <ludde> i checked the prelude, foldl is tail recursive while foldr is not
11:31:25 <ludde> so isn't foldl better?
11:31:57 <jlouis> ludde: it can depend on the situation
11:32:14 <ludde> when is foldr better?
11:32:35 <Marvin--> when you want to take advantage of the laziness?
11:32:37 <jlouis> when you will end up doing a ''cons'' instead of doing an ''append''
11:32:47 <jlouis> for instance
11:32:47 <ludde> what laziness?
11:33:00 <ludde> jlouis: you can just use reverse after though ?
11:33:45 <Igloo> it was doing essentially foldl (++) "" xs, which results in a huge lazy suspension being built up and then very slowly being evaluated
11:33:53 <ludde> oh ok
11:33:55 <jlouis> ludde: sure, but it is not only for ''cons''
11:33:57 <Igloo> with foldr the start of the input is immediately available and consumed
11:34:32 <ludde> i c
11:36:11 <Igloo> Hmm, it's exiting successfully with no exceptions raised/caught but not actually applying the patch (except, for some reason, in the case where I used +RTS -h)
11:43:05 <Igloo> Works for a non-profiling build too, so hopefully will work for you, Syn
11:46:57 <SyntaxNinja> Igloo: OK I'll get to that ASAP
11:47:02 * Marvin-- swears at http://hampusgard.se/AlphaGame_1.aspx
11:47:22 <Igloo> No rush - just let me know if it doesn't work  :-)
11:47:33 <keverets> how would I start ghci and be able to use Data.Graph?  ":l Data.Graph" informs me module `Data.Graph' is a package module, whereas "ghci -package Data.Graph" gives me ghc-6.2: unknown package name: Data.Graph
11:47:34 <Marvin--> I so can't figure out C, F, J and V
11:47:43 <keverets> I can "import Data.Graph" and use it happily, though.
11:48:15 <Igloo> :m + Data.Graph
11:48:29 <keverets> ah, perfect.  Thanks.
11:48:36 <Marvin--> oh cool, I didn't know that
11:49:04 <Igloo> Marvin: Ah, this looks like something I'll suck at
11:49:58 * Igloo gets one. Woo!
11:55:14 <Marvin--> Igloo: "I"? :)
11:55:28 <Igloo> No, M
11:55:35 <Igloo> And I'm not sure I've even seen it
11:55:40 <Igloo> I wasn't what I thought it was
11:57:28 <Igloo> Ah, R is easy too
11:58:17 <Marvin--> many of them are easy, but I'm really stumped on CFJV
11:59:34 <det> Can darcs push via http ?
13:11:30 <stepcut>  s
13:11:38 <ibid> heh, http://liw.iki.fi/liw/log/2004-03.html#20040302b :)
13:14:10 <stepcut> hehe
14:06:48 <shapr> ibid: nice!
15:00:18 <Pseudonym> Guess I should join the study group.  Just got a copy of "Conceptual Mathematics" last week.
15:00:46 <shapr> yay!
15:01:02 <Pseudonym> The discussion of Brouwer's theorems was really interesting.
15:01:13 * Marvin-- sighs and tries to play the name game
15:01:18 <Pseudonym> Tom Conway used to have a .sig which read "You can't comb a hairy ball smooth."
15:01:45 <Cale> That's the hairy ball theorem.
15:01:49 <Pseudonym> Yes.
15:02:01 <Pseudonym> Now I also know that any tempest in a teacup has an eye.
15:02:42 <Pseudonym> It's a very pleasant read, this book.
15:02:43 <Marvin--> dude
15:02:51 <Marvin--> what kind of scary secret sect is this?
15:02:54 <Riastradh> Is the tea contained therein good tea?
15:03:10 <Maddas> Marvin--: #haskell, but don't tell anybody
15:03:34 <shapr> Marvin--: c'mon, did you enjoy reading Types and Programming Languages?
15:03:45 <Pseudonym> Riastradh: No, it's from a Nutrimatic Machine.
15:03:50 <shapr> wasn't barendregt's cube something you've always thought of, but never really explicity wrote down?
15:03:54 <Riastradh> Ugh.
15:03:59 <Marvin--> shapr: Types and Programming Languages?
15:04:04 <Riastradh> I sha'n't be hunting down any hurricanes to get the tea any time soon, then.
15:04:16 <shapr> Marvin--: wait, you haven't read that?
15:04:20 <Pseudonym> Uhm... haven't gotten that far yet.
15:04:28 <Marvin--> shapr: don't think I have
15:04:32 <Marvin--> author?
15:04:39 <shapr> Benjamin Pierce
15:04:44 <shapr> the Pict guy
15:04:56 <Marvin--> nope, don't think I hav
15:04:57 <Marvin--> e
15:05:02 <shapr> it's really spiffy
15:05:40 <Marvin--> Josef Svenningson is running a graduate course based on it, I really wanted to take it but I was already way too busy
15:05:47 <shapr> ah too bad
15:05:52 <Marvin--> yeah
15:06:01 <shapr> the book is cool and Josef seems nice too
15:06:52 <Marvin--> I guess I should get it
15:07:06 <shapr> it's worth reading, imho
15:07:23 <shapr> you should probably check it out of the library first and see if it's something you want to buy
15:07:41 <Marvin--> I had just committed myself to my spring schedule when John sent out a mail about the course
15:07:42 <shapr> it's one of those doorstop sized books, and those are never cheap.
15:07:45 <Marvin--> at which point I cursed for a while
15:07:53 <shapr> yah, I understand that.
15:08:12 <Marvin--> hmm, 805 SEK on bokus.se
15:08:24 <shapr> not cheap
15:08:27 <Marvin--> could be worse though
15:08:39 <shapr> you have any books that were more?
15:08:47 <shapr> Knuth's series maybe?
15:09:10 <Marvin--> I cleverly got Knuth's books for christmas :-)
15:09:21 <shapr> oh, that was smart
15:09:37 <Marvin--> especially since it kept my parents busy for two christmases and one birthday ;)
15:09:42 * Pseudonym is waiting for the rewrites
15:09:49 <Pseudonym> I'll be waiting 20 years, but still.
15:10:20 <shapr> the Knuth collection is out of my budget range
15:10:21 <mattam> rewrites ?
15:11:12 <Pseudonym> Yes, he's writing the final volumes, then is planning to rewrite the first three.
15:11:39 <shapr> wouldn't it be nicer if we could just cvs up?
15:12:10 * Marvin-- reseves TaPL at the chalmers library
15:12:19 <Marvin--> reseRves
15:12:25 <Marvin--> damn, I keep losing letters
15:12:35 <shapr> you'll reseeve the book soon enough
15:12:43 * Marvin-- does a bad printer imitation: OUT OF LETTER
15:12:47 <shapr> haha
15:13:04 <shapr> worse that being out of paper, being out of letters to put on that paper.
15:13:09 <shapr> erg, "than"
15:13:16 <shapr> EWRONGLETTER
15:13:33 <Marvin--> no no, EWORNGLETTER
15:13:46 <shapr> :-)
15:13:50 <Pseudonym> Where are the infinite number of monkeys when you need them?
15:13:58 <shapr> still trying to login
15:17:57 <Maddas> haha
15:18:20 <Maddas> ENOSPELING
15:18:32 <Marvin--> I thought it was speeling
15:18:49 <Marvin--> but I'm just a dumb feregner
15:18:57 <shapr> furriner ;-)
15:19:35 <shapr> that's okay, I've been living in europe for so long there isn't any place where I don't qualify for that.
15:24:57 <Igloo> Oh, neat, foo.prof now gets written if you hit ^C
15:25:33 <Pseudonym> Europe has a different idea of what counts as "foreigner", though.
15:31:37 <Pseudonym> I hereby propose a software engineering version of Murphy's Law:
15:31:46 <Pseudonym>  If there's a way to avoid a problem, someone will deliberately avoid the way.
15:32:34 <shapr> yup
15:32:43 <Pseudonym> Ooh, free cakes.
15:32:46 <Riastradh> I think that accounts for just about everything in the software industry today.
15:32:48 <Pseudonym> Engineers live for free food.
15:32:55 <Pseudonym> Must away
16:28:38 <Pseudonym> Mmmm... free food...
22:43:14 <blackdog> shapr: you there?
