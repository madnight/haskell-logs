04:01:50 <Jerub> I'm not sure, should I continue playing with haskell, or should I learn some smalltalk.
04:02:39 <earthy> continue playing with hasekll
04:02:45 <earthy> haskell even. :)
04:06:29 <kosmikus> Jerub: yes, play with Haskell, and do smalltalk on #haskell
04:35:11 <kowey> http://www.haskell.org/hawiki/HaskellIrcPastePage
04:35:14 * earthy laughs
04:35:16 <kowey> could anyone help me with some debugging?
04:37:35 <kowey> uhh...then again maybe i'm just being silly
04:37:41 <earthy> what's wrong with the code?
04:37:56 <kowey> typo... but i'm having some other trouble with code like this
04:38:07 <kowey> it works... it always works when you don't want it to :-)
04:38:36 <earthy> looks like a perfectly fine automaton to me
04:38:47 <skew> I debugging grungy java :(
04:38:56 <kowey> bleah...
04:38:59 <kowey> JUnit?
04:39:11 <skew> Oh, I already have a test case it fails.
04:40:06 <skew> It's a thing that takes a sum of products representation of a boolean function expands it to a truth table and computes parity bits
04:40:13 <skew> of course it's all arrays of magic integers
04:54:33 <kowey> ahah! it was because the type i was *really* using for transitions had a faulty implementation of Ord
04:56:06 <shapr> good morning #haskell!
04:56:16 <shapr> from the delta to the DMZ, it's COLD out there!
04:56:18 <kowey> morning, shapr
04:56:26 <kowey> ah...
04:56:29 <shapr> bonjour kowey, comment ça va?
04:56:43 <kowey> got the debug blues
04:56:55 <shapr> je suis en cours en suedious(?)
04:57:04 <shapr> I can never remember how to spell word.
04:57:08 <shapr> suede?
04:57:14 <kowey> you're learning swedish?
04:57:16 <shapr> yes
04:57:31 <kowey> uhm... i don't really know myself.. i'm fake-french
04:57:34 <shapr> how is that that really spelled in french?
04:57:37 <shapr> quelle dommage!
04:57:42 <shapr> varifrån kommer du?
04:57:52 * earthy ginz
04:57:53 <earthy> +r
04:58:02 <shapr> earthy: hoi, hoe gaat het met jou?
04:58:05 <kowey> heh! even my french office-mate doesn't know
04:58:11 * shapr grins
04:58:21 <shapr> I think it's suidois or suede or something.
04:58:27 <shapr> Lunar^: salut!
04:58:39 <shapr> kowey: so, where are you from?
04:58:40 <earthy> suidois sounds good. suede sounds like a kinde of leather. ;)
04:58:57 <shapr> earthy: parlez vous français?
04:59:14 <kowey> s-u-é-d-o-i-s
04:59:20 <shapr> merci beaucoup!
04:59:34 * shapr carefully records that for further use
04:59:40 <kowey> sorry, i was fighting with my office mate to stop pronouncing letter the english way.... confuses the heck out of me
05:00:06 <earthy> je ne parle beacoup de francais, mais je comprends plus que je parle
05:00:14 <shapr> probably more than me
05:00:23 <shapr> for both :-)
05:01:18 <shapr> kowey: so, is english your first language?
05:01:22 <kowey> anyone learning arabic? 
05:01:27 <shapr> my first language is hick ;-)
05:01:30 <earthy> but I have an unfair advantage, seeing as I've had Portuguese as my first language (which, unfortunately, I lost), then having learned Dutch, and having had roughly 3 years of French in highschool
05:01:36 <kowey> sort of... malaysian (british) english was
05:01:38 <shapr> I'm from Birmingham. Yes, the other one.
05:02:01 <kowey> the other one, eh?
05:02:09 <shapr> y'all come back now!
05:02:18 <kowey> right-o
05:02:24 <earthy> y'all be good ya'hear!
05:02:47 <kowey> ten years in jacksonville, didn't pick up a trace of the accent
05:02:54 <shapr> yes, the one where the KKK had a recent meeting in the center of the town park. Happily they were cabbaged and tomatoed into submission, but the police were on hand to stop any riot that might happen.
05:03:15 <kowey> and people drive around with "knights of the southern cross" bumper stickers? sigh
05:03:27 <shapr> jacksonville florida?
05:03:45 <kowey> yep... the border between the South and Florida
05:03:56 <shapr> haha!
05:04:04 * shapr laughs 
05:04:21 <shapr> you obviously understand why many southerners say that Florida is actually part of Maine
05:04:30 <kowey> hehe
05:04:47 <kowey> i don't know how jacksonvillians see themselves... i think southern
05:05:22 <shapr> then there's creole, which might as well be a different country, culturally speaking.
05:05:32 <shapr> but man, what a cool country
05:06:11 <kowey> louisiana?
05:06:21 <kowey> louisian french is funny to listen to
05:06:37 <shapr> I heard a funny story recently, the Norwegians decried the profusion of 'crawdads' they caught off their coast, until they discovered that louisiana et al considered them a delicacy.
05:07:03 <earthy> `good money to be had'
05:07:25 <earthy> powerful driving force, that
05:07:57 * kowey forces himself back to work :-)
05:16:25 <shapr> greetings Cale
05:16:54 <Cale> heh - what's up with my net connection
05:24:13 <shapr> so, what's going on today?
05:25:08 <Cale> Not much here - I have an astronomy assignment to write up, and then later on, a real analysis 2 assignment.
05:27:41 <shapr> I have lots of Python tasks in my inbox
05:27:51 <shapr> and more swedish homework
05:36:59 <shapr> good afternoon Ninja Jones!
05:37:09 <SyntaxNinja> y0 shapr
05:39:18 <shapr> wazzup?
05:41:53 <shapr> SyntaxNinja: man, I wish it were within my parameters to apply for that job.
05:42:12 <shapr> "Development is mostly in Haskell, with some Java, mostly under Linux."
05:42:15 * shapr sighs enviously
05:44:15 <SyntaxNinja> I wish so too :)
05:52:03 <shapr> I got a real kick of the recent spam to the hat mailing list.
05:52:47 <shapr> http://www.haskell.org//pipermail/hat/2004-March/000121.html
05:54:18 <Cale> hahaha
05:55:33 <shapr> ah, bastian zapf is on orkut
05:55:36 <shapr> kosmikus: are you on orkut?
06:00:09 <shapr> anyone reading any interesting research papers lately?
06:01:42 <kosmikus> shapr: no, what's that?
06:01:58 <shapr> it's like friendster, six degrees, etc
06:02:17 <earthy> shapr: you could've easily checked that with orkut's friend finder
06:02:36 <shapr> good point
06:02:51 <earthy> and yeah, I found the ESOP'96 paper on modular denotational semantics for compiler construction very neat
06:03:07 <earthy> (by Sheng Liang and Paul Hudak)
06:03:22 <shapr> Hudak does a lot of cool stuff.
06:03:39 <kosmikus> shapr: I don't know friendster, six degrees etc either ...
06:03:42 <shapr> I think we should have 'focus months' where we pick out an author and look at a bunch of his papers.
06:03:54 <shapr> of course, we should probably do something about the StudyGroup first :-)
06:04:08 <shapr> kosmikus: well, if it won't distract you from your writing, I could invite you to orkut.
06:04:45 <earthy> ugh, don't
06:05:00 <earthy> orkut is too much of a timesink
06:05:06 <shapr> really?
06:05:18 <shapr> how can you spend time on orkut?
06:05:24 <earthy> well, to anyone I've talked to about it... it is
06:05:44 <earthy> shapr: explore relationships, add friends, read messages, walk through communties
06:05:46 <shapr> I got two cat posters and some neat social connections out of it.
06:05:48 <earthy> +I
06:06:24 <shapr> Bea put up the other poster at our downtown office.
06:06:47 <shapr> "ce chat code en java, et vous?"
06:06:48 <earthy> hell, with the new `never met, acquaintance, friend, good friend, best friend' stuff you can even go over all your friends and rate them as to closeness...
06:06:58 <shapr> oh, I haven't seen that part.
06:07:01 <earthy> shapr: mine like to push the laptop away
06:07:10 <shapr> they're just trying to get your attention.
06:07:20 <earthy> they succeed. :)
06:08:08 <kosmikus> shapr: thanks for the offer, but definitely not right now, and anyway, I still don't know enough about it to get the point
06:08:13 <shapr> ok
06:09:29 <kosmikus> ask me again in june, will you?
06:09:50 <shapr> if I remember, sure
06:11:46 <shapr> here's part of my orkut profile: "ideal match: strike anywhere"
06:12:09 * kowey chuckles
06:20:02 <Cale_> l
06:20:10 <shapr> m!
06:20:13 <shapr> http://barry.warsaw.us/software/laws.html
06:26:30 <mgoetze> shapr: so is there anything cool about this orkut stuff or is it just a way to waste time?
06:27:37 <shapr> I think it's cool
06:27:50 <shapr> you find connections you weren't looking for, and that's always valuable
06:42:25 <Igloo> To: hat@haskell.org
06:42:25 <Igloo> Dear manager,
06:42:25 <Igloo> We are glad to learn about your company is selling in the headwear field,
06:42:32 <Igloo> [rest of spam]  :-)
06:44:04 <shapr> yes, exactly :-)
07:08:44 <shapr> http://durchholz.org/jo/fpl-marshalling-survey/index.html
07:09:29 <earthy> yeah, nice.
07:09:36 <earthy> anybody know what's up with citeseer?
07:09:48 <shapr> look at the topic
07:10:12 <earthy> nope, that one is down as well
07:10:33 <shapr> huh, weird
07:11:26 <Marvin--> hm. what kind of stuff should I put in my Introduction section and what kind of stuff should be in the Related Work section?
07:11:35 <Marvin--> shapr: and have you finished reading the damn thing yet? :)
07:11:47 <shapr> er, no? :-)
07:12:07 <Marvin--> dang
07:14:12 <Lunar^> earthy: moved
07:14:22 <Lunar^> earthy: :(
07:14:30 <shapr> again?
07:14:31 <earthy> yes, to pst.edu, but ist.psu.edu is down as well.
07:14:32 <shapr> where to this time?
07:15:45 <shapr> Joachim says this in <c2cbc1$516$1@news.oberberg.net> on c.l.f: "...I conclude that you need more proficiency with an FPL to write fast code..."
07:17:25 <shapr> I think he's right, because, as you move more of the specifics of execution to 'implied' (with something like map, garbage collection, etc), you become less cognizant of the tradeoffs of those specifics
07:19:08 <shapr> with something like Python's reference counting, it's much easier to predict the behaviour of a given chunk of code.
07:20:20 <shapr> so, in my opinion, FPLs require more proficiency, but pay more returns.
07:21:30 <shapr> Haskell is an investment that requires a minimum of 250,000e but pays 25% interest; C has a minimum of 50e, and pays 5% interest.
07:21:57 <shapr> if that is true (and I really think it is) why are there so few professional programmers using Haskell???
07:22:04 <Marvin--> note that what python code is fast and what isn't is quite hard too
07:22:06 <shapr> you'd think everyone would be here :-)
07:22:20 <Marvin--> especially until you figure out the magic of attribute lookup and fast locals
07:22:30 <shapr> yup, I agree.
07:23:04 <shapr> but the range of speeds between naive python accesses and fast locals is smaller than that of terribly naive Haskell code vs Simon^2 Haskell code.
07:23:13 <Marvin--> typically, you get faster (and highly unreadable) python code if you replace loops with calls to map and introduce fast locals for all attribute lookups you do
07:39:53 <SamB> oh no! I don't have any euros!
07:41:06 <SamB> Marvin--: does psyco optimize calls to map?
07:42:43 <Marvin--> no idea
07:43:05 <shapr> psyco turns Python into C
07:43:07 <_joey> are there any functions that promote types of vlues explicitly?
07:43:23 <_joey> Int->Float, Float->Int
07:44:46 <Lunar^> _joey_: toRational, fromIntegral, both use type class magic
07:44:56 <Lunar^> _joey_: fromRational also
07:45:37 <Lunar^> _joey_: Ask yourself what kind of Float->Int conversion do you want : round, ceil, floor ?
07:45:42 <earthy> the problem with Haskell is that the implementations for it are not quite up to the luxurious standards of support that the implementations of C and C++ are
07:46:03 <SamB> fromIntegral can do Int->Float
07:46:13 <shapr> that's true, if you decided to invest several billion US$ into Haskell compilers, I'm sure they could be as efficient as Intel's compilers.
07:48:19 <earthy> for instance.
07:48:50 <SamB> C++ is not luxurious
07:49:14 <earthy> the problem is that no reward structure allows pumping several million euro into implementation of haskell compilers, let alone several billion euro
07:49:21 <shapr> but the amount of money lavished on C++ compiler development is luxurious.
07:49:28 <earthy> samb: *support* I said. tools for C++ abound.
07:49:32 <earthy> books on C++ abound.
07:49:37 <earthy> courses on C++ are plentiful
07:49:52 <shapr> products written in C++ are painful
07:49:55 <shapr> I mean, plentiful ;-)
07:50:00 * earthy laughs
07:50:06 <SamB> earthy: maybe C++ is so horrible that people need a lot of tools in order to use it?
07:50:10 <_joey> any functions in Prelude that have Int->Bool type?
07:50:31 <_joey> = wouldn't have a type?
07:51:15 <kosmikus> @type (even,odd)
07:51:16 <betabot> (even,odd) :: (Integral a, Integral b) => (b -> Bool,a -> Bool)
07:51:30 <SamB> (map (==) [0..]) is a list of such functions
07:51:31 <_joey> oh yes
07:53:08 <Marvin--> it's kind of a pointless question to ask... what kind of function are you interested in?
07:53:35 <earthy> SamB: may be. however, more tooling to support Haskell development can't hurt...
07:54:46 <SamB> earthy: look at how well QuickCheck works without any hacks!
07:55:04 * earthy grins
07:55:06 <SamB> unless you count breaking the monad laws
07:55:16 <earthy> that is a *gross* hack. :)
07:55:42 <earthy> but, umm, think about hooking into .net
07:55:47 <shapr> quickcheck breaks the monad laws??
07:58:20 <SamB> earthy: where is this .net you speak of?
07:58:38 <Marvin--> shapr: yes
07:58:46 <Marvin--> shapr: rtfa
07:59:55 <Marvin--> QC doesn't fulfill  return x >>= f  =  f x
08:15:27 * Lemmih just found a typo in the latest GHC documentation.
08:16:52 * Marvin-- hands Lemmih a cookie
08:19:10 <Lemmih> Wee (-:
08:22:02 * Marvin-- rediscovers the joys of writing continuation passing style monads
08:22:12 * earthy hits marvin--
08:22:15 <earthy> those are nasty :)
08:23:05 <Marvin--> execM (M k) = execM' (k return)
08:23:35 <Marvin--> though the best part is the implementation of bind, of course
08:24:05 <Marvin--> M p >>= k  =  M (\k -> p (\x -> let M f' = f x in f' k))
08:24:07 * Marvin-- ducks
08:25:56 <Marvin--> now to figure out how to do this with Control.Monad.Cont ...
08:28:53 <shapr> Is there a cheesy way to get rid of all hardlinks to a file, except for one?
08:29:03 <shapr> I bet this is another case where I could use find in some way.
08:29:23 <Marvin--> type M r = ContT r M'  with execM m = execM' (runContT m return)  would do the trick, I guess
08:30:02 <Marvin--> shapr: well, which one link would you want to keep? Any?
08:30:11 <shapr> yes, any
08:30:37 <shapr> I'm still doing iterations on this newsgroupie project.
08:30:50 <shapr> my code had some bugs, and my clients has changed his mind a bit.
08:30:51 <Marvin--> so if you have a complicated tree of directories and in wildly different leaves there are two links to the same file, removing any one of the two files is sufficient?
08:30:58 <shapr> yup
08:31:05 <Marvin--> tricksy
08:31:24 <shapr> I've ripped off part of a /var/spool/news/ dir, and I don't want crossposted articles to happen more than once.
08:31:42 <shapr> and nntp server hardlink crossposts to save space
08:31:59 <Marvin--> iiih, Beverly Hills on tv
08:32:04 * Marvin-- quickly zaps away
08:32:15 <shapr> I don't understand how you can watch tv and write code at the same time
08:32:17 <shapr> I surely can't
08:32:20 <Marvin--> I don't
08:32:52 <Marvin--> I wonder if I should use Cont instead of ContT
08:32:55 <Marvin--> would that even work
08:33:08 <Marvin--> hm, it would be unliftable
08:33:31 <shapr> oh, I bet find -links +1 would work
08:34:16 <Marvin--> with -type f
08:34:20 <shapr> right
08:34:23 <Marvin--> or you'll find lots of directories
08:34:34 <shapr> since . and .. are hardlinks
08:35:58 <Marvin--> the thing is, that'll only give you all the files that have more than one link, you still have to figure out which are equal to which
08:36:25 <shapr> oh, good point.
08:37:10 <shapr> the ugly solution is, "find, delete the first file, repeat until zero results"
08:37:33 <shapr> that's the "if I had a decent Haskell shell" solution.
08:37:35 <monotonom> Query all the inode numbers of all files.  Match.
08:37:50 <shapr> ?
08:38:25 * shapr thinks about that
08:38:49 <shapr> hm, that would be neat
08:39:14 <shapr> and I have a ghci open already
08:39:47 <shapr> hm, where did the recent Haskell shell scripting libs go to?
08:40:17 <shapr> http://www.volker-wysk.de/hsunix/
08:44:32 * Heffalump comes across an old thread on haskell@ about merging state threads, and wonders about doing it for ST
08:44:39 <shapr> greetings and salutations oh evil elephant of Hunny.
08:46:03 <shapr> I now wish that HsUnix could also return inode numbers.
08:46:33 <Heffalump> how is it that STRefs can leak out of ST (if not for the type of runST)? Is there any way apart from embedding one in the a of ST s a?
08:47:15 <Marvin--> let me answer that question with a resounding "huh?"
08:47:46 <Heffalump> you know the ST monad?
08:47:52 <Marvin--> yeah
08:48:09 <Heffalump> you know the type of runST? (forall s . ST s a) -> a
08:48:27 <Marvin--> yep
08:48:43 <Heffalump> the purpose of the forall s is to prevent an STRef from one ST thread leaking into another.
08:49:00 <Heffalump> agreed?
08:49:31 <Marvin--> right
08:49:37 <Marvin--> that's the way I've understood it
08:50:04 <Heffalump> were it not for that forall, how could an STRef escape?
08:50:26 <Heffalump> would there be any way other than wrapping one up in the a returned by runST?
08:51:31 <kosmikus> that's bad enough, isn't it?
08:51:51 <Heffalump> yes, but I'm trying to understand what the forall is doing.
08:52:07 <kosmikus> the forall makes sure that "a" cannot contain references to "s"
08:52:11 <Heffalump> I'm trying to figure out what operations you'd want if you wanted to merge and fork two ST threads.
08:52:30 <Heffalump> right, and is that the only check that is required?
08:52:45 <kosmikus> I think it is
08:53:02 <kosmikus> but that's just the way I understood it; I might miss something
08:53:12 <Heffalump> right.
08:53:52 * Heffalump thinks
08:54:06 <kosmikus> but then again, how should any information about "s" escape from a runST if not via "a"?
08:55:22 <Heffalump> yes, that was my intuition too
08:55:35 * Marvin-- had some notes on this from Koen's afp course
08:55:42 <Marvin--> damned if I know where I put them, though
08:56:07 <monotonom> You put them on Koen's web page. :)
08:56:21 <Heffalump> runST should be a no-op at runtime, right?
08:56:38 <shapr> hi Si
08:56:52 <Si> hello
08:56:55 <Heffalump> people named Simon joining from a UK ISP are worrying :-0
08:56:57 <Heffalump> s/0/)/
08:57:25 <kosmikus> indeed
08:58:21 <Marvin--> hah
08:59:36 <Marvin--> One Of These Days, I'm going to go through all these old notes and put them in order
09:00:37 * Marvin-- flips through language semantics notes, algorithmics notes, lambda calculus notes...
09:00:59 <monotonom> I have said that to myself for ten years.
09:02:15 <Marvin--> hrrm, I've worked myself down the stack to old probability theory notes... wonder if this really is a stack
09:04:18 <shapr> sometimes I think that's how people write papers.
09:04:49 <SamB> Marvin--: a pile of papers is known as a stack whether it fulfills the stack laws or not
09:05:04 <monotonom> hahah
09:05:06 <shapr> "I'm going to cleanup my notes of all these FP courses" ... 3 days later ... "Gee, that's interesting, this connection of ideas I just noticed isn't mentioned in any of the journals... maybe I should write it up."
09:08:54 <Marvin--> oh, this looks promising, I found another stack of stuff and I think it says "Monad Transformers" on one of the papers towards the bottom :)
09:09:02 <Heffalump> monad transformers are neat
09:09:10 <Heffalump> I spent a while learning about them when writing up my thesis
09:10:21 <Marvin--> yeah, I use them all the time
09:10:38 <shapr> I only vaguely know how to use them, I don't understand the theory behind them.
09:10:47 <shapr> It's on my list of things to thoroughly peruse.
09:10:58 <Heffalump> I'm not sure if I helped or hindered the design of lambdabot by putting monad transformers all over it
09:11:52 <shapr> in my opinion, lambdabot's goal is not the best design
09:12:10 <Marvin--> I think I have something like WriterT on top of StateT on top of StateT on top of Reader in parts of my h2fol program
09:12:20 <shapr> but instead, a code toy that teaches others (about Haskell, among other things) via collaborative development.
09:13:34 <Marvin--> meh, I didn't have any real notes on it
09:14:22 <shapr> Heffalump: so, in my opinion, monad transformers were a great step in the direction of the goal of lambdabot.
09:14:40 <Heffalump> I'd rather see it be an example of good Haskell design for something real.
09:14:49 <Heffalump> does realWorld# have special meaning inside GHC?
09:15:26 <shapr> I'd say something like hws, hws-wp, etc would be cool to turn into an example of good Haskell design
09:15:46 <shapr> but lambdabot is better as a code sandbox, imho
09:16:05 <Heffalump> individual modules, yes, but the core shouldn't be.
09:16:23 <shapr> that's a good point.
09:18:56 * Marvin-- tries to figure out how this ST crap worked
09:30:10 * Heffalump tries to understand the internals of GHC.
09:32:41 <Lunar^> Heffalump: realWorld# is just discarded
09:33:15 <Heffalump> Lunar^: at what level?
09:33:29 <Heffalump> what does realWorldPrimId in MkId.hs do?
09:33:48 <Lunar^> Heffalump: Ensuring that realWorld is never duplicated maybe ?
09:34:17 <Lunar^> Heffalump: RealWorld# is like the unit type : one constructor with no argument, thus resulting in 0 bits
09:34:43 <Heffalump> but the thing I'm seeing is called realWorld#, not RealWorld#
09:35:29 <Lunar^> Heffalump: I'm checking
09:37:51 <Lunar^> Heffalump: realWorld# seems to be the usual name for a variable of RealWorld# type
09:38:04 <Heffalump> is it not State# RealWorld?
09:39:07 <Heffalump> ah, I think I've found the bit where realWorld# gets turned into realWorldPrimId
09:40:37 <Lunar^> Heffalump: file?
09:40:51 <Heffalump> ghc/compiler/prelude/PrelNames.lhs
09:44:17 <shapr> Hi Hampus
09:44:21 <shapr> hello jmob 
09:44:32 <hram> shapr: Hello!
09:44:41 <shapr> what's going on?
09:44:42 <jmob> shapr, hi
09:45:37 <shapr> monotonom: spiffy idea, I used "find . -type f -links +1 -printf '%i %p\n' | sort > dupes" now I just have to figure out how to delete all but one
09:46:11 <shapr> oh, I bet could combine unique and comm to leave only the delete list
09:54:59 <hram> bring: Tjenare
09:55:15 <bring> hej
09:55:32 <bring> hmm, hi
09:55:37 <bring> rather
09:55:39 <andersca> hram: #haskell.se
10:01:28 <bring> on my home machine, ghci keeps giving me: "can't load .so/.DLL for: c (/usr/lib/libc.so: invalid ELF header)"
10:01:59 <bring> when I try to load hsql (or anyhting else that needs libc, I think)
10:02:30 <bring> /usr/lib/libc.so is an ld script, but that seems to work on other linux machines
10:04:34 <bring> anyone know how to solve this?
10:04:53 <hram> bring: compile ghc pehaps?
10:05:16 <bring> compile with ghc? or recompile ghc?
10:06:09 <hram> bring: recompile it yourself.
10:06:36 <bring> probably a good idea, think I am using a binary distribution now
10:06:41 <SamB> bring: ghci loads stuff itself... why do you have libc.so as a linker script?
10:06:54 <SamB> hmm, but I guess it wouldn't load libc...
10:07:25 <monotonom> libc.so being a script is rather standard. It also happens on my computer.
10:07:31 <SamB> but still... why do you have libc.so as a linker script? (I want to know!)
10:07:50 <SamB> oh.
10:07:56 <SamB> how odd
10:08:03 <monotonom>    Use the shared library, but some functions are only in
10:08:03 <monotonom>    the static library, so try that secondarily.  */
10:08:03 <monotonom> OUTPUT_FORMAT(elf32-i386)
10:08:03 <monotonom> GROUP ( /lib/libc.so.6 /usr/lib/libc_nonshared.a )
10:08:14 <bring> yeah, mine says the same thing
10:08:16 <monotonom> Err.
10:08:25 <monotonom> /* GNU ld script
10:08:34 <monotonom>    Use the shared library, but some functions are only in
10:08:34 <monotonom>    the static library, so try that secondarily.  */
10:08:34 <monotonom> OUTPUT_FORMAT(elf32-i386)
10:08:34 <monotonom> GROUP ( /lib/libc.so.6 /usr/lib/libc_nonshared.a )
10:08:46 <SamB> thats the same as mine
10:09:03 <SamB> oh, I get it
10:13:50 <SamB> I wonder why there is a function __i686.get_pc_thunk.bx in my libc_nonshared.a ? in particular, the i686 part... and there aren't other versions, either
10:31:10 <shapr> ok, finally it works as I expect: find . -type f -links +1 -printf '%i %p\n' | sort | tee dupes | uniq -W 1 | comm -3 - dupes | cut -d' ' -f 2 > deletes
10:32:23 <cptchaos> shapr: are you a member of the "commandline Brotherhood" ?
10:32:35 <shapr> what's that?
10:32:42 <shapr> I probably would be if I knew what it was.
10:32:57 <shapr> I fondly remember the first day I wrote a spellchecker in less than 80 chars of shellscript.
10:33:06 <cptchaos> do you know the ascii-art demo BB?
10:33:14 <shapr> oh yeah, that's awesome
10:34:04 <cptchaos> there somone said, he founded the "commandline brotherhood", I was referring to that.
10:34:33 <cptchaos> I thing, it is actually more a state of mind, than an real oraganisation
10:34:37 <cptchaos> ;-)
10:35:50 <shapr> ok, I'll give myself a membership badge the day I have an installed copy of http://www.linuxfromscratch.org/
10:36:02 <cptchaos> *g*
10:36:36 <hram> shapr: LFS is not esp. fun or good. If you want to do it for performance: forget it.
10:37:10 <jmob> shapr, use GETNOO FER PROFORMANCERS !111!!!!
10:37:15 <shapr> I only want it for pedagogical purposes, that would be the fun in it for me.
10:38:37 <hram> shapr: Yes, thats good. But make sure to keep your old system too. You'll get tired of messy compilations...
10:38:52 <shapr> believe me, I wouldn't install it on my for-work machine.
10:39:02 <shapr> well, maybe on its own partition.
10:41:43 <bring> I put a an LFS on a bootable CD a couple of years ago, that was pretty interesting
10:42:02 <bring> of course, nowadays I'd just go with knoppix or something
10:42:27 <hram> You might be tempted to use your home-system... Don't!   (bring: CD-distros comes by the dozen these days)
10:42:39 <shapr> imho, Debian is the only sane distro
10:42:48 <shapr> and even then, the installation could use some work.
10:42:59 * shapr looks significantly at Marvin-- 
10:43:21 <jmob> shapr, using Knoppix to install Debian makes it less painful
10:43:29 <shapr> can you do that?
10:43:29 <jmob> shapr, and the new sarge installer works well
10:43:37 <jmob> shapr, yeah, do a knoppix hd install
10:43:47 <jmob> shapr, since knoppix basically is Debian
10:44:09 <shapr> I want to try the new installer, I've heard the beta is cool.
10:47:38 <SamB> I think FreeBSD is sane too. (yes, I know you meant linux distributions ;-)
10:50:01 <stepcut> plus, you can install debian on FreeBSD...
10:50:11 <stepcut> then you can be completely sane!
10:50:28 <Igloo> Am I confused or should GHC never be generating core like this?
10:50:29 <Igloo> let { a :: GHC.Prim.Int#
10:50:29 <Igloo>       a = GHC.Prim.*# 4 ww8 }
10:50:29 <Igloo> in case GHC.Prim.<# a 0 of wild21 {
11:01:36 <bring> don't you just love getting "the `impossible' happened" from ghc
11:03:57 <shapr> mission ... impossible!
11:04:40 <monotonom> John von Mnemonia
11:05:01 <shapr> that must be a william gibson joke
11:07:39 <SamB> Igloo: what is supposed to be wrong with that?
11:09:39 <Igloo> It looks to me like it's going to make a lazy suspension for how to get a, then immediately demand it
11:10:37 <Marvin--> Igloo: what does the .hs look like?
11:11:30 <Igloo> foo :: STUArray s Int Word32 -> [Word8] -> Int -> ST s ()
11:11:30 <Igloo> foo arr ps i = writeArray arr i w
11:11:30 <Igloo>   where i' = 4 * i
11:11:30 <Igloo>         w = fromIntegral $ ps !!  i'
11:12:32 <Marvin--> all right, so ww8 is the i, and a is the i'...
11:13:39 <Marvin--> and the a < 0 must come from (!!), right?
11:14:03 <Igloo> Yes
11:15:36 <Marvin--> so what are you suggesting it should be instead? The a should be inlined in the application?
11:15:47 <bring> stepcut: do you know if the template haskell type class problem you reported in december was fixed?
11:16:15 <bring> just got bitten by the same thing, and found your mail in the archives
11:16:30 <Igloo> case GHC.Prim.*# 4 ww8 of a { x -> case GHC.Prim.<# a 0 of wild21 {
11:17:06 <Marvin--> errr
11:18:57 <Marvin--> why should it use a case expression for that?
11:19:07 * Marvin-- admits it's a long time since he read Secrets...
11:19:23 <Igloo> Because core lets are lazy. It may be another instance of Foo# being treated specially, though
11:24:17 <Si> I have a question, let's say I have a large representation of a bunch of typed entities in XML and these entities involve references between them, sometimes they may be infinately recursive. What would you say the best way is of A) Storing this data B) Marshalling this data?
11:35:48 <Si> Ok, they way I'm doing it at the moment is I read it into a prelinimary data-structure, which just store information about the tags etc. When I get a references I put it into a hashmap and I store a referer to it as a string in any refering elements
11:36:49 <Si> Then I convert it to a further structure where the type data is mapped and the references are taken out of the HashMap and turned into IORefs
11:37:41 <Si> then finally when I want to marshal a single value from within this structure, if it isn't a references I simply use read to convert the data and let coercision do the rest
11:39:28 <Si> however because it may be an IORef, my marshaller has to return a structure which takes this into account; namely data Marshallable a => Value a = Val a | IORef CallValue | Null
11:40:14 <Si> where CallValue is my marshalled data, which must be read from the IORef and marshalled again
11:53:05 <SamB> heh, I should think monotonom's quit message would be obvious... as if anyone would want to join 99.9% of the channels...
12:01:36 <jameson> SamB: I disagree with your interpretation. "the channels joined by all who join all channels you join" to me means all channels c such that "forall o. (forall c'. Join(you, c') and Join(o, c')) => Join(o, c)". I would argue that there are very few, if any, channels in practice with this property...
12:05:38 <SamB> it needs parentheses
12:10:48 <LittleDan> When GHCi reports the type of 1 as 1 :: forall t. (Num t) => t, does that mean that 1 is something from the Num class, but we don't know what type? Isn't it just an Int?
12:11:48 <SamB> LittleDan: yes, and no.
12:11:54 <SamB> respectively
12:12:06 <LittleDan> So it's not really any definite type?
12:13:02 <LittleDan> When I declare it do be something in particular, it changes to that type
12:13:07 <keverets_> yup.
12:13:25 <SamB> not really, no.
12:13:34 <LittleDan> what is it?
12:13:49 <stepcut> fudget!
12:13:50 <keverets> well, it was then always that type.
12:14:09 <SamB> LittleDan: what is what?
12:14:16 <LittleDan> well when I declare it its type becomes definite
12:14:30 <keverets> if you say "1 :: Int" then it's an Int.
12:14:54 <LittleDan> SamB: you just said "not really, no", so I wanted you to tell me what it was.
12:15:57 <SamB> LittleDan: it is not really any definate type, like you said. sorry to be confusing and ambiguous ;-)
12:18:57 <LittleDan> When I did any later things(I had declared a variable to be an integer before) that probably should have fallen under the same forall t. (Num t) => t type, it reported them to be Integers.
12:19:02 <LittleDan> why is that?
12:19:09 <LittleDan> I didn't declare 1::Integer
12:19:43 <SamB> LittleDan: type inference, presumably
12:20:03 <LittleDan> But is that correct inference? They were different variables.
12:21:29 <SamB> what did you do with this other variable?
12:22:34 <LittleDan> I was under GHCi, so I did 
12:22:34 <LittleDan> let x = 1
12:22:34 <LittleDan> x :: Integer
12:22:34 <LittleDan> :t x
12:22:34 <LittleDan> --x::Integer
12:22:35 <LittleDan> let y = 5
12:22:37 <LittleDan> :t y
12:22:39 <LittleDan> --y::Integer, for some reason
12:25:35 <SamB> well, hmm, I don't think you should worry about what monadic lets do in the interpreter...
12:25:39 <SamB> (at the top level)
12:26:05 <LittleDan> So outside of the monadic lets, it should be OK?
12:27:09 <SamB> it should be fine in modules and such
12:27:19 <LittleDan> ok
12:39:10 * earthy mumbles type defaulting
12:39:27 <LittleDan> what's that?
12:40:36 <earthy> that's when you assign a number to a variable it gets defaulted to a certain type
12:40:42 <earthy> but it's a bit more complicated than that'
12:41:02 <SamB> earthy: yes, yes...
12:41:13 <SamB> but why *here*?
12:43:02 <earthy> SamB: dunno.
13:54:27 <tooki> hello partypeople
13:54:40 <Marvin--> where? where?
13:56:13 <tooki> here ?
14:07:43 <Matt-W> Massively easy question here
14:08:01 <Matt-W> read a single char from the standard input and get it back as a Char
14:08:03 <Matt-W> how?
14:08:08 <LittleDan> getChar
14:08:20 <Matt-W> that doesn't behave as I expected
14:08:41 <Matt-W> it waits for a char, but doesn't return when it gets one, it carries on waiting...
14:08:55 <LittleDan> That's called buffered input
14:09:06 <LittleDan> it's at the OS level so you can't do anything about it
14:09:14 <LittleDan> if you press enter it should flush the buffer
14:09:19 <Matt-W> nope
14:09:39 <shapr> you need to turn off buffering
14:09:51 <LittleDan> that's possible?
14:10:00 <shapr> yup
14:10:01 <Matt-W> it's possible in C
14:10:25 <shapr> it's possible in Haskell too
14:10:31 <CrewdenX> Matt-W: not portably it isn't.
14:10:50 <CrewdenX> Matt-W: if you're under unix you can probably find a haskell interface to termios functions.
14:11:14 <LittleDan> Matt-W: What areyou trying to do?
14:11:27 <Matt-W> LittleDan: I need a single character from the user
14:11:33 <LittleDan> why?
14:11:39 <Matt-W> Because I do
14:11:41 <shapr> http://www.haskell.org/ghc/docs/latest/html/libraries/base/System.IO.html#v%3ANoBuffering
14:11:43 <Matt-W> does it matter?
14:11:59 <shapr> I remember how to turn off buffering for a handle
14:12:12 <shapr> but I don't remember off the top of my head how to turn it off for all the standard reads
14:12:14 <Marvin--> hSetBuffering stdin NoBuffering or something like that
14:12:16 <LittleDan> If you tell us, we might be able to come up with another solution
14:12:45 <shapr> well, wanting to do something is reason enough in my opinion
14:13:09 <shapr> Marvin--: that sounds right
14:13:19 <shapr> Matt-W: try what Marvin-- said
14:13:22 <Matt-W> I just did
14:13:25 <shapr> did it work?
14:13:26 <Matt-W> it doesn't seem to make any difference
14:13:29 <shapr> oh
14:13:37 <Marvin--> that sounds weird
14:13:42 <Matt-W> this is ghc 6.2 on Linux if that makes any difference btw
14:13:54 <LittleDan> sharpr: When I was helping Python n00bs, they often were asking vague questions about the wrong thing
14:13:58 <Marvin--> switching between NoBuffering and LineBuffering from within ghci makes a lot of difference to me
14:14:07 <LittleDan> sharpr: And knowing their intentions helped
14:14:24 <Matt-W> yeah, works in ghci
14:14:25 <Matt-W> weird
14:14:30 <Marvin--> but not in a compiled program?
14:14:34 <Matt-W> mmm
14:14:36 <Marvin--> that's odd
14:14:42 <Matt-W> I suspect ghci's mucking with the buffering itself
14:14:52 <Matt-W> so it's having an effect on the hSetBuffering call
14:14:59 <Matt-W> hmm
14:15:16 <Matt-W> I shall probably have to read in a line as a string and use the first character instead, I think
14:15:27 <shapr> LittleDan: I agree, knowing the intentions can often make a difference as to the answer
14:15:33 <Marvin--> Matt-W: works for me
14:16:03 <LittleDan> So, just out of curiosity, what are you trying to do?
14:16:14 <shapr> LittleDan: on the other hand, questioning can get out of hand ;-)
14:16:25 <LittleDan> it's just one simple question
14:16:32 <Matt-W> Marvin--: weird, it really doesn't work for me. getLine isn't even working right.
14:16:40 * Matt-W starts to suspect there's something wrong with his shell
14:16:49 <Marvin--> My simple program   main = hSetBuffering stdin NoBuffering >> getChar >>= print   works just as I expect
14:17:17 <Marvin--> that is, I run it, press a, and it prints 'a'
14:17:37 <phubuh> Er.  Is _casm_ gone?
14:17:58 <Matt-W> Marvin--: It must be my system, it works on my Mac
14:18:31 <phubuh> I can't get HOpenGL to compile.
14:18:54 <shapr> hej phubuh! wassup?
14:19:00 <shapr> Marvin--: back so soon?
14:19:03 <phubuh> hej shapr!  Not much.
14:19:05 <Marvin--> lousy sloppy focus
14:19:25 <phubuh> I'm playing around with plotting vector fields with HOpenGL.  Or, I'd like to be, but I can't get it to work.
14:19:31 <shapr> what's the problem?
14:19:54 <phubuh> I get a bunch of _casm_ related errors when compiling GL_BasicTypes.hs :-/
14:20:30 <shapr> huh, are you using GHC HEAD or something?
14:20:33 <phubuh> Maybe I should check HOpenGL out from CVS...
14:20:38 <phubuh> Nope, 6.2.
14:20:47 <phubuh> I think...
14:20:49 <shapr> hm, I know 6.2.1 is nearing release.
14:21:40 <shapr> that's probably your best bet
14:21:52 <Matt-W> Argh I'm such an idiot
14:22:21 <Marvin--> Matt-W: there, there, what have you done now? :)
14:23:51 <Matt-W> Marvin--: only gone and fixed it
14:24:25 <Matt-W> thanks for the help
14:24:33 <Marvin--> what was wrong? *curious*
14:25:00 <Matt-W> I was being braindead
14:25:11 <shapr> Si: can you use the credit card transformation to skip the IORef step entirely?
14:25:23 <Marvin--> Matt-W: that doesn't tell me a lot :)
14:25:35 <Marvin--> c'mon, I wanna gloat ;)
14:25:55 <Matt-W> running it on Mac OS X revealed that it wasn't that part of the program which was actually at fault, 'cos I got a different error message. You would think I would have learned by now to never assume anything except the simplest possible program is actually doing what you think it is
14:26:06 <Matt-W> and probably not even that
14:26:13 <Marvin--> :)
14:26:17 <Matt-W> and for 'different' read 'one which was actually there'
14:26:38 <Matt-W> So of course now I need to fix the other bit, but that's a different problem
14:36:02 <phubuh> Er, I'm bad with these GNU auto* tools -- how do I create a ./configure from what's in the fptools repository? http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/#dirlist
14:36:10 <shapr> autoconf
14:36:16 <shapr> oh wait
14:36:16 <shapr> fptool
14:36:36 <phubuh> Oh, thanks. :-)
14:36:49 * Marvin-- shudders
14:36:50 <shapr> I don't know if that will work in fptools
14:36:57 <phubuh> I hope I can build the OpenGL and GLUT modules without all the other junk...
14:37:10 <shapr> unlikely :-)
14:37:21 <shapr> the debs work nicely
14:38:25 <phubuh> I need to reinstall Debian some day.  I was bored and installed something called `Arch Linux', which really isn't as good.
14:38:53 <phubuh> Maybe I can use the debs anyway, somehow.
14:39:43 <shapr> oh, it seems autoconf is the right way to do it in fptools
14:39:53 <phubuh> configure: creating ./config.status
14:39:55 <phubuh> config.status: creating mk/config.mk
14:39:55 <phubuh> config.status: creating mk/config.h
14:39:55 <phubuh> config.status: error: cannot find input file: mk/config.h.in
14:39:59 <phubuh> Baaaaah.
14:40:10 <Igloo> You want autoreconf
14:40:46 <shapr> whew, an expert arrives
14:41:02 <phubuh> :-)
14:42:11 <phubuh> Oops, HOpenGL really doesn't seem to want to compile stand-alone...  is there some separate HOpenGL repository that I'm missing?
14:42:44 <Igloo> I've never tried to do it standalone
14:42:55 <phubuh> :/
14:43:03 <phubuh> Maybe I'll install Debian right away... it can't take that long.
14:43:12 <Igloo> You know it makes sense.  :-)
14:43:15 <phubuh> :-)
14:43:38 <Marvin--> http://kitenet.net/~joey/blog/entry/11_keystrokes_to_debian-2004-03-04-01-58.html
14:44:53 <Igloo> Nice
14:45:20 <phubuh> Hee hee.
14:45:26 <Igloo> "apt-get install ghc6" is longer than that  :-)
14:47:26 <phubuh> OK, rebooting to install Debian. :D
14:48:31 <stepcut> bah, you can install LindowsOS with no keystrokes or mouse clicks ;)
14:48:38 <Pseudonym> Or disks.
14:48:42 <Pseudonym> Or computer.
14:49:11 <Marvin--> but then you'll get Lindows
14:49:17 <Si> shapr: what is the credit card transformation?
14:49:33 <stepcut> but you can still do 'apt-get install ghc6' ;)
14:49:55 <Pseudonym> The credit card transformation is "buy now, pay later".
14:50:17 <Pseudonym> It's using lazy evaluation to get otherwise impossible evaluation orders/
14:50:41 <shapr> g'day Pseudonym 
14:50:45 <Pseudonym> G'day.
14:50:51 <shapr> what's shakin?
14:50:57 <Pseudonym> Oh, nothing much.
14:51:03 <Pseudonym> Been reading through Conceptual Mathematics.
14:51:14 <shapr> what do you think?
14:51:15 <Pseudonym> I love the style.  It's so readable.
14:51:37 <Pseudonym> It usually takes me a whole train trip home to work my way through a six-page paper.
14:51:46 <Pseudonym> I can cover about three sessions with this book.
14:52:04 <shapr> I thought there was info in HaWiki about the credit card transform
14:52:17 <Pseudonym> Not really.
14:52:18 <shapr> aha
14:52:22 <Pseudonym> http://haskell.org/hawiki/CreditCardTransform
14:52:25 <shapr> http://www.haskell.org/hawiki/TyingTheKnot?action=highlight&value=credit+card
14:52:28 <Pseudonym> I wouldn't call that "info".
14:52:38 <Pseudonym> Yes, TyingTheKnot is better.  Might want to make a link.
14:53:37 <shapr> it is amusing to zip between CreditCardTransform and CircularProgramming
14:53:41 <shapr> but it gets boring after awhile
14:53:43 <Pseudonym> http://haskell.org/hawiki/RunTimeCompilation also
14:55:43 <Si> I don't want to use IORef if I can avoid it, it makes the whole data-structure boiler plate infested
14:57:25 <Pseudonym> Sure.
14:57:52 <Pseudonym> You can use any dictionary data structure, pretty much.
14:58:05 <Pseudonym> Arrays, lists, FiniteMaps... all work.
14:58:29 <Si> So either way I'm going to have to have some sort of state to make this work
14:58:30 <shapr> so, who is that Andrew Bromage guy who writes all that stuff on the wiki? ;-)
14:58:44 <Pseudonym> Looks like a bloody know-it-all if you ask me.
14:59:12 * shapr grins
14:59:13 <Marvin--> :)
14:59:53 <Pseudonym> One other benefit of the gentle category theory book is that it leaves you space to think about things.
14:59:59 <Pseudonym> Rather than being bombarded with jargon.
15:00:15 <shapr> hey, have you tried darcs?
15:00:18 <Pseudonym> For example, the name "point-free style" makes perfect sense.
15:00:26 <Pseudonym> When you've had time to think about it.
15:00:55 <Pseudonym> shapr: No, not yet.
15:01:02 <Pseudonym> You keep encouraging me to and I never do it.
15:01:15 <Pseudonym> Dunno why.
15:01:20 <shapr> well, it's reached the debian mirrors, I think.
15:01:36 <shapr> it's now an official package
15:01:41 <shapr> courtesy of SyntaxNinja 
15:02:26 <Pseudonym> Cool.  That'll give me an excuse.
15:02:28 <Si> did anyone ever try creating a Schema Parser/Validator/Builder in Haskell?
15:02:52 <shapr> HaXML has one for DTDs, I think.
15:03:03 <shapr> but it's not a real XML Schema
15:03:37 <shapr> I've only read the first few pages of the Conceptual Mathematics book
15:03:41 <Si> HaXML doesn't have namespaces even
15:03:45 <shapr> work keeps getting in the way.
15:03:56 <shapr> I thought recent HaXML did have namespaces
15:04:01 <SamB> XML Schema is good for what exactly?
15:04:01 <Si> I heard something about schemas and Generic Haskell, but I didn't really understand
15:04:05 <Si> maybe it does
15:04:07 <SamB> isn't Relax NG nicer?
15:04:14 <Si> probably :)
15:04:14 <shapr> maybe I'm thinking of HXmlToolkit
15:04:23 <shapr> isn't Relax NG written in Haskell or so?
15:04:24 <Si> yeah I use HXT
15:04:33 <shapr> I like HXT
15:04:36 <shapr> it's pretty spiffy
15:05:03 <shapr> I'm particularly fond of dynamic-typing ability to fling nodes around randomly, and then validate them at the end when you feel like it.
15:05:21 <SamB> shapr: relax ng is not written in one particular language... there is an implementation in emacs lisp, even!
15:05:28 <shapr> scary
15:05:45 <Si> but w3c doesn't use Relax primarily
15:07:02 <mwotton> i just got a gentle reminder to upgrade, methinks... wxHaskell won't compile on my 256mb box without an unholy amount of swap.
15:07:09 <mwotton> should have stayed a C hacker. :)
15:07:13 <shapr> haha
15:07:15 <shapr> g'day mrak
15:07:22 <mwotton> g'day shapr
15:07:54 <SamB> mwotton: what do you think is an unholy amount of swap?
15:07:57 * shapr yawns
15:08:03 * Jerub waves
15:08:07 <SamB> I have ~1GB just to be safe
15:08:07 <shapr> man, I gotta talk to the migrationsverket tomorrow. suckage.
15:08:14 <shapr> g'day Jerub 
15:08:18 <mwotton> hm. i don'ot actually know - i just grabbed swapd and let it go to town.
15:08:20 <Pseudonym> Are they scary?
15:08:32 <Si> woah 1GB swap?
15:08:35 <shapr> they might throw me out of the country if I do something stupid.
15:08:44 <mwotton> i'm assuming it was an unholy amount, because it took half an hour on a single file.
15:08:49 <Pseudonym> Yes, but that's not what I asked.
15:09:00 <Pseudonym> Some government departments deliberately try to be scary and some don't.
15:09:32 <shapr> my arrival caused some new laws to be passed, so I think they're more scared of me.
15:09:36 <SamB> I don't think I actually use near all of it
15:09:56 <Pseudonym> Oh, it's the Obsfuscated Swedish Immigrant Contest?
15:10:02 * shapr laughs
15:10:05 <shapr> actually, yes.
15:10:16 <mwotton> swapd looks pretty cool, actually - it allocates swap space as you need it.
15:10:20 <shapr> I had a legal euro residency in Finland
15:10:51 <Si> this talks about Schema in Generic Haskell http://www.cs.uu.nl/people/franka/papers/sblp2003.pdf
15:11:02 <Si> but I don't understand it very much...
15:11:28 <shapr> Sweden has Euro and Scandinavian agreements that amount to having to honor the finnish residency, but it's always happened before with Finnish citizens, *never* with a US citizen who had Finnish/EU residency.
15:11:37 <Pseudonym> Ah, OK.
15:11:57 <Pseudonym> Woohoo, you make history.
15:12:03 <shapr> so, I was working illegally for six months, without my knowledge.
15:12:33 <Pseudonym> Oh, I thought you were legal but they didn't want you to be.
15:12:35 <shapr> anyways, I performed a local privilege elevation attack
15:12:59 <shapr> yes, that's it exactly.
15:13:23 <Pseudonym> They passed laws because of you and didn't tell you?
15:13:48 <SamB> that doesn't sound very nice...
15:13:55 <shapr> they told me that a bunch of the migrationsverket people in Stockholm got together to try to figure what to do with me.
15:14:12 <Pseudonym> I'd tell them where they can stick their country.  They really like it when Americans say that.
15:14:25 <shapr> oh, I'm sure it'd help me get a residence permit ;-)
15:14:29 <Pseudonym> :-)
15:14:32 <shapr> I'm not sure where...
15:14:59 <Pseudonym> It reminds me of a Flanders & Swann song.  "Oh, it all makes work for the working man to do."
15:15:23 <shapr> anyways, I got a one year permit after six months of waiting, and they said "come back next year"
15:15:28 <Pseudonym> Tell them that you were responsible for an increase in public sector productivity, so how can that be bad?
15:15:29 <Marvin--> wow, over 20 years old SNL show
15:15:45 * shapr grins
15:15:45 <Pseudonym> And this is next year, right?
15:15:49 <shapr> that's right
15:15:55 <Pseudonym> Well, good luck.
15:16:30 <shapr> I'm sure it'll work out.
15:16:52 <Marvin--> with the New York mayor hosting it
15:16:52 <Pseudonym> I'm sure it will too.
15:18:05 <Marvin--> shapr: er, so, the immigration laws don't cover your case?
15:18:26 <shapr> if it doesn't work out, I'll see if blackdog lets me sleep on his floor for awhile till I can find a job there.
15:18:56 <Pseudonym> You might have to move from country to country, leaving a wake of new legislation behind you.
15:19:05 <Marvin--> haha
15:19:37 <Marvin--> eventually they'll start having international conferences about shapr, with people going "what ARE we going to DO with this guy?"
15:19:55 <Pseudonym> You might have treaties made about you.
15:20:02 <SamB> hehehehe
15:20:58 <Igloo> shapr: Why in Australia, OAIC?
15:20:59 <Pseudonym> He's gone.
15:21:12 <blackdog> shapr: no worries, we don't know what to do with the other room anyway.
15:21:27 <Pseudonym> Actually, you'll probably have an easier time of it in Australia.
15:22:02 <Igloo> I must stop doing that
15:22:12 <blackdog> Igloo: the sun, the girls, the beaches, the sun...
15:22:41 <Pseudonym> blackdog: I'm in Melbourne.  We only have the girls.
15:23:35 <blackdog> Pseudonym: in your case it'd be the sun, the hail, the snow, the drought, and then it's time for morning tea.
15:23:44 <Pseudonym> No, not tea.  Coffee.
15:23:50 * shapr laughs
15:24:13 <Pseudonym> And no snow, but apart from that, yes, pretty much.
15:24:22 <SamB> hail?
15:24:30 <Pseudonym> Melbourne is infamous for going through about three seasons on a typical afternoon.
15:25:18 <Pseudonym> Yes, hail.
15:28:14 <Pseudonym> http://bonni.net/hail/size.jpg <- typical size comparison
15:29:08 <Marvin--> MAN what a large foot!
15:29:30 * shapr grins
15:29:36 <Pseudonym> You need a smaller monitor, I think.
15:36:52 <ecraven> c
15:37:42 <shapr> = (e^1/2)/m right?
15:38:25 <Pseudonym> Something interesting in Conceptual Mathematics.
15:38:30 <shapr> what?
15:38:43 <Pseudonym> The identities on graph objects.
15:38:50 <Pseudonym> For example: A * D = D + D
15:39:04 <Igloo> (em)^1/2, modulo signs, for the approximation
15:39:20 <Pseudonym> Where A is the "arrow" graph and D is the "dot" graph.
15:39:31 <Pseudonym> I wonder if these are actually useful for generating concrete data structures.
15:40:03 <Pseudonym> Can you represent: data Foo = Foo Arrow Dot
15:40:17 <Pseudonym> by: data Foo = Foo1 Dot | Foo2 Dot
15:40:50 <Pseudonym> Hmmm.  Have to think about that.
15:41:10 <Pseudonym> My intuition about the connection between the category of types and every other category may be off.
15:41:15 <Pseudonym> Oh, cakes.  BBL
15:41:27 <Pseudonym> Night to all those for whom it is night and who will be asleep when I get back.
15:41:33 <shapr> me
15:41:38 <shapr> I shall be asleep very soon
15:48:46 <Heffalump> where would a random discussion page about something Haskell-ish go on the wiki?
16:18:05 * Heffalump braindumps a random and probably not particularly useful train of thought into http://haskell.org/hawiki/MergingSTThreads
16:20:14 <phubuh> Hello from Debian!
16:20:56 * jlouis hello from hell (*BSD)
16:21:00 <jlouis> doh
16:21:10 <jlouis>  s,/em,,
16:22:12 <LittleDan> Is there any word for haskell programmers (like python users are Pythonistas)?
16:22:41 <jlouis> geniuses
16:22:43 <monotonom> Not one I heard of.
16:22:44 <phubuh> I've heard the word `ivory-tower academical loonies' used in that context.
16:23:00 <jlouis> haha
16:23:27 <jlouis> me answer bears a resemblance to an ivory-tower, yes
16:23:32 <jlouis> my
16:24:07 <phubuh> Aagh, all these Emacs color themes kill my eyes. :(
16:24:26 <monotonom> Use a monochrome monitor.
16:24:41 <phubuh> Black & white color themes hurt me the most.
16:25:05 <monotonom> There are green monochrome monitors and amber monochrome monitors.
16:25:25 <phubuh> Oh, right.
16:25:42 <phubuh> They all tend to have high contrasts though.
16:25:57 <phubuh> Annoyingly, the color theme that hurts my eyes the least is the ugliest. :-/
16:50:34 <Jerub> shapr: you're an alternative input device user aren't you?
16:50:47 <LittleDan> What's existential polymorphism?
16:50:52 <Jerub> shapr: I need to reduce the strain on my mouse hand, but i've got a low budget.
16:52:08 <SamB> Jerub: switch hands?
16:52:58 <Jerub> SamB: *very* tempting.
16:54:02 * Jerub attempts it for a while.
16:54:31 <Jerub> I'd really like a keyboard with no numberpad/arrowkeys.
16:54:54 <Optikal> They have alot of mini-keyboards
16:55:02 <jameson> Jerub: I've found that using the ion/ion2 window managers or certain setups for fvwm2 allows productive system use with almost no use of a pointing device, if that helps (if you're using X11)...
16:55:32 <phubuh> Hello again.
16:55:54 <LittleDan> phubuh, do you know what existential polymorphism is?
16:56:02 <phubuh> I'm guessing it's a Bad Thing when your proprietary libGL.a fails to link properly...
16:56:46 <LittleDan> It's telling you to switch to a platform with OSS OpenGL
16:57:56 <SamB> phubuh: what proprietary libGL.a is that?
16:58:02 <phubuh> The NVIDIA one. :-/
16:58:13 <phubuh> Looks like it just wants to be linked with pthreads, though.
16:58:19 <phubuh> LittleDan: Nope, I've no idea.
16:58:25 <SamB> stay away from those loons
16:58:35 <phubuh> Yeah, I'm planning to. :-)
16:58:39 <Jerub> I'm using linux.
16:59:14 <phubuh> Oh, yay, -lpthread solved it.
16:59:41 <phubuh> $ ./a.out
16:59:42 <phubuh> Xlib:  extension "XFree86-DRI" missing on display ":0.0".
16:59:42 <phubuh> Er.
17:00:11 <SamB> I wish the Voodoo 3 drivers wouldn't be so crashable...
17:01:54 <phubuh> Bah, I need to restart X _again_.
19:45:21 <Pseudonym> AAAAARRRRGHHH!
19:45:37 <Riastradh> Something bothering you, Pseudonym?
19:45:46 <Pseudonym> How'd you guess?
19:45:57 <Riastradh> I'm not sure.  It was a pretty random thought.
19:46:21 <Pseudonym> Forte 8 + purify + 64-bit sparc is bothering me.
19:49:33 <Pseudonym> Unfortunately, I don't have a new software development methodology to sacrifice to the gods at Rational.
19:52:20 <Pseudonym> This is scary.
19:53:07 <Pseudonym> My boss, who handles the purify stuff, has in his PURIFYOPTIONS: -ignore-signals=SIGSEGV
19:53:33 <Pseudonym> Either that doesn't mean what I think it means, or I'm in for a bumpy debugging session.
19:54:07 <Igloo> That's how you fix the bug where the window keeps disappearing, 'innit?
19:54:24 <Pseudonym> Oh, that could be it.
19:55:36 <Pseudonym> Purify is probably the least accurately named pieces of software ever.
19:55:45 <Igloo> What does it do?
19:55:52 <Igloo> It rings a vague bell but I can't place it
19:55:54 <monotonom> It filters water? :)
19:55:55 <Pseudonym> Uhm... it's kinda like valgrind.
19:56:04 <Pseudonym> Only it's older and works on more platforms.
19:56:41 <Pseudonym> It detects immoral things that your code does, like reading uninitialised memory.
19:56:44 <Igloo> Ah
20:17:59 <Pseudonym> Oh, well.  I think I'll be rebuilding under linux and using valgrind.  At least that works.
22:43:34 <jmob> phubuh, hi
22:43:43 <phubuh> jmob: hello.
23:04:34 <shapr> yow!
23:04:41 <Pseudonym> G'day.
23:05:16 <Pseudonym> All ready to see the government?
23:05:45 <andersca> boom
23:06:26 <shapr> yes, just about.
23:09:49 <Pseudonym> Good luck with that.
23:10:17 <shapr> thanks :-)
23:10:55 <Pseudonym> I'm guessing what they're going to do is either let it be, or ask you to reapply through more appropriate channels.
23:11:51 * Pseudonym is also guessing that Sweden doesn't have a huge problem with US citizens wanting to work there
23:12:48 <Pseudonym> Anyway, must away.
23:12:50 <Pseudonym> Nytol!
23:14:32 * shapr goes to talk to the feds.
23:20:05 * rt yawns.  Time for beddy-bye.
