01:33:55 <Lemmih> @commands
01:34:06 <Lemmih> @list-commands
01:35:30 <Lemmih>  /-:
02:17:22 <shapr> Lemmih: sorry, I killed ScannedInAvian.org last night, I have to take the bus over there and fix it.
02:18:59 <Lemmih> shapr: Where is 'fromInt' located?
02:19:37 <shapr> it's in ghc4 I think. it's fromIntegral nowaday.s
02:19:44 <Lemmih> eh
02:20:15 <Lemmih> So I have to change it manually in the source for hdirect?
02:20:50 <shapr> I guess so?
02:21:37 <shapr> which version of hdirect do you have?
02:22:08 <Lemmih> 0.17
02:23:37 * Heffalump drags himself out of bed
02:24:05 <shapr> good morning Heffalump!
02:28:09 <Lemmih> Hmm It doesn't look like it's possible to compile hdirect with ghc6.2 /-:
02:37:31 * earthy drags himself onto a couch
02:38:49 <Lemmih> So it's impossible to utilize a mysql database from a Haskell program?
02:42:49 <bring> Lemmih: use HaskellDB
02:43:08 <bring> or HSQL if you feel like writing SQL yourself
02:43:58 <bring> HaskellDB: http://haskelldb.sourceforge.net/
02:44:07 <bring> HSQL: http://htoolkit.sourceforge.net/
02:44:56 <bring> HaskellDB sits on top of HSQL, giving you a nive declarative interface that looks like relational algebra
02:46:32 <Lemmih> But HaskellDB is a windows only library, right?
02:47:50 <earthy> is it?
02:50:53 <earthy> the original HaskellDB only supports a Windows-specific ADO-based database backend
02:51:02 <earthy> but not HaskellDB 0.6 anymore, afaict
02:54:14 <Lemmih> "ERROR "/usr/lib/hugs/lib/exts/MarshalUtils.hs":2 - Syntax error in module definition (unexpected keyword "with"; possible cause: -W option not used.))"
02:54:35 <Lemmih> ^^ I got that when I tried to compile hsql.
03:02:25 <earthy> that sucks. :)
03:02:38 <bring> what version of HSQL is that?
03:03:30 <bring> earthy: you're right, HaskellDB should work anywhere where HSQL works
03:03:32 <Lemmih> 1.2.1
03:03:48 <bring> what OS are you compiling on?
03:03:56 <Lemmih> Linux.
03:04:03 <bring> what compiler?
03:04:09 <Lemmih> ghc6.2
03:04:31 <bring> ah, it's probably your hugs version
03:04:39 <bring> what version of hugs do you have?
03:05:04 <bring> if you don't what Hugs support, there's and option to configure to turn that off I think
03:05:08 <bring> Iäll have a look
03:05:53 <Lemmih> --disable-hugs=yes?
03:06:14 <bring> I think it's --without-hugs
03:06:17 <bring> not sure
03:06:19 <Lemmih> (I didn't receive you last message).
03:06:35 <bring> <bring> I think it's --without-hugs
03:06:35 <bring> <bring> not sure
03:07:04 <Lemmih> The message before that (-:
03:07:08 <bring> oh
03:07:24 <bring> <bring> ah, it's probably your hugs version
03:07:24 <bring> <bring> what version of hugs do you have?
03:07:24 <bring> <bring> if you don't what Hugs support, there's and option to configure to turn that off I think
03:07:24 <bring> <bring> I'll have a look
03:07:36 <Lemmih> oh thx
03:07:53 <Lemmih> --without-hugs did the trick.
03:08:00 <bring> cool
03:09:45 <bring> let me know if there are any other problems, I'm a HaskellDB and HSQL developer
03:21:51 <Lemmih> It's working (-: Thx bring.
03:22:26 <bring> just HSQL or HSQL and HaskellDB?
03:23:08 <Lemmih> Just HSQL.
03:35:52 * bring reads over what he's written earlier, realizes that his sloppy typing must be incredibly annoying to read, goes off to punish himself
03:51:32 <Marvin--> hm, yeah, writing
03:51:36 <Marvin--> I've heard of that
03:51:47 <andersca> like, a report?
03:51:55 <Marvin--> hmm
03:51:56 <earthy> not an academic, eh, marvin--? :)
03:51:57 <Marvin--> perhaps
03:53:48 <Marvin--> earthy: I'm trying to finish writing my degree thesis
03:56:07 <Marvin--> so I'm merely being sarcastic, and berating myself for not having written a single word on it for two weeks
03:58:25 <Marvin--> and I still haven't heard back from Maarten de Mol, so I still don't have anything useful to write about Sparkle
04:12:03 <earthy> hmmmz.
04:12:18 <earthy> yeah, Maarten seems to only respond when fysically talking to him
04:13:25 <Marvin--> that could be a problem, I don't have the funding to go to .nl ;)
04:13:33 * earthy grinz
04:14:08 <earthy> I'm not sure I could even go and visit him to kick the bejesus out his ass
04:14:36 <Marvin--> dammit, there's not even any source code available for Sparkle, and only a windows binary? *sigh*
04:14:41 <earthy> as I think he isn't formally a PhD student anymore. ;)
04:15:03 <Marvin--> oh?
04:15:09 <Marvin--> shucks, what's happened?
04:15:45 <earthy> oh, he had 4 years to do his stuff in
04:15:52 <earthy> that period ended late 2002
04:15:57 <Marvin--> oh
04:22:02 <shapr> yow!
04:25:42 <Marvin--> damn
04:25:46 * Marvin-- watches the athletics
04:25:58 <Marvin--> or track & field, or whatever it's called
04:37:16 <ludde> track & field 2? the classic NES game?
04:41:58 * Heffalump appears
04:42:10 * shapr disappears
04:42:13 <earthy> wow, that dragging out of bed took quite some time. ;)
04:42:22 <Heffalump> :-)
04:42:51 <Heffalump> my girlfriend is visiting...
04:44:03 <earthy> `ah'
04:44:13 <earthy> say no *more*! whooo eh, whoooo. :)
04:44:13 <Heffalump> earthy: you remember that guy on the train I told you about? What was he, if not a ticket-checker?
04:44:23 <earthy> enqueteur.
04:44:23 <earthy> ;)
04:44:38 * Heffalump is unilluminated
04:44:39 <earthy> basically a counter
04:44:49 <Heffalump> ah
04:44:56 <earthy> counting number of people on the train *and* the type of tickets they use
04:45:08 <Heffalump> so what if I hadn't had a ticket?
04:45:13 <earthy> so that the pricing mix can be optimized
04:45:23 <earthy> he wouldn't have been able to do anything but get the ticket checker. :)
04:45:41 <Heffalump> right :-)
04:45:47 <Heffalump> is there a ticket checker on every train?
04:46:01 <earthy> there's a group of 2 on every train
04:46:11 <earthy> they may not be in the right part of the train though
04:46:19 <Heffalump> oh yes, I noticed the corridor doesn't go right through
04:59:40 <kosmikus> earthy: I had the impression that ticket checking on the trains is optimized in such a way that ticket checkers are just getting on the train one station, and leaving at the next again.
05:00:07 <kosmikus> Otherwise I can't explain why sometimes I get checked up to three(!) times when going from Amersfoort to Enschede, and sometimes not at all.
05:00:41 <earthy> ticket checking is one of the duties of the conducteurs
05:00:53 <earthy> but not the only, and they aren't really *obliged* to do so
05:01:17 <kosmikus> but when I get checked more than once, it's also always by different persons ...
05:01:31 <earthy> yes. the group of conducteurs changes
05:01:36 <earthy> sometimes erratically, even
05:02:04 <earthy> Deventer is one of the change-spots, Arnhem, I think Amersfoort, but I'm not sure
05:02:32 * Marvin-- ponders
05:02:43 <Marvin--> how do I get ghc to not do any optimization or inlining at all?
05:06:07 * Marvin-- grumbles
05:07:09 <Heffalump> use nhc ;-)
05:07:20 <Marvin--> I need -fext-core
05:07:56 <Igloo> Have you tried all the nos under "Individual optimisations" in the manpage?
05:08:32 <Marvin--> you'd think -O0 would turn off everything :(
05:08:53 <Igloo> Odd, -frules-off is listed twice
05:10:37 <Marvin--> -fno-cpr?!
05:11:14 <Marvin--> hm, -fno-pre-inlining seems to have done the trick
05:11:53 * Marvin-- wonders what the @ in extcore syntax does
05:12:42 <Igloo> It's type application isn't it?
05:12:43 <Marvin--> gah, no, that wasn't enough
05:12:54 <Marvin--> yeah, but what does  [] @ Bool  mean?
05:13:00 <Igloo> [Bool]
05:13:04 <kosmikus> sorry for the stupid question, but since when, and where, does ghc have a man page?
05:13:06 <Marvin--> oh, duh
05:13:14 <Marvin--> uh, but
05:13:22 <Igloo> Same as you can say [] Bool in Haskell
05:13:30 <Marvin--> but I meant the *value* []
05:14:14 <Igloo> kos: In the Debian packages. It's just autogenerated options lists frmo teh docs mainly, though. I think the previous maintainer showed it to SM, but he didn't take it for some reason. I'll try again when I have a minute
05:14:31 <Marvin--> Queue.propzuempty :: GHCziBase.Bool = Queue.eqBoolList (Queue.mkSimple @ GHCziBase.Bool (Queue.empty @ GHCziBase.Bool)) (GHCziBase.ZMZN @ GHCziBase.Bool);
05:14:34 <kosmikus> Marvin--: that's type application for polymorphic values, maybe?
05:14:41 <Lunar^> Success !
05:14:45 <Igloo> Marvin: Maybe it's applying the dictionary then
05:14:58 <Lunar^> I can know compile RTS with -DDEBUG
05:15:01 <Lunar^> -k
05:15:05 <kosmikus> Igloo: can I copy that for Gentoo?
05:15:31 <Marvin--> where mkSimple :: Queue a -> [a], empty :: Queue a
05:16:00 <Igloo> Yes. The script is in http://ftp.debian.org/debian/pool/main/g/ghc-cvs/ghc-cvs_20031220-3.diff.gz I think
05:16:24 <Marvin--> oh wait, eqBoolList :: [Bool] -> [Bool] -> Bool, of course, so I guess it does apply polymorphic values to types
05:16:54 <kosmikus> Marvin--: it certainly does, at it is F-omega, but I don't know the syntax
05:17:47 <Marvin--> hrrm, that ZMZN should be a variable defined in the file, it's still doing too much inlining *sigh*
05:18:33 <Igloo> Ah, yes, the hacky xml-isation is done in xmlise-flags.sgml too now
05:18:45 * Marvin-- needs more coffee
05:19:17 <Igloo> And then   xsltproc debian/flags.xsl ghc/docs/users_guide/flags.xml > debian/ghc-cvs.1   in debian/rules
05:20:23 <kosmikus> Igloo: thanks
05:34:05 <swisscheese> Hi all. This is a bit off topic but anyone know any good URLs describing approaches to getting control of bugs on large projects. Our customers are exposed to too many bugs.
06:04:41 <shapr> swisscheese: xprogramming.com
06:06:47 <andersca> all the projects I'm involved with use bugzilla
06:35:05 <alanl> are there any earth-breaking new  features in ghc6?
06:42:40 <Heffalump> Template Haskell
06:45:34 <shapr> I sometimes wonder if there should be a "packaging Haskell implementations" mailing list, or at least list of people.
06:46:20 <Igloo> Do you think there's enough traffic on the -users lists to warrant it?
06:47:15 <shapr> it's getting there
06:47:22 <shapr> though most of that traffic happens here lately
06:47:49 <shapr> since Igloo, kosmikus, and Oliver Braun all hang out here (forgive me for forgetting obraun's irc nick).
07:30:03 <shapr> yow !
07:30:26 <shapr> hey anth, wassup?
07:31:21 <keverets> hmmm... darcs is in incoming.debian.org
07:48:12 <shapr> what's the suggested reply method to ghc-users? I'd like to make those same comments to Simon Marlow, should I do a wide reply? or just to the list reply?
07:53:35 <shapr> interesting, a refactoring of Daan Leijen's DData for possible inclusion into the standard libraries: http://users.skynet.be/jyp/DData/doc/index.html
08:16:14 <Marvin--> shapr: it would be even more interesting if I could figure out where to download the code
08:32:42 <shapr> Marvin--: http://www.haskell.org//pipermail/glasgow-haskell-users/2004-March/006351.html
08:33:01 <shapr> in essence: http://users.skynet.be/jyp/DData/ddata.tar.gz
08:33:29 <Marvin--> annoying how the URLs get redirected
08:47:58 <swisscheese> Hi all. Got disconnected before. This is a bit off topic but anyone know any good URLs describing approaches to getting control of bugs on large projects. Our customers are exposed to too many bugs.
08:49:02 <shapr> xprogramming.com
08:49:06 <shapr> that's what I said before.
08:49:23 <Heffalump> and andersca said everything he knows uses bugzilla
08:50:14 <CrewdenX> swisscheese: are you tasking about tracking or bug-finding technique?
08:50:14 <Marvin--> what the heck do you mean that your customers are "exposed to too many bugs"? Do you want to hide the bugs or do you want to write code with less bugs?
08:50:27 <CrewdenX> s/tasking/asking/
09:08:31 <swisscheese> Thanks shapr.
09:09:05 <shapr> swisscheese: I enjoy holding forth at great length on the benfits of extreme programming, and why it's worthwhile
09:09:29 <swisscheese> CrewdenX - I mean reducing the number of bugs that get into the release version. 
09:09:35 <shapr> so if you have any questions, I'd be happy to share what I've read, what I've experienced myself, and why I think parts do or don't work.
09:09:59 <shapr> Haskell has one of the best software testing tools I've seen, that being QuickCheck
09:10:28 <swisscheese> For example segmenting bugs to high risk and low risk and having a stable and unstable version - that's one strategy but seems to have it's own problems.
09:10:37 <CrewdenX> swisscheese: i dunno, extensive unit testing?
09:11:44 <swisscheese> Shapr - by off topic I meant my question is C++ - thought you guru's might help anyway ;-)
09:12:09 <shapr> extreme programming has a lot to say about the idea of stable and unstable versions, how to deal with bugs, etc etc
09:12:28 <swisscheese> OK, I'll check the URL.
09:12:30 <shapr> in my opinion, if you want a good overview, get the first XP book, the one with the white cover.
09:12:38 <shapr> hi tooki
09:12:41 <shapr> looking for Haskell info?
09:12:44 <tooki> howdy
09:12:57 <tooki> i want to tell u something
09:12:57 <shapr> swisscheese: software quality is one of my passions, so I'd love to talk more about it.
09:13:14 <tooki> for a fast sort, use Sets
09:13:33 <shapr> ok
09:13:37 <shapr> thanks for the advice.
09:13:38 <liiwi> yo
09:13:39 <Marvin--> uh
09:13:41 <tooki> ys = setToList $ mkSet xs
09:13:48 <shapr> hei liiwi 
09:14:16 <swisscheese> Please explain: and andersca said everything he knows uses bugzilla
09:15:22 <Marvin--> swisscheese: it's a bug tracking system. We had to guess exactly what you meant since your question was very unclear
09:15:58 <swisscheese> OK.
09:26:12 <shapr> hey Vincenz 
09:26:30 <Vincenz> hey shapr :)
09:26:36 <Vincenz> seeing you're the authority on acronyms
09:26:37 <shapr> what's going on?
09:26:46 <Vincenz> is cmiiw a known acronym?
09:27:05 <shapr> correct me if I'm wrong
09:27:20 <shapr> but, there's the "wtf" program that will tell you that.
09:27:40 * Vincenz grins
09:28:11 <shapr> if you're using Linux/BSD you probably have wtf installed.
09:28:40 <Heffalump> I don't understand cmiiw.
09:29:12 <shapr> cmiiw == correct me if I'm wrong
09:29:50 <Heffalump> oh, sorry :-)
09:30:05 <shapr> :-)
09:31:23 <shapr> eek, zsh 3.1 something
09:31:57 <shapr> good morning Ninja Jones!
09:32:18 * Riastradh drops a spoon.
09:32:29 <shapr> Riastradh: there is no spoon.
09:32:49 <SyntaxLaptop> y0 shapr
09:32:50 <Riastradh> Good, because if there were, Mr Jones here would have flipped out and kill me.
09:32:56 <shapr> that's right
09:32:58 <SyntaxLaptop> Riastradh: it's not too late
09:33:10 <Vincenz> shapr: wtf is an actaul program?  I thought you were merely joking
09:33:13 <shapr> hey SyntaxLaptop, did you want to talk to me about something?
09:33:18 <Riastradh> s/kill/killed/1...argh!
09:33:21 <shapr> Vincenz: no, for once, I was being serious.
09:33:27 <Vincenz> impressive
09:33:33 <shapr> admittedly, it can be hard to tell the difference with me.
09:33:34 <SyntaxLaptop> shapr: nah, nothing in particular
09:33:38 <shapr> but you can always ask.
09:33:44 <Vincenz> shapr: same here, I get the same problems on #c++
09:34:56 <Riastradh> shapr, is scannedinavian.org still dead?
09:35:10 <shapr> Riastradh: yes, I broke it last night, I'll fix it on monday.
09:35:21 <shapr> sorry for the out of service :-/
09:35:52 <Heffalump> you should get a hosting provider with a serial console :-)
09:37:05 <shapr> I'm about to go to dinner with the owner of my ISP, I'll ask him if there's something like that.
09:39:35 <SyntaxLaptop> so is Igloo alive?
09:39:42 <Heffalump> I hope so...
09:39:52 <Heffalump> last heard of watching the GP qualifying
09:39:56 <Heffalump> but I think that finished
09:40:01 <Vincenz> shapr: I might have a large team this year for the icfp :)
09:40:05 <Igloo> I have a pulse. I'm not sure how I can check for brain activity
09:40:19 <Igloo> I mean, I'm talking on IRC, but that doesn't say an awful lot really
09:40:22 <SyntaxLaptop> hehe
09:40:25 <shapr> Vincenz: cool!
09:40:40 <shapr> what's a GP?
09:40:49 <Igloo> (motor racing) Grand Prix
09:40:53 <SyntaxLaptop> Igloo: yeah, well I'll try to test you out to see if yr working.  how come no build logs for i386? did it just not hit the server yet, or did I upload a binary?
09:41:03 * Heffalump has LJ syndicated Syntax's blog, btw.
09:41:13 <Igloo> You uploaded the x86 binary so the buildd won't try to build it
09:41:17 <Igloo> You can't do source only uploads
09:41:37 <SyntaxLaptop> why's that?
09:41:46 <Vincenz> shapr: You don't know GP? F1?
09:42:20 <Igloo> Because TPTB suspect that if it was allowed a large number of unbuildable packages would be uploaded and waste buildd CPU cycles
09:42:28 <shapr> General Purpose? I have an F1 key.
09:42:53 * shapr is teasing Vincenz 
09:43:01 * Vincenz grins
09:43:01 <shapr> ok, I assume it's Gran Prix and F1 racing.
09:43:12 <Vincenz> the only sport worth watching on tv
09:43:23 <shapr> how do I do a multi-match pattern with --exclude for tar?
09:43:33 <shapr> I want to exclude directories named team binary or test
09:43:44 <tooki> multiple --exlude's ?
09:44:00 <shapr> or maybe --exclude {foo,bar} ?
09:44:17 <Heffalump> can you read the excludes from a file?
09:44:34 <Igloo> --exclude {foo,bar}  ===  --exclude foo bar
09:44:45 <Heffalump> (in shell escapes)
09:44:56 <Marvin--> there's --exclude-from FILE
09:44:58 <shapr> I don't know
09:45:04 <shapr> oh, really?
09:45:17 <Marvin--> yep
09:45:19 <earthy>      --exclude-from file     Exclude files listed in file.
09:45:23 <shapr> that's handy
09:45:28 <earthy> gnu tar
09:46:00 <SyntaxLaptop> Heffalump: I didn't know LJ syndicates blogs?
09:46:05 <Heffalump> it does
09:46:17 <Heffalump> you are now http://www.livejournal.com/users/syntaxpolice/ :-)
09:47:48 * Vincenz wants a blog of his own, but doesn't know where.
09:48:21 <Heffalump> LJ is convenient, but it's a nasty monolithic structure.
09:49:48 <SyntaxLaptop> so is there something useful about having it syndicated on LJ?
09:50:03 <Heffalump> it means people (me, in particular) can read it in their "friends" view
09:51:42 <SyntaxLaptop> ahh
09:51:54 <shapr> ok, I'm off to dinner.
09:52:30 <SyntaxLaptop> l8r shapr
09:52:41 <Heffalump> does your blog allow comments, btw?
09:57:05 <Vincenz> it appears not
09:57:20 * Vincenz has a paper blog
10:40:06 <SyntaxLaptop> did everyone see that there was a slashdot review of "Purely Functional Data Structures" the other day? http://books.slashdot.org/article.pl?sid=04/02/19/2257203&mode=thread
10:40:10 <Marvin--> yep
10:40:33 <SyntaxLaptop> Heffalump: my blog doesn't allow comments, no.  I will some day figure out about pyblosxom's module system and install comment stuff
10:40:42 <Heffalump> :-)
10:40:45 <SyntaxLaptop> but they seem to only have a useless wiki for documentation
10:47:10 <SyntaxLaptop> Heffalump: but you can email me comments :)
10:47:20 <Heffalump> I've forgotten what it was now.
10:47:28 <Heffalump> Something about darcs being a very nice way of tracking upstream sources, I think.
10:48:14 <SyntaxLaptop> why's that?
10:54:32 <Heffalump> cos you can make a branch for them
10:54:39 <Heffalump> probably no better than anything else that handles branches nicely
10:54:53 <Heffalump> but the basic idea was to make a branch that _just_ tracks upstream sources
10:54:58 <Heffalump> and then do merges to merge them.
10:56:04 <SyntaxLaptop> yeah
10:56:16 <SyntaxLaptop> I wish all upstreams were using a distributed VCS
10:57:59 <SamB> I wonder how much work it would be to integrate darcs into sourceforge?
11:04:18 <SyntaxLaptop> that would be nice
11:04:53 <SyntaxLaptop> does anyone know where one can get the SOEGraphics module now?
11:05:01 <SyntaxLaptop> I think it was on hugs web site, but now it's not?
11:14:37 <SyntaxLaptop> nevermind
11:21:20 <SamB> is there a paper describing how ghc's garbage collector deals with the unified stack?
11:23:28 <SyntaxLaptop> does anyone know what happened to Foreign.makeForeignObj
11:24:17 <Marvin--> what's a ForeignObj?
11:24:41 <SyntaxLaptop> I don't know.
11:24:45 <Marvin--> oh :)
11:25:00 <SyntaxLaptop> I don't know much about that FOreign module. I'm trying to fix the haskell SOE code to work w/ the new version of hugs.
11:26:31 <SamB> SyntaxLaptop: does it look like it wants to malloc?
11:28:35 <SyntaxLaptop> what it's doing is pretty opaque
11:28:51 <SyntaxLaptop> I see it used here:
11:28:51 <SyntaxLaptop> createRegion :: IO Region
11:28:51 <SyntaxLaptop> createRegion =
11:28:51 <SyntaxLaptop>   prim_Xlib_createRegion >>= \ (gc_res3,gc_res1) ->
11:28:51 <SyntaxLaptop>   (makeForeignObjPrim gc_res1 gc_res3) >>= \ gc_res2 ->
11:28:52 <SyntaxLaptop>   (return ((Region gc_res2)))
11:30:09 <Vincenz> Wake me up inside!
11:33:17 <Marvin--> Vincenz: can't wake up?
11:33:46 * SyntaxLaptop downgrades hugs :(
11:34:43 <Igloo> I have a vague feeling I've seen SOE fixes on a CVS list recently, but wouldn't swear to it
11:35:31 <SyntaxLaptop> that would be good
12:38:08 <rt> dum dee dee.
13:34:00 * SamB figures out fourier series
14:03:07 <rt> mmm.  fft.
16:17:37 <SamB> some people... do not seem to like standards...
16:20:13 <Lemmih> SamB: To whom are you referring?
16:20:48 <SamB> Lemmih: radix in #twisted seems to think standards are useless
16:21:05 <Riastradh> radix is silly.  That has been already determined.
16:21:33 <SamB> he also doesn't see the point of having multiple implementations of a language.
16:22:15 <SamB> personally, I think it helps keep things cleaner that way
16:24:11 <Jerub> SamB: there's too much cross-polination in this world.
16:24:11 <Jerub> ;)
16:24:23 <SamB> Jerub: say what?
16:24:54 <Jerub> SamB: people should have *one* interest, join that irc channel, and stay there. none of this "joining multiple channels" business.
16:24:57 <Jerub> ;)
16:25:36 <SamB> heh
16:25:58 <Riastradh> What arguments have been put forth against radix regarding multiple implementations?
16:28:01 * Riastradh pokes SamB.
16:28:23 <SamB> I didn't actually give any.
16:28:34 <Riastradh> Did anyone give any?
16:29:01 <SamB> nobody argued that point yet
16:29:44 <Riastradh> Is the conversation still going on?
16:29:58 <Digger3> Riastradh: he did not say that they were holding a discussion. Welcome to the world of pre-supposition ;) 
16:30:15 <SamB> well, it sort of fizzled out
16:30:24 <Riastradh> How long ago did it fizzle out?
16:30:31 <SamB> not so long ago
16:30:34 <Riastradh> Good, good.
16:30:39 <Riastradh> Oops.
16:30:42 <Riastradh> I'm in too many channels.
16:30:42 <Riastradh> Argh.
16:30:52 <Digger3> too many? 
16:31:49 <Riastradh> Yes, 20.
16:32:44 <Digger3> Riastradh: that _is_ a lot...
16:35:21 <SamB> is there a standard regarding the use of cpp with Haskell?
16:35:43 <Riastradh> It's just cpp.
16:35:46 <Jerub> SamB: FFI ?
16:36:26 <SamB> Jerub: not cxx, cpp...
16:45:20 <Riastradh> Humph, did radix leave or something?
17:18:12 <SamB> heh
17:18:18 <Riastradh> Boy, what a nice temper dash has.
17:18:42 <Igloo> dash?
17:18:52 <Riastradh> He just banned me from #twisted for arguing with radix.
17:19:00 <Igloo> Ah
17:19:22 <SamB> actually, he's unbanned you already
17:20:54 <SamB> the idea that one must have a standard library to start with...
17:21:11 <SamB> where can it have come from?
17:21:19 <Riastradh> I haven't the faintest idea.
17:23:07 <Riastradh> Did anyone say something in the moment right after I was banned?
17:25:00 <SamB> only if you count meta-somethings
17:26:10 <Riastradh> Meta-somethings?
17:28:21 <SamB> <-- dash has kicked Riastradh from #twisted (OK! done)
17:28:21 <SamB> --- dash removes channel operator status from dash
17:28:21 <SamB> <chaka> wanted to argue?
17:28:21 <SamB> <chaka> get a life
17:28:21 <SamB> <dash> hmm
17:33:18 <SamB> how do you do what select(2) does in Haskell?
17:45:48 <SamB> did you know GCC has lambdas? very long-winded, stack allocated, but still... lambdas!
17:46:03 <Riastradh> What about closures?
17:47:01 <SamB> Riastradh: if by closures you mean being able to return a function that captures variables from a surrounding function, no
17:48:27 <Riastradh> What else would I mean by closures?
17:49:27 <SamB> I don't know! I guess I'm just not used to discussing them in the context of C.
19:16:06 <SamB> shapr: when will you have time to fix scannedinavian?
20:52:32 <LittleDa1> I'm not trying to be a troll, but why does it seem like most people don't understand FP and Haskell?
20:53:41 <LittleDa1> is anyone here?
20:53:46 <Heffalump> samb: he said Monday
20:53:56 <Heffalump> littleda1: I think it's too hard for many people
20:56:32 <Riastradh> People prefer emitting lots and lots of code, even if most of it is mostly boilerplate; Haskell is much more concise with much less irrelevant boilerplate, so people have to focus more on actual semantics, which is hard.
20:57:04 <Heffalump> also, tool support for FP languages is much weaker
20:58:11 <Riastradh> There is a lot more code written for mainstream imperative languages because of that and the fact that there is a lot more code written for mainstream imperative languages.
20:58:54 <LittleDa1> Then why is Python more popuplar than Haskell, even though Haskell came first?
20:59:20 <Heffalump> cos Python isn't an FP language?
20:59:38 <Riastradh> As Heffalump said, it's harder to cough up thousands upon thousands of lines of boilerplate; as I said, there's a lot more mainstream imperative code already, which is incentive to write more for most people.
20:59:38 <LittleDa1> I know, but when it was created it wasn't a mainstream thing
21:00:03 <Riastradh> It may not have been in the main stream, but it had all the attributes of a mainstream language.
21:01:54 <Riastradh> People are sheep afraid of change.
21:02:02 <Taaus> Baaah!
21:02:32 <Heffalump> is there any way to scope some definitions locally, but be sure they'll be outlined by the compiler and only evaluated once?
21:02:53 <Heffalump> (where compiler = GHC really, but ideally this code would be portable)
21:03:52 <LittleDa1> What's wrong with the where keyword? Isn't that what it's for?
21:04:16 <Heffalump> I want to be sure that the definitions are only evaluated once ever
21:07:04 <SamB> Heffalump: it generally tries to do that anyway...
21:07:07 <LittleDa1> Since Haskell has no side-effects and GHC is optimizing, shouldn't this just be left to the compiler?
21:14:49 <Heffalump> there are times you want to second-guess the compiler, and IMO this is one of them
21:18:04 <LittleDa1> What are the advantages of monads over uniqueness types?
21:19:35 <Riastradh> Simplicity of implementation.  You don't need compiler support for monads.  (You need RTS support for the I/O monad, but that's all.)
21:28:09 <Heffalump> aren't monads more general than uniqueness types?
21:28:31 <Heffalump> though uniqueness types probably provide a nicer way of writing functional IO code
21:28:50 <Riastradh> Uniqueness types provide a nicer way of writing _any_ imperative code.
21:29:11 <Heffalump> do they help with non-state code, though?
21:29:59 <Riastradh> What do you mean by 'non-state' code?
21:30:12 <Heffalump> all the monads that aren't state transformers
21:30:19 <Heffalump> so list, exception, continuation, etc etc
21:31:04 <Riastradh> It helps with lists by being able to avoid needless cons cell allocation, but I don't think that's really relevant to this.
21:31:27 <Heffalump> I mean specifically the kind of computations that are nicely expressed in the list monad.
21:31:58 <Heffalump> can you do them nicely with uniqueness types?
21:32:19 <Heffalump> does cool stuff like monad transformers move across nicely too? (I suspect not, but I don't know)
21:32:42 <Riastradh> I believe the only purpose of uniqueness types is to be able to get compiler verification that it's OK to perform side effects due to the lack of existence of other references.
21:33:42 <Heffalump> yeah
21:34:18 <Heffalump> random OT aside: anyone know how to match a tab character with egrep?
21:34:32 <Riastradh> -- which is a big win in lots of code, but it's not useful for most monadic code.
21:39:54 <Heffalump> oh, ick, it seems I need a literal tab
22:09:46 <Jerub> control-v control-i might help
