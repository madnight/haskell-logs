02:01:15 <esap> Hmm.. How do you represent the notion of a resource in Haskell?
02:01:30 <skew> it really depends what sort of resource
02:01:58 <esap> well anything really.
02:02:09 <skew> you can use anything from a lazy list to a combinator that wraps a function
02:03:03 <esap> well the closest I've come up with is a type class associated with a functor.
02:03:22 <skew> what do you mean be a resource?
02:03:24 <esap> say, Monad is one example.
02:03:28 <skew> CPU? a file?
02:03:34 <skew> memory? a stream of random bits?
02:03:39 <esap> yes all of them.
02:04:04 <esap> I want something abstract that covers all of it.
02:04:05 <skew> the only thing I see in comon is that they have constraints
02:04:26 <skew> and that doesn't even cover a random supply
02:04:57 <esap> a random supply has very stringent constraints: It has to be able to return a new reasonably random number every time you ask one :-)
02:05:13 <skew> you can always accomplish that by delaying for a while
02:06:39 <esap> well maybe. But you might think time is also a resource.
02:07:09 <skew> what do you want to do with these resources?
02:07:24 <skew> I can't think of any sufficiently general notion
02:07:40 <esap> The definition of a resource is that there is a limited amount of the resource available [=you must share it with many users]
02:08:01 <esap> and that each use of the resource somehow consumes it
02:09:13 <esap> the problem with that is that it's obviously not referentially transparent.
02:09:33 <skew> what parts of that do you want to expose?
02:10:45 <esap> Well I want to be able to express resource, such that users of those resource could access it through that interface [and I mean any resource].
02:11:04 <skew> class Resource a where {}
02:11:15 <esap> heh, that's not useful.
02:11:49 <skew> useResource :: Resource a => (a -> b) -> a -> b
02:13:10 <esap> I have no idea why that would represent a resource. Sounds like a mapping between two arbitrary functions :-)
02:13:30 <skew> no, it takes a function that uses a resource, and a resource, and applies it to that resource.
02:13:43 <skew> free theorems and all
02:13:44 <esap> oh ok.
02:13:47 <skew> it's either that or return bottom
02:14:05 <skew> I don't see what sort of interface you might want to provide
02:14:24 <skew> maybe something about querying how much is availible, or performing differenent computations
02:14:47 <esap> something like: do { i <- allocate_random_number ; j <- allocate_random_number ; return (i,j) }
02:14:50 <esap> But generalized
02:15:15 <esap> and restricted so that it applies only to resources
02:16:55 <esap> yes, something to manage the fact that there is only limited amount of the resource available.
02:17:17 <skew> I don't see how some generator for random numbers manages that at all
02:18:09 <esap> well, random number generators will not produce infinite amounts of particularly random numbers. They have limit in how many numbers are really random [then they loop]
02:19:21 <skew> how do you want to expose that?
02:19:33 <skew> the code you wrote seems to promise you can always produce another
02:19:37 <esap> That's the question. What would be a good way to expose that.
02:20:04 <skew> probably raising an exception
02:20:20 <skew> maybe exposing some load information
02:20:28 <esap> hmm.. interesting idea.
02:21:35 <esap> so any operation that can raise exceptions would represent a resource?
02:22:05 <skew> I don't think you have a concept here that is sufficiently specific to result in even a coding standard, let alone a typeclass
02:25:05 <skew> for specific things, some sort of allocation combinator might be useful
02:25:27 <skew> the standard withFoo sort of functions, like (file -> IO a) -> IO a
02:26:03 <esap> I think somehow I need to represent "reference to resource" to handle it.
02:26:58 <esap> Maybe: class Resource r where { allocate :: m r ; catch :: m a -> (r m -> m b) -> m b }  or something like that.
02:27:13 <esap> but constrained to 'm' being a monad.
02:27:29 <esap> I mean, allocate :: m (r m)
02:27:34 <skew> what was the catch for?
02:27:52 <esap> catch is for catching the exception if the allocation fails.
02:29:33 <esap> hmm.. it has to be something like catch :: m a -> (r m -> m b) -> m (Either a b)
02:29:51 <skew> huh?
02:30:03 <skew> I think it's much simpler to combine those into a "withResource" combinator
02:30:33 <skew> that takes a function from resource to computation, and an alternate computation for case of failure
02:30:47 <esap> yea, you might be right.
02:32:21 <esap> How do you represent the fact that a particular resource could not be obtained?
02:33:02 <skew> then it executes the alternate constraint
02:33:32 <esap> you mean like: withResource :: (r m -> m a) -> m a -> m a ?
02:34:14 <esap> the second argument is a "default" case used if no resource was available.
02:35:06 <esap> but I'd prefer something like withResource :: (r m -> m a) -> (Not r -> m a) -> m a so that you get in a sense additional information about the lack of resource.
02:48:03 <esap> hmm.. actually, what would the withResource do. I just realized 
02:48:19 <esap> ... that withArgs doesn't seem to do what I thought
02:48:51 <skew> what does withArgs do?
02:49:27 <esap> It temporarily changes the argument list of the program.
02:49:38 <skew> ah. that's different
02:49:53 <skew> most of the withX functions allocate a resource and take care to clean it up even in the case of exceptions
02:50:12 <skew> a bunch of memory allocation functions in the Foreign stuff and so on
02:50:39 <skew> now that you mention it, modifying something for the thing inside is a secondary usage
02:50:50 <esap> ok
02:54:22 <esap> ok It's clear I need two interfaces to the resource, "outside" reference and "direct access" interface.
02:55:11 <skew> a low level interface with allocation and deallocation, and a combinator
02:55:22 <skew> actually, the combinator can probably be built if you have a typeclass.
02:55:40 <skew> this is still just about managing allocation rather than contention
03:16:11 <basti_> hi
06:18:18 <cptchaos> can anyone explain me, why the following causes an parse error?
06:18:40 <Marvin--> shoot
06:18:45 <cptchaos> > data Component 
06:18:45 <cptchaos> >  = Component { compID           :: CompID,
06:18:45 <cptchaos> >                compType         :: CompType,
06:18:45 <cptchaos> >                compName         :: String,
06:18:45 <cptchaos> >                compState        :: State,
06:18:45 <cptchaos> >                compCheckPeriod  :: Int,  --Check-Period
06:18:47 <cptchaos> >                compCheckTimer   :: Int,   --Check-Timer (counting up)
06:18:49 <cptchaos> >                compActiveConfID :: ConfID,
06:18:51 <cptchaos> >                compPathes       :: [Path],
06:18:53 <cptchaos> >                compConfs        :: [DepTree PathID],
06:18:55 <cptchaos> >                compVarList      :: (FiniteMap String String) }
06:18:59 <cptchaos> says incorrect idention
06:19:13 <cptchaos> hm
06:20:53 <Marvin--> copying&pasting it works for me
06:20:58 <Marvin--> are you mixing tabs and spaces?
06:21:15 <cptchaos> hm, I don't see any tabs
06:21:30 <Marvin--> are you sure the error is with the data type?
06:22:19 <cptchaos> ah, sorry, got confused, with the lines
06:22:27 <Marvin--> data type definitions aren't very sensitive to indentation
06:23:27 <cptchaos> ok, thanks
06:23:35 <cptchaos> found it
06:23:50 <cptchaos> has been a differnt place :-/
12:32:03 <SyntaxLaptop> Igloo: what was the name of that patch you thought might fix darcs build on some arches?
12:33:27 <Igloo> "Match up Int types between Haskell and C"
12:37:50 <SyntaxLaptop> cool. thanks.
16:11:46 <phubuh> Hm.
16:11:47 <phubuh> instance Typeable a => Show (Chan a) where
16:11:48 <phubuh>     show _ = "<Channel (" ++ typeName (undefined :: a) ++ ")>"
16:11:49 <phubuh> =>
16:11:56 <phubuh>     Ambiguous type variable `a1' in the top-level constraint:
16:11:56 <phubuh>       `Typeable a1' arising from use of `typeName'
16:12:19 <phubuh> I think this _used_ to work.  Maybe.
16:12:30 <skew> hm. I'd check the definition of Typeable
16:12:32 <Igloo> The two 'a's there are different type variables
16:13:01 <skew> that a is from the instance head, it should be in scope
16:13:16 <skew> oh, but the argument to show.
16:13:47 <Igloo> Are you sure it should?
16:14:00 <Igloo> Anyway, can you not give typeName the argument to show instead?
16:14:04 <phubuh> Hm, two a's?
16:14:11 <skew> yeah, that would be safer
16:15:13 <phubuh> I can't, since Chan isn't Typeable.
16:15:49 <Igloo> Oh, oops, missed that it wasn't the same type
16:15:52 <skew> phubuh, you should be able to do something like show (_ :: Chan a) = .... (undefined :: a) ...
16:16:05 <Igloo> I don't think that would work either
16:16:06 <skew> with -fglasgow-exts
16:16:20 <Igloo> Have you got a mkChan functino or something?
16:16:31 <Igloo> Of type a -> Chan a
16:16:42 <phubuh> Oh, duh!  My original code works with -fglasgow-exts.  That's why it used to work. :-)
16:17:28 <Igloo> If so then you can say   show x = ... typeName y ... where z = if True then x else mkChan y  or somesuch
16:17:44 <skew> I'm trying to gat a version of the X11 binding that reflects the changes in the Foreign modules
16:17:49 <Igloo> And live in the lovely portable world of H98  :-)
16:18:28 <skew> newForeignPtr changed types, but I don't know quite where to find it in CVS, or what version to try to get
16:18:46 <Igloo> I think the argument order just changed
16:18:56 <skew> no, the type of the finalizer
16:19:06 <skew> it used to be just a Ptr to a foreign function, I think
16:19:18 <skew> now they want Ptr a -> IO ()
16:19:33 <Igloo> Ah, OK
16:30:24 <Igloo> Does anyone know anything about WxHaskell debs?
17:38:00 <Leimy> anyone using GHC-6.2 on OS X?
17:39:30 <Leimy> It claims it can't import GL
17:39:45 <Leimy> though the release notes on the page where I downloaded it claim that HOpenGL is compiled in
17:46:20 <stepcut> Leimy: the import failed when you tried to write a program that uses OpenGL?
17:47:50 <stepcut> import Graphics.Rendering.OpenGL.GL
17:47:53 <stepcut> import Graphics.Rendering.OpenGL.GLU
17:48:00 <Leimy> yes
17:48:08 <Leimy> hmmm I will try that
17:48:11 <stepcut> those are the import lines I use
17:48:26 <stepcut> its important to note that HOpenGL has undergone major changes
17:48:41 <Leimy> is it up to OpenGL 1.4?
17:49:04 <stepcut> I am not sure, it might be
17:49:49 <Leimy> I am just looking for the BezMesh.hs program that works with Haskell so I can dig around with it
17:49:59 <Leimy> and I am getting a ton of errors now :(
17:50:00 <Igloo> I didn't think it was complete yet anyway
17:50:01 <stepcut> but, you sure be aware that the standalone HOpenGL-1.05 is obsolete and not compatable with what is now distributed with ghc
17:50:19 <stepcut> so you need to make sure you use the docs/example code that come with ghc 6.x
17:50:37 <Leimy> ack...
17:50:41 <Leimy> ok I will download that source
17:51:51 <stepcut> I don't know how the OS X stuff is package but you might try searching your hard drive to see if BesMesh.hs is already installed somewhere
17:52:57 <stepcut> if not, this is the file you are looking for: fptools/libraries/GLUT/examples/RedBook/BezMesh.hs
17:53:31 <stepcut> http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/libraries/GLUT/examples/RedBook/
18:02:46 <Leimy> stepcut: thanks a bunch
18:04:34 <Spark> i find the syntax of haskell very hard to read
18:04:40 <Spark> is this problem going to go away after a while? :)
18:05:37 <keverets> yes.
18:05:51 <keverets> It becomes quite natural very quickly.
18:14:39 <Jerub> Spark: the syntax and the typing system go hand in hand, once you grok one, the other will make perfect sense
18:18:10 * Leimy has been toying with Haskell for a few months on and off
18:18:18 <Leimy> like 2 or 3 hours here and there
18:18:23 <Leimy> and I kind of like the syntax
18:19:52 <Leimy> stepcut: I am not seeing that file anywhere in /usr/local or the extra framework for HaskellSupport it installed
18:19:55 <Leimy> I have the source though
18:19:59 <Leimy> and will dig around there
18:22:25 <Leimy> stepcut: that's workin great... thanks :)
18:22:52 <Leimy> I have Hudak's book
18:23:06 <Leimy> there is no SOEGraphics for ghc is there?
18:23:11 <Leimy> or can I just not find that one either? :)
18:24:21 <stepcut> I don't know anything about SOEGraphics
18:24:31 <Leimy> Ok... that's cool
18:24:41 <Leimy> I was just hoping to be able to use the code examples in the book while I learn
18:33:19 <flaw> functional langs rock. :)
18:33:49 <flaw> I just started looking at haskell recently and I'm really excited about it :)
18:34:12 <Leimy> yeah... 
18:34:20 <Leimy> I am trying to figure out what $= does :)
18:34:21 <Leimy> hehe
18:34:22 <stepcut> flaw: I started looking at haskell 2 years ago, and I am still excited ;)
18:34:32 <Leimy> first time I've seen it is these OpenGL demos
18:34:44 <Leimy> I haven't totally grasped Monads yet.
18:34:49 <Igloo> It's an HOpenGL thing
18:34:58 <Igloo> Updates something like an IORef IIRC
18:34:59 <Leimy> but that's because I am trying to master the more funamental things first
18:35:14 <Leimy> Igloo: is it a new operator?
18:35:15 <flaw> stepcut: hehe 8) no more looping just makes me feel all giddy inside..
18:35:31 <flaw> in most cases, as it appears, at least..
18:35:32 <Igloo> What do you mean by new?
18:35:40 <Leimy> as in didn't exist before :)
18:35:46 <Leimy> not new as in C++ new :)
18:35:56 <Leimy> I should word that differently
18:36:03 <Leimy> "can you make your own operators in Haskell?" :)
18:36:09 <Igloo> Well, there was some point in the past at which it didn't exist, but I have no idea when
18:36:14 <Igloo> Yes
18:36:25 <Leimy> cool
18:36:43 <Leimy> Is Literate Haskell still used?
18:38:33 <stepcut> by some people
18:38:33 <Leimy> heh
18:38:39 <Leimy> OpenGL in Haskell is pretty neat
18:38:43 <stepcut> some people never used it
18:38:47 <Leimy> having done a little in C
18:39:03 <stepcut> some of ghc compiler code is in literated haskell, but some is not
18:39:31 <Leimy> cool...
18:39:32 <Jerub> flaw: ... but there is looping, the map function is analgous to a foreach statement.
18:39:35 <Leimy> well thanks for the help
18:40:14 <Lemmih> Jerub: Isn't that called recursion instead of looping?
18:40:18 <Leimy> zipwith?
18:40:38 <Leimy> map does a traversal
18:40:42 <Leimy> but it does it recursively
18:40:45 <Leimy> IIRC
18:41:13 * Leimy goes for dinner
18:41:16 * Leimy afks
18:44:47 <flaw> Jerub: ic, I was mainly referring to my usage of while( i < max ) in C and other langs, not meaning to be as general as I was :) ..
19:04:36 <Jerub> ;)
19:38:31 <LittleDan> Is there any sort of shortcut to something like (\x ->map x [1..])?
19:40:10 <LittleDan> since (\x -> map [1..] x) is simply map [1..]
19:41:23 <ayrnieu> flip map [1..]
19:41:40 <LittleDan> thanks
19:44:16 <stepcut> any opinions on the best way to generate XML in haskell? I don't need to parse XML, just generate XML for an RSS feed from a database
19:52:03 <Jerub> sounds mostly trivial.
19:56:29 <stepcut> I think I will just use HXML. I can probably just make an XML tree and then use showXML
20:17:33 <LittleDan> Why does '/' only accept fractional arguments?
20:30:46 <Lemmih> LittleDan: Because: (/) :: forall a. (Fractional a) => a -> a -> a
20:31:30 <LittleDan> I understand how type declarations work, but why did the creators of Haskell choose to limit (/) to (Fractional a) and not (Num a)
20:32:09 <stepcut> maybe there are things in Num where / does not make sense?
20:33:24 <LittleDan> When wouldn't it work?
20:43:10 <stepcut> maybe its to remind you that Integer math is severly lossy?
21:58:50 <flaw> stepcut: in python I use DOM, dunno if there is a dom imp in haskell or not..
21:59:40 <flaw> xml.dom module.. it's works pretty good for the generation I do..
