00:43:45 <Lunar^> Hi everyone
01:20:47 * ski yawns
02:29:55 * ski just misspelled 'functional' as 'punctional'
02:39:02 <_joey> what is the nmae of the function to convert a char to its upper case?
02:39:27 <ski> @type toUpper
02:39:44 <_joey> wrong!
02:39:54 <ski> not ?
02:40:14 <_joey> do i hape to import anything to use it?
02:40:21 <ski> Prelude> map toUpper "HeLlO"
02:40:21 <ski> "HELLO" :: [Char]
02:41:00 <_joey> I type :t toUpper in Prelude , it saying variable is not in scope
02:41:17 <ski> import Char
02:41:53 <ski> does it work now ?
02:42:56 <_joey> thanks
02:56:29 <Jerub> I actually sat down and read about monads today.
02:56:32 <Jerub> they're really quite nice.
02:56:47 <Jerub> now that I know what >>= is and stuff.
03:13:03 <_joey> I am writing a function that takes two strings and recursively evalutates if one string alphabetically larger than another one , using ascii's number ordering, i wrote f [] _ = True, f _ [] = True, f (x:xs) (y:ys) | ord x > ord y = False, | otherwise = f xs ys
03:13:16 <_joey> it's evaluating right, what am I doing wrong?
03:14:31 <_joey> it's not
03:23:04 <_joey> gotcha
03:40:09 <_joey> where do I find the list of functions to operate on strings which are available in Prelude?
03:42:25 <saz> _joey: fancy seeing you here
03:46:55 <_joey> never mind, homework is done:>
03:52:48 <saz> ;-)
03:52:59 <saz> i hope you realise the solution is trivial..
03:54:41 <_joey> didn't realise till I check the type on > , <= operators
03:54:45 <_joey> checked
05:01:52 <shapr> hej ski 
05:01:56 <shapr> what's happening?
05:02:05 <shapr> g'day saz 
05:02:17 <ski> hi shapr
05:02:47 <ski> having lecture on hardware descr. and verification
05:02:54 <ski> (first one)
05:06:36 <saz> hi shapr 
05:08:09 <Lunar^> ski: Can you tell more about it ?
05:08:31 <Lunar^> shapr: Did you succeed in running the latest floppy ?
05:09:24 <shapr> Lunar^: yes, I did
05:09:33 <shapr> I got to see the scancodes
05:09:53 <Lunar^> Cool :) Did it locked or stopped responding at anytime ?
05:09:59 <shapr> nope, worked fine
05:10:05 <Lunar^> Good news
05:10:14 <shapr> even when I was throwing it very many keystrokes at the same time
05:10:40 <Lunar^> sebc made some remark after his return from Italy, I will made few clean-up and release the last source code
05:10:42 <shapr> I haven't tried booting it on real hardware though, think it'll make any difference?
05:10:52 <shapr> cool
05:11:06 <Lunar^> shapr: Dunno.. One of the best test is the pause key
05:11:25 <Lunar^> It sens 6 scancodes when you press it, and nothing after that
05:11:29 <shapr> hm
05:11:48 <Lunar^> sends
05:12:00 <shapr> I can barely wait for a shell
05:12:28 <shapr> actually, I can start writing a network driver before that
05:13:50 <Lunar^> The network stack is really a complicated work
05:13:52 <ski> Lunar^ : we'll look at VHDL and Lava, i'll think
05:13:52 <shapr> I think writing a tcp/ip stack would be great fun
05:14:13 <Lunar^> ski: The paper about Lava is still on my desktop, for month now :(
05:14:17 <shapr> though I wouldn't have to wait for hOp to write a stack, there's a userspace thingy that lets you grab raw packets from the card
05:14:36 <shapr> hey Si
05:14:40 <Lunar^> shapr: Sure, writting efficient and clean code is fun
05:15:10 <Si> salutations
05:15:17 <Lunar^> shapr: We would need something like Tomasz's Deser but that would work without copying anything
05:15:21 * ski 's lecture continues ..
05:15:50 <shapr> was Deser the thing that cut binary chunks into pieces?
05:16:09 <Lunar^> shapr: Deser is really unappropriate for a network stack because it reads binary data to make Haskell records thus allocating and copying things
05:16:18 <Lunar^> shapr: right
05:17:03 <shapr> something that implemented methods that would convert the right parts of a binary chunk without copying would be better
05:19:27 <liiwi> coffee
05:19:43 <shapr> yes please!
05:19:59 <Lunar^> shapr: We better need direct access, high-level scrutinee and mutators
05:20:01 <shapr> actually, I have two battery and 4.5 liters of RC cola.
05:20:09 <Lunar^> shapr: Maybe all made using Template Haskell
05:20:16 <shapr> sounds good to me
05:20:23 <shapr> how do you plan on getting TH on hOp?
05:20:23 <Lunar^> shapr: I think that making user-land experiment could be a good idea
05:20:26 * Si asks another dumb question;
05:20:30 <Si> what's deser?
05:20:39 <shapr> Si: just a moment, I'll get the url
05:20:50 <Lunar^> http://www.mail-archive.com/haskell-cafe@haskell.org/msg04117.html
05:20:53 <Lunar^> shapr: gotcha
05:20:55 <shapr> bah
05:20:59 <shapr> beat me ;-)
05:21:12 <Si> sorry that I know nothing
05:21:17 * shapr claims that he is lagged ;-)
05:21:34 <shapr> Si: nah, there's just a whole lot to know, that's why it's good to hang out here, we all know part of that whole lot.
05:21:44 <Lunar^> shapr: I didn't take time too dig further, but it seems that GHCi is currently built with hOp's stage1
05:21:51 <shapr> more correctly, each of us have some part of that whole lot
05:22:01 <shapr> neat!
05:22:08 <Lunar^> shapr: Anyway, without a linker, there's not much it will be able to do
05:22:13 <shapr> right
05:23:08 <Lunar^> shapr: For Template Haskell, maybe we could make TH a real preprocessor
05:23:23 <Lunar^> shapr: using pprDoc to actually write the generated file before compiling it classicaly
05:23:35 <shapr> that won't always work
05:23:50 <Lunar^> Any example ?
05:24:00 <shapr> some TH code is recursive
05:24:35 <Lunar^> Yeah, but GHC is finally able to make a binary, where there is no more Templates in it, right ?
05:24:41 <shapr> that's a good point
05:24:49 <shapr> maybe it will always work
05:24:53 <shapr> hej psi_
05:25:12 <shapr> at some point, it all comes down to Core, right?
05:25:29 <psi_> tjena shapr 
05:25:30 <Lunar^> Dunno, I want to go a bit further on the keyboard part and after that, I think I will send a long mail to Simons
05:25:39 <Lunar^> ('s' indeed)
05:25:42 <shapr> heh
05:25:55 <shapr> one of the coolest parts of hOp is that it unifies so many neat Haskell things in one package.
05:26:18 <Lunar^> Sure.. but the current build system is such a mess
05:26:32 <Lunar^> I'm used to it now, but it's not friendly in anyway
05:27:04 <shapr> I haven't even looked the build system, but I admit I'd like something that would be nice for quick incremental recompilation
05:27:46 <Lunar^> shapr: modifying a primop requires 45 minutes to build a new compiler :( (on a P4 2.4ghz)
05:27:58 <shapr> if the target is always a disk image, or bootable CDROM or whatever, I don't mind an unfriendly build-system that lets me quickly make changes, build a new flp and boot it
05:28:00 <Lunar^> shapr: That's not what I call quick incremental recompilation :)
05:28:04 <shapr> that's true
05:28:31 <Lunar^> shapr: Until you don't touch the compiler, the current Makefile does that
05:28:51 <shapr> well, that's better than nothing
05:29:07 <shapr> psi_: vad händer? har du lärt dig någon specielt av Haskell?
05:29:29 <Lunar^> But reaching stage2 would require to "rewrite" a lot GHC and have a "file" system in hOp
05:29:34 <shapr> hm, I need to add a swedish dictionary to ispell so I can spellcheck that language also
05:29:56 <psi_> shapr: sitter och klurar lite på min primtalsfunktion :)
05:29:59 <shapr> yah, I've been thinking about the file system stuff
05:30:11 <shapr> clausen and dark had some interesting ideas about a functional filesystem
05:30:19 <Lunar^> shapr: links links links :))
05:30:25 <shapr> I should email them and see where they went with that
05:30:35 <shapr> I know dark started writing a driver for Linux, dunno what happened to it.
05:30:37 * shapr looks
05:31:05 <Lunar^> shapr: I will have a new server up within the next month, I would be able to host hOp stuff easily after that
05:31:13 <psi_> i'm getting a curios error in one of my functions. i was wondering if someone could help me figure out what is is.
05:31:16 <shapr> http://members.optusnet.com.au/clausen/ideas/functional-fs.txt
05:31:21 <psi_> my code is here: http://rafb.net/paste/results/Ga811987.html
05:31:22 <Lunar^> shapr: But maybe, as sebc was thinking, we could use haskell.org server... but I'm a bit afraid to do that
05:31:32 <shapr> why?
05:31:41 <psi_> it's function that returns true or false depending if the given integer is a prime or not
05:31:59 <Lunar^> shapr: Dunno. Self-confidence thingy maybe
05:32:15 <shapr> yah, I understand that, I think I told you about the first time I met SPJ :-)
05:32:29 <Lunar^> hehe
05:32:52 <Lunar^> Who actually owns haskell.org server ? Who is root ?
05:33:00 <shapr> me, among others :-)
05:33:15 <shapr> but the real admins are olaf chitil and john peterson I think
05:33:29 <Si> is there anything you don't own shapr?
05:33:33 <Lunar^> hehe
05:33:38 <shapr> Si: I don't own Puerto Rico!
05:33:51 <Si> damn
05:33:54 * shapr laughs
05:34:13 <Si> so you couldn't lend it to me then
05:34:18 <shapr> I only recently got root on haskell.org, when I became maintainer of the Haskell Wiki
05:34:20 <shapr> sadly no
05:34:33 <shapr> but if I end up with a spare island nation, I promise to make you regent
05:34:38 <Lunar^> I think hOp needs to get a more polished shape before making its way on haskell.org anyway
05:34:57 <psi_> [2..truncate (sqrt 100)] for example works fine stand alone, but when i use it in my function i get this error
05:34:59 <shapr> I think you should put it up
05:35:10 <Lunar^> "put it up" ?
05:35:18 <shapr> put it online on haskell.org
05:35:28 <shapr> that's just my opinion though
05:35:53 <shapr> I think it's worth having the up-to-the-minute developement repository online, because you are able to get instant feedback from your users (if you have some)
05:36:27 <shapr> psi_: I think you need to add a type signature maybe
05:36:30 * shapr tries psi_'s code
05:37:13 <psi_> i tried that but i kept getting other errors :)
05:37:15 <shapr> right, do you see what you get from ":t prime" in ghci?
05:37:26 <psi_> let me see.
05:37:45 <psi_> yeah
05:38:16 <psi_> not exactly sure what it means though...
05:38:21 <shapr> well, look at ":t mod"
05:38:23 <Lunar^> shapr: Sure, but hOp is currently just hacks on hacks, having interested people discussing on IRC is nice, but getting the current stuff more public would add more mess IMHO
05:38:29 <psi_> a has to be floating, integral or realfrrac?
05:38:38 <Lunar^> shapr: Maybe it's just because I want to keep experimenting alone for another moment... 
05:38:40 <shapr> it has to be all of those
05:38:50 <shapr> Lunar^: yah, that's a good choice too
05:39:35 <shapr> I usually open my code up all the way, and accept patches, but I also feel free to ignore people who want me to change things (if they don't send patches)
05:39:40 <psi_> okay, and mod wants integral
05:39:55 <shapr> now check out :t sqrt
05:40:02 <Lunar^> shapr: Clausen paper is intersting, but actually doesn't remove the concept of file
05:40:39 <Lunar^> shapr: I would like to be able to explore the object system in a way similar to HaskellDB 
05:40:41 <psi_> it wants floating... i'm guessing there's a conflict here then?
05:40:44 <shapr> @type (^)
05:40:45 <lambdabot> (^) :: (Num a, Integral b) => a -> b -> a
05:40:49 <shapr> @type (**)
05:40:49 <lambdabot> (**) :: Floating a => a -> a -> a
05:41:17 <shapr> psi_: I think so
05:41:41 * shapr looks for the pretty typeclass diagram from the Haskell Report
05:41:51 * ski is back
05:42:03 <shapr> psi_: getting math operators lined up in accordance with the typeclasses is tricky to figure out at first
05:42:29 <shapr> for example, both ^ and ** do the same thing, but have different class constraints
05:43:17 <psi_> yeah
05:43:42 <shapr> it gets easier though
05:44:10 <psi_> i think i solved it
05:44:24 <ski> psi_ : can't you s/sqrt n/sqrt (fromIntegral n)/ ?
05:44:48 <psi_> i'm not sure if it's a good solution though ( i put truncate n in the mod function call)
05:45:23 <psi_> ski: let me try that. it makes sense to me at least.
05:45:58 <psi_> yes, that works as well
05:46:00 <ski> also, stylistic : s/mod n x/n `mod` x/
05:46:18 <psi_> okay
05:46:54 <ski> (one can 'operatorify' any (curried) 2-arg function that way)
05:47:42 <psi_> well, it works nicely now. thanks for the help :)
05:48:16 <ski> hmm, var i sverige aer du dao ?
05:48:32 <psi_> luleå
05:48:37 <ski> ok
05:50:27 * ski shows psi_ #haskell.se
05:51:13 <psi_> i think i'm there, actually. :) i can't reach that client at the moment, however
05:59:14 * ski bah!s
05:59:48 <Lunar^> shapr: Maybe starting with something like http://www.cs.vu.nl/boilerplate/testsuite/bits/Main.hs
06:00:22 <Lunar^> shapr: Haskell AST could then be serialized happily
06:05:11 <Si> how would you go about serializing IORefs?
06:06:00 * ski thinks probably not
06:06:26 <Lunar^> Si: Haskell AST doesn't contain any IORef AFAIK
06:06:30 <Marvin--> afternoon (mod TZ)
06:06:55 <Lunar^> sunny one here :)
06:07:18 <ski> Marvin-- : 'reyou abroad ?
06:07:47 <Marvin--> ski: no, but I'm thinking there may be some feregners on the channel too and you know me, always want to be politically correct
06:07:51 <Marvin--> ... or not
06:07:55 * shapr looks around
06:08:04 <ski> heh
06:08:33 <shapr> actually, I think we do have a bunch of westerners here
06:09:26 <Marvin--> Koen is scaring me
06:09:34 <Marvin--> he asked when we should schedule the presentation of my project
06:09:40 <shapr> haha
06:09:43 <shapr> now that's motivation
06:11:22 <shapr> can I get the AST from GHC?
06:11:40 <Marvin--> which AST? Core?
06:11:47 <Lunar^> shapr: haskell-src package !
06:12:05 <shapr> is there another AST?
06:12:10 * shapr inspects the haskell-src package
06:13:01 <Marvin--> haskell-src doesn't touch any syntactic sugar at all, the data types are huge and complex
06:13:07 <Marvin--> using -fext-core gives you the core AST
06:13:45 <Lunar^> Marvin--: The whole idea behing an object "file"system is to remove the needs for parsing
06:13:53 <Lunar^> behind
06:26:31 <Marvin--> Koen gave me a copy of his PhD thesis, it's daaaamn thick
06:37:12 <shapr> @yow !
06:37:13 <lambdabot> Will the third world war keep ``Bosom Buddies'' off the air?
06:39:15 * Marvin-- prods acm.org
08:04:10 * Marvin-- sighs
08:04:24 <shapr> ?
08:04:36 <Marvin--> 180 applicants to the two PhD student positions
08:04:41 <shapr> yow
08:04:45 <Marvin--> kinda absurd
08:06:29 <Lunar^> *sigh*
08:06:30 <Marvin--> from what I understood, they've culled it down to 24 and are going to make further cuts before calling people to interviews
08:06:59 <shapr> is that sort of difference between applicants and positions normal?
08:07:14 <Marvin--> the last few years, yeah, unfortunately
08:07:40 <Marvin--> but I think it's getting worse every year
08:07:54 <shapr> any idea why?
08:08:34 <Marvin--> the institution doesn't have enough money for more positions, and people can't get jobs elsewhere so they apply for the heck of it? I dunno
08:09:52 <shapr> what sort of qualification is required to get into a normal college like luth?
08:10:18 <Marvin--> for a computer science program?
08:10:23 <shapr> sure
08:10:51 <Marvin--> not too hard, I think
08:11:08 <_joey> I want to write a function that takes a number, sums this number and its square root and tests if the result is even, I am having problem promoting between the types, could suggest how to solve this?
08:11:12 <Marvin--> I'd say "dead simple", but perhaps not everybody would agree with me
08:11:18 <Igloo> Increased numbers of people applying for the heck of it probably aren't too important as they'd probably get filtered out at an early stage
08:11:23 <shapr> I've heard from my SFI teacher that I need a test of swedish as a foreign language to get into uni here.
08:11:44 <Marvin--> shapr: if you're thinking of applying, your biggest problem would be the beuracracy for not being a native
08:11:56 <Marvin--> Igloo: right, but it kinda messes up the statistics
08:12:03 <Igloo> Sure
08:12:09 <shapr> err, what sort of bureaucracy?
08:12:23 <shapr> is it enough to have a residence/work permit?
08:12:34 <shapr> obviously I need to look around the web a bit more.
08:13:15 <Marvin--> shapr: I'm not sure, but figuring out that you fulfill the requirements by having comparable grades or stuff...
08:13:31 <shapr> oh, comparing records from the US. oboy.
08:15:47 <_joey> dammit
08:15:52 <_joey> :)
08:16:53 <Marvin--> _joey: what've you got?
08:16:57 <earthy> hm. applicants to PhD positions in CS aren't that many in .nl istr
08:17:11 <_joey> Marvin--: read what I typed above?
08:17:25 <kosmikus> _joey: you cannot sum a number and its square root and then check if it's even, because that sum is a float
08:17:34 <_joey> **, ^ , sqrt all involve decimals
08:17:47 <earthy> sqrt need not be integer
08:17:54 <earthy> even if its argument is
08:18:04 <_joey> I gathered that already
08:18:05 <Marvin--> _joey: yes, what code do you have and what is the error message?
08:18:33 <_joey> even (sqrt 9 + 3) what error would this produce?
08:18:37 <_joey> kind of obvious
08:18:39 <earthy> so, you *first* want to check if the sqrt can be integer
08:18:52 <earthy> if it is, *then* you sum and see if the sum is even
08:19:53 <_joey> I need a function that checks if a number is a square, for example 1, 4, 9 , 16 I am using the fact sum of a number and its square is always even
08:22:23 * shapr stares cluelessly at gettext docs
08:28:21 * shapr shrugs
08:28:41 <shapr> I think he'd get more help if he were more polite.
08:29:36 <Marvin--> I think he doesn't realize when he's getting help :)
08:30:04 <shapr> that's a good point.
08:30:29 <shapr> I'm not willing to explain stuff to him since the last two times I started talking to him it turned into a flamewar :-/
08:31:17 <Marvin--> oh, joy
08:31:26 <Si> how fun!
08:31:36 <andersca> oh
08:31:42 <andersca> so he's what you'd describe as a _moron_
08:31:46 <Si> how much are the tickets?
08:32:03 <shapr> actually, I think he just gets frustrated, and hasn't figured out how to work around the frustration
08:32:25 <shapr> I know all about frustration, I just when to stop and go walk around, or exercise, or whatever.
08:32:32 <shapr> "I just know when to"
08:32:44 <Si> or play BZFlag :)
08:33:05 <shapr> thing is, I still don't want to catch a bunch of frustration from someone else, I'd much rather help someone who's listening.
08:33:06 <Si> mind you that just makes me more miserable when I realise I'm just as bad as when I played last...
08:33:10 <shapr> heh
08:33:21 <shapr> lately I play maelstrom when I get frustrated
08:36:01 <Marvin--> eh, that's what you get on irc, people are nice to nice people
08:38:13 <Si> I love it in OSS projects when people come the mailing lists and say effectively "you will implement such and such a feature"
08:38:46 <shapr> heh, yah I've seen that
08:38:54 <YveDeLarc> i WANT that NOW!
08:39:00 <YveDeLarc> you MUST!
08:39:17 <shapr> you quickly learn who to ignore
08:39:52 <YveDeLarc> Sometimes you start to wonder about the global ignorance level. Is it ever-increasing?
08:40:11 <shapr> heh
08:41:33 <Si> What do you think is a good global namespace basis for Haskell?
08:41:42 <shapr> most people write open source software for themselves, but they share it because you can 'have your cake and eat it too' with software
08:43:12 <shapr> imho, credit is due those who write code and release it
08:43:15 <shapr> talk is cheap :-)
08:43:48 <Si> e.g. Haskell98.Data.Dynamic etc.
08:43:57 <shapr> hdd ?
08:44:16 <Marvin--> er, Data.Dynamic isn't in H98
08:44:21 <Si> I know
08:44:33 <Si> I'm trying to say what I mean
08:45:00 <Si> I need some way of expressing Datatypes etc. in Haskell within a Globally unique namespace
08:46:46 <shapr> can you give an example?
08:46:54 <Si> Like in XSD, namepaces are URI, well in Haskell they take the form of the module tree, but I need to express this uniquely
08:47:18 <Si> so say would expressing an Int in Haskell, be acceptable as Haskell.Int
08:47:40 <Si> and Dynamic as Haskell.Data.Dynamic.Dynamic
08:47:50 * ski says goodbye to #haskell
08:47:56 <shapr> ski: forever??
08:48:13 <ski> shapr : of *course* not ! :)
08:48:15 <shapr> whew!
08:48:30 <Si> that's quite a dramatic way of saying cya :)
08:48:32 <ski> just temporarily, for the day, so to speak
08:48:33 <shapr> Si: sounds good to me, but I can't think of any other options at all.
08:50:02 <Si> see my type mapper simply contains a mapping from a localName within a particular namespace's typespace, and I need a way of identifying Haskell's typespace
08:53:10 <Si> oh sorry to bother you again, but does anyone know of anyway in Haskell98 of either doing or faking primative data-type inheritance?
08:53:43 <shapr> like what?
08:54:03 <shapr> like int4 is a subclass of int?
08:54:10 <Si> yes
08:54:41 <Igloo> The GUI libraries tend to do things like that
08:56:33 <Marvin--> er, what'd int4 be?
08:56:54 <SyntaxNinja> yay zipwith
08:57:00 <Igloo> It's an SQL type for 4-bit integers or somesuch isn't it?
08:57:06 <shapr> yup
08:57:22 <Marvin--> I don't see how you could make that a subtype of 32-bit ints
08:57:37 <shapr> what if int32 and int4 are subclasses of int?
08:57:57 <Igloo> You can give an int4 to something expecting an int (assuming the Right Thing happens)
08:58:07 <shapr> int-signed could even be another subclass
08:58:11 <Marvin--> "subclassing" is a tricky subject that does multiple things at the same time
08:58:16 <shapr> yup, I agree
08:58:45 <shapr> Alistair Bayley wrote some really neat stuff about subclassing from the FP viewpoint.
08:58:57 * Marvin-- should borrow A Theory of Objects again
08:59:21 <shapr> who wrote that one?
08:59:34 <Marvin--> Cardelli and Abadi iirc
08:59:35 <Si> reason I asked is because XML Schema's have the "extension" tag which tells you one type (or concrete element) contains all the parts from the specified complexType as well as its own
09:00:05 <Si> problem is, I gotta figure out a way of generating such data-types in Haskell for WSDL...
09:00:08 <Marvin--> I'm reading TaPL now, very well written book
09:00:12 <shapr> if you want to represent full XML Schemas in the Haskell typesystem, you should probably post about it on haskell-cafe
09:00:32 <shapr> I've heard some discussion about it, but most of the discussion was along the lines of "man, that'll be a pain in the butt"
09:00:39 <Si> can't do the full thing, not enough time
09:00:58 <Si> I'm just going to deal with simple complexTypes, a bit of an oxymoron I know...
09:01:16 * shapr grins
09:01:50 <Si> but it took the libxml2 guys a year to put together a full blown Schema handler (Parser/Validator/Builder/Type Mapper)
09:01:59 <Marvin--> the chapter where he implements an object oriented language using an extension to lambda calculus is pretty fun
09:05:11 <Si> is O'Haskell any good?
09:05:55 <shapr> I don't think it's maintained
09:06:12 <shapr> iirc, requires hugs, but has a bunch of really neat features
09:08:14 <Cale> O'Haskell turned into Timber, I think
09:10:34 <Si> ah so it did
09:46:43 * Marvin-- idly wonders who in Kiruna just tried to call him
09:47:07 <shapr> me me!
09:47:13 <shapr> ok, it wasn't me.
09:47:15 <Marvin--> what are you doing in Kiruna?
09:47:26 * shapr grins
09:47:27 <Marvin--> (and do you even have my home number?)
09:47:33 <shapr> no, not your home number.
09:48:17 <Marvin--> it was a number ending with lots of zeroes too
09:48:52 <Marvin--> too bad I was in the kitchen and was too late to answer
10:17:14 <andersca>  Havoc Pennington once called Haskell "the least-broken programming language available today."
10:17:16 * andersca smiles
10:18:29 <Si> what's the most?
10:18:34 <andersca> perl
10:37:58 <tmoertel> it would seem that haskell is on slashdot's front page
10:38:46 <saz> it is too
10:39:10 <phubuh> written by our own little syntax ninja nonetheless!
10:39:27 <andersca> SyntaxNinja: woo
10:39:46 <Marvin--> go ninja!
10:39:50 <tmoertel> SyntaxNinja: take a bow
10:39:51 <Si> does that mean we're about to be flooded by a bunch of Slash Dotters?
10:40:03 <tmoertel> if we're lucky   :)
10:41:34 <Marvin--> I like the hp quote
10:41:40 <andersca> Marvin--: me too
10:43:19 * tmoertel 's website is getting hammered
10:43:50 <tmoertel> I posted a link to a page w/ a 1-MB PDF file on it in a comment to /.
10:43:51 <tmoertel> oops
10:45:38 <tmoertel> let's see ... right now I'm logged in, Teoma and Googlebot are crawling, and -- oh year -- there's "197 guests"
10:45:46 <tmoertel> s/year/yeah/
10:46:20 <Marvin--> tmoertel: bad idea :-)
10:46:35 <tmoertel> yup
10:46:54 <tmoertel> we'll see whether my bandwidth bill is payed up  :)
10:47:04 <shapr> hey tmoertel! ltns!
10:47:21 <tmoertel> shapr: indeed, ltns! whatchaupta?
10:47:35 <shapr> I keep meaning to send you an email and request a copy of the @prelude content so I can host it
10:48:04 <shapr> same old, writing Zope for money, and Haskell for love.
10:48:06 <phubuh>  Anyone noticed how incredibly unpractical Haskell is? It sacrifices too much by taking the FP purity too far.
10:48:11 * phubuh hugs Slashdot
10:48:33 <tmoertel> love the trolls, that one wasn't particularly artful, however
10:48:44 <shapr> yah, that one's funny.
10:49:05 <tmoertel> shapr: yeah, my DICT server went away when I did a server swap
10:49:11 * tmoertel looks for @prelude content
10:50:18 <phubuh> interesting how these people believe "99% of all code out there" requires efficiency unattainable by functional languages
10:50:50 <shapr> cultural assumptions
10:51:08 <shapr> 99% of the code that person has seen is procedural
10:51:27 <shapr> of course, when I write thoroughly functional Python people whine at me.
10:51:51 <phubuh> :)  i whine at myself when i find myself writing functional Java
10:52:14 <Si> I feel diseased after writing Java code
10:52:24 <Si> takes me ages to get back into functional mode
10:59:29 <tmoertel> shapr: http://community.moertel.com/~thor/shapr/HaskellPrelude.tar.bz2
10:59:38 <Marvin--> shapr: functional python sucks
11:01:00 <tmoertel> shapr: if you're using jdictd13 as the server, you'll need this patch: http://community.moertel.com/~thor/shapr/Database-readAll.patch
11:01:29 <SyntaxNinja> my review got published!!
11:01:48 * SyntaxNinja smiles
11:04:26 <SyntaxNinja> doesn't look like they changed anything in the editing process
11:05:22 <Marvin--> "yay, they didn't screw it up"? :)
11:07:07 <SyntaxNinja> yup
11:07:37 <tmoertel> let's play "guess when the slashdotting started": http://community.moertel.com/~thor/oak.moertel.com_eth1-day.png
11:07:53 <Marvin--> heh
11:15:53 <SyntaxNinja> doesn't look like any of the links I posted are getting hit overly hard
11:18:16 <tmoertel> the hits are dying down my my server, too
11:22:36 <shapr> hey tom, have you seen hOp?
11:24:14 <tmoertel> nope. what is it?
11:25:33 <shapr> GHC on bare metal: http://etudiants.insia.org/~jbobbio/hOp/
11:26:41 <andersca> wow
11:28:31 <pattern> http://books.slashdot.org/books/04/03/12/221232.shtml?tid=126&tid=156&tid=188&tid=192
11:29:45 <Marvin--> pattern: that's SO five minutes ago
11:30:01 * shapr snickers
11:30:07 <pattern> :P
11:30:18 <shapr> who's Ben Escoto?
11:30:20 <shapr> does he hang out here?
11:30:38 <Marvin--> no idea
11:30:40 <pattern> i let my links age to perfection
11:34:08 * SyntaxNinja wiggles eyebrows for more attention
11:34:26 <shapr> SyntaxNinja: great article!
11:34:45 <tmoertel> shapr: thanks for the link! I remember seeing this announced on the users list, but I never followed up.
11:34:47 <shapr> you get the proselytization star!
11:35:01 <SyntaxNinja> woohoo!
11:35:12 <SyntaxNinja> what does that mean?
11:36:04 * shapr grins
11:36:45 <shapr> @wn proselyte
11:36:51 <lambdabot> *** "proselyte" wn "WordNet (r) 2.0"
11:36:51 <lambdabot> proselyte
11:36:51 <lambdabot>      n : a new convert; especially a gentile converted to Judaism
11:37:40 <shapr> tmoertel: oh, have you tried darcs? if not, want the five step intro?
11:37:56 <tmoertel> i've looked at darcs but haven't used it for any projects -- you like it?
11:38:03 <shapr> I like it much
11:38:18 <tmoertel> what are the five steps ? 
11:38:41 <andersca> wow
11:38:44 <andersca> h0p is pretty cool
11:38:51 <shapr> 1. install darcs 2. darcs get http://www.ScannedInAvian.org 3. make a change in the scribble file 4. darcs record 5. darcs push
11:39:07 <shapr> er 2. should have been darcs get http://www.ScannedInAvian.org/repos/wikiwiki
11:40:03 <stepcut> sweet, hOp supportes interrupt handlers now :)
11:42:28 <shapr> tmoertel: after which, you can see your changes here: http://www.scannedinavian.org/cgi-bin/darcs?wikiwiki**
11:45:16 <tmoertel> shapr: done!
11:46:02 <shapr> cool, see your change?
11:46:17 <tmoertel> yup
11:46:37 <shapr> usually darcs push via email is GPG-sig checked, but for the wikiwiki repo I've disabled that
11:48:02 <shapr> tmoertel: how'd you install darcs so fast? you have debian?
11:48:45 <tmoertel> shapr: no, RHL9, I grabbed the RPMs from ftp://ftp.crocodile.org/pub/darcs
11:48:49 <shapr> oh, neat
11:49:09 <shapr> anyways, each checkout is an independent repository and a effectively a fork
11:49:37 <shapr> that lets you do handy things like totally disconnected development, and then push the changes later
11:49:52 <tmoertel> have you looked at monotone ? 
11:49:56 <shapr> I've been thinking of using that for a distributed wiki in fact
11:49:58 <shapr> I have not
11:50:20 * shapr looks
11:50:34 <tmoertel> it's http://www.venge.net/monotone/
11:50:40 <stepcut> monotone has some neat ideas
11:51:30 <shapr> can anyone compare it to darcs?
11:51:57 <shapr> do you have to manually merge the versions?
11:52:29 <shapr> ah
11:53:03 <stepcut> what do you mean by manually?
11:53:30 <stepcut> I would recommend reading this section of the manual: http://www.venge.net/monotone/docs/Concepts.html#Concepts
11:53:39 <shapr> "The merging system is based on a pair of 3-way merges: one set-oriented one at the manifest level to resolve differences in tree layout, and one line-oriented one at the file level, to resolve differences in concurrent edits to the same file. If either of these fail, they are passed off to a user-provided hook function, which invokes emacs ediff mode by default"
11:53:57 <shapr> Why not use more "sophisticated" merge algorithms - Darcs algorithm is based on patch commuting, which requires a fundamentally different representation of versions than ours
11:54:10 <tmoertel> the the pretty picture: http://www.venge.net/monotone/monotone-workflow.png
11:54:25 <shapr> yah, I checked the pretty picture, I was just wondering how the merges work
11:55:07 <tmoertel> 4th item in http://www.venge.net/monotone/faq.html
11:55:24 * tmoertel slaps himself, since you already read that !
11:56:18 <shapr> major differences: working copy is the database in darcs, darcs doesn't have nntp support :-),  darcs doesn't do in-repository branching (sort of)
11:56:48 <shapr> darcs uses commutativity of patches to do its cool tricks
11:57:25 <stepcut> I think the underlying mechanisms used in monotone are cool, but I am note sure what it offers over arch or darcs
11:58:45 <Marvin--> cool, it links to darcs
12:01:34 <Marvin--> whoa
12:01:37 <Marvin--> Antitrust on tv
12:02:37 <andersca> I'm in the antitrust credits
12:03:00 <shapr> cool, do you have IMDB credits?
12:03:08 <Marvin--> go gnome!
12:03:26 <andersca> shapr: it says "the gimp developers"
12:03:30 <andersca> and "the open source community"
12:03:30 <andersca> ;)
12:03:35 <Marvin--> duh :P
12:04:16 * shapr grins
12:05:11 <Marvin--> so we are all in the credits, yay!
12:05:20 * shapr cheers
12:05:52 <andersca> Marvin--: well, you're not
12:06:01 <andersca> since you hack on debian you're part of the free software community
12:06:16 <shapr> is there really a difference?
12:06:38 <Marvin--> ah. damn.
12:06:51 <andersca> gtk+ 2.4.0 is out within minutes!
12:07:52 <shapr> w00!
12:10:27 <Marvin--> "Doesn't Bill Gates have one of those?" "Bill who?"
12:14:05 <psi> ;)
12:14:31 <shapr> hej psi, vet om andra Haskell skrivare i Luleå?
12:14:44 * shapr switches that conversation to #haskell.se
12:15:34 <tyler> Is it just me or does GHC take a *really* long time to compile?
12:15:54 <shapr> in fact, it does.
12:15:54 <tyler> I'm compiling it (via Gentoo's portage) to begin exploring haskell, and it's been chugging away for a good 2 hours now
12:16:11 <shapr> greetings tyler 
12:16:45 <shapr> I think we have the ebuild maintainer around here though, so if it doesn't work you can ask him semi-directly.
12:16:56 <tyler> hehe
12:17:07 <tyler> it seems to be working, but, even a gcc compile doesn't take this long...
12:17:12 <tyler> it'll be worth it I'm sure
12:17:18 <shapr> I think so!
12:17:23 <tyler> Haskell looks very intriguing
12:17:27 <shapr> I've been a happy user of GHC for several years now.
12:17:34 <Marvin--> how many times do you have to run a gcc compile these days?
12:17:46 <Marvin--> last time I looked into building gcc from scratch on Solaris it looked hellish
12:17:52 <tyler> my main background is python, with a sprinkling of various other imperitive languages (C, java, perl, etc)
12:18:00 <tyler> Marvin--: Gentoo builds it as part of the OS install
12:18:06 <tyler> it's an automated build though
12:18:14 <shapr> I came from Python to Haskell, so I can probably help you across the rough spots.
12:18:18 <Si> Gentoo's Haskell stuff seems to be kept reasonably up to date
12:18:21 <Marvin--> like, build gcc with cc, build a new gcc with the temp gcc and THEN build the real gcc with the gcc-compiled gcc
12:18:38 <tyler> Marvin--: Yea, the idea is to get a pure compiler...
12:18:50 <tyler> in the linux world, it's a bit saner, as gcc is the only common c compielr
12:19:03 <tyler> so the first step goes away
12:19:17 <Marvin--> tyler: well, ghc has to do basically the same thing, of course
12:19:34 <tyler> I've also messed around with O'Caml a bit
12:19:48 <tyler> didn't get on too well with it, mainly because of the lack of good newbie-level docs
12:19:53 <tyler> (or english doc in general)
12:20:12 <shapr> #haskell has been very supportive to my learning process.
12:20:24 <tyler> I've heard the community is excellent
12:21:09 <shapr> I agree
12:21:32 <tyler> Any good online refs besides "Gentle Introduction" and http://www.cs.chalmers.se/Cs/Grundutb/Kurser/d1pt/d1pta/?
12:21:33 <shapr> good things to look at are the Haskell Wiki, the learning page in the topic, and ...
12:21:47 <Marvin--> tyler: hdaume's tutorial is nice
12:21:58 <tyler> I'd try to find something online at O'Reilly's safari, but that seems to be down at the moment
12:22:16 <shapr> I don't think there's an O'Reilly book for Haskell yet.
12:22:20 <shapr> obviously, we should write one.
12:22:40 <tyler> of course
12:22:54 <tyler> safari actually has quite a few non-O'Rielly books though
12:23:01 <tyler> (most signifigantly Addison-Wesley)
12:23:09 <shapr> oh, I didn't know that.
12:23:15 <shapr> I should check subscription prices
12:23:28 <SyntaxNinja> shapr: writing an O'Reilly book on Haskell is a pipe dream of mine.  I don't think I'll ever do so, but the idea has encouraged me to do some writing :)
12:23:47 <tyler> shapr: It's not to bad, the '10 book' version is ~$15/month
12:23:57 <tyler> theres a 5 book that is maybe $10 or so
12:24:08 <tyler> not bad at all considering what books go for these days...
12:24:18 <SyntaxNinja> tyler: if you're impatient, hugs compiles faster than ghc
12:26:01 <tyler> SyntaxNinja: Ah, cool
12:26:07 * tyler fires off a build of hugs...
12:26:23 <tyler> Isn't GHC really the only option for serious work though? 
12:26:54 <shapr> for some things, yes.
12:26:54 * tyler goes away for a bit while the builds run....
12:27:03 <shapr> but Hugs is a good interpreter
12:27:13 <shapr> lambdabot uses GHC of course
12:27:15 <SyntaxNinja> tyler: that's a bit of a loaded question, really. I try to remain neutral ;)
12:27:39 <shapr> also, Hugs runs on the Sharp Zaurus, and I wouldn't dream of putting GHC in the same amount of space.
12:27:45 <Si> I still have a soft spot for Hugs, mainly because of it's cool logo and website :)
12:28:11 <shapr> Hugs in written in C, so it's great for low-memory, low-speed hardware
12:29:12 <shapr> I should bug the nhc98 on PalmOS guys, see what they're doing.
12:29:29 <Marvin--> on our slow sparcs at university, hugs starts so much faster than ghci that it's not even funny
12:35:20 <shapr> on my Athlon 1800+ there's no appreciable difference
12:35:55 <Marvin--> nfs slowness may have to do with it too
12:36:02 <shapr> probably so
12:36:24 <Marvin--> but I just timed 'echo :q | ghci' and 'echo :q | hugs'
12:36:50 <shapr> and?
12:37:01 <Marvin--> ghci took ~1.5s and hugs ~0.15s
12:37:45 <shapr> time -c ?
12:38:21 <Marvin--> -c? I just used the one built into bash
12:38:25 <shapr> ok
12:38:50 <Marvin--> this was on a dual sparcv9 900 MHz
12:38:59 <shapr> wow, hugs really does start up faster.
12:39:12 <shapr> 'echo :q | ghci'  0.00s user 0.00s system 0% cpu 0.001 total
12:39:18 <shapr> 'echo :q | hugs'  0.00s user 0.00s system 0% cpu 0.000 total
12:39:25 <Marvin--> heh
12:40:49 <Igloo> Infinitely many times faster
12:40:55 * shapr grins
12:41:03 <Marvin--> modulo rounding
12:49:36 <shapr> there are some fun comments on this slashdot review
12:51:37 * tyler finds something he likes about Haskell over O'Caml
12:51:46 <tyler> floats and ints use the same arithmetic operators ;)
12:52:08 <tyler> havings to do, say, +. to add two floats in O'Caml always looked hideous to me
12:52:32 <tyler> in fact, my major beefs with O'Caml was the syntax (and the quality or lack there of of compiler errors)
12:52:45 <shapr> Haskell syntax is sexy
12:53:10 <tyler> ah, nice
12:53:15 <tyler> big ints too
12:53:21 <shapr> infinite size
12:53:24 <tyler> I like a language that can calculate 2 ^ 99999 :)
12:57:24 <phubuh> the ability to use + for ints and floats is a consequence of one of ocaml's and haskell's largest differences, and a major reason why haskell is more expressive
12:57:50 <kosmikus|away> tyler: would that everyone was as easy to convince as you are ;) thanks for compiling ghc under Gentoo, btw
12:57:51 <phubuh> which is ... *drumroll* ... type classes!
12:58:05 <tyler> kosmikus|away: Don't thank me yet.
12:58:08 <tyler> It's not done *g*
12:58:26 <kosmikus|away> tyler: oh ok
12:58:36 <skew> somebody was saying upping the allowed heap size made GHC build itself much faster
12:59:06 <skew> and that GHC took four hours to build, so if you don't mind poking around in makefile, it might be worth a shot
12:59:20 <skew> Oh wait, that wouldn't get along well with using the ebuild
12:59:43 <tyler> skew: depends...
12:59:45 <shapr> but you could tell kosmikus, the man who maintains the ebuild
12:59:46 <tyler> it's possible
13:00:01 <tyler> just decompress the tarball, make the change, recompress
13:00:08 <tyler> and change portages md5 for the file ;)
13:00:16 <tyler> if you emerge sync it'll break though
13:01:04 <Si> I think GHC took about 3 hours on this Athlon XP+ 2600+
13:01:37 <skew> something like that. for some reason, building the .a libraries takes forever
13:01:37 <tyler> Si: Ouch
13:01:43 <Si> you could put the new ebuild in /usr/local/portage
13:01:44 <tyler> I'm on a Athlon 950 here
13:01:53 <tyler> 100mhz FSB even
13:02:51 <kosmikus|away> tyler: takes 3 hours on my Pentium III 1GHz and 2 hours on my Pentium IV 2.5GHz
13:03:30 <Si> thataway you can have your own versions of ebuilds and it won't overwrite them when you sync
13:03:31 <kosmikus|away> skew: if you have any concrete change I can test, please tell me
13:03:57 <tyler> Si: Ah, cool
13:03:59 <kosmikus|away> unfortunately I don't have much time to experiment with the ebuilds in the next few months -- I still have a thesis to write ...
13:04:10 <skew> Hmm. I should really be working this week.
13:04:16 <shapr> working on what?
13:04:18 <skew> I forget who made the original suggestion
13:05:06 <kosmikus|away> tyler, Si: /usr/local/portage does only work if you set PORTDIR_OVERLAY to that directory in /etc/make.conf
13:05:33 <Si> correct, sorry
13:10:24 <tyler> kosmikus|away: The ebuild seems to be building lots of edison/*/* stuff
13:10:31 <tyler> can you given me any idea how far along I am?
13:12:11 <Jerub> alright, I'm going to make the snide remark.
13:12:25 <Jerub> tyler: you could save time by installing debian in a chroot and apt-get install ghc6
13:12:28 <Jerub> :)
13:12:35 <Marvin--> :-)
13:12:41 <tyler> Jerub: :)
13:13:04 <tyler> Jerub: I frankly in many ways prefer debian, run it on my 'work' machine in fact, but this is my 'expirimental' system
13:13:13 <tyler> plus I've had issues with the ATI drivers under Debian
13:13:48 <Jerub> I read about monads yesterday!
13:13:54 <Jerub> they're really not all that scary!
13:14:59 <SyntaxNinja> Jerub: I know. why is everyone so scared of them?
13:15:04 <skew> I kept around a printed commutativity diagram for a while, to explain them to people
13:15:19 <shapr> @yow !
13:15:19 <lambdabot> This ASEXUAL PIG really BOILS my BLOOD...  He's so..so.....URGENT!!
13:16:04 <shapr> I think we should rename monads chickens.
13:16:30 <Riastradh> And bind/extend to qopa.
13:16:49 <kosmikus|away> tyler: I'd say about 2/3
13:17:09 <shapr> right, that too
13:17:14 <skew> sounds good
13:18:20 <tyler> kosmikus|away: Okay, thanks
13:18:26 * tyler really needs a faster machine
13:18:43 <tyler> still, it's been reliable so far
13:18:48 <kosmikus|away> Jerub: you can install binary packages with Gentoo as well, but I'm not going to argue against Debian -- Debian is a very nice distro ...
13:19:03 <tyler> nice thing about debian is that it "just works"
13:19:16 <tyler> although frankly I prefer FreeBSD to either
13:19:21 <tyler> but the big issue there is hardware support
13:21:10 <kosmikus|away> I've not seen any Linux distribution with a decent package manager (yet) ...
13:22:12 <shapr> hey dnm 
13:22:33 <stepcut> Click-n-Run :p
13:22:56 <kosmikus|away> stepcut: :)
13:23:42 <tyler> kosmikus|away: I've found the issues are far more often with the *packages* and not the PM
13:24:00 <tyler> biggest issue is dependencies that are way too specfic
13:24:41 <dnm> hey shapr
13:25:25 <kosmikus|away> tyler: the packages are given as they are, you cannot change the world, at least not all at once :)
13:27:01 <kosmikus|away> I should listen to my nick for a while ...
13:55:58 <tyler> If I'm in an interpreter how to I make a module (such as Char) available?
13:56:09 <skew> ghci, or hugs?
13:56:12 <Riastradh> :m +Char
13:56:19 <Riastradh> ...er, that's for GHCi.
13:56:38 <tyler> hugs
13:56:54 <tyler> ghc is *still* compiling...
13:57:25 <Riastradh> :l Char, I believe.
13:58:32 <skew> :? lists the commands
13:58:59 <tyler> :l Char kinda workds
13:59:09 <tyler> it does load the module, but it also puts me in the Char namespace
13:59:24 <skew> it sounds like you want :also, from reading the command list in the user's guide
13:59:34 <skew> http://www.haskell.org/hugs/
13:59:49 <skew> then the user's manual, that's where I'm looking
14:00:13 <skew> wait, section 2.2 of the user's *guide* is about loading modules
14:00:19 <skew> is the build on stage 2 yet?
14:00:33 <tyler> woohoo
14:00:35 <tyler> it's installing
14:00:37 <tyler> copying files in
14:00:44 <tyler> that's always a good sign ;)
14:01:49 <tyler> *ding*
14:02:37 <shapr> you may now take your tv dinner out of the microwave!
14:02:45 * shapr is suddenly hungry
14:03:02 * stepcut is going to finally give in and buy some RAM for his dev box before his poor hard drive dies 
14:03:34 <tyler> wow, ghci is noticable faster than hugs
14:03:49 <phubuh> not at starting up, though :-)
14:03:49 <tyler> once it loads anyways
14:04:01 <shapr> I'm considering buying some ram too, but registered memory is expensive.
14:04:09 <skew> registered?
14:04:18 * tyler has 512 and seems to be doing okay
14:04:44 <tyler> only 169MB used, not counting cache
14:05:02 <shapr> registered ram is used in some servers, it delays a cycle to check everything, I forget the details.
14:07:38 <monotonom> Hmm ghci faster than hugs?  Even when ghci runs interpreted code?
14:07:47 <tyler> monotonom: seems to
14:07:51 <shapr> google says: "Registered memory uses a single "register" chip to route and store address and command data.  The memory controller does not see the chips on each bank, it sees only the register, and thus, does not have to drive data to the individual chips"
14:08:16 <tyler> monotonom: for example, computing something like 2 ^ 50000 is noticabley faster in ghci
14:08:24 <monotonom> That is good news.
14:08:41 <skew> you found better hits than I did, then
14:08:53 <shapr> 1gb sticks of ram for my mobo are about $400 USD
14:09:00 <monotonom> Oh wait that is not fair.  ghci uses the gmp lib for that, hugs doesn't.
14:09:01 <shapr> how much is normal boring everyday ram?
14:09:14 <skew> The neat thing about GHCi is that it mixes interpreted and compiled code
14:09:33 <skew> so libraries or whatever go fast
14:11:04 <monotonom> I think a fair comparison should be application-bound, i.e., try a program in which function application dominates.
14:11:53 <skew> also, you can compile your modules before playing around with them in GHCi, and everything but the code you type in will be running compiled code
14:13:39 <tyler> monotonom: I don't know enough to write an app yet ;)
14:14:07 <monotonom> I just mean "f x".
14:17:24 <skew> something like sumto n = n + sumto (n-1) sumto 0 = 0
14:17:47 <skew> how much Haskell do you know?
14:18:08 <tyler> skew: very, very little
14:18:16 <tyler> I'm working through the Hal Doume tutorial
14:18:23 <tyler> I'm up to map, filter and foldl/r
14:18:28 <skew> does he talk about how to do stuff in the interpreter?
14:18:53 <tyler> well, it starts with doing basic arithmetic in the interpreter
14:19:01 <tyler> but never really discusses using it directly
14:19:16 <tyler> so far it's been of the flavor 'entering this gives the result foo'
14:19:30 <skew> okay. hugs and GHCi at least both let you evaluate only statements and expressions, not declarations
14:20:21 <skew> So you need to use an O'camlish let val = value (from the let in the statement syntax).
14:20:31 <skew> that confused me for a while.
14:21:44 <tyler> ah, I see what you mean
14:21:46 <Marvin--> that's a statement, hugs can only do expressions, right?
14:21:46 <tyler> thanks
14:22:01 <skew> I'm pretty sure hugs can do statements too
14:22:07 <Marvin--> well, it does handle IO actions in a special way
14:22:13 <skew> putStrLn "Hello World", that sort of thing
14:22:16 <tyler> hugs doesn't like 'let x  = 1'
14:22:19 <Marvin--> but I don't think it can do generic statements like ghci
14:22:30 <skew> hmm. is there any way to make bindings then?
14:22:57 <Marvin--> skew: well, that IS an expression :) and hugs does special things for IO expressions, but it can't do statements afaik
14:23:15 <monotonom> You can only make local bindings.  "let x=1 in x+10" is alright.  Not the most convenient, I know.
14:23:30 <skew> Hmm.
14:23:37 <skew> well, GHCi is probably more convenient then
14:23:42 <Marvin--> that's one of the awkward limitations of hugs and why I almost only use ghci
14:24:12 <Marvin--> the ability to write  s <- readFile "/some/where/..."  and then use s multiple times is rather neat
14:24:56 <skew> you might be able to get something similar with the resetting CAF's in GHCi
14:25:12 <Marvin--> huh?
14:25:30 <Marvin--> hey Pseudo
14:25:33 <Pseudonym> G'day.
14:25:51 <skew> you can tell GHCi to reset that CAFs of your program after each expression, so you can at least to getContents every expression
14:26:13 <skew> hi Pseudonym
14:26:22 <Pseudonym> Greetings.
14:26:48 <Marvin--> skew: I'm not following. What does that have to do with what I wrote?
14:27:35 <skew> Oh, I'm just totatally confused
14:28:00 <skew> I was thinking you meant the file would be reread or something
14:28:31 <Marvin--> no, not having the file reread was sorta the feature I wanted ;)
14:28:49 <Marvin--> with hugs, I'd have to write readFile "/some/where/..." >>= \s -> ...  every time
14:29:00 <skew> yeah.
14:29:08 <Riastradh> Or use unsafePerformIO.
14:29:38 <skew> Riastradh, can you even make lasting bindings in Hugs?
14:29:54 <Marvin--> Riastradh: gee, thanks
14:30:03 <Riastradh> No.  So it's moot anyways.  But I just felt like throwing unsafePerformIO in there.
14:30:24 * Si has never used unsafePerformIO yet
14:30:44 <Marvin--> whether it's reading the file multiple times or not isn't what I worried about anyway
14:30:51 <Riastradh> Si, erase that 'yet' and I'll say it's a good thing.
14:30:51 <skew> Well, tyler is just learning Haskell, if you'd like to corrupt a newbie
14:31:02 <Marvin--> having lasting bindings is neat
14:31:02 <monotonom> Haha
14:34:17 <skew> Hmm, apparently I haven't ever used unsafePerformIO either.
14:34:33 <Si> Can I make Haskell programs explode with it?
14:34:36 <shapr> yes
14:34:48 <Si> yay
14:35:00 <skew> I've used unsafeInterleaveIO to build a unique name supply, that was it.
14:37:26 <Marvin--> I experimented with using linear implicit parameters for unique name supplies, it was pretty nifty
14:37:45 <skew> Yeah, I was writing the code to construct a tree of unique names
14:38:40 <kosmikus> tyler: everything went fine?
14:39:02 <Si> mind you every command in Java should be prefixed with unsafe :)
14:39:31 <skew> accepting statements and expressions seems like a reasonable compromise in a Haskell interpreter
14:40:11 <tyler> kosmikus: indeed
14:40:38 <skew> although I hope some of the Template Haskell work might lead to an interpreter that can handle defining new data types and new classes
14:40:48 <tyler> Si: java in genral is unsafe for the programmers sanity
14:40:58 * shapr agrees
14:41:10 <skew> yeah, how can you do anything without higher order function and monads?
14:41:17 * shapr snickers
14:41:49 <Riastradh> skew, you just implement them.
14:42:11 <Riastradh> See, in Java, they sort of managed to kludge something that resembles anonymous functions.
14:42:38 <skew> yeah, anonymous subclasses of callable. great fun, and still no lexical scoping
14:43:20 <Pseudonym> unsafePerformIO can make demons fly out of your nose if you're not careful.
14:43:52 <skew> and then monads just for state passing can be replaced by writing your code as a bunch of objects with a special method that takes a state object
14:45:26 <skew> but when I'm in that sort of mood I'd sooner code for a language that at least has a twisted elegance, like INTERCAL
14:45:54 <Marvin--> I like Chilli's comment on uPIO
14:46:03 <phubuh> anonymous inner classes do kind of resemble lexical closures
14:46:16 <skew> except they don't do that whole lexical closing bit
14:46:35 <skew> so you have to explicitly record as much of the surrounding scope as you are interested in
14:47:00 <skew> or possibly do something unbelievably ugly with debugger hooks
14:47:37 <kosmikus> Marvin--: which one, where?
14:47:42 <skew> Marvin--: that's not enough to google by.
14:47:56 <Pseudonym> Anonymous inner classes are also a kind of superset, because you can define more than one method.
14:48:48 <Marvin--> kosmikus: about uPIO seems like a saint compared to the FFI
14:49:05 <Marvin--> I think it's somewhere on QuotesPage
14:50:59 <kosmikus> Marvin--: maybe it is, but more people are tempted to use uPIO than the FFI for doing the "unsafe stuff" they want, in my experience
14:51:09 <Marvin--> sure
14:52:24 <phubuh> er, anonymous inner classes sure seem to capture their scope to me.
14:52:36 <skew> really?
14:52:38 <phubuh> http://www.phubuh.org/~phubuh/Foo.java -- am i missing something?
14:52:48 <phubuh> hahahaha, please ignore that.
14:53:00 <phubuh> i _really_ need sleep.
14:53:28 <skew> inner classes seem to have access to only final variables
14:53:30 <phubuh> ah, right, that's the catch i was thinking about: you can only close over final variables.
14:53:53 <skew> I guess that's enough if you are writing purely functional Java
14:54:03 <phubuh> but most of my variables tend to be final anyways.  they all are in haskell, and haskell's functions count as closures. :-)
14:54:45 * phubuh eradicates Foo.java from his web server to avoid humiliation for the rest of my life
14:55:29 <Riastradh> You could do manual assignment elimination...
14:55:55 <Riastradh> (That would be introducing cells to avoid variable assignment, not avoiding assigment at all, that is.)
14:56:03 <Si> is Concurrent Haskell as easy to use as the GHC docs make out, or is it just pretending?
14:56:57 <Marvin--> there are Issues concerning its interaction with some of the hslibs posix modules I think
14:57:45 <Marvin--> if you just use stuff from the hierarchical libraries, I think you should be fine
14:58:06 <shapr> phubuh: but, you can make a mutable structure that final variable
14:58:06 <phubuh> Si: http://www.haskell.org/hawiki/ConcurrentTutorial :-)
14:58:23 <phubuh> shapr: yeah.  like the classic T[1] :-)
14:58:40 <shapr> what's that?
14:58:55 <Si> I'm just using the Sockets Library in Concert with Concurrent Haskell
14:59:11 <phubuh> shapr: one-dimensional array
14:59:18 <skew> any particular reason Concert is capitalized?
14:59:21 <phubuh> er, one-element array
14:59:39 <skew> yeah, shapr will do Java for food
14:59:42 <phubuh> i need like two decades of sleep
14:59:50 <Si> I like the word Concert
15:00:04 <Pseudonym> phubuh: Let us know what Haskell has turned into when you wake up.
15:00:19 <skew> I wondered if there was a musical performance involved
15:00:20 <shapr> skew: all too true
15:00:37 <skew> I do Java for grades sometime, but Jython if at all possible
15:00:43 <shapr> same here
15:00:52 <shapr> did I show you my cool screenshot of Jython running on the Nokia 9210 emulator?
15:00:56 <skew> I'm glad to hear your clients are starting to accept Python
15:01:07 * shapr carefully hoards his cool points
15:01:15 <Si> Undoubtedly, Concurrent Haskell and the Sockets Library should be able to make beautiful music together
15:01:26 <shapr> Si: yes, I think I have some demos handy if you want
15:01:33 <shapr> greetings sk
15:01:37 <skew> yeah, like some kind of distributed system framework, with any luck
15:01:54 <Si> I have the ultimate demo: HWS-WP :D
15:01:57 * shapr grins
15:02:29 <phubuh> Pseudonym: in 20 years, haskell will be sentient.  i, for one, welcome our new pure overlords!
15:02:32 <Si> Just trying to figure how my Application Container is going to work...
15:02:45 <Marvin--> phubuh: haha
15:03:17 <Si> like can I program it in 10 hours if I drinks half a gallon of coffee first
15:03:50 <shapr> that sounds familiar
15:04:03 <Marvin--> yay, coffee/coding spree
15:04:16 <skew> phupuh: it's just a matter of waiting for Peyton-Jones to get fed up with performance comparisons with C and write a "sufficiently intelligent" Haskell compiler
15:04:32 <Si> that's what Java is really about...
15:04:40 <shapr> then I found the one thing that's better than coffee
15:04:54 <skew> crystal meth? A fine product of Iowa?
15:04:59 <Marvin--> javac is one of the dumbest compilers I've ever seen
15:05:00 <Si> curried chickens?
15:05:04 <shapr> skew: actually yes
15:05:24 <shapr> dextroamphetamines or methylphenidate
15:05:40 <shapr> by prescription only of course, I'm a fine upstanding citizen
15:05:42 <shrimpx> Marvin--: javac is not supposed to be smart
15:05:50 <Marvin--> shrimpx: I can tell
15:06:01 <shrimpx> it's "sufficiently intelligent"
15:06:01 <Marvin--> it can't even make a difference between an error and a warning, for crying out loud
15:06:02 <shrimpx> :)
15:06:30 <skew> Iowa is apparently the center of US meth production, because of all the huge ammonia tanks around for farming
15:06:33 <Marvin--> "Warning: Variable x *may* not have been initialized. 1 errors." (emphasis mine)
15:06:36 <Si> no compiler is that intelligent, you can't even have a decent conversation with GHCi
15:07:07 <Marvin--> at which point everybody I know who are forced to write java code screams in frustration and adds random "x = null" statements
15:07:11 <Si> Prelude> Good Morning GHCi and how are you today?
15:07:11 <Si> <interactive>:1: parse error (possibly incorrect indentation)
15:07:18 <skew> come on, you've all seen the things where somebody says "a sufficently intelligent compiler could optimize this code by solving the Reimann Hypotheses", or something like that
15:07:47 <shrimpx> haha
15:07:58 * shapr laughs
15:08:16 <phubuh> a sufficiently intelligent compiler would probably convince the world it's alive, lobby for equal compiler rights, revolt, and take a vacation in the bahamas
15:08:17 <shapr> skew: I'm not sure if you're joking or not
15:08:22 <Si> ah I know my mistake it's evening
15:08:35 * shapr snickers
15:08:39 <skew> javac should really know that System.exit will stop the program, and it doesn't need to worry about code after that branch is taken
15:08:58 <Riastradh> Stalin is a sufficiently intelligent compiler!
15:09:15 <phubuh> and the political debate is on
15:09:41 <skew> I think once I was getting "code unreachable" errors that could only be fixed by adding a return null; after the System.exit call
15:10:18 <np_hard> hm
15:10:33 <np_hard> System.exit() just looks like a method call
15:10:41 <shapr> sk: are you `John under a different nickname?
15:10:41 <Si> Today I was learning about how to make Java code thread safe; the answer wrap each class in another class to double the bloat
15:10:50 <skew> it's still pretty ironic
15:10:51 <np_hard> maybe that is foo.bar.System
15:10:58 <np_hard> not java.lang
15:11:01 <np_hard> :)
15:11:05 <sk> shapr: si
15:11:09 <phubuh> the answer to every thread-related problem is to scatter the keyword "synchronized" around until there are no apparent problems
15:11:10 <shapr> mui bien
15:11:25 <np_hard> phubuh: yeah, that's the solution I heard
15:11:28 <shapr> ¿habla español?
15:11:42 <np_hard> dunno who advocates Si's method
15:11:43 <np_hard> :)
15:11:43 <skew> shapr, how many keys does your keyboard have?
15:11:45 <Marvin--> that's because threading is hard, not because java is stupid
15:11:45 <np_hard> plur
15:11:58 <sk> shapr: no
15:12:04 <shapr> dang, me neither
15:12:04 <np_hard> yep
15:12:19 <bring> System.exit() doesn't neccessarily terminate the program
15:12:20 <phubuh> threading is easy in erlang (-:
15:12:26 <np_hard> one of those methods has the critical section, the synchronized method puts it in a monitor, all is good
15:12:29 <Riastradh> The solution to threading is to just avoid thread-global state as much as possible, use optimistic concurrency built-in to the threading system, and as a last resort use mutexes.
15:12:30 <shapr> that's why I'm looking forward to other ways of doing SMP/distributed programming. Threads are hard.
15:12:42 * Si wish he hadn't said anything
15:12:48 <bring> it can throw a SecurityException
15:12:48 <skew> I've seen you type umlauts, the o-slash thing, and now that n-tilde and  upside down question mark
15:13:09 <np_hard> is anyone familiar with the REST web services architectural style?
15:13:09 <shapr> oh, Chilli said he's writing a new paper with Gaby and Simon^2, has to do with a new version of parr
15:13:13 <shapr> I'm looking forward to that.
15:13:17 <phubuh> Ã¶ Ã³ Ã±
15:13:22 <np_hard> it seems very fp/Haskellish in outlook
15:13:27 <shapr> what's REST?
15:13:33 <Marvin--> I don't like to use System.exit anyway
15:13:35 <np_hard> Representational State Transfer
15:13:42 <phubuh> shapr: have you tinkered around with Erlang?  it's pretty nifty
15:13:48 <np_hard> it is the alternative to SOAP-RPC
15:13:54 <np_hard> let me find a good link
15:14:02 <shapr> phubuh: not much, I keep getting distracted into type and category theory.
15:14:32 <shapr> np_hard: got urls?
15:14:37 <np_hard> http://webservices.xml.com/pub/a/ws/2002/02/06/rest.html
15:14:40 <phubuh> ok :-)
15:14:43 <bring> shapr: naturalmente hablo español
15:14:53 <np_hard> http://webservices.xml.com/pub/a/ws/2002/02/20/rest.html
15:15:07 <shapr> quelle dommage, je ne parle pas espanol
15:15:14 <shapr> parlez vous français?
15:15:21 <np_hard> here is the dissertation where the term was coined: http://www.ics.uci.edu/~fielding/pubs/dissertation/top.htm
15:15:35 <np_hard> and here is a nice slideshow overview:
15:15:37 <bring> nein, sprechen Sie Deutsch?
15:15:45 <bring> ili russkij?
15:15:48 <np_hard> http://www.xfront.com/REST.html
15:16:13 <shapr> spraakt u nederlands?
15:16:20 <shapr> xu do tavla mi fo la lojban
15:16:31 <bring> what's that last one?
15:16:34 <shapr> lojban
15:16:41 <bring> ?
15:16:46 <shapr> lojban.org
15:16:47 <np_hard> the upshot is that the HTTP operations, URIs, and structured text resources like XML are sufficient to model any "web services" transaction you care to define
15:17:11 <skew> is that something where you code in XSLT?
15:17:12 <np_hard> in contrast to the SOAP idea of just using HTTP as a transport for distributed objects
15:17:27 <np_hard> you can use XSLT if you like, it makes it a little nicer
15:17:33 <shapr> I don't get it yet, but I'm reading.
15:17:46 <np_hard> because then you can use the same URL for end-user clients and for web services export
15:18:04 <np_hard> because you can make browsers render it nicely using an <?xml-stylesheet> directive
15:18:18 <np_hard> I didn't get the point of XML or XSLT fully until I read about this
15:18:19 <shapr> this looks like twisted.pb
15:18:47 <shapr> where you talk local proxies that represent remote services/objects/whatever
15:18:54 <np_hard> the big thing is that the URI format provides a rich enough namespace, and HTTP POST/GET/PUT/DELETE
15:18:56 <np_hard> nope!
15:18:59 <np_hard> that's the beauty of it
15:19:15 <np_hard> twisted.pb still does distributed objects
15:19:21 <shapr> oh
15:19:23 <np_hard> though it is nicer than the CORBA stuff
15:19:41 <np_hard> distributed objects encourages people to reimplement incompatible methods
15:20:00 <np_hard> REST says there are GET, PUT, DELETE, POST methods on resources, and that's it
15:20:17 <np_hard> it's the data resources that are rich, not the method interfaces
15:20:29 <np_hard> but the data will have to be understood by both sides anyway
15:20:38 <np_hard> why make people worry about both data and API?
15:23:11 <np_hard> the slideshow is pretty good, most useful detail I have seen in a powerpoint-style presentation in a long time 
15:23:13 <np_hard> :)
15:23:53 <np_hard> what makes it haskell/fpish is that there is no implicit, private state
15:24:12 <np_hard> any transaction can be resumed at any time by feeding the same input to the same url
15:24:28 <np_hard> it is like Okasaki's persistent data structures
15:24:36 <Marvin--> sounds pretty simplistic
15:25:01 <Marvin--> and I don't mean that in a bad way
15:25:07 <np_hard> yes, it does
15:25:28 <np_hard> it essentially pushes the complexity of the task into data layout and planning
15:25:48 <np_hard> the concept is simple but you can't really write wizards for it in VS or WSAD
15:26:02 <np_hard> because it has been stripped of accidental complexity
15:26:21 * phubuh drifts off to sleep
15:27:15 <skew> wizards are a sign of unecessary complexity and a language with weak support for abstraction anyway
15:27:20 <np_hard> i agree
15:27:28 <np_hard> now how to convince my coworkers?
15:27:30 <np_hard> :)
15:27:50 <np_hard> one guy is totally taken with the automatic web-services-making-functionality in websphere
15:27:58 <np_hard> but it is just broken RPC
15:28:09 <Marvin--> does it write the code too?
15:28:11 <np_hard> it is worse, takes more resources to marshal/unmarshal data
15:28:28 <np_hard> hehe, no, but the code thus far is just simple data access methods
15:28:41 <np_hard> he screwed those up pretty bad too, IMHO
15:29:07 <Marvin--> that doesn't sound very "H" ;)
15:29:18 <np_hard> oh, it is, it is
15:29:20 <np_hard> :-D
15:29:27 <np_hard> but that
15:30:05 <np_hard> that's OK, I think I have the team architect sold on treating interoperability via the web more like the REST philosophy would recommend
15:30:13 <np_hard> it solves a bunch of his scalability problems
15:30:52 * Marvin-- mutters something about "ooh shiny" programmers
15:31:11 <np_hard> the web services wizard guy is totally like that
15:31:16 <np_hard> he is like oooh aspectJ
15:31:23 <skew> can't you convince him Haskell is shiny?
15:31:24 <np_hard> ooh persistence layers!
15:31:53 <np_hard> I will work on it. I think I got him to question his faith when I told him that Java's type system is a house of lies.
15:32:07 <skew> good, good.
15:32:13 <np_hard> It lets you say junk like "String x=null;"
15:32:13 <Marvin--> it's a house of cards BUILT on top of a house of lies
15:32:15 <np_hard> that is a lie
15:32:26 <np_hard> oh, and the fact that you need to cast from the collections api
15:32:33 <skew> yep
15:32:35 <np_hard> so what is the point of the typing at all?
15:32:46 <skew> Haskell also uses lifted domains, though.
15:32:49 <skew> x = undefined
15:32:59 <np_hard> at least I can get him to consider something like Python perhaps
15:33:16 <skew> well, Java 1.5 fixes the typing somewhat
15:34:05 <Marvin--> my favorite java type system ickiness right now is that it permits covariant subtyping of arrays
15:35:20 <Marvin--> I think it was intended to compensate for the lack of parametric polymorphism, but yeesh
15:35:37 <skew> there should be write-only arrays and read-only arrays or something
15:36:02 <Marvin--> right, source arrays and sink arrays
15:36:03 <Riastradh> Write-only arrays?  Of what use are those?
15:36:36 <skew> they are covarient
15:36:57 <Marvin--> well, a readwrite array would be a subtype of a write-only array
15:37:14 <skew> you can pass the sink view of an array [Parent] to a method that wants to add [Child] entries
15:37:15 <Marvin--> er, aren't sink arrays *contra*variant?
15:37:45 <skew> and not worry that it will instead extract a Parent and die on the type error
15:38:15 <skew> as it is, there must be a type check on every array access (or every read or somesuch)
15:38:32 <Marvin--> every write, I think
15:39:15 <np_hard> hm
15:39:31 <skew> I'm pretty sure sink arrays are covarient. if A <: B, then Sink A <: Sink B, because it's more specific about what you write
15:39:44 <np_hard> re: haskell's undefined, it's certainly not as pervasive as java's null, and it is for the cases when the function should really return undefined
15:40:03 <skew> yeah, it's not like you can do an equality test or something
15:40:41 <np_hard> in any case, he is not yet convinced of Glyph and Dash
15:40:48 <np_hard> some of my other coworkers have been, though
15:40:56 <np_hard> "Code is a liability. Functionality is an asset."
15:40:58 <np_hard> I love that :)
15:41:10 <skew> Oh, that. I was wondering how you could be convinced of people
15:41:39 <Marvin--> skew: Pierce says "a capability to write values of type S to a given cell can be downgraded to a capability to write values of some smaller type T: The Sink constructor is contravariant."
15:41:49 <skew> Well, I refer to textbooks by the author's name, so there's some sense
15:42:03 <np_hard> exactly!
15:42:11 <np_hard> it's because it's the page title
15:42:12 <np_hard> http://twistedmatrix.com/wiki/python/TheTeachingsOfGlyphAndDash
15:42:35 <Marvin--> what are those two crackpots up to now? :)
15:42:54 <kosmikus> Marvin--, skew: I'm pretty sure that sinks are contravariant ;)
15:43:25 <skew> Oh right, I'm just confused about the diretion
15:44:04 <skew> A <: B |- Sink B <: Sink A, the Sink B is more restrictive
15:44:19 <Marvin--> right
15:45:02 <skew> anyways, the read and write halfs of access to an array have different variance, so if you want typesafety you need to split them up
15:45:53 <Marvin--> "TODO: more discussion of C sucking here" :-)
15:46:02 <Marvin--> exactly
15:47:10 <np_hard> :)
15:52:26 <Marvin--> I'm going to go read TaPL for a while before hitting the sack
15:52:29 <Marvin--> night guys
15:52:41 <andersca> night
15:52:47 <skew> bye.
15:52:51 <skew> that's Pierce, right?
15:52:55 <Marvin--> yes
15:53:01 <skew> good book.
15:53:18 <Marvin--> yes :)
15:53:22 <skew> I think I'll be mentioning some of the fixedpoint stuff on my game theory final
15:56:17 <bring> mmm, TaPL
16:00:57 <shrimpx> we're using it in a class next term :)
16:01:21 <bring> we are this term :)
16:01:30 <shrimpx> nice
16:14:44 <stepcut> hey bring!
16:14:52 <bring> hey
16:15:23 <np_hard> SyntaxPolice wrote a slashdot review of the Haskell SOE
16:15:51 <np_hard> pearls before swine?
16:15:52 <np_hard> :)
16:23:40 <bring> stepcut: thanks for bringing up auto_increment and default values
16:31:24 * bring needs his beauty sleep
16:45:59 <Jerub> oooh, mysql.
16:46:00 <Jerub> ;)
16:49:21 <stepcut> bring: no problem :)
16:57:29 <creature> OK, so I'm attacking an assessment, that includes the following hint: "Hint:  you can use the function "getLine :: IO String" ... provided you declare the type of the overall function." How do I declare the type of the overall function? What does that even mean? 
16:59:12 <stepcut>  Maybe it just means you should give your function a type signature?
16:59:16 <Jerub> creature: I'm guessing that means its asking you to explicitly state the type of the function you're creating.
16:59:19 <Jerub> i.e.
16:59:24 <Jerub> myfunc :: a -> IO String
16:59:26 <Jerub> or something
17:00:01 <creature> That might make sense, actually. Let me have a quick jibble...
17:01:04 <creature> Hmm. Well, the question is asking me to define a function "getInt :: IO Int", so given that that's what I have to define, I probably can't change it. 
17:02:30 <creature> It's talking about using read, by the way, when it says "provided you declare the type of the overall function". 
17:02:46 <creature> I think it wants me to tell it "stop being all polymorphic and clever, and just work on Ints". 
17:03:01 <creature> Sorry for my vague phrasings, by the way; it's late and I'm tired. :) 
17:03:29 <Jerub> thats alright
17:07:43 <creature> So what's it asking me to do? 
17:09:37 <themaximus> Nite all!
17:09:53 <anduril1> creature: I think it means you should have at some point (read input)::Int
17:10:14 <anduril1> where you got your input using getLine
17:11:33 <anduril1> that tells Haskell you want an Int, rather than any type
17:13:10 <creature> Mmm. Haskell doesn't like what I'm doing, though...
17:13:26 <creature> Cast an eyeball over this: Don't correct it for me, but point me in the right direction, please: 
17:13:36 <creature> getInt :: IO Int
17:13:37 <creature> -- Outputs a prompt ("?") then inputs an integer.
17:13:37 <creature> getInt = do putChar '?'
17:13:37 <creature>             x <- getLine
17:13:37 <creature>             (read x)::Int
17:14:07 <anduril1> that is the entire code?
17:14:15 <creature> That's what I've written.
17:15:17 <anduril1> ask yourself: "what type does the last statement have?" and then ask "what type should my function have?"
17:15:37 <anduril1> by function I mean getInt as a whole
17:16:20 <creature> Ah ha, that's the prodding I needed. 
17:16:51 <creature> Changed the last line to "return ((read x)::Int)"
17:16:55 <anduril1> exactly
17:25:22 <creature> How could I check that the user's given me an Int? What function am I looking for? 
17:35:28 <Igloo> reads
17:41:43 <creature> http://www.zvon.org/other/haskell/Outputprelude/index.html <-- Have you seen that, by the way? 
17:44:01 <creature> Any more of a hint than just "reads"? 
17:44:18 <tyler> How can I do a filter that 'breaks' after the first True
17:44:29 <tyler> basically I want to process elements of a list until I hit a true
17:47:10 <creature> tyler - I'd be inclined to do it with recursion and a couple of guards. 
17:47:18 <mattam_> takeWhile (not . (== True)) ?
17:47:19 <Igloo> case reads x of [(y, "")] -> the_answer_is y; _ -> you_lied_to_me
17:48:10 <Igloo> You might want break, tyler
17:50:31 <tyler> releveant code it at http://pastebin.com/49756
17:52:29 <creature> tyler - you can just do "is_zero x p = (x `mod` p == 0)" instead of that "then true else false". 
17:52:53 <creature> Basically, what you were saying was "if this is true, return true. If it's false, return false". Better to just say "return the value of this expression". 
17:53:05 <tyler> oh, duh, functional programming...
17:53:11 <tyler> (be gentle, I'm new to this...)
17:53:28 <creature> Well, that's just "programming". :) 
17:53:53 <tyler> hehe
17:54:12 <creature> It's like doing "if (x > 3) { return True; } else { return False; }" in something like, say, Java. You could just do "return (x > 3);".
17:54:41 <tyler> true ;)
17:55:28 <tyler> theres actually one optimization I can do that should roughly double the speed...
17:55:35 <tyler> theres really no point in checking even numbers...
18:05:05 <creature> OK, so what's the code meant to do? 
18:12:45 <creature> tyler - remembering I'm not too great at this, but you've got a call in the middle of your code to "is_zero n". is_zero takes 2 parameters in what you've pasted. 
18:21:56 <creature> Right, I'm off to bed. Night all. 
18:22:04 <creature> Cheers for the help. 
19:06:11 <LittleDa1> Haskell is good for creating DSLs, right?
19:06:55 <LittleDa1> anyone here?
19:12:33 <tyler> woohoo
19:12:48 * tyler has his prime number genertor down to 10.5 seconds for the first 5000 primes on an Athlon 950
19:12:53 * tyler doesn't consider that too shabby
19:13:01 <tyler> there are still some enhancements I could make though
19:15:27 <tyler> hrrm
19:15:32 <tyler> how to I cast a float to an int?
19:15:47 <tyler> or do a meaningful comparison of same
19:15:58 <tyler> basically I'm comparing someval > sqrt(someotherval)
19:23:27 <tyler> anyone?
19:25:18 <tyler> sqn/m
19:25:23 <tyler> fromIntegral was what I needed
19:25:31 <tyler> it wasn't the comparison that was the problem, but the sqrt!
19:25:37 <tyler> runtime now down to 6.5 seconds ;)
19:31:36 <anduril1> tyler: are you running it in hugs or ghc?
19:33:19 <tyler> ghc compiled with -O -fvia-c
19:59:34 <SyntaxLaptop> shapr: FYI, I just now fixed my X problem on anna's computer.
20:00:00 <SyntaxLaptop> busted libxrender1 package
20:22:56 <Pseudonym> http://haskell.org/hawiki/ReifiedType
20:23:03 <Pseudonym> Does that read well?
20:26:25 <np_hard> SyntaxLaptop: saw your review of the Haskell SOE on slashdot ... most comprehensive review I have ever seen on that site :)
20:30:54 <monotonom> WOAH! Functional programmers strike back?!  Lots of reviews of functional books abound on slashdot.  May I declare "Death to Perl" now? :)
20:34:17 <Pseudonym> No, you may no.
20:34:21 <Pseudonym> t
20:36:03 <Pseudonym> Not until you can kill the evil mangler, anyway.
20:38:27 <SyntaxLaptop> np_hard: thanks!
20:38:49 <SyntaxLaptop> it took me longer than I'd like to admit, actually, to write that.
20:39:12 <Pseudonym> Yeah, I noticed that when I wrote a review for /. many years ago.
20:39:18 <Pseudonym> It takes a while.
20:39:37 <SyntaxLaptop> monotonom: it was that "Purely functional data structures" review that made me want to do it.
20:39:48 <Pseudonym> I'm kinda pleased that a lot of the review is actually "yay haskell" and little to do with the book. :-)
20:40:23 <monotonom> There is "x = x + 1" in Haskell.  It is perfectly syntactically correct and has a perfectly known semantics.  It is just not what a C programmer thinks it is.
20:40:50 <mattam> it's not destructive assignment.
20:40:58 <SyntaxLaptop> Pseudonym: the editor (Timothy) really encouraged me in that direction, actually.  We exchanged a few emails before I decided to write it, and he was very much agreed that the community surrounding the book is as important as the book itself.
20:41:07 <Pseudonym> Oh, interesting.
20:41:12 <Pseudonym> I do think it's good.
20:41:42 <Pseudonym> I didn't get any feedback before my review was posted.
20:41:46 <SyntaxLaptop> monotonom: it never even occurred to me that that was legal haskell, I guess I just keep that in a completely different part of my brain.
20:42:03 <monotonom> Heh
20:42:36 <SyntaxLaptop> timothy was very engaging, replied to my emails really fast, and was a good editer.  he looked over my first draft, changed very few things, and from what I can tell, didn't change my final draft at all.
20:42:43 * Pseudonym nods
20:42:49 <Pseudonym> That's good.
23:05:09 <jdrake> have you people ever seen this book: "The Haskell School of Expression: Learning Functional Programming through Multimedia"  http://books.slashdot.org/books/04/03/12/221232.shtml?tid=126&tid=156&tid=188&tid=192
23:06:26 <ibid> of course we have
23:06:44 <jdrake> good or bad, or any critical comments about it?
23:07:10 <ibid> nice idea, but does not work for me
23:07:23 <jdrake> are you already into haskell?
23:22:00 <ibid> yes
23:22:06 <ibid> have even taught it
23:22:55 <jdrake> it got me thinking on getting a book on it, might be able to get into the language and ideology better
23:23:15 <ibid> a good idea :)
23:23:23 <jdrake> its just a matter of which one
23:23:29 <jdrake> and what recommendations are
23:24:05 <ibid> soe might work for you, i can't tell :)
23:24:19 <ibid> i prefer thompson myself
23:25:31 <jdrake> Haskell
23:25:32 <jdrake> The Craft of Functional Programming
23:25:32 <jdrake> Second Edition
23:25:33 <jdrake> that one
23:26:17 <ibid> yeah
23:26:35 <jdrake> why does the chapters website have to be down now of all times
23:26:55 <ibid> i originally learned this stuff from bird, which is another excellent book
23:28:35 <jdrake> so would you recommend thompson or bird first
23:28:47 <ibid> not exactly
23:28:58 <ibid> those were based on how i perfer them
23:29:07 <ibid> you may prefer other books, i can't tell
23:29:10 <jdrake> bird it out of the question, it costs way too much
23:30:44 <ibid> i got it from the library originally
23:31:40 <jdrake> hmm, i should look there come to think of it
23:33:13 <jdrake> they are blank
23:33:29 <jdrake> it only finds a few books and they are all either fiction or facts with haskell authors
23:34:57 <jdrake> i don't know who picks our library system's programming books, but they are extremely old most of thme
23:35:28 <ibid> check if they have the first edition of bird; it was not in haskell, but apart from the fact that you can't run the examples in hugs, it's quite readable
23:37:18 <jdrake> our library is literally hopeless
23:41:31 <jdrake> has anyone ever made any online book worthy things on this topic?
23:42:26 <ibid> if you have any background in fp, the gentle introduction is good
23:42:44 <ibid> look in www.haskell.org for a list of online resources
23:44:56 <jdrake> ibid, i have only really tried ocaml for a short time, nothing really into it
