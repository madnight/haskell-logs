00:10:36 * shapr blinks
00:10:42 <shapr> good morning #haskell!
00:21:02 <shapr> _rubix_hh_: is that your happy hacker nickname?
00:34:49 <shapr> greetings Si\ 
00:35:46 <Si\> hello, sorry about my Java mini rant yesterday
00:35:55 <shapr> no worries, I enjoyed it.
00:36:59 <shapr> I used to have a full-time job writing Java for Nokia phones
00:37:07 <shapr> it sucked
00:37:09 <Si\> I guess I just find the system of mutators irritating
00:37:34 <Si\> or getters and setters, as you will
00:38:25 <shapr> I did end up with a neat screenshot: http://www.scannedinavian.org/~shae/nokia-emu-jython.png
00:38:39 <shapr> that's Jython running on the Nokia 9210 emulator (on a finnish windows too)
00:38:42 <Si\> mind you I'm using Java in 2 projects at the moment and it is the flagship language of my Uni, so I gotta like it
00:39:41 <Si\> Jython; that python in Java or something
00:39:43 <shapr> yup
00:40:18 <shapr> I hope I never have to write Java again, but I'll probably give in to the lure of food and hardware and take a Java contract job that pays well.
00:40:31 <Si\> I've never really used Python, but the website says you can do simple fp in it
00:40:37 <shapr> yah, you can
00:40:59 <Si\> (btw. I'm Si\ becase both Si and Simon are registered)
00:41:03 <shapr> >>> map(lambda x:x+1,[1,2,3])
00:41:03 <shapr> [2, 3, 4]
00:41:09 <shapr> ah, I see
00:41:45 <shapr> gruß gott ecraven (isn't that an expression used in Austria?)
00:42:24 <ecraven> yea :)
00:44:46 <Si\> anyways, I got my last two Java E-Commerce lectures coming, up so cu all l8r
00:44:55 <shapr> have fun
00:44:58 * shapr grins evilly
00:45:25 <Si\> one day I'm gonna lecture Haskell ECommerce
00:45:29 <shapr> yay!
00:45:31 <Si\> one day...
00:45:35 <shapr> I'll show up, too
00:46:11 <Si\> it should be reasonably possible soon, a lot of the components are there, they just need fitting together and having security added
00:49:06 <shapr> speaking of java and suckage, the irate client runs like molasses on my box
01:29:15 <Lunar^> Hi
01:31:46 <shapr> bonjour
01:34:17 <Lunar^> It's hard to concentrate for me since monday :(
01:48:42 <liiwi> afternoong
02:01:57 <andersca> BOOM
02:02:01 <Marvin--> ...
02:03:43 * phubuh ducks
02:20:17 <bring> shapr: thanks för your email about HTTP, I have already done more or less what you suggested, but I forgot to send the mail about it to haskell@haskell, just replied to Graham
02:20:30 <bring> sent a copy to the mailing list now
02:27:07 <shapr> hi mackstann 
02:27:11 <shapr> looking for Haskell info?
02:29:10 <mackstann> just poking around
02:29:42 <mackstann> haven't sat down and started learning any haskell yet
02:29:48 * Jerub pokes shapr.
02:29:54 * shapr pokes Jerub 
02:30:34 * phubuh thinks the slashdotting helped (-:
02:30:45 <shapr> I gotta go do some paying Python work, I'll be back for my Haskell fix later.
02:34:32 <Jerub> okay, how do I fire up a haskel HTTP server?
08:55:17 <Lunar^> Isaac made a nice review of HSOE on Slashdot
08:55:40 <Igloo> Bah, looks like citeseer is dead again
08:57:00 <keverets> .com or .ist.psu.edu?
08:57:08 <keverets> or .nj.nec.com, I guess.
08:59:00 <Igloo> .ist.psu.edu
08:59:22 <Igloo> (and .nj, but I thought that was just dead)
08:59:56 <Igloo> .com doesn't want to talk to my either, though
09:16:54 <jdrake> has anyone ever had this while linking hugs? ld: Undefined symbols:
09:16:55 <jdrake> _doubleFromParts
09:16:55 <jdrake> _part1Double
09:16:55 <jdrake> _part2Double
09:32:27 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","deb http://www.syntaxpolice.org/haskell-experimental unstable/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","citeseer now @ http://citeseer.ist.psu.edu/","<shapr> no, I am NOT a bot!","lambdabot 2.0 released","related channels #darcs #haskell.se"]'
09:32:27 --- topic: set by shapr on [Mon Mar 15 02:35:22 2004]
10:11:04 * liiwi summons shapr
10:22:45 <SyntaxNinja> Lunar^: thanks :)
10:35:48 <Lunar^> SyntaxNinja: about what ?
10:59:08 <Lunar^> ./Data/FA/NFA.hs: file name does not match module name `Data.FA.NFA'
10:59:09 <Lunar^> *sigh*
10:59:50 <Lunar^> unterminated comment...
11:04:02 <SyntaxNinja> (11:55:17) Lunar^: Isaac made a nice review of HSOE on Slashdot
11:04:11 <Lunar^> uh ok
11:06:58 <Lunar^> Damn
11:07:26 <Lunar^> Why does every Haskell FA lib I found is RegExp oriented ?!
11:08:06 <stepcut> FA?
11:08:17 <ibid> it's their most common application? :)
11:08:20 <ibid> stepcut: finite automata
11:08:38 <Lunar^> ibid: I'm working on hOp's keyboard driver
11:09:03 <ibid> hOp?
11:09:03 <Lunar^> ibid: I'd like to convert keyboard scancodes into a key representation
11:09:21 <Lunar^> ibid: http://www.macs.hw.ac.uk/~sebc/hOp/
11:10:10 <ibid> neat
11:21:35 <stepcut> Lunar^: make sure I can easily added dvorak support or I won't use it ;)
11:22:14 <Lunar^> stepcut: I'm not thinking about keymap right now, just transforming scancode into keyus
11:22:17 <Lunar^> -u
11:22:55 <stepcut> ok
12:27:01 <SyntaxNinja> -Wall rules
15:29:42 <rubix> -Wall rules, but compiling happy-generated parsers with it doesn't
16:41:57 <LittleDa1> Are there any methods of allowing for i/o in a referentially transparent language besides uniqueness types and monads?
16:42:57 <LittleDa1> anyone here?
16:43:12 <Riastradh> There are people present here.
16:43:28 <LittleDa1> do you know the answer to my question?
16:43:44 <Riastradh> No.
16:45:21 <LittleDa1> What if you declared certain functions to be strict and opaque and said that those functions can call transparent functions but not the other way around
16:45:47 <LittleDa1> would that work?
16:45:58 <Riastradh> That's essentially uniqueness typing.
16:46:13 <LittleDa1> oh
16:46:38 <LittleDa1> I thought uniquness typing was another way of passing around a World value (like IO monads)
16:46:42 <ayrnieu> little - why do you care?
16:47:16 <Riastradh> No.  Uniqueness typing says 'when I pass this parameter, I don't ever use it again, so it's safe to do whatever the hell you like with it -- side-effect it as you like --.'
16:47:17 <LittleDa1> I'm trying to design a language, and IO monads seem cumbersome
16:48:02 <LittleDa1> How is that the same as what I said?
16:49:21 <Riastradh> With uniqueness typing, you're saying 'it's OK to side-effect this value'; with yours, it's 'it's OK to call this in a referentially opaque manner,' which is _in_effect_ the same as uniqueness typing.
16:49:56 <Cale> IO monads are nice.
16:49:59 <LittleDa1> so it's the same one-way use thing with uniquness typing?
16:50:03 <Riastradh> Yes.
16:50:52 <LittleDa1> Cale: I admit, they are cool mathematically
16:52:18 <Cale> They let you treat IO actions as values, which is often really convenient.
16:52:41 <LittleDa1> what do you mean?
16:53:18 <Riastradh> That part can be convenient, but the necessity of infecting _any_ code that involves IO with the IO monad is certainly inconvenient.
16:53:29 <LittleDa1> Yeah
16:53:45 <LittleDa1> But now that I think about it, what I'm thinking about would have the same problem
16:53:58 <Riastradh> Why not just allow for referentially opaque functions?
16:54:25 <Riastradh> Trying to fake yourself into thinking you're purely functional, and just making writing imperative code _clumsy_ but still _there_, isn't very useful.
16:54:25 <Cale> Usually I find that you can factor most of the pure stuff out. If it involves IO, then it deserves to be in the IO monad.
16:55:05 <LittleDa1> Riastradh: That's basically what I'm doing, except with the limitation that transparent functions can't call opaque ones
16:55:08 <Riastradh> Cale, so _ANY_ code that contains debugging messages should be infected by the IO monad?
16:55:20 <LittleDa1> Riastradh: Because otherwise it wouldn't really be transparent
16:55:46 <Riastradh> Or if you want something as simple as a random number all of the code that handles it should be monadified IOally?
16:56:11 <Riastradh> LittleDa1, why do you need language support for that?  It's inherent that referentially transparent functions cannot call referentially opaque functions.
16:56:18 <Cale> Write the pure function such that it takes a random number as input.
16:56:49 <LittleDa1> Riastradh: It's not really language support, it's more like compile-time checking
16:56:54 <Cale> You're going to have to write something in the IO monad eventually (main) and it can pass a random number in.
16:57:11 <Riastradh> Cale, really, it's not that simple if you, for instance, want arbitrarily many random numbers, their count depending on the input.
16:57:42 <LittleDa1> Riastradh: But then, I think you could still use lazy evaluation
16:57:50 <LittleDa1> Riastradh: Take a stream of random numbers
16:58:07 <Riastradh> LittleDa1, that stream has to be infected with the IO monad still.
17:02:04 <LittleDa1> In response to what you said above about being purely functional, I'm not trying to be purely functional, just allow for lazy evaluation, and that requires a certain degree of referential transparency
17:04:12 <Cale> main = do
17:04:12 <Cale> 	g <- getStdGen
17:04:12 <Cale> 	print (myfunc (randoms g)::[Int])
17:04:16 <Cale> won't that work?
17:04:36 <Cale> supposing that myfunc returns something printable?
17:05:38 <LittleDa1> what's not printable?
17:06:20 <Cale> anything not in Show
17:07:10 <Cale> myfunc = map (^2) -- for example, seems to work.
17:07:24 <Cale> and map (^2) is certainly a pure function.
17:09:22 <Riastradh> What does randoms do?
17:10:11 <anduril1> I believe it creates a stream of random somethings
17:10:17 <anduril1> with that code, they'll be ints
17:10:40 <Riastradh> That stream doesn't depend on keeping IO state?
17:11:23 <Cale> the IO state is still up in the IO monad where you get the standard generator
17:11:51 <Riastradh> But advancing the generator doesn't modify the state?
17:12:28 <Cale> calling randoms there uses the generator to get an infinite stream of random numbers, which you can then pass into the pure function.
17:12:41 <Igloo> IIRC it relies on split, which takes a random generator and gives you two random generators. But there's no attempt to have split work well
17:12:55 <Igloo> s/random/pseudo random/g
17:13:38 <Riastradh> Since it can't create infinity random numbers at once, it must then keep state between each iteration to generate the stream; either it keeps its own state and doesn't modify the other one, or it's magic.
17:14:01 <Riastradh> In the former case, you couldn't use the generator again usefully, because you'd get the same sequence of random numbers.
17:16:07 <Cale> Well, the sequence of random numbers that's passed in is in some sense fixed.
17:16:12 <Igloo> That's why you need split...
17:17:43 <Cale> take 10 (randoms g)::[Int] -- will return the same list of ints for the same g.
17:27:01 <LittleDa1> Which module is randoms in?
17:27:50 <Cale> Random
19:20:04 <reltuk> would a program which has a lot of state which mutates over time be poorly suited to purely functional programming?
19:20:16 <reltuk> I'm trying to imagine what something like a MUD would look like in haskell
19:20:57 <Igloo> As a general answer, state monads should work nicely
19:21:29 * Igloo sleepeth
19:21:51 <reltuk> right, but is it well suited if updating the state is going to be such a large part of the program...
19:23:34 <skew> it could be
19:24:06 <skew> monadic actions being first class values can be usefl
19:24:31 <monotonom> The two Euclidean algorithms are usually taught in an imperative programming course.  It is full of changing states anyway.  But because a lot of state changes take the form "swap x and y", it actually looks hairy in an imperative programming language.
19:25:36 <monotonom> Now please see the bottom of http://www.cs.utoronto.ca/~trebla/calculator.lhs  for a succint state-changing functional implementation.
19:25:58 <skew> I doubt that sort of thing would work for a mud
19:26:34 <monotonom> Moral: if your state updates involves a lot of swapping and mutual cross-referencing, it is a no-brainer in a functional language.
19:28:04 <monotonom> "Haskell is the finest imperative programming language"  Simon Peyton-Jones.
19:30:14 <keverets> "Haskell is the least broken programming language today" -- Havoc Pennington
19:30:36 <keverets> grr... "available today"
19:33:07 <reltuk> are these people that I should know?
19:33:20 <keverets> I'd say yes.
19:33:55 <keverets> SPJ is very influential in the Haskell community, and Havoc Pennington lives in the GNOME/freedesktop.org/Red Hat communities.
19:34:34 <reltuk> ahhh ok
19:37:58 <skew> odd, is google down?
19:39:17 <Lemmih> skew: nope.
19:41:13 <skew> okay, must be my nameserver
21:14:03 <reltuk> infix functions in haskell seem cool
21:14:18 <skew> I really like the operator definition
21:14:31 <skew> arguable precedence should be specified with a partial order, but that's no big deal
21:15:25 <reltuk> hmm...don't know about arguable precedence yet...I know you can specify associativity
21:15:34 <skew> I mean arguably
21:15:49 <reltuk> will it warn you if a phrase is ambiguous?  are all infix operators the same precendence?
21:15:52 <skew> a fixed set of numeric precedence levels is a bit clunky sometimes
21:16:14 <reltuk> oh, fixed set of numeric levels
21:16:44 <skew> it could be nice to say "tighter than +, looser than *", or something like that
21:17:23 <skew> the backticks are pretty nice too
21:18:01 <skew> hmm, just giving a partial order would probably disallow you from mixing operators defined by separate packages without using parentheses
21:18:49 <reltuk> it's pretty cool...reminds me a bit of maude
21:18:58 <skew> maude?
21:19:12 <reltuk> http://maude.cs.uiuc.edu
21:23:55 <Pseudonym> Prolog does this too.
21:24:29 <reltuk> I don't know prolog...not that I know maude or haskell either
21:24:50 <Pseudonym> Prolog basically uses an operator precedence parser for the whole language,
21:24:54 <skew> mixfix operators could be nice, but it would probably make parsing a pain
21:25:24 <reltuk> the maude parser is a pita to work with apparently...my friend is writing a version of ocaml in it as proof of concept
21:25:41 <reltuk> is prolog useful for anything?
21:26:14 <skew> writing an ocaml version in the maude parser?
21:26:50 <reltuk> yeah...
21:27:09 <reltuk> it's pretty cool actually
21:27:15 <skew> how does that work?
21:27:48 <skew> I could see writing a little language for primitive recursive functions in the Haskell typeclass system
21:27:55 <reltuk> well, he reduces ocaml expressions to expressions which represent a virutal computer with instructions and memory
21:28:08 <skew> how does he get values out from just parsing something?
21:28:14 <reltuk> and then he reduces those instructions to actual values
21:28:54 <reltuk> he attaches semantic action because they reduce to machine instructions or to expressions which reduce to machine instructions
21:29:04 <reltuk> at least, that's how I understand it...I haven't seen all of his, just parts of it
21:46:57 <Pseudonym> reltuk: It depends what you mean by "useful".
21:47:03 <Pseudonym> Re: Prolog
21:47:26 <Pseudonym> Theoretically, logic programming is just as good as any other kind of declarative programming.
21:47:30 <Pseudonym> Theoretically.
21:48:14 <reltuk> heh. theoretically in theory is just as good as in practice
21:48:30 <Pseudonym> Theory and practice are the same, in theory.
21:48:35 <Pseudonym> Just not in practice.
21:48:49 <reltuk> exactly
21:49:28 <Pseudonym> The problem has turned out to be dataflow.
21:49:45 <Pseudonym> Functional languages have a much simpler dataflow than logic languages.
22:01:28 <blackdog> anyone know how to minimise the size of ghc-built executables? Even stripped, my little wxwindows program takes up 3megs, which seems a little excessive...
22:07:45 <reltuk> 2 ^ 400000 takes too long   :-p
22:08:36 <Pseudonym> reltuk: In compiled GHC or in GHCi?
22:08:39 <Pseudonym> Or hugs?
22:08:50 <reltuk> hugs...not that it takes too long...it's faster than Ruby
22:09:04 <Pseudonym> It'd be faster in compiled GHC with optimisation on.
22:09:08 <Pseudonym> It would specialise the instance.
22:09:53 <reltuk> it would compute it at compile-time?
22:10:01 <Pseudonym> No.
22:10:04 <reltuk> or just specialize the power function for huge numbers?
22:10:06 <Pseudonym> @type (^)
22:10:06 <lambdabot> (^) :: (Num a, Integral b) => a -> b -> a
22:10:15 <Pseudonym> See those two typeclasses?
22:10:19 <Pseudonym> It would specialise them.
22:10:19 <reltuk> yeah
22:10:46 <reltuk> :type 2 ^ 400000
22:10:46 <reltuk>       --->         2 ^ 400000 :: (Integral a, Num b) => b  
22:11:16 * reltuk doesn't quite know enough about type-classes
22:15:52 <Pseudonym> Oh, that is slow.
22:16:00 <Pseudonym> I can produce the factorial of 400000 in less time than that.
22:16:36 <Pseudonym> Oh.  Duh, of course.
22:16:41 <Pseudonym> All the time is spent printing it out.
22:16:54 <reltuk> yeah, it takes a while to print it...  :-p
22:17:25 <reltuk> is there a function in Prelude for factorial?
22:17:28 <Pseudonym> Prelude Test> 2 ^ 400000
22:17:31 <Pseudonym> [detail omitted]
22:17:34 <Pseudonym> (23.90 secs, -1015730860 bytes)
22:17:42 <Pseudonym> And on the other hand...
22:17:44 <Pseudonym> Prelude Test> 2 ^ 400000 `seq` ()
22:17:45 <Pseudonym> ()
22:17:45 <Pseudonym> (0.12 secs, 5703188 bytes)
22:17:52 <reltuk> hehe
22:18:14 <Pseudonym> No, there isn't.  Factorial is actually an undergrad problem.
22:18:17 <reltuk> how do you get time and memory consumption?
22:18:26 <Pseudonym> In GHCi, I used :set +s
22:18:33 <Cale> factorial n = product [1..n]
22:18:33 <Pseudonym> I didn't use hugs. :_)
22:18:34 <Cale> :)
22:18:38 <reltuk> lol
22:18:47 <Pseudonym> I used a fast factorial.
22:19:37 <Pseudonym> To compute n!, you multiply product [1..n `div`2] and product [n `div` 2+1..n]
22:19:38 <reltuk> wow...2^ 400000 `seq` () actually took a bit of time on hugs
22:19:52 <Pseudonym> Yeah, I made sure it was compiled.
22:20:07 <Pseudonym> See, multiplication of large integers isn't an O(1) operation.
22:20:34 <anduril1> does && evaluate both arguments if the first one is false?
22:20:40 <Pseudonym> No.
22:21:02 <Pseudonym> @eval let bottom = bottom in False && bottom
22:21:02 <lambdabot> (line 1, column 12):
22:21:02 <lambdabot> unexpected "="
22:21:02 <lambdabot> expecting var, "head", "tail", "null", bool, num, character, "[", string
22:21:02 <lambdabot>  "(", operator, simple term or end of input
22:21:05 <Pseudonym> Ah.
22:21:40 <Pseudonym> Similarly, (||) short-circuits if the first argument is true.
22:23:38 <reltuk> how big can a Num get?
22:23:53 <anduril1> Integer has no limit
22:23:53 <Pseudonym> As big as the address space, in theory.
22:23:58 <Pseudonym> If you mena Integer.
22:24:25 <reltuk> well, I tried to make factorial 400000, but I got back 1.#INF
22:25:01 <Pseudonym> Sounds like you used Double or something.
22:25:30 <anduril1> did you write a type signature for factorial?
22:25:53 <reltuk> I didn't even write a factorial function...I just typed in  product [1..400000/2] * product [(400000/2)+1..400000] ...I'm pretty dumb
22:26:03 <anduril1> something like "factorial :: Integer -> Integer" will force infinite precision
22:26:19 <Pseudonym> Ah, your problem was using / instead of `div`.
22:26:22 <Pseudonym> @type (/)
22:26:22 <lambdabot> (/) :: Fractional a => a -> a -> a
22:26:25 <Pseudonym> @type div
22:26:26 <lambdabot> div :: Integral a => a -> a -> a
22:26:40 <reltuk> ahhh, ok
22:27:01 <reltuk> Why doesn't 1 / 0 give you #INF instead of _|_ then?
22:27:09 <reltuk> or 0 / 0 give you NaN...
22:27:28 <Pseudonym> That's the semantics of IEEE 754 arithmetic.
22:27:44 <Cale> Prelude> 1/0
22:27:44 <Cale> Infinity
22:27:49 <anduril1> @eval 1/0
22:27:49 <lambdabot> divide by zero
22:28:00 <Pseudonym> I suppose they could turn on signalling NaNs.
22:29:20 <reltuk> ghc is much larger than hugs  :-p
22:37:35 * reltuk is offended by the factorial as undergrad problem above   :-p
22:37:48 <Pseudonym> :-)
22:38:31 <reltuk> is tail recurssion not important in haskell?
22:39:38 <skew> I think it's still pretty useful
22:39:45 <skew> although laziness might affect that a bit
22:40:14 <reltuk> is that why foldl' uses $!?
22:40:36 <skew> if you are building a data structure it's a different story, because you want the head to be availible with as little work as possible
22:40:46 <skew> tail recursive construction of an infinite list is a bad idea, for example
22:41:24 <reltuk> *shrug*, it's still faster, assuming you optimize the tailcall into a jump
22:41:46 <Pseudonym> Yes, you can get to infinity so much faster.
22:41:51 <reltuk> lol
22:42:18 <skew> well, I prefer to avoid nontermination
22:42:30 <Pseudonym> Yes, foldl' uses $! because otherwise the time taken might be misleading.
22:42:33 <skew> I don't know about the $! in foldl'.
22:42:36 <skew> where was that used?
22:42:38 <Pseudonym> Sorry, the stack space used.
22:42:49 <Pseudonym> foldl' is like foldl except the accumulator is strict.
22:43:12 <reltuk> Pseudonym, but most people use foldl, at least until the program works...you can always add a ' later....right?
22:43:22 <Pseudonym> If you use foldl to write product, for example, what it would do is build a huge expression and then evaluate it.
22:43:39 <Pseudonym> Which would use just as much stack as foldr.
22:43:55 <Pseudonym> foldl' avoids this by computing the accumulator eagerly.
22:44:01 <Pseudonym> reltuk: Right.
22:44:40 <skew> how much difference would the eager evaluator make here?
22:45:09 <Pseudonym> In stack space?  It would reduce usage from O(n) to O(1).
22:45:15 <reltuk> I love how simple Prelude is...
22:45:37 <Pseudonym> For something like reverse, on the other hand, it would make no difference.
22:46:18 <reltuk> Pseudonym, why not?
22:46:32 <skew> you are still making a list of size n
22:46:38 <reltuk> yeah...
22:46:53 <reltuk> hah, flip is a great function
22:47:02 <skew> 1:2:3:[] is about the same size as thunks for (1:) $ (2:) $ (3:) $ []
22:47:10 <Pseudonym> More to the point, (:) runs in constant stack.
22:47:22 <Pseudonym> (*) doesn't necessarily, because it's strict in both arguments.
22:49:45 <reltuk> otherwise is a function that returns True?
22:49:57 <Pseudonym> Yes.
22:50:01 <Cale> it's used in guards.
22:50:15 <reltuk> oh...
22:50:21 <Pseudonym> It's to support an idiom that dates from Miranda, I think.
22:50:23 <reltuk> so you have a list of guards, and then you use otherwise for the default case...
22:50:30 <reltuk> and it's more readable
22:50:31 <reltuk> cool
22:50:34 <Pseudonym> Personally, I suspect using True for the default case would have been cleaner.
22:50:42 <skew> True usually seems to align the cases better
22:57:13 <reltuk> what's any do?
22:57:33 <skew> any :: foldr (||) False
22:57:39 <skew> er, =
22:58:06 <reltuk> oh...was defined as     any p  =  or . map p
22:58:13 <reltuk> just looks through a list for true...
22:58:14 <skew> oh, right
22:58:23 <skew> apparently using a predicat
22:59:06 <reltuk> it's only used in one place in the entire Prelude
23:00:57 <reltuk> will the foldr short-circuit because || does?
23:01:07 <skew> yes
23:01:26 <reltuk> and it's better than most language's short-circuit because it's lazy...
23:01:29 <reltuk> very cool
23:05:21 <reltuk> admittedly, :edit in hugs is pretty nice
23:07:01 <Pseudonym> Must away.  Nytol!
23:32:20 <reltuk> hello andersca
23:32:22 <andersca> hello
