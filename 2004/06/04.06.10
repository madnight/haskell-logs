01:46:27 <Lunar^> andersca, bringert: There ?
01:47:27 <Lunar^> Ok... I'm going to wander in Chalmers again
02:01:11 <earthy> owh, it's EuroHaskell...
02:03:05 <ludde> I'm at EuroHaskell :)
02:13:24 <Lunar^> Found the way !
02:13:42 <Marvin--> :)
02:15:42 <Marvin--> iih, andersca overflow
02:16:05 <ac_laptop> better?
02:17:05 <Hyp3rion> >_< hehe happy eurohaskell *!*@*.nomad.chalmers.se
02:20:10 <Lunar^> Hyp3rion: :)
02:20:32 <bringert> Spark: you here
04:51:18 <Spark> yeah
04:51:20 <Spark> ish
05:03:38 <bringert> Spark: join us in #eurohaskell
05:04:08 <bringert> pictures deom EuroHaskell, updated continously: http://ridley.csbnet.se/gallery/eurohaskell
05:04:33 <bringert> s/deom/from/
05:20:14 <earthy> whee. shae unicycling. ;)
05:20:49 <kosmikus> jon hughes as well
05:21:25 <earthy> nice to see all those nice pictures without having one clue whatsoever as to who is on it ;)
05:21:42 <Heffalump> :-)
05:23:31 <earthy> looks like the unicycle is just a bit tall for John though...
05:24:47 <Marvin--> mm, coffee
05:24:48 <Marvin--> at last
05:25:16 <ac_laptop> yeah
05:28:33 <Heffalump> so how many people are there?
05:28:51 <ac_laptop> hmm, 
05:28:58 <Marvin--> ~15?
05:29:02 <ac_laptop> yeah
05:29:09 <ac_laptop> I got it to 16 when I counted 
05:29:39 <bringert> 15 people ordered food
05:29:51 <bringert> and 2-3 didn't order food
05:29:53 <ac_laptop> yeah, and one didn't order
05:29:54 <ac_laptop> right
05:29:59 <Marvin--> right
05:30:03 <bringert> and someone stole Lunar^'s food
05:30:12 <Marvin--> err
05:30:15 <Marvin--> how...nice
05:30:26 <ac_laptop> I think someone actually stole shapr's food
05:31:16 <Heffalump> so shapr stole Lunar^'s food to compensate? ;-)
05:31:47 <ac_laptop> something like that
05:52:28 <earthy> as long as people are kept reasonably well fed...
05:58:29 <cbus> bringert: morning
05:58:33 <cbus> just woke up :)
06:02:42 <cbus> bringert: many ppl at eurohaskell?
06:09:34 <mij> and where are the womens ?
06:14:23 <phubuh> cbus: yes, there's lots of people here!
06:14:30 * phubuh counts
06:14:44 <phubuh> at least 17
06:15:11 <SyntaxNinja> there's 84 ppl in here
06:15:23 <cbus> maybe ill come and visit :)
06:15:26 <ac_laptop> yeah, do that!
06:15:31 <phubuh> SyntaxNinja: where's here? :)
06:15:38 <SyntaxNinja> phubuh: the internet?
06:17:08 <Marvin--> there's 82 people on the internet? wow
06:17:11 <Marvin--> 84
06:21:09 <Jerub> once upon a time, that would have been possible.
06:21:20 <Jerub> a whole 84 people on the internet at once.
06:21:32 <Jerub> ... and they haven't reached that point with internet2 yet....
06:22:44 <mij> will there be haskell things at the libre software meeting in france ?
06:26:17 <SyntaxNinja> speaking of france, I just heard that they'd like to ban SUVs in Paris.  I think that's a great idea :)
06:27:01 <Jerub> yay!
06:27:11 <Jerub> death to impractical vehicles!
06:27:35 <SyntaxNinja> I like how the article called them "Designer Jeeps" too. I don't like calling htem SUV because they have nothing to do with sports or utility :)
06:27:47 <SyntaxNinja> and "designer jeep" seems somehow demeaning.
06:29:33 <Jerub> SyntaxNinja: thats fantastic.
06:29:53 <Marvin--> heh
06:30:03 <Jerub> SyntaxNinja: in .au, there are lots of people who drive four wheel drive's, and probably 10% of them are used to go four wheel driving - i.e. offroad stuff.
06:30:13 <Jerub> the rest are used to pick up kids from private schools.
06:30:45 <p00ya> yeah
06:30:51 <p00ya> where private == non-state
06:30:58 <Jerub> we don't use the term SUV here, but we also don't have the extremely-large-scale vehicles that I've heard exist in america.
06:31:22 <Jerub> like, I've seen one hummer, ever.
06:31:38 <p00ya> i saw this crazy 4wd-looking vehicle the other day
06:31:42 <p00ya> its wheels pivotted
06:31:49 <p00ya> like.. rolled
06:31:49 <SyntaxNinja> Jerub: I see hummers a few times a week.
06:31:51 <p00ya> as it turned
06:31:55 <SyntaxNinja> might be the same one over & over, though.
06:32:17 <SyntaxNinja> I live in an area where the parking lots and spaces are pretty small, as are the streets, and large vehicles just hardly fit.
06:32:19 <p00ya> where rolling == aircraft rolling axis
06:32:48 <SyntaxNinja> Jerub: I would say far fewer of 10% of such vehicles are used to go four wheel driving here, at least in the city.
06:33:29 <Jerub> interesting.
06:33:54 <Jerub> also, we have a class of vehicle we refer to as a 'ute', i.e. 2 seat cabin + tray. short for utility.
06:34:15 <Jerub> 95% of them are serious work vehicles.
06:34:42 <SyntaxNinja> we've got pickup trucks that are more often serious vehicles.
06:34:44 <Jerub> so when people say SUV I think of a big ute, which is of course completely wrong.
06:34:55 <SyntaxNinja> heh
06:38:10 <Jerub> http://xrl.us/b7rj <- aussie ute.
06:39:50 <p00ya> serious vehicles are mining trucks
06:40:40 <Jerub> p00ya: what? the ones that are larger than houses?
06:40:46 <p00ya> yeah
06:40:50 <Jerub> p00ya: heh
06:41:07 <Jerub> I've got a neighbour that drives a truck that's used to transport rocks around.
06:41:12 <Jerub> like, from quarries and stuff.
06:41:35 <p00ya> my.. aunt's husband works as a driver for a mining company
06:41:42 <p00ya> just up and out of open-cut
06:41:49 <Jerub> aunt's husband == uncle.
06:42:04 <p00ya> uncle-in-law perhaps?
06:42:07 <Jerub> nope.
06:42:09 <Jerub> just uncle.
06:42:12 <p00ya> oh ok
06:42:16 <p00ya> fair enough
06:42:30 <p00ya> uncle-in-law is less ambiguous :P
06:43:02 <Heffalump> uncle-in-law should refer to your wife or husband's uncle
06:43:11 <Heffalump> if it means anything at all
06:43:14 * earthy nods
06:43:24 * earthy thinks uncle-in-law is more amibuguous
06:43:26 <p00ya> ah
06:43:34 <earthy> ambiguous even
06:44:05 * p00ya wonders if there's a non-redundant code for expressing family relationships
06:44:15 <Jerub> p00ya: nope. it all sucks.
06:44:41 <Jerub> p00ya: you have to think about all family relation honourifics from the point of view of a child of 5.
06:45:06 <Jerub> to a child of 5, an uncle is an uncle, an aunt is an aunt.
06:45:07 <Jerub> ;)
06:45:49 * Jerub goes to bed
06:45:50 <p00ya> data Relation = Grownup Gender | Child Likeable
06:46:07 <SyntaxNinja> l8r Jerub
07:10:20 * Lunar^ have just made his first talk :)
07:10:26 <ac_laptop> hey ski
07:10:29 <ac_laptop> ski: join #eurohaskell
07:23:44 <Lukhas> NP: The Gathering - When The Sun Hits
07:23:57 <Lukhas> eek, wrong window
07:24:00 <Lukhas> sorry :)
09:13:46 <Lemmih> huh?
09:14:05 <Heffalump> he aged a lot suddenly.
09:15:17 <Marvin--> does anybody have a url to Okasaki's current homepage?
09:16:15 <shapr> Heffalump: evil strikes!
09:16:42 <Heffalump> http://www.eecs.usma.edu/Personnel/okasaki/default.htm looks up to date to me
09:17:58 <Marvin--> thanks
09:23:24 <liiwi> shapr!
09:23:42 <liiwi> err
09:23:49 <bringert> I think he just walked out the door
09:23:56 <liiwi> bluh
09:23:59 <liiwi> nevermind
09:31:40 <ski> he came back into the room now ..
09:33:26 * Igloo reads the Cabal thread before the proposal and finds myself in a sea of people's names, which appear to have some deeper meaning
09:33:49 <Marvin--> Igloo: *personas*, not *people* :-P
09:39:53 * Igloo realises I'm probably Bob the Builder - way cool!
09:40:31 <Igloo> (well, actually, I think I'm probably almost everyone else too)
09:42:32 <Marvin--> most likely
09:42:48 <Marvin--> that's the idea with personas :)
09:43:28 * Igloo lol at parts of this thread
09:43:59 <Igloo> Things like "What's the difference between your "Peter" and our Rowland, Donald, and Willie?" just amuse me for some reason
09:47:05 <Marvin--> forgive me for saying so, but this Alex guy seems a bit clueless
09:47:40 <Igloo> Is he the one who wants to ignore Marcus?
09:48:14 <Marvin--> yeah
10:01:45 * SamB thinks that haskell.org should have an index of hosted pages
10:02:02 <SamB> sites, even
10:23:44 <Marvin--> kosmikus?
10:25:11 * Marvin-- idly wonders if kosmikus will ever release lhs2tex 1.10*final*
10:30:49 <Igloo> Not until his htesis is submitted I suspect
10:31:50 <Marvin--> I was thinking that I could do something productive and upload it to unstable
10:32:50 <Igloo> If you're looking for things to do I'd love Linux PPC dynamic loader support for ghci  :-)
10:33:14 <Marvin--> I don't have a PPC, sorry :)
10:33:20 <Marvin--> (phew)
10:33:27 <Igloo> bruckner.debian.org?  :-)
10:33:35 <Igloo> Although it wasn't availble last I looked, admittedly
10:34:20 <Lunar^> Igloo: That would be cool, definitely
11:03:56 * vazio is away: (Auto-Away after 10 mins) [BX-MsgLog On]
11:14:08 <jadrian> do I have to import anything to use shows??
11:14:50 <jadrian> hmm nevermind...
11:22:08 <SamB> what is the name of the evenness or oddness of a number?
11:22:31 <Smerdyakov> Parity
11:23:30 <SamB> cool
12:28:59 <phubuh> dum de dum
12:29:13 <Lemmih> tralala
13:17:47 <wagle> is there a canonical "efficient" implementation of a spreadsheet in haskell?
13:22:16 <deejay> hi, i'm looking for some help with the haskell-emacs mode, does anyone have any advice for using the auto-indent?
13:23:03 <Heffalump> make sure it doesn't insert tabs?
13:23:18 <Heffalump> (setq indent-tabs-mode nil)
13:23:35 <deejay> ah ok that sounds good
13:23:45 * stepcut should really stop using tabs
13:23:53 <wagle> deejay: you know that hitting tab multiple times cycles through the possible places?
13:23:55 <shrimpx> they are evil
13:24:25 <deejay> wagle - i can do that... but i was wondering if i had to do that for everyline?
13:24:31 <deejay> *every line
13:25:45 <deejay> it always drops back to column 0 and i was wondering if it was ment to keep at the previous lines indent
13:25:50 <deejay> or is that not how it works?
13:25:58 <wagle> deejay: i dunno..  it doesnt bother me that much except when it refuses to indent the clauses of a case
13:26:25 <wagle> i use xemacs, not emacs, by the way
13:26:53 <shrimpx> deejay: you want autoindent?
13:26:54 <deejay> ok
13:27:07 <deejay> shrimpx: yah
13:27:13 <SyntaxNinja> fwiw: M-x untabify
13:27:20 <shrimpx> you need some other fu for that but it's probly not desirable in haskell mode, imo
13:28:00 <shrimpx> (global-set-key [(control m)] 'newline-and-indent)
13:28:44 <deejay> is that the same as C-j then
13:28:54 <shrimpx> ya
13:28:58 <stepcut> if you use ghci, this patch is useful:
13:29:02 <stepcut> diff  /home/toadx/elisp/haskell-mode-1.44/haskell-ghci.el /home/toadx/elisp/haskell-mode-1.44/haskell-ghci.el\~
13:29:03 <stepcut> 189c189
13:29:03 <stepcut> <   (setq comint-prompt-regexp  "^\\*?[A-Z][_a-zA-Z0-9]*\\( \\*?[A-Z][_a-zA-Z0-9\\.]*\\)*> ")
13:29:03 <stepcut> ---
13:29:03 <stepcut> >   (setq comint-prompt-regexp  "^\\*?[A-Z][_a-zA-Z0-9]*\\( \\*?[A-Z][_a-zA-Z0-9]*\\)*> ")
13:29:20 <stepcut> so that if you do :module + Something.Blah.Blah
13:29:39 <Heffalump> the mode is definitely buggy in many ways, but I can't give specific examples without doing some testing
13:30:00 <stepcut> it can still find the prompt (otherwise you can do things like C-c C-l)
13:30:46 <deejay> ok... i'm not quite that clever yet... still just using emacs to write code rather than interact as well
13:30:50 <deejay> :)
13:31:07 <stepcut> And I feel this patch indents case statements better:
13:31:09 <stepcut> diff  /home/toadx/elisp/haskell-mode-1.44/haskell-indent.el /home/toadx/elisp/haskell-mode-1.44/haskell-indent.el\~
13:31:09 <stepcut> 429c429
13:31:09 <stepcut> <       "\\<\\(do\\|let\\|where\\|case\\)\\>[ \t]*")
13:31:09 <stepcut> ---
13:31:09 <stepcut> >       "\\<\\(do\\|let\\|of\\|where\\)\\>[ \t]*")
13:31:10 <shrimpx> heh i find it easier to split window and run ghci in the bottom buffer
13:31:35 * Lukhas too
13:31:38 <stepcut> shrimpx: yeah, me too
13:31:49 <Lukhas> Emacs is very nice IDE, when you take the time to learn how it works
13:32:22 * shrimpx knows enough to get by
13:32:56 * stepcut adds his tweaks to the wiki
13:34:09 <deejay> ok cheers for the help... adios
14:04:24 <jesse> could someone suggest a way of doing this: http://www.pastebin.com/72681 lazily
14:05:16 <jesse> im not sure what part of that is strict
14:10:58 * esap is wondering what part is supposed to be lazy in that :-)
14:11:09 <esap> the sequence?
14:11:17 <esap> or the list of servers?
14:11:32 <jesse> the list of connected clients that serv returns
14:14:02 <esap> I'm not sure it matters that you use nmergeIO.
14:15:35 <esap> I/O is not usually done in lazy way unless you explicitly say so [unsafeInterleaveIO is a way to do that] :-)
14:17:19 <jesse> hmmm, yeah, would be nice though, like an acceptAll :: Socket -> IO [(Handle,HostName,PortNumber)]
14:18:28 <esap> And I'd say doing this kind of allocation of resources in lazy way would be pretty dangerous [what happens if you get a space leak?]
14:40:27 <jesse> well i dunno anything about allocation of resource in haskell, and dont see how it would be all that different in acceptAll than hGetContents, my code aside
16:08:22 <jadrian> hello
16:08:54 <jadrian> I got:
16:09:06 <jadrian> module Data where
16:09:10 <jadrian> data A = ...
16:09:29 <jadrian> data B = Con A | ...
16:09:35 <jadrian> and:
16:09:42 <jadrian> module Print where
16:09:51 <jadrian> instance Show A where
16:09:54 <jadrian> ...
16:09:58 <jadrian> now 
16:10:28 <jadrian> with this structure is it possible to *derive* the instance Show B ?
16:10:38 <jadrian> my guess is "no" :-/
16:11:30 <jadrian> I guess the question can simply be put has:
16:12:49 <jadrian> deriving instances must be done right after the data declaration?
16:13:04 <jadrian> or in proper english:
16:13:11 <jadrian> must deriving instances be done right after the data declaration?
16:16:59 <Igloo> Yes
16:19:56 <jadrian> thanks Igloo, thought so
16:54:56 <wagle> yay.  conway's life as streams in haskell
17:00:53 <jadrian> it would be nice to have a Show with Options
17:01:25 <Heffalump> in what way?
17:02:20 <jadrian> to do stuff like, show [HIDE_COST] t
17:02:38 <Riastradh> What's HIDE_COST?
17:02:38 <jadrian> sometimes you want to show data in more than one way
17:02:54 <jadrian> just an option
17:03:03 <jadrian> to hide a field of t for instance
17:03:29 <Riastradh> Well, if you're going to do stuff so specific that way, why do you need to use the generic show?
17:03:31 <jadrian> instead of show :: forall a. (Show a) => a -> String
17:03:36 <jadrian> you'd have:
17:03:56 <jadrian> instead of show :: forall a. (Show a) => b -> a -> String
17:04:06 <jadrian> ok not that simple
17:04:06 <Pseudonym> class Format a f | a -> f where { format :: a -> f -> String }
17:04:13 <jadrian> you'd need fun deps
17:04:27 <jadrian> Pseudonym: hmm that's what I had in mind
17:04:38 <jadrian> Pseudonym: is there available somewher?
17:04:45 <Pseudonym> Actually, I think dependent types would be more elegant here, but I don't think Haskell has them yet.
17:04:53 <Pseudonym> jadrian: No, but feel free to write it.
17:04:55 <Pseudonym> Oh!
17:04:58 <jadrian> :)
17:04:58 <Pseudonym> Actually...
17:04:58 <jadrian> k
17:05:00 <Pseudonym> Better idea.
17:05:09 <jadrian> it's easy to write...
17:05:10 <Pseudonym> Have you read the paper on implicit configuration?
17:05:17 <jadrian> ?
17:05:20 <jadrian> implicit parameters?
17:05:28 <Pseudonym> www.eecs.harvard.edu/~ccshan/prepose/prepose.pdf
17:05:39 <jadrian> let me see
17:05:47 <Pseudonym> Have a look at that.
17:06:03 <Pseudonym> Making the format an implicit configuration might be just the thing.
17:06:22 <Pseudonym> Maybe.
17:07:10 <Pseudonym> Have a read of that, and see if you think that would be more or less convenient than just using a simple typeclass.
17:08:00 <jadrian> hmm not sure if it's what I want
17:08:12 <jadrian> so the "configuration" would reflect itself on the type?
17:08:21 <Pseudonym> withFormat [Radix 16] (show 1 ++ " " ++ show 10) == "1 a"
17:09:08 <Pseudonym> The idea is that you pass the configuration (in this case, the format) as a typeclass.
17:09:44 <jadrian> not sure about that, seems overkill...
17:10:21 <Pseudonym> Well do you think it's better or worse than:
17:10:32 <Pseudonym> format [Radix 16] 1 ++ " " ++ format [Radix 16] 2
17:10:44 <Pseudonym> I guess it depends on how many things with the same radix you want to display.
17:12:47 <jadrian> I see you're point, I better read it...
17:12:59 <jadrian> s/you're/your
17:13:43 <Pseudonym> That's the nice thing about Haskell today.  The language has reached the point where there's more than one solution that works, and you have the freedom to choose which one you think is "best".
17:14:03 <jadrian> Pseudonym: I just don't know if I really care about the *best* now...
17:14:08 <Pseudonym> :-)
17:14:12 <jadrian> Pseudonym: time is an issue too ;)
17:14:16 <Pseudonym> True.
17:14:29 <Pseudonym> You might just want to use the fundep one, then.
17:14:29 <jadrian> Pseudonym: and one of the reasons why I'm working with haskell :)
17:36:38 <jadrian> Pseudonym: in fact I might simply use this,
17:36:41 <jadrian> data PairOpt opt a = opt :-: a
17:36:41 <jadrian> showOpt       :: Show (PairOpt opt a) => opt -> a -> String
17:36:41 <jadrian> showOpt opt a = show (opt :-: a)
17:36:43 <jadrian> :D
17:44:22 <stepcut> 2 days, 6 hours, 15 minutes, 40 seconds and counting...
17:44:33 <Riastradh> ...until what...?
17:44:47 <stepcut> :p
17:45:08 * stepcut wonders if anyone knows...
17:52:41 <Pseudonym> Since the ICFP contest?
17:53:23 <Riastradh> No, the ICFP contest ended longer ago than that.
17:54:12 <Pseudonym> Let's think.
17:54:17 <Pseudonym> Until the end of EuroHaskell?
17:54:25 <Riastradh> When does it end?
17:54:38 <Pseudonym> Hune 12th, Gothenburg time.
17:54:43 <Pseudonym> s/H/J
17:54:52 <Riastradh> At what time, GMT?
17:54:58 <Pseudonym> Dunno.
17:55:11 <Riastradh> OK, at what time in whatever timezone Sweden is in?
17:55:33 <sorrow> http://www.timeanddate.com ;-)
17:55:49 <Jerub> the same as everywhere else.
17:56:02 <Riastradh> What time is that?!
17:56:04 <Jerub> @080 at the moment
17:56:09 <Riastradh> YUCK!
18:15:03 <dons>  /who
18:18:53 <Heffalump> MEEE!
18:19:58 <Jerub> wtf? http://citeseer.ist.psu.edu/cs?cs=1&q=silver+bullet
18:20:06 <Jerub> surely not.
18:21:12 <Heffalump> 'tis true. There's no silver bullet.
18:23:25 <Jerub> Heffalump: ;)
18:23:35 <Jerub> 1986 IFIPS paper, can't find it.
18:24:27 <Jerub> crap, I just can't find it.
18:24:29 <Jerub> this is impossible.
18:24:50 <Jerub> http://ianwij.com/weblog/articles/Writing_Code_Is_Stupid.aspx
18:24:59 <Jerub> I was rebutting that blog entry.
18:27:15 <Heffalump> I agree with it.
18:27:40 <Heffalump> The world really seems not to have cottoned on to the fact that Intentional Programming is dead.
18:38:01 <Pseudonym> The fact that people still do it proves that it isn't dead.
18:38:19 <Heffalump> who?
18:38:36 <Pseudonym> Oh, sorry.
18:38:42 <Pseudonym> I actually just started reading the article.
18:38:47 <Pseudonym> :-)
21:16:49 <Pseudonym> Algorithm question.
21:17:00 <Pseudonym> I have a graph.
21:17:36 <Pseudonym> I have some nodes which I'm interested in.
21:18:01 <Pseudonym> And I have one other node which is a "start" node.
21:18:23 <Pseudonym> I want to find all of the nodes which lie on paths between the start node and the nodes that I'm interested in.
21:19:10 <Pseudonym> Preferrably in topologically sorted order.
21:19:18 <Pseudonym> But I can do that separately if necessary.
21:20:21 <Pseudonym> Any ideas?
21:22:08 <monotonom> Is it a directed graph?
21:22:58 <Jerub> doesn't sound too hard...
21:23:10 <Smerdyakov> Pseudonym, you can take the intersection of the set of nodes reachable from the source and the set reachable in the complement graph from any of the targets.
21:23:25 <Pseudonym> It is a directed graph.
21:23:35 <Pseudonym> Smerdyakov: Yes, I thought of that.
21:24:03 <Pseudonym> Not sure if that would be a tight bound or not, though.
21:24:27 <Smerdyakov> I think that gives you the exact answer, as I understood your problem statement.
21:24:29 <Pseudonym> Oh, the graph may be cyclic, but I don't think that detail is relevant, except for producing the final topological sort.
21:25:03 <Pseudonym> Well, there is one further detail in my precise problem which I didn't mention which would make that solution inexact.
21:25:17 <Pseudonym> But I wanted to see if there was a straightforward answer to that problem first.
21:27:04 <Pseudonym> Actually, the fact that there is only one "start" node may help things.
21:27:06 <Pseudonym> Oh!
21:27:07 <Pseudonym> Duh!
21:27:11 <Pseudonym> I know.
21:27:37 <Pseudonym> Because there's only one "start" node, all I have to do is find paths from the final nodes to the (single) start node.
21:27:41 <Pseudonym> In the complement graph.
21:27:57 <Pseudonym> That will be exact, I think.
21:28:31 <monotonom> I don't get why complement.
21:28:50 <Pseudonym> Because you're tracing paths backwards.
21:29:22 <monotonom> Don't you call that dual or something?
21:29:59 <GreyLensman> first create a graph that is the transitive closure of the first graph.  Then its intersections.
21:30:38 <Pseudonym> GreyLensman: I think that computing (and maintaining in the face of graph modifications) the transitive closure will be too expensive.
21:30:47 <Pseudonym> For this application.
21:31:43 <Pseudonym> Hmmm...
21:32:01 <Pseudonym> The extra detail is that I actually have more information about each node.
21:32:08 <GreyLensman> Well it depends on the degree of modifications.  If the graph is built first and then changes little then its worth doing the trans. closure. and caching it as its so useful.
21:32:11 <Pseudonym> Some inputs only affect some outputs.
21:32:33 <Pseudonym> And I know which.  Each node has basically a bit matrix.
21:33:18 <Pseudonym> GreyLensman: Well in this application, the graph is the central data structure, and a user will be modifying it extensively and interactively.
21:35:20 <GreyLensman> if sparse and not too big, the trans cls. calculation can still be pretty fast.  Exspecially if your using bit map graph representation.
21:36:16 <Pseudonym> It might get big, though.
21:36:46 <Pseudonym> As previously mentioned, it is the central data structure.
21:39:53 <may> yop
21:42:00 <Smerdyakov> Why are the French so weird!!
21:42:34 <maym> why do you care Smerdyakov ? ;)
21:42:42 <Pseudonym> If it's any consolation, the feeling is most likely mutual.
21:43:15 <Smerdyakov> maym, I am afraid when someone says "yop"!
21:43:25 <maym> does it mean something aggressive in some language ?
21:43:38 <Smerdyakov> It means "I'm coming to kill your dog"!
21:43:54 <Pseudonym> Actually, it's backwards slang for "poy".
21:43:58 <maym> in french, yop is a bottle yoghourt, it has nothing to do with violence ! ;)
21:44:24 <Pseudonym> I dunno, I've seen some pretty vicious yoghurt.
21:44:36 <maym> more seriously, it just means 'Hey, im there, wassup y0'
21:44:53 <maym> btw Smerdyakov I really enjoyed the paper you indicated me about system F and TAL
21:44:59 <maym> one of the best papers Ive ever read 
21:45:03 <maym> learnt me lots of things 
21:45:22 <Pseudonym> maym: Quick quetion.  Is "yoplait" really the word for yoghurt?
21:45:32 <maym> Pseudonym: no, its a mark
21:45:40 <Pseudonym> THat's what I thought.
21:45:45 <GreyLensman> I thought it was a reflection on French convictions and principles : yep + nope = yop.  :(
21:46:02 <Pseudonym> They sell it here, and I think they're trying to convince us that it's the French word for yoghurt.
21:46:15 <Pseudonym> What is the word for yoghurt, as a matter of curiosity?
21:46:31 <maym> yahourt 
21:46:48 <Pseudonym> Thanks.
21:47:37 <maym> btw by any chance, can someone translate me in english 'toute universite confondu'
21:48:20 <Pseudonym> "Any confused university"?
21:48:29 <Smerdyakov> maym, ah. I'm writing a POPL submission about TAL now. :)
21:48:30 <Pseudonym> What's the context?
21:49:29 <maym> Pseudonym: I want to say that the study in a university is the best from all, e.g. 'all university evaluated'
21:49:44 <maym> but the word 'evaluated' is not the exact one that Im looking for 
21:52:00 <Pseudonym> Hmmm.
21:52:04 <Pseudonym> Do we have an idiom for that?
21:52:43 <ozone> 'surveyed'?
21:53:16 <Pseudonym> I guess it depends how the evaluation was done.
21:53:49 <ozone> i think evaluated is fine
21:54:23 <Pseudonym> Yes, most likely.
21:59:17 <maym> ok
