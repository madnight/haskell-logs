00:46:12 * timbod is back (gone 05:29:24)
00:50:45 <Graz|HW> anyone around that could answer a question
00:52:52 <clausen> a paper I'm reading defines poly time rather strangely
00:53:36 <clausen> for input a = <a_1, ... a_k>, it defines |a| = |a_1| + ... + |a_k|
00:53:42 <clausen> what is |a_1|
00:53:48 <clausen> (input for a Turing machine)
00:54:18 <Spark> the time for a sequence of operations is the sum of the time of each operation?
00:54:32 <Spark> oh no, input tokens
00:57:38 <Graz|HW> i hate to bother you all, but im trying to figure something out in haskell, im rather a beginner at it
00:58:46 <Spark> hmm i need to start learning
00:58:48 <Graz|HW> but is there a way to have something evaluate to its actual result before being passed, such that if i have say z = 100 / 2, that results in 50, but for some reason hugs thinks its a RealFrac, but I need it to be an Integer
01:01:21 <clausen> Graz|HW: use 100 `div` 2
01:03:09 <Graz|HW> sweet
01:03:16 <Graz|HW> why does that work over 100 / 2?
01:03:30 <Graz|HW> is it specifically for interger math so it doesn't result in a different type?
01:03:55 <clausen> Graz|HW: it rounds down
01:04:03 <clausen> Graz|HW: in hugs, type:
01:04:07 <clausen> :t `div`
01:04:09 <clausen> and
01:04:10 <clausen> :t /
01:04:24 <clausen> :t div
01:04:25 <clausen> oops
01:04:31 <clausen> hugs doesn't support :t /
01:04:31 <clausen> odd
01:04:44 <clausen> :t (/)
01:04:45 <clausen> works
01:05:45 <Graz|HW> huh, thats pretty cool
01:05:52 <Graz|HW> i'll have to research that more
01:24:13 <Graz|HW> hrm
02:36:22 * timbod is away: I'm busy
02:49:47 <p00ya> how do i define a bounded type that's a subset of (say) Int?
03:03:27 <Lunar^> p00ya: like a type for naturals ?
03:03:52 <p00ya> well, for example, if i wanted a type for bits
03:04:04 <p00ya> eg values of 0 or 1
03:04:11 <p00ya> and i didn't want to use Bool, or Data.Bits
03:05:04 <p00ya> Data.Bits only really gives bitwise operations on integers anyway
03:05:47 <Lunar^> ?
03:06:02 <Lunar^> data Bit = Zero | One
03:06:20 <Lunar^> That's isomorphic to Bool
03:06:39 <p00ya> so i'd have to write intance operations from Int -> Bit and viceversa?
03:07:26 <Lunar^> instance ?
03:07:46 <ibid> there is no automatic subrange type in the pascal style but you could fake one by saying newtype MySubrange = MySubrange Int and then defining instances of appropriate type classes
03:08:02 <p00ya> ah, thanks ibid
03:08:45 <ibid> for small subranges, using Lunar^'s idea is probably more efficient
03:09:02 <ibid> but yes, you need to write the instance declarations yourself
03:09:04 <p00ya> well, i want it for bits
03:10:32 <p00ya> so what would be all the instance declarations that i'd have to write to get Int and Bit conversions working?
03:12:27 <p00ya> like, could i make Bit part of the Num class?
03:12:31 <ibid> p00ya: Integral probably
03:12:41 <p00ya> okay
03:12:49 <ibid> you could, and you should if you want to use + and - and stuff :)
03:14:24 <ibid> i'd also define Bounded :)
03:14:55 <ibid> of course, you have to realize that haskell does not do implicit type conversions
03:15:15 <ibid> (except for numeric literals in a certain sense)
03:15:29 <p00ya> so i'd have to do
03:15:35 <p00ya> fromIntegral :: Bit -> Integral?
03:15:37 <p00ya> er
03:15:45 <p00ya> fromIntegral :: Integral a => Bit -> a
03:16:07 <p00ya> toIntegral
03:16:28 <ibid> something like that
03:23:52 <p00ya> so would the actual declaration be  "data Bit = Zero | One deriving (Ord, Eq, Integral, Bounded)"
03:24:06 -travis(carree@CPE-203-45-23-63.vic.bigpond.net.au)-  TERROR IN USA AGAIN! 15 MINUTES AGO BIG BOMB SOUND HEARD IN CHICAGO, USA.. ACCORDING TO FIRST APPEAR MORE THAN 500 DEAD, 2500 INJURED PEOPLE! FOR MORE INFORMATION AND FIRST PHOTOS ABOUT TERROR EVENT VISIT THAT NEWS PORTAL =====> WWW.DALNETBULTENI.COM <=====
03:24:07 -travis(carree@CPE-203-45-23-63.vic.bigpond.net.au)-  TERROR IN USA AGAIN! 15 MINUTES AGO BIG BOMB SOUND HEARD IN CHICAGO, USA.. ACCORDING TO FIRST APPEAR MORE THAN 500 DEAD, 2500 INJURED PEOPLE! FOR MORE INFORMATION AND FIRST PHOTOS ABOUT TERROR EVENT VISIT THAT NEWS PORTAL =====> WWW.DALNETBULTENI.COM <=====
03:24:11 -travis(carree@CPE-203-45-23-63.vic.bigpond.net.au)-  TERROR IN USA AGAIN! 15 MINUTES AGO BIG BOMB SOUND HEARD IN CHICAGO, USA.. ACCORDING TO FIRST APPEAR MORE THAN 500 DEAD, 2500 INJURED PEOPLE! FOR MORE INFORMATION AND FIRST PHOTOS ABOUT TERROR EVENT VISIT THAT NEWS PORTAL =====> WWW.DALNETBULTENI.COM <=====
03:24:50 <vegai> oh for christ's sake
03:25:31 <Lukhas> same message on #emacs few minutes ago
03:25:40 <clausen> and on #math
03:28:34 <neologism> I cannot see the webpage
03:28:39 <neologism> is the news confirmed?
03:28:48 <Lukhas> neologism: of course not
03:28:48 <p00ya> it's certainly not on cnn
03:29:04 <neologism> is this was a hoax?
03:29:05 <Lukhas> that's not the first time those guys make this
03:29:08 <neologism> oh
03:29:37 <ibid> p00ya: not sure you can derive all of them
03:29:44 <p00ya> oh of course
03:29:48 <ibid> p00ya: and even if you could, it may not be what you expect
03:30:00 <p00ya> Ord and Bounded though?
03:30:13 <ibid> yeah, i'd say
03:30:13 <neologism> shit, I was quite scared... ;)
06:04:17 <Spark> right, lets learn haskell then
06:05:33 <Jerub> yay!
06:05:36 <Jerub> learning haskell good.
06:05:44 <vegai> eehh do we have to?
06:06:06 <Spark> yes
06:07:05 <Spark> what file extension do haskell files have?
06:07:08 <Spark> .hl is it?
06:07:31 <Spark> (i got stuck after type "vim helloworld."
06:08:58 <Jerub> .hs
06:09:08 <Jerub> or .lhs, which is the 'literate' form of haskell source.
06:09:27 <Jerub> Spark: and you don't want to do hello world in haskell, thats a non-trivial application
06:09:39 <Jerub> Spark: learning things like a quicksort in haskell is actually easier ;)
06:10:06 <Spark> isnt helloworld just "main = print "hello world";" or something? :)
06:11:07 <Spark> haha
06:11:07 <Spark> spark@stealth:~$ ./a.out 
06:11:07 <Spark> "hello world\n"
06:11:09 <Jerub> Spark: yes, but what is its type signature.
06:11:20 <p00ya> IO ;)
06:13:22 <Spark> ok so how would i demonstrate something simple like "fun f 0 = 0 | f x = x + f(x-1);" working, and what *is* that in haskell? :)
06:14:00 <Spark> dont worry i will read up, but i need a kick start so i can try out stuff
06:14:45 <Jerub> Spark: 'fun' takes 2 args, a function and a number.
06:15:24 <Jerub> Spark: it adds 'x' and 'f(x-1)' and returns the result.
06:15:34 <Jerub> unless the number is zero, in which case it returns zero.
06:16:00 <Spark> ah so the syntax is a bit tighter than SML then
06:16:14 <Jerub> type signature would probably look like fun :: (Number -> Number) -> Number -> Number
06:17:08 <phubuh> if that's SML, the corresponding haskell is
06:17:09 <phubuh> f 0 = 0
06:17:17 <phubuh> f x = f + f (x - 1)
06:17:25 <Spark> what if its all on one line?
06:17:31 <Spark> is it seperated by a |
06:18:03 <phubuh> dunno if you can put it on one line without using an explicit case/if statement
06:18:09 <Spark> hm
06:18:28 <p00ya> Spark: do you have a textbook?
06:18:32 <Spark> can i feed stuff like those 2 lines into ghci then, and test evaluating it with different parameters?
06:18:43 <p00ya> http://undergraduate.csse.uwa.edu.au/units/230.123/
06:18:55 <p00ya> you can go through our lectures (and lecture notes)
06:19:00 <phubuh> nope.  ghci dislikes definitions unless they're on one line
06:19:02 <p00ya> tertiary education, free of charge!
06:19:17 <Spark> ah so you cant really do pattern matching in ghci? :(
06:19:54 <vegai> ; is often the same as a newline
06:20:04 <vegai> or always?
06:21:26 <vegai> and phubuh's second line should be f x = x + f (x-1)
06:22:08 <Spark> Prelude> f 0 = 0 ; f x = x + f(x-1)
06:22:08 <Spark> <interactive>:1: parse error on input `='
06:22:17 <Spark> should it say "Prelude>" :)
06:22:18 <vegai> let f 0...
06:22:23 <phubuh> oh yeah, duh :)
06:22:23 <Spark> ah you need to put let in
06:23:13 <phubuh> whoa, and i've been using case explicitly all this time
06:23:18 * phubuh auto-slaps
06:23:30 <vegai> Spark: but you will want to put your test code in a file 
06:23:38 <vegai> and load it in ghci
06:23:45 <Spark> ah is that how its supposed to be done
06:23:58 <Spark> ah yeah i remember, its more of a debugger than an interactive environment
06:26:04 <vegai> actually, I think it's a do statement
06:26:17 <vegai> but you don't need to know that yet
06:27:43 <Spark> :o
06:31:41 <Spark> where would i find a reference of library functions?
06:31:52 <clausen> Prelude.hs
06:33:27 <Spark> :|
06:33:49 <phubuh> i like http://www.zvon.org/other/haskell/Outputglobal/index.html
07:12:42 <Hyp3rion> Spark - http://haskell.org/ghc/docs/latest/html/libraries/index.html
09:01:45 * timbod is back (gone 06:25:25)
09:01:50 * timbod is away: I'm busy
11:28:52 * timbod is back (gone 02:27:03)
13:02:02 <Lemmih> Are there any programs written with the new HOpenGL API?
14:39:52 <SyntaxLaptop> SamB: so... python programmer, 'eh?
14:40:10 <Lunar^> Internet is amazing sometimes
14:40:39 <Lunar^> I know exactly the time of each transport I take tomorrow from my house to the student house for EuroPython/EuroHaskell
14:41:30 <SyntaxLaptop> man... when I was in England, I got train information from the internet for sunday travel that was ALL WRONG.  the guy at the station told me that I needed to check at the station on sunday because they don't really know the schedules in advance.
14:46:54 <cbus> when does eurohaskell start?
14:47:06 <cbus> working during the week :(
14:47:11 <cbus> (nightshift=
14:55:38 <SamB> SyntaxLaptop: yup
15:02:22 <SyntaxLaptop> SamB: one of my long-term goals is to improve haskell's sysadmin-type functionality; that's one reason I'm interested in libraries like ZipFile.
15:02:42 <Lunar^> HsDpkg :)
15:02:43 <SyntaxLaptop> SamB: though there may already be a haskell version out there somewhere.
15:03:03 <SyntaxLaptop> Lunar^: I mean improve the libraries so they can do more of the stuff that you use python and perl for now.
15:03:19 <SyntaxLaptop> new LIP code available now, btw.
15:04:58 <SyntaxLaptop> http://www.haskell.org/libraryInfrastructure/code.html
15:11:03 <sm-away> cool
15:19:25 <SyntaxLaptop> OK. it's called the Haskell Cabal now.
15:19:27 * SyntaxLaptop goes away &
17:09:00 * timbod is away: I'm busy
20:24:30 <blackdog> anyone know how to do curses in Haskell? (I really just want to clear the screen...)
20:24:51 <Cale> you could use ffi
20:25:54 <blackdog> never actually used the ffi before - is it hard?
20:26:00 <Cale> not really
20:26:06 <Cale> It's actually quite nice
20:27:29 <Cale> let me see if I can get a clear screen working :)
20:28:17 <blackdog> Cheers - that'd be very instructive.
20:29:52 <Cale> hmm.. is there something I should know about using curses correctly?
20:30:20 <Cale> I should probably call initscr
20:31:15 <blackdog> I really don't know...
20:35:00 <Cale> heh
20:35:17 <Cale> I can clear the screen, but it messes up the terminal settings
20:35:24 <Cale> I don't know how to use curses though
20:35:37 <Cale> foreign import ccall "static curses.h" initscr :: IO (Ptr ())
20:35:37 <Cale> foreign import ccall "static curses.h" clear :: IO Int 
20:35:37 <Cale> foreign import ccall "static curses.h" refresh :: IO Int 
20:35:37 <Cale> foreign import ccall "static curses.h" endwin :: IO Int
20:35:47 <Cale> those might be useful lines for you though
20:37:49 <Cale> I think that you have to do all your printing in curses mode, and then it will put everything back as it was when it's done.
21:10:37 <blackdog> Hm. Cheers, i'll have a play with it...
21:16:47 <Cale> anyway - pick up the ffi documentation from http://www.cse.unsw.edu.au/~chak/haskell/ffi/
21:17:33 <Cale> And there's a good chunk of example code at http://vx.hn.org/haskefl/Imlib2.hs
21:17:37 <Cale> :)
23:51:11 <Jerub> gnnnrr
23:51:28 <Jerub> I think I missed out on a job in a bioinformatics company because I didn't know about it.
