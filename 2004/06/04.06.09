05:26:36 <Lemmih> The Glasgow Functional Programming Tools Suite cvs is broken, right?
05:36:12 <kosmikus> Lemmih: anonymous (pserver) access seems to work, at least
06:20:59 <Lemmih> Why does this happen when I try to compile the suite: "deSugar/DsMeta.hs:574:61: Not in scope: type constructor or class `TH.Guard'"?
06:28:45 <Igloo> Is your entire CVS tree up to date? Might be worth retrying from a clean tree
06:29:33 * Igloo can't see why that would happen, although I don't have a fully up-to-date tree her
06:33:47 <kosmikus> I just tried, and the compilation of the compiler works fine for me
06:34:04 <kosmikus> I'd also suspect an inconsistent tree ...
06:37:23 * Lemmih is confused...
06:38:09 <Lemmih> Is this document, http://www.haskell.org/ghc/docs/latest/html/building/sec-cvs.html, up-to-date?
06:40:49 <Lemmih> Should I checkout fpconfig or fptools? The document says fpconfig but that module doesn't exists.
07:44:54 <shaleh> so, how is eurohaskell going?
08:43:25 <Spark> hmm tickets have gone up again
08:43:43 <SyntaxNinja> @eurohaskell
08:43:43 <lambdabot> less talks, more code!
08:43:43 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
08:43:43 <lambdabot> EuroHaskell - Haskell Hackfest - June 10-12 - Gothenburg, Sweden
08:44:00 <SyntaxNinja> hm. I'd better get that todo list ready
08:44:04 <Spark> heh starts on thursday?
08:44:18 <Marvin--> yep
08:44:25 <Spark> and ends on saturday
08:44:29 <Spark> i thought it was a weekend thing
08:44:36 <Marvin--> nope
08:44:42 <Spark> i should be on a bloody plane by now then! :)
08:44:48 <Marvin--> we wanted to do it right after europython
08:45:08 <Marvin--> yes, you should be on a plane by now! I don't care whether it's bloody or not
08:45:31 <Spark> bloody would be best
08:45:38 <Spark> still
08:45:45 <Spark> hmm
08:45:53 <Spark> so when does it actually finish
08:45:58 <Spark> evening on the 10th
08:46:02 <Spark> and it starts tommorow morning
08:47:03 <bringert> finishes saturday evening
08:47:52 <bringert> there's gotta be last minute tickets
08:47:55 <bringert> somwehere
08:47:56 <Marvin--> I so don't grok this wlan problem
08:49:30 <shaleh> wlan's are like magic boxes.  Sometimes they work, sometimes they don't.
08:49:35 <shaleh> give me a cable any day.
08:52:17 <SyntaxNinja> wlan works consistently for me.
08:52:27 <SyntaxNinja> (on linux)
08:52:28 <Marvin--> I don't understand why I consistently get link quality 0 after a few minutes of networking
08:52:34 <Marvin--> even when I sit next to the AP
08:52:43 <Marvin--> after a few minutes, the link quality goes down to 0
08:52:54 <shaleh> Marvin--: directly next to the AP can be some of the worst signal
08:53:07 <shaleh> has to do with the way the antennas work
08:53:11 <Marvin--> let me put it this way, then, no matter where I bloody sit
08:53:15 <shaleh> (-:
08:53:32 <Marvin--> after a few minutes the link quality goes down to 0 and I start getting a slew of OUTOFRANGE, INRANGE, OUTOFRANGE, INRANGE, ...
08:55:14 <Spark> Price:   £394.00 per adult
08:55:18 <Spark> going well so far :)
08:55:32 <shaleh> where is eurohaskell being held?
08:55:57 <Spark> gothenburg university type thing
08:56:09 <shaleh> (for the non-Euro please)
08:57:53 <Marvin--> anybody got a darcs repo I can check out for a test?
08:58:31 <shaleh> other than haskell coolness, what advantage does darcs have over subversion?
08:59:07 <Spark> 2 out of the 3 sites i know of are down
08:59:08 <Spark> heh
08:59:14 <Spark> ryanair doesnt have anything
08:59:20 <Spark> sas and lastminute.com arent working
08:59:34 <Spark> anyone think of anything else to try?
09:00:26 <Marvin--> shaleh: completely different design, it's more fair to compare darcs and wossname...arch?
09:00:39 <shaleh> right, I am familiar with arch.
09:00:44 <eivuokko> Marvin, main darcs repo?
09:00:59 <shaleh> I guess I am trying to ask, why did you use darcs over subversion?
09:01:01 <Marvin--> eivuokko: smart!
09:01:27 <Marvin--> shaleh: I'm not trying to use it, I'm trying to test that it works, for the people who want to use it during eurohaskell
09:01:43 <shaleh> fair enough
09:01:55 <shaleh> what is the darcs home page?
09:02:15 <Marvin--> www.abridgegame.org/darcs
09:03:23 <shaleh> thanks
09:03:27 <shaleh> more code to read (-:
09:06:08 <vegai> shaleh: this is #haskell, of course we use darcs ;P
09:06:29 <SyntaxNinja> Marvin--: did you find a repo yet?
09:06:34 <shaleh> vegai: I was curious if there was a good reason, or if the haskell based source was the main reason.
09:06:35 <Marvin--> SyntaxNinja: yep
09:06:42 * Marvin-- screams in frustration over this stupid wlan thing
09:06:58 <SyntaxNinja> darcs get http://www.syntaxpolice.org/darcs_repos/library-infrastructure
09:06:59 <SyntaxNinja> :)
09:07:39 <Spark> right what is SAS's UK homepage?
09:07:57 <SyntaxNinja> shaleh: being in Haskell is probably what got it noticed, but if it were crap, no one would use it.  it's good software.
09:08:52 <Marvin--> Spark: dunno, but try sas.se?
09:09:05 <SyntaxNinja> shaleh: and I think Haskell users are more likely than others to experiment with new ways of doing things (darcs version control model is very different from CVS)
09:09:14 * edwinb looks at darcs
09:09:16 <shaleh> SyntaxNinja: fair enough.
09:09:20 <Spark> 404 :|
09:09:28 <SyntaxNinja> shaleh: also distributred version control is way cooler than svn.
09:09:29 * shaleh pokes around at the source code.
09:09:50 <shaleh> SyntaxNinja: I have had mixed results using bitkeeper at here at work.
09:10:31 <Marvin--> Spark: 404?!
09:10:41 <SyntaxNinja> shaleh: are you not sure about the distributed models?
09:10:47 <Spark> yeah its not like its the root of the server or anything :)
09:11:20 <Marvin--> sas.se redirects me to https://ibp2.scandinavian.net/planandbook/searchAvailView.asp?MKT=SE
09:11:27 <shaleh> SyntaxNinja: it has its own share of issues is all.  Just not sure its benefits outweigh them yet.
09:11:56 <shaleh> SyntaxNinja: for open source work, I think subversion is a better choice because people are more likely to have it and have likely worked with cvs in the past.
09:13:26 <Spark> and https://ibp2.scandinavian.net/planandbook/searchAvailView.asp?MKT=SE gives a 404
09:13:47 <bringert> what do the call-by-name and call-by-value Y combinators look like?
09:13:56 * bringert left his TaPL at home
09:15:31 <SyntaxNinja> shaleh: I think that for open source work, a distributed system makes even more sense.
09:15:46 <Spark> how about a nice slice of pain
09:16:11 <shaleh> SyntaxNinja: kinda depends on how active the users are as developers.  On most of the projects I have worked on, the users were not submitting patches.
09:17:11 <Marvin--> Spark: how odd
09:17:26 <Spark> well, its IIS :)
09:17:26 <SyntaxNinja> shaleh: here's a long article I wrote about that, which does mention svn: http://www.haskell.org/pipermail/libraries/2004-March/001870.html
09:17:33 <Spark> i'll check again in an hour or so
09:18:12 <SyntaxNinja> shaleh: maybe that's because CVS sucks for that :)
09:19:38 <bringert> Spark: no 404 for me
09:20:04 <Spark> !
09:20:30 <Spark> must be a bug in their asp code
09:21:47 <shaleh> SyntaxNinja: no, I have tended to be on the devel end of end-user code.  They just want it to work.  "leaches" for lack of a better term.
09:22:19 <shaleh> for projects where most of the users will also be patchers a distributed system can make more sense.
09:22:24 <SyntaxNinja> shaleh: so the development team never grows?
09:22:35 <bringert> Spark: lastminute.com works too
09:22:44 <shaleh> SyntaxNinja: slowly typically.
09:22:45 <Spark> i get
09:22:47 <Spark> Proxy Error
09:22:47 <Spark> The proxy server received an invalid response from an upstream server.
09:22:47 <Spark> The proxy server could not handle the request GET /lmn/lfe/flights/homepage/homepage.jhtml.
09:22:51 <Spark> Reason: Error reading from remote server
09:23:13 <bringert> that sounds like a problem with your proxy server
09:23:18 <shrimpx> shaleh: you're a haskell haxor nowadays?
09:23:26 <Spark> i dont have a proxy server :)
09:23:32 <bringert> I found  "Price: £200.70 per adult" with KLM on lastminute.com
09:23:40 <Spark> the isp must be transparently proxying
09:23:41 <bringert> maybe you ISP does?
09:23:47 <shaleh> shrimpx: just started learning.  Not sure I am here for the long term, but I will be hanging out of the next couple of weeks while I get my feet wet.
09:23:58 <SyntaxNinja> shaleh: well, this case is really about version control being a barrier for entry for serious developers, and somewaht less about small patches from lots of people.
09:24:03 <shrimpx> shaleh: cool
09:24:12 <SyntaxNinja> though darcs is good for both.
09:24:25 <shaleh> shrimpx: a programmer who does not grow ends up being a manager (-:
09:24:55 <Spark> hm bringert what departure airport did you put in?
09:25:21 <shrimpx> shaleh: haha
09:25:21 <shaleh> does \input{foo.lhs} in a bar.lhs document actually do something like a #include?
09:25:46 <SyntaxNinja> i don't think so
09:26:44 <shrimpx> hm, something like that... but that's latex, not haskell
09:26:46 <Spark> ah right lastminute.com crashes if i put in birmingham :)
09:26:53 <Spark> i cant find anything for 200 quid though still
09:27:17 <Spark> annoyingly there were some for 137 yesterday but i figured theyd keep getting cheaper
09:27:27 <SyntaxNinja> shaleh: have you looked at lhs2latex?
09:27:38 <shaleh> shrimpx: so the haskell compiler honors the standard imports and the latex output follows the latex based \input{}?
09:27:48 <shaleh> SyntaxNinja: no, I haven't yet.
09:28:13 <SyntaxNinja> shaleh: the compiler ignores everything that's not between \begin{code} ... \end{code}
09:28:22 <kosmikus> SyntaxNinja: it's lhs2tex (me), or Haskell2LaTeX (Igloo)
09:28:24 <SyntaxNinja> or the brokets
09:28:32 <SyntaxNinja> kosmikus: thanks.
09:29:12 <kosmikus> both produce LaTeX, though
09:29:30 <bringert> Spark: I chose "London, any"
09:30:01 <bringert> Spark: is there an airport near you?
09:30:11 <Spark> birmingham is quite close
09:30:20 <Spark> as is coventry but im not sure anything flies from coventry
09:30:41 <bringert> you could just go there, and when everyone has checked in, ask if there are any available seats
09:31:06 <Spark> assuming that there are any planes from there :)
09:31:16 <bringert> probably not to sweden I guess
09:31:20 <Spark> mm
09:31:22 <bringert> maybe to copenhagen
09:31:58 <Spark> barter for the tickets? :)
09:32:05 <bringert> :)
09:32:18 <bringert> the tarin from copenhagen doesn't take all that long I think
09:32:22 <bringert> train
09:32:27 <Spark> theres a train from copenhagen?
09:32:31 <Spark> i thought that was in denmark
09:32:45 <bringert> and there should be a bunch of flights from there to gothenburg
09:32:48 <bringert> yeah, it is
09:32:53 <Spark> heh, underwater?
09:33:03 <Spark> around russia? :)
09:33:07 <bringert> there's a bridge :)
09:33:09 <Spark> ahh
09:33:10 <Spark> cool
09:33:19 <bringert> and ferries
09:35:45 <bringert> Spark: there's a plane from Birmingham which lands in Gothenburg at 22:35
09:36:02 <Marvin--> right in time for the beer!
09:36:05 <bringert> City Airline
09:36:18 <bringert> CF016
09:36:22 <Spark> !
09:36:28 <Spark> how the fuck did you find that out
09:36:28 <bringert> call them right now
09:36:46 <bringert> gothenburg airport homepage lists the arriving planes
09:37:02 <Spark> heh resourcefulk
09:37:22 <bringert> http://www.cityairline.com/
09:37:39 <bringert> UK
09:37:39 <bringert> City Airline Reservations 0870 220 6835
09:37:39 <bringert> City Airline Sales office in Manchester 0161 489 3688
09:37:39 <bringert> City Airline Sales office in Birmingham 01296 733 599
09:38:37 <bringert> tickets seem a little pricey looking at the web site
09:38:44 <bringert> but they might have last minute seat
09:38:45 <bringert> s
09:38:54 <Spark> hm yeah ok
09:39:06 <Spark> what classes as a youth ticket?
09:39:10 <Spark> theyre only $172
09:39:11 <Spark> £
09:39:59 <bringert> with SAS youth is under 26
09:40:17 <bringert> call them
09:40:19 <bringert> call them
09:40:24 <bringert> call them
09:40:25 * Spark finds phone
09:42:59 * Spark tries manchester since birmingham doesnt work
09:43:42 <bringert> the local offices might be closed this time of day
09:43:48 <Spark> yeah i think you're right
09:44:24 <bringert> they have an office in gothenburg, I could call them if you can't reach any of the UK ones
09:44:41 <Spark> ill try the top one
09:44:53 <bringert> Offers:
09:44:54 <bringert> Manchester-Gothenburg
09:44:54 <bringert> Campaignfare £139 return
09:44:54 <bringert> Valid until 31 Dec 2004. Plus taxes and servicecharge. Conditions apply.
09:45:06 <bringert> dunno what conditions those are
09:46:06 <bringert> with taxes it's probably about the same as the GBP172 price
09:46:32 <Spark> they said go to brum
09:46:38 <Spark> so i'll do that, see what happens :)
09:47:29 <Spark> cheers for help
09:47:35 <Spark> i could do with some phone numbers though :)
09:47:47 <bringert> bruM?
09:47:52 <bringert> the airport?
09:47:52 <Spark> oh, birmingham
09:47:55 <Spark> yeah
09:50:40 <Igloo> Can anyone explain why http://urchin.earth.li/~ian/Mem.hs should give different memory usage when USESMEM is defined?
09:53:32 <Spark> there an ethernet internet connection there is there?
09:53:45 <Spark> so i dont have to worry about installing stuff on my debian laptop right now :)
09:53:59 <bringert> there is ethernet
09:58:19 <Spark> hopefully i'll remember to buy a power adaptor at the airport :)
09:59:41 <bringert> hopefully so yes. :)
10:01:34 <bringert> we're currently installing a lot of stuff on the computer system here, and we have accounts for everyone too, so your laptop will not be strictly necessary
10:02:02 <Spark> ah cool since it is a bit pants ;)
10:09:53 <Spark> right well
10:10:02 <Spark> i'm packed and ready to go
10:10:20 <Spark> i'll call you when i've spoken to them, i guess it'll either be tonight, tommorow morning, or not at all :)
10:10:34 <bringert> Sounds good
10:10:40 <Spark> cya later :F
10:18:08 <shaleh> what does the '$' operator do?
10:19:39 <bringert> @type ($)
10:19:40 <shrimpx> it's fun application. f $ x === f x
10:19:41 <lambdabot> ($) :: forall b a. (a -> b) -> a -> b
10:20:26 <shaleh> shrimpx: so why use it?
10:20:32 <bringert> it's commonly used to remove parenthesis. For example:
10:20:34 <shrimpx> useful to omit extraneous parens. putStr $ getString blah
10:20:44 <shaleh> right.
10:20:51 <shaleh> why not just use parens?
10:20:56 <bringert> f (g (h x))
10:21:04 <bringert> becomes f $ g $ x
10:21:08 <shrimpx> gets ugly in many situations. $ makes things neater
10:21:27 <shaleh> (_,_,ermsgs) -> do fail $ unlines ermsgs
10:21:27 <bringert> sorry f $ g $ h x
10:21:41 <shaleh> I don't see why he didn't just use fail (unlines ermsgs)
10:22:09 * shaleh hates the '$' symbol.  Too many years of perl.
10:22:45 <shrimpx> heh
10:23:02 <bringert> shaleh: It's nice if you have a LONG line and just want to add for example a: trace "stupid bug" $ ...
10:23:32 <shaleh> bringert: hmm, good example, thanks.
10:24:03 * bringert is chucky right now btw, just in case I say smething stupid. :)
10:26:27 <shrimpx> shaleh: also you can use it in higher order context: zipWith ($) [(+1),(*5)] [3,4]
10:35:16 <kosmikus> shaleh: if it's really just the symbol you hate, you can always define another operator to be equivalent to ($), with the only disadvantage that other people will have more difficulty understanding your code
10:36:26 <shaleh> kosmikus: (-:, nah I just like cleaner code without symbols.  So I am more likely to use foo (bar baz)
10:36:58 <shaleh> but I can see where ($) will have its uses
10:40:29 <shaleh> hmm, darcs code is not too hard to read
10:41:15 <Igloo> foo (bar baz) has 1 more symbol than foo $ bar baz
10:41:23 <shaleh> Igloo: and?
10:41:27 <Igloo> You're just more used to the ( and ) symbols
10:42:18 <shaleh> Igloo: perhaps. but I find gratuitous symbols to be annoying.  One of the reasons I learned Python.
10:50:54 <shrimpx> some haskell programs go crazy on overloading various symbol sequences as infix ops
10:52:42 <shaleh> where i "" = "" -- what is 'i' in this context?
10:52:49 <vegai> what a weird slogan
10:52:57 <Igloo> A function
10:54:06 <shaleh> kinda what I guessed.
10:54:21 <shaleh> any idea which one?
10:54:31 <Igloo> It's being defined
10:54:54 <Igloo> It's the function that takes a string and if it is "" gives you back "" and otherwise is bottom
10:55:09 <Igloo> (except I assume the next line(s) define its behaviour on other strings)
10:55:15 <shaleh> oh, hmmmmmm. I see.
10:55:18 <shaleh> how odd.
10:56:06 <shaleh> if "" return "", if the string starts with '#', return it as is.  Otherwise add 4 spaces to the front and return it.
10:56:49 <Igloo> Indenting code using CPP by one level?
10:57:26 <shaleh> seems to be used to clean up the output of the patchset.
10:57:35 * shaleh is reading darcs code to further his education
10:58:35 <Igloo> Ah, right
10:58:38 * Igloo vanishes
10:59:01 <shaleh> thanks Igloo
11:02:14 * Spark shakes head sadly
11:02:33 <Spark> your number didnt actually work bringert, or maybe i wrote it down wrong :p
11:02:44 <Spark> still they were booked, and she couldnt find anything else suitable either
11:03:53 <Spark> so i cant come
11:04:15 <Spark> sorry all, i'll try next year :)
11:08:09 <bringert> Spark: too bad
11:09:02 <shaleh> @type fold
11:09:03 <lambdabot> bzzt
11:09:10 <shaleh> @type (fold)
11:09:11 <lambdabot> bzzt
11:09:14 <shrimpx> @type foldr
11:09:15 <lambdabot> foldr :: forall b a. (a -> b -> b) -> b -> [a] -> b
11:09:19 <shrimpx> @type foldl
11:09:22 <lambdabot> foldl :: forall a b. (a -> b -> a) -> a -> [b] -> a
11:09:34 <shaleh> so there isn't a 'fold', I have to choose left or right?
11:09:50 <shrimpx> most likely you want foldr
11:10:26 <shaleh> shrimpx: yes, usually.  I was reading SOE last night and I would have sworn he said there was a fold which was equal to foldr.
11:11:40 <shrimpx> you can 'fold = foldr' :)
11:11:44 <bringert> Spark: maybe you can FedEx yourself
11:11:46 <shaleh> true
11:12:02 <shaleh> more of a "I thought they said this would work" type question.
11:13:50 <shaleh> hmm, playing at the ghci prompt is not quite as easy as playing at the python prompt.
11:14:19 <shaleh> Prelude> foldr (+) [1,2,3] -- why won't this work?
11:14:26 <shrimpx> i find the python prompt suffocating nowadays, since i can't get types on functions
11:14:41 <shaleh> shrimpx: what types (-:
11:14:50 <shrimpx> indeed
11:14:55 <shrimpx> foldr (+) 0 [1,2,3]
11:15:06 <shaleh> ah right, I need the initial value
11:15:10 <shaleh> doh
11:15:22 <Heffalump> there's a foldr1 too if you can guarantee a non-empty list and don't want an initial value
11:15:27 <shaleh> shrimpx: how do I query the function definition at the ghci prompt?
11:15:32 <Heffalump> :t foldr
11:15:43 <shrimpx> don't know that you can query a definition
11:15:47 <Heffalump> I don't think you can get the definition text
11:15:51 <shaleh>  :t foldr
11:15:51 <shaleh> foldr :: forall b a. (a -> b -> b) -> b -> [a] -> b
11:15:57 <Heffalump> Remember this is a compiled language, and the definition won't necessarily be available
11:15:58 <shaleh> that's what I wanted.
11:16:05 <shaleh> right, I meant declaration.
11:16:39 <shaleh> the error message from the interpreter is not obvious
11:16:55 <Heffalump> Haskell type error messages are not famed for being good.
11:17:04 <Heffalump> they are getting better though
11:17:43 <shrimpx> the errors aren't fun when you end up with partially applied functions while not expecting them
11:17:43 <Philippa> GHCi's are fairly useful for me now, but only because I can afford to sit there commenting out bits of code to see what breaks where and how in the type analysis
11:18:04 <Philippa> having a log of the type inference process'd really help sometimes
11:18:20 <shaleh> No instances for (Num [t], Show ([[t]] -> [t]))
11:18:21 <shaleh>       arising from use of `+' at <interactive>:1
11:18:21 <shaleh>     In the first argument of `foldr', namely `(+)'
11:18:21 <shaleh>     In the definition of `it': it = foldr (+) [1, 2, 3]
11:18:34 <shrimpx> partially applied function :)
11:18:36 <shaleh> is the output for forgetting the 0 in foldr (+) 0 [1..10]
11:18:47 <shaleh> or [1,2,3] as in this case
11:19:34 <shrimpx> it thinks you want the list as the default value, so it ends up with a function that is still expecting a list argument
11:19:52 <shrimpx> and also (+) on lists is undefined :)
11:19:58 <shaleh> right (-:
11:20:09 <cbus> eurohaskell soon :)
11:20:24 <shrimpx> let f = foldr (++) [1,2,3] in f [[]]
11:21:07 <Heffalump> philippa: have you tried Helium, OOI?
11:21:57 <Heffalump> shaleh: the thing is that (+) isn't just a function from Int->Int->Int; it can take any numeric type, so it's real type is Num a=>a->a->a
11:22:06 <Heffalump> so ghc thought you were trying to treat the list as a Num
11:22:45 <Philippa> Heffalump: I haven't - I used too many "proper Haskell" features, which last I heard of it it doesn't really do
11:22:49 <Philippa> s/use/used
11:22:58 <shaleh> yeah, the confusion for me was the Show .... on the right.  It looked like it was saying "hey, how do I show you the output of that?"
11:24:13 <Heffalump> shaleh: well, it was :-)
11:24:23 <Heffalump> cos the output would have been a function
11:24:28 <shrimpx> shaleh: it was
11:24:49 <shrimpx> in order for something to be printed it needs to implement Show
11:25:16 <shrimpx> and weird partially applied functions don't
11:26:23 <Heffalump> some people find that "import Text.Show.Functions" is helpful
11:26:23 <Heffalump> (it imports an instance of Show for any function type that just prints "<<function>>")
11:26:23 <Heffalump> oh, single <> not double <<>>
11:28:49 <shaleh> Heffalump: thanks, that will be handy.
11:29:37 * shaleh is enjoying his walk of the darcs code.  It is not too shabby. A little advanced in places, but not too hard to follow.
11:30:03 <Heffalump> cool.
11:30:42 <shaleh> the indent function declaring a function 'i' in a where statement caught me off guard
11:31:55 <shaleh> in particular, I had not seen a function definition using pattern matching that did not have an accompanying function declaration above it.
11:35:51 <shrimpx> ah.
11:36:01 <shrimpx> type annotations are mostly optional
11:36:19 <shrimpx> but people typically annotate toplevel functions as a form of documentation
11:36:37 <shrimpx> not small nested functions though, typically
11:36:46 <Heffalump> unless debugging type errors :-)
11:36:55 <shrimpx> ya :)
11:37:26 <Heffalump> I actually find it quite hard to remember in which nested scopes type annotations are allowed and in which they aren't.
11:37:37 <Heffalump> s/scopes/contexts/
11:37:43 <SamB> this is the only language where I have ever had a type leak
11:43:15 <shaleh> few languages have you care about the type
11:43:54 <bringert> Spark: did you check the flight tomorrow morning too?
11:46:36 <shaleh> hmm, ghci won't let me import.
11:47:48 <shaleh> Prelude> import Text.Show.Functions
11:47:48 <shaleh> <interactive>:1: parse error on input `import'
11:48:19 <TheHunter> :module Text.Show.Functions, IIRC
11:49:07 <Heffalump> :module +Text.Show.Functions
11:49:19 <Heffalump> the import is for when you use it from a source file
11:49:35 <Heffalump> but you're probably better off just doing it from the interpreter
11:49:49 <Heffalump> doing it in a compiled program might mean you get a surprise at runtime rather than compile time
11:50:11 <shaleh> that makes the error from foldr (+) [1..10] more obvous
11:50:20 <shaleh> No instance for (Num [t])
11:50:21 <shaleh>       arising from use of `+' at <interactive>:1
11:50:40 <bringert> 13 hours to EuroHaskell!
11:50:52 * shaleh goes to get food
12:04:48 <ludde> http://users.evtek.fi/~k0101446/vittu.jpg
12:06:12 <Heffalump> :-)
12:23:51 <bringert> anyone know why haxml says "found ghc 6.2.1, requires 5.08 or later"?
12:24:04 <bringert> or rather, if there is a nice configure flag to fix it
12:25:17 <bringert> eh, make that 5.08
12:26:01 <SamB> bringert: whoever wrote the script forgot to check if the major number was higher?
12:26:09 <bringert> guess so
12:26:28 <bringert> weird thing is it works on my linux box against 6.2.1, but not on solaris
12:33:40 <Spark> yeah i did
12:33:52 <Spark> :)
12:34:09 <Spark> i could fedex myself in little pieces and you could reassemble me at the other end
12:34:48 <mij> the very convenient way to travel by packet commutation
13:23:00 <shaleh> ok, say I have a string "foo" and I wanted to append 'o' (aka the letter o) to it, how would i do this?
13:23:26 <andersca> shaleh: think about what a string is
13:23:50 <shaleh> andersca: a list of chars, right.  But this: "foo":'o' fails.
13:24:16 <andersca> shaleh: yeah, you can only use : to prepend list elements
13:24:28 <andersca> how do you concatenate two lists?
13:24:37 <shaleh> with ++
13:24:49 <andersca> do you know a way to make a list with only one element?
13:24:50 <shaleh> wait, : only prepends?
13:24:56 <andersca> yes
13:24:58 <shaleh> ah
13:25:03 <shaleh> there in lies my confusion
13:27:55 <Marvin--> (:) is actually a constructor
13:28:08 <Marvin--> data [a] = [] | a : [a]
13:29:40 <shaleh> so, let's say I have a list of strings.  I want to take the first item of the list, append a character to it, and make a new list.  new_head:tail.  When I try to do (head l) ++ [c] -- with or without []. It fails.
13:30:50 <andersca> note that ++ only operates on lists
13:30:54 <andersca> @type ++
13:30:56 <lambdabot> bzzt
13:30:57 <andersca> @type (++)
13:30:58 <lambdabot> (++) :: forall a. [a] -> [a] -> [a]
13:31:02 <andersca> @type head
13:31:04 <lambdabot> head :: forall a. [a] -> a
13:31:16 <shaleh> do I need to somhow listify head?
13:31:34 <SamB> @type (:)
13:31:35 <lambdabot> (:) :: forall a. a -> [a] -> [a]
13:31:41 <SamB> @type []
13:31:43 <lambdabot> [] :: forall a. [a]
13:31:51 <andersca> @eval 1:2:3
13:31:52 <lambdabot> type error
13:31:56 <andersca> @eval 1:2:3:[]
13:31:56 <lambdabot> [1, 2, 3]
13:36:07 <opet> does lambdabot do that evaluation itself? or pipe it out to hugs or something?
13:36:32 <anduril1> opet: I've been told that it does it itself
13:36:48 <andersca> yeah, it does
13:37:10 <opet> how much of haskell does it understand?
13:37:18 <opet> I suppose I could just go and look
13:37:20 <andersca> yeah :)
13:37:24 * andersca doesn't know
13:39:18 <Marvin--> it basically does lambda calculus
13:39:22 <shaleh> sorry about that.  My X session went wonky.
13:46:46 <shaleh> so, as I was saying. (head l) ++ char, what am I missing?
13:47:27 <Hyp3rion> Hey :-)
13:47:36 <Hyp3rion> @type (++)
13:47:37 <lambdabot> (++) :: forall a. [a] -> [a] -> [a]
13:48:04 <shaleh> String is a [Char], right?
13:48:20 <shaleh> so [Char] ++ [char] should work.
13:48:34 <shaleh> or do I need to somehow force the list-ness of the string?
13:49:21 <Hyp3rion> shaleh - you mean (head "abc") ++ 'b' by (head l) ++ char?
13:50:44 <shaleh> I have a list of strings, say let l = ["foo", "too", "zoo"] and I want to say: (head l) ++ 'b' and then put that back on as the new head, eating the old head.
13:50:57 <shaleh> so when I am done I will have ["foob", "too", "zoo"]
13:51:27 <Marvin--> first of all, that'd be   ++ "b"
13:51:27 <shaleh> I think I can handle the rest of this, right now I am stuck with adding the 'b'.
13:51:39 <Marvin--> 'b' is a Char, "b" is a String
13:51:51 <shaleh> Marvin--: in this case I have the 'b' in a variable, func (c:cs)
13:51:58 <Marvin--> and String = [Char]
13:52:07 <Marvin--> so you could also do ['b']
13:52:40 <shaleh> ((head acc) ++ c):(tail acc) -- my attempt at this.
13:52:55 * SyntaxNinja will resist naming a Cabal "person" after Alex J."
13:53:01 <SyntaxNinja> s/person/persona
13:53:06 <Marvin--> shaleh: no, you'd want    (head acc ++ [c]) : tail acc
13:53:10 <Marvin--> if c :: Char
13:53:22 <Marvin--> SyntaxNinja: heh
13:53:43 <shaleh> I have tried it with [c] as well.
13:53:55 <Marvin--> shaleh: you don't need all those parentheses since function application binds tighter than operators
13:54:01 <shaleh>  Couldn't match `String' against `Char'
13:54:01 <shaleh>         Expected type: [String]
13:54:01 <shaleh>         Inferred type: [Char]
13:54:01 <shaleh>     In the expression: (head acc) ++ [c]
13:54:14 <shaleh> Marvin--: thanks, I was being cautious.
13:54:17 <Marvin--> and what's the type of acc?
13:54:23 <Marvin--> are you sure it's [String]?
13:54:26 <shaleh> [String]
13:55:37 <Marvin--> it's kinda hard to get a picture of this without some more context, maybe you could put some on the paste page?
13:55:37 <shaleh> Marvin--: that's what my function declaration say (-:
13:56:54 <Hyp3rion> head "abc" is a Char :-/
13:56:59 <shaleh> Marvin--: I am playing with writing a lexer.  So I am trying to read a string of input character by character.
13:57:24 <shaleh> I am making a list of things I find, skipping whitespace.
13:58:02 <Marvin--> shaleh: with "context", I meant "code" :-)
13:58:10 <shaleh> yes, I know of words and unwords, this is a learning experience.
13:58:24 <shaleh> gotta run, meeting.  More later.
14:00:23 <Marvin--> SyntaxNinja: there seems to be a whole lot of confusion about the personas
14:00:43 <Marvin--> personally, I don't think it helps adding new random personas for every geek involved in the discussion :-)
14:00:48 <SyntaxNinja> Marvin--: any clue as to why that is? i thought they were pretty clear.
14:01:19 <SyntaxNinja> Marvin--: yeah, Alex seems to confuse personas with real people; ie conflating joe and bob since they might be the same person; they're really use cases.
14:01:43 <SyntaxNinja> fwiw, the personas are SPJ's idea. I like 'em, though.
14:02:04 <Marvin--> it may be because of a unixy vs windowsy problem
14:02:25 <Marvin--> but the main problem is, I guess, that people mistake personas for people
14:03:12 <SyntaxNinja> I admit I'm a non-windows user, but I don't know why the use cases should be different; I guess we should have had the consumer of Willie Window's packages in there.
14:03:16 <Heffalump> how about calling it a "profile"?
14:04:40 <SyntaxNinja> Heffalump: I hate to say it (really!) but I think that he is being intentionally obtuse.  I don't think there's any way to guess what someone is going to choose to not understand.
14:04:43 <Marvin--> I haven't read the whole document, but does it stress that the personas represent use cases and that many people will have several personas?
14:05:09 <SyntaxNinja> Marvin--: no. I'll probably add that point of clarification.
14:05:37 <Heffalump> I haven't actually read whatever proposal you are referring to.
14:05:39 <SyntaxNinja> but really, I don't think he's read it carefully either.  else why would he name his new persona something so similar to one that's already there.
14:05:51 <Marvin--> true
14:05:56 <Heffalump> I guess I ought to...
14:50:30 <bringert> 10 hours left!
14:50:34 <bringert> @eurohaskell
14:50:34 <lambdabot> less talks, more code!
14:50:34 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
14:50:34 <lambdabot> EuroHaskell - Haskell Hackfest - June 10-12 - Gothenburg, Sweden
14:51:24 <Marvin--> meh, lousy eurohaskell making me leave bed early tomorrow morning
14:51:37 * monotonom is not a hacker, doesn't agree with hackery.
14:52:22 <vajrabum> Can somebody point me to a document which describes what a current release of ghc does for existentials?
14:52:46 <monotonom> http://www.haskell.org/ghc/
14:53:25 <monotonom> docs/latest/html/users_guide/ghc-language-features.html
14:53:32 <Riastradh> What's wrong with hackery?
14:53:41 <vajrabum> Thanks
14:54:47 <monotonom> It may be section 7.4.1.4
14:57:34 <shaleh> Marvin--: internalLex (c:cs) acc = if isSpace c
14:57:35 <shaleh>                        then internalLex cs acc
14:57:35 <shaleh>                        else internalLex cs ((head acc) ++ [c]):(tail acc)
14:57:46 <vajrabum> Thanks monotonom. That's what I remember being there a few years ago. Are there now typeof, and perhaps instanceof functions that could be used with this facility?
14:58:37 <monotonom> I don't know. I have never used existentials. I only know where to look in the table of contents.
14:59:18 <Marvin--> shaleh: that's quite valid and has type String -> [String] -> a
14:59:38 <vajrabum> Uhm. This question was sparked by some stuff on haskell-cafe. Maybe I should take my question over there too. :)
15:00:07 <shaleh> Marvin--: it doesn't compile
15:00:41 <Marvin--> shaleh: is it the only definition of internalLex? You don't have more lines than that for defining internalLex?
15:00:48 <Marvin--> like a base case for internalLex [] acc? :)
15:01:01 <shaleh> Marvin--: one other: internalLex "" acc   = unwords acc
15:01:14 <shaleh> so it returns string
15:01:41 <shaleh> mostly for initial hacking, will probably return the list long term
15:01:48 <Marvin--> shaleh: works for me
15:02:14 <shaleh> really? It fails here.
15:02:30 <Marvin--> I just typed it into ghci with a let and it works just fine
15:22:20 <Marvin--> shaleh: actually, I don't see why acc must be [String] at all, you never do anything with the tail of it
15:22:50 <shaleh> Marvin--: true. but I do eat its head.
15:35:47 <Marvin--> I guess I should get some shut-eye
16:11:56 <wagle> if i have a "data E i = ...", how do i do a Show (E String) instance?
16:12:31 <Riastradh> data E i = ... deriving Show
16:13:14 <wagle> i wanna derive it myself
16:15:25 <Heffalump> you can't do a Show (E String) instance
16:15:38 <Heffalump> not in Haskell 98, anyway
16:17:32 <wagle> syntax error in 98
16:17:39 <wagle> -98 +o works
16:17:48 <wagle> Heffalump: thanks
16:18:06 <kosmikus|away> do you really need a non-98 instance here?
16:18:22 <kosmikus|away> you could do instance Show a => Show (E a) where ...
16:18:46 <wagle> if a is a string, i dont want to show it
16:18:58 <wagle> (dont want the quotes)
16:19:10 <wagle> else i will show a
16:19:36 <kosmikus|away> I see
16:19:57 <wagle> needed +o to overlap with my generic  Show a => Show (E a) instance
16:20:00 <kosmikus|away> then I guess the overlapping instance is the easiest way ...
16:20:59 <wagle> i >think< i'm a novice haskell programmer, but i sure have to -98 and +o a lot
16:21:46 <wagle> haskell 98 doesnt seem very useful
16:24:15 <kosmikus|away> I wouldn't consider myself a novice Haskell programmer, and I rarely need overlapping instances
16:24:24 <kosmikus|away> but it really depends on programming styles
16:24:38 <kosmikus|away> I rarely use type classes ... don't like them very much
16:24:55 <kosmikus|away> I guess if you do, you don't get very far with Haskell 98
16:25:48 <kosmikus|away> otoh, if you'd really want to, you could solve your problem within Haskell 98
16:27:09 <wagle> one of the first things i did was to port Liang Monad transform stuff
16:27:34 <kosmikus|away> good night #haskell
16:54:43 <wagle> hugs doesnt come with Control.Monad.State?
17:51:22 <desrt> is there a function that acts like a mix between takeWhile and splitAt?
17:52:25 <Heffalump> span or break or something, IIRC
17:52:53 <desrt> break.  thanks :)
18:23:33 <Pseudonym> Hmmmmm.
18:24:16 <Pseudonym> Looks like everyone is typeclass metaprogramming, but nobody is doing it consistently.
18:30:43 <wagle> ?
18:31:14 <Heffalump> pardon?
18:31:38 <Pseudonym> I mean that everyone comes up with their own frameworks, and none of them work together.
18:32:20 <Heffalump> ah. What for?
18:32:30 <Pseudonym> OK, here's an example.
18:32:55 <Pseudonym> class TypesEq a b result | a b -> result
18:33:05 <Pseudonym> That's from the Ralf Laemmel et al paper on heterogeneous lists.
18:33:14 <Pseudonym> "result" is a reified boolean:
18:33:16 <Pseudonym> data HTrue
18:33:18 <Pseudonym> data HFalse
18:33:56 <Pseudonym> Others have their own reified Peano numbers, others have reified integers...
18:34:32 <Pseudonym> The implicit configuration paper defines type classes for reifying any type at run-time, but has little or no support for doing it at compile-time.
18:34:49 <Pseudonym> Seems to me that there is probably some call for a unified framework.
18:37:11 <Heffalump> I think you need to let people have freedom to do it whatever way is convenient for a given research paper.
18:39:25 <wagle> Sheard's omega is doing something like that
18:40:57 <wagle> "meta-programming with built-in type equality"..  i think he's doing all the type checking at compile time
18:53:36 <Pseudonym> It's not a question of freedom.
18:53:47 <Pseudonym> Of course people should do what they like wrt research.
18:54:07 <Pseudonym> It's a question of convenience for programmers who want to combine this stuff.
18:54:58 <wagle> attempting to herd cats^H^H^H^H programmers is futile
18:55:17 <Pseudonym> Actually, here's another example.
18:55:33 <Pseudonym> someGlobalVar = unsafePerformIO $ newIORef undefined
18:55:37 <ozone> Pseudonym: did you read my discussion on per-type namespaces on the haskell lists a while ago?
18:55:53 <Pseudonym> That's only safe if the type of the variable is monomorphic.
18:56:12 <Pseudonym> someGlobalVar :: (Monomorphic a) => IORef a
18:56:20 <Pseudonym> Now define "Monomorphic" in Haskell. :-)
18:56:27 <ozone> one goal of it was to permit better support for all these disparate stuff.  it doesn't solve what you're talking about right now, but it would help.  (the haskell guys don't seem to get the point of it, though)
18:56:32 <Pseudonym> ozone: I think so.
18:56:44 <Pseudonym> I do recall something about that.
18:57:17 <Pseudonym> One other thing I'd like is to be able to reify values conveniently.
18:57:20 <wagle> you might be able to produce something that caused a type error if "a" wasn't monomorphic
18:57:43 <Pseudonym> Rather than "Succ (Succ Zero)", I want to type "TyInt 2" or something similar.
18:57:46 <Pseudonym> Maybe you can do that in TH.
18:58:22 <wagle> what is ozone talking about?
18:58:25 <ozone> TH still requires you uses splices at the call site
18:58:40 <Pseudonym> This is all kinda vague.
18:58:43 <ozone> wagle: http://www.haskell.org/pipermail/haskell/2004-February/013697.html
18:58:55 <Pseudonym> But it seems to me that a consistent library would be useful for Haskell programmers.
18:59:07 <ozone> Pseudonym: thus the libraries mailing list :)
18:59:12 <Pseudonym> Right. :-)
18:59:33 <Pseudonym> I keep thinking that it's going to require compiler support, though.
19:01:10 <Pseudonym> Meeting.
19:01:41 <Smerdyakov> Compiler Support vs. Mothra!!
21:44:48 <SyntaxLaptop>  I added Cabal TODO list to the EuroHaskel wiki page
