03:35:27 <neologism> may I say that: "programming languages scientists said around a table, discussed a lot and then developed haskell as ''the functional language'' " ?
03:40:38 <rubix> I think you may say that haskell is "the pure lazy functional language".
03:41:22 <neologism> yes
03:41:50 <neologism> but I want to "show" that haskell is output of X years of developement in functional programming langauges area
03:42:17 <neologism> I am writing an article about programming languages in general with great focus on functional ones
03:42:24 <neologism> and I want to take haskell as a prime example
03:42:32 <neologism> and want to write down reason for doing so
05:34:40 <TheHunter> weird, if you define a Num instance for Num a => [a] and only give a definition of (+), you get an error when you try to call (*) and a stack overflow when you try to call negate. Both in ghci and in hugs.
05:35:49 <Marvin--> negate has a default implementation in terms of (-) which has a default definition in terms of negate and (+)
05:35:59 * shapr bounces ecstatically
05:36:01 <Marvin--> so the stack overflow isn't very strange
05:36:03 <TheHunter> i see
05:36:03 <shapr> yay, I have new shoes!
05:36:16 <TheHunter> @karma+ Marvin--
05:36:16 <lambdabot> Marvin--'s karma has been incremented.
05:36:27 <shapr> @karma+ Marvin--
05:36:27 <Marvin--> shapr: bounced your old shoes into oblivion? :)
05:36:27 <lambdabot> Marvin--'s karma has been incremented.
05:36:37 <Marvin--> whoa
05:36:39 <shapr> Marvin--: actually, yes
05:36:39 * Marvin-- feels loved
05:36:56 <shapr> so much so that water was coming through the bottom of the shoes :-(
05:37:05 <Marvin--> been there, done that :)
05:40:31 <ski> @karma lambdabot
05:40:31 <lambdabot> lambdabot has a karma of 0
05:40:37 <ski> @karma+ lambdabot
05:40:37 <lambdabot> lambdabot's karma has been incremented.
05:40:57 <ski> shapr : hello there
05:58:39 <shapr> hi ski
05:59:42 * Igloo jumps up and down on ia64
05:59:53 <shapr> Igloo: are you dealing with GHC on ia64?
06:00:08 <phubuh> IÄ64!  IÄ64!  IÄ64!
06:00:15 <Igloo> No, I am failing to deal with ghc6 on IA64
06:00:53 <shapr> Ia! Nyarlathotep!
06:01:14 <Igloo> Today it's deciding to work on the machine I have access to but not the one I don't
06:01:18 <ski> phubuh : my terminal did funny things when you wrote that
06:01:28 <shapr> Ia! Ia! Cthulhu Ftaghn!
06:01:30 <ski> Shub-Niggurath !
06:01:41 <shapr> ski: right on!
06:02:14 <ski> (the she-goat with the thousand kids)
06:03:36 <ski> That is not dead, which can eternal lie ...
06:16:38 <ski> interact error
06:32:22 <shapr> ski: so, you like HP Lovecraft?
06:33:12 <ski> shapr : yes
06:33:16 <shapr> me too
06:33:17 <shapr> scary stuff
06:47:56 <andersca> my lovecraft is full of eels
06:47:57 <andersca> um
06:48:00 <andersca> that didn't come out right
06:48:09 <tic> your magic love wand?
06:48:26 <tic> your rond of pure love?
06:48:48 <blackdog> sounds like a mahavishnu orchestra title
06:49:50 <blackdog> heh... watching the poms get thumped by the kiwis... 4 or 5 fights so far. They don't like getting beaten. :)
06:51:26 <tic> sapphire bullets of pure love? ;)
06:52:27 <blackdog> shapr: I pinched your script for unit testing, but i'm getting ^M in the emacs window. any idea why?
06:53:00 <blackdog> tic: yeah, that's the one. godDAMN, that's a beautiful album.
06:53:23 <tic> blackdog, indeed. it made me appreciate jazz.
06:53:49 <tic> EST's also a good (swedish) band, if you're into the piano/bass/perc setting.
06:53:51 * tic is off
07:05:28 <firefly> andersca: what happened to ridley.csbnet.se ?
07:17:14 <blackdog> shapr: ah, got it. emacs doesn't do terminal codes, i guess.
07:27:10 <andersca> firefly: power failure
07:27:15 <andersca> firefly: will be up soon(tm)
07:28:13 <firefly> andersca: thanks :)
07:28:25 <andersca> why?
07:28:42 <firefly> I wanted to see some pictures from Eurohaskell that Shae had linked to.
07:29:24 * Philippa blinks
07:29:53 <Philippa> The Haskell code I'm currently writing is starting to look a /lot/ like how I was writing C++. This is probably a bad thing, or maybe my C++ was just tending towards a pseudo-functional style anyway...
07:30:41 <shapr> hiya firefly!
07:30:58 <firefly> Hi :)
07:31:13 <shapr> wassup?
07:31:21 * shapr hops cheerfully
07:31:37 <firefly> shapr: I good introduction to region-based memory management in practice would be the ML Kit manuals - start with the one for version 2 or 3.
07:31:51 <shapr> blackdog: yah, I ended up using RunTestDots.hs because of that and that I prefer the PyUnit style of Unit Test returns
07:32:14 <shapr> blackdog: btw, at some point QuickCheck will save failing cases for later retest, and life will become much easier
07:32:14 <firefly> Other interesting (and relatively easy) stuff to read would be the article by Henning Niss, Henning Makholm and Fritz Henglein from 2000 (or 2001?)
07:32:27 <firefly> Whatever you do, don't read the original Tofte-Talpin article from '94 ;)
07:32:30 <shapr> heh, ok
07:32:32 <ski> you're reading about regions ?
07:32:46 <shapr> yah, firefly was telling me about region-based memory management yesterday
07:32:49 <shapr> it sounds like very nifty stuff
07:32:51 <ski> cool
07:32:56 <firefly> Henning Makholm's PhD thesis (and Master's) about regions are interesting -- but advanced stuff.
07:32:58 <ski> yeah
07:33:03 <shapr> it sounds to me like it's connected with linear types
07:33:14 <ski> maybe
07:33:38 <firefly> Region-based memory objects can be written into and reused, so...
07:33:42 <shapr> seems to me that generational garbage collection plus immutable values could easily exploit region-based memory management
07:34:19 <andersca> firefly: ridley should be up again
07:34:23 <shapr> but firefly was talking about statically determining the regions at compile time
07:34:29 <firefly> It depends a lot on how easy it is to infer that nothing can ever need to read/write the damn stuff again.
07:34:32 <firefly> andersca: thanks!
07:34:32 <shapr> which sounds much more interesting
07:34:47 <shapr> firefly: oh, did you find my blog? :-)
07:34:53 <firefly> Yes :)
07:34:57 <shapr> andersca is the photographer!
07:35:06 <shapr> which means, there are almost zero pictures of him...
07:35:14 <andersca> ...which isn't necessarily a bad thing
07:35:19 <shapr> heh
07:35:19 <Marvin--> heh
07:35:24 * shapr snickers
07:35:35 <shapr> bah, andersca has the aura of a productive coder...
07:35:51 <Marvin--> andersca: did you finish that readline implementation?
07:35:54 <firefly> shapr: well, I wouldn't snicker too loudly if I were you ;)
07:35:58 <firefly> http://www.cse.unsw.edu.au/~sseefried/seafood/photos/people/people-Pages/Image1.html
07:36:02 <andersca> Marvin--: no, busy with gtk hacking lately
07:36:14 <Marvin--> andersca: got the source online somewhere?
07:36:28 <andersca> I'll see if I can dig it up
07:36:29 <shapr> firefly: oh yeah, I've had that roundish shape most of my life
07:36:43 <andersca> firefly: hmm, I know you from somewhere
07:36:51 * andersca checks mailing list archives
07:36:57 <firefly> ;)
07:37:14 <shapr> it's gotten less round since I picked up unicycling
07:37:14 <andersca> dbus? cairo? xdg?
07:37:30 <firefly> something like that, yes.
07:37:34 <shapr> andersca: xmms? the ridley language?
07:38:14 <firefly> I tried to make the xserver work well on nvidia cards without needing VESA.  Then I got excessively tired again and the whole thing lapsed.  About back in shape again now :)
07:39:31 <shapr> firefly: too bad you missed EuroHaskell this year, you'll have to wait for EuroHaskell 2005
07:39:48 <andersca> firefly: you're not going to guadec, are you?
07:40:21 <firefly> No, I am not going.  I have neither the money nor the energy.
07:40:30 <andersca> ok
07:40:31 <shapr> John Hughes looks stylish on a unicycle.
07:40:52 <firefly> EuroHaskell 2005?  I don't think so :) -- DIKU is good at introducting people in the ML school ;)
07:40:53 <ski> did he manage to get any bit on it ?
07:41:34 <andersca> ok, about to reboot my machine again
07:42:24 <ski> (oh, so that's why it stopped working suddenly)
07:42:29 <ski> hmm
07:42:36 <andersca> micke didn't boot it in smp mode
07:42:51 <ski> which means ? :)
07:42:59 <andersca> which means it only used one cpu
07:43:03 <andersca> instead of two
07:43:10 <ski> ok
07:44:15 <andersca> ok, should be up again
07:44:27 <ski> ty
07:46:08 <ski> (whoa, how ugly i look :)
07:46:40 <shapr> ski: I think everyone thinks that when they see themselves in a picture.
07:46:43 <shapr> at least I do :-)
07:47:04 <ski> heh
07:47:17 <shapr> When seeing myself on a photograph, I end up trying to remember the last time I weighed less than 100 kilos.
07:48:13 <firefly> That should be fixable, shouldn't it?
07:48:22 <andersca> with some sort of filter?
07:48:42 <shapr> filter (/= fett) shapr
07:48:43 <firefly> err... no, exercise and no soft drinks.
07:48:52 * shapr snickers
07:49:01 <shapr> firefly: right, I've got half that working.
07:49:12 <firefly> no cookies, either
07:49:32 <shapr> my major problem is my love of sugary drinks.
07:49:52 <firefly> That should be easier to fix than lack of exercise :)
07:50:06 <ski> cookies >>= shapr = return fett  ?
07:50:14 <shapr> ski: heh, yes!
07:50:24 <firefly> There you go again, bringing monads into it.
07:50:26 <andersca> we have such bad nerd humor
07:50:27 <andersca> ;)
07:50:39 <shapr> andersca: yah, but you came up with some of the best with those sings
07:50:41 <shapr> signs
07:50:42 <andersca> :)
07:50:54 <firefly> I liked unsafePerformIO :)
07:51:02 <ski> "unsafePerformIO" !
07:51:03 <andersca> hey dennisb
07:51:08 <ski> yes :)
09:48:05 <shapr> hiya ralf 
09:50:07 * shapr hops
09:50:12 <shapr> good evening #haskell!
09:50:14 <shapr> wasssup?
09:50:16 * andersca boings
10:13:17 <Philippa> shapr: been reading through the MLKit manual...
10:19:36 <shapr> Philippa: learned anything?
10:25:48 <Philippa> a little, slowly, I think
10:26:09 <Philippa> will take me a while to get my head round everything and/or remember all the details
10:26:32 <Philippa> but it looks a v.powerful tool
10:26:48 <Philippa> I think regions were what I was inventing as my solution to keeping sane while managing memory in C++
10:27:22 <firefly> philippa: the regions themselves are not very interesting - you have an implementation in glibc called obstacks, for example.
10:27:36 <Philippa> firefly: oh, I agree, the inference stuff's the meat
10:27:42 <firefly> The interesting thing is how much you can analyze at compile time - and how you can get automatic release of those regions.
10:30:42 <Philippa> I find working out how new stuff relates to what I've figured before a useful exercise though, it tends to ease the learning process for me
10:30:57 <shapr> like, how to do regions in GHC?
10:32:18 <Philippa> heh, I'd wondered a while back if you could frig something similar with arrows
10:32:33 <shapr> yah, I was thinking that too
10:32:40 <firefly> In that case, you should probably read the HMN article, followed by Henning Niss' phd thesis and Henning Makholm's phd thesis (urls follow).
10:32:48 <firefly> http://www.itu.dk/~hniss/publications/ppdp2001.ps.gz
10:33:24 <firefly> http://www.diku.dk/~makholm/thesis.ps
10:33:36 <firefly> ftp://ftp.diku.dk/diku/semantics//papers/D-467.ps.gz
10:33:42 <firefly> http://www.diku.dk/topps/bibliography/2000.html#D-421
10:33:51 <firefly> http://www.diku.dk/~makholm/mmlpi.ps.gz
10:33:56 <firefly> http://www.diku.dk/hjemmesider/studerende/makholm/rpsys.tar.gz
10:34:02 <firefly> http://www.diku.dk/~makholm/ismm.ps.gz
10:34:48 <firefly> I wanted to give you a link to Niss' phd thesis -- but he doesn't have a link to it on his homepage.  Brilliant.
10:34:50 <firefly> Home pages:
10:34:58 <firefly> http://www.itu.dk/~hniss/
10:35:02 <firefly> http://www.macs.hw.ac.uk/~makholm/
10:35:15 <firefly> and the SPACE 2004 page:
10:35:17 <firefly> http://www.diku.dk/topps/space2004/
10:35:24 <jemfinch> can region-based memory management occur in the face of call/cc?
10:35:59 <firefly> Yes - Makholm's PhD thesis is about how you can fit it onto pretty much anything (his masters was about fitting it onto prolog).
10:36:26 <firefly> What I'm not so sure about is how well it will work with a lazy language - I don't know of anybody who has tried it yet.
10:54:11 <Philippa> firefly: intuitively, you'd want to mix it with GC - otherwise something as simple as ones would screw you over
10:54:54 <firefly> sure, you want to do both (and ML Kit 3 and 4 both have a garbage collector in addition to the region stuff)
10:55:17 <Philippa> yeah, I noticed and approve :-)
11:00:58 <andersca> hey SyntaxLaptop
11:04:02 <SyntaxLaptop> hi andersca, how are you?
11:06:57 <SyntaxLaptop> hey everyone, I moved the Cabal repo to its perminant home.  see: http://www.haskell.org/cabal/code.html
11:07:08 <SyntaxLaptop> or: darcs get http://cvs.haskell.org/darcs/cabal
11:07:16 <shapr> yay! darcs.haskell.org !
11:09:17 <jemfinch> what's Cabal?
11:09:36 <monotonom> Cabal is non-existent.
11:10:39 <SyntaxLaptop> jemfinch:  see: http://www.haskell.org/cabal
11:10:41 <andersca> there is no cabal
11:27:53 <SyntaxLaptop> phubuh: any luck w/ that parser?
11:28:22 <jemfinch> what's phubuh writing a parser for?
11:30:23 <SyntaxLaptop> jemfinch: for the data file format for cabal... something like the control files in Debian. can't remember what you call that syntax?
11:30:27 <SyntaxLaptop> Something Jar?
11:36:03 <jemfinch> I don't remember.
11:44:57 <Marvin--> SyntaxLaptop: the rfc822 format?
11:45:44 <Marvin--> Doesn't shapr already have an rfc822 parser?
11:45:56 <SyntaxLaptop> no, I think it was something more informal. I can't remember who said it's name.  supposedly it's "invented" by ESR?
11:46:20 <Marvin--> hmm
11:46:38 <Marvin--> structural or flat?
11:46:51 <Marvin--> what does it look like?
11:46:55 <SyntaxLaptop> i don't know what you mean by that
11:47:08 <SyntaxLaptop> it looks like debian control files :) field: structured string
11:47:29 <Igloo> I didn't know that had a name
11:47:36 <Marvin--> oh, so basically rfc822
11:47:50 <Marvin--> rfc822-*like* anyway
11:48:03 <SyntaxLaptop> yeah
11:48:18 <SyntaxLaptop> Igloo: me neither. I wish I could remember who was talking about it.
11:48:45 <Marvin--> I always call it rfc822 or rfc822-like
11:48:58 <Marvin--> (I mostly use the python module rfc822 to parse such files :)
11:48:58 <Igloo> I find that confusing
11:49:01 <shapr> anyway, my rfc822 parser sucks, Peter Simons' parser is great.
11:49:40 <SyntaxLaptop> pointer?
11:59:28 <Riastradh> SyntaxLaptop, dons?
11:59:44 <SyntaxLaptop> can anyone msg me with phubuh's email address?
12:07:23 <SyntaxLaptop> (no one has messaged me :) )
12:11:48 <Igloo> There could be a reason for that  :-)
12:13:03 * Marvin-- is reading Peter Simons' Enterprise reviews and having a good laugh
12:14:09 <SyntaxLaptop> Igloo: I was kinda reminded of the monks-in-a-row puzzle ;)
12:14:46 <Marvin--> "Reportedly, Brannon Braga has actually had the hubris to say the following sentence out loud: »I feel like after this season, I'm not sure how I can top myself.« Brannon, I am *certain* you cannot top yourself. But why do you say so out loud? Don't be so harsh on yourself!"
12:16:20 <shapr> SyntaxLaptop: rfc2822 is in the Attic of haskell-libs cvs
12:16:25 <shapr> Unstable/Peti I think
12:16:29 <shapr> or I can send you a copy
12:17:56 <andersca> @arr
12:17:56 <lambdabot> Shiver me timbers!
12:18:45 <shapr> @arr
12:18:45 <lambdabot> Smartly me lass
12:19:10 <SyntaxLaptop> what do you guys think of Setup.description for the package description module
12:21:09 <Marvin--> huh?
12:21:45 <SyntaxLaptop> er the package description file
12:22:13 <Marvin--> I still don't understand
12:22:27 <bringert> as a module name?
12:23:11 <SyntaxLaptop> no, as a filename.  The Setup.lhs script reads the Setup.description file (which looks like rfc822)
12:23:30 <SyntaxLaptop> so I want a default name.
12:23:42 <SyntaxLaptop> I liked Setup.description because it's pretty clear that it's associated w/ the Setup file
12:23:44 <Igloo> Something that doesn't clash with tab completion would be nice
12:25:16 <Marvin--> you don't think such a long file extension will scare Windows users? :)
12:25:56 * SyntaxLaptop has yet to learn what scares windows users
12:26:06 <Marvin--> but it's not just description, is it? What kind of meta data is supposed to go in it?
12:26:10 <SyntaxLaptop> they are haskell programmers after all
12:26:16 * Igloo would prefer package.description, or whatever it is if it's not a package
12:26:39 <SyntaxLaptop> package name, version, license, sources, etc
12:26:39 <Igloo> And indeed, whatever it is if it's not description  :-)
12:26:51 <Igloo> package.metadata?
12:28:01 <Marvin--> I'm not quite sure why we can't put it all in the Setup file, like distutils does
12:29:02 <SyntaxLaptop> Marvin--: I think that'll maybe be an option, but there are actually good reasons to separate it
12:29:54 <SyntaxLaptop> for instance, if you wanted to build something like alexj's secure library installer, which reads the static data
12:30:01 <SyntaxLaptop> or for visual studio integration or something
12:32:02 <Marvin--> shouldn't the build dependencies be in this file, too, then? Shouldn't the module list be there? Why do we need a package description value in Setup.lhs at all?
12:32:54 <Marvin--> or rather, shouldn't that value be constructed by the cabal parser?
12:41:02 <SyntaxLaptop> yeah the build depends are also in the file
12:41:15 <SyntaxLaptop> yeah, the module list is there
12:41:31 <SyntaxLaptop> all that PackageDescription stuff is in there.
12:41:54 <Marvin--> so... the pkg_descr stuff we have in our Setup.lhs files is just temporary?
12:42:39 <SyntaxLaptop> yeah. I moved them out, except for one of the tests; I left that one with the pkg_descr but uses "defaultMainNoRead" instead :)
12:42:48 <Marvin--> I see
12:43:09 <SyntaxLaptop> oh, also might not Distribution.Make need to provide the meta-data too?
12:43:47 <Marvin--> scratch that, I don't see it at all
12:43:58 <Marvin--> defaultMain :: PackageDescription -> IO ()
12:44:02 <Marvin--> (from Distribution.Simple)
12:44:14 <Marvin--> where does that PackageDescription come from?
12:44:43 <SyntaxLaptop> darcs pull
12:44:46 <SyntaxLaptop> I changed the interface
12:44:55 <SyntaxLaptop> now we have defaultMainNoRead == defaultMain
12:45:03 <SyntaxLaptop> (old defaultMain)
12:45:05 <SyntaxLaptop> defaultMain :: IO ()
12:45:12 <Marvin--> whoa
12:45:34 <SyntaxLaptop> don't be scared :)
12:46:09 <Marvin--> well, of course Distribution.Make should provide the same interface as Distribution.Simple
12:46:18 <Marvin--> but as it stands, D.Make doesn't even use the pkg_descr
12:47:13 <SyntaxLaptop> so now it should be more correct :)
12:47:35 <SyntaxLaptop> I didn't fix distribution.Make yet, though
12:48:56 * Marvin-- sips on a 15 years old Dalwhinnie
12:49:16 <SyntaxLaptop> it's  apretty day, so I'm going to go hack outside.
12:49:25 <SyntaxLaptop> Marvin--: feel free to fix D.Make, otherwise, I'll fix it later.
12:49:38 <Marvin--> looks like a trivial change
12:49:39 <SyntaxLaptop> we're really close to a release, all we need is that parser
12:49:42 <SyntaxLaptop> yeah sure
12:50:13 * bringert is updating XmlRpc to work with the new defaultMain
12:50:29 <andersca> ok
12:50:34 <bringert> :)
12:51:07 * SyntaxLaptop apologizes for the moving target :)
12:51:20 <bringert> to package HaskellDB with Cabal, we would need to have the PackageDescription depend on the installed packages
12:51:35 <Marvin--> new heights of laziness: instead of using galeon's url autocomplete to go to the eurohaskell wiki page, I used the smart bookmark for google (ctrl+L "google eurohaskell")
12:51:41 <Marvin--> who needs bookmarks
12:51:46 <SyntaxLaptop> bringert: I should warn you that Setup.distribution, both the filename and the syntax, will probably change.
12:51:48 <bringert> e.g. only build wxHaskell support if wxHaskell is available
12:52:34 <SyntaxLaptop> bringert: yeah, that's tricky... that's one thing I don't like about having it in a static file.
12:52:44 <SyntaxLaptop> we should talk about it on th elist.  that' sa good example, I thought of some others.
12:53:07 <bringert> is there a reason to have a static file instead of a haskell module?
12:53:59 <Marvin--> I think that's something you should do by intercepting the build system between the parse and the defaultMain
12:54:17 <SyntaxLaptop> yeah: support for external tools eg configure, visual stuido
12:54:29 <SyntaxLaptop> OK I gotta go. feel free to post your thoughts to the libraries mailing list, JaffaCake has some thougths here too
12:54:30 <SyntaxLaptop> peace.
12:54:31 * SyntaxLaptop &
14:24:38 <shapr> Marvin--: months ago I shortened "google eurohaskell" to "g eurohaskell"
14:27:30 * Marvin-- bows in deference to shapr
14:27:47 <andersca> http://ridley.csbnet.se/gallery/eurohaskell/p1010059
14:27:49 <andersca> what a nice comment
14:28:04 <Marvin--> haha
14:28:22 <shapr> 544 views in the EuroHaskell gallery
14:28:22 <opet> LOL
14:28:42 <andersca> http://ridley.csbnet.se/gallery/eurohaskell/p1010026 and this is the most viewed picture of them all
14:29:35 <shapr> 223 views going for http://ridley.csbnet.se/gallery/eurohaskell/p1010059
14:29:39 <andersca> ah
14:29:49 <andersca> except for that one then :)
14:29:51 <shapr> andersca's signs are top of the charts!
14:30:25 <shapr> andersca: oh, I posted the url to the gallery on lambda.weblogs.com too :-)
14:30:28 <andersca> neat
14:30:42 <andersca> good thing I have a 10G/day limit
14:30:46 <shapr> heh!
14:30:47 <Riastradh> Ew, I don't like the new look of the wiki's RecentChanges page.
14:30:53 <andersca> @arr
14:30:53 <lambdabot> Aye
14:30:59 <shapr> @arr
14:31:00 <lambdabot> May the clap make ye incapable of Cracking Jenny's Tea Cup.
14:31:00 <Riastradh> lambdabot agrees with me!
14:32:49 <shapr> ah, the wiki spammers are getting smarter.
14:33:07 <shapr> "BayesianStatistics are very interesting and informative Good luck ! Paul $URL"
14:33:32 <Cale> haha, yeah, I just saw that
14:33:45 <shapr> I just removed the url
14:34:06 <shapr> hiya Verbophobe 
14:34:57 <Cale> interesting that they'd choose that paragraph to spam :)
14:34:59 <shapr> heh, "HUnit is included both as a test case for Cabal, and because Cabal uses HUnit for testing.  Don't panic."
14:35:08 <shapr> Cale: yah, it was amusing for about a second
14:35:11 <shapr> then I removed the url.
14:35:12 <Verbophobe> Hello
14:35:37 <shapr> if I ever meet a spammer, I'll try to cleanse the gene pool by removing their testicles or ovaries.
14:36:00 <andersca> shooting them in the back works too
14:36:15 <shapr> but then they can't serve as an example to others!
14:36:22 <shapr> well, depends where you shoot them I guess
14:36:24 <Verbophobe> Well, that would bring on the whole nature vs. nurture debate...
14:36:31 <Verbophobe> That is, are spammer born, or made?
14:36:34 <Riastradh> You could shoot them in the back towards their, um...
14:36:38 * Riastradh sha'n't continue.
14:36:44 <Lukhas> i won't be so nice, i'll directly clean the planet
14:36:48 <shapr> Verbophobe: I don't care as long as they don't reproduce.
14:36:54 <Verbophobe> Good call.
14:36:59 <Verbophobe> But they can adopt, you know.
14:37:13 <Lukhas> hence the "shooting" option
14:37:18 <shapr> good point.
14:37:23 <Lukhas> the only one that is perfectly safe for Earth :)
14:37:29 <Verbophobe> Yeah...  I'd have to agree.
14:37:33 <Riastradh> You could shoot them somewhere in their spine very carefully so as not to kill them.
14:37:42 <Riastradh> They'd be absolutely paralyzed for the rest of their lives.
14:38:16 <shapr> we could try the Snow Crash option, tattoo "SPAMMER" on their forehead
14:38:21 <Lukhas> depends on where you shoot, yes
14:38:32 <Lukhas> the higher you shoot, the more they'll be paralized
14:38:45 <Lukhas> we have enough population to test the perfect point
14:38:48 <Riastradh> shapr, and make sure it gets embedded into their skulls, too.
14:39:36 <shapr> can Setup.description have comments?
14:55:21 * shapr reads about CABAL
14:55:45 <shapr> hm, what simple source-only Haskell app or library can I package?
14:56:04 * shapr looks at http://www.haskell.org/hawiki/LibrariesAndTools
14:56:15 <shapr> oh duh
14:56:25 <shapr> is QuickCheck is the standard libs?
15:00:36 <Marvin--> yes, Debug.QuickCheck
15:00:47 <shapr> ok, what about QuickCheckM ?
15:01:10 <Marvin--> I think that still sits on John's "unreleased" shelf
15:01:52 <Marvin--> just like Koen's shrink and hat integration stuff
15:02:06 <shapr> yah, that's what JH said at EuroHaskell
15:02:17 <shapr> hiya Hyp3r-ion
15:02:30 <Hyp3rion> :-) hi!
15:05:13 <shapr> Marvin--: do you know if CABAL can actually build C sources that depend on something else yet? can I package HSQL for PostgreSQL and then HaskellDB?
15:07:39 <shapr> gee, it's really easy to create a package that has only one source file.
15:15:31 * shapr hOps fastidiously
15:27:09 <shapr> Installing: /usr/local/lib/Cabal-0.1 Cabal-0.1...
15:27:09 <shapr> Registering Cabal-0.1...
15:27:11 <shapr> w00!
15:27:36 <shapr> how come it uses the dir name rather than the package name?
16:32:54 <SyntaxLaptop> ralf
16:33:47 <ralf> Hi. 
16:33:53 <ralf> Okay.  To work. 
16:35:00 <SyntaxLaptop> work!
17:41:55 <blackdog> shapr: (however many hours later) - Yeah, fair enouhg. I just copied the runTestTT stuff and told it not to show the progressive stuff. (IIRC, there's some way in emacs to select an error and have it take you to the correct line number, right?)
17:43:03 <mattam> goto-next-error or something like this
17:43:13 <phubuh> next-error, which is bound to C-x ` by default
17:43:25 <mattam> bound to F7 or F9 otherwise
18:34:53 <blackdog> brilliant. thanks, guys.
18:36:14 <dons> don't you read maya these days blackdog?
18:38:21 <blackdog> dons: yeah -i've got a screen session for all my cse stuf, so my attentions's always multiplexed.
18:40:23 <dons> multiplexed, eh?
20:44:08 <blackdog> someone seems to have vandalised the front page of the haskell wiki
20:48:23 <Hyp3rion> o_O http://haskell.org/hawiki/FrontPage?action=info this also looks strange
20:52:14 <Riastradh> Just revert the page to the previous version.
20:52:21 <blackdog> obviously, some l33t hacker has rerouted then encryption on our mainframe.
21:13:24 <clausen> anyone know how a non-det turing machine works when there is no way to reach the accept state?
21:14:13 <blackdog> are you programming marvin?
21:14:43 <clausen> ?
21:14:55 <Riastradh> clausen, it fails.
21:15:09 <clausen> Riastradh: how many steps does it take?
21:15:12 <clausen> does it fail instantly?
21:16:01 <blackdog> clausen: sorry, dumb joke. self-hating robot, can't accept itself, blah blah blah...
21:16:17 <clausen> hehe
21:18:04 <Cale> it fails as soon as the input is finished and none of the possibilities have reached the accept state
21:19:18 <clausen> Cale: are you sure?
21:19:26 <clausen> so, it tries every possibility?
21:19:29 <Cale> that's what I thought
21:20:08 <clausen> there's the theorem that says that a problem is in NP <=> you can write a poly-time verification procedure
21:20:25 <clausen> the certificate is generated non-deterministically
21:20:31 <clausen> wouldn't you have to try every certificate?
21:20:45 <clausen> (isn't there an infinite number to check?)
21:20:51 <Cale> A nondeterministic turing machine is just a regular turing machine except that it can fork into multiple states
21:21:24 <clausen> then that theorem is false
21:21:46 <Cale> I doubt it would be called a theorem then :)
21:22:04 <clausen> you know the theorem, right?
21:22:17 <clausen> (maybe I should have bought Sisper after all!)
21:23:04 <Cale> it just means that you can record a certificate of what the NTM did so that an ordinary TM can check the result in polynomial time using the certificate, no?
21:23:36 <clausen> it's an if-and-only-if
21:23:47 <clausen> if the TM can verify, then the NTM can solve
21:24:36 <Cale> well, that way is a little less intuitive, but I wouldn't be surprised :)
21:27:32 <Cale> If there's a certificate for the TM to check the result in polynomial time, then the NTM will simply be able to branch on each of the potential symbols in the certificate (locally finite), and actually find the solution in polynomial time.
21:28:15 <clausen> but, it has to decide in polynomial time
21:28:21 <clausen> (i.e. reject in poly time as well)
21:28:27 <Cale> I think the whole trick is in exactly what the certificate contains. I think just recording which branches the NTM took would be good enough.
21:29:04 <Cale> well, it's similar for rejection
21:29:24 <Cale> presumably the TM needs the certificate to be able to reject in polynomial time as well
21:29:35 <clausen> no
21:29:46 <Cale> no?
21:29:54 <clausen> well, the TM rejects certificates in poly time
21:30:02 <clausen> but how does the NTM reject ALL certificates in poly time?
21:30:18 <Cale> the NTM only creates certificates :)
21:30:33 <Cale> if it fails to solve the problem, then it doesn't make one.
21:30:40 <clausen> so, how long does that take?
21:30:49 <clausen> I don't understand how rejection occurs in NTM
21:30:54 <Cale> well, as long as it takes to run the algo on the NTM
21:31:29 <clausen> so, I should think of an NTM as just fork() ?
21:31:35 <Cale> an NTM is just the same as a turing machine, except for each state, there can be multiple arcs leading out for a given symbol.
21:31:53 <clausen> so, nondet_getbit() just calls fork() ?
21:31:56 <Cale> and it takes them all
21:33:10 <Cale> it only forks if it needs to go to multiple states because there are multiple paths to be handled for a given symbol.
21:33:13 <clausen> yep
21:34:05 <Cale> and then it accepts as soon as the input is finished if any of the branches are in an accept state
21:34:39 <Cale> a certificate just needs to record which branch got to the finish line
21:35:22 <clausen> so, suppose you have a deterministic polynomial-time certificate verifier
21:35:38 <clausen> how do you build a nondet-poly-time solver?
21:36:10 <Cale> That certificate verifier is going to make decisions based on the content of the certificate
21:37:40 <clausen> so, you replace reads to the input certificate with a non-det bit-generator
21:37:45 <clausen> that is idempotent
21:37:52 <Cale> whenever the verifier would make a decision based on the certificate part, the NTM just takes all possible paths that the verifier would take for different symbols on that spot in the cert.
21:38:04 <clausen> I see
21:38:10 <clausen> so, how do we know this will terminate in poly time?
21:38:24 <clausen> hmmm
21:38:25 <Cale> well, the verifier completes in poly time
21:38:35 <clausen> yep
21:38:42 <Cale> and the NTM is following it step for step
21:38:46 <clausen> and its poly relative to the size of the input problem
21:38:48 <clausen> (not the certificate)
21:40:50 <clausen> so, the catch here is:
21:41:06 <clausen> the poly-time verifier must recognize "too-big" certificates in poly time
21:41:13 <clausen> (and reject them)
21:43:35 <Cale> Well, it just consumes the certificate along with the input in locally constant time, using it to make decisions.
21:44:06 <clausen> if you read the entire certificate unconditionally, you're screwed
21:44:24 <clausen> (the TM verifier)
21:44:27 <Cale> why is that?
21:44:36 <Cale> It's only of some finite length
21:44:37 <clausen> because, you must be polynomial in the problem size
21:45:21 <Cale> reading the whole certificate takes time linear in the length of the certificate
21:45:32 <clausen> agreed
21:45:48 <clausen> but if the certificate is 2^[problem size], you haven't solved the problem in poly time
21:45:54 <clausen> (certificate length)
21:45:55 <Cale> so it's not going to break the claim that it's polynomial
21:46:14 <clausen> the theorem requires the TM to run in poly time of the problem size, not the certificate size
21:46:48 <Cale> ah, okay
21:46:57 <Cale> well, this will happen nicely
21:47:22 <Cale> because the NTM that generated the certificate did so in polynomial time in the input size
21:47:32 <clausen> yep
21:47:37 <Cale> so the size of the certificate can't be more than polynomial
21:47:43 <Cale> in the input
21:48:20 <clausen> what I'm saying is:
21:48:27 <clausen> a common way to prove that a problem is in NP
21:48:34 <clausen> is to write a poly-time certificate verifier
21:48:37 <clausen> but, this isn't enough
21:48:48 <clausen> you need to reject certificates that are too big
21:49:16 <Cale> ?
21:49:56 <clausen> actually, to be more precise:
21:50:13 <clausen> to write a poly-time in problem size verifier
21:50:22 <clausen> you need to make sure you don't use more-than-poly certificate
21:50:48 <clausen> make sense?
21:51:02 <clausen> (reading more-than-poly certificate requires more-than-poly time)
21:51:15 <Cale> yeah, the spec for the certificate to be consumed should not specify certificates which are larger than polynomial in the input size.
21:52:15 <Cale> but it shouldn't, as it should just specify which branches the NTM would have taken
21:52:22 <clausen> agreed
21:53:04 <clausen> so, I've been thinking about a universe in which a non-det Turing machine existed
21:53:26 <clausen> even though co-NP != NP
21:53:50 <clausen> you could hook your non-det machine up to another det machine
21:53:53 <clausen> (over a network, say)
21:54:10 <clausen> and ask it to solve a problem
21:54:14 <clausen> and just invert the answer
21:54:34 <clausen> so, existence of non-det machines => existence of even more powerful machines
21:54:47 * clausen thinks this is mind-boggling
21:56:10 <clausen> hang on, why does co-NP != NP?
21:59:15 <Cale> I don't know :)
21:59:24 <Cale> but I need to go to bed
21:59:29 <clausen> night :)
21:59:31 <Cale> night
21:59:54 <desrt> heh
21:59:56 <desrt> what a convo
22:00:00 * desrt goes to bed too :)
22:00:05 * clausen waves
22:00:17 <desrt> nite
22:53:43 <stepcut> greetings!
22:56:50 <stepcut> what good is logging onto the internet via my cellphone if no one is here to share in my victory!!!
