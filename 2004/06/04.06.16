00:05:02 * shapr bounces hoppily
00:13:57 <shapr> good morning #haskell!
00:14:46 <Pseudonym> G'day.
00:15:49 <shapr> g'day Pseudonym, didja get my mail?
00:15:53 <Pseudonym> I did.
00:15:59 <shapr> whaddya think?
00:16:06 <Pseudonym> I just realised how little I use haskell-libs.
00:16:09 <Pseudonym> :-)
00:16:17 <Pseudonym> So I'm unsure if I should care or not.
00:16:17 <shapr> heh
00:17:12 <stepcut> shapr: where can I get the haskell blog stuff?
00:17:25 <shapr> stepcut: which blog? 
00:17:29 <shapr> there are two
00:17:34 <stepcut> two!!!
00:17:40 <stepcut> well, what's the diff?
00:18:00 <shapr> this is BLob : http://shapr.homelinux.net/cgi-bin/blob/BlobHtml
00:18:14 <shapr> bringert wrote it, and it does RSS, XmlRpc, etc
00:18:21 <shapr> this is PLog : http://shapr.homelinux.net/~shae/blog/
00:18:39 <shapr> Pete Gammie wrote it, and it does abbreviations, autoresizing of images, etc
00:18:52 <shapr> BLob is designed to do input and editing via the web
00:18:59 <shapr> PLog is filesytem based
00:19:17 <stepcut> blob is haskelldb based?
00:19:21 <shapr> yup
00:19:48 <stepcut> why do you use Plog? because Blob was not around? Or because PLog has features you want?
00:20:03 <shapr> and bringert wrote up a patch where SQLite gets type info from the DBInfo description I think, so bringert's BLob uses SQLite
00:20:41 <Pseudonym> Did EuroHaskell produce any interesting code?
00:20:45 <shapr> yes, BLob is a very recent creation, something like two weeks old
00:20:55 <shapr> Pseudonym: library-infrastructure got a big push!
00:21:04 <shapr> and hOp got more useful code
00:21:04 <stepcut> shapr: thanks, I will play around
00:21:04 <Pseudonym> Oh, excellent.
00:21:10 <Pseudonym> That's important.
00:21:16 <shapr> and andersca wrote more on readline
00:21:54 <shapr> stepcut: personally, I want to hack the auto-image-resize support from PLog into BLob, becuase BLob does RSS and all my blogger friends want to see my RSS feed.
00:22:14 <shapr> stepcut: also, BLob uses RSS code from you of course :-)
00:22:56 <stepcut> :p
00:23:02 * stepcut goes to bed
00:23:15 <stepcut> yeah, RSS is important for my needs
00:23:38 <shapr> I think I'll switch to BLob anyway, and try to hack PLog into a pre-processor or something
00:24:01 <shapr> I like being able to throw the [img foo.jpg] tag into PLog source and it automatically resizes, makes a link, etc
00:24:21 <shapr> but BLob has more webby features
00:26:09 <shapr> Pseudonym: so, does that mean I should give in to my urge to bash haskell-libs cvs tree into shape by ripping it into separate darcs repos?
00:26:24 <Pseudonym> If you like, yes.
00:26:48 <shapr> oh, have you used darcs?
00:27:05 <Pseudonym> Nope.
00:27:25 <shapr> if you want the short intro, ask me when you fifteen minutes free :-)
00:28:31 <shapr> er "when you have"
00:28:32 <shapr> eesh
00:30:28 <shapr> oh, I've been thinking about the multi-blog feature of BLob, and I had the idea to create a haskell blog that's sort of like Caml weekly and Python daily, where any interested party could get the login and insert an entry mentioning that their app/lib/paper/etc had been updated/published/whatever
00:30:31 <Pseudonym> Ah, I love the Sun forte compiler.
00:30:44 <Pseudonym> When you say "no optimisations", you REALLY mean "no optimisations".
00:30:45 * shapr just had ten hours of sleep, and is now extremely bouncy
00:31:02 <Pseudonym> Every line of C/C++ code is translated to a block of assembly, construct-for-construct.
00:31:07 <Pseudonym> No register allocation.
00:31:20 <Pseudonym> No smart code generation.
00:31:29 <shapr> yow
00:31:37 <Pseudonym> Runs at about 1/10th the speed.
00:31:45 <Pseudonym> Easy to debug, though.
00:53:03 <ozone> shapr: that unsafePerformIO is the coolest thing ever
00:53:54 <andersca> which one?
00:54:47 * shapr points to andersca
00:54:49 <shapr> he did it!
00:55:03 <andersca> ah, that :)
00:56:04 <ozone> andersca: please sir, may i shake your hand
00:56:08 <ozone> (assuming you've washed it)
00:56:43 <Pseudonym> I think you need to, after using unsafePerformIO.
00:56:52 <Pseudonym> (Yes, that was deliberate.)
01:01:55 <andersca> http://www.niksula.cs.hut.fi/~walther/fun/paint-me-black.html
01:08:09 <shapr> hi wmg 
01:08:15 <wmg> hi shapr
01:10:47 <shapr> looking for haskell info?
01:11:00 <wmg> nothing in particular
01:11:15 <shapr> have any general questions?
01:11:46 <andersca> shapr is our official door mat
01:11:50 <wmg> heh
01:12:06 <shapr> with computers, you can now have a doormat that welcomes new visitors!
01:12:08 <wmg> I'm curious how well you can call to/from haskell with other languages
01:12:29 <shapr> the FFI allows you to call to/from C
01:12:47 <shapr> skew has written up a Python-Haskell interface that uses that
01:13:00 <wmg> so if I can get to C I can get to Haskell?
01:13:02 <shapr> bringert wrote an XmlRpc lib that works fine with Zope
01:13:07 <shapr> yup
01:13:19 <shapr> I think there's Haskell CORBA support out there somewhere
01:13:24 <wmg> the mind shudders
01:13:56 <shapr> the FFI has been used for bindings to databases, widget kits, and lots of other stuff
01:14:56 <wmg> hmm
01:15:12 <wmg> well I'm still at the part of "functional programming with haskell" where I'm turning horse heads upside down,
01:15:17 <wmg> so maybe I'll have more questions in a few weeks
01:15:29 <shapr> have you found the various intros, tutorials, etc?
01:15:36 <shapr> I can give you the quick tour if you haven't
01:15:52 <wmg> I've found about a dozen "short intros to haskell" which all say essentially the same thing
01:15:55 <wmg> so I bought a book
01:16:00 <shapr> which book?
01:16:06 <andersca> the craft of functional programming is pretty good
01:16:15 <wmg> let me find its actual title...
01:16:22 <shapr> and Haskell School of Expression is nice too
01:16:39 <wmg> haskell: the craft of functional programming
01:16:57 <shapr> yah, that's Thompson's book. I learned from that book and lots of questions here on #haskell
01:18:08 <wmg> I like it so far
01:18:29 <andersca> it's pretty good
01:18:37 <andersca> every time I sit down with it I discover something new in it
01:19:16 <wmg> I'm thinking of porting my pet LISP project to it since I'm keen on the idea of compiling to a native executable
01:19:19 <Pseudonym> Must away.  Nytol!
01:20:08 <shapr> wmg: what sort of project?
01:20:21 <wmg> oh it's a music theory analysis program
01:20:43 <shapr> sounds interesting, some sort of scaled pattern recognition?
01:21:49 <wmg> it's an analysis engine based on extensible rulesets; it comes with the basic western music theory systems as part of it,
01:21:55 <wmg> but a user can add other music theory systems
01:22:25 <shapr> what sort of input do you get? raw sound? notes in one system?
01:22:29 <wmg> in theory
01:22:55 <wmg> oh input is ascii music representation formats like TeX or Lilypond
01:23:14 <wmg> but you could write a sound translator I suppose; the input is separate from the analysis engine
01:23:22 <shapr> sounds nifty
01:23:31 <wmg> we'll see
01:23:57 <shapr> the only related Haskell code that comes to mind is Haskore and its extensions.
01:24:11 <wmg> It's in LISP right now but because of the nature of the beast I think I'd be better served by a lazy language
01:24:19 <shapr> but it's only distantly related, since it's a set of combinators for making musical patterns rather than the other way around
01:25:58 <shapr> bon matin Lukhas 
01:26:23 <Lukhas> salut shapr :)
01:27:13 <shapr> I was at the EuroPython conference last week, and I met this guy who gave a presenatation about his build system. I asked him whether he modeled the build process as a directed acyclic graph, and he said he didn't use any deep theory in his system.
01:27:52 <shapr> are DAGs deep theory?
01:30:39 <ibid> nope :)
01:30:57 <ibid> more like shallow theory 
01:32:42 <shapr> or maybe 'deep theory' means 'anything I don't understand yet' ?
01:33:27 <ibid> for people who don't understand much theory, yes
01:33:37 <ibid> but there are genuine deep theories as well
01:33:53 <ibid> (or it may be that i just don't understand them yet :)
01:33:55 <shapr> category theory seems deep to me
01:33:56 * shapr laughs
01:34:31 <shapr> I don't understand category theory much at all, that's probably why it seems deep to me.
01:39:14 <shapr> g'day mbossa 
01:39:28 <shapr> ozone: I'm very interested in the recursive dynloading/hs-plugin stuff
01:40:17 <mbossa> howdy
01:40:37 <ozone> shapr: have you seen our paper on it?
01:41:38 <shapr> is it the same as the hs-plugins write-up?
01:41:58 <ozone> not sure what write-up you speak of
01:42:03 <ozone> the paper's website is here:
01:42:03 <ozone> http://www.cse.unsw.edu.au/~dons/hs-plugins/paper/
01:42:08 <ozone> you can grab the full paper from there
01:42:20 <ozone> i thikn it's a good read, but i might be a bit bias. ;)
01:42:25 <shapr> :-)
01:43:00 <shapr> the recent announcement of eval was most interesting
01:43:52 <ozone> yeah, that was rather naet.  i put a code snippet in the paper about it, and don went and implemented it. ;)
01:44:11 <ozone> plugs is also very neat
01:44:15 <ozone> ghci, but faster. ;)
02:06:20 <shapr> hoi wouter 
02:06:39 <wouter> hi
02:06:43 <shapr> what's up?
02:06:57 <shapr> written any cool code lately?
02:07:08 * shapr is writing non-cool work code 
02:07:28 <Lunar^> yo shapr 
02:07:49 <shapr> y0 Lunar^, wassup?
02:07:52 * shapr hOps
02:08:01 <wouter> no - but I'll probably start working implementing some ideas for my master's thesis today - which should be interesting.
02:08:09 <Lunar^> shapr: Doing a lot of sysadmin stuff
02:08:12 <shapr> Lunar^: I want a darcs repo so I can pull the latest and greatest changes
02:08:17 <shapr> wouter: oh that sounds like fun
02:08:48 <shapr> wouter: I think I've asked this before, but I've forgotten... what's your master's thesis on?
02:08:52 <shapr> greetings gp
02:09:08 <wouter> shapr: attribute grammars and haskell compilers.
02:09:24 <shapr> oh you must be at UU
02:09:28 <Lunar^> shapr: Did you know that I actually use darcs to version a /etc ?
02:09:34 <shapr> and working with Mr. Attribute Grammar himself :-)
02:09:44 <wouter> shapr: yep
02:09:51 <shapr> Lunar^: oh, I've only gotten up to using it for my home dir config files
02:10:01 <kosmikus> wouter: hi there :)
02:10:16 <kosmikus> nice to see you here
02:10:48 <wouter> kosmikus: hoi!
02:11:09 <wouter> kosmikus: how's your thesis coming along?
02:11:16 <shapr> do you guys know Wouter van Oortmerssen?
02:11:42 <shapr> hola cuelebre 
02:12:12 <kosmikus> wouter: off to the reading committee last friday
02:12:23 <cuelebre> good morning , hola shapr 
02:14:47 <wouter> shapr: no, who is he?
02:15:09 <shapr> writer of strange programming languages: http://wouter.fov120.com/
02:15:38 <shapr> very interesting stuff like this: http://wouter.fov120.com/proglang/pix/sauer.gif
02:15:43 <shapr> that's his saurkraut language
02:15:55 <shapr> er "sauerkraut"
02:31:49 <shapr> wow, okasaki on the libraries@ list
03:00:56 <shapr> g'day JaffaCake 
03:01:14 <JaffaCake> hey shapr
03:01:29 <shapr> any interesting code?
03:01:43 <shapr> oh, did you see John Hughes on the unicycle?
03:02:08 <shapr> EuroHaskell was lots of fun.
03:03:54 <dons> shapr: looks like it was fun!
03:04:17 <shapr> so, are you guys going to start AuHaskell?
03:04:22 <dons> I especially like the signs
03:04:30 <shapr> Ozskell?
03:04:30 <dons> maybe we should!
03:04:40 * shapr tries to think of a good cheesy name
03:04:48 <shapr> Hauskell?
03:04:56 <dons> :}
03:05:53 <Lunar^> AuHaskell ?
03:06:17 <shapr> Australia + Haskell
03:06:27 <phubuh> TossAnotherShrimpOnTheBarbeyMateyHaskell
03:06:29 <Lunar^> JaffaCake: The select(2) equivalent has rised once more on haskell-cafe
03:06:58 <JaffaCake> Lunar^: has it? i haven't checked haskell-cafe today
03:07:01 <Lunar^> JaffaCake: I'm wondering how much work would imply the change from BlockedOnMVar to BlockedOnMVar_s_, but it seems possible
03:07:16 <Lunar^> As far as I looked
03:07:26 <JaffaCake> ooooh, you want to wait for multiple MVars?  That's hard
03:07:49 <Lunar^> select(2)...
03:07:56 <dons> JaffaCake: can't build head with another 6.3..
03:07:58 <dons> deSugar/DsMeta.hs:574:61: Not in scope: type constructor or class `TH.Guard'
03:08:38 <JaffaCake> Lunar^: what are you suggesting?  we can't use select(2) on MVars..
03:09:11 <JaffaCake> dons: hmmm, our nightly build failed due to network problems last night, so I haven't seen that
03:09:52 <dons> looks like head goes through using stable though
03:10:15 <JaffaCake> I'll try and kick off a build 
03:10:35 <Lunar^> JaffaCake: Sorry for the misunderstanding, what Alex is missing (and I think he is not the only one) is something that act has the same features as the *nix select(2).
03:11:02 <JaffaCake> right, yeah I'm just reading his message
03:11:09 <Lunar^> JaffaCake: -> waiting for more than one MVar actually
03:12:18 <JaffaCake> I seem to recall there's some problems with doing that, but I might be thinking about the case where you need to take multiple MVars... which is hard because you need ordering to avoid deadlock
03:12:59 <shapr> hiya gintas!
03:14:01 <JaffaCake> Lunar^: I think that using multiple threads and a single channel to merge is the right way, as Tomasz's reply suggests
03:15:13 <Lunar^> JaffaCake: What about efficency ?
03:15:40 <JaffaCake> well, you only create the threads and the merge channel once
03:15:57 <JaffaCake> it should be pretty efficient
03:16:04 <Lunar^> Oh, by the way, I had the chance to ask John Hughes about using Arrows in hOp, and he said that, from his point of view, they could fit in nicely :)
03:16:12 <JaffaCake> the problem is that if you want to also use the original channels independently
03:16:49 <JaffaCake> cool (I think, I'm not an arrows person :))
03:19:04 <Lunar^> Anyway, this idea of waiting multiple MVars seems something useful
03:21:20 * JaffaCake browses the EuroHaskell photos
03:25:45 <dons> JaffaCake: hm. my nightly build went through. might be some artefact of the tweaked compiler I'm using
03:25:51 <shapr> hoi arjanb, hoe gaat het?
03:26:33 <JaffaCake> dons: is your fptools/libraries completely up to date?
03:27:45 <dons> yep. I think the 6.3 I'm building with was an experiment with stuff missing
03:27:51 <arjanb> hey shapr
03:30:44 <dons> whoop. dynamically loaded the dynamic loader :) 
03:30:48 <shapr> yay!
03:30:59 <dons> ozone got the SymX's right.
03:33:54 <shapr> do you have a darcs repo up?
03:34:24 <dons> for hs-plugins?
03:35:19 <shapr> yup
03:35:23 <ozone> hey don
03:35:31 <ozone> we have a CVS repo
03:35:39 <ozone> hey, yeah, why don't we have a darcs repo, don? :)
03:35:50 * ozone puts all the blame on don and runs away
03:35:52 <dons> 'cause of chakcvs
03:36:01 <shapr> what's chakcvs?
03:36:01 <dons> *but* there are nightly cvs snapshots
03:36:26 <dons> our research group has a communal cvs repo
03:36:31 <shapr> ah
03:36:44 <ozone> well, it would be pretty easy to make it available via darcs
03:36:50 <ozone> only then we need to have a darcs<->cvs gateway
03:36:59 <dons> yep. this is how I originally had it set up
03:37:01 <ozone> which is too much bother for any of us to actually write :)
03:37:09 <shapr> I think there's a good one way gateway
03:37:16 <shapr> but not two way
03:37:21 <dons> just need a cron job to keep it up to date
03:39:36 <shapr> except for win32 pickiness, darcs seems to be easier than cvs
03:39:55 <dons> definately. 
03:39:59 <ozone> what win32 pickiness do you speak of?
03:40:16 <ozone> dons: definitely
03:40:27 <ozone> (sorry, my anal spelling checker side has come out)
03:40:30 <dons> used to be issues with whitespace in filenames. think that disappeared about 0.9.12
03:40:34 <dons> ozone: :p
03:40:50 <shapr> the 'darcs send' part calls sendmail or MAPI when sending patches via email, and the MAPI part isn't that great
03:41:15 <ozone> darcs send uses MAPI?  wow
03:41:42 <ozone> dons: patch looks perfectly OK to me
03:42:02 <dons> yep
03:42:08 <shapr> there are also complexity problems with really big pulls, like adding the linux kernel source all at once.
03:42:45 <shapr> iirc, David he's going to fix that after 1.0 has been released
03:43:13 <shapr> compared to the various problems of cvs, that's still an improvement
03:43:30 <dons> ozone: were you running ghci+plugins on the mac?
03:45:08 <ozone> dons: yes
03:45:20 <dons> cool.
03:45:25 <ozone> shapr: is 1.0 scheduled for release soon?
03:46:09 <shapr> I dunno
03:48:11 <dons> there you go ozone
03:50:02 <dons> now to load hs-plugins into itself...
03:50:22 <dons> I always wondered whether anyone had loaded GHCi in GHCi?
03:50:57 * shapr waits for the universe to explode
03:51:02 <JaffaCake> dons: be my guest :)
03:51:17 * JaffaCake runs away
03:51:43 <andersca> hi JaffaCake
03:51:53 <JaffaCake> hi there
03:52:05 <ozone> dons: schweet
03:52:12 <ozone> dons: i like the "tested on OSX and OpenBSD"
03:52:23 <dons> ;)
03:52:40 <dons> what's this "linux" everyone's talking about?
03:52:41 <ozone> PLS is turning into the alternative platform group :)
03:53:31 <shapr> any BeOS?
03:53:43 <shapr> or hOp?
03:53:59 <dons> ozone: need to load an eval> prompt at the GHCi prompt
03:54:31 <dons> shapr: nope. :(
03:55:47 <JaffaCake> dons: go ahead and commit that patch
03:55:59 <dons> thanks
03:55:59 <JaffaCake> oh, you already did, never mind
03:56:08 <dons> :}
03:56:17 <JaffaCake> I'll merge it
03:56:24 <dons> even better!
03:57:21 <ozone> dons: ahaha
03:57:38 <ozone> or a GHCi> prompt in plugs
03:57:58 <ozone> dons: i think it's time for hssh
03:58:02 <ozone> take this, esther!
03:58:04 <ozone> ok
03:58:08 <ozone> gotta run
03:58:11 <ozone> bbl
04:28:20 <shapr> sure is quiet today.
04:28:41 <andersca> yeah
04:28:48 * andersca makes some noise
04:28:55 <shapr> andersca: hey, is your readline code in a darcs repo somewhere?
04:29:00 <andersca> not yet
04:29:07 <shapr> ok
04:29:15 <shapr> not that I can use it right away, just curious
04:29:27 <andersca> it's pretty broken right now
04:34:29 <Jerub> shapr: I'm considering how to publish irc logs over RSS....
04:36:27 <shapr> per day? per hour?
04:36:32 <shapr> per amount of traffic?
04:36:54 <Jerub> shapr: per hour.
04:38:21 <earthy> per line! :P
04:39:09 <Jerub> earthy: silence mortal.
04:39:30 <chucky> user configurable? :)
04:40:52 <earthy> do not meddle in the affairs of jerubs, for thou art cruncy and taste good with ketchup?
04:41:41 <Jerub> earthy: no, thats dragons.
04:41:58 <Jerub> earthy: jerub decimated an army of 120,000 with 300 men iirc. 
04:42:06 <earthy> I thought that was wizards.
04:43:09 <Jerub> http://www.wsu.edu:8080/~dee/HEBREWS/GIDEON.HTM <- chapter 8 verse 3
04:43:17 <Jerub> earthy: "subtle and quick to anger" is wizards.
04:43:48 <earthy> Jerub-baal, aka Gideon. yah, I foudn hi
04:43:52 <earthy> found him, even
04:44:41 <Jerub> I used to use JerubBaal as my nick but it confused people.
04:46:13 <Lunar^> shapr: I'm really considering to use PearPC for hOp's devel
04:46:35 <shapr> nifty
04:49:19 <shapr> Lunar^: so hOp could run on both PPC and x86?
04:53:13 <Lunar^> shapr: mhhh... die x86 die :)
04:53:18 * shapr grins
04:53:31 <Lunar^> shapr: writing a ppc assembly is so much easir
04:53:34 <Lunar^> +easier
04:53:56 <shapr> are PPC systems as cheap as x86?
04:54:40 <shapr> are there 4-way PPCs?
04:56:23 <chucky> I've never written PPC assembly. I know SPARC is a joy though. :) And compiling to x86 code is hell
04:58:40 <chucky> how much assembly is there in hOp anyway?
05:10:44 <chucky> anyone skilled in wxhaskell here?
05:11:41 <earthy> um... I know of but 2 people I would apply that qualification to
05:11:52 <earthy> and both are not here. ;)
05:12:33 <chucky> hmm I think I just solved my own problem by trying to describe it
05:12:44 <earthy> ah. the `tell your granny'-effect
05:14:12 <chucky> yes. Or at least I gained some more understanding. :)
05:35:42 <shapr> greetings gintas_, how was the trip home?
05:37:36 <shapr> JaffaCake: any thoughts on going parallel (SMP/PVM/MPI/etc) with base GHC? Is it likely/planned/never gonna happen/etc?
05:38:09 <JaffaCake> not gonna happen, for a long time at least
05:38:28 <shapr> long time being ~5 years?
05:38:36 <JaffaCake> we'll happily incorporate the code if the parallel folks update to the latest GHC though
05:38:55 <JaffaCake> I dunno... I just don't see a demand for it in the near future
05:39:33 <shapr> ok, thanks
05:39:52 <JaffaCake> you think it might be useful to you?
05:39:57 <shapr> yes :-)
05:40:03 <JaffaCake> ah, what for?
05:40:28 <shapr> I don't plan on purchasing single-cpu systems again if I can help it
05:40:38 <shapr> but I don't know if that counts as demand
05:40:53 <shapr> I don't produce research, and I am not regularly making money with Haskell.
05:41:47 <JaffaCake> well, it depends on whether your Haskell programs can really benefit from running on a parallel implementation, and/or whether other solutions would work just as well
05:41:52 <shapr> I'm also interested in 'grid computing' where a single computation is distributed among many machines
05:43:01 <ozone> dons: poke
05:43:16 <shapr> bonjour rubix 
05:43:38 <JaffaCake> shapr: is this Concurrent Haskell stuff you want to distribute, or do you want to do the Parallel Haskell seq/par style annotations?
05:44:13 <rubix> bonjour shapr 
05:44:41 <shapr> I'd rather not use seq/par, I'd be thrilled if multiple threads could use multiple CPUs
05:45:26 <shapr> of course, then there's the FP dream of exploiting non-strict semantic to get autoparallel code :-)
05:45:30 <JaffaCake> right... I'm not sure if the current GPH impl does that
05:45:41 <JaffaCake> sure :)
05:46:19 <JaffaCake> the parallel Haskell guys have been banging away for a while, and it's still a dream
05:46:21 * JaffaCake sighs
05:46:28 <shapr> you think it could work?
05:46:44 <shapr> the only working autoparallel I've seen is Sisal, Nesl, etc, all data parallel
05:47:07 <JaffaCake> GHC on top of PVM or MPI to take advantage of an SMP...  sure
05:47:33 <JaffaCake> hehe, 4 TLAs in one sentence
05:47:42 <shapr> is the main problem a distributed heap?
05:47:56 <JaffaCake> that's pretty much solved.. the GPH implementation does it
05:48:11 <shapr> oh, does it do distributed GC also?
05:48:15 <JaffaCake> yep
05:48:18 <shapr> spiffy!
05:48:37 <JaffaCake> performance is another matter... lots of communication between the heaps can kill you
05:49:09 <JaffaCake> oh, and I can't remember what happens with MVars, but the Distributed Haskell project has addressed that
05:50:33 <Lunar^> chucky: For bootstrapping you actually need to write an assembler
05:51:55 <chucky> oh right you said that in your talk. Nasty. :)
05:52:12 <ozone> Lunar^: did you give a presentation at eurohaskell?
05:53:57 <Lunar^> chucky: and.. mhh.. x86 is such a mess
05:53:59 <Lunar^> ozone: sure :)
05:54:03 <shapr> hm, goffin looks very spiffy, does it work on standard GHC? or does it require GpH/GdH?
05:54:07 <Lunar^> ozone: I had a great time :)
05:54:11 <ozone> Lunar^: oh, very nice
05:54:15 <ozone> are your slides available anywhere?
05:54:19 <Lunar^> ozone: I'm looking forward to do something similar for IFL'04
05:54:43 <Lunar^> ozone: I would like sebc to review them before, it'll be on my hOp page in one day or two
05:56:06 <ozone> Lunar^: coolness
06:19:51 <shapr> hi SyntaxNinja! how's code?
06:22:54 <shapr> g'day clausen, how's life?
06:23:15 <clausen> hi shapr
06:23:17 <clausen> still overwhelmed :)
06:23:19 <clausen> so much to learn!
06:23:30 <shapr> I hope life stays that way.
06:23:34 <shapr> for me, at least
06:24:06 <earthy> no major, he's not stunned, he's just resting, he's, he's... pining for the fjofds
06:24:15 <earthy> fjords
06:24:22 <shapr> fjnord
06:24:58 <clausen> shapr: it is a little too much for comfort though
06:25:05 <clausen> it'd be better if I was producing papers at the same time ;)
06:25:17 * clausen only has 1 publication, and none in the works yet :/
06:25:20 <earthy> ah, producing papers
06:25:21 <earthy> yes.
06:25:29 <earthy> let's get back to that.
06:25:49 <shapr> I have lots of ideas for papers, but I haven't sat down and written any.
06:26:15 <shapr> I really should start some.
06:26:33 <shapr> clausen: do you have a bunch of ideas you'd like to write about?
06:27:01 <clausen> shapr: sort of, but I don't know enough yet to do a good job of them
06:27:17 <earthy> then do a sloppy job. ;)
06:27:47 <clausen> earthy: I think this would lead me "off track" too much
06:27:55 <shapr> yah, in my experience I get the most stuff done if I write/code a crappy job, and then refine it.
06:28:06 <clausen> it is really hard to write a paper without knowing what you're talking about
06:28:14 <earthy> then maybe you are on the wrong track
06:28:21 <earthy> and, yes, you are absolutely correct
06:28:35 <earthy> that is why striving for a Ph D is so damn hard.
06:28:40 <shapr> I've discovered it's very good for me to write down the stuff, because my rough recordings often surprise me later by their usefulness
06:28:46 <clausen> I think I'm on the right track, in the sense that I'm asking the right questions
06:28:51 <clausen> and looking in the right places for answers
06:29:04 <earthy> you have to write stuff down that not only you know nothing about, but no one else does either
06:29:05 <clausen> but, the individual ideas I have may well be the wrong track
06:29:25 <clausen> shapr: sure, writing down rough ideas is fine
06:29:35 <clausen> shapr: but publishing them is a different proposition ;)
06:29:39 <shapr> yah, that's true
06:30:08 <ozone> i find paper-writing to be quite beneficial to understanding WTF you are talking about
06:30:18 <ozone> as in, i pretty much never understand WTF i'm talking about
06:30:23 <ozone> but by the time the paper's finished, i understand things pretty well. :)
06:30:23 <Philippa> heh
06:30:25 * earthy grins
06:30:28 <earthy> same here
06:30:30 <Philippa> yeah, that or explaining things on IRC
06:30:30 <shapr> like agreeing to teach a class "gee, I better learn how this works before I try to teach it to someone else"
06:31:19 <earthy> `gee, I'd better stay ahead of the students by about a week in learning how this stuff works'
06:31:29 <ozone> shapr: kinda.  it's a bit different from teaching, because you don't have to explain everything in great detail when you teach
06:31:29 <ozone> on the other hand, if you write a paper, you better damn well explain things properly, because if you don't, your paper gets rejected
06:31:37 <ozone> (or your reputation fizzles in the community)
06:31:55 <earthy> ah, yes.
06:32:15 <clausen> ozone: papers get rejected all the time
06:32:18 <clausen> ozone: it's no big deal
06:33:15 <ozone> clausen: sure.  i guess i should rephrase that and say "you end up writing a crap paper which nobody reads"
06:33:33 <clausen> anyway, I guess I disagree that writing a paper clarifies issues...
06:33:54 * ozone is tempted to add something to the haskell karate level list above 8th dan and write "i am oleg kiselyov"
06:33:59 <clausen> it can, if you are already close to clarifying everything
06:34:00 * shapr grins
06:34:37 <clausen> but, things are never really clarified until the whole research goal is solved
06:35:00 <clausen> things are always murky in research, IMHO
06:43:14 <SyntaxNinja> hihi shapr
07:13:47 * Marvin-- growls at mail Issues
07:14:32 <shapr> Marvin--: you can't get/send mail?
07:15:33 <Marvin--> well, I hadn't bothered configuring the MTA on my laptop to send outgoing mail so my darcs send to SyntaxNinja got frozen
07:15:42 <Marvin--> I think I got it right now, though *hopes*
07:16:42 * Marvin-- prods SyntaxNinja
07:21:29 * SamB wonders why there is no swap :: (a, b) -> (b, a)
07:26:04 <JaffaCake> who needs swap when you've got  uncurry.flip.curry$id
07:26:42 <ozone> or pattern matching. :}
07:30:45 <SamB> swap only takes five chars from the line
07:31:50 <JaffaCake> SamB: that was a joke, sorry :)
07:33:49 <SamB> hmm. my humour detector must be on the fritz...
07:34:34 <SyntaxNinja> hehe
07:36:51 <SyntaxNinja> Marvin--: don't see anything
07:38:00 <Marvin--> then I failed, yay :(
07:38:15 <Marvin--> let me just send you the damn file by regular mail, it's just one file
07:39:32 <shapr> greetings Barrett, what's up?
07:39:43 <SyntaxNinja> Marvin--: OK
07:39:43 <Marvin--> SyntaxNinja: I've been visiting my parents and couldn't be bothered to get connected through their dsl
07:39:45 <SyntaxNinja> but that's so...
07:39:55 <SyntaxNinja> maybe you can make a patch and email the patch?
07:40:01 <SyntaxNinja> that way you get credit in the changelogs :)
07:40:38 <Barrett> Hello shapr, just observing.
07:41:07 <shapr> Barrett: ok, if you have any questions about learning Haskell, the language, libraries, or whatever, feel free to ask
07:41:08 <Marvin--> SyntaxNinja: feh
07:41:08 <SyntaxNinja> Marvin--: were you successful in pacakging gtk2hs or whatever it was?
07:42:51 <Marvin--> SyntaxNinja: I have a list somewhere of the changes necessary for gtk2hs in order to make it work with D.Make, it wasn't that much
07:43:49 <Marvin--> I'm going to contact the authors about it
07:44:55 <SyntaxNinja> cool.  it would be nice to see that somewhere. can you toss it up on a web page sometime?
07:45:47 <SyntaxNinja> pushing that plus bringert's patches.
07:46:47 <Marvin--> well, that's provided the install target works as it should, I haven't actually sat down to compile stuff and install, because it's a hell of a lot of stuff to compile for my poor laptop :)
07:51:33 <ozone> JaffaCake: btw, as you know, i'm working with don on plugins stuff (and general dynamicism mischief)
07:51:47 <ozone> JaffaCake: one of the things that don and i want to have a good look at is getting ghc to work with .so's
07:52:25 <ozone> i've had another look at your notes on that fun subject -- it seems that the main barrier now is the problems where CAFs loaded from shared libraries aren't known by the GC?
07:52:41 <Marvin--> SyntaxNinja: I'm still a newbie at using darcs... I did darcs add and darcs record, don't know what happened after I tried to darcs send it and failed...
07:53:47 <Igloo> Marvin: If you're using exim, does sudo mailq think there is a mail sitting on your machine?
07:54:11 <Marvin--> Igloo: nope
07:54:35 <Marvin--> but this was before I reconfigured exim
07:54:40 <Marvin--> sending mail should work now
07:54:47 <Igloo> Do the exim logs think a mail got sent then?
07:54:58 <Marvin--> no, I got a bounce
07:55:14 <Marvin--> I wonder what'll happen if I try to darcs send again
07:55:31 <shapr> did it bounce because you don't have a public key on the darcs keyring? or what?
07:55:52 <Marvin--> it bounced because I hadn't configured exim to do anything but local delivery
07:56:03 <Marvin--> SyntaxNinja: hm, see if you got a patch now
07:59:14 <SyntaxNinja> yeah, got it.
07:59:22 <Marvin--> cool
08:09:37 * shapr hops randomly
08:10:51 <Lunar^> Is that a real random function...
08:11:15 * shapr isn't sure
08:11:40 <shapr> I don't know which direction I'm hopping until I'm about to hop, does that count?
08:12:03 <Lunar^> Which part of your brain doesn't know ?
08:12:21 <shapr> all of my brain?
08:12:31 <shapr> I often don't know what I'm going to do before I do it.
08:13:01 <shapr> planning is not one of my strong points.
08:16:23 <Philippa> AOL...
08:16:35 <shapr> ?
08:16:42 <Philippa> sorry. Afper speak for "me too"
08:16:52 <shapr> what's it short for?
08:17:05 <ozone> shapr: take a guess :)
08:17:10 <ozone> (really)
08:17:40 <shapr> also on line?
08:18:56 <ozone> hmm, let's see if there's an entry for AOL in the hacker's dictionary or so
08:19:27 <ozone> bingo.
08:19:28 <ozone> http://people.kldp.org/~eunjea/jargon/index.php?query=+AOL&keyword=on
08:19:29 <shapr> @jargon aol
08:19:30 <lambdabot> *** "AOL!" jargon "Jargon File (4.3.0, 30 APR 2001)"
08:19:30 <lambdabot> AOL! n. [Usenet] Common synonym for "Me, too!" alluding to the
08:19:30 <lambdabot>    legendary propensity of America Online users to utter contentless "Me
08:19:31 <lambdabot>    too!" postings. The number of exclamation points following varies from
08:19:33 <lambdabot>    zero to five or so. The pseudo-HTML
08:19:37 <lambdabot>      <AOL>Me, too!</AOL>
08:19:38 <shapr> oh, interesting
08:19:39 <lambdabot> [4 @more lines]
08:19:40 <ozone> eh, damn irc bots
08:19:46 <shapr> it really *does* stand for AOL
09:09:41 <shaleh> anyone had any luck building GreenCard under current Debian sid?
09:09:41 * shapr boings
09:09:56 * shaleh wants to play with HSX11
09:10:46 <shapr> I built HSX11 recently
09:10:48 <shapr> worked fine for me
09:11:06 <shaleh> GreenCard failed to build, complained about unknown compiler options.
09:11:15 <shapr> hm, strange
09:11:16 <shaleh> it sure would be nice if someone had packaged these (-:
09:11:28 <shapr> I totally agree, want to do it? ;-)
09:11:35 <shaleh> ghc -package-name greencard -cpp -fglasgow-exts -fno-prune-tydecls   -c Foreign/GreenCard.hs -o Foreign/GreenCard.o -hisuf hi
09:11:36 <shaleh> ghc-6.2.1: unrecognised flags: -fno-prune-tydecls
09:11:36 <shaleh> Usage: For basic information, try the `--help' option.
09:11:46 <shaleh> shapr: let me get it building first (-:
09:12:43 * shapr grins
09:13:22 <SyntaxNinja> shaleh: I promised myself that i wouldn't package haskell libraries until I got Cabal released :)
09:13:30 <SyntaxNinja> I don't know what everyone else's excuse is ;)
09:14:24 <shapr> my excuse is...
09:14:24 <shapr> um
09:14:27 <Igloo> We're all waiting for you to release it too  :-)
09:14:28 <shapr> I'm too little.
09:14:33 <shapr> oh right, what Igloo said.
09:14:45 <shaleh> any ideas about the compiler error?
09:15:21 <Igloo> I assume it was just an optimisation so could be removed, but I don't know
09:15:44 <shaleh> are the rest of you using 6.2.1?
09:16:51 * Igloo might have some time for a library or two once I get everything compiling again in unstable, which hopefully isn't too far off now
09:19:05 <shaleh> # Options to compile the sources with.
09:19:05 <shaleh> GHC_OPTS = -cpp -fglasgow-exts -fno-prune-tydecls
09:19:26 <shaleh> does the look ok?
09:24:31 <shaleh> well, removing it got it to build
09:25:30 <JaffaCake> remove that flag, it's no longer there
09:25:39 <shaleh> JaffaCake: thanks.
09:25:47 <shaleh> so, is GreenCard a dead project?
09:26:04 <JaffaCake> nope, it's alive and well (sort of)
09:26:17 <JaffaCake> Alastair Reid is rewriting it to use Template Haskell
09:26:33 <JaffaCake> in the meantime I think the old version is still in semi-maintenance
09:27:01 <JaffaCake> I wouldn't use it, personally
09:27:09 <shaleh> hmmmm, but Template Haskell is not intended for mainstream use, is it?
09:27:25 <JaffaCake> it's still pretty experimental, if that's what you mean
09:27:53 <shaleh> JaffaCake: I am trying to use the HSX11 binding, which uses GreenCard.  Perhaps the X11 bindings need to be ported to some other interface.
09:28:23 <JaffaCake> the X11 library has already been ported to hsc2hs
09:28:34 <JaffaCake> checkout fptools/libraries/X11 in CVS
09:28:44 <shaleh> sweet.
09:29:05 <shaleh> man, I just hate projects that only live in CVS (or $VERSION_CONTROL for that matter)
09:29:30 <shaleh> I take it the C -> HS lib is the de facto standard at this point?
09:30:30 <JaffaCake> the C -> HS lib?
09:30:42 <JaffaCake> which lib do you mean, in particular?
09:32:53 <shaleh> the hsc2hs you mentioned above
09:33:06 <JaffaCake> oh, that's a tool not a library
09:33:32 <shaleh> is this the same tool? pool/main/c/c2hs/c2hs_0.12.0-1_i386.deb
09:33:53 <JaffaCake> nope, that's c2hs which is quite different :)
09:34:00 <shaleh> figures.
09:34:03 <shaleh> (-:
09:34:21 <shaleh> ok, where do I get hsc2hs and the X11 (in CVS) from?
09:34:26 <JaffaCake> hsc2hs  ==  small helper tool for writing C bindings distributed with GHC
09:34:48 <shaleh> ah, so I have hsc2hs, keen.
09:34:50 <JaffaCake> c2hs ==  large complicated tool for writing C bindings distributed by Manuel Chakravarty
09:36:50 <shaleh> so, where is the fptools CVS lib?
09:45:42 <Lunar^> shaleh: look at GHC manual, CVS cheat sheet
09:46:11 <shaleh> Lunar^: yeah, amazingly enough, google was able to find it.  I have found googling for haskell knowledge to be kind of hit or miss.
09:46:28 <Lunar^> sure
09:48:18 * shaleh checksout fptools and waits ........................
10:33:18 <gintas> shapr: wasn't monitoring the channel. The trip was fine
10:33:38 <gintas> shapr: by the way, would you sign my GPG key? it's on the businesscard
10:41:19 <CosmicRay> stupid question time...  I'm learning haskell, and in hugs, I can't type in a simple statement like x = 4 / 2
10:41:28 <CosmicRay> Prelude> x = 4 / 2
10:41:28 <CosmicRay> ERROR - Syntax error in input (unexpected `=')
10:41:30 <CosmicRay> what's giong on?
10:41:34 <SyntaxNinja> Igloo: you are the one guy who doesn't need a packaging excuse :)
10:52:03 <Philippa> CosmicRay: Haskell doesn't have assignment
10:52:27 <Philippa> and hugs takes expressions not declarations
10:53:30 <SamB> CosmicRay: if you used ghci, you could almost do that.
10:58:01 <Igloo> Syn: I'm /hoping/ the packaging of ghc, nhc and friends will be fairly low maintenance once it actually works on all arches
10:58:04 <Philippa> SamB: explaining how could be a bitch right now though
10:58:24 <Igloo> Then again, the way gcc and the manglers are going I may be disappointed
10:58:38 * Philippa has a bug in her typechecker and it's gonna take forever to trace :-(
10:59:31 <Philippa> is there a cheat for dumping out debug info from an arbitrary monad? I *know* it's naughty, that's not the point...
11:01:12 <esap> trace
11:01:14 <CosmicRay> Philippa: well I can't define functions either...
11:01:22 <SamB> Philippa: unsafePerformIO is a generic cheat...
11:01:25 <CosmicRay> Prelude> f x = x + 5
11:01:25 <CosmicRay> ERROR - Syntax error in input (unexpected `=')
11:01:41 <esap> cosmic: let f x = x + 5
11:01:48 <Philippa> CosmicRay: yes. As I said, it doesn't take declarations
11:02:06 <SamB> CosmicRay: if that is hugs, you absolutely need a scratch file
11:02:07 <CosmicRay> Philippa: some of these examples are straight out of the haskell tutorial
11:02:13 <Philippa> yes. And they're declarations
11:02:20 <CosmicRay> esap: that provides "unexpected end of input"
11:02:30 <Philippa> hugs doesn't take declarations on its command line, it takes expressions
11:02:38 <CosmicRay> ah.
11:02:39 <esap> cosmic: oh, that works in ghci, but not hugs, hmm...
11:02:40 <CosmicRay> why?
11:02:53 <Philippa> if you want to feed declarations into it, dump 'em in a file then load it into hugs with ":l <filename>"
11:03:17 <CosmicRay> that sucks
11:03:25 <CosmicRay> not too much, but it still sucks :-)
11:03:39 * esap suggests ghc anyway.
11:03:43 <Philippa> not really - take a look at how pattern matching works and you'll realise why it's saving you headaches
11:03:47 <Philippa> yeah, GHCi's good
11:03:53 * CosmicRay is trying ghci now.
11:04:07 <SamB> CosmicRay: hugs has only a few exclusive features. and the ones it has are annoying because you can't use them with ghc-exclusive features...
11:06:44 * SamB wishes C had triple quotes
11:08:01 <Igloo> Philippa: Depending on your code it's often possible to change the monad to be a monad-transformed IO monad easily enough
11:08:58 <esap> igloo, philippa: right, MonadIO and liftIO are useful for that.
11:23:14 <CosmicRay> I'm intersted in haskell libraries for parsing e-mail messages.  I have looked on the hierarchical libraries page and on the list of libraries and can't seem to find anything of itnerest
11:23:23 <CosmicRay> is there no such library, or should I be looking elsewhere?
11:30:54 <CosmicRay> incidentally if there is any ocaml - haskell comparison out there, I'd find it extremely useful
11:35:59 <stepcut`> well, the only two things I miss from ocaml are camlp4 and module functors
11:37:01 <shrimpx> CosmicRay: i think wash does email processing stuffs
11:37:19 <CosmicRay> camlp4 for sure is very cool
11:37:23 <CosmicRay> hard to use but very cool
11:37:27 <stepcut`> :p
11:37:36 <CosmicRay> I notice that there are some haskell libs for working with the AST, though I haven't investigated them yet
11:37:59 <shrimpx> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/#washmail
11:38:11 <stepcut`> CosmicRay: you mean template haskell? Or something else?
11:39:11 <CosmicRay> stepcut`: Not template haskell... I'm just looking at the hierarchical libraries
11:48:12 <phubuh> the viewpoint that haskell programs don't do any I/O, but return an imperative program that does I/O, is the common one, right?
11:49:34 <SamB> phubuh: I guess so. I hadn't thought it all the way through like that, though
11:49:57 <phubuh> ok, i wanted to make sure i'm not teaching controversial lies (-:
11:49:59 <SyntaxNinja> phubuh: if you find any references that say that, please send them to me.  I'm thinking of writing a little article for my blog or wahtever along the lines of "Yes, Haskell can in fact perform IO"
11:50:11 <phubuh> oh.  that reference would be me
11:50:36 <SyntaxNinja> because i had some pretty smart people say something to me like, "So... not to ask a stupid question... but what exactly good is a language where you can't perform IO?"
11:51:37 <SamB> phubuh: that is, that would seem to follow from the way I think about it in the small
11:52:20 <phubuh> ah, well, i'm not saying you can't make IO-ing programs in haskell; it's just my way of understanding the whole monadic io thingy
11:53:01 <phubuh> i think of 'main = putStrLn "hello!"' as a declarative program that returns an imperative program, and when the imperative program is evaluated outside of haskell, 'hello!' is printed
11:53:11 <SamB> phubuh: I mean, that is obviously just one way to think about it.
11:53:18 <phubuh> yeah
11:54:00 <SyntaxNinja> phubuh: then you must send me yourself.
11:54:21 <phubuh> i shall sit in a box and air-mail myself immediately!
11:55:25 <shapr> hi skew
11:56:00 <phubuh> i'm surrounded by s-people
11:56:02 <skew> hi
11:56:02 <SamB> but when the main loop of a program is basicly loop x = x >> loop x... that is a pretty natural way to look at it
11:57:37 <skew> SamB: do you know if that repeatedly allocates and collects, or actually runs in place?
11:59:09 <SyntaxNinja> phubuh: you will conform!
12:03:52 <SyntaxNinja> :)
12:05:00 <SamB> skew: what exactly do you mean?
12:11:30 <shaleh> ok, so I have fptools checked out.  Can I build libraries/X11 without building ALL of fptools?
12:12:56 <skew> SamB: I wonder if that loop x in the body is recomputed each time
12:16:01 <SamB> skew: as computed as an imperative computation can be before it is performed, I'm sure
12:16:30 <skew> I mean, does it allocate a new IO action on the heap, or use the old one
12:19:00 <SamB> x is the same heap object, of course. at least, if your compiler isn't a possibly noncomforming, completely idiotic, call-by-name compiler
12:20:26 <SamB> well, assuming that x actually appears on the heap at all ;-)
12:23:34 <skew> looks like pretty constant memory utilization to me
12:24:03 <skew> I guess ghc must do CSE between the occurances of "loop x"
12:47:03 <shapr> aha, primHtml lets me stuff in a bunch of html as text
12:47:38 * shapr wishes for triple-quoted strings in Haskell
12:48:07 <SamB> shapr: you too, huh?
12:48:15 <Leimy> like python?
12:48:17 <SamB> no wait. I wanted them in C
12:48:26 <SamB> haskell would be nice too, of course
12:48:33 <shapr> yes, like in Python
12:48:44 <SamB> what other kind is there?
12:48:45 <Leimy> I do like that feature
12:48:48 <Leimy> not sure :)
12:49:18 <Leimy> it's like a multiline comment but a string :)
12:49:26 <shapr> JaffaCake: we want triple-quoted Strings!
12:55:07 <Leimy>  new software update?
12:55:25 <Leimy> hmmm nope
12:55:31 <Leimy> just one for Server for a few days back
12:55:52 <Leimy> s/for/from/
12:57:12 <shapr> Server?
12:57:19 <Leimy> doh
12:57:21 <Leimy> wrong chan :)
12:57:24 <Leimy> OS X server :)
12:57:25 <Leimy> hehe
12:57:34 * Leimy has to check his buffers  :)
13:01:25 <shapr> hSetBuffers Confused
13:02:07 <SamB> Prelude IO> :i Confused
13:02:14 <SamB> Type constructor or class not in scope: `Confused'
13:02:25 * shapr grins
13:02:31 <shapr> see, confused you already!
13:03:11 <shapr> one nice thing about triple quote strings is that I don't have to carefully escape a bunch of double quotes in this literal html src I want to stuff in
13:07:13 <stepcut`> mobile phone plans make me angry!
13:08:45 <shapr> because they suck? or what?
13:09:44 <shapr> the part that makes me angry is that it's a complete monopoly, I want a GSM/GPRS/etc pcmcia card
13:10:55 <stepcut`> yeah, it's a ripoff
13:11:27 <stepcut`> like, free nights and weekends
13:11:45 <stepcut`> except 'night time' starts at 9pm, and it will be 11pm where I want to call
13:11:48 <stepcut`> that's real useful
13:13:04 <shapr> it does make you wonder
13:13:26 <stepcut`> so then I think, maybe I'll just get a prepaid phone -- but then minutes expire after 90 days
13:13:30 <shapr> I'd rather setup metro area WiFi ISPs where all 'local' traffic is free, and traffic to other ISPs costs
13:13:30 <stepcut`> what a crock!
13:13:40 <shapr> yah, that's a major ripoff alright
13:13:42 <stepcut`> there minutes -- they don't go bad for christ sake!
13:14:26 <stepcut`> And now they are all charging a "Regulatory Cost Recovery Fee"
13:14:44 <shapr> what's that?
13:14:56 <stepcut`> to help defray its cost incurred in complying with obligations and charges imposed by State and Federal telecom regulations, a gross receipts surcharge, and State and Federal Universal Service Charges. The Regulatory Cost Recovery Fee is not a tax or a government-required charge
13:15:10 <shapr> oh, more ripoff?
13:15:25 <stepcut`> its a fake tax they made up, so they could claim the plan is $29.95, when its really $29.95+$1.25
13:15:57 <shapr> yup, more ripoff
13:16:48 <shapr> I think the more we can make systems peer to peer, the more we can pry the monopolies out of power
13:16:48 <stepcut`> I don't even want a cell phone that much, I just I only have 1 choice of local phone providers, and I do not wish to use that company for local phone service...
13:16:56 <stepcut`> so...
13:17:06 <stepcut`> sipphone.com :p
13:17:09 <shapr> yup!
13:17:36 <stepcut`> but, I need a local phone number, and they don't  have local numbers in San Diego yet
14:49:38 <CosmicRay> what is the normal way to iterate over all lines in a file?
14:49:47 <CosmicRay> I'm thinking I'll need to combine lines with getcontents
14:50:04 <CosmicRay> just now sure where to go after that (I assume Haskell has some version of OCaml's List.iter?)
14:50:31 <Riastradh> flip map . lines . hGetContents
14:51:22 * CosmicRay studies that one for a sec
14:51:36 <CosmicRay> don't I need to use a "do" or something with the monad result from hGetContents?
14:52:11 <Riastradh> Indeed you do.
14:52:23 <Riastradh> What I wrote was egregiously incorrect.
14:52:30 <CosmicRay> thanks for the help then :-)
14:53:16 <Riastradh> \f -> (>>= map f . lines) . hGetContents
14:53:24 <Riastradh> Now to figure out how to get that into pointless style...
14:53:54 <CosmicRay> I have this but it is not right...
14:53:57 <CosmicRay> main = do input <- getContents
14:53:57 <CosmicRay>           iterate (putStrLn) (lines input)
14:54:37 <Riastradh> @type mapM_
14:54:40 <lambdabot> mapM_ :: forall m a b. (Monad m) => (a -> m b) -> [a] -> m ()
14:54:51 <Riastradh> s/iterate/mapM_/1
14:57:50 <Riastradh> I'm being terrible right now.  Just ignore me and go along with your idea, just with mapM_ instead of iterate.
14:58:05 <CosmicRay> why would I use mapM_ instead of mapM?
14:58:10 <CosmicRay> both seem to work
14:58:48 <Riastradh> mapM accumulates an unnecessary result in a list.
14:59:04 <Marvin--> mapM_ discards the results of the computations whereas mapM returns them
14:59:25 <Marvin--> and in the case of putStrLn, a list of ():s isn't all that interesting :)
14:59:28 <CosmicRay> ah.
15:02:25 <CosmicRay> does ghc ship with any regexp support built-in, or must I rely on third-party libraries?
15:03:19 <phubuh> CosmicRay: http://www.haskell.org/ghc/docs/latest/html/libraries/base/Text.Regex.html
15:03:24 <shaleh> gee, are all Debian developers learning haskell all of a sudden (-:
15:03:50 <CosmicRay> bah I am blind
15:03:54 <CosmicRay> thanks phubuh
15:04:01 <CosmicRay> I was looking at that area and just missed it
15:04:07 <phubuh> CosmicRay: there was talk of a really nifty typeclass-based regex interface that looked sort of like perl (in the good sense (yes, there's a good sense of that)) on haskell-cafe a while ago, too
15:04:20 <bringert> and there is HaRP
15:04:25 <shaleh> phubuh: yeah, he had =~ working and the like
15:04:33 <bringert> Haskell Regular Patterns
15:04:46 <Marvin--> HaRP scares me
15:04:48 <CosmicRay> HaRP ships with standard ghc?
15:04:51 <bringert> nope
15:04:59 <CosmicRay> the Text.Regexp doesn't appear to have a sub function
15:05:03 <bringert> it's a preprocessor
15:05:11 <CosmicRay> s/Regexp/Regex/
15:05:12 <bringert> HaRP that is
15:06:02 <shaleh> CosmicRay: Text.Rexes is just POSIX re's
15:06:06 <shaleh> kinda useless
15:06:57 <Jerub> mmmmposix
15:07:02 <phubuh> CosmicRay: http://haskell.org/hawiki/RegexSyntax that's the stuff i was talking about :)
15:08:06 <shaleh> CosmicRay: haskell seems to be behind in the "make it easy to write useful software" department
15:08:39 <ibid> wow, how did this happen?
15:08:50 <bringert> shaleh: is there something specific that you are missing?
15:08:57 <ibid> people i recognise from debian are in #haskell :)
15:11:59 <ibid> (normally it's been the other way around)
15:14:07 <ibid> i ran into a first for me the other week: i actually switched away from haskell in a certain project (i usually do it the other way around)
15:15:46 <Marvin--> what, haskell switches away from you? :)
15:16:01 <ibid> heh
15:16:05 <ibid> i switch to haskell
15:17:55 <ibid> the project was a compiler for a language i'm developing. since the language evolves a lot, i needed to be able to decompose the program by productions (easy in OO; just make a class out of every production), not by passes (easy in FP; each pass is a pattern-matching function over the AST)
15:18:30 <ibid> this decomposition i'm now uses has the advantage that everything about a particular construct is concentrated in one place
15:18:44 <ibid> making it easy to change the language without messing it up
15:18:55 <ibid> anybody want to point out how to do that in haskell :)
15:19:25 <Marvin--> no, I'm going to point myself to bed, though
15:19:32 <phubuh> night Marvin-- 
15:19:47 <ibid> Marvin--: heh, night :)
15:19:50 <ibid> i should, too
15:21:13 <bringert> ibid: for more mature languages, I prefer to have all code for each compiler stage in one place (both in OOP and FP languages), instead of all code for each construct
15:21:31 <ibid> bringert: yeah, it makes sense
15:21:41 <ibid> bringert: but in this case the language evolves as i go
15:21:58 <bringert> I agree, for experimentation with syntax and semantics, putting the code in the abstract syntax can be handy
15:22:12 <ibid> my question is, can that decomposition done elegantly in haskell
15:22:48 <bringert> you could use type classes maybe?
15:23:17 <ibid> works part of the way
15:24:04 <ibid> however, it still distributes the code for a particular language construct
15:24:07 <bringert> class Syntax a where { inferType :: Env -> a -> Type, compile :: SymTab -> a -> Code } etc.
15:24:13 <ibid> yes
15:24:25 <ibid> inferType (Lambda ...)
15:24:30 <ibid> compile (Lambda ...)
15:24:31 <ibid> etc
15:24:39 <ibid> are not together in code
15:24:54 <bringert> the way I though about it, they would be
15:25:02 <ibid> how?
15:25:38 <bringert> maybe I'm saying something stupid, I am making this up as aI go along :)
15:25:46 <ibid> don't we all :)
15:26:08 <ibid> i mean, i can't write
15:26:10 <bringert> instance Syntax Lambda where inferType e (Lambda x t) = ...; compile s (Lambda x t) = ...
15:26:13 <ibid> inferType (Lambda ...)
15:26:21 <ibid> compile (Lambda ...)
15:26:29 <ibid> inferType (App ...)
15:26:32 <ibid> compile (App...)
15:26:44 <ibid> bringert: hmm
15:27:21 <bringert> you'd need some code to traverse the tree though
15:27:22 <arjanb> ibid: that looks like multimethods combined with pattern matching
15:27:31 <ibid> arjanb: that looks like OO to me mostly :)
15:27:52 <ibid> arjanb: multimethods are considered OO, but actually, single dispatch is quite enough for this
15:28:01 <bringert> ibid: you asked how to do it in haskell, not with FP :)
15:28:17 <ibid> bringert: i'm not complaining
15:28:30 <ibid> to you, at least :)
15:28:50 <ibid> can you show a syntax tree for \x -> x + 1 in this system?
15:28:56 <ibid> and how would you declare the types?
15:29:15 * bringert would have to think to answer that question
15:29:21 * bringert is tired
15:29:24 <ibid> :)
15:29:35 * bringert will give it a few minutes
15:30:48 <chucky> hmm if I'm going to continue this wxhaskell thing I need more memory. Everything is swapped out when compiling. :(
15:33:39 <chucky> or switch away from gnome
15:34:03 <Riastradh> The latter would sound more appealing to me.
15:34:45 <shaleh> sorry, I walked away
15:35:03 <chucky> Riastradh: Yes, to my wallet too. :)
15:35:46 <ibid> it sometimes amazes me how we struggle with the same memory issues we did when memories were fifty times smaller than now, and we are still doing the same tasks as we did then
15:35:47 <shaleh> stuff like easy networking, regex, etc. I came from Python most recently (I write C++ for a living).  Haskell feels impoverished after using Python and feels more like C++ where I have to implement a lot.
15:36:19 <ibid> shaleh: impoverished even after using nonstandard libs?
15:36:37 <shaleh> ibid: I have not reached the point of using nonstandard libs.
15:37:01 <chucky> try it. We have some nifty stuff. :)
15:37:15 <shaleh> I understand that the haskell community is smaller and what not.  It kinda feels like Python back in the 1.4 days.
15:37:27 <ibid> shaleh: you should note that haskell and c++ share the division between standard and nonstandard libs; in python, there is no such thing as a standard library :)
15:37:41 <ibid> shaleh: you should investigate the ghc libraries
15:37:42 <shaleh> the plus side is there is plenty to do to get yourself noticed.  That is also the downside (-:
15:38:08 <shaleh> ibid: I plan on it, not done learning the core properly yet though.
15:38:30 * shaleh wishes he could get hsx11 to build easily.
15:38:32 <ibid> shaleh: i'd like to say, don't complain about libraries then ;)
15:38:52 <shaleh> I have fptools checked out from CVS.  Just trying to figure out how to build x11 without building all of fptools.
15:38:54 <chucky> The important thing is to ask for stuff you're missing. If you're lucky, bringert might get into hacking mode and do it over the weekend for you
15:39:02 <ibid> shaleh: building?
15:39:20 <shaleh> ibid: I would like to play with hsx11 from fptools/libraries.
15:39:34 <shaleh> but I do not know how to get it installed on my system.
15:39:40 <ibid> it's not a part of the standard packages?
15:39:43 <shaleh> the readme / install files are not but so helpful.
15:40:01 <ibid> (never heard of hsx11)
15:40:41 <shaleh> ibid: it is in fptools/libraries/X11.
15:40:54 <ibid> i don't touch fptools source :)
15:41:04 <bringert> ibid: put some code at the bottom of http://www.haskell.org/hawiki/HaskellIrcPastePage?action=show
15:41:33 <shaleh> ibid: I wouldn't either, but I want to play with hsx11.  Was thinking about porting twm to haskell.
15:41:54 <ibid> bringert: interesting :)
15:42:03 <ibid> shaleh: it's not part of standard builds?
15:42:14 <bringert> only half-nice, requires extra wrappers in the abstract syntax, and a bit of ugly switching in the instances for the categories (e.g. Term)
15:42:55 <ibid> sometimes i wish i could treat data constructors as type constructors
15:43:09 <shaleh> ibid: does not seem to be in my Debian ver.
15:43:13 <ibid> like, data Syntax = Expr | Stmt
15:43:28 <shaleh> ibid: /usr/lib/ghc-6.2.1 is the place to look, right?
15:43:30 <ibid> data Expr = Lambda Var Expr
15:43:38 <ibid> shaleh: never looked :)
15:43:43 <ibid> etc
15:43:51 <shaleh> etc?
15:44:08 * bringert goes to bed
15:44:10 <ibid> shaleh: it was part of the compilers discussion :)
15:44:16 <shaleh> ah
15:45:51 <ibid> i mean, algebraic data types can be looked at as a depth two inheritance tree where the type constructor is an abstract class and the data constructors inherit from it to form concrete classes
15:46:22 <Riastradh> ibid, make Syntax & Expr be typeclasses.
15:46:23 <ibid> it would be nice to be able to easily create arbitrary-depth inheritance taxonomies
15:46:33 <ibid> Riastradh: like bringert suggested?
15:46:36 <Riastradh> data Lambda = forall a. Expr a => Lambda Var Expr
15:46:48 <ibid> hmm
15:46:56 <ibid> that's not h98, is it
15:47:05 <Riastradh> H98?  How quaint!
15:47:09 <ibid> heh :)
15:47:24 <Riastradh> Wake up, ibid!  This is 2004!  The Haskell standard is -fglasgow-exts now!
15:47:47 <monotonom> heheheh
15:47:52 <stepcut`> heh
15:48:01 <ibid> i almost picture you as scotty in star trek iv reacting to "just use the keyboard" :)
15:48:12 <ibid> "keyboard? how quaint"
15:48:25 <monotonom> hugs -98
15:48:26 <stepcut`> when is the next haskell standard due out anyhow? 2008?
15:48:32 <ibid> Riastradh: that's what i was trying to tell shaleh :)
15:48:54 <ibid> stepcut`: when it's ready, i'd imagine
15:49:08 * shaleh should just sit down and right a haskell book for O'Reilly.
15:49:19 * monotonom picks up the mouse and speaks "main = do <enter>"
15:49:20 <ibid> right?
15:49:42 <ibid> monotonom: computer? hello, computer?
15:52:04 <shaleh> ibid: there is an opengl package for ghc6 in sid, but the X11 dir does not appear to be built.
15:52:26 * shaleh tries to figure out how to change the options to the ghc6 package compilation.
15:52:33 <ibid> i just reread what Riastradh wrote, and thought, what, it's 2004, six years since 1998? it was just yesterday!
15:52:39 <ibid> i'm getting old it seems
15:53:47 <shaleh> Igloo: you alive?
15:54:54 <SamB> stepcut`: the next one is Haskell 2, anyway, isn't it?
15:55:12 <ibid> 98 -> 2
15:55:15 <ibid> yeah, logical :)
15:55:19 <ibid> (yeah, i know)
15:55:31 <shaleh> using a year in the name lets people know how old it is (-:
15:55:36 <shaleh> like using fortran76
15:55:42 <ibid> fortran76?
15:55:48 <shaleh> ibid: it was a joke
15:55:49 <ibid> there was a fortran76?
15:55:57 <ibid> shaleh: there is a fortran 77 :)
15:56:02 <ibid> shaleh: and it's still used
15:56:07 <shaleh> I know
15:56:12 <ibid> i like the old custom of using the year
15:56:40 <ibid> version numbers for languages seems amateurish for some reason
15:57:10 <shaleh> ibid: so, the X11 binding is in the ghc 6.2.1 source, but Igloo does not appear to be building / shipping it.  The openGL version (which uses libX11.so) does not also ship the X11 binding.
15:57:11 <ibid> perhaps because it suggests a canonical implementation, and i don't really like single-implementation languages
16:00:44 <chucky> aaagh here I've been waiting all day for an answer on the wxhaskell mailing list, and I just realised Thunderbird doesn't check folders for new messages automatically by default
16:02:11 <shaleh> chucky: heh
16:02:40 <shaleh> night all
16:04:53 <stepcut`> chucky: hahah
16:08:05 <chucky> That goes under the list of "unreasonable defaults" to me. Hmm I should report it as a GUI bug
16:47:52 <SyntaxLaptop> does anyone want to write the parser for package description files for Cabal?
16:48:11 <phubuh> that depends on the horrorosity of the syntax :-)
16:48:33 <Riastradh> S-expressions!
16:49:05 <ibid> there is no cabal :)
16:49:31 <SyntaxLaptop> phubuh: do you want to invent the syntax?
16:49:38 <SyntaxLaptop> ibid: there will be once someone writes this parser ;)
16:50:27 <ibid> :)
16:50:28 <SyntaxLaptop> I liked Keith wansburgh's suggestion; and I already have a "version range" parser
16:50:31 <ibid> what is it?
16:50:47 <SyntaxLaptop> which?
16:51:13 <phubuh> well, i haven't been following the syntax discussions.  actually, i haven't even been subscribed to libraries
16:51:36 <ibid> SyntaxLaptop: cabal (there is no cabal)
16:51:38 <SyntaxLaptop> phubuh: that's OK, there's not much there about the syntax (thank god)... the basic proposal is something like this:
16:51:53 <SyntaxLaptop>      name:   hunit
16:51:53 <SyntaxLaptop>      version: 4.3
16:51:53 <SyntaxLaptop>      deps:    [ foogle > 2.9
16:51:53 <SyntaxLaptop>               , bargle = 2.5.1
16:51:53 <SyntaxLaptop>               ]
16:51:54 <SyntaxLaptop>      another-field: goes here
16:52:18 <SyntaxLaptop> but whatever you do... don't mention xml
16:52:24 <ibid> use record jars :)
16:52:54 <SyntaxLaptop> ibid: what's that?
16:53:48 <ibid> SyntaxLaptop: debian control files are an example (/var/lib/dpkg/available on a Debian system, and Packages files in the mirrors)
16:53:51 * SyntaxLaptop is going to be confused by ibid until he forgets that I implied there was a Cabal
16:54:32 <ibid> SyntaxLaptop: the name was coined by eric raymond and first used in his TAOUP, afaik
16:55:11 <ibid> i should be in bed by now
16:55:18 <SyntaxLaptop> so is it just field:foo where foo is freeform
16:55:27 <SyntaxLaptop> and the whitespace at the beginning of the next line means it's still part of the field?
16:55:39 <ibid> basically
16:55:50 <ibid> foo may have structure as determined by the particular application
16:56:01 <SyntaxLaptop> right
16:56:43 <ibid> empty lines are used as record separators (or, some other record separators may be used; esr recommends the cookie jar "%%")
16:56:58 <phubuh> ooh, this darcs version shows progress!
16:56:58 <SyntaxLaptop> is this documented someplace?
16:56:59 <ibid> the upside is that there are already tools that parse that format
16:57:04 <SyntaxLaptop> phubuh: which one?
16:57:08 <SyntaxLaptop> ibid: in haskell?
16:57:12 <phubuh> 0.9.20-1
16:57:23 * SyntaxLaptop really should package .21
16:57:30 <ibid> for example, my grep-dctrl would allow useful grep-like queries easily
16:57:34 <ibid> SyntaxLaptop: not really
16:57:43 <ibid> SyntaxLaptop: but it's simple to implement
16:57:49 <ibid> is what documented?
16:58:04 <SyntaxLaptop> ibid: is esr's "definition" of record jars documented
16:58:14 <ibid> it's in TAOUP
16:58:16 <phubuh> http://www.faqs.org/docs/artu/ch05s02.html#id2906931
16:58:43 <ibid> i wrote a paper on them that was rejected for good reason :)
16:58:51 <ibid> (i'm now reworking the said paper)
16:58:53 <SyntaxLaptop> heh
16:59:10 <SyntaxLaptop> ibid: do you need a section where a parser in haskell is given? :)
16:59:22 <phubuh> i could probably write a parsec parser tonight
16:59:36 <SyntaxLaptop> phubuh: if you did, you'd be my bestest friend.
16:59:51 <phubuh> that's incentive enough (-:
16:59:54 <SyntaxLaptop> parsec is the right choice, because that's what the version parser is written in
17:00:06 <SyntaxLaptop> I might even change my name to SyntaxPhubuh
17:00:11 <SyntaxLaptop> though I'm not sure what that might mean.
17:00:12 <phubuh> whee!
17:00:12 <ibid> SyntaxLaptop: nope, it's going to be more logical :)  (that is, i'm investigating a data model based on the record jar format, especially the dctrl format)
17:00:44 <SyntaxLaptop> cool.
17:01:48 <ibid> if you go for the record jar format, i recommend making it compatible with the debian format (ie. blank line as record separator); as i said, there are already tools that understand that format
17:02:02 * ibid mentions grep-dctrl again
17:03:18 <ibid> SyntaxLaptop: that particular format is defined best by debian policy: use it as applicable
17:05:16 <SyntaxLaptop> ok cool.
17:05:59 <ibid> maybe i should install a grep-dctrl -> grep-cabal symlink in the next version? ;)
17:06:20 <ibid> anyway, i need a few hours of sleep so i'm off
17:06:31 <ibid> i need to get up at six or seven am and it's three now...
17:07:50 <SyntaxLaptop> l8r ibid
17:30:22 * phubuh uses both try and lookAhead in one function
17:30:31 * phubuh puts this in his resumé
17:31:38 <SyntaxLaptop> heh
17:32:52 <SyntaxLaptop> "Used try and lookAhead in a single function in a parser for jar records that I implemented for the the Glorious Haskell Cabal"
17:32:59 <SyntaxLaptop> and if your interviewer knows what that means...
17:33:27 <SyntaxLaptop> "So tell me about this Cabal you tried to parse?"
18:19:18 <phubuh> i just realized that i don't know how to use parsec
18:19:37 <phubuh> also, the error "unexpected input; expecing end of input, ..." is pretty puzzling
18:21:00 <phubuh> er, "unexpected end of input; expecting end of input, ..."
18:21:24 <Lemmih> whoa.
18:21:36 <SyntaxLaptop> haha
18:21:50 <SyntaxLaptop> phubuh: there's a bunch of examples in the cabal, under Distribution.Version
18:21:58 <phubuh> oh, nifty
18:26:07 <phubuh> my problem is that i don't know how to elegantly deal with the fact that strings have different endings depending on whether they're in list context or in "toplevel" context
18:26:37 <phubuh> if that makes sense.  if it's in a list, it's terminated by , or ], but if it's not, it's terminated by the next field name
18:26:59 <phubuh> i could put some flag in the user state, but ugh
18:46:37 <Lemmih> Is darcs' ebuild broken?
18:46:58 * phubuh can't parsec at this hour
18:47:02 * phubuh sleeps!
18:48:40 <Pseudonym> http://www.eweek.com/article2/0,1759,1609179,00.asp
18:48:46 <Pseudonym> Whoops, sorry.
18:48:55 <Pseudonym> It's still an interesting article, but didn't mean to paste it. :-)
18:59:37 <SyntaxLaptop> hm. got lost there for a minute...
18:59:48 <SyntaxLaptop> what's ebuild?
19:01:33 <Lemmih> darcs'
19:03:52 <SyntaxLaptop> so... i'm packaging cabal in cabal.  i'm sorry for being such a pervert
19:04:09 <Riastradh> What's perverted about that?
19:04:23 <SyntaxLaptop> eh... requires the makefile to bootstrap, kinda.
19:04:59 <SyntaxLaptop> but I couldn't stand to write the ar command-line when there's a bunch of code right there to do that for me!
19:08:39 <blackdog> <question type=dumb> what's cabal? </>
19:09:08 <clausen> blackdog: there is no cabal
19:24:38 <gini> #join #prolog
19:24:59 <saz_> gini: /join
19:25:03 <gini> sory ..
19:25:39 <gini> i'm very tired
19:27:05 <saz> np
19:32:13 <anduril1> lemmih: darcs-0.9.20 merged fine on my system
19:43:42 <Lemmih> I get the same error with 0.9.20 as with 0.9.21 /-:
19:51:30 <Riastradh> Curses.  I've gone and forgotten the semantics of reflect & reify again.
19:54:18 <saz> Pseudonym: heh, that article sounds.. familiar
20:11:19 <blackdog> clausen: well, that was an obvious trap to fall into. So what is it really? :)
20:11:56 <clausen> dunno, I just know there was a computer server called "there-is-no-cabal"
20:29:12 <SyntaxLaptop> blackdog: cabal is the new name of the library infrastructgure project
20:29:16 <SyntaxLaptop> http://www.haskell.org/cabal
20:31:35 <np_hard> there is no cabal
20:31:39 <np_hard> oh crap
20:31:53 <np_hard> i totally got trolled there :)
20:52:53 <blackdog> SyntaxLaptop: Ah, right, I remember you talking about that. Looks like it's coming along nicely.
21:00:00 <Riastradh> Can anyone here suggest a good book on category theory?
21:02:14 <np_hard> only on #haskell...
21:02:48 <Riastradh> Admittedly, 'on category theory' makes the question rather vague.
21:04:10 <Riastradh> Indeed, that was a terrible question.
21:04:40 <monotonom> If you have a time machine that also lets you explore parallel universes at will, you can find one in the future in which I write one.
21:05:10 <monotonom> In CTL, EF(I write a good book on category theory) :D
21:07:35 <Spark> who was it who gave me a load of apocalyptica beserk a while back
21:07:41 <Spark> it is "the ace"(tm)
21:07:54 <Spark> and gets hammered in the goth clubs around here
21:07:57 <np_hard> apoptygma?
21:08:04 <Spark> something like that
21:08:10 <np_hard> apocalyptica is something else entirely
21:08:12 <Spark> i didnt name them properly so i actually forgot what they were
21:08:20 <Spark> apocalyptica is the cellos isnt it yer
21:08:24 <np_hard> yep
