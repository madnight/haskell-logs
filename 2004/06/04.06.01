02:13:14 --- topic: '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","Donate your brain! - hawiki/UsingHaskellWikiMaterial","related channels #haskell.se #haskelld #darcs","http://www.haskell.org/hawiki/EuroHaskell","http://www.mirror.ac.uk/sites/www.haskell.org/","May 2004 HC&AR: http://www.haskell.org/communities/"]'
02:13:14 --- topic: set by Pseudonym on [Tue May 25 17:24:50 2004]
02:13:14 --- names: list (clog gp Cale arjanb mij yc tic JaffaCake Amadan elmex juhp SuperKaramba _rubix themaximus Fractal Lukhas andersca _Codex skylan stepcut flori Joachim Etaoin shawn desrt Jerub norpan bringert Kuril esap Riastradh lambdabot SamB_on_a_trip Pinnen cbus gdsx ludde dennisb lispy Segora sundeep isomer kosmikus polli jasonw Tomas mikef [dan] edwinb Igloo chucky bluejay gnufan np_hard reffie earthy Hipo smkl Spark Matt-W shrimpx neologism Lor ozone)
02:13:14 --- names: list (ibid Lunar^ Taaus vegai p0lartype ksandstr cmeme sorrow asmodai Jon det jameson|afk shammah keverets wagle)
02:46:30 <javaNewb> evening boy's n gal's
03:02:03 <javaNewb> whats the general way to do a count in haskell?
03:04:08 <vegai> elaborate, please
03:05:28 <javaNewb> well so far i have taken a list of list of String and they are letters, then sorted them, now id like to know how many times each one occurs
03:06:28 <vegai> you want the length of a list?
03:07:42 <kosmikus> so it seems, but function Data.List.group could also be helpful
03:09:22 <javaNewb> yes group would be helpful
03:09:27 <TheHunter> You have [String] and want [(String, Int)] ?
03:09:47 <javaNewb> but im unsure how to test is the String the user inputs matches the String in the sorted list
03:10:09 <javaNewb> i have [[String]] and want [(int, String)]
03:11:28 <TheHunter> (==) works for Strings, too
03:11:48 <javaNewb> so "A" == "A" = True?
03:12:05 <TheHunter> sure
03:12:11 <javaNewb> ahh thanks
03:12:33 <TheHunter> You can compare everything which is an instance of Eq
03:14:40 <javaNewb> haven't quite got my head around that yet :s
03:16:58 <vegai> like with the "OOP"-languages. If your class has a method "equals", you can compare things
03:17:03 <TheHunter> If a is an instance of Eq, so is [a] and (a, ...). That means you test list, lists of lists, lists of tupels, etc. for equality given that the basic types are instances of Eq.
03:17:07 <vegai> except that it
03:17:12 <vegai> ... is much nicer here
03:18:25 <javaNewb> he hehe :)
03:18:30 <javaNewb> okay thankyou i got it working
03:18:46 <javaNewb> used a whole heep of list comps
03:19:38 <javaNewb> [x,y,z] !! 0 == fst[x,y,z]??
03:19:59 <kosmikus> head, not fst
03:21:24 <javaNewb> oh okay fst :: (a,b) -> a
03:23:27 <kosmikus> yes, fst selects the first component of a pair; a pair always contains two elements, and the elements may be of different types
03:23:43 <kosmikus> head selects the first element of a list; a list contains zero or more elements of the same type
03:25:49 <javaNewb> handy
03:34:31 <javaNewb> any one know how to view history in mozilla firefox?
03:35:43 <mikef> Maybe View->History?
03:36:10 <javaNewb> ahh k, no, but i found it under Go -> History
03:36:52 <mikef> Cool.
03:37:00 <TheHunter> Ctrl+H
03:37:01 <javaNewb> ;)
03:42:03 <vegai> how weird that I haven't read haskell.org/tutorial before
03:42:28 <vegai> it has a marvellous section about monads!
03:45:38 <TheHunter> Do you know http://www.nomaware.com/monads/html/ ? I liked this pretty much
03:46:16 <vegai> probably haven't. I'll check that next
03:47:37 <javaNewb> when sorting [(a,b)] the sort function looks at the a's right?
03:48:40 <arjanb> (a,b) < (c,d) = a < c && b < d
03:49:34 <TheHunter> if you want anouther order you can either use SortBy or create a new type and make it an instance of Ord
03:50:14 <TheHunter> arjanb, (1,2) < (1,3) = True
03:51:17 <arjanb> you're right i'm not awake yet
03:51:59 <javaNewb> so a < c || b < d ??
03:53:17 <ludde> probably: a < c || a == c && b < d
03:53:42 <javaNewb> (1, "B") < (2, "C") < (4,"A")
03:54:21 <javaNewb> okay so sort does look at first element in tuple?
03:54:52 <arjanb> and at the second if the first is equal
03:55:04 <kosmikus> lexical ordering
03:55:26 <kosmikus> if you want a different order, you can use sortBy
03:55:39 <javaNewb> (1, "B") < (4, "C") < (4,"A")??
03:55:59 <ludde> javaNewb: no
03:56:10 <ludde> (4, "C") > (4,"A")
03:56:21 <javaNewb> darn
03:57:10 <vegai> why should "C" < "A"?
03:57:23 <javaNewb> ahh, just checking but increasing order == a,b,c,d right?
03:57:55 <javaNewb> i was trying to fit the example to an incorrect situation...sorrie
03:58:48 <kosmikus> ludde's definition is the correct one
04:00:18 <javaNewb> okay :)
04:00:21 <javaNewb> thanks
04:04:30 <javaNewb> where would i find a good tutorial on recursion is haskell?
04:05:46 <earthy> errrr???
04:05:58 <earthy> http://www.haskell.org/learning/ ?
04:06:30 <earthy> make that http://www.haskell.org/learning.html
04:07:33 <javaNewb> ahh its k, my text book is listed there i'll read that again
06:02:49 <Lemmih> Hey. HOpenGL in GHC 6.2.1 doesn't support textures, right? So I have to download the main branch of GHC from CVS?
06:58:12 <Igloo> earthy: http://www.haskell.org/ says "Communities and their Projects (latest report: November 2003)"
07:51:44 <shapr> hoi arjanb 
07:52:26 <arjanb> hey
07:52:30 <earthy> op huus an
07:52:44 --- mode: ChanServ set +o earthy
07:53:08 <earthy> Igloo: I don't have control over the main haskell page
07:53:15 <shapr> you do, sort of
07:53:20 <shapr> you can just edit it :-)
07:53:21 <earthy> but I'll inform John Peterson and Olaf Chitil. :)
07:53:23 <earthy> can I?
07:53:41 <shapr> I assume you have access to the web dir on haskell.org?
07:53:58 <Igloo> If SSH wasn't broken
07:54:16 <shapr> I can get in just fine
07:54:25 * earthy coughs
07:54:27 <Igloo> I'm not really sure what the etiquete is, and haven't read what JP said in the latest HCA&R properly
07:54:33 <Igloo> Oh, can you?
07:54:35 <earthy> well, it doesn't say November anymore. :)
07:54:57 <Igloo> Ah, cvs. and www. are different
07:54:58 <earthy> time to go home. ;)
07:55:20 <shapr> haven't had an account on cvs recently
07:56:37 <shapr> hej spenatmannen 
08:07:00 <SyntaxNinja> y0 shapr
08:07:33 <SyntaxNinja> Igloo, earthy: I would assume that it's fine for anyone to change that page to reflect the correct date
08:07:36 <shapr> y0y0 SyntaxNinja, wassup?
08:08:02 <SyntaxNinja> ssh was broken on cvs, not www (for me, yesterday)
08:08:53 <shapr> is YAHT still hosted on cvs?
08:09:52 <SyntaxNinja> traversing TH tuples is a PIA
08:11:17 <ozone> SyntaxNinja: have you seen seafood's THTraverse module?
08:11:22 <ozone> there was a post to the template-haskell list about it
08:11:28 <ozone> might be able to help you.
08:11:53 <shapr> g'day ozone 
08:12:23 <SyntaxNinja> ozone: thanks!  i'll check it out
08:12:26 <ozone> http://www.haskell.org//pipermail/template-haskell/2003-November/000220.html
08:12:29 <ozone> there you go. :)
08:12:33 <ozone> g'day shae
08:12:52 <ozone> goddamn, i just finished 2 papers and a demo submission
08:12:56 <ozone> i think i might go sleep for the next 300 hours
08:13:36 <shapr> w00
08:13:48 <shapr> hey, did you get any further with arrows?
08:14:11 * SyntaxNinja is giving a talk that'll include darcs on wednesday
08:14:46 <shapr> cool!
08:15:29 <ozone> shapr: nay, i've had a few papers to write :)
08:15:55 <ozone> and another one due friday, and another one the friday after that, and 8 reviews due by tuesday.  so i might get to learning arrows after coming out of hibernation
08:16:20 <shapr> that sounds realistic
08:16:28 <shapr> I should try a realistic schedule sometime.
08:17:17 <SyntaxNinja> heh
08:18:22 <shapr> SyntaxNinja: do you actually use arrows at your job?
08:18:46 <shapr> if so, can you give a short comparison to monads?
08:19:56 <SyntaxNinja> shapr: I do. use them, but just for Yampa... I don't know if i can make a useful comment for the general case.
08:20:24 <shapr> do you think they're generally more useful?
08:20:33 <shapr> any sort of compare/contrast you can give?
08:22:23 <SyntaxNinja> they help me abstract the continuous processing I do in the Yampa framework... I haven't thought very hard about how to do the same thing with monads.
08:23:01 <shapr> could you do more/better stuff with arrows in the place of the monadic frameworks you use ?
08:24:37 <SyntaxNinja> when I'm using arrows, I feel like I have a hammer and am looking for a nail.  I don't yet know where the best places to use them are.
08:25:09 <shapr> ok, thanks for the info
08:25:15 <SyntaxNinja> earthy: this module looks perfect...
08:25:30 <SyntaxNinja> oops, I mean ozone
08:26:01 <kosmikus> yay, revision 250 ...
08:26:07 <shapr> whee!
08:26:29 <shapr> I think I'm going to hit up Anthony Sloane et al for their nhc98 PalmOS code in *any* state
08:27:03 <shapr> I don't care if a single binary takes up 6mb, I hate debugging C code written for the win32 PalmOS SDK
08:27:51 <lispy> is there a technical reason why ghc creates a.out files?  or is it one of those, "It's low priority, and we're busy with the fun stuff." sort of things?
08:28:23 <shapr> try -o Foo
08:28:35 <shapr> or what do you want?
08:28:45 <lispy> i mean a.out as a format, versus elf for example
08:29:11 <ozone> SyntaxNinja: great
08:29:25 <ozone> shapr: he's about 500m from my workplace
08:29:26 <shapr> lispy: it does create ELF
08:29:32 <ozone> (and i still haven't visited him, i feel so bad)
08:30:02 <shapr> ozone: man, I'm desperate for some Haskell on PalmOS action, any of C/Smalltalk/Lisp/Python really suck on PalmOS
08:30:15 <lispy> shapr: oh, okay, i guess i'm all confused then :)
08:30:28 <shapr> well, run file on a binary, see what it says
08:30:38 <lispy> ah, good idea
08:30:48 <ozone> shapr: do you know if there's a C++ compiler for palmos?
08:30:51 <ozone> (g++)
08:30:58 <shapr> no, I don't know
08:31:06 <shapr> I'd just use google :-)
08:31:13 <ozone> shapr: hmm.  i'm toying around with a C++ backend for haskell ...
08:31:13 <lispy> it's elf and dynamically linked, good news
08:31:19 <ozone> (an idea of, that is)
08:32:00 <lispy> ozone: what do you mean by backend?  haskell -> c++?
08:32:09 <ozone> lispy: exactly
08:32:19 <ozone> note the word "toying" :)
08:32:27 <shapr> ozone: you should jump into the C-- backend dev process, I'm sure you'll learn more than you ever wanted to know about GHC backends there
08:32:57 <lispy> ozone: pet project or is there something specific you are hoping to accomplish?
08:33:01 <ozone> neh, i'll leave that to the C-- hackers
08:33:23 <ozone> lispy: both, really.  yes, it's a pet project which i have a total of zero time to work on right now, but i think it could be fruitful in the future
08:33:49 <ozone> something like FC++, but you don't need as nice an API since you're a target for a backend, rather than a target for developers
08:34:15 <ozone> the guys who work on FC++ are seriously crazy
08:34:47 <shapr> C-- is C as portable asm, designed for backend generators, why would a C++ version of C-- be better?
08:34:53 <shapr> or is this a different thing entirely?
08:35:53 <lispy> i finally resolved my issues with wxwidgets, and i'm building darcs with a gui
08:36:02 <lispy> (for anyone that cares :)
08:36:29 <ozone> shapr: C++ is mature, modern C++ compilers generate fairly good code
08:36:40 <ozone> you have more static control than with C, especially with templates
08:37:05 <ozone> you can optimise more aggressively since C++ has a more powerful type system
08:37:51 <edwinb> Aren't there annoying issues with tail calls?
08:38:02 * edwinb would like to get around to playing with C-- one day
08:38:06 <ozone> the maturity is the important bit, and i think you can quite aggressively optimise things like partial applications with templates
08:38:35 <ozone> edwinb: yes, but you can always use GNU extension to get around that (which is what GHC's C backend does now)
08:38:44 <ibid> edwinb: they are issues even in C
08:38:48 <edwinb> Well, yes.
08:38:54 <ozone> anyhoo.  won't talk more about it until i actually produce something worthwhile talking about. :)
08:39:31 <shapr> oh hey, what's up with passing function args in registers?
08:39:44 <shapr> I saw that as an option in linux 2.6.6, does it give any advantages?
08:40:00 <edwinb> I'd vaguely assumed it would try to do that anyway.
08:40:14 <shapr> I assume it's faster to read from registers rather than unwind the stack, but, how do I know if my particular CPU has enough spare registers for that?
08:40:24 <lispy> wasn't that for system calls in this case?
08:40:30 <edwinb> hmm
08:41:03 <ludde> shapr: it's very possible to use 2 or 3 registers on x86 for that.
08:41:18 <ozone> AFAIK linux always did that for syscalls
08:41:19 <shapr> how many can I use? is it noticeably faster?
08:41:31 <ozone> (which is what the FAST_SYSCALL stuff did, or whatever it was called)
08:41:52 <shapr> I know it breaks binary-only LKMs, but I don't mind, since "nvidia + SMP + 2.6.6 = horrible pain"
08:42:12 <ludde> shapr: i don't know if it's _noticably_ faster
08:42:33 <shapr> I just have no idea of the issues involved.
08:42:36 <ludde> maybe if you run a profiler..
08:43:02 <shapr> good idea
08:44:04 <shapr> konichiwa juhp-san
08:44:59 <juhp> hi shapr
08:45:07 <juhp> nite, shapr ;)
08:45:28 <shapr> g'nite juhp 
08:46:01 <juhp> pressed the wrong power button before... :-\
08:46:05 <shapr> whoops
08:46:20 <lispy> oh no....the latest version of darcs doesn't want to build on my system...
08:48:51 <lispy> on closer examination, i think it's the code for the gui that doesn't want to build...well bummer
08:53:08 <Lemmih> Could someone guide me to the fptools CVS repository? I've followed the instructions on http://www.haskell.org/ghc/docs/latest/html/building/sec-cvs.html but cvs (`cvs login`) hangs after I enter the password ('cvs').
08:59:15 <lispy> Lemmih: cvs is temperamental, try waiting for a very long time.  Other than that I don't know what to say :)
09:00:22 <shapr> cvs.haskell.org is ignoring me for the moment also
09:02:53 <Lemmih> lispy: Thx.
09:21:31 <Lemmih> Hmm It fails with "Connection reset by peer" after a couple of minutes.
09:22:10 <Lemmih> Hello Smerdy.
09:24:52 <shapr> I think I'll try building my kernel with "pass 3 function args in registers" and see what blows up.
09:25:11 <shapr> I wonder if that'll required a differently built glibc
09:26:53 <ibid> shapr: i don't think so
09:27:17 <ibid> shapr: the kernel/userspace interface is libc ABI independent to my knowledge
09:27:25 <shapr> ok
09:28:02 <ibid> however, i don't recall whether the kernel side of that interface expects a particular calling convention in the kernel
09:28:19 <shapr> guess I'll find out
10:14:52 * shapr curses procedural programming
10:15:13 <shapr> looping over a sequence should NOT be a side-effect! I want a sequence, not an iterator! arg!
10:22:46 <shapr> what does your nick mean?
10:36:25 <Lunar^> shapr: Python bytes :)
10:36:33 <Lunar^> mhh bites
10:37:14 <shapr> heh
10:44:47 <shapr> truly, it is hard to do a conditional import
10:47:35 * shapr grumbles
10:47:50 <shapr> this doesn't work --> type Options = PostgreSQLOptions
10:53:03 <Lunar^> shapr: ?
10:54:00 <shapr> moving MySQL using code to PostgreSQL with HaskellDB means I have to comment out some bits and add some others
10:54:10 <shapr> I was just trying to think of a better way
10:54:21 <Lunar^> shapr: cpphs ?
10:56:00 <shapr> yah, probably so
11:37:18 <shapr> hi deejay 
11:37:34 <deejay> hi shapr
11:37:44 <shapr> how's code?
11:38:03 <deejay> what do you mean by that :)?
11:38:18 <shapr> well, have you written any fun or work code lately? did it go well? was it interesting?
11:38:57 <deejay> well nothing in haskell yet, but last few days i came across it, not for the first time, but this time with some interest
11:39:35 <deejay> been looking at some fp for a little while now, some scheme at first... but haskell looked really exciting too
11:39:52 <deejay> so just came on this channel to check out what's cooking
11:40:02 <shapr> it's sort of quiet today
11:40:09 <deejay> oh ok
11:40:12 <shapr> but I can give the short intro if you like
11:40:19 <deejay> in numbers or in activity?
11:40:31 <shapr> well, intro to learning haskell
11:40:43 <deejay> sounds great!
11:40:45 <shapr> and to the #haskell irc channel
11:40:49 <shapr> @learn
11:40:49 <lambdabot> http://www.haskell.org/learning.html
11:40:56 <shapr> most of the learning Haskell resources are at that url
11:41:01 <shapr> there's also the HaskellWiki
11:41:05 <shapr> @wiki FrontPage
11:41:06 <lambdabot> http://www.haskell.org/hawiki/FrontPage
11:41:15 <shapr> the #haskell channel logs url is mentioned in the topic
11:41:30 <shapr> lambdabot has a bunch of useful functions
11:41:42 <deejay> yah got the first two already... altho the logs sound like a handy thing too
11:41:54 <shapr> @index foldr
11:41:55 <lambdabot> Data.List,GHC.Base,GHC.List,Prelude,List
11:42:22 <shapr> @type foldr
11:42:25 <lambdabot> foldr :: forall b a. (a -> b -> b) -> b -> [a] -> b
11:42:57 <deejay> ah ok that makes some sense
11:43:00 <shapr> same stuff that's available in GHCi for example
11:43:08 <deejay> heh, that's a pretty cool bot
11:43:13 <shapr> yah, lambdabot has neat tricks
11:43:15 <shapr> @fortune
11:43:15 <lambdabot> Love means having to say you're sorry every five minutes.
11:43:47 <deejay> yay, i love fortune, comes default with slackware
11:43:49 <shapr> and, when you have questions, ask 'em here!
11:44:21 <deejay> wow a truely helpful community!
11:44:34 <shapr> shocking!
11:44:47 <deejay> indeed
11:45:02 <shapr> oh, here's a quick syntax demo if you're feeling impatient - http://www.scannedinavian.org/AvianWiki/HaskellDemo
11:46:08 <deejay> ah cool, i think i came across something fairly similar
11:46:30 <sorrow> what's wrong with that?
11:46:32 <sorrow> getNth 0 (x:xs) = x
11:46:32 <sorrow> getNth n (x:xs) = getNth n-1 xs
11:47:11 <deejay> hmm...
11:47:29 <sorrow> Oh, parentheses.
11:47:39 <deejay> huh?
11:47:40 <sorrow> never mind then.
11:48:14 <deejay> were you meaing that n-1 should be (n-1)
11:48:20 <sorrow> Yes.
11:48:50 <deejay> functions are stickiest so it would nab the n off the n-1, yah?
11:49:49 <shapr> hej Pinnen 
11:50:20 <sorrow> How could I tell? I didn't know either. ;-)
11:52:41 <deejay> lol
12:01:57 <sorrow> That function's bound to be somewhere around already. ;-)
12:23:43 <Pinnen> shapr: tjena
12:25:18 <shapr> Pinnen: how's code?
12:39:51 <shapr> hej dennisb 
12:40:20 <dennisb> hi (now i'm "fedora core 2"-dennis)
12:40:26 <Pinnen> shapr: hehe, not too good :( 
12:40:26 <Pinnen> hehe
12:40:35 <shapr> Pinnen: why so?
12:40:40 <shapr> hei eivuokko 
12:40:42 <shapr> dennisb: spiffy!
12:40:44 <Pinnen> *phone*
12:40:49 <eivuokko> Hi ho :)
12:41:04 <shapr> how's code?
12:41:38 <eivuokko> Not much of it, switching apartements.
12:41:48 <eivuokko> What's up here?
12:42:04 <shapr> not much, I'm working or preparing for EuroPython/EuroHaskell
12:42:14 <eivuokko> What's there to prepare?
12:42:28 <shapr> I have to pack my unicycle!
12:42:36 <eivuokko> Haha :)
12:42:47 <shapr> I hope it doesn't cost too much extra to ship as oversize baggage
12:42:53 <shapr> I'm also worried about the spokes getting bent
12:43:19 <shapr> anyway, I'm looking forward to it
12:43:41 <eivuokko> Mmmm.  You'd need a box for it, eh?
12:43:54 <_Codex> where was this eurohaskell anyway?
12:44:23 <shapr> http://www.haskell.org/hawiki/EuroHaskell
12:50:03 <arjanb> the haskell wiki doesn't seem to work
12:51:05 <shapr> I just shut it down for a moment
12:51:20 <shapr> someone in .cz is trying to autorevert all the pages
12:51:41 <shapr> nat-198.ujep.cz in fact
12:52:42 <shapr> someone wrote a script to revert all the pages in one step intervals, meaning it will take a lot of clicking to revert back to the unreverted version
12:58:04 <Lunar^> Should we brainstorm to find a new name for LIP ?
12:58:16 <shapr> well, SyntaxNinja got a bunch already.
12:59:49 <SyntaxNinja> the simons & malcolm wallace didn't particularly like any of those ones we put together; CABAL was the closest we got to a consensus.  I didn't think the name should hold up the annoucnement, though.
13:00:58 <Lunar^> CABAL ? :) There is no cabal :)
13:01:19 <SyntaxNinja> exactly
13:01:48 <Riastradh> SyntaxNinja, how about the Curried LAB Infrastructure/Framework/whatever?
13:03:39 <SyntaxNinja> Riastradh: that was on the list, but no one said anything about it
13:04:00 <Lunar^> SyntaxNinja: Is Malcom Wallace still working on embbeded systems ?
13:04:31 <SyntaxNinja> Lunar^: I'm not really sure.
13:06:48 <Lunar^> SyntaxNinja: I wonder if he still is interested by this domain, hOp is very close of his work
13:17:39 <shapr> ok, the wiki is restored
13:43:29 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/", "Learning Haskell - http://www.haskell.org/learning.html","Donate your brain! - hawiki/UsingHaskellWikiMaterial","related channels #haskell.se #haskelld #darcs","http://www.haskell.org/hawiki/EuroHaskell","May 2004 HC&AR: http://www.haskell.org/communities/","http://www.haskell.org/libraryInfrastructure/"]' by shapr
14:52:12 <Kuril> I am beginning to quite like Haskell.
14:54:35 <Igloo> And there was much rejoicing.
14:56:02 <Lunar^> Kuril: :)
15:00:49 <shapr> what's a functor?
15:00:55 <shapr> I have two possibilities in mind
15:01:36 <shapr> either it's something that can iterate over a sequence, like foreach in visual basic, for item in sequence in python
15:01:48 <shapr> but how would that work on a tree type?
15:02:08 <shapr> so maybe a functor is just something that traverses a structure of algebraic types?
15:03:12 <shapr> foldoc says a functor is a generalizaton of map
15:03:46 <shapr> "the type operator in this case takes a type T and returns type "list of T".  The map function takes a function and applies it to each element of a list."
15:03:47 <Riastradh> A functor is simply a map from one category to another.
15:04:16 <shapr> so it would traverse an entire tree then?
15:06:52 <shapr> hi stepcut
15:06:54 <Riastradh> It's not a traversal routine at all.
15:07:05 <Riastradh> It is simply a map from categories to categories.
15:08:19 <stepcut> hey shapr
15:09:57 <shapr> Riastradh: how would you make an instance of class Functor for "data Tree a = Nil | Node (Tree a) a (Tree a)" ?
15:10:26 <Riastradh> shapr, it depends on what you want it to do.
15:10:53 <Riastradh> fmap is almost as general an operator as extend.
15:11:16 <stepcut> fmap rocks
15:13:05 <shapr> so, how could I define fmap for that tree?
15:15:40 <Riastradh> Most likely something like this:
15:15:53 <Riastradh> instance Functor Tree where
15:15:57 <Riastradh>     fmap f Nil = Nil
15:16:17 <Riastradh>     fmap f (Node l v r) = Node (fmap f l) (f v) (fmap f r)
15:16:53 <shapr> ah, spiffy
15:17:22 <Riastradh> I keep forgetting.  What kind of -morphism is map?
15:17:33 <shapr> hylo?
15:17:50 <shapr> ana is up, cata is down, I think hylo is frob
15:18:00 <shapr> frobomorphism ... hmm
15:18:11 <shapr> @all-dicts hylomorphism
15:18:12 <lambdabot> No match for "hylomorphism".
15:18:17 <shapr> @all-dicts hylo
15:18:18 <lambdabot> No match for "hylo".
15:18:27 <Riastradh> There ought to be typeclasses for all of unfold, map, and fold.
15:20:46 * Riastradh adds this to PreludeExts.
15:22:26 <Riastradh> Ought I to add it to the end or the beginning of PreludeExts?
15:23:00 * shapr dunno
15:27:08 <_Codex> fmap is real nice.
15:34:28 * Riastradh wonders whether the Anamorphism & Catamorphism instances for [] should use [un]foldl or [un]foldr.
15:42:52 <Riastradh> Bah!  Need I ask it explicitly as a question?
15:43:34 <Jerub> Riastradh: and if that doesn't work, phrase it as a personal attack against the haskell community at large.
15:44:39 <Riastradh> Oh, that's a good idea.
15:46:05 <Jerub> I often go into #emacs and say "vim can do this, and emacs can't, how fucked up is that"
15:46:14 <Jerub> and I get hundreds of responses with clear detailed instructions.
15:46:22 <Jerub> and at least one death threat
15:46:37 <Riastradh> I find that the death threats are usually more fun than the useful responses.
15:47:46 <vajrabum_> According to this http://www.cs.uu.nl/docs/vakken/gp/Lecture1.pdf
15:48:06 <Riastradh> Well, I'll try the question first.
15:48:08 <vajrabum_> foldr is a catamorphism and unfold is an anamorphism
15:48:45 <Riastradh> For the Anamorphism & Catamorphism instances for [], should there be left or right folds/unfolds?
15:50:36 <cedricshock> Jerub: I too have discovered that the best help can frequently be aquired through flaming.
15:52:50 <arjanb> Riastradh: probably right folds
15:52:59 <Riastradh> Right fold and right unfold?
15:53:51 <vajrabum_> Don't foldr and unfold go together?
15:54:07 <Riastradh> Unfoldl and foldr sound appealing to me, but foldr is a pain to implement correctly in this instance.
15:54:46 <Riastradh> In fact...
15:58:27 <shapr> that's funny, when someone flames me here on #haskell, I recommend them to try #c or #lisp
15:58:51 <shapr> because I'm just not able to be as mean as the people on some other channels ;-)
16:03:26 * Jerub waves to shapr!
16:03:32 <Jerub> I wrote a nasty hack last night.
16:04:07 <shapr> oh, what was it?
16:04:56 <Jerub> I was given phpmyadmin access to a web host so i could update a system that had 'dynamic' 'database driven' 'content'. So I wrote something that would allow me to snarf moinmoin wiki pages and upload them to phpmyadmin (inside of an SQL query) without user intervention.
16:07:02 <Jerub> 85 lines including my own function for doing Content-Type: multipart/form-data encoding.
16:07:24 <Jerub> and rewriting the html
16:07:28 <shapr> that sounds rather terrifying
16:07:45 <Jerub> I did call it a nasty hack.
16:07:53 <shapr> I think I would have used xmlrpc
16:07:58 <shapr> if I had the option
16:08:55 <Jerub> shapr: I didn't have any options.
16:09:19 <Jerub> all I had was phpmyadmin access.
16:09:26 <Riastradh> Oh, to hell with it.  I'll just use left, because it was easier to implement at the time; I've gone and committed the changes to PreludeExts.
16:09:53 <stepcut> s
16:09:56 <stepcut> oops
16:18:02 <Riastradh> What I wrote probably isn't very theoretically elegant, but it's practically useful.
16:42:03 <jameson> Hmm... just to make sure: Read's "readPrec p s" is supposed to return a list of all possible parses of prefixes of 's', tupled with the corresponding suffix in each case, right?
16:49:13 <arjanb> Riastradh: I'm not sure whether your definition of catamorphism is correct
16:49:27 <stepcut> jameson: i believe so
16:50:55 <Riastradh> arjanb, is it not?
16:54:21 <arjanb> should the function you fold with be able to stop the folding?
16:54:48 <jameson> stepcut: OK, thanks!
16:55:42 <Riastradh> arjanb, yes.
16:56:04 <Riastradh> It can do so by simply returning Right res, where res is the final result.
17:02:00 <arjanb> well i just haven't seen that possibility in other catamorphism definitions before
17:08:31 <stepcut> Riastradh: this might help: ANAMORPHISM - [n]  occurs deep under the earth's surface; changes simple minerals into complex minerals 
17:09:01 <stepcut> KATAMORPHISM: - [n]  occurs at or near the earth's surface; breaks down complex minerals into simpler ones 
17:46:12 <Cale> whoa - who did all the reverting on the wiki?
17:47:54 <stepcut> it was me, I fear change.
18:39:42 <camio> Anyone know how to get the code for the library-infastructure.
18:40:02 <camio> All the web page tells is darcs and ~ijones/library-infrastructure?
18:41:51 <camio> http://www.haskell.org/libraryInfrastructure/code.html <-here is the site in question.
18:47:20 <keverets> Cale: 15:51 < shapr> someone in .cz is trying to autorevert all the pages
18:47:20 <keverets> 15:51 < shapr> nat-198.ujep.cz in fact
18:48:12 <Cale> ah, thanks Kevin
18:48:26 <keverets> np
18:49:24 <Cale> http://www.haskell.org/libraryInfrastructure/libraryInfrastructure-code.tgz ?
18:49:37 <Cale> Linked from the same page.
18:51:18 <Cale> I suppose that to get the current code, you need to have a login on cvs.haskell.org
18:54:20 <Cale> SyntaxLaptop: you here?
18:55:03 <Cale> camio: anyway, you probably want to talk to SyntaxPolice
18:55:29 <Cale> (Isaac Jones)
19:02:46 <SyntaxLaptop> hi Cale
19:03:11 <SyntaxLaptop> camio: hi. sorry the code is not really easily avilable.
19:04:06 <SyntaxLaptop> ooh, I can log in again
19:04:10 <SyntaxLaptop> (to cvs.haskell.org)
19:06:37 <SyntaxLaptop> camio: I'll add instructions on how to get it ASAP; i'm writing a little talk at the moment. I'll probably make a tarball available too... 
19:09:54 <SyntaxLaptop> camio: very sorry for the trouble.
19:09:55 <camio> ok, cool
19:10:19 <camio> I'm excited to make rsa-haskell use the new package system :)
19:20:03 <SyntaxLaptop> cool :)
19:20:30 <SyntaxLaptop> camio: well, the code is Not Yet Ready, but it will be Real Soon Now :)
19:30:19 <Crusoe> I'm starting to grok how haskell works
19:30:34 <Cale> Hi Crusoe
19:30:56 <Cale> Is there anything in particular we can help with?
19:31:45 <Crusoe> I'm dling it right now. So not yet.
19:32:14 <np_hard> the man learns fast
19:32:46 <Crusoe> Been reading the tutorials mostly. It's pretty alien, even compared to Lisp.
19:33:23 <np_hard> perl is alien, haskell is just yoda-talk
19:33:37 <np_hard> very wise but a little hard to get into at first
19:34:30 <np_hard> and then there is the impossible jedi mastery
19:35:16 <SyntaxLaptop> np_hard: heh
19:38:34 <Crusoe> I'm looking at Ocaml too, which has some bizzare tradeoffs like Java and it's implementation of OOP.
19:54:29 <Crusoe> Any haskellers in the Twin Cities area?
19:54:45 <Pseudonym> I know of about half a dozen "twin cities" in the world.
19:54:53 <Pseudonym> Three in Australia alone.
19:55:30 <Crusoe> Bah, I mean the Originals, the ones in Minnesota... ;)
19:57:21 <Pseudonym> "Twin cities" originally referred to what we now refer to as "sister cities".
20:45:08 * Cale is away: sleep
21:33:33 <ithkuil> allo
21:34:24 <ithkuil> see the algorithm for storing data depends on the types of the arguments.  if its two registers, its one thing.  if its a register and a pointer to a 16 bit integer, its another thing.  can i do this with classes in haskell?
21:35:27 <ithkuil> my whole life all i ever heard about was oo
21:40:57 <ithkuil> hello sundeep
21:43:42 <ne1> You can try type classes.
21:47:02 <ithkuil> damn
21:47:04 <ithkuil> he left
21:47:29 <ithkuil> ive been reading about type classes i dont really get it but im not sure it will do it
21:49:15 <ithkuil> maybe instead of having different types and depending on different types, the type could be an enum or something, and i could use guards
23:32:14 * timbod is away: I'm busy
