03:17:55 <Huschi> is there anybody who has experiences with wxhaskell?
03:18:24 <Huschi> how can i find out the backgroundcolor of my window?
03:20:12 <Huschi> i wrote an application where i have to draw the contents of a panel on my own and i want the background of the panel in the same color as e.g. the menubar
03:27:09 <wouter> windowGetBackgroundColour :: Window a -> IO Color
03:27:16 <wouter> should do the trick
04:14:32 <Huschi> ah, danke
04:16:55 * shapr bOings
04:17:17 <Huschi> i meant, thanks
04:18:35 * Arnia hands shapr a boinging stick
04:18:44 * shapr beats lambdabot with the stick
04:19:36 <firefly> shapr: why is it called lambdabot instead of simonbot?
04:19:44 <Arnia> shapr: Should a library ontology focus on the physical realisation of its contents, or just their logical form?
04:19:58 <shapr> firefly: because Pseudonym named it lambdabot
04:20:00 * Arnia realises that question is best suited to RDFIG but appreciates your advice
04:20:02 <firefly> Every time it replies, it could say:  Simon says, + is a function from... etc.
04:20:22 <shapr> Arnia: why the heck would the physical realisation of the library contents be important?
04:20:52 <Arnia> shapr: I have to carry and store my library
04:21:04 <shapr> this sounds like Leibniz' ideas on using primes for indexing library content
04:21:18 <firefly> how /do/ you organize your papers?
04:21:33 <Arnia> shapr: This means distinguishing between DVDs and VHS, or eBooks and huge hardbacks
04:21:39 <shapr> I organize mine by subject and author
04:21:41 * Arnia decides to make two ontologies
04:22:04 <shapr> Arnia: sure, I know what you mean, but if it's all accessible from the same terminal, why is the physical realisation so important?
04:22:52 <shapr> In my opinion, the physical form of stored data is an accidental difficulty in searching that same data
04:23:01 <Arnia> shapr: It isn't all accessible from the same terminal. I'm trying to organise my life this summer, and I need to organise my book, CD, VHS and DVD collections... I have well over a 1000 books alone
04:23:02 <shapr> or accessing it, or whatever.
04:23:10 <firefly> do you have just one copy of each paper?  Do you have an index sorted by subject and then the papers sorted by author?  Two indices?
04:23:21 <shapr> firefly: I have ln -s
04:23:36 <firefly> Ah, I prefer to read papers on paper.
04:23:41 <Arnia> Thankfully, this is RDF so I can easily use two ontologies simultaneously
04:23:42 <shapr> firefly: but a research paper wiki is on my TODO list
04:24:15 <shapr> I tend to make lots of notes in the margins of my papers, arguing with the author or asking questions about something I don't understand
04:24:16 <Arnia> shapr: Please reflect it into my Media ontology... that would be very cool
04:24:28 <firefly> An idea I considered is to print out a few extra copies of the front page of each paper and then use those front pages in different physical indices, one sorted on subject, one on author, etc.
04:24:49 <firefly> The real papers would be sorted by their Paper-No which I could assign arbitrarily.
04:24:52 <shapr> I'd like to be able to record those notes in such a way that others can also add their own notes, links, and info 'in the margin'
04:25:20 <firefly> I like the affordances of physical paper.
04:25:34 <shapr> because of copyright law, I want my research paper wiki to hold only the notes, and then a link to the original paper
04:26:10 <firefly> shapr: It might work.  (remember that small quotes are covered under the doctrin of fair use)
04:26:13 <shapr> firefly: in that case, I'll try to add the ability to print a paper with margin notes on the backside
04:27:10 <firefly> But the research wiki is only good for a paper collection that is shared with other people.
04:27:20 <shapr> yes?
04:27:26 <firefly> That means I can get overwhelmed by papers /others/ put into the collection.
04:27:40 <shapr> no, you have your own papers
04:27:45 <firefly> ...and still not be able to work with the papers /I/ am interested in, unless and until I put those in.
04:27:58 <firefly> So how does it save me any work and hassle, then?
04:28:13 <shapr> because it will be easy to figure out which papers you have downloaded
04:28:20 <firefly> hm.
04:28:35 <shapr> and much of the point is to have an asynchronous recorded discussion about research papers
04:28:48 <firefly> I think I'll have to wait for a demonstration that it works well with physical paper papers.
04:29:03 <shapr> for example, Pseudonym implemented the comonad code of that paper, and found some major bugs
04:29:10 <shapr> but he hasn't seen anyone else mention that
04:29:18 <firefly> I like the discussion part and the asynchronicity part.
04:29:36 <firefly> it should probably be well integrated with citeseer.
04:29:36 <shapr> if I checked the same paper on the wiki, I might find a link to Pseudonym's code and rebuttal
04:30:10 <firefly> but it doesn't solve my problem of organizing the papers /I/ am interested in.
04:30:31 <shapr> it does solve my problem of organizing paper I'm interested in
04:31:02 <shapr> I assume that I will be able to make my own links among papers, so I can follow only my own trails if I want
04:31:47 <shapr> like, which papers are connected to Labragayo's ideas on monad transformer based parsers?
04:32:47 <firefly> ah, but I don't need computer support for that.  My memory is very good at keeping track of such connections.
04:33:20 <firefly> it is very bad at remembering URLs and/or file system locations :)
04:33:24 <shapr> still, you might benefit from the connections others have made
04:33:45 <shapr> with a wiki, you could just search your own pages and connections
04:34:37 <firefly> true, but then again there is the difference between the public stuff and the private stuff.  It doesn't sound like it'll make it any easier for me to remember which filenames I used for which papers... or if I kept a physical copy, did I lend it to somebody?
04:35:12 <firefly> In summary: yes, go for the research wiki thing.  It'll be useful, perhaps even to me.
04:35:34 <firefly> I was just trying to piggyback on the discussion to see if somebody could help me solve a different but related problem with my paper collection.
04:36:54 <firefly> anyway, off to do some eclectic shopping (shoe laces, white paint, espresso coffee).
06:06:51 <musasabi> How is referential transparency (and functional language) defined?
06:07:31 <neologism> with the same arguments applied to function the result is always the same?
06:07:49 <musasabi> Is a language which guarantees that forall functions f: Store \subseteq f(Store) valid?
06:08:07 <musasabi> that is can it be claimed to be referentially transparent.
06:08:29 <neologism> what is "\subseteq" ?
06:08:33 <neologism> I dont understand your semantic
06:08:55 <musasabi> neologism: Any function produces a store that is a superset of the store it received as parameter.
06:09:19 <neologism> should be
06:09:27 <musasabi> neologism: that means roughly that the function does not modify any existing values.
06:09:42 <neologism> should be
06:09:57 <musasabi> But would a simple operation like sizeofstore make it not referentially transparent?
06:10:14 <neologism> huh
06:10:21 <neologism> thats something above my knowdlege
06:10:22 <neologism> sorry
06:12:25 <musasabi> This is mainly related to a write-once-read-many store.
06:12:39 <mattam> musasabi: no, as long as sizeofstore is called on store and does not depend on other variables
06:14:18 <musasabi> mattam: consider a function that adds a random number of elements to a store. (of course if we consider the random seed a part of the store this is a nonissue) now f(Store) = sizeofstore(add_random_elements_to_store(Store)) would not be referentially transparent.
06:15:12 <mattam> yeah, that's what i say
06:16:25 <musasabi> so by considering outside world as a part of store the issue goes away?
06:16:41 <mattam> i think so
07:03:47 <shapr> w00h00
07:04:54 <firefly> got the QuickCheck stuff working?
07:05:08 <shapr> no, but I'm getting closer
07:05:51 <shapr> anyway, my current thoughts on wikis are such that you would be able to have both public and private stuff, and you wouldn't really need to find the filenames for papers, because the papers would be displayed inline with the notes
07:05:57 <shapr> so I think it'd be even more useful
07:06:12 <shapr> I should make an informercial!
07:12:20 <firefly> ooh - you are going to make that work with .ps, .ps.Z, ps.gz, pdf (including pdf4) -- including ps files that don't follow the Adobe Structured Document Conventions? ;)
07:12:38 <firefly> I think you should just integrate well with citeseer and let them handle that.
07:25:23 <shapr> I want to be able to anchor annotations into documents somehow
07:26:49 <firefly> ok, here's an idea, I know that it's ugly...
07:27:02 <firefly> Use citeseer to get images of the article.
07:27:11 <firefly> Superimpose the comments on top of those images ;)
07:27:46 <firefly> oh, and use the clickmap feature to make links from annotation marks on the images back to your wiki.
07:29:02 <shapr> that's a good idea, but I think it would violate copyright
07:29:47 <shapr> hey, is there a repository for CABAL packages yet?
07:29:50 <shapr> or should I create one?
07:30:04 <firefly> create one.
07:30:28 <shapr> ok, after I have QuickCheck working...
07:30:34 <shapr> it's so hard to stick to one thing...
07:30:40 <firefly> shapr: hmmm... not necessarily.  Talk to the citeseer people and show them a prototype.
07:30:43 <firefly> :)
07:30:57 <shapr> oh, that's a good idea
07:31:15 <shapr> they must have some sort of copyright agreement/understanding
07:31:20 <shapr> excellent idea
07:32:14 <shapr> firefly: also, I want to run this entire wiki with a darcs backend
07:32:43 <shapr> so it's a personal wiki, and a public wiki if you let other people pull patches
07:40:49 <firefly> ah, nice.
07:41:07 <firefly> So only one person can edit it?
07:41:35 <firefly> how long does it take to grok MVars?
07:41:50 <firefly> I haven't spent any time on it yet but it looks like it would be a good idea at some point.
07:44:31 <shapr> firefly: nah, everyone can edit it, but you only pull the changes you want to pull
07:44:58 <shapr> MVars are quite straightforward, should probably take fifteen minutes to grok
07:46:57 <firefly> ok, I'll probably take a look tomorrow.
07:47:26 <firefly> shapr: if everyone can edit it, you've got to make it very, very, very easy to remove vandalism.
07:47:36 <shapr> nah, think about it
07:48:02 <shapr> think about darcs if you only use darcs pull via http
07:48:09 <firefly> I don't want to have to refuse accepting the vandalism patches every time I pull
07:48:23 <shapr> right, I understand that
07:48:30 <shapr> so remove the idea of a central server
07:48:46 <firefly> I wonder if we should have an option to say "never" to a patch?
07:48:49 <shapr> let's say that you, and me, and norpan each have a filesystem copy of the wiki
07:48:56 <shapr> and there is no central server for this wiki
07:49:02 <firefly> That means that you'll never be asked about that patch anymore during pull.
07:49:11 <firefly> ok
07:49:23 <shapr> so norpan writes some stuff to the wiki, and you pull it
07:49:28 <shapr> and then I spam some stuff into the wiki
07:49:36 <firefly> ok, they are /totally/ private then?
07:49:47 <shapr> and you pull it, see it, and then remove the patch and you remove me from the list of people that you pull from
07:49:56 <firefly> we have our own /local/ webservers?  (or at least webservers without outside write access)
07:50:10 <shapr> or maybe I pulled from someone else who spammed, and haven't noticed the spam yet
07:50:18 <firefly> yes, makes sense.
07:50:21 * firefly loves darcs
07:50:23 <shapr> in any case, with a pull-only setup, it's easy and fast to find and shutout spammers
07:50:42 <firefly> How do we make new people known?
07:50:55 <firefly> Let's say I see your wiki that is read-only to me.
07:51:00 <firefly> I want to fix something.
07:51:05 <firefly> How do I do that?
07:51:18 <shapr> the easiest solution is to use a push protocol like email to send a patch
07:51:24 <firefly> darcs pull + setup apache locally + edit/run php + darcs send?
07:51:40 <firefly> that's a lot of work for a small fix.
07:51:52 <shapr> yes, but that would then get you into the list of trusted pulls
07:51:55 <shapr> maybe :-)
07:52:15 <firefly> I think your idea is basically sound but it needs a better discovery mechanism and a lower-cost method of making small fixes.
07:52:28 <shapr> yes, I agree
07:53:07 <shapr> it would be best if the discovery mechanism and the small fix method were the same
07:54:04 <shapr> what about a darcs_cgi hack that can show how your local file would look with patch X from http://foo/patchX ?
07:54:07 <firefly> btw. before I go to the summer part at DIKU: please give Juliusz Chroboczek some support on his ideas to change the repository/patch format slightly before 1.0 (see the darcs-devel mailing list)
07:54:13 <firefly> summer party.
07:54:31 <firefly> Sounds like a very good idea even without the wiki.
07:54:47 <shapr> I haven't read any of the darcs lists in the last week or two
07:54:57 <shapr> I need to catch up
07:57:07 <shapr> firefly: even if Haskell isn't your favorite language, I hope you enjoy the #haskell community :-)
07:59:52 <shapr> firefly: is that the "forwarded darcs patch" thread?
08:09:41 <firefly> upcoming 0.9.22
08:13:14 <maihem> is `do a` equivalent to `a`?
08:15:15 <maihem> what does this mean?
08:15:16 <maihem> Kind error: Expecting kind `* -> *', but `Consume a' has kind `*'
08:15:16 <maihem>     When checking kinds in `Monad (Consume a)'
08:16:01 <Riastradh> Is 'Consume a b' a valid type?
08:16:23 <maihem> data Consume a = Consume Integer ([Char] -> a) | Pass a
08:16:43 <Riastradh> You probably meant to write 'Monad Consume.'
08:17:34 <maihem> ah Consume is a function that must satisfy the requirements of class Monad, that is must take one argument? I've said that (Consume a) takes an argument ?
08:17:34 <maihem> yes?
08:18:01 <Riastradh> Yes.
08:18:21 <maihem> polymorphic types are cool, they are just functions :)
08:19:04 <Heffalump> 'do a' is equivalent to 'a', yes (if a is a monadic type)
08:19:09 <Heffalump> s/is/has/2
09:14:26 <shapr> hi mstevens, looking for Haskell Info?
09:14:58 <mstevens> hello
09:15:39 <mstevens> Not actually looking for anything at the moment, very slowly reading a tutorial, I like to poke at the irc channels for whatever has currently caught my interest.
09:16:01 <shapr> have any questions? thoughts? random jokes?
09:16:17 <shapr> I can show you the sights here on #haskell if you like
09:16:43 <shapr> this isn't much of a tourist spot, but we have some interesting concepts hanging around.
09:16:57 <mstevens> The reason haskell caught my interest was an article suggesting it was a good language if you wanted strong static type checking, but no need to actually declare the types of everything.
09:17:04 <shapr> yes, that's true
09:17:29 <mstevens> It also mentioned the Nice language, which also looks interesting.
09:17:30 <shapr> though I like Haskell, and I don't really care about static typing one way or the other.
09:17:41 <shapr> static typing is just one tool in the toolbox
09:17:56 <shapr> Haskell does let you do some very nifty tricks by encoding certain properties in the typesystem
09:17:59 <mstevens> I'm reading the gentle introduction in haskell.org, although it is annoying me immensely with the lack of practical examples so far.
09:18:12 <shapr> effectively using the typesystem as a simplistic automated proof checker
09:18:22 <shapr> HaskellDB uses that to typecheck generated SQL code.
09:18:34 <shapr> http://www.scannedinavian.org/AvianWiki/HaskellDemo
09:18:46 <shapr> that's a quick and dirty demo I wrote
09:19:03 <shapr> I'd recommend Hal Daume's "Yet Another Haskell Tutorial"
09:19:29 <mstevens> Normally I am a Perl/Python/Java type of person.
09:19:46 <mstevens> and am I imagining it or is your nick familiar from #python?
09:19:55 <shapr> yes, probably so :-)
09:20:11 <shapr> if you went to EuroPython 2004 in Gothenburg, I was the guy with the unicycle.
09:20:28 <mstevens> I don't do enough python to go to conferences, although I'd like to.
09:20:34 <shapr> I jumped from Python as my favorite language into Haskell as my favorite.
09:20:54 <shapr> My day job is Python/Zope/Plone.
09:21:08 <mstevens> I'm still unsure about this functional programming malarky, but starting to read up on it again it does look a lot more interesting than it did 5 years ago when I was a wee small undergrad.
09:21:36 <shapr> even if you don't end up loving it, it'll teach you ways to write better Perl/Python/Java
09:22:06 <mstevens> My day job is unpleasant J2EE stuff, although sometimes I can sneak in some python or jython.
09:22:27 <shapr> I used to do J2EE also, jython was my favorite toy in those dark times.
09:23:49 <shapr> what do you think of the HaskellDemo?
09:24:22 <sorrow> Although you didn't ask me, I like it. 
09:24:30 <shapr> sorrow: thanks!
09:24:39 <shapr> questions? comments?
09:25:43 <sorrow> None more reading couldn't answer I think. ;-)
09:26:49 <mstevens> interesting. the big bit I'm missing so far in is I/O. My first question in any language is "how do I output 'hello world'"
09:27:20 <shapr> mstevens: the short answer is "putStrLn", and the longer answer is "magic and monads"
09:27:45 <shapr> main = putStrLn "hello world"
09:28:04 <sorrow> I especially like, in the demo, how you "enhance" Eq and your example of "partial application"
09:28:51 <shapr> mstevens: Haskell takes a worldview such that variables and loops do not exist as you know them now
09:29:04 <sorrow> And the "more regex" part. I have expected something like that, but haven't found it in the tutorials yet.
09:29:16 <mstevens> variables have seemed quite useful so far...
09:29:26 <shapr> looping is usually done with recursion, and variables in Haskell are in fact single-assignment constants
09:29:38 <shapr> sorrow: I can whip up some regex examples if you want
09:30:01 * mstevens has encountered tail-recursion and the idea of it being efficient before.
09:30:48 <shapr> refential transparency means that a function in Haskell should behave like a function in your average math equation
09:31:09 <shapr> the output for each input should not change
09:31:12 <sorrow> I think youre "demonstration of guards" shouldn't be at the bottom of the page. It appears that you're following some line in the course of the demo. Guards don't fit there I think.
09:31:20 <sorrow> Yeah, more examples would be great. :-)
09:31:20 <mstevens> shapr: what about the real world? (I'm sure this is in the docs, obviously)
09:31:32 <sorrow> s/youre/your/
09:31:34 <shapr> sorrow: yah, good point, I need to move the guards around some.
09:32:04 <mstevens> shapr: a list comprehension example would be nice, I like those both here and in python
09:32:04 <sorrow> It's not crucial, of course. ;-)
09:32:17 <shapr> you can get both the purity and the real world with monads
09:32:48 <shapr> a monad is an abstraction/convention, much like Objects in OOP are an abstraction/convention.
09:34:11 <shapr> mstevens: the "I want to use this now" summary works like "the IO monad lets you get input and send output, but imposes certain restrictions to preserve purity"
09:35:21 <shapr> for example, if you use readLn to grab a string from the user, that string gets wrapped up in the IO type to note that this string comes from the 'impure' world
09:35:50 <shapr> in general, the IO monad only winds forward (you can't back in time, not even with Haskell :-)
09:36:11 <shapr> mstevens: I dunno if any of that was helpful or useful at all...
09:36:38 <mstevens> The example was good :) 
09:36:42 <shapr> in any case, the easiest approach in my opinion is to write as much pure code as possible, and then call that from a tiny bit of top level impure code.
09:36:54 <mstevens> shapr: why can't I define functions at the prompt in ghci?
09:37:15 <shapr> you can, but it's easier to do stuff in a buffer and load it
09:37:26 <shapr> if you use emacs, C-c C-l will dump this buffer into ghci
09:37:53 <shapr> here's the interactive way: > let add1 = \x -> x + 1
09:37:56 <shapr> > add1 2
09:37:59 <shapr> 3
09:38:17 <mstevens> shapr: a-ha! let is the thing I was missing.
09:38:49 <shapr> the downside is that your code disappears when you load a file or close ghci
09:39:35 <mstevens> yes, but useful for experiment.
09:39:40 <shapr> yes, I agree
09:40:01 <shapr> you can also clamber around the IO monad in GHCi
09:41:03 <shapr> for example: '> myb <- readFile "/home/shae/.zshrc"'
09:41:26 <shapr> also, that's usually what toplevel impure code looks like
09:42:35 <shapr> mstevens: here's the very first Haskell program I wrote: http://www.scannedinavian.org/~shae/src/haskell/Mandelbrot-0.1.hs
09:43:05 <shapr> not very elegantly written, but it may give you some ideas
09:43:19 <shapr> if you want to see 'real' Haskell code, there's lambdabot 
09:43:22 <shapr> @yow
09:43:22 <lambdabot> ..  I don't understand the HUMOR of the THREE STOOGES!!
09:43:54 <shapr> and GHC (the Glasgow Haskell Compiler) is also written in Haskell.
09:44:52 <Lemmih> Yay. My daemon is working (-:
09:44:54 <mstevens> am I right in thinking in your mandelbrot program all the Foo :: bar is optional?
09:44:59 <shapr> Lemmih: oh, I wanna see the source!
09:45:13 <shapr> mstevens: yup, that was just so I could check my own understanding
09:45:48 <shapr> I started with BASIC, then I did Visual Basic for money, then later Java, and then Python
09:46:14 <shapr> I was thrilled that a variable in Python could be typed, but not any forced preset type like in Java
09:46:33 <shapr> Haskell has a better typesystem than Java, with Python's dynamicity, via type inferencing
09:46:54 <shapr> I call it "compile-time dynamic typing" but that's just a humorous term :-)
09:47:04 <mstevens> shapr: my main interest in Haskell is currently the typesystem
09:47:17 <shapr> excellent, the type system is great fun
09:47:32 <mstevens> Although all the "you can make huge productivity gains!!!!11!!11" stuff on the web is clearly also tempting if true.
09:47:38 <shapr> if you're interested in type theory in general, you may like Benjamin C. Pierce's "Types and Programming Languages"
09:47:59 <shapr> I do believe that *I* can be more productive in Haskell than in any other language.
09:48:11 <Lemmih> shapr: The actual daemon code is not completed yet. It just redirects stdout and stderr to log files. But its main function (template+db cacher) is complete.
09:48:14 <shapr> but I also think different people think in different ways
09:48:23 <shapr> so maybe Haskell doesn't fit your brain, or maybe it does.
09:48:43 <shapr> gutenabend tooki 
09:49:21 <shapr> Lemmih: I'd love to play with the code if you want to send it out into the world
09:50:13 <shapr> mstevens: any other questions right now?
09:50:34 <shapr> I think I may go off and unicycle for an hour or so.
09:50:39 <mstevens> shapr: no, and the rest of the world calls so I don't have time to ask them anyway
09:50:50 <mstevens> thanks for answering my dumb questions :)
09:50:56 <jemfinch> shapr: you use Haskell, you unicycle...anything else you do that *isn't* weird? :)
09:51:19 <shapr> mstevens: sure, drop by and ask more questions anytime!
09:51:38 <shapr> jemfinch: not that I can think of...
09:51:51 <shapr> I like chocolate?
09:52:03 <Lemmih> shapr: We can unicycle together at the next EuroHaskell (-:
09:52:17 <shapr> Lemmih: yay!
09:52:58 <shapr> ok, time to unicycle
10:17:26 <Heffalump> when is the next EuroHaskell?
11:24:29 <Igloo> Next to the next EuroPython I believe
11:24:46 <Igloo> Not sure if before/after or a gap day have been decided, though
11:27:30 <Heffalump> 2005 doesn't seem to have been decided
11:28:25 <Heffalump> oh, Gothenburg again probably.
11:45:07 <shapr> suckage, the local eight year old delinquent just rolled a car tire through one of our windows.
11:45:53 <shapr> Heffalump: yes, I think it's likely to be in Gothenburg again, around the same date.
11:47:04 <Heffalump> I take it the window was closed at the time?
11:47:45 <shapr> yes it was
11:48:47 <Heffalump> :-(
11:49:19 * shapr shrugs
11:49:26 <shapr> I wanted to move anyway.
11:50:35 <shapr> I feel most sorry for the responsible child, he has zero parental discipline, and does this sort of thing on a regular basis.
11:50:51 <shapr> anyway...
11:51:03 <shapr> Heffalump: have you started your new job?
11:58:02 <mwb> Where did he acquire a car tire?
11:59:07 <shapr> it was lying in the yard behind the apartment building, not sure how it got there.
11:59:15 <mwb> Ah.
12:00:51 <shapr> Five minutes before that, they were kicking that same window to scare the cats in that room. That's why I was standing on the other side of the window when they stood the car tire on edge and started rolling it our way...
12:06:24 <mwb> Eight seems young for malicious destruction.
12:09:00 <shapr> I don't think this child gets any useful parental guidance. He does whatever he wants. I don't think this was malicious, just bored and not thinking ahead.
12:09:28 <mwb> Ah.
12:09:58 <shapr> Even so, he could have damaged us, our offices (we work at home), or our five cats.
12:14:56 <Heffalump> shapr: not till November
12:26:06 <shapr> hiya SyntaxLaptop 
12:27:21 <jemfinch> shapr: SyntaxLaptop went to the university that I currently attend, as a note.
12:30:18 <jemfinch> shapr: did you ever read a paper about building interpreters by composing monads?
12:30:40 <shapr> yup
12:30:46 <jemfinch> what'd you think of it?
12:30:50 <shapr> seems nifty to me
12:30:59 <shapr> that's how @eval works in lambdabot 
12:31:20 <jemfinch> what do you mean?
12:31:45 <shapr> it seems like a nice way to build interpreters
12:32:47 <Heffalump> monad transformers are cool
12:32:54 <Heffalump> are you sure @eval uses it?
12:33:55 <shapr> newtype EvalMonad a = EM { runEM :: (StateT (IState EvalMonad)
12:33:55 <shapr>                                     (ReaderT Environment
12:33:55 <shapr>                                     (ErrorT String
12:33:55 <shapr>                                     (Cont Result)))) a }
12:38:23 <shapr> greetings Shrdlu
12:38:34 <Heffalump> ah, ok :-)
12:39:09 <Heffalump> the main loop uses transformers too
12:39:45 <shapr> I've read that arrow transformers are just >>> but that doesn't seem possible...
12:40:01 <shapr> I don't have great familiarity with arrows though
12:40:30 <Heffalump> They wouldn't be, no.
12:40:36 <SyntaxLaptop> hi shapr
12:40:36 * SyntaxLaptop is preparing new darcs release
12:41:39 <shapr> SyntaxLaptop: cool!
12:44:14 <jemfinch> SyntaxLaptop: Are you one of the authors of darcs?
12:49:55 <SyntaxLaptop> apparently .21 was a bit of a lemon. my laziness paid off this time :)
12:50:02 <SyntaxLaptop> hm. having some connectivity problems.
12:52:41 <jemfinch> lambdabot: darcs?
12:52:42 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
12:52:49 <jemfinch> lambdabot: @listcommands
12:52:49 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
12:52:49 <lambdabot> ,"definitions","del-definition","det","devils","dict","dict-help","dummy
12:52:49 <lambdabot> ,"dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo
12:52:49 <lambdabot> ,"elements","eurohaskell","eval","foldoc","fortune","gazetteer","get-definition
12:52:49 <lambdabot> ,"goodbye","hello","hitchcock","index","info","jargon","join","karma","karma
12:52:50 <lambdabot> ","karma-","learn","leave","listchans","listcommands","listmodules","lojban
12:52:52 <lambdabot> ,"moo","more","msg","musasabi","part","prelude","quit","reconnect","resume
12:52:54 <lambdabot> ,"seen","set-fuel","shapr","state","stepcut","topic-cons","topic-init",
12:52:56 <lambdabot> topic-snoc","topic-tail","topic-tell","type","vera","web1913","wiki","wn
12:53:09 <shapr> I think it's about time lambdabot did that in a private message
12:55:46 <SyntaxLaptop> jemfinch: nope
12:57:56 <Heffalump> the line-wrapping is wrong for 80 character widths, too
12:59:53 <Heffalump> hi Marvin
13:00:03 <shapr> Marvin--: hiii!
13:00:21 <shapr> Marvin--: I have another QuickCheck question for you, if you're not busy :-)
13:01:17 * Heffalump wonders what Marvin is up to these days
13:01:36 <shapr> gutenabend thebug
13:01:40 <shapr> ack, TheHunter 
13:03:27 <TheHunter> guten abend, shapr
13:03:42 <TheHunter> how's everything?
13:04:16 <shapr> I'm still fighting with QuickCheck, though I'm nearing the finish.
13:04:21 <shapr> what's up with you?
13:05:13 <TheHunter> i'm writing some small program, fighting with the writer monad
13:05:37 <TheHunter> and i'm not sure yet if that monad makes much sence
13:06:08 <TheHunter> i think i'll convert it to the state monad and see if that has an impact on speed
13:06:18 <SyntaxLaptop> so there's a -fPIC flag that someone claims will fix HUGS building on AMD64, the man page says it only impacts some arches.  I don't really know anything about this flag, but it's for position-independent code.  doeds anyone suspect that it might break anything?
13:08:15 <jemfinch`> shapr: did you get any of my messages earlier?
13:08:29 <shapr> jemfinch`: nothing after "are you the author of darcs"
13:08:35 <Igloo> Does hugs have any shared libraries?
13:08:40 <jemfinch> shapr: oh, gosh.
13:08:45 <jemfinch> shapr: those messages are too short anyway.
13:08:50 <jemfinch> lambdabot has ~425 characters to work with, there's no reason he has to send such short messages.
13:08:59 <jemfinch> you could also go the way Supybot went, which was to have separate commands in separate plugins, and have @list show the plugins, and @list <plugin> show the commands in that plugin.
13:09:08 <jemfinch> you could also rather easily remove the useless double quotes there.
13:09:12 * Igloo sees none and wonders what that's all about
13:09:29 <Heffalump> none what?
13:09:29 <shapr> lambdabot does use plugins, and there is the @listmodules command
13:09:35 <Igloo> shared libraries
13:09:40 <Heffalump> @listmodules
13:09:40 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy
13:09:40 <lambdabot> ,"dynamic","eval","hello","karma","more","quote","seen","state","system
13:09:40 <lambdabot> ,"topic","type"]
13:09:42 <jemfinch> shapr: come to #supybot for a second :)
13:10:09 <shapr> yah, that is nice
13:10:27 <shapr> yes, I like the supybot style of @list much better
13:10:48 <shapr> oh, apropos is nice
13:11:21 <shapr> jemfinch: of course, part of the reason lambdabot doesn't have those things is so that new Haskell programmers can write them, and then get their name in the AUTHORS list :-)
13:11:34 <jemfinch> shapr: hehe
13:11:47 <shapr> lambdabot is first and foremost a codetoy (in my opinion)
13:11:56 * jemfinch is trying to tone down his irc bot writing so he can start hacking on L more.
13:12:13 <Marvin--> shapr: shoot
13:12:22 * Marvin-- is a bit distracted by the football :)
13:12:24 <jemfinch> I'm planning to release 0.78.0 (perhaps calling it 0.80.0, and removing our "alpha" status) and then go into bugfixing mode.
13:12:35 <Heffalump> don't talk to me about football :-(
13:12:59 <shapr> Marvin--: end of section 3 of the original QC paper says something about splitting the pRNG as being important
13:13:08 <SyntaxLaptop> Igloo: I don't know.
13:13:16 <opet> Heffalump: lol. at least we don't have to look at lots of flags on cars any more :)
13:13:41 <Marvin--> shapr: let me see
13:13:43 <shapr> Marvin--: I've hacked the tests function to pass the rnd0 into generate, *then* split it, and pass half of that into other tests calls
13:14:07 <shapr> result      = (generate (size config ntest) rnd0 gen) { sizeGenPair = Just (size config ntest,show rnd0) }
13:14:23 <shapr> that's in the where clause of the tests function
13:14:44 <Heffalump> opet: should be good for fuel efficiency
13:16:15 <Marvin--> shapr: it's not *that* split they're talking about, they're talking about the call to split in the definition of bind
13:16:37 <shapr> oh!
13:16:42 <shapr> Marvin--: thanks!
13:17:19 <shapr> oh, there's no explicit license on QuickCheck, I wonder if that's a problem.
13:17:46 <jemfinch> anyone know what kind of wine should go with a tomato-cream sauce and shrimp?
13:17:58 <shapr> maybe I should wait to ask for Koen's shrink code and an explicit QC license till after I've finished this save/retest code.
13:18:07 <Heffalump> shrink code?
13:18:10 <Marvin--> as they say, they could've put the seed in a state monad and only split it when they actually need to, but that would've made it impossible to define promote
13:18:18 <Marvin--> shapr: I think QC is GPL
13:18:38 <Marvin--> but I may remember wrong
13:19:01 <Marvin--> Heffalump: yeah, Koen has an experimental version QC that tries to shrink failing test cases
13:19:09 <Marvin--> so you don't get a huge counter example
13:19:17 <Heffalump> ooh, nice.
13:19:40 <Marvin--> I've been nagging him about releasing a new version of QC :)
13:19:41 <shapr> for random cases that are generated from a list, you init the list and see if failure is still there...
13:20:00 <shapr> yah, I asked John Hughes about it at EuroHaskell, and he said "still no progress"
13:20:13 <shapr> so maybe I should get hold of the code and integrate it all myself.
13:20:51 <shapr> Maybe a less than elegant integration from me will motivate them to do it right.
13:21:02 <Marvin--> heh
13:22:21 * Marvin-- goes back to watching the game
13:22:33 <Marvin--> Sweden is playing surprisingly good
13:24:43 * maihem growls, and turns back to watching his team come home...
13:25:38 <Marvin--> the walk of shame :)
13:25:44 * maihem rewinds
13:25:46 * maihem watches
13:25:58 <maihem> <sob>
13:26:03 <Heffalump> did they not come home earlier?
13:26:20 <maihem> [20:26] * maihem rewinds
13:26:46 <Marvin--> he's taped it so he can watch it again and again and wallow in misery :)
13:27:00 <maihem> 6 bloody 5.
13:27:29 <Heffalump> it was quite cheeky of their goalie to take the winning one when he saved ours...
13:27:50 <Marvin--> yeah, that was cool :-)
13:28:56 * maihem chalks "Beckham" on his gun
13:29:14 <Heffalump> they skied one too..
13:31:33 <Marvin--> wow, what a chance
13:33:43 <SyntaxLaptop> OK... so I know I asked this before, but someone mentioned the name of the fileformat used by debian control file, and said maybe that jwz specified it somehow?
13:33:49 <SyntaxLaptop> can anyone give me references on that?
13:37:53 <shapr> SyntaxLaptop: google searching turns up lots of details on the file format itself, but nothing about jwz
13:38:55 <SyntaxLaptop> someone mentioned a name for it, something Jar or something
13:38:57 <SyntaxLaptop> damn.
13:41:41 <Marvin--> even policy doesn't give a name, why are you so desperate for a name?
13:41:58 <shapr> yah, I can't find anything
13:42:11 <shapr> though I was surprised to find dpkg.org
13:44:32 <SyntaxLaptop> Marvin--: eh. I'm not desperate for a name particularly, but I think someone knows of a bit of a standard, and it would be nice to say that this parser conforms to it.
13:46:49 <Marvin--> why not just make a loose reference to rfc822?
13:54:47 <Marvin--> whoa
13:54:54 * Marvin-- jumps up and down
13:55:28 <shapr> Marvin--: any good ideas on how to get the name of the prop_Foo that failed?
13:56:19 <Marvin--> uh, no
13:56:27 <Marvin--> I don't see how that'd be possible
13:56:41 <shapr> well, seems necessary to me for restesting
13:57:38 <SyntaxLaptop> it resembles rfc822, but there's more there that we won't do, and there's more we do that's not there... seems kinda silly
14:02:58 <Marvin--> pheeew
14:03:20 <maihem> Marvin--: ???
14:03:38 <Marvin--> offside
14:03:39 <Marvin--> :)
14:04:00 <maihem> ahaha
14:04:41 <Marvin--> aaaaaaaagh
14:08:38 <Marvin--> AARGH
14:09:00 <Marvin--> sooo close
14:09:02 <Marvin--> again
14:12:56 <maihem> I think I root for teams in the following order: England, Britain, Wales, Scotland, Ireland, Sweden. So... Come on Sweden!
14:13:14 <maihem> heh
14:14:00 <Marvin--> heh
14:14:41 <Marvin--> damn, we're down to penalties
14:14:46 * Heffalump goes to watch it
14:15:13 <Heffalump> I like a good shootout when I don't care too much about the result :-)
14:16:01 * Marvin-- grumbles
14:18:28 * Marvin-- jumps up and down
14:19:17 * maihem looks for a webcast and is not suprised that he can't find one.
14:19:31 <Heffalump> Sweden 1-0 Holland (after the first one)
14:19:41 <Heffalump> if anyone objects to a running commentary let me know :-)
14:19:50 <Marvin--> heh
14:19:51 <Marvin--> 1-1
14:19:58 <maihem> http://news.bbc.co.uk/sport1/hi/football/euro_2004/photo_galleries/3829077.stm
14:20:02 <maihem> best I can find
14:20:33 <Marvin--> yay! 2-1
14:20:38 <Heffalump> they all look pretty confident
14:21:12 <Heffalump> not much doubt about each one going in.
14:21:23 <Heffalump> (so far)
14:21:26 <Heffalump> [2-2 btw]
14:21:47 <Marvin--> DAMN
14:21:47 <Heffalump> Sweden sky one.
14:22:09 <arjanb> i don't need to watch i can hear scores by shouting neighbours :-(
14:22:18 <Heffalump> heh
14:22:31 <Marvin--> heh
14:22:44 <Heffalump> 3-2 Holland. Oege will be pleased.
14:23:03 <maihem> OMG, they should have IRC commentators as well as radio!!!
14:23:13 <Marvin--> whoa
14:23:18 <Heffalump> that was close...
14:23:21 <Marvin--> with a bit of luck...
14:23:40 <Heffalump> if the goalie had gone the wrong way...
14:23:46 <Marvin--> YES
14:23:49 <Heffalump> Holland miss..
14:24:05 <Heffalump> (with the previous one, Sweden hit the bar, the goalie went the right way and the ball bounced off him into the net)
14:24:38 <Marvin--> whoa
14:24:48 <Marvin--> that was close
14:24:49 <Heffalump> goalie went the right way, slow penalty, still went in...
14:25:16 <Marvin--> 4-4
14:25:23 <Marvin--> man
14:25:54 <Heffalump> that guy looks stressed.
14:25:58 <maihem> has it gone to penalties?
14:25:59 <Heffalump> :-(
14:26:05 <Marvin--> maihem: yes
14:26:08 <Marvin--> oh damn
14:26:09 <Heffalump> Van de Saar saves from the Swedish captain..
14:26:23 <Marvin--> fuck
14:26:42 <Marvin--> :-(
14:26:44 <Heffalump> Holland win.
14:26:48 <Marvin--> :((
14:27:16 * arjanb sighs
14:27:49 <Heffalump> so a semi-final decided all by penalties.
14:28:37 <Marvin--> yes
14:29:28 <Heffalump> Sweden and England should play an alternate semi-final ;-)
14:31:01 <maihem> Heffalup: You studying at an Oxford College?
14:31:40 <maihem> I mean Heffalump, sorry
14:32:01 <Heffalump> nope.
14:32:29 <Heffalump> why?
14:32:35 <maihem> What's with the comlab.ox.ac.uk host?
14:32:39 <SyntaxLaptop> I'm uploading darcs .22 to haskell-experimental since I dont' have time to test it right now. feel free to test and let me know if it's broken.
14:32:41 <shapr> what does << do in the shell?
14:32:41 <Heffalump> I work there
14:32:48 <Heffalump> shapr: HERE documents
14:32:53 <shapr> huh?
14:32:53 <Heffalump> cat << HERE
14:32:55 <Heffalump> foo
14:32:55 <Heffalump> bar
14:32:56 <Heffalump> baz
14:32:56 <Heffalump> HERE
14:33:03 <Heffalump> outputs the foo bar baz bit
14:33:58 <Marvin--> we had shots in the bar and shots in the poles
14:33:59 <Marvin--> damn :)
14:34:08 * SyntaxLaptop runs away
14:34:24 <Heffalump> the one that went in off the goalie was cool.
14:34:28 <maihem> Oxford should host EuroHaskell 2005. Best goddam city in the world. And I can go without a passport ;)
14:34:37 <Marvin--> Heffalump: I meant during the game :)
14:35:03 <Heffalump> maihem: :-) I'll have left by then.
14:35:17 <Heffalump> it's quite expensive to stay in/rent places in, too
14:35:56 <maihem> I'm moving back there soon, taking advantage of my parents' innocence. >:>
14:36:05 <Heffalump> where do you live?
14:36:10 <maihem> Manc
14:36:30 <Heffalump> you got a job lined up in Oxford?
14:36:58 <maihem> not yet, but it's so hard to work out time for interviews, I'm prolly gonna move back and work in a pub.
14:37:59 <Heffalump> whereabouts do your parents live?
14:38:18 <Marvin--> how ironic that this was probably our best match during the tournament, and we lost it :)
14:38:45 <maihem> The arse end of Oxford, south east
14:38:56 <Marvin--> heh, sms from a Dutch friend: "The curse is broken!"
14:39:28 <Heffalump> Cowley area?
14:39:38 <maihem> near there
14:39:44 <maihem> why?
14:40:24 <Heffalump> just wondering.
14:40:34 <Heffalump> seeing as I live in Oxford and all :-)
14:41:38 <maihem> I don't mind discussing where I live, but I'd rather not give my parents' details out on't'interweb.
14:41:59 <Heffalump> I just meant general area.
14:42:15 <maihem> Littlemore.
14:42:16 * Heffalump likes Oxford.
14:43:13 <Heffalump> better than Blackbird Leys :-)
14:43:22 <Marvin--> hmm
14:43:36 * Heffalump has lived in Marston, Kennington and now Northway.
14:43:38 <Marvin--> I wonder what happened to those checkins syntax mentioned in his mail
14:43:43 <Marvin--> *confused*
14:44:06 <maihem> ah, rich kid... next stop, Jericho :)
14:44:17 <Heffalump> next stop Cambridge :-)
14:44:29 <Heffalump> oh, actually, I do need to find somewhere else in Oxford for my last few months.
14:44:42 <Heffalump> Jericho is too cramped really. Northway doesn't strike me as a particularly rich area.
14:46:05 <Grind> hello
14:46:12 <shapr> hi Grind
14:46:16 <Grind> anyone using the listing packages with haskell
14:46:16 <maihem> Kennington is down near sandford isn't it, just on the other side of the river? The Kings Arms at the lock is the most beutiful place in all of Oxford.
14:46:20 <Grind> hi shapr
14:46:26 <shapr> which listing packages?
14:46:30 <Grind> "listings"
14:46:37 <Grind> shapr: it's a latex package
14:46:47 <shapr> any quickcheck users around? I have some usability questions...
14:46:58 <shapr> oh, I know nothing about latex
14:48:17 <shapr> I think calls to failing tests from Foo.hs should be saved in Foo.qc
14:48:19 <Marvin--> shapr: usability?
14:48:30 <Heffalump> maihem: yeah, and a bit closer to Oxford
14:48:40 <Heffalump> the lock is really by Radley, which is the next village along
14:48:54 <Marvin--> shapr: well, implement it and prepare a patch?
14:48:55 <Heffalump> Kennington is relatively cheap, actually.
14:49:14 <shapr> I realized that you can always save a prop_Foo and a PRNG seed, but some failing inputs are not useful instances of Show (randomly generated functions for example)
14:49:25 <shapr> so, what to do when you want to change your generator?
14:49:40 <Igloo> @index catch
14:49:41 <lambdabot> Control.Exception,GHC.Exception,Prelude,System.IO,System.IO.Error,IO
14:54:54 <shapr> this is hard to do without test suites.
15:08:10 <TheHunter> is there something like @myLoop :: Monad m => (a -> m (a, Bool)) -> a -> m a@ defined in a standard library?
15:08:38 <Heffalump> nafaik
15:14:26 <Marvin--> hooray, cheesy scifi flick on TV
15:20:17 <Heffalump> @type mapException
15:20:19 <lambdabot> bzzt
15:20:24 <Heffalump> hmph.
15:21:04 <Marvin--> @index mapException
15:21:04 <lambdabot> Control.Exception
15:21:13 <Marvin--> @type Control.Exception.mapException
15:21:16 <lambdabot> Control.Exception.mapException :: forall a.
15:21:16 <lambdabot> 				  (GHC.IOBase.Exception -> GHC.IOBase.Exception) -> a -> a
15:21:49 <Heffalump> does it map stuff raised by 'error' ?
15:22:00 <Marvin--> should do
15:22:15 <Heffalump> ta.
15:22:22 <Marvin--> at least in GHC
15:47:19 <Grind> I'm using package listings with haskell
15:47:51 <Grind> If I change the comment symbol to something better looking "commentstyle" is not applyed anymore
15:47:59 <Grind> anyone knows how to fix that?
15:48:34 <Grind> I wanted the -- to look better 
15:49:26 <Grind> but then comments are not italic anymore
18:14:11 <jemfinch> isn't there a group on the internet that learns a new language every year?
18:26:44 <shapr> what's the polite way to see if a file exists?
18:27:16 <Cale> doesFileExist :: FilePath -> IO Bool
18:27:36 <shapr> ah, thanks
18:27:57 <Cale> but if it's a directory, that will return false
18:28:13 <Cale> there's doesDirectoryExist too, though
18:28:17 <shapr> seems there's also fileExist
18:28:46 <ne1> Remember to also call thanks :: (Num a) => a -> IO () at the end, e.g., thanks 1000000
18:29:02 <Cale> heh
18:29:17 <Igloo> Don't forget to catch the exception regardless to avoid the race
18:29:22 <Cale> ah, fileExist is from Posix
18:30:04 <Igloo> (assuming you do something like open it)
18:31:26 <ne1> Hmm this is a revelation.  We should modify an existing programming language into a polite one.  Take one in which you write "begin ... end" and change it to "please ... thanks", for example.
18:32:19 <Igloo> :-)
18:32:33 <Cale> see Intercal
18:32:36 <Igloo> Compiler error: Line 3: You didn't say please
18:44:21 <shapr> finally, I'm done
18:44:23 <shapr> it works
18:44:53 <shapr> tomorrow I'll clean it up and see if anyone wants to try it
18:47:13 <blackdog> Remember that you can get race conditions by checking to see if a file exists then writing to it...
18:47:32 <blackdog> oops, igloo said that already. sorry.
19:41:17 <stepcut> yah for free wireless access at cafe's
19:41:42 <stepcut> I wonder if the cafe knows about their wonderful service
20:12:41 <CLxyz> Hrm...
20:13:08 <CLxyz> I'm planning to learn an functional language [after learning  asm, c, c++, c#, and python]
20:13:30 <CLxyz> Could any suggest why I should learn haskell over sml/ocaml?
20:14:37 <SyntaxLaptop> One interesting thing about Haskell is that it's Purely Functional, meaning it doesn't have any side effects; it'll more-or-less force you to think in a very different way from C/C++, etc., and somewhat differently from OCaml.  One point of learning new languages is to learn to think in new ways, right? :)
20:14:58 <SyntaxLaptop> It also is "lazy" which is also a different way of reasoning about software.
20:16:10 <CLxyz> SyntaxLaptop: I know i should learn a functional
20:16:29 <CLxyz> i'm hoping for more of a comparison between a ml derivative vs haskell
20:16:42 <stepcut> CLxyz: if you learn haskell first, you will have no problems learning ocaml/sml
20:16:52 <SyntaxLaptop> That's what I'm saying.  Haskell is purely functional (whereas ML and OCaml are not _purely_ functional) and Haskell is Lazy (whereas those others aren't lazy)
20:17:00 <Smerdyakov> stepcut, you think that is asymmetrical somehow?
20:17:59 <CLxyz> stepcut: I assume the learning curve the other way is similar?
20:18:12 <CLxyz> SyntaxLaptop: could you expand on the purely functional bit ?
20:18:53 <stepcut> CLxyz: not quite -- haskell has a number of concepts (such as monads and  type classes) that you do not have to deal with in ocaml
20:19:43 <stepcut> CLxyz: you may find it easier to learn O'Caml and then haskell, because you will learn many of the concepts of functional programming in OCaml first, and then deal with the added complexities of Haskell later
20:19:51 <SyntaxLaptop> CLxyz: actions in Haskell have no side-effects, (or it's best to think of them that way, anyway) if you want to carry state around (as in IO) then you need to use Monads, which is a concept that's not there in OCaml, as stepcut just said.
20:21:31 <stepcut> CLxyz: but if you are more academically minded, then you might prefer Haskell because it "more pure" than ocaml.
20:22:24 <stepcut> CLxyz: it's a bit of a personal thing, I often have the choice between writing in Haskell and OCaml and always pick Haskell, Smerdyakov tends to favor ML based languages
20:22:48 <CLxyz> mem
20:23:01 <CLxyz> er, meh
20:23:06 * CLxyz has no need for ivory tower wankery
20:23:13 <SyntaxLaptop> Haskell is probably a smaller community, which means more personal attention.
20:23:28 <SyntaxLaptop> CLxyz: I program professionally in Haskell full-time.  it's not just for academics.
20:24:05 <anduril1> syntax: can I ask where you work? it sounds like a good job . . .
20:24:41 <CLxyz> that sounds rather rare actually
20:24:45 <CLxyz> which company?
20:24:46 <SyntaxLaptop> anduril1: http://www.aetion.com
20:25:35 <stepcut> CLxyz: I tend to pick haskell over OCaml because it often has features that will make solving the problem at hand easier
20:25:50 <SyntaxLaptop> there's another company that does a lot of haskell: http://www.galois.com/
20:26:23 <SyntaxLaptop> and of course: http://www.reid-consulting-uk.ltd.uk/
20:26:57 <CLxyz> I noticed that both companies are rather niche markets :)
20:27:15 <stepcut> CLxyz: what about http://www.linspire.com/ ?
20:28:54 <SyntaxLaptop> CLxyz: anyway, we gave you general reasons to use Haskell, if you tell us more about what you're interseted in specifically, then we could possibly give you more specific direction.
20:29:04 <CLxyz> Err
20:29:29 <CLxyz> general knowledge?
20:29:33 <CLxyz> larger toolset?
20:30:35 <CLxyz> I'm can do decent projects with asm/c/c++/c#, and though a functional language would generally improve my programs in the languages listed above?
20:31:55 <SyntaxLaptop> I'm not exactly sure if I parsed your last question correctly, but I would say that learning any functional language will help you to reason about software better.
20:32:00 <CLxyz> stepcut i didnt know linspire uses functional
20:32:05 <CLxyz> SyntaxLaptop: exactly my point
20:32:23 <CLxyz> and I'm looking for some pointers on ocaml/sml vs haskell
20:34:39 <SyntaxLaptop> CLxyz: well, because of the pureness, reasoning about Haskell can be easier and more orderly. because of laziness, it can be harder :) I tend to think that Haskell is a bit more designed for reasoning with, but I don't know, really.
20:34:56 <stepcut> CLxyz: :p well, we do... quite a bit
20:35:52 <CLxyz> stepcut: my bad
20:35:56 <stepcut> :p
20:36:14 <SyntaxLaptop> stepcut: linspire uses haskell?
20:36:51 * SyntaxLaptop uploads darcs 0.9.22 to debian
20:37:23 <CLxyz> at least i'm not the only one surprised
20:37:24 <SyntaxLaptop> oh, CLxyz The darcs revision control system is another pretty cool program written in Haskell.
20:38:30 <stepcut> SyntaxLaptop: yep, currently more ocaml than haskell, but that is slowly changing
20:38:40 <CLxyz> never used darcs
20:38:50 <SyntaxLaptop> stepcut: wow. did not know that.
20:38:52 <SyntaxLaptop> c00l
20:38:55 <stepcut> :p
20:38:55 <CLxyz> mostly cvs and vss
20:39:00 <CLxyz> Heh
20:39:05 <CLxyz> I assume you work there stepcut
20:39:07 <SyntaxLaptop> what's vss?
20:39:13 <stepcut> CLxyz: yes
20:39:15 <CLxyz> visual source safe
20:39:16 <CLxyz> :P
20:39:53 <stepcut> SyntaxLaptop: so far most of our development has been tools that we use internally, but some stuff has actually made it into the os, like the runtime hardware detector
20:40:18 <CLxyz> I admire your courage for going toe to toe with MS
20:40:42 <SyntaxLaptop> stepcut: very cool. I didn't know you worked there too :) I'm rooting for you.
20:40:48 <stepcut> CLxyz: thanks, its been interesting :) 
20:42:01 <CLxyz> Heh
20:42:09 <CLxyz> irconically, I want a job with the evil giant
20:42:10 <CLxyz> :P
20:42:43 <blackdog> hell, the two simons do. Why not? :)
20:43:00 <stepcut> CLxyz: well, that wouldn't be bad either, depending on the job. the glasgow haskell compiler is developed in part by funds from microsoft :)
20:43:11 <CLxyz> Heh
20:43:15 <stepcut> (microsoft research that is)
20:43:23 <CLxyz> MS Research actually sounds really cool
20:44:49 <CLxyz> and despite what everyone says, their windows team acutally sounds pretty decent
20:45:41 <stepcut> <CLxyz> and despite what everyone says, their windows ERC> 
20:45:53 <CLxyz> Hahaha
20:46:03 <CLxyz> common, you write a full feature OS
20:46:10 <CLxyz> with backwards compatibility for 15 years
20:46:27 <stepcut> (oops, irc client freakout)
20:46:44 <CLxyz> and still have the thing run okay on PIII 600s
20:46:49 <anduril1> 15 years isn't really true, a bunch of DOS software hardly works
20:46:58 <CLxyz> hrm.. okay
20:47:02 <CLxyz> even so, 10 years then
20:47:06 <CLxyz> circa win95
20:47:22 <anduril1> yeah, thats about right
20:47:44 <CLxyz> with hardware compatibility out the wazoo
20:47:58 <CLxyz> and easy enough for most people to use
20:48:02 <CLxyz> they arent doing that bad a job
20:48:29 <saynte> i'm just going to step in for 2 seconds and agree, with CLxyz, because so few people ever take that stance :)
20:48:52 <CLxyz> << I'm looking at this realistically
20:48:54 <SyntaxLaptop> I guess it's good to look on the bright side occasionally ;)
20:49:04 <CLxyz> certainly, their security needs some work, but a lot of that has to do with the fact that MS grew from teh desktop up and not servers down
20:49:11 <saynte> i agree completely. i get soooo tired of people bashing MS because it's fashionable.
20:49:20 <CLxyz> Ya!
20:49:23 <CLxyz> another intelligent channel
20:49:43 <Smerdyakov> I'll bash MS, Linux developers, and most everyone else for using outdated programming technologies.
20:50:03 <CLxyz> Oh, and the fact that the OS has thousands of compatibility shims because apps were using old bugs for proper functioning
20:50:11 <saynte> well, as long as you're an *equal-opportunity* basher, bash away! ;)
20:50:17 <CLxyz> Hahahaha
20:50:18 <CLxyz> :)
20:50:46 <CLxyz> The only thing i like about linux is that it keeps the fanboys away ;)
20:51:02 <sazzle> why bash, zsh is so much cooler!
20:51:04 <CLxyz> FreeBSD + windows++
20:51:04 <saynte> haha oh man
20:51:05 <saynte> lol
20:51:07 <saynte> csh?!
20:51:11 <CLxyz> tcsh ;)
20:51:13 <CLxyz> heh
20:51:20 <SyntaxLaptop> OK, let's talk about how awesome Haskell is for a while now
20:51:25 <CLxyz> hahah
20:51:29 <saynte> it is? 
20:51:38 * saynte grins
20:51:38 <SyntaxLaptop> ahh... so awesome...
20:51:42 <saynte> radical!
20:51:44 <saynte> GNNARRRLY!
20:51:59 <CLxyz> haha
20:52:27 <stepcut> Haskell? Excellent!
20:52:34 <CLxyz> Hehe
20:52:36 <saynte> okay, here's one: when's a good time NOT to use haskell?
20:52:39 <CLxyz> I think i'll go with haskell
20:52:51 <SyntaxLaptop> and [awesome x | x <- features haskell] ==> True
20:52:54 <CLxyz> Anytime where OO/Proc/logical paradigms are better?
20:53:05 <anduril1> never.
20:53:10 <SyntaxLaptop> you guys are trying to tell if we're objective, aren't you ;)
20:53:18 <CLxyz> I am ;)
20:53:23 <saynte> just puttin the group through the ringer ;)
20:53:26 <anduril1> (disclaimer: previous statement was ironic)
20:53:34 <CLxyz> Heh
20:53:44 <CLxyz> I dont mind some favoritism
20:54:13 <Riastradh> Either you'll have to redefine 'some' or you might change your mind there.
20:54:18 <CLxyz> but some semblance of objectivity would be nice
20:54:20 <CLxyz> Hahaha
20:54:39 <SyntaxLaptop> one weakness for Haskell right now is the libraries; we're working on that, though.  for something where you have to paste together a bunch of stuff where you expect an existing library, Haskell might not work (though I can't think of examples right now; a lot of new libraries are flying around lately)
20:54:48 <CLxyz> Heh
20:55:16 <SyntaxLaptop> Since haskell uses garbage collection and stuff, it'll probably be bad for hard-real-time applications
20:55:17 <CLxyz> The tutorial A Gentle Introduction to Haskell any good?
20:55:22 <CLxyz> ++
20:55:27 <CLxyz> Yeah, someone with sense
20:55:27 <saynte> no!
20:55:41 <SyntaxLaptop> and I probably wouldn't use Haskell to write an OS
20:55:45 <saynte> that gentle introduction is nay genle, it's downright rough
20:55:50 <CLxyz> haha
20:55:53 <SyntaxLaptop> I hear "Yet Another Haskell Tutorial" is good
20:55:55 <stepcut> SyntaxLaptop: bashing hOp now are ya?
20:55:58 <SyntaxLaptop> though I've never seen it
20:55:59 <saynte> i have some friends using haskell to write a compiler i think it was
20:56:22 <stepcut> saynte: well, GHC is written in haskell... :p
20:56:22 <SyntaxLaptop> stepcut: never really looked at that project; I just suspect that if I were to write an OS, it wouldn't be in Haskell. how do they manage memory?
20:56:28 <saynte> a super-duper-optimized-parallel-compiler
20:56:41 <saynte> stepcut: sorry, i should have clarified :)
20:56:43 <stepcut> SyntaxLaptop: beats me, I only looked at the screen shots :)
20:57:13 <CLxyz> as long as you admit it has classes of problems which its bad for, i'm fine :)
20:57:18 <SyntaxLaptop> though if I were going to write an OS (for some stupid reason) I'd probably look at hOP
20:57:25 <Riastradh> SyntaxLaptop, writing the low-level run-time code in a language X isn't impossible to write in X.
20:57:55 <Riastradh> For instance, T was written entirely in T with some sprinkles of assembly language here & there.  The garbage collector was written in T.
20:58:51 <CLxyz> Hrm..
20:59:05 <CLxyz> looks like I've got: VHDL, Haskell, and more C# for the next few months
20:59:11 <CLxyz> Oh, and C++ as well
20:59:12 <saynte> vhdl, the devilll!
20:59:35 <saynte> remind yourself that vhdl is not a programming language as often as you can
20:59:40 <Smerdyakov> C# is total garbage.
20:59:47 <Smerdyakov> C++ is worse garbage, though.
21:00:17 <SyntaxLaptop> C++ isn't that bad. I like it.
21:00:27 <jemfinch> I'd say that C# is more garbage than C++.
21:00:41 <Smerdyakov> C++ isn't memory safe....
21:00:46 <SyntaxLaptop> man. jemfinch is here, we need to start #languageWar before it gets out of hand.
21:00:47 <jemfinch> at least C++ has the redeeming feature of allowing low-level code.
21:00:57 <saynte> hah
21:01:00 <SyntaxLaptop> or maybe we could just go to #theology
21:01:12 <jemfinch> SyntaxLaptop: shapr and I started that the other day :)
21:01:19 <SyntaxLaptop> jemfinch: I know :)
21:01:21 <stepcut> saynte: agreed, trying to write vhdl like a c programmer will cause havoc
21:01:25 <SyntaxLaptop> Smerdyakov: what does memory safe mean?
21:01:30 <CLxyz> Hahaha
21:01:33 <jemfinch> (more shapr than I; I'm fine talking about theology in whatever channel it occurs :))
21:01:39 <CLxyz> I like C# on windows, driving databases though
21:01:52 * stepcut uses haskelldb for driving databases
21:01:57 <saynte> stepcut: it will, oh man, i hate vhdl :) had to do a project in it and it was awful. (or at least without training, which we didn't really get)
21:02:03 <Smerdyakov> SyntaxLaptop, reasonably modeled with a standard operational semantics
21:03:39 <CLxyz> Hahaha
21:03:49 <CLxyz> saynte: I know vhdl isnt a programing language
21:04:04 <CLxyz> I'll be using it to describe RTL logic :P
21:04:19 <saynte> CLxyz: well, even so, remind yourself all over the place, put post-its on your face if you have to :)
21:04:22 <stepcut> saynte: Yeah, I think you need good instruction to make sense of it -- otherwise it's a bit like trying to do regular expressions by writing the state machine directly
21:05:40 <CLxyz> Hahaha :)
21:05:40 <saynte> stepcut: yeah, people were getting caught on some pretty basic stuff, but it's hard to figure out just on your own.
21:06:30 <saynte> but, all in all, i ended up making a draw program with a ps/2 mouse and a monitor, and this other guy got tetris going with a keyboard+monitor, his thing was awesome.
21:06:47 <stepcut> cool
21:06:52 * stepcut has to go, out of battery power
21:07:50 <CLxyz> cu
21:07:56 <CLxyz> Hehe
21:08:03 <CLxyz> I should do that tetris thing for fun
21:08:05 <saynte> CLxyz: so what's this vhdl work for? work/school/personal?
21:08:25 <CLxyz> personal/school + hopefully eventulaly work
21:08:42 <saynte> that should read "fun". when saying fun in relation to vhdl, you have to put it in quotes, so people know you're not crazy ;)
21:09:29 <saynte> so do you have any hardware to test out the vhdl on?
21:11:17 <CLxyz> There's some hardware at work, and at school
21:11:32 <CLxyz> so I should be able to get some time on those
21:12:42 <saynte> oh that's cool, i'm not a vhdl expert by any means, is there any real interesting things you can do *without* the hardware?
21:16:07 <CLxyz> Err run simulations?
21:16:18 <CLxyz> Although sometimes you just have to have hardware to test
21:16:59 <saynte> yeah, you can go bleary-eyed looking at timing diagrams, hehe.
21:17:09 <saynte> but definitely a good thing to test out design before uploading
21:17:54 <CLxyz> Yeo
21:17:55 <CLxyz> Yep
21:18:24 <CLxyz> I think i'll do an in-order 32-bit risc proc
21:18:28 <saynte> so what's your work-work?
21:19:33 <CLxyz> I'm on a coop job with a small company in downtown vancouver
21:19:41 <CLxyz> I write C code for CMDA2000
21:20:45 <saynte> ohh, cool, i'm on my first programming job :)
21:20:51 <saynte> in haskell no less, the horror! hehe
21:21:58 <CLxyz> Hehe
21:22:02 <CLxyz> what've u done previously?
21:22:09 <saynte> uhhh nothing, hah
21:22:20 <CLxyz> Hehe
21:22:23 <CLxyz> Thats cool :)
21:22:30 <CLxyz> my first one was VB :\
21:22:39 <saynte> hehe, well, start where you can i suppose
21:22:44 <CLxyz> working my way down the ladder though
21:22:45 <CLxyz> :)
21:23:14 <Cale> down?
21:23:19 <CLxyz> Heh
21:23:34 <CLxyz> VB -> C++ -> C/asm -> (hopefully) RTL stuff
21:24:25 <saynte> oh hey cale, how's it going?
21:24:32 <Cale> It's alright.
21:24:45 <CLxyz> bbl
21:24:45 <saynte> awesome awesome, good weekend?
21:24:52 <saynte> CLxyz, cya!
21:24:53 <Cale> yeah
21:25:03 <Cale> later CL
21:25:03 <saynte> man, my oven just died tonight
21:25:16 <Cale> that's no good
21:25:33 <saynte> yeah, the element burned out. you know how freaky it is to see white light coming from the oven? lol
21:25:38 <Cale> heh
21:25:55 <saynte> not the usual, comforting, red-glow, but welder-white, lol
21:26:15 <SyntaxLaptop> saynte: you have a job haskell-hacking too? where do you work?
21:26:32 <saynte> SyntaxLaptop: for my prof at university
21:27:02 <SyntaxLaptop> saynte: who's that?
21:27:21 <saynte> SyntaxLaptop: Dr. Kahl at McMaster
21:27:49 <Cale> http://www.cas.mcmaster.ca/~kahl/ <-- this guy :)
21:28:00 <saynte> yep, cale's got the goods :)
21:28:21 <SyntaxLaptop> cool.
21:28:28 <saynte> he's a haskell-maniac
21:28:34 <Cale> McMaster seems to be buzzing with Haskell activity lately :)
21:28:39 <saynte> Yes, it's quite odd ;)
21:29:23 <Cale> and soon we'll have Wolfgang Thaller here :)
21:29:45 <saynte> who's that?
21:29:55 <Cale> The MacOS maintainer for GHC
21:29:57 <saynte> we can team him up with kahl, they can be "wolf & wolf"
21:30:01 <saynte> ohhh gotcha
21:30:46 <SyntaxLaptop> hm. what's with all these foreigners, 'eh, jemfinch?
21:30:53 <SyntaxLaptop> we need more Haskell in OUR country
21:31:10 <saynte> what country is that?
21:31:28 <jemfinch> SyntaxLaptop: America has SML :)
21:31:42 <SyntaxLaptop> saynte: ohio
21:31:43 <SyntaxLaptop> ;)
21:32:18 <saynte> ohio is it's own country now? hehe
21:32:59 <saynte> well, all hail the sovereign nation of ohio... i spose... ;)
21:33:29 <SyntaxLaptop> you laugh now...
21:34:12 <saynte> i'll laugh later too... if you don't watch it... ...
21:35:34 <SyntaxLaptop> hmmm
21:36:05 <jemfinch> more presidents from Ohio than any other state.
21:36:54 <SyntaxLaptop> \msg jemfinch thanks! nice save!
21:36:54 <SyntaxLaptop> oops
21:37:04 <jemfinch> heh
21:37:48 <saynte> smooth! ;)
22:47:41 <palomer> when are you guys going to have midi support?
22:49:37 <Cale> which guys?
22:49:56 <palomer> haskell guys
22:50:21 <Cale> we do have midi support
22:51:09 <Cale> http://www.haskell.org/haskore/
