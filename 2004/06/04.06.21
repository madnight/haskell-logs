00:13:40 * shapr yawns
00:14:01 <Pseudonym> That exciting, eh?
00:14:17 <Pseudonym> I was wrestling with online ticket purchases.
00:14:35 <shapr> I'm reading up on running Zope behind Apache
00:14:51 <Pseudonym> Oh, fun.
00:15:14 <Pseudonym> I have decided that concert ticket purchases should be handled by Haskell.
00:15:20 <Pseudonym> It would be much better.
00:15:24 <shapr> I agree
00:15:44 <shapr> I'm amazed at the amount of spam that people try to pass through my server
00:15:46 <Pseudonym> Because at the moment, the allocations are almost maximally inefficient.
00:15:59 <Pseudonym> Doing it right is actually an NP-hard optimisation problem.
00:16:06 <shapr> is there a central place where I can notify people about attempted spam?
00:16:07 <Pseudonym> Though you can split it into small chunks in practice.
00:16:17 <Pseudonym> shapr: spamcop.net?
00:16:31 <Pseudonym> They have a nice real-time blacklist which detects spam-in-progress.
00:16:43 <shapr> hm, neat
00:18:59 <shapr> what's NP hard about ticket purchases?
00:19:17 <shapr> I think the sane solution is to switch to im2000 for email
00:19:27 <shapr> buggmuzz: hi!
00:19:29 <Pseudonym> Oh, I tried to buy some tickets this morning.
00:19:46 <Pseudonym> And within half an hour of them going on sale, they had something like 150 odd tickets left.
00:19:50 <shapr> yow
00:19:52 <Pseudonym> All of them single seats.
00:20:04 <Pseudonym> That's suboptimal.
00:20:31 <Pseudonym> The problem is that actual seat numbers are allocated at ticket purchase time.
00:20:55 <Pseudonym> Compare with, say, airline bookings, where you buy seats before hand, but the actual seat numbers are allocated when you arrive at the airport.
00:21:10 <Pseudonym> What I propose is that you split the venue into small blocks.
00:21:50 <Pseudonym> And within that block, you sell sets of seats, ensuring that there is a way to distribute those groups of seats within the block.
00:21:58 <Pseudonym> And when the block is filled, THEN assign actual seat numbers.
00:22:27 <Pseudonym> The NP-hard part is ensuring that you can actually fit seat allocations within a block.
00:22:41 <Pseudonym> Although if the block is a row, it's not NP-hard.
00:22:54 <Pseudonym> But then you can't reallocate as needed.
00:24:24 <earthy> otoh, it's either a very big stadium/concert hall or a *very* stupid ticketing system, to have done it like that
00:24:33 <earthy> even with pre-sold seating
00:24:35 <Pseudonym> It's a stadium, yes.
00:24:43 <shapr> I'd like to do agent-based purchases
00:24:46 <Pseudonym> And I think it's a stupid ticketing system.
00:24:56 <earthy> then I wouldn't be surprised if the 150 seats are all row-edge seats
00:25:02 <Pseudonym> Right.
00:25:34 <earthy> and you won't solve that problem using row-sized blocks, really
00:25:36 <Pseudonym> Even so, redistributing the allocated seats within a block would probably turn a few row-edge seats into adjacent seats.
00:25:42 <Pseudonym> No, you need blocks.
00:26:06 <earthy> but blocks wouldn't guarantee seat-adjacency for groups
00:26:41 <earthy> or have much the same problem with edge seats...
00:28:41 <blackdog> shapr: do you know how your local-Variable stuff works? It doesn't seem to set the compile-variable reliably...
00:29:53 <Pseudonym> Blocks would be better because you can redistribute adjacent seat allocations within a block.
00:30:03 <Pseudonym> It's an integer bin packing problem, basically.
00:31:09 <Pseudonym> Phew!  Third concert just went on sale.
00:31:12 <shapr> blackdog: when you change it, you need to save the doc, change a char, and hit M-x revert-buffer
00:31:13 <Pseudonym> My wife will be so pleased.
00:31:42 <earthy> well... true.
00:32:32 <earthy> it's much like the difference between M$ Word's linebreaking algorithm and TeX's linebreaking algorithm
00:32:49 <Pseudonym> Right, kind of.
00:33:00 <Pseudonym> TeX's algorithm, however, is quadratic.
00:33:12 <Pseudonym> Because it's subject to the constraint that adjacent words must remain adjacent.
00:33:26 <Pseudonym> With a bin packing problem, you're allowed to reorder the words in the paragraph at will.
00:33:54 <earthy> yup. and that gets to explode
00:34:37 <earthy> however, for practical purposes you'd apply this to blocks of what, something like 5 rows of 20-ish seats
00:35:12 <earthy> so that'd get you an absolute max of 100 numbers to reorder.
00:35:41 <Pseudonym> In stadiums (stadia?) the seats tend to come in blocks already.
00:35:45 <earthy> not intractable.
00:35:49 <earthy> stadiums
00:36:00 <Pseudonym> In concert halls, the blocks tend to be bigger.
00:36:36 <blackdog> shapr: so much for automation. :)
00:36:38 <earthy> but those are the 1st rung, 2nd rung, 3rd rung seating blocks, right?
00:36:39 <Pseudonym> You'd want some control.  As Verbophobe noted, if you want front row centre in the dress circle, and you get in early, you should get it.
00:37:12 <Pseudonym> Or, you could only guarantee that you'll get seats somewhere in the middle third, first five rows.
00:37:43 <earthy> it depends on how wanted those front row centre seats are
00:37:55 <earthy> but a block need not be rectangular... :P
00:38:09 <earthy> semicircular blocks of expanding size would work
00:38:31 <Pseudonym> Right.
00:38:56 <Pseudonym> I think it depends on the kind of programme and on the venue.
00:39:00 * earthy nods
00:39:14 <Pseudonym> For a rock concert, for example, seeing the stage is more important than for a symphony orchestra concert.
00:39:48 <earthy> however, for a classical music concert you want to be in the acoustic sweet spot of the hall
00:40:00 <earthy> and with opera it's different again
00:41:11 <Pseudonym> Oh, true.
00:41:18 <Pseudonym> I went to an opera once where I was in a box.
00:41:20 <earthy> interesting little problem though.
00:41:26 <Pseudonym> Now you'd think boxes would be good places to be.
00:41:39 <earthy> but for the fact that you can't really see or hear a thing ;)
00:41:59 <Pseudonym> I could hear everything and see everything... except the surtitles.
00:42:09 <earthy> *ouch* :)
00:42:11 <shapr> blackdog: usually the compile-command doesn't need much changing
00:42:13 <Pseudonym> The theatre had an elaborate roof, and you couldn't see the English version of what they're singing!
00:42:29 <Pseudonym> Which somewhat detracted from the experience.
00:42:39 <earthy> ofcourse, you're such an opera connoiseur that you knew the story by heart, right. ;)
00:42:42 <Pseudonym> Anyway, surtitles won't be a problem for a rock concert.
00:42:46 * earthy nods
00:43:07 <shapr> blackdog: there's probably a faster way to do it with buffer-local var setting, but I haven't gotten around to figuring it out.
00:43:15 <Pseudonym> Hell, if you don't know the lyrics, just listen to the audience.
00:43:48 <earthy> won't help you much if you don't know the language either
00:43:54 <Pseudonym> True.
00:44:12 <earthy> but it's quite rare to find rock in a language you can't comprehend
00:44:33 <Pseudonym> Indeed.
00:44:37 * earthy knows of rockconcerts in dutch, german, english and french within the Netherlands
00:44:50 <earthy> only french would give me some pause understanding
00:45:05 <earthy> but surtitling wouldn't help there. :)
00:45:31 <earthy> `Chasing Bottoms'... somebody had *fun* naming ;)
00:45:41 <Pseudonym> Actually, it's rare to find rock in a language you _can_ comprehend.
00:46:13 * earthy grinz
00:46:31 <Pseudonym> I have a suspicion that for most R&B acts I'd need a translation.
00:47:21 <blackdog> shapr: yeah, I know. i'm just being persnickety
00:47:27 <Pseudonym> Oh, and of course, we haven't even touched on the problems for sporting events, too.
00:47:29 <blackdog> and trying to avoid real work. :)
00:47:36 <Pseudonym> Which have their own problems not associated with concerts and theatre.
00:47:50 <earthy> f-side supporters...
00:48:00 <shapr> blackdog: how's it working out for you?
00:49:22 <blackdog> shapr: could be better.. had a bit of a blah day, not much progress. My little brother came over and I allowed myself to be distracted...
00:50:33 <ozone> blackdog: you're sick!
00:50:36 <ozone> oh wait, no, that's me
00:51:26 <blackdog> ozone: you did what with my brother?
00:55:39 <ozone> blackdog: ehehehehh.  eh.
01:09:03 * vegai wonders if scheme has partial application
01:10:39 <shapr> hej bringert 
01:10:46 <bringert> hej shapr
01:10:50 <shapr> wassup?
01:11:07 <bringert> just got to work
01:11:13 <bringert> wanna take this in #haskell.se?
01:21:46 <Pseudonym> Must away.  Nytol!
02:53:34 * shapr hops cheerfully
02:53:40 <shapr> GF is coool
02:55:06 <buggmuzz> hey shapr.
02:55:33 * shapr bounces
02:58:58 * shapr uses GF to test his Swedish skillz
02:59:02 <shapr> y0 buggmuzz, wassup?
02:59:09 <shapr> how's code?
02:59:37 <buggmuzz> not much.  Code is, non existent :( Seems all I'm doing nowadays is documentation
02:59:44 <shapr> oh, no time for fun code?
02:59:48 <buggmuzz> ja
02:59:58 <shapr> that sucks
03:04:43 <vegai> GF isn't girlfriend? =P
03:05:04 <shapr> http://www.cs.chalmers.se/~aarne/GF/ :-P
03:06:05 <shapr> whew,  finally, 39/52 and I passed the swedish test.
03:06:39 <shapr> I now realize how much I need to study the plural, possessive, and definite forms of nouns.
03:06:44 <earthy> interesting. sounds like a tool quite like the Grammar Workbench
03:08:22 <shapr> the local SFI (swedish for invaders) course uses several primary types of language quiz software, DOS, win3.1, and Java
03:08:28 <earthy> but that is dead these days
03:09:10 <shapr> they're running these programs on IBM p4 boxes with lots of RAM and nice screens, etc
03:09:40 <earthy> pity the poor machines
03:09:54 <shapr> I'd like to see if GF can be used for online web-based quiz software
03:09:54 <earthy> but the quiz software runs spiffily, right?
03:10:03 <shapr> the java software suxx0rs
03:10:08 <shapr> the DOS and win3.1 stuff is pretty good
03:10:22 <shapr> anyway, GF is libre,gratis, etc
03:10:50 <shapr> so it'd be neat to use it instead
03:11:48 <shapr> also, the dos/win3.1 quiz software lets you record your name, but with no network and no sync'ing of records, there's no point
03:21:05 <blackdog> shapr: ok, i'm converted. unit tests are cool.
03:21:38 <shapr> blackdog: yay!
03:21:41 <shapr> g'day buggmuzz
03:21:44 <shapr> er buggy
03:22:16 <shapr> blackdog: you're using the unit-test-first bit, yah?
03:23:03 <vegai> quicktest?
03:23:24 <shapr> QuickCheck?
03:23:43 <vegai> oh yeah, that
03:23:48 <blackdog> shapr: yep. it's kinda cool - i used to worry about whether my code is general enough to handle everything it might see. Now i'm just taking it one test at a time.
03:24:03 <blackdog> shapr: did you end up finding a way of integrating QC into HUnit?
03:24:59 <shapr> yes, sort of
03:25:36 <shapr> Heffalump once said "I wish QuickCheck would save failing test cases."
03:26:02 <shapr> while mulling that over some months later, I realized that's *exactly* how to do Test Driven Development with QuickCheck and Haskell
03:26:47 <shapr> I mentioned that idea to John Hughes, he said it should be easy enough to save the failing test case as a seed for the prng
03:26:59 <shapr> but I've never gotten around to trying to fix QC
03:27:27 <shapr> oh, I could make a GF.cabal 
03:28:28 * shapr looks at the QC source
03:28:34 <ozone> blackdog: dear god, you're using unit tests now?
03:28:38 <bringert> shapr: I am working on a GF rpm
03:28:42 <shapr> bringert: spiffy!
03:29:04 <bringert> I'll try to get you the latest GF cvs version this afternoon
03:29:09 <shapr> yay!
03:29:27 * bringert lunch
03:29:34 <shapr> I'm happy that Aarne sent me the instructions on getting mq to work
03:30:45 <andersca> * bringert lunch
03:30:48 <andersca> I wonder if gf can parse that
03:31:10 <shapr> would probably think bringert is an adjective
03:31:21 <blackdog> ozone: ...yes. why?
03:31:32 <blackdog> GF?
03:31:51 <blackdog> oops. nevermind
03:31:51 <shapr> Grammatical Framework - http://www.cs.chalmers.se/~aarne/GF/
03:32:07 <blackdog> sorry, should read scroll history. :)
03:32:08 <ozone> blackdog: i just remember the says when manuel asked you "so have you written it?"  "yes, it compiles"  "have you run it yet?"  "no" :)
03:32:26 * blackdog hides head under pillow
03:33:11 <blackdog> Hello, my name is blackdog, and I'm a non-testing-coder
03:35:01 <blackdog> i've got through denial, anger and bargaining now.
03:37:30 * earthy grins
03:37:46 <earthy> reminds me of the morse-code led blink device I once wrote
03:38:21 <earthy> (nifty: you simply wrote command strings to /proc/something and it blinked them out in morse... very useful for embedded devices)
03:38:39 <earthy> that was write, compile, debug, compile, debug, compile, debug
03:38:43 <earthy> `tests? what tests?'
03:39:09 <earthy> as soon as it stopped crashing the kernel it worked flawlessly. ;)
03:45:15 <blackdog> See? If you'd wasted time on tests, it'd have taken you heaps longer. :)
03:45:23 * shapr grins
03:59:04 <blackdog> should HUnit show you the results of the first few tests when it hits an undefined on a later test?
04:00:02 <shapr> probably
04:01:05 <blackdog> shapr: does it for you? I just pinched your setup... mayybe i've screwed it up somewhere lese.
04:01:13 <blackdog> s/lese/else/
04:01:47 <shapr> what sort of undefined?
04:01:56 <shapr> undefined function?
04:02:18 <blackdog> importantFunc = undefined
04:02:20 <blackdog> just stubs
04:07:12 <vegai> anyone read Dive Into Python? Would that be a nice format for a practical introductory Haskell text?
04:08:24 <Verbophobe> Honestly, I start by explaning the basic "philosophy" behind haskell first.  Things like functions, purity, how it's not imperative, etc.
04:08:58 <shapr> blackdog: I don't remember, and I just killed all my unit tests with a ghc upgrade
04:09:02 <Verbophobe> Then I'd probably introduce concepts gradualy, and stick in a bunch of excersizes with answers, somewhat like a textbook.
04:09:29 <Verbophobe> That would seem to be a format that is most attractive for new users.
04:09:29 <vegai> Verbophobe: that kinda text doesn't work for me, and I think I know few others who would agree
04:09:41 <Verbophobe> Really?
04:09:54 <Verbophobe> I would've killed for something like that when I started Haskell.
04:10:30 <vegai> well, perhaps DIP is like that
04:10:52 <vegai> not much philosophy though. Except implicitly
04:11:41 <Verbophobe> Paste a link to DIP.  I'll check out what you mean.
04:12:06 <vegai> http://www.diveintopython.org
04:13:36 <Verbophobe> See, that's got a bunch of shit about everything, but it doesn't have excersizes, and it starts out too abruptly.
04:14:04 <Verbophobe> exercise*
04:14:20 <Verbophobe> Whoa I'm tired :)
04:16:35 <vegai> I'd love to be able to write a text about Haskell IO and exceptions that pre-grads understand in first reading
04:17:03 <shapr> me too
04:17:24 <Verbophobe> Yeah.  In fact, I am a pre-grad.
04:17:34 <shapr> I'm a really old pre-grad
04:17:35 <Verbophobe> And I'm got a bunch of free time this summer...
04:17:38 <vegai> yes, me too =)
04:17:44 <Verbophobe> I've*
04:17:46 <Verbophobe> Hehe.
04:17:57 <Verbophobe> I'd try my hand at writing something.
04:18:06 <shapr> we could all write it together
04:18:08 <Verbophobe> Yeah.
04:18:09 <shapr> then it's much more likely to not suck
04:18:28 <Verbophobe> Definitely.
04:18:36 <shapr> also, I met a bunch of people at EuroHaskell who want to understand monads, and still don't
04:18:42 <shapr> so we have willing victims
04:18:46 <Verbophobe> Neat.
04:19:00 <vegai> I don't even know if I understand them
04:19:12 <Verbophobe> Me neither...  Well, I can use them, that's for sure.
04:19:21 <Verbophobe> I couldn't build one to save my life, though.
04:19:51 <shapr> I understand the existing instances of monads that I've read about
04:20:11 <shapr> I haven't run across any new concepts that I could monadize
04:20:23 <shapr> like, once you have Error, Exception, State, etc
04:20:26 <shapr> what else could you monadize?
04:20:30 <blackdog> re DIP: their discussion of static typing is a bit off.
04:20:50 <blackdog> "A language in which types are fixed at compile time. Most statically typed languages enforce this by requiring you to declare all variables with their datatypes before using them."
04:20:58 <blackdog> that's damn near libellous. :)
04:21:19 <Verbophobe> Well, the parsec guy did a pretty good job.
04:21:36 <Jerub> mmmparsec
04:21:42 <Verbophobe> And I guess you could have fun making a little C workalike Monad in Haskell.
04:21:47 <Verbophobe> That would be cool and pointless.
04:23:00 <vegai> ever read this? http://www.paulgraham.com/hp.html
04:25:13 <Verbophobe> Nope.
04:25:25 <Verbophobe> Read most of Paul Graham's stuff, but not that.
04:25:58 <Verbophobe> Trouble is, I sometimes feel like this guy jerks off to LISP code.
04:26:04 <Verbophobe> I mean, he's so passionate about it.
04:26:21 <shapr> nothing wrong with being passionate :-P
04:27:04 <Verbophobe> Heh...  That kind of passion gets you a sticky keyboard and a hairy palm.
04:28:12 <ozone> Verbophobe: compared with a lot of people on newsgroups, believe me, paul graham isn't that much of a lisp weenie
04:28:42 <ozone> blackdog: what's DIP?
04:28:49 <Verbophobe> That's comforting...  I guess.
04:29:20 <shapr> it's true, wait till you meet rahul
04:29:38 <Verbophobe> Who's he?
04:29:40 <shapr> rahul makes PG look like an idly interested tinkerer
04:30:03 <shapr> used to hang out on #emacs a lot
04:30:30 <Verbophobe> I'd assume he despised Haskell?
04:30:32 <ozone> Verbophobe: (and paul knows what he's talking about, which is probably quite a bit better than what your average smug LISP weenie can demonstrate)
04:30:34 <vegai> well, I don't tend to judge people I don't know ;) But the article is excellent
04:30:50 <Verbophobe> vegai) I'm reading it as we speak.
04:32:05 <shapr> I'm not sure that anything other than Common Lisp shows up as more than a blip on rahul's radar.
04:32:38 <shapr> personally, words don't persuade me as much as code
04:35:31 <Verbophobe> Woo.  He just dissed static typing.
04:36:17 <vegai> that bastard!
04:36:25 <ozone> so does everybody who doesn't know static typing beyond C :)
04:37:19 <vegai> you mean this: "We need a language that lets us scribble and smudge and smear, not a language where you have to sit with a teacup of types balanced on your knee and make polite conversation with a strict old aunt of a compiler.
04:37:24 <vegai> " ?
04:37:42 <Verbophobe> Yeah, that's what I've always wondered...  Why is everyone so bent against static types?  Haskell does it brilliantly, no?
04:37:45 <Verbophobe> Yeah, that.
04:37:51 <Verbophobe> Actually, the sentence before.
04:37:52 <earthy> static typing sucks
04:38:01 <ozone> go comrade earthy!
04:38:03 <Verbophobe> "Static typing would be a fine idea if people actually did write programs the way they taught me to in college."
04:38:04 <vegai> he's correct. We _do_ need a language like that
04:38:17 <earthy> unless it is inferred
04:38:47 <vegai> how do they teach programming in college, by the way?
04:38:53 <earthy> many different ways
04:39:02 <vegai> I wonder what his was
04:39:04 <Verbophobe> I hear it has a lot to do with Java.
04:39:20 <earthy> one of them being `okay, you've had loops, variables, assignment and rows. now do a compiler.'
04:40:09 <vegai> also a variation, s/now do a compiler./course is finished./
04:41:39 <earthy> oh, and `you've learned imperative programming, albeit with Pascal. Now hack on this Minix kernel, in C. You have one 2 weeks: one to learn C, one to do the hacking.'
04:42:15 <ibid> a variation: "okay, you've had loops, variables, assignment and rows. you didn't understand them? no problem, you've passed with an excellent grade"
04:42:28 <vegai> ibid: was that ours? =)
04:42:35 <earthy> ibid: :)
04:42:41 <ibid> vegai: according to some :)
04:42:59 <vegai> did you lower their grades?
04:43:05 * vegai smirks evilly.
04:43:12 <ibid> oh, you mean _ours_?
04:43:19 <ibid> nope
04:43:22 <Verbophobe> I'd vouch for ibid's variation.  I've helped grad students with their homework...
04:43:31 <ibid> i've never been the examiner on that course
04:44:26 <vegai> ah
04:46:08 <ibid> i think our (pre-java) approach is best described as "you've had loops, variables, assignment and rows.  take a break and forget everything, then come and write a cd register from first principles"
04:46:19 <earthy> ;)
04:47:01 <earthy> I particularly liked having to go through a large programming project course with at least two of my classmates who *hadn't* picked up programming in 1.5 years at uni
04:47:06 <earthy> NOT
04:47:20 <ibid> our current approach is the same with the word "class" thrown in for good measure
04:47:30 <earthy> (yes, they took the same set of classes, yes they passed as well as I did)
04:47:56 <shapr> sometimes I think I'm lucky I never had any CS courses.
04:47:59 <shapr> sounds like they rot your brain
04:48:08 <vegai> might be
04:48:09 <earthy> in fact, they do not. if you don't let them.
04:48:32 <saz_> mine haven't been all bad :-)
04:48:48 <earthy> Mine have been fairly good for the most part
04:49:10 <ibid> how do you find the best students?  put everybody in a class run by a bad teacher.  the best are those who manage to learn despite the teaching.
04:49:10 <vegai> I know a few people who have lost their (surely innate!) craving for programming after taking a few programming courses
04:49:21 * earthy laughs
04:49:25 <shapr> vegai: that's depressing
04:49:29 <vegai> =)
04:49:31 <shapr> saz_: hey, are you in .il?
04:49:53 <saz_> .il??
04:50:20 <arjanb> most programming courses teach more about concepts than real programming
04:50:25 <shapr> saz_: just that the saz nickname got registered by someone in .il
04:50:34 <saz_> shapr: no, i'm in au
04:50:36 <shapr> arjanb: I wish there were a better balance
04:50:39 <saz_> hm, someone registered my nick!
04:50:48 <shapr> saz_: in that case, you may want to choose another nick and register it
04:50:50 <ibid> most programming courses teach programming language syntax more than programming
04:51:07 * earthy registered his nick and promptly forgot the password
04:51:09 <sara> ba
04:51:11 <Jerub> ibid: I've taught python to kids in a crash course before.
04:51:14 <sara> that's taken too
04:51:25 <shapr> sara: you can get that one if you want, last seen 1 year 6 weeks
04:51:26 <ibid> Jerub: and?
04:51:28 <shapr> just gotta ask on #freenoe
04:51:31 <shapr> #freenode
04:51:44 <Jerub> ibid: we found that we had not explained programming enough, but no one had trouble with syntax.
04:51:56 <ibid> yeah, python is  nice
04:52:00 <ibid> so is scheme
04:52:08 <Jerub> yes
04:52:09 <ibid> and people also praise eiffel for the same reason
04:52:11 <earthy> I find people do mostly have trouble with syntax.
04:52:11 <shapr> the difference there is that you don't end up working with those kids
04:52:12 <sara> shapr: hm, i'll think about it
04:52:14 <earthy> even in python
04:52:26 <Jerub> we would have done scheme if we had a good beginners crash course that did graphics + games
04:52:26 <earthy> (what? why should that be indented?)
04:52:40 <earthy> (oh, right, should there be a colon there? right.)
04:52:44 <shapr> learning programming is not hard, learning professional programming is
04:52:58 <ibid> earthy: it's useful to have the compiler/interpreter to force indentation
04:53:11 <vegai> I've always thought that python's syntax, including the colons and whatnot, was absolutely clear
04:53:14 <ibid> earthy: i've seen too many beginning students who program in "left-straight"
04:53:20 <shapr> or whatever combination of reliable, readable, sane, that counts at professional
04:53:21 <Jerub> the course I was running them through was basically "hi, we're going to hold your hand through writing some programs"
04:53:32 <shapr> too bad so few paid programmers are professional
04:54:06 <sara> what's 'professional'?
04:54:19 <shapr> whatever combination of reliable, readable, sane that counts at professional
04:54:21 <ibid> all paid programmers are by definition professional
04:54:27 <shapr> fair enough
04:54:33 <sara> yeah
04:54:36 <ibid> but most of them are not very good at it
04:54:37 <Jerub> ibid: I understand the words you say, but the meaning is a lie.
04:54:43 <ibid> Jerub: :)
04:54:56 <arjanb> most students with previous programming experience had only average grades on the programming courses while many other students fail when writing larger programs
04:55:09 <shapr> so, what do you call that set of programmers that usually refactor their code, try to keep it from being too tightly bound, etc?
04:55:12 <ibid> i refuse to accept any definition of "professional" that does not amount to "being paid to do it"
04:55:25 <ibid> shapr: good :)
04:55:47 <shapr> ok, 'good programmers' aren't as common as professional programmers.
04:55:52 <Jerub> I wish my coworkers were merely good.
04:55:56 <ibid> shapr: or perhaps disciplined
04:56:05 <Jerub> shapr: I have a new manager!
04:56:23 <vegai> savvy
04:56:24 <Jerub> shapr: we nearly gave her a heart attack by telling her we have no revision control in the same breath as we have no development server.
04:56:27 <Jerub> I was much relieved.
04:56:50 <shapr> you told me that before. I saved it in my quotes file.
04:56:56 <Jerub> oh good.
04:56:58 <Jerub> )
04:56:58 <Jerub> :)(
04:57:07 <Jerub> things have slowed down :(
05:27:41 <shapr> I've been thinking about ideas that could be stretched further, just now I was thinking about the ways speculative evaluation could be used in linux
05:28:02 <shapr> like, trickle downloads of popular packages 
05:29:29 <blackdog> spending bandwidth to save latency?
05:29:42 <shapr> there's an emacs package that loops saving your file and then the 'make' command in the background and continuously updates the error buffer
05:29:47 <shapr> blackdog: right, that sort of thing
05:29:59 <shapr> but most of the time, I'm not using my bandwidth, or at least not much of it
05:30:05 <shapr> and I have a bunch of disk space I'm not using too
05:30:17 <shapr> so you could have 'almost free' filespace that's all sort of useful cached thingies
05:30:30 <shapr> linux packages, the latest slashdot articles locally cached, etc
05:30:32 <blackdog> yes, but you're part of the moral minority who doesn't pirate music and movies. :)
05:30:43 <shapr> yah well
05:31:28 <shapr> 173GB free locally, and 11GB free on my colo box
05:31:55 <blackdog> i get a bit antsy with caches... they're necessary for som things, but you end up adding lots of extra code to make sure they're up to date, and sometimes you get surprising behaviour...
05:32:10 <shapr> I've also thought about p2p debian updating, where all you need to download from debian.org is the md5 sums of the debs
05:32:50 <blackdog> that'd be a pretty trivial extension to apt. just run it over bittorrent... not a bad idea at all.
05:33:07 <shapr> is multicast available on the local wire? could I offer optional multicast of any debs I'm downloading to local interested parties?
05:34:15 <blackdog> you'd need to change the architecture of apt to a push system... i'm not sure it's worth the effort.
05:34:33 <shapr> bittorrent is a pull system
05:35:02 <blackdog> i've got apt-proxy set up for my machines, and it's giving me 80% of what you're looking for, without the architectural complications.
05:35:26 <shapr> but you can't offer your debs to your neighbors on the same net/wire/etc
05:35:49 <blackdog> yes, but you're talking about multicast, aren't you? you'd have to notify other parties that you're dling something.
05:36:10 <shapr> or you'd have to set up a request listener of some flavor
05:36:19 <blackdog> which makes it not one-sided any more: they'd have to run some kind of server
05:36:21 <blackdog> yeah, that.
05:36:22 <shapr> broadcast "looking for debs"
05:36:38 <shapr> response "unstable partial"
05:36:48 <shapr> request "kernel-source-2.6.6"
05:36:50 <shapr> response "go fish"
05:36:56 <blackdog> :)
05:37:11 <shapr> greetz gintas
05:37:40 <shapr> there must be more ways to decentralize all this stuff
05:37:49 <shapr> it's all way too cathedral
05:40:50 <blackdog> nothing inherently wrong with a hierarchy for some systems
05:41:53 <blackdog> dammit. i just got a gmail invitation, and the server's down.
05:43:27 <sara> it's been down a while now
05:43:41 <sara> prolly all the invites they gave people
05:43:55 <blackdog> fair enough. I'll just sit here reloading every 5 seconds, that'll help. :)
05:44:06 <andersca> works for me
05:44:08 <blackdog> hey wait, you're saaying it's my fault?
05:44:52 <sara> andersca: the invite server is down
05:44:56 <sara> actually using gmail is fine
05:45:07 <andersca> ah
05:45:55 <det> blackdog: how do you get an invite?
05:46:05 <shapr> someone else who's using gmail has to invite you
05:46:11 <andersca> I don't have any invites
05:46:16 <andersca> but I do have gmail, and it's really spiffy!
05:46:30 * shapr thinks push mail suxx 4ss
05:46:47 <det> andersca: howso?
05:46:49 <shapr> but I haven't gotten around to writing something better so...
05:48:13 <blackdog> spam, spam spam spam, spam spam spam spam
05:49:07 <shapr> tmda!
05:49:15 <shapr> my 'draconian' response to spam ;-)
05:49:19 <shapr> it was either that or give up on email
05:49:48 <blackdog> spamassassin makes it bearable. I wish it'd pick up on these german nationalist emails, though.
05:50:02 <blackdog> it's not as if i get many legitimate german emails.
05:50:09 <ibid> tmda with the autoreplies is like offloading your garbage to your neighbour's lawn
05:50:14 <det> SA is doing a terrible job for me lately
05:50:19 <det> it is missing about 10 per day
05:50:23 <ibid> SA works most of the time
05:50:33 <shapr> ibid: like I said, it was either TMDA or shutdown all my mail daemons
05:50:33 <sara> everyone's got gmail now
05:50:36 <ibid> it misses several a day but handles hundreds correctly
05:50:52 <det> I should lower the points to qualify as spam
05:51:03 <vegai> "give up on email" is probably much better
05:51:10 <ibid> shapr: don't be surprised if people get angry at you
05:51:18 <shapr> I'm not surprised.
05:51:20 <ibid> shapr: not me
05:51:24 <blackdog> det: are you using the bayesian learner
05:51:46 <blackdog> aw, who could get angry at shapr? He's adorable.
05:52:02 <shapr> mostly
05:52:05 <det> blackdog: yup
05:52:17 <shapr> whenever there's a full moon I turn into a human.
05:52:22 <ibid> blackdog: people who get tmda requests from shapr to confirm mails that they never sent
05:52:52 <ibid> i get several in a week currently
05:52:59 <ibid> (not from shapr, mind you)
05:53:02 <shapr> whew
05:53:14 <ibid> (at least, not yet)
05:53:28 <det> blackdog: default debian unstable setup, really
05:53:29 <shapr> I'd much rather use the im2000 system
05:53:35 <blackdog> ibid: Ah, i hadn't thought of that. Yeah, we get the same kind of response at work from dumbass virus checkers who bounce infected mail back to the from: address
05:56:24 <andersca> whoops
05:58:01 <blackdog> det: don't you have to manually set the autolearner up? Otherwise it won't know which ones are spam and ham...
06:04:17 <det> blackdog: if it has a low enough or high enough score it will automaticly classify as spam/ham
06:04:19 <det> blackdog: how do you have it learn?
06:09:33 <shapr> yow, what was that?
06:16:43 <det> Are you new to freenode? :)
06:20:43 <det> Hmm, so how do I go about getting a gmail ivnite? :p
06:22:53 <blackdog> www.gmailswap.com? :)
06:23:54 <earthy> why do people *want* gmail?
06:24:03 <earthy> isn't their own e-mail address enough?
06:24:40 <vegai> why do people want email...?
06:24:54 <blackdog> it's got a certain cachet. just like an .edu address is classier than hotmail one...
06:25:02 <det> I am just curious, really.
06:29:14 <sara> i still rather read my mail in mutt
06:29:14 <sara> but gmail does my list mail
06:29:14 <sara> and it's a nice little backup :)
06:50:06 <shapr> sazzle: oh, neat name
06:50:14 <shapr> hiya Hyp3rion 
06:50:18 * shapr boings happily
06:50:28 <Hyp3rion> hey shapr!
06:50:34 <shapr> how's code?
06:51:07 <JaffaCake> shapr: my 8 month old daughter does that
06:51:20 <Hyp3rion> o_O
06:51:20 <SyntaxNinja> y0y0
06:51:58 <shapr> JaffaCake: I'm always happy to hear about people with an obvious sense of fun and excitement.
06:52:06 <shapr> hopefully I'll never get old enough to stop bouncing.
06:52:37 <JaffaCake> absolutely, bouncing is great fun, except right after lunch
06:52:42 <shapr> hah!
06:53:05 <shapr> yes, I learned that I can't eat a lot of food and then bounce/unicycle/etc without consequences.
06:53:20 <shapr> y0 SyntaxNinja 
06:53:28 <shapr> I had some CABAL questions... but I've forgotten them.
06:53:55 <shapr> oh! does CABAL handle complicated stuff like HSQL that builds with postgresql?
06:54:45 <shapr> also, why is the version number part of the -package flag? I would expect the pkgName to show up there
06:55:04 <shapr> I would think this way breaks build scripts
06:55:39 <shapr> everytime I upgrade HUnit, I have to change my 'ghc --make -package HUnit-1.0' to something else
06:56:07 <Hyp3rion> hi themaximus! summer holiday?
07:00:39 * Hyp3rion :-(
07:02:21 <Hyp3rion> themaximus - your homepage is broken :-/ "Can't connect to MySQL server on '127.0.0.1' (10055) in e:\global.php on line 9"
07:03:50 <SyntaxNinja> y0 shapr
07:04:27 <SyntaxNinja> the version number is only a part of the package flag if it's necessary to disambiguate, I believe.
07:05:01 <shapr> oh, I just built and installed Cabal and got Cabal-0.1 and HUnit-1.0
07:07:31 <SyntaxNinja> yeah... the packaging system isn't correct yet because the compilers don't yet fulfill their end of the bargain.
07:07:55 <SyntaxNinja> so maybe in the meantime, we'll take out the version numbers... I don't quite know what to do for compatibility with existing compilers
09:28:07 <shapr> heya Si\ how's code?
09:29:18 * shapr cackles happily
09:29:34 <shapr> 0-day H4sk3ll w4r3z!
09:29:54 <shapr> actually, more like (-3)-day warez
09:30:32 * shapr does some beta testing
09:31:27 <bringert> haha
09:31:47 <SamB> what in the world is Haskell warez?
09:32:10 <desrt> SamB; an illegal copy of ut2004 for example
09:32:19 <desrt> they ported the engine to haskell for the 2004 release
09:32:20 <Riastradh> Yow.  How many Simons are there here?
09:32:32 <shapr> desrt: I think he's asking what sort of *Haskell* warez exists.
09:32:43 <SamB> oh ;-)
09:32:51 * desrt scratches head
09:32:57 <desrt> well
09:33:01 <SamB> crazy cool
09:33:01 <shapr> Riastradh: Simon Foster and Simon Marlow that I can see
09:33:02 <desrt> there's this bitching tictactoe game
09:33:14 <desrt> and for all intents and purposes it comes with no sourcecode
09:33:24 <Riastradh> shapr, wasn't there another one occasionally found here?
09:33:28 <shapr> Riastradh: Peter Simons has been here before
09:33:35 <shapr> and so has Simon Peyton-Jones
09:34:00 <Riastradh> Hmmm.  I definitely remember another Simon.
09:34:08 <shapr> Simon Says?
09:34:14 <shapr> or was that Simon Saz?
09:34:21 * shapr looks at sazzle 
09:34:25 <desrt> no.  SimpleSimon meta-PieMan
09:34:37 <shapr> Pi Calculus Man?
09:34:45 <desrt> there's a pi calculus?
09:34:47 <desrt> ugh.
09:34:51 <shapr> yah, it's nifty
09:34:54 <shapr> it's about mobile processes
09:34:54 <desrt> i just got over my bout with the lambda one
09:35:07 <shapr> the Pict language is there for experimenting
09:36:16 <Igloo> Woo!
09:36:30 * Igloo bounces at a complete list of maybe-successfuls for nhc98
09:38:16 <shapr> yay!
09:39:38 * Igloo coughs and flicks away from the ghc6 tab  :-)
09:53:00 <shapr> bringert: should I sent bugs/fixes to both you and Aarne?
09:53:21 * shapr isn't sure if this is a bug or user error
09:55:43 * shapr boings cheerfully
09:56:00 <bringert> aarne does most of the gf bug fixing
09:56:18 <bringert> but you can always ask me here first if you want
09:56:41 <Igloo> gf?
09:56:48 <jemfinch> yeah, I was about to ask that as well.
09:56:54 <shapr> how do I set the module search path?
09:57:09 <shapr> GF == http://www.cs.chalmers.se/~aarne/GF/
09:57:49 <jemfinch> what does it do/make easy?
09:57:59 <shapr> bringert: seems that Prelude.gf doesn't import Predef.gf so changing into grammars/newresource and running ../../bin/gf2 swedish/TestResource.gf complains about not finding a module named Predef
09:58:13 <bringert> shapor: try setting GF_LIB_PATH
09:58:15 <shapr> jemfinch: it's a very nifty language toolkit
09:58:17 <shapr> aha
09:58:22 <shapr> I didn't know about that
09:58:30 <bringert> I think it's brand new
09:58:32 <jemfinch> shapr: I hear "grammar" and I think, "Parsing" -- am I off?
09:58:44 <shapr> jemfinch: no, just think swedish, russian, finnish, italian, etc
09:58:50 <jemfinch> OH!
09:58:51 <jemfinch> darn.
09:59:04 <shapr> actually, you'll probably love it
09:59:09 <bringert> you can also set the path on the command line or as an argument to the "i" command
09:59:12 <jemfinch> probably, but it won't help me develop L.
09:59:19 <shapr> what does L do?
09:59:28 <jemfinch> it's the programming language I'm designing.
09:59:41 <shapr> one of my crazy ideas is to use GF to turn spoken lojban into Haskell source
09:59:41 <bringert> you can parse programming languages with it too, but it's a bit of a sledgehammer for that task
10:00:05 <jemfinch> one of the focuses of L will be good string handling, and I'm looking for a better (more powerful, more maintainable) alternative to regexps.
10:00:29 <jemfinch> parser combinators might be what I want, but I haven't found a really good (understandable) paper on them.
10:00:35 <shapr> I'm also mulling over using GF for i18n of Haskell websites
10:00:46 <shapr> jemfinch: oh, do the Parsec tutorial
10:00:51 <shapr> Parsec r0xx0rs
10:01:11 * jemfinch will take a look.
10:01:21 <jemfinch> does the big warning at the top matter?
10:01:28 <shapr> what warning?
10:01:35 <jemfinch> "This tutorial is out of date and has been removed from the Parsec web page until it can be updated. There are structures described in this document which are not supported by the Parsec language. Do not use this document as a reference!"
10:01:51 * jemfinch notes that he's not implementing L in Haskell.
10:02:11 <shapr> jemfinch: http://www.cs.uu.nl/~daan/download/parsec/parsec.html huh?
10:02:28 <jemfinch> looks like I found the wrong parsec :)
10:02:31 <jemfinch> http://pcl.cs.ucla.edu/projects/parsec/tutorial/
10:02:37 <shapr> never heard of that one
10:02:40 <jemfinch> "PARSEC is a C-based language for simulation, or more specifically, it is a language for parallel discrete event simulation."
10:02:48 <shapr> Daan wrote Parsec and the tutorial I just pointed you to.
10:03:00 <shapr> Daan is a cool and crazy guy.
10:03:09 <shapr> fun to hang out with.
10:03:17 <jemfinch> shapr: I'll take a look, this might come in really useful.
10:03:23 <shapr> ICFP03 was *sooo* much fun.
10:03:43 * jemfinch should've gone, it was only a few hours away.
10:03:44 <shapr> parser combinators are really simple to use
10:04:01 <Riastradh> You live in Sweden, jemfinch?
10:04:01 <shapr> you were in europe in august last year?
10:04:09 <jemfinch> oh, I was thinking 04 :)
10:04:17 <jemfinch> that was in Pennsylvania, right?
10:04:18 <shapr> 04 hasn't happened yet
10:04:19 <Riastradh> You live in Utah, jemfinch?
10:04:21 <shapr> nah, utah
10:04:24 <jemfinch> man, I'm way off.
10:04:37 <shapr> still worth going
10:04:41 <jemfinch> the website that hosted the contest was related to PA in some way, right?
10:04:45 <shapr> so many cool people and nifty tech
10:04:56 <Riastradh> I dunno.  I'd have to go to Utah, though.
10:05:01 <shapr> yes, ICFP contest was done by PA
10:05:20 <jemfinch> ah, that's it.
10:05:25 * jemfinch won't be going to Utah.
10:05:41 <Riastradh> I'd have liked to go to last year's, but I couldn't manage it.
10:06:43 <shapr> bringert: man, I want some command line options doc
10:06:53 * shapr starts an AvianWiki page on GF 2.0 beta
10:07:01 <bringert> gf2 -path=...
10:07:29 <bringert> that's pretty much the only command line option I know, I'm sure there are others though
10:07:34 <shapr> -path doesn't seem to work, -i does seem to work
10:07:35 * jemfinch leaves for hom.
10:07:38 <jemfinch> er, home.
10:07:43 <shapr> or user error
10:07:47 <shapr> which is the most likely possibility
10:07:47 <jemfinch> after I drop by the bookstore to pick up a dumb book.
10:15:28 <shapr> ack, I do not understand the path stuff
10:15:39 * shapr går och cyklar
10:17:55 <bringert> the path stuff is a little strange at the moment I think
10:18:32 <bringert> you can try setting the right path in the file for now
13:30:19 * SamB wonders why his "random pool" seems to be only 512 bytes 
13:30:58 * SamB wonders why lo needs ARP
13:31:36 <Igloo> :-)
14:08:37 <SamB> huh, I didn't know it was possible to see which slots are in use without opening the case...
14:25:44 <shapr> hi Joachim
14:25:49 * shapr hOps
14:26:00 * stepcut bOings
14:26:12 <shapr> stepcut: that's still a funny joke
14:26:15 <stepcut> hehe
14:26:27 <shapr> bOing is the hOp clone based on Hugs
14:26:30 <shapr> and it uses spears
14:26:31 * shapr laughs
14:26:34 <stepcut> :p
14:27:21 <shapr> stepcut: you came up with with the spears-based part
14:27:30 <stepcut> :p
14:28:05 <stepcut> In unrelated news, I think I might develop some java apps for my cell phone
14:28:11 <shapr> using PJAE?
14:28:34 <shapr> I had a job writing Java MIDlets and PJAE Applets
14:28:37 <stepcut> PJAE? Currently I am just looking at nokias J2ME based development stuff
14:28:50 <stepcut> yeah, MIDlets... what's PJAE?
14:28:51 <shapr> Java suxx0rs, but it's worse with Nokia :-P
14:28:56 <stepcut> I bet...
14:28:57 <shapr> Personal Java App Environment
14:29:10 <shapr> based on JDK 1.1, but missing some bits and some others added on top
14:29:47 <shapr> stepcut: remnants of that job: http://www.scannedinavian.org/~shae/nokia-emu-jython.png
14:30:03 <andersca> look, shae is running windows!
14:30:09 <stepcut> haha!
14:30:18 <shapr> not anymore :_)
14:30:21 <stepcut> i notice the CPU is maxed out :)
14:30:37 <shapr> that emulator takes at least six minutes to start up with 100% cpu usage
14:30:48 <shapr> if you try to do anything else at the same time, it can easily double or triple the startup time
14:31:13 <stepcut> hah, the phone emulator with the Series 40 stuff is pretty fast
14:31:21 <shapr> series 60?
14:31:43 <stepcut> my phones are all Series 40
14:31:47 <shapr> oh, neat
14:33:29 <stepcut> My girlfriend's phone has the voice recorder capabilites, so I want to try to make a little app that will record a message and post it in her blog
14:33:42 <stepcut> I think it can be done...
14:33:50 <shapr> hm, col
14:33:53 <shapr> cool
14:33:56 <shapr> argh, can't type
14:34:38 <shapr> Igloo: after ~1 hour per day of somewhat skillful unicycling for the last several days, I can authoritatively say that skillful unicycling is in fact more work than beginning unicycling.
14:34:51 <stepcut> haha
14:35:30 <Igloo> Hmm, that's somewhat counterintuitive
14:35:42 <Igloo> Did I say I suspected the opposite would be true in the past or something?
14:35:51 <shapr> well, you asked
14:36:12 <shapr> I said that I was getting lots of exercise jumping up on the unicycle and then falling down, and repeating until bored
14:36:23 <shapr> so you asked me if being able to stay on the unicycle might in fact be less work
14:36:42 <shapr> or less exercise, whatever
14:37:06 <Igloo> Yeah, I'd have thought it would be, but I can't argue with empirical evidence  :-)
14:37:58 <shapr> in any case, unicycling exercise has a linear relationship with both time spent on the unicycle and average speed
14:38:48 <shapr> Igloo: I may change my mind when I purchase this 92 cm tire
14:38:58 <Igloo> What do you have now?
14:39:05 <shapr> suppossedly 92cm is a commuter unicycle
14:39:12 <shapr> er, 16 inches? 20 inches?
14:39:30 <shapr> versus the 36 inch tire that I'm aiming for next.
14:39:42 <Igloo> So it ought to be less effort to move but more to stay still?
14:39:57 <Igloo> Is this diameter or radius?
14:40:09 <shapr> I think it's diameter
14:40:18 * shapr checks
14:40:58 <Igloo> Oh, it must be diameter
14:41:05 <Igloo> Radius would be silly
14:41:15 <shapr> http://coker.com/store/customer/product.php?productid=18208&cat=302&page=1
14:41:17 * stepcut imagines a unicycle with a 6foot diameter wheel
14:41:33 <shapr> stepcut: they have those, you ride inside the wheel
14:41:42 <stepcut> shapr: sweet!
14:42:05 <shapr> there's even a ~four foot wheel that has the rider and a V8 engine mounted inside it.
14:42:14 <Riastradh> More accurately, you fall onto the wheel's internals.
14:42:44 <shapr> going fast on my current unicycle is a *lot* of work
14:42:53 <Igloo> There are unicycles taller than that, but typically small wheel and long stick
14:43:06 <shapr> yah, giraffes
14:43:12 <shapr> hej alexj 
14:43:31 <stepcut> http://www.joelpenson.com/personal/unicycling/recumbentfront.jpg
14:43:53 <shapr> recumbent unicycles are awesome!
14:44:25 <shapr> one of the big disadvantages of cycles in general is that you can only exert yourself against gravity. There's no way to use your full leg strength
14:44:58 <shapr> but there's a solution: http://www.recumbenttrikes.ca/
14:46:46 <stepcut> I am hoping to build a side-by-side tandem recumbant bike someday
14:47:12 <shapr> stepcut: I'd like to get one of these http://mrrecumbenttrikes.com/trikes/touring/touring.html with the aerodynamic fairing
14:47:59 <shapr> stepcut: ok, that sounds significantly cooler
14:48:18 <shapr> like, totally star wars with TIE Bomber
14:48:21 <stepcut> but first, I must solve some haskell programming problems...
14:49:04 <shapr> http://www.rebelscum.com/swsaga/sw02tiebomberloose-m.jpg
14:49:38 * shapr does more beta testing
14:49:59 <shapr> right, anyone written any Haskell code today?
14:51:25 * stepcut is
14:51:32 <shapr> yay! cool code?
14:51:48 <stepcut> shapr: I am working on my haskell pipes code again. I might have made some progress
14:52:06 <stepcut> but I won't know until I actually finish writing it :)
14:52:22 <shapr> I understand
15:00:47 <shapr> man, I wish I could take a class in using GF
15:01:14 <jemfinch> everytime you say that, I think you're talking about your girlfriend.
15:01:26 * shapr beats jemfinch with a lojban parser
15:01:31 <SamB> what is he talking about?
15:01:41 <shapr> sorry, a *combinator based* lojban parser
15:01:45 <jemfinch> an NLP library for Haskell, apparently.
15:02:23 <shapr> gr -cat=S | l
15:02:24 <shapr> zero is prime
15:02:34 <shapr> generate randam -category = Sentence | linearize
15:02:37 <shapr> "random"
15:02:52 <shapr> random generation by itself just gives you the abstract syntax
15:03:17 <shapr> one really neat feature is that it's not that hard to make multilingual concrete versions of an abstract syntax
15:03:35 <shapr> so, for a limited vocabulary, you can automatically translate from one language to another
15:03:59 <jemfinch> shapr: what are you doing all this for?
15:05:00 <shapr> several reasons... spoken programming with lojban, so I can study swedish with Haskell, and maybe I can whip up some GPL Swedish (and English) training software for the local schools
15:05:15 <shapr> but the real reason is that this is really cool and fun
15:05:43 <shapr> everything is an excuse to have fun
15:05:46 <jemfinch> hehe
15:06:10 <shapr> if I actually accomplish something that's a welcome benefit, but not necessary.
15:07:15 * shapr cackles happily
15:07:29 <shapr> GF can also send text to Festival
15:07:47 <shapr> so I can generate a random sentence, and then hear it
15:08:16 * shapr wonders if there's a swedish text to speech program
15:09:08 <shapr> jemfinch: are you doing something fun too?
15:11:22 <jemfinch> shapr: right now, I'm trying to find a good recipe to take advantage the Parmigiano Reggiano I got on sale yesterday.
15:11:34 <jemfinch> in general, I'm working on L, and that's been somewhat fun :)
15:11:50 <jemfinch> (although "working on" is a bit of a stretch -- it's more of a "planning my attack" right now)
15:12:18 <shapr> yah, I've been planning my attack on my particular system for twenty years now...
15:12:53 <jemfinch> what's your "particular system"?
15:13:33 <shapr> spoken and gestural programming in a 3D VR interface
15:13:48 <shapr> an entirely 3D operating system
15:14:04 <jemfinch> like in Minority report?
15:14:13 <shapr> nah, that sucked
15:14:26 <Riastradh> The movie or the OS?
15:14:26 <shapr> that was completely flat 2D
15:14:31 <shapr> e) all of the above
15:15:07 <shapr> jemfinch: no, I'm thinking something like spells/cells 
15:15:27 <jemfinch> shapr: I wonder, though, do you think humans are really capable of making use of more than 2d?  Most real-life desktops have very few shelves, and all the work takes place on a 2-d surface.
15:15:46 <shapr> dude, we live in a 3D environment.
15:16:01 <jemfinch> shapr: yes, but most of our work is done in 2-d, wouldn't you?
15:16:02 <Riastradh> ...and we have a kludge to see it, two eyes.
15:16:04 <jemfinch> er, wouldn't you say?
15:16:13 <jemfinch> Riastradh: a kludge?
15:16:14 <shapr> no, I don't think so.
15:16:30 <jemfinch> we have exactly as many eyes as are necessary to see 3 spatial dimensions.
15:16:31 <shapr> we navigate past each other in the halls
15:16:47 <shapr> we run to catch busses
15:16:49 <Riastradh> Or sometimes we inadvertently walk right into each other.
15:16:54 <Riastradh> Or we miss them.
15:16:59 <shapr> right, but it's not 2D
15:17:04 <jemfinch> shapr: those are both 2-dimensional things.
15:17:13 <shapr> what about lego?
15:17:18 <jemfinch> yes, it is 2-d.  When was the last time you jumped over someone to pass him in the hallway? :)
15:17:23 <shapr> or erector sets? or architecture?
15:17:27 <jemfinch> or the last time you leapt over a tall building to catch a bus?
15:17:31 <Riastradh> jemfinch, I do that quite frequently!
15:17:44 <jemfinch> even in architecture, the *work* is done in 2-d.
15:17:50 <shapr> what about going up or down a level to take a faster route in a building/mall/etc?
15:18:03 <jemfinch> shapr: is that really "work"?
15:18:09 <shapr> sure it is
15:18:14 <shapr> it's navigating towards a goal, right?
15:18:24 <shapr> optimization of pathways to accomplish something
15:18:39 <shapr> in fact, I'd say that's the essence of hunting
15:18:42 <jemfinch> shapr: but it's not work.  It's something we do without even thinking about it.
15:18:48 <shapr> in that case, it's even better!
15:18:55 <shapr> sounds like a natural metaphor
15:18:58 <jemfinch> shapr: No one says after navigating a mall, "Whew...that was hard work."
15:19:10 <shapr> maybe they shouldn't be using keyboards then
15:19:14 <jemfinch> shapr: instinct isn't what puts food on plates and money in wallets these days :)
15:19:43 <jemfinch> it may have worked before the dawn of civilization, but "making a living" can't be done with anywhere near the lack of effort that navigating a mall can.
15:19:44 <shapr> in any case, I do think in 3D, and feel quite limited by 2D workspaces
15:20:05 <Riastradh> Good luck trying to fit a third dimension onto a flat LCD display...
15:20:13 <shapr> I just need two of them...
15:20:16 <shapr> one for each eye
15:20:35 <shapr> jemfinch: if you view a program as a cell, where you can turn it inside out to see how the pieces fit together...
15:21:04 <shapr> just like instances in 3D, where you have pipes that go in and out, and you can connect them, filter them, split them,  etc
15:22:09 <jemfinch> shapr: I still think you're pushing it :)
15:22:32 <shapr> I know I want to use that interface, I could get a lot more done
15:22:42 <shapr> also, think of the social effects of a spoken programming language
15:23:07 <shapr> 404 has become standard vocabulary in some geek circles
15:23:24 <jemfinch> shapr: well, more power to you.
15:23:36 <shapr> let's argue about this again in five years.
15:23:38 <jemfinch> I may not agree with you about the merits of such things, but I could be wrong.
15:23:38 <shapr> :-)
15:23:43 <shapr> same for me
15:23:48 <shapr> I could be totally off base
15:24:02 <shapr> won't know till I try it
15:24:28 <jemfinch> hmm.
15:24:35 <jemfinch> no italian food channels on this network.
15:24:39 <jemfinch> not that I expected any.
15:24:43 <jemfinch> but I still need a recipe :)
15:25:18 <jemfinch> shapr: I plan to have at least an interpreter for L before the end of the summer.
16:20:18 <Igloo> Has www.h.o/cabal/ got the latest proposal?
16:21:17 <Leandrote> i have a quest 
16:21:48 <Leandrote> set= a->Bool,can anyone resolve it?
16:22:00 <Igloo> huh?
16:22:43 <Leandrote> type Set a = a->Bool
16:22:58 <Leandrote> define add,union,isEmpty
16:23:00 <Igloo> You can write a set implementation with that type for Set, yes
16:23:25 <Igloo> But I suspect by "quest" you mean "homework exercise"
16:23:39 <Leandrote> empty::Set a
16:23:53 <Igloo> Oh, actually, I don't think you can do it
16:23:54 <Leandrote> empty =\x->False
16:24:05 <Leandrote> think,it is great
16:24:23 <Leandrote> sorry about my english
16:24:25 <Igloo> But you could write it for the interface I had in my head  :-)
16:25:23 <Leandrote> add::a->Set a->Set a
16:25:45 <Leandrote> add e f =\z->f z || z==e
16:54:02 <Pseudonym> Oooh, good quote.
16:54:10 <Pseudonym> Well, .NET basically works nice with C# and any other language that you
16:54:11 <Pseudonym> cripple until you get C# with a different syntax.
17:08:37 <Riastradh> Humph.  I said something like that before he did.
17:10:35 <SamB> anyone know of a C compiler written in Haskell?
17:14:17 <Pseudonym> No.  I started to write one in Mercury once.
17:14:20 <Pseudonym> Does that count?
17:14:31 <Riastradh> Eh, Mercury, C, what's the difference?
17:14:51 <Riastradh> Just a little syntax...and...some semantics, perhaps...
17:14:56 <Hyp3rion> Mer and ury
17:15:01 <Hyp3rion> ^_^
17:15:21 <Pseudonym> Scheme, Maclisp... all you s-expressions look the same to me.
17:15:23 <stepcut> Riastradh: I remember you saying something similar about parrot too....
17:15:50 <Riastradh> stepcut, I probably did.
17:16:14 <Pseudonym> Actually, yes, the syntax of C and Mercury is different.  C's is much more modern.
17:16:23 <Riastradh> In case you didn't notice, I'm not really a fan of high-level VMs that fake themselves into believing their pretend world in which multiple different language architectures operate nicely on them.
17:16:30 <Riastradh> s/that fake/whose authors fake/1
17:16:45 <SamB> parrot has WAY too many opcodes...
17:17:18 <Pseudonym> Yeah, I committed a change to parrot which cut out a whole lot of opcodes, and it cut 30 secs off the startup time.
17:17:29 <Pseudonym> I think Dan was somewhat shocked.
17:17:47 <stepcut> hehe
17:18:18 <SamB> Pseudonym: how many hundred did you cut out?
17:18:19 <Riastradh> If anything, I think a _low-level_ VM, looking somewhat like a RISC machine -- with perhaps a couple higher-level abstractions that translate easily to the differences in RISC architectures --, would serve the purpose better.
17:18:36 <Hyp3rion> like WAM?
17:18:40 <Riastradh> WAM?
17:18:45 <Hyp3rion> warren abstract machine
17:18:51 <Pseudonym> Please don't.
17:18:55 <Pseudonym> Nobody needs to know about the WAM.
17:19:05 <Hyp3rion> ^H^H^H^H
17:19:08 <Hyp3rion> :-D
17:19:09 <Pseudonym> SamB: I removed a whole lot of conditional branch variants.
17:19:27 <Pseudonym> They had, say, "branch if greater than or equal to".
17:19:38 <Riastradh> 'Branch if equal to pi,' 'branch if log base 2 of n is greater than e,' 'branch if Larry Wall is thinking about new operators right now, 'et cetera.
17:19:58 <Pseudonym> And they automatically generated two versions: branch to integer constant (i.e. relative PC), and branch to location held in register.
17:20:09 <Pseudonym> Why you need the latter version is anyone's guess.
17:20:23 <Pseudonym> So I basically halved the number of branch opcodes.
17:20:46 <Pseudonym> Though I did mildly annoy the guy working on the regular expression compiler.  He used them, apparently.
17:20:59 <Riastradh> You work on Parrot, Pseudonym?
17:21:03 <Pseudonym> I did once.
17:21:04 <Pseudonym> Once.
17:21:10 <Riastradh> (At first I thought you were joking.)
17:21:23 <Riastradh> OK, just making sure.
17:21:23 <Pseudonym> I was going to work on an optimiser, but then I started realising how futile that would be.
17:21:37 <Pseudonym> Three new opcodes every day.
17:21:44 <Riastradh> How many are they at right now?
17:21:47 <Pseudonym> Dunno.
17:22:00 <Riastradh> Well, how many were there when you left & how many days has it been since then?
17:22:15 <Pseudonym> More to the point, it was impossible to do control flow analysis.
17:22:26 <Pseudonym> Because any branch instruction could jump to anywhere in the code.
17:22:31 <Pseudonym> So you couldn't even find basic blocks.
17:22:55 <Pseudonym> So I gave up.
17:24:24 <Riastradh> This is why you're supposed to have high-level _compilers_ that perform CFA...
17:24:43 <Pseudonym> Yes, but in theory you should be able to do VM -> VM optimisations.
17:25:15 <Pseudonym> They can be useful in combination with JIT compilation, because some optimisations make more sense on some platforms than others.
17:25:26 <SamB> Riastradh: and why VMs should have low opcode counts
17:25:40 <Riastradh> The problem is that after you've compiled it to a low_er_-level machine, you've lost information.
17:25:51 <Pseudonym> You've lost _some_ information.
17:25:53 <Riastradh> If that machine is still at too high a level, you're really screwed.
17:26:04 <Pseudonym> You've lost language-specific information.
17:26:23 <Pseudonym> You haven't lost platform-specific information.
17:26:41 <Riastradh> That's correct, but in conjunction the result is much more effective.
17:27:10 <Pseudonym> Interestingly, the Mercury VM (which is compiled to C) had a special instruction in it which said what values were live at the end of a basic block.
17:27:32 <Riastradh> What was the Mercury VM written in?
17:27:32 <Pseudonym> It was compiled to nothing, but it really helped in implementing VM -> VM optimisations.
17:27:51 <Pseudonym> It was part of the compiler, like G machine code.
17:27:55 <Pseudonym> And it was just compiled to C.
17:28:01 <Riastradh> G machine code?
17:28:08 <Pseudonym> Uhm...
17:28:22 <Pseudonym> OK.  Compilers for modern languages often have two intermediate forms.
17:28:31 <Pseudonym> A high-level language, which is close to the source language.
17:28:31 <SamB> Riastradh: an ancestor of STG
17:28:40 <Pseudonym> And a low-level language, which is close to the target language.
17:28:57 <SamB> Pseudonym: I think GHC has at least three
17:29:34 <Pseudonym> SamB: I'm talking specifically about optimisation.
17:29:48 <Pseudonym> I don't believe that GHC does any optimisation on the sugared syntax tree.
17:29:59 <Riastradh> (MIT Scheme has three!)
17:30:02 <SamB> probably not...
17:30:17 <Riastradh> (all of which have to do with optimization)
17:30:37 <SamB> what about native code generation?
17:30:47 <Pseudonym> Native code generation is platform-specific.
17:30:56 <Riastradh> Is this 'G machine code' just the name of the language that's close to the target language?
17:31:32 <Pseudonym> The G machine was an abstract assembly language used for compiling lazy functional languages to stock hardware.
17:31:48 <Riastradh> I see.
17:31:50 <SamB> isn't there a partly-generic intermediate form for native code generation, too?
17:31:50 <Pseudonym> Basically, a LLL.
17:31:58 <Pseudonym> SamB: Don't know.
17:32:05 <Riastradh> SamB, UTSL.
17:32:23 <Pseudonym> But anyway, compilers for modern languages usually have at least two.
17:32:51 <Riastradh> (Orbit had only one intermediate format.)
17:33:07 <Riastradh> (And it was still one of the best Scheme [dialect] compiler for a very long time.)
17:33:13 <Pseudonym> Oh, Java compilers usually only have one because the LLL _is_ the target language.
17:33:50 <Riastradh> s/compiler/compilers/1
17:36:15 <SamB> yeah, there is something called Stix used in native code generation...
17:38:10 <Pseudonym> Right.
17:40:43 <ozone> samb: GHC has quite a few intermediate forms
17:40:54 <ozone> core, stix, c-- ...
17:41:10 <Pseudonym> How are the C-- compilers going?
17:41:16 <Pseudonym> Is there any work on that these days?
17:41:27 <SamB> ozone: what is this about c--?
17:41:34 <ozone> Pseudonym: looks like there's quite quite a lot of work on it since 6.2
17:41:42 <Riastradh> GHC targets C--?
17:41:47 <ozone> Pseudonym: they're using it as a backend now, i think
17:42:28 <ozone> SamB: www.cminusminus.org
17:43:04 <SamB> I know what c-- is, and I don't see any files with obviously related names...
17:43:12 <SamB> (in the ghc tree)
17:43:25 <ozone> neither do i; i'm looking now ...
17:43:39 <ozone> CVS commit logs from a few weeks ago definitely had some C-- stuff, though
17:44:37 * ozone scratches head
17:51:17 <ozone> C-- is not a very search engine-friendly keyword
17:51:53 <Riastradh> Blame Google for ignoring hyphens.
17:53:22 <ozone> @blame google, gmane
17:53:22 <lambdabot> Sorry, I don't know the command "blame", try "lambdabot: @listcommands"
17:53:55 <ozone> ah, bingo.
17:54:38 <ozone> http://xrl.us/b9tq (Link to search.gmane.org)
17:54:58 <ozone> so, some work done on it in march & april
17:55:05 <ozone> it's in the backend-hacking-branch
17:55:36 <ozone> i wonder if GHC will switch away from CVS soon.  must be a pain in the arse with their number of branches
17:57:32 <Igloo> There are only 3 or so active branches
17:57:49 <saynte> This is likely a simple question, but is it useful to use a multiparameter class in the type definition of some function, without using all the parameters to the class? (That sounds odd to me... hope my meaning comes across ;))
17:57:59 <Igloo> stable, head and backend-hacking is it I think
17:58:58 <ozone> saynte: i'm not sure what you mean.  do you have an example?
17:59:32 <Igloo> Any cabal people about?
17:59:57 <saynte> ozone: sure, lets say class C a b, then in a function f :: (C a b) => a -> d
18:00:14 <saynte> ozone: so the 'b' portion isn't needed in the function type
18:03:08 <ozone> i'm pretty sure i've used something like that before.  i don't think i can give a flat-out definition about what scenarios it's useful for, though
18:03:24 <ozone> and if i haven't used something like that before, i'm pretty bloody sure oleg kiselyov will have ;)
18:03:27 <saynte> ozone: I'm getting... issues... when i try to call a function from within f that also has (C a b) => a -> e. it seems to not like the 'b' portion, saying that it needs (C a b1) in the parent def'n
18:03:52 <saynte> i swear, if i knew who oleg kiselyov was, I woudl be ALL over that refernce ;)
18:04:10 <ozone> iirc, you can only have a 'C a b' constraint if b appears in the type signature somewhere
18:04:26 <ozone> i think it's allowable with -fallow-undecidable-instances
18:05:08 <Pseudonym> That's often done if the type class has fundeps.
18:05:10 <saynte> ahh, see that makes sense. the multiparameter class thing is just to get around another problem i was having.
18:05:32 <Pseudonym> You might not need all of the dependent types.
18:06:12 <ozone> Pseudonym: ah, of course
18:06:35 <saynte> having troubles with polymorphism earlier in my class, hmph.
18:06:35 <Pseudonym> Also useful for phantom types.
18:06:48 <Pseudonym> @wiki PhantomTypes
18:06:48 <ozone> saynte: go to search.gmane.org, search for oleg@pobox.com in gmane.comp.lang.haskell and gmane.comp.lang.haskell.cafe
18:06:48 <lambdabot> http://www.haskell.org/hawiki/PhantomTypes
18:07:02 <ozone> for some truly mind-bending type wizardry
18:07:12 <ozone> i got oleg'ed once, that was schweet
18:08:18 <saynte> haha, oh man, this guy is a verb too? Is there anythign he can't do?
18:08:57 <ozone> well, he's a verb and an adjective, but only at our university
18:09:13 <ozone> nevertheless, a very useful word, with many connotations
18:10:14 <saynte> ahhh, must be a regional dialect
18:26:39 <ozone> hey dons
18:28:38 <dons> hey.
18:28:45 <dons> that was scary. no internet 
18:29:46 <ozone> dons: aieeee!
19:11:27 * jemfinch finally takes a look at Parsec.
21:31:04 <jemfinch> anyone here do much database work with Haskell?
22:27:32 <wagle> jemfinch: not i, but i've seen people in here talking about it, at a time of day that's about 6-8 hours ago
22:28:00 <jemfinch> ok, cool.
23:37:24 <earthy> Good Morning #haskell!
23:37:36 <Jerub> good morning earthy
23:37:39 <earthy> `the whole concept of SML .net hurts my brain.'
23:37:49 <earthy> -- Thant Tessman
