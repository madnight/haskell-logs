01:12:40 * Lunar^ thought of a name for LIP last night
01:12:58 <Lunar^> What about CHILL ?
01:34:18 <earthy> central haskell infrastructure for libraries and l.... ?
01:45:23 <shapr> good morning #haskell!
01:45:53 <shapr> what's going on?
01:53:07 <arjanb> goedemorgen shapr
01:53:41 <shapr> hoi arjanb!
01:53:49 <shapr> goedemiddag
01:53:54 <shapr> :-)
01:54:01 <earthy> it ain't the afternoon yet...
01:54:36 <JaffaCake> mornin' all
01:54:38 <shapr> whoops
01:54:48 <shapr> hiya JaffaCake
01:54:59 <shapr> oh, I had a question I wanted to ask you... I wonder what it was.
01:55:10 <JaffaCake> hehe, me too
02:17:25 * shapr boings cheerfully
02:17:33 <shapr> EuroHaskell approaches! w00!
02:18:27 <shapr> are there commutative monad transformers or arrow transformers?
02:19:04 <shapr> for something like Zope where you would want to compose authentication, cataloging, etc, commutative composition would seem to be necessary
02:20:25 <shapr> is there a better or different way to do that?
02:34:56 <shapr> hi gintas, wassup?
02:36:02 <gintas> shapr: not much. Mostly procrastinating :(
02:36:16 <shapr> oh, I'm an experience procrastinator.
02:36:37 <shapr> my resume (if I were to actually get around to writing one) shows that.
02:36:55 <gintas> No way are you better than me :)
02:37:15 <shapr> so, what are you procrastinating?
02:37:40 <gintas> errm, I'm supposed to be preparing for my Math Analysis exam
02:37:50 <shapr> oh, neat
02:38:07 <gintas> I'm leaving tomorrow for EuroPython (yay), but I have the exam the next day after I get back
02:38:24 <gintas> not to mention I haven't yet started preparing :(
02:38:28 <shapr> yikes!
02:38:39 <shapr> do you think you can get a good grade if you took it right now?
02:38:59 <gintas> hardly possible
02:40:29 <gintas> but I still think I'll manage to deal with this
02:40:40 * gintas is an optimist (usually)
02:41:08 <shapr> me too
02:49:52 <javaNewb> evnin
02:51:00 <shapr> y0
02:51:11 <javaNewb> having a problem :(
02:51:17 <shapr> ?
02:51:27 <javaNewb> isDigit 'C' == False but isDigit 'the' gives an error??
02:51:55 <shapr> how do you make a string in Haskell?
02:52:22 <javaNewb> [Char]
02:52:32 <shapr> how do you make a char in haskell?
02:52:38 <shapr> can you show me legal values of both of them?
02:53:11 <javaNewb> "the" and 't'??
02:53:39 <shapr> yup
02:53:49 <shapr> now, look at the code you just pasted
02:54:31 <shapr> why is this an error --> isDigit 'the'
02:54:36 <javaNewb> i know....its crap, but the problem lies here ive created code that looks for chars but am stuch when looking for chars in a string...i don't think ive explained it properly
02:56:09 <javaNewb> is there a way i can make my function sort through any number of lists containing lists to see if any of these lists contains chars?
02:57:18 <earthy> errr??
02:57:37 <earthy> could you give a type for that function?
02:58:36 <javaNewb> say i pass it the String "Hello how are you"
02:59:11 <earthy> yes
02:59:13 <javaNewb> how could i workout if that String contains and chars
02:59:21 <javaNewb> *any
02:59:29 <earthy> what do you mean with `any chars'?
02:59:43 <earthy> the String has type String, which is short for [Char]
03:00:06 <earthy> so, it cannot contain anything *but* elements of type Char...
03:00:14 <javaNewb> for example the function i currently have will return "1 2 3 4 5 C" == True because it has one char
03:00:51 <javaNewb> i.e looks non digits
03:00:59 <javaNewb> ^for
03:01:33 <earthy> ah, you're asking for filter isDigit
03:01:46 <javaNewb> "1 2 3 4 5 Hello" gives an error
03:01:51 <javaNewb> yes i did it through filter
03:01:57 <earthy> or even filter isAlpha
03:02:07 <javaNewb> i used isDigit
03:02:22 <earthy> @type filter isAlpha
03:02:23 <lambdabot> bzzt
03:03:05 <earthy> Prelude> filter isAlpha "1 2 3 4 5 6 Hello"
03:03:05 <earthy> "Hello"
03:03:12 <earthy> that what you wanted? :)
03:04:06 <javaNewb> no i just want to check if any non digits exist in the String
03:04:19 <javaNewb> just a boolean returned
03:04:24 <earthy> ah.
03:06:08 <earthy> Prelude> null $ filter (not . isDigit) "1 2 3 4 5 6"
03:06:08 <earthy> False
03:06:16 <earthy> something like that then?
03:06:25 <earthy> Prelude> null $ filter (not . isDigit) "123456"
03:06:25 <earthy> True
03:06:26 <JaffaCake> or any (not.isDigit)
03:06:37 <earthy> JaffaCake: even better, yes.
03:07:48 <javaNewb> thanks
03:08:08 <Hyp3rion> Hi!
03:08:25 <earthy> javaNewb: however, this does not do lists of strings
03:08:45 <javaNewb> i just noticed
03:09:10 <earthy> which is exactly why I asked you for a type specification
03:09:55 <javaNewb> well the specification i have been given is String -> Bool
03:10:08 <shapr> Hi Hyp3rion!
03:10:22 <javaNewb> hey there buddy ;)
03:10:29 <shapr> @type (filter isAlpha)
03:10:31 <lambdabot> bzzt
03:10:38 <shapr> @type (filter Char.isAlpha)
03:10:40 <lambdabot> (filter Char.isAlpha) :: [Char] -> [Char]
03:10:42 <shapr> aha
03:11:24 <javaNewb> is "The" == [[Char]]?
03:11:49 <javaNewb> @type (not.isAlpha)
03:11:50 <lambdabot> bzzt
03:12:05 <shapr> you need to say Char.isAlpha
03:12:08 <earthy> @type "Teh"
03:12:09 <lambdabot> "Teh" :: [Char]
03:12:16 <earthy> @type ["The
03:12:17 <lambdabot> bzzt
03:12:21 <earthy> @type ["The"]
03:12:22 <lambdabot> ["The"] :: [[Char]]
03:12:31 <javaNewb> @type (not.Char.isAlpha)
03:12:32 <lambdabot> (not.Char.isAlpha) :: Char -> Bool
03:13:36 <arjanb> hmm why does haskell does . for both function composition and libraries?
03:13:46 <javaNewb> @type (filter (not.Char.isAlpha))
03:13:48 <lambdabot> (filter (not.Char.isAlpha)) :: [Char] -> [Char]
03:14:24 <javaNewb> @type (any (not.Char.isAlpha))
03:14:25 <lambdabot> (any (not.Char.isAlpha)) :: [Char] -> Bool
03:15:00 <Hyp3rion> arjanb - functions are smallInitial, libraries are PoliceLarge, thus its unambiguous...
03:15:49 <arjanb> I see but I think it's quite ugly
03:15:55 <kosmikus> Hyp3rion: it's not, in the presence of data constructors which are uppercase
03:16:13 <kosmikus> arjanb: it is not really nice, but you cannot change it anymore, I guess
03:16:21 <Hyp3rion> kosmikus - meh true. so is teh Haskell standard b0rken?
03:16:27 <kosmikus> I always use spaces around function composition to disambiguate ...
03:16:38 <earthy> hyperion: as b0rken as any language standard
03:16:44 <earthy> it's always a compromise
03:16:51 <kosmikus> Hyp3rion: it's not broken, it specifies that in this case the module semantics takes precedence
03:16:57 <kosmikus> just not nice
03:17:51 <shapr> bok Amadan 
03:17:59 <shapr> did you find anything more on parallel ghc packages?
03:18:02 <Amadan> hello
03:18:13 <Amadan> research is being done :)
03:18:16 <shapr> ah, cool
03:18:22 <shapr> earthy: hey, you have ops
03:18:37 <Hyp3rion> earthy, kosmikus - i see. at least less b0rken than prolog standards :-/
03:19:19 <shapr> are there commutative or 'parallel' monad/arrow transformers?
03:20:33 <earthy> shapr: yeah, dunno where those came from
03:20:36 <earthy> want some?
03:20:43 --- mode: earthy set +o shapr
03:20:48 <shapr> w00! I've got the power!
03:21:04 <shapr> hm
03:21:09 <Jerub> heh
03:21:22 <shapr> well, ops isn't as exciting as you might think
03:21:26 --- mode: shapr set -o shapr
03:21:34 <earthy> it's useful to have at least one op around
03:21:41 <earthy> which probably is why chanserv gave me ops
03:22:07 <Hyp3rion> there is not even ChanServ :-/ did it netsplit like yesterday?
03:22:09 <shapr> I remember buying a dual Athlon MP and noticing it didn't improve my programming skills in the least
03:23:22 <Jerub> shapr: I went from a 300mhz->2.4ghz and didn't notice any qualitative change in my programming skills
03:23:38 <Jerub> shapr: but I'll try and give you a datapoint for single->dual at my earliest convenience.
03:23:44 <shapr> so, I suspect that having ops also won't improve my Haskillz
03:23:50 <Hyp3rion> Jerub - you would if you go from 2400mhz -> 30mhz ;-)
03:23:56 <shapr> Jerub: I'm still dreaming of a 4-way opteron
03:24:14 <shapr> maybe THAT will improve my programming skills!
03:24:51 <shapr> hej cbus_ 
03:25:29 <Jerub> shapr: we have a new manager. she complained of a bad heart when I told her we didn't have revision control.
03:25:35 <Jerub> maybe there's a light at the end of the tunnel.
03:25:36 <shapr> wise woman
03:25:59 <shapr> I gotta quote that
03:29:30 <javaNewb> is haskell used in the industry??
03:29:48 <arjanb> someone is messing with the wiki again :(
03:29:51 <Jerub> javaNewb: yes!
03:30:05 <javaNewb> to program what sort's of things?
03:30:06 * Jerub points to shapr.
03:30:08 <Jerub> he uses it.
03:30:15 <Jerub> and anyone who uses darcs uses it.
03:30:31 <javaNewb> darcs...?
03:30:43 <Jerub> its a revision control system.
03:30:49 <Hyp3rion> david's advances revision control system
03:30:58 <Hyp3rion> meh Jerub's faster
03:31:20 <javaNewb> so can one make cool programs with it like in java?
03:31:42 <Jerub> javaNewb: that phrase, it makes no sense to me.
03:32:06 <Hyp3rion> javaNewb - http://haskell.org/practice.html
03:32:12 <shapr> arjanb: someone is fixing the wiki too
03:32:31 <Jerub> one can make cool programs in haskell. but one cannot make cool programs in java, so I am perplexed as to how one could make cool programs in haskell akin to those in java.
03:32:35 <javaNewb> like so far in haskell i have not learned anything reletively exciting...whereas in java i've lerned lots of fun things...is it the language or the lecturer?
03:33:09 <JaffaCake> here's an idea for you web-enabled people
03:33:12 <shapr> arjanb: looks like someone is bouncing through an MS terminal server in Lund
03:33:29 <JaffaCake> someone should rewrite osCommerce in Haskell, with WASH
03:33:35 <shapr> what osCommerce?
03:33:43 <JaffaCake> open source e-commerce package
03:33:51 <Jerub> shapr: php online shop
03:33:52 <JaffaCake> basically a shopping cart
03:34:00 <shapr> oh
03:34:09 <shapr> have you seen the TinyShop demo that comes with WASH?
03:34:19 <JaffaCake> nope
03:34:39 <JaffaCake> probably the same kind of thing
03:34:50 <shapr> TinyShop doesn't do much, but it does look nice.
03:35:08 <JaffaCake> it turns out I need to set up a shop, and I don't know PHP :(
03:35:30 <Jerub> JaffaCake: A monkey could learn php in 30 minutes.
03:35:31 <shapr> lucky you
03:35:38 <Jerub> that said, lucky you.
03:35:44 * Jerub writes php for a living.
03:36:03 <shapr> anyway, all you need to do is make a web catalog, and then pass off to your credit card partner for the actual purchase
03:36:05 <JaffaCake> hehe, well perhaps I should learn yet another language...
03:36:08 * JaffaCake sighs
03:36:21 <earthy> um. look at TinyShop first, I'd say
03:36:28 <shapr> most CC people let you give a css so their purchase page looks like your website
03:36:32 <earthy> otoh, to do a webshop well is *hard*
03:36:41 <JaffaCake> oh yeah, I'd have to convince the hosting company to install WASH
03:36:48 * earthy grins
03:36:58 <earthy> that'd be a win, no? :)
03:37:04 <Hyp3rion> javaNewb - learn Befunge, that has a lot of interesting stuff still you can code nothing interesting in it...
03:37:09 <JaffaCake> indeed :)
03:38:10 <Jerub> ;)
03:38:30 <Jerub> me, I'd be happy in python for the rest of my days.
03:38:35 <shapr> not me
03:38:35 <Jerub> well, python 2.4 or whatever.
03:38:49 <Hyp3rion> Jerub - what's new in 2.4?
03:38:49 * JaffaCake likes Python
03:38:55 * Hyp3rion too
03:38:55 <shapr> I do webstuff in Python *all the time*
03:39:08 <shapr> Python was my 'first love' but Haskell is way better.
03:39:23 <Jerub> shapr: tell me, how do you do webstuff in python
03:39:33 <Jerub> shapr: what framework do you use?
03:39:36 <shapr> with Zope2 and Plone
03:39:37 <Hyp3rion> shapr - time for Haskell CGIs? or mod_haskell? that'd be cool!
03:39:45 <shapr> Haskell CGIs exist
03:39:49 <Hyp3rion> i know
03:39:51 <shapr> mod_haskell is mostly dead
03:40:00 <Jerub> my only python webstuff has either been twisted or CGI
03:40:04 <shapr> WASH is nice, but I want to derive WebPublish
03:40:46 <Jerub> shapr: I applied for a job where zope/plone were mentioned in the ad the other day.
03:41:09 <shapr> I think it would be better/faster/saner to use generics to publish boring everyday algebraic types
03:41:42 <shapr> look at the demo here: http://home.tiscali.be/stevevh/
03:41:51 <cbus> shapr: hejsan
03:42:40 <shapr> the coolest and most productive parts of Zope and Plone are the archetypes, where you define the fields and widgets for a class, and all the input/edit/display sgml is automatically generated
03:43:22 <shapr> Twisted has woven and its successor nevow, which does basically the same thing
03:45:15 <shapr> so, am I preaching to the choir, or the thoroughly disinterested? ;-)
03:45:51 <Jerub> just us.
03:45:55 <shapr> heh
03:46:06 <Jerub> ;)
03:46:06 * earthy thinks about Rinus Plasmeyers `generic user interfaces' stuff
03:46:26 <shapr> I see two flavors of webpublishing, the datacentric stuff where you make a pretty interface to a database table(s)
03:46:36 <earthy> and?
03:46:43 <shapr> and the navigation that collects several of those datacentric chunks together
03:46:52 * earthy nods
03:47:48 <shapr> http://shapr.homelinux.net/cgi-bin/wash/TinyShop
03:48:19 <shapr> I think you can login with anything there
03:51:41 <shapr> the TinyShop could be data Album = Album Quantity Picture Price deriving WebPublish
03:53:30 <Hyp3rion> shapr - i can only buy 1 .th.st. or what not any more [i tried 2 and 8000]
03:53:38 <Hyp3rion> :-)
03:54:10 <shapr> hm, works for me
03:54:17 <shapr> oh, I'm using TinyShopXX
03:55:01 <Hyp3rion> and when i write 70 for that picture of the woman it becomes 2 on the bill :-/
03:55:28 <shapr> strange
03:55:42 <shapr> must not be a very solid demo :-)
03:55:47 <Hyp3rion> same with http://shapr.homelinux.net/cgi-bin/wash/TinyShopXX
03:56:00 <earthy> as noted: writing a good webshop is *hard*
03:56:04 <javaNewb> what is the opposite to not in Haskell?
03:56:14 <shapr> not
03:56:20 <Hyp3rion> not.not
03:56:24 <Hyp3rion> :-D
03:56:24 <shapr> @eval not True
03:56:25 <lambdabot> False
03:56:25 <earthy> id
03:56:30 <shapr> @eval not not True
03:56:31 <lambdabot> type error
03:56:35 <shapr> @eval (not not) True
03:56:36 <lambdabot> type error
03:56:39 <earthy> @eval not . not True
03:56:40 <lambdabot> <<EM Dynamic -> EM Dynamic>>
03:56:42 <shapr> @eval not (not True)
03:56:42 <lambdabot> True
03:56:57 <earthy> @eval (not . not) True
03:56:57 <lambdabot> True
03:57:16 <earthy> what the hell is that dynamic thing? :)
03:57:24 <javaNewb> lovely...my markers are going ot hate my code
03:57:51 <shapr> earthy: I dunno
03:58:42 <javaNewb> someone should create a is function which is the opposite of not
03:59:14 <javaNewb> :)
03:59:22 <shapr> how would it work?
03:59:22 <Jerub> ...
03:59:24 <shapr> oh, it's id!
03:59:37 <Jerub> @eval id True
03:59:38 <lambdabot> True
03:59:50 <shapr> @eval ego True
03:59:51 <lambdabot> unbound variable: ego
03:59:52 <JaffaCake> if opposite means inverse, then it's 'not'
04:00:31 <shapr> I always thought superego would be a good name for a games company.
04:00:49 <javaNewb> nice, id works for me
04:01:26 <Hyp3rion> shapr - offtopic but did you ever try planeshift?
04:01:50 <earthy> javaNewb is somewhat unclear in his specifications. he meant id
04:02:10 <shapr> nah, what is it?
04:02:23 <Hyp3rion> an mmorpg i just waddled over :-)
04:02:29 <Hyp3rion> http://planeshift.it
04:03:17 <Hyp3rion> supposed to be open-source, and i am noway a lawyer, the code is gpl, but the "artwork" is under a so strange license that even prohibits readeing the license itself :-/
04:03:49 <Jerub> I've often heard of artists not understanding open-source stuff.
04:04:13 <Jerub> apparently quake1/2 were only open-sourced after the artists were convinced by the programmers it would be alright.
04:04:19 <Jerub> and that took quite 
04:04:23 <Jerub> a bit of fighting.
04:04:49 <shapr> wow, uses crystalspace
04:04:52 <shapr> hiya Iter 
04:05:03 <Iter> hey shapr :)
04:05:46 <Iter> shapr: btw, for reference, shammah <-> iter, I just forgot to logoff @work.
04:07:25 <shapr> yup, I know
04:07:58 <Iter> shapr: Are you a lecturer?
04:09:06 <shapr> Iter: only on #haskell ;-)
04:09:39 <Iter> shapr: heh, I just wasn't sure given some of your comments, and your style on #haskell :)
04:09:48 <shapr> Iter: I'm a self-employed programmer, I mostly do web-development
04:10:11 <Iter> fair enough, I managed to get out of the web-programming game.
04:10:34 <Iter> Really enjoying system/application level programming now.
04:10:34 <shapr> I had a cs class long ago
04:11:07 <shapr> I don't mind web programming too much
04:11:15 <shapr> only when I am not given the option to do it right.
04:12:02 <Iter> You're self-employed, so that will happen more often than it would if you were staff; but does it actually happen at all!? ;)
04:12:23 <shapr> I got out of doing J2EE, so that's nice
04:12:38 <shapr> hiya ThomasWaldmann 
04:12:39 <ThomasWaldmann> shapr: the haskell wiki has some configuration problems. query?
04:12:59 <Iter> is it down again?
04:12:59 <shapr> you mean the RSS feed problem we were talking about yesterday?
04:13:11 <ThomasWaldmann> no, the reverting
04:13:46 <shapr> ThomasWaldmann: let's discuss it on #wiki
04:13:49 <Iter> shapr: As you get further away from the web J2EE starts to look nicer.
04:13:59 <shapr> I disagree :-)
04:14:53 <Iter> Oh?  We're finding the transaction management, and connectors only mildly painful.
04:15:55 <Iter> ...but maybe we just haven't advanced far enough to find the edge conditions where they might break down.
04:16:17 <shapr> many of the parts of J2EE could be refactored and (in my opinion) cut the code down by half to get the same functionality
04:16:23 <shapr> there's a *lot* of bloat in there.
04:17:12 <shapr> it irritates me to have to learn multiple complex systems when fewer systems could be composed to do the same stuff
04:18:17 <Iter> ahhh but then you wouldn't have a market for expensive conslutants to advise you incorrectly on technologies you don't have time to understand completely ;)
04:18:58 <shapr> I do have time to understand them completely, I'm just outraged that they suck so much
04:19:10 <Iter> (you know... the ones that read a 21days for complete dummys on the plane over ;)
04:19:52 <Iter> well as I said, I got out of that game, and I'm glad for it.
04:19:59 <shapr> sadly, I was not able to convince my bosses in my last J2EE job that we could cut out bits and pieces to get more functionality
04:20:14 <shapr> I wanted to use Jython for all of our code, lose 10% speed to gain 50% or more time...
04:20:29 <andersca> what about Jaskell
04:20:30 <andersca> ;)
04:20:53 <shapr> that project stopped :-/
04:21:20 <andersca> there was a jaskell project?
04:21:28 <shapr> and I think I asked the guy for the most recent codebase and he wasn't allowed to release it
04:21:32 <shapr> sure - http://www.scdi.org/~avernet/projects/jaskell/
04:21:33 <Iter> shapr: heh.  I'm about 1 week's work away from implementing a limited scheme interpreter.  "It's my testing framework" ;)
04:24:03 <shapr> scheme in java or haskell?
04:24:51 <shapr> andersca: there have been at least two Haskell -> Java projects, and I think more.
04:25:11 <shapr> Jaskell, and the one that dons and lilith were working on immediately come to mind.
04:25:23 <andersca> ok
04:25:47 <shapr> I thought microsoft had one for a bit as well
04:26:16 <shapr> that doesn't count the competing JVM interfacing projects either :-)
04:28:06 <Iter> shapr: java.
04:28:11 <shapr> aaack
04:28:17 * shapr has bad flashbacks
04:29:43 * Iter wonders what could have triggered flashbacks ;)
04:29:59 <Lunar^> shapr: What do you think about CHILL as a name for LIP ?
04:31:14 <shapr> Iter: Jython running in the Personal Java Application Environment in the Nokia 9210 Symbian Emulator on a finnish windows http://www.scannedinavian.org/~shae/nokia-emu-jython.png
04:32:28 <shapr> Lunar^: sounds good to me
04:32:57 <Lunar^> shapr: :)
04:33:13 <Lunar^> shapr: Searching for a package is chilling out :)
04:33:24 <shapr> hah!
04:33:30 <shapr> Iter: that's a screenshot from my last job
04:33:35 <Iter> shap
04:33:44 <Iter> shapr: looks like fun.
04:34:13 <Iter> but then again I always was a little insane like that.
04:38:55 <shapr> Cale: seems that anonymous allowing reverts was a moinmoin bug, and it's now fixed
04:40:23 <Cale> ah
04:40:26 * Cale is back (gone 07:55:19)
04:41:41 <shapr> can you login to HaWiki as CaleGibbard still?
04:41:54 <Cale> possibly :)
04:41:59 <Cale> one sec
04:42:25 <shapr> I'm going to give revert and admin to those HaWiki users who want it
04:43:11 <Cale> that would be handy
04:43:16 <Iter> mmm dinner just arrived, :)
04:43:52 <Cale> hmm... am I supposed to get a Python trace when I get my password incorrect, or is this a bug?
04:44:02 <shapr> that's a bug
04:44:59 <Cale>       filename = 'data/user/1081360974.46.12117.trail'
04:44:59 <Cale>       strerror = 'Permission denied'
04:45:42 <Cale>  /usr/lib/python2.2/site-packages/MoinMoin/user.py in addTrail(self=<MoinMoin.user.User instance>, pagename='UserPreferences')
04:45:47 <Cale>   570             trailfile = open(self.__filename() + ".trail", "w")
04:46:09 <shapr> try it again?
04:46:31 <Cale> okay, works now
04:46:35 <shapr> yay
04:48:40 <Cale> hmm, interesting -- "This email already belongs to somebody else." when saving my prefs.
04:49:11 <shapr> strange
05:00:42 <Cale> but yeah, I get logged in okay, it seems
05:06:32 <javaNewb> nite all
05:06:33 <javaNewb> :)
05:06:46 <Cale> 'night
05:14:59 <shapr> hiya cedric
06:17:59 <shapr> jiihaa
06:33:18 <shapr> @yow !
06:33:19 <lambdabot> My FAVORITE group is "QUESTION MARK & THE MYSTERIANS"...
06:56:12 <cedricshock> Let a be a function, say from Int -> Int, and b be a function (Int -> Int) -> Int
06:56:57 <cedricshock> In defining a it is possible to make the pattern a 7, where 7 is the integer 7, and define a special case of a when given the pattern 7
06:57:27 <Marvin--> cedricshock: uh. yes?
06:57:34 <Marvin--> hey shapr, ninja
06:57:34 <cedricshock> So it should be possible to define a pattern for b that matches only when it is given the function a.
06:57:39 <shapr> y0
06:57:44 <Marvin--> cedricshock: no
06:58:58 <Marvin--> cedricshock: patterns are variables or constructors applied to patterns
06:59:07 <Marvin--> cedricshock: a function is neither a variable nor a constructor
06:59:49 <p0lartype> cedricshock: are you a ocaml coder ?
07:00:14 <Amadan> Marvin--: can you do    b f | f == a = .... ?
07:00:16 <cedricshock> marvin: The analog doesn't carry over because 7 is not "the 7" but "a 7", and a i "the a", not "a a"
07:00:47 <cedricshock> p0lartype: Nope. I'm new to fuctional programming. Started in Erlang a couple months ago
07:00:52 <cgibbard> shapr: I think that perhaps the wiki is checking to see if anyone at all has a particular e-mail address when preferences are being saved (so if you aren't actually changing your e-mail address, then it won't let you save prefs)
07:01:27 <Marvin--> Amadan: if you instantiate  Eq (Int -> Int)  yes, but that's typically hard :)
07:01:53 <Amadan> :) yes, i see...
07:02:00 <Amadan> i'm a functional newbie, too
07:02:36 <Marvin--> cedricshock: now we're getting into the realms of overloading, which is a bit tricky
07:02:41 <Amadan> still mostly disfunctional... :)
07:02:50 <shapr> cgibbard: I think something's screwy with user stuff being carried on from moin 0.9 up to 1.2.1
07:03:35 <cgibbard> I was able to save my prefs by adding a space to my e-mail address, anyway.
07:13:08 <Marvin--> cedricshock: the "7" is actually an Integer, but it's automatically boxed with calls to "fromInteger"
07:13:48 <Marvin--> cedricshock: if you have ghc you can put   foo 7 = ()  in a file and run ghc -fno-code -fext-core on the file and look at the .hcr file it produces
07:15:02 <Marvin--> the details are a bit complicated, though
07:18:14 <Lunar^> waow, that prepose paper seems really interesting
07:18:25 <shapr> ?
07:19:52 <Lunar^>     http://www.eecs.harvard.edu/~ccshan/prepose/
07:19:57 <ozone> Lunar^: yeah.  just printed it out to have a read ...
07:20:01 <Marvin--> yes, I thought so too
07:20:15 <Lunar^> It's fun how I tried all the explaned solutions :)
07:20:26 <ozone> then again, anything oleg kiselyov is rather interesting :)
07:20:30 <ozone> by
07:20:39 <Lunar^> ozone: What else ?
07:21:02 <shapr> I don't think I've seen Oleg on #haskell yet
07:21:20 <ozone> dear god
07:21:32 <ozone> one day, i will be able to read a ralf hinze paper in one sitting, i swear
07:23:05 <earthy> read... right. ;)
07:23:18 <earthy> understand? :)
07:23:40 <ozone> earthy: for me, i think it might just be 'read'. ;)
07:24:05 <ozone> alpha omega phi turnstile beta kappa gamma turnstile foo bar baz wibble bubble bobble
07:25:31 <earthy> bubble bobble!
07:26:12 <ozone> frozen bubble
07:35:54 <Lemmih> Is there a Linux version of 'quip'?
07:39:23 <Lemmih> (quip is an XML search engine for windows used by the current (cvs) version of HOpenGL to extract information from an XML file)
07:44:43 <Segora> isp
07:44:45 <Segora> gn
07:47:11 <vegai> peanut butter tastes awful
07:47:15 <shapr> man I love it
07:47:26 <vegai> the kind without any chocolate
07:47:39 <shapr> yes, it's great
07:47:41 <vegai> eugh ;/
07:47:48 <shapr> but often too heavy to eat by itself
07:47:54 <shapr> pb&j
07:47:57 <vegai> hmm
07:50:55 <stratocaster> I'm writing a little multi-player text game server. Multithreaded. There's global state (player and 'world' info) updated in the 'main' thread. Is there a better way to handle this than having an MVar [Stuff] that gets passed to every thread?
07:53:27 <Lunar^> stratocaster: prepose ! :)
07:53:34 <earthy> hm. peanut butter, especially the kind marketed in .nl under the Calve' brand... mjum
07:53:43 <earthy> ofcourse, not too much of it in one sitting
07:55:10 <stratocaster> Lunar^: Could you elaborate? I guess my question was pretty poorly put... Did it make sense at all?
07:56:53 <stratocaster> The situation I've got now, I've got one 'world' MVar that has a list of clients, among other things. Each client thread modifies that MVar when the client has logged in, etc. The 'server' thread looks through that MVar to find client input (read by client thread), and put output in the 'out box'.
07:57:29 <stratocaster> It just seems awful ugly to be shuttling this MVar around all over the place.
07:59:23 <shapr> sounds like the big kernel lock
07:59:36 <stratocaster> Well, what makes it particulary ugly is that for *each* client thread, I'm also passing around a 'client' variable that duplicates the client's entry in the 'world' MVar, so that the client thread knows which client it is actually supposed to be servicing.
08:00:31 <shapr> that seems odd
08:00:44 <shapr> why does a thread need to be associated with a client?
08:00:47 <stratocaster> Yea, skanky odd.
08:01:36 <shapr> couldn't you just have a queue that gets serviced by any free thread?
08:01:39 <stratocaster> Well, each thread *becomes* associated with a client when I fork one off to do accept each time.
08:01:41 <Lunar^> stratocaster: sorry. prepose is the nickname of a paper that just got out very recently and I'm quite excited about it at it seems a nice way to solve the "configuration problem"
08:01:43 <Marvin--> http://www.smh.com.au/articles/2004/06/02/1086058889577.html  ... uhh
08:02:09 <Lunar^> stratocaster: But it's not exactly your problem anyway
08:02:25 <stratocaster> Congratulations
08:03:32 <shapr> why can only one thread do the reading from the client?
08:03:35 <Lunar^> stratocaster: Can't you use Control.Concurrent.Chan instead of MVar ?
08:04:18 <Marvin--> "Time based hardware button for application launch"
08:04:38 <stratocaster> shapr: You're right, it doesn't need to be a particular thread.
08:05:09 <shapr> stratocaster: or maybe I just don't understand the whole design :-)
08:05:09 <stratocaster> Oh, so I wouldn't need to pass around the 'client' info, because any thread could just service the first client that's ready.
08:05:34 <shapr> that sounds right to me
08:05:43 <stratocaster> Well, once it gets passed authentication.
08:05:45 <shapr> obviously, I haven't seen your code, so I'm only judging from what you said
08:05:46 <stratocaster> 'past'
08:05:57 <shapr> actually, either worked there
08:06:42 * shapr pulls another instance of cardboard consultant 
08:07:28 <stratocaster> I've got a stripped-down version I can post. Probably be somewhat inscrutable, because it's pieces pulled from the bigger program just enough to compile.
08:09:05 <shapr> do you have a demo we can test? :-)
08:13:25 <stratocaster> Don't think my windows machine would let you in. I put the stripped-down program on http://haskell.org/hawiki/HaskellIrcPastePage
08:16:01 <JaffaCake> anyone have any thoughts on the 'prepose' paper?
08:16:22 <Lunar^> JaffaCake: It gets really complicated at the end
08:16:44 <JaffaCake> which bit?  The StablePtrs?
08:17:02 <Lunar^> JaffaCake: I'm disappointed that they don't provide their solution to the maxIter problem
08:17:12 <JaffaCake> right
08:17:38 <Lunar^> JaffaCake: I'm talking about using it, I did not really take the time to understand the implementation
08:17:40 <JaffaCake> for me, I don't like having to add contexts to all my type signatures
08:17:59 <JaffaCake> in that respect it's no better than implicit parameters
08:18:06 <Lunar^> JaffaCake: same with implicit parameters
08:18:16 * JaffaCake is sticking to global variables
08:18:32 <andersca> what's prepose?
08:18:42 <JaffaCake>  http://www.eecs.harvard.edu/~ccshan/prepose/
08:20:11 <shapr> at first glance, it looks like the BoundedList stuff in HaskellDB
08:20:39 <JaffaCake> I haven't looked at that - what's BoundedList?
08:21:01 <shapr> it's how you enforce varchar(60) on a [Char]
08:21:17 <JaffaCake> right
08:21:52 <JaffaCake> might be similar, yes
08:22:07 <JaffaCake> the StablePtr trick is genius
08:23:00 <shapr> I want an O'Reilly book: "How to encode useful information in the HM Type-System"
08:23:09 <Lunar^> stratocaster: I think you should tried to use Chan to dispatch messages to clients
08:23:26 <shapr> that would show examples like BoundedList, Pseudonym's physics code that won't let you add dissimilar units 
08:24:48 <Lunar^> JaffaCake: Amazing use of StablePtr yeah
08:24:57 <stratocaster> Lunar^: Thanks, I will look into that.
08:25:35 <Lunar^> stratocaster: dupChan :: Chan a -> IO (Chan a)
08:25:50 <shapr> cool, Pseudonym gets referenced
08:25:55 <Lunar^> stratocaster: "Hence this creates a kind of broadcast channel, where data written by anyone is seen by everyone else."
08:28:53 <stratocaster> Yep, am looking at that now.
08:29:45 <stratocaster> It looks neater than having like an MVar [String] for input/output for each client as far as accessing them goes, but is there anything beyond that that I am missing?
08:31:39 <Lunar^> stratocaster: I think that I am missing something :)
08:37:48 <stratocaster> Lunar^: Heh, I am asking non-questions. That Chan will be much better than what I had planned, and I'm guessing my original qualms were just unfamiliarity with multithreading stuff. Thanks for the help.
08:39:14 <Lunar^> JaffaCake: has GHC everything the prepose paper needs ? e.g. explicit kinds ?
08:39:23 <JaffaCake> yep
08:39:52 <Lunar^> JaffaCake: I remember that sebc bite itself introducing explicit kinds in GHC for hOp
08:40:25 <JaffaCake> bite itself?
08:40:41 <Lunar^> JaffaCake: it was the first attempt though, trying to write a memory manager in Hasell
08:40:57 <JaffaCake> sorry, I didn't understand that
08:46:03 <shapr> I think that was "sebc shot himself in the foot trying to deal with explicit kinds in hOp"
08:48:02 <Lunar^> JaffaCake: I don't remember explicitly what was the problem but I remember that it stayed with the idea that 'explicit kinds is plainly wrong'
08:48:05 <Lunar^> shapr: right
08:48:36 <JaffaCake> ah, I see
08:49:09 <Lunar^> shapr: is curryspondence up ?
08:49:17 <shapr> probably
08:49:28 <shapr> though I desperately need to update it
08:49:34 <shapr> yah, it's up
08:50:03 <shapr> I'm about to upgrade postgresql and haskelldb, so it may go down in a few minutes
08:50:44 <Lunar^> shapr: I would be glad if you add progress bar also :)
08:50:55 <shapr> progress bar for what?
08:51:09 <Lunar^> shapr: during the search ;)
08:51:18 <shapr> oh
08:51:20 <desrt_> haskell does not support progress bars :)
08:52:13 <Lunar^> JaffaCake: http://haskell.org/pipermail/glasgow-haskell-users/2003-August/005543.html
08:53:24 <Lunar^> JaffaCake: He was talking about polymorphic kinds, that was what I did not remember :)
08:53:49 <JaffaCake> yes, I see the problem
08:54:18 <JaffaCake> it's not possible to do what he wants, because in general unboxed types have different representation
08:54:36 <JaffaCake> sebc wants polymorphic unboxed types, which isn't possible
08:54:51 <Lunar^> JaffaCake: He dropped this approach since anyway
08:54:59 <JaffaCake> good :)
08:56:07 <JaffaCake> simonpj's response to that message summed it up pretty well
08:57:28 <Lunar^> It's been nearly a year.. that's frightening
08:57:44 <shapr> and cheering, because progress is still happening
08:58:57 <Lunar^> shapr: I'm not that happy.. as we already discussed before, I'm streched between being open and keeping hOp as *my* (which is even not true) toy
08:59:38 <Lunar^> shapr: Anyway, I'm seeing sebc tomorrow (a whole day !) so we'll have the release ready for EuroHaskell
08:59:43 <shapr> yay!
09:00:15 <Lunar^> shapr: We could think about what should be done next with people there
09:00:45 <shapr> NE2000 sounds interesting to me, but it depends on where you want to go
09:01:25 <Lunar^> shapr: A mailling-list ?
09:01:50 <Marvin--> whoa, the stableptr stuff is awesome
09:07:44 <shapr> Lunar^: haskell.org or ScannedInAvian?
09:09:18 <Lunar^> shapr: What would you prefer ?
09:09:30 <shapr> I'm not picky either way
09:09:31 <Lunar^> shapr: Should be hOp considered as a real project ?
09:09:45 <shapr> that's up to you :-)
09:10:06 <Lunar^> mhh... maybe I should find the answer of this question
09:10:29 <Lunar^> I don't feel that I have the shoulders, but maybe I should be more confident in myself
09:10:53 <shapr> or you could do it the way I do with haskell-libs, I put in time and energy when I have it, and not when I don't
09:11:27 <shapr> as long as you're having fun
09:11:44 <Lunar^> I should wait until I know about getting in the MPRI, maybe I will have a lot of time to work on hOp next year
09:12:54 <shapr> I just do what I enjoy and try to share the fun with others.
09:13:22 <Lunar^> And it's always fun to bounce with you :)
09:13:27 <shapr> yes!
09:14:16 <shapr> I start lots of projects that never go anywhere, but sometimes they do go somewhere. That's the story of my life :-)
09:43:04 <maihem> Where can I find some information on HaskellDB other than the little that is at http://www.haskell.org/haskellDB
09:45:52 <shapr> maihem: haskelldb.sf.net
09:46:04 <shapr> hi shaleh 
09:47:21 <shaleh> greets
09:47:22 <shapr> shaleh: what brings you here? Got some Haskell questions?
09:47:46 <shaleh> shapr: I just started learning the language.  Decided I had let lisp hold me back from functional programming long enough
09:48:14 <shaleh> I have found that hanging out on the mailing lists and irc channels can be a good way to immerse
09:48:21 <shapr> I agree
09:48:31 <shapr> have you already found the learning page, the irc logs, and the wiki?
09:49:05 <shapr> maihem: also, there's #haskelldb and HaskellDB users here
09:49:06 <neologism> shaleh: if you know what functional programming is about learning haskell is gonna take you short time
09:49:56 <maihem> thanks shapr!
09:50:51 <shaleh> shapr: I have printed some docs from the learning page.  Never really liked Wikis much.  I find them hard to navigate.
09:51:11 <shaleh> neologism: that is my impression from the docs.  I have yet to write a real program though.
09:51:40 <neologism> principals are the same
09:51:49 <neologism> and who cares about syntax sugar :)
09:51:57 <shaleh> I have the "Haskell School of Expression" at home.
09:52:27 <shaleh> so far I like it, but I had to find a primer so I could figure out how to run the code from the book.
09:52:50 <shaleh> that's about where I am since my Linux machines at home are all in some form of non-functioning
09:53:05 <shapr> oh, no working debian box?
09:53:33 <shaleh> shapr: not at the moment.  Damn near every computer I own has failed in the last 3 - 4 months.
09:53:51 <shaleh> a recently purchased thinkpad is not getting along with 2.6 either.
09:54:04 <shaleh> so I am currently only using a PC at work.
09:54:16 <shaleh> Have not read my shaleh@ account in about 2 months
09:54:32 <shaleh> once you get behind life just piles more shit on you
09:54:39 <shapr> yah, I understand
09:55:12 <shaleh> hell, even my wife's ibook was in the shop for a week due to that logic board failure
09:55:43 <shapr> you live under a sunspot :-)
09:55:50 <shaleh> (-:
09:55:53 <shaleh> yeah
09:56:02 <shaleh> bad hd's, bad memory, etc.
09:56:15 <shaleh> part of it is hardwaare I have been stretching since '99
09:56:36 <shaleh> part of it is brand new stuff from Fry's that I did not test immediately and so now I can not take back
09:56:40 <shaleh> you learn
09:56:51 <shaleh> no buying hardware if I am not going to power it on in the next two days
09:56:56 <shapr> yah, that's true
09:57:04 <shapr> even then, sometimes it does stuff you don't expect
09:57:26 <shaleh> I have some friend's hardware testing software
09:57:36 <shaleh> it is quite good at showing frail hardware
09:57:45 <shapr> I wish all my hardware came with unit tests
09:57:46 <shaleh> we used it to test all of our machines at VA
09:58:08 <shaleh> shapr: ctcs, it is on sf.net.  I have been meaning to make a deb package of it.
09:58:29 <shaleh> it does things like run a kernel test in a loop.  Great for finding bum memory and hard disks
09:58:34 <shaleh> kernel build I mean
09:58:55 <shapr> would it find an SMP chipset that couldn't mask IPI interrupts?
09:59:03 <shaleh> we had vendors kicking and screaming at us back in 2000 and 2001 about how their memory couldn't be bad
09:59:30 <shaleh> shapr: hmm, perhaps.  Give it a look.  it is mostly bash code with some perl logic in it.
10:00:06 <shaleh> I would not recommend the coding style but it definitely puts a hurt on computers.  Kind of like putting a baby in the snow and seeing if it lives.
10:00:28 <shapr> yikes
10:01:31 <shapr> you can grab a win32 copy of ghc from haskell.org/ghc/ (I think)
10:01:43 <shapr> the ghc6 debs are my favorite ghc distribution though
10:01:58 <shaleh> yeah I have ghc6 and hugs
10:02:57 <shaleh> know of any interesting projects using haskell whose code I could read?
10:04:32 <shaleh> the Haskell book on Data Structures and Algorithms that was on slashdot a month or two back went out of print.  Apparently a new version will be out soon.  Waiting for that to show up as well.
10:04:59 <shapr> how complicated do you want?
10:05:10 <shaleh> let's start small and build
10:05:30 <shapr> really small -> http://www.scannedinavian.org/~shae/src/haskell/Mandelbrot-0.1.hs
10:05:31 <shaleh> long term I have been thinking about maybe a haskell based window manager or something
10:05:36 <shapr> yah, that would be nifty
10:05:42 <shapr> there are X11 bindings already
10:05:49 <shapr> but no wm
10:06:06 <shaleh> shapr: url for the X11 bindings?
10:07:11 <shapr> http://www.reid-consulting-uk.ltd.uk/projects/HSX11.html
10:07:59 <shaleh> shapr: thanks for sharing
10:08:26 <shaleh> what is this: GreenCard 3.00
10:08:51 <shapr> it's a C to Haskell tool
10:09:22 <shaleh> ah
10:09:25 <shaleh> keen
10:09:52 <shaleh> have any of you played with Template Haskell? It sounds interesting
10:10:23 <shaleh> back in a few minutes
10:10:42 <shapr> yah, it is very cool
10:13:43 <TheHunter> btw, can you write a thing that converts a function to his monadic equivalent (like map -> mapM) in TH?
10:14:31 <shapr> you could use liftM :-)
10:15:52 <TheHunter> i guess liftM is something different 
10:15:53 <Riastradh> You could just write it monadically in the first place...
10:17:34 <TheHunter> you can, sure. But I think writing it like a usual haskell function could improve readability. Plus, some libraries forget to provide monadic versions
10:22:48 <shapr> bringert: where'd you get Text.XHtml.BlockTable? is that just an alias for Text.Html.BlockTable?
10:24:52 <shapr> seems to work
10:52:10 <shaleh> back
10:58:42 <shapr> bringert: for whatever reason, postgresql won't take session_user as a col name, but it's fine with sessions_user
10:59:32 <shapr> databases are so fickle
11:15:25 <shaleh> sometimes they have keywords that are important
11:15:32 <shaleh> the docs usually spell them out
11:25:46 <shapr> hej ski
11:25:59 <ski> hej shapr
11:36:06 <bringert> shapr: oh, I forgot to add BlockTable to the darcs repo
11:36:20 <bringert> but it is the same as Text.Html.BlockTable
11:36:26 <shapr> yah, I used that.
11:36:31 <shaleh> shapr: what project are you hacking on?
11:36:45 <shapr> it's one of bringert's projects actually
11:37:05 <shapr> bringert: is it under NDA?
11:37:30 <shapr> or can I discuss it publically?
11:37:52 <bringert> shapr: it's ok
11:37:57 <shapr> awright
11:38:23 <shapr> bringert hacked up a blog called BLob (is that a PLog reference?)
11:38:36 <bringert> yeah
11:38:46 <shaleh> ah, nifty
11:38:47 <shapr> it uses HaskellDB, Text.XHtml, and stepcut's RSS code
11:38:54 <shaleh> cool
11:39:12 <shapr> anyway, I'm trying it out locally
11:39:15 <shaleh> bringert: plan on releasing the source or will it be proprietary?
11:39:17 <bringert> and XmlRpc
11:39:18 <shapr> right now I'm using PLog
11:39:34 <shapr> oh yes, XmlRpc, another of bringert's projects :-)
11:39:34 <shaleh> shapr: I was planning on using pybloxom
11:39:59 <shapr> well, use whatever you like :-) I just want a blog I can hack on
11:40:27 <shaleh> shapr: that was my point, I may use a haskell version for something to hack on if it was available and open
11:40:28 <bringert> I'll release it
11:40:28 <shapr> like lambdabot's creeping featuritis, I like hacking small plugins for a larger project
11:40:42 <shaleh> although I was planning on using one without a db backend.
11:40:57 <bringert> shaleh: you could use sqlite
11:40:59 <shapr> you could try it with the SQLite 
11:41:10 <bringert> :)
11:41:14 <shaleh> haskelldb supports that?
11:41:18 <bringert> yeah
11:41:18 * shaleh likes sqlite
11:41:31 <shapr> yah, another chunk of stepcut code
11:41:44 <bringert> dbdirect is a little weird with sqlite, since sqlit is untyped
11:43:12 <shapr> HaskellDB is a great tool
11:43:22 <shapr> mysql, postgresql, sqlite, ODBC
11:43:41 <shapr> all with the same embedded type-checked interface!
11:43:45 <bringert> I should try running blob against sqlite
11:43:55 <bringert> shapr: did you get it to work?
11:44:08 <shapr> not yet, you saw that error I just got
11:44:22 <bringert> btw, CreateTables creates all the tables you need and AddUserBlog adds a user and a blog
11:44:25 <shapr> I don't know how it decided the date_added was the column title
11:44:29 <bringert> but you probably figured that out
11:44:31 <shapr> yup, I got that far
11:44:38 <bringert> that's really weird
11:44:44 <shapr> http://shapr.homelinux.net/cgi-bin/blob/AllBlogs
11:44:48 <bringert> Iäll try it with postgre here
11:45:11 <shapr> works fine up till I give a correct login
11:46:02 <shapr> I assume it's happening in addEntry
11:46:18 <shapr> is there a nice debug switch where I can spit out the SQL into the syslog or something?
11:46:32 <shaleh> where does Text.XHtml live?
11:46:52 <shapr> it comes with BLob
11:46:56 <shaleh> ah
11:46:58 <shaleh> ok
11:48:32 <shaleh> anyone know of a decent example of event based programming with haskell?
11:48:47 <shapr> like what?
11:48:59 <bringert> shapr: no, but it's pretty easy to add debugging
11:49:22 <shaleh> shapr: well, as we discussed earlier, I was looking at maybe writing a wm.  For that I need an event queue based design.
11:49:36 <shapr> do you know monads?
11:49:55 <shaleh> shapr: i have not assimilated them yet, but I understand about them
11:50:05 <shaleh> essentially singletons from OO lanf
11:50:06 <shaleh> land
11:50:07 <bringert> just modify hsqlPrimQuery and hsqlPrimExecute in haskelldb/src/drivers/hsql/Common.hs
11:50:16 <bringert> to print each query to a file or something
11:50:20 <shapr> ok, I'll do that
11:50:39 <shapr> shaleh: I think monads are more than that
11:51:18 <shaleh> shapr: of course, that is me using existing concepts to ease the learning curve
11:51:25 <shapr> fair enough :-)
11:51:30 <chucky> the first sign that you're starting to understand monads is when you don't understand them at all and can't find anything remotely related to compare to. :)
11:51:35 <bringert> shapr: lots of fixes in the blob repo now
11:51:36 * shapr grins
11:51:39 <shapr> yay
11:51:46 <shaleh> shapr: yeah, I got that impression
11:51:48 <vegai> hmm, seems like I'm getting there then ;P
11:51:50 * ski grins too
11:52:00 <bringert> only one binary for the html interface now
11:52:14 <shapr> bringert: btw, I cut DBLogin into local and remote pieces
11:52:29 <shapr> because apache runs as www-data on my system, but I own the blobdb myself
11:52:40 <shaleh> shapr: can you say pam (-:
11:53:23 * shapr rebuilds BLob
11:53:55 <shapr> bringert: where's BlobHtml.hs ?
11:54:48 <shaleh> shapr: so, know of a good example?
11:55:15 <shapr> there's a haskell web server
11:55:22 <shapr> it's not that simple though
11:55:41 <shaleh> shapr: that's ok.  Would you show the code to someone?
11:55:49 <shaleh> i.e. how well is it written.
11:56:03 <shapr> well, it could use a Config monad, too much is explicitly passed
11:56:48 <shapr> oh! lambdabot might work
11:56:57 <shapr> it's an irc 'bot
11:57:12 <shapr> I guess that's sort of an event based program
11:57:27 <shaleh> sure
11:57:34 <shaleh> events are events
11:57:38 <shapr> sf.net/projects/haskell-libs
11:57:41 <shapr> grab lambdabot 2.0
11:57:46 <shapr> hiya stepcut
11:57:49 <stepcut> hey
11:58:01 <chucky> all about monads is a very good introduction to monads too, see http://www.nomaware.com/monads/html/
11:58:16 <bringert> shapr: added it now
11:58:27 <stepcut> I made some progress on 'adding links' to WASH/CGI, but it's a very difficult problem :)
11:58:28 <shapr> yay
11:58:30 <shaleh> chucky: thanks.  I need some more haskell experience before I venture there, but I will bookmark the reference.
11:58:54 <shapr> you will need monads to do event stuff
11:59:05 <shapr> bringert: BlobUtil?
11:59:09 <bringert> dammit
11:59:15 * shapr grins
11:59:21 <shaleh> shapr: haskell-libs looks a little like a CPAN thingy, yeah?
11:59:39 <shapr> well, I guess a little bit
11:59:43 <shapr> it's more like a cvs-wiki
11:59:46 <bringert> added
12:00:27 <shapr> yay, buildage
12:00:30 <shaleh> shapr: how much of the haskell stuff is packaged in Debian?
12:00:50 <bringert> tried with postgre, gor that same session_user error
12:00:54 <shapr> quite a few packages, ghc, hugs, nhc, wxHaskell, bnfc, happy, alex
12:01:01 <bringert> I'll change the column name
12:01:14 <shapr> yah, I dunno what's wrong with session_user as a name
12:01:27 <shapr> the postgres error isn't helpful
12:01:32 * shapr spanks postgre
12:02:22 <shapr> shaleh: and hmake, hat, haddock, ctklight, c2hs, and possibly lhs2tex
12:02:43 <shapr> oh, and there are buddha debs, but they're not in the experimental or main repo yet
12:02:50 <shapr> I'm sposed to get back to bernie about that
12:03:10 <shaleh>  The session_user is the user that initiated a database connection; 
12:03:23 <shaleh> according to the postgres docs
12:03:32 <shaleh> http://developer.postgresql.org/docs/postgres/functions-misc.html
12:03:37 <shapr> silly postgres
12:04:01 <bringert> that really ought to be a function, not a variable
12:04:07 * shapr agrees
12:04:08 <shaleh> bringert: indeed
12:04:14 <shapr> hoi arjanb 
12:04:24 * shapr uses his pounce-fu on arjanb 
12:04:41 <shapr> graag gedann!
12:04:43 <shaleh> bringert: you could call it "session_login" or "session_account"
12:05:03 <shaleh> shapr: use the new word I learned "glomp"
12:05:29 <shapr> I like "graag gedann" it's fun to say.
12:05:31 <shaleh> shapr: apparently it is a common slang among the otaku crowd
12:05:45 <shaleh> shapr: what is that, phonetically?
12:05:52 <shapr> the guttural dutch g makes for exciting interactions
12:06:29 <shapr> you know the click you get in some instances of x or ch? like loch, bach, etc?
12:06:37 <shapr> if you voiced that, you'd get the dutch g
12:10:08 <shaleh> it's code like this that makes people run away from haskell and the like
12:10:10 <shaleh> mapM_ (\x -> putStrLn $ concatMap ((" " ++) . fst) $ showRecRow x) t
12:10:22 <shapr> hm, that looks familiar.
12:10:46 <shapr> is that from the HaskellDB tutorial?
12:10:50 <shaleh> shapr: dah
12:10:59 <shapr> the one on AvianWiki?
12:11:03 <bringert> I agrre, it's atrocious, should be: mapM_ (putStrLn . concatMap ((" " ++) . fst) . showRecRow) t
12:11:07 <bringert> :P
12:11:11 * shapr grins
12:11:16 <bringert> that's so much easier to read
12:11:21 <shaleh> shapr: yeah
12:11:26 <shapr> shaleh: yah, I wrote that.
12:11:29 * shapr grins
12:12:05 * shapr replaces that with bringert's cleaned up version
12:12:52 <bringert> Fail: user error (ERROR:  Attribute "2004-06-02 21:12:24" not found
12:12:55 <bringert> dammit
12:12:58 <shapr> yah, what's up with that?
12:13:36 <shapr> shaleh: anyway, showRecRow shows a table row, but you get a string and a showsPrec thingy as well
12:14:12 <shapr> so fst cuts it to only strings, concatMap (" " ++) joins up the list of strings with spaces between
12:14:25 <shapr> putStrLn prints the whole thing
12:14:30 <shaleh> what is the mapM_ construct doing?
12:14:35 <shapr> and mapM_ is the monadic map that doesn't care about the return value
12:14:44 <shaleh> ah
12:14:53 <shapr> mapM_ putStrLn ["foo","bar"]
12:14:55 <shapr> for example
12:14:58 <shaleh> so it is kind of like saying for_each .....
12:15:18 <bringert> (concatMap ((" " ++)) could probably be (intersperse " ")
12:15:34 <shapr> with concat?
12:15:41 <bringert> eh, right
12:15:45 <bringert> might be worse
12:15:59 <shapr> I think intersperse is clearer
12:16:13 <bringert> changed session_user in the repo
12:16:17 <shapr> yay
12:16:18 <ski> s/(" " ++)/(' ' :)/ ?
12:16:31 <bringert> or unwords
12:16:50 <shapr> @index undwords
12:16:51 <lambdabot> bzzt
12:16:54 <shapr> oy
12:16:57 <shapr> @index unwords
12:16:58 <lambdabot> Data.List,Prelude,List
12:17:04 <shapr> hm, I'd forgotten about that one
12:17:57 <shapr> greetings kimmell 
12:18:48 <kimmell> hello shapr
12:18:49 <shapr> looking for Haskell info?
12:21:16 <shapr> kimmell: if you have any questions, feel free to ask
12:21:33 <kimmell> I will do that
12:21:55 <shaleh> shapr: lambdabot should really extract into lambda-2/.
12:22:04 <shapr> hm
12:22:40 <shaleh> at least it has a directory structure in it though
12:22:42 <shaleh> (-:
12:23:20 <shapr> though it's missing some of the latest modules
12:23:40 <shapr> type, info, and index have new functionality
12:24:26 <shaleh> shapr: so it depends on GHC? which means it will not run with hugs?
12:24:31 <shapr> that is correct
12:24:53 <shapr> it might run with hugs after heavy massaging, but I'm not willing to put in the effort :-)
12:25:08 <shapr> lambdabot's primary purpose imho is a code-toy
12:25:24 <shapr> sort of a shared graffiti board
12:26:40 <shaleh> shapr: I think this code will be quite instructive for me, thank you.
12:26:43 <shapr> sure
12:26:56 <shapr> if you have any questions about lambdabot, I can probably answer them.
12:27:53 <bringert> shapr: did your log catch that weird query?
12:28:10 <shapr> ?
12:28:23 <shapr> oh, I got distracted from the log :-)
12:28:48 <bringert> I'm going to try it here too
12:28:56 <bringert> this bug looks very interesting
12:29:22 * shaleh subscribes to haskell-cafe
12:32:37 <bringert> hmm, seems to be a quoting problem
12:33:38 <bringert> yeah, that was it
12:33:46 <shapr> ??
12:33:53 <bringert> haskelldb uses " instead of ' for quoting dates
12:33:59 <bringert> I'll fix that
12:34:03 <shapr> ok!
12:34:17 <shapr> is there a good reason to use double quotes?
12:34:25 <bringert> don't think so
12:34:52 <bringert> just an oversight + not doing enough testing with postgre
12:35:09 <bringert> probably my fault to start with
12:36:31 <bringert> yeah, that fixed it
12:36:49 <shapr> is there a simple patch?
12:37:54 <shaleh> a filter which converts to SQL format, kind of like when you program CGI and need to clean input / output?
12:38:04 <shaleh> (-:
12:38:31 <bringert> shapr: change show on line 442 in haskelldb/src/Query.hs to showConstant
12:38:44 <bringert> it'll be in tomorrow's snapshot
12:38:51 <bringert> we really should move to a public repo
12:39:08 <bringert> just need to work up the energy to do the move
12:40:45 <bringert> shapr: thanks for testing with postgre
12:40:52 <bringert> that was a nasty bug
12:40:53 <shapr> yay
12:41:24 <bringert> it's been a while since the last haskelldb release
12:41:46 <bringert> I'm sure we'll get around to it
12:41:56 <bringert> shapr: blob work ok for you now?
12:42:02 <shapr> building...
12:43:32 <bringert> is there an emacs darcs plugin?
12:43:53 <shapr> there is
12:44:18 <shapr> http://www.scannedinavian.org/DarcsWiki/CategoryEmacs
12:46:38 <chucky> hmm writing emacs plugins could be fun...
12:47:23 <bringert> cool, the VC plugin just works
12:49:56 <bringert> shapr: I'm thinking about how to support formatted input
12:50:26 <bringert> maybe replace ...\n\n with <p>...</p>
12:50:29 <shapr> the simplest is to include the post in the page
12:50:48 <bringert> and just let the user type in whatever html they like?
12:50:52 <shapr> yup
12:51:00 <shapr> personally I like wiki markup
12:51:17 <shapr> but include is the easy way to start.
12:56:00 <bringert> did that now
12:56:19 <bringert> but then the RSS feed has to deal with that
12:56:28 <shapr> hm
12:56:35 <shapr> point :-)
12:56:54 <bringert> ah, RSS.hs uses CDATA declarations
12:58:39 <bringert> one problem is that the output page might not be valid xhtml jif the user does something strange
12:59:15 <shapr> yah, that's true
12:59:17 <bringert> can HaXml read slightly bad html and the output it as proper xhtml?
12:59:24 * shapr doesn't know
12:59:49 * bringert should probably get post editing working first
12:59:55 <bringert> and maybe comments
12:59:55 <shapr> well, whatever's fun :-)
12:59:58 <stepcut> bringert: probably not, HaXml is pretty picky
13:00:12 <stepcut> bringert: it would depend on what was slightly bad about it
13:00:18 <bringert> true :)
13:01:25 <bringert> Text.XML.HaXml.Html.Parse: " This is a parser for HTML documents. Unlike for XML documents, it must include a certain amount of error-correction to account for HTML features like self-terminating tags, unterminated tags, and incorrect nesting."
13:01:32 <bringert> so it might fix some things
13:06:21 <stepcut> hrm, I have never used that feature
13:07:12 <bringert> mine is huge
13:07:18 <bringert> oops, wrong window
13:08:11 <stepcut> haha
13:08:14 <Marvin--> bringert: oh really
13:08:16 * shapr grins
13:08:37 <Marvin--> do tell us more
13:11:28 <shapr> bringert: works nicely
13:11:35 <shapr> http://shapr.homelinux.net/cgi-bin/blob/BlobHtml
13:18:48 <shapr> hoi asmodai 
13:20:09 <bringert> hrrm
13:20:13 <bringert> that wasn't me
13:20:28 <shapr> ?
13:20:37 <bringert> <bringert> mine is huge
13:20:37 <bringert> <bringert> oops, wrong window
13:20:44 <shapr> you stepped away from your computer?
13:20:47 <bringert> maybe I should start using xlock
13:20:49 <bringert> yeah
13:20:52 <shapr> bad idea!
13:21:14 <bringert> you'd think the computer would be safe sitting in my own kitchen
13:21:18 <bringert> but no
13:21:24 <shapr> someone came into your kitchen??
13:21:51 <bringert> yeah
13:22:03 <bringert> but she lives here
13:22:13 <shapr> well, if she lives with you...
13:22:21 <shapr> then it sounds like a compliment =)
13:23:26 <bringert> :P
13:23:44 <bringert> oh, the RSS feed has a hardcoded base url for comments
13:23:51 <bringert> I should probably fix that
13:23:59 <shapr> yah, I was just looking at hacking that with AddUserBlog
13:24:03 <stepcut> :p
13:24:47 <bringert> BlobRSS uses SImpleCGI so it can get at the CGI variables to figure out where it is running
13:26:47 <bringert> but I'm going swimming now
13:27:01 <shapr> and I'm going to be social
13:27:21 * bringert thinks irc is social
13:27:38 <shapr> social == spending significant time with my significant other
13:27:41 <stepcut> and I'm going to sit at my desk until 6pm
13:27:43 <shapr> who you will meet in a few days
13:28:19 <shapr> hey, the EuroPythoneers are getting together on saturday night I think, or sunday night
13:28:36 <shapr> for a preconference meet with beer kind of thing
13:29:15 <bringert> shapr: when are you coming to gothenburg?
13:29:29 <shapr> we'll be there on saturday night
13:29:50 <shapr> we're leaving here saturday sometime, and the flight is an hour or something
13:30:17 <shapr> I'm still worrying about my unicycle ;-)
13:31:30 <shapr> I have your number, assuming there's no EuroPython crisis, I'll give you a call to see if you have time and/or interest for hanging out with us.
13:32:09 <bringert> cool
13:33:07 <bringert> I most likely won't be in gothenburg until sunday night or monday morning though
13:33:16 <shapr> ok
13:35:23 <bringert> what are the lunch arrangements at EuroPython?
13:35:37 <shapr> lemme ask ...
13:35:56 <bringert> I'll be at chalmers then anyway, so I could swing by
13:35:58 <shapr> seems likely the student restaurant
13:36:15 <bringert> ah, yeah, it's pretty big
13:38:37 * shapr runs away from the keyboard
13:41:05 * bringert too
15:29:00 <Spark> where can i read about the lower bounds, of, say integer multiplication?
15:31:53 <ski> lower bounds ?
15:35:17 <Spark> yeah
15:35:26 <Spark> e.g. the least number of multiplications required
15:41:07 <ski> hmm
15:41:31 <ski> least number of *digit* multiplications ?
16:00:47 <Riastradh> Will there be a #haskell ICFP contest team this weekend?
16:01:14 <shapr> I know that d3z and droundy are part of a team
16:01:23 <shapr> hi paganini_
16:01:34 <shapr> looking for Haskell info?
16:02:01 <paganini_> hi
16:02:33 <paganini_> just walking arround to see what others doing
16:03:14 <shapr> paganini_: are you a programmer?
16:03:40 * stepcut is part of the 'move across town' team this weekend
16:03:55 <shapr> stepcut: yay, which town are you in?
16:04:11 <shapr> moving across my town requires a wheelbarrow and ten minuts footwalk
16:04:16 <paganini_> I would say so, yes
16:04:24 <shapr> I moved across Seattle once, but that was more work.
16:05:03 <shapr> paganini_: are you familiar with functional programming?
16:05:16 <paganini_> scheme and sml
16:05:30 <shapr> ah, you might like Haskell then
16:06:05 <shapr> have you written any Haskell code?
16:06:14 <paganini_> not really
16:06:20 <paganini_> just read a few examples
16:06:32 <shapr> the major difference for me was the complete lack of mutable variables
16:06:42 <shapr> I jumped from Python to Haskell.
16:06:57 <paganini_> heard a lot of good comments about haskell
16:07:04 <shapr> Now I'm hooked. The more I use Haskell, the more I like it.
16:07:20 <paganini_> I also heard that the io was a pain
16:07:49 <shapr> it can be
16:07:59 <shapr> but if you get your head around monads, it's no big deal.
16:08:00 <paganini_> are you familiar with the rete match algorithm?
16:08:44 <shapr> no
16:08:54 * shapr asks google
16:09:18 <shapr> I see
16:09:39 <paganini_> what do you do with haskell? I mean what kind a programs are you working on?
16:10:28 <shapr> earlier today I hacked on some blog code that bringert wrote.
16:10:49 <Heffalump> RSS!
16:10:53 <Heffalump> we want RSS! :-)
16:11:02 <shapr> http://shapr.homelinux.net/cgi-bin/blob/BlobHtml
16:11:04 <shapr> it's got RSS!
16:11:18 <Heffalump> oh, right
16:11:23 <Heffalump> is there an LJ feed yet? :-)
16:11:30 <shapr> er, no?
16:12:10 <Spark> ski: yeah
16:12:12 <shapr> paganini_: recent code I've written is some new plugins for lambdabot that use haddock and ghci to give useful info, and a web-based mailing list search for the haskell mailing lists
16:12:13 <Spark> i think :)
16:12:14 <Heffalump> I'll make one :-)
16:12:41 <paganini_> hmmm
16:12:41 <Heffalump> hmm. Maybe not for that blog :-)
16:12:46 <Heffalump> didn't you have a "real" one?
16:12:50 <paganini_> intersting
16:13:03 <shapr> sure, http://shapr.homelinux.net/~shae/blog/ but it doesn't do RSS yet.
16:13:19 <shapr> I'll port the content from PLog to BLob as soon as BLob does markup.
16:14:12 <shapr> paganini_: sadly, I don't spend as much time writing Haskell as I wish, my day job is writing Python for Zope/Plone sites.
16:14:20 <shapr> paganini_: what about you? what code do you write?
16:14:30 <paganini_> are you guys preparing for the contest this weekend?
16:14:51 <shapr> not me, I'm preparing for EuroHaskell
16:15:00 <paganini_> I am working on a rules engine, based on the rete match algorithm
16:16:00 <shapr> sounds like fun
16:16:16 <shapr> paganini_: so, are you in northern europe? want to come to EuroHaskell next week?
16:16:16 * stepcut is playing with metapost
16:16:27 <shapr> stepcut: *functional* metapost?
16:16:43 <stepcut> shapr: not yet, I am starting with boring old metapost first
16:16:50 <paganini_> I am temporally in the US
16:17:03 <paganini_> it will not be possible for me to join you guys there
16:17:16 <Riastradh> Temporally?
16:17:21 <shapr> I think that's very punny.
16:17:35 <shapr> I think I'm temporally in the US also, even though I live in Sweden.
16:17:51 <shapr> hiya Iter 
16:18:24 <shapr> paganini_: are you originally from Europe?
16:18:51 <paganini_> no, no from Europe
16:19:19 <jameson> Hrm... wasn't there some quick & easy way to make a type an instance of Eq?
16:19:30 <shapr> deriving Eq
16:20:40 <jameson> Yes... but let's assume that the type in question is made up of 40 zero-ary constructors, and I don't really want to write 40 lines of pointless code... wasn't there some Generic Haskell hack to automatically generate a default 'Eq' derivation?
16:21:03 <jameson> I vaguely remember reading some discussion about that... I guess I should just look up Generic Haskell ;-)
16:22:15 <Riastradh> jameson, um, just add 'deriving Eq' at the end of the data declaration...what's wrong with doing that?
16:22:19 <shapr> right
16:22:22 <jameson> That's all?
16:22:24 <shapr> not to each constructor
16:22:25 <Riastradh> That's all.
16:22:33 <jameson> Oh, OK. THanks!
16:23:50 <jameson> It actually works... weird, let's see how this is implemented.
16:24:04 <shapr> g'bye!
16:27:16 <jameson> Hmm... seems to be magic, by default.
16:29:41 <jameson> Or, at least, I can't find any Template Haskell or anything that defines it in Prelude.hs or GHC/*.hs :-(
16:30:40 <arjanb> jameson: http://www.haskell.org/onlinereport/derived.html
16:40:29 <shapr> g'day Pseudonym 
16:42:52 <jameson> arjanb: Ah, thanks!
16:43:23 <shapr> Pseudonym: did you see you got referenced in Oleg's paper?
16:43:58 <Riastradh> Which one?
16:45:22 <Pseudonym> G'day.
16:45:25 <Pseudonym> Oooh?
16:45:28 <Pseudonym> Which one?
16:45:28 <shapr> http://www.eecs.harvard.edu/~ccshan/prepose/
16:45:40 <Pseudonym> That's the second Haskell paper I get a mention in.
16:46:11 <Riastradh> Yeah, he cites you and says your approach doesn't necessarily work.
16:46:55 <Pseudonym> That's cool.
16:47:22 <stepcut> haha
16:47:45 <Riastradh> Although I suppose if your approach had worked he wouldn't have needed to write the paper in the first place.
16:47:52 <Riastradh> (well...that section, anyways)
16:47:56 <Pseudonym> Without reading the paper, I think it's the polymorphism problem that I already knew about.
16:48:07 * Riastradh is too lazy to see what the entirety of the paper is about.
16:48:19 <Riastradh> No, it's about infectuous monads.
16:48:59 <Pseudonym> Ah, I see.
16:49:08 <shapr> well, I've gotten a single mention, I'm happy :-)
16:49:20 <Riastradh> I don't think I've been mentioned in any papers.
16:49:21 <shapr> paganini_: would you like to try Haskell?
16:49:26 * Riastradh feels small.
16:51:37 <shapr> Riastradh: you could write your own papers.
16:52:04 <Pseudonym> paganini_: If you try Haskell, you could get cited in a paper.
16:52:10 <Pseudonym> Woohoo and stuff.
16:52:16 <Spark> heh
16:52:21 <Spark> i got cited in someones phd thesis
16:52:22 <paganini_> lol
16:52:24 <Riastradh> Pseudonym, that didn't happen with me!
16:52:40 <Pseudonym> That's because you're not a TRUE Haskelleteer.
16:52:40 <shapr> my single mention wasn't a cite like Pseudonym, just a thanks for input
16:52:52 <shapr> haha Haskeleet
16:52:54 <Riastradh> Oh, I've been thanked for plenty of input.
16:53:03 <Pseudonym> Oh, well.
16:53:10 <Pseudonym> What are you complaining about, then?
16:53:51 <Riastradh> Being thanked for input is like being told that my input wasn't relevant enough to bother wasting space on the paper discussing it.
16:54:04 <Riastradh> That didn't come out as eloquently as I had hoped.
16:54:42 <Pseudonym> No, it means that the author wanted to steal your input and pass it off as their own work.\
16:55:47 <Riastradh> That could be, too, but then the author must consider me too insignificant to lose his own fame & recognition admitting that it wasn't his idea.
16:56:39 <Spark> life is so overrated
16:56:46 <shapr> Spark: better than the alternative.
16:56:56 <Spark> always the optimist :)
16:57:10 <shapr> what was it you once said to me?
16:57:25 <Spark> umm something like do you ever say anything mean to anyone
16:57:30 <Riastradh> An optimist believes that this is the best of all possible worlds...a pessimist is certain that it is.
16:57:31 <shapr> right
16:57:58 <Spark> Riastradh: who originally said that?
16:58:05 <Riastradh> I don't know.
16:58:14 <Riastradh> He's too insignificant for me to admit he said it first.
16:58:22 <stepcut> ugh, gs crashes when I try to view metapost generated .eps files that contain labels :(
16:59:17 <kosmikus> maybe the fonts for the labels are not contained in the .eps?
17:00:57 * stepcut is investigating
17:01:43 <kosmikus> try to include the .eps in a .tex, and (la)tex that file, and view the resulting .ps
17:02:39 <stepcut> kosmikus: yeah, its a missing font problem, supposedly I can use mps2eps to add the fonts in 
17:06:00 <stepcut> ah, I (temporarily) add prologues := 2 and now it works
17:07:50 <kosmikus> what's the difference between 1 and 2?
17:08:57 <Riastradh> 1
17:10:15 <kosmikus> thanks
17:10:53 <stepcut> kosmikus: 2 outputs a different PS header that makes ghostscript happy, but makes latex un-happy :p
20:06:35 <paganini_> any one has heard of developing software on a rules based foward-chainning programming language?
22:03:45 * Cale is away: sleep
