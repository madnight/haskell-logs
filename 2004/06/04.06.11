00:20:15 <stepcut> 1 day, 23 hours, 39 minutes, 45 seconds and counting...
00:29:07 <bringert> haha
00:29:13 <bringert> 'London Mayor Ken Livingstone made simliar remarks in May, saying SUVs were "bad for London -- completely unnecessary" and SUV owners were "complete idiots."'
00:29:28 <bringert> amen
00:29:41 <andersca> I have an SUV :(
00:29:46 <andersca> just kidding
00:32:58 * Lukhas totally agrees with Mr. Livingstone on that point
00:37:40 <vegai> SUV? some kind of large middle-class vehicle?
00:38:37 <Lukhas> Sports Utility Vehicle : big 4x4 cars
00:39:18 <Lukhas> but 4x4 that aren't meant to be taken outside road
00:40:13 <vegai> those are quite popular in the US, right?
00:41:03 <bringert> and they are starting to show up in Europe too
00:41:37 <Lukhas> yeah, unfortunately, i see more of them each day, in France
00:41:46 <Lukhas> BMW X5 and friends
00:42:11 <Lukhas> that's huge, that's expensive, that's a good way to prove yourself that you're superior to other drivers, so let's buy one
00:51:03 <vegai> yes, we'll much rather prove that by being adept at a relatively obscure programming language ;P
00:53:45 <Lukhas> :)
05:48:47 * Marvin-- casts "summon SyntaxNinja"
05:49:04 * ac_laptop casts "Curse"
05:49:10 <Marvin--> hey!
05:50:00 <earthy> all hail eris
06:20:19 <Igloo> 30 mins? I think you need to sharpen up your casting skills, Marvin  :-)
06:21:54 <kosmikus> Marvin--: I still plan to release lhs2TeX-1.10 final ;)
06:22:16 <Marvin--> kosmikus: oh really? ;)
06:22:16 <kosmikus> Marvin--: but I thought we had agreed that I place 1.10pre on the web in such a way that you could make it a deb anyway
06:22:18 <Marvin--> Igloo: yeah :-/
06:22:53 <Marvin--> kosmikus: I know, but I haven't gotten around to it yet *blush* and yesterday I thought I'd see if you'd released the final version yet, and of course you hadn't :)
06:24:20 <kosmikus> Marvin--: I don't want to raise false hopes, but since my thesis is most likely to be sent off to the reading commission today, I might have enough time next week to finally get 1.10 out of the door
06:24:49 <Marvin--> SyntaxNinja: so... Distribution.Simple exports a defaultMain :: PackageDescription -> IO () function, what am I supposed to bind it to in my Setup.lhs? main? setup?
06:24:53 <kosmikus> otoh, 1.10pre is enough improvement over 1.9 that it would make a good addition to debian
06:25:19 <Marvin--> kosmikus: yeah
06:25:47 <Marvin--> kosmikus: cool (re: the thesis)
06:25:56 <Marvin--> SyntaxNinja: *poke*
06:26:21 <Marvin--> we need to get started on remote controlled electric cattle prods
06:27:37 <Marvin--> kosmikus: I picked up my printed master thesis from the printing room yesterday :)
06:34:00 <Marvin--> when did this turn into a monologue? :/
06:34:54 <Igloo> Around 14:26 UK time
06:35:07 <sorrow> right after the remote prods.
06:35:36 * Marvin-- grumbles
06:36:18 <Marvin--> so, evidently the summoning wasn't enough
06:36:30 <Marvin--> we need darker magic than that to get a hold of SyntaxNinja
06:36:44 <SyntaxNinja> hi Marvin--
06:36:54 <ac_laptop> ah, there he is
06:36:57 <SyntaxNinja> keep your cattle prods away from me
06:37:32 <SyntaxNinja> bind it to main.
06:37:35 <Lunar^> How cool.. we're just getting a lesson about arrows by John Hughes :)
06:38:58 <SyntaxNinja> Marvin--: isn't there an example in "test" or "tests" :)
06:40:36 <Marvin--> SyntaxNinja: ahh, right.. I was looking at the *proposal*, silly me :)
06:46:05 <SyntaxNinja> Marvin--: I think the proposal just imports main and exports it, which never occured to me to try, but SPJ wrote it so I assume it works :)
06:46:16 <SyntaxNinja> but defaultMain isn't named main so it won't work.
06:46:52 <SyntaxNinja> Marvin--: don't give me shit ;) I can't update the proposal constantly and still have time to hack.
06:47:06 <Marvin--> ;)
06:49:15 <SyntaxNinja> I can barely write email and still have time to hack.
06:50:19 <Marvin--> *snicker* John's code is buggy
06:51:25 <Marvin--> so maybe we should call this talk Learning Arrows By Fixing John's Buggy Code :-)
06:51:41 <SyntaxNinja> is this a EuroHaskell talk?
06:52:51 <Marvin--> it's not really a talk, he dropped by to see what we're up to and shapr asked him to ad lib some stuff on arrows
06:53:14 <SyntaxNinja> ahh
06:58:42 <earthy> hihi
07:13:00 <SyntaxNinja> is there anything in the concurrent library that lets me wait (for an mvar or a channel or anything) for a maximum amount of time?
07:13:53 <Marvin--> I don't think so
07:16:27 <SyntaxNinja> this is a bit of a pain.
07:21:56 <SyntaxNinja> rather a conspicuous lack...
07:23:18 <Marvin--> ArrowLoop is scary
07:26:26 <ac_laptop> yeah :)
07:27:55 <Lunar^> SyntaxNinja: write a wrapper function
07:27:59 <Lunar^> SyntaxNinja: It's really easy
07:28:32 <Lunar^> SyntaxNinja: But I can't find mine if you want to
07:29:45 <SyntaxNinja> Lunar^: something that loops, checking the time and seeing if anything has been written yet?
07:29:59 <Lunar^> SyntaxNinja: mine is threadDelay base actually
07:31:30 <Lunar^> SyntaxNinja: timeout time computation = do threadId <- myThreadId ; forkIO $ do { threadDelay time ; killThread threadId } ; computation
07:31:45 <Lunar^> That's the idea
07:32:40 <SyntaxNinja> Lunar^: doesn't that just block for the maximum amount of time?
07:33:14 <Lunar^> Mhh I'm wrong
07:33:33 <Lunar^> You need to actually have an MVar and kill the timeout thread after computation has finished
07:33:37 <Lunar^> MVar ThreadId
07:33:56 <Lunar^> I can't get a hand on mine sorry
07:34:16 <SyntaxNinja> i'll think about that approach, thanks.
07:34:32 <Lunar^> Anyway, if you make that think of type
07:34:50 <Lunar^> handleTimeOut :: Int -> IO a -> IO (Maybe a)
07:34:56 <Lunar^> It's actually fully generic
07:40:30 * cgibbard discovers a useful little higher order function:
07:41:09 <cgibbard> swing :: (((a -> b) -> b) -> c -> d) -> c -> a -> d
07:41:32 <cgibbard> swing f = flip (f . flip ($))
07:42:07 <cgibbard> swing map :: forall a b. [a -> b] -> a -> [b]
07:42:20 <Marvin--> yikes
07:42:22 <cgibbard> swing any :: forall a. [a -> Bool] -> a -> Bool
07:42:32 <Lunar^> how cool
07:42:43 <ac_laptop> wow
07:42:50 <SyntaxNinja> Oo
07:43:16 <earthy> ummmm...
07:43:19 <earthy> I don't quite grasp it. ;)
07:45:29 <cgibbard> that ought to be in the prelude :)
07:45:42 <Lunar^> cgibbard: Add it on the Wiki then
07:47:36 <SyntaxNinja> isn't there anything like "waitThread :: ThreadID -> IO ()" that waits for the given thread to terminate?
07:50:31 <Lor> I think you're supposed to use an MVar manually.
07:50:40 <earthy> sounds like it, yes
07:51:05 <earthy> which is rather annoying, since the concept of `joining' a thread, i.e. waiting for it to finish, is quite useful indeed
07:51:27 <Lor> Why? What do you care about whether it ends or not, unless it is to get some data from it?
07:51:34 <Lor> And you can only get data from it via MVars and the like.
07:51:58 <earthy> ah... but simply knowing that a thread has finished computing is a bit of data in and of itself!
07:53:38 <cgibbard> swing foldr :: forall a b. b -> a -> [a -> b -> b] -> b
07:55:01 <SyntaxNinja> lor: hmm
07:55:44 <earthy> but that wasn't what syntaxninja was originally asking for anyway
07:56:46 <earthy> and the only way I see of implementing what he does want is spinwaiting using tryTakeMVar
07:57:02 <earthy> while in the meantime counting the time
08:03:14 <Lunar^> joining thread is easy to implement
08:03:22 * earthy nods
08:03:28 <Lunar^> What is not
08:03:32 <earthy> that's a blocking takeMVar
08:03:38 <Lunar^> Is a select(2) equivalent
08:03:46 * earthy nods
08:03:55 <Lunar^> And I definitely need that
08:04:15 <earthy> there's one way I see of doing it, and that is busy waiting
08:04:26 <earthy> which is stupid
08:04:27 <Lunar^> That's not select
08:05:23 <earthy> no, but it is an emulation
08:06:10 <earthy> hm. there is another way, ofcourse...
08:06:38 <earthy> but it's ugly as well ;)
08:06:59 <earthy> anyway, time to go get a train home
08:53:01 <Zhivago-> hello, I'm looking for the Yale Haskell compiler.
08:53:11 <Zhivago-> does anyone know where it might be found these days?
08:53:16 <Heffalump> didn't it become nhc?
08:53:24 <Heffalump> I could be misunderstanding the history.
08:54:39 <Zhivago-> I have no idea
08:54:58 <Zhivago-> but if hnc is a haskell->lisp compiler, then that would be fine
08:55:10 <Heffalump> I don't think it is
08:55:51 <Zhivago-> that's what the yale compiler is
08:56:09 <Heffalump> hmm.
08:56:17 <Heffalump> I've heard of it, but I'm not sure what happened to it.
08:56:28 <Zhivago-> well, there are plenty of ancient, dead links :)
10:19:52 <Marvin--> hrm, how do I get ghc to pass -rpath flags to ld rather than getting upset about them?
10:20:26 <Igloo> Put -optl on the front of them
10:20:58 <Marvin--> and do I have to do that with -L flags too?
10:20:58 <Igloo> But isn't using -rpath a Bad Thing?
10:21:11 <Igloo> It might understand those; if not then yes
10:21:15 <Marvin--> yes, -rpath is a Bad Thing, but it's kinda how this stupid computer system is set up
10:21:48 <Marvin--> every library is in its own directory
10:22:44 <Marvin--> so you interact with a library via some helper scripts
10:23:01 <Marvin--> lib__foo -I  gives you the compilation flags and lib__foo -L gives you the linking flags
10:23:33 <Marvin--> so... dear god, how do I do this
10:23:53 <Igloo> If you're in a Makefile it's quite easy (ignoring options with spaces in and suchlike)
10:24:15 <Igloo> You just want something like $(addprefix -optl,$(shell lib__foo -L))
10:24:22 <Marvin--> $ lib__curl -L
10:24:23 <Marvin-->  -L/usr/ed-pkg/pkg/curl-7.9.8/lib -rpath /usr/ed-pkg/pkg/curl-7.9.8/lib
10:25:17 <Igloo> Oh, unless GHC needs to be able to see some of the flags, in which case it might get a bit more fun. You must have been a very naughty boy in a past life
10:26:30 <Marvin--> I want to stick that in $LDFLAGS
10:26:58 <ludde> hi shapr :)
10:27:04 <shapr> y0 y0 ludde
10:27:05 <ludde> finally on IRC eh
10:27:13 <Marvin--> so I wonder if I should use sed to stick those optl in there...
10:27:17 <shapr> yah, took me awhile to get my keyboard mapped to dvorak
10:27:27 <Marvin--> on the other hand, I don't know if the $LDFLAGS is used by both gcc and ghc in the darcs makefile
10:27:28 <ludde> oh you had no usable keyboard during those 2 days?
10:27:30 * Marvin-- sobs
10:27:40 <shapr> no, I had to write on my hand
10:27:44 <shapr> too many ink marks
10:28:17 <ludde> it's kinda annoying to use a custom keymapping cause you're lost if you don't use your own computer :)
10:28:20 <Marvin--> I wonder why this worked when I compiled darcs on Solaris
10:28:36 <ludde> that's why i always use remote desktop heh
10:28:37 <Marvin--> oh wait, lib__curl -L says just -L and -R on Solaris
10:28:39 <Marvin--> not -L and -rpath
10:28:43 <Marvin--> gnngh
10:30:20 <Marvin--> maybe I should just ignore rpath and use a wrapper script instead
10:39:35 <Marvin--> oh for crying out loud
12:40:54 <Guest823> hello
12:41:12 <Guest823> :)
12:41:50 <SyntaxNinja> hi Guest823
13:10:30 <wagle> is there a standard function "foo f n" that applies "t" n times to an argument?
13:10:46 <wagle> is there a standard function "foo f n" that applies "f" n times to an argument?
13:11:07 <stepcut> hehe
13:11:33 <stepcut> wagle: i think so, hold on
13:12:18 <wagle> iterate
13:12:29 <stepcut> yeah
13:12:47 <wagle> kinda
13:12:53 <stepcut> yeah...
13:13:03 <stepcut> hrm
13:13:42 <wagle> (iterate foo) !! 4
13:13:47 <stepcut> yeah
13:13:48 <wagle> ...
13:14:08 <wagle> .. might be better than what i had in mind, anyway
13:14:38 <stepcut> (iterate foo) !! 4 is the best I can come up with
13:15:57 * stepcut goes to lunch
13:16:07 <wagle> cya.. thankx
13:18:25 <Riastradh> [[iterate foo !! 4]] would work fine.  What's wrong with it?
13:19:41 * stepcut has no complaints
13:25:45 <wagle> well, ((iterate foo b) !! n) anyway
13:26:03 <Riastradh> @type iterate
13:26:08 <Riastradh> lambdabot?
13:26:13 <Riastradh> lambdabot!
13:26:23 <wagle> :l file containing that
13:26:34 <Riastradh> @type iterate
13:26:34 <SyntaxNinja> hi lambdabot
13:26:37 <lambdabot> iterate :: forall a. (a -> a) -> a -> [a]
13:27:56 * Riastradh tries to think of how to write [[\f s n -> iterate f s !! n]] in pointless style.
13:28:22 <wagle> wouldn't that be... pointless?
13:28:24 * wagle runs
13:28:25 <Riastradh> Exactly.
13:28:53 <Riastradh> (See, most people call it 'point-free'...I explicitly said 'pointless' instead.)
13:29:08 <wagle> [[.]] is list of lists or denotational semantic bracket?
13:29:16 <Riastradh> Denotational semantic bracket.
13:29:31 <Riastradh> There ought to be special brackets for that, not forcing people to overuse square brackets.
13:30:33 <Riastradh> @type \f s n -> iterate f s !! n
13:30:34 <lambdabot> \\f s n -> iterate f s !! n :: forall a. (a -> a) -> a -> Int -> a
13:31:07 <Riastradh> @type \f s -> (iterate f s !!)
13:31:08 <lambdabot> \\f s -> (iterate f s !!) :: forall a. (a -> a) -> a -> Int -> a
13:31:47 <Riastradh> Hmmm, how do you compose a two-argument function?
13:31:53 <Riastradh> (using lambda is cheating)
13:32:31 <Riastradh> @type (.).(.)
13:32:32 <lambdabot> (.).(.) :: forall a b c a1.
13:32:32 <lambdabot> 	   (b -> c) -> (a -> a1 -> b) -> a -> a1 -> c
13:32:37 <SamB> @type curry
13:32:37 <SamB> @type uncurry
13:32:38 <lambdabot> curry :: forall c b a. ((a, b) -> c) -> a -> b -> c
13:32:39 <lambdabot> uncurry :: forall c b a. (a -> b -> c) -> (a, b) -> c
13:32:41 <wagle> \b -> (iterate foo b) !! n ==> \b -> (!!) ((iterate foo) b) n ==> \b -> (flip !!) n ((iterate foo) b) ==> (flip !!) n (iterate foo) ??
13:32:49 <wagle> i think i bothced something
13:33:07 <wagle> (and didnt get flip right)
13:33:08 <Riastradh> @type (((.).(.)) iterate (!!))
13:33:09 <lambdabot> (((.).(.)) iterate (!!)) :: forall a. [a -> a] -> Int -> a -> [a]
13:33:18 <Riastradh> Damn.
13:33:20 <Riastradh> Almost.
13:33:37 <Riastradh> @type ((.).(.)) (!!) iterate
13:33:38 <lambdabot> ((.).(.)) (!!) iterate :: forall a. (a -> a) -> a -> Int -> a
13:33:42 <Riastradh> There.
13:33:53 <Smerdyakov> Riastradh, where else have you seen [[]] used with Haskell code in the way you use it?
13:34:02 <wagle> you want (!! n) as a functor or something
13:34:16 <Riastradh> Smerdyakov, nowhere I can remember in particular.
13:34:24 <Riastradh> Why do you ask?
13:34:32 <Smerdyakov> Riastradh, I think there is a good reason for that, because it is horrible notation!
13:34:55 <Riastradh> Smerdyakov, it's better than trying to embed Haskell code in conversational text, where one has a difficult time figuring out what's English text and what's Haskell code.
13:35:08 <Smerdyakov> Parentheses work quite well for that purpose.
13:35:20 <Smerdyakov> And there's the bonus that they don't change the meaning of a term.
13:35:57 <wagle> .. my code has matrices as lists of lists,, so it was a bit confusing
13:36:00 <Riastradh> I really don't care what you think in this matter, you know.  If you don't like it, fine, but I prefer it.
13:36:19 <Smerdyakov> No one else prefers it. All you do is confuse everyone who reads it, every single time you use it.
13:36:32 * wagle shrugs
13:37:11 <Riastradh> Asking for some slight, quick clarification implies confusion?
13:37:35 <Smerdyakov> It's confusing because x is always different from [[x]] in Haskell, ML, anything but Lisp!
13:37:40 <Riastradh> If it does, then it's _extremely_ mild confusion and it clears up after that quick question is answered.
13:39:28 <Riastradh> wagle, do you particularly care if I use [[]]?
13:40:04 <wagle> i liked the (.) suggestion, but it doesnt matter to me
13:40:55 <Riastradh> QED.
13:41:21 <Riastradh> So please quit complaining, Smerdyakov, until I'm conversing directly with you involving code.
13:42:51 <wagle> so what about [[[[x,y,z],[q,v,s]]]]?
13:44:07 <Riastradh> If I'm writing lists, I don't use the double-brackets to denote code, and it's typically pretty clear what I mean when I'm talking about lists anyways.  Of course one can always come up with obscure cases that don't quite work, and I could come up with obscure cases that don't quite work if I used parentheses instead of double-square-brackets.
13:49:26 <wagle> the object is to communicate..  i dont think [[.]] is helping..  its just that its not hurting a lot..  it did almost waste some of my time wondering wtf you were trying to produce matrices of functions
13:58:25 <Riastradh> wagle, yes, but only a few moments of your time, before your question cleared the slight confusion up.
14:00:26 <SyntaxNinja> Riastradh: I think you should use backward brackets.  ]] like this [[ .  it's really disturbing.
14:00:50 <Riastradh> Oh, I have an even better idea.  I'll use the letter 'q.'
14:01:00 <Riastradh> q\f s n -> iterate f s !! nq
14:01:19 <Riastradh> q((.).(.)) (!!) iterateq
14:01:29 <wagle> add rot13
14:01:37 <SyntaxNinja> yeah!
14:01:46 <Riastradh> Only for odd characters!
14:02:09 * SyntaxNinja paints Riastradh's bike-shed the color of backward brackets, q's and rot-13.
14:05:38 <Riastradh> q\s f a -> igeeage s f !! nq
14:05:49 <SyntaxNinja> btw, here's a solution to the problem we were talking about before (forking a process and giving it a timer)
14:05:49 <SyntaxNinja> HaskellIrcPastePage
14:05:53 <SyntaxNinja> @wiki HaskellIrcPastePage
14:05:53 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
14:06:10 <SyntaxNinja> that's by Abe Egnor, with some tweaking by me.
14:29:39 <jadrian> I probably need to re-read some stuff...
14:30:00 <jadrian> I know about avoiding concatenation 
14:30:33 <jadrian> using an accumulator etc
14:31:13 <jadrian> but should lazy eval make (++) acceptable?
14:31:49 <Riastradh> No.
14:31:51 <jadrian> I mean, so I have    [a1...an] ++ [b1..bm]
14:31:54 <Smerdyakov> Depends on the context.
14:32:04 <Riastradh> Down with (++)!
14:32:12 <jadrian> and I'm going to consume that
14:32:24 <jadrian> I'll only need the bs when I consume the an
14:32:36 <Riastradh> jadrian, like Smerdyakov said, it depends on the context.  Can you give us some more context?
14:32:38 <jadrian> so shouldn't the concatenation just take 'one step' then?
14:32:49 <Smerdyakov> If you only use (++) once and consume the whole list, you won't be hurting the asymptotic running time.
14:33:22 <jadrian> Riastradh: we'll I was trying to come up with contexts where it would/wouldn't make a difference
14:33:49 <jadrian> Smerdyakov: right...
14:45:54 <jadrian> ok, so what about a trivial "flatten" function for binary trees? 
14:46:04 <jadrian> print . flatten $ btree
14:48:00 <Riastradh> flatten' should take two arguments, a tree and a list of leaves so far collected.  flatten should call flatten' with the root tree and the empty list.
14:48:24 <jadrian> I know how to do it Riastradh
14:49:04 <jadrian> just wondering about the complexity of 
14:49:07 <jadrian> print . flatten $ btree
14:49:13 <jadrian> where flatten is the naive version
14:49:37 <jadrian> and I mean taking it account the effects of lazy evaluation
14:49:52 <jadrian> I understand the problem of (++) in a strict language
14:50:00 <jadrian> but not here
14:50:31 <jadrian> consuming this tree:
14:50:33 <jadrian>        1
14:50:33 <jadrian>   2         3
14:50:33 <jadrian> 4   5     6   7
14:50:44 <jadrian> 1: esq ++ dir
14:51:12 <jadrian> (I take off the 1)
14:51:15 <jadrian> esq ++ dir
14:51:32 <jadrian> 2nd level
14:51:39 <jadrian> 2: esq ++ dir
14:51:46 <jadrian> esq ++ dir
14:51:53 <jadrian> 3rd level
14:51:58 <jadrian> 4: esq ++ dir
14:52:06 <jadrian> esq ++ dir
14:52:24 <jadrian> (take off the 4)
14:52:36 <jadrian> (esq is [])
14:52:45 <jadrian> now I'll do the 1st concatenation 
14:52:59 <jadrian> but I already consumed 1 2 4!
14:53:08 <jadrian> so it should only take one step...
14:54:33 <jadrian> am I missing something?
14:54:59 <jadrian> because most books just say, "concatenation takes n steps"
14:55:28 <jadrian> but you just concatenate  when consuming it...
14:55:42 <jadrian> I know I am probably missing something
14:55:48 <jadrian> just not sure what
14:56:10 <jadrian> guess I'll just get book and read it :)
14:56:23 <Riastradh> Trace (++) & flatten', and compare.
14:57:03 <jadrian> trace?
14:57:08 <jadrian> don't you mean profile?
14:57:43 <Riastradh> Either.
15:23:58 <wagle> i have two matrices : [[1,2,3], [4,5,6]] and [[a,b,c], [d,e,f]] and I want to zip them with cons to get [[1:a,2:b,3:c],[4:d,5:e,6:f]]
15:24:05 <wagle> is there a standard function for this?
15:24:28 <Heffalump> zipWith 
15:25:10 <wagle> zipWith operates on lists, not lists of lists.. (but..)
15:25:20 <Heffalump> zipWith (zipWith (+))
15:25:24 <Heffalump> zipWith (zipWith (:)) IM
15:25:30 <wagle> yeah..  
15:25:45 <wagle> was getting there
15:27:20 <wagle> works.  thanks
15:31:11 <wagle> (writing a conway's life as matrix of streams in pointless style..  one objective is to get more facile thinking pointlessly..)
15:32:04 <wagle> it works for 3 x 3, but i'm transforming it to N x N
15:32:55 <wagle> kinda fun to incrementally algebraically transform your program like this
15:33:13 <Riastradh> Now you have to write it with arrows in an utterly pointless style.
15:34:58 <wagle> composing arrows with coproducts
15:35:22 <wagle> (ie, getting there, i'm getting there)
15:38:29 <wagle> (well, actually, thats a separate project in this series)
15:40:29 <wagle> has anyone gotten anywhere with Luth and Ghani's monad compostion with coproducts yet?
15:41:35 <Heffalump> is it actually any use for Haskell?
15:41:46 <Heffalump> I read it several times (and talked to Luth I think) and concluded it wasn't
15:42:29 <wagle> how so?
15:42:47 <Heffalump> I can't remember. It was years ago.
15:43:09 <Heffalump> it was an ICFP 2002 paper, right?
15:43:31 <wagle> yeah
15:47:12 <wagle> any vague memories of what was wrong?
15:49:29 <wagle> i've been planning to give it a real go this weekend
15:51:09 <Riastradh> How does one use ArrowLoop?
15:51:41 <stepcut> I keep trying to use ArrowLoop, but I just end up going round in circles
15:52:54 <wagle> is there a canonical webpage on the state-of-art-and-knowledge on arrows?
15:53:15 <Riastradh> http://www.haskell.org/arrows/
15:53:28 <Riastradh> http://www.flightlab.com/~joe/hxml/arrows.html is also useful.
15:58:12 <wagle> thanks
15:59:08 * SamB wonders who thought not being able to use code in splices within the same module was okay
16:01:30 <stepcut> SamB, the person who tried to implement code splices within the same module and failed I would guess :)
16:04:05 <SamB> stepcut: yeah, I guess it might not be much fun to identify the needed or compilable functions and compile just those...
16:06:31 <wagle> i think i remember Simon thinking the solution too ugly..
16:06:41 <wagle> (in the email about a year or so ago)
16:07:13 <wagle> ... is there a standard name for the function (flip (:) [])?
16:07:25 <SamB> well, the current problem is uglier more often, if you know what I mean...
16:08:13 <stepcut> SamB: I agreed that its really annoying from a user standpoint though, espcially if you are just playing around using ghci, and all of a sudden you need two scratch files instead of one
16:08:23 <wagle> i had the impression that he was waiting to be inspired..
16:08:49 <SamB> wagle: how long does that usually take?
16:09:06 <wagle> i dunno..  i dont think he thought it a pressing problem
16:10:02 <wagle> i'm reading a lot into a weak memory of an email message i skimmed about a year ago
16:10:09 <Riastradh> wagle, (:[])
16:10:26 * wagle shoots self
16:11:40 <SamB> Riastradh, wagle: one of you has it backwards, but I can't tell which one
16:12:50 <wagle> well, technically, i dont need to commit seppuku.. i asked for a name, not a shorter (and much better) description
16:13:44 <SamB> isn't seppuku generraly committed with a sharp implement?
16:14:03 <Riastradh> @type (:[])
16:14:05 <lambdabot> (:[]) :: forall a. a -> [a]
16:14:10 <Riastradh> @type flip (:) []
16:14:11 <lambdabot> flip (:) [] :: forall a. a -> [a]
16:14:17 <Riastradh> One of us is backwards?
16:14:51 <SamB> err. no. I'm just confused.
16:15:04 <SamB> I should have added the qualifier "I think"...
16:15:14 <wagle> maybe an arrow will do..  then if i stay compose'd, someone will take my (head)
16:16:09 <SamB> @type return
16:16:11 <lambdabot> return :: forall m a. (Monad m) => a -> m a
16:16:18 <wagle> woo!
16:17:00 <wagle> i knew i recognized the a -> [a]    (which is a -> [] a)
16:19:09 <wagle> wow..  and it can even deduce the monad of the return
16:19:48 <Riastradh> SamB, what, a bullet doesn't qualify as a sharp implement?
16:19:58 <Riastradh> wagle, (:[]) is shorter than return.
16:20:22 <wagle> eta
16:20:38 <Riastradh> Yes, but no Haskeller uses eta.
16:22:33 <wagle> (:) operates on points
16:23:02 <wagle> and since this discussion is supposed to be pointless...
16:24:02 <wagle> (also, generalizing out of the list monad might be interesting)
16:24:42 <Riastradh> And monads are evil.  Up with arrows!
16:28:32 <SamB> Riastradh: how do you disembowel yourself with the edge and point of a bullet?
16:28:57 <Riastradh> SamB, remove a little bit of the tip and use a .44 magnum.
17:01:51 <jadrian> argh
17:01:52 <jadrian> ok
17:02:21 <jadrian> is there an elegant way to simply wait for a user to press return?
17:02:46 <Cale> getChar?
17:02:50 <jadrian> ah!
17:02:52 <jadrian> getChar!
17:03:03 <jadrian> I searched all the read* functions
17:03:19 <jadrian> thanks Cale!
17:03:21 <jadrian> :)
17:05:08 <Cale> no problem
17:05:28 * Cale plays around with monads a bit.
17:05:58 <Cale> I wonder why trees aren't usually mentioned as an example monad.
17:06:29 <Cale> I suppose they're pretty close to lists.
17:10:00 <Cale> or am I forgetting some monad law ? :)
17:10:09 <jadrian> Cale: what would >>= be?
17:10:17 <Cale> data Tree a = N a | B [Tree a] deriving Show
17:10:17 <Cale> instance Monad Tree where
17:10:17 <Cale>     return x = N x
17:10:17 <Cale>     (N x)  >>= f = f x
17:10:18 <Cale>     (B xs) >>= f = B (map (>>= f) xs)
17:10:49 * desrt gets home
17:11:26 <desrt> cale; for reference.  the touch-sensor on the monitor on the g5s will shut the machine down (hard) if held for 4 seconds
17:11:33 <Cale> :)
17:11:46 <Cale> nice
17:11:50 <desrt> ya.  i suck :P
17:12:36 <jadrian> Cale: so you only have elements on the leafs rigt?
17:12:40 <Cale> yeah
17:12:44 <jadrian> oh ok then :)
17:13:53 <wagle> scheme: error in car, nil is not a pair 
17:13:53 <wagle> haskell: Prelude: !!: index too large"
17:18:27 <jadrian> bed
19:26:03 <wagle> hey cool.  ghci on a powerbook is faster than fortran on a cdc6600
