00:37:10 <musasabi> morning
00:43:00 <dons> morning musasabi
01:17:40 <tuomov> drlion: nothing
01:45:10 * shapr yawns
01:56:24 <dons> moin people
02:04:59 <mattam> what was the name of the arrowic parser ? google's helpless
02:09:48 <mattam> found it in the logs :)
02:29:06 * shapr sings the "good morning" song
02:30:05 <shapr> mattam: oh, what is the name of the arrow-style parser?
02:30:14 <shapr> mattam: I couldn't find anything like Parsec, that uses Arrows.
02:31:30 <shapr> mattam: I asked around and heard swierstra's attribute grammars could be arrow-style, but no one seems interested in making them specifically arrow instances.
02:34:35 <shapr> dons: yay! I CAN EDIT!
02:37:34 * shapr hops around cheerfully
02:41:57 <shapr> man it's quiet today.
02:42:07 <shapr> I guess everyone is coding :-)
02:44:57 <Lemmih> Hello shapr
02:45:04 <Lemmih> And hello Boegel
02:45:15 <mattam> uu_parsing uses arrows
02:45:20 <Boegel> hey !
02:45:32 <shapr> mattam: are you sure? where's the soure for uu_parsing?
02:45:38 <shapr> hoi Boegel 
02:45:43 <shapr> greetz Lemmih 
02:46:00 <Boegel> hey shapr
02:46:11 <mattam> it's hidden in a CVS :)
02:46:23 <mattam> cvs -d:pserver:anonymous@cvs.cs.uu.nl:/data/cvs-rep co uust  
02:46:30 <mattam> login first
02:48:56 <shapr> where are the arrows in here?
02:52:44 <mattam> hmmm, can't find them
02:55:33 <mattam> in Machine.hs
03:05:03 <shapr> hoi swiert 
03:05:06 <mattam> you're right, it's not arrows but could be
03:05:14 <swiert> hi shapr
03:07:57 <shapr> would be nice if doaitse makes some real arrows out of them.
03:12:24 <swiert> shapr: what's that about?
03:15:19 <shapr> I was just wishing for a Parsec lib that uses arrows.
03:17:06 <shapr> As you probably already know, Arrows happened because doaitse swierstra and luc duponcheel found those anti-space-leak parsers that didn't fit into the monadic interface.
03:17:14 <swiert> shapr: but every Monad is an Arrow, hence Parsec should do the trick - or am I missing something?
03:17:29 <shapr> not every arrow is a monad.
03:18:17 <swiert> shapr: but if you have a monadic parsing library, you also have an arrow-based library.
03:19:00 <swiert> or are you specifically interested in the Swierstra-Duponcheel parsers?
03:19:12 <TheHunter> So the basic uu parsing operations are (<*>) :: p (a->b) -> p a -> p b, pSucceed :: a -> p a and (<|>) :: p a -> p a -> p a. How do you make that an arrow?
03:21:15 <swiert> I think that p is an arrow from input to parsed output
03:22:09 <shapr> I'm definitely not an expert, but that doesn't fit into what I've read about arrows.
03:22:34 <shapr> monads are less general than arrows because you can only execute them.
03:22:55 <shapr> arrows give you some level of introspection or reflection because they have static properties
03:23:01 <dons> yay. i can edit :)
03:23:07 * shapr cheers for dons 
03:23:11 <shapr> dons: I can edit too!
03:23:20 <TheHunter> swiert: that'd be a kleisli arrow, so i'd be the same as a monad.
03:23:22 <shapr> oh, I found a segfault in yi
03:23:29 <dons> really? how
03:23:43 <shapr> open a new file, type some stuff, hit esc, then hit d d
03:24:19 <TheHunter> The guy who wrote http://caml.inria.fr/archives/200008/msg00118.html seems pretty convinced that those ops form an arrow somehow, but i'm just not convinced.
03:24:41 <shapr> Daan wrote Parsec :-)
03:24:53 <dons> shapr: thanks. i know what that is.
03:25:02 <shapr> and Max Skaller wrote vyper... though vyper seems to have disappeared.
03:25:28 * shapr should start a CS gossip column
03:26:22 <swiert> shapr: but if monads are less general than arrows, and you already have a monad-based lib, than it should be easy to make it arrow based.
03:26:52 <shapr> I think you'd have to rewrite it to export all the static properties.
03:27:06 * shapr looks at Parsec sources
03:28:41 <swiert> TheHunter: the "p" in the uust lib is actually something complicated taking some input s to output - but doesn't fit the monad interface (according to John).
03:28:58 <swiert> so hence he came up with arrows.
03:29:16 * shapr looks for the p
03:29:31 <swiert> shapr: in TheHunter's question on Kleisli arrows.
03:32:53 <swiert> shapr: I'm not saying that you get an arrow based library for free with Parsec - just that I think it should be possible to wrap an arrowed layer around it.
03:33:29 <shapr> I don't know. maybe the AnaParser in UU.Parsing.Machine is an arrow, I can't tell after a few minutes of tracing through the code.
03:34:31 <TheHunter> swiert: still, if you have something which is not quite a monad, and you form the kleisli arrow out of it, i don't think you get a proper arrow.
03:35:36 <TheHunter> btw equating succeed and arr seems to imply that Daan Leijen wants to make the arrow ParseArrow a b = p (a -> b).
03:36:41 <swiert> OK - there are lots of ways to write parser combinators in Haskell, but basically it all evolves around some function from tokens to output.
03:36:58 <shapr> sure, I agree with that :-)
03:37:14 <swiert> Parsec uses monads to capture the recurring pattern (and getting lots of nice monadic syntactic sugar  for free).
03:37:50 <swiert> now - as every monad is an arrow, you also have an arrow based library, but you'll need to shift some of the Parsec ideas to the arrow based world.
03:38:48 <shapr> But, not every arrow is a monad. Parsec doesn't have static properties, and rewriting it to have them means you effectively have an arrow-style parser library.
03:39:01 <shapr> Which would be nice, I'd like that :-)
03:39:34 <swiert> Swierstra-Duponcheel use more advanced analysis that no longer fits in the monadic framework, but can be formulated as an Arrow (I think AnaParser would be an instance of the Arrow class).
03:40:42 <swiert> shapr: but what is the problem with porting something monadic to the arrow based world. You're only travelling in one direction (monads to arrows) which is perfectly safe - right?
03:41:47 <shapr> It's safe, but if you stick with the monadic interface to make a Kleisli arrow, you don't get the benefits of less space-leaks and earlier choice that the arrow interface gives.
03:42:36 <Lor> UUParser z s a b = P (UU.Parser s (z a b))
03:42:52 <Lor> Where z is presumably an arrow, possibly ->. That's what I use.
03:43:34 <shapr> Lor: what's that from?
03:43:51 <Lor> Just some utility library of mine.
03:44:05 <Lor> Oops, add "newtype" to the front.
03:44:32 <shapr> where'd you get UU.Parser?
03:44:49 <Lor> import qualified UU_Parsing as UU
03:45:14 <Lor> That was for an older version of Swierstra & Duponcheel's parsing library.
03:45:28 <shapr> aha
03:47:58 <shapr> Do you know what version of UU_Parsing?
03:49:48 <Lor> I don't remember, but one where there was a type Parser :: * -> * -> *
03:49:59 <Lor> s is the symbol type.
03:50:01 <swiert> shapr: but then that depends on you implementation of the parsing combinators - not on if your using arrows or not.
03:50:33 <Lor> I also imported into the arrow world many of the combinators that UU_Parsing defines.
03:50:43 <dons> that's better. segfaults are bad :}
03:50:55 <shapr> Lor: I'd like to see that, if you don't mind sharing the sources.
03:51:30 <shapr> swiert: I think it does depend on using arrows, I don't think you can export static information with the monadic interface.
03:52:07 <Lor> http://www.cs.helsinki.fi/u/lealanko/stuff/LA_Arrow.hs
03:52:25 <swiert> shapr: but using arrows doesn't give you efficiency for free - it's just easy to write inefficient arrow code or efficient code without using the arrow interface.
03:52:30 <shapr> Lor: thanks :-)
03:52:43 <shapr> swiert: oh, I totally agree with that.
03:53:16 <shapr> swiert: I think that writing inefficient code is a given
03:53:55 <shapr> but I think that the arrow interface allows for more efficiency than the monadic interface can, because you can export static information.
03:54:23 <dons> shapr: how's about I make the modelines and cmd line buffers too?
03:54:31 <shapr> dons: spiffy =)
03:54:55 <dons> then in the ui we can have a Window type that connects real buffers to modeline buffers
03:55:05 <shapr> sounds good to me
03:55:07 <dons> and, then, we only need to redraw the window we're hacking in
03:55:31 * dons gets the hang of this ncurses thing
03:55:43 <musasabi> Is there any example of ArrowLoop besides the circuits examples?
03:57:19 <shapr> swiert: As far as I understand, if I have two monadic parsers, one that parses 123456789A and another that parses 123456789X, the monadic interface is such that you must recurse into the parsers until something fails.
03:57:28 <shapr> hej forester, god morgon
03:58:04 <forester> shapr: Tjaba
03:59:29 <shapr> swiert: the best I can think of for monadic parsers is to factor the common bits until you reach a choice point, but you'll still have to hold the input until one of the parsers fails.
04:00:43 <shapr> er wait, "until one of the parsers succeeds"
04:00:58 <swiert> shapr: ok I understand where you're getting at.
04:01:13 <shapr> and if it's a tree of possible parses, then you have to hold input at each choice point, until you're completely done.
04:01:15 <Lor> The problem with monadic parsers usually is that you _cannot_ factor the common bits, because only _after_ the first "1" has been parsed, it is computed that the next thing to be parsed is "2".
04:02:53 <shapr> actually, not until just one succeeds or fails, you have to hold input for monadic parsers until all but the last one has failed...
04:02:54 <shapr> I think
04:03:05 <shapr> you can't safely discard the input before that.
04:03:32 <swiert> shapr: I'm just wondering whether this is inherent to all monadic parsers.
04:03:36 <shapr> musasabi: no hei =)
04:03:45 <shapr> swiert: it is, I think it has to be.
04:03:57 <shapr> you can only execute a monad
04:04:31 * musasabi tries to parse that but fails
04:04:32 <shapr> sadly, my ISP has decided to drop off the net so I can't ask lambdabot for @type
04:04:37 <shapr> musasabi: hah =)
04:05:06 <shapr> (>>=) :: (Monad m) => m a -> (a -> m b) -> m b
04:05:44 <shapr> once you've got (a -> m b) you can just one thing, apply it and see what happens.
04:05:54 <Boegel> http://studwww.ugent.be/~kehoste/thesis/website --> my progress with the Haskell ray tracer I'm working on !
04:06:09 <shapr> Boegel: 403 !
04:06:16 <Boegel> http://studwww.ugent.be/~kehoste/thesisPublic/website (sorry)
04:06:18 <kristnjov> yeah, forbidden
04:06:26 <shapr> Boegel: ooh pretty colors =)
04:06:50 <swiert> shapr: I've just been reading Daan's post - I can see what you're getting at.
04:07:00 <Boegel> shapr: are the colors disturbing ? :)
04:07:11 <swiert> he gives a pretty good example (using parsers)
04:07:44 <shapr> Boegel: nah, I like it. That rightmost picture looks like a running pokemon too me (I'm obviously lacking sleep).
04:07:54 <Boegel> I'm planning to do shadows, multiple light sources, ambient lighting and planes
04:07:56 * shapr quickly drinks more coffee to dispel the pokemon
04:08:05 <Boegel> shapr: lol :)
04:08:11 <Boegel> haven't looked at it that way :)
04:08:46 <Boegel> I like the images already now, but they will get even more nifty as I make progress...
04:09:01 <Boegel> specular, traingles, quadrics, ...
04:09:09 <Boegel> s/traingles/triangles
04:09:29 <kristnjov> planning to do antialiasing?
04:09:37 <Boegel> kristnjov: I might
04:09:47 <shapr> swiert: well, my info is from doaitse&luc via john and ross 's arrow writings. So, it's more of what they're getting at :-)
04:09:53 * shapr is just a really good parrot
04:09:54 <Boegel> kristnjov: that shouldn't be too hard, not?
04:09:57 <swiert> shapr: on a slightly different note - the arrows in Doaitse's parser are probably in Interface.hs - see the IsParser class.
04:10:12 <Boegel> kristnjov: just taking the average of surrounding colors ?
04:10:14 <kristnjov> Boegel, i wouldn't know, i've only written OpenGL code in C++, that's the only experience of 3D i have
04:10:28 <Boegel> ow, okay
04:10:44 <Boegel> I have no idea how anti-aliasing is implemented, but I'll look into it
04:11:01 <Boegel> I'm also planning CGS operations, like difference, union and so on
04:11:05 <Boegel> intersection
04:11:31 <kristnjov> cool
04:11:33 <Boegel> the render time is quite high though... 5-10 seconds for a 320x240 image
04:11:34 <shapr> swiert: I can't really tell yet how that relates to the arrow parsers I'm (vaguely) familiar with.
04:11:56 <shapr> p (a -> b) does look a bit like arr
04:12:25 <shapr> but the resulting -> (p a -> p b) doesn't look like the arrow types I'm used to seeing.
04:14:01 <TheHunter> shapr: just looking at the type, p (b -> c) (or p (a b c) for an arbitrary arrow a) can be made an arrow instance.
04:14:21 <swiert> shapr: I would guess that this is just like arrowApply - but that would make it a Monad (which we know it isn't).
04:19:05 <Boegel> I'm out, bye everyone !
04:19:09 <shapr> cya Boegel 
04:20:07 <shapr> I can't easily match up arrows and the code in UU.Parsing. Doesn't mean it's not there, just that I need to spend a few hours examining it.
04:20:40 <shapr> but I think I'll hack on yi a bit and put off staring at this...
04:21:14 <viyyer> hi all
04:21:50 <Lemmih> Hey viyyer
04:22:01 <TheHunter> shapr: http://www.haskell.org/hawiki/HaskellIrcPastePage (but I haven't tried to get a meaning into that stuff, it just typechecks).
04:22:02 <shapr> Definitely an interesting discussion, it's always nice to check my understanding of arrows against that of others.
04:22:41 <swiert> shapr: hmm, I definitely agree that UUParsing isn't written to be readable...
04:22:54 <shapr> Well, research often happens that way :-)
04:23:17 <swiert> I was just reading through the original paper though, and I think things are clearer there.
04:23:40 <shapr> which paper?
04:24:01 <swiert> http://www.cs.uu.nl/people/doaitse/Papers/1996/DetErrCorrComPars.pdf
04:24:11 <swiert> check the parser class on page 3.
04:27:45 <bourbaki> moin
04:28:15 <Lemmih> Hey bourbaki
04:29:34 <shapr> swiert: it sounds right from the description
04:31:59 <swiert> shapr: and there's a lot more explanatory text than in the code
04:32:18 <shapr> the code TheHunter put onto the paste page almost clicks for me.
04:33:54 <TheHunter> shapr: i think there is a big BUT, though, because it obviously only manipulates functions, and UU might be most efficient if you're using objects like (p Int).
04:34:47 <swiert> shapr: I would expect the p to be the Arrow, however.
04:40:57 <shapr> hi det
04:44:05 <shapr> hiya reffie 
04:48:53 <ned> hello all
04:49:12 <shapr> salut ned 
04:49:42 <ned> a simple question : can't i do this ?: (hs-plugins)
04:49:49 <ned> evaluation chaine argument = do
04:49:49 <ned>         i <- eval chaine [] :: forall a. (Typeable a, Show a) => IO (Maybe (String -> a))
04:49:53 <ned>         if isJust i     then do (putStrLn.show) $ (fromJust i) argument
04:49:55 <ned>                         else return()
04:50:02 <ned>  Ambiguous type variable `a' in these top-level constraints:
04:50:02 <ned>       `Typeable a' arising from a type signature at Hserv2.hs:7
04:50:10 <ned>       `Show a' arising from a type signature at Hserv2.hs:7
04:50:28 <swiert> shapr: I just pasted some untested code on the IRCPastepage.
04:50:28 <ned> mith String -> whatever it works
04:50:38 <ned> s/mith/with
04:51:01 <ned> but i would like Show a => String -> a
04:57:56 <dons> ned: Typeable can't handle polymorphic values -- so you're a won't work
04:58:15 <dons> but there's a way around it. see hs-plugins/examples/eval/eval_fn1
04:58:51 <ned> dons: thx
04:58:52 <dons> (you hide your value inside a data type)
05:18:40 <Philippa> dons: how far's hs-plugins from working under win32?
05:20:31 <dons> sigh, further back. yi is taking up my time at the moment.
05:20:43 <dons> I made some big steps. If someone wanted to do the port, it shouldn't be hard
05:21:05 <dons> and even easier now ghc 6.3/4 has System.Process for win32 too
05:22:05 <Philippa> I might take a look once 6.4's out if you'd be able to explain what I'd actually be doing (no promises though, I'm crap at fulfilling them)
05:22:31 <dons> once 6.4 is out, I'll probably be free to finish the port.
05:22:36 <Philippa> figures :-)
05:22:48 <dons> no no. it will be soon :)
05:22:57 * shapr returns
05:23:55 * shapr binds
05:24:27 <dons> return . shapr =<< readIORef r
05:24:35 * shapr snickers
05:24:51 <dons> too many global vars in my head
05:25:23 <shapr> huh, where'd all the keybindings go?
05:26:00 <dons> Keymap.hs ?
05:26:08 <shapr> too easy..
05:26:28 <dons> haven't yet got it picking up ~/.yi/Keymap.hs -- soon
05:26:33 <dons> so you've got vi for now
05:26:37 <shapr> s'okay by me
05:27:14 <dons> get a nice msg on :w now :)
05:27:47 * shapr pulls patches
05:28:37 <dons> yi is getting easier
05:28:49 <Philippa> what is yi, anyway?
05:28:55 <shapr> the new hemacs
05:28:57 <xerox> yo
05:28:58 <Philippa> ah
05:29:03 <shapr> y0 xerox 
05:29:23 <shapr> Philippa: Y I the ultimate in recursive names. also, punny on vi, and very easy to type.
05:29:42 <shapr> And tuomov discovered that Yi is 'the source of all righteousness' in Confucianism.
05:29:56 <dons> which is really nice :)
05:30:33 <xerox> like YF ?
05:31:07 <shapr> Confucius' Yi also has its own Unicode char, so we get the benefits of having a single unicode char as a name :-)
05:31:25 <Philippa> heh
05:32:27 <shapr> dons: hey, once the vi implementation is clean, I say it's time to release 0.1 and then talk about buffer arrows.
05:32:37 <phubuh> Starting up dynamic Haskell ... /home/mikael/Projects/yi/HSyi.o: unknown symbol `__stginit_DataziUnique_'
05:32:37 <phubuh> Fail: user error (resolveObjs failed with <<False>>)
05:32:37 <phubuh> hm.
05:32:49 <shapr> oh, I had that problem..
05:33:00 <dons> phubuh: which ghc?
05:33:01 <shapr> I think I just removed all the .hi and .o files and rebulit
05:33:11 <phubuh> dons: 6.2.2
05:33:13 <phubuh> shapr: i'll try that
05:33:21 <dons> ok. it works with 6.2.2
05:34:22 <dons> shapr: release schedule. I agree. I want the ui sorted out, some more vi. and Haskell scripting
05:34:35 <shapr> ok
05:34:45 <dons> probably 1 or 2 weeks :)
05:34:52 <phubuh> hm, making from a clean tree gives the same problem
05:35:07 <dons> make distclean ?
05:36:05 <dons> doess ./yi-static work?
05:36:33 <Lemmih> shapr: I've finished updating Hackage. Want to check it out (no design or feature changes, just prettier and faster templates)?
05:36:45 <shapr> sure yeah
05:37:19 <dons> phubuh: got the latest hs-plugins snapshot?
05:37:25 <dons> "heatwave" release
05:37:52 <shapr> Lemmih: though snowblind may be down till monday :-/
05:38:13 <phubuh> yi-static does work -- and looks cool :)
05:38:13 <Lemmih> snowblind?
05:38:30 <phubuh> i've got hs-plugins-20041014
05:38:39 <dons> should be fine then.
05:38:46 <shapr> snowblind is *.ScannedInAvian.{org,com,net}
05:41:16 <Lemmih> shapr: http://212.242.49.100/web.tgz
05:42:06 <Lemmih> It requires hmake, haskelldb, hsql, ghc >= 6.3 /-:
05:42:24 <shapr> why >= 6.3 ?
05:43:18 <Lemmih> Because ghc-6.3 can handle this: data MyData a = MyData a deriving Show
05:43:41 <shapr> oh
05:44:55 <Philippa> mebbe I'm being braindead, but why can't earlier versions handle that?
05:45:01 <Lemmih> I'm using the same database structure for showable values and functions.
05:45:44 <Philippa> sure, so it'll yell "no instance" when you try to show a func again? Or am I just confusing things with the interpreter's behaviour?
05:49:18 <Lemmih> With previous version of GHC, you were assured that (MyData a) was showable if you had derived Show.
05:50:10 <Philippa> and therefore it'd break because there's no way for it to derive something that'll print "MyData #unshowable#" or similar
05:51:17 <Lemmih> That behavior woundn't be desirable.
05:52:27 <Philippa> true, would prevent read being the inverse
05:53:19 <shapr> dons: createnewfiles.patch sent
05:53:31 <Lemmih> That's not the real reason. Type classes can't just default. 'c' + 'c' should generate a type error and not just default to 0 (or something else).
05:53:39 <dons> shapr: did I just commit something that does this?
05:53:45 <shapr> oh I dunno
05:53:58 <shapr> dons: whoops =)
05:53:59 <dons> like 5 seconds ago
05:54:02 <dons> doh
05:54:22 <shapr> dons: the yi developers are totally tuned in here....
05:54:30 <dons> hehe
05:55:00 <dons> just as long as we donn't work for 5 days on the same thing..
05:55:06 <shapr> true :-)
05:55:11 <shapr> thirty seconds is okay though
05:55:39 <Philippa> Lemmih: type classes can't /all/ default, sure. The reason Show shouldn't is that it's supposed to maintain some laws with regard to Read...
05:59:03 <shapr> dons: you don't really need to open an empty file with newE if you're going to save with writeE. Or is that just so the file gets created?
05:59:24 <dons> yep.
05:59:26 <shapr> ok
05:59:34 <dons> but i probably shouldn't create it till we write
06:00:41 <shapr> my patch just sends the filename and [] to Editor.newBuffer
06:01:44 <Lemmih> Philippa: I disagree. Only getting runtime errors with type classes would be a pain in the ass.
06:02:16 <shapr> greetz CosmicRay 
06:02:23 <dons> shapr: yeah. ok. that's good. i'll fix up the mkstemps too then
06:02:24 <CosmicRay> morning shapr
06:03:29 <Lemmih> A nice thing about type classes is that ('2' + '2') is caught by the compiler.
06:04:27 <CosmicRay> Lemmih: bah, it should result in 'd' :-)
06:04:53 <CosmicRay> seriously, type classes are way cool.
06:04:57 <Philippa> once again: varies from class to class, sometimes there's a sensible, usable default. I agree it'd be horrific if /all/ classes defaulted
06:05:12 <Lemmih> Philippa: How would you differ?
06:05:19 <CosmicRay> they're, IMHO, the #1 thing missing from ocaml.  #2 is lazy lists.
06:05:31 * shapr swears at his ISP
06:05:45 <Philippa> that sometimes, a default is a sensible choice
06:05:46 <Lemmih> Philippa: Why should Num not default when others should?
06:05:55 <shapr> %@#^?!
06:06:23 <Philippa> because defaulting would break invariants that Num is supposed to satisfy
06:06:27 <shapr> CosmicRay: can you accept either 1.5mb emails or emails split into <1MB chunks?
06:06:41 <Lemmih> Philippa: So you would add a new keyword to the Haskell langauge to specify if it's should use defaults when used on a type not member of the class?
06:06:55 <CosmicRay> shapr: let me see what my maxsize is right now...
06:07:17 <CosmicRay> shapr: I can go up to 10MB
06:07:45 <shapr> excellent, some savory code is now heading your way.
06:07:49 <CosmicRay> sweet.
06:07:57 * CosmicRay will enjoy it with a vintage red wine.
06:08:01 <Lemmih> CosmicRay: One can always make Char an instance of Num (-:
06:08:08 <CosmicRay> bwahahaha :-)
06:08:37 <CosmicRay> I suppose we could always emulate Perl by making String an instance of Num :-)
06:08:51 <Philippa> Lemmih: I'd specify defaults by way of an instance that matches all types
06:09:23 <Lemmih> Philippa: instance Show a where ...?
06:09:46 <Philippa> right
06:09:59 <Philippa> and yes, overlapping, I know
06:11:30 <shapr> CosmicRay: tell me when you get it.
06:13:50 <Lemmih> I still believe moving errors (or just error messages) from compile time to runtime is wrong.
06:15:28 <shapr> My ISP lost power. Again. And ScannedInAvian.org doesn't automatically come back up when power is restored.
06:15:33 * shapr swears
06:15:59 <shapr> Anyone have good suggestions for colocation in Sweden or northern Finland?
06:15:59 <Philippa> Lemmih: that assumes it's an error rather than just a lack of information
06:16:09 <shapr> XTL: any good colos in Oulu?
06:16:09 <CosmicRay> shapr: got it
06:16:20 <CosmicRay> shapr: that sucks
06:16:27 <shapr> CosmicRay: you gotta try mage, it's way spiffy.
06:16:34 <CosmicRay> shapr: I use memset.com.  They give you a UML account
06:16:41 <CosmicRay> so you don't have your own box.  otoh they are cheap
06:16:47 <shapr> hm
06:16:48 <CosmicRay> and they all run debian
06:16:51 <Philippa> sometimes I want the system to "tell me what it can". Sure, that probably shouldn't be Show. There might be a similar class Tell that does exactly that though
06:16:52 <shapr> that's nice.
06:17:00 <XTL> Hmm
06:17:10 <CosmicRay> shapr: they're british but I think they can bill in UKP, EUR, or USD
06:17:16 <shapr> CosmicRay: I like having my own box...
06:17:22 * shapr is highly tempted to start his own ISP.
06:17:27 <CosmicRay> I pay about $45USD/mo for that
06:17:36 <XTL> I have no idea about providers here.
06:17:48 <Lemmih> Philippa: I some times pass the wrong value to a function by error and I like that it's caught by the compiler instead of just generating some default value, which would be hard to debug.
06:17:54 <Lemmih> *sometimes
06:17:57 <shapr> The cheapest (other) colo I've found nearby is about 150e a month.
06:18:02 <shapr> But then, maybe I get what I pay for...
06:18:21 <shapr> I'm tempted to shell out for a real colo rackmount pizzabox.
06:18:25 <tic> shapr, that's a lot of money
06:18:28 <CosmicRay> whoa.
06:18:44 <CosmicRay> is this really an uber-disassembler?
06:18:58 <shapr> CosmicRay: not really... but it's the start of one.
06:19:07 <shapr> it's pretty badass at any rate.
06:19:15 <shapr> Braakman is scary =)
06:19:27 <shapr> tic: you know of any good colo in the south?
06:19:30 <CosmicRay> shapr: memset has a real dedicated server for the same price as you're paying
06:19:39 <tic> shapr, not really. same price here, really.
06:19:52 <tic> (~150E/mo for color.)
06:19:55 <tic> coloc.
06:20:07 <CosmicRay> shapr: the package I use is about 1/3 the price of your colo deal :-)
06:20:15 <shapr> CosmicRay: I might even go for it if I get to ssh in somewhere to access the console.
06:20:21 <CosmicRay> oh, and -- unmetered bandwidth.
06:20:26 <shapr> oh, that's nice
06:20:38 <Philippa> Lemmih: sure, so do I. OTOH, sometimes, for debugging reasons, I want a trace of a value part-way through evaluation and I'd like to be able to be told as much as reasonably possible about said value, and told "this is all I can say" for the bits it can't do much about.
06:21:05 <shapr> foo. Ok, any suggestions for good colo pizzaboxes to buy?
06:21:24 * CosmicRay needs to get some of shapr's hot consulting action
06:21:32 <lmbdwr> hi all
06:21:34 <lmbdwr> hum
06:21:43 <CosmicRay> if he can afford a EUR150/mo colo plus a machine for it :-)
06:21:47 <tic> shapr, I'm on the "Strictly Bussiness" plan at http://www.dreamhost.com/shared/comparison.html
06:21:57 <Philippa> in those situations, there's some sense in eg a Tell class that's a bit like Show only it doesn't have an inverse and if it can't tell you anything more will tell you the type of the value it can't print
06:22:08 <lmbdwr> are sequent calculus and gentzen logic the same ? and what's the link with intuitionistic logic (I thought intuitionistic log. was gentzen logic actually)
06:22:18 <tic> shapr, ... but I only pay $9.95/mo :)
06:22:37 <CosmicRay> tic: yeah, but you don't get root
06:22:42 <Philippa> the whole point is that the existance of Show, which /will/ complain if it can't show something, shouldn't preclude the existance of Tell, which does something different
06:22:47 <CosmicRay> tic: that's why I pay 5x that :-)
06:22:48 <tic> CosmicRay, yup, that sucks.  dedicated server would be nice.
06:22:51 <CosmicRay> yeah
06:22:56 <tic> CosmicRay, yap.  Still, $50 is a pretty good deal.
06:22:58 <Philippa> Tell isn't about error propagation, it's about "you'd only have had to write it out this way by hand anyway"
06:23:07 <CosmicRay> tic: there are a lot of "virtual root" providers out there.  linode.com is a well-known one
06:23:10 <CosmicRay> tic: yeah
06:23:22 <CosmicRay> tic: I wish I could get along without root.  just can't. :-)
06:23:22 <tic> CosmicRay, what's "virtual root" ?
06:23:26 <tic> heh.
06:23:41 <CosmicRay> tic: they use something like user-mode-linux, vmware, Linux vserver, etc.
06:23:57 <CosmicRay> tic: they provide several virtual machine environments on a single physical machine
06:23:59 <shapr> CosmicRay: thing is, our only costs are home and colo hardware, and bandwidth for both. We do work for a bunch of clients around Europe, but we require a *reliable* server with decent bandwidth for our business.
06:24:14 <tic> CosmicRay, ah, okay.
06:24:24 <CosmicRay> tic: you get root on your own virtual environment, which is for all intents and purposes a full hardware deal
06:24:37 <CosmicRay> tic: but it's cheaper because they can host several people on one box
06:24:42 <shapr> living 800km north of stockholm means that rent and food is cheap, but home bandwidth is expensive.
06:24:51 <tic> CosmicRay, yup..
06:25:01 <tic> I have 10M to my apt.
06:25:02 <tic> ;)
06:25:32 <CosmicRay> shapr: I can identify with that.  We live out in the country in Kansas.  For the size of house we got, it's real cheap compared to cities.  OTOH, realiable broadband became available here about a month ago.
06:25:57 <CosmicRay> tic: a few places give you a chroot, but that's no good because you can still kill other people's processes and stuff
06:26:04 <tic> heh.
06:26:04 <CosmicRay> tic: google for usermodelinux
06:26:04 <tic> yeah
06:26:40 <CosmicRay> http://user-mode-linux.sourceforge.net/
06:27:29 <CosmicRay> ahh, is that what I think it is?
06:27:34 <CosmicRay> yes, a Curses interface for Haskell.
06:27:36 <CosmicRay> perfect
06:27:49 <shapr> yi is using ginsu's Curses
06:27:54 <shapr> Igloo also has a curses
06:28:06 <CosmicRay> except he did the work of breaking it out of ginsu already :-)
06:28:12 <CosmicRay> (I mean mage)
06:28:27 <CosmicRay> yeah I looked at Igloo's, I think, but it was not very complete IIRC
06:28:36 <CosmicRay> (no offense igloo)
06:28:39 <shapr> I don't remember mage internals.
06:29:15 <CosmicRay> this is the best curses binding I've seen yet on Haskell.
06:29:25 <CosmicRay> this doesn't look familiar, but maybe I forget ginsu
06:30:02 <CosmicRay> thanks shapr, this is very nice.
06:30:16 <shapr> :-)
06:30:21 <shapr> I'll send you more goodies later
06:30:40 <CosmicRay> maybe I'll have enough of my goodies finished by tonight to send you
06:30:58 <shapr> I have some code bits by William Lee Irwin III
06:31:05 <shapr> he writes strange code.
06:31:09 <CosmicRay> that name doesn't ring a bell
06:38:38 <shapr> hiya karingo 
06:38:41 <shapr> how's code treating you?
06:39:01 <tromp> good afternoon
06:39:12 <shapr> hoi tromp, hoe gaat het?
06:39:20 <tromp> prima:)
06:39:40 <tromp> strange that food wld be cheaper far away from stockholm
06:40:15 <tromp> here in amsterdam food is as cheap if not cheaper than elsewhere
06:41:28 <tromp> or do you mean cost of eating out:-?
06:42:09 <shapr> food in general is cheaper here.
06:42:56 <tromp> don't you have the same supermarket chains all over sweden?
06:43:34 <tromp> in holland, each supermarket chain has the same prices in all branches nationwide
06:43:51 <mattam> when you have a TokenParser in Parsec, how do you make the token lexer from it ?
06:46:24 <Philippa> the token lexers are just fields in the TokenParser record
06:47:52 <mattam> hmm right, no way to distinguish them
06:48:03 <CosmicRay> tromp: here in the US there are national chains, but the prices vary by location
06:48:08 <CosmicRay> tromp: even by neighborhood
06:48:56 <tromp> maybe it's cause holland is so damn small:)
06:49:14 <tromp> also, the chains advertise their prices on national tv
06:49:33 <tromp> which they cldn't do over there
06:49:45 <CosmicRay> that's true
06:49:53 <CosmicRay> I don't think we have any chains with a truly national reach
06:49:55 <tromp> and they bring out weekly flyers
06:49:59 <CosmicRay> there are some that may cover about 2/3 of the country
06:50:08 <shapr> walmart
06:50:15 <CosmicRay> ok, walmart.
06:50:17 <CosmicRay> yup
06:50:17 <shapr> is so big it recently spread to germany
06:50:33 <CosmicRay> they're the country's #3 supermarket, I think
06:51:28 <shapr> ack
06:51:31 <CosmicRay> I still have trouble thinking of walmart as a supermarket
06:51:47 <shapr> Fail: r_u commute bug, contact droundy@ag.o!
06:53:04 <shapr> poo, a darcs bug
06:56:48 <Lemmih> It's annoying that profiling with haskelldb is so hard /-:
06:58:05 <Lemmih> Anyhow, what's needed to make Hackage acceptable?
07:03:40 <shapr> Lemmih: did you see the discussion on the libraries@h.o list?
07:05:30 <Lemmih> "Haskell libraries wishlist"?
07:06:29 <shapr> yup
07:16:19 <Lemmih> It was somewhat vague.
07:24:55 <vivek> shapr: is hemacs written completely in haskell ?
07:25:28 <shapr> vivek: it's been renamed yi, and yes.
07:26:19 <vivek> and its almost complete ?
07:26:30 <vivek> or nearing completion by any chance ?
07:26:44 <vivek> ,yi
07:30:42 * musasabi goes in loops around ArrowLoop
07:32:42 <musasabi> vivek: it was started just recently and is going through lots of hacking
07:32:56 <shapr> vivek: I think it's about 1.5 weeks old, but it looks a lot like vi right now.
07:34:12 <shapr> hej cm_
07:34:24 <cm_> hej
07:35:42 <Philippa_> 'lo cm
07:36:48 <vivek> shapr: u are the lead programmer of yi ?
07:37:21 <shapr> no, dons is.
07:37:29 <shapr> I'm the lead cheerleader of Yi.
07:37:58 <shapr> je suis une pom-pom fille
07:38:00 <xerox> haha
07:38:48 <vivek> i like the sound of cheerleader in french 
07:39:03 <shapr> parlez vous francais?
07:39:08 <xerox> no
07:39:10 * vivek wonders if shapr is un petite pom-pom fille 
07:39:37 <shapr> I think "une pom-pom fille" is correct. Not totally sure.
07:39:40 <shapr> ned: salut!
07:40:09 <vivek>  /s /un /une 
07:40:37 <shapr> ah "une pom-pom girl"
07:41:15 <shapr> bonjour ows, comment ça va?
07:41:20 <vivek> une pom-pom is chearleader ?
07:41:40 <shapr> vivek: I think so.
07:41:54 <shapr> Olá ows, bom dia
07:42:01 <ows> shapr: I'm fine, bit with a lot of work to do..
07:42:05 <vivek> hmmz i have grave doubts about that ... maybe a  sinnester french man taught u that ?
07:42:12 <ows> shapr: ciao, shapr!
07:42:28 <shapr> vivek: I doubt it. I am a sinister American man myself.
07:42:46 <shapr> that is, I'm left-handed =)
07:43:17 <shapr> ows: It's saturday and you're working?
07:46:45 <shapr> vivek: seems to be correct, I asked my french fiancée, and she said that sounds right to her.
07:48:52 <shapr> ows: Que pena :-)
07:52:41 <shapr> are there any decent cross-platform SVG libraries?
07:53:22 <shapr> I just realized that HGL is really slow, really basic, and troublesome because it uses HSX11 primitives. An SVG binding might be much better.
07:59:26 <tromp> hgl is haskell open-gl ?
08:01:22 <shapr> nah, it's the SOEGraphics thingy
08:01:31 * shapr gets url
08:06:07 <shapr> hei vegai_ 
08:06:21 <vegai_> hey... did I just leave the channel or earlier?
08:06:41 <Philippa> your old client just dropped
08:06:48 <vegai_> god damnit...
08:07:09 <vegai_> Freenode's been doing this to me for a week now
08:07:29 <vegai_> if I idle for longer than about an hour, I'm kicked out 
08:07:47 <shapr> vegai_: maybe your client isn't sending PONG responses?
08:08:06 <shapr> tromp: this is the library, but I don't think that's really the right page. http://www.haskell.org/soe/graphics.htm
08:08:10 <vivek> shapr: is it any good 
08:08:20 <shapr> vivek: is what any good?
08:08:20 <vivek> i mean soegraphics library ?
08:08:28 <vegai_> yep, I guess. But why suddendly?
08:08:40 <vivek> it dosnt work with the new hugs ?
08:09:13 <shapr> vivek: it's good if you want to do the lessons in Hudak's book.
08:10:15 <tromp> thx, shapr
08:10:19 <shapr> SOEGraphics was written for that purpose originally.
08:24:07 <XTL> Damn. I really want my wiki back.
08:24:29 <shapr> which wiki?
08:24:47 <XTL> shapr: My own "bookmark" wiki that I paste random stuff into etc.
08:25:05 <XTL> It's now trapped on a scsi disk with no host to attach to.
08:25:27 <shapr> oh
08:25:53 <XTL> I should put that idle scsi card to remiel and attach that rdive and the scanner to it.
08:26:03 * shapr learns how to do sysadmin on Fedora something or other
08:26:15 <shapr> ah FC2
08:38:01 <XTL> OH, well. I'll just shut down and get it over with.
08:40:04 <CosmicRay> @index seq
08:40:27 <shapr> CosmicRay: remember me complaining about my ISP?
08:40:29 <CosmicRay> shapr: when writing network code in haskell, if I want to force something to be read at a particular time, I need to use seq, right?
08:40:31 <CosmicRay> yeah
08:41:08 <shapr> er well... your buffering settings are more important in most cases
08:41:12 <CosmicRay> or anything in general -- if I have an IO action, and I have, say: d <- getLine; return d -- and the caller never cares about the return value -- will it still do the read?
08:41:45 <shapr> hm, I don't know.
08:41:49 <shapr> I would think so, but I'm not sure.
08:42:49 <phubuh> if that IO action is returned from main, it will be run
08:42:57 <CosmicRay> it's not from main
08:52:38 <Jan_w> hi shapr
08:52:41 <shapr> hoi Jan_w 
08:52:44 <Jan_w> :)
08:55:39 <swiert> shapr: are you still interested in arrow parsers?
08:55:49 <shapr> yes!
08:55:58 <swiert> http://www.cs.chalmers.se/~rjmh/Papers/arrows.ps page 20
08:56:18 <swiert> or rather page 19
08:56:24 <shapr> That's the original Hughes' paper, right?
08:57:01 <shapr> I've read that paper repeatedly till my printout is getting worn out...
08:57:11 <shapr> I want a Parsec-like library that's based on arrows.
08:57:34 <swiert> shapr: but this does all the hard work doesn't it?
08:58:50 <shapr> I don't know.. I've never tried to write a Parsec-like library.
08:59:16 <shapr> I hadn't really thought of just trying to hack up a Parsec clone that uses the original parser arrow code.
08:59:51 <shapr> That might work though :-)
09:00:10 <swiert> shapr: but what do you want exactly?
09:00:27 <swiert> parsec syntax/arrow syntax/...?
09:01:59 <shapr> well, I guess I want the 'self-optimizing' properties of parser arrows, with all the combinators and handy stuff that Parsec has.
09:02:16 <shapr> arrows syntax is fine with me, it's often more intuitive than monadic syntax, imho.
09:03:21 <shapr> hi wilx 
09:03:24 <wilx> Hi.
09:03:27 <shapr> wilx: looking for Haskell info?
09:03:36 <wilx> Nope :)
09:03:46 <shapr> looking for other Haskell users?
09:04:00 <wilx> Maybe.
09:04:02 <swiert> ok - basically take the stuff in John's paper on arrows + hack together Doaitse's primitives + steal the derived combinators from uust = what you want.
09:04:06 * vivek gets dizzy with shapr talk ...
09:04:12 <vivek> hello wilx 
09:05:10 <shapr> swiert: thanks, I'll investigate that. Would be nice to have a 'Parrowsec' or whatever.
09:05:28 <shapr> wilx: Just user?
09:05:28 <vivek> shapr: is there a tictac toe in haskell ?
09:05:45 <swiert> shapr: hmm - I might hack together some basic stuff tonight and get back to you later.
09:05:50 <shapr> vivek: I only know of one, and it's pretty bizarre.
09:05:56 <shapr> swiert: cool =)
09:06:17 <shapr> swiert: if you do hack something together, I wanna see it!
09:06:25 <shapr> even at 4am nl time =)
09:06:31 <swiert> shapr: I'll be sure to let you know.
09:07:02 <wilx> I am rather a novice than user :)
09:07:17 <vivek> me want to rip apar all the haskell code the is but returns to "The foot prints of God " for now 
09:07:30 <shapr> vivek: the only tictactoe game I've seen in Haskell was written for the 0th obfuscated haskell code contest.
09:07:41 <shapr> but it sure is cool.
09:07:50 <vivek> wilx: this is one of the friendliest channels aroud and make friends with shapr and u will be happy as a puppy here 
09:09:00 <shapr> happy as a puppy, hah :-)
09:09:09 <shapr> wilx: do you have some questions?
09:09:18 <wilx> Nope.
09:09:20 <wilx> Not now.
09:09:37 <shapr> vivek: http://83.226.177.116/~shae/Pseudonym.hs
09:09:57 <vivek> monosyllable and friendliness dont mix wilx speak up :)
09:10:01 <shapr> that crazy tictactoe game was written by Pseudonym, aka Andrew J. Bromage
09:10:13 <shapr> wilx: well if you think of some questions, feel free to ask me.
09:10:27 <shapr> vivek: well, maybe he wants to just listen first and see how the channel culture works.
09:10:48 <vivek> yes boss 
09:11:16 <shapr> vivek: ok, if you want to play that tictactoe game, you have to edit the source, put in your move, and the run the edited source, to get back a new copy of the source with the computer's move embedded in the result.
09:11:25 <vivek> tnx for the code shapr i will have a dig at it 
09:11:40 <shapr> ok, but it's not the easiest tictactoe game I've seen to understand.
09:11:47 <shapr> It designed to be hard to understand :-)
09:13:20 <vivek> i like that :)
09:13:44 <vivek> but i am gonna be missing a lot of hair on my head soon 
09:13:44 <xerox> *gulp*
09:18:13 <tromp> that tictactoe looks like a translation from a c version
09:18:22 <tromp> that appeared in the IOCCC
09:18:30 <shapr> tromp: I think it is.
09:19:01 <shapr> tromp: on the other hand, a recent IOCCC winner was first translated from Haskell into C =)
09:19:19 <tromp> which one was that?
09:19:28 <vivek> more power to haskell 
09:19:28 <shapr> the raytracer
09:19:33 <tromp> ah
09:19:53 <sorje> Yay, I won against pseudo's prog. ;-)
09:19:56 <vivek> je suis une pom-pom girl pour haskell 
09:20:13 <vivek> cool sorje 
09:20:16 <shapr> sorje: hi! who are you?
09:20:30 <tromp> maybe i shld try port my maze.c to haskell
09:20:53 <vivek> i hope the french dont mind the murder of their beloved language 
09:22:31 <sorje> shapr, hi! I'm quite a lot. Among other stuff electrician, student of maths in his first semester and I'm currently carrying out civil service ;-)
09:22:44 <shapr> wow, neat.
09:23:18 <sorje> Oh, and interested in haskell, of course.
09:23:32 <shapr> Are you doing civil service in .de ?
09:23:57 <shapr> I'm interested in Haskell too.
09:24:00 <shapr> nice language.
09:24:26 <sorje> Yes. At an organization for blind and visually handicapted people.
09:24:48 <shapr> neat, do you do computer work for them?
09:25:14 <sorje> Not quite. I do whatever people want me to do.
09:25:27 <shapr> That makes senes.
09:26:22 <sorje> Yeah, I'm the last one in the pecking order. ;-)
09:27:15 <shapr> We all start at the beginning :-)
09:29:47 <sorje> So, who are you?
09:30:28 <vivek> shapr: loves haskell emacs and his unicycle ....
09:30:55 <shapr> I'm a self-employed programming, student of everything, and I'm currently writing Python code and doing sysadmin for a living, but hoping to do commercial Haskell work.
09:31:20 <shapr> Yes, I have two unicycles, one for learning, and one for mountain unicycling.
09:32:15 <sorje> Cool. I hope doing what you like for money doesn't spoil the fun for you.
09:32:37 <shapr> I hope so too.
09:33:10 <shapr> but everytime I feel unhappy with programming, I think about the boring jobs I have had that also paid badly.
09:33:28 <shapr> at least with programming, it's never boring, and the pay is decent.
09:33:54 * vivek plays a pom-pom girl drill for sharper ...
09:33:56 <mattam> you should have a FAQ shapr :)
09:34:19 <shapr> mattam: do I repeat myself so much? ;-)
09:34:24 <vivek> oh we scared away wilx
09:34:30 <sorje> I once had a "Programming job", too. It was like the best time I've ever had, workwise. I didn't have a real life then. ;-)
09:34:45 <mattam> no, it's just that you repeat yourself
09:34:57 <shapr> do I repeat myself?
09:34:59 * shapr snickers
09:35:11 <mattam> hehe
09:36:23 <shapr> mattam: so, who are you? =)
09:36:44 <sorje> That somehow feels like back in kindergarden. Only you've a little more to say. ;-)
09:37:21 <shapr> greetings SyntaxNinja, I had something interesting to tell you... wonder what it was.
09:38:01 <shapr> hiya waltz 
09:38:48 <SyntaxNinja> hi shapr
09:44:36 <tromp> here's the original tic-tac-toe: http://www.ioccc.org/1991/westley.c
09:47:20 <shapr> hello again wilx 
09:49:57 <CosmicRay> gar
09:50:02 <shapr> CosmicRay: nice fish
09:50:04 <CosmicRay> hIsWritable is true, but:
09:50:08 <CosmicRay> Program error: <handle>: IO.hPutStr: illegal operation (handle is not writable)
09:50:15 <CosmicRay> on something returned by Network.connectTo
09:52:17 <CosmicRay> weird.
09:52:20 <CosmicRay> it works with ghc, but not hugs.
09:52:29 <CosmicRay> does nobody test basic networking with hugs?
09:52:39 <shapr> hugs has a Network module?
09:52:43 <CosmicRay> heh
09:52:45 <CosmicRay> yes :-)
09:52:52 <shapr> I didn't know that.
09:53:14 <shapr> how long has it had that?
09:53:49 <CosmicRay> no idea
09:54:00 <CosmicRay> hm.
09:55:54 <CosmicRay> ah, it's hgetcontents that is throwing me off.
09:55:55 <CosmicRay> damn.
09:59:18 <CosmicRay> once you've called hGetContents on a handle, you can't write to it either, eh?
09:59:21 <CosmicRay> that sucks.
09:59:42 <CosmicRay> that makes it difficult to apply parsec to a network :-)
10:06:54 <Lemmih> Yay. Hackage is now valid XHTML 1.0 Transitional!
10:07:52 <shapr> yay!
10:10:14 <musasabi> How would I use the ArrowLoop instance for e.g. normal functions (->) ?
10:10:38 <shapr> I'd like to know how to use the ArrowLoop for anything at all.
10:10:58 <shapr> I have a vague impression that it's like mfix, fixIO, and mdo, but I'm not really sure.
10:12:52 <Lemmih> shapr: I think it'll be ready for serious testing soon.
10:13:02 <shapr> cool!
10:34:20 <SyntaxNinja> Lemmih: got any cabal patches for me? :)
10:34:29 * SyntaxNinja especially wants a good description field parser :)
10:35:21 <Lemmih> I'm just parsing the description field as text. Is there more to it?
10:37:55 <SyntaxNinja> multi-line text is all, I guess.
10:38:07 * SyntaxNinja can't remember if that's int he parser or nt. I really need to get in touch w/ marvin
10:38:41 <SyntaxNinja> Lemmih: the parser is going to change, though, and I can let you know how :) (you could do the hacking if you want it to get frozen sooner)
10:39:34 <Lemmih> Why is the parser going to change?
10:40:52 <Lemmih> The current parser supports multi-lines via indentation.
10:42:22 <SyntaxNinja> ok cool.
10:42:34 <SyntaxNinja> the parser is going to change to allow more than one library (just like htere's more than one executable)
10:50:43 <desrt> @shapr
10:50:50 <desrt> hmm.
10:50:57 <desrt> !!
10:51:06 <shapr> desrt: hey, I'm workin, but I'll get lambdabot back up in a bit.
10:51:20 <desrt> needs sleep.
10:51:37 <shapr> :-P
10:51:40 <shapr> as always
10:51:46 <desrt> it's no biggie :)
10:54:06 <Lemmih> Darn. Syntax left /-:
10:57:15 * XTL \heart debian
10:57:36 * desrt hands ♥ to XTL
10:57:46 <Lemmih> heh
10:57:48 <desrt> here.  have a ♡ too :)
10:57:56 <XTL> Scanner works fine, potrace makes vector graphics and cups prints them out on the old laser. Sharp as anything.
10:58:28 <shapr> I always wanted to find an opportunity to say something like "I ~ the soil"
10:58:33 <XTL> Have to see if I can ocr sometime. But I should try to set that awki back up sometime.
10:59:14 * desrt hates the \ problem
10:59:26 <desrt> happy doesn't like to build using gcc-3.4.1 cpp
10:59:50 <shapr> it's un-happy?
10:59:56 <desrt> quite.
11:00:11 <desrt> it only happens in one place though and can be fixed by replacing a \ with a ' '
11:00:25 <desrt> but i fear that i will be breaking older cpp's
11:00:37 * desrt tries on his PC which still has gcc-3.3
11:01:07 <desrt> i suppose that doesn't really qualify as "old" but it's old enough to be different from 3.4.1 :)
11:05:21 <desrt> shit.  my change breaks 3.3
11:41:34 <shapr> musasabi: oh, I hope you get a good response
11:41:38 <shapr> to your arrowloop email
11:51:48 <XTL> *sigh* awki ends up <defunct>
11:55:52 <shapr> @yow
11:55:52 <lambdabot> In Newark the laundromats are open 24 hours a day!
11:55:55 <shapr> @type show
11:55:59 <lambdabot> show :: forall a. (Show a) => a -> String
11:55:59 <shapr> ?
11:56:01 <shapr> ok
11:56:02 <shapr> whew
11:56:20 <shapr> dunno why lambdabot is so slow today.
11:59:12 <Lor> Are there any statistics about the country distribution of #haskellers?
11:59:35 <shapr> there's an xearth user page on the wiki, but it never got much info
12:00:01 <shapr> http://www.haskell.org/hawiki/HaskellUserLocations
12:00:34 <shapr> feel free to put in your own info
12:01:21 <Lor> It'd be nice to have a link to some map page where one can easily find out one's own coordinates.
12:01:30 <shapr> good point
12:01:32 <shapr> put one into the page!
12:01:40 <shapr> I just googled for boden and longitude
12:01:43 <Lor> I don't know of any. :)
12:01:47 <shapr> and it was in the first set of results
12:01:55 * Lor usually uses a Finland-specific map service.
12:02:49 <shapr> anyway, I've had it for today. This calls for alcohol.
12:02:53 <lmbdwr> France represent.
12:02:58 <lmbdwr> ;)
12:03:15 <shapr> lmbdwr: put your info in the wiki page!
12:03:29 <xerox> haha you'll tell everybody to do so?
12:03:50 <shapr> xerox: put your info in the wiki page! :-P
12:03:57 <xerox> ouch.
12:04:01 <shapr> hoi goron 
12:04:05 <goron> hej
12:04:12 <shapr> goron: cool link of the moment - http://www.haskell.org/hawiki/HaskellUserLocations
12:04:23 <xerox> just saying it in other words..
12:04:30 * shapr does apt-get install beer
12:04:33 * shapr &
12:04:48 * sorje casts beer
12:04:57 * xerox films everything
12:05:05 <lmbdwr> I deserve the right of anonimity !
12:05:09 <goron> Do you know how a program called expect works?
12:05:16 <Lor> http://www.bcca.org/misc/qiblih/latlong_oc.html
12:05:38 <Lor> Does xearth understand minutes and seconds instead of decimal degrees?
12:06:27 <xerox> goron: here: http://expect.nist.gov/scripts/ you can find examples
12:06:37 <Lor> http://www.caida.org/analysis/geopolitical/city2latlong.txt
12:06:40 <Lor> This is a better one.
12:07:03 <goron> xerox: I meant how expect works, not the scripts. How it communicates to another process, etc.
12:09:25 <goron> It must be something that's builtin Linux/UNIX.
12:11:20 <xerox> what is "Alignment" in http://www.haskell.org/hawiki/HaskellUserLocations ??
12:34:10 <TheHunter> shapr: btw, the structure uu parsing is based on apparently are "lax monoidal premonads with a weak symmetry condition", which is some intermediate thingy between functors and monads.
12:34:27 <TheHunter> (http://www.haskell.org/arrows/arrows/Control.Sequence.html)
12:41:27 <TheHunter> now what I defined was the static arrow belonging to that sequence (http://www.haskell.org/arrows/arrows/Control.Arrow.Transformer.Static.html)
12:58:01 <rhaaw> shapr ?
13:13:23 <SyntaxNinja> Lemmih: I pushed your patches
13:13:34 <kristnjov> how do i create a simulated half adder circuit in haskell without the Arrows module?
13:13:35 <Lemmih> Ok.
13:13:49 <kristnjov> or no that's not my question
13:13:56 <basti_> -?-
13:14:04 <kristnjov> gah never mind
13:14:07 <kristnjov> too hard to explain
13:14:16 <basti_> okay.
13:18:38 <Lemmih> SyntaxNinja: Know of a place where I can test Hackage?
13:19:22 <SyntaxNinja> what do you mean?
13:20:11 <Lemmih> SyntaxNinja: I would like to put it somewhere where people could add packages.
13:20:24 <SyntaxNinja> you had it up on your web server before? what about shapr's server?
13:21:16 <Lemmih> My server is too slow and scannedinavian.org is down.
13:21:18 <SyntaxNinja> John Peterson (I think) said on the libraries list that he'd be willing to give an account to anyone working on something like that
13:21:37 <Lor> What's Hackage?
13:21:54 <SyntaxNinja> Lemmih: your server can't be _that_ slow? :)
13:22:37 <Lemmih> I'm running it off my desktop...
13:22:52 <SyntaxNinja> Lor: a package listing interface that Lemmih is hacking on, layered on Cabal
13:23:08 <Lor> Okie.
13:25:35 <SyntaxNinja> it's 1337
13:26:27 <basti_> leet force?
13:26:57 <Lemmih> Lor: Current status: http://212.242.49.100/cgi-bin/web/Main
13:27:41 <Lor> Ah. Cool.
13:28:28 <Lemmih> You'll hopefully be able to edit the fields of a package later today or tomorrow.
13:29:17 <SyntaxNinja> Lemmih: I would advise against being able to do that online, they should alter their package description files and re-upload them
13:30:13 <SyntaxNinja> otherwise the description files and the web site might be out-of-synch
13:30:27 <Lemmih> Oh right.
13:31:20 <SyntaxNinja> for instance, remember that we want to be able to point to the tarball, and we want the info in there to match the info at the description file
13:31:36 <SyntaxNinja> er, s/the info at the description file/the info in the database
13:33:24 <Lemmih> *puff* and the edit link is gone.
13:34:31 <SyntaxNinja> Lemmih: btw, you'll want to pull the package.hs; there have been some changes to the one you're working with
13:34:37 <SyntaxNinja> including that I fixed the test cases
13:35:15 <Lemmih> Fixed? They were broken?
13:35:56 <SyntaxNinja> yeah; you didn't add the fields to the parse, unparse test
13:36:19 <SyntaxNinja> you'll probably see it if you run the moduleTest
13:36:59 <Lemmih> Oh right.
13:45:05 <Lemmih> SyntaxNinja: I like your ideas.
13:46:26 <Lemmih> I actually had an "Everything" category but I decided that it would be annoying in the end (when we get +50 packages).
13:47:10 <Lemmih> So I changed it to "Latest" since I'm using the Ocaml hump as a model.
13:48:21 <SyntaxNinja> OK; some people might want to just see everything an duse their browser's "find" feature... I don't think it's too important, though... once we get it up, people can play with it and let us know if they like it.
13:49:37 <Lemmih> Isn't the search page good enough for that?
13:49:59 <Lemmih> ('*' is a wildcard, btw)
13:50:50 <CosmicRay> SyntaxNinja: did you get my deb for cabal?
13:51:06 <SyntaxNinja> CosmicRay: yeah; haven't had a chance for that yet; I'm moving tomorrow :)
13:51:14 <SyntaxNinja> I'll do that today, though.
13:51:30 <SyntaxNinja> Lemmih: yeah, the search probably is good enough for that.
13:51:30 <CosmicRay> SyntaxNinja: I was just going to say -- I have a 1.0-4.1 ready to upload, it's built against the new ghc
13:51:46 <CosmicRay> SyntaxNinja: If it's OK with you, I'd like to upload that, so when it moves out of NEW, it at least workds in sid
13:51:57 <SyntaxNinja> CosmicRay: can you change the maintainer at the same time, please?
13:52:05 <CosmicRay> SyntaxNinja: since it's -4.1, your -5 won't both it.
13:52:05 <CosmicRay> sure
13:52:22 <SyntaxNinja> c00l
13:56:12 <Lemmih> Argh. Just realized that the search template isn't working anymore /-:
14:04:14 <SyntaxNinja> Lemmih: I would add a link "bugs / questions" that'll mailto: me,you
14:35:00 <Lemmih> Where?
14:35:23 <SyntaxNinja> wherever looks good :)
14:36:24 <kristnjov> is it possible to nest map functions in some way?
14:36:51 <Lemmih> But it's not even entered the testing phase yet.
14:39:26 <Lemmih> s/it's/it has/
14:52:20 <SyntaxNinja> Lemmih: well, some day, I mean.
14:52:36 <SyntaxNinja> kristnjov: what do you mean?
14:53:29 <kristnjov> well i have a very (imo) tricky programming issue here
14:54:59 <kristnjov> i have a = [String] and b = [[Bool]] and i have to zip a with each element of b and at the same time for each pair of that zip, i have to run a function with one parameter as each element of c and the other parameter each element of the zip
14:55:25 <kristnjov> kind of hard to explain :P but i'm doing this for school and have serious problems with it, i've tried for many hours now unable to get it working
14:56:14 <mattam> divide the problem maybe
14:56:25 <kristnjov> that's what i've been thinking, but can't figure out how.
14:56:31 <SyntaxNinja> kristnjov: yeah, use a 'let foo = .." after the zip
14:56:38 <SyntaxNinja> kristnjov: do you know list comprehensions?
14:56:42 <kristnjov> yeah i know list comprehension
14:57:12 <SyntaxNinja> you want to zip a, b, and c, right?
14:57:30 <SyntaxNinja> and the function is f:: String -> [Bool] -> [C_Type] -> ?
14:57:47 <kristnjov> no not zip all of them
14:58:12 <SyntaxNinja> f :: (String, [Bool]) -> C_Type -> retType
14:58:15 <SyntaxNinja> ?
14:58:34 <kristnjov> no :/
14:59:04 <kristnjov> it's just extremely hard to explain in text and shortly
14:59:09 <SyntaxNinja> heh
14:59:15 <SyntaxNinja> what's the type of the function, then?
14:59:34 <kristnjov> it's actually a lot of functions, one of the functions takes c as a paremeter
14:59:38 <kristnjov> that funciton is value
14:59:47 <kristnjov> value :: String -> Environment -> Bool
15:00:15 * mattam 's ghc-6.2.2 has been compiling for 4,5 hours now and is not finished...
15:00:18 <kristnjov> and Environment is [(String,Bool)]
15:00:45 <SyntaxNinja> kristnjov: but you said b is [[bool]] right?
15:00:54 <kristnjov> yes
15:01:13 <SyntaxNinja> so how do you get the environment from a and b?
15:01:20 <kristnjov> like this:
15:01:44 <kristnjov> map (\n -> zip a n) b
15:01:48 <kristnjov> or something
15:01:51 <kristnjov> gah
15:01:56 <kristnjov> that's not right
15:02:03 <kristnjov> no wait now i remember
15:02:15 <kristnjov> i take one [bool] at a time from b
15:02:18 <kristnjov> so simply zip a b
15:02:49 <SyntaxNinja> but that gives you [(String, [Bool])], right?
15:02:56 <kristnjov> no
15:03:05 <kristnjov> i said [bool], not [[bool]]
15:03:22 <kristnjov> i take one element from b at a time, and one element of b is [bool]
15:04:14 <SyntaxNinja> so you have a different environment for every pairing of a with each bool?
15:04:36 <kristnjov> yes
15:05:24 <SyntaxNinja> so do you already know how to construct the environment?
15:05:37 <kristnjov> yes
15:06:43 <SyntaxNinja> so what's tjhe problem? :)
15:07:06 <kristnjov> the problem is it's not working and i can't explain what's not working here
15:07:29 <SyntaxNinja> so is c your list of strings?
15:07:31 <kristnjov> i basically know what's not working, but i can't explain it to you because it would take too much time and effort
15:07:39 <kristnjov> c is my list of strings yes
15:07:45 <SyntaxNinja> OK. well I'll leave you alone, then
15:08:00 <kristnjov> well thanks anyways
15:08:14 <SyntaxNinja> let me know if you have any questions.
17:21:00 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - http://www.cis.upenn.edu/proj/plclub/contest/results.php#first"]''
17:21:00 --- topic: set by Boegel on [Mon Oct 18 09:46:40 2004]
17:34:24 <jadrian> hello
17:38:21 <heatsink> good evening
17:38:42 <jadrian> hi heatsink 
18:35:05 <dons> moin #haskell
18:35:27 <dons> squashing space leaks is so satisfying
20:39:19 <dons> evil. i'm using memcpy
20:45:03 <blackdog_> yeesh. for yi?
20:45:18 <dons> hehe
20:45:34 <dons> well, it deletes lines from /usr/share/dict/words faster than vi now
20:46:03 <dons> I blame SimonM for teaching me this
20:46:38 <blackdog> what's the trick?
20:47:18 <dons> use memcpy to shift the contents of the buffer, rather than doing that in haskell land
20:47:21 <dons> you get zero allocs then
20:47:24 <dons> and a lot faster
20:47:35 <blackdog> dons: are you interested in the Pretty Girls Make Graves/Les Savy Fav concert coming up, btw?
20:47:49 <blackdog> Huh. that's cool. just FFI stuff, then...
20:48:15 <dons> pretty much.
20:48:26 <blackdog> aren't you representing the buffer using whacked-out haskell datastructures, though?
20:48:28 <dons> and use memcpy for loading a Handle's contents into the buffer
20:48:39 <dons> rather than hGetContents
20:48:52 <dons> that was 84% faster to load the dictionary file
20:49:14 <dons> the buffer layers on top of the raw buffer are going to be whacked out, yep
20:49:26 <dons> atm just doing vi emulation
20:49:35 <dons> when's the gig
20:50:36 <blackdog> can't remember - it's at the gaelic club, i'll just look it up...
20:51:29 <blackdog> 17th November, $30
20:52:16 <dons> cheap. sounds good. i can probably convince suzie to come too
20:52:28 <dons> i'll confirm today or tomorrow
20:54:13 <blackdog> cool. :) I've managed to convince quite a few people now, it should be a good night out.
20:56:31 <dons> memcpy made the delete 30x faster
20:57:11 <dons> 70% less allocs
20:57:21 * dons is happy
20:58:54 <blackdog> It's the simple things in life.
22:29:44 <CosmicRay> woohoo.  my haskell packages have finally been accepted into sid.
22:30:37 <dons> :)
22:49:06 <CosmicRay> is there source code to the lambdabot anywhere?
22:50:04 <dons> yep. it's shaprs got it.
22:50:35 <CosmicRay> ah ha.
22:50:40 <CosmicRay> http://sourceforge.net/project/showfiles.php?group_id=44807
22:51:43 <dons> I think there's newer code floating around too
22:52:05 <dons> i have a fork at http://www.cse.unsw.edu.au/~dons/code/lambdabot/
22:52:12 <dons> but that's not up to date either
22:55:09 <dons> i love finding space leaks. i hate looking for them
23:00:06 <cm> i put the mac in application
23:00:15 <cm> sup sup
