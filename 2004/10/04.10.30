00:18:38 <Boegel> hello everyone
00:18:44 <heatsink> hi
00:19:16 <Boegel> philology, new ?
00:19:51 <philology> New? I'm not new.
00:20:00 <Boegel> oh, sorry then
00:20:12 <philology> np
00:20:24 <Boegel> I'm trying to get used to regular ones here... but that's not as easy as I thought :s
00:41:07 <Boegel> hmm, I'm getting some weird errors with my lhs file...
00:41:27 <Boegel> I get a lot of 'Program line next to comment' errors, but I don't see anything wrong in my file...
00:41:38 <Boegel> anybody any idea what the problem bould be ?
00:42:01 <Boegel> I have adjusted the file in emacs on a windows machine, and am now working in Linux...
00:42:09 <philology> Boegel: can you link to the file?
00:43:14 <Boegel> how do you mean link ? as n 'ln ....' ?
00:43:27 <heatsink> http://rafb.net/paste
00:44:16 <Boegel> I'd rather don't paste my whole code there :)
00:44:52 <heatsink> If you can make a very short piece of code that exhibits the same error, that would be better
00:44:53 <Boegel> I have too watch out, because it's for my thesis you see...
00:44:58 <Boegel> I'll try and paste a piece, I'll see if that gives an error too, wait :)
00:45:57 <Boegel> if I cut the code, and paste it in another file, the problem is gone :s
00:46:20 <heatsink> Perhaps unix is treating the cr-lf as two newlines
00:46:54 <heatsink> That can cause compile errors
00:47:11 <Boegel> I've always found windows->linux or linux-> windows documents behaving very weird :s
00:48:53 <heatsink> The file format thing is a nuisance
00:49:24 <Boegel> nuisance ? I don't know that word...
00:49:49 <heatsink> what language?
00:49:56 <Boegel> http://studwww.ugent.be/~kehoste/thesisPublic/error.lhs
00:50:00 <Boegel> I copied the file here
00:50:07 <Boegel> I'm Belgian, and speak Dutch
00:50:29 <Boegel> that fle gives 1 'Program line next to comment' error
00:50:53 * heatsink doesn't know literate haskell format
00:51:19 <Boegel> :)
00:54:24 <heatsink> Yes, the linefeed character is a problem
00:54:46 <heatsink> remove all ^M characters from your file
00:56:03 <Boegel> I don't see any ^M characters in emacs...
00:56:18 <heatsink> Do you have vi?
00:59:35 <Boegel> I don't know :)
00:59:43 <Boegel> yes I do
01:00:28 <Boegel> but I don't know how to work in it though
01:01:03 <heatsink> maybe the simplest thing to do would be to fix it with a perl or sed script, if you know how to write that
01:01:55 <Maddas> Wouldn't the dos2unix thing do it?
01:02:07 <Boegel> I tried that Maddas :)
01:02:13 <Maddas> Oh, ok
01:02:30 <Boegel> I get errors now on 2 lines, but I don't see any ^M characters in vi
01:02:31 <Boegel> :s
01:02:43 <heatsink> hmm
01:03:01 <heatsink> when I saved your example file, I saw ^M at the end of every line
01:03:08 <Boegel> in vi ?
01:03:14 <heatsink> yes
01:03:24 <Boegel> how can I remove those characters in vi ?
01:03:35 <Maddas> Wouldn't it also depend on the fileformat you have set?
01:03:37 <Maddas> (In vi)
01:04:03 <Boegel> I think so... how can I change that :)
01:04:26 <Maddas> :set fileformat=unix
01:05:41 <Boegel> still no ^M characters at the lines that give an error
01:06:03 <Maddas> My vim automatically switches to the dos fileformat once it opens the file you pasted.
01:06:42 <Boegel> can't I do a regexpr search to look for ^M characters ?
01:07:17 <heatsink> you can, but if they're hidden you won't find them.
01:07:50 <Boegel> weird
01:07:57 <Boegel> how do I save a file in vi ?
01:08:06 <heatsink> :w
01:08:27 <heatsink> :w save-as-this-filename
01:08:37 <Boegel> tell me how I can search for ^M ?
01:08:53 <Boegel> I got vi at univ, but that's 3 years ago, and I never used it since
01:08:59 <heatsink> To type ^M you need to type C-V C-M
01:09:06 <Boegel> uhu
01:09:07 <heatsink> The search command is
01:09:32 <heatsink> The search command is /^M
01:09:51 <Boegel> 'Pattern not found'
01:12:45 <heatsink> I think the ^M is there because removing those fixed the problem for me. VI is probably hiding it. If changing to unix format didn't help, then the only other thing I can think of is to write a program to remove the character.
01:14:13 <Maddas> heatsink: Did you fix it with a normal substitution?
01:15:00 <heatsink> Maddas: No. I deleted one character manually.
01:15:14 <Maddas> Ok :-)
01:15:29 <dottedmag> Boegel: check the grep `echo -e '\r'` < <your-file>
01:17:26 <Boegel> dottedmag, 1 emtpy line, no other output
01:17:51 <dottedmag> Boegel: there should be no output at all
01:18:01 <Boegel> weird :s
01:18:14 <Boegel> so there are \r characters in my file ?
01:18:39 <dottedmag> looks like this. Check this using 'hexdump -c'.
01:19:33 <Boegel> I see some \r characters idd
01:19:52 <Boegel> quit a lot actually :s
01:19:55 <dottedmag> you've got it
01:20:02 <dottedmag> use the dos2unix
01:20:12 <dottedmag> to strip'em all
01:20:36 <dottedmag> or perl -pe 's/\r\n/\n/g'
01:21:01 <Boegel> dottedmag, it worked
01:21:23 <Boegel> I thought I did that myself a few moments ago, aparently something went horribly worng :s
01:21:30 <Boegel> s/wrong/wrong
01:21:37 <Boegel> s/worng/wrong (damned)
01:21:46 <dottedmag> :)
01:22:15 <dottedmag> do you have \r\n in your file or just plain \r?
01:23:42 <Boegel> err, had :)
01:23:57 <dottedmag> ah. I'm giving up.
01:24:01 <Boegel> I can't check anymore now
01:24:07 <Boegel> but it works, so problem solved
01:24:26 <Boegel> I think I executed dos2unix, but then saved the file again in emacs (didn't re-open it)
01:24:29 <Boegel> stupid mistake:s
01:24:36 <dottedmag> :)
01:28:22 <Boegel> I'm out, doing some work
01:28:34 <Boegel> especially trying to solve my shadow problem
01:29:35 <heatsink> bye
01:29:47 * heatsink goes to sleep
01:57:34 <TheHunter> hmm, the scope rules for type variables suck.
01:58:07 <TheHunter> I didn't know that there are top-level expressions that can't even be given an explicit type signature
01:59:28 <TheHunter> stupidLaw a = return a == return a
02:00:51 <TheHunter> well, i'll have to use `phantom parameters'
04:09:18 <yeti> hi :)
04:09:33 <Oejet_> Hello, yeti.
04:19:53 * shapr hops
04:21:07 <dons> hey shapr
04:21:31 <shapr> g'day dons
04:22:19 <dons> quiz: what does the '#' key do in vi mode..?
04:22:24 <dons> vi command mode
04:23:23 <dons> "Increment or decrement the number under the cursor."
04:33:33 <shapr> huh, neat
04:41:28 <dons> replicateM_ is my new favourite function
04:42:37 <shapr> ?
04:44:50 * shapr yawns
04:45:32 <shapr> w00, 9 new patches
04:45:34 * shapr cheers
04:50:59 <dons> :)
05:03:47 <Boegel> hello everybody ! I found the bug in my program, so shadows ar ok now: http://studwww.ugent.be/~kehoste/thesisPublic/website
05:11:22 <dons> finding bugs is good :)
05:15:19 <Boegel> dons: idd, and especially stupid ones like this one :s
05:15:46 <Boegel> I have a distance function that was supposed to give back the distance between 2 points, but I implemented the formula wrong
05:15:54 <Boegel> and I was looking somewhere else for the bug :s
05:16:57 <melkart> why cant i do: main = do args <- getArgs
05:16:57 <melkart>           print arg where arg = ((map read args)::[Integer])
05:16:57 <melkart>  ? and how should i do it instead?
05:18:04 <Boegel> melkart, what do you want to do ?
05:19:13 <melkart> i want to decipher the arguments from the command-line, given as strings, to Integers
05:19:24 <melkart> and then do stuff with them
05:19:52 <Boegel> @type print
05:19:57 <lambdabot> print :: forall a. (Show a) => a -> IO ()
05:20:19 <Boegel> @type read
05:20:20 <lambdabot> read :: forall a. (Read a) => String -> a
05:20:33 <melkart> it says that args is not in scope
05:23:50 <bourbaki> moin
05:24:05 <Boegel> hello bourbaki 
05:24:16 <Boegel> bourbaki, check out my website, the shadow problem is solved :)
05:24:31 <bourbaki> url plz
05:24:42 <bourbaki> what was the prob?
05:24:49 <Boegel> melkart, did you use do { ... } or just do ... ?
05:25:06 <TheHunter> moin bourbaki 
05:25:18 <melkart> just do.... will try do {...} now
05:25:31 <TheHunter> melkart: you need to bind arg with let, ie.  let arg = ...; print arg
05:25:57 <bourbaki> Boegel your url plz :)
05:27:45 <Boegel> bourbaki, you can see it all on the website (some strange images) : http://studwww.ugent.be/~kehoste/thesisPublic/website
05:28:04 <melkart> thank you a lot, that works now.... i had tried let before but apparently screwed it up with the layout rule
05:30:15 <Boegel> melkart, how did you solve it ?
05:31:17 <Boegel> bourbaki, how do you like the pretty pictures ? :p
05:32:59 <melkart> Boegel: with let ... 
05:33:09 <melkart> but i must say, layout rule is evil, i think
05:33:13 <Boegel> did you try {...} ?
05:33:22 <melkart> because yesterday i had such strange results... 
05:33:34 <melkart> Boegel: yes, i will always use braces now
05:33:34 <bourbaki> Boegel really cool
05:33:58 <Boegel> bourbaki, next is specular reflection, and then probably perlin noise
05:34:03 <dons> melkart: you probably just had tabs in there
05:34:15 <Boegel> but I'll have to change the way i treat materials in order to do that
05:34:31 <bourbaki> does anyone happen to know if there is a haskell implementation that i can bind in c++ on a windows ce platform?
05:34:33 <Boegel> now a material is a data type, I'll have to change it to a function orso
05:34:48 <bourbaki> id like to use it for my two legged robo project
05:37:01 <skuggi> @type getArgs
05:37:02 <lambdabot> bzzt
05:37:18 <Boegel> @info getArgs
05:37:24 <Boegel> @index getArgs
05:37:24 <lambdabot> System.Environment,System
05:37:34 <Boegel> @type System.getArgs
05:37:35 <lambdabot> System.getArgs :: IO [String]
05:37:41 <Boegel> there you go skuggi  :)
05:37:43 <skuggi> ah
05:37:48 <skuggi> thanks :)
05:38:12 <Boegel> np
05:45:55 <Boegel> I'm out, taking a bath
05:45:55 <Boegel> bye !
05:45:59 <bourbaki> bye
06:05:14 <bourbaki> moin Philippa
06:05:18 <Philippa> 'lo
06:06:12 <Philippa> dunno if any of what I said yesterday was useful in the end, or just confusing?
06:06:35 <bourbaki>  Philippa about what?
06:06:56 <Philippa> arrows
06:07:49 <Philippa> I mean yeah, there was a lot of other stuff in the end :-)
06:08:19 <bourbaki> :)
06:08:43 <bourbaki> well i still dont see a real use of app but thats not much of a porblem really :)
06:09:03 <Philippa> there're plenty of uses of it, 'sjust we tend to build monads instead :-)
06:09:27 <Philippa> but it sounds like app might be what you're after - the ability for an arrow-based network to "self-modify"?
06:09:30 <bourbaki> well id like to use arrows more then monads at least of my thesis stuff
06:10:14 <bourbaki> i dont see where app helps me there since its just the application of a value to an arrow but what i need is to change the function of an arrow or add one and such
06:10:26 <tuomov> it might be useful to have "named connections" for better emulation of oop trees
06:10:59 <Philippa> bourbaki: you can hold the arrows as state, and at any given time app the input to whatever's in the state to get output
06:11:01 <bourbaki> named connection?
06:11:02 <tuomov> now you can have multiple children to an arrow by putting them in parallel
06:11:31 <bourbaki> Philippa but how do i get the output? app wont help there would it?
06:11:38 <tuomov> but to send a message to a child you can only index it by a suitable Left/Right combo
06:12:14 <tuomov> or however did those combinations go..
06:12:21 <Philippa> bourbaki: it'll help as much as >>> would
06:12:42 <Philippa> the result is spat out on the arrow-built-by-app's output
06:13:15 <bourbaki> Philippa but how do i get the real output when i use app? 
06:13:59 <Philippa> "real output"?
06:14:23 <bourbaki> app will give you an arrow again right?
06:14:39 <Philippa> sure. Or more accurately, app is a parameterised arrow
06:14:56 <bourbaki> (pure id) >>> app
06:14:57 <Philippa> erk, no it's not just for once
06:15:05 <Philippa> that's a type error :-)
06:15:18 <bourbaki> o.O it is?
06:15:44 <Philippa> yeah, you need to pass it a (value,operation) pair
06:16:28 <bourbaki> ((pure id),1) >>> app
06:16:44 <Philippa> nearly, the value's arrow input/output
06:17:02 <Philippa> pure ((pure id), 1) >>> app, IIRC
06:17:05 <bourbaki> ah ok now i get it what you meant yesterday
06:17:15 <bourbaki> with the &&&
06:17:19 <bourbaki> door sec
06:20:27 <bourbaki> bk
06:21:56 <Philippa> re
06:22:34 <bourbaki> thx
06:23:02 <bourbaki> ok what that would just make the input of the networks variable
06:23:25 <bourbaki> but not the arrows itself whats why im building something like a statemonad of the network
06:23:40 <bourbaki> and these function i need to tinker into the network itself
06:24:04 <Philippa> how about having a holdsState arrow - it reacts to one of Set, Get or RunThisThroughYou
06:24:20 <Philippa> (or rather, ThroughTheArrowInYourState)
06:25:03 <bourbaki> my problem with all that is that it feels like a vm in the end that way
06:25:22 <Philippa> sure. But isn't that getting on for what you're doing anyway?
06:25:29 <Philippa> To put it another way, isn't that what all arrows are anyway?
06:25:34 <bourbaki> i dont want to pass the values through the network by an external function
06:25:40 <bourbaki> no
06:25:52 <bourbaki> the idea is that you can collapse the network to a single function
06:26:28 <bourbaki> with an input vector and an output vector and im also thinking about how to do something like curry on the outputed function
06:26:53 <bourbaki> but with that functions that modify the network i need an external entity
06:26:55 <Philippa> so you have (the capacity to write) a RunNetwork function somewhere?
06:27:03 <bourbaki> right
06:27:08 <bourbaki> its like compile
06:27:13 <Philippa> these things aren't incompatible
06:27:20 <bourbaki> you build the network then compile it to a single function
06:27:46 <Philippa> you can write RunNetwork or the equivalent for pretty much any arrow worth a damn (you may not /want/ to, of course - cf the IO monad)
06:27:55 <bourbaki> well if the network change function is within the network it is there was no other way then doing it with a vm like thing ie a state monad
06:28:22 <Philippa> you don't need to, the arrow manages the state
06:28:29 <Philippa> you're probably looking at a pile of arrowLoop though
06:28:37 <bourbaki> the problem is that the external structure is dependant on what happens in the structure
06:29:01 <bourbaki> ie if a branch in that network is taken i want to add a new arrow to the network
06:29:30 <bourbaki> but its not the same scope of abstraction really
06:30:41 <bourbaki> the idea i had was to make all arrows domains tuples like this
06:30:54 <bourbaki> (network, foo) -> (network, bar)
06:31:07 <bourbaki> whereas foo -> bar is the usual thing of the arrow
06:31:37 <bourbaki> so an arrow can also modify the network
06:32:10 <bourbaki> but adding and subtraction and modifying needs a recompile so to say
06:33:04 <bourbaki> so i cant compile a network with a structure like this ... and i dont want to make it something like a vm ... i think ill have to force the user to think more fp like then
06:34:09 <bourbaki> that is you cant change the network from within
06:36:14 * dottedmag wonders is the ipv6 working for now.
06:36:15 <bourbaki> maybe i think to complicated
06:36:22 <Philippa> possibly
06:36:41 <Philippa> consider how to build a smalltalk-style OO arrow at first?
06:36:51 <Philippa> I mean yeah, you're looking at a VM, VMs are what arrows /are/...
06:37:35 <bourbaki> Philippa and how do i do it in a smalltalk way is there a paper on that?
06:38:15 <bourbaki> Philippa i use arrows maybe wrong then :) i use them to compile a function
06:38:26 <Philippa> same difference
06:39:33 <Philippa> though strictly speaking you're interpreting it
06:42:36 <bourbaki> though if i dont make the change of the network part of the network then i can also compile it to a single function
06:47:57 <mattam> @type nub
06:47:58 <lambdabot> bzzt
06:48:04 <mattam> @index nub
06:48:04 <bourbaki> @arr
06:48:04 <lambdabot> Data.List,List
06:48:04 <lambdabot> Prelude.(!!): index too large
06:48:23 <mattam> @type List.nub
06:48:24 <lambdabot> List.nub :: forall a. (Eq a) => [a] -> [a]
06:49:10 <mattam> lambdabot does not like @arr or.. ?
06:50:13 <peter^> hello,im trying to write a function(s) that given a node of a tree and a tree returns the parent of that node,the tree is not binary,tried many ways cant get it to work,canu help pls?
06:51:58 <Philippa> bourbaki: you can write RunFoo funcs for monads, so you can write 'em for ArrowApply
06:52:02 <Lemmih> peter^: You can post the code on the Haskell Wiki and we'll see what we can do.
06:52:12 <Lemmih> @wiki HaskellIrcPastePage
06:52:13 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
06:53:21 <peter^> k thanx
06:58:40 <Lemmih> Just let me know when you're done.
07:02:20 <bourbaki> moin shapr
07:02:26 <shapr> @seen CosmicRay
07:02:27 <lambdabot> I saw CosmicRay leaving #darcs 1 day 16 hours 31 minutes 9 seconds ago.
07:02:29 <shapr> hiya bourbaki 
07:03:19 <shapr> anyone tried CosmicRay's IPv6 on debian tutorial? http://master-www.complete.org/~jgoerzen/changelog_old/http/node/view/61.html
07:06:00 * shapr hops
07:06:02 <shapr> WAKE UP!
07:06:05 * shapr boings furiously
07:06:12 <shapr> time to code!
07:08:25 <Igloo> :-)
07:08:41 <shapr> hiii Igloo 
07:09:05 <shapr> hey, have you had time to look at yi?
07:09:32 <peti> Yo.
07:09:43 <shapr> y0 y0
07:09:45 <shapr> WAZZUP?
07:09:51 * shapr bounds around
07:09:52 <Igloo> No. I think I might add regex searching to it, but first there are other things I'd like to add to the library
07:10:10 <shapr> hey, Igloo, can I give out urls to minstrel and its libs?
07:10:12 * peti is designing config files.
07:10:19 <shapr> did you write up minstrel for HC&AR?
07:10:30 <Igloo> Yes, no
07:10:49 * peti is looking forward to the report.
07:10:50 * Igloo is still halfway through writing the help screen I think  :-/
07:10:53 <Igloo> Need more hours!
07:11:01 <peti> I got my text out just in the nick of time. :-)
07:11:49 <shapr> Igloo: release early and often! you could still send in a single line of text saying "Haskell curses music player using gstreamer - darcs get http://igloo.com/repos/minstrel"
07:12:28 <Igloo> It wasn't a deliberate decision, I just didn't think about it
07:12:40 <shapr> want me to send that in with the correct url? ;-)
07:12:50 <peti> shapr: I have been wondering whether a "Postmaster try-out" session would be good? Like, announce a day and time, meet in the #postmaster channel, and then I'll walk everybody through the installation and configuration who's interested. I fear the hurdle for getting the software up and running is too high otherwise at the moment. What do you think?
07:13:07 <Igloo> Isn't it too late?
07:13:18 <Philippa> perhaps, but they may accept it anyway
07:13:37 <shapr> right, deadline is passed, but kosmikus just might have time to pick up tiny entries.
07:13:48 <shapr> peti: I don't know, I haven't had time to try it out yet..
07:14:10 <shapr> peti: it seems unlikely to me that postmaster can be more trouble to setup than HaskellDB or HGL, but I could be wrong.
07:14:23 <bourbaki> @arr
07:14:27 <shapr> ahem
07:14:42 <peti> shapr: Hmmm. You're probably right.
07:14:44 <shapr> stoopid stack overflows :-/
07:14:49 <Philippa> shapr: or Haddock under win32 with a binary GHC distro? :-)
07:14:55 <shapr> Philippa: exactly
07:14:59 <shapr> @arr
07:15:00 <lambdabot> Ahoy mateys
07:15:02 <Philippa> which isn't saying much...
07:15:28 <peti> shapr: By the way, I've pulled the lambdabot repo every now and then, but there are no updates. Didn't you want to submit some patch yesterday or so?
07:15:48 <Philippa> "It seems unlikely to me that setting up postmaster can be more trouble than convincing a succesful male porn star to have a penectomy" :-)
07:16:00 <peti> hehe
07:16:35 <shapr> peti: yes, I still want to submit patches. Problem is that my local postfix only sends to ScannedInAvian.com via port 25, and my isp blocks 25 outgoing. I don't have the email submission port setup on ScannedInAvian.com, and rather than fixing both my local and remote postfix installations...
07:16:44 <shapr> I thought I'd just go through the postmaster tutorial, and try to set that up instead.
07:16:58 <Igloo> What causes the stack overflow, shapr?
07:17:07 * dottedmag hates stupid ISP
07:17:15 <shapr> first locally, and if it works, then I'll put it in place of postfix on *.ScannedInAvian.{com,org,net}
07:17:16 <peti> shapr: That sounds like a very good idea. :-)
07:17:27 <shapr> that should find bugs, if there are any.
07:18:00 <shapr> Igloo: I don't know... probably one of several small bugs that need fixing in lambdabot.
07:18:08 <peti> shapr: You bet there are! Handling external processes in Haskell (several of them, no less) is not exactly stable. I've had strange effects with GHC already.
07:18:24 <shapr> first of all, lambdabot doesn't 'reap children' so every @type and @info calls leaves a ghci zombie...
07:18:30 <peti> And the kludges I added to cope may not necessarily make things better. :-)
07:18:48 <shapr> well, I don't mind risking my local email
07:19:06 <shapr> and if that works, I'll risk the email of my fiancee, friends, and darcs repos =)
07:19:09 <peti> shapr: The good news is that if something goes wrong, then it usually goes wrong _after_ the mail has been delivered.
07:19:21 <peti> shapr: The problem is not running the local mailer, it is getting its exit code. 
07:19:28 <shapr> ?
07:19:41 <shapr> oh, that's the big discussion happening on ghc-users
07:19:49 <peti> Yes. 
07:20:07 <peti> I had to wrap the libraries routines with 'timeout' because they wouldn't return at random times. :-(
07:20:11 <shapr> where some 'call external process' thing is both too high-level and too low-level
07:20:38 <peti> shapr: Eventually I'll bite the bullet and use fork()/exec() via FFI and that's it. 
07:20:48 <shapr> yah, but the libs need fixing
07:20:57 <shapr> go go gadget marlow!
07:20:57 <peti> But then I'd be forever tied to Unix, and I'd like to have a Windows version, too. 
07:21:02 <shapr> oh right
07:21:22 <shapr> peti: hey, you can patch lambdabot if you want
07:21:33 <shapr> I added your key.
07:21:50 <peti> shapr: Cool! I'll take a look at the build system first then. :-)
07:21:59 <peti> Doesn't compile with ghc 6.3 here ...
07:22:06 <shapr> yah, I noticed that yesterday.
07:22:13 * peti thinks Darcs rocks.
07:22:30 <shapr> I'm not yet willing to invest the startup time that EvalModule frobbing will cost.
07:22:43 <shapr> that's Derek Elkins' nifty @eval command.
07:23:26 <peti> Is that the Derek Elkins who was involved with PGP 2.x back then?
07:23:44 <shapr> could be... would be scary though, since he recently hit 19 years old.
07:23:53 <peti> Then it's not him. :-)
07:24:21 <peti> So ... before I'll do anything else, I'll have to watch "Enterprise". :-)
07:24:26 <shapr> You never know... this derek elkins learned pretty much everything there is to know about Haskell in just a few months.
07:24:47 <peti> I hear T'Pol is going to be captured by the Orion slavers. I bet they put her into slinky outfits all the time then. Slavers always do that. :-)
07:24:53 * shapr laughs
07:25:05 <shapr> man, you are a serious trekker.
07:25:21 <Philippa> *ie*. Not "trekker", that's giving them respect ;-)
07:25:35 * shapr hides his DVD box sets of seasons of - ST:TNG/Voyager/DS9/etc
07:25:44 <peti> shapr: More or less, actually. I thought the show was pretty good, but it's spiraling downwards into dumbness ever since the last season. 
07:26:06 <shapr> I really liked the parts of andromeda that I've seen.
07:26:17 <peti> The problem is that once you've seen so much you can't stop because you want to know how things end!
07:26:19 <shapr> the sets and props were shite, but the social interactions are poweful.
07:26:22 <Philippa> shapr: DS9 as in "Star trek: Babylon 5"?
07:26:34 <shapr> Philippa: yah, pretty much. I really like DS9 though.
07:26:42 <peti> So I find myself watching ENT religiously, only to complani about it all the time afterwards. :-)
07:26:45 <Philippa> I still need to see B5 through properly
07:26:53 <shapr> I think DS9 ended up being one of the best, maybe because rick berman had less to do with it.
07:27:15 <Philippa> it had a better chance to do some of the morality exploration too
07:27:19 <peti> shapr: I hear to all the time! I haven't seen any of DS9, but it's supposed to be much better than ENT or Voyager are?
07:27:21 <Philippa> wasn't all easy setups fixed in a single ep
07:27:33 <shapr> oh, I checked a swedish book out of the library yesterday -  "liftarens guide till galaxen" 
07:27:46 <Philippa> as in H2G2?
07:27:46 <Maddas> shapr: heh!
07:27:53 <shapr> Philippa: yes =)
07:27:59 <shapr> peti: it is, in my opinion.
07:28:13 <shapr> voyager had some great episodes, but DS9 had great seasons.
07:28:15 <peti> shapr: You won't appreciate the Hitchhiker until you've read it in the Swedish original?
07:28:19 * shapr laughs
07:28:32 <shapr> only another trek addict would know that misquote.
07:28:36 <Philippa> much of Voyager was "we'll let them drool over 7 of 9 while providing enough plot for those to do so"
07:28:46 <shapr> hey, that worked for me.
07:29:03 * Philippa shrugs
07:29:10 <Philippa> if I want to drool over a female body I'll do it in person :-)
07:29:16 <shapr> sensible
07:29:18 <peti> Since us males are primitive anyway, we might as well enjoy it. Right? :-)
07:29:23 <shapr> right.
07:29:31 <shapr> I'm a clueless geek with no social skills, I take what I can get.
07:29:38 <shapr> er.. something like that.
07:29:45 <Maddas> :-)
07:29:50 <peti> shapr: At least TV women don't rearrange your desk. :-)
07:29:56 <shapr> right, exactly.
07:30:05 <Oejet_> And tell you to iron the shirt.
07:30:20 <dottedmag> clueless geeks with no social skills 
07:30:21 <shapr> I have to keep my room just messy enough that my german fiancee can't bear to spend time in here ;-)
07:30:21 <peti> Here, that's a great quote: "I hate women because they always know where things are." -- James Thurber (1894 - 1961)
07:30:23 <dottedmag> sorry
07:30:50 <Philippa> shapr: I do similar things to my b/f, it cuts both ways
07:30:51 <shapr> thurber was a great writer.
07:30:52 <Maddas> Hm
07:31:02 <tuomov> andromeda was ok for a while but it then it just repeating and repeating and repeating
07:31:12 <peti> And then we have: "Misogynist: A man who hates women as much as women hate one
07:31:12 <peti> another." -- H. L. Mencken (1880 - 1956)
07:31:18 <shapr> I haven't seem more than the first few andromeda episodes.
07:31:21 <tuomov> so I stopped watching it after season3
07:31:30 <dottedmag> for clueless geeks with no social skill there is esr's 'sexual tips for geeks'
07:32:03 <shapr> dottedmag: ahem.... having heard of how ESR practices sexuality from people who were there, I don't know if I'd want to read that.
07:32:13 <Philippa> peti: I'd complain were it not for some of the complete shite that came out of certain branches of feminism...
07:32:16 <dottedmag> :)
07:32:26 <tuomov> as for trek... season3 of enterprise was the best trek ever.. at least there was some continuity in it
07:32:32 <tuomov> but nothing has yet matched b5
07:32:39 <Philippa> shapr: odds on my feeling the need to floor him?
07:32:45 <tuomov> and voyager is total crap
07:32:46 <shapr> Anyway, polyamory is nearly always a *lot* more trouble than it's worth.
07:32:47 <peti> Philippa: I found that men are rather tame compared to the slandering some ladies do when they are alone. ;-)
07:32:57 <shapr> Philippa: floor him with a brickbat maybe...
07:33:27 <Philippa> peti: sure, we tend to be better at expressing it that way rather than just wanting to hit people and we tend to understand what we hate about somebody and why 
07:33:37 <Philippa> shapr: knuckles'll do
07:34:07 <shapr> I don't agree with the way ESR does relationships, but I still admire many things that he does.
07:34:27 * peti will watch Jolene Blalock express the despair at being sold as a sex slave now. :-)
07:34:33 <shapr> oboy ;-)
07:34:41 <peti> l8ter
07:34:50 * shapr pulls postmaster
07:34:57 <Philippa> shame, keeping slaves can be fun if they enjoy it
07:35:12 <Philippa> you perv, you're *how* many years older?
07:35:21 <shapr> um?
07:35:30 <shapr> darcs pull!
07:35:32 <Philippa> ahcrap, that one only works in british english doesn't it?
07:35:33 <shapr> sheesh
07:35:44 <Philippa> :-)
07:35:49 <shapr> yah, I'm from the place where they stopped speaking english :-P
07:35:53 <shapr> merkun only
07:35:54 * Philippa is in bad humour, enjoy :-)
07:35:59 * shapr grins
07:38:55 <shapr> hei ibid_
07:39:16 <shapr> dons: oh, I got PLog 0.6 warez if you want
07:40:11 <shapr> Igloo: you going to send in a one-liner on minstrel? or shall I?
07:41:04 <bourbaki> does anyone in here happen to have access to the AAAI papers and the papers of the symposiums (symposiae ?:)
07:41:14 <shapr> what's AAAI?
07:41:55 <bourbaki> The American Association for Artificial Intelligence
07:42:28 <shapr> oh
07:43:31 <bourbaki> http://www.aaai.org/Press/Reports/Symposia/Fall/fs-99-01.html this is what im looking for
07:57:37 <abstrato_general> I can't seem to write a simple factorial function :-|
07:57:57 <abstrato_general> "fact n = n * fact (n-1)" loads ok, but I get a C stack overflow
07:59:26 <abstrato_general> "fact n = n + fact (n-1)" gives me a C stack overflow too, for that matter.
07:59:37 <abstrato_general> so it's not just a matter of factorials getting too big for data types.
07:59:47 <Lemmih> abstrato_general: Did you forget the 'fact 0' case?
07:59:51 <abstrato_general> oh
07:59:54 <abstrato_general> sorry :)
07:59:57 <Lemmih> (-:
08:03:23 <abstrato_general> I'm trying to produce a factlist now.
08:03:26 <abstrato_general> factlist n = fact n : factlist n-1 
08:03:37 <abstrato_general> I did define "factlist 0 = [1]"  too.
08:03:47 <abstrato_general> but I get ERROR "c:\fact.hs":5 - Instance of Num [Integer] required for definition of fact
08:03:47 <abstrato_general> list 
08:04:31 <abstrato_general> oh forget about it
08:04:32 <abstrato_general> solved
08:05:03 <joao> Hello
08:05:06 <abstrato_general> hello Joao.
08:05:29 <joao> abstrato_general, hi, great nick. what does it mean? :)
08:05:55 <abstrato_general> it's actually "abstrato_generalizado", I usually hang out in another irc network; this one cuts off nicks at certain length
08:06:33 <joao> are you from brazil? or from a spanish language country?
08:06:56 <abstrato_general> brazil.
08:07:03 <abstrato_general> in spanish it's be "abstracto".
08:07:33 <joao> well, in portuguese (portugal) it's also abstracto :)
08:07:49 * joao waves from the other side of Atlantic :)
08:08:02 * shapr waves from the other side of the earth's core
08:09:06 <abstrato_general> ah, yes, of course :0
08:09:07 <abstrato_general> :)
08:09:17 * abstrato_general says stuff like "oiro" and "cousa" all the time.
08:20:31 <abstrato_general> lists are fun
08:21:48 <shapr> hey Si\, what's the word on relax NG and/or XML Schemas in Haskell?
08:21:58 <abstrato_general> is there a standard prelude function equivalent to "list_of_integers n = n : list_of_integers (n+1)"?
08:22:20 <tuomov> [1..]
08:22:24 <buggmuzz> [1..n]
08:22:26 <Si\> Relax NG is being done by the HXT team, XML Schema is being done by me
08:22:43 <shapr> ah, nifty
08:22:50 <abstrato_general> oh ok :-)
08:22:51 <abstrato_general> thanks.
08:23:11 <Si\> I can parse and write an XML Schema from Haskell with a complete set of data-types and map a few simple data-types, but that's about all as such
08:23:25 <Si\> I've dropped back to Generics for now to make some improvements
08:24:37 <shapr> sounds good
08:25:01 <Si\> You can view/hack the work I've done so far on my Savannah project page
08:25:25 <Si\> As far as Relax NG goes, I don't know
08:26:15 <Si\> but I have high hopes, and with a decent XSLT engine which they're also working on, we should be able to write some cracking stuff in XML
08:26:46 <shapr> cool :-)
08:27:52 <Igloo> shapr: You can if you want, as long as you make it clear it's in its infancy  :-)
08:28:44 <shapr> ok
08:30:10 <abstrato_general> I wish there was a simpler way to pick up the nth element of a list.
08:30:22 <shapr> abstrato_general: !!
08:30:33 <shapr> @typo (!!)
08:30:34 <lambdabot> Sorry, I don't know the command "typo", try "lambdabot: @listcommands"
08:30:35 <abstrato_general> I can do something like nth n = a:[] = last (take n list)
08:30:37 <shapr> doh
08:30:43 <shapr> @type (!!)
08:30:44 * abstrato_general is stupid :-)
08:30:45 <lambdabot> (!!) :: forall a. [a] -> Int -> a
08:30:56 <shapr> man, I can't believe I actually wrote @typo
08:31:00 <shapr> that's recursively funny.
08:31:01 <abstrato_general> (!!) :: [a] -> Int -> a
08:31:21 <abstrato_general> lol.
08:31:22 <psi_> shapr, haha
08:37:21 <abstrato_general> If I'm trying to declare a function with two parameters, the first of type Int and the second of type [Intefer]
08:37:38 <abstrato_general> is "din :: Int -> [Integer] -> Integer" appropriate?
08:37:45 <shapr> \x y -> z :: Int [Integer]
08:37:49 <shapr> er, yes
08:37:51 <shapr> you're right
08:37:53 * shapr is lost
08:41:31 <abstrato_general> din :: Int -> [Integer] -> Integer
08:41:31 <abstrato_general> din n list = (list !! n) - (list !! (n-1))
08:41:47 <abstrato_general> I get type errors. What can I be doing wrong?
08:42:17 <shapr> what happens if you change them all to Int, or all to Integer?
08:42:25 <shapr> abstrato_general: what's the actual error?
08:42:26 <abstrato_general> !! expects Int.
08:42:38 <abstrato_general> So if I change them to Integer, I have to use fromInteger
08:42:43 <abstrato_general> and get the same error after that.
08:42:51 <abstrato_general> ERROR "c:\listproc.hs":5 - Type error in application
08:42:52 <abstrato_general> *** Expression     : din n
08:42:52 <abstrato_general> *** Term           : n
08:42:52 <abstrato_general> *** Type           : [Integer]
08:42:52 <abstrato_general> *** Does not match : Int 
08:43:18 <shapr> aha
08:43:28 <shapr> that makes sense, doesn't it?
08:43:40 <abstrato_general> how so? 
08:43:42 <abstrato_general> @type !!
08:43:43 <lambdabot> bzzt
08:43:47 <abstrato_general> @type (!!)
08:43:48 <lambdabot> (!!) :: forall a. [a] -> Int -> a
08:43:57 <abstrato_general> but,
08:44:10 <abstrato_general> Prelude> [1..100] !! 5
08:44:10 <abstrato_general> 6   
08:44:14 <abstrato_general> not [6]
08:44:23 <abstrato_general> :-|
08:44:46 <shapr> abstrato_general: check line 5
08:45:32 <shapr> abstrato_general: what type does din want for its first argument?
08:45:59 <abstrato_general> hmm. weird. it was an error in another function. I comment it out and everything works.
08:46:13 <shapr> right, that's what the error said.
08:46:15 <shapr> greetz atom-z 
08:46:20 <atom-z> hi
08:46:23 <abstrato_general> bah. These error messages are misleading. The problem was in a function that called din, not in din itself.
08:46:27 <shapr> atom-z: how's code?
08:46:37 <shapr> abstrato_general: no, the error message said exactly that.
08:46:46 <shapr> "Type error in application"
08:46:52 <abstrato_general> I guess, I need to get used to them :-|
08:46:53 <abstrato_general> sorry.
08:47:00 <atom-z> havent done any recently
08:47:04 <shapr> atom-z: oh no!
08:48:48 <abstrato_general> Can a list contain other lists?
08:48:54 <abstrato_general> So I can have, like, matrixes?
08:49:04 <shapr> abstrato_general: try it
08:49:25 * abstrato_general is thinking of porting over his Matlab stuff.
08:50:06 <shapr> I've read about some people doing heavy matrix math in Haskell, but I haven't done any myself.
08:50:21 <shapr> you may want to check out the nested data parallel array though.
08:50:36 <abstrato_general> I'd guess they've written libraries for basic matrix operations already, then?
08:50:44 <shapr> it's cool, you can flatten and parallelize array operations with PArr.
08:51:00 <abstrato_general> I don't even need much. I need multiplications, Kronecker products and eigenvalues.
08:51:18 <shapr> I think eigen is such a cool word.
08:51:41 <shapr> right on up there with gnägga
08:51:53 <psi_> heh
08:52:08 <shapr> hej psi_, kodar du?
08:52:13 <shapr> y0 jak, ltns
08:52:17 <abstrato_general> eigen = self.
08:52:17 <bourbaki> abstrato_general and what do you need these for?
08:52:21 <shapr> greetz viv, how was work?
08:52:21 <jak> hi shapr
08:52:22 <psi_> shapr, inte för tillfället :)
08:52:32 <abstrato_general> I work with neural networks for time-series modelling.
08:52:36 <psi_> shapr, i had an haskell exam two days ago, though
08:52:48 <bourbaki> abstrato_general oh interesting hop on #ai
08:52:49 <shapr> abstrato_general: yah, it's "egen" in swedish. I still like the german spelling of "eigen" though.
08:53:05 <shapr> psi_: how did you do?
08:53:10 <shapr> jak: written any cool code lately?
08:53:15 <abstrato_general> there is an #ai
08:53:20 <bourbaki> abstrato_general yep :)
08:54:08 <psi_> shapr: good, i think. we haven't got the results yet, but i can only think of one small mistake that i did
08:54:30 <psi_> which wasn't really relevant.. so i'll get a 5 i think :)
08:54:36 <shapr> nice :-)
08:56:47 <psi_> which gui toolkit for haskell is easiest to construct apps with?
08:57:14 <shapr> I dunno, but wxHaskell seems to be the 'standard'
08:57:36 <Oejet_> psi_: WxHaskell is quite easy.
08:57:58 <psi_> ok, thanks
08:58:45 <jak> shapr: not recently. Currently working on the Mac OS port of darwinia ( http://www.darwinia.co.uk )
08:59:01 <jak> Unfortunately C++ rather than Haskell :)
08:59:55 <shapr> you work at Introversion?
09:00:32 <shapr> uplink demo was broke last I checked.
09:00:37 <shapr> (linux demo, that is)
09:02:54 <shapr> hm, both hws-wp and lambdabot would be simpler if they used hs-plugins instead of RuntimeLoader.
09:02:55 <abstrato_general> when using !!, I get a "Program error: Prelude.!!: index too large " after just a few elements.
09:06:38 <Lemmih> abstrato_general: You didn't expect that?
09:10:14 <abstrato_general> Lemmih uh, no. wh y?
09:11:31 <shapr> tjena flaw 
09:11:33 <Oejet_> shapr: Could you say, where you saw the Haskell matrix code?
09:12:06 <shapr> Oejet_: I do not know. but I have google and ~200mb of archives in ~/haskell/
09:12:18 <flaw> tjena?
09:12:24 <shapr> flaw: that's swedish for y0
09:12:30 * shapr feels random today.
09:12:39 <flaw> ic
09:12:43 <flaw> guten tag
09:12:47 <shapr> maybe tjena is "hey" and tja is y0
09:12:51 <shapr> psi_: what do you think?
09:16:21 <psi_> i think so too
09:16:47 <shapr> ok
09:17:06 <psi_> but it's a small difference :)
09:18:19 <yeti> i don't understand these higher-order functions. i'm reading yaht, it says a -> a -> a is the same as a -> ( a -> a ) - so a function of the type a -> a -> a takes an argument of type a und returns a function of type a -> a, right?
09:18:30 <Lor> Right.
09:18:32 <Igloo> Right
09:18:48 <shapr> silly question, can I put a non-standard port into my mx record?
09:18:49 <Igloo> e.g. add 3 :: Int -> Int
09:19:16 <Igloo> (if add :: Int -> Int -> Int; add x y = x + y)
09:19:21 <Igloo> shapr: No
09:19:21 <shapr> alternatively, can I do name-based virtual hosting with MTAs? =)
09:19:25 <yeti> so how is (+) of type a -> a -> a then? (+) takes two arguments of type a and returns one argument of type a, doesnt it?
09:19:30 <Igloo> And again no
09:19:40 <Igloo> No
09:20:02 <Lor> "x + y" is syntactic sugar for (((+) x) y)
09:20:04 <Igloo> 5 + 6 = (+) 5 6 = ((+) 5) 6
09:20:16 <shapr> suck. I want to run postmaster for all my ScannedInAvian.net mail, and postfix for ScannedInAvian.{com,org}
09:20:34 <Igloo> (+) is exactly the same as add above, but I didn't know if the (+) notation would confuse you  :-)
09:20:40 * flaw scratches head
09:20:48 <Igloo> shapr: You only have 1 IP?
09:20:50 * shapr scratches flaw's headd
09:20:53 <shapr> Igloo: yes, sadly.
09:21:19 <flaw> you can if you dont mind accessing the account as 'user@host.com'..
09:21:20 <shapr> I wonder if I can wrap the whole thing in inetd or xinetd to get virtual hosting.
09:21:29 <shapr> flaw: eh?
09:21:41 <yeti> Igloo, Lor: thanks :) you know, that stuff is quite difficult to understand if you do it for the first time - i know some of the mathematical background, but it's difficult to apply it in your thoughts :)
09:21:43 <flaw> as the login name
09:21:53 <shapr> flaw: expliquez!
09:21:59 <shapr> je ne comprend pas
09:22:10 <shapr> hur kan man gör det?
09:22:30 <shapr> whatchoo talkin bout willis?
09:23:18 <shapr> I could seriously make a living as /dev/random
09:23:21 <flaw> that's how you do the name based virtual hosting.. delivery is no problem..
09:23:35 <shapr> I don't get it, how?
09:23:49 <flaw> you specify the virtual host in the login
09:24:13 <Lor> flaw, we are talking about smtp here, not imap.
09:25:23 <Lor> Usually all the mail to the different virtual hosts goes to a single mta.
09:25:37 <flaw> Lor: *shrug*, he asked if he could do name-based virtual hosting..
09:25:43 <shapr> flaw: ScannedInAvian.com and .net are on the same IP. but if I do this thing you're talking about, then email to ScannedInAvian.com can be handled by a different MTA than the .net MTA?
09:26:17 <Lor> I don't think it's possible.
09:26:51 <Lor> (Of course you can have a frontend MTA that dispatches the mail forward depending on the domain in RCPT).
09:27:01 <shapr> yah, but that sort of defeats the purpose.
09:27:28 <Lor> Yeah. No can do, I fear.
09:27:37 <shapr> suck.
09:27:40 <flaw> hrm
09:27:43 <Lor> smtp is such an old protocol that it doesn't support the level of virtualization and redirection as http.
09:28:02 <flaw> well, I dunno. I have rhid.com, and I handle mail for a couple other domains with the same MTA..
09:28:08 <shapr> yah, me too.
09:28:16 <shapr> but I want different MTAs for different domains, on the same IP.
09:28:42 <shapr> hm!
09:28:47 <shapr> I know how!
09:28:58 <Lor> E.g. iki.fi, which essentially just provides virtual domains and mail and web addresses, can just redirect http requests to www.iki.fi/youraccount/foo, but mail to youraccount@iki.fi has to be received and sent forward
09:29:04 <shapr> I could put Postmaster on IPv6
09:29:07 <flaw> why do you want to do that?
09:29:21 <shapr> flaw: because, there is a new MTA written in Haskell.
09:29:22 <flaw> have different MTAs, that is.
09:29:24 <shapr> and I want to use it.
09:29:33 <shapr> but my fiancee wants to get her mail.
09:30:28 <flaw> ic now
09:30:53 <shapr> If I run some experimental Haskell MTA for our business email, and it breaks... I'll be in the doghouse.
09:32:15 <shapr> and if it really breaks bad, I might not be able to pay my colocation bill, and that would really suck.
09:33:02 <Igloo> Do you have a ~real-time graph of bandwidth usage?
09:33:40 <shapr> only one that I've installed myself.
09:39:59 <jak> shapr: you're right about the uplink demo. Need to redo it at some point :)
09:40:28 <shapr> please please?
09:40:34 <shapr> I might actually buy it...
09:40:42 <shapr> I wish it didn't require OpenGL though :-/
09:52:33 <abstrato_general> hello.
09:52:37 <abstrato_general> mo' trouble.
09:52:57 <abstrato_general> let's say I have an arbitrary list
09:52:58 <abstrato_general> din n list = (list !! fromInteger(n)) - (list !! fromInteger(n-1))
09:53:04 <abstrato_general> that is a function.
09:53:12 <abstrato_general> diff n list = din n list : diff (n+1) list
09:53:32 <shapr> um
09:53:34 <abstrato_general> that is a function generating an infinite list. except I don't want to generate an infinite list, I just want it to be executed while there are elements in list.
09:53:37 <shapr> you need a base case
09:53:55 <shapr> do you want the established solution? or just a hint?
09:53:59 <abstrato_general> like din(1)=0 or something? That's not the problem.
09:54:05 <abstrato_general> The established solution would be fine :)
09:54:12 <shapr> you're doing fib, right?
09:54:25 <shapr> fibonacci?
09:54:36 * shapr pokes abstrato_general 
09:54:39 <abstrato_general> nope. I'm trying to make a function that takes the first difference of an arbitrary finite list
09:54:45 <shapr> oh
09:55:06 <shapr> huh?
09:55:23 <shapr> so, with 11111122222333 it gives 12?
09:55:31 <abstrato_general> say I have a list like [x1,x2,x3,x4,x5]
09:55:42 <abstrato_general> I want to produce the list [x2-x1, x3-x2, x4-x3, x5-x4]
09:56:01 <tromp> rehi
09:56:06 <shapr> re tromp 
09:56:13 <abstrato_general> hello, tromp.
09:56:25 <shapr> hmm
09:56:31 <shapr> list comp might be the simplest approach there.
09:56:34 <tromp> seems there's no lib function to give digits of a number in arbitrary base...
09:56:50 <abstrato_general> tromp you can do that with logarithms.
09:56:53 <dash> hello shapr!
09:56:57 <shapr> tromp: no, there are functions for set bases in NumExts, but I've always wanted an arbitrary base function
09:56:58 <tromp> like digits 6 2 = [0,1,1]
09:56:59 <shapr> y0 dash!
09:57:12 <tromp> i know how to do it, just looking for most concise expression:)
09:57:20 <abstrato_general> Number of digits of decimal number x in base b = the integer immediately to the right of ln(decimal)/ln(base)
09:57:21 <shapr> dash: it's nice to see you here, last time I saw you on a regular basis was ... nearly four years ago?
09:57:23 <tromp> got my goodstein definition down to 82 chars
09:57:28 <dash> shapr: Possibly
09:57:32 <tromp> trying to make it 1 line:)
09:57:42 <shapr> tromp: oy, I'd prefer easy to understand =)
09:57:49 <shapr> tromp: unless you're aiming for the next IOHCC
09:58:04 <tromp> it now looks like
09:58:07 <tromp> g b 0=b;g b n=g c$s 0 n-1where s e 0=0;s e n=mod n b*c^s 0 e+s(e+1)(div n b);c=b+1
09:58:08 <dash> shapr: My lisp interpreter proceeds
09:58:09 <shapr> on the other hand, sometimes "most concise" in Haskell is also easiest to understand.
09:58:10 <abstrato_general> "list comp"? 
09:58:14 <shapr> dash: happiness!
09:58:29 <dash> shapr: I can 't help but feel that I'm doinbg simething terribly wrong with the parse tree though
09:58:54 <shapr> dash: could be, but once it works, you'll probably figure it out in a big flash of understanding.
09:58:57 <abstrato_general> what is a list comp?
09:59:00 <dash> well, it does work
09:59:00 <shapr> that's what happens to me most of the time
09:59:06 <dash> no flashes are coming though
09:59:09 <dash> http://ghostwheel.ddts.net/~washort/arnis.hs
09:59:36 <abstrato_general> ohhhh. now I know what to do. silly me.
09:59:44 <shapr> abstrato_general: [ x+y | x <- [1,2,3], y <- [4,5,6] ]
09:59:51 <shapr> "list comprehensions"
09:59:53 <dash> in particular, Quotable and all the functions under it bother me a little :)
09:59:56 <tromp> ah, i saved another char!
10:00:08 <shapr> doh, wrong button
10:00:15 <dash> the backquote stuff is an attempt to turn the r5rs grammar for backquote into code
10:00:22 <tromp> u don't need space between a number and a function
10:00:39 <shapr> what was that url again?
10:00:39 <dash> tromp: haskell golf? :)
10:00:43 <dash> http://ghostwheel.ddts.net/~washort/arnis.hs
10:00:48 <tromp> so (+) 0 a can be (+)0a
10:01:08 <shapr> tromp: I don't think so...
10:01:14 <Lor> That won't work.
10:01:23 <shapr> 0 + a will work
10:01:33 <tromp> ghci swallowed it
10:01:37 <Lor> Oops, it does.
10:01:39 <abstrato_general> say I have two lists.
10:01:40 <shapr> !
10:01:41 <Lor> But it's Bad Style.
10:01:42 <abstrato_general> [a1,a2,a3]
10:01:47 <abstrato_general> and [b1,b2,b3]
10:01:58 <abstrato_general> I want to come up with list [a1-b1, a2-b2, a3-b3].
10:02:04 <tromp> it's IOHCC style
10:02:09 <abstrato_general> I know map is involved somewhere, but I can't get it to work.
10:02:18 <shapr> abstrato_general: zipWith (-) list1 list2
10:02:24 <tromp> in love and war and iohcc, anything goes
10:02:24 <abstrato_general> zipWith :)
10:02:31 <Lor> Argh, 0x parses as 0 x, 0x0 parses as the hexadecimal constant 0.
10:02:33 <abstrato_general> merci beaucoup fish :)
10:02:39 <Lor> and x0 parses as the identifier x0.
10:02:48 <shapr> Lor: that's terrifying.
10:03:02 <Etaoin> abstrato_general: or if you really want to use map: map (-) (zip list1 list2)
10:03:16 <shapr> I'll never be able to read IOHCC sources again.
10:03:21 <Lor> Etaoin, you mean uncurry (-)?
10:03:47 <Lor> Anyway, zipWith is simpler.
10:03:48 <Etaoin> Lor: oh. sure
10:03:53 <Etaoin> yeah, use zipWith
10:04:09 <yeti> <abstrato_general> say I have a list like [x1,x2,x3,x4,x5] ; I want to produce the list [x2-x1, x3-x2, x4-x3, x5-x4] <= i think i have found a solution for that one :) (heh, i'm proud of myself :D)
10:04:36 <yeti> diffl [x1,x2] = [x2-x1]
10:04:36 <yeti> diffl (x3:x4:xs) = (diffl [x3,x4]) ++ (diffl (x4:xs))
10:04:41 <yeti> that should work, no?
10:04:51 <yeti> i tested it, seems to work here :)
10:05:09 <shapr> dash: what was the part you thought could be better?
10:05:45 <dash> shapr: the NestedQuote bit especially
10:06:15 <dash> shapr: my types are getting pretty deep :)
10:07:09 <abstrato_general> diff list = zipWith (-) (drop 1 list) (reverse (drop 1 (reverse list)))
10:07:12 <abstrato_general> yippee. wonderful.
10:07:45 <shapr> tail = drop 1
10:07:58 <shapr> init = reverse . drop 1 . reverse
10:08:25 <shapr> dash: gah, I'd have to work myself into that...
10:09:28 <abstrato_general> how do I include System.Random in a .hs file?
10:09:30 <tromp> ok, 80 chars exactly now:
10:09:31 <tromp> g b 0=b;g b n=g c$s 0n-1where s e 0=0;s e n=mod n b*c^s 0e+s(e+1)(div n b);c=b+1~
10:09:57 <dash> shapr: ok :) i've gotta head out for a bit, no need to dive all the way in :)
10:10:06 <shapr> awright
10:11:45 <abstrato_general> diff list = zipWith (-) (tail list) (init list)
10:24:31 <shapr> peter^: who are you?
10:25:55 <peter^> a friend
10:26:10 <shapr> Are you learning Haskell?
10:26:42 <peter^> yeh
10:26:53 <peter^> doing trees currently
10:26:59 <shapr> learning for fun or for school?
10:27:13 <peter^> both
10:27:32 <shapr> ok :-)
10:27:46 <shapr> trees in Haskell are nice.
10:28:58 <peter^> yeh im trying to write a function for a long time now that given an item(that will be the child) and a tree will return the parent in that tree
10:29:04 <peter^> but cant get it to work
10:29:33 <peter^> tree not binary
10:30:12 <shapr> depends on the tree type
10:30:32 <peter^> data Tree a = Single a | Leaf (a,a) | Node (a,a) [Tree a]
10:30:55 <shapr> what have you tried so far?
10:31:00 <peter^> single and leaf have no children in the tree
10:31:33 <peter^> parent :: Eq a => a -> Tree a -> Maybe (a,a)
10:31:34 <peter^> parent x (Node (a,b) [Single c]) 
10:31:34 <peter^> 	|x==c = Just (a,b)
10:31:34 <peter^> 	|otherwise = Nothing
10:31:34 <peter^> parent x (Node (a,b) [Leaf (c,d)]) 
10:31:34 <peter^> 	|x==c = Just (a,b) 
10:31:36 <peter^> --	|a==c = Just ([],[])
10:31:38 <peter^> 	|otherwise = Nothing
10:31:40 <peter^> parent x (Node (a,b) [Node (c,d) list] )
10:31:42 <peter^> 	|x==c = Just (a,b)
10:31:44 <peter^> 	|otherwise = Nothing
10:31:46 <peter^> parent x ( Node(c,d) [ Node (a,b) list ] ) 
10:31:48 <peter^> 	|x==c || x==d = Just 
10:31:50 <peter^> 	|otherwise = lali x [ Node (a,b) list ]
10:31:52 <peter^> --	|otherwise = Just 
10:31:59 <shapr> hey, three lines is about the max you can paste here without asking beforehand
10:32:07 <shapr> there's a paste page
10:32:12 <peter^> ok sorry
10:32:19 <peter^> didnt know
10:32:23 <shapr> no worries :-)
10:32:33 <shapr> first time is okay, if you didn't know.
10:33:33 <Lor> Besides, if your function is longer than three lines, you're probably doing something wrong anyway. :)
10:33:42 <peter^> :)
10:34:04 <peter^> haskell is lazy not that lazy
10:34:04 <shapr> peter^: do you know how to map over a tree?
10:34:26 <peter^> u mean go up and down?
10:34:33 <shapr> do you know the function map?
10:34:35 <peter^> yes
10:34:47 <shapr> do you know how to use that function on a tree?
10:35:01 <peter^> no
10:35:32 <shapr> well, if you can figure that out, you might be able to map a (hasChild x) function over the tree.
10:37:12 <peter^> hmm
10:37:26 <shapr> the advantage of using map is that your datastructure traversal is separate from your comparison/filter/whatever function.
10:38:02 <shapr> That's a pretty standard idea in Haskell, separate traversal patterns from 'operation' functions, or whatever you want to call 'em.
10:42:50 * Lemmih is thinking of a Haskell apache module.
10:43:07 <shapr> there's an old one, but a new one using hs-plugins would be spiffy.
10:44:08 <peter^> (hasChild x) will check exactly wot?
10:45:40 <peter^> ok
10:45:57 <Lemmih> The old module was just some niffy Hugs code.
10:48:06 <Lemmih> Has greencard been tested with GHC 6.2.1? I'm getting 'ghc-6.2.1: unrecognised flags: -fno-prune-tydecls' when I try to compile it.
10:48:11 <Lor> arguably, hs-plugins is just some nifty GHC code. :)
10:54:56 <Lemmih> Are there other ways of calling Haskell from C than Greencard?
10:59:23 <Lemmih> shapr: Can I expect HSQL and HDB on haskell.org anytime soon?
11:03:35 <bourbaki> anyone in here familiar with markov models?
11:05:32 <abstrato_general> Markov chains?
11:05:45 <abstrato_general> My best friend is working on  those things.
11:06:45 <bourbaki> abstrato_general but youre not familiar with it?
11:07:44 <abstrato_general> just the very basics. Why do you need'em?
11:08:08 <abstrato_general> You might want to learn some proper mathematical statistics before delving into such things.
11:08:20 <bourbaki> im just reading on reinforcement learning and its based on markov chains
11:08:36 <abstrato_general> well, you do need to know some heavy mathematical statistics.
11:08:42 <bourbaki> ive had courses in statistics
11:08:57 <abstrato_general> and probability?
11:09:01 <bourbaki> yes
11:09:12 <abstrato_general> hmm. sounds good.
11:10:17 <abstrato_general> I like Shiryaev's book.
11:10:21 <abstrato_general> I forget the title.
11:11:36 <tuomov> hmm.. I don't think  you need anything at that level for basic markov stuff
11:12:42 <tuomov> although, shiryaev did have a fairly basic long introductory part too iirc
11:12:44 <abstrato_general> maybe. The applications of markov chains I know are all in modelling of dynamic stochastic systems.
11:13:01 <abstrato_general> for time-series prediction and all.
11:13:36 <Etaoin> is there a haskell equivalent to the pythonic "import deeply.nested.package as shortname"?
11:13:48 <tuomov> just that?
11:14:17 <mattam> import qualified package as alias
11:14:34 <tuomov> do you need qualified?
11:14:43 <mattam> not sure
11:15:12 <Etaoin> well, if you want it to act _exactly_ like the python code you do don't you?
11:15:23 <Etaoin> anyway, thanks.
11:15:44 <mattam> probably
11:15:54 <tuomov> I seem to be using just 'import System.Posix.Signals as PosixSig' in riot..
11:16:28 <mattam> and the Signals stuff _has_ to be prefixed ? 
11:16:39 <tuomov> I have not tested
11:17:07 <tuomov> no, it doesn't
11:17:08 <mattam> you don't know more than I do then :)
11:17:22 <Etaoin> I have been programmed by the python community to dislike from package import *
11:17:34 <mattam> ok, so with qualified it is like python's import
11:17:43 <Etaoin> I think so
11:17:44 <tuomov> yeah. strange.
11:17:50 <tuomov> I would've expected 'as' to automagically qualify
11:17:58 <tuomov> why else would you do so?
11:18:03 <mattam> it makes sense, given qualified exists
11:18:12 <tuomov> no it doesn't make sense..
11:18:21 <tuomov> 'import foo as bar' makes no sense
11:18:25 <mattam> if you use different typeclasses for example
11:18:32 <tuomov> unless it is automagically qualified
11:18:37 <mattam> i mean, different instances
11:19:20 <mattam> sometimes you have to disambiguate by giving a fully qualified name, hence the alias sugar
11:22:16 <tuomov> well, perhaps. But I think it is wrong in the first place to refer to two things with the same name. The compiler should immediately fail when attempting to import so
11:24:29 <stepcut> any got a recommendation for an online radio station ?
11:24:53 <mattam> that would make it impossible to use two instances of the same typeclass in a module, which some people like to do without qualifying everything (there's an inference algorithm, so why not use it ? :)
11:25:56 <mattam> but you're right, I think 'best practice' is to qualify enough so that the referee is clear from local context.
11:25:59 <tuomov> typeclasses are special..
11:26:34 <tuomov> but say you have two modules that export the non-typeclass symbol 'foo'
11:26:54 <tuomov> then you'd have to e.g. import Baz(foo as fooBaz) or something
11:27:10 <mattam> then foo is ambiguous and the compiler will issue an error
11:32:12 * mattam listens to Pressure Chief for the 50th time with renewed joy
11:39:22 <stepcut> it seems like more and more these days, I browse web pages via google's cache, because the actual site is too f'ing slow
11:41:48 <tuomov> some kind of nntp-like architechture would be nice for web content
11:42:00 <tuomov> esp. wikipedia could do with such
11:44:01 <tuomov> as an added benefit, you could easily see changes to the pages you want to monitor
11:47:56 <tuomov> to prevent spam propagation, it should, however, only retrieve content locally when first requested
12:14:26 <tromp> what does # mean in haskell?
12:18:39 <stepcut> tromp: whatever you define it to mean
12:18:48 <stepcut> tromp: are you seeing it in use somewhere ?
12:28:21 <TheHunter> tromp: http://www.haskell.org/ghc/docs/latest/html/users_guide/primitives.html
12:30:58 * stepcut didn't consider that posibility
12:31:08 <stepcut> I figured he meant # as in infix operator...
12:44:55 <tromp> any1 know what # does?
12:45:27 <TheHunter> tromp: http://www.haskell.org/ghc/docs/latest/html/users_guide/primitives.html
12:46:02 <stepcut> tromp: in what context ?
12:49:27 <bourbaki> moin
12:51:40 <Lemmih> Hey bourbaki
12:55:35 <tromp> thx, thehunter
12:55:46 <tromp> i saw it in the OOP in haskell paper
12:56:52 <melkart> why does this not compile: [1/16^k*k | k <- [1..8]] and how can i fix it? it says Ambiguous type variable `b' in these top-level constraints
12:57:57 <stepcut> tromp: was it used as in infix operator ?
12:58:18 <tromp> yes, like p # getX >>= print
12:58:29 <tromp> not sure how precedence applies there
12:58:47 <stepcut> tromp: # is something they defined themselves then
12:58:55 <TheHunter> ok, then it has nothing to do with unboxed types...
12:59:01 <melkart> sorry fixed it now alredy
12:59:05 <tromp> they explained nothing about it
12:59:13 <stepcut> I believe they are using it to select fields from records
12:59:31 <stepcut> tromp: you might need to read the paper on hetrogeneous lists 
12:59:37 <stepcut> hlist
12:59:47 <TheHunter> melkart: 1/16^(k*k)?
12:59:47 <tromp> http://www.cwi.nl/~ralf/OOHaskell/
12:59:49 <stepcut> the OOP stuff is built on top of hlists
13:00:14 <tromp> i'll do that
13:01:36 <tromp> @index (/)
13:01:36 <lambdabot> bzzt
13:03:39 <stepcut> yeah! I finally got my window closed with a little help from my friend the hammer
13:03:46 <Philippa_> is there a clean way to do a read that might fail and catch the failure in Haskell 98 w/hierarchical libs but no GHC dependancy?
13:04:17 <melkart> TheHunter: it needs once an integer, for (^), and once a fractional, for (*), so i need to give it him...
13:04:29 <goron> Philippa_: failure as in "error"?
13:05:42 <TheHunter> melkart: it should mean (1/(16^k))*k, right?
13:05:52 <melkart> TheHunter: yes
13:06:16 <tromp> the required types for / and ^ conflict
13:06:48 <TheHunter> [1/(fromInteger $ 16^k)*fromInteger k | k <- [1..16]]
13:07:11 <Philippa_> goron: hopefully fail as in chuck an IO exception, or a way to catch it before it runs error
13:07:18 <TheHunter> or you could use ** instead of ^
13:07:35 <Philippa_> it's only Int I need to do this on, but the incoming data is far from trustworthy. Should I just use parsec again?
13:07:47 <melkart> ah, thank you
13:20:21 * esap tries one-day-old ghc :-)
13:20:28 <Philippa_> heh
13:22:55 <stepcut> Philippa_: you could use reads instead of read 
13:23:02 <stepcut> reads "1"  :: [(Int,String)]
13:23:06 <stepcut> [(1,"")]
13:23:37 <stepcut> reads "a"  :: [(Int,String)]
13:23:40 <stepcut> []
13:24:31 <TheHunter> that's why i have LC_MESSAGES="en_US"...
13:24:51 <Philippa_> stepcut: what will it do for reads "1 foo 3" :: [(Int, String)], to give an example?
13:25:01 <Philippa_> is it safe for me to just take the head?
13:25:14 <stepcut> [(1," foo 3")]
13:26:04 <stepcut> Philippa_: dunno, I am not sure when, if ever, reads returns more than one element
13:27:50 <goron> Philippa_: It *is* possible to catch the function error (at least in GHC).
13:28:10 <stepcut> Philippa_: i *think* read may just use the first element
13:28:23 <Philippa_> goron: I need something that's Haskell 98 plus the non-GHC-specific bits of the hierarchical libs, GHC-specific isn't good enough
13:28:41 <stepcut> Philippa_: or fail with 'ambiguous parse if there is more than one match'
13:28:58 <Philippa_> it's for Flippi, and interpreting Flippi strikes me as a very natural thing to do - makes the source pretty literally the config files
13:29:41 <goron> Philippa_: I am not sure whether it's GHC specific (although I remember something about GHC black magic). To your information: I used the ErrorT monadtransformer, and an identity monad. And that worked great. :)
13:37:11 <goron> @seen dons
13:37:11 <lambdabot> dons is in #haskell.
13:37:33 <stepcut> heh
13:37:38 <stepcut> @seen goron
13:37:39 <lambdabot> goron is in #haskell.
13:37:57 <goron> @seen lambabot
13:37:58 <lambdabot> I haven't seen lambabot
13:38:03 <goron> :-)
13:38:22 <goron> shapr: Is this a bug or a feature?
13:38:27 <stepcut> @seen lambdabot
13:38:27 <lambdabot> Yes, I'm here
13:38:33 <goron> Auch
13:38:34 <stepcut> gotta spell it right :p
13:39:07 <stepcut> λbot
13:39:57 <goron> Does lambdabot also know unicode?
13:40:39 <stepcut> goron: not sure, I am not sure where it would come into play...
13:40:54 <stepcut> @eval let x = 3 in x + 1
13:40:54 <lambdabot> (line 1, column 7):
13:40:54 <lambdabot> unexpected "="
13:40:54 <lambdabot> expecting var, "head", "tail", "null", bool, num, character, "[", string
13:40:54 <lambdabot>  "(", operator, simple term or end of input
13:41:45 <goron> dons: I just tried to compile Yi, but it failed with ambiguous occurences of CWString. 
14:11:20 <kosmikus|away> a general remark for those who are interested: I will most probably accept any HCAR entries that are sent to me before next Wednesday ...
14:23:47 <tromp> my ghci segfaults on computing 2^999999999
14:24:14 <monochrom> let me try that too
14:24:48 <tromp> expected some out of memory error at least
14:25:01 <tromp> trying with one less 9 now
14:27:46 <tromp> these things take time:)
14:29:17 <tromp>  4085 tromp     25   0  210m 192m  12m R 84.1 19.0   5:04.25 ghc-6.2.1
14:29:28 <tromp>   PID USER      PR  NI  VIRT  RES  SHR S PU %MEM    TIME+  COMMAND
14:30:56 <tromp> test  bla
14:31:17 <tromp> the percent-capital-C I typed disappeared
14:31:28 <monochrom> whee, I get segfault too, cool
14:31:32 <tromp> \
14:31:48 <tromp> try type a percent sign followed by C
14:31:59 <tromp> here in channel
14:32:20 <tromp> 
14:32:27 <monochrom> It is a feature of your irc client.
14:32:39 <monochrom> %C
14:32:52 <tromp> no idea what that does in my client
14:33:12 <monochrom> your client interprets  as part of some colour code
14:33:20 <tromp> mine is still running at 9 mins
14:33:22 <monochrom> 2Hello
14:33:28 <monochrom> That's %CHello
14:33:35 <monochrom> err
14:33:39 <monochrom> That's %C2Hello
14:33:46 <tromp> 2Hello
14:33:49 <monochrom> %C2 probably stands for "blue"
14:33:57 <tromp> 3foo
14:34:06 <tromp> 4bar
14:34:14 <tromp> 5cool!
14:34:21 <monochrom> You can type %%C if you really want %%C
14:34:22 <tromp> 6little-c
14:34:25 <Philippa_> generally it stands for "I'm a moron who doesn't understand why colours on IRC are evil"
14:34:37 <monochrom> err there is a typo there. you fix it.
14:35:04 <tromp> and people think i'm crazy for playing on a MUD in black&white :)
14:35:22 <monochrom> Yeah you should play in black & green.
14:35:47 <monochrom> You know, green monochrome monitors are cheaper than white monochrome monitors.
14:35:49 <Philippa_> tromp: IRC didn't have colours originally, they're not quite standard. Better yet, there's the problem of contrast vs background colours
14:36:04 <Philippa_> and I dunno about you, but I for one don't consider it polite having my background colours overridden either
14:36:38 <monochrom> true
14:36:39 <Philippa_> Long story short, Khaled shouldn't have done it
14:37:01 <monochrom> probably should turn colour code off on your client
14:37:39 <Philippa_> given that I'm running the client responsible for introducing this mess, I really should shouldn't I? :-)
14:37:56 <monochrom> I mean tromp
14:38:16 <monochrom> should be able to tell the client "don't interpret %c as colour code"
14:38:40 <Philippa_> ah, yeah
14:38:58 <Philippa_> except I can't remember what the /actual/ colour code is but it might look like that
14:40:02 <tromp> any1 care to guess how long it takes ghci to compute 2^99999999 ?
14:40:25 <monochrom> 10 hours
14:40:36 <Philippa_> _|_
14:40:54 <Igloo> 2^999999999 segfaults for me in a 1/2 month old CVS HEAD too
14:41:23 <monochrom> I think I know why.
14:41:50 <monochrom> It asks gmp to calculate. gmp tries to allocate memory. gmp gets null. gmp segfaults
14:42:05 <monochrom> It is probably not something ghci can help.
14:42:15 <Igloo> Sounds like a gmp bug if that's so
14:43:25 <tromp> hmmm, 2^999999 is also taking a long time
14:44:12 <monochrom> well, gmp probably can't help it either. what should gmp do when there is no memory? it is in C so there is no standard kind of OutOfMemoryException it can throw. probably it consciously segfault.
14:44:39 <Igloo> Can gmp functions not fail?
14:44:57 <tromp> ah, 2^999999 is done after about 2 mins!
14:45:32 <Igloo> Oh, no, they have void return type. How useful.
14:46:12 <monochrom> if it returns a special value, so what? that merely moves the problem around.
14:46:14 <tromp> was it too much trouble to return an exit status:-?
14:46:38 <tromp> then ghci cld give me sensible error mesg or allow me to catch it
14:46:45 <Igloo> It means GHCi can report an error, free the temporary stuff and continue
14:46:52 <Igloo> Or applications can catch an exception raised by ghci
14:47:02 <Igloo> s/ghci/ghc/
14:47:21 <tromp> there's simply no excuse for segfaulting
14:47:36 <tromp> that's like a compiler crashing on a syntax error
14:47:45 <Igloo> They might claim efficiency
14:47:58 <tromp> they might claim insanity:)
14:49:25 <monochrom> There are two ways of reporting an error and abortion. Return a special value, or throw an exception.
14:49:49 <monochrom> I won't go into the pros and cons of them, since the debate has been eternal.
14:50:13 <monochrom> But suppose you go with the latter.  Now suppose also you're writing in C.  How do you raise an exception in C?
14:50:45 <Oejet_> monochrom: Implement a Haskell runtime?
14:50:46 <monochrom> Well, by calling it "signal" rather than "exception".  For example you can raise SIGSEGV --- arbitrary choice, may as well.
14:51:16 <Igloo> I hope you're not seriously advocating this as a sensible thing for a library to do
14:51:33 <monochrom> Well it is not sensible to use C to begin with.
14:52:01 <monochrom> But suppose you have decided to use C and suppose you're in the school of exceptions.  Then your fate is sealed.
14:52:52 <monochrom> I am saying it is not a bug, it is a very conscious design decision.
14:53:31 <tromp> isn't ghci written in C?
14:54:00 <Igloo> Only little bits of it
14:54:04 <monochrom> Supposedly ghci can install a SIGSEGV handler before calling gmp.
14:54:10 <tromp> then it alrd has a standard in place for signalling exceptions?
14:54:25 <monochrom> gmp doesn't know that standard
14:54:56 <tromp> maybe gmp can adopt that standard?
14:55:19 <monochrom> ocaml has its way too. java has its way too. .net has its way too.
14:55:42 <monochrom> why gmp should go with ghci and not .net for example.
14:56:10 <tromp> well, just returning a status code instead of void wld allow any language to properly take care of it
14:56:48 <monochrom> alternatively and equivalently raise a signal, document about it, and expect ghci/ocaml/java/.net to catch it.
14:57:25 <tromp> of course it becomes OS dependent then?!
14:57:44 <tromp> unless windows has posix signals
14:58:22 <monochrom> "customers can have any color they want, as long as it's black" :)
14:59:16 <tromp> i'm killing my 2^99999999 after wasting half an hour of cpu cycles...
14:59:32 <Philippa_> monochrom: sure, shall I sneak win32 deps into all my projects then?
14:59:36 <monochrom> are you sure it's cpu not swap disk :)
15:00:32 <monochrom> it will help sales. you can ask microsoft to buy you up.
15:00:41 <Philippa_> heh
15:00:53 <tromp> it was at 19% MEM usage
15:00:53 <Philippa_> I don't think MS'd get many sales for Flippi :-)
15:01:02 <Philippa_> That, and they'd insist it be rewritten for ASP.net
15:01:10 <tromp> on a 1Gb machine
15:01:49 <monochrom> if 2^9999999 is 2 minutes, probably 2^99999999 is about 10 hours like I guessed.
15:08:39 <tromp> if i want something REALLY slow, i'll compute g 2 9
15:08:57 <tromp> g b 0=b;g b n=g c$s 0n-1where s _ 0=0;s e n=mod n b*c^s 0e+s(e+1)(div n b);c=b+1
15:09:48 <monochrom> i'll compute ackermann
15:10:04 <tromp> g 2 9 is so big, you cant even express it with ackermann:(
15:11:03 <monochrom> ok
15:11:11 <Igloo> "cant even express it with ackermann"?
15:11:14 <tromp> it's the goodstein sequence
15:11:22 <tromp> which grows much faster
15:11:27 <monochrom> he probably means g, not g 2 9
15:11:32 <tromp> try map(g 2)[0..]
15:12:01 <tromp> the first 4 values are cute
15:12:18 <monochrom> i'll compute the largest twin prime then
15:18:14 <tromp> any1 here know Graham Klyne/
15:18:16 <tromp> ?
15:19:54 <tintin> is he famous ?
15:20:38 <tromp> he's listed in last HCAR
15:20:44 <tromp> on page 49
15:21:08 <tromp> he has a company called ninebynine.org
15:21:17 <tromp> was wondering if he plays Go...
15:23:01 <stepcut> tromp: because his domain is ninebynine ?
15:23:28 <tromp> yep
15:23:32 <stepcut> Why "Nine by Nine"? Back in 1986 I left my then full-time employment to trade as a freelance software developer and consultant. At that time, my working space was a small "box room", slightly smaller than 9 feet square, into which I shoehorned all of my computer equipment and books, which gave rise to my trading name. 
15:24:20 <tromp> oops:) i shld've looked closer:)
15:24:32 <stepcut> heh
15:27:56 <shapr> good name
15:28:06 <shapr> Graham Klyne is a cool guy.
15:28:15 <stepcut> hello shapr!
15:28:25 <shapr> greetings stepcut!
15:28:38 <shapr> I was going to code... but someone handed me a prachett book.
15:29:07 <shapr> and now I'm out of stuff to read again... time for more code.
15:29:21 <stepcut> prachett ?
15:29:39 <shapr> terry pratchett?
15:29:47 <stepcut> um...
15:29:51 * stepcut is ignorant
15:29:55 <Philippa_> author of the discworld series
15:30:03 <shapr> stepcut: if you like science fiction or fantasy, you will like terry pratchett
15:30:06 <Philippa_> nominally fantasy, but largely comedy about humanity
15:30:07 <shapr> stepcut: there is one downside...
15:30:28 <shapr> stepcut: I was out of comission for a week when someone handed me twenty-five books in the discworld series.
15:30:43 <stepcut> I do not know if I have read any terry prachett, tough maybe in 8 grade... 
15:30:55 <stepcut> the name does sound a bit familiar
15:31:06 <shapr> Pratchett is my favorite author.
15:31:44 <stepcut> simon peyton jones is my favorite author :p
15:31:55 <stepcut> at least going by number of works read...
15:32:17 <shapr> number of works read would make Edgar Rice Burroughs my favorite author.
15:33:34 <shapr> I think I've read more than fifty books by ERB.
15:33:43 <stepcut> I don't read books that take more than 2 hours to read anymore, because I lack the self-control to stop reading, and it really hurts to stay up till 5am reading when I have stuff to do the next day :)
15:34:09 <stepcut> someday when I have progressed further down the path of self mastery
15:34:14 <shapr> That's why you should acquire books on saturday mornings.
15:34:34 <stepcut> Or more authors should release books one chapter at a time =)
15:34:43 <shapr> hm, good idea.
15:34:45 <shapr> they used to do that.
15:35:12 <stepcut> "for your protection, I will be releasing my new book one chapter at a time"
15:35:34 <Philippa_> might be a problem with pterry though
15:37:21 <tromp> are his writings almost but not quite entirely unlike those of Douglas Adams?
15:37:35 <Philippa_> yes
15:37:51 <Philippa_> he tends to come at things from the opposite angle
15:38:01 <Philippa_> plus they're fantasy not sci-fi ;-)
15:38:02 <stepcut> simon's stuff is definately unlike Douglas Adams
15:38:47 <Philippa_> pterry probably advocates FP rather than OO, too ;-)
15:39:47 <shapr> really?
15:39:56 <Philippa_> nah
15:39:59 <shapr> I was just reading about the clacks geeks.
15:40:06 <shapr> they sure sound famiiar.
15:40:09 <shapr> familiar.
15:40:40 <shapr> is there some easy cheesy way to make parseURI fit into a Parsec parser?
15:40:53 <Philippa_> don't forget he has an entire NG full of geeks to do research on
15:40:58 <shapr> good point
15:41:09 <shapr> I'm occasionally tempted to hang out there...
15:41:17 <Philippa_> try #afp
15:41:20 <Philippa_> it's on irc.lspace.org
15:41:27 <shapr> hmm, sounds scary.
15:42:29 <Philippa_> it's fun
15:42:33 <Philippa_> now get your arse in there ;-)
15:43:00 <shapr> I'll try it after I've hacked on Flippi, Postmaster, and yi some...
15:43:16 <Philippa_> when you say Flippi I assume you mean the FLM branch, right?
15:43:23 <Philippa_> only I think 0.03's code complete now
15:43:30 <shapr> awright! I want a copy!
15:44:06 <Philippa_> tell you what, I'll throw in a readme too :-)
15:44:10 <shapr> yay!
15:44:18 <Philippa_> so you can proof it etc etc
15:44:31 <shapr> sounds good
15:44:42 <shapr> and I can install flippi 0.3 on scannedinavian
15:44:50 <shapr> 0.03, whatever
15:46:48 <shapr> Lemmih: I don't mind installing Hackage on haskell.org, but how long it'll take depends on how hard it is to install working versions of darcs, postgresql, ghc, hsql, haskelldb, halipeto, etc.
15:48:17 <stepcut> heh
15:49:13 * stepcut goes to lunch
15:49:16 <shapr> I'd much rather have a debian/unstable box named community.haskell.org sitting on the desk next to www.haskell.org
15:51:00 <shapr> Manual rebuilding for each upgrade really sucks.
15:51:17 <shapr> not that I've built debs for all yet, mind you...
16:21:34 <bourbaki> moin
16:22:06 <mattam> hmmm, darcs doesn't like files with non-ascii/utf8 names ?
16:23:12 <bourbaki> would anyone happen to be interested in building something like this (http://www.gamerz.net/~c++robots/) in haskell?
16:24:05 <shapr> we've already got one.
16:24:19 <shapr> YampaSoccer
16:24:24 <bourbaki> oh cool
16:24:28 <Lor> And there's the ant game.
16:24:28 <bourbaki> where ?:)
16:25:09 <bourbaki> shapr is that yampasoccer compliable with the virtual soccer league?
16:25:24 <shapr> what's VSL?
16:25:45 <bourbaki> i guess virtual soccer league :)
16:26:08 <shapr> no clue, never heard of it before.
16:26:24 <bourbaki> never heared of robocup?
16:26:40 <bourbaki> these robots playing soccer against each other?
16:27:00 <Lor> I've heard of a tournament of _physical_ robots.
16:27:33 <bourbaki> yes there are several different leagues
16:28:06 <bourbaki> small midsize large, 4 legged a junior prof at our uni did that with aibos
16:28:50 <bourbaki> and were toying around with some two legged robots atm :) but they are rather clumsy just toy robots
16:28:54 <shapr> Then there's the velociraptor extreme league.
16:29:23 <bourbaki> whats that :)?
16:29:54 <shapr> Sort of like robot wars, junkyard wars, and mortal kombat all rolled into one sport.
16:30:13 <bourbaki> heh :)
16:30:29 <bourbaki> c++ robots is like that also
16:30:40 <bourbaki> you can send your code in via mail and they simulate it
16:30:52 <Lor> c++ sounds like the worst imaginable language for that.
16:30:55 <bourbaki> and then you get a log back when it was a challenge to a single bot
16:30:57 <shapr> I'd like to run the CoreWars flavor that Lunar^ wrote.
16:31:01 <shapr> that would be a fun contest.
16:31:29 <shapr> Lunar^'s visualizer is very very cool looking.
16:31:32 <bourbaki> have a look at c++ robots its quite fun i once wrote a visual interpreter for the logs :)
16:31:34 <Lor> Nah, nothing beats ants. Ants should be enough for anyone. Ants ants ants.
16:31:44 <bourbaki> where is that ants thing?
16:31:47 <yeti> i don't think i really understand that robot challenge stuff - is it turn-based or realtime? 
16:31:50 <monochrom> Ants is hard to use.
16:31:53 <shapr> ants is icfp2004
16:32:13 <shapr> yeti: most of them is neither. You code up your bot, it does everything for you.
16:32:15 <bourbaki> ah that ultimate bragging right thing?
16:33:07 <Oejet__> How do I do nonatomic increments of a shared variable?
16:33:21 <yeti> shapr: no, i mean the battle which is fought between two robots - i mean, if they fight in realtime one robot might get more cpu time because of unfair cou scheduling policies or stuff like that
16:33:29 <Lor> There's also ant-wars.com now.
16:33:45 <Lor> Oejet__, why would you want to?
16:35:16 <Oejet__> Lor: Because I want to simulate a pedagogical Java exercise that illustrates the shared variable problem.
16:35:55 <Lor> So you want non-atomic increments _and_ an implementation and a situation in which the non-atomicity actually becomes apparent?
16:36:48 <Lor> Anyway, IORefs are basically just global variables. You should be able to exhibit ordinary race conditions with them.
16:36:55 <monochrom> I have an idea.  You show them the program you want to show them.  But you don't run it; you fake the result you want.
16:36:57 <Oejet__> Precisely.  I start some threads that increments the shared variable: replicateM_ 10000 incr.
16:37:15 <Oejet__> monochrom: It's not for school.
16:37:50 <monochrom> Clearly.
16:38:08 <monochrom> Only the business type would believe any fake presentation you give them.
16:38:17 <shapr> oh me too!
16:38:22 <shapr> I believe it!
16:38:27 * shapr bounces
16:38:48 <Oejet__> monochrom: :-P I mean, it's for me learning the concurrent library.
16:39:25 * Oejet__ is looking at IORefs.
16:39:27 <monochrom> Well, I am out of ideas then.  I don't know how to deceive myself.
16:40:37 <Oejet__> monochrom: You have to work hard for many years telling youself lies and trying to believe them. Then when you have become mad, you have succeded.
16:42:34 <monochrom> I have another idea.  You can't reproduce such race conditions at home.  But do include such code in a critical application.  Then the race condition will surely show up at the moment that costs you the most.
16:42:47 * shapr agrees
16:43:06 <Lor> Hm, why couldn't it be reproduced?
16:43:15 <Lor> ghc's scheduler is pre-emptive, after all.
16:43:18 <monochrom> Because of Murphy's Law and all.
16:43:35 <monochrom> The wrong thing refuses to happen until the wrong time, and then it will surely happen.
16:44:39 <monochrom> The sysadmins here once told me a story.
16:45:06 <monochrom> The printer worked fine during the usual days when the sysadmins were all at work.
16:45:07 <mattam> refuses to happen :) as if it made choices. Wait...
16:45:37 <monochrom> The printer would fail during Christmas when all sysadmins were away for two weeks.
16:45:52 <shapr> That sounds familiar.
16:45:54 <monochrom> They fixed it by posting a picture of a sysadmin near the printer.
16:46:00 * shapr laughs
16:46:23 <mattam> a classic. My gateway don't work (and my mom can't get her mail) each time i leave my home for more than one day
16:46:44 <mattam> maybe i should do the same :)
16:47:28 <shapr> I set my gateway to do everything right on startup, and showed my roomies how to hit C-M-BS on the console.
16:47:48 <shapr> Amazingly, they ended up rebooting once a day or so.
16:47:56 <mattam> same here
16:48:34 <mattam> the truth is out there...
16:48:53 <shapr> oboy,Army of Darkness is on TV
16:48:55 * shapr disappears
17:26:37 <Oejet__> Yeah, it works!  Any one want to see the code?
17:27:06 <boubaki> what code?
17:27:45 <Oejet__> The nonatomic increment of shared variable code.
17:28:16 <boubaki> i dont even know what that is :)
17:28:47 <Oejet__> Ah, then it's even more interesting, boubaki.
17:29:38 <boubaki> just tell me what it does and ill consider looking at it :)
17:31:34 <Oejet__> It forks 10 identical threads, which increments a global variable 100000 times. Then prints out the value of the variable.
17:32:14 <Igloo> Why are you trying to do nonatomic increment?
17:32:19 <Oejet__> boubaki: Can you guess what it prints out?
17:32:34 <boubaki> 100000?
17:32:54 <Oejet__> 11668
17:33:15 <boubaki> ?
17:33:37 <Oejet__> And 6996 and 4660 and 6996 and 11668.
17:33:48 <Oejet__> (in different runs)
17:35:49 <Oejet__> boubaki: Because the increment is not atomic (fetch x then increment x then store x), the threads can get entangled between those three operations.
17:36:34 <stepcut> Oejet__: well, you've created quite a mess for yourself :p
17:37:34 <Oejet__> stepcut: But it worked as I wanted it to. :-)
17:40:39 <Oejet__> Any thoughts on the new NetBSD logo?
17:41:10 <stepcut> I can honestly say that until a few seconds ago, not a single thought
17:41:22 <Igloo> :-)
17:42:08 <Igloo> It's certainly more logo-like than the previous one
17:42:36 <Oejet__> Igloo, yeah and much less cool and saying.
17:46:50 <Oejet__> Well, thanks for the help with my race conditions!  
18:10:44 <dons> moin
18:19:21 <Igloo> Hi dons
18:22:35 <dons> hey, i'm about to add regex searching to yi. just a binding to regex(3) to walk over the buffer
18:22:40 <dons> any ideas on this topic
18:23:02 <dons> one important thing in yi is not to box the elems of the buffer when searching it
18:23:26 <Igloo> I'd say you should use my library, but it's not finished  :-)
18:23:37 <Igloo> Anyway, it's not what you want if you want every ounce of performance
18:24:00 <dons> well, if I can pass it unboxed chars, that would be fine
18:24:09 <Igloo> Won't you need the whole thing as a C string to use regex(3)?
18:24:28 <dons> it's not so much "every ounce", more that a 5M file generates 100M rss if we box it
18:24:50 <dons> big flat data like that has to stay unboxed, and you just box the bit you need
18:25:10 <dons> The underlying buffer is a MutableByteArray#, which looks like a char* to C
18:25:25 <dons> so you can call Haskell or C on the samer buffer, which is kinda nifty
18:25:32 <Igloo> One big MBA#? How does that work with inserting characters?
18:25:42 <dons> memmove()
18:25:52 <Igloo> Isn't that horribly inefficient?
18:25:59 <dons> works fine up to 64M at least
18:26:10 <dons> which is my working upper limit for now.
18:26:18 <Igloo> Hmm, fair enough
18:26:20 <dons> behaves a lot better than vi on the same files
18:26:56 <dons> that's the only C that gets used though :)
18:27:48 * Igloo isn't sure how the internals of vi work
18:28:18 <dons> well, there's some memmove in there, and there's a db of lines to lineno I think
18:28:27 <dons> so you can quickly delete lines
18:28:37 <dons> but searching big files in plain old BSd vi is really slow
18:29:07 <dons> anyway, all this low level stuff is just buffer internals
18:29:15 <dons> it's much the same as Handles are implemented 
18:29:28 <dons> the rest of yi is nice Haskell :)
18:29:36 * dons claims..
18:29:40 <Igloo> :-)
18:30:09 <dons> and I'm about ready to tackle syn hl today or tomorrow
18:30:28 <dons> initially just to get a Haskell lexer to emit lists of colorised tokens
18:30:56 <dons> and users set colors for lexical classes. i.e. syn TyVar = Blue
18:32:13 <dons> Igloo: is it possible to generalise your regex library to lists of arbitrary type?
18:32:42 <dons> like harp
18:32:50 <dons> like harp syntax, anyway
18:33:02 <Igloo> What's harp?
18:33:12 <Igloo> But yes
18:33:15 <dons> haskell regular patterns. let me get the ref
18:33:59 <dons> Chalmers guys have a syntactic preprocessor for list regexes, that get desugared into state machines for doing the match
18:34:02 <dons> at icpf this year
18:34:54 <Igloo> I plan to change it to have a set of parsers (BRE, ERE, maybe perl-compatible) and matchers (shortest match, longest match, left-most match (what perl does)). Then you'd just need to alter one of the parsers for whatever you want to parse, or they could even be made parameterised
18:35:05 <dons> that would be very nice
18:35:34 <Igloo> Well, actually, it's already mostly structured like that, just needs a bit of tweaking and more than one of each to exist
18:35:47 <dons> "Regular Expression Patterns
18:35:52 <dons> Niklas Broberg, Andreas Farre, and Josef Svenningsson
18:36:18 <Igloo> Cool, thanks, I'll take a look
18:37:44 <dons> http://doi.acm.org/10.1145/1016848.1016863
18:38:36 <dons> hmm, I wonder if I could use your regexes in the keymap lexers in yi
18:39:09 * dons thinks this could be a good idea
18:43:08 <Igloo> I don't see why not. Hmm, unless you do shortest match you could get some very odd effects
18:44:09 <Igloo> e.g. "a*b -> act1; a -> act2" with left-most or longest match when the user types "aaaaad" would do nothing until the d, when it would do act2 5 times
18:45:25 <dons> yep. that's what I could do. and things like ":sp[(l)(li)(lit)]?"
18:46:18 <Igloo> Hmm, : probably needs to be an action by itself so it can do tab completion
18:46:35 <dons> tab completion is something I haven't looked at yet. good point.
18:46:42 <dons> goes on the todo list
18:46:58 <Igloo> You'd need to match the \n too, like ":sp(l|li|lit)\n"
18:47:19 <Igloo> Or just have : do disambiguation itself where it's a unique prefix
18:48:59 <Igloo> It would probably ultimately want to look something like :([^\n]*)\t -> tab_complete $1; resume ":$1"     :([^\n]*)\n -> do_command $1
18:49:18 <Igloo> where resume foo is equivalent to the user typing foo
18:49:44 <dons> that's nice.
18:50:12 <dons> I have to get from char at a time lexing to matching on lazy strings
18:50:22 <dons> so that the pattern will pull in more keystrokes if they're needed
18:50:48 <Igloo> My library will do that
18:50:54 <dons> ah!
18:50:59 <Igloo> You'll have to cunningly mangle getContents so resume works, though
18:51:14 <dons> hmm. I'm willing to do that ;)
18:51:23 <dons> atm we have to explicitly pull in new chars:
18:51:25 <Igloo> RE> match "^a" ('a':undefined)
18:51:25 <Igloo> Just []
18:51:28 <dons> do msgE (':':reverse w)
18:51:31 <dons> c' <- getcE
18:51:35 <dons> loop (c':w)
18:51:43 <dons> and then match on the c'
18:51:49 <Igloo> *nod*
18:51:57 <dons> but this should be lazy strings!
18:52:19 <dons> but alex refused to cooperate with me
18:52:24 <dons> too strict for its own good
18:52:32 <Igloo> :-)
18:53:45 <dons> ok, I'll have a look at this when I rework the keymap design
20:14:50 <bourbaki> moin
20:15:14 <bourbaki> anyone awake who could help me a bit on yampa?
22:27:58 <stepcut> some velvet morning...
