05:44:20 * shapr sings cheerfully
05:46:18 * Igloo bounces
06:07:16 <shapr> I have a new unicycle seat
06:08:16 <shapr> hej cm
06:08:30 <shapr> dags att åka enjuhling...
06:27:01 <andersca> shapr: kul!
06:39:50 <LittleDan> do you think Haskell will ever be mainstream?
06:40:01 <neologism> it already is
06:40:22 <LittleDan> it is?
06:40:37 <neologism> yeah
06:40:42 <neologism> on this channel definitely!
06:40:48 <LittleDan> is it being used commercially?
06:41:02 <neologism> haskell.org
06:41:08 <neologism> go read
06:41:34 <Igloo> Aetion (.com?) use it
06:41:43 <Igloo> Some people consult with it
06:43:52 <LittleDan> that page lists 5 consultants, and at the practical applications of haskell page, it doesn't look like very many projects are using haskell.
06:44:10 <LittleDan> do you expect haskell to be like the next Java (except not evil)?
06:44:25 <LittleDan> or just like for smarter companies on the cutting edge and stuff like that
06:47:51 <Igloo> There'll be a good few more Javas before Haskell is one, I suspect
06:55:49 <LittleDan> I wonder what the next java will be like...
06:58:45 <Igloo> Like C#?  :-)   Or do you count that as the same as Java?
07:21:24 <shapr> anyway, Java and C# appeal to the lowest common denominator
07:22:20 <shapr> "Corporations are flocking to Java and .NET like flies to shit, so it's looking like knowing something about them is going to be an important skill. I hate java though, I hate how wordy it is, I hate the mentality that java exists not to help hackers, but to limit the damage that monkeys churning out code can do if they screw something up."
07:30:29 <Gowilla> I quite like Java.
07:30:35 <Gowilla> It's quite verbose, though.
07:30:41 <ibid> java is actually quite good
07:31:07 <ibid> but at least until now, it has lacked some basic features required for serious programming
07:31:17 <Heffalump> what kind of thing?
07:31:32 <ibid> genericity, of course :)
07:32:22 <ibid> note that i'm talking about the java language, not the java platform
07:32:31 <ibid> the java platform is yuck
07:32:50 <neologism> I think Java is great when you compare it to C++
07:33:21 <Heffalump> I quite like the platform too.
07:33:25 <ibid> well, not the platform in itself but the meme that the only correct way of using java is to succumb to the platform
07:33:39 <MakeMyDay> ok now I just had a wtf moment.
07:33:43 <Heffalump> I'd like to get gcj to work on my current project, but it's proving a bit tricky.
07:34:38 <ibid> actually, c++ is the best language i know in its niche
07:34:54 <ibid> which is not the same niche as the one where java is, or where haskell is
07:34:59 <neologism> ibid: what do you think is c++ good for?
07:35:06 <MakeMyDay> If I you use "\" for directories in windows , you can't delete stuff because you get a permission error. If you use "/" though you can delete freely.
07:35:27 <MakeMyDay> a bug or some deaper Funktional feature that my puny mind is unable to understand?=
07:36:04 <Igloo> Are you escaping the \s in Strings?
07:36:11 <ibid> neologism: stuff that c would be good for if it had better abstraction facilities :)
07:36:28 <neologism> ibid: I dont see any such stuff
07:37:07 <ibid> neologism: i mean, stuff that c is good for but which is a little awkward in c because of the lack of proper abstraction facilities
07:37:57 <ibid> neologism: i have a project i'm writing in c mostly because it's the native language of unix *and* it is fairly easy to control performance in it
07:38:09 <neologism> hm...
07:38:25 <neologism> I think C is good for teaching how programming language shouldnt look
07:38:38 <neologism> but this is nay talk
07:38:49 <ibid> neologism: but i'm considering moving to c++ because it would allow me to abstract away stuff that i currently write over and over again
07:39:46 <ibid> (like, i have a lot of data structures that fit the c++ std::vector pattern but which i have to write over and over again because c lacks genericity)
07:40:10 <neologism> I dont see why do you program applicaiton in C
07:40:23 <neologism> its not language meant to be used in appliacation programming
07:40:34 <neologism> but its not worht words...
07:40:38 <ibid> i'm also not aware of any language beside c++ where you have the kind of control you have in c++
07:40:40 <neologism> just use what do you think is apropriete
07:40:57 <ibid> neologism: well, it's debatable whether it's an application or not :)
07:40:58 <neologism> what control? over generated code?
07:41:02 <MakeMyDay> Igloo: It finds the file , it just won't delete it. I do watch the escaping stuff and all that
07:41:09 <ibid> neologism: overgenerated code? what
07:41:27 <ibid> neologism: stuff like custom allocators i was thinking about
07:41:42 <ibid> i need to go to the shops, they close in twenty minutes
07:41:49 <ibid> bbl, fairly soon
07:44:40 <neologism> ibid: btw:
07:45:26 <neologism> t = (t & ~(3 << ((3 - dn) << 1))) | ((FIT(timing->setup, 1, 4) - 1) << ((3 - dn)
07:45:29 <neologism>  << 1);
07:45:35 <neologism> this is C ;)
07:45:47 <neologism> (an excerept from linux ide driver)
07:58:27 <ibid> neologism: so?
08:09:42 <ibid> neologism: what's the point you're making with that excerpt?
08:14:04 <GreyLensman> ibid, SML (MLTon specifically) gives you high level abstractions (functional), low-level bit manipulations, out performs C++.
08:14:46 <ibid> GreyLensman: languages do not outperform languages, implementations do :)
08:15:26 <GreyLensman> OK.  MLton out performs gcc C++ on Linux.
08:15:44 <ibid> which gcc version? what benchmarks?
08:15:55 <ibid> is there a debian package?
08:16:03 <GreyLensman> http://shootout.alioth.debian.org/craps.php
08:16:20 <ibid> looking at its home page it looks unacceptable
08:16:26 <ibid> only x86 and sparc supported
08:16:40 <ibid> for this particular project, anyway :=
08:18:45 <ibid> hmh, is there a way to compare two "languages" in the shootout side by side?
08:19:45 <GreyLensman> yes. there is a graph section where you select the languages you wish to plot.
08:20:40 <ibid> no plot
08:21:03 <GreyLensman> You can only do it on a per tests basis.  Select a test, click on view graphs...
08:21:25 <ibid> i'd like to have a page like http://shootout.alioth.debian.org/lang/g++/ with two languages side by side
08:22:09 <GreyLensman> email the author.  He is actively working on the site and welcomes all suggestions.
08:22:19 <ibid> right
08:22:59 <ibid> you know, mlton falls behing c++ if memory and cpu get identical scores
08:23:25 <Smerdyakov> MLton uses a copying garbage collector. What do you expect?
08:23:29 <GreyLensman> Of course SML uses a GC...
08:23:56 <ibid> yeah
08:24:12 <ibid> for this project, regions would work better
08:24:18 <ibid> i think :)
08:24:35 <ibid> there's not much garbage generated until the program ends
08:24:45 <Smerdyakov> Do you have reason to believe that doubling memory usage is a serious issue for you?
08:25:42 <ibid> well, it's wasted in this case, since there is not that much garbage
08:25:52 <Smerdyakov> OK, and..?
08:27:49 <ibid> i'm trying to make this program as lean as i can
08:27:59 <ibid> well, up to a point really :)
08:28:21 <Smerdyakov> Why?
08:28:29 <ibid> why lean?
08:28:32 <GreyLensman> ahhh, a whole earth simulator then..
08:28:33 <Smerdyakov> Yes
08:28:52 <ibid> so that there is more memory available for other programs? :)
08:29:05 <ibid> that's a general principle
08:29:22 <Smerdyakov> And improving the efficiency of development is another general principle.
08:30:00 <GreyLensman> ibid, you realize 1970 was 30 years ago.  This is the age of the Jetson's, where an electric shave has more memory capacity then an ol' micro Vax II.
08:30:35 <ibid> in this particular case, i'm letting that general principle take a back seat, by a conscious decision
08:30:38 <Smerdyakov> Plus, you can expect MLton output memory usage to go down as more optimizations are added.
08:30:54 <Smerdyakov> You won't see much change with g++, since it's pretty stable.
08:31:03 <ibid> GreyLensman: you realize that nowadays our programs do exactly the same stuff as ten years ago but require tons of more resources
08:31:26 <ibid> yeah, mlton is not useful for this project as long as it does not support all debian architectures
08:31:38 <Smerdyakov> ibid, I think it does, via a C back-end.
08:32:00 <Smerdyakov> ibid, it might take a little tweaking on some of them
08:32:15 <ibid> web page says x86 and sparc
08:33:19 <Smerdyakov> Yes. You will almost certainly need to hack the compiler a bit to use other architectures, but it shouldn't be very complicated.
08:33:45 <MakeMyDay> writeFile "installedPackages" newpackageList  . If newpackageList is a string , is there any reason for this "command" to produce an empty file?
08:34:18 <MakeMyDay> installedPackages is exists and I am overwriting it 
08:35:26 <MakeMyDay> and I am not getting an error of anysort. It simply writes an empty file ..
08:35:32 <Lemmih> newpackageList == []?
08:36:02 <MakeMyDay> No. If I print newpackageList just before writeFile it gives me out what I want in that file.
08:37:25 <Lemmih> Then it's because you're reading from a lazy stream.
08:39:15 <Lemmih> How is newpackageList initialized?
08:39:18 <MakeMyDay> ah yes..but why is that a problem? Doesn't it evaluate newpackageList when I call writeFile?
08:39:42 <MakeMyDay> let newpackageList = unlines x
08:40:03 <MakeMyDay> and x is a result from other functions etc..
08:44:31 <Igloo> So even if you print it to the screen and then writeFile it it doesn't work?
08:47:22 <MakeMyDay> Damn it works if I print it on the screen AND write the file then.
08:47:57 <Igloo> Oh, are you reading from the file in order to generate the new file?
08:48:11 <Igloo> If so it'll be a laziness issue
08:48:21 <Igloo> Well, I suspect it is regardless, but that's the obvious one
08:48:45 <Igloo> If you seq (last xs) after xs <- readFile ... then it'll be read strictly
08:49:34 <Igloo> Is this cabal or something unrelated OOI?
08:50:02 <ibid> are you reading the same file you are writing? i'd not do that; i'd write to a temp file and rename it
08:50:28 <MakeMyDay> hm..It is suddenly working.
08:51:02 <MakeMyDay> Well I don't see the problem. I read the file in a list , do stuff with the list , then write the list as the same file.
08:51:21 <MakeMyDay> I don't think it would cause a laziness error.
08:51:32 <tooki> reading is lazy
08:52:06 <tooki> i mean the read functions work lazily
08:52:55 <ibid> writing to temp file that gets renamed is also better for backup purposes (you can rename the original to a backup name first)
08:52:56 <monotonom> If "do stuff with the list" does not cause the whole list to be sucked in...
08:53:31 <tooki> you are overwriting the file BEFORE it's read in
08:55:55 <monotonom> I wouldn't be surprised if writeFile begins its job with open(... O_TRUNC)
09:00:04 <monotonom> A possible sequence of events of your program is thus: r = open("hello", 0); w = open("hello", O_TRUNC); read(r, ...); write(w, ...);  you see the problem?
09:44:19 <MakeMyDay> ow great here comes the permission denied error..
09:45:18 <monotonom> "You are not allowed to write your own files"? :D
09:51:30 <MakeMyDay> yeah:/ I didn't change anything in my code. stupid os
09:54:27 <cm> !1
09:54:39 <MakeMyDay> can I get around a resource exhausted error in GHCi?
09:54:56 <Riastradh> Use fewer resources.
11:12:45 <XTL> There went the Indy.
11:40:07 <stepcut> so, can I start porting my libraries to cabal, or is it too early for that ?
12:13:31 <TheHunter> /
12:16:05 <TheHunter> @arr
12:16:05 <lambdabot> Avast!
12:16:27 <lambdabot> Prepare to die, TheHunter!
12:16:54 * TheHunter is very scared
12:17:15 <monotonom> @arr
12:17:16 <lambdabot> Prelude.(!!): index too large
12:17:24 <monotonom> @arr
12:17:24 <lambdabot> I'll keel haul ya fer that!
12:17:28 <RussellOConnor> *l*
12:18:16 <RussellOConnor> looks like lambdabot needs some dependant types to prevent crashing.
12:21:32 <TheHunter> @karma lambdabot
12:21:33 <lambdabot> lambdabot has a karma of -42
12:21:56 <SamB> such bad karma!
12:22:06 <lambdabot> My karma ran over your dogma.
12:22:13 <SamB> heh
12:22:23 <SamB> @dogma SamB
12:22:24 <lambdabot> Sorry, I don't know the command "dogma", try "lambdabot: @listcommands"
12:22:38 <RussellOConnor> @listcommands
12:22:38 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
12:22:38 <lambdabot> ,"definitions","del-definition","det","devils","dict","dict-help","dummy
12:22:38 <lambdabot> ,"dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo
12:22:38 <lambdabot> ,"elements","eurohaskell","eval","foldoc","fortune","gazetteer","get-definition
12:22:38 <lambdabot> ,"goodbye","hello","hitchcock","index","info","jargon","join","karma","karma
12:22:39 <lambdabot> ","karma-","learn","leave","listchans","listcommands","listmodules","lojban
12:22:41 <lambdabot> ,"moo","more","msg","musasabi","part","prelude","quit","reconnect","resume
12:22:43 <lambdabot> ,"seen","set-fuel","shapr","state","stepcut","topic-cons","topic-init",
12:22:45 <lambdabot> topic-snoc","topic-tail","topic-tell","type","vera","web1913","wiki","wn
12:23:32 <RussellOConnor> @moo
12:23:32 <lambdabot>          (__)
12:23:32 <lambdabot>          (oo)
12:23:32 <lambdabot>    /------\\/
12:23:32 <lambdabot>   / |    ||
12:23:32 <lambdabot>  *  /\\---/\\
12:23:32 <lambdabot>     ~~   ~~
12:23:34 <lambdabot> ...."Have you mooed today?"...
12:24:18 <SamB> hmm, it is trying to escape things...
12:29:10 <monotonom> heh
12:29:39 <lambdabot> Escape!  Flee!  Run for your lives!
12:34:31 <andersca> @arr
12:34:32 <lambdabot> Drink up, me hearties
12:34:58 <lambdabot> Gargle your grog!
14:24:25 <shapr> Igloo: hey, do you think Patches could be arrows? maybe they could export static info so comparing so much wouldn't be necessary?
14:25:22 <Igloo> Not sure OTTOMH
14:27:52 <stepcut> shapr: have you tried to make any cabal packages?
14:28:32 <shapr> not recently
14:28:36 <Igloo> Somehow I've managed to have a really productive day without actually doing a single thing on my TODO list
14:28:42 <shapr> heh :-)
14:28:45 <shapr> stepcut: have you built some?
14:29:40 <stepcut> I tried, but it seems to be very alpha right now :)
14:30:00 <shapr> I think I built a QuickCheckM package based on HUnit
14:30:04 <Igloo> Then submit patches, man!  :-)
14:30:14 <shapr> where do I submit patches?
14:30:20 <shapr> send them to syntax?
14:30:27 <Igloo> Wheverever darcs send sends them?
14:30:33 <shapr> oh, ok
14:31:31 <stepcut> shapr: btw, I finally worked out a scheme for doing link driven sites in WASH/CGI
14:31:38 <shapr> ah cool! tell me more?
14:34:24 <stepcut> shapr: well, with the form driven stuff, you basically make a program which has a number of different paths you can travel down. The program sort leaves a crumb trail behind itself so it can tell where its been already. So when it starts up, it follows the crumb trail until it gets to a question it has not answered yet...
14:35:12 <stepcut> but links are a bit different, a link says 'go here, with these pieces of information' 
14:35:33 <Heffalump> 'lo all
14:35:44 <stepcut> i think with links (in general), you don't care about where you have been, only where you are going
14:36:09 <Heffalump> you care for them being coloured as visited or not
14:36:27 <stepcut> Heffalump: the browser does that for you
14:37:01 <Heffalump> not if you change them or something, that's all
14:37:18 <stepcut> shapr: so you're site might have a bunch of different areas, like forums, photo gallery, mp3s
14:38:26 <stepcut> shapr: so, I one solution is to have an algerbraic data type for each area, data Forum, data Photos, data Mp3s, and so each url basically encodes something of one of those datatypes
14:38:52 <shapr> data Site = Mp3 | Forum | Photos
14:38:57 <shapr> interesting
14:39:15 <stepcut> so, forexample, data Forum = ReadForum Int  ^ -- Int is a thread id
14:39:32 <shapr> ah
14:39:33 <stepcut> well, there is a problem with: data Site 
14:40:06 <stepcut> let's say, you write the Mp3 module and I write the Forum model indepedant of each other, and someone else wants to integrate the two...
14:40:19 <shapr> good point
14:41:00 <stepcut> in ocaml, we could just use module functors
14:41:50 <stepcut> but we don't have module functors in haskell :(
14:41:59 <shapr> so how do you deal with it in Haskell?
14:42:28 <stepcut> or, if haskell had full partial evaluation, we could just save a continuation  (atleast that is my understanding)
14:42:46 <Riastradh> ...full partial evaluation...?
14:42:49 <stepcut> :p
14:43:13 <stepcut> Riastradh: yeah as opposed to partial partial evaluation support...
14:44:40 <stepcut> shapr: well, in theory could make a class Serialize with two functions:
14:45:07 <stepcut> serialize :: a -> String
14:45:19 <stepcut> and deserialize :: String -> a
14:45:38 <stepcut> and then make instances of Serialize for Mp3, Forum and Photos
14:45:46 <LittleDan> Why does Haskell have special syntax for constructing types having to do with lists (eg [[Int]] when it could be List (List Int))
14:46:10 <stepcut> that almost works, except, you have to know what you are deserializing in advance
14:46:19 <stepcut> (similiar to read/show)
14:47:02 <stepcut> if you try: (deserialize (serialize (Mp3 "whee.mp3"))) -- you will get and Ambiguous type variable "a" error
14:47:08 <Igloo> LittleDan: To make common things more space efficient and prettier
14:47:45 <Heffalump> space efficient in terms of typing, not in terms of runtime
14:48:01 <Heffalump> typing keys, not Haskell types :-)
14:48:15 <stepcut> but, in reality, the problem is, you don't know if the url is an Mp3, Forum, or Photo at compile time, you won't know till runtime when some clicks on the link
14:48:45 <stepcut> shapr: make sense?
14:48:55 <shapr> yes, that's my major stumbling point with Haskell websites
14:49:30 <stepcut> so, you might think you are clever and try to add another function to the Serialize class
14:49:34 <stepcut> dispatch :: a -> IO ()
14:49:58 <stepcut> so now you can  -->  dispatch (deserialize (serialize (Mp3 "whee.mp3")))
14:50:21 <Igloo> Well, I meant screen space, but yeah  :-)
14:50:31 <shapr> I was actually wondering if I could do it with epigram instead
14:50:40 <stepcut> in theory, this is safe, because even though you don't know the type returned by deserialize at compile time, you do know that there is an instance of dispatch that can handle it
14:51:12 <stepcut> but know of the currentl haskell compilers while actually allow that 
14:51:27 <stepcut> s/know/none/
14:51:33 <stepcut> s/while/will/
14:52:01 <stepcut> but, you can fake it
14:52:14 <stepcut> you can write a function:
14:53:26 <stepcut> dispatch :: [Dispatch] -> [(String,String)] -> IO ()
14:53:53 <stepcut> where Dispatch is an existential type:
14:54:03 <stepcut> data DispatchType = forall a. (Read a, Show a, Data a) =>  DT TypeRep (a -> IO ())
14:55:33 <stepcut> the TypeRep is the TypeRep of the a in the (a -> IO ())
14:57:05 <stepcut> It basically encodes, if some value has the type 'TypeRep' then the following function can be called
14:58:31 <stepcut> so, when you save your values like Mp3, Forum, Photos, you save them as the tuple (show (typeOf a), a) 
14:59:15 <stepcut> then when some one passes your program a URL, you call the dispatch function
15:00:54 <stepcut> the first argument [Dispatch]  is a list of (TypeRep,function that can handle that type), the second arguemnt the TypeRep and value (encoded as strings)
15:01:18 <stepcut> so you basically iterate through the list of dispatch handlers until you find a match...
15:01:24 <stepcut> simple :)
15:01:47 * shapr blinks
15:02:50 <stepcut> each module (Mp3, Forum, etc) needs to export a list [Dispatch] that encodes what functions to call should someone pass you something of type Mp3,Forum, etc
15:03:17 <stepcut> then you just concat all the handlers from each module you import to get the full list (annoying but unavoidable)
15:04:42 <stepcut> if you could get the compiler to tell you all the instances of a class currently in scope, that would be very helpful, but I don't think it is possible right now
15:05:48 <stepcut> in any case, its much easier to use than to explain :)
15:06:42 <stepcut> basically, you say: makeLink (Mp3 "haskell.mp3") (text "an mp3 about haskell")
15:06:54 <stepcut> and in the toplevel module you do:
15:07:05 <stepcut> import Mp3
15:07:42 <stepcut> import Dispatch
15:08:04 <stepcut> runWithHook [] (dispatchHook Mp3.dispatchList) $ standardPage "Nothing" empty
15:08:55 <stepcut> err, main = runWithHook ....
15:09:31 <stepcut> urls are tricky business, because (in general) you want a url to be valid as long as possible
15:09:49 <stepcut> and you want the type-checker to check for dead-links automatically
15:09:55 <shapr> actually, I don't care about the url being valid any longer than the next few minutes
15:10:06 <shapr> I'd be fine with having everything completely dynamically generated
15:10:29 <stepcut> shapr: well, for my purposes, long-lived urls are very important
15:10:39 <stepcut> shapr: so people can link to my site, etc
15:10:42 <shapr> right, I understand thta
15:10:47 <shapr> it would be handy
15:12:16 <stepcut> in any case, i think all solutions will be a bit messy because you basically want to say: save this partially evaluated function as a string, and then next time I run, let me read it back in and keep running it
15:12:23 <shapr> yup
15:12:29 <shapr> is there a better way?
15:12:33 <stepcut> in concurrent clean, they have functions, writeDynamic and readDynamic that will do this
15:13:21 <stepcut> but those are messy, because everytime you recompile things change, so it has to keep a bunch of old info around if you want to continue old computations
15:13:47 <stepcut> in scheme, or other dynamic languages it is much easier. 
15:15:22 <stepcut> like, all the scripting languages where you can turn any string into a function call...
15:15:42 <stepcut> but, of course, then you don't have static typing anymore, which is a big lose
15:17:16 <stepcut> in anycase, as soon as I get the code extracted and into a semi-sensible state, I will post it somewhere so you can play with it
15:17:41 <stepcut> its only around ~70 lines of code
15:19:21 <shapr> sounds good to me
15:20:18 <stepcut> most of it is not WASH specific either, it can serve as a general frame work for save and reading back data values where you don't know the ordering of the values you are reading in
16:22:48 <pimpbot5000> might anyone here know where i could find a Clean chatroom?
16:23:48 <LittleDan> #clean doesn't work?
16:23:57 <pimpbot5000> heh, no one there
16:24:23 <LittleDan> ask your question here, then
16:24:29 <LittleDan> or on usenet
16:24:35 <LittleDan> comp.lang.functional
16:25:09 <pimpbot5000> ok.  well i'm wondering how to increase stack space with the clean compiler
16:26:21 <pimpbot5000> i'm writing recursive matrix code in clean.  but when i up the recursion depth, i get a segfault.  i assume this means its out of stack space
16:30:26 <pimpbot5000> hehe, never mind.  i just use the -s option
16:30:39 <pimpbot5000> is anyone here familiar with uniqueness types?
16:31:06 <stepcut> i am a bit
16:31:23 <pimpbot5000> i've begun to think this is an enormous strength of clean
16:31:34 <pimpbot5000> and that haskell might benefit from it greatly
16:33:10 <pimpbot5000> stepcut: what kind of programs have you written with uniqueness types?
16:33:34 <stepcut> not much, I have not used clean in a while
16:33:38 <pimpbot5000> i'm trying to determine how flexible the clean uniqueness type system is
16:34:12 <pimpbot5000> i can't seem to find the paper on the uniqueness type algorithm
16:34:14 <stepcut> if you search the mailing lists, I think you might be able to find some good discussions
16:34:25 <pimpbot5000> coo, where are some good mailing lists?
16:34:29 <LittleDan> I think Clean would benefit from monads just as much as haskell would benefit from uniqueness types, if not more
16:34:31 <stepcut> (about adding uniqueness types to haskell)
16:34:36 <pimpbot5000> clean has monads
16:34:41 <LittleDan> it does?
16:34:44 <LittleDan> oh
16:34:50 <LittleDan> I must have read the manual really badly
16:34:51 <pimpbot5000> yep, just has no do notation
16:35:04 <LittleDan> and it doesn't use the monads for as much as haskell does
16:35:12 <pimpbot5000> i mean, you can add monads to any HOT language
16:35:17 <LittleDan> yeah
16:35:30 <LittleDan> pretty much anything with anonymous functions, really
16:35:32 <pimpbot5000> well, it's not the clean style, per se
16:35:49 <stepcut> haskell-cafe@haskell.org and glasgow-haskell-users@haskell.org
16:36:06 <LittleDan> how isn't it the clean style?
16:36:07 <pimpbot5000> ok, thx
16:36:32 <pimpbot5000> well, that depends on the task at hand.  let's say you want to do an in-place matrix multiply
16:36:51 <pimpbot5000> a clean programmer uses an array comprehension
16:37:19 <LittleDan> aren't matrix multiplies inherently not in-place unless matricies are square and the same size?
16:37:32 <stepcut> I know at one point in time, the argument against adding uniqness types to haskell is that the particular code in the ghc compiler that needed to be changed was too ugly :)
16:37:40 <pimpbot5000> hehe
16:37:52 <pimpbot5000> you can do a matrix mult on any sizes you want
16:37:57 <pimpbot5000> and in place
16:38:11 <LittleDan> but then the dimentions of the matrix have to change
16:38:55 <LittleDan> unless you make a new one
16:38:59 <pimpbot5000> i'm not sure what you mean.  if you have bounds checking, in-place matrix mult will always work
16:39:11 <LittleDan> what do you mean by in-place?
16:39:13 <pimpbot5000> right, you have to determine the resulting matrix dims
16:39:30 <pimpbot5000> you destructively update the resulting matrix
16:40:04 <LittleDan> but that seems stupid. Why not just make a new matrix? Is it really that much more efficient?
16:40:43 <pimpbot5000> it's a world of difference for large matrices
16:40:51 <LittleDan> oh
16:41:20 <LittleDan> these matricies are strict, right?
16:41:28 <pimpbot5000> they can be
16:41:43 <LittleDan> how do you do a lazy in-place update?
16:42:30 <pimpbot5000> clean allows lazy matrices...but to update lazy matrices, the elements have to be unique as well
16:42:57 <pimpbot5000> i.e. the only reference to the elements resides in the array at the destructive update
16:43:10 <LittleDan> oh, yeah
16:44:12 <pimpbot5000> so uniqueness type checking is a bitch
16:44:31 <LittleDan> I thought you just said it was great and should be ported to haskell
16:44:47 <pimpbot5000> well i imagine it's hard to implement...but pays off
16:45:12 <pimpbot5000> so, let's say you write a list processing algorithm, like append
16:45:36 <pimpbot5000> you know append is unique in its arguments
16:45:43 <LittleDan> what?
16:45:55 <LittleDan> what do you mean?
16:46:04 <pimpbot5000> wait wait, bad example.  
16:46:31 <LittleDan> I wish we could do all of our list concatenation with difference lists (from prolog). they're so cool
16:46:58 <LittleDan> and O(1)
16:47:35 <pimpbot5000> let's say you have a data definition that you keep changing.  clean can recognize when this data structure is unique.  then it can update the structure in-place, rather than having to re-allocate a new data structure
16:48:34 <pimpbot5000> say you have: data T = MkT Int
16:48:37 <LittleDan> I guess that's good, but I'd prefer to just use a state monad and give the illusion that it's being updated in place for the convienence of the programmer. I guess it helps somewhat for efficiency, but couldn't the compiler do that or something?
16:49:02 <pimpbot5000> right, this is unrelated to monads tho
16:49:09 <LittleDan> I mean uniqueness helps, not monads
16:49:17 <pimpbot5000> this is a storage management issue
16:49:22 <LittleDan> ok
16:49:37 <pimpbot5000> you can use monads on top of unique types
16:50:03 <LittleDan> yeah, but clean doesn't, which makes it really annoying sometimes
16:50:14 <pimpbot5000> the problem with using a monad for arrays is that you can't name the array references
16:50:25 <LittleDan> what do you mean?
16:50:51 <pimpbot5000> well, in a state monad the way to guarantee single-threading of the state is to keep it hidden
16:51:13 <LittleDan> but you can get it at any time
16:51:33 <pimpbot5000> right, but let's say you want 3 arrays all at once
16:52:14 <LittleDan> yeah, that's a problem
16:52:19 <pimpbot5000> hehe
16:52:26 <LittleDan> is this one of those problems solved by arrows?
16:52:40 <pimpbot5000> it's a very reasonable request.  i'm not sure, possibly tho
16:53:03 <pimpbot5000> i think the clean people are using monads for interrupts
16:53:54 <LittleDan> you mean like the Continuation monad or something?
16:54:16 <pimpbot5000> yep
16:54:58 <LittleDan> don't you do that in Clean by interspercing | among #'s?
16:55:00 <pimpbot5000> i've been reading some of the Clean papers, but the english is rough sometimes
16:55:06 <LittleDan> (sorta)
16:55:32 <pimpbot5000> i'm not sure what you mean by | and #
16:55:45 <LittleDan> like this:
16:55:53 <LittleDan> function args
16:56:01 <LittleDan>   |condition = exit value
16:56:15 <LittleDan>    #(unique, actions) = that
16:56:25 <LittleDan>    |anotherexitcondition = value
16:56:31 <pimpbot5000> yes
16:56:40 <LittleDan> so why do you need a continuation monad?
16:58:01 <pimpbot5000> for interrupts, you can't easily stop a computation at an arbitrary point
16:58:16 <pimpbot5000> i'm not 100% on this
16:58:26 <LittleDan> can a continuation monad interrupt at an arbitrary point?
16:58:56 <LittleDan> I thought it can only do it once per bind
16:59:11 <pimpbot5000> one sec, let me open up the paper
16:59:53 <pimpbot5000> ftp://ftp.cs.kun.nl/pub/Clean/papers/2003/vWeA2003-Famke.ps.gz
17:00:25 <LittleDan> uh... I can't read postscripts. Only pdf.
17:00:29 <LittleDan> (or html)
17:00:40 <pimpbot5000> ftp://ftp.cs.kun.nl/pub/Clean/papers/2003/vWeA2003-Famke.pdf 
17:01:31 <pimpbot5000> page 5 shows how they use an Exception monad to suspend computation
17:03:52 <LittleDan> that is completely different than the Continuation monad
17:04:20 <LittleDan> what's the kernel state?
17:04:39 <pimpbot5000> think it's just a linked list of running processes
17:05:22 <LittleDan> I think I'd have to read the whole paper up to that to understand it
17:05:59 <LittleDan> that's so cool that it's a typed shell
17:06:30 <pimpbot5000> hehe, they have some cool stuff
17:07:37 <pimpbot5000> clean has dynamics, which is kinda like Java's serializable
17:07:59 <LittleDan> I don't know java
17:08:24 <pimpbot5000> oh, well you can pass clean functions, data around in files
17:08:31 <pimpbot5000> and load them at run time
17:08:35 <LittleDan> but how does a typed shell interact with un-clean programs?
17:08:47 <pimpbot5000> ah, clean has no FFI as of yet
17:09:07 <pimpbot5000> a major problem...haskell has clean beat there
17:09:14 <LittleDan> that makes for a really useful operating system...
17:09:19 <LittleDan> single language
17:09:31 <pimpbot5000> true, it makes things safer
17:10:25 <pimpbot5000> i've discovered some security issues already
17:10:42 <pimpbot5000> apparently, clean doesn't bother to do bounds checking on arrays
17:11:02 <pimpbot5000> so you can easily segfault
17:11:40 <LittleDan> I was being sarcastic about the usefullness of a single-language os
17:11:58 <LittleDan> it doesn't do bounds checking?
17:12:06 <LittleDan> you're sure that's not just unboxed arrays or something?
17:13:00 <pimpbot5000> shouldn't matter if the array is boxed/unboxed...you can dereference outside of the array
17:13:32 <stepcut> bounds checking might be a compiler flag
17:14:25 <stepcut> clean does have an FFI, but it needs a lot of work
17:15:21 <pimpbot5000> right, i read the to-do list earlier today...the list is somewhat out of date
17:24:20 <LittleDan> do dynamics serve any purpose besides allowing typed objects to be passed between programs?
17:24:34 <pimpbot5000> i'm not that familiar with it
17:24:59 <pimpbot5000> they're used for IPC in the clean OS
17:25:28 <sazzle> grumble
17:25:42 <LittleDan> sazzle: what
17:26:10 <sazzle> i think i need to set a library path to get this to work.. just not sure how
17:26:47 <sazzle> i get errors like this when i try to build a wxhaskell example program:
17:26:49 <sazzle> /usr/X11R6/lib/libwxc-gtk2.4.2-0.7.so: undefined reference to `wxGLCanvas::SwapBuffers()'
17:27:07 <sazzle> ideas? :)
17:27:15 <TheHunter> sazzle: gentoo?
17:28:54 <sazzle> freebsd
17:29:19 <TheHunter> i've given up trying to get wxhaskell work on gentoo
17:29:42 <Igloo> `wxconfig --gl-libs` or something similar
17:29:48 <sazzle> i built the wxwindows port, set it when i ran the configure script for wxhaskell, but it didn't work
17:29:53 <Igloo> You might need to put -optl in front of all of them
17:30:38 <sazzle> hmm
17:30:41 <sazzle> i can't find wxconfig
17:30:59 <sazzle> ah
17:31:58 <sazzle> $ wxgtk2-2.4-config --gl-libs  -L/usr/local/lib -liconv -L/usr/X11R6/lib -lc_r -lwx_gtk2_gl-2.4 -lGL -lGLU
17:32:02 <sazzle> is that what you meant?
17:32:14 <Igloo> Looks plausible
17:32:23 <sazzle> it didn't work
17:32:26 <sazzle> what's -optl?
17:32:29 <Igloo> Assuming you're missing a newline
17:32:52 <sazzle> yeah, i am for some reason (missing a new line)
17:32:53 <Igloo> Tells ghc to pass the flag to the linker. Those all look OK though.
17:33:17 <Igloo> Was it the same error?
17:33:21 <sazzle> yeah
17:33:26 <Igloo> What commandline?
17:33:39 <sazzle>  samples/wx$ ghc -package wx -o helloworld HelloWorld.hs
17:33:39 <sazzle> /usr/X11R6/lib/libwxc-gtk2.4.2-0.7.so: undefined reference to `wxGLCanvas::SwapBuffers()'
17:33:40 <Igloo> Oh, order might matter too, not sure
17:33:42 <sazzle> /usr/X11R6/lib/libwxc-gtk2.4.2-0.7.so: undefined reference to `wxGLCanvas::SetColour(char const*)'
17:33:53 <sazzle> i just copied it straight from the website..
17:34:13 <Igloo> ghc -package wx -o helloworld HelloWorld.hs `wxgtk2-2.4-config --gl-libs`
17:35:10 <sazzle> excellent :-) thanks
17:35:18 <Igloo> np
17:35:22 * Igloo disappears
