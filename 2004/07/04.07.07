01:20:03 <bourbaki> hidiho
01:20:36 <shapr> hiya
01:58:05 <shapr> hi Goony 
02:51:01 * shapr yawns
02:55:38 <Marvin--> morning shapr
02:56:54 <shapr> greetz
02:56:58 <shapr> telia sucks apes.
02:57:28 <shapr> they blocked outgoing port 25 connection for all ADSL users
02:57:48 <shapr> you can only connect to port 25 on smtp.telia.net, nothing else
02:57:51 <Marvin--> uh, isn't that really old news?
02:57:57 <arjanb> most providers do that
02:58:15 <shapr> it hadn't affected me until recently
02:58:22 <shapr> like, two days ago or so.
02:58:49 <shapr> anyway, I want to use SPF, so I want to send email to *my* server, not telia.
03:00:52 <shapr> I'll just make an IPv6 tunnel.
03:13:39 * shapr bounces
03:14:55 <Heffalump> what kind of IPv6 address do you have?
03:15:30 <shapr> just a boring tunnel from freenet6
03:15:49 <shapr> I've been emailing various swedish ISPs asking for a native IPv6 address, with no luck so far.
03:17:10 <Heffalump> urchin has native IPv6 now
03:17:15 <shapr> wow, nice
03:17:41 <Heffalump> we should be getting a /48 soon
03:37:44 <Amadan> hi people
03:39:09 <Amadan> if i have lti :: [Char] -> [Char] -> Bool (lessThanCaseInsensitive), can't i write (not . lti) to get its opposite?
03:40:02 <Amadan> (i mean, i found out i can't, but i don't understand why not :))
03:40:36 <clausen> the problem is, -> is right-associative
03:40:50 <clausen> so, lti :: [Char] -> ([Char] -> Bool)
03:41:15 <Marvin--> @type (.)
03:41:22 <Marvin--> hmm
03:41:35 <clausen> so, haskell is looking for not :: ([Char] -> Bool) -> Bool
03:41:36 <Marvin--> (.) :: forall c a b. (b -> c) -> (a -> b) -> a -> c
03:41:38 <Marvin--> anyhoo
03:41:42 <Amadan> ah, okay! so i have to use lambda to do this? (\x y -> not $ lti x y) ?
03:41:44 <clausen> naturally, it finds Bool -> Bool instead
03:43:27 <Marvin--> Amadan: get ready for something scary
03:43:38 <Marvin--> ((.).(.)) :: forall a b c a1. (b -> c) -> (a -> a1 -> b) -> a -> a1 -> c
03:43:50 <Amadan> :) okay, i'm ready for scary ever since i started learning haskell :)
03:44:05 <Marvin--> ((.).(.)) not :: forall a a1. (a -> a1 -> Bool) -> a -> a1 -> Bool
03:44:43 <Amadan> rofl... i have no idea what a composition of two compositions would be, but the type looks okay
03:44:44 <Marvin--> you can do a lot of "fun" things with (.) ;)
03:45:40 <Amadan> so, (((.).(.)) not lti) ? elegant... simple... :)
03:45:55 <Marvin--> elegant perhaps, simple... not really :)
03:46:04 <clausen> I don't think it's elegant either
03:46:11 <Marvin--> to each his own ;)
03:47:36 <Amadan> does that beast have a name?
03:48:23 <Amadan> i'd hate putting in my program a definition of "gollumsEyes = (.).(.)"
03:48:25 <Amadan> :)
03:49:46 <mamoth> girlfriend = (.).(.)
03:50:18 <shapr> my belly button is significantly lower than my chest.
03:50:26 <shapr> maybe that's just because I'm an overweight geek.
03:51:02 <mamoth> verysmallgirlfriend = (.).(.)
03:51:08 <Amadan> mine too... and besides, the type of (.Y.) is just wrong.
03:51:11 * sazzle_ wonders where that came from
03:51:15 <sazzle_> ewwe!
03:52:48 <arjanb> you also could use  (not .) . lti
03:54:51 <Amadan> thanks
03:55:45 <Marvin--> arjanb: spoilsport :(
03:59:12 <arjanb> oh sorry
04:10:31 <shapr> hiya gintas 
04:11:27 <gintas> hi shapr
04:16:56 <shapr> gintas: how's code?
04:59:55 <Lemmih> Hey themaximus.
05:00:27 <Marvin--> ReadP is really neat
05:03:56 <firefly> What is the average IQ of an HCI "researcher" ?
05:04:20 <shapr> that sounds like a loaded question
05:04:25 <firefly> ;)
05:04:39 <Marvin--> haha
05:05:10 <firefly> The ones at DIKU are awesomely bad -- but HCI is a truly interesting field and there are lots of great things going on.
05:05:42 <firefly> I think the average IQ of HCI researchers is quite high - but not that of HCI "researchers".
05:07:39 * esap never understood the point of HCI.
05:08:24 <esap> They get all the gadgets first, but what else? :-) 
05:26:40 <firefly> esap: there was a great MIT project once, called "Bits You Can Touch".
05:27:07 <firefly> They tried to see how far they could go by creating little boxes that knew where they were physically.
05:27:22 <firefly> This was used to transfer stuff between them, to edit video streams and other stuff.
05:27:28 <firefly> Nice HCI work :)
05:28:19 <shapr> I'd like to make a 3D interface like that.
05:28:30 <firefly> Yep.
05:28:36 <bourbaki> 3d interface to what?
05:28:56 <firefly> I would like to do gesture recognition with a few cheap webcams.
05:29:12 <shapr> I think field mice might be better
05:29:23 <shapr> bourbaki: 3d interface to coding
05:29:33 <firefly> I don't want to use any special rings or gloves or anything.
05:29:43 <shapr> field mice don't require anything but a table
05:29:44 <firefly> Or expensive gadgets, for that matter.
05:29:51 <shapr> well, and some gadgets
05:30:32 <shapr> firefly: http://web.media.mit.edu/~jrs/efs.html
05:30:41 <shapr> I'm not sure about patents though.
05:30:44 <firefly> On the other hand, something that would work like special paint on the hands, to make it easier for cameras to distinguish between hands and backgrounds could work.
05:31:13 <firefly> Especially if it could be packaged as a kind of "wet disposable paper napkins".
05:31:25 <firefly> Just "wash" your hands with them and start working :)
05:31:27 <bourbaki> hm there is a 3d programming language
05:31:48 <shapr> bourbaki: what is it?
05:31:56 <bourbaki> come brain!! ;)
05:32:03 <bourbaki> come on ;)
05:33:26 <firefly> shapr: nice, thanks.
05:34:55 <bourbaki> shapr i think its cube
05:35:04 <bourbaki> but im not 100% sure
05:40:08 <bourbaki> gtg bbl
05:59:45 <Amadan> visulan?
06:03:25 <Marvin--> hello syntax
06:09:35 <Marvin--> SyntaxNinja: any idea what kind of syntax we want to use for extensions and options?
06:10:09 <SyntaxNinja> hi Marvin--
06:10:36 <thebug> silly question, when the single quote is used after a variable name, does it do anything special, or is it just part of the name?
06:10:52 <thebug> example: c' = 100
06:10:56 <Marvin--> thebug: just part of the name
06:11:02 <thebug> ok, thanks
06:11:03 <Marvin--> thebug: you can even have silly variable names like  isn't
06:11:07 <SyntaxNinja> hm. strangeness. my chat client was being strange
06:11:28 <SyntaxNinja> anyway, yeah, for extensions, we just need basic commaList(symbol) parsing
06:11:45 <SyntaxNinja> but we need to agree on the extensions.  that whole business isn't implemented yet, for the most part.
06:11:55 <Marvin--> mm, yeah
06:12:18 <SyntaxNinja> then there's options which might look like this:
06:12:21 <Marvin--> I was thinking I'd implement something a bit more general for parsing data types like Extension and License
06:12:33 <SyntaxNinja> options: ghc: -fglasgow-exts, hugs: +foo
06:12:36 <Marvin--> ReadP could probably do that in a quite nifty way
06:12:53 <SyntaxNinja> or maybe: 
06:12:53 <SyntaxNinja> options ghc(foo,bar), nhc(bang,baz)
06:13:13 <SyntaxNinja> go for it!
06:13:14 <Marvin--> wouldn't  options-ghc: -fglasgow-exts  and  options-hugs: +foo  make more sense?
06:14:07 <SyntaxNinja> hm. could be fine. all the other fields in the file match fields in the PackageDescription, but there's no big reason that must be so.
06:15:20 <Philippa> afternoon
06:19:54 <Marvin--> > readP_to_S (parseCommaList (readS_to_P $ readsPrec 0)) "GPL,BSD3" :: [([License], String)]
06:19:54 <Marvin--> [([GPL,BSD3],"")]
06:19:57 <Marvin--> ReadP is *niftiness*
06:22:07 * Marvin-- ponders throwing out Parsec from D.Package completely
06:26:28 <SyntaxNinja> do you want to take over the parser? there's plenty of other stuff that I could work on? :)
06:26:48 <SyntaxNinja> and you get the great distinction of being *THE ONE* who gets to decide on the syntax, and then I'll defend you to the death on the mailing list
06:26:59 <Marvin--> oh dear
06:29:06 <Marvin--> but sure, I'll fiddle around with it and see where it takes me :)
06:36:28 <Marvin--> though Parsec sure is nice for some other things
06:36:36 <bourbaki> bk
06:36:44 <Marvin--> feh, I'll have to import ReadP qualified
06:36:52 <Marvin--> since they have overlapping API :-/
06:39:36 <SyntaxNinja> l4m3
06:39:39 <SyntaxNinja> hi shapr
06:40:04 <SyntaxNinja> Marvin--: but you are a great parser generator.  we need you on our team :) we want to give you the responsibility and authority you deserve :)
06:41:28 <Marvin--> was that an insult...? :)
06:43:10 <SyntaxNinja> no!
06:43:38 * Philippa hangs a sign on herself - "will generate parsers for money"
06:43:42 * SyntaxNinja is obviously failing at flattery
06:45:18 <Marvin--> :)
06:47:19 <Hyp3rion> ew
06:47:41 <Hyp3rion> ipv6 freenodes are down?
06:50:57 <SyntaxNinja> shapr is bouncing
07:03:23 <Marvin--> whoop
07:18:29 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/hawiki/EuroHaskell","May 2004 HC&AR: http://www.haskell.org/communities/","http://www.haskell.org/cabal/"]'
07:18:29 --- topic: set by shapr on [Fri Jun 25 02:34:22 2004]
07:36:43 <shaleh> morning all
07:37:01 <Marvin--> SyntaxNinja: I really dislike the version parsing
07:52:13 <Igloo> Gee, you should have a harsh word with the parser dude. Who's that again?  :-)
07:53:57 <Marvin--> nice try, Igloo
07:54:13 * Marvin-- goes to make more coffee
07:57:01 <Marvin--> time to reinvent some wheels
07:57:11 <bourbaki> woohoo :)
08:06:00 --- mode: irc.freenode.net set +n
08:12:45 <Marvin--> Cases: 3  Tried: 3  Errors: 0  Failures: 0
08:12:46 <Marvin--> woot
09:01:23 <Lunar^> "My name is Wolfgang Thaller. I live in Graz, Austria (that's in Europe - no kangaroos here).  I am 21 years old (born in 1981)"
09:01:32 <Lunar^> *sigh*
09:01:55 <Marvin--> what, Austraia doesn't have kangaroos? I'm disappointed :/
09:02:21 <Marvin--> wow, talk about ambigous typo
09:02:28 <Marvin--> I meant Austria :)
09:03:02 <Lunar^> Marvin--: The last part is just... you know... this guy actually knows so much
09:03:04 <shaleh> they don't even have a zoo?
09:03:39 <Smerdyakov> Lunar^, well, he is giving you two pieces of information: how old he is and when he wrote the blurb.
09:07:39 <JaffaCake> Lunar^: folk like Wolfgang aren't that common, fortunately :)
09:08:58 * Heffalump has a T-shirt saying "No kangaroos in Austria" on it.
09:10:17 <Lunar^> JaffaCake: sure :) Thanks, meeting sebc already prepared me to this kind of people :)
09:10:57 <SyntaxNinja> Marvin--: the version parsing used to be something of true beauty
09:11:03 <SyntaxNinja> but then JaffaCake got to it...
09:11:08 <SyntaxNinja> ;)
09:11:10 * JaffaCake hides
09:11:21 <SyntaxNinja> I'm not actually sure what he had in mind for the tags if it should be foo.bar.bang-tag-tag-tag
09:11:33 <SyntaxNinja> or why the first tag is automatically assigned to the date, or what exactly.
09:11:46 <SyntaxNinja> I keep meaning to ask about that.
09:11:48 <Marvin--> The problem with the version parsing code is that it's both too complex and too simplistic
09:11:50 <JaffaCake> feel free to change it
09:12:09 <Marvin--> too complex to understand and too simplistic to actually be useful
09:12:25 <SyntaxNinja> Marvin--: that's because it was a lot more complex before, JaffaCake then simplified it, but used the old framework. it does need to be redone.
09:12:25 <JaffaCake> I don't think that version was intended to be the definitive way
09:12:26 <Marvin--> it doesn't even handle versions like  1.2a.3
09:12:46 <Marvin--> all right
09:12:49 <SyntaxNinja> BUT
09:12:57 <JaffaCake> 1.2a.3 isn't part of our version scheme
09:13:00 <Lunar^> SyntaxNinja: What about the algorithm described in debian-policy ?
09:13:04 <SyntaxNinja> the representation should probably stay the same. ie [versions][tags]
09:13:46 <SyntaxNinja> Lunar^: idono. talk to JaffaCake about the kinds of versions we'll handle :) it appeals to me since it's simple, but it doesn't try to handle a wide variety of cases.
09:14:19 <Marvin--> the problem is that versions can be incredibly crazy
09:14:21 <Igloo> Debian's versions are almost certainly more complicated than cabal would want as they try to cover everyone else's versioning schemes, but here you get to dictate a simple, sane one
09:14:37 <SyntaxNinja> exactly
09:14:38 <Marvin--> if you want an ordering on them, you need to keep it simple
09:14:39 <JaffaCake> we are defining a version scheme, so we can make it as simple as we like
09:14:44 <SyntaxNinja> the difference is that we're dictating it.
09:14:48 <SyntaxNinja> like JaffaCake and Igloo just said :)
09:15:00 <Lunar^> SyntaxNinja: read the mailling-list threads already.. understanding version is like natural language, IMHO :)
09:15:13 <SyntaxNinja> heh. maybe aetion can write an abduction machine for it
09:15:19 <JaffaCake> I think we're in agreement
09:15:36 <Marvin--> I just really don't understand the tags :-)
09:15:39 <SyntaxNinja> the only question is how to parse it; and I think that's up to marvin :)
09:15:53 <shaleh> I always liked Debian's epoch idea
09:15:58 <JaffaCake> you can probably mostly ignore the tags - they don't play any part in the ordering
09:16:00 <Igloo> What are the tags for?
09:16:30 <JaffaCake> hmmm, not sure if I can recreate the discussion....
09:16:49 <JaffaCake> the version scheme is A.B.C-tag1-tag2-tag3
09:17:23 <JaffaCake> in Cabal I don't think we'll make use of the tags except perhaps for annotation
09:17:33 <Igloo> Some examples of what tags might be might make it clear?
09:17:42 <JaffaCake> but in general people wanted to annotate versions will arbitrary strings - e.g. for adding a date
09:17:53 <JaffaCake> s/will/with
09:18:17 <JaffaCake> e.g. 6.2.1-SNAP-23Jul2004
09:19:06 <Igloo> Hmm, but they can't be used in dependencies or anything? I'm not sure why they're in the version field then
09:19:13 <Marvin--> then I think it makes the most sense to just parse the "6.2.1" part (and use for comparisons) and also keep a verbatim string for the full version
09:19:27 <JaffaCake> not in Cabal, but this is intended to be a general purpse Version type
09:19:48 <JaffaCake> the meaning of ordering is application-dependent
09:21:22 <JaffaCake> Marvin--: can't you parse that string into the existing Version type?
09:21:25 <SyntaxNinja> JaffaCake: so one thing I didn't grok is why you changed the first tag to be "date=tag1"
09:21:46 * JaffaCake goes to look at the source
09:22:49 <JaffaCake> I think that part of the parser is wrong
09:23:14 <JaffaCake> it was for an older Version type
09:23:26 <Marvin--> what I mean is, why not just have  data Version = Version [Int] String
09:23:43 <SyntaxNinja> so basically, we have: Version {branches::[Int], tags::[String]
09:23:47 <Marvin--> "6.2.1-SNAP-23Jul2004" would be parsed as  Version [6,2,1] "6.2.1-SNAP-23Jul2004"
09:23:49 <SyntaxNinja> (for the sake of conversation)
09:24:14 <SyntaxNinja> and "6.2.1-SNAP-23Jul2004" should be parsed as Version [6,2,1] ] ["SNAP", "23Jul2004"]
09:24:24 * SyntaxNinja fights Marvin--
09:24:26 <JaffaCake> Marvin--: for us it doesn't matter, but other version schemes wanted to have a bag of tags attached to the version, so the extra structure is useful
09:24:54 * SyntaxNinja tosses up the missing "}"
09:25:23 <JaffaCake> the Version type in Distribution.Version will eventually be in Data.Version (if I ever get around to it)
09:25:40 <JaffaCake> but the parser, printer and ordering will remain in Distribution.Version
09:25:45 <JaffaCake> does that help?
09:26:25 <Marvin--> oh, I didn't know that it was meant to be a general implementation
09:26:39 <JaffaCake> right, that's the point
09:27:07 <JaffaCake> we're going to have compilerVersion :: Version somewhere in the libraries
09:27:11 <Marvin--> well, that makes more sense
09:28:16 * JaffaCake looks out the window and discovers that he's going to get rather wet on the way home today
09:28:26 <Marvin--> so where *did* that "date=" come from?
09:28:42 <SyntaxNinja> JaffaCake: I'd give you a ride, but...
09:28:48 <JaffaCake> heh
09:28:49 <SyntaxNinja> I don't think we're going home at the same time.
09:29:02 <JaffaCake> Marvin--: who knows? :)
09:29:19 <SyntaxNinja> JaffaCake: I'm afraid to mention it, but didn't you seem to think that tags had the form "foo=bar" rather than any old free string?
09:29:37 <SyntaxNinja> it's raining here too.
09:29:39 <JaffaCake> hmmm, I think we did at one stage
09:29:58 <Marvin--> it's not raining here, decent weather for the first time in a few weeks :-)
09:30:04 <JaffaCake> but really, there's no fixed format for the tags
09:30:33 <SyntaxNinja> OK. so then the story is very easy.
09:30:41 <SyntaxNinja> "6.2.1-SNAP-23Jul2004" should be parsed as Version [6,2,1] ] ["SNAP", "23Jul2004"]
09:30:53 <JaffaCake> yup
09:31:02 * SyntaxNinja beams in Marvin--'s general direction
09:31:08 <Marvin--> and the Parsec-based parser in Distribution.Version is hella-ugly :-)
09:31:18 <SyntaxNinja> Marvin--: it used to do dates and other stuff
09:31:37 <Marvin--> but I'll care less about Distribution.Version and more about Distribution.Package now
09:31:38 <SyntaxNinja> but you can get rid of that. I'm sure I have it somewhere.
09:32:01 <Marvin--> I am concerned about the VersionRange parser, though
09:32:03 <JaffaCake> you guys are doing a great job
09:32:33 <Marvin--> "libfoo -any"??
09:33:00 <JaffaCake> huh?
09:33:14 <SyntaxNinja> Marvin--: well, that shouldn't bother the version parsing
09:33:35 <Marvin-->                     <|> (do reservedOp "-"
09:33:35 <Marvin-->                             reserved "any"
09:33:35 <Marvin-->                             return $ AnyVersion)
09:33:37 <SyntaxNinja> JaffaCake: libfoo-any parses as (Dependency "libfoo" AnyVersion)
09:33:48 <JaffaCake> oh right, yes I just noticed
09:34:04 <JaffaCake> perhaps it should be libfoo-*
09:34:04 <SyntaxNinja> that doesn't matter. everything to the right of the "-" is the version. it doesn't conflict.
09:34:38 <JaffaCake> I'm not particularly attached to the syntax, feel free to change it
09:34:47 <Marvin--> but why should the version be after a dash? We use == and >= and stuff for all other version ranges
09:35:04 * SyntaxNinja twiddles thumbs...
09:35:25 <SyntaxNinja> idono, what do you want it to be after?
09:35:48 <Marvin--> and no, libfoo-any doesn't parse as  libfoo-any
09:35:48 <JaffaCake> it's a bit inconsistent, I grant you
09:35:49 <Marvin--> er
09:35:58 <Marvin--> libfoo-any doesn't parse as Dependency "libfoo" AnyVersion
09:36:03 <SyntaxNinja> no?
09:36:24 <Marvin--> since - is a valid character for package names
09:36:26 <Marvin--> (isn't it?)
09:36:43 <SyntaxNinja> no. shouldn't be
09:36:52 <Marvin--> OIC
09:36:52 <JaffaCake> that sounds like it might create problems
09:37:06 * JaffaCake heads off to get wet
09:37:13 <SyntaxNinja> then elsewhere we're pasring libfoo-1.0 as (Dependency "libfoo" (Exactly 1.0)) or whatever
09:37:16 <SyntaxNinja> l8r JaffaCake
09:37:37 <Marvin--> no, libfoo-1.0 fails to parse :-)
09:37:44 <SyntaxNinja> Marvin--: I argued for having the separator being an equal, but I got overruled.
09:37:55 <Marvin--> the code says ==
09:37:56 <SyntaxNinja> Marvin--: that sucks.
09:38:40 <SyntaxNinja> yeah. i guess it needs to change. idono, you could bring it up with that CC list we've been using... I'm not committed to that syntax either. you could say "libfoo==*" if you want, for anyversion
09:39:02 <Marvin--> I don't want to see any "-any" crap at all, I think Debian's syntax makes sense
09:39:13 <SyntaxNinja> but these guys wanted versions separated from the package name with a dash
09:39:16 <Marvin--> Depends: foo >= 0.1, bar, baz, feh <= 0.5
09:39:22 <SyntaxNinja> so "libfoo" parses as anyversion
09:39:44 <Marvin--> (i.e., for AnyVersion you shouldn't even give a version)
09:39:45 <SyntaxNinja> that's fine by me. 
09:39:52 <SyntaxNinja> there used to be something like libfoo-any and libfoo-all
09:40:02 <Marvin--> wha?
09:40:06 <SyntaxNinja> but that was for something different
09:40:08 <SyntaxNinja> not for dependencies
09:40:32 <SyntaxNinja> so that version range parser is left over from an earlier hc-pkg prototype that I wrote
09:40:52 <SyntaxNinja> where i could say "hc-pkg list libfoo=all" or "hc-pkg remove libfoo=any" or something
09:41:14 <SyntaxNinja> so all the operations could operate on ranges of versions.
09:41:25 * SyntaxNinja recalls it as a thing of great beauty in its pure form
09:41:58 <SyntaxNinja> aaaaanyway, you can change it.
09:42:44 * SyntaxNinja tries not to scare Marvin-- away
09:43:03 <Marvin--> heh
09:43:09 <Marvin--> my tummy is growling so I'd better feed it
09:43:14 <SyntaxNinja> ok. me too.
09:43:17 <SyntaxNinja> it's lunchtime here
09:43:33 * SyntaxNinja owes Marvin-- a beer
09:43:41 * Marvin-- shakes his fist at timezones
09:43:45 <SyntaxNinja> is that two now?
09:44:51 * SyntaxNinja lunch &
10:29:41 <bour> bk
11:02:22 <shapr> Igloo: for ghc6-hopengl, with freeglut3 installed, -lglut is required to build the Cube examples
11:02:58 <bourbaki> shapr have you had a look at that cube lang?
11:03:09 <Igloo> Is freeglut3 a freedesktop.org glut or something?
11:03:11 <Igloo> (thanks)
11:04:17 <shapr> not sure
11:05:02 <shapr> ah, completely OSS version of GLUT
11:05:24 <shapr> seems that glut was both non-free and abandoned since 98
11:05:35 <Igloo> Surely any GLUT in Debian is entirely OS?
11:06:11 <shapr> that appears to be true now :-)
11:23:51 <Marvin--> hmm
11:24:10 <Marvin--> SyntaxNinja: didn't you say that package names shouldn't have '-' in them?
11:24:38 <Marvin--> I'm just wondering where you pulled  Dependency "haskell-src" AnyVersion  from :-)
11:24:51 <SyntaxNinja> I guess not... that's my lower-court ruling. you can appeal to a higher-court.
11:25:20 <SyntaxNinja> ie this has come down from above
11:25:40 <Marvin--> well, the code agrees with you, which explains why I had to hack parseDependency to make the test cases pass yesterday
11:26:16 <SyntaxNinja> actually, maybe it's OK... if the first thing after the - isn't a number, then it's part of the identifier
11:26:32 <Marvin--> er, like "any"?
11:26:44 <SyntaxNinja> yeah, well I already said we could get rid of "any" :)
11:27:14 <SyntaxNinja> the simons & malcolm, if I remember, seemed to want the version number separated by a dash from the package name.
11:27:22 <Igloo> Did you work out why you should ever need to parse package-version rather than something like package >= version?
11:27:22 <SyntaxNinja> (as it says in the document, I think)
11:27:25 <Marvin--> I wonder why
11:28:04 <SyntaxNinja> Igloo: it partly depends on whether we have this version range parser operate on things besides dependencies.
11:28:06 <Igloo> I suppose you might want the directory to be package-version, but package/version would work just as well
11:28:26 <Marvin--> which document? the "HPS" proposal?
11:28:31 <SyntaxNinja> Marvin--: yeah
11:28:39 <Marvin--> I couldn't find anything formal about versions at all
11:28:41 <Igloo> Syn: But my question is what things could there be where they will need to be connected?
11:28:44 <SyntaxNinja> Marvin--: I would take this up with that CC list with the simons and malcolm.
11:28:53 <Marvin--> right
11:28:57 <Igloo> I'm finding it hard to think of something where a space or / wouldn't do
11:29:17 <SyntaxNinja> rather than a - you mean?
11:29:25 <SyntaxNinja> idono. they just liked the dash because it's standardish
11:29:27 <Igloo> Yup
11:29:43 <Marvin--> well, it's standardish in directory naming
11:29:44 <Igloo> Oh, tarballs is one I guess
11:29:56 <Marvin--> hardly in dependency lines
11:30:01 <SyntaxNinja> Marvin--: there were a number of examples of package versions in the document, which I had at one point changed to "package=version" and they made me change it back. I'm not sure that they're mentioned explicitly there.
11:30:27 <bourbaki> esap are you there?
11:30:33 <SyntaxNinja> Marvin--: I think that the version parsing and version range parsing shoudl be generic.
11:30:38 <Marvin--> deps:    [ foogle > 2.9, bargle = 2.5.1 ]
11:30:58 <SyntaxNinja> right. hm. yeah, that's definitely how we want the depends to look.
11:31:09 <Marvin--> minus the brackets IMO :)
11:31:10 <SyntaxNinja> so the real question is, where did they want the dashes?
11:31:52 <Marvin--> well, 3.1.2 talks about A-2.1 and B-1.0
11:32:00 <SyntaxNinja> maybe it had to do w/ hc-pkg... I can't quite remmeber, and at work, I don't really care to look it up.
11:32:01 <Marvin--> but that's sort of different
11:32:24 <SyntaxNinja> well, but that still leaves us with the question of dashes in the package names.
11:32:51 <Marvin--> I think they should be allowed
11:32:54 <SyntaxNinja> I would say, just ask them if we can still have dashes in the package names, and we'll worry about parsers for other things later.
11:33:03 <SyntaxNinja> I agree. I don't think the'll put up much of a fight.
11:34:36 <Marvin--> since there are multiple sane ways to specify AnyVersion, I think the sane thing to do is for parseVersionRange *not to* return AnyVersion
11:34:51 <Marvin--> and let the caller deal with it
11:35:10 <Marvin--> and this makes even more sense if Distribution.Version is supposed to become Data.Version and be generic
11:36:07 * SyntaxNinja doesn't understand
11:36:34 <SyntaxNinja> what will parseVersionRange do if it doesn't return AnyVersion?
11:36:46 <Marvin--> fail?
11:37:03 <Marvin--> it should only parse >version, >=version, <version, <=version and ==version
11:37:23 <Marvin--> and let the caller decide when AnyVersion should come into the picture
11:38:01 <Marvin--> in parseDependency we'd then do   ver <- try parseVersionRange <|> return AnyVersion
11:38:18 <Marvin--> (or maybe the try isn't needed, I'm no parsec wizard)
11:39:20 <SyntaxNinja> Marvin--: eh, I'd say just pick a syntax for AnyVersion; probably just the package name. no reason to leave it in the air indefinitely. it's not a decision that there's any particular advantage to leaving open, IMO
11:40:09 <Marvin--> wait wait wait, I must be unclear because you're missing the point :) parseVersionRange has nothing to do with package name
11:40:57 <SyntaxNinja> hm. right.
11:41:00 <SyntaxNinja> OK.
11:41:07 <Marvin--> parseVersionRange just parses the version range syntax
11:41:25 <SyntaxNinja> rightright. I knew that ;) I wrote it :)
11:41:35 <Igloo> The try shouldn't be needed
11:41:43 <SyntaxNinja> (sorry, my attention is very divided ATM)
11:41:51 <Marvin--> SyntaxNinja: I'll write a mail instead
11:41:59 <Marvin--> Igloo: so when exactly is the try needed?
11:42:01 <Igloo> Because if you find a character that could start a version range you will never want to return AnyVersion
11:42:12 <SyntaxNinja> I don't want to hold you up by not being available. make decisions :) that's why you're in charge of the parser :)
11:42:37 <Marvin--> SyntaxNinja: I don't *want* to be in charge of Dist.Version if it's going to become Data.Version! :)
11:42:43 <Igloo> If you want to parse abc | adef then you need try as it will commit to the first branch on finding an a
11:42:57 <SyntaxNinja> Marvin--: don't worry.
11:43:05 <Igloo> If you want to parse abc | def then you don't as the second branch will never match once it has committed to the first branch
11:43:14 <Marvin--> right, right
11:44:24 <Marvin--> hm, so I see the point that when parsing   <V | <=V  you need try
11:44:51 <Marvin--> but... here we're parsing  <V | >V | <=V | >=V | ==V
11:45:03 <Marvin--> and yet there's only a try on the first branch...
11:45:17 <Marvin--> does the first try cover all branches?
11:45:23 <Igloo> Can I see the code?
11:45:46 <Marvin--> http://cvs.haskell.org/darcs/cabal/Distribution/Version.hs :)
11:45:55 <Marvin--> parseVersionRange
11:46:17 <Igloo> And in some cases you'd want to refactor it to be < (V | =V) and put it together after you have parsed it. That won't be an issue here, though, as you can tell the two apart on the second character
11:46:38 <Marvin--> right, in larger cases you want to left-factor it
11:47:10 <Igloo> Does that successfully parse ">= 5"?
11:47:42 <Igloo> Oh, reservedOp might be doing extra magic if it does. But if so I don't think you'd need the first try
11:47:54 <Marvin--> hmm
11:48:20 <Igloo> extra magic == check the first n characters match and the n+1th isn't an operator character before committing
11:48:34 * Igloo goes to rescue food, BIAB
11:48:44 <SyntaxNinja> hm. I'm scared of flaw's away message
11:49:04 <Marvin--> SyntaxNinja: heh, yeah, I've reacted on it too
11:54:06 <Marvin--> meh, I'll just *not* write a mail and hack on the code instead :-)
11:55:59 <SyntaxNinja> OK
12:08:35 * Marvin-- frowns at parsec
12:09:37 <SyntaxNinja> oh, you love it.
12:10:05 <Marvin--> no, I really loathe the fact that I have to specify eof:ness explicitly
12:14:25 <Marvin--> oh this is silly
12:14:42 <Marvin--> it feels really stupid to mix ReadP parsers and Parsec parsers in the same file
12:16:14 <SyntaxNinja> I don't see anything wrong with it.
12:16:19 <bourbaki> bye
12:16:26 <SyntaxNinja> if you want to boot parsec, though, I won't complain too much.
12:18:44 <Marvin--> well, Dist.Version uses parsec
12:21:05 * Marvin-- decides to watch Henry VIII on tv instead
12:22:47 <SyntaxNinja> d'oh
12:27:07 <Marvin--> ooh, blood and gore
12:28:55 <SyntaxNinja> "oh version parser, version parser, wherefore art thou parsec?"
12:29:00 * Igloo hits step on mp_set_memory_functions, a GMP function, in gdb and appears in the middle of Show.hc
12:31:08 <Marvin--> Igloo: stack corruption fun?
12:31:50 <Igloo> Something certainly seems wrong  :-)
12:41:52 * Igloo tries removing -fomit-frame-pointer to see if that magically fixes it
12:42:52 <Marvin--> oh wait, I can use the doVersionRangeParse function, hooray
12:43:07 <Marvin--> hmm, I think they should do some eof trickery though
12:44:10 <Marvin--> gnngh, but they are not exported
12:44:39 <SyntaxNinja> what's not exported?
12:45:39 <Marvin--> doVersionParse and doVersionRangeParse
12:51:37 <SyntaxNinja> you can export them.
12:52:54 <Marvin--> well, yeah
12:53:02 <Marvin--> but I'm guessing that wasn't the intention of them
12:56:56 <SyntaxNinja> I hadn't decided whether I was going to export the ones with parsec stuff in the type or with just String -> Whatever in the type.
12:57:16 <SyntaxNinja> I was going to wait to see how all the parsing played out, then clean it up later.
12:57:32 <Marvin--> ok :)
12:57:36 * Marvin-- hacks away
12:57:44 <SyntaxNinja> if modules wanted to use other modules parsec-typed parsers, then I was going to export those
12:57:50 <SyntaxNinja> :)
13:07:51 <Marvin--> yuk
13:07:59 <Marvin--> either_to_readP :: Either e a -> ReadP a
13:07:59 <Marvin--> either_to_readP (Right x) = readS_to_P (\s -> [(x,"")])
13:07:59 <Marvin--> either_to_readP (Left  e) = readS_to_P (\s -> [])
13:12:27 <Marvin--> whoops, poor ol' Henry got yet another daughter
13:15:26 <Marvin--> gah, that won't work
13:15:28 <Marvin--> silly me
13:15:35 <Marvin--> god, this sucks
13:23:36 <Marvin--> SyntaxNinja: do you think it makes sense to get rid of the parsec parser in Dist.Version and replace it with a ReadP parser?
13:48:04 <SyntaxNinja> Marvin--: well, does that include VersionRange? I thoughtt hat code was pretty solid
13:52:20 <Marvin--> combining parsec parsers and readp parsers is kinda hard :(
13:52:35 <Heffalump> isn't Koen an expert on that? :-)
13:53:50 <Marvin--> with ReadP parsers in Dist.Version, we can use them to make Read instances for Version and VersionRange
13:54:54 <Marvin--> Heffalump: I don't think combining them has ever been a goal
13:55:15 <Heffalump> I thought his new Read instance used Parsec?
13:55:27 <Marvin--> how new is new?
13:55:34 <Marvin--> ReadP doesn't use Parsec
13:56:09 <Marvin--> the techniques in ReadP are probably quite similar to his Parse*k* library, though
13:56:15 <Heffalump> oh, duh.
13:56:23 <SyntaxNinja> Marvin--: hm. well, I'm not sure what troubles you're running into w/ parsec of course, but it sounds like you're talking about rewriting VersionRange, which is fine, but it surprises me that that's easier than getting that simple version parsing scheme we were talking about working (with parsec).
13:56:25 <Heffalump> I thought it did actually use Parsek, though.
13:58:31 <Marvin--> SyntaxNinja: well, seeing as I was trying to get rid of Parsec from Dist.Package in favor of ReadP, it kinda sucks to have a version number parser in Parsec that makes me import Parsec stuff anyway
13:59:07 <Marvin--> Heffalump: well I haven't compared ReadP.hs to Parsek.hs, as I said, it's quite likely that ReadP is based on Parsek
14:03:34 <Marvin--> ah well, maybe it's silly to throw out Parsec in favor of ReadP
14:05:04 <Igloo> What is Parsek? And is ReadP the thing that GHC/the HLs use to write the ReadS instances?
14:05:43 <Marvin--> Parsek is a parser library Koen wrote
14:05:45 <SyntaxNinja> Marvin--: I trust your judgement.
14:05:56 <Marvin--> "fast and space-efficient monadic parser combinators."
14:05:57 <SyntaxNinja> it's just that you'll have to reimplement stuff.
14:06:42 <Marvin--> yeah, there is that
14:06:54 * SyntaxNinja goes home. ttyl
14:06:55 * SyntaxNinja &
14:06:57 <Marvin--> ReadP lets you do lots of nifty things though
14:07:23 <Marvin--> Igloo: and I don't know if ReadP is used internally to write Read instances, but that's the point of it anyway
14:07:43 <Marvin--> the "run" function for ReadP is readP_to_S :: ReadP a -> ReadS a
14:08:13 <Marvin--> there is also readS_to_P which is quite nifty :-)
14:08:19 <Marvin--> parseReadable :: Read a => ReadP a
14:08:19 <Marvin--> parseReadable = readS_to_P (readsPrec 0)
14:12:27 <monotonom> ReadP is good.  It is common sense.  The explicit threading in [ blah | (x,s') <- whatever s, (y,s'') <- whathaveyou s', ... ] is tiresome after a while.
14:12:45 <Heffalump> so it uses a list+state monad?
14:14:13 <monotonom> It strucks me as odd that Haskell 98 doesn't standardize on something like ReadP in the first place.
14:14:23 <Marvin--> I don't know exactly how it's implemented
14:30:20 <Marvin--> I wonder if it's possible to implement something like parseReadable in Parsec
16:39:12 <RussellOConnor> Cont (\f->f (Cont (\g -> g (\a -> f (Cont (\h->a)))))) :: forall r r1. Cont r (Cont r1 (r1 -> r))
16:45:30 <Heffalump> and? :-)
16:46:57 <RussellOConnor> Um, I'm trying to figure out what it does.
16:47:38 <RussellOConnor> Normally I think of a (Cont r a) as holding the final result r (and ignoring remaining computation) or as holding an a.
16:47:54 <RussellOConnor> But I'm pretty sure this is neither.
16:49:14 <Heffalump> is there some type class that both Cont and (->) a belong to, btw?
16:49:24 <RussellOConnor> I came up with this when trying to figure out if I could implement my own Monad.Cont with a data type something like Result r | Computation a instead of (a->r)->r
16:49:33 <Heffalump> otherwise that type looks badly kinded
16:50:27 <Heffalump> Cont r a is a continuation that expects an a and produces an r, surely?
16:50:37 <RussellOConnor> Cont is a type contrutor taking 2 types, so it is fine.
16:50:51 <Heffalump> oh, duh, any two types, sorry
16:51:02 <RussellOConnor> Cont r a is defined to be (a->r)->r in the default implemenation.
16:52:06 <RussellOConnor> so it is a function that takes the future computation f::(a->r), does computation upto a and then runs f on a.  At least in the usual case.
16:52:32 <RussellOConnor> In the execptional case it will find the result r and just return that, and skip the future computation entirely.
16:52:48 <Heffalump> ok, so at least you want Computation (a->r) above
16:52:50 <RussellOConnor> Or at least that's how I normally think of this.
16:53:34 <RussellOConnor> not really.
16:54:00 <RussellOConnor> You want to have a function called runCont:: (Cont r a) -> (a -> r) -> r
16:54:19 <Heffalump> so what is your proposed implementation for this function?
16:55:29 <RussellOConnor> If (Cont r a) is Result r, just return r and ignore the second parameter.  If (Cont r a) is Computation a, take the second parameter f::(a -> r), apply it to your a, and then return the resulting r.
16:56:08 <Heffalump> ah, right.
16:56:16 * Heffalump starts to see. I never did get Continuations.
16:56:31 <RussellOConnor> I'm slowly starting to understand continuations.
16:57:05 <RussellOConnor> But I don't think my implemenation can express whatever it is that Cont (\f->f (Cont (\g -> g (\a -> f (Cont (\h->a)))))) does.
16:57:44 <Heffalump> Cont (\h -> a) becomes Result a
16:58:24 <RussellOConnor> Yes
17:00:36 <Heffalump> the next one out is
17:00:43 <Heffalump> Computation (\a -> f (Result a))
17:01:04 <Heffalump> and the next one out after that is Computation (Computation (...))
17:01:34 <Heffalump> however I'm a little dubious that in general you can do this
17:01:47 <Heffalump> (none of the above is tested, I just worked through it on paper)
17:03:41 <Heffalump> Cont (\f -> 1 + f 3) :: Cont Int Int
17:03:47 <Heffalump> how would you represent that in your structure?
17:08:43 <RussellOConnor> That's a good point, and a strange use of a continuation.
17:10:04 <Heffalump> isn't it the kind of thing that call/cc lets you do?
17:10:26 <Heffalump> anyway, I'm off to bed
18:54:06 <shammah> RussellOConnor, Isn't that continuation expression equivalent to Cont (\f -> f) ?
19:59:03 <jesse> is there a way to load package modules from the ghc prompt
20:01:03 <jesse> :load /data/char for example tells me its a package module, but im not sure if that means 'tough luck' or 'try something else'
20:02:36 <jesse> ghci*
20:09:57 <jesse> nevermind, i just have to qualify the function names/add them to context
22:18:05 * SamB wonders if people will start using greek letters in their real haskell programs when GHC supports unicode in source
22:18:32 <ozone> SamB: i'll be happy just for a real lambda :)
22:19:35 <heatsink> I can think of a few standard chinese characters I could use
22:19:42 <heatsink> I'd have to get an IME though
22:26:15 <SamB> ozone: hmm, that would be nice, yes.
22:26:34 <SamB> aren't chinese chars double-width?
22:26:49 <SamB> I mean, they might mess up the layout.
22:27:39 <heatsink> Double-width?
22:28:02 <heatsink> They're roughly square, depending on the font
22:28:35 <heatsink> I'd use a fixed-width font anyway... awful hard to read a source file in Dom Casual
22:32:16 <SamB> well, aren't most fixed-width fonts with chinese/japanese chars bi-width?
22:32:52 <heatsink> I know there are some japanese fonts with half-width characters
22:33:11 <heatsink> But the half-width characters also come in full-width versions
22:34:38 <SamB> at non-ascii codepoints, maybe...
