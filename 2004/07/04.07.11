00:08:35 <SamB> well, maybe some could get passed in that weren't known during compilation of that module?
00:25:27 <stepcut> SamB: if that where the case, the load would fail, which is acceptable behaviour
00:26:06 * stepcut goes to bed
01:19:37 <bourbaki> hi
02:19:09 <Lunar^> Shouldn't we try Bossa ( http://www.osnews.com/story.php?news_id=7623 ) for GHC ?
04:26:28 <bourbaki> bk
04:42:53 <bourbaki> anyone interested in that sphereoid version of the homotopy morph thing/
04:42:54 <bourbaki> ?
05:21:18 <bourbaki> can someone of you help me with that curry function again?
05:21:32 <Marvin--> @type curry
05:21:33 <lambdabot> curry :: forall c b a. ((a, b) -> c) -> a -> b -> c
05:21:39 <Marvin--> what of it? :)
05:22:12 <bourbaki> curry g x y = g (x, y) is
05:22:38 <bourbaki> i still dont get why this is working
05:23:04 <Marvin--> what part of it is problematic?
05:23:07 <bourbaki> i mean the left side in that thing is the left side in the definition right?
05:23:31 <bourbaki> so g x y is of type ((a,b) -> c)
05:23:35 <Marvin--> no no no
05:23:49 <Marvin--> curry has type  ((a,b) -> c) -> a -> b -> c
05:23:58 <Marvin--> this means that /curry/ takes three arguments
05:24:06 <Marvin--> the first argument has type  (a,b) -> c
05:24:10 <Marvin--> the second argument has type a
05:24:15 <Marvin--> and the third argument has type b
05:24:22 <bourbaki> ahhh!
05:24:38 <Marvin--> that is, g :: (a,b) -> c, x :: a, y :: b
05:25:22 <Marvin--> man, it's really pouring down
05:25:26 <bourbaki> ok i have a funtion here of type
05:25:27 * Marvin-- watches the rain
05:25:33 <bourbaki>  Float -> Float -> Float -> Vector
05:25:48 <bourbaki> and i want to pair the two second Floats
05:26:19 <Lemmih> f v1 v2 v3 = (v2,v3)?
05:26:25 <Marvin--> what, you want to turn  f :: Float -> Float -> Float -> Vector  into a  f' :: Float -> (Float,Float) -> Vector ?
05:26:35 <bourbaki> yes
05:26:52 <Marvin--> then curry isn't what you want, /uncurry/ is
05:26:58 <Marvin--> f is on "curried form"
05:27:03 <Marvin--> (that is, no tuples)
05:27:06 <bourbaki> yep i know :)
05:27:13 <bourbaki> but its just the same mechanism
05:27:20 <Marvin--> but the other way around ;)
05:28:08 <Marvin--> f' x = uncurry (f x)
05:28:31 <Marvin--> or, written out, f' x (y,z) = f x y z
05:29:20 <Marvin--> are you with me?
05:29:30 <bourbaki> yes
05:29:43 <TheHunter> @type (uncurry .)
05:29:45 <lambdabot> (uncurry .) :: forall a b c a1.
05:29:45 <lambdabot> 	       (a1 -> a -> b -> c) -> a1 -> (a, b) -> c
05:29:47 <bourbaki> uncurryHomCoords :: testHom -> Float -> (Float -> Float -> Vector)
05:29:47 <bourbaki> uncurryHomCoords hom t (coord1, coord2) = hom t coord1 coord2
05:30:01 <bourbaki> er heh
05:30:18 <bourbaki> uncurryHomCoords :: testHom -> Float -> (Float, Float) -> Vector
05:30:18 <bourbaki> uncurryHomCoords hom t (coord1, coord2) = hom t coord1 coord2
05:31:14 <Marvin--> TheHunter: showoff :-)
05:32:02 <bourbaki> hm that doesnt work though
05:32:09 <bourbaki> testHom :: Float -> Float -> Float -> Vector
05:32:14 <bourbaki> uncurryHomCoords :: testHom -> Float -> (Float, Float) -> Vector
05:32:18 <bourbaki> uncurryHomCoords hom t (coord1, coord2) = hom t coord1 coord2
05:32:23 <Marvin--> testHom isn't a type
05:32:37 <bourbaki> argh dumb me :)
05:33:51 <bourbaki> ok that did it ;)
05:34:07 <bourbaki> and as a reward you can have a look at it ;)
05:35:10 <bourbaki> http://rafb.net/paste/results/vSJ7FZ23.html
05:59:34 <titanstar> bourbaki: if you make your Vector type an instance of Num, you can use normal arithmetic operations on it
06:00:12 <bourbaki> yeah i have seen something like that comeing in the book :)
06:00:18 <bourbaki> but i havent read that far yet
06:00:21 <titanstar> ah
06:00:37 <bourbaki> its much more thrilling to jump right into the action for me :)
06:01:39 <bourbaki> heh i am watching chinese mtv :) the internet is a wicked place
06:53:41 <xkb> does anybody here have this paper as pdf/ps?
06:53:42 <xkb> Expressing and Reasoning About NonDeterministic Functional Programs
06:53:49 <xkb> by Hughes
06:58:26 <Heffalump> how long ago?
06:58:59 <Heffalump> ah, 89
06:59:08 <Heffalump> was it LNCS?
06:59:18 <xkb> I can only find references to paper versions
06:59:44 <xkb> Heffalump, I dont know for sure
06:59:48 <xkb> let me check
07:00:29 <Heffalump> all I can see is "Functional Programming"
07:00:36 <Heffalump> (and "Springer-Verlag")
07:01:02 <xkb> yah
07:01:07 <xkb> thats what I can find 2
07:01:51 <Marvin--> it's not listed on his homepage
07:02:01 <xkb> http://www.dcs.gla.ac.uk/~jtod/papers/1989-ExpressNonDet/
07:02:06 <xkb> thats what I found
07:02:13 <xkb> doesnt help though :(
07:02:31 <Marvin--> so mail him :)
07:03:18 <xkb> I will.. I have once before.. no replys though
07:03:19 <Heffalump> I don't think it's LNCS.
07:03:27 <Heffalump> who, O'Donnell or Hughes?
07:03:43 <xkb> O'Donnell
07:03:59 <Heffalump> try John Hughes, then
07:05:49 <xkb> will do
07:11:48 <MakeMyDay> How do you remove one list from another
07:11:58 <MakeMyDay> concat [ filter (/= x) (b:bs)| x <- (n:ns)]
07:12:15 <Heffalump> makemyday: //
07:12:23 <Heffalump> @eval [5,3,2] // [3]
07:12:23 <lambdabot> (line 1, column 10):
07:12:23 <lambdabot> unexpected "/"
07:12:23 <lambdabot> expecting "=", white space or simple term
07:12:25 <Heffalump> @eval [5,3,2] \\ [3]
07:12:26 <lambdabot> (line 1, column 10):
07:12:26 <lambdabot> unexpected "\\\\"
07:12:26 <lambdabot> expecting identifier
07:12:32 <Heffalump> hmm.
07:12:35 <Heffalump> I'm sure one of those exists.
07:12:54 <MakeMyDay> in the prelude?
07:13:02 <MakeMyDay> I haven't found anything 
07:13:03 <Igloo> @eval isn't Haskell
07:13:21 <Heffalump> I thought it was a pretty good approximation.
07:13:29 <Igloo> List> [1,2,3,4,5] \\ [2,4]
07:13:29 <Igloo> [1,3,5]
07:13:56 <MakeMyDay> so howcome that isn't in the prelude?
07:14:54 <MakeMyDay> hm. er do I need to import something?
07:15:01 <Igloo> Yes, List
07:15:06 <Igloo> Or Data.List
07:15:13 <MakeMyDay> ah
07:36:29 * Marvin-- boggles at the delphion.com gallery
07:36:38 <bourbaki> yeaha i made it
07:36:47 <bourbaki> you can see the sphere homotopy now :)
07:37:22 <bourbaki> http://rafb.net/paste/results/mmrQrd34.html
07:39:29 <xkb> wow
07:39:33 <xkb> what does that do?
07:39:43 <xkb> what's a homotopy?
07:40:18 <bourbaki> sec i will change the code so you can see
07:41:14 <bourbaki> hm nm :) it will need some more to make it visible what it really does
07:41:28 <bourbaki> i have build a parameteraziation over a sphere
07:41:43 <xkb> aha.. sphere as in 3D object?
07:41:43 <bourbaki> that is you can get any point on the sphere with 2 coords
07:41:46 <bourbaki> yes
07:41:56 <bourbaki> you see that pseudo 8?
07:42:10 <xkb> looking trough the code now :D
07:42:15 <bourbaki> :)
07:47:54 <bourbaki> bbs food
07:53:23 <Cale> homotopy is equivalence under continuous deformation
08:06:17 <bourbaki> bk
08:09:50 <bourbaki> the idea is that you can morph between meshes in the end
08:10:00 <bourbaki> i think ill write a dxf importer for that
09:05:00 <MakeMyDay> > expandNotDelList				:: [Node] -> Graph -> [Node]
09:05:00 <MakeMyDay> > expandNotDelList (n:ns) g			= (giveTeilGraph n g)++(giveNotDelList ns g) 
09:05:08 <MakeMyDay> why doesn't this go in recursion?
09:05:25 <MakeMyDay> it stops after calculating giveTeilGraph n g .
09:06:12 <MakeMyDay> any ideas cause I am a bit lost at this
09:06:41 <neologism> how do you know it stops?
09:07:11 <MakeMyDay> cause I run it and it spits out the 1rst result.
09:07:18 <Cale> is giveNotDelList empty or bottom?
09:07:34 <Cale> I mean, (giveNotDelList ns g)
09:07:39 <MakeMyDay> no
09:08:05 <MakeMyDay> even if I do expandNotDelList [] g = [] it doesn't change anything
09:08:16 <Cale> what exactly do you mean by stop?
09:08:55 <MakeMyDay> well I am testing it through GHC and HUGS and it gives me a result , then I can write a diff command
09:09:00 <Cale> I can't see the rest of your program, so I'm not sure what the problem is. That function is not obviously recursive.
09:09:22 <Cale> MakeMyDay: so that's the whole result then
09:09:22 <Lemmih> s/giveNotDelList/expandNotDelList/?
09:09:51 <MakeMyDay> hmm
09:13:26 <MakeMyDay> Let's say the function input is a list with 2 elements. It will run and give me the result only for the 1rst one. If I switch the 1rst and 2nd element , it will give me the result of the second. What I don't understand is why isn't it giving my a list with both results , and why does it stop after calculating the first one?
09:13:56 <Marvin--> MakeMyDay: because you never call expandNotDelList recursively?
09:14:55 <MakeMyDay> OMF
09:14:59 <MakeMyDay> I'm an idiot
09:15:17 <MakeMyDay> I was a calling a different function.
09:16:11 <MakeMyDay> I though I was calling the recursion , but was calling a different one. How that game no error though is weird.
09:19:58 <Marvin--> it didn't give an error because the types matched, I'll wager
09:19:59 <Cale> MakeMyDay: you might also consider switching the order of the arguments to that function so that the graph is first
09:24:45 <Cale> if you did this with giveTeilGraph and expandNotDelList, then you could write it as: expandNotDelList g = concatMap (giveTeilGraph g)
09:25:34 <Cale> or as: expandNotDelList g ns = ns >>= giveTeilGraph g
09:27:38 <Cale> but it really depends on how you are using these functions throughout your program. Generally, you want to put the parameters to functions which change less at the start of the list, and those which change more often at the end.
09:31:41 <bourbaki> http://rafb.net/paste/results/QyyQmY97.html
09:36:02 <bourbaki> xkb now you can see a "morph" between two spheres
09:42:38 <stepcut> bourbaki: it just likes a figure 8 getting bigger and smaller to me...
09:42:59 <bourbaki> yes well its not that spectacular what you see
09:43:06 <stepcut> :p
09:43:10 <bourbaki> what you see is that 8
09:43:32 <bourbaki> that 8 is (n,n) whereas n is shifting from 0 to 1
09:43:46 <bourbaki> so its a line in the sphere space
09:43:52 <stepcut> ah
09:44:05 <bourbaki> next might be circles
09:44:24 <bourbaki> and i morph that line between two different sphere spaces
09:45:03 <bourbaki> if you want you can play around with the testSphere2 and modify it then you would morph to some other thing
09:46:23 <bourbaki> next thing i do is a parameterized octaeder
09:46:49 <bourbaki> then i can map points from the sphere to that thing and from that thing to a 2d surface
09:46:56 <bourbaki> that is infinite
09:47:15 <bourbaki> then you can move something on the 2d thing and map it back to the sphere
10:21:58 <RussellOConnor> Where are the Bit wise operation on Word8's located?
10:22:49 <Marvin--> Data.Bits
10:23:30 <RussellOConnor> cool
10:24:44 <Lemmih> Hello Marvin--.
10:25:14 <Marvin--> Lemmih: hey, did you get a hold of syntax yesterday?
10:27:17 <Lemmih> `darcs send --output=patch.txt` did the trick.
10:27:44 <Lemmih> I haven't send it tho...
10:28:21 <Marvin--> ooh, neat
10:35:39 <Lemmih> wb bourbaki
10:35:54 <bourbaki> thanks
10:56:48 <bourbaki> esap are you there?
10:57:03 <bourbaki> TheHunter are you there?
11:12:56 <RussellOConnor> bits = foldr (flip setBit) 0
11:17:42 <TheHunter> bourbaki, yes
11:19:57 <bourbaki> TheHunter do you have some time to help me on a way to add arrows to a category?
11:20:28 <TheHunter> what's your category?
11:21:01 <bourbaki> in general i would like to add an arrow to a category within the category itself
11:21:07 <bourbaki> from within
11:22:41 <TheHunter> in general you could add arrows for each arrow which has the same domain or codomain as the new arrow
11:23:01 <RussellOConnor> Is there a kind of stream monad?  Something that I can read from, and maybe advance my ``tape''.
11:23:10 <TheHunter> forget it, it's the other way round
11:23:21 <bourbaki> TheHunter thats a simple functor isnt it?
11:24:22 <TheHunter> there'd be a functor mapping the old category into the new one
11:25:44 <bourbaki> well but a functor can only map what was in the old category right?
11:25:49 <TheHunter> so for each arrow which has the same domain as the new arrow's codomain, you'd have to add the composed arrow and vice versa
11:26:00 <TheHunter> right
11:27:38 <bourbaki> maybe its not possible what i want to do
11:28:16 <bourbaki> i think to further understand i will make a monad with my new types
11:28:45 <TheHunter> bourbaki, do you know John Hughes' Arrows?
11:28:54 <TheHunter> www.haskell.org/arrows
11:29:08 <bourbaki> i have heared of it but i didnt get into it really
11:29:54 <bourbaki> i think i will add arrows with a topological approach
11:29:55 <TheHunter> in one of peterson's papers there is an exercise about stream transformers
11:30:12 <TheHunter> looks kinda connected to what you're trying to do
11:30:26 <bourbaki> do you have an url to that paper?
11:31:04 <TheHunter> http://www.soi.city.ac.uk/~ross/papers/fop.html
11:31:33 <TheHunter> it's ex3
11:36:24 <SyntaxLaptop> is it just me, or is the IOError/IOException module and type hierarchy stuff a big mess?
11:37:11 <Heffalump> it's a big mess that there are lots of different exception types
11:38:05 <SyntaxLaptop> It's confusing trying to figure out exactly what you need to import to figure out hwich error you have.  I mean... not THAT hard, but I keep misreading it.  maybe i'm being lazy
11:38:33 <Marvin--> no I agree
11:38:36 <Marvin--> it's a mess
13:23:25 <hyp3rion> /sl
13:23:33 <hyp3rion> whoops :-(
13:32:06 <Lemmih> paolino is spawning..
13:36:04 <bourbaki> can anyone help me to get some deeper insight in the monad?
13:36:24 <bourbaki> mathematically
13:37:18 <Cale> bourbaki: 
13:37:23 <Cale> sure
13:37:43 <Cale> Do you happen to already know anything about category theory?
13:37:50 <bourbaki> ok a monad is a tripe (Endo, return, bind)
13:37:58 <bourbaki> triple
13:38:09 <Cale> actually (Endo, return, join)
13:38:31 <Cale> is the usual mathematical definition
13:38:32 <bourbaki> ah ok and join is bind return?
13:38:51 <Cale> yeah
13:38:58 <bourbaki> ok
13:39:19 <bourbaki> well this endomorphism i have had a look at some monads written in haskell
13:39:50 <Cale> The endofunctor just means that it's a type which has some map operation defined.
13:40:01 <bourbaki> thats ie in that monad parser  ... type Parser a = a -> (a, String)
13:40:05 <Cale> So monads can be thought of as container types.
13:40:33 <bourbaki> type Parser a = a -> [(a, String)]
13:40:46 <monotonom> The bind version is called a Kleisli's triple.
13:40:48 <bourbaki> ok but i cant see that this is an endomorphism
13:42:06 <Cale> Parser would be the endofunctor
13:42:16 <Cale> from the category of types to itself
13:42:52 <bourbaki> but its of the type a -> [(a, String)]
13:42:53 <monotonom> You can define map from bind and return.
13:42:59 <Cale> right
13:43:11 <bourbaki> so that is recursive?
13:43:36 <Cale> map f xs = xs >>= (return . f)
13:44:36 <monotonom> In Haskell this definition is given to Monad.liftM
13:45:55 <monotonom> Somehow the Haskell standard committee decided against making all monads functors and using that definition as the default implementation for fmap.
13:46:37 <Heffalump> if you did make all monads functors, you would have to make the class definition for monad depend on functor
13:47:04 <Heffalump> which would mean every monad having to provide the standard fmap implementation, because 'derived' classes can't provide default implementations for 'superclass' names
13:47:25 <monotonom> I mean this: instance (Monad m) => Functor m where fmap f xs = xs>>=(return.f)
13:50:02 <Heffalump> you can't write Haskell 98 instances that do that.
13:50:23 <Heffalump> haven't we had this conversation?
14:01:47 <Cale> Probably I had this conversation. I still don't see why this shouldn't be added - you can still forbid overlapping instances. I also think that fmap should be called map. :)
14:03:17 <bourbaki> if you had the category of graphs how could you add edges to it with a Functor or Natural Transformation?
14:03:28 <Heffalump> Haskell 98 requires that you have a single way of doing context reduction. I agree that there are other ways of doing things, but it would have been a significant redesign.
14:07:09 * SyntaxLaptop has reimplemented setup clean to be rm -r dist/build, basically
14:09:53 <Marvin--> SyntaxLaptop: did you get my latest patch bundle?
14:10:14 <SyntaxLaptop> Marvin--: yeah, I just pushed it, though I haven't looked at it yet
14:10:36 <SyntaxLaptop> in fact, I'll look at it now
14:10:40 <Marvin--> I even remembered to sign it this time ;)
14:12:20 <SyntaxLaptop> hm. doesn't look signed. this is the one from 1 day 2 hours ago?
14:12:25 <SyntaxLaptop> hi bringert
14:12:39 <Marvin--> odd
14:12:48 <Marvin--> I distinctly remember entering my passphrase
14:13:36 <bringert> long time no see
14:28:21 <SyntaxLaptop> Marvin--: I'm not sure how the TemplateHaskell extension got there... I think Extension should be only shared extensions
14:28:35 <SyntaxLaptop> and then you can turn on TH by using option-ghc
14:30:44 <SyntaxLaptop> Marvin--: any plan for how to parse a license if its not on the list?  I was thinking of having it be a filename
14:30:45 <Igloo> What's the logic there?
14:31:30 <SyntaxLaptop> Igloo: there is a set of standard extensions that make sense for all the compilers.  for the extensions that make sense for only some of them, you turn them on with another field.
14:31:45 <SyntaxLaptop> that way people won't delude themselves into thinking that cabal is going to take care of the extensions they're using
14:32:37 <Igloo> But cabal could just fail if the extension isn't available on the compiler you choose. Dong it that way would mean things would magically work if other compilers implement things
14:33:19 <Igloo> Oh, that's less true with setup.lhs being part of your release, I suppose, but for those usingt the standard one you could just drop a newer version in
14:33:29 <SyntaxLaptop> so what criteria do we use to decide what extensions we to implement in the code?
14:34:13 <SyntaxLaptop> I think it's silly to put all of GHC's extensions there, and I think there's some value in making it very clear which extensions are shared among the major compilers.
14:34:16 <Igloo> Implement H98 and approved extensions (is that the right word?), plus whatever anyone else feels like writing?
14:34:26 <SyntaxLaptop> what's approved extensions?
14:34:34 <Igloo> The FFI is the only one I think
14:35:26 <Igloo> The documentation for cabal could make it clear which are common extensions. Having all the logic be in one place, rather than in every library, would be nice, though
14:35:43 <Igloo> http://www.haskell.org/definition/ under "Addenda to the Report"
14:36:14 <Marvin--> SyntaxLaptop: I think the TH extension got there when bringert and I were hacking during eurohaskell, it's not something I added now
14:37:06 <Heffalump> HLs are an approved extension too. But cabal would be rather fucked without them :-)
14:37:24 <Igloo> They're listed as candidates there
14:37:51 <bringert> yaeh, Marvin-- is right
14:37:58 <bringert> blame me for that one
14:38:11 <SyntaxLaptop> that's OK
14:38:19 <SyntaxLaptop> is it needed for anything?
14:38:28 <Marvin--> as I recall it, I didn't exactly try to *stop* you :-)
14:39:54 <bringert> it is needed for XmlRpc, but if there is another way to turn on -fth without it that's fine
14:40:15 <bringert> it just seemed to coarse to just use -fglasgow-exts
14:40:23 <bringert> though that would work too
14:40:28 <SyntaxLaptop> Igloo: any real objections?
14:41:11 <SyntaxLaptop> bringert: see the "options" field in PackageDescription?  For GHC, just add the "-fth" option, or whatever it is
14:41:33 <Marvin--> options-ghc: -fth   with my parser
14:41:42 <SyntaxLaptop> right; he's not using that version yet
14:41:55 <Marvin--> true
14:42:00 <Igloo> Not unless anyone else particularly cares
14:42:41 <SyntaxLaptop> but it would be good if he did
14:42:41 <SyntaxLaptop> :)
14:42:48 <Marvin--> I think it makes sense to put as many extensions as possible into the Extensions type, and let cabal tell you whether your program will work on platform XYZ
14:43:14 <SyntaxLaptop> hm
14:43:34 <bringert> I've been out of the loop for a couple of weeks, just got back home, will try to catch up
14:43:38 <ayrnieu> curiously, do any #Haskell regulars deal with Haskell on MacOSX ?
14:43:47 <Marvin--> and if someone downloads XmlRpc and tries to use it with hugs, he will explicitly be told "XmlRpc won't work with Hugs because Hugs doesn't have TemplateHaskell"
14:43:51 <Igloo> Some do
14:44:04 <Marvin--> rather than an obscure compilation failure later
14:44:13 <Marvin--> (well, "compilation", since it's hugs we're talking about)
14:44:43 <SyntaxLaptop> so we tell people "use the Extension field if your extension is there, otherwise use the {ghc,nhc}-options field according to the compiler"
14:45:17 <Marvin--> "and file a bug report if you think that it *should* be part of the Extension type" :)
14:45:58 <Marvin--> I see the options field more of a last resort
14:46:02 <Igloo> I think all extensions should be there (although they don't need to be in early releases), but the options-$compiler might be needed for -DFOO or linker flags or whatever
14:46:11 <Marvin--> exactly
14:46:52 <SyntaxLaptop> hm. how 'bout for this 0.1 release, we'll stick to the shared extensions, and you can try to talk me into expanding it later.
14:47:05 <SyntaxLaptop> after people get a bit of a feel for it, and we can get feedback from libraries@
14:47:16 <Igloo> Although I suspect by the time you need the options field you'll probably need to do more than make a description file anyway
14:48:29 <Marvin--> how many shared extensions are there, then?
14:48:46 <Marvin--> I mean hugs -98 has many in common with ghc -fglasgow-exts, but how many do nhc support?
14:49:04 <SyntaxLaptop> overlapping instances, mptc, I think. maybe more?
14:49:34 <bringert> undecidable instances?
14:49:52 <bringert> pattern guards?
14:49:52 <Marvin--> and what does "shared" mean once you notice that Helium :: CompilerFlavor in Distribution.Setup?
14:50:16 * bringert can't remember which has which, and is too lazy to check
14:50:21 <SyntaxLaptop> hm. maybe I'm wrong
14:50:23 <Marvin--> which compilers should share them for them to qualify for the Extension type?
14:50:25 <SamB> shared means more than one compiler has it, probably...
14:50:28 <SyntaxLaptop> (about what nhc98 supports)
14:50:33 <SyntaxLaptop> Marvin--: ghc, nhc, and hugs :)
14:51:13 <Marvin--> sounds awfully arbitrary
14:51:25 <SyntaxLaptop> it's not arbitrary; it's practical.
14:51:35 <Marvin--> so is putting all extensions into the type
14:51:56 <SyntaxLaptop> OTOH, if nhc98 doesn't actually support those extensions, then I'll probably change my mind
14:52:08 <Marvin--> encouraging people to document exactly which extensions they use rather than writing options-ghc: -fglasgow-exts, options-hugs: -98 is a Good Thing
14:52:23 <Marvin--> IMHO of course :)
14:53:18 <SyntaxLaptop> I feel like mainting a huge list of extensions is going to be a PIA
14:53:21 <SyntaxLaptop> but your point is taken.
14:53:47 <Marvin--> better that cabal does it than everybody else
14:54:54 <Heffalump> how far has GHC gone down the road of putting extensions on separate flags?
14:57:59 <SyntaxLaptop> that's a good point. so let's say there's an extension that requires us to use -fglasgow-exts, which turns on a bunch of other extensions. that's a little ugly
14:58:48 <Igloo> GHC is quite good apart from the common or small ones I think
14:59:16 <Igloo> e.g. I don't think there's a flag for type synonyms in instance heads (which I find quite annoying, although it would lead to a lot of flags)
14:59:59 <Marvin--> SyntaxLaptop: so? in what way are you worse off than otherwise?
15:00:13 <SyntaxLaptop> Marvin--: I want to chagne the mainModules field to be a tuple (String, String) for the module name and the executable name. any objections?
15:00:40 <Heffalump> ghc certainly wasn't any good at that two years ago, I remember Manuel saying he had to persuade the Simons to do it
15:02:17 <Marvin--> SyntaxLaptop: sounds reasonable
15:02:34 <SyntaxLaptop> Marvin--: well, so say the user's module relies on extension X which requires -fglasgow-exts.  It also relies on extension Y, which you can turn on individually.  Now all the compilers implement extension X, but only GHC implements extension Y.  They turn on extension X with the extensions interface, causing the system to use -fglasgow-exts, and they're not warned that they're depending on extension Y which will make it non-portab
15:03:15 <Igloo> But that's the same regardless of whether Y is in Extensions
15:03:27 <Riastradh> You were truncated at '...which will make it non-portab', SyntaxLaptop.
15:03:37 <SyntaxLaptop> sorry
15:03:56 <SyntaxLaptop> that's the end
15:04:02 <SyntaxLaptop> except with an "e"
15:04:02 <Marvin--> "le" :)
15:04:08 <SyntaxLaptop> and an "l"!
15:04:09 <Riastradh> Non-portabe, eh?
15:05:03 <bourbaki> TheHunter are you there?
15:05:18 <SyntaxLaptop> Igloo: it's just kinda complicated to explain to people when they might and might not get warnings about what compilers they're tying themselves to with various extensions.
15:06:15 <Marvin--> SyntaxLaptop: what syntax should we use in the description file?  Main-Modules: foo: Some.Where.Foo, bar: Elsewhere.Bar ?
15:06:18 <Igloo> I don't see why
15:07:11 <SyntaxLaptop> Marvin--: that sounds good :)
15:07:26 <SyntaxLaptop> Igloo: maybe we could limit it to the extensions that are enumerated separately
15:07:29 <Marvin--> so a (filename,modulename) tuple then
15:07:40 <SyntaxLaptop> Igloo: I don't like the unexpected side-effect
15:07:49 <SyntaxLaptop> Marvin--: yeah
15:08:14 <Marvin--> my concern is that everybody will write  options-ghc: -fglasgow-exts  and don't give a darn about the extensions field, making it useless
15:08:37 <SyntaxLaptop> those people are assholes.
15:09:15 <SyntaxLaptop> ;) there's nothing we can do about people who don't care to enumerate their extensions... I don't think people will be able to write portable code without at least trying a little bit.
15:09:33 <SyntaxLaptop> but we need to give them a way to say options-ghc: -fglasgow-exts
15:10:10 <Igloo> This way would also mean you could have "setup compilerinfo" say "Will work with GHC\nWill not work with hugs; missing: TemplateHaskell, Foo, Bar\n"
15:10:13 <Marvin--> my point is that they *can't* enumerate their extensions if the Extension type doesn't list the extensions!
15:10:59 <SyntaxLaptop> there are quite a few extensions enumerated in GHC where you don't have to use glasgow-exts
15:11:33 <SyntaxLaptop> Marvin--: they can enumerate their extensions with options-ghc.
15:11:54 <Marvin--> which is much more cumbersome, because you don't catch typos as easily
15:13:17 <Igloo> It also means you don't need to maintain a "Works with" list yourself. Hmm, perhaps "WorksWithHelium" should be in Extensions too
15:13:27 <SyntaxLaptop> if they're the type to enumerate their extensions, they'll find a way. the typos aren't a huge deal. 
15:13:54 <Marvin--> and I don't understand your extension X/Y example at all
15:14:00 <SyntaxLaptop> heh
15:14:13 <SyntaxLaptop> well, it's just that turnin gon extension X actually also turns on extension Y, which they didn't expect
15:14:36 <SyntaxLaptop> now they're code is non-portable, and the system can't warn them. they had this sense of security that it was portable, because cabal didn't complain.
15:14:41 <Marvin--> so? with what Igloo and I want, they'd still list both X and Y in the extensions field
15:14:52 <Igloo> But that's the same with -fglasgow-exts in your world
15:14:58 <SyntaxLaptop> no, they forgot to list Y
15:15:06 <Marvin--> ah, that's what we call *a bug*
15:15:13 <SyntaxLaptop> if they use -fglasgow-exts, they know what they're doing.
15:15:19 <Marvin--> no they don't!
15:15:26 <SyntaxLaptop> they know that they're making it non-portable.
15:15:29 <Marvin--> they just know "I need to turn on glasgow-exts for this to work"
15:15:30 <Igloo> No, they think their code is portable
15:15:40 <Igloo> Because they gave different options for different compilers
15:15:52 <Igloo> (well, works on both nhc and ghc say or it would be in Extensions)
15:16:53 <SyntaxLaptop> huh? if they're using an extension that they need to use "-fglasgow-exts' to turn on, then they'll assume they have to turn it on w/ the other compilres as well.
15:17:13 <Marvin--> they might not even *use* other compilers
15:17:19 <Marvin--> I don't think I've ever used nhc
15:17:33 <SyntaxLaptop> Marvin--: yeah, it's a bug, but I'm just saying that if we have options that map to -fglasgow-exts, then we won't really be able to warn them when they're being non-portable.
15:17:38 <Igloo> Sure, so they give ghc -fglasgow-exts and nhc -enable-foo. But they also use bar, and it works with ghc.
15:17:53 <Igloo> We will as long as they don't screw up
15:18:43 <Marvin--> we can't protect ourselves from screwups and bugs
15:19:13 <SyntaxLaptop> what's wrong with only adding options that can be turned on individually?  
15:19:31 <Heffalump> that'll restrict what people can do?
15:19:45 <SyntaxLaptop> Marvin--: but having such side-effects isn't very friendly in helping them catch bugs
15:19:51 <SyntaxLaptop> no, they can still use -fglasgow-exts
15:19:54 <Marvin--> individually in which compiler(s)? Does hugs have that at all?
15:20:14 <Marvin--> pretty much any extension flag will force -98, and then you're back to the situation you don't want
15:22:17 <SyntaxLaptop> hm. looks like you're right
15:22:41 <Marvin--> not really, overlapping instances seem to have their own flags
15:22:48 <SyntaxLaptop> yeah, that might be the only one
15:23:10 <SyntaxLaptop> ick
15:23:38 <Marvin--> but still, what about nhc?
15:23:51 <SyntaxLaptop> it doesn't even seem to have most of these extensions, from what I can see
15:24:11 <Marvin--> well, it IS called nhc98, isn't it? :)
15:24:19 * SyntaxLaptop doesn't blame them
15:24:30 <SyntaxLaptop> except that I just never have any use for NHC as a result.
15:25:28 <Marvin--> :)
15:26:48 <SyntaxLaptop> you guys are pretty persuasive
15:28:12 <SyntaxLaptop> Marvin--: if you add the [(String,String)] stuff, for mainModules, I'll work on the extensions stuff.  the main modules stuff will need an extra build step that's not htere yet, but I can do that too later.
15:29:28 <Marvin--> right now I'm trying to get my h2fol to build with Distribution.Simple
15:31:29 <SyntaxLaptop> cool!
15:32:08 <SyntaxLaptop> dinner time. I won't touch the mainModules stuff right now. let me know if you get to it.
15:32:12 <SyntaxLaptop> peace & thanks all.
15:46:58 <Marvin--> oh, right, we can't do multiple main modules just yet
15:49:56 <Igloo> That's not something cabal can be expected to fix, though
15:50:11 <Igloo> Does nhc have an equivalent of -main-is?
15:50:24 <Heffalump> that's something that would make a good report addendum
15:51:06 <Igloo> You could argue it's just a GHC bug
15:51:15 <Heffalump> not supporting --main-is ?
15:51:30 <Heffalump> I thought the report specifies Main.main
15:51:34 <Igloo> Having Foo.hs and Bar.hs both being module Main in the same directory not work
15:51:52 <Marvin--> er, you can do ghc --make Foo.hs, can't you?
15:52:13 <Marvin--> obviously you can't do ghc --make Main :)
15:53:17 <Heffalump> you end up with conflicting Main.hi and Main.o files
15:53:51 <Marvin--> right now we pass allModules to the ghc build command line, that obviously doens't work with several Main modules
15:54:05 <Igloo> Hmm, doesn't seem to be an issue with 6.3
15:54:21 <Marvin--> uh, my ghc 6.2.1 creates Foo.hi and Foo.o
15:54:27 <Igloo> Or 6.2.1
15:54:41 <Igloo> But we definitely had it in the ICFP contest. *confused*
15:54:49 <Marvin--> but you still can't do ghc --make Foo Bar, obviously
15:55:28 <Marvin--> so I suppose we should split the build into several ghc --make, one for each main module
15:55:39 <Marvin--> (if there are main modules, otherwise we should just make 'em all)
15:58:00 <Heffalump> we had the problem until we started using --main-is, didn't we?
15:58:10 <Heffalump> I remember we had the problem in one situation and not in another.
15:59:13 <Igloo> Yeah, but I can't reproduce the problem now
15:59:43 * Igloo assumes you weren't in a chroot on musketeer or anything
15:59:47 <Heffalump> nope.
16:03:02 <Marvin--> dist/build/H2FOL.hs: file name does not match module name `H2FOL'
16:03:03 <Marvin--> hm.
16:03:21 <Marvin--> does the Main module have to be the first module when using --make or something?
16:03:28 <Marvin--> (at least if it's not named Main.hs)
16:26:59 <Joachim> Can someone tell how an haskell programm can get to its commandline parameters
16:28:38 <Heffalump> System.getArgs
16:29:17 <Joachim> thanks
16:29:57 <LittleDan> Has anyone written a Haskell translation of Why Functional Programming Matters?
16:32:59 <Heffalump> isn't it pretty close to Haskell?
16:33:20 <LittleDan> well I'm just stupid
16:33:25 <LittleDan> and can't understand it
16:33:45 <Heffalump> which bits?
16:33:50 <Marvin--> there are several versions of it around
16:33:58 <LittleDan> really?
16:34:10 <LittleDan> I'm reading the original one, I think
16:34:52 <Marvin--> "This paper dates from 1984, and circulated as a Chalmers memo for many years. Slightly revised versions appeared in 1989 and 1990 in the Computer Journal and the Year of Programming. This version is based on the original Chalmers memo nroff source, lightly edited for LaTeX and to bring it closer to the published versions. Please excuse the slightly old-fashioned type-setting, and the fact that the examples are not in Haskell!"
16:35:33 <Marvin--> that's from the one on John's homepage
16:36:56 <LittleDan> oh yeah, that's the one I'm reading
16:37:30 <LittleDan> Heffalump: nevermind, now I get it, sorry
16:37:38 <Marvin--> but Miranda and Haskell are pretty close
16:37:42 <LittleDan> ok
16:38:37 <LittleDan> In the end, it says streams are very important, so they should be all lists because access to them shouldn't be restricted. But what if you need it to be strict?
16:38:49 * Marvin-- ponders whether he should wait for syntax to return or go to bed
16:39:36 <LittleDan> I thought syntax was supposed  to be done yesterday
16:39:49 <monotonom> Fork yourself into two processes so you can do both.
16:39:58 <SamB> LittleDan: you can always make your own if you *really need* strictness
16:40:00 <Marvin--> har har
16:40:13 <LittleDan> SamB: My own what?
16:40:29 <SamB> List
16:40:59 <LittleDan> SamB: how would I do that? Aren't all lists streams?
16:41:12 <SamB> data List a = Nil | Cons a !(List a)
16:41:20 <monotonom> There is a deepSeq for producing an entire list from start to finish at once.
16:41:38 <LittleDan> SamB: What does ! do?
16:41:55 <SamB> LittleDan: makes that field strict
16:41:57 <monotonom> deepSeq ('Z' : repeat 'z')  v.cool
16:43:09 <SamB> although it is probably better to use deepSeq, just because of all the nice functions for lists...
16:43:29 <Igloo> Well, if you think non-terminating programs are cool  :-)
16:43:54 <monotonom> It is v.cool to hang other people's computer.
16:43:54 <LittleDan> Not all Lisp programs are non-terminating, even if Lisp is strict
16:44:13 <Igloo> I was refering specifically to deepSeq ('Z' : repeat 'z')
16:44:18 <LittleDan> oh
16:44:47 <Marvin--> I think my sleepiness wins
16:44:52 <Marvin--> night people
16:45:16 <LittleDan> n8
16:45:22 <Marvin--> neight?
16:45:27 <LittleDan> nacht, german
16:45:34 <Marvin--> ooh
16:45:44 <Igloo> g'night
17:06:38 <bourbaki> can i do a type conversion in the return of a monad?
17:06:59 <SamB> bourbaki: do you have a function to do it?
17:07:10 <bourbaki> yes
17:07:16 <SamB> return is just a function, anyway.
17:07:28 <SamB> so in that case, yes
17:08:09 <monotonom> You establish all the monad laws and you can do whatever you want.
17:08:20 <Cale> bourbaki: what sort of type conversion?
17:08:25 <bourbaki> ok so i do a type converstion in the return and then dan use all functins on these elements and make use of the bind
17:09:00 <bourbaki> my idea is to map graphs to topologies and them to automations and these to categories
17:09:05 <bourbaki> and vica versa
17:09:44 <bourbaki> then i can do the type conversion between all these things and make use of all their interesting properties
17:10:24 <SamB> monotonom: or you could just follow them *morally*, like with that one monad in Quickcheck...
17:10:30 <bourbaki> ie i could map a graph to a topology and do some of my homotopy stuff on it and then convert it back
17:10:40 <SamB> the one for random number generation...
17:10:59 <Cale> well, the type of return is  a -> m a,  so that has to be followed
17:11:57 <bourbaki> and m could be a type conversion
17:12:32 <Cale> Really, all that return is supposed to do is take a value x, and give a value typed in a monad which "contains" just x.
17:13:26 <Cale> depending on the monad, this could mean different things, but if you think about it abstractly, it's the same every time.
17:13:28 <SamB> as long as you realize a cannot be constrained...
17:13:49 <Heffalump> right pain, that
17:14:05 <monotonom> "natural transformation"
17:14:16 <Cale> I don't really understand how you would want to constrain a.
17:14:43 <monotonom> A monad is not allowed to constrain a.
17:14:49 <Cale> It's strictly better that a is unconstrained :)
17:16:03 <Heffalump> I'd like a Set monad.
17:16:13 <Cale> That would be easy
17:16:45 <Cale> return x = {x}, join = union
17:16:57 <monotonom> Ah I see. That drives you to assume (Ord a)
17:17:13 <Cale> hm?
17:17:20 <Heffalump> cale: and what types would those have?
17:17:21 <monotonom> Or at least (Eq a)
17:17:27 <Heffalump> monotonom: indeed.
17:17:49 <Cale> well, depends on what you mean by Set :)
17:18:18 <monotonom> This will be difficult.
17:18:18 <SamB> monotonom: and of course, you'd want (Ord a)... (Eq a) would be slow ;-)
17:19:27 <Heffalump> cale: what definition of Set can you suggest that doesn't require an equality test?
17:19:34 <monotonom> Time to revolt against the present Haskell status quo.
17:21:34 <SamB> monotonom: isn't that what haskell is all about?
17:22:00 <SamB> oh well. maybe he'll see it ten years from now in the logs ;-)
17:22:50 <Cale> hmm, right - practicalities :)
17:23:23 * Cale is overly used to comparing functions for equality. :)
17:25:03 <Heffalump> I sort of feel like (Monad a when Ord a) or similar should be a type
17:25:21 <Heffalump> obviously one could define OrdMonad a
17:26:00 <SamB> Heffalump: and do what with it?
17:27:41 <Heffalump> well, not use monad notation, obviously
17:27:53 <Heffalump> but it would allow use of sets as a pseudo-monad
17:27:58 <Heffalump> and you'd need different operations
17:30:11 <Cale> It is somewhat irritating that something which is so obviously a monad can't be made into one. :)
17:30:25 <Cale> but I suppose that is what the list monad is for
17:31:04 <Cale> it's just the set monad without the collapsing of equivalent elements
17:35:06 <Heffalump> not good if you want a MonadFix instance :-)
17:35:17 <Heffalump> oh, scrub that, not relevant
17:35:28 <Heffalump> but I can imagine some kind of similar problem
22:52:08 <hyp3rion> 抱擁
