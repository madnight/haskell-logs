02:19:45 <bourbaki> hi
02:31:57 <Gowilla> 'lo
02:34:02 <Marvin--> morning
05:12:53 --- mode: irc.freenode.net set +n
07:06:19 <MakeMyDay> if I do a writeFile and the file allready exists will it overwrite it or give me an error?
08:31:38 <Lemmih> MakeMyDay: It will overwrite it.
08:35:55 <MakeMyDay> thx :)
08:37:00 <MakeMyDay> and another small question. I remember there are is a function in some package that takes a list of Filepaths and return a list of Strings without the extensions or something. I can't find it again tough. Anybody know it?
08:39:31 <SyntaxNinja> MakeMyDay: http://www.syntaxpolice.org/darcs_repos/OS.Path/
08:39:45 <SyntaxNinja> OS.Path, which is still a work in progress, could do that.
08:40:38 <SyntaxNinja> oh hm. looks like maybe that's not implemented yet.
08:40:54 <MakeMyDay> np I wrote a small function on my own
08:40:58 <MakeMyDay> faster then looking for it
08:41:06 <MakeMyDay> probably very slow but still
08:41:32 <SyntaxNinja> cool. you should "darcs get http://www.syntaxpolice.org/darcs_repos/OS.Path", add your function to conform to "splitExt" or whatever, then use darcs send to mail the patch to me :)
08:45:33 <Igloo> Path.hs has two different copyright notices 9 lines apart
08:47:18 * Igloo is really quite impressed by that  :-)
08:47:40 <Marvin--> heh
08:48:15 <Marvin--> man, Sweden sucks at handling floods
08:48:18 * Igloo puts the browser down before he gets tempted to write a Makefile and fix the module names rather than doing what I should be doing  :-)
08:48:41 <Igloo> (excuse my grammar)
08:48:45 <bringert> SyntaxNinja: trying to use the current cabal version (have been out of the loop for a while), it is looking for ~/.ghc-packages, but the README doesn't mention that
08:49:05 <bringert> does it have the same format as package.conf?
08:49:06 <Marvin--> hm, we should probably create that file if it doesn't exist
08:49:08 <Marvin--> yes
08:49:22 <bringert> that sounds like a reasonable thing to do
08:49:52 <bringert> does cabal read that file, or are the compilers expected to do it?
08:50:09 <Marvin--> currently we pass it to ghc
08:50:18 <bringert> ah
08:54:57 <SyntaxNinja> bringert: yeah. I noticed that yesterday. echo "[]" ~/.ghc-packages should fix that for now
08:55:17 <SyntaxNinja> oops. you know what I mean
08:55:28 <SyntaxNinja>  echo "[]" > ~/.ghc-packages
08:55:34 <bringert> also noticed that make clean does not make clean in test/HUnit-1.0
08:55:54 <SyntaxNinja> anyway, I'm not sure why it's looking at ~/.ghc-packages ATM. I'll fix that ASAP.
08:55:59 <SyntaxNinja> (for that part, anyway)
08:56:18 <SyntaxNinja> yeah. I noticed that too. I  just installed it fresh on a machine yesterday, so these things arec oming to light.
08:56:45 <SyntaxNinja> the makefile needs an overhaul.
08:56:50 * Marvin-- patches Simple.Build
08:57:44 <SyntaxNinja> as for the Path.hs copyright notice, I guess it's my boilerplate :(
08:58:32 <bringert> ./setup -h seems to only list options, not the available commands
08:59:47 <SyntaxNinja> true. that's on the TODO list.
09:00:35 <bringert> is there a public TODO somewhere, so I don't keep mentioning things that you know about already?
09:00:35 <Marvin--> meh, IO Bool sucks
09:01:28 <bringert> hmm, --user has to be given when doing install, it doesn't remember that I used it when running configure
09:02:09 <bringert> since it remembers --prefix, it feel to me that it should remember that too, but that it can be overridden when doing install
09:02:49 <SyntaxNinja> bringert: it's under Distribution/TODO
09:03:00 <bringert> heh
09:03:03 <MakeMyDay> ok so I am trying to delete a file but I get a permission denied error. How do I go around deleting a simple file?
09:03:09 <SyntaxNinja> eventually, we'll use bugzilla or something.
09:03:11 <bringert> ok, I should look around be asking
09:03:21 <SyntaxNinja> bringert: ask away :)
09:03:25 <Marvin--> join $ liftM (flip unless $ writeFile pkgConf "[]\n") (doesFileExist pkgConf)
09:03:27 <SyntaxNinja> i think i'm the only on who looks at that TODO :)
09:03:27 <Marvin--> ...
09:03:28 <Marvin--> maybe not
09:03:40 <bringert> s/be/before/ of course
09:03:52 <SyntaxNinja> bringert: it seems to me that --user isn't a configure option, but maybe i'm wrong
09:04:27 <bringert> I don't know, it's just the way I tried to use it, but I see you point
09:04:34 <SyntaxNinja> bringert: I have no good way, right now, to capture these comments, but they're important to me. do you think you coiuld write down the things you've mentioned and email them to me? (preferably isaac.jones@gmail.com, and ijones@syntaxpolice.org)
09:04:47 <SyntaxNinja> but the --prefix and --install-prefix have different behavior
09:05:53 <SyntaxNinja> --prefix can bake the paths into the executables, --install-prefix is just where to stick the resulting files.
09:06:01 <bringert> ah
09:06:12 <bringert> is install-prefix a configure option?
09:06:34 <SyntaxNinja> no, prefix is the configure option, install-prefix is the install-time option
09:06:51 <SyntaxNinja> but without install-prefix, it'll assume they're the same thing.
09:07:21 <bringert> I guess it would be helpful if the help output said which options are for which phase
09:07:26 <bringert> I'll start an email
09:07:37 <SyntaxNinja> cool. thanks :)
09:07:47 <SyntaxNinja> yeah, I guess the online help has been a low priority.
09:08:48 <Igloo> Can anyone remind me what the syntax for domain restriction is please?
09:09:41 <LittleDan> How does the IO monad do things to the outside world?
09:10:01 <Marvin--> LittleDan: hush, it's a big secret
09:10:06 <SyntaxNinja> heh
09:10:08 <Marvin--> LittleDan: if we tell you, your purity is compromised
09:10:08 <Igloo> LittleDan: Primitives built into the compiler do
09:10:14 <SyntaxNinja> OUTSIDE WORLD?! Why didn't anyone tell me?!
09:11:28 <MakeMyDay> Can you print in color?
09:11:39 <MakeMyDay> putStrLn in color that is
09:13:01 <Marvin--> uh, that depends on how the terminal interprets what you print
09:13:31 <Marvin--> putStrLn takes a list of characters, you can put whatever escape sequences you like in there
09:15:52 <MakeMyDay> ah yeah ok that makes sense
09:16:24 <MakeMyDay> I asked before but nobody awnsered , why do I get a premission denied error when trying to delete a file?
09:18:58 <bringert> e.g. putStrLn "\ESC[31mHello!\ESC[37m"
09:19:15 <SyntaxNinja> MakeMyDay: besides the obvious answer of not having write permission to that file, I can't think of why.
09:19:19 <bringert> MakeMyDay: do you own the dir that the file is in?
09:19:36 <bringert> or rather, do you have write permission to it?
09:20:37 <MakeMyDay> err I'm in windows so why wouldn't I?
09:21:13 <MakeMyDay> ow nm
09:21:39 <bringert> oh, windows
09:24:16 <sorrow> why doesn't splitLastComp work anything like that? (http://martin.lddd.org/splitLastComp.hs) I don't quite understand the original one, but it seems overly complicated. ;-)
09:26:15 <Marvin--> SyntaxNinja: how's your email situation right now, should I still cc your gmail account?
09:26:25 <SyntaxNinja> Marvin--: yeah. I hope to have a better solution tonight.
09:26:48 <SyntaxNinja> I did get cabal up & running on my desktop sparc now, though :) (after getting X working again)
09:26:55 <SyntaxNinja> it's been headless for a while.
09:27:19 <Marvin--> what was it, isaac.jones@gmail?
09:27:27 <SyntaxNinja> gmail.com, yeah
09:27:40 <Marvin--> yeah yeah, I'm just a lazy typist :)
09:28:29 * SyntaxNinja lunch &
09:28:31 <bringert> the Cabal package is missing a dependency on the text package
09:30:06 <SyntaxNinja> bringert: is that going in the  email you're sending me? :)
09:30:07 * SyntaxNinja &
09:30:18 <bringert> yeah
09:30:30 * bringert beer &
09:30:31 <Marvin--> oh, food, good idea
09:32:19 <Igloo> MakeMyDay: If you want colour and portability you probably want curses
09:32:50 <Igloo> I have a (not great) Haskell binding at http://urchin.earth.li/darcs/ian/hcurses (darcs get that)
10:54:06 <LittleDan> Is it possible in a pure-functional language like Haskell to have full continuations, or at least complete exit-only continuations that do more than the Continuation monad?
11:00:49 <LittleDan> I guess not...
11:01:23 <RussellOConnor> I recently read a thread saying that you can implment ML style refs using unrestricted continuations
11:01:43 <SyntaxNinja> ahh... darcs.
11:02:50 <Riastradh> ...and recursive variable bindings, RussellOConnor.
11:03:07 <LittleDan> RussellOConnor: ...so that rules out full continuations?
11:03:39 <RussellOConnor> That is my understanding, but I spend the time to understand the arguement
11:04:08 <RussellOConnor> http://www.mail-archive.com/haskell@haskell.org/msg14047.html
11:05:07 <RussellOConnor> Someone else in the thread noted that Haskell is usually implemented with graph reduction, rather than CPS.
11:05:25 <RussellOConnor> Which makes sense since Haskell is supposed to be lazy
11:25:10 <esap> Continuations are a bit difficult subject for purely functional languages, as control transfer is not clearly referentially transparent.
11:28:32 <esap> though some restricted versions of continuations can be made referentially transparent. But in general, adding full continuations may be already too much.
11:28:40 <Riastradh> It makes especially less sense when considering that there isn't much concept of 'control transfer' in graph reductions.
11:29:18 <esap> ah but there is. Then the 'currently reduced' part of the expression moves to somewhere else, that could be considered as control transfer.
11:29:25 <esap> s/Then/When/
11:30:03 <Riastradh> 'Moves to somewhere else?'
11:30:18 <esap> I mean, you produce a constant that is not reducible.
11:31:00 <esap> then if the program doesn't halt, the control has been moved 'somewhere else' :-)
11:31:09 <Riastradh> It is a control transfer in the graph _reducer_.
11:31:35 <esap> you can think of it abstractly, it'll map to some semantics.
11:32:13 <Riastradh> Yes, at some level there will be control transfer, but it has much less meaning to manipulate at the level of the graph in question.
11:33:11 <esap> of course, but the semantics of the graph is the only one that matters, really.
11:35:25 <Riastradh> Right, but it wouldn't make sense to manipulate those semantics _from_ the graph.
11:36:14 <esap> right, control flow is not exactly simple to model with graph reductions.
11:36:42 <Riastradh> Unless you make it explicit by rewriting the graph in explicit CPS, which is what the CPS monad does.
11:38:26 <esap> I'd still want to do it with something simpler. CPS transform is quite complicated for modelling simple thing such as control flow.
11:38:40 <Riastradh> How is CPS conversion complicated?
11:39:08 <esap> Well I'd compare it with handling data. Control and data are duals, so both should be equally simple.
11:39:25 <Riastradh> Do you consider monadic data computation complicated?
11:40:06 <esap> no, but monads are already building an interpreter on top of the actual semantics. What I'd want to do is to avoid that interpreter.
11:41:21 <esap> At least not for expressing things that would seem to be primitive.
11:41:38 <esap> or at least so simple that they would be most efficiently implemented as primitive.
11:41:57 <esap> Adding another layer of interpretation will not become efficient soon.
11:43:10 <esap> Of course, I've somewhat considered whether control flow is actually _about_ those interpreters. But I've still not lost all hope that this wouldn't be necessary.
11:48:51 <esap> Of course, IO monad is normally implemented as a primitive. But I would consider it rather unlikely that the IO monad solution is a good one, because it makes just 'one' layer 'primitive'. That doesn't seem right. You should have separate monads for different domains.
11:49:39 <Igloo> What do you mean by domain?
11:50:22 <esap> domain is something that provides a language or a terminology for some specific purpose.
11:51:07 <esap> Like in 'domain specific embedded languages' :-)
11:53:04 <esap> Monad's operations provide such terminology.
11:56:44 <esap> say you would have separate monad for 'file handling' and for 'asynchronous communication'.
12:22:23 <LittleDan> Riastradh told be (correct me if I'm misquoting you) that monads were "generalizations of computations". What does that mean?
12:23:44 <esap> Maybe that means that "c :: IO Integer" is a computation, and when you use c :: (Monad m) => m Integer, you are really generalizing those computations such that you can use any kind of monad to perform that computation.
12:24:19 <LittleDan> oh
12:24:30 <LittleDan> but how does that make sense outside of the context of IO?
12:24:54 <LittleDan> if it was c :: State Integer, it wouldn't be like that, would it?
12:25:18 <esap> Yes, c :: State Integer is another kind of computation.
12:25:38 <LittleDan> in what sense is a State a computation?
12:26:05 <Smerdyakov> A computation is an evaluation of a computable function.
12:26:24 <esap> no, State is not, but c :: State Integer, the 'c' is a computation, say you might have c = do { x <- get ; let x' = x + 1 ; set x ; return x }
12:26:37 <Smerdyakov> Monads provide an interface for composing computable functions.
12:28:20 <Riastradh> Monads allow you to construct simple computations -- computations with already computed values --, and allow you to extend a computation, whose result will be computed by applying the current value that the computation would have computed to a function that produces a further computation.
12:28:35 <Riastradh> (And other operations.)
12:28:44 <esap> littledan: so in this example, 'c' is clearly a computation. Now, when you generalize these kinds of things, you find out the operations that are important for _arbitrary_ computations are sequentiality [bind] and 'terminating the sequence of operations' [return]
12:30:26 <esap> littledan: So this means that the Monad type class describes an interface for any computation, which is more general than any specific computation, such as c1 :: State Integer or c2 :: IO String.
12:32:54 <RussellOConnor> return isn't really a terminating conditon, rather it is the trivial computation.
12:34:38 <esap> russell: trivial computation is also such terminating condition. Try use 'return' in any other place in the do-notation than at end. It'll be hard.
12:35:22 <esap> russell: really, also the identity function has similar property.
12:36:04 <esap> russell: consider, for example: show . (id :: Integer -> Integer) . read
12:36:58 <esap> russell: The type annotation there is essential, because of this property.
12:38:16 <RussellOConnor> do x <- return 5
12:39:11 <esap> russell: right, but note that in that there are two sequences, outer and inner one.
12:39:31 <esap> russell: you might actually sometimes write that as: do x <- do return 5
12:42:16 <esap> russell: and note that do x <- a   is not valid as such. You have to add another statement there [e.g. a return].
12:44:15 <esap> of course, it's possible _not_ have a return, but then you get a loop: x = do { putStrLn "Hello world" ; x } This doesn't have a return at the end.
12:46:53 <bourbaki> hi
12:47:02 <esap> hi
12:47:25 <bourbaki> ah sry esap i lost my connection yesterday :(
12:47:39 <esap> ok
12:47:54 <bourbaki> got some more time now?
12:48:44 <esap> in couple of minutes, I have to go buy some food before the last shop is closed, I'll be back in about 5 minutes.
12:49:01 <bourbaki> ok
12:54:02 * esap is back.
13:43:33 <RussellOConnor> esap: do x <- return 5 isn't at all two sequences.
13:45:13 <Lemmih> Isn't it?
13:47:57 <RussellOConnor> It is similar to do x <- getChar
13:48:08 <RussellOConnor> Both are just one sequence.
13:48:11 <RussellOConnor> @type getChar
13:48:12 <lambdabot> getChar :: IO Char
13:48:26 <RussellOConnor> @type (return 'a')
13:48:27 <lambdabot> (return 'a') :: forall m. (Monad m) => m Char
13:48:35 <RussellOConnor> @type (return 'a')::(IO Char)
13:48:37 <lambdabot> (return 'a')::(IO Char) :: IO Char
13:49:16 <esap> russell: think of the do { ... } notation to express trees, where the 'main sequence' is all the things with <- ending with a return. And each use of <- creates a subtree which has similar structure.
13:50:00 <RussellOConnor> So would you say that do x <- getChar has two sequences?
13:56:45 <esap> russell: yes, one that is partial and another that contains everything from getChar.
13:58:40 <RussellOConnor> ok
15:46:00 <LittleDan> @type fmap
15:46:01 <lambdabot> fmap :: forall f b a. (Functor f) => (a -> b) -> f a -> f b
15:47:35 <Cale> @type liftM
15:47:36 <lambdabot> bzzt
15:47:59 <Riastradh> @type Control.Monad.liftM
15:48:00 <lambdabot> Control.Monad.liftM :: forall r m a1.
15:48:00 <lambdabot> 		       (Monad m) =>
15:48:00 <lambdabot> 		       (a1 -> r) -> m a1 -> m r
17:44:08 <Lemmih> Hey shapr
17:45:46 <shapr> hiya Lemmih 
21:01:21 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/hawiki/EuroHaskell","May 2004 HC&AR: http://www.haskell.org/communities/","http://www.haskell.org/cabal/"]'
21:01:21 --- topic: set by shapr on [Fri Jun 25 02:34:22 2004]
21:01:21 --- names: list (clog CLxyz Gowilla yauz_ shapr Cale mattam_ RussellOConnor themaximus SamB stepcut juhp andersca SuperKaramba esap ksandstr Joachim gp _Codex rubix Jad elmex eno cmeme shawn icb Riastradh asmodai dennisb isomer [dan] opet Lemmih polli CrewdenX Fractal Matt-W shrimpx XTL mikef keverets Spark dons smkl norpan sazzle skylan lambdabot tic Lor earthy ibid gdsx ludde Smerdyakov thebug greenrd Lunar^ desrt Taaus Igloo flori titanstar kosmikus|away)
21:01:21 --- names: list (shammah sorrow ozone wagle edwinb blackdog neologism Hipo)
