01:39:53 <musasabi> Does an Qt binding exist? Googling reveals messages from people having some problems linking with the Qt binding library, but no mention of a haskell binding.
01:40:17 <andersca> gtk+ is way better anyway ;)
01:42:32 <musasabi> andersca: I need to have canvas with easy zooming, I know it can be done easily with Qt, but haven't found out how to do it with gtk[2].
01:43:11 <andersca> ah, good point
01:43:19 <andersca> eventually gtk+ will support cairo, which does have a haskell binding
01:52:57 <musasabi> cairo looks kind of nice.
01:55:25 <musasabi> but "The haskell bindings are, unfortunately, not available to the general public at the moment - there are some fairly serious segfault bugs yet to be tracked down. Contact AbeEgnor if you'd like to play with the current unstable implementation."
01:56:52 <andersca> I think it's in cairo cvs
01:58:22 <musasabi> nope.
02:32:50 <firefly> I thought the canvasses in GTK+ (and Gnumeric) could do that?
02:37:00 <musasabi> firefly: not trivially (at least I haven't found out how.
02:44:25 <musasabi> first of it is a separate library - gnome canvas. gnome_canvas_set_pixels_per_unit () looks promising though.
02:47:13 <firefly> You might want to google on the gtk+/gnome devel lists and see if you can find an exchange between Jody Goldberg (Gnumeric maintainer) and somebody who wanted a canvas that was better for his purposes than the "standard" ones.
02:47:24 <firefly> I am pretty sure they talk a lot about zooming and speed.
02:48:02 <firefly> Jody Goldberg packages the Gnumeric canvas and asks him to try that.
02:48:19 <firefly> He does and is exhilerated because it is the best fit yet :)
02:52:53 <musasabi> googling reveals lots of canvas spinoffs which seem all to be quite abandoned
02:52:58 <musasabi> e.g. foocanvas.
02:55:19 <andersca> yeah
02:55:30 <andersca> cairo will save us
02:55:30 <andersca> :)
03:09:30 <firefly> I can assure you that the one in Gnumeric is still maintained ;)
03:14:51 <musasabi> firefly: Gnumeric seems to be using libgnomecanvas at the moment.
03:16:55 <musasabi> hmm it is using both libgnomecanvas and a canvas implementation of it's own.
03:17:48 <musasabi> and gnumeric canvas seems to be a layer on top of foocanvas.
03:55:18 <dnm> musasabi: If you happen to have specific questions for Abe, I could relay those to him.
03:55:48 * dnm prefers Qt over GTK in terms of widget toolkits generally, but doesn't know if it's germane to the discussion.
04:00:37 <andersca> dnm: I work on gtk+ so I'm kinda biased
04:17:03 <dnm> Ah
06:43:08 <Username249> hi ! Where can I find docs about monadic parsers in haskell ?
06:52:46 <TheHunter> you know parsec (http://www.cs.uu.nl/~daan/parsec.html)?
06:57:22 <Username249> no, i look at itt, i hope it has a good documentation. I have an example for monadic parsers here, but i really dont understand the "(>>=) :: m a -> (a -> m b ) -> m b" part
07:02:14 <Marvin--> Username249: well, that's a general monadic concept, not specific to monadic parsers
07:02:44 <jesse> you are probably looking for something like this http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm
07:03:34 <Marvin--> or http://www.nomaware.com/monads/html/
07:07:11 <Username249> oh i just read a bit on the parsec documentation, didnt help much, didnt explain what a "class Monad m where....." is. I will try the both links from jesse and Marvin--
07:48:52 <Username249> in the text from Theodore Norvell i understand everything till this line "type StateTrans s a = s -> (s, a)"
07:49:14 <Username249> what does that mean ?
07:49:16 <norpan> what don't you understand about it?
07:49:29 <norpan> it defines a new type synonym
07:49:56 <norpan> so, instead of writing f :: Int -> (Int, String) you can write f :: StateTrans Int String
07:49:57 <Username249> okay, a type is something like int, char or float, right ?
07:50:15 <norpan> yes
07:50:34 <Username249> okay, so what does "Int -> (Int, String)" in your example mean ?
07:50:56 <Username249> i defined a funktion f that accepts ints, and returns ints and strings ?
07:50:58 <norpan> it means the type of a function taking an int and returning a pair consisting of an int and a string
07:51:25 <norpan> it accepts one int, and from it it computes an int and a string
07:51:55 <Username249> okay, i see. It is hard to understand, because this is something that you definitly CANT do in C...
07:52:00 <Lukhas> like   f 1 => (42,"foo")
07:52:23 <Lukhas> well, Haskell, apart from being a programming language, doesn't have many things in common with C :)
07:52:27 <norpan> Username249: yeah, just forget enything you know about types in C
07:52:51 <Username249> yeah i know, its hard though. i will read on.
07:53:02 <Username249> thanks again, guys,
07:53:12 <norpan> maybe you're reading a too complicated text
07:54:00 <Username249> norpan, i read the text from jesse
07:57:08 <Username249> okay, if he defines a funktion like "(>>=) :: StateTrans s a -> (a -> StateTrans s b) -> StateTrans s b" he REALLY means "(>>=) :: s -> (s, a) -> (a -> s -> (s, b)) -> s - (s, b)"
07:58:56 <Lukhas> both are awful to read, anyway :)
07:59:38 <norpan> you shouldn't read about monads when you don't even know about function types, i think :)
08:00:06 <Username249> okay, so i think i know where my problem is, is there a text that explains the use of these "->" arrows ? So i understood "Int -> Int,String" Part (wint int in incoming, and int,string outgoing), but what does then Int->Int->Int,String mean ? What does the "Int" in the middle mean ?
08:00:27 <norpan> Username249: it means, basically, that the function takes two arguments
08:00:38 <norpan> we like to write functions that way
08:00:49 <Lukhas> a function takes n-1 arguments, where n is the number of arrows
08:00:55 <Lukhas> hmm, no, wrong
08:00:56 <Username249> why not Int,Int -> Int,String then ?
08:01:13 <norpan> Username249: you can use (Int,Int)->(Int,String) as well
08:01:15 <Lukhas> a function takes n arguments, where n is the number of arrows
08:01:19 <norpan> it's almost the same thing
08:01:26 <Lukhas> i found it hard to get, the first time too
08:01:47 <Lukhas> arg1 -> arg2 -> argN .. -> return value
08:01:52 <norpan> the difference is that the first function can take one argument and return a _new_ function, which takes the next argument
08:01:53 <Username249> ah okay. so the above example takes 7 (!) arguments ?
08:02:15 <norpan> no
08:02:25 <norpan> because you must put in the parenthesis
08:02:48 <norpan> so a->b->c really means a->(b->c) which is different from (a->b)->c
08:03:18 <norpan> the whole point is that functions can take not only ints and stuff as arguments, but other _functions_ as well
08:03:37 <Lukhas> that's why it's called /functional/ programming :)
08:03:41 <Username249> oh this is hard.
08:03:50 <Lukhas> Username249: c'mon
08:04:24 <Lukhas> in C, think about function pointers, that's uglier, but ... :)
08:05:13 <Username249> so the above example takes lets say an int, gives this at a funktion, with a second parameter, and returns a funktion that takes lets say an int. no wrong.
08:05:44 <norpan> that's why he uses a type synonym so that you won't have to think about all those arrows
08:06:37 <Username249> this is impossible to program, i think. so many funktions and parameters. you cant follow it.
08:06:44 <norpan> nope
08:06:52 <norpan> you just need to think abstractly
08:07:13 <norpan> >>= is a function that takes two state transformers and combines them into a new state transformer
08:07:26 <norpan> a "combinator"
08:07:50 <Username249> no >>= just takes "s".
08:08:07 <Username249> oh no
08:08:11 <Username249> thats wrong
08:08:18 <norpan> >>= takes two arguments
08:08:45 <Username249> >>= takes everything till s -> (s,b)
08:08:54 <Username249> that are 3 arguments ?
08:09:04 <norpan> a state transformer returning a, and a function using that a to create a new state transformer
08:09:51 <norpan> the first argument has type StateTrans s a, the second argument has type (a -> StateTrans s b)
08:09:58 <norpan> and the return type is StateTrans s b
08:10:23 <norpan> and if you don't understand this, don't be afraid to read some lighter text, like a haskell tutorial
08:10:35 <norpan> you'll get it eventually
08:15:18 <Username249> another question, what does \  mean ?
08:15:25 <Lukhas> lambda
08:15:38 <Lukhas> anonymous function
08:15:51 <Username249> okay, giving up.
08:16:10 <Lukhas> hmm, you should stay with some simple cases for the moment :)
08:16:25 <Lukhas> a lambda is a function you define "on the fly", inside another function
08:16:50 <Lukhas> rather that defining a full function that will be used once in your program, you can use a lambda
08:17:31 <Lukhas> but, that's better for now if you stick to "named" functions, the \ isn't mandatory to learn Haskell bases
08:17:35 <Username249> :) this is too hard. a simple "hello world" haskell programm is not such an big deal, or jsut to add some numbers, and a kind of "switch" statement, but this ist definitivly to much for my small brain.
08:17:50 <Lukhas> string IOs aren't "simple", in Haskell
08:18:10 <Lukhas> start with something sorting a list, or converting number from a base to another
08:19:41 <Username249> yeah i already did that, there shuold be some traces of my rogramming style in your Copy and paste wikipedia.
08:20:20 <Username249> but the new task to write a monadic parser is just too hard.
08:21:09 <Lukhas> hmm, yeah :)
08:23:32 <dennisb> Understanding anonymous functions is not that hard and I think you should do that before you start with state transformers and such
08:25:55 <Username249> okay, dennisb is there a good documentation about anonymous functions ?
08:26:20 <dennisb> I can try to explain, it's fairly easy. Start with an easy definition: f = 42
08:26:50 <Username249> okay, the variable f is now 42.
08:26:56 <dennisb> that definition should be clear, We have the value 42 and we give it a name, so f is from now on the value 42
08:27:02 <dennisb> right, and the type of f
08:27:03 <dennisb> ?
08:27:09 <Username249> Int ?
08:27:11 <dennisb> yes
08:27:15 <Username249> great !
08:27:19 <dennisb> (in the simplest form)
08:27:20 <Lukhas> :)
08:27:36 <dennisb> numbers have some other properties, but that's another lesson
08:27:41 <sorrow> dennisb, isn't it Num really?
08:27:48 <dennisb> ok, next definition. f = "foo"
08:27:54 <dennisb> sorrow: that's the other lesson
08:28:10 <Username249> okay,f is a List of Char , or better [Char]
08:28:18 * Username249 has massive Haskell Skillz :)
08:28:31 <dennisb> here we have a value "foo", notice it's a value, it does not have a name (we can call it an anonymous string)
08:29:10 <dennisb> and we bind f to be that anonymous value (a string in this case, an int in the previous)
08:29:23 <dennisb> now we will do the same with functions
08:29:33 <dennisb> f = \x -> x+1
08:29:49 <dennisb> to the right we have a function value. That is the function that takes an x and returns x+1
08:29:56 <Username249> stop not so fast.
08:29:59 <Username249> please
08:30:02 <dennisb> no problem
08:30:10 <dennisb> the syntax is the tricky part here
08:30:20 <dennisb>  \x   ->    x+1
08:30:51 <dennisb> that's the haskell syntax for a function, it says, give me an x and I will return x+1 to you
08:31:12 <Username249> so f Which is 5 is now bound to "foo" ?
08:31:13 <dennisb> it has no name, it just exists, just like 42 which is a number and "foo" which is a string
08:31:27 <dennisb> ooh, these are 3 different examples
08:31:40 <dennisb> 3 different f's
08:31:47 <Username249> ahh okay.
08:32:16 <dennisb> in the first example we let f be equal to an int value, and here we let f be equal to a function value
08:32:17 <Username249> but you could not do sth like PutStr(f) which would output 5 or foo.
08:32:33 <dennisb> no, f can only be defined to one thing at a time
08:32:46 <dennisb> I should have used different variable names instead of f
08:33:15 <Username249> no no i got it i got it.
08:33:45 <Username249> now you could do something like f(x) // assuming x = 32 , then would x be 33 ? right ?
08:33:53 <dennisb> yes
08:34:07 <dennisb> since you have defined f to be the function that adds one to the argument, that will work
08:34:55 <dennisb> and the (simplified) type of f is Int -> Int   (if we forget about the number stuff that sorrow talked about, numbers are special)
08:35:20 <dennisb> It takes an integer and returns an integer
08:35:45 <Username249> okay, thank you the \  part seems to be quite easy, but why the hassle ? Why not writing a f function in the normal way ?
08:36:12 <dennisb> same reason why you use anonymous numbers in programs
08:36:29 <dennisb> you don't always go around writing x = 42 when you want to use the number 42
08:36:30 <Username249> i dont know this reason either.
08:36:41 <Username249> oh okay.
08:36:49 <Username249> so for pi i get it
08:37:15 <dennisb> sometimes you just wants to use the number. and sometimes you just want to use a small function without giving it a name
08:37:34 <Username249> but you gave it a name ... f
08:37:53 <dennisb> the cool thing is when you realise that functions are just values, you can pass them in to other functions and get them back as result from other functions
08:37:59 <dennisb> Username249: yes, in the example I did
08:38:11 <andersca> hey dennisb
08:38:16 <dennisb> andersca: hey hey
08:38:57 <dennisb> and this is the basic thing about functional programming, functions are values and can be put sent around like any other value, you can have a list of functions, and anything else.
08:39:56 <musasabi> dennisb: yes that is fine in principle until you need a distributed or persistent application.
08:41:08 <dennisb> musasabi: Sure. Some things you can not do with functions that you can with for example numbers, like printing them out on the screen
08:41:26 <Lemmih> Username249: http://haskell.org/complex/introduction_to_programming.html <- a tutorial "targeted towards the imperative programming crowd"
08:41:55 <musasabi> dennisb: not being able to pass them around on network or to disc is just a haskell limitation however.
08:42:17 <dennisb> musasabi: yes, try something like erlang
08:43:12 <musasabi> dennisb: I already have ;)
08:43:12 <dennisb> Username249: what about this definition. Do you know the type of it: g = \x -> (\y -> x+y)
08:44:30 <Username249> dennisb, wait a sec.
08:46:14 <dennisb> In functional programming lots of things that are hard looks small and simple. Even one line functions can sometimes be hard to understand
08:46:39 <dennisb> and I'm not even talking about long lines :-)
08:47:56 <dennisb> Username249: if you want some hints, then just say so
08:49:36 <Username249> okay , the innermost is easy. it just takes Integers. but i wonder where he gets his "x"
08:50:33 <dennisb> Username249: Try starting from the outside. we can see directly that the value to the right is a function, right?
08:50:43 <dennisb> it's a lambda thingie (\)
08:50:44 <Username249> of copurse
08:50:50 <dennisb> so the type should be   ? -> ?
08:50:51 <Username249> g is a function.
08:50:54 <dennisb> but what is the ?
08:51:17 <dennisb> maybe you should start with the right ?, what does the function return?
08:51:20 <Username249> Int -> Int , I understand the first one, but the result i am just guessing
08:51:38 <Username249> why is the right easier ?
08:51:52 <dennisb> well, maybe it is not easier
08:51:59 <dennisb> I don't know which is easiest
08:52:05 <Username249> :)
08:52:51 <Username249> i guess.
08:52:59 <dennisb> look at some other function examples: \x -> 5    , what does it return? An Int!
08:53:01 <Username249> it is like (Int,Int) -> Int
08:53:14 <Username249> you have to givt it two numbers, and it adds them
08:53:27 <dennisb> and \x -> "foo", what does it return? a string!
08:53:42 <Username249> \x returns a function.
08:53:46 <dennisb> and now \x -> (\y -> x+y)  what does it return? a function
08:54:03 <dennisb> yes, so the type is    ? -> (? -> ?)    (it returns a function)
08:54:18 <dennisb> we don't know what kind of function yet, but we know it is a function
08:54:49 <dennisb> and what does the inner function return (that's the third and last ?)
08:55:08 <Username249> the inner function returns an Int
08:55:12 <dennisb> right
08:55:13 <Username249> the result of x+y
08:55:20 <dennisb> ? -> (? -> Int)
08:55:50 <dennisb> and by the same reason we know that y, the input of the inner function must be an Int
08:56:05 <dennisb> so we have: ? -> (Int -> Int)
08:56:42 <dennisb> and again we see that x, the input of the outer function is also an int. so the type is Int -> (Int -> Int)
08:57:01 <dennisb> that's a long explanation for such a small little definition :-)
08:57:25 <Username249> okay, but what is the reason behind to write a function that accepts one Integer, and Returns a function ?
08:57:44 <arjanb> add5 = f 5
08:57:51 <dennisb> now you can use this function to create new functions. For example h = g 5
08:57:52 <Username249> its like (in c) if (x==5) return sqrt(void);
08:58:09 <dennisb> we give it an integer and you get a function back
08:58:28 <dennisb> not really like the C example
09:00:04 <dennisb> these are all simple functions that don't do much, but this way of working with functions are very powerful. Creating functions on the fly that you send along to other functions
09:00:09 <Username249> okay, but what is the reason behind that ? you cann call g 5 now, okay, but you get a funtion back with (5 + SOMETHING ) it makes no sense, what can you do with it now ?
09:00:30 <dennisb> have you seen the function map?
09:00:35 <Marvin--> Username249: you can apply it to every element of a list, for example
09:00:54 <Username249> the function "map" or a map with functions on it ?
09:01:12 <Username249> map like map ([1,2,3], Sqrt)
09:01:13 <dennisb> you can call map like this: map add5 [4,5,6]
09:01:23 <Username249> result [1,4,9]
09:01:30 <dennisb> exactly
09:01:38 <dennisb> and this: map (g 54) [1,2,4]
09:02:09 <Username249> result 55,56,57 ?
09:02:10 <dennisb> here I used g 54 instead of binding it to a name using: add54 = g 54 first
09:02:46 <dennisb> what about this:  map (\x -> x*2) [1,2,3]
09:03:01 <dennisb> we just use functions as values
09:03:07 <Username249> result [2,4,6]
09:03:21 <dennisb> exactly!
09:03:44 <Username249> i think i get. thank you again dennisb you have been very polite.
09:04:07 <dennisb> no problem, there wasn't much going on in the channel anyway
09:04:15 <Username249> :)
09:04:49 <dennisb> and why this is a powerful thing, that's something you will learn by experience
09:10:02 <dennisb> I want say one more thing about the function g :: Int -> (Int -> Int) we defined. If you call it with an Int you get a function back. So (g 42) is a function. This means you can call it and write (g 42) 7. In this case you don't need the () aroung the function, but you can write: g 42 7
09:11:18 <dennisb> so in one way one can look at g as a function that takes 2 integers and returns 1 integer, or one can look at it as a function that takes 1 argument and returns a (Int -> Int) function
09:12:27 <dennisb> so sometimes people say "the function took 2 arguments" when they really mean something like Int -> (Int -> Int)
09:15:06 <Lemmih> Is it posible to make my own classes derivable?
09:15:44 <dennisb> Lemmih: no
09:17:33 <dennisb> there are projects like Generic Haskell that do such things
09:25:06 <Marvin--> oh shoot, syntax left again
09:25:38 <dennisb> and norpan both left again and came again
09:25:54 <norpan> va
09:26:17 <dennisb> norpan: can't decide if you want to be in or out?
09:26:38 <norpan> i can, but i rebooted with the new kernel
09:30:05 <Username249> is there a good exppanations for "class"es in haskell ?
09:32:46 <ne1> Mine is http://www.cs.utoronto.ca/~trebla/fp/lecture-06.pdf
09:33:29 <Cale> Username249: "Yet Another Haskell Tutorial" is a good tutorial on Haskell in general.
09:33:34 <Lemmih> Username249: http://www.haskell.org/tutorial/classes.html
09:34:13 <Cale> basically, classes just allow you to define a common interface to a related bunch of types.
09:34:23 <Cale> Num is a good example
09:34:42 <Username249> thanks a lot, again
09:34:55 <Cale> it defines (+) and (*) for example so that these operations can work with any sort of number.
10:05:56 * Marvin-- ponders HUnit
11:38:42 <Username249> Okay. so i nearly completed the lambda complex.
11:38:50 <Username249> but what is an infox operator ?
11:39:00 <Username249> errr infix ?
11:42:16 <Cale> an infix operator is a function that is between its arguments
11:42:19 <Cale> like +
11:42:40 <Cale> you can write 5 + 6 instead of (+) 5 6
11:43:13 <Username249> Cale, do you know the lambda complex ?
11:43:20 <Username249> espacially the foldr example ?
11:44:01 <Cale> well, I found the site :)
11:44:03 <Username249> where is the reason to write "foldr func base (x:xs) = x `func` (foldr func base xs)" instead of "foldr func base (x:xs) = func x (foldr func base xs)
11:44:42 <Cale> those mean the same thing, but the one written in infix notation gives more of an idea of what foldr does
11:44:53 <Cale> it sticks some operator between the elements of a list
11:44:53 <Username249> ah okay.
11:53:12 * desrt boils a kettle and pours it on the floor
11:53:37 <desrt> the xserves came on friday?
11:59:58 <Marvin--> ah, SyntaxLaptop, I'm looking at the description parser
12:03:34 <Username249> Has the lambda complex more tutorials then the first one ?
12:04:15 <Cale> "Yet Another Haskell Tutorial" is really good
12:04:35 <Cale> http://www.isi.edu/~hdaume/htut/tutorial.pdf
12:07:09 <Username249> wow yaht is 200 pages long. A bit much for today.
12:07:47 <Cale> well, it is pretty much a book
12:07:59 <Cale> you can flip through it and see what you've missed
12:08:18 <Username249> i will start with "class" now.
12:08:39 <Username249> after I read all that i will finally understand what a monad is !
12:09:13 <Cale> Well, first, you should understand what a functor is.
12:09:43 <Cale> A functor is just any type where there is a definition for "map"
12:09:59 <Cale> Or in Haskell 98's case, fmap
12:10:10 <ibid> heh
12:10:26 <ibid> i understood monads long before i understood functors
12:10:41 <Cale> That is, it's some sort of container where you can apply a function to all the elements in the container.
12:11:34 <Marvin--> Cale: *and preserve the structure of the container*
12:11:38 <Cale> yes
12:13:08 <Cale> Every monad is a functor. So a monad is a sort of container type. Every monad has two things defined on it:
12:13:11 * Marvin-- prods SyntaxLaptop
12:13:15 <Cale> return - which takes an element, and makes a container containing just that element
12:14:36 <Cale> and join - which takes a container of containers, and combines them all somehow into one
12:14:55 <Cale> for example, lists are a monad
12:15:06 <Cale> return x = [x]
12:15:17 <Cale> and join = concat
12:15:50 <Cale> there is also an operation called bind (>>=) which is commonly used in Haskell, and can also be used to define what a monad is
12:16:06 <ibid> how is bind defined from return and join?
12:16:44 <Cale> x >>= f = join (map f x)
12:17:31 <ibid> is join the same as sequence?
12:17:39 <Cale> no
12:17:50 <Cale> @type Monad.join
12:17:55 <lambdabot> Monad.join :: forall a m. (Monad m) => m (m a) -> m a
12:18:04 <ibid> okay, what's the intuition of join in IO a?
12:18:11 <Cale> so, for example, it takes a list of lists, and produces a list
12:18:31 <Cale> or a Maybe (Maybe a), and produces a Maybe a
12:19:59 <Cale> in the case of IO, bind is actually easier to comprehend than join, but basically, if you look at the types carefully, it will make sense
12:20:09 <Cale> join :: IO (IO a) -> IO a
12:20:39 <ibid> it essentially eats a redundant layer of io away? :)
12:20:45 <Cale> yes
12:20:54 <ibid> nice
12:22:40 <Cale> so what bind does in English, is exactly what the Haskell code above says
12:23:04 <Cale> bind's type is m a -> (a -> m b) -> m b
12:23:53 <Cale> it takes a container of a's, and a function from a's to containers of b's, and applies that function to each thing in the container of a's. It then collects all the produced containers of b's together into a single container.
13:19:59 <Username249> has someone an example for an LR(k) Parser with k = 2 ?
13:20:37 <Username249> LR (k) Grammar of course
13:21:29 <ibid> any LR(k) grammar with k <= 2 qualifies, even LARL grammars and LR(1) grammars
13:22:27 <ibid> however, i don't have any offhand that is strictly LR(2)
13:22:48 <Smerdyakov> How about the grammar that accepts nothing?
13:23:12 <ibid> that's even LR(0)
13:23:33 <ibid> membership in the language it defines is decidable using a lookahead of zero
13:23:49 <ibid> unless i'm misremembering how these grammar classes are defined :)
13:27:09 <Username249> ibid, sorry i dont get it.
13:27:50 <Username249> i thought that an LR(2) Grammar is a grammar in which a parser need to read 2 characters more to decide whether he should reduce or shift.
13:39:17 <ibid> Username249: AIUI it's a grammar where a parser needs at most two characters' lookahead
13:49:10 <Username249> ibid, can you give me an example for an LR(2) Grammar ?
13:49:49 <Username249> i wonder if (1) S -> ba (2) S -> baa is an LR(2) Grammar.
13:49:57 <ibid> i already answered:
13:49:59 <ibid> 23:21  <ibid> any LR(k) grammar with k <= 2 qualifies, even LARL grammars and LR(1) grammars
13:50:02 <ibid> 23:22  <ibid> however, i don't have any offhand that is strictly LR(2)
13:51:30 <ibid> what are ba and baa? terminals? nonterminals?
13:58:23 <Username249> sorry, b and a are terminals.
13:58:28 <ne1> If you have to grammatically distinguish between = and ==
13:58:30 <Username249> S is the start symbol.
14:20:13 <ibid> Username249: that's LR(1) afaict
14:24:08 <ibid> basically, you shift b and a, and then based on lookahead either shift a or not; then reduce
14:24:17 <ibid> one character lookahead is required
14:35:52 <Igloo> Waaah. I hate curses.
14:36:20 * andersca curses
14:41:57 <Igloo> This is getting silly. What can it be getch does that makes the screen update that I'm not doing?
14:49:23 <Marvin--> sheesh, darcs whatsnew reports 10 hunks in the same file, and the test cases are failing all over the place
14:49:26 * Marvin-- gives up for tonight
14:50:23 <jemfinch> 10 hunks?  It's like the Mr. Universe contest!
14:50:31 <Marvin--> yep
15:02:05 * SamB wonders if anyone has actually ever used a 62-tuple in GHC for anything unrelated to teasing it
15:08:12 <swisscheese> Hi all - In case anyone is interested in applications of Haskell, I put a small product on the market designed in Haskell. It's the world's hardest sliding block puzzle. You can see it at quirkle.com.
15:08:59 <SamB> swisscheese: but no juicy source code?
15:10:19 <swisscheese> :-)
15:11:18 <SamB> oh, it is a physical puzzle... interesting
15:12:03 <swisscheese> Yes, hardware so to speak.
15:12:14 <Smerdyakov> Now write the same search in other languages and see how it compares to how long the Haskell search took!
15:13:20 <Igloo> SamB: They turn up in automated transformations periodically
15:15:34 <Marvin--> swisscheese: looks cool
15:17:16 <swisscheese> Thanks.
15:28:27 <skew> SamB: tuples are used internally to translate list bindings
15:29:05 <skew> I don't remember what I was doing, but I know I ran out of tuples once!
15:35:08 <SamB> I should hope it wouldn't be a human -- any human coding those directly deserves what he gets!
15:36:08 <skew> I remember I was manufacturing global bindings...
15:36:21 <skew> hopefully it was automated.
15:40:21 <skew> I was generating a parser for each of the diferent types of tokens in lexed input, and I had Enum Token
15:40:51 <skew> I wanted to map "match just this thing" over an enumeration of all tokens, and bind that with a list of all the token names
15:42:20 <SamB> well, long list literals aren't something I think would be a problem, mentally...
15:43:25 <skew> the linker complained about some missing symbol
15:43:49 <skew> I only realized that was the mangling of an extra long tuple by examining generated core
15:44:04 <skew> the problem is long list patterns
15:44:48 <skew> [tokA,tokB,tokC] = map char ['a'..'c'] is fine
15:45:19 <skew> go past 62 token types and it fails.
15:47:27 <skew> arbitrary resource bounds never hold up so well
15:47:39 <skew> whether it's 62 tuple entries or 640K :)
17:16:16 <stepcut> <interactive>:1:
17:16:16 <stepcut>     My brain just exploded.
17:16:16 <stepcut>     I can't handle pattern bindings for existentially-quantified constructors.
17:27:37 <Cale> stepcut: haha
17:47:47 * Igloo decides the universe hates me
17:57:24 <Pseudonym> Oh behalf of the Universe, I'd like to dissent in part.
17:57:36 <Pseudonym> Most of the time we don't have any emotional investment in you at all.
17:59:09 <Igloo> I'll rephrase - the universe is observationally equivalent to a non-empty set of possible universes which hate me
18:00:39 <ozone> so, what you're saying is that observationally, there may be some universes which hate you?
18:05:24 <Igloo> No - there are[0] some universes that hate me, and this one is observationally equivalent to some of them   [0] I don't think I mean "are" here, but I don't think I have a word that says what I do I mean
18:05:38 <Pseudonym> How do you know that there are some universes which hate you?
18:05:46 <Pseudonym> Hmmm.
18:06:04 <Pseudonym> You would have to prove that any universe which hates you is feasable.
18:06:46 <Pseudonym> OK, consider the category of universes.
18:07:03 <Pseudonym> Objects are universes, arrows are mappings which preserve universal properties.
18:09:10 <Pseudonym> Hmmm.
18:09:35 <Pseudonym> To locate a universe which hates Igloo, you're going to need a point to probe that property.
18:10:09 <Pseudonym> Is there a terminal object?
18:12:47 * Igloo smiles at Pseudonym
18:13:39 <Igloo> Anyone know of anything like top and/or strace for pthreads?
18:13:53 <Pseudonym> Which OS?
18:13:58 <Igloo> Linux
18:14:09 <Pseudonym> NPTL or LinuxThreads?
18:14:55 <Igloo> No idea
18:14:57 <Pseudonym> If it's LinuxThreads, then "top" will probably do the trick.
18:15:03 <Pseudonym> Which kernel version?
18:15:23 <Igloo> 2.6.5
18:15:32 <Pseudonym> Probably NPTL then.
18:15:53 <Pseudonym> Unfortunately, I don't know enough about NPTL.
18:16:06 <Igloo> OK, thanks anyway  :-)
18:16:33 <Pseudonym> You may like to try dprobes.
18:16:37 <Pseudonym> http://oss.software.ibm.com/developer/opensource/linux/projects/dprobes/
18:16:52 <Igloo> Isn't that a kernel thing?
18:17:06 <Pseudonym> I think it has a kernel component, yes.
18:18:49 * Igloo was hoping not to have to mess about with anything that complex - I only want to know which thread is diverging
18:20:15 * Igloo finds http://www.opersys.com/LTT/, but that wants to mess about with the kernel too
18:22:44 <Igloo> Aha, stracing /proc/$PID/task/* might be the answer
18:25:18 <Igloo> Hmm. I'm sure strace shouldn't cause my program to break randomly
18:41:23 <Pseudonym> See, the problem here is that the Linux kernel doesn't have great support for this sort of thing yet.
18:41:38 <Pseudonym> Linus is a quirky guy, and he only gets patches accepted if you play by his rules.
18:41:48 <Pseudonym> Which is fine.  His tree, his say.
18:42:08 <Pseudonym> But he's less interested in this sort of thing than in other things.
18:42:45 <Igloo> What OSes are better?
18:42:54 <Pseudonym> In this respect?>
18:43:00 <Pseudonym> Solaris is pretty good.
18:43:21 <Pseudonym> I wouldn't call it "better", but it certainly has better support for this sort of thing.
18:44:39 <Igloo> OK, ta
18:45:59 <Pseudonym> One of the things you can do in Solaris is attach to a running process and get a stack dump for all threads.
18:46:07 <Pseudonym> Without interrupting the process.
18:46:13 <Pseudonym> Very handy for diagnosing deadlocks.
18:47:17 <Pseudonym> Oooh, hang on.
18:47:25 <Pseudonym> You may be able to do it in linux, too.
18:47:58 <Pseudonym> ...and indeed you can, but you'd need to do some C programming.
18:48:01 <Pseudonym> "man ptrace"
18:48:30 <Igloo> Ah, cool, ta
18:48:44 * Igloo will look into it when I've fixed the new, somewhat bigger problem I've just created  :-)
18:48:59 <Pseudonym> You also may be able to use gdb to attach to a running task.
20:06:38 <blackdog> is there a way to speed up linking? I'm already using -O0, but that only helps with compilation
20:06:43 <blackdog> with ghc, I mean.
20:29:26 <Cale> linking is taking a noticeable amount of time?
20:37:08 <blackdog> yep. doing ghc --make with all modules already compiled is taking 6s at least, and that's after killing half my processes to free up ram
20:43:55 <Cale> Must be a large project.
20:44:28 <Cale> but 6s isn't all that bad - how many times do you have to compile it?
20:45:07 <blackdog> No, that's the problem - it's tiny
20:45:46 <Cale> what sort of system are you doing the compiles on?
20:46:34 <blackdog> 291 lines of haskell, plus HUnit
20:46:40 <blackdog> a pII with 128 mb
20:49:54 <blackdog> i can live with it, i guess - it's just annoying. i'm trying to do the unit test thing, so i'm running the compiler after every tiny edit
20:51:48 <saba> maybe there's something like ccache but for ghc?
21:05:10 <stepcut> how do you convert tabs to spaces  in emacs?
21:17:16 <ozone> blackdog: you can rewrite GHC internals so it uses shared libraries
21:17:22 <ozone> that'll speed up linking ;)
21:17:42 <ozone> more serious suggestion: try using hs-plugins?
21:17:58 <ozone> you might be able to remove linking from the development cycle ...
21:23:36 <stepcut> hrm, what if you wrote a webserver that timed how long it took for you to actually down the page+images. Then based on those stats it served you pages with varing rates of image compression, etc to balance the load time vs quality to your connection -- I wonder if that has been done...
21:24:50 * stepcut goes away
21:29:26 <blackdog> ozone: i've actually been playing with that, but even building ghc on this poor little ... public convenience takes about a day.
21:29:56 <blackdog> </whinge, whinge, whinge>
21:30:29 <ozone> you can use my work machine, if you like :)
21:30:46 <ozone> (or the machines at uni, for that matter ...)
21:31:35 <blackdog> yeah, then i have to be online all day...
21:31:54 <blackdog> (i know, i generally am anyway. but i like working on the train.)
21:58:47 <Cale> stepcut: if you find out how to convert tabs to spaces in emacs, let me know so that I can tell my employer, who is hacking on the same code as I am and uses emacs.
21:59:11 <Cale> It would be nice if there were never any tabs in the files :)
21:59:46 <Cale> I mean of course, doing this expansion by default.
22:20:21 <desrt> cale; that's a perl one-liner :P
22:20:54 <Cale> desrt: the point is not to have to run things on the source repeatedly
22:20:58 <Cale> it's also a vim one liner
22:21:10 <Cale> but vim has a setting so you don't have to type it
22:21:14 <Cale> :)
22:21:35 <desrt> hey
22:21:40 <desrt> i already know that vim is the perfect editor
22:21:44 <desrt> no convincing needed here :)
