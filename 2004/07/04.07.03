03:04:02 <tic_> Doesn't this Haskell example look overly complex? http://www.paulgraham.com/accgen.html
03:07:18 <sorrow> Why does it need IO?
03:08:11 <sorrow> doesn't "foo n = (n+)" fullfill that specification?
03:15:03 <ustenzel> b/c an inplace modification is implied.  that's their difference between "incremented by" and "added to".
03:24:32 <maihem> so the code must force that any other use of the original n will have to take a copy, rather than the result of the second function being a copy?
03:25:35 <maihem> Is there any time that this would be necessary? And is there a better way to indicate this to the compiler?
03:25:55 <ustenzel> the idea seems to be that repeatedly incrementing delivers ever increasing values
03:26:47 <ustenzel> this example is crafted to require mutable state, in practice there will usually be a "more functional" way to achieve the same thing.
03:28:21 <maihem> Oh, so the requirement is that a reference to a "register" is held, and an effect on that register is visible through other references?
03:28:36 <ustenzel> i think so.
03:29:09 <ustenzel> or what else could be the difference between "incremented" and "added"?
03:30:50 <maihem> well, I think some of the examples missed the point then. I'm not so hot on Scheme, but I'm sure arguments are evaluated before the function they are arguments to, so the set! doesn't affect the applier.
03:31:16 <maihem> Indeed, the C++ example allows it
03:32:18 <ustenzel> the scheme example does the same thing as the haskell example.
03:33:09 <ustenzel> create a "register", then return a closure that, when applied to an integer, increments the register and returns its new contents.
03:34:47 <maihem> Then  the register? or use it the next time the function that takes the increment
03:34:55 <maihem> oops, ignore that :)
03:35:10 <maihem> I pressed return instead of backspace :D
03:36:24 <ustenzel> it's still a silly example
03:36:56 <ustenzel> if we needed such an accumulator, we'd use a state monad and say "modify (+i)"
03:39:15 <shrimpx> it was designed for imperative languages with closures :)
03:39:21 <shrimpx> like ruby
03:39:39 <shrimpx> funny that there's no ML example
05:32:48 <shapr> good morning #haskell!
05:33:15 <Heffalump> ugh.
05:33:39 <shapr> Heffalump: not a good morning?
05:33:50 <Heffalump> it's not morning :_p
05:33:52 <Heffalump> s/_/-/
05:34:09 <shapr> I just woke up.
05:34:12 <shapr> so it must be morning!
05:34:13 <norpan> good morning
05:34:28 <norpan> it's most certainly morning somewhere
05:43:25 <shapr> I just switched from a 5400rpm 2mb cache drive to a 7200rpm 8mb cache drive, the speed difference is obvious
05:44:56 <Lukhas> indeed
05:45:12 <Lukhas> i feel it, being currently on a 5400 2MB drive
05:45:21 <Lukhas> even my cd writer has more cache :)
05:45:37 <esap> Hmm.. there is a function 'f' such that 'iterate f f' is valid [f = \x -> x . x]; I'm wondering why \f -> iterate f f   gives an occurs check? :-) Could it not infer that automatically?
05:48:05 <Lukhas> shapr: be a total geek, install hddtemp, and check your disk temp :-)
05:49:00 <shapr> ahem, I've had hddtemp installed for months.
05:49:05 <Lukhas> hehe
05:49:22 <shapr> I also have the smartd as well
05:49:33 <Lukhas> good
05:51:43 <Heffalump> esap: it's to do with how type checking works
05:52:06 <Heffalump> the f is locally bound, so has to get the same type in both occurrences
05:52:38 <Heffalump> think about what type \f -> iterate f f would have to have, otherwise
05:52:41 <Heffalump> (it'd be rank 2)
05:52:45 <esap> hmm.. I just realized \f -> iterate f f has type (forall c. (c -> c) -> c -> c) -> [(c -> c) -> c -> c], so it's universally quantified type, which might be it.
05:54:00 * esap is trying to understand self-application.
05:54:51 <Heffalump> with -fglasgow-exts, you should be able to write \f -> iterate f f if you give it an explicit type
05:55:12 <esap> yes, I can.
05:57:42 <maihem> (let f = \x -> x . x in f a b) does what ?
05:58:06 <esap> apply a twice to b.
05:58:17 <maihem> a $ a b?
05:58:29 <esap> yes
05:58:47 <maihem> okay, thanks
06:06:27 * esap just deduced that: \x -> x x :: (forall c. c -> c) -> d -> d
06:09:58 <norpan> you did, did you
06:10:55 <esap> hmm.. unfortunately, this is not the only type for it.
06:10:59 <norpan> sounds about right
06:11:24 <esap> It also has type (forall c. (c -> c) -> c -> c) -> (d -> d) -> d -> d, for example.
06:11:38 <andersca> norpan: is it the knower
06:11:56 <norpan> va tramsig du Ã¤r andersca 
06:11:56 <esap> Which is not compatible with the previous one [strange, huh?]
06:12:06 <andersca> :'(
06:13:31 <norpan> esap: not that strange, there is no most general type when you have these quantifications
06:14:03 <esap> I'm thinking maybe I can build a fixed point for these which would be the most general type...
06:15:37 <esap> Just a fixed point of a = a -> a I guess.
06:27:28 <shapr> hiya Marvin-- 
06:34:37 <Marvin--> ello
08:42:15 * shapr bounces quietly
08:45:04 <Igloo> Why quietly?
08:45:47 <shapr> everyone seems to be asleep
08:46:26 * ibid is coding a better predicate parser for grep-dctrl
08:46:56 * Lukhas is playing to FF 6
08:47:13 * Igloo has got gstreamer sort of workingish, but I'm not convinced I'm not relying on undefined dehaviour
08:49:51 <ibid> :)
08:50:26 * Marvin-- is playing with gdesklets
08:50:52 <ibid> you know what operator-precedence parsers should be outlawed
08:52:23 <ibid> there's supposed to be a comma somewhere in that sentence :)
08:54:03 <Lukhas> agreed, with a comma it's easier :)
08:54:30 <shapr> so, China is switching to IPv9
08:54:58 <ne1> there is v9?
08:55:03 <Lukhas> :)
08:55:18 <Marvin--> shapr: yep
10:08:34 * SamB realizes he can use parsec for disassembly
10:09:35 <stepcut> hehe
10:12:34 <stepcut> suck, my cell phone is about to run out of batteries!
10:12:36 <stepcut> :(
10:13:55 <stepcut> I guess that is a major downside of using your cell phone for net access :)
10:14:43 <ne1> Just several years ago we would s/cell phone/laptop/
10:15:20 <SamB> heh, well, at least laptops generally have cords, so you can run to an outlet ;-)
10:16:11 <SamB> assuming you have the cord on you, that is
10:17:32 <ne1> Next year we'll irc over our watches.
10:18:18 <ne1> which is precisely what all the spy movies in the 1950's predicated anyway :)
10:18:55 <SamB> they had IRC in spy movies?
10:19:36 <norpan> my cell phone have a cord
10:19:52 <norpan> how would you charge it otherwise?
10:20:18 <SamB> norpan: well, I'm not too familiar with cellphones, to tell the truth. I never much liked phones.
10:21:04 <norpan> also, i prefer the term "mobile phone" :)
10:21:17 <Cale> I found something out about the phone. If you don't answer it, it will stop ringing. :)
10:21:25 <norpan> yeah
10:21:38 <norpan> actually it will stop ringing even if you do answer it
10:22:30 <norpan> so we can prove that it will always stop ringing
10:23:49 <Riastradh> I pine for phone booths all over the place, and I have a great desire for a device that, when pointed at a cell phone & activated, causes the cell phone to explode dramatically, preferrably untracably.
10:24:02 <Smerdyakov> norpan, only if do-you-answer-it is decidable!
10:24:29 <SamB> also, what if the caller is trying to prove you wrong?
10:24:31 <norpan> only if i do answer it or if i don't answer it
10:25:10 <norpan> i like my mobile phone
10:25:30 <norpan> it even has built-in fm radio
10:26:20 <Riastradh> And if the person was driving while talking on a cell phone, the car should spew up into the air, explode dramatically, and land somewhere not obstructing traffic.
10:26:38 <Lukhas> like a river
10:27:12 <Riastradh> No, that would be gross for the river.  I'm thinking something like a McDonalds'.
10:27:20 <Lukhas> hehe
10:27:21 <Riastradh> Kill _three_ birds with one little device!
10:33:28 <esap> Hmm.. weird: (id >>= (+)) 10  ==> 20  where is the copying?
10:34:35 * esap suspects instance of Monad for ((->) a) :-)
10:38:03 * SyntaxLaptop hands esap a >>
10:43:16 <esap> even more weird: ((+1) >>= (+)) 10 ==> 21
10:46:50 <Marvin--> esap: probably because  m >>= f = \t -> f (m t) t
10:46:56 <esap> exactly.
10:47:46 <esap> but you can write lots of nice stuff with that: (id >>= (+) >>= (*)) 10 ==> 200
10:49:10 <Marvin--> heh
10:51:05 <SyntaxLaptop> Oo
10:56:53 <esap> how about this: (const 15 >>= (+) >>= (*)) 10 ==> 250 
10:57:49 <Marvin--> cute
10:59:05 <esap> Definitely the weirdest way to compute (15+10)*10 I've seen...
10:59:27 <SyntaxLaptop> no wonder Haskell gets such a bad rap
10:59:45 <Marvin--> SyntaxLaptop: spoilsport :(
11:00:42 <SyntaxLaptop> hehe
11:07:53 <Marvin--> let's see, this is equivalent with foldl (>>=) (const 15) [(+),(*)] 10
11:08:22 <Marvin--> and it's also equivalent to foldr ($) 15 [(*10),(+10)]
11:08:40 * esap was just playing with sequence [id,id] 10 ==> [10,10]
11:11:15 <esap> also: sequence [id,(+1),id,id] 10 ==> [10,11,10,10]
11:23:04 <Cale> join (\x y -> f x y) = (\x -> f x x)
11:25:17 <Cale> hehe, sequence = swing map
12:29:37 <Lemmih> How many parts of a second is a pico second?
12:30:26 <norpan> lambdawar: pico is 10^-12
12:30:43 <norpan> Lemmih i mean
12:32:08 <andersca> norpan: can't you spell?
12:32:27 <norpan> andersca: can't you shut up?
12:32:38 <andersca> norpan: I think it's pretty clear that I can not
12:32:51 <norpan> so it would seem
13:18:28 <SamB> how I long for nice, sane, zero-based arrays...
13:22:14 <ne1> http://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html
13:37:32 <SamB> hmm. well, my reading that doesn't do much towards getting zero-based arrays in the stdlib
13:57:52 <stepcut> grr!
13:59:06 <Lemmih> Indeed.
14:00:55 <stepcut> It is most unfortunate, that I can not do this:
14:01:06 <stepcut> mapM_ (print . read) [ show (Just "hi") , show 1 , show (Left 3)]
14:02:05 <ibid> why would you want to read an IO action?
14:02:32 <SamB> ibid: you know what he means!
14:03:01 <stepcut> what IO action ?
14:03:05 <ibid> no i don't
14:03:29 <ibid> i'm forced to try abstract-execution in my head, that's too complex for me to grasp at a glance
14:03:52 <SamB> what is the mapM_ there for, anyway?
14:04:23 <stepcut> to map ( print . read ) over a list of strings
14:04:28 <andersca> stepcut: perhaps you want (read >>= print) instead
14:04:35 <andersca> or whatever :)
14:04:47 <ibid> stepcut: show (Just "hi"), but i think i forget how mapM_ works
14:04:48 <stepcut> no
14:05:13 <stepcut> andersca: read :: a -> String
14:05:17 <andersca> yeah
14:05:21 <SamB> oh, right. print is IO, yeah. gotcha.
14:05:41 <stepcut> the problem with my code is that it can't determine with instance of read to use
14:06:30 <SamB> stepcut: well, the alternative would be to try them all at runtime, and what would happen if multiple of them succeeded, anyway?
14:06:48 <SamB> also, "all of them" is ugly.
14:06:53 <stepcut> SamB: agreeded
14:07:02 <stepcut> rr, agreed
14:07:58 <stepcut> what I really want to do is take a few different data types, write them to a file, and then read them back out. But the read code won't know what order they where written in
14:08:16 <stepcut> So, when it writes to disk, it should include, no only the value, but also the data type
14:09:02 <stepcut> something like this:
14:09:47 <stepcut> writeDynamicList [ toDyn (Just 1), toDyn "hi", toDyn (Left 1.0) ]
14:10:47 <stepcut> but, as far as I can tell, haskell has no way to serialize dynamics
14:11:27 <Marvin--> I'm having a hard time seeing how it could
14:11:48 <stepcut> Marvin--: clean can, but it's a bit wacky
14:12:11 <stepcut> Marvin--: clean can serialize not only data, but even partially evaluate functions :)
14:12:30 <Marvin--> hmm
14:14:17 <Cale> Why not just wrap them in some other data type, with constructors for each type that you want to record? Derive an instance of read/show, and you're done.
14:15:03 <Cale> where does something like this come up anyway?
14:15:46 <stepcut> Cale: I could, but it won't quite solve my problem
14:16:23 <Cale> What exactly are you trying to do?
14:16:25 <stepcut> lets say I create a module Fruit, with a data type data Fruit = Apple | Pear | Peach deriving (Read, Show)
14:16:40 <stepcut> and another module Cat, with data Cat = Jane | Alice | Nek0 (Show, Read)
14:17:18 <stepcut> then I can also create a 3rd module, WrapData, that has a data type --> data WrapData = Fruit Fruit | Cat Cat deriving (Read, Show)
14:17:27 <stepcut> (so this is basically what you have suggested)
14:17:32 <Cale> yeah
14:18:09 <stepcut> This works fine, except, I want to make Cat and Fruit be part of a precompiled library which i install in /usr/lib/ghc6.2/import (or where that is)
14:19:23 <stepcut> *then* I want to write a program that uses that library *and* adds a new type: data Car = Ford | Chevy | Porsche deriving (Read, Show)
14:19:56 <Cale> the wrapper type will be part of whoever is doing the writing
14:20:06 <stepcut> but in order to add that to the WrapData, I need to recompile WrapData
14:20:18 <Cale> don't put WrapData in the library then
14:20:36 <Cale> or make a second wrapdata that includes the first, and also Car
14:20:43 <stepcut> but what if I want to call 'saveWrapData' from the Cat or Fruit module ?
14:21:32 <Cale> then you can take my second suggestion still :)
14:24:19 <stepcut> well, I am currently working on writing out why I don't like that suggestion either
14:24:30 <Cale> It's up to the program which is doing the IO how to serialise. If it wants to make use of other serialisation routines as part of its work, that's okay, but it has to at least know how to handle the stuff that it has added, and to recognise when the external serialisation stuff needs to get used.
14:25:42 <Cale> You also don't have to even use the default read/show if you don't want to.
14:26:13 <Cale> but it will be more work
14:27:12 <stepcut> they whole problem I was trying to solve was having to write a sepecial serializer for each program that handles the data types it cares about
14:27:40 <stepcut> I want the program to have a function 'dispatch' function, that reads a value in, and then calls a handler for it
14:28:11 <stepcut> there would be a class Handler a where handler :: a -> IO ()
14:28:39 <stepcut> so, I could just say -> getNextAction >>= handler
14:29:23 <stepcut> I can do this now, if I write a special getNextAction function for each program, but....
14:30:09 <stepcut> i don't want to :)
14:33:28 <stepcut> I really want some functions like:  "Dynamic -> Maybe String" and "String -> Maybe Dynamic" 
14:35:18 <stepcut> well, even that is not quite it
14:36:18 <stepcut> I want some way to decide which class instance to call at runtime, rather than compile time. 
14:36:43 <stepcut> a little non-determinism never hurt anyone...
14:37:34 <Riastradh> It can already be done.
14:37:41 <Riastradh> Indeed, it already _has_ to be done with fundeps.
14:38:13 <stepcut> Riastradh: oh?
14:38:49 * stepcut gets the paper
17:37:49 <Riastradh> Cale, any implementation or ideas for a practical purpose of a graph monad?
17:38:16 <Riastradh> I may actually want to use something like this, combined with the nondeterminism monad.
17:38:37 <Cale> oh? :)
17:39:34 <Riastradh> I'm not entirely sure, though.  I do know that I'm going to be doing nondeterministic graph reductions.
17:40:21 <Riastradh> ...purely functionally.
17:40:46 <Riastradh> (in Scheme, though, not Haskell)
17:43:01 <Riastradh> So do you have any new ideas on the matter of the graph monad?
17:45:37 <Cale> Well, I'm sure that it's a monad. The implementation, we have some freedom. I started to implement it there - implementing join is entirely doable but annoying, as it involves messing around with the vertex incides.
17:45:49 <Cale> You could get other sorts of monads from graphs as well, I'm sure
17:45:56 <Riastradh> Of course.
17:48:19 <Riastradh> (What I'm writing right now is something like a conditional dependency analyzer, only the dependencies aren't graph structures; the graph is used [semi-nondeterministically] to decide which set of conditional dependencies to select.)
17:49:11 <Cale> oh, that sounds very much like what I'm going
17:49:14 <Cale> doing*
17:49:20 <Riastradh> Really?
17:49:23 <Cale> Yeah
17:49:56 <Riastradh> What more specifically are you doing?
17:50:38 <Cale> We have a declarative assembly language for our scheduler, where you are allowed to provide multiple implementations of the same result, which are assumed to be semantically equivalent (a prover will be added at some point)
17:51:05 <Riastradh> Indeed, that's quite a lot like what I'm doing, but at a completely different level.
17:51:47 <Riastradh> I'm designing & implementing a module system based on a configuration language.
17:51:55 <Cale> the list monad is infinitely handy for this :)
17:51:59 <Riastradh> Indeed.
17:52:32 <Riastradh> I was at first using a basic AMB operator, but I've since decided to use a nondeterminism monad based on Filinski's reflect & reify operators.
17:53:57 <Riastradh> Hmmm.
17:56:55 <Riastradh> I probably ought to stop writing code and think about this more mathematically first.  This project is a lot more interesting than I initially thought it would be.
17:57:51 <Riastradh> (At first I expected to just throw together a basic processor in a short period of time and have it work perfectly by the end of today.)
17:59:35 <Cale> I found that putting myself in front of a whiteboard, and actually doing an entire example by hand really made it more obvious how to proceed.
18:00:06 <Riastradh> I don't have a whiteboard, but white paper & pencil is satisfactory.
18:00:10 <Cale> :)
18:08:17 <Riastradh> It's a little harder to come up with an example to toy with here.
18:09:21 <Riastradh> There are a lot of factors to convolute into a single example...
19:36:07 <SamB> hmm, I wish parsec's SourcePos didn't assume a textual source file...
20:16:38 <stepcut> i wonder if it is possible to write an instance of Read for TypeRep -- i suspect it is not, or they would have...
20:18:30 <dons> I don't see why not.
20:19:15 <dons> maybe there is something sneaky going on.
20:19:23 <stepcut> i think there is actually...
20:19:52 <stepcut> data TypeRep = TypeRep !Key TyCon [TypeRep] 
20:20:17 <stepcut> !Key is filled in with a value that comes from genSym
20:21:09 <stepcut> So, I think if you wrote TypeRep out to a file, and then tried to read it in later, the Key would not be meaningful
20:21:15 <dons> so read would have to generate new keys 
20:21:51 <stepcut> possibily, I am still investigating
20:33:10 <SyntaxLaptop> hi jemfinch
20:33:43 <jemfinch> howdy, SyntaxLaptop.
20:33:47 * jemfinch can't get to sleep.
20:33:56 <Riastradh> Try a sledgehammer.
20:34:09 <Spark> reach for the prescriptions
20:34:09 <jemfinch> Riastradh: when all you've got is a hammer...
20:34:29 <Riastradh> Opiate overdose works pretty well, too, to knock you right out.
20:34:32 * jemfinch is re-reading arcsug.txt.
20:35:37 <Spark> i have to say my drugs experiences so far have been overwhelmingly positive
20:36:11 <Riastradh> My favourite drug is oxygen.
20:36:59 <Spark> its addictive that one
20:37:07 <Spark> you can become dependent upon it
20:37:12 <Riastradh> Very dependent.
20:37:23 <Riastradh> And it makes you feel really great when you get pure doses of it.
20:37:48 <Spark> heh
20:37:52 <jemfinch> it induces euphoria.
20:38:02 <jemfinch> much like NO2.
20:38:05 <Spark> i heard there were coffee bars selling piped pure oxygen to businessmen in London
20:38:09 <Spark> not sure if thats true
20:38:26 <Riastradh> NO2 is the second-best drug.
20:39:10 <Spark> goddamn sunday tommorow
20:39:16 <Spark> sunday is the worst drug
20:39:51 * jemfinch loves Sunday.
20:40:34 <Spark> its alright until you're unemployed
20:40:38 <Spark> then its just annoying that nowhere is open
20:40:44 <jemfinch> heh
20:40:54 <jemfinch> churches are open :)
20:41:03 <jemfinch> (and many might be hiring)
20:41:04 <Spark> heh i wonder if any churches have wifi
20:41:29 <Spark> im supposed to be working for a defence contractor, but their HR department is so incompetent they havent organised it yet
20:42:24 * jemfinch is going to apply at Panera soon.
20:44:21 <Spark> mm
20:45:22 <Spark> if you look upwards and sneeze, its amazing how long it takes before the stuff lands on your face
20:45:37 <Riastradh> Pure oxygen is also a great way to discourage smoking, if stored in a compressed canister with a mechanism to spray it in a directed stream.
20:45:53 <Riastradh> Or, if not discourage smoking, get smokers pissed off at you.
20:45:57 <Riastradh> Which is fun anyways.
20:47:02 <Spark> its interesting how defensive they get
20:47:07 <Spark> "this isnt doing me any harm"
20:47:11 <jemfinch> Spark: sneezes usually move in excess of 74 miles per hour.
20:47:24 <jemfinch> (i.e., faster than hurricane-force winds)
20:47:33 <Spark> thats breaking the law here
20:47:35 <Spark> excellent
20:47:41 <Riastradh> They don't count getting their eyebrows seared off by the combination of oxygen & cigarette as 'harm?'
20:48:06 <Spark> does a flame appear at the end of the fag?
20:48:15 <Spark> rapidly burning the whole lot
20:48:24 <Riastradh> It appears wherever there's combusting material.
20:53:03 <Spark> theres combustible material here and theres no flame :)
20:53:11 <Spark> ah you said combusting
20:53:12 <Riastradh> Combust_ing_.
20:53:13 <Spark> fair play
20:53:35 <Spark> Module /usr/src/modules/nvidia-kernel failed.
20:53:35 <Spark> Hit return to Continue?
20:53:40 <Spark> i hate myself and i want to die
20:53:55 <Riastradh> jemfinch, unfortunately, that's 74 miles per hour for a very short moment; air resistance rather inhibits it.
20:54:23 <Riastradh> It would be cool if sneezes could sustain that rate for longer.
20:54:45 <jemfinch> Riastradh: I guess that depends on one's definition of "cool"
20:54:57 <jemfinch> personally, I'd be rather non-plussed by these enduring sneezes.
20:55:05 <Riastradh> Allergies would have useful purpose!
20:57:17 <Spark> maybe this is the secret to interstellar space travel
20:57:25 <Riastradh> Indeed.
20:58:05 <Riastradh> The visor could open momentarily during a sneeze, short enough for it to be unharmful yet long enough to forcefully eject sneeze.
20:58:41 <Riastradh> Although it might take quite a bit of sneeze before a sufficient mass has been ejected.
20:59:14 <Spark> all we need is mass enhancing technology
21:42:05 <lambdawar> hey
21:42:12 <lambdawar> anyone part of the church project ?
21:49:58 * stepcut studies Typeable.hs
