01:47:09 <shapr> yow!
01:47:28 <lelit> yawn!
01:47:36 <Lemmih> yay!
01:48:04 <shapr> good morning #haskell!
02:04:03 * Lemmih rants about the Cabal TODO list.
02:06:20 <shapr> what about the list?
02:06:25 <shapr> you want to do some of the items?
02:07:42 <Lemmih> I think it's a bit too vague.
02:08:01 <sazzle> the Cabal?
02:11:51 <Lemmih> I've got the time to hack on it but I don't wanna make any design decisions.
02:16:10 <juhp> completely OT, but I finally managed to get xwem to work for me today :-)
02:18:04 <juhp> it is pretty cool though
02:18:48 <Lemmih> What's xwem?
02:26:46 <shapr> http://www.nongnu.org/xwem/ ?
02:31:24 <juhp> Lemmih: XEmacs Window Manager
02:31:46 <juhp> http://www.nongnu.org/xwem/
02:31:58 <juhp> oops
02:32:16 <juhp> missed what shapr said
02:37:48 <Lemmih> Hmm. No ebuild nor Debian package.
02:38:07 <juhp> Lemmih: it is in xemacs-sumo
02:43:42 <lelit> +ux-win
02:47:41 <shapr> god morgon bringert 
02:50:53 <bourbaki> hi
02:51:17 <bringert> morning shapr
02:51:46 <Lemmih> Hello bourbaki
02:52:43 <shapr> wassup?
02:52:46 <shapr> bringert: still working on GF?
02:54:37 <bourbaki> nothing really :)
02:55:36 <shapr> I was just thinking about a gentoo-style distro based on darcs...
02:56:25 <bringert> shapr: yeah. The latest thing I did was to modify bnfc to generate more efficient haskell pretty printers, dropped GF's memory use by 60% for some operations
02:56:54 <shapr> nifty!
02:57:23 <bringert> that reminds me, need to check that in
02:58:15 <shapr> darcs for GF? ;-)
02:58:52 <bringert> :)
02:58:57 <bringert> no, still CVS
02:59:09 <shapr> I wonder if a gentoo-style source-only distro could benefit from darcs. You'd only need to pull the latest patches from the official repos, right?
02:59:38 <shapr> and, since patches are never changed, they'd be easily web-cached.
03:01:09 <shapr> and a release would be where you run darcs get --partial on all the repos :-)
03:03:56 <norpan> how does gentoo work now?
03:06:29 <Lemmih> Via rsync iirc.
03:34:54 <Lemmih> When will GADTs be implemented in GHC?
03:36:06 <shapr> I got the impression that they're in Simon's tree, but not in the anon cvs yet.
03:53:23 <mattam> shapr: that is a wonderful idea, but reliance on a Haskell program requires lobying in the gentoo crowd
03:54:50 * shapr shrugs
03:54:55 <shapr> just a crazy idea
04:17:49 <Igloo> blackdog?
04:18:05 <Igloo> shapr: GADTs went into a CVS branch a couple of days ago
04:20:44 <shapr> oh
04:23:34 * Lemmih updates his CVS tree.
04:27:49 <Lemmih>                  
04:28:31 <Lemmih> Ops. Sorry. Dropped my wireless kbd /-:
05:16:42 <shapr> yeeehaaa
05:17:40 <Lemmih> eh?
05:18:00 <shapr> unicycling == fun
05:18:11 <norpan> it sure is
05:18:18 <norpan> although i haven't done that for like ten years
05:18:58 <aleator_> how does one unicycle while ircing?
05:19:09 <norpan> i suppose one doesn't
05:19:14 <shapr> haven't tried that yet.
05:19:28 <shapr> I doubt I could type much while unicycling
05:19:36 * shapr thinks about it
05:19:38 <aleator_> :) so that was post-cycling yeehaa.
05:19:48 <Lemmih> Hovering laptop with wireless network connection?
05:19:55 <shapr> actually, I could type on a one-hand keyboard while unicycling
05:20:03 <shapr> but I'd have to mount it under the seat I think
05:20:58 <shapr> my new seat has a good sized handle on the front so you can hang onto the unicycle while dropping off stuff, and while jumping up onto things.
05:22:11 <shapr> I can't drop more than a coupla handspans without falling off though
05:23:11 <shapr> I was thinking of writing a unicycling game :-)
05:24:08 <shapr> with two joysticks you could control a simplified unicycle simulator
05:24:14 <thebug> in the vein of mr. toad's wild ride?
05:24:59 <shapr> I was thinking of different levels, starting with the moon, then working up to higher gravity
05:25:46 <shapr> I don't remember how mr. toad's wild ride worked
05:25:55 <shapr> wasn't it just a rollercoaster sort of thing?
05:26:14 <thebug> :)
05:26:25 <thebug> sort of, yeah
05:26:53 <shapr> mountain unicycling on the moon would be *awesome*
05:27:06 <thebug> using craters as jump ramps :)
05:27:10 <shapr> yah!
05:27:32 <thebug> so ... shapr's wild unicycle moon ride <written in haskell, of course>
05:28:06 <shapr> of course!
05:28:55 <shapr> well, the moon would be the tutorial stage
05:29:02 <shapr> then you work up to higher gravities
05:30:00 <thebug> shapr's wild unicycle white dwarf ride would be the highest level
05:30:10 <shapr> scary thought :-)
05:30:28 <thebug> 'hey! I stayed up for .000000001 sec. this time! a new record!'
05:30:37 <thebug> ;)
05:30:52 <shapr> part of the fun of unicycling is choosing different wheel and crank sizes, so I think that would be a fun feature.
05:31:25 <thebug> that's the 'Customize Y0ur R1D3!' feature
05:31:26 <shapr> I figured I'd leave out the occasional testicle squish
05:32:07 <shapr> no one wants that feature anyway.
05:32:35 <thebug> take it out of RL too, while you're at it
05:33:00 * shapr wishes
05:34:53 <shapr> best thing you can do is buy a really nice seat.
05:36:47 <shapr> man, this Mono discussion on lwn.net is vicious
05:37:08 <bringert> a program compiled with ghc 6.2.1 and profiling segfaults, but the same program with the same input but without profiling doesn't. could it be anything other than a ghc bug?
05:37:14 * shapr is tempted to chime in with Haskell
05:38:30 <shapr> could it be part of the app is still linking with non-prof code?
05:38:33 <norpan> bringert: are you sure you've compiled all files with profiling?
05:39:59 <bringert> pretty sure, I used ghc --make, and is said "Compiling" for all the files (i.e. no "Skipping")
05:40:07 <bringert> s/is/it/
05:41:06 <bringert> the program (it's GF btw) starts, then after a few seconds of processing, it segfaults
05:41:18 <bringert> guess I need to fire up gdb
05:42:28 <Igloo> shapr: Hey, I want a stunts+tricks mode too!
05:42:51 <Igloo> I'm sure you could do all sorts of unicycle aerobatics in lunar gravity
05:43:11 <shapr> well, crank and pedal grabs would be pretty easy to put in
05:43:12 <thebug> shapr hawk pro unicycling
05:43:16 * shapr laughs
05:43:54 <thebug> you need online battle-unicycle-bot and deathmatch modes too ;)
05:44:12 <Igloo> bringert: If you link with -debug then you get additional debugging options - see +RTS -?
05:44:50 <Igloo> I can't remember if that gives you an RTS itself compiled for RTS debugging, though
05:45:32 <shapr> unicycle basketball is a common sport at unicons
05:47:07 <shapr> I have to ask, is there such a thing as a strictly typed language?
05:47:36 <shapr> I strongly suspect this person is confused about statically typed.
05:48:24 <bringert> quick googling: http://www.informatik.fernuni-hagen.de/import/pi8/papers/res/WideraBeierle2000-SFP99.abstract.html
05:48:41 <bringert> disclaimer: I don't understand the abstract
05:49:38 <shapr> I think strict typing there means that you reject a program that you can't prove type-correct.
05:49:51 <bringert> Igloo:  cannot find -lHSrts_debug_p
05:50:24 <Igloo> bringert: Ah, you'd have to compile it yourself then
05:50:59 <bringert> the debug rts?
05:51:13 <Igloo> The debugging+profiling RTS
05:51:47 <Igloo> GhcRTSWays += debug_p   in mk/build.mk should do it if you have a tree around
05:54:13 <bringert> ok, will try that
05:55:04 <bringert> should that be mk/config.mk?
05:56:07 <bringert> hmm, mk/config.mk says to make local changes in build.mk, but there is no build.mk
05:56:17 <bringert> using ghc-6.2.1 sources btw
05:57:16 <Igloo> Just create one
05:58:10 <bringert> is there a way to just build that lib? seeing how it takes quite a while to build all of ghc.
06:00:46 <Igloo> make -C ghc boot stage=1; make -C ghc all stage=1    or similar would cut the time dramatically. You probably can make just that lib, but I don't know how OTTOMH
06:01:03 <Igloo> You might need to do similar boot/all with glafputils or something first
06:03:51 <bringert> trying...
06:05:59 <shapr> hiya wferi 
06:06:15 <wferi> shapr: Hi there!
06:06:26 <shapr> how's code?
06:06:37 <wferi> :)
06:06:48 <wferi> No code, just too tired to work.
06:07:15 <wferi> I was reading 'haskell quotes' on the wiki.
06:07:29 <wferi> thought have a look myself...
06:08:16 <shapr> excellent quotes on that page
06:08:34 <wferi> quite some of you!
06:39:41 <blackdog> Igloo: ships in the night?
06:40:07 <Igloo> :-)
06:40:41 <blackdog> I didn't quite understand what you were proposing for the deb... care to break it down into small words and short sentences for a poor tech-support drone?
06:41:31 <Igloo> Heh
06:41:45 <Igloo> The package installs package.conf.clean and no pakage.conf
06:42:35 <Igloo> At some point (either when ghc-pkg is run without a --config-file argument or in the ghc6 postinst if that would work) package.conf.clean gets copied to package.conf
06:42:56 <Igloo> Err, but only if it doesn't exist
06:43:06 <blackdog> the ghc6 package installs package.conf.clean?
06:43:10 <Igloo> Yes
06:43:57 <Igloo> Why do you not run the install scripts, OOI?
06:44:18 <Igloo> And does the above make sense to you?
06:45:09 <blackdog> we've got this whole distro built on top of debian, based on which files ought to be on each machine. It's pretty powerful and very convenient: we can verify that each machine has exactly what it ought to have each night without having to reimage it
06:45:34 <blackdog> post-install scripts mess with that a bit: we have to render them into something that our tools understand
06:46:44 <blackdog> Yeah, I think I understand it: i just suspect it doesn't help us much...
06:47:54 <Igloo> Oh, and by internal state, I meant it should only be modified by calling ghc-pkg, not by hand
06:48:12 <Igloo> So I really don't want dpkg prompting people to merge their changes when they upgrade or anything...
06:49:39 <blackdog> How do you handle packages when you upgrade ghc, then?
06:50:10 <bringert> Igloo: ok, that worked, I could link with -debug
06:50:15 <Igloo> If the GHC version changes then the path to package.conf changes
06:50:19 <SyntaxNinja> woowoo
06:50:23 <Igloo> So you get a new one from the .clean
06:50:34 <Igloo> If it doesn't then the old packages.conf file should be fine
06:51:19 <blackdog> so packages have to be upgraded in lockstep with ghc?
06:55:22 <Igloo> Only with upstream releases
06:55:33 <bringert> Igloo: any tips as to which debugging flags to use?
06:55:40 <Igloo> bringert: No, sorry
06:56:36 <Marvin--> SyntaxNinja: did you apply the parseFilePath/parseLicense/parseExtension patches?
06:57:13 * shapr burbles
06:57:30 <SyntaxNinja> Marvin--: I think I applied all patches, pushing them now
06:57:39 <SyntaxNinja> too bad I didn't push last night :(
06:58:01 <SyntaxNinja> hihi shapr
06:58:14 <blackdog> Igloo: ... sorry, don't understand. If I have wxhaskell installed, then upgrade ghc, do i need to grab a new version of wxhaskell again, or is it clever enough to run ghc-pkg again?
06:58:42 <SyntaxNinja> I have an alias called "nap" which is just "apm -s" but I think I'm going to make it do more, like run locate, backup my machine, and maybe check to see if my archives are pushed... then I'll call it "night" or something
06:58:47 <Igloo> upgrade ghc from what to what?
06:59:03 <blackdog> anyway, we're going to have to simulate running ghc-pkg anyway... can't run it on every lab machine in CSE every night for every haskell package.
06:59:28 <shapr> hiya SyntaxNinja 
06:59:43 <blackdog> um. minor release? 6.2 to 6.2.1, perhaps?
07:00:27 <Igloo> Then you need a new version of wxhaskell. This is nothing to do with package.conf, the compiled wxhaskell is incompatible with the ghc
07:00:58 <Igloo> So dependencies would mean it got upgraded or uninstalled
07:01:33 <SyntaxNinja> shapr: how's hack
07:03:49 <blackdog> ok, fair enough.  easiest way in the end might be to just write a little script to convert ghc-pkg commands to our format. thanks for all your help.
07:04:18 <blackdog> *remembering my manners* g'day shapr, g'day syntax
07:04:44 <sazzle> blackdog: wxhaskell is going to be installed on cse boxes?
07:04:51 <SyntaxNinja> hihi blackdog!
07:04:53 * sazzle had so much fun getting that working today
07:04:58 <SyntaxNinja> blackdog: you coming to the US this summer?
07:05:00 <SyntaxNinja> (is anyone?)
07:05:26 <SyntaxNinja> I can offer couch space in Ohio, but I'm not sure that helps (hint, it's no where near snowbird Utah)
07:07:36 <bringert> is there a way to get debugging symbols that gdb understands in to a ghc-compiled binary?
07:07:36 <blackdog> sazzle: yep. been struggling with it all day...
07:07:41 <SyntaxNinja> Marvin--: I agree with your email about using the Main file name rather than the module name.
07:07:53 <bringert> hmm, that's probably useless anyway
07:08:00 <blackdog> sazzle: ghc6.0 and wxhaskell-0.6 have been there since March.
07:08:09 <sazzle> blackdog: ah, i hadn't noticed
07:08:15 * SyntaxNinja wishes there were no bug with using --make and --main-is in the same GHC run, since that's such an obvious thing to do and stuff
07:08:16 <sazzle> blackdog: i spent a whole day getting it done on my box
07:08:31 <sazzle> blackdog: once ghc is there, and wxwindows is there, it shouldn't be too bad
07:08:46 <blackdog> SyntaxNinja: I wish. got to get published before they send me anywhere now... we're in the middle of budget cuts anyway. i'm losing my loading. :(
07:09:02 <blackdog> sazzle: no one appreciates SS.
07:09:28 <sazzle> blackdog: oh, i do, i don't run linux on my home boxes for a reason
07:09:43 <SyntaxNinja> blackdog: :(
07:10:00 <bringert> anyone know how to debug possible ghc rts bugs?
07:10:20 * Igloo does some currency conversion and decides it isn't worth spending 7 quid to save 20p on a couple of bus tickets
07:10:53 <sazzle> blackdog: do you use deb packages with conform?
07:11:38 <Marvin--> SyntaxNinja: do you want to change the parser, or should I? (I've got some pending changes anyway, like Igloo's suggestion of a License-file field)
07:12:25 <SyntaxNinja> Marvin--: I say you can go for it, I bet you can do it faster than  me.
07:12:57 <Marvin--> meh, I hate triplets, I think I'll change that to a data Executable instead
07:13:36 <bourbaki> hidiho
07:14:30 <SyntaxNinja> Marvin--: :)
07:15:00 <Igloo> bringert: If you add -optc-g -optc-O0 to WAY_debug_p_HC_OPTS and rebuild it you might get enough symbols for what you want
07:15:08 <SyntaxNinja> one thing I always think about when hacking in other lanaguages is how much I wish I had tuples... like, suddenly, you want your function to return 2 things instead of one. that's far too big a change in C++.
07:15:56 <SyntaxNinja> btw, Marvin-- you should take a look at my change to check for ~/.ghc-packages. basically, the function that returns the package file location (built from the USEr variable) now returns a tuple which indicates whether the file exists.
07:16:09 <SyntaxNinja> GHC.localPackageConfig or something
07:16:17 <Marvin--> will do
07:16:18 <bringert> Igloo: is WAY_debug_p_HC_OPTS an environment variable?
07:16:23 <SyntaxNinja> the idea there is that I thought creating the package violated the principal of least surprise
07:16:43 <SyntaxNinja> but I kinda wanted to use the type system to enforce a check for whether the package exists, every time you use it
07:16:48 <SyntaxNinja> so I thought this was an OK solution, if a little odd.
07:16:48 <Igloo> bringert: It's defined in config.mk. You should be able to append to it in build.mk though
07:17:12 <bringert> hehe, rebuild half of ghc again then
07:17:24 <bringert> maybe I'll do this profiling stuff some other day
07:17:55 <Igloo> The alternative is to make a small test case and send it off to SM, of course  :-)
07:19:47 <bringert> does 32023 lines of haskell code count as small? :P
07:20:25 <Igloo> Well, it's smaller than GHC at least  :-)
07:25:32 <shapr> how many lines is GHC?
07:26:04 <shapr> SyntaxNinja: trying to fix the I18NCatalog in Plone's I18NArchetypes... 
07:26:07 <shapr> g'day blackdog 
07:27:02 <blackdog> sazzle: sorry, weird connectivity probs. Yeah, we use debs wherever we can get 'em. 
07:28:04 <blackdog> g'day shapr
07:28:32 <Igloo> $ find . \( -name "*.hs" -o -name "*.lhs" \) -print0 | xargs -0 wc -l | grep total
07:28:35 <Igloo>  150959 total
07:28:41 <Igloo> in just ghc, not libraries etc
07:29:00 <shapr> yow
07:29:24 <shapr> @yow
07:29:24 <lambdabot> The FALAFEL SANDWICH lands on my HEAD and I become a VEGETARIAN...
07:29:39 <norpan> that is 150k source code?
07:30:07 <Igloo> lines of source code, yes
07:30:17 <norpan> oh, lines
07:30:37 <Igloo> Plus however much there is in other files, like .c, minus anything that isn't really part of GHC's source but lives in that directory
07:31:15 <norpan> we only have 55k lines of haskell here at work
07:31:27 <norpan> and that's still a lot
07:32:40 <shapr> for what?
07:34:31 <SyntaxNinja> shapr: funfun
07:34:58 <bourbaki> hi Cale_ :)
07:49:17 <bourbaki> can anyone explain a cone of a functor to me?
07:49:33 <SyntaxNinja> curses: Loading package Wash_Utils ... linking ... /tmp/lib/Wash_Utils-0.3.10/HSWash_Utils-0.3.10.o: unknown symbol `__stginit_Directory_'\
07:49:47 <SyntaxNinja> (and ghc panics)
07:49:57 <bourbaki> wash utils ;)
07:51:16 <bourbaki> esap you there?
07:51:34 <Marvin--> SyntaxNinja: eh? That looks like the .hi file is broken, doesn't it?
07:52:46 <SyntaxNinja> Marvin--: why's that? 
07:52:54 <Igloo> Do you depend on package base? I have a feeling you have to
07:53:06 <Igloo> Or haskell98 for that, maybe
07:54:22 <SyntaxNinja> I probably just screwed up the install... hang on
07:54:26 <Marvin--> isn't the .hi file what's used for resolving dependencies when loading .o files in ghci?
07:54:46 <ozone> Marvin--: i think so, except for packages
07:55:52 <Marvin--> and what's up with __stginit_Directory_? Is this the Directory from System.Directory or is it some Wash thingy?
07:56:06 <Igloo> That's a linking error, presumably caused by it not trying to load a necessary object file
07:56:20 <Igloo> It'll be Directory from the Haskell 98 definition
07:56:44 <SyntaxNinja> I swear this was working yesterday ;)
07:56:54 <Marvin--> hm, you actually have to depend on base?
07:57:11 <SyntaxNinja> I tried adding base and haskell98 as depends, but that doesn't fix...
07:57:15 <Marvin--> Igloo: oh, there's a Directory in H98? I didn't know *blush*
07:57:26 <SyntaxNinja> actually, now I get a different error...
07:57:37 <SyntaxNinja> same error, different symbol: SHA1Final
07:57:49 <Igloo> What did you change?
07:58:16 <SyntaxNinja> when I added depends on base and haskell98
07:58:17 <Igloo> If you added a dep then you're missing another one
07:58:24 <Marvin--> duhh :)
07:58:42 <Igloo> Probably a WASH one
07:59:38 <SyntaxNinja> yeah, it's a wash one
07:59:44 <SyntaxNinja> probably has to do w/ compiling C code...
07:59:55 <bourbaki> hi TheHunter :)
08:00:00 <TheHunter> hi, bourbaki 
08:00:05 <bourbaki> TheHunter got a sec for me?
08:00:09 <TheHunter> sure
08:00:36 <bourbaki> TheHunter are you familiar with a cone of a functor?
08:01:21 <TheHunter> i've heard the word cone before...
08:01:52 <bourbaki> TheHunter limit in CT?
08:02:03 <Marvin--> snow cones!
08:02:07 <SyntaxNinja> I guess I should worry about why it doesn't work instead of trying to figure out why it did work yesterday
08:02:21 <bourbaki> i think that the limits are generalizations over cones
08:02:42 <TheHunter> iirc, limits are universal cones
08:02:47 <Igloo> You might need to do something like the cbits stuff done in GHC's libraries?
08:03:01 <bourbaki> TheHunter ah yes that was what i meant
08:03:06 <Igloo> Is it possible yesterday you were linking with files in . rather than in an installed package?
08:03:17 <bourbaki> TheHunter can you give me a good example for a limit?
08:03:51 <TheHunter> bourbaki, the canonical example would be a product
08:04:18 <bourbaki> well ok i dont see how and why though
08:04:47 <bourbaki> you have some functor F and an object that you map from to that functor
08:05:10 <bourbaki> with two projections and then you have a map between the two functors
08:05:17 <bourbaki> thats what the cone over the functor is
08:05:28 <SyntaxNinja> Igloo: I see the problem. the code that creates the archive doesn't actually include the object files produced from the C files. I blame jaffacake
08:06:46 <TheHunter> bourbaki, hold on a sec
08:07:05 <Igloo> :-)
08:08:22 <bourbaki> TheHunter k
08:09:38 <SyntaxNinja> need to add a test case for that.
08:09:45 <Marvin--> where *is* JaffaCake anyway?
08:10:00 <Marvin--> did he get tired of being asked too many dumb questions? :)
08:10:21 <SyntaxNinja> hehe probably
08:19:01 <SyntaxNinja> i really need to refactor buildGhcCommandLine
08:20:45 <SyntaxNinja> does anyone have a splitExt function that splits the filename and extension into a tuple: splitExt :: FilePath -> (String, String)
08:21:26 <TheHunter> bourbaki, OK, if we want to construct a product in the category C, we start with the discrete category J:={1,2}. Our Functor F: J -> C is a pair of two objects F1 = a, F2 = b. The Limit for F is a universal arrow from the diagonal functor delta: C -> C^J
08:22:32 <TheHunter> bourbaki, So in our case we need to consider the cones which are natuarl transformtions c -.> F
08:23:17 <TheHunter> these are the pairs of arrows from an element c of C to our objects a and b
08:23:21 <bourbaki> TheHunter so c consists of letters?
08:23:32 <bourbaki> a and b
08:23:49 <TheHunter> C can be anything, think of it e.g. as sets
08:24:09 <TheHunter> then a and b are sets
08:24:25 <bourbaki> ok
08:25:36 <bourbaki> ok i still dont get it though :)
08:27:07 <TheHunter> if we call the product a x b then the universal property reads "for each pair of arrors p': c -> a and q': c -> b, we can find an arrow h: a x b -> c, such that p' . h = p and q' . h = q", where p and q are the projections from a x b
08:28:11 <bourbaki> ok
08:28:24 <SyntaxNinja> nm about splitExt
08:28:27 <bourbaki> so the limit is a thing that maps to products
08:28:33 <bourbaki> pushouts and so?
08:29:10 <TheHunter> a limit is a quite general beast
08:29:55 <TheHunter> i'm sorry, my h points into the wrong direction
08:29:56 <bourbaki> well you need it for topos
08:30:14 * shapr writes point-free python
08:30:33 <TheHunter> it's h: c -> a x b, and p' = p . h, q' = q . h
08:31:01 * shapr bounces cheerfully
08:31:08 <bourbaki> TheHunter just the usual cat product that is right?
08:32:12 <TheHunter> that's the usual product, but if you take another J, you can get things like powers, pullbacks, equalizers
08:32:12 <blackdog> surely you're joking, mr erisson.
08:32:30 <blackdog> does python have composition?
08:32:48 <bourbaki> yeah i have read that though i just dont know how you can show that there is a limit for every functor
08:33:12 <bourbaki> also i dont know that the element is you start with is it F?
08:33:47 <TheHunter> limits don't need to exist for every functor
08:34:05 <bourbaki> in case you want to have a topo yes
08:34:06 * shapr cheers happily
08:34:20 <bourbaki> and this has some properties that are interesting for my program things
08:34:28 <bourbaki> like the catesian closedness
08:34:39 * shapr swears viciously
08:34:51 <bourbaki> and the fact that there are always pull and pushbacks and so on
08:34:52 * blackdog verbs adverbly
08:35:18 <blackdog> adjectively, i suppose. if we're following strict rules of construction.
08:35:58 <shapr> I thought I'd fixed this thingy...
08:37:48 <bourbaki> are there some image processing libs for haskell?
08:37:55 <shapr> yes, Pan and friends
08:38:10 <shapr> pan friends == PanTHeon and Pancito
08:38:36 <shapr> PanTHeon requires the Template Haskell in ghc 6.3+, so you probably don't want that one
08:38:39 <bourbaki> i guess one can write some cool recognition stuff in haskell
08:38:51 <shapr> doh, I've forgotten how to write Python :-/
08:39:03 * shapr smacks himself to wakefulness
08:39:13 <bourbaki> i think i might write some filter system with monads :)
08:40:37 <Marvin--> man, I'm *such* a fanboy
08:40:46 * Marvin-- is reading the "complete" background story for the Warcraft games
08:40:54 <shapr> oy
08:41:00 <shapr> Marvin--: write your own :-P
08:41:10 <bourbaki> warcraft games?
08:41:11 <shapr> Warcraft that is
08:41:22 <shapr> can't be much harder than SpiffyProve
08:41:59 <bourbaki> that rtsg?
08:42:56 <Marvin--> bourbaki: the series of rts games, yes
08:43:30 <bourbaki> and you read the postmortems?
08:43:53 <thebug> no, there's a backstory to the games
08:44:08 <bourbaki> you you are talking about novels?
08:44:14 <ozone> are they as crappy as the games?
08:45:23 <bourbaki> well though i hate rts games i think that all blizzard games are master pieces
08:45:37 <bourbaki> with a perfect design and a really good balanceing
08:45:56 <ozone> bleh
08:46:01 <ozone> blizzard games are very, very well polished
08:46:27 <ozone> but as far as actual gameplay goes, they're so completely dead-boring and not innovative
08:46:46 <bourbaki> sure but there are no innovations in games these days anyways
08:46:46 <shapr> yah, that's true
08:47:00 <shapr> Dark Reign had better gameplay than any RTS I've played since.
08:47:03 <bourbaki> its too dareing to so that
08:47:17 <bourbaki> i would like to build some new kind of games
08:47:17 <ozone> shapr: sheesh man, that's got to be one of the worst RTSs :)
08:47:24 <shapr> no way Dark Reign was the best.
08:47:37 <bourbaki> rts games are too stressfull
08:47:42 <ozone> dark "lemme bombard you from 3/4 of the way across the map and that'll be the entire game thanks" reign
08:47:44 <shapr> the numpad order customization was sooo powerful
08:47:52 <bourbaki> you would need to be able to craft your own strategies
08:47:56 <thebug> Total Annihilation :)
08:48:03 <bourbaki> like patters over a field
08:48:04 <SyntaxNinja> sweet! I got c source building and libraries to work
08:48:08 <shapr> you could dramatically change the behaviour of your units with Dark Reign
08:48:32 <shapr> it had three separate scales that you could set hi,med,lo for each unit
08:48:43 <ozone> thebug: yeah, let's take two sides, make them exactly the freaking same but call them different things
08:48:50 <thebug> hehe
08:49:00 * SyntaxNinja pushes and goes to lunch &
08:49:09 <shapr> autorepair, pursuit, and attack initiative
08:49:10 <thebug> C&C has horribly unbalanced ... always play Nod or the Sovients and you're golden
08:49:12 <bourbaki> i think it was cool if you could script in game
08:49:21 <shapr> Nod?
08:49:21 <bourbaki> and script behavor of units in game
08:49:24 <ozone> thebug: pfft
08:49:33 <thebug> shapr: from the original C&C, not red alert+
08:49:39 <shapr> haven't played it...
08:50:03 <shapr> I would like to script my units.
08:50:05 <ozone> i think mayhap i'm a bit more heavy into RTSs than you guys, so maybe i'll stop ranting
08:50:06 <bourbaki> why is there no cool game written in haskell?
08:50:19 <thebug> I got bored with RTS a while ago ...
08:50:27 <bourbaki> adventrues!!!
08:50:29 <thebug> after StarCraft, there wasn't anything good
08:50:30 <monotonom> Because there is no cool game written in haskell.
08:50:31 <bourbaki> where have they gone?
08:50:40 <thebug> eh, morrowind is an excellent time sink :)
08:50:46 <monotonom> I am serious.  There is some vicious cycle going on.
08:50:48 <bourbaki> i play nwn alot
08:50:59 <ozone> bourbaki: haskell is a bit too slow right now, i would think
08:51:03 <ozone> (haskell implementations, rather)
08:51:13 <ozone> thebug: now that, i agree with
08:51:25 <ozone> shapr: you should buy a copy of alpha centauri for linux
08:51:27 <bourbaki> i dont care about speed
08:51:29 <ozone> i think you'll like it
08:51:39 <shapr> I like Dominions II
08:51:42 <thebug> frozen bubble is excellent as well
08:51:44 <shapr> I played the demo into the ground
08:51:46 <ozone> though you might not get anything done if you buy it ;)
08:51:53 <bourbaki> yes though FB is perl :)
08:51:58 <thebug> or just get out the original Bust A Move
08:52:06 <shapr> I'd like to play Dominions with others, but I doubt I'd get any work done.
08:52:17 <shapr> I love freeciv
08:52:21 <shapr> nuke the opponents!
08:52:25 <ozone> bourbaki: you want to write a game and you don't care about speed?  hope the game isn't very graphically intense :)
08:52:48 <ozone> shapr: alpha centauri is so far, far beyond any of the civilisations (including civ 3)
08:52:58 <ozone> and there's a linux version, which should make you very happy
08:53:00 <monotonom> I get nuked in freeciv.
08:53:20 <shapr> ozone: that does sound nice
08:53:28 <bourbaki> ozone good games dont need speed
08:53:36 <ozone> seriously, best civ-style strategy game ever made
08:53:43 <monotonom> Actually not even nuked.  A few middle-age soldiers are sufficient to exterminate me.
08:53:51 <ozone> i am still an awe of how deep it is, and i've been playing it for 7 years
08:54:05 <shapr> that's a nice recommendation.
08:54:07 <ozone> or, since it came out (maybe 1998, so ~6 years)
08:54:09 <shapr> have you tried Dominions II?
08:54:33 <shapr> it's a really fun civ-style game
08:54:49 <shapr> I like the spider knights
08:54:56 <ozone> no, reading about it now
08:55:28 <shapr> Ulm is fun too
08:55:28 <ozone> looks good.  now i'll have to find a copy of it in australia
08:55:36 <shapr> the demo is free, and worth trying
08:55:56 <ozone> ok, will grab the demo.  thanks for the heads-up
08:56:17 <ozone> oooo, mac os x version.  eevil
08:56:17 <bourbaki> incredible machine was a cool game
08:56:19 <shapr> if you get a copy, I may buy one so I can play against you :-)
08:56:41 <ozone> sounds good to me
08:56:54 <ozone> go buy a copy of alpha so i can play with you
08:57:03 <ozone> and then seafood can join in, and i can whip all your newbie asses
08:57:07 * shapr laughs
08:57:20 <shapr> actually, I'm still trying to save up for a four way opteron...
08:57:40 <shapr> yah right...
08:57:41 <thebug> hah
08:57:56 <shapr> locate dom2demo
08:58:04 <shapr> whoops
08:58:10 <shapr> aha
08:58:20 <ozone> bad shae
08:58:30 <thebug> getting some work done, I see shapr
08:58:37 <bourbaki> mindrover is also a funny game
08:58:38 <thebug> ;)
08:59:19 <bourbaki> TheHunter what other interesting properties do topos have that i might exploit?
09:00:32 <ozone> hmm
09:00:44 <ozone> in fact, think i'll call up seafood tomorrow night and get him to come over to play alpha
09:00:56 <thebug> hmm a lan party
09:01:06 <thebug> that's not a bad idea ... 
09:01:08 <ozone> complete with potato chips!
09:01:11 <TheHunter> bourbaki, i don't know anything about topos
09:01:18 <thebug> indeed, mustn't forget the chips
09:01:30 <ozone> alpha centauri vs working out how polymorphic dynamic types work
09:01:34 <ozone> i think i'll pick the former. :}
09:01:42 <bourbaki> TheHunter do you happen to know that an object with an exponent is?
09:01:57 <thebug> we've been horribly hooked on UT2K4 since the demo came out :)
09:02:03 <bourbaki> how can i construct a function with no parameters?
09:02:46 <TheHunter> bourbaki, not really
09:03:20 <bourbaki> TheHunter these topos seem to be interesting in logics btw fyi
09:04:27 <TheHunter> i think they are things quite similar to sets
09:05:22 <bourbaki> well they are cats with 2 properties all functors have a limit and all objects have an exponent
09:07:36 <TheHunter> the exponent c^b is in set hom(b, c), for example
09:08:16 <TheHunter> s/set/Set/
09:09:10 <TheHunter> anyway, i've got to clean up my place
09:09:20 <bourbaki> ok thanks and good luck :)
09:09:45 <TheHunter> thanks, i'll need that
09:09:52 <bourbaki> heh :)
09:10:12 <TheHunter> see ya
09:10:28 <bourbaki> bye
09:14:46 <bourbaki> is there a random number generator in haskell?
09:14:58 <Igloo> Yes - see the Random module
09:15:01 <Igloo> Or System.Random
09:15:13 <bourbaki> is there an oline refference thingy for haskell?
09:15:21 <bourbaki> like the hyperspec
09:15:34 <Igloo> The GHC docs page has one
09:15:38 <bourbaki> ah ok
09:21:20 <bourbaki> how can you make a function that has no parameters?
09:23:16 <edwinb> Do you mean, for example, how can you make a random number generator which takes no parameters?
09:24:01 <bourbaki> yes
09:24:12 <bourbaki> i want to write a random name generator
09:24:22 <edwinb> Tricky... because you have to know what the last one was to get the next one.
09:24:37 <SamB> you can't do that purely...
09:25:03 <edwinb> So you either need some kind of global state, or to pass it a seed.
09:25:08 <SamB> that is, not without parameters
09:25:29 <bourbaki> hm
09:25:33 <Marvin--> bourbaki: You can't. Period.
09:25:34 <SamB> or a monad
09:25:34 <bourbaki> why is that?
09:25:49 <Marvin--> You can make something that vaguely resembles a function, but it won't be a function.
09:26:16 <SamB> because of the definition of "pure"
09:27:44 <SamB> so, basicly, what is your application? are you already using a monad?
09:27:58 <bourbaki> nope
09:28:28 <Marvin--> you could do something ugly using linear implicit parameters
09:28:30 <SamB> well, you could probably hijack QuickCheck ;-)
09:28:46 <bourbaki> heh
09:28:53 <Marvin--> QuickCheck's Gen monad is nice
09:30:20 <bourbaki> hm but why arent there functions with no parameters?
09:30:38 <bourbaki> i mean in lisp you have (i think at least thats the name) closures
09:30:51 <edwinb> You can have functions with no parameters, but they'll always give you the same value...
09:31:15 <SamB> those are exactly the same as expressions ;-)
09:31:23 <bourbaki> right :)
09:32:14 <SamB> so, if you use monads, the nullary monadic functions can be passed around and used over and over ;-)
09:32:31 <SamB> also, fully-applied monadic functions
09:33:53 <bourbaki> hm
09:35:02 <bourbaki> that makes that kind of things quite ugly
09:35:12 <SamB> what do you mean?
09:35:48 <bourbaki> i mean what i want is something like (generatename)
09:36:01 <bourbaki> but what i have to do is something like (generatename foobar)
09:36:22 <bourbaki> where foobar has no use at all
09:38:58 <Igloo> You want something like randomIO if you don't mind being in the IO Monad
09:39:22 <Igloo> Otherwise you'll need to pass either an infinite list of randoms or a random generator around
09:40:07 <Marvin--> bourbaki: Are you surprised? Surely you know what the mathematical concept of a function is?
09:40:17 <bourbaki> yes
09:40:25 <bourbaki> its not that surpriseing really
09:40:54 <bourbaki> though there might have been a way to express "closed" functions somehow
09:41:04 <bourbaki> that is somehow eval them
09:44:19 <TheHunter> bourbaki, http://www.haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html#LINEAR-IMPLICIT-PARAMETERS
09:47:58 <bourbaki> hmmm
09:48:13 <bourbaki> why doesnt that work?
09:48:14 <bourbaki> import System.Random
09:48:14 <bourbaki> rollDice :: IO Int
09:48:14 <bourbaki> rollDice = getStdRandom (randomR (1,6))
09:50:32 <Igloo> @type System.Random.getStdRandom (System.RandomrandomR (1,6))
09:50:33 <lambdabot> bzzt
09:50:40 <Igloo> @type System.Random.getStdRandom (System.Random.randomR (1,6))
09:50:41 <lambdabot> System.Random.getStdRandom (System.Random.randomR (1,6)) :: forall a.
09:50:41 <lambdabot> 							    (System.Random.Random a, Num a) =>
09:50:41 <lambdabot> 							    IO a
09:51:05 <Igloo> Why do you think it doesn't work?
09:51:41 <bourbaki> because there is no system.random.random ?:)
09:52:09 <Igloo> Haskell is case sensitive
09:52:11 <Igloo> It works for me
09:52:35 <bourbaki> ? really you can run that thing?
09:55:08 <bourbaki> it tells me that the variables are not in scope namely getStdRandom and randomR
09:55:22 <bourbaki> do i have to install the module?
09:57:38 <monotonom> import Random
10:00:12 <bourbaki> erm strange *reddens* guess im too dumb for my editor ;)
10:21:39 <bour> bk
10:29:19 <boubaki> can i get the Int from an IO Int somehow?
10:29:30 <Marvin--> *argh* :)
10:29:35 <boubaki> heh
10:29:48 <Marvin--> http://haskell.org/hawiki/ThatAnnoyingIoType
10:29:54 <boubaki> haha
10:35:54 <stepcut> join #arch
10:36:38 <Igloo> No thanks, I'm happy with darcs
10:56:13 <wagle> did something happen to citeseer?
10:56:36 <stepcut> Igloo: :p
10:56:47 <Igloo> http://citeseer.ist.psu.edu/ at least exists for me
10:57:22 <stepcut> is there a good haskell library for dealing with command-line arguements?
10:58:27 <wagle> finally found it..  all the addresses i could find were stale
10:58:35 <wagle> (urls)
11:01:23 <Marvin--> stepcut: System.Console.GetOpt is decent
11:05:33 <stepcut> hrm
11:29:14 <RussellOConnor> Sometimes I'm tempted to take that whole ThatAnnoyingIoType page and rewrite it.
11:32:37 <Riastradh> Do so, then.
11:32:52 <Marvin--> I agree, go ahead, it's a wiki, man
11:34:39 <RussellOConnor> Oh, okay then.  I'll write something up next time I'm bored.  It will be fun.
11:46:44 <Smerdyakov> I reconsider my life whenever I find that I'm bored.
12:30:29 <SyntaxNinja> so does anyone want to write a slightly more general version of this:
12:30:34 <SyntaxNinja> alias cabal-install="ghc -package Cabal Setup.lhs -o setup && ./setup configure && ./setup build && ./setup install --user"
12:31:10 <SyntaxNinja> basically, if they pass --user to cabal-install, I want it to say "./setup configure --prefix=~/" and "./setup install --user".  If they don't use the --user flag, that's fine :)
12:33:11 <Igloo> Just ~/? Not ~/.cabal or something?
12:33:34 <SyntaxNinja> well, I have ~/usr
12:33:45 <SyntaxNinja> I don' tknow that we want it to be a hidden file
12:33:56 <Igloo> I don't think I want ~/usr
12:34:01 <SyntaxNinja> maybe ~/haskell-libs
12:34:25 <stepcut> SyntaxNinja: is there a good Makefile I should use as a template if I want to make my library into a cabal package ?
12:38:52 * stepcut ponders
12:38:54 <SyntaxNinja> stepcut: you mean to use the Distribution.Make stuff?
12:39:44 <stepcut> do I even need a Makefile ?
12:40:14 <stepcut> or do I just right a Setup.decription, and then do ./setup build
12:40:36 <SyntaxNinja> right!
12:40:38 <stepcut> nice!
12:40:41 <SyntaxNinja> that's the beauty part
12:40:43 <stepcut> I hate written Makefiles
12:40:52 <stepcut> s/written/writing/
12:41:04 <SyntaxNinja> fwiw, these WASH makefiles I"m replacing are like 60 lines long, being replaced by a Setup.description file that's < 10 lines long :)
12:41:25 <stepcut> yeah, I have worked with the WASH makefiles before -- not fun
12:41:50 <SyntaxNinja> what trouble did you have w/ them?
12:42:04 <SyntaxNinja> I'm not sure what to do about the configuration options that say "go edit the code"
12:42:09 <stepcut> I was trying to make them into packages in the pre-cabal days
12:42:36 <stepcut> is cabal debianized anywhere?
12:43:00 <SyntaxNinja> no, not yet. it's not even a tarball most of the time.
12:43:05 <SyntaxNinja> darcs get && make install
12:43:06 <stepcut> :p
12:43:10 <SyntaxNinja> but it'll be debianized, that's for sure
12:43:19 <Igloo> Ah, many the night we'll spend by the fireplace, recanting tales of packaging pre-cabal
12:43:28 <SyntaxNinja> or better yet, distributed w/ the compilers
12:43:32 <SyntaxNinja> Igloo: hehe
12:43:39 <stepcut> so, I can't exactly debianize a cabalized haskell library, since I can't build-depend on cabal yet ?
12:44:23 <SyntaxNinja> stepcut: right.
12:44:57 * SyntaxNinja wonders if the debian package should be called "cabal" or "haskell-cabal"
12:45:27 <Igloo> There's no cabal binary, right?
12:45:40 <Igloo> Hang on, what's in this cabal package?
12:45:46 <SyntaxNinja> hm. idono.
12:45:55 <stepcut> the cabal libraries I would think
12:45:57 <SyntaxNinja> maybe cabal-install for convinience
12:46:01 <SyntaxNinja> yeah, the Cabal package.
12:46:17 * SyntaxNinja thinks that a debian packaeg will be necessary until all the compilers have their next releases.
12:46:45 <Igloo> So Setup.lhs is in the library packages, but it (normally) uses libraries in teh cabal package?
12:46:54 <SyntaxNinja> ja
12:47:09 <Igloo> I need to start saying dpackage, hpackage and cpackage
12:47:19 <SyntaxNinja> heh
12:47:29 <SyntaxNinja> fwiw, I maybe will package cabal for work soon.
12:47:37 <SyntaxNinja> since we're working on making debs of wash
12:47:39 <Igloo> OK, I get it. Then it should be libcabal-ghc6 etc, no?
12:47:47 <SyntaxNinja> Igloo: I suppose...
12:48:00 * SyntaxNinja wants to own the "cabal" package in debian somehow.
12:48:04 <stepcut> ./setup build
12:48:04 <stepcut> Fail: FIXME
12:48:19 <Igloo> I saw someone complaining about libfoo-perl earlier, BTW, wishing it had the perl first, possibly without the lib, so I might ask some people some questions before we settle on a Haskell policy
12:48:30 <SyntaxNinja> yeah, please do :)
12:48:50 <Igloo> Syn: Do you mean you want to have a dpackage called cabal, or that you want to maintain whatever the cabal package is called?
12:49:32 <SyntaxNinja> both!!
12:49:34 <SyntaxNinja> but I meant the former
12:49:48 <Marvin--> well, the source package will be called cabal
12:49:54 <Marvin--> or possibly haskell-cabal
12:50:09 <Igloo> Also, any compiler-indep stuff would be in {haskell-,}cabal
12:50:12 <Marvin--> I think it should be haskell-cabal, since there's no haskell anywhere in cabal
12:50:21 <Igloo> I'm not sure if ftp-master would let "cabal" through or not
12:50:24 <SyntaxNinja> yeah, that's the real name "Haskell Cabal"
12:50:26 <Marvin--> anywhere in the string "cabal", that is :)
12:50:38 <SyntaxNinja> Igloo: yeah, but we all know why THAT is!
12:50:42 <Igloo> They probably oughtn't to be fair, as no-one would even want ot install it by name anyway I suspect
12:50:51 <Igloo> Hmm, or maybe they would
12:50:56 <Igloo> :-)
12:51:18 <Marvin--> I suspect lots of people would install a package called cabal, just to see what it'd do :P
12:51:57 <SyntaxNinja> hehe yeah.
12:52:57 <Marvin--> but I think haskell-cabal is to be preferred
12:53:09 <Marvin--> Igloo: and yes, I've seen the grumbles about libfoo-perl too
12:53:09 <SyntaxNinja> I can shout "the debian cabal is trying to put down the haskell cabal! down with FTP masters!"
12:53:20 <Marvin--> SyntaxNinja: then call for a GR!
12:53:38 <Marvin--> python's package naming policy is pretty sane
12:54:12 <SyntaxNinja> haha
12:54:32 <SyntaxNinja> I'll put the GR proposal in the package description, just to make it easy
12:54:41 * Marvin-- laughs
12:56:29 <Igloo> Marvin: Where?
12:57:13 <Marvin--> where?
12:57:24 <SyntaxNinja> what's the diff bt bsd3 and bsd4 license? does anyone know offhand which one WASH is?
12:57:38 <Igloo> < Marvin--> Igloo: and yes, I've seen the grumbles about libfoo-perl too
12:57:41 <Marvin--> Isn't BSD4 = BSD3 - icky advertising clause?
12:57:50 <Marvin--> Igloo: I don't recall where
12:57:51 <Igloo> No
12:57:58 <Igloo> BSD4 = BSD3 + icky advertising clause
12:58:04 <Marvin--> just that I've seen it
12:58:05 <Marvin--> oh, crud
12:58:16 * stepcut was just about to ask the diff betwenn BSD3 and BSD4
12:58:22 <stepcut> also,  MIT is not a choice yet...
12:58:48 <Igloo> BSD3 is /usr/share/common-licenses/BSD
12:59:00 <Igloo> If there is a 4 in the enumerated list then it's BSD4
12:59:33 <Igloo> Bah, no python policy exists
12:59:47 <Marvin--> Igloo: it's not official yet, google for it
12:59:59 <Igloo> OK
13:00:05 * Igloo wil do when I've finished food
13:00:49 <Marvin--> basically, the naming is python-foo packages should be version-independent (and if you're unsure, depend on python (>= X.Y), python (<X.Y+1), pythonX.Y-foo packages should depend on pythonX.Y, of course
13:01:19 <Marvin--> often, you've got python-foo as an empty package depending on pythonX.Y-foo and python (>= X.Y), python (<X.Y+1)
13:02:12 <Igloo> OK, ta
13:05:36 * Marvin-- idly wonders why nothing seems to happen when he runs echo 1 > /proc/acpi/sleep
13:17:59 <Igloo> Hmm, alex is looking like it's going to slip past 100th on the mips queue
13:18:29 <Igloo> I wonder how long a freeze Debian needs just to let mips catch up  :-)
13:19:24 <SyntaxNinja> very strange; when I construct the command-line "/usr/bin/ghc --make Main.hs -o testA" it complains that "-o testA" is an unrecognized flag
13:19:42 <SyntaxNinja> that's when the array field is ["-o testA"]
13:19:43 <Igloo> How are you constructing it?
13:19:58 <Igloo> "array field"?
13:20:15 <Marvin--> SyntaxNinja: uh, if this is executed with exec, it should be ["-o", "testA"]
13:20:15 <Igloo> The answer is you either need to do string splitting yourself or use a system function that does it for you
13:20:28 <SyntaxNinja> it's with the rawSystemExit function, which is basically rawSystem
13:20:49 <SyntaxNinja> hm. yeah, I split it into "-o ", "testA"  of coiurse I shoudl try it w/o the space
13:21:02 <SyntaxNinja> but the -package fields are constructed the way I did it, so I find that odd.
13:21:22 <Marvin--> hm
13:21:30 <Igloo> Can you say ghc -package=foo?
13:21:40 <SyntaxNinja> so making 'em separate, without the space works.
13:21:43 <Igloo> If so they're probably working because ghc splits them itself
13:21:46 * SyntaxNinja dosen't know why he left the space in
13:22:29 <Igloo> Ah, no, but you can say -packagebase
13:22:37 <Igloo> So ghc is being clever with -package
13:23:04 <Igloo> It would be nice if cabal didn't rely on that IMO
13:23:43 <Marvin--> -packagebase?!
13:23:45 <Marvin--> yuck!
13:23:51 <Marvin--> that's horrible
13:24:51 <Igloo> Yeah, hence I think it would be nice if things didn't rely on it working  :-)
13:25:35 <SyntaxNinja> yay! cabal builds binaries.
13:25:53 <Igloo> Gah! I think minstrel might have crashed and I just overwrote stderr before realising
13:28:34 <Igloo> Can haddock make manpages?
13:29:32 <Marvin--> Igloo: agreed
13:29:43 <Igloo> SyntaxNinja: Cool  :-)
13:29:51 <Marvin--> SyntaxNinja: make sure to fix that while you're hacking the ghc command line generation :)
13:33:10 * Igloo collects a policy reading list
13:34:14 <SyntaxNinja> already fixed
13:34:18 <SyntaxNinja> man. having a regression test suite is really nice.
13:34:25 <Igloo> SyntaxNinja++ # Da Man!
13:34:47 <SyntaxNinja> Marvin--: I pushed that along w/ your changes. thanks!
13:34:49 <SyntaxNinja> Igloo:  :)
13:34:50 <Igloo> I was thinking about strongly recommending a test program for each library in the policy
13:35:02 <Igloo> In a standard place
13:35:47 <SyntaxNinja> hm. why might we need --main-is?
13:35:58 <SyntaxNinja> oh, if Filename.hs doesn't contain module Main
13:35:59 <SyntaxNinja> hm.
13:36:39 <SyntaxNinja> does anyone know offhand if --make combined with --main-is is still broken?
13:37:38 <Igloo> http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=114920 is unlikely to be a problem for us given cpackage names would probably stay sane, right?
13:38:05 <Igloo> I didn't know it ever was  :-)
13:38:28 <Marvin--> Igloo: very unlikely, yes, since we don't typically package individual modules
13:39:50 <Igloo> Even if we did, I would expect Data/Set/MySet to be in cpackage myset, not data-set-myset
13:40:07 <Marvin--> exactly
13:40:21 <Marvin--> I was going to use System.Console.GetOpt as an example, with the same conclusion :)
13:41:00 <Igloo> Hmm, Is parsec going to be cabalised?
13:41:17 <Marvin--> dunno?
13:41:47 <Igloo> What else does cabal depend on?
13:42:05 <Marvin--> I thought the intention was to cabalize large parts of the hierlibs
13:42:09 <SyntaxNinja> Igloo: depends on if cabal depends on it, and whether anything that's meant to be distributed w/ the compilers depends on it
13:42:21 <SyntaxNinja> if cabal depends on it, then no it won't be cabalized.
13:42:29 <Igloo> OK
13:43:27 <Marvin--> seeing as Distribution.Version (which will become Data.Version in some incarnation, right?) uses parsec too...
13:43:49 <Marvin--> libbusiness-onlinepayment-bankofamerica-perl :-)
13:47:58 <Marvin--> hm, there is no base/Data/Version.hs in the fptools repo yet
13:48:02 <Marvin--> or maybe it's on some branch somewhere?
13:49:07 <Igloo> Why do you think there should be one?
13:50:10 <Marvin--> because I was under the impression that there would be a Data.Version module in the next release of ghc
13:50:40 <Igloo> Oh, OK. But won't it come from Cabal's Version module? And isn't that unfinished?
13:50:47 <SyntaxNinja> Marvin--: I'm guessing they'll wait for Cabal's to be finished
13:50:51 <SyntaxNinja> like Igloo said
13:50:56 <Marvin--> oh
13:51:21 <SyntaxNinja> I have no doubt that jaffacake will hack on it first, though :)
13:51:42 <Marvin--> hmm, according to my package.conf, the text package depends on parsec too
13:51:43 <Igloo> Oh, any news on allowing -s in cpackage names BTW?
13:52:10 <Marvin--> hmm, no, we haven't really discussed it
13:52:18 <Marvin--> I guess we should get some mails going on that
13:52:23 <SyntaxNinja> is -s the plural of -    ?
13:52:24 <Igloo> text is in hslibs
13:52:28 <SyntaxNinja> yeah, mail is the way to go
13:52:31 <Igloo> Yes
13:52:44 <Igloo> '-'s if you prefer
13:52:45 <Marvin--> Igloo: yes, will hslibs finally be gone in the next release?
13:52:48 * SyntaxNinja is torn, should ./setup clean remove Setup.o ?
13:52:57 <Igloo> Yes
13:53:20 <Igloo> Err, Yes to Syn that is
13:53:29 <Marvin--> gone as in "everything has been moved into the hierlibs" or as in "everything we want to move has been moved into the hierlibs"?
13:53:32 <Marvin--> oh
13:53:33 <Igloo> Marvin--: NAFAIK. I think I'm missing your point
13:53:56 <Marvin--> well, if the hslibs packages depend on parsec, I don't see the point of cabalizing parsec anyway
13:54:04 <Marvin--> at least until we're rid of the hslibs packages
13:54:17 <Marvin--> because I can't say I see any real value in cabalizing the hslibs packages
13:54:33 <Igloo> Well, cabalising the ones we want is the way to get rid of hslibs
13:54:37 <SyntaxNinja> I say we remove them one-by-one, but we need more than just cabal to make that a good idea, OMO, we need the whole infrastructure.
13:54:55 <SyntaxNinja> s/omo/imo
13:55:12 <Marvin--> another, perhaps more interesting, question is, *should* Data.Version (which will be in base, I assume) depend on parsec?
13:55:34 <Igloo> How complicated is it?
13:56:06 <Marvin--> there's a lot of old crud in Distribution.Version
13:56:18 <Igloo> I could write some very simple non-monadic PCs that would do it, I'm sure
13:56:30 <Marvin--> oh yes, so could I
13:57:06 <Marvin--> or we could use ReadP or ReadPrec like I wanted all along :P
13:57:12 <Marvin--> (with the added advantage that they are in base)
13:58:59 <Igloo> If it's easy to do it that way then it would be nice to drop the dep IMO
13:59:20 <Igloo> Hmm, although now I think about it, I think parsec is needed for bootstrapping ghc so one of the utils or GHC itself must use it
13:59:55 <Marvin--> hrmm
14:00:10 <Marvin--> well, those are paths I haven't trod
14:00:17 <Igloo> http://www.mail-archive.com/glasgow-haskell-bugs@haskell.org/msg06152.html
14:00:31 <Marvin--> (trodden?)
14:02:13 <SyntaxNinja> I will not object to someone getting rid of parsec alltogether in cabal, but be forewarned that I'm less familiar w/ ReadP or ReadPrec so I'll be more dependent on you.
14:03:12 <stepcut> ReadP is a pain...
14:03:15 <Igloo> I've never seen ReadP, but a simple PC lib with <|>, <$>, <*>, pSucceed, pFail would presumably suffice and is simple enough to work with
14:03:28 <Marvin--> stepcut: you think? I kinda like it
14:03:49 <stepcut> Marvin--: its ok for simple stuff, but it seems to be missing some useful stuff
14:03:56 <Igloo> And as long as the grammar is fluffy you don't need to worry about backtracking causing inefficiencies or where you need to stick trys in
14:03:59 <Marvin--> Igloo: where <$> is liftM and <*> is ... what?
14:04:06 <stepcut> like 'many' (i think)
14:04:55 <Marvin--> stepcut: yeah that's true, I always wonder why there weren't more friendly combinators in it
14:05:11 <stepcut> a few more combinators, and it would be nice
14:05:26 <Marvin--> but then, I often end up using Parsek, which uses similar techniques to ReadP and has almost as rich an API as Parsec
14:05:33 <Igloo> Parser a = String -> Maybe (a, String)       x <*> y = \s -> do (x', s') <- x s; (y', s'') <- y s'; return (x' y', s'')    or similar
14:05:44 <Marvin--> I might submit a patch
14:05:47 <Igloo> f <$> x = pSucceed f <*> x
14:06:06 <Igloo> And <|> is basically mplus
14:06:42 <Igloo> So if data Foo = Foo Bar Baz   pFoo = Foo <$> pBar <*> pBaz
14:07:08 <Marvin--> right, right
14:07:39 <Igloo> Except you'd want a bit more complexity for nice error messages
14:08:34 <Igloo> (you want to get the error message from the deepest point in the stream you got to)
14:08:54 <SyntaxNinja> I might just copy wash2hs into the test tree for cabal. it's flushing out a lot of things
14:09:02 <SyntaxNinja> and it doesn't seem to depend on anything
14:10:04 <Igloo> You'd need to do it differently to avoid backtracking being possible, but the things you're parsing are so small it wouldn't matter
14:10:18 <Igloo> wash2hs?
14:10:22 <SyntaxNinja> Igloo: so you think setup clean should delete Setup.o? should it delete itself?
14:10:28 <SyntaxNinja> it's some preprocessor, I don't know exactly what it's for.
14:10:42 <Igloo> Itself? Don't you really mean Setup.lhs?
14:11:04 <Igloo> Oh, but it'll be compiled if you are using nhc?
14:11:18 <Igloo> Can binaries delete themselves on win32? I suspect not
14:11:38 <Marvin--> Setup.o isn't the binary
14:11:54 <SyntaxNinja> Marvin--: no, I mean, should it delete setup, if it's there?
14:11:59 <Igloo> "should it delete itself?"
14:12:04 <Marvin--> oh
14:12:11 <Marvin--> I really should learn to read
14:12:13 <Igloo> huh? Hang on, what's setup?
14:12:16 <Marvin--> One Of These Days
14:12:25 * Igloo is losing the plot
14:13:11 <SyntaxNinja> ghc -package Setup.lhs -o setup
14:13:19 <Marvin--> -package cabal :)
14:13:21 <SyntaxNinja> I guess it shouldn't delete itself because it doesn't know what its name is
14:13:23 <SyntaxNinja> Marvin--: right!
14:13:35 <Marvin--> getProgName :)
14:14:03 <Igloo> OK, so compiling that was done by the user explicitly?
14:14:08 <Igloo> Not by the #! line?
14:14:39 <Marvin--> I wonder if someone will kick me in the head if I submit many/many1 implementations that are mutually recursive
14:15:05 <stepcut> :p
14:15:09 <Marvin--> many p = return [] +++ many1 p ; many1 p = liftM2 (:) p (many p)
14:15:44 <SyntaxNinja> Igloo: yeah, I think so, or by a wrapper tool like cabal-install that I posted earlier/
14:16:21 <Igloo> SyntaxNinja: Then don't delete yourself and you don't have to worry about Windows not coping
14:18:57 <SyntaxNinja> Igloo: yeah, I agree
14:25:43 * Marvin-- tries to figure out the difference between endBy and sepEndBy
14:26:42 <Marvin--> they seem pretty equivalent
14:37:10 <Igloo> Has anyone thought about how cabal->deb will work, BTW?
14:37:31 <Marvin--> http://www.mdstud.chalmers.se/~md9ms/ReadPCombinators.hs <- how does that look?
14:38:16 <Igloo> I've thought about it briefly, and I think the best thing to do would be to have one script that creates a skeleton package and another that shows you what differences there are to what it would have done
14:39:17 <Igloo> What does +++ do?
14:39:54 <Igloo> Shouldn't optional return a Maybe a?
14:41:00 <Igloo> And why does skipMany need fixing? Why isn't skipMany1 defined in a similar way?
14:41:30 <Marvin--> +++ is a truly commutative choice combinator
14:41:36 <Marvin--> (<++ is the left-biased version)
14:41:51 <Marvin--> and I stole many of the implementations from Parsec, including optional
14:42:20 <Igloo> Truly commutative?  liftM Left p +++ liftM Right p == liftM Right p +++ liftM Left p?
14:42:33 <Igloo> Oh, or are you returning a list of all possibilities?
14:43:20 <Marvin--> the only way to "run" a ReadP is to turn it into a ReadS
14:43:29 <Marvin--> so yes, there'll be a list of results
14:43:35 <Igloo> Aha, OK
14:44:31 <Igloo> Looks OK then, apart from type sigs
14:44:42 <Igloo> Although I didn't bother to read the big definitions at the bottom  :-)
14:45:05 <Marvin--> eh, many of them are stolen from Parsec.Combinator s:-)
14:45:30 <Marvin--> chainl and chainr are basically foldl and foldr
14:46:07 <Marvin--> oh, and the FIXME on skipMany is that - like in Parsec - I'm worried about stack behaviour
14:46:31 <Marvin--> many and skipMany are primitives in Parsec
14:47:40 * Marvin-- adds some type sigs to placate Igloo 
14:48:55 <Igloo> :-)
14:49:08 <Igloo> -Wall IYF
14:53:07 <Marvin--> stepcut: any comments?
15:05:41 <lmbdwr> hey guys
15:06:08 <Lemmih> Hey
15:06:10 <lmbdwr> anyone have access to 'SSA-based flow-sensitive type analysis: combining constant and type propagation' ?
15:07:47 <lmbdwr> I really need that stuff, and ACM decided to ask money for it 
15:07:49 <lmbdwr> please ;)
15:22:26 <cptchaos> is there a way to get an global IORef to somethik, that is created before execution of main, and in global scope? 
15:24:07 <Igloo> Look for global variables in the list archives (or on the wiki?)
15:24:17 <Marvin--> oh crud, I forgot that my gmail address isn't subscribed to the stupid haskell lists, so now my mail to libraries is held up in moderation
15:25:51 <cptchaos> ok, thanks
15:26:46 <Igloo> Does cpackage foo always create {hpackage foo or no hpackage at all}?
15:27:45 <Marvin--> uh, what do you mean?
15:27:52 <Marvin--> oh
15:27:57 <Marvin--> Yes, I think that's the intention
15:28:15 <Igloo> So the multi thing you were talking about is multiple libraries in a single hpackage?
15:29:33 <Marvin--> well, I *think* that what we were talking about was whether it made sense to have multiple hpackages in a cpackage, and decided that the answer was "probably not"
15:29:47 <Igloo> OK
15:29:56 <Igloo> ta
15:30:09 <Marvin--> and for the purpose of this discussion, library == hpackage, isn't it?
15:30:47 <Igloo> hpackage is what you give as an argument to ghc's -package flag
15:31:26 <Marvin--> come to think of it, the package.conf syntax kinda allows multiple libraries in a package, but for the existing packages it seems to be a 1:1 mapping
15:39:47 * Marvin-- wonders if he should cancel his posting and send it again after subscribing
15:39:56 <Igloo> Can you do that?
15:40:30 <Marvin--> yep
15:40:47 <Marvin--> "Either the message will get posted to the list, or you will receive notification of the moderator's decision.  If you would like to cancel this posting, please visit the following URL"
15:41:22 <Igloo> Oh, nice. May as well cancel+resend IMO, then
15:41:30 <Marvin--> yeah
15:48:15 <Marvin--> "System and method for encouraging viewers to watch television programs"
15:48:29 <Marvin--> interesting what kind of things are patentable these days
15:50:17 <Igloo> Someone's patented putting hot chicks in TV programs?
15:52:00 <Marvin--> the someone is Microsoft/WebTV and the example methods were "such as offering viewers frequent-flier miles for identifying the name of a sponsor or the color of an announcer's shirt."
15:55:58 * shapr loves unicycling
16:12:30 <Igloo> Bah, I hate buildds I can't log in to
16:48:51 <Igloo> Right, that settles it: http://lists.debian.org/debian-perl/2002/03/msg00001.html
16:49:10 <Igloo> I do like how Java has seemingly blindly copied the braindead historical accident, though  :-)
18:17:44 <bourbaki> hi
18:18:28 <pimpbot5000> what's up
18:18:57 <bourbaki> nothing much :)
18:19:15 <pimpbot5000> where are you from?
18:19:25 <bourbaki> germany
18:19:35 <pimpbot5000> cool, i'm from the US
18:19:44 <bourbaki> what state?
18:19:53 <pimpbot5000> indiana, but soon to be illinois
18:20:05 <pimpbot5000> i'm moving to chicago in august
18:20:08 <bourbaki> moveing due to work?
18:20:17 <pimpbot5000> yep, going to the U of Chicago
18:20:35 <bourbaki> as student ?
18:20:39 <pimpbot5000> phd student
18:20:46 <bourbaki> ah what field?
18:20:54 <pimpbot5000> computer science, of course :)
18:21:03 <pimpbot5000> programming languages research
18:21:06 <bourbaki> well i dont study CS
18:21:12 <bourbaki> and i am still in here :)
18:21:16 <pimpbot5000> yes, you're a mathematician right?
18:21:27 <bourbaki> nope cognitive scientist
18:21:40 <pimpbot5000> no shit?  that was one of my majors here at Indiana U
18:22:00 <bourbaki> cog sci?
18:22:03 <pimpbot5000> yep
18:22:12 <pimpbot5000> know who Doug Hofstadter is?
18:22:13 <bourbaki> i thought you studied CS?
18:22:19 <bourbaki> sure :)
18:22:19 <pimpbot5000> got 2 degrees
18:22:25 <bourbaki> oh cool
18:22:30 <pimpbot5000> he's in our CogSci department
18:22:37 <bourbaki> wowses
18:22:39 <pimpbot5000> got to talk with him once...was quite funny
18:22:50 <pimpbot5000> made a fool out of myself...but not too bad
18:23:08 <bourbaki> heh well when i have done my thesis you should give it to him :)
18:23:23 <bourbaki> what did you write your thesis on?
18:23:32 <pimpbot5000> you mean undergrad thesis?
18:23:41 <bourbaki> and master
18:24:02 <pimpbot5000> i didn't have to write a thesis as an undergrad.  but i'm working on a Haskell paper
18:24:24 <pimpbot5000> got rejected from the Haskell workshop...kinda controversial array computation stuff
18:24:27 <bourbaki> hm we have to write one
18:24:57 <bourbaki> though most of the ppl can choose from a couple of topics
18:25:05 <pimpbot5000> yea, i'll have to write a master's thesis before i can continue to the phd
18:25:17 <Riastradh> pimpbot5000, what was that controversy about?
18:25:44 <bourbaki> my idea is to write a cool bachelors thesis and then ask them if i can continue it for my master otherwise i will quit
18:25:45 <pimpbot5000> oh, well it was the way we implemented side-effects
18:26:00 <pimpbot5000> we don't use monads to guarantee single-threaded state
18:26:19 <pimpbot5000> bourbaki: what university?
18:26:30 <bourbaki> osnabrueck
18:26:44 <bourbaki> its one of two german cog sci unis here
18:26:49 <pimpbot5000> cool
18:26:54 <bourbaki> the one i am at is public the other is private
18:27:29 <pimpbot5000> I'm woefully ignorant of how the european schools work
18:27:49 <pimpbot5000> mostly because i haven't been outside the US yet
18:27:52 <bourbaki> well most of the unis are public
18:28:02 <pimpbot5000> cool
18:28:07 <bourbaki> you have to pay some small amount of money per semester
18:28:23 <bourbaki> to get access to the cafeteria and bus train and stuff like that
18:28:28 <pimpbot5000> weird, so all schools are state funded?
18:28:35 <bourbaki> but there are also private unis
18:28:50 <bourbaki> well most
18:28:51 <pimpbot5000> Riastradh: if you're interested in the topic, i'd be happy to discuss it further
18:29:09 <bourbaki> there are also private schools but its not so common as in the us
18:29:16 <pimpbot5000> heh, school costs everyone out the nose in the states
18:29:37 <bourbaki> there are some studies that are quite overrun here
18:29:53 <bourbaki> like law medicine and such
18:29:54 <pimpbot5000> how is cogsci structured?
18:30:05 <Riastradh> I'm just curious.
18:30:09 <pimpbot5000> at my school it's interdisciplinary
18:30:18 <bourbaki> we start to change all our studies to bachelor and master here
18:30:21 <pimpbot5000> Riastradh: ok cool
18:30:25 <bourbaki> oh yes so is ours
18:30:43 <Riastradh> Haskell controversy always sounds potentially interesting.
18:31:17 <pimpbot5000> Riastradh: not to deride monads at all, but it seems there are certain areas where haskellites ignore non-monadic solutions
18:31:46 <bourbaki> we have psychology philosophy math CS AI linguistics Neurobiology and something i forgot :)
18:32:29 <pimpbot5000> yea, our program is like that.  problem i have with our Cogsci program is it can be a great major, but is a little too easy by itself
18:32:31 <Riastradh> Such as, pimpbot5000?
18:32:47 <bourbaki> ah and neuro informatics of course
18:33:05 <pimpbot5000> brb, getting a call on my cell phone
18:48:27 <pimpbot5000> Riastradh: sorry, off the phone now.  well, i can speak a for my area, array computations.  we found resistance to our solution to single-threadedness when we submitted to the Haskell workshop
18:50:03 <pimpbot5000> we're working on language support for quadtree matrices
18:50:35 <bourbaki> quadtree matrices?
18:51:04 <pimpbot5000> yep, do you know what row-major or column-major is?
18:51:38 <bourbaki> maybe :) what is it?
18:52:22 <pimpbot5000> ok, quadtree matrices can be decomposed into quadrants
18:52:33 <bourbaki> ah ok
18:52:44 <pimpbot5000> it's a different kind of ordering than row-major
18:52:57 <bourbaki> quite interesting for threaded computations i guess
18:53:24 <bourbaki> where you could split the multiplication on more then one thread
18:53:36 <pimpbot5000> right, they're easy to split, so as to send them to parallel processes
18:53:59 <pimpbot5000> one sec, let me find the paper on quadtree matrices
18:54:07 <bourbaki> couple of guys i know did that in a quite hacking contest for the hyperthread cpu
18:54:21 <bourbaki> we did that in linear algebra
18:54:36 <pimpbot5000> yep, we've been playing with the new intels
18:54:47 <pimpbot5000> you used Morton-order matrices?
18:55:05 <bourbaki> heh that doenst ring a bell :)
18:55:14 <pimpbot5000> http://www.cs.indiana.edu/~dswise/Arcee/
18:55:21 <pimpbot5000> that's our research group
18:55:30 <bourbaki> i just had do proof once that for linear transformations you can decompose the matrices
18:55:48 <bourbaki> http://www.cogsci.uni-osnabrueck.de/
18:56:01 <bourbaki>  heh a transformer picture ;)?
18:56:08 <pimpbot5000> yup, hehe
18:56:22 <bourbaki> funky
18:56:30 <pimpbot5000> our matrix algorithms are matrix 'transformers'
18:56:53 <bourbaki> HHAHAHAHA coool :)
18:57:14 <bourbaki> thats funny
18:57:14 <pimpbot5000> the image in the 'recursion' section shows the structure of a quadtree
18:57:35 <bourbaki> ahnentafel :)? thats a german word
18:57:36 <pimpbot5000> we map a tree structure onto a flat array
18:57:50 <pimpbot5000> yep, i have no idea who the guy was
18:57:52 <pimpbot5000> hehe
18:58:07 <bourbaki> ah quite interesting i think we discussed something like that some time ago in #ai
18:58:11 <pimpbot5000> but i'm sure Ahnenfel indices came from a different field
18:58:51 <pimpbot5000> Wise has written some matrix algorithms that are as fast or faster than BLAS routines
18:58:57 <bourbaki> thats german for familytree
18:59:03 <pimpbot5000> oh hehe
18:59:24 <pimpbot5000> well that's very cool
18:59:37 <bourbaki> whats cool?
18:59:58 <pimpbot5000> well now i know why Wise named them Ahnentafel indices
19:00:11 <bourbaki> :)
19:00:19 <bourbaki> all you needed to do was meet me ;)
19:00:26 <pimpbot5000> hehe exactly
19:00:47 <pimpbot5000> i took spanish, so i wouldn't have known
19:01:05 <bourbaki> i had english and latin
19:01:48 <pimpbot5000> right on, do you speak english much?  besides on the internet
19:02:33 <bourbaki> well my courses are in english beside the one we share with other faculties which is roughly lets say 20-30% of the courses
19:02:35 <pimpbot5000> i can't understand the cogsci link you sent...my german is lacking :)
19:02:40 <bourbaki> the others are in english
19:02:53 <bourbaki> sec theres an english version
19:03:21 <bourbaki> just click on the upper right corner
19:03:26 <bourbaki> http://www.cogsci.uni-osnabrueck.de/
19:03:35 <bourbaki> the site is prettry crappy imho
19:03:37 <pimpbot5000> there it is
19:03:38 <pimpbot5000> coo
19:04:08 <pimpbot5000> what is your area of cogsci?
19:04:23 <pimpbot5000> i think i remember you having a discussion over category theory a while back
19:04:27 <bourbaki> ai and math
19:04:42 <bourbaki> yeah i try to make sense of that quite a while now ;)
19:05:02 <bourbaki> what intrigues me about it are the diagrams
19:05:38 <pimpbot5000> from what i hear, category theory is very abstract
19:05:46 <bourbaki> yes it is
19:05:47 <pimpbot5000> so i imagine pictures help
19:05:49 <pimpbot5000> hehe
19:06:14 <bourbaki> for me its like a desciption of some process or structure
19:06:36 <bourbaki> but also i am into CS
19:06:49 <bourbaki> im a former pro game/engine programmer
19:07:00 <pimpbot5000> oh?  what game?
19:07:10 <bourbaki> do you know gothic?
19:07:16 <bourbaki> its a rpg game
19:07:22 <pimpbot5000> hmm, not familiar, but i know little about games
19:07:41 <pimpbot5000> that's pretty hardcore.  why did you leave it?
19:07:50 <bourbaki> http://www.piranha-bytes.com/gothic2/content_english/news_headlines.php
19:07:57 <pimpbot5000> i know lots of programmers who would kill to program games
19:08:21 <bourbaki> well i worked 7 days a week for like 16h a day which was fun the first year
19:08:36 <pimpbot5000> ah hehe
19:08:38 <bourbaki> but then you always are under pressure
19:08:45 <pimpbot5000> the game looks awesome
19:08:54 <bourbaki> for events and stuff and our management was quite shitty
19:09:09 <bourbaki> http://www.codecult.com/
19:09:14 <bourbaki> thats the engine i worked on
19:09:38 <pimpbot5000> cool
19:09:47 <bourbaki> these are some shots of the demo we did for nvidia http://www.nvidia.com/object/games_codecult.html
19:10:07 <pimpbot5000> so after working on high performance programming, you're not soured on functional languages?
19:10:26 <bourbaki> yes it was a long journey though ;)
19:10:40 <bourbaki> c++ is such an ugly language imho
19:10:44 <pimpbot5000> i agree
19:10:52 <pimpbot5000> leads to bad habits
19:10:54 <bourbaki> lots of brackets and stuff
19:11:06 <bourbaki> i am quite a hybrid programmer
19:11:19 <bourbaki> when i do c++ i do c with c++ wrappings ;)
19:11:26 <pimpbot5000> do you think functional languages are too constraining?
19:11:36 <SamB> better than C++ with C wrappings ;-)
19:11:50 <pimpbot5000> i noticed KDE uses safe-c++, which is like java
19:11:52 <bourbaki> well i used lisp before i came to haskell
19:12:04 <bourbaki> so i miss the dynamic stuff sometimes
19:12:13 <bourbaki> SamB heh
19:12:31 <pimpbot5000> hehe
19:12:36 <bourbaki> also i would like to do a monadic renderer once
19:12:39 <SamB> thats what they use for arts from gnome, isn't it?
19:12:52 <pimpbot5000> have you played with Clean much?
19:13:11 <bourbaki> clean?
19:13:23 <pimpbot5000> yea, it's very much like haskell
19:13:37 <bourbaki> ah i think i remember
19:13:39 <pimpbot5000> although they have a different approach to stateful computations
19:13:46 <bourbaki> its some kind of proof system?
19:13:56 <pimpbot5000> http://www.cs.kun.nl/~clean/
19:13:59 <SamB> so are monads, right?
19:14:09 <pimpbot5000> nope, a full blown language
19:14:26 <pimpbot5000> Samb: huh?
19:14:30 <SamB> oh, I thought he was talking about approaches to stateful computation ;-)
19:14:42 <pimpbot5000> ok hehe
19:14:45 <bourbaki> i came to that site though when i was doing some search for proof systems
19:15:00 <pimpbot5000> there is a theorem prover companion
19:15:06 <SamB> typechecking is a kind of proof, you know
19:15:11 <pimpbot5000> but the language uses uniqueness types for state
19:15:13 <bourbaki> :)
19:16:04 <pimpbot5000> Samb: true, but typechecking is limited to static language properties
19:16:27 <bourbaki> but i think i might return to games when i did enough uni stuff :) and do some ai things in games
19:16:45 <pimpbot5000> cool :)
19:17:02 <pimpbot5000> you might like Clean, it has some nice performance features
19:17:29 <bourbaki> i was always more interested in ai then in gfx ;) but they needed me to do that stuff ;)
19:17:44 <pimpbot5000> right on
19:17:46 <bourbaki> i am not that interested in speed
19:17:56 <bourbaki> i am more interested in the nice way to program
19:18:07 <bourbaki> if anyone thinks its cool he can optimize it
19:19:00 <pimpbot5000> the nice thing about clean is you can code like haskell, but mark a type as 'unique' and make it in-place
19:19:19 <bourbaki> in place?
19:19:58 <pimpbot5000> right, you can have destructive updates
19:20:35 <pimpbot5000> because, if you know a data structure is uniquely referenced, you can mutate it
19:21:00 <bourbaki> yep
19:21:29 <bourbaki> i want to build kind of my own little language
19:21:39 <pimpbot5000> scheme is great for that
19:21:57 <pimpbot5000> the scheme macro system is very powerful
19:22:01 <bourbaki> the idea is that you can use any language that you want
19:22:13 <bourbaki> as i said i did some lisp stuff ;)
19:22:20 <bourbaki> and i am btw at a prolog uni ;)
19:22:24 <pimpbot5000> hehe true
19:24:09 <bourbaki> i came to lisp via some stuff that i did for work a shader graph
19:24:26 <pimpbot5000> what was the draw?
19:24:37 <pimpbot5000> the only time i interact with common lisp is emacs
19:24:43 <bourbaki> the problem is that you have these shaders that run in hardware
19:24:51 <nleavrh> FSVO 'common lisp' that means 'not common lisp'.
19:24:59 <bourbaki> but there is no linking on the fly and such
19:25:07 <pimpbot5000> but, being from indiana u, i've been well acquainted with scheme
19:26:00 <bourbaki> so you need to see if you can ie combine two shaders on the fly
19:26:10 <pimpbot5000> so you used some boilerplate code between C and lisp?
19:26:22 <bourbaki> if a comic shaded ball needs some fur or os
19:26:23 <bourbaki> so
19:27:05 <bourbaki> the problem at these days was that i needed a dynamic object system at runtime
19:27:16 <bourbaki> and so i searched for something
19:27:39 <pimpbot5000> lisp would be a great candidate
19:27:44 <bourbaki> i didnt wanted to use lisp in the first place just got interested in it these days
19:27:48 <bourbaki> yes
19:27:57 <pimpbot5000> heh, programs are lists
19:28:03 <bourbaki> we chose another way though also quite good i think
19:28:08 <pimpbot5000> so just (apply)
19:28:12 <bourbaki> :)
19:28:26 <bourbaki> thats the beatuy of these gpu programs ;)
19:28:32 <pimpbot5000> what was the other way?
19:28:54 <bourbaki> we implemented dynamic virtual file tables
19:29:11 <bourbaki> so i was able to add functions to an object at runtime
19:29:20 <bourbaki> prewritten though
19:29:46 <pimpbot5000> cool
19:29:51 <bourbaki> i tired to get the ppl to implement it all in our own script language so i could use scripts there
19:30:03 <bourbaki> but they didnt see how cool it was :)
19:30:37 <pimpbot5000> hehe
19:30:52 <bourbaki> and you would have been able to proxyfy shaders
19:30:58 <pimpbot5000> yea, functional languages get put off frequently as pedantic
19:31:35 <bourbaki> that is if you have really big graph wich is like a program then you can build a dummy node and use the virtual file table and add anything interesting to is so you can slide around in the effect
19:31:52 <bourbaki> i like it
19:32:06 <bourbaki> its really explicit
19:32:18 <pimpbot5000> cool
19:32:24 <pimpbot5000> what language is this now?
19:32:25 <bourbaki> once i had some real problems with indirect casts
19:32:37 <bourbaki> my language of choice?
19:32:49 <pimpbot5000> oh ok
19:33:39 <bourbaki> i am quite a vagabond though if it comes to languages
19:34:15 <bourbaki> i dont get too deep into the most languages just do some stuff and go to the next project and try another language
19:34:41 <pimpbot5000> right, some languages are well suited to a few types of tasts
19:34:51 <nleavrh> bourbaki - we should start a club.
19:35:07 <bourbaki> thats why want to build that funky thing for my thesis ;)
19:35:13 <bourbaki> nleavrh what club?:)
19:35:17 <pimpbot5000> hehe
19:35:27 <bourbaki> does this club include good looking women?
19:35:34 <bourbaki> if so count me in ;)
19:35:42 <pimpbot5000> do any computer science clubs?
19:35:57 <SamB> pimpbot5000: probably occassionally
19:35:58 <nleavrh> bourbaki - probably not too many of them join the 'language of the moment' club, but I'll keep an ear out.
19:36:12 <bourbaki> nleavrh heh
19:36:34 <SamB> language of the moment? hmm. do you get CDs in the mail every moment with langauges on them?
19:36:34 <pimpbot5000> Indiana U has 60% women overall, but 15% in CS
19:36:36 <bourbaki> maybe if the language of the moment is french ;)
19:37:04 <bourbaki> i would say we have roughly 50% women in cog sci
19:37:15 <pimpbot5000> yea, cogsci is much better
19:37:20 <pimpbot5000> in terms of women
19:37:24 <bourbaki> :)
19:42:03 <bourbaki> i just wonder in that language shoot out haskell is worse then c++ but wont you gain some speed due to design issues of your programs in the long run?
19:42:51 * nleavrh decides that he prefers J's term 'tacit' to Haskell's term 'point-free'
19:58:05 <bourbaki> good night
22:02:13 <SyntaxLaptop> is there a way to "chmod +x" a file without the posix module?
22:08:22 <Cale> are there non-unix platforms with Haskell compilers which have an executable bit and aren't posix?
22:14:58 <SyntaxLaptop> I don't know what's not posix
22:14:59 <SyntaxLaptop> I've been avoiding depending on the posix module, though.
22:31:58 * nleavrh hums at http://www.jsoftware.com/papers/play104.htm
