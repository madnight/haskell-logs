03:30:29 <hyp3rion> ~_~
04:09:14 <debug> where is marvin?
04:10:52 <bourbaki> hi
05:23:28 <flaw> how do I get ghc to see my modules without -i the directories?
05:23:49 <flaw> I built HXmlToolbox, but it doesn't have a nice install rule in its makefile
06:39:51 <shapr> wheeee
06:40:06 <shapr> my new unicycle seat is on its way...
06:40:09 * shapr dances cheerfully
06:41:12 <shapr> hiya udo, how's code?
06:41:35 <ustenzel> hi shapr
06:42:03 <ustenzel> didn't code much recently
06:43:40 <shapr> learned anything interesting?
06:44:48 <ustenzel> i tried embedding select(2) in a monad.  somehow i hoped, the code would look as if it was multithreaded while still running sequentially.
06:45:02 <ustenzel> i still think it looks ugly, though
06:45:13 <shapr> is that like using the threaded RTS?
06:45:30 <bourbaki> shapr unicycle chair?
06:45:38 <shapr> unicycle seat
06:45:53 <shapr> the Kris Holm seat by Velo
06:45:56 <bourbaki> whats that?
06:46:06 <ustenzel> i've pretty much given up on multiple threads.  everytime i tried, something did a busy wait.
06:46:20 <ustenzel> so i'm back to manually using select
06:46:54 <shapr> can't you somewhat beat the busy wait with the threaded-rts ?
06:47:03 <shapr> bourbaki: hopefully a seat that won't make my butt hurt.
06:47:53 <bourbaki> heh
06:47:58 <ustenzel> dunno.  i don't like threads and i like them even less when i need to recompile the rts.
06:48:56 <shapr> threaded is standard in 6.2.1
06:49:07 <shapr> you just need to run the rts with -threaded, I think
06:50:03 <shapr> I'm tempted to take over maintenance of the news on haskell.org
07:17:28 <bringert> will it have RSS?
07:20:11 <ludde> hi bringert
07:22:09 <bringert> hi ludde
07:22:14 <ludde> what's up
07:22:30 <ludde> i'm in the internet cafe :)
07:24:05 <bringert> I'm at work :)
07:24:13 <bringert> how's the weather up there?
07:24:29 <ludde> it's sunny, nice weather
07:24:33 <ludde> how was the sailing trip
07:25:30 <bringert> rainy, windy, sunny
07:25:38 <bringert> and a bit of a thunderstorm
07:25:53 * shapr boings cheerfully
07:26:52 <ludde> ok :(
07:32:08 <bringert> "Hello darling, our customers have gone bankrupt. With best regards the Dean"
07:32:12 <bringert> GF is fun
07:38:32 <shapr> that's pretty spiffy
07:39:50 <shapr> yes, it needs RSS
08:00:39 <flaw> how do I permanently tell ghc to look for modules in a certain folder, so that I don't have to respecify -i? (I built hxmltoolkit, but it doesn't seem to have a nifty install rule in the makefile)
08:00:51 <flaw> asked earlier, but other seem awake now
08:01:07 <shapr> you could write your own -package file
08:01:28 <shapr> that's pretty much what they do
08:01:42 <shapr> look at ghc-pkg -l to see what packages you have
08:02:43 <shapr> then look at maybe ghc-pkg -s util to see how a package looks
08:14:55 <shapr> hiya Administrator 
08:15:04 <shapr> what are you administratoring?
08:15:14 <neologism> shapr: your mind has been just conquered
08:15:18 <neologism> and he administrates it ;)
08:15:28 <shapr> aieee
08:18:14 <shapr> I wonder who that was.
08:18:53 <neologism> I've just told ya ;)
08:18:59 <shapr> :-P
08:23:45 <shapr> does David Menendez show up here?
08:41:30 <flaw> shapr: thanks
08:47:58 <TheHunter> this is weird: if I import Control.Monad.Reader, ghci complains about @return 1 2@
08:48:06 <TheHunter> No instance for (Monad ((->) t))
08:48:36 <TheHunter> (hugs works fine)
08:49:03 <shapr> what should the type of that be?
08:49:08 <shapr> @type return 1 2
08:49:09 <lambdabot> bzzt
08:49:12 <shapr> @type return 1
08:49:13 <lambdabot> return 1 :: forall m a. (Monad m, Num a) => m a
08:49:34 <TheHunter> return :: a -> b -> a
08:49:47 <TheHunter> return is defined as const
08:50:41 <shapr> @type return
08:50:42 <lambdabot> return :: forall m a. (Monad m) => a -> m a
08:51:24 <TheHunter> is this a bug?
08:52:15 <TheHunter> Control.Monad.Reader says @instance Monad ((->) r) where@
08:52:35 <TheHunter> and ghc gives the error message "    No instance for (Monad ((->) t))"
08:53:04 <shapr> I'm confused
08:54:15 <TheHunter> Prelude Control.Monad.Reader> let myReturn = return :: a -> b -> a
08:54:15 <TheHunter> Prelude Control.Monad.Reader> myReturn 2 3
08:54:15 <TheHunter> 2
08:55:14 <RussellOConnor> wow
08:56:53 <shapr> @info monad
08:57:03 <shapr> @hello
08:57:03 <lambdabot> Hello world. 
08:57:07 <shapr> @info Monad
08:57:09 <lambdabot> -- Monad is a class
08:57:09 <lambdabot> class Monad m :: (* -> *) where {
08:57:09 <lambdabot>     (>>=) :: forall a b. m a -> (a -> m b) -> m b;
08:57:09 <lambdabot>     (>>) :: forall a b. m a -> m b -> m b {- has default method -};
08:57:09 <lambdabot>     return :: forall a. a -> m a;
08:57:09 <lambdabot>     fail :: forall a. String -> m a {- has default method -};
08:57:11 <lambdabot>     }
08:58:05 <shapr> the type of return in the typeclass appears to clash with your definition, but that's all I'm sure of...
09:00:46 <TheHunter> ok, @(return::a->b->a) 1 2@ works, but it's the error message that's freaking me out
09:00:46 <RussellOConnor> Prelude Control.Monad> let myReturn = return :: a -> b -> a
09:01:01 <RussellOConnor> Prelude Control.Monad> myReturn 2 3
09:01:08 <RussellOConnor> 2
09:01:15 <RussellOConnor> So it has nothing to do with Reader
09:03:48 <TheHunter> doesn't work for me
09:03:54 <RussellOConnor> Who is defining return to have type a -> b -> a
09:04:47 <RussellOConnor> unless there is a monad instance of b -> a?
09:05:26 <RussellOConnor> I see
09:05:43 <RussellOConnor> ((->) r) is an instance of Monad
09:05:58 <RussellOConnor> I don't even know what ((->) r) means.
09:06:45 <TheHunter> (->) r a is the same as r -> a
09:07:08 <shapr> I think return is only eating the first number, or maybe it's evaling both of them and trying to find a monad instance for them.
09:07:09 <RussellOConnor> What are the implementations for return and bind for the ((->) r) monad?
09:07:25 <TheHunter> return = const
09:07:45 <TheHunter> m >>= k = \r -> k (m r) r
09:08:07 <RussellOConnor> ah
09:08:27 <RussellOConnor> I'm becoming much less confused.
09:08:54 <TheHunter> shapr, the error message suggests that ghc fails to find an instance for ((->) r)
09:09:14 <RussellOConnor> So you need to import Control.Monad as well then, right?
09:10:12 <TheHunter> you don't need Control.Monad because monads are defined in the Prelude
09:10:32 <RussellOConnor> I don't think they are
09:11:01 <TheHunter> MonadPlus, liftM and stuff is defined in Control.Monad
09:11:03 <RussellOConnor> Prelude> (return:: a -> b -> a) 1 2
09:11:04 <RussellOConnor> <interactive>:1:
09:11:06 <RussellOConnor>     Could not deduce (Monad ((->) b)) from the context ()
09:11:07 <RussellOConnor>       arising from use of `return' at <interactive>:1
09:12:02 <RussellOConnor> List is defined to be a Monad in the Prelude, but I don't think (->) r is.
09:12:31 <TheHunter> ((->r) r) is defined in Control.Monad.Reader
09:12:45 <RussellOConnor> No, it's defined in Control.Monad.
09:13:10 <RussellOConnor> Assuming to meant ((->) r)
09:13:22 <RussellOConnor> Assuming YOU meant ((->) r)
09:13:34 <TheHunter> which ghc-version do you have?
09:14:26 <RussellOConnor> GHC 6.2.1
09:14:34 <TheHunter> sure, i meant ((->) r)
09:15:12 <RussellOConnor> I'm not certain about what I'm saying about where ((->) r) is defined to be a Monad.  I'm inferring it from behaviour and documentation.
09:15:22 <TheHunter> Prelude Control.Monad> :t return :: a->b->a
09:15:22 <TheHunter> Could not deduce (Monad ((->) b)) from the context ()
09:15:25 <shapr> hej Marvin-- 
09:15:36 <TheHunter> also, ghc 6.2.1
09:15:49 <Marvin--> hejhej
09:16:31 * TheHunter still thinks this is a bug
09:24:56 <TheHunter> fwiw, map snd === flip const === const id === flip return === return id
09:25:21 <TheHunter> s/map/curry/
09:26:19 <shapr> it might be a bug, send it to the list
09:27:03 <TheHunter> at least the error message is wrong.
09:34:49 <hyp3rion> wish me luck!
09:35:12 <TheHunter> God luck, hyp3rion 
09:35:22 <shapr> hyp3rion: oh, what're you doing?
09:35:44 <hyp3rion> thanks ... installing netbsd for the first time
09:35:51 <neologism> hyp3rion: enjoy it
09:35:54 <neologism> its really great system
09:36:03 <shapr> good luck!
09:52:08 <shapr> there's some single connection among memcached, sfs, chord, darcs, and distributed computing/hashing
09:52:12 <shapr> but I can't figure out the connection
09:52:53 <shapr> any suggestions?
09:53:25 <neologism> shapr: netstat?
09:53:27 <neologism> sockstat ?
09:53:29 <shapr> :-P
09:54:02 <shapr> I was thinking it has something to do with NUMA and ccNUMA, and Sony/IBM's Cell CPU.
09:54:17 <neologism> oh ;)
09:54:20 <shapr> oh, I think I get it.
09:54:31 <shapr> heh
09:54:45 <shapr> computers are evolving past single-celled organisms :-)
09:54:59 <neologism> ;)
09:55:05 <neologism> hopefully
09:55:44 <shapr> so the next step is not SMP, but something closer to grid computing on a single chip
09:56:06 <neologism> yeah
09:56:30 <shapr> my next question is, how do I write programs for that sort of hardware?
09:58:16 <Gowilla> BOO!
09:58:24 <shapr> aahhh!
09:58:25 <neologism> I think since haskell is referntially transparet
09:58:34 <shapr> Gowilla: was that a multicast boo?
09:58:35 <neologism> it can be paralelized by machine
09:58:52 <Gowilla> no, I just noticed this window.
09:59:00 <neologism> so I'd writeprograms in haskell the same way as now
09:59:06 <neologism> and let compiler do the job
10:02:59 <shapr> Gowilla: I discovered I can get native IPv6 and IPv4 on the same connect,  or an IPv6 tunnel, both from telia. I had to contact the 'sales to ISPs' department of telia, so I haven't yet asked about prices.
10:04:04 <Gowilla> cool.
10:04:29 <Gowilla> are you 6to4ing at the moment?
10:05:30 <shapr> nah, I wish. no available 6to4 routers in these parts, and the freenet6 tunnel goes through canada, so no point in using it to access IPv4 hosts.
10:06:38 <shapr> on the other hand, there's sixxs.net, which might help me get a tunnel to my colo box, tunneled from some nearby IPv6 host
10:09:20 <shapr> hiya maihem 
10:13:32 <shapr> Gowilla: any ideas how I can test multicast support through the freenet6 tunnel?
10:14:54 <maihem> howdy shapr
10:36:24 <RussellOConnor> Ah ha!  ReadP is what I've been looking for!
10:36:26 <RussellOConnor> :-)
10:36:47 <RussellOConnor> Oh wait, it only works for characters.
10:36:52 <RussellOConnor> :-(
10:41:42 <RussellOConnor> Is there any way to figure out what the implemations of class functions are when a given type is an instace of that class?  The GHC documenation doesn't seem to have this info.
10:42:42 <TheHunter> under debian, there is a package ghc6-libsrc
10:43:05 <TheHunter> i usually use the hugs sources
10:43:17 <TheHunter> s/sources/libraries/
10:47:32 <Marvin--> RussellOConnor: Parsec not good enough for ya?
10:48:07 <RussellOConnor> Does Parsec handle Binary (Word8) data?
10:48:15 <Marvin--> Parsec deals with generic tokens
10:54:23 <RussellOConnor> Parsec seems like overkill.  My data being parsed is really simple.  But maybe I should look into using it anyways.
10:57:43 <RussellOConnor> Even ReadP would be too much.  I was look for a ConsumerMonad that has a `get' function.
10:58:07 * RussellOConnor wonders why I can't type
11:08:40 <Marvin--> RussellOConnor: er, what should the 'get' do?
11:09:06 <RussellOConnor> Consume one thing and return it.
11:10:39 <Marvin--> I don't understand what it should consume and how
11:11:22 <Smerdyakov> It should consume everything, by whatever means necessary.
11:11:42 <RussellOConnor> For example ConsumeMonad [a] would have a stream as part of its state.  Whenever you call get, you get the head of the list, and the state turns into the tail of the list.
11:12:08 <Marvin--> why not just build it on top of a state monad?
11:13:27 <Smerdyakov> RussellOConnor, how are you thinking of typing get?
11:13:27 <RussellOConnor> That could be done, but I figured there already existed a standard interface.
11:13:27 <Marvin--> RussellOConnor: yeah, it's called 'foldr' ;)
11:13:27 <RussellOConnor> get :: (ConsumeMonad a) => m a
11:13:29 <Smerdyakov> How would you use this get?
11:14:57 <RussellOConnor> do x <- get
11:14:58 <RussellOConnor>      when (x < 0) doSpecialConsume
11:14:59 <RussellOConnor>      doSomeMoreConsuming
11:17:40 <Smerdyakov> How does get know where to get the thing it returns?
11:17:43 <RussellOConnor> Marvin--, I don't want to iterate a single function.  But I want to build up a function to read a finite stream of data, that always reads in order.  And I would like to abstract the underlying representation of the get function.  I don't care if the finite stream is represented as a list, or as a (Array i a, i) pair, or as a fileHandle.
11:17:59 <Riastradh> RussellOConnor, what's wrong with fold?
11:18:29 <RussellOConnor> fold requires a list?
11:18:51 <Riastradh> I refer to the general operator fold.  You could define a typeclass Catamorphism.
11:18:54 <RussellOConnor> Smerdyakov, that depends on the implemenation.
11:19:05 <RussellOConnor> I'm not familar with fold then.
11:19:32 <Riastradh> Fold is just a short name for the concept of catamorphisms.  Haskell's foldl & foldr are particular instantiations of this operator for lists.
11:21:04 <Riastradh> Catamorphisms apply just as well to lists as to, for example, file handles or arrays.
11:21:19 <RussellOConnor> What are the operations of a Catamorphism?
11:21:27 <Riastradh> Just fold.
11:21:37 <Riastradh> foldl & foldr are themselves catamorphisms.
11:23:43 <RussellOConnor> But I don't want to iterate a function.  I'm parsing a binary file.  I want to read the header.  The header says what the rest of the packet it, so I parse the rest of the packet.  The packet might be a pair of BigIntegers, so I want to parse two BigIntegers.  Parsing a BigInteger requres reading the size of the integer, and then the integer itself.  So you see that I'm building up a sequence of read operations, but all this is
11:23:53 <Riastradh> ...you were truncated at 'but all this is'.
11:24:03 <RussellOConnor> oh
11:24:21 <RussellOConnor> So you see that I'm building up a sequence of read operations, but all this is independent of how I actually access the data.
11:25:19 <RussellOConnor> All I need is `return` `bind` and some sort of `get` operation.  (and `endOfStream` operation may be nice too)
11:35:31 <RussellOConnor> fold has type (Catamorphism c) => (a -> b -> b) -> b -> (c a) -> b ?
11:38:11 <Riastradh> Yes.
11:52:17 * Marvin-- ponders what it was he was supposed to be doing now
12:02:12 <shapr> the BOFH series on theregister.co.uk is truly inspired.
12:03:32 <Marvin--> oh, right, I was going to look through the cabal todo
12:03:39 <shapr> right!
12:03:41 <shapr> CABAL!
12:06:24 <shapr> this calls for a reboot!
12:06:52 <Marvin--> um
12:06:54 <Marvin--> riiight
12:30:48 <SyntaxNinja> hihi
12:31:01 <SyntaxNinja> so my laptop is broken. I might not get to hack on cabal for the next few days, but then again, I might.
12:31:19 * monotonom blesses the laptop
12:31:54 <SyntaxNinja> please cc isaac.jones@gmail.com on important stuff.  my other mail account is almost useless without the filters that are on my laptop
12:31:59 <SyntaxNinja> it should only be a few days to fix, though.
12:33:05 <Marvin--> okay
12:33:19 <Marvin--> what's up with the laptop?
12:33:52 <SyntaxNinja> hardware issues. seems to stem from the display. totally freezes.
12:36:01 <Marvin--> tried disabling dri in X?
12:38:13 <SyntaxNinja> it's not just X, though it used to be. it freezes when I'm on a terminal as well.
12:38:21 <SyntaxNinja> and it freezes if I boot into knoppix
12:38:28 <Marvin--> ouch
12:38:51 <SyntaxNinja> it seemed to be connected with over-heating; used to only happen at my apartment, which has no AC
12:39:30 <SyntaxNinja> but I have that debian sparc machine I should be able to use with no problem. just email MIGHT be a problem, but gmail comes to my rescue.
12:41:22 <Marvin--> go gmail! ;)
12:43:01 <SyntaxNinja> yeah... fortunately, I got the "cover everything for 3 years" warranty on this thing, and apparently Gateway is quite good at laptop turn-around.
12:49:45 * cgibbard notices a bug in the declaration finding in haskell-mode. It deals with literate scripts incorrectly, taking first words of each line (outside of code environment) as declarations.
12:51:23 <keverets> which style literate scripts?
12:53:02 <cgibbard> LaTeX
12:54:46 <Marvin--> Lemmih: did you ever get that patch sent off to SyntaxNinja?
12:55:12 <Lemmih> No.
12:55:56 <Marvin--> you should do a darcs pull, update it, and send it :)
12:57:02 <keverets> cgibbard: odd, I've never seen that.  Which version of haskell-mode are you using?
12:58:38 <cgibbard> supposed to be 1.45
12:58:49 <cgibbard> I think I found the problem
12:59:36 <cgibbard> there's something which checks to see if the face is set to font-lock-comment-face, but inside my comments, it's haskell-comment-face
13:03:13 <SyntaxNinja> Lemmih: ooh! a patch? what does it do?
13:06:13 <Lemmih> SyntaxNinja: Parse escaped characters.
13:06:38 <SyntaxNinja> cool :)
13:48:22 <cgibbard> yeah, adding haskell-comment-face to the checks seems to have fixed it. :)
13:53:58 * SyntaxNinja home &
17:11:48 * Igloo shakes his fist at m68k
19:26:53 <Xentac> does anyone know if there's been any work towards getting ghc compiling with gcc 3.4? I've only found references no the problem with google
20:21:33 * stepcut finally reads about cabal
23:23:33 <dons> Igloo: I think we've both been shaking our fists at m68k for a while now.
23:23:39 <dons> poor m68k
