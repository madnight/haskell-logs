01:02:43 <bringert> morning
01:10:05 <Lemmih> Good morning.
01:45:41 <gothmog_es> hi
01:45:53 <gothmog_es> anybody could help me
01:45:54 <gothmog_es> ?
01:49:12 <bringert> what with?
01:49:35 <gothmog_es> a doubt with haskell
01:50:54 <bringert> what seems to be the problem?
01:52:21 <gothmog_es> when i write a newtype and i define show instruction, i get in trouble with a list (index too large)
01:53:38 <gothmog_es> although i specify a different case for empty list, it gives all time that error with empty list
01:53:56 <gothmog_es> it seems to be ignoring part of the code
01:57:06 <gothmog_es> i have to disconnect now, i'll come back later
01:57:11 <gothmog_es> thanks anyway
02:16:14 <gothmog_es> hi again
02:17:25 <gothmog_es> bringert you read me before?
02:19:37 <bringert> yeah, not sure I understood the problem though. can you put you code on the paste page?
02:20:00 <bringert> @wiki HaskellIrcPastePage
02:20:00 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
02:20:06 <gothmog_es> ok
02:23:30 <gothmog_es> must i write on top or on bottom?
02:31:16 <gothmog_es> i already pasted it
02:42:17 * shapr hOps
02:46:09 <Lemmih> gothmog_es: What's the problem?
02:47:17 <gothmog_es> the code i have posted in the wiki doesnt work, at least it doesnt do what i expected
02:47:42 <Lemmih> It's working fine in GHCi
02:47:46 <gothmog_es> it gives me a prelude (!!). index too large error
02:48:01 <gothmog_es> if the list is empty
02:48:10 <Lemmih> It's also working in hugs...
02:48:37 <Lemmih> (Hugs: November 2003, GHC: 6.2.1)
02:49:24 <gothmog_es> uhm
02:50:08 <Lemmih> `C (10,"a","b","c",[])` throws an exception?
02:50:39 <shapr> good morning #haskell!
02:51:41 <gothmog_es> Lemmih yes. Program error: Prelude.!!: index too large
02:52:07 <Lemmih> Are you using Hugs?
02:52:13 <gothmog_es> yes
02:52:27 <gothmog_es> ersion december 2001
02:52:30 <gothmog_es> version december 2001
02:52:35 <gothmog_es> could be the problem¿
02:54:19 <Lemmih> Btw, you don't need to split the list into (x:xs).
02:55:17 <gothmog_es> no, sorry, dont give error
02:55:20 <gothmog_es> ¿?
02:55:48 <gothmog_es> im reading from a file
02:56:04 <gothmog_es> it could be that dont read an empty list?
02:57:44 <Lemmih> So `C (10,"a","b","c",[])` doesn't throw an exception?
02:58:16 <gothmog_es> no
02:58:33 <gothmog_es> im stupid
02:58:38 <Lemmih> Haskell is a non-strict language. It will only evaluate expressions when it's needed so the error can be elsewhere in the code.
02:59:05 <gothmog_es> ok
03:00:01 <gothmog_es> i have to look again the code
03:00:31 <Lemmih> `C (10,"a","b","c",[[1]!!2])` will throw an exception but `let x =C (10,"a","b","c",[[1]!!2])` will not.
03:01:21 <gothmog_es> anyway, thanks for the help
03:02:02 <gothmog_es> its very hard to start on haskell from c/java and those, hehe
03:03:12 <Lemmih> (-:
03:04:03 <gothmog_es> well, thanks for your time again
03:04:05 <gothmog_es> bye!
03:09:45 * shapr hOps
03:11:55 <bringert> how's hOp doing these days?
03:16:42 <shapr> I dunn
03:16:43 <shapr> o
03:17:41 <shapr> oh, I have a guess that the segfault has something to do with the unsafeCoerce# calls in the GFC parser.
03:17:55 <shapr> but that seems to be the old parser, so I'm not sure if it's actually being used.
03:22:23 <bringert> you mean GF2.0/src/parsers/ParGFC.hs?
03:22:30 <bringert> I think it's still used
03:22:50 <bringert> there is a ../GF2.0/src/newparsing/ParseGFC.hs too, but I think it does something different
03:23:30 <bringert> src/parsers/ParGFC.hs parses GFC files, I think src/newparsing/ParseGFC.hs parses text, *using* a GFC grammar
03:24:16 <shapr> my guess is that the problem is in there somewhere
03:24:25 <shapr> though I dunno why it would only segfault with -prof
03:25:29 <bringert> where does unsafeCoerce# come from?
03:25:44 <shapr> it seems to be a Happy 1.11 generated parser.
03:26:17 <shapr> I couldn't find the original input, so I didn't try to regen with the current Happy 1.14 
03:27:12 <bringert> src/canonical/GFC.cf is the BNFC input used to generate it, I think
03:27:49 <bringert> and src/source/GF.cf for ParGF.hs
03:35:13 <shapr> ok, let's see if that fixes it.
03:35:16 <shapr> jag hoppas!
03:36:50 <Brandon__> hi :)
03:36:54 <Lemmih> Hey
03:36:58 <Brandon__> Hi Lemmih :)
03:37:25 <Lemmih> Looking for Haskell information?
03:37:46 <Brandon__> I decided I want to try programming a little bit in Haskell
03:37:47 * shapr gives Lemmih the gold star for friendliness.
03:38:11 <shapr> maybe that should be a gold lambda...
03:39:01 <Lemmih> Brandon__: Yay (-:
03:39:31 <Brandon__> Need a compiler and a reference to the standard routines, and tutorials (which seem available on the site)
03:40:41 <Lemmih> I would recommend Hugs (www.haskell.org/hugs) and Yet Another Haskell Tutorial (http://www.isi.edu/~hdaume/htut/).
03:40:55 <Brandon__> I'm hoping I will free myself from some of the bonds of C programming thought limitations
03:41:00 <Brandon__> procedural?
03:41:28 <Brandon__> and I hope it's not considered ingratitude to God
03:42:52 <bringert> for a library reference, I recommend http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
03:43:25 <shapr> I got a compile error... hmm.
03:43:45 <bringert> dunno if bnfc is tested with happy 1.14
03:43:52 <bringert> what's the error?
03:44:05 <shapr> newparsing/PrintParser.hs:64:20:
03:44:05 <shapr>     No instance for (PrintGFC.Print Ident)
03:44:19 <bringert> which bnfc version is that btw?
03:44:33 <bringert> hmm, newparsing?
03:44:44 <bringert> is that src/newparsing?
03:44:48 <shapr> yup
03:45:35 <bringert> not that it really matters, but that dir is for natural language parsers, i.e. for parsing using GF/GFC grammars
03:46:08 <bringert> src/parsers is where the GF and GFC parsers should be
03:46:10 <Brandon__> I guess I'll use the windows version.. perhaps it'll be easier if I wish to do any graphics
03:46:25 <shapr> wxHaskell works nicely on Linux
03:46:31 <shapr> so does HOpenGL
03:46:36 <bringert> shapr: I can give you bnfc from cvs if you want
03:46:39 <shapr> sure!
03:46:47 <shapr> I'm using ibid's bnfc deb
03:46:54 <bringert> it has re-worked pretty-printer generation for haskell
03:46:57 <shapr> it claims to work with Happy 1.13
03:47:10 * shapr gets more z3r0 d4y H4sk311 w4r3z!
03:47:19 * shapr bounces ecstatically
03:47:31 <shapr> zero day Haskell warez r0xx0rs!
03:47:38 <bringert> hold on, why is the file called PrintParser, shouldn't that be PrintGFC?
03:47:49 <bringert> or did you rename the .cf file?
03:48:05 <shapr> no, I didn't touch newparsing/ at all, that's part of my surprise
03:48:11 <bringert> oh
03:48:15 <shapr> hoi arjanb 
03:48:17 <bringert> strange
03:48:21 <shapr> maybe I need to make clean?
03:48:33 * shapr runs make clean && make prof
03:48:41 <bringert> ah, now I see
03:48:51 <shapr> ?
03:49:04 <shapr> oh, I'm doing this with ghc-6.3 also
03:49:26 <bringert> newparsing/PrintParser.hs uses the PrintGFC.Print Ident instance, which is in PrintGFC, which is generated by BNFC
03:49:53 <shapr> I do sort of wish GF used Makefile dep rules rather than ghc --make
03:50:02 <Brandon__> are the window/graphics interfaces/routines similar between Haskell under linux and under windows?
03:50:03 <bringert> but the version of GF that I gave you has PrintGFC generated with a new BNFC version. it seems like I have messed up
03:50:17 <shapr> --make is a lot slower than checking to see if the .o files are more recent than the matching .hs files.
03:50:17 <Brandon__> shapr, what'c ghc?
03:50:29 <shapr> GHC is the Glorious Glasgow Haskell Compiler.
03:50:39 <bringert> http://www.haskell.org/ghc/
03:50:43 <Brandon__> ahh.. yeah, tell your gf the Makefiles are more standard?
03:51:10 <shapr> well, bringert is hacking on gf right now, so that's why I'm talking to him :-)
03:51:18 <shapr> ghc --make is a lot simpler to operate
03:51:26 <shapr> but can be slower
03:51:32 <bringert> note, hacking on GF, not shapr's gf
03:51:36 <shapr> er, right
03:51:38 * shapr is confused
03:51:42 <shapr> oh I get it
03:51:46 <Si\> If I have a function of type (Monad m) => a -> m b, and I have another function called mapM' :: (a -> m b) -> [a] -> m [b], same as standard mapM, except if it encounters a failure it just doesn't put it in the list, is there anyway of getting a value of type [b] without using filter fromJust or whatever?
03:52:03 <Brandon__> okay.. regarding graphics.. I downloaded HUGS for windows..
03:52:25 <Brandon__> what is the relationship with wx <looking back>.. etc.
03:53:12 <Brandon__> I knew I could rely on you Haskell folk for some info as you seemed (a few weeks ago) more than happy to recruit people into the Haskell world
03:53:34 <shapr> Hugs is a Haskell interpreter written in C
03:53:42 <shapr> GHC is a Haskell compiler written in Haskell
03:53:51 <shapr> I don't know if Hugs supports wxHaskell
03:53:58 <Brandon__> does GHC?
03:54:04 <shapr> yes, GHC does.
03:54:09 <Brandon__> is wxHaskell a library of routines?
03:54:30 <shapr> it's a wrapper for what is now wxWidgets, the windowing toolkit formerly known as wxWindows
03:54:37 <bringert> I think the official position is that there is no reason why wxHaskell shouldn't work in hugs, it's just that noone has tried it
03:54:43 <shapr> oh, ok
03:55:03 <Brandon__> I blew glass with a lady by the name of Haskell
03:55:20 <Brandon__> she headed much of the course and was considered "glass Mamma"
03:55:28 <bringert> is that some kind of euphemism that I don't get?
03:56:40 <Brandon__> what's a euphamism?
03:57:00 <bringert> shapr: after you ran BNFC on GFC.cf, did you keep only the new ParGFC, or did you use the new PrintGFC as well?
03:57:39 <shapr> er, both
03:57:42 <shapr> I guess?
03:57:50 <shapr> I just ran it, and rebuilt
03:57:50 <Heffalump> has anyone seen kosmikus lately?
03:57:53 * shapr checks
03:58:15 <shapr> kosmikus is probably still recovering from the celebration.
03:59:04 <bringert> you might want to delete everything that bnfc generated and just keep the .y-file
03:59:15 <shapr> oh
03:59:20 <Heffalump> celebration?
03:59:36 <shapr> he sent his thesis to the printers?
03:59:36 <bringert> shapr: 0-day bnfc: http://www.cs.chalmers.se/~bringert/gf/BNFC-20040627.tar.gz
03:59:40 <shapr> w00
03:59:48 * bringert is off to lunch
04:00:12 <Heffalump> ah. When was that?
04:00:22 <shapr> um, a few days back
04:02:13 <Heffalump> ta
04:02:47 <Brandon__> you use big words with me and now I have to look it up
04:03:04 <shapr> @wn euphemism
04:03:06 <lambdabot> *** "euphemism" wn "WordNet (r) 2.0"
04:03:06 <lambdabot> euphemism
04:03:06 <lambdabot>      n : an inoffensive expression that is substituted for one that
04:03:06 <lambdabot>          is considered offensive [ant: {dysphemism}]
04:03:51 <Brandon__> yeah.. got it through my site.. www.voycabulary.com
04:03:53 <shapr> Brandon__: you can ask lambdabot. he's written in Haskell too.
04:03:57 <shapr> @yow !
04:03:58 <lambdabot> Does someone from PEORIA have a SHORTER ATTENTION span than me?
04:04:05 <shapr> lambdabot: probably not
04:04:05 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
04:04:13 <Brandon__> ooh
04:04:20 <shapr> oh, I have new lambdabot modules to stick in today.
04:04:22 <Brandon__> lambdabot, @listcommands
04:04:27 <Brandon__> lambdabot: @listcommands
04:04:27 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
04:04:27 <lambdabot> ,"definitions","del-definition","det","devils","dict","dict-help","dummy
04:04:27 <lambdabot> ,"dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo
04:04:27 <lambdabot> ,"elements","eurohaskell","eval","foldoc","fortune","gazetteer","get-definition
04:04:27 <lambdabot> ,"goodbye","hello","hitchcock","index","info","jargon","join","karma","karma
04:04:28 <lambdabot> ","karma-","learn","leave","listchans","listcommands","listmodules","lojban
04:04:30 <lambdabot> ,"moo","more","msg","musasabi","part","prelude","quit","reconnect","resume
04:04:32 <lambdabot> ,"seen","set-fuel","shapr","state","stepcut","topic-cons","topic-init",
04:04:34 <lambdabot> topic-snoc","topic-tail","topic-tell","type","vera","web1913","wiki","wn
04:04:35 <shapr> that's a lot of commands
04:04:49 <Brandon__> anyone here do ai work in haskell?
04:04:57 <Lemmih> @eurohaskell
04:04:57 <lambdabot> less talks, more code!
04:04:57 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
04:04:57 <lambdabot> EuroHaskell - Haskell Hackfest - June 10-12 - Gothenburg, Sweden
04:05:06 <shapr> lambdabot has artificial stupidity built-in. Does that count?
04:05:17 <Lemmih> haha
04:05:30 <Brandon__> well, my wife is asking me to find a banner we had before..
04:05:41 <shapr> a banner?
04:05:44 <Brandon__> gif
04:05:49 <shapr> oh
04:06:23 <Brandon__> so I said, "computer, search for all gifs on such-and-such system in the path /whatever/ for images that are 468x60"
04:06:37 <Brandon__> it's almost the same as typing it out.. perhaps I can speak it more unixish..
04:08:43 <Brandon__> but I have to put my hands on the keyboard to do it..   for i in `find /path/ -iname '*.gif'`; do if giftopnm $i | head -3 | grep '\<468\>'; then ls -l $i; fi; done
04:09:15 <shapr> you'd rather speak to the computer?
04:10:02 <Brandon__> the inaccuracy of 468 alone is because I wasn't sure of the actual pnm header format.. although I'm pretty sure I could use: '^[ \t]*468[ \t]*\<60$'
04:10:08 <Brandon__> \t being an actual tab
04:10:52 <Brandon__> it's just tedious typing all these little characters.. I guess it keeps me in practice so I can code by hand too
04:11:30 <Brandon__> what about this.. I would like to have some macro program (probably one exists) that I can assign keystrokes to certain tasks on my computer
04:12:14 <Lemmih> emacs? (-:
04:12:34 <shapr> a Haskell shell?
04:12:52 <Brandon__> This irc program (xchat).. I'm not sure how to toggle the sound events without going into settings..  so it'd be nice to tell the computer, when I hit some key, that it goes and turns it on.. or tell it when this window goes into the background to go do it.. (I want it to beep at me when someone talks in channel.. but not when the window is right in front of me)
04:13:19 <Brandon__> these things are relatively simple for the computer.. they're just not done
04:13:27 <shapr> so, fix them!
04:13:35 <Brandon__> I don't blame programmers.. they put a lot into it.. it's just that noone's brought these things together conveniently yet..
04:13:43 <Brandon__> or at least, it's not common
04:14:01 <Brandon__> and the problem is.. I can't get involved with every project.. believe me, there are many ways of improving so many things..
04:14:14 <Brandon__> consider the sql systems.. It's been irking me for years now..
04:14:26 <shapr> ah, but SQL systems have been fixed, only recently!
04:14:30 <Brandon__> why aren't the on-disk database storage systems clustering data based on access frequency?
04:14:30 <shapr> HaskellDB to the rescue!
04:14:39 <Brandon__> and forget sql.. any db
04:14:42 <Brandon__> we're using Berkeley DB
04:14:46 <Brandon__> prior to that we used gdbm
04:15:03 <Brandon__> (for those who are unfamiliar, they are straight forward key,value pair databases)
04:15:23 <Brandon__> stored in whatever method you choose.. berkeley db allows hash, btree, maybe some others
04:15:27 <shapr> why don't DBs support distributed mirrored setups like mnesia?
04:15:49 <Brandon__> berkeley db happens to also be used by mysql as the underlying database storage method if you are using transactions--because berkeley DB provides the transaction support
04:15:57 <Brandon__> mnesia?
04:16:07 * Brandon__ looks for it
04:16:10 <shapr> erlang's distributed database.
04:16:25 <shapr> I used HaskellDB on top of PostgreSQL
04:16:29 <shapr> er "I use"
04:16:32 <shapr> HaskellDB roxx
04:16:34 <Brandon__> we need something super efficient ..
04:16:43 <shapr> I like statically typechecking SQL queries
04:16:46 <Brandon__> hence the clustering data like I mentioned.. to make use of the system's fs cache
04:16:57 <Brandon__> I have to be disk speed efficient and memory efficient..
04:17:00 <Brandon__> I don't see why they didn't do this
04:17:17 <Brandon__> I did recently find that mysql has a key-cache.. keeping frequently accessed keys .. cached.  :)
04:17:37 <Brandon__> that's great.. but these things *should* be there..
04:18:05 <shapr> well, we all fix the problems that we see. That's open source.
04:18:11 <Brandon__> I dunno.. I guess I am bothered that if I could make a whole site, that these people with their resources (more than one or two people) should be able to take care of all these things
04:18:27 <Brandon__> yup.. open source is great.. 
04:18:40 <shapr> different people perceive different problems
04:18:48 <Brandon__> indeed!  that's the most important thing
04:18:50 <shapr> if you work on what you see, it's a benefit for others.
04:19:05 <shapr> I perceive lack of support for SMP and distributed processing
04:19:06 <Brandon__> we need guidance to know which things are truely important.. otherwise what we value is based on our own personal bias
04:19:14 <Brandon__> even the "experts" have certain beliefs and biases, etc.
04:19:16 <Brandon__> I don't know who doesn't.
04:19:16 <shapr> but maybe personal bias is just fine
04:19:27 <shapr> personal bias + a bunch of work = useful code
04:19:31 <shapr> at least it's useful to you
04:19:33 <Brandon__> yes.. it's a sort of relationship to personality :)
04:19:51 <Brandon__> If I'm coding something for myself, that must be that way
04:19:59 <Brandon__> if I'm coding it for you, it should be for your needs...
04:20:04 <Brandon__> ...I think so?
04:20:06 <shapr> sure, I agree with that.
04:20:17 <shapr> I'm a self-employed programmer, so I have to think that way or starve :-)
04:20:29 <Brandon__> so that's what I'm pointing out.   Additionally, I am pointing out another significant thing, and that is the balance that must be there.
04:20:35 <Brandon__> Something must take care of its own needs as well.
04:20:55 <shapr> ?
04:20:59 <Brandon__> And this is easier from my perspective than when a normal person is personally involved in something.
04:21:31 <Brandon__> For instance, it's not difficult to cover these features, and include the provision that it satisfies the commercial needs of the mysql organization
04:21:50 <shapr> ah, I see
04:21:51 <Brandon__> At whatever level I can account for the things, I account for them.
04:21:57 <shapr> I prefer to view software as a service
04:21:59 <Brandon__> God accounts for all things.
04:22:18 <Brandon__> Likewise... it goes both ways though.
04:22:26 <Brandon__> Sometimes someone codes out of their own needs..
04:22:36 <Brandon__> like you are self-employed, so you must do what supports you
04:22:59 <Brandon__> if you can support yourself and be less stressed out, and therefore perhaps you are more free..
04:23:10 <shapr> I think so
04:23:18 <Brandon__> I'm saying this out of experience--I've had a difficult time focussing on my projects because of monetary problems
04:23:44 <shapr> the self-employed approach often strikes a good balance.
04:23:51 <shapr> not always
04:24:11 <Brandon__> and I've had a difficult time focussing on "money-making" because of the worry that many of these things are not so significant as other paths I might take
04:24:16 <Brandon__> both may result in supporting me
04:24:20 <Brandon__> and my family
04:24:29 <shapr> Generally you have two flavors of full-time stress; either you don't have enough work and you stress about getting more, or you have too much work and you stress about getting it done on time, under budget, etc.
04:25:04 <Brandon__> one is directed towards experience of the struggle to support oneself--not because I need it myself, but because I have people who rely on me... and further, because it's important to understand, I believe, what people go through
04:25:25 <Brandon__> the same reason I go through depression, to understand what the needs are of someone who is depressed
04:25:26 <Brandon__> that's one example
04:25:27 <shapr> There's also the option to try make your projects 'money-making'.
04:25:40 <shapr> I'd rather skip depression.
04:25:41 <Brandon__> yeah
04:25:44 <Brandon__> hehe
04:25:54 <Brandon__> depends on where you will end up and how you will serve
04:25:54 <shapr> I don't want to know what the needs are of someone who's a drug addict.
04:25:59 <Brandon__> "God give me that which is best for me."
04:26:08 <Brandon__> that site, www.voycabulary.com
04:26:25 <Brandon__> I was doing medical research.. so I whipped up a program which made looking up the words easier
04:26:34 <shapr> lambdabot!
04:26:37 <Brandon__> that's after I encountered the difficulty in looking up medical definitions over and over and over
04:26:39 <shapr> @dict-help
04:26:39 <lambdabot> I perform dictionary lookups via the following 14 commands:
04:26:39 <lambdabot> @all-dicts .. Query all databases on dict.org
04:26:39 <lambdabot> @devils ..... The Devil's Dictionary
04:26:39 <lambdabot> @easton ..... Easton's 1897 Bible Dictionary
04:26:39 <lambdabot> @elements ... Elements database
04:26:40 <lambdabot> @foldoc ..... The Free On-line Dictionary of Computing
04:26:42 <lambdabot> @gazetteer .. U.S. Gazetteer (1990)
04:26:44 <lambdabot> @hitchcock .. Hitchcock's Bible Names Dictionary (late 1800's)
04:26:46 <lambdabot> @jargon ..... Jargon File
04:26:48 <lambdabot> [6 @more lines]
04:26:50 <shapr> @more
04:26:50 <lambdabot> @lojban ..... Search lojban.org
04:26:52 <lambdabot> @prelude .... Haskell Standard Prelude
04:26:54 <lambdabot> @vera ....... V.E.R.A.: Virtual Entity of Relevant Acronyms
04:26:56 <lambdabot> @web1913 .... Webster's Revised Unabridged Dictionary (1913)
04:26:58 <lambdabot> @wn ......... WordNet (r) 1.7
04:27:00 <lambdabot> @world02 .... CIA World Factbook 2002
04:27:00 <shapr> oh, I gotta rip out the lojban entry
04:27:08 <shapr> and clean up the @prelude thingy
04:27:35 <Brandon__> add the medical dictionary.. see www.voycabulary.com for some good dictionaries.  www.yourdictionary.com is also a great reference.. but just the one dict is good
04:28:04 <Brandon__> http://cancerweb.ncl.ac.uk/cgi-bin/omd?action=Search+OMD&query=lala
04:28:28 <shapr> you could add the medical dictionary :-)
04:28:30 <Brandon__> that's the "On-Line Medical Dictionary"
04:28:33 <shapr> lambdabot is a code-toy.
04:28:35 <Brandon__> oh.. how do I add it?
04:28:47 <shapr> grab the lambdabot source, look at the dictionary plugin.
04:28:52 * Brandon__ 's eyes brighten a bit
04:28:55 <Brandon__> oh
04:28:59 <Brandon__> thought it was modifiable from here
04:29:04 <shapr> I'm the lambdabot maintainer, so if you have any questions...
04:29:29 <shapr> well, the point is to have a publically displayable way of showing your Haskillz
04:29:32 <shapr> at least, I think so.
04:29:47 <Brandon__> I don't have any ha-skills at the moment :)
04:29:59 <Brandon__> neither much in terms of laughter nor haskell :)
04:30:25 <shapr> so, do you want to jump in?
04:30:36 <shapr> http://www.scannedinavian.org/AvianWiki/HaskellDemo
04:30:42 <Brandon__> I downloaded HUGS.. and am looking at the sourceforge lambabot page
04:30:50 <Brandon__> candy shop release is what I want?
04:30:59 <shapr> feeping creaturitis
04:31:05 <shapr> isn't that one up?
04:31:21 <Brandon__> I think I found the wrong page... http://sourceforge.net/projects/haskell-libs
04:31:30 <shapr> that should be the right one
04:31:36 <shapr> I thought lambdabot 2.0 was up there...
04:31:37 * shapr looks
04:31:53 * Brandon__ began using subversion instead of cvs
04:32:07 <shapr> have you heard of darcs?
04:32:18 <Brandon__> no..
04:32:35 <shapr> http://www.abridgegame.org/darcs/
04:32:48 <shapr> it's a source control system written in Haskell
04:32:54 <shapr> it's also my favorite source control system
04:33:05 <shapr> in my opinion, it's a lot simpler than the other systems I've used.
04:33:31 <neologism> shapr: cvs -> svn transition is MUCH more easier than cvs -> darcs
04:34:12 <shapr> have you tried lelit's tool?
04:34:17 <shapr> it's pretty straightforward
04:34:44 <Brandon__> let me ask your opinion.. (first off.. have you seen subversion?)
04:34:46 <Brandon__> svn
04:35:35 <Brandon__> yeah.. like the ruby designer's idea of "least surprise" (he tried to make it consistent with prior languages and also with common sense, to some extent)
04:35:35 <shapr> I used it a bit.
04:35:49 <Brandon__> I actually wasn't _very_ used to cvs.. barely touched it.. it was too nasty
04:35:53 <Brandon__> but svn is pretty nice..
04:35:58 <Brandon__> good to know darcs is there.. 
04:36:24 <Brandon__> okay.. so returning to my q. on your opinion.. what about darcs makes it more worthwhile than svn?
04:36:46 <Brandon__> (because I've only just barely begun adding projects to svn, if it's worthwhile to switch to darcs, it wouldn't be too much of a problem)
04:37:19 <shapr> well, *for me* it's a bonus that it's written in Haskell, so I enjoy hacking on it more.
04:37:25 <Brandon__> :)
04:37:31 <Brandon__> I understand
04:37:42 <Brandon__> anything else?  for example, svn's handling of revisions is very nice
04:37:54 <Brandon__> entire trees can be copied into sub-branches .. yet almost nothing is done..
04:37:57 <shapr> the extremely distributed nature of darcs is a benefit, but I don't know if svn is just as distributed
04:37:58 <Brandon__> because they are really references
04:38:10 <Brandon__> hm.. distributed?
04:38:22 <Brandon__> (I've been browsing through the darcs documents while we've been speaking)
04:38:39 <shapr> for example, you can grab any of the repositories I'm serving via http
04:38:48 <shapr> and it's a full repo once you grab it
04:39:07 <Brandon__> how's that different from cvs?
04:39:11 <shapr> when you make changes, you can email the patches back to me, or you can email to the actual repo if it's setup that way
04:39:16 <Brandon__> (please don't take my tone as one of defensiveness or anything else negative)
04:39:19 <shapr> cvs requires a user account
04:39:24 <shapr> darcs just requires an http server
04:39:30 <shapr> do you use debian?
04:39:32 <Brandon__> I know sometimes this text stuff doesn't transfer my tone of voice so well :)
04:39:42 <Brandon__> mm.. redhat up until now
04:39:46 <shapr> yah, we all have that confusion sometimes
04:39:53 <Brandon__> in voice too :)
04:39:56 <shapr> ok, I don't know if there are darcs rpms handy.
04:40:00 <shapr> that's true
04:40:13 <Brandon__> it's okay.. ease of install is not such a problem.. compiling or whatever..
04:40:15 <shapr> it's easy to look at incoming info in the way that we expect to see it, rather than the way it is meant.
04:40:33 <shapr> so, you grab my repo, you make some changes
04:40:41 <Brandon__> okay.. so that's good.. we actually need the user-account security.. so that's not a plus in my case
04:40:42 <shapr> I like what you tell me, then I grab the changes from your repo
04:41:06 <Brandon__> ooh.. emailing is interesting.. not enough to sway me.. but I like that that's there
04:41:10 <shapr> a third person checks out the repo from one of us, makes their own changes, we can then pull changes from them just fine
04:41:13 <Brandon__> shows some good thought
04:41:37 <shapr> you can push changes to a repo via ssh, or to another repo on the local filesystem
04:41:54 <Brandon__> right.. in fact, the lazy way.. the normal way.. and the way most people (most people?) take is that reactive way..
04:42:00 <Brandon__> if they're upset, they listen one way.. 
04:42:25 <Brandon__> if they don't like me or are bothered by me, they *look* (listen) for certain things
04:42:30 <shapr> right, it takes effort to listen without the emotional filter
04:42:30 <Brandon__> innevitably they will find them
04:43:15 <Brandon__> hey, we're kind of like, both pulling from some sort of repository of human experience
04:43:24 <shapr> shocking, isn't it?
04:43:28 <Brandon__> there are many common things..
04:43:32 <Brandon__> that's how people communicate
04:43:43 <shapr> hm, I don't see darcs rpms at first glance...
04:44:24 * shapr asks on #darcs
04:44:40 <shapr> oh, if you have ghc installed, you can build darcs yourself
04:45:00 <shapr> here's an interesting comparison from zooko: http://zooko.com/revision_control_quick_ref.html
04:45:30 <Brandon__> Is it okay if I quote from the Qur'an?  Because I think you might find it interesting for some reason
04:46:00 <shapr> darcs only requires a filesystem and the darcs binary for most stuff, though sending patches via email requires a working local mail system, either a sendmail-alike on *nix or MAPI on win32
04:46:04 <shapr> sure, go for it.
04:46:37 <Brandon__> 19. And in their wealth and possessions (was remembered) the right of the (needy,) him who asked, and him who (for some reason) was prevented (from asking).
04:46:37 <Brandon__> 20. On the earth are signs for those of assured Faith,
04:46:37 <Brandon__> 21. As also in your own selves: Will ye not then see?
04:46:37 <Brandon__> 22. And in heaven is your Sustenance, as (also) that which ye are promised.
04:46:37 <Brandon__> 23. Then, by the Lord of heaven and earth, this is the very Truth, as much as the fact that ye can speak intelligently to each other.
04:46:54 <Brandon__> 24. Has the story reached thee, of the honoured guests of Abraham?
04:46:54 <Brandon__> 25. Behold, they entered his presence, and said: "Peace!" He said, "Peace!" (and thought, "These seem) unusual people."
04:47:24 <shapr> sounds nice
04:47:31 <Brandon__> Normally, prior to reciting the Qur'an, it is said, "Besmellaahe Rahmaane Rahim"...
04:47:46 <Brandon__> Meaning, "in the name of God, Most Gracious, Most Merciful"
04:47:51 <Brandon__> nevertheless, this is a programming channel..
04:47:52 <shapr> I haven't read the Qur'an in a few years, I wonder if I still have a copy around here...
04:47:57 <shapr> yes, code!
04:48:01 <Brandon__> what translation do you have?
04:48:09 <shapr> um, I don't remember, it's been awhile.
04:48:13 <Brandon__> k
04:48:35 <Brandon__> some translations are disturbing
04:48:39 <shapr> I'm a baptist by choice, but interested in learning about almost everything.
04:49:19 <Brandon__> that's great.. there's only one reality..
04:49:31 <Brandon__> or at least as much as we can speak intelligently to each other :)
04:49:38 <shapr> right on
04:50:09 <Brandon__> okay.. back to programming.. wrong channel for this.  :)
04:50:42 <Brandon__> I remember #c programming channel on efnet.. the topic was something like: "C Programming discussion | God save America!"
04:50:45 <Brandon__> lol
04:51:11 <shapr> here we have the Cabal
04:51:30 <Brandon__> that was set a long time earlier in the day, before I was talking.. but if you need to say it's my doing... :)
04:51:45 <Brandon__> Cabal.. as in Kaballah type of Cabal?
04:52:02 <Brandon__> if anyone minds our discussion, just let us know.. outside of that, I don't want to be inconvenienced to take my discussion somewhere else.
04:52:26 <Brandon__> At the same time, I do not mean any disrespect, nor to force anything on you.. so feel free to speak up if you're opposed to this.
04:53:03 <Brandon__> shapr, my name is Brandon.  It's nice to meet you.  :)
04:53:08 <shapr> actually, the local Cabal is "The Common Architecture for Building Applications and Libraries"
04:53:14 <Brandon__> lol
04:53:18 <shapr> hi Brandon__, my name is Shae, it's nice to meet you too.
04:53:33 <shapr> actually, Shae is short for shapr, so...
04:53:57 <Brandon__> ?
04:54:05 <Brandon__> Your parents named you Shapr?  :)
04:54:19 <shapr> no, my parents named me Robert Benjamin Gilliam :-)
04:54:24 <Brandon__> ohhh
04:54:28 <shapr> but I got tired of that name.
04:54:37 <shapr> so I changed it.
04:54:39 <Brandon__> haha
04:54:52 <Brandon__> How old are you?  (unrelated to maturity.. just a Q)
04:54:58 <Brandon__> <-- 28
04:55:21 <shapr> I'm 2^5
04:55:26 <Brandon__> I wanted to ask before, and now it feels as if I am asking because "you got tired of the name"
04:55:33 * shapr shrugs
04:55:36 <shapr> no worries
04:55:38 <Brandon__> people are sensitive to context.. because thoughts are led by them.. 
04:55:48 <bourbaki> hi
04:55:51 <shapr> parsers are rarely sensitive to context.
04:55:54 <Brandon__> bourbaki :)
04:55:55 <shapr> hiya bourbaki, how's ham?
04:56:09 <bourbaki> shapr heh i am ham :)
04:56:14 * shapr grins knowingly
04:56:38 <bourbaki> i thought that bourbaki is a more funny name
04:56:44 <Brandon__> afk :)
04:56:45 <shapr> Brandon__: have you tried any functional programming before?
04:56:48 <shapr> aww
04:56:48 <Brandon__> no
04:57:11 <Brandon__> basic with line numbers, then C, then ASM, and done C since then.. (plenty of perl too..)
04:57:22 <shapr> well, if you haven't already seen the learning page, it's at http://www.haskell.org/learning.html
04:57:27 <Brandon__> sticking to perl 4 (newer perl began to seem too hackish)
04:57:41 <shapr> Haskell will twist your brain then, in a good way.
04:57:44 <Brandon__> I have found that I think a certain way about programming..
04:57:51 <Brandon__> s/about/because of/
04:58:21 <shapr> yes, programming affects my thinking as much as thinking affects my programming.
04:58:25 <Brandon__> right.. I hope it's good :)
04:58:37 <shapr> bourbaki: how's math?
04:58:37 <bourbaki> isnt that known as the light bulb paradoxon?
04:58:38 <Brandon__> okay, afk a few .. :)  I'll be back
04:58:48 <Brandon__> what's that, bourbaki?
04:58:50 <Brandon__> read when I get back
04:59:02 <shapr> I thought the light bulb paradox was "how many mice does it take to screw in a light bulb?"
04:59:04 <bourbaki> shapr quite good i have to write down a lot of stuff though now :)
04:59:10 <bourbaki> heh
04:59:35 <bourbaki> its something from i think norvigs site
05:00:02 <bourbaki> ist says that the language you are programming in influences the way you tend to solve problems
05:00:50 <shapr> ah, that's true
05:01:24 <bourbaki> hm it was not norvig
05:01:54 <bourbaki> http://www.paulgraham.com/index.html
05:01:58 <bourbaki> graham it was :)
05:02:19 <bourbaki> i think that site might also yield some gems for the haskell ppl
05:03:58 <shapr> yes, it's a good site
05:04:52 <bourbaki> do you know it?
05:05:12 <shapr> yes, I've read most of it.
05:06:02 <bourbaki> http://www.paulgraham.com/avg.html
05:06:10 <bourbaki> the bulb paradox was what i was reffering to
05:08:54 <bourbaki> i think thats why some day multiparadigm languages will be up front
05:10:17 <bourbaki> i guess you can do logic programming in haskell quite easy cant you?
05:12:11 <shapr> yes, I think so
05:12:36 <bourbaki> just abuseing the pattern matching ;)
05:19:07 <Brandon__> back, btw.
05:20:35 <MakeMyBed> Does anyone here understand the Bellman-Ford algorithm?
05:20:41 <MakeMyBed> Cause I can't find any examples online
05:21:07 <MakeMyBed> Is it exactly like Dijkstra only with the checking for negative cycles added?
05:36:36 * bringert is back!
05:36:43 <bringert> shapr: how did it go?
05:37:39 <shapr> um, I got distracted.
05:37:51 <shapr> oh, all the generated files are the same except for that one...
05:45:45 <bringert> yeah, only the pretty printer should be different
05:52:31 <Igloo> Heh - http://www.haskell.org//pipermail/cvs-ghc/2004-July/021161.html
05:55:37 <Marvin--> Igloo: very productive reply
06:05:21 <Igloo> not implemented
06:05:25 <Igloo> Bah
06:06:34 <Igloo> Marvin: Can I suggest changing "not implemented in NHC" to "monomorphism restriction not implemented in NHC" in the extensions stuff? If you don't know the answer it doesn't make much sense as-is  :-)
06:07:40 <Marvin--> I don't have the slightest idea what you're talking about, Syntax has been doing the extensions stuff
06:07:57 <Igloo> Oh, I got confused then, sorry
06:08:28 <Marvin--> oh, you mean the comment
06:08:35 <Marvin-->       extensionToNHCFlag NoMonomorphismRestriction = Right "" -- not implemented in NHC
06:08:39 <Igloo> Yes
06:08:45 <Marvin--> yes, that comment is seriously confusing :-)
06:10:46 <Marvin--> hmm, checking extensions should probably happen already in configure
06:23:08 <shapr> neat, after our recent website announcement, we're up to ~4600 members.
06:23:20 <shapr> that internet thang is gettin big
06:23:27 <Marvin--> who are "we"?
06:23:40 <shapr> um, website we built, http://www.alis-online.org/
06:23:49 <shapr> it's an EU project
06:24:35 <shapr> g'day saba 
06:24:43 <Igloo> SyntaxLaptop: Can I suggest changing "not implemented in NHC" to "monomorphism restriction not implemented in NHC" in the extensions stuff? If you don't know the answer it doesn't make much sense as-is  :-)
06:24:45 <saba> hey :)
06:24:57 <Marvin--> Igloo: I've already rewritten the comment, actually
06:25:10 <Igloo> Oh, OK, sorry, ignore me...
06:25:21 <Marvin--> -- NHC doesn't enforce the monomorphism restriction at all.
06:27:08 <SyntaxLaptop> Marvin--: so. hm. maybe try to re-send that patch bundle (without the first 2); if that doesn't work, then can you send it one patch at a time so I can see for sure which one's failing?
06:27:34 <Marvin--> SyntaxLaptop: all right
06:28:01 <shapr> geez, I'm getting spam bounced from the hlibs darcs mail address
06:28:07 <Marvin--> sent
06:30:21 <SyntaxLaptop> meh. doesn't work.
06:30:34 <Marvin--> strange
06:30:43 <Marvin--> maybe if I try without signing?
06:30:58 <SyntaxLaptop> try it
06:31:36 <Igloo> What's the error?
06:32:17 <SyntaxLaptop> Fail: Patch bundle failed hash!
06:32:29 <shapr> what's the core dump flag? -ddump-simpl ?
06:32:36 <Igloo> Yes
06:32:40 <shapr> thanks
06:32:56 * SyntaxLaptop pokes shapr
06:33:09 <Marvin--> we need *flags* to dump core these days?
06:33:10 <shapr> eh?
06:33:14 <shapr> haha
06:33:28 <SyntaxLaptop> hi shapr!
06:33:29 <shapr> actually, gf is segfaulting, and I'm trying to track it down
06:33:36 <Marvin--> sent again
06:33:37 * SyntaxLaptop drinks some coffee
06:33:40 <andersca> Marvin--: ...and you said my humor was bad
06:33:41 <shapr> neither strace nor valgrind were particularly illuminating
06:33:43 <shapr> hiya SyntaxLaptop!
06:33:45 <SyntaxLaptop> Marvin-- is so patient
06:33:55 <SyntaxLaptop> NOW WHERE'S THAT PATCH?!
06:34:14 <SyntaxLaptop> speaking of patient, the sourceforge site is really slooooow
06:34:40 <shapr> no kidding
06:34:41 <Marvin--> andersca: I also said that I had a pending patent on bad humor!
06:34:50 <shapr> I thought that was a punding patent?
06:34:55 <Marvin--> no no
06:35:29 <Igloo> darcs lets you write the patch to a file, right? If so, stick it on the web somewhere and have Syn download it and try to apply that. That'd rule out any recoding by MUAs/MTAs
06:35:41 <SyntaxLaptop> yeah, so it still fails.
06:35:44 <SyntaxLaptop> Igloo: good idea!
06:35:49 <shapr> oh dammit, this better be good
06:36:05 * shapr swears viciously at segfaults
06:36:18 <bringert> happy 1.14 didn't help?
06:36:32 <Igloo> Does GHC read files differently according to locale these days, or always as a stream of 8-bit bytes?
06:36:50 <Igloo> If the latter the next thing to try would be setting all the variables to C at each end and see if that works
06:37:01 <Igloo> s/latter/former/
06:37:54 <Marvin--> whoawhee
06:38:00 <Marvin--> Fail: takeLock: unsupported operation (Invalid cross-device link)
06:38:11 <Marvin--> so... --output=/tmp/foo was a bad idea, apparently
06:39:01 <Igloo> Euch
06:39:25 <Marvin--> SyntaxLaptop: http://www.mdstud.chalmers.se/~md9ms/cabal/patchbundle.gz
06:40:02 <shapr> I still haven't fixed that compile error
06:40:35 <Igloo> There are some ^Ms in there. I bet that's the problem
06:40:54 <SyntaxLaptop> Marvin--: worked!!
06:40:56 <Igloo> Something maily canonicalising line endings
06:41:25 <Igloo> So darcs should be adding some more headers or immeing stuff properly or something
06:41:31 <Igloo> <-- clueless about such things  :-)
06:41:52 <shapr> maybe base64 encode the patches?
06:42:01 <shapr> can I get a copy of the broken patch?
06:42:22 <Igloo> It wants to be done in such a way that they are generally readable in people's MUAs
06:42:29 <Igloo> URL just up there ^^
06:42:37 <shapr> I thought that one worked?
06:42:37 <SyntaxLaptop> Igloo: but that's not the broken one :)
06:42:46 <SyntaxLaptop> shapr: you can have as many copies as you want!!
06:42:49 <SyntaxLaptop> I have tons of them!
06:42:53 <shapr> just one is fine :-)
06:42:55 <Igloo> Oh, I imagine s/^M// would give you the broken one
06:44:13 <Marvin--> Igloo: but my patch bundles have worked fine before :-/
06:44:31 <Igloo> Marvin--: You presumably weren't changing bits with ^Ms in before
06:44:39 <Marvin--> I suppose
06:44:43 <Marvin--> I wonder how the heck they snuck in
06:44:47 <Igloo> It's only Distribution/Make.hs that has them
06:44:57 <Igloo> Probably a Simon developing on Windows
06:45:27 <Marvin--> that sounds strange, seeing as I wrote Make.hs from the beginning
06:45:34 <Marvin--> not that I know if anybody else has been at it
06:45:35 <Igloo> Oh, that is odd
06:45:47 <SyntaxLaptop> Marvin--: you put your name on one of the files :)
06:46:02 <Marvin--> ?
06:46:16 <Marvin--> SyntaxLaptop: WDYM?
06:46:33 <SyntaxLaptop> when I wrote it with different encodings, the only difference between the files was how it encoded your name, which was at the top of one of the files.
06:46:38 <SyntaxLaptop> I assume that that's the patch that was failing.
06:46:44 <Marvin--> ohh, yes
06:46:50 <Marvin--> Distribution/Make.hs: UTF-8 Unicode English text, with CRLF line terminators
06:47:00 <Marvin--> otoh, the others are all ascii
06:47:16 <Marvin--> so...
06:47:21 <Marvin--> huh, strange anyway
06:47:30 <Marvin--> and I still don't understand how those CRLF:s got there
06:47:34 <SyntaxLaptop> :(
06:47:41 * SyntaxLaptop plays with the new command-line interface
06:47:45 <Marvin--> very strange
06:48:22 <Marvin--> I mean, unicode being an issue would be understandable if other files in the bundle were in latin1
06:48:33 <Marvin--> but since all the others were ascii, I don't see the problem
06:48:46 * SyntaxLaptop knows nothing of such things
06:49:35 <Marvin--> SyntaxLaptop: well, all ascii text is valid utf-8 text
06:49:56 <Marvin--> so I'm guessing it's the stupid crlf crap
06:50:23 <SyntaxLaptop> the new help interface rules.  thanks.
06:50:52 <Marvin--> M ./Distribution/Make.hs -156 +156
06:50:53 <Marvin--> mwhahaha
06:50:56 <Marvin--> (:set fileformat=unix)
06:51:04 <Igloo> :-)
06:51:07 <Marvin--> I need coffee
06:51:32 <SyntaxLaptop> Marvin--: buy yourself one on me.
06:53:01 <SyntaxLaptop> I think Daan is good at making makefiles
06:54:01 <Marvin--> well, I'm a decent Makefile hacker myself, but I just don't use it a lot with Haskell
06:54:52 * SyntaxLaptop wasn't comparing Daan with Marvin-- :) I like your makefiles just fine. I was just impressed by this 700+ makefile with a _help_ target  in wxhaskell
06:54:56 <Marvin--> SyntaxLaptop: btw, I just implemented some stuff in Simple/Configure.hs to emit a warning if the chosen compiler doesn't support all the needed extensions
06:55:05 <SyntaxLaptop> sweet!
06:55:27 <Igloo> Shouldn't it give an error and fail?
06:55:31 <SyntaxLaptop> so I was thinking of emitting a warning if an extension isn't supported by both ghc & hugs.
06:55:40 <SyntaxLaptop> no matter what compiler they use.
06:55:55 <Igloo> SyntaxLaptop: Put that in ./Setup.lhs lint  or somesuch?
06:56:16 <Igloo> Along with the thing that checks to see if there are any .hs/.lhs files under . not listed in the modules section?
06:56:17 <Marvin--> Igloo: no, I don't think so, because cabal could be wrong
06:56:28 <Igloo> I guess so
06:56:40 <Marvin--> the alternative is a --force, of course, but that's kinda silly
06:56:55 <Igloo> But for it to actually then succeed it would need to be a new extension that needs no flag
06:57:12 <Igloo> (ignoring -98 and -fglasgow-exts being turned on by other extensions)
06:57:40 <Marvin--> I think a warning is visible enough, though, especially since it's during configure and not build
06:58:35 <Igloo> Fair enough
06:59:37 <Marvin--> now, this duplicates the check done in Simple/Build.hs :) should I leave that in or remove it in a you-had-your-chance-now-you're-on-your-own kinda way?
07:00:05 <SyntaxLaptop> Marvin--: how 'bout I'll add the description file format to the documentation so you don't have to. that'll give me a chance to make sure I understand it.
07:00:35 <Marvin--> SyntaxLaptop: good, I was unsure exactly what it was you wanted me to do ;)
07:00:47 <Marvin--> besides, vim's syntax highlighting was complaining about the file for some reason
07:01:00 <SyntaxLaptop> hm. here's a crazy idea: what if, if the compile fails, then it emits the suggestion that maybe that extension isn't supported
07:01:09 <SyntaxLaptop> heh OK. np
07:01:29 <SyntaxLaptop> and "I-told-you-so"
07:02:17 <SyntaxLaptop> so did you notice anything else that needs to be done before 0.1, whic isn't on the TODO list?
07:02:33 <Igloo> "Compile failed. Didn't I tell you the Foo extension wasn't supported? Nobody ever listens to me. Here I am, brain the size of a planet, ..."
07:02:39 <SyntaxLaptop> and here's a question: should we announce a pre-0.1 so people can have a chance to flame us about the description file format?
07:02:46 <SyntaxLaptop> Igloo: hehe
07:02:59 <Marvin--> where'd you think I got the nick Marvin in the first place :)
07:03:08 <SyntaxLaptop> hehe
07:04:04 <Marvin--> I think I updated the parsing todo a bit in one patch or another
07:04:43 <SyntaxLaptop> I saw that
07:11:39 * SyntaxLaptop goes to a meeting
07:11:45 <SyntaxLaptop> meetings.... meetings....
07:16:43 <Marvin--> with all the meetings syntax has, it's a wonder he gets anything done at all
07:18:37 <Marvin--> I wonder if it makes sense to say   newtype Parser r a = R ((a -> P r) -> P r) ; type ReadP a = forall r. Parser r a
07:29:08 <Marvin--> meh, I wonder if the Simons think I'm some sort of nhc developer
07:31:52 <Igloo> I'd prefer ReadPr or something - Parser is a bit generic
07:32:51 <Marvin--> eh, in my mail I wrote "or something like that" :)
07:33:05 <Marvin--> the name doesn't matter to me
07:33:39 * Igloo hasn't read the mail, just what you said above
07:36:26 <Marvin--> SimonMar chimed in with saying that forall was easy to implement, which is kind of orthogonal to my goal ;)
07:36:47 <Marvin--> I have no wish to become an nhc developer just to get cabal working
07:37:43 <Igloo> :-)
07:38:43 <shapr> hiya poing 
07:40:03 <Marvin--> why does nhc98 recommend java-virtual-machine btw?
07:40:35 <Igloo> The Debian package? Probably because it used to contain hat which used to be written in Java
07:40:55 <Marvin--> so it's seriously hysterical raisins?
07:41:03 <Igloo> Yes
07:41:40 <Marvin--> should I file a bug, or will you remember it? :)
07:41:56 <Igloo> I've noted it in my TODO file
07:42:26 <Marvin--> oh, wait
07:42:39 <Marvin--> /usr/bin/hood uses java
07:43:09 <Igloo> Ah, OK
07:43:49 <Marvin--> otoh, either it should be a dependency or hood should be split off in a separate package
07:43:59 <Marvin--> preferrably the latter
07:44:52 <Igloo> It's not being a dependency of nhc98. I might split it out, but if so post-sarge
07:48:27 <Marvin--> right
07:48:42 <shapr> left!
07:51:05 * Cale extends his article MonadsAsContainers on the wiki.
07:51:24 <shapr> that's a good page
07:51:31 <shapr> it really gelled together everything I knew about monads
08:03:56 <Marvin--> I'm curious about this I, Robot movie
08:04:12 <Marvin--> in Asimov's short stories, robots were outlawed on earth
08:04:32 <Igloo> I think we hav the book somewhere. I should read it.
08:04:35 <Marvin--> so.. uh.. have they taken *anything* except the laws of robotics from Asimov's ideas?
08:04:38 <shapr> I heard the movie isn't much like the book.
08:04:48 <Marvin--> well, the "book" as such is a collection of short stories
08:04:53 <shapr> it's got guns and a detective too
08:05:32 <Marvin--> well, yes, I don't object to making a movie inspired by the setting provided by I, Robot without actually picking the story from it
08:05:46 <Marvin--> but if they want to use the setting, use it correctly, damn it :)
08:05:50 <shapr> right
08:05:56 <shapr> same for starship troopers...
08:06:03 <Marvin--> I haven't read that book :(
08:06:11 <Marvin--> but I hear it's quite different
08:06:11 <shapr> the only similarities were the military fighting some big bugs
08:07:35 <Marvin--> "This movie is a thinly disguised anti-war movie that mocks patriotism and such."
08:07:38 <Marvin--> ... really?
08:08:01 <shapr> the funny thing is that Robert Heinlein actually admired patriotism, and was all for it.
08:08:44 <Marvin--> I didn't interpret it as anti-war
08:08:58 <Marvin--> but then, some forms of patriotism kinda mocks itself
08:09:03 <shapr> yah, but the movie really did appear anti-war and anti-patriotism
08:09:18 <shapr> in the actual book, you didn't get to vote unless you'd served in the military.
08:10:25 <Marvin--> well, that sounds more like anti-fascism
08:11:09 <shapr> heinlein believed you shouldn't get a vote unless you'd worked to support the country in question.
08:11:09 <Marvin--> and the movie has this distinction between citizen and wossname but doesn't elaborate on it at all (which is a real pity)
08:11:25 <Marvin--> huh, so the book is more like pro-fascism?
08:14:11 <shapr> I dunno, fascism sounds evil and vicious
08:14:18 <shapr> but heinlein was just about 100% meritocracy
08:14:40 <shapr> where you get support and stuff up to the point of being an adult, then you gotta make it on your own
08:15:17 <Marvin--> sounds like a very cold-hearted world view
08:16:06 <Marvin--> it's like the we-shouldn't-help-the-poor-'cause-it's-their-own-damn-fault-anyway worldview
08:16:55 <Marvin--> and I positively despise the dinstinction between civilian and citizen and having to do military service to get to vote
08:17:46 <RussellOConnor> I tried writing continuations using Cont { runCont :: forall r. ((a -> r) -> r) }, but I couldn't implement callCC. :-(
08:18:16 <shapr> I think Heinlein had some good points.
08:18:28 <Marvin--> RussellOConnor: you don't have to, it's included in the MonadCont class
08:18:43 <shapr> for example, I get very tired of people complaining about stuff when they're not in the least willing to do anything about it.
08:18:56 <Marvin--> of which Cont should be an instance
08:19:02 <RussellOConnor> The one on MonadCont doesn't use rank-2 polymorphism.
08:19:18 <shapr> I've dealt with far too many societal leeches in my travels.
08:19:27 <RussellOConnor> I was testing out your comments on the signature of contintuations
08:19:31 <thebug> shapr: it's like the difference between 'out of work' and 'given up on looking for work' in employment surveys
08:20:06 <shapr> I can't imagine giving up on looking for work.
08:21:32 <RussellOConnor> @type Control.Monad.callCC
08:21:34 <lambdabot> bzzt
08:21:40 <RussellOConnor> @type Control.Monad.Cont.callCC
08:21:41 <lambdabot> Control.Monad.Cont.callCC :: forall m a b.
08:21:41 <lambdabot> 			     (Control.Monad.Cont.MonadCont m) =>
08:21:41 <lambdabot> 			     ((a -> m b) -> m a) -> m a
08:22:08 <shapr> I don't think it's about own-fault-poor, but more about people working for the things they want rather than expecting to be given them with no effort.
08:22:40 <RussellOConnor> The (m b) has to have the same return type as the final (m a)  So the forall r can't easily be pulled into Cont.
08:22:52 * shapr tries to get back on-topic
08:22:58 <RussellOConnor> by return type, I mean result type.
08:22:58 <Marvin--> hmm
08:23:08 <Igloo> Do you know about the LC_* variables, Marvin?
08:23:52 <Marvin--> Igloo: what about them?
08:24:05 <Igloo> Is LC_CTYPE meant to beat LC_ALL?
08:24:23 <norpan> LC_ALL beats all
08:24:47 <norpan> that's why it's called "all2
08:24:54 <Igloo> Ah, I thought it was just a fallback
08:24:58 <norpan> nope
08:25:03 <andersca> norpan: does it beat itself?
08:25:04 <Marvin--> no, LANG is the fallback
08:25:14 <Marvin--> LC_ALL > LC_* > LANG
08:25:19 <norpan> yes
08:25:25 <norpan> Marvin-- is correct
08:25:49 <Igloo> Oh, the libc info page seems to think LC_ALL isn''t an env variable
08:26:12 <Marvin--> RussellOConnor: make sure you don't use any $:s for function application
08:26:28 <norpan> Igloo: "This is not an environment variable [...] Setting this environment variable [...]" :)
08:26:47 <Marvin--> RussellOConnor: with a polymorphic r, you can't use $:s for function application, it bit me too first
08:26:48 <RussellOConnor> Yeah, I got rid of all the $'s
08:26:52 <Igloo> Ermm, yes. Err. Err.  :-)
08:27:00 <RussellOConnor> But still callCC fails.
08:27:04 <norpan> "ceci n'est pas une pipe"
08:27:14 <shapr> |
08:27:18 <norpan> if you now magritte
08:27:42 <shapr> I liked the guy with a peach on his face.
08:27:54 <norpan> http://dubhe.free.fr/gpeint/magritte6.jpg
08:28:36 <norpan> is it a peach, i thought it was an apple
08:28:49 <Igloo> In actual fact I can't make the LC_CTYPE env variable affect the result of the unicode001 test no matter what LC_ALL is set to
08:28:50 <norpan> or do you mean some other picture
08:29:08 <Marvin--> RussellOConnor: hm. right you are. dang.
08:29:12 <Marvin--> Magritte rules
08:29:24 <Igloo> Stuff it, I'll just set both of the thingies and be done with it
08:29:29 <bourbaki> how can i print something from IO Sting to the console?
08:29:37 <norpan> bourbaki: putStr
08:29:38 <Marvin--> Igloo: does it *use* LC_CTYPE?
08:30:00 <Igloo>        The behaviour of iswupper depends on the LC_CTYPE category
08:30:00 <Igloo>        of the current locale.
08:30:01 <bourbaki> thanks
08:30:07 <shapr> maybe it was an apple, I forget
08:30:13 <Igloo> And isUpper wraps that
08:30:27 <norpan> the one i remember is an apple
08:30:45 <Marvin--> Igloo: and are you sure that setlocale is called?
08:30:53 <RussellOConnor> Marvi--: as a consolation prize callCC should have type: forall m a. (MonadCont m) => ((forall b. a -> m b) -> m a) -> m a
08:31:03 <Marvin--> RussellOConnor: heh :)
08:31:21 <RussellOConnor> forall m a. (MonadCont m) => ((a -> forall b. m b) -> m a) -> m a is a bit more clear, but really the same.
08:31:28 * shapr goes back to hacking on Python code
08:31:29 <Igloo> Would GHC have to call setlocale to get the effect of LC_CTYPE but not to get the effect of LC_ALL?
08:31:54 <Igloo> Urgle
08:31:54 <Igloo> ./ghc/rts/RtsStartup.c:    setlocale(LC_CTYPE,"");
08:33:01 <Igloo> Oh, no, that is right
08:33:24 <bourbaki> hm putStr prints a String not IO String right?
08:34:20 <Marvin--> Igloo: that looks right, yes
08:34:41 <Marvin--> strange
08:39:05 <RussellOConnor> @type putStr
08:39:06 <lambdabot> putStr :: String -> IO ()
08:42:35 <bourbaki> http://rafb.net/paste/results/cQZclU78.html
08:42:39 <Igloo> Bother, I can't reproduce it with C code either
08:43:10 <bourbaki> when i call gft i get some tuple like IO (String, String) and i want to print the first string of that thing
08:43:19 <bourbaki> with that function print name
08:46:09 <Igloo> Hmm, I think python is calling setlocale LC_ALL which, even if unset, is setting it to C
08:46:45 <RussellOConnor> bourbaki: you probably want printName to have type (String, Stirng) -> IO String
08:46:49 <Marvin--> Igloo: eh?
08:46:59 <Igloo> Marvin--: eh what?
08:47:23 <RussellOConnor> printName (n1, n2) = putStr n1
08:47:43 <bourbaki> RussellOConnor but i get that thing from gft
08:48:06 <bourbaki> RussellOConnor which returns IO (String, STring) cause otherwise i cant get a random entry from that list
08:48:11 <RussellOConnor> You will use printName as follows
08:48:34 <RussellOConnor> Main : do { thing <- gft;  printName thing }
08:48:53 <RussellOConnor> err Main = ...
08:48:58 <bourbaki> ok sec
08:49:33 * RussellOConnor now remembers why it was so hard to learn how to use the IO monad.
08:49:42 <bourbaki> RussellOConnor :)
08:49:44 <Marvin--> Igloo: setlocale(LC_ALL, "") should set all the categories from proper environment variables
08:50:08 <Marvin--> >>> os.environ['LC_CTYPE'] = 'sv_SE'
08:50:08 <Marvin--> >>> locale.setlocale(locale.LC_ALL, '')
08:50:08 <Marvin--> 'LC_CTYPE=sv_SE;LC_NUMERIC=sv_SE.UTF-8;LC_TIME=sv_SE.UTF-8;LC_COLLATE=sv_SE.UTF-8;LC_MONETARY=sv_SE.UTF-8;LC_MESSAGES=sv_SE.UTF-8;LC_PAPER=sv_SE.UTF-8;LC_NAME=sv_SE.UTF-8;LC_ADDRESS=sv_SE.UTF-8;LC_TELEPHONE=sv_SE.UTF-8;LC_MEASUREMENT=sv_SE.UTF-8;LC_IDENTIFICATION=sv_SE.UTF-8'
08:50:10 <Marvin--> (python)
08:51:17 <RussellOConnor> bourbaki: I believe you can make what you were doing work, but that isn't how it is done.
08:51:31 <bourbaki> RussellOConnor what would be the way?
08:51:49 <RussellOConnor> For the most part, all IO command have IO only in the result type.
08:52:16 <RussellOConnor> For the most part all monads commands have monad only in the result type.
08:52:36 <RussellOConnor> There are of course exceptions.  Usually when you are dealing with higher order functions.
08:52:39 <Marvin--> bourbaki: you should do what RussellOConnor suggests and bind the result of gft to a variable using either do notation or >>=
08:53:24 <bourbaki> ok so usually they return IO stuff but their domain is of the type id usually use and then i bind my stuff together?
08:53:34 <RussellOConnor> correct.
08:53:38 <bourbaki> ah ok :)
08:53:52 <bourbaki> you just have to know that :)
08:54:41 * RussellOConnor should make a note of this sort of question in the Wiki.
08:56:21 <bourbaki> :) cool my program does something ;)
08:56:42 <Igloo> Marvin: So either setlocale(LC_ALL,""); or setlocale(LC_CTYPE,""); should DTRT?
08:57:03 <Igloo> (make and ghc6 do one, ghc-cvs does the other)
08:57:53 <Marvin--> I think it's preferrable to do setlocale(LC_ALL, ""), but doing setlocale(LC_CTYPE, "") shouldn't do any *harm*
08:58:10 <RussellOConnor> bourbaki: I would also recommend making a type synonym for (String, String).
08:58:27 <bourbaki> RussellOConnor why is that ? for convenience?
08:59:29 <RussellOConnor> bourbaki: It is usefull for making the code more clear, and reducing the chance of making an error, IMHO
08:59:44 <RussellOConnor> I like making my Haskell as beautiful as I can.
09:00:10 <bourbaki> yep makes sense thanks you very much
09:00:44 <bourbaki> i got to say that the haskell community is quite cool :) and a lot more polite then other language communities i know
09:00:57 <bourbaki> or channels that is rather
09:01:45 <shapr> that's just because we have a Ninja around to enforce politeness.
09:02:03 <bourbaki> heh :)
09:02:16 <bourbaki> ninjas are something that is needed everywhere
09:02:27 <shapr> people tend to be polite to ninjas
09:03:03 <bourbaki> well sure cause the others wont be impolite again ;)
09:03:08 <shapr> right!
09:03:14 <andersca> bourbaki: we might be a bit lazy, but at least we're pure
09:03:16 <shapr> it's all part of non-verbal communication.
09:03:20 * andersca looks at Marvin-- and ducks
09:03:47 <Marvin--> andersca :)
09:11:06 <bourbaki> hm another dumb question :) how can i concaternate two of these (String, String) things?
09:11:21 <bourbaki> concatNames :: (String, String) -> (String, String) -> IO (String, String)
09:11:21 <bourbaki> concatNames (n11, n12) (n21, n22) = 
09:11:30 <bourbaki> but how do i get to IO ...
09:11:39 <andersca> return 
09:12:03 <bourbaki> ? does retrun always map to a -> IO a?
09:12:13 <Igloo> No
09:12:16 <shapr> @type return
09:12:17 <lambdabot> return :: forall m a. (Monad m) => a -> m a
09:12:18 <Igloo> @type return
09:12:20 <lambdabot> return :: forall m a. (Monad m) => a -> m a
09:12:21 <Igloo> Bah
09:12:26 <bourbaki> hah
09:12:39 <bourbaki> ok but in this case it would map to IO?
09:12:41 <Igloo> Just, errr, demonstrating referential transparency there  :-)
09:13:16 <bourbaki> is that due to the type signature?
09:13:24 <arjanb> yes
09:13:46 <bourbaki> so that return is fittet agains all monads in the space ?
09:13:55 <bourbaki> and picks the right one automatically?
09:14:55 <arjanb> return is part of the definition of monad
09:15:34 <bourbaki> yep i know that i just wonder why it is picking the right return
09:15:41 <bourbaki> cant i do that more explicitly?
09:16:13 <Igloo> It knows the type of return by type inference
09:16:33 <Igloo> So it finds the class instance that gives return the right type and uses that definition
09:17:27 <bourbaki> so there can only be one monad of one type in the same space at a time?
09:17:39 <Igloo> "space"?
09:17:50 <bourbaki> scope
09:18:01 <Igloo> Yes
09:18:27 <bourbaki> is that usefull? doesnt this sometimes lead to problems?
09:18:30 <Igloo> Because there can only be one instance of a class for a given type in scope
09:18:40 <Igloo> You can make new types with newtype don't forget
09:19:03 <bourbaki> i didnt forget cause i didnt know ;)
09:19:13 <Igloo> The only reason it causes problems is that you can't restrict instance importing, but that's a Haskell bug IMO
09:19:21 <Igloo> :-)
09:19:40 <bourbaki> i usually dont like this implicit stuff like that matching in that case
09:19:47 <Igloo> newtype Foo = Foo Int   makes Foo the same as Int but with a different name (and for typechecking reasons you need to wrap values with Foo)
09:20:19 <Smerdyakov> bourbaki, does automatic instantiation of type variables for function applications bother you?
09:20:24 <bourbaki> but what if there are two monads with over the same type?
09:20:45 <Igloo> I don't understand
09:21:33 <bourbaki> hm well if i write retrun in that one line and it matches against the monads that are in scope
09:21:51 <bourbaki> such that the return matches the codomain of my function
09:22:11 <shapr> usually the type signature of your function already has a monad set or implied somewhere.
09:22:18 <bourbaki> what would happen if there are two monads that have a matching return?
09:22:21 <shapr> @type return []
09:22:22 <lambdabot> return [] :: forall m a. (Monad m) => m [a]
09:23:01 <Igloo> "a matching return"?
09:23:03 <bourbaki> @type retrn IO
09:23:04 <lambdabot> bzzt
09:23:08 <bourbaki> @type return IO
09:23:09 <lambdabot> bzzt
09:23:15 <bourbaki> :)
09:23:44 <bourbaki> Igloo i mean it tries to find a return that retruns the right stuff right?
09:23:48 <shapr> @type return () :: IO ()
09:23:49 <lambdabot> return () :: IO () :: IO ()
09:24:11 <shapr> @type return ()
09:24:12 <lambdabot> return () :: forall m. (Monad m) => m ()
09:25:00 <Igloo> bourbaki: I /think/ you'll need to read about type inference to understand this. Anyone know if there's a suitable wiki page or anything?
09:25:46 <Marvin--> bourbaki: you're using some seriously non-standard terminology which means that we don't even understand what you're asking
09:25:47 <bourbaki> is that always disambuigious?
09:25:49 <shapr> you could read about how typeclasses work.
09:25:59 <shapr> I understand the question just fine :-)
09:26:05 <bourbaki> thanks ;)
09:26:09 <shapr> you're saying, which implementation of return is used?
09:26:14 <bourbaki> yes
09:26:33 <bourbaki> and if its possible that there are two retruns that could be used
09:26:34 <shapr> can there be multiple implementations of return around? do you always know which one will be called?
09:26:53 <bourbaki> thats the point :)
09:27:05 <shapr> without overlapping instances, yes.
09:27:10 <bourbaki> shapr your my personal translator now ;)
09:27:13 * shapr grins
09:27:28 <bourbaki> bourbaki -> normalworld ;)
09:27:43 <Smerdyakov> bourbaki, the type of return is such that there can never be conflicting possibilities.
09:28:03 <shapr> though I think -fallow-overlapping-instances can get freaky
09:28:04 <bourbaki> why is that?
09:28:13 <Smerdyakov> bourbaki, it contains the monad used in its type.
09:28:39 <Smerdyakov> bourbaki, and each monad type can have only one instance.
09:28:49 <bourbaki> but what if i implement two monads that are the same beside that the bind binds on another order?
09:28:59 <Smerdyakov> It's not possible.
09:29:03 <Smerdyakov> They _must_ use different types.
09:29:20 <bourbaki> if they are in the same scope that is right?
09:29:24 <Smerdyakov> No.
09:29:30 <Smerdyakov> Instance definitions are all global.
09:29:33 <Marvin--> it all boils down to that you can only make a single Monad instance of a type
09:29:57 <shapr> it would be nice to be able to hide instance definitions sometimes.
09:29:58 <bourbaki> and now my question again ;) is that usefull?
09:30:14 <Marvin--> shapr: big can-of-worms warning
09:30:21 <shapr> yah, I know... even so...
09:30:32 <Igloo> Marvin--: I don't really see why
09:30:52 <Igloo> It seems no worse than it is for functions to me
09:31:18 <Marvin--> wouldn't it be really weird with separate compilation?
09:31:48 <shapr> wouldn't it work just like qualifying function names?
09:31:49 <Igloo> Why would it be weirder than with functions?
09:33:15 <Igloo> Marvin--: At least Malcolm didn't CC his reply to you  :-)
09:34:31 <Marvin--> eh, I'm used to getting CC:s on mailing lists, it doesn't bother me
09:34:56 <Marvin--> hm, the Report doesn't motivate *why* all instances are exported and imported, but surely there must be *some* reason?
09:42:26 <RussellOConnor> bourbaki:  You probably don't want concatNames to have anything to do with IO.
09:42:50 <RussellOConnor> Because it has nothing to do with IO.
09:44:04 <cgibbard> There's a certain level of uncertainty about things which are typed in IO, and you want to avoid it as much as possible. It's much nicer to be able to know that something you are computing is independent of context and will not produce side effects.
09:44:22 <RussellOConnor> concatNames (n1, n2) (m1, m2) = (n1++n2), (m1++m2)
09:44:35 <cgibbard> syntax :)
09:45:00 <cgibbard> perhaps (n1++n2, m1++m2) ?
09:45:08 <RussellOConnor> err, right.
09:45:18 <RussellOConnor> sorry, what cgibbard said
09:45:32 <RussellOConnor> err
09:45:52 <RussellOConnor> I think we all mean to say ((n1++m1), (n2++m2))
09:46:12 <cgibbard> That should be equivalent
09:46:32 <cgibbard> but I didn't see the previous discussion :)
09:46:46 <cgibbard> so I'm not really sure what's going on :)
09:47:14 <RussellOConnor> I got the names in the wrong order the first time, and forgot the parenthesis.
09:47:19 <bourbaki> well i am finished now ;)
09:47:32 <bourbaki> beside that i have to import another list with 100 entries :(
09:48:46 <RussellOConnor> bourbaki:  At some point you are probably going to want to consider using Arrays instead of Lists.  I don't know if you are ready for that.
09:49:05 <bourbaki> heh ;)
09:49:17 <bourbaki> in what way are arrays different from lists?
09:50:16 <RussellOConnor> arrays are fixed size, and I beleive the have fast retrival, since they don't have to be walked like lists do.
09:50:41 <bourbaki> ah well thats just for speed issues right?
09:52:57 <RussellOConnor> perhaps it only comes down to speed issues
09:53:21 <shapr> foo, I just found a bug in my kinesis rom
09:54:29 <bourbaki> yoho ;) the name generator does its job :)
10:02:08 <RussellOConnor> getRandomArrayElement arr = getStdRandom (randomR (bound arr)))
10:02:23 <RussellOConnor> getRandomArrayElement = (getStdRandom . randomR . bounds)
10:02:59 <RussellOConnor> :type (Random.getStdRandom . Random.randomR . Data.Array.bound)
10:03:02 <RussellOConnor> @type (Random.getStdRandom . Random.randomR . Data.Array.bound)
10:03:04 <lambdabot> bzzt
10:03:09 <RussellOConnor> @type (Random.getStdRandom . Random.randomR . Data.Array.bounds)
10:03:11 <lambdabot> (Random.getStdRandom . Random.randomR . Data.Array.bounds) :: forall i
10:03:11 <lambdabot> 								     e.
10:03:11 <lambdabot> 							      (System.Random.Random i,
10:03:11 <lambdabot> 							       GHC.Arr.Ix i) =>
10:03:11 <lambdabot> 							      GHC.Arr.Array i e -> IO i
10:08:54 <shapr> I suspect there are types that will kill @type if -fglasgow-exts is on.
10:21:06 <RussellOConnor> shapr: Are you going to try and kill lambdabot?
10:23:00 <shapr> not right now
10:23:08 <shapr> but I've been trying to think of a sufficiently complex type
10:23:23 <shapr> I know Hal Daume had some mailing list posts on type complexity
10:24:04 <Igloo> I believe there are expression patterns that give exponentially large types, but I'd have to think about it to work them out (or look for one)
10:25:19 <Riastradh> let a = (0,0); b = (a,a); c = (b,b); ... in z   -- That's a pretty big type.
10:25:50 <shapr> @type let a = (0,0); b = (a,a); c = (b,b); in c
10:25:51 <lambdabot> let a = (0,0); b = (a,a); c = (b,b); in c :: forall t t1.
10:25:51 <lambdabot> 					     (Num t, Num t1) =>
10:25:51 <lambdabot> 					     (((t1, t), (t1, t)), ((t1, t), (t1, t)))
10:25:56 <shapr> hmm
10:25:57 <Riastradh> (the 's abbreviated 'has,' by the way)
10:27:01 <Igloo> Ah, true. Maybe it's ones that make type inference take exponentially long that you need to think about
10:27:26 <Marvin--> huh, what's my hugs smoking
10:27:33 <Marvin--> let {a ($0 (0 0) $0) $0 $0} in a
10:27:36 <Marvin--> what is THAT?
10:27:48 * Marvin-- boggles
10:27:53 <shapr> Igloo: right, that's what I'm thinking about.
10:28:35 <Igloo> Marvin--: Is that in an unmatched pattern error or something?
10:28:46 <Igloo> Oh, no, I see
10:28:50 <Riastradh> Oops.  lambdabot may seem a little slow for a minute.
10:28:56 <Marvin--> that was  :t let a = 0 in a
10:29:14 <Marvin--> > :t let a = 'a' in a
10:29:14 <Marvin--> let {a ($0 (0 'a') $0) $0 $0} in a :: Char
10:29:45 <Marvin--> is that supposed to be *pretty* printing?
10:30:32 <Igloo> Anyone got a non-Debian Nox 2003 hugs handy?
10:30:39 <Igloo> s/Nox/Nov/
10:32:26 <Marvin--> on Solaris, yes
10:32:38 <Igloo> And what doe it say?
10:32:54 <Marvin--> > :t let a = 'a' in a
10:32:54 <Marvin--> let {...} in a :: Char
10:33:00 <Marvin--> "{...}" eh
10:33:05 <Igloo> That's Nov 2003 too?
10:33:27 <Marvin--> Version: November 2003
10:33:40 <Igloo> Curious
10:33:55 <Marvin--> very
10:40:02 <Marvin--> andersca: do you remember the names of any of the RHL machines?
10:40:13 <andersca> fairy?
10:41:17 <Marvin--> thanks
10:45:49 <Marvin--> Igloo: our RHL installation says the same thing ("{...}")
10:45:59 <Marvin--> I wonder what makes the debian version so weird
10:46:24 <Marvin--> oh, there's the ninja again, maybe he knows
10:47:46 <Marvin--> SyntaxNinja: what's the deal with hugs saying   let {a ($0 (0 'a') $0) $0 $0} in a :: Char  ?
10:47:59 <Igloo> Then you do    :t let a = 'a' in a
10:48:04 <Igloo> s/T/W/
10:48:26 <SyntaxNinja> Marvin--: I don't understsand.
10:48:44 * Igloo scans the diff and doesn't see anything obvious
10:49:16 <Igloo> But I did discover the existence of /usr/share/doc/hugs/README.Debian
10:53:47 <Marvin--> SyntaxNinja: I did  :t let a = 'a' in a
10:59:19 <aFlag> something i don't like about debian is that they change things around too much
11:00:02 <Igloo> What things?
11:03:35 <aFlag> in the packages, i don't know what they do but i've also heard lots of people complaning about python and tk on debian
11:04:57 <Igloo> I see. They move stuff, but you don't know what. But you know you don't like it...
11:05:51 <Marvin--> I find that Debian's python packages are very sane
11:06:24 <Marvin--> tk I don't use
11:07:22 <aFlag> Igloo: something like that
11:09:18 <Marvin--> sounds like a really informed opinion you've got there, aFlag, congratulations
11:10:09 <aFlag> that's just my first impression, i wouldn't say it's an opinion
11:11:36 <Igloo> Marvin--: Don't forget to report the two darcs bugs, BTW
11:11:53 <Marvin--> two?
11:12:06 <Igloo> The link one and the patch corruption one
11:12:10 <Marvin--> oh, right
11:13:47 <TheHunter> hey, is this bug(?) worth reporting?
11:13:51 <TheHunter> Prelude Control.Monad.Reader> return '0' 1                                      
11:13:51 <TheHunter> <interactive>:1:
11:13:51 <TheHunter>     No instance for (Monad ((->) t))
11:13:51 <TheHunter>       arising from use of `return' at <interactive>:1
11:13:51 <TheHunter>     In the definition of `it': it = return '0' 1
11:13:52 <TheHunter> Prelude Control.Monad.Reader> :t 1                                              1 :: forall t. (Num t) => t
11:13:55 <TheHunter> Prelude Control.Monad.Reader> return '0' (undefined :: forall t. (Num t) => t)
11:13:57 <TheHunter> '0'
11:15:58 <RussellOConnor> return '0' (1::Int)
11:16:46 <Igloo> I don't think your 1 and undefined actually have the same type
11:17:01 <Igloo> 1 will actually be given a monotype while undefined will remain polymorphic
11:17:03 <RussellOConnor> return '0' (error "Boom")
11:17:33 <Igloo> But I'm willing to be corrected on that...
11:18:33 <RussellOConnor> (error "Boom") is roughly equivalent to undefined, correct?
11:18:45 <TheHunter> RussellOConnor: i think so
11:18:52 <Igloo> It has the same type
11:18:59 <TheHunter> Igloo: do you think i should report it?
11:19:33 <Igloo> TheHunter: If I'm right it may well not be a bug. But I'm not too familiar with this stuff and I can't think more about it right now.
11:20:37 <Igloo> Note that the last line is accepted with 1 in place of undefined too
11:21:10 <TheHunter> strange...
11:23:27 <TheHunter> thanks, i think i'll forget about it
11:24:12 <RussellOConnor> Prelude Control.Monad> return '0' undefined
11:24:14 <RussellOConnor> '0'
11:24:27 <RussellOConnor> Prelude Control.Monad> return '0' (error "boom")
11:24:28 <RussellOConnor> <interactive>:1:
11:24:30 <RussellOConnor>     No instance for (Monad ((->) t))
11:24:31 <RussellOConnor>       arising from use of `return' at <interactive>:1
11:24:33 <RussellOConnor>     In the definition of `it': it = return '0' (error "boom")
11:25:02 <RussellOConnor> The fact these are different is somewhat troubling.
11:25:56 <TheHunter> Prelude Control.Monad.Reader> return '0' $ error "boom"
11:25:56 <TheHunter> '0'
11:26:17 <RussellOConnor> oh my
11:26:25 <Marvin--> but won't $ force it into a monomorphic type?
11:27:11 <RussellOConnor> Marvin-- is correct. '$' does strange things with polymorphic functions, as I learned today.
11:27:23 <RussellOConnor> @type ($)
11:27:24 <lambdabot> ($) :: forall b a. (a -> b) -> a -> b
11:27:52 <RussellOConnor> a can't be polymorphic
11:28:13 <TheHunter> i once tried to get a polymorphic $$ by type classes, but haskell's class system doesn't really like me
11:28:44 <Marvin--> the actual error message is kinda weird though
11:30:39 <RussellOConnor> Anyhow, type inference is wierd in Haskell.  If wierd things happen, you can always fix it with type annotations.
11:30:55 <Marvin--> not always :)
11:31:16 <RussellOConnor> Prelude Control.Monad> return '0' ((error "boom")::(forall a. a))
11:31:17 <RussellOConnor> '0'
11:31:29 <RussellOConnor> And when you can't, it's a bug in the Haskell language.
11:33:29 <Marvin--> there are cases where ghc will let through a function definition without a type, and will infer a type, but won't accept the function if you give it the same type that it inferred
11:33:53 <Marvin--> for example when there is unresolved overloading of type variables not present in the type of the function, iirc
11:34:02 <Marvin--> of course, such a function will fail at runtime instead
11:34:21 <Igloo> Lack of scoped type variables can mean you can't assign a type to some expressions too
11:34:21 <Marvin--> but it's still kinda evil
11:34:33 <Marvin--> right
11:34:52 <RussellOConnor>  forall's let you scope type variables, right?
11:35:05 <Igloo> No
11:35:18 <Marvin--> -fglasgow-exts lets you scope type variables :)
11:35:19 <TheHunter> Igloo: can't you do that with -fglasgow-exts?
11:35:29 <Igloo> Yes, but that's not Haskell 98
11:36:29 <Marvin--> oh, but SimonMar will probably tell you that it's easy to implement ;)
11:37:31 <Marvin--> dang
11:37:34 <Igloo> What (I think) ghc does is trivial to implement
11:37:37 <Marvin--> wxhaskell 0.8 was just released
11:37:48 <Igloo> I'm just not convinced it's really what you want
11:38:15 <Marvin--> which means we just missed a point where it would've been nice to fix the package in communication with upstream
11:38:20 <Igloo> So was darcs 0.9.23. Sounds like Syn has a busy time ahead of him  :-)
11:38:39 <Marvin--> yeah
11:38:49 <Igloo> Well, equally, this is the perfect point for things to go unstable
11:39:05 <Marvin--> I guess
11:48:22 <Igloo> Yikes, WXH has averaged over 10 downloads/day?
11:48:39 <Marvin--> wow
11:52:02 <Marvin--> sf.net says the life span is 540 days, but I guess that's the whole project, including before any release
11:53:46 <Marvin--> I'm jealous, pyopenssl has around 4000 downloads too, and that's during three years :P
11:56:38 <Marvin--> I've said it before, and I'll say it again, sourceforge's download interface sucks
11:58:49 <Fractal> [WEBEXPRO(~WEBEXPRO@ool-182e9df7.dyn.optonline.net)] IF YOU ARE INTERESTED IN DOING SOME HEX EDITING FOR LET ME KNOW
11:59:07 <stepcut> sweet!
12:04:49 <Marvin--> oh great, I can't even compile wxhaskell, it seems
12:05:32 <Marvin--> stupid configure script doesn't even check that I have the necessary header files available
12:26:13 <SyntaxNinja> oh, great. new wxhaskell.
12:28:33 <Marvin--> libwxc-0.6.so is called libwxc-gtk2.4.2-0.8.so now
12:28:38 <Marvin--> still doesn't have a SONAME though
12:29:43 <bourbaki> hi
12:43:16 <Igloo> That's a bit better, but having haskell in the name would still be nice
12:45:07 <aFlag> are you guys writting a wxwindow haskell wrapper?
12:48:41 <SyntaxNinja> still no soname, then?
12:48:46 <Marvin--> no, Daan Leijen is
12:48:57 * SyntaxNinja wishes he had sent out that mail yesterday
12:49:10 <Marvin--> still no soname
12:53:44 <Igloo> Crikey, popcon thinks 14 people use ghc5 regularly
12:54:11 <SyntaxNinja> Igloo: any insight as to why installing those wxhaskell 0.6 packages needs ghc5?
12:54:23 <Igloo> eh?
12:54:45 <SyntaxNinja> When installing the packages, I get:
12:54:45 <SyntaxNinja> ...
12:54:45 <SyntaxNinja> ...
12:54:45 <SyntaxNinja> Writing new package config file... done.
12:54:45 <SyntaxNinja> sh: line 1: ghc5: command not found
12:54:47 <SyntaxNinja> sh: line 1: [: =: unary operator expected
12:54:49 <SyntaxNinja> sh: line 1: /usr/bin/ghc5: No such file or directory
12:54:51 <SyntaxNinja> sh: line 1: [: =: unary operator expected
12:54:53 <Igloo> What package?
12:54:53 <SyntaxNinja> Reading package info from "/usr/share/libwxhaskell-ghc6-dev/wx.pkg"done.
12:54:55 <SyntaxNinja> that's not my report, though, it's someone else who's doing it
12:56:02 <Igloo> And what version?
12:56:39 <Igloo> Ah, it's registering with haskell-utils
12:57:25 <Igloo> OK, the real problem is that haskell-utils think ghc5 is installed but it isn't
12:58:08 <Igloo> If you can reproduce that from a clean machine I'm interested to know how
12:58:14 <SyntaxNinja> ok
12:58:34 <Igloo> haskell-utils won't be necessary with what I plan to do with package.conf, incidentally
12:58:54 <SyntaxNinja> how do I tell haskell-utils ghc5 is gone?
13:00:04 <Igloo> haskell-utils --remove-compiler ghc5; haskell-utils --remove-compiler /usr/bin/ghc5
13:00:15 <Igloo> Let me know if that doesn't do it and you have the latest haskell-utils
13:06:43 <Igloo> Yay, ghc-cvs build with only expeceted unexpected failures/passes at last
13:07:37 <Marvin--> expected unexpected failures?
13:08:07 <Igloo> Yup
13:08:21 <Igloo> i.e. those unexpected failures the nightly builds get
13:18:36 <Marvin--> whee
13:18:38 <Marvin--> I've got strawberries
13:18:43 <Marvin--> with whipped cream
13:18:58 <Igloo> Pity. Oh well, you can probably get most of it off.
13:19:07 <Marvin--> haha
13:25:38 <Marvin--> now I don't have any strawberries anymore :(
13:29:16 <SyntaxNinja> did you eat them?
13:29:22 <SyntaxNinja> my gf eats strawberries like a maniac
13:30:20 <Marvin--> of course I ate them, what else would I do with them
13:30:40 <SyntaxNinja> daan is excited about debianizing wxhaskell and offers to make any necessary changes :)
13:30:49 <Marvin--> sounds good
13:30:49 <Igloo> Use them as ammunition in a fight
13:30:59 <Marvin--> Igloo: sounds like a waste
13:31:01 <Igloo> Ferment them to make a new sort of drink
13:31:09 <Igloo> Liquidise them to fuel your time machine
13:31:13 <Igloo> The possibilities are literally endless
13:31:20 <Marvin--> hey, that thing's secret
13:31:55 <Marvin--> strawberry powered temporal physics
13:32:06 <SyntaxNinja> mmmm. temporal physics
13:32:24 <SyntaxNinja> if my gf had a strawberried-powered time machine, she would just eat the strawberries.
13:32:34 <Marvin--> could be something from star trek
13:32:49 <Igloo> That's because women have no grasp of logic
13:33:21 <Igloo> It's clearly better to travel to a time when strawberries are plentiful and free
13:34:36 <SyntaxNinja> is there such a time?
13:35:03 <aFlag> those yet another haskell tutorial exercises are hard
13:35:03 <Igloo> I have seen the future. And it's full of strawberries.
13:35:34 <aFlag> i have to list the elements of a binary tree in a bottom-up left-right manner
13:35:47 <aFlag> may i type here the 4-line code i did?
13:35:51 <Igloo> Yes
13:35:59 <aFlag> elements arg = 
13:36:00 <aFlag>          case arg of 
13:36:00 <aFlag>               Leaf x -> x
13:36:00 <aFlag>               Branch left a right -> (elements left):a:(elements right):[]
13:36:05 <aFlag> what's wrong with it?
13:36:16 <aFlag> i think it's some kind of type check thing
13:36:25 <Marvin--> elements left is a list, a is an element and elements right is a list
13:36:35 <Marvin--> but : takes an element and a list
13:36:40 <aFlag> data BinaryTree a = Leaf a | Branch (BinaryTree a) a (BinaryTree a)
13:37:07 <Igloo> As a style issue, this is equivalent (i.e. equally wrong):
13:37:16 <Igloo> elements (Left x) = x
13:37:21 <aFlag> yeah, i had it like that
13:37:26 <Igloo> elements (Branch left a right_ = (elements left):a:(elements right):[]
13:37:32 <aFlag> but i changed it to see if it would do any good
13:37:38 <Igloo> Aha, OK
13:37:50 <norpan> i like aFlags style better
13:37:52 <Igloo> What is the type of elements?
13:38:10 <norpan> except for the extreme indention that is
13:38:48 <aFlag> i didn't set a type
13:38:56 <aFlag> but it's supposed to return a list
13:38:56 <Marvin--> I find it depends a lot on how long the function name is, how complicated patterns you have etc. which style I prefer
13:39:17 <aFlag> and take a BinaryTree type
13:39:19 <Igloo> OK, but when you are programming in Haskell it helps to always know what type the thing you are trying to write has
13:39:26 <Marvin--> aFlag: I think Igloo is trying to ask you leading questions ;)
13:39:48 <aFlag> hum....
13:40:00 <norpan> i find i like to rename functions, and then it's easier to rename if the function name is written only once
13:40:45 <aFlag> let me think what type should it be
13:40:51 <norpan> aFlag: i think you should explore the ++ operator
13:41:15 <Marvin--> yeah, compare the types of (:) and (++)
13:41:33 * Igloo suggests fixing the simple case first
13:41:35 <norpan> also, x, in Left x is probably not a list
13:41:40 <Igloo> Once you understand why it's wrong
13:41:44 <aFlag> maybe something like a->[a]
13:41:47 <aFlag> i'm probably wrong
13:42:08 <Igloo> aFlag: But you said it takes a BinaryTree - shouldn't that be represented in the type?
13:42:33 <aFlag> probably, but im always confused about the type
13:42:45 <monotonom> Igloo's advice of knowing the type of things you write is not confined to haskell programming.  Any programming needs it.
13:42:56 <Igloo> OK, you want to take a BinaryTree with elements of type a and return a list with elements of type a
13:43:12 <Igloo> Or, in Haskell notation, BinaryTree a -> [a]
13:43:14 <aFlag> so BinaryTree a -> [a]
13:43:18 <Igloo> Right!
13:43:59 <aFlag> monotonom: i know the types, but i'm not good on haskell notation yet
13:44:01 <Igloo> OK, now suppose you give elements a Leaf x. What does it return?
13:44:55 <aFlag> it returns an integer
13:44:59 <aFlag> i got what you said
13:45:06 <aFlag> i should return [x]
13:45:17 <aFlag> and then concartenate it
13:45:21 <aFlag> with ++
13:46:11 <monotonom> I have a revelation.  C++ <--- syntax error in Haskell. :)
13:46:23 <Igloo> Well, it returns an a, but thinking in terms of a concrete example like Integer can help, yes
13:46:30 <aFlag> thanks Igloo
13:47:04 <Igloo> np
13:48:04 <SyntaxNinja> so if I may ask a dumb question... why do we need a soname built into the library when the soname is represented by the filename?
13:48:20 <Marvin--> monotonom: type error, you mean
13:48:28 <Marvin--> monotonom: at least for (C++)
13:49:20 <monotonom> Without the parentheses it is broken beyond salvage.
13:50:02 <monotonom> C++ <--- seriously confused beyond help
13:50:43 <Marvin--> uh, c++ is a syntax error without the parentheses too, and it's a syntax error in C++ too, what's your point?
13:51:25 <monotonom> Nevermind.
13:52:02 <Marvin--> will do :)
13:52:31 <SyntaxNinja> I'm scared to go ask my dumb question on #debian-devel
13:53:24 <stepcut> SyntaxNinja: what's the question ?
13:53:41 <SyntaxNinja> (16:48:06) SyntaxNinja: so if I may ask a dumb question... why do we need a soname built into the library when the soname is represented by the filename?
13:55:01 <stepcut> i don't think I even understand the question :)
13:55:38 <SyntaxNinja> well, maybe I'm confused about something, but Marvin-- and Igloo seem to be dissatisfied with the fact that when the shared library was compiled, it wasn't compiled with the -soname flag
13:56:01 <Igloo> I'm not sure it's /strictly/ needed. What does lintian say about it?
13:56:06 <SyntaxNinja> so then if I say objdump -p /path/toi/foo.so | grep SO
13:56:10 <SyntaxNinja> I'll see the soname.
13:56:12 <SyntaxNinja> hmmm. not sure.
13:56:26 <Igloo> At least, I can't think of something it'll fix if nothing else is broken
13:56:28 * stepcut is not a linking expert 
13:56:36 * Igloo neither
13:57:45 <Igloo> Oh, it needs to be PIC too
13:58:10 <Igloo> Hmm, lintian doesn't actually give any rationale either
13:58:30 <SyntaxNinja> E: libwxhaskell0.6-ghc6: shlib-with-non-pic-code usr/lib/libwxc-0.6.so
13:58:30 <SyntaxNinja> E: libwxhaskell0.6-ghc6: sharedobject-in-library-directory-not-actually-a-shlib usr/lib/libwxc-0.6.so
13:58:31 <monotonom> PIC is understandably crucial
13:59:13 <Igloo> lintian -i gives you some blurb, SyntaxNinja 
14:00:31 <SyntaxNinja> yeah, not very illuminating
14:01:00 <Marvin--> the SONAME is used by ldconfig, afaik
14:01:05 <Igloo> http://www.netfort.gr.jp/~dancer/column/libpkg-guide/libpkg-guide.html#SONAMES
14:01:50 <Igloo> Hmm, but that doesn't really give any rationale either
14:02:11 <Igloo> The only thing I can think of is an additional safety check
14:02:28 <monotonom> It may be a historical relic that now cannot be eliminated.
14:02:54 <SyntaxNinja> wel... hm.
14:03:11 <SyntaxNinja> I guess that you can change the version number of a library and yet not chang its interface, right?
14:03:31 <SyntaxNinja> oh, idono
14:03:47 <Marvin--> don't mix up version number with SOVERSION and SONAME
14:03:52 <Marvin--> completely orthogonal
14:03:57 <SyntaxNinja> right.
14:05:19 <SyntaxNinja> so ldconfig creates symlinks from the soname to the version number?
14:08:08 <Marvin--> I'm guessing you can probably find a lot of info on sonames if you google the archives for debian-mentors ;)
14:11:06 <Marvin--> are there any docs that explain what libwxc is for and what it contains?
14:12:38 <kosmikus> Heffalump: I'm back :)
14:14:41 <SyntaxNinja> Marvin--: idono yet
14:17:25 <Marvin--> I mean, if the ABI of the lib will never change, a SONAME is strictly speaking not necessary, but... well, ABIs do change
14:18:11 <Marvin--> also, I find it weird that no libwxc-something.a is built
14:20:16 * Cale extends #haskell with the identity function.
14:20:33 * Riastradh explorbs.
14:22:00 <Marvin--> SyntaxNinja: http://wiki.linuxquestions.org/wiki/Library-related_Commands_and_Files might be a decent read
14:22:19 <Marvin--> and Junichi's library packaging guide too, of course
14:27:25 * SyntaxNinja goes home
14:33:43 <shapr> man I love unicycling.
14:35:00 <monotonom> Yeah, purely functional with one single fixpoint operator, no state.
14:35:22 <Cale> I love acycling. "Look ma, no wheels!"
14:37:27 <shapr> hoverbike?
14:37:41 <shapr> hm, no 'bike' involved I guess
14:38:00 <aFlag> i like bikes
14:38:31 <Marvin--> kosmikus: so where is this thesis of yours, then?
14:38:44 <shapr> oh, is he awake again?
14:38:53 <shapr> kosmikus: did you have a hangover?
14:39:44 * shapr bounces cheerfully
14:39:45 <stepcut> shapr: if you want to coast to do you have to take your feet of the pedals ?
14:40:02 <shapr> well, yes...
14:40:14 <shapr> but I'm nowhere close to being that good
14:40:55 <shapr> I haven't been able to stay on for more than half an hour or so.
14:41:19 * stepcut goes to a meeting
14:41:20 <shapr> that is, half an hour without falling off or requiring a rest break while hanging onto a signpost
14:42:07 <shapr> aFlag: so, what flag are you?
14:43:01 <shapr> hm, do I play a game or write some code?
14:43:27 <aFlag> a flag
14:43:38 <shapr> any particular flag?
14:43:51 <shapr> signal flag maybe?
14:44:05 <shapr> red flag?
14:51:54 <Cale> Brazillian flag?
14:52:40 <aFlag> nah, no particular flag :P
14:53:51 <monotonom> An angelically chosen flag. (As opposed to a demonically chosen flag.)
14:55:23 <aFlag> it depends on how i'm feeling like during the day
14:57:08 <kosmikus> Marvin--: www.cs.uu.nl/~andres/ExploringGH-submit.pdf
14:57:13 <kosmikus> shapr: no :)
15:02:47 <shapr> aFlag: nifty, a mood avatar
15:03:12 <aFlag> heh
15:14:52 <Heffalump> kosmikus: does it being printed means that it's essentially guaranteed that you will pass?
15:15:45 * Smerdyakov scorns these uptight European schools where you might not "pass." :D
15:15:46 <kosmikus> Heffalump: essentially guaranteed, yes
15:16:02 <Heffalump> smerd: it has to do with standards :-p
15:16:14 <Heffalump> gah, autocomplete doesn't work in this client for some reason
15:16:21 <Smerdyakov> Yes, and the standards of admission there are so low that you need to do such things. ;)
15:16:49 <Heffalump> smerdyakov: so do people from outside the university help to decide on admissions?
15:17:06 <Smerdyakov> Yes, by writing recommendation letters!
15:17:15 <Heffalump> *independent* people
15:17:50 <Smerdyakov> No. But if someone's advisor goes along with thesis work for X number of years, we can generally assume it
15:17:52 <Smerdyakov> 's good enough.
15:18:25 <Heffalump> What kind of quality control do you call that?
15:18:33 <Heffalump> over here we have proper standards...
15:18:52 <Heffalump> where people independently judge the value of work
15:18:59 <Smerdyakov> In fact, I've heard that Oxford admits anyone whatsoever. :P
15:19:17 <Spark> heh
15:19:18 <Spark> yeah
15:19:21 <Spark> cambridge rejected me
15:19:22 <Spark> retards
15:19:28 <Smerdyakov> Or maybe it was Cambridge.
15:19:30 <Smerdyakov> I get these things confused.
15:19:31 <Heffalump> spark: and Oxford admitted you?
15:19:41 <Smerdyakov> Which one has Simon P-J near it?
15:19:45 <Heffalump> Cambridge.
15:19:54 <Smerdyakov> OK. That's the one I heard about!
15:19:57 <Spark> nah i went to warwick
15:20:02 <Heffalump> Are you referring to my comment on Kirsten's LJ?
15:20:06 <Smerdyakov> Yes. :D
15:20:11 <Spark> i didnt like warwick much though
15:20:14 <Heffalump> if so, I suggest you go and learn to read :-p
15:20:17 <Spark> although i got a 1st class degree
15:20:21 <Spark> im going to imperial college now
15:20:27 <Spark> i want to taste the london goth scene :o
15:21:21 <Smerdyakov> Seriously, there is a lot more competition for admission at top US universities, so there is less need in general for after-admission quality control... especially after the first few years of the PhD program, when people can be weeded out.
15:22:23 <Heffalump> that's still not the point; lack of external influence on the process makes it too easy to abuse
15:22:52 <Smerdyakov> There _is_ external influence. You won't get a job without impressing the research community. You can still be a failure with a PhD.
15:23:13 <Heffalump> That's not quality control on the PhD award itself, though.
15:23:31 <Heffalump> And people outside academia won't be able to tell one PhD from another, so the title does mean something.
15:23:42 <Spark> phds are influenced by other members from within the department
15:23:47 <Spark> i.e. from different research groups
15:23:49 <Spark> and they have vivas
15:24:10 * Heffalump wonders what Spark is talking about
15:24:26 <Spark> in order to get a phd from warwick
15:24:31 <Spark> you have to research for 3 years then write a thesis
15:24:38 <Smerdyakov> I hate those damn vivas! (???)
15:24:43 <Spark> during this period you're supervised by your supervisor
15:25:01 <Spark> (so its important you have a good one)
15:25:13 <ayrnieu> and unsupervised by your unsupervisors!
15:25:23 <Heffalump> spark: I know how PhDs in the UK work :-)
15:25:31 <Spark> your thesis is then read by 2 other lecturers from the department and then they give you a viva
15:25:44 <Heffalump> errm, doesn't the viva have one external examiner?
15:25:52 <Spark> hm possibly
15:26:01 <Spark> i know a guy who didnt get his phd though
15:26:04 <Heffalump> well, it does everywhere else in the UK :-)
15:26:07 <Spark> because his supervisor was a total retard
15:26:14 <Spark> (this was biology)
15:26:31 <Heffalump> it's usually down to a supervisor cockup if someone gets to the viva and then doesn't pass
15:26:38 <Spark> and oked his experiments even though they had a fundemental flaw that rendered the results meaningless
15:26:43 <Heffalump> unless they submit against the advice of the supervisor
15:26:47 <Spark> yeah
15:26:52 <Heffalump> sometimes people can get landed with major revisions, though
15:27:01 <Spark> if you have a good supervisor and you do what you're told, you cant fail to impress
15:27:06 <Heffalump> outright failure is very rare
15:27:13 <Heffalump> research is about more than just doing what you're told!
15:27:20 <Spark> :)
15:27:29 <Spark> you push, he steers
15:27:43 <Spark> its even worse with undergraduate projects
15:27:45 <Heffalump> that's the ideal student-supervisor relationship, yeah
15:27:49 <Spark> since the supervisor marks it :)
15:27:56 <Heffalump> oh, they don't here
15:28:00 <Spark> so you do what he says, he has no reason to mark you down
15:28:43 <Heffalump> projects here get assessed by two examiners and not by the supervisor, though the supervisor does have to fill in a form commenting on the project
15:29:22 <Spark> ah
15:29:43 <Spark> here the assessor was the supervisor, and there were a pair of moderators as well
15:29:57 <Heffalump> what was your project on?
15:30:17 <Spark> empirical modelling
15:30:19 <Spark> suitably obscure
15:30:26 <Spark> ive explained it on irc about 9827493247982347 times now
15:30:35 <Heffalump> that's ok, I don't care :-)
15:30:45 <Spark> basically involved about 12k lines of C
15:30:47 <Heffalump> I was just vaguely wondering if I'd have known your supervisor.
15:30:53 <Spark> ah
15:30:56 <Heffalump> But I doubt it given the subject
15:30:58 <Spark> meurig beynon
15:31:24 <Spark> empirical modelling is interested, but way too ambitious for a little research group :)
15:31:28 <Spark> s/interested/interesting/
15:33:32 * Heffalump lol at http://www.dcs.warwick.ac.uk/people/staff/Leslie.Goldberg/
15:34:59 <Marvin--> "Please do not publish this email address on any web lists or web pages."
15:35:01 <Marvin--> ...
15:35:30 <Heffalump> indeed.
15:44:17 * Marvin-- sighs
15:46:02 <Marvin--> reading someone else's thesis always makes me sad and angry with myself that I'm no closer than two years ago to writing one myself
15:46:49 * esap has it just the opposite. Reading other's thesis makes me sad and angry at how bad my thesis was :-)
15:46:53 <monotonom> But it should also make you happy because you have role models and model theses to mimic.
15:47:35 <Marvin--> "no closer" as in "failed twice to get a PhD student position"
15:48:26 <Smerdyakov> Marvin--, *ahem* you have failed because of some very basic faults attributable to lazyness.... like only applying to one school!
15:48:34 <Marvin--> oh yes
15:48:45 <Marvin--> I'm not blaming anyone but myself
15:48:57 <monotonom> Then the next best thing you should do is to become an extremely successful entrepeneur.  So that future PhD students and their supervisors come kneel in front of you for grants.
15:49:29 <Marvin--> Smerdyakov: that's the "angry" part, y'see
15:50:02 <monotonom> If a million PhD students obtain grants from you, your name will appear in a million theses.
15:50:41 <monotonom> Knuth's name also appear in a million theses but he got that the hard way.
16:00:47 <Marvin--> meh, enough self-pity for one day, I'm off to bed
16:15:15 <bourbaki> hi
16:36:57 <stepcut> are there debian packages for cabal yet ?
16:37:49 * stepcut hops around on one foot
16:38:41 * Riastradh shoots stepcut's other foot.
16:39:21 <bourbaki> whats cabal?
16:39:38 <Riastradh> A group of Haskell hackers intent on taking over the world.
16:39:57 <bourbaki> are they mice?
16:40:18 <Riastradh> No.  Though they are mammals, they're not mice: they're ninjas.
16:40:24 <Riastradh> They like to flip out and kill people!!
16:40:38 <bourbaki> heh
16:40:43 <stepcut> well, I need a debianized version of cabal today... so if no one has one, I guess I better get started :p
16:58:00 <Heffalump> is cabal out, then?
17:06:50 <stepcut> Heffalump: just betas, as far as i know
17:41:27 <jadrian> hello
17:44:00 <jadrian> I was thinking about using an hash table 
17:44:35 <jadrian> Is a FiniteMap of lists a bad idea?
17:44:37 <aFlag> good thinking
17:45:19 <jadrian> I noticed there was an hash table implementation in the libs, but the operations require IO...
17:45:52 <aFlag> why would it require IO?
17:45:52 <jadrian> Why is that? Destructive updates? 
17:46:01 <jadrian> aFlag: I asked first :)
17:46:07 <Riastradh> Presumably, jadrian.
17:46:14 <aFlag> eheh
17:47:03 <jadrian> ok so FiniteMap of lists sounds like a sensible implementation right?
17:48:02 <jadrian> It just felt weird finding out that the one in the libs uses IO, I thought I could be missing some problem...
18:08:43 <aFlag> an example in yet another haskell tutorial doesn't seem to be working
18:08:45 <aFlag> cfold' f z [] = z
18:08:47 <aFlag> cfold' f z (x:xs) = f x z (\y -> cfold f y xs)
18:08:47 <aFlag> cfold f z l = cfold' (\x t g -> f x (g t)) z l
18:09:16 <aFlag> it's in the chapter about cps
18:09:23 <aFlag> does anyone have some idea?
18:13:25 <Cale> aFlag: one sec, let me have a look
18:18:45 <aFlag> i'm not understandig much of this chapter and the example is not really making things clearer hehe
18:20:07 <monotonom> fold in cps? yuck
18:20:52 <aFlag> if it will teach me cps... :P
18:21:14 <monotonom> what does not work? it doesn't help you understand things?
18:21:38 <aFlag> no
18:21:42 <aFlag> it doesn't compile
18:22:09 <Cale> aFlag: missing '
18:22:14 <Cale> in the second line
18:22:18 <monotonom> is there a typo?  In the third line, what Cale said.
18:22:21 <Cale> they're not supposed to call each other
18:22:38 <Cale> cfold' calls cfold'
18:22:42 <Cale> not cfold
18:22:43 <monotonom> Ah in the second line instead.
18:22:49 <aFlag> oh, i thought that was wierd
18:23:02 <aFlag> but i thought i wasn't understanding things :P
18:23:15 <monotonom> cfold' is a helper function of cfold.
18:23:34 <monotonom> cfold calls cfold', then cfold' loops over itself.
18:23:55 <monotonom> (Sorry for using the politically incorrect word "loop".)
18:24:22 <aFlag> thanks cale
18:24:30 <Cale> no problem
18:24:31 <aFlag> now i'm back to trying to understand it :)
18:25:31 <Cale> Don't worry too much about grasping CPS too quickly - it's uncommon to see CPS used very much in Haskell.
18:26:13 <Smerdyakov> <TweedleDee> Would you like some continuations?
18:26:21 <Smerdyakov> <TweedleDum> No, thanks, I'll pass.
18:26:48 <Cale> :)
18:27:42 <monotonom> Hahahaha
18:27:48 <aFlag> heh
18:28:10 <monotonom> shameless plug http://slashdot.org/~Albert%20Y.C.%20Lai/journal/76842
18:28:45 <SamB> hmm, I never thought I'd see something get ENAMETOOLONG in Linux ;-)
18:28:59 <SamB> however, :-(
18:29:37 <Smerdyakov> monotonom, your IRC nick is of a very different flavor than your real name!
18:30:00 <monotonom> My real name has no flavour, now does it?
18:30:19 <Pseudonym> aFlag: I wrote the hash table implementation.  The operations require IO because it's concurrent.
18:30:38 <monotonom> My nick reflects a small personal belief of mine, and also a bit of ancient Chinese philosophy.
18:30:43 <Pseudonym> It was specifically designed so that multiple threads can use it.
18:30:45 <aFlag> oh
18:31:38 <aFlag> hum... i see, pure functions don't work too well with threads?
18:32:15 <Pseudonym> Think about the interface.
18:32:29 <Pseudonym> Inserting something into a hash table turns a hash table into another hash table.
18:32:39 <Pseudonym> Now assume you need this concurrent.
18:32:54 <aFlag> oh i get it
18:32:57 <Pseudonym> Right.
18:33:44 <monotonom> The little bit of philosophy is this. "The ink has five colours." - ancient Chinese proverb.  There is much diversity and richness in what the majority, shallow people consider dull.
18:34:11 <monotonom> So I called myself "monochrom".  Later I changed that to "monotonom" for the palindrome.
18:35:04 <aFlag> isn't it 3 colors?
18:35:32 <Pseudonym> monotonom: I still program in CPS occasionally.
18:35:59 <Pseudonym> If the compiler does support inlining but doesn't support deforestation, it's sometimes the only way to speed up some critical code.
18:36:12 <Pseudonym> Also it lets you finely control evaluation order.
18:36:14 <Smerdyakov> The other way would be to use better-designed combinators. ;)
18:36:15 <Riastradh> What compilers don't do that?
18:36:24 <Riastradh> ...that you care about.
18:36:36 <Pseudonym> GHC used not to.
18:36:41 <Pseudonym> Not in the way I needed.
18:36:54 <Riastradh> How long ago?
18:36:59 <Pseudonym> Some time ago.
18:37:09 <Riastradh> How incredibly specific.
18:37:12 <Pseudonym> I found this out by dumping core.
18:37:16 <Pseudonym> Sorry, CORE>
18:37:41 <SamB> what is CORE>?
18:37:43 <Pseudonym> ("Dumping CORE" means something different to a GHC user than a C user.)
18:37:54 <SamB> oh, right
18:38:39 <Pseudonym> monotonom: I always thought your nick was a palindromic reference to category theory.
18:38:42 <Pseudonym> Shows you how much I know.
18:50:32 <aFlag> i'm sorry i was talking something foolish in another channel hehe
