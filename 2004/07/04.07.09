01:57:05 <bourbaki> hidiho
01:57:56 <bourbaki> cptchaos which uni do you study at?
01:58:17 <cptchaos> bourbaki: Uni-Hamburg
01:58:35 <bourbaki> ah and what CS?
01:59:14 <cptchaos> bourbaki: math and physiks
01:59:28 <cptchaos> bourbaki: and you?
01:59:43 <bourbaki> wow! cool . i study cognitive science
02:04:02 <Heffalump> my uncle lives in Hamburg
02:04:15 <bourbaki> small world :)
02:04:21 <Heffalump> absolutely :-)
02:04:55 <bourbaki> Heffalump whats your profession?
02:05:12 <Heffalump> me? CS Research atm.
02:05:23 <Heffalump> will be becoming a compiler hacker for ARM in November
02:05:43 <bourbaki> cool
02:05:53 <bourbaki> what field do you do research in?
02:08:07 <Heffalump> programming languages
02:08:44 <bourbaki> and what is it that you are interested in in particular when you do research in that field?
02:09:10 <bourbaki> i cant imagine what kind of questions you ask when you research that field
02:37:21 <bourbaki> esap are you available ;)?
04:38:27 <bourbaki> bk
06:33:15 <MakeMyDay> ok so I have this graph data type defined: > data Node 	= Knoten [String] String [String]  		 
06:33:15 <MakeMyDay> >		   deriving (Show, Eq) 
06:33:24 <MakeMyDay> type Graph 	= [Node] 
06:34:02 <MakeMyDay> and I am trying to build a function that gives out all the Nodes that are reachable from the input Node.
06:34:25 <MakeMyDay> I have a function that gives out the direct neighbours of the Node.
06:34:32 <MakeMyDay> But I just can't get it to go deeper.
06:34:43 <thebug> what is it that people keep typing that produces a highlighted 'II' on my screen?
06:34:55 <kosmikus> tab?
06:34:56 <thebug> I've been seeing this for a couple of days in #haskell
06:35:10 <MakeMyDay> IOW I can't get a good enough recursion going.
06:35:20 <thebug> kosmikus: ah, that's probably it
06:35:24 <MakeMyDay> THere must be some trick.
06:39:20 <arjanb> MakeMyDay: first try to write a function that gives the 2 step neighbours of a node
06:40:59 <MakeMyDay> you mean the the neighbours 2 levels deep?
06:41:12 <arjanb> yes
06:48:35 <kosmikus> TheHunter: you should not write comments on heise ;) you'll not find open-minded people there ...
06:49:54 <bour> heh kosmikus what did he wrote ;)?
06:50:08 <bour> kosmikus your german also?
06:50:45 <TheHunter> kosmikus: you're right
06:51:55 <kosmikus> bour: yes, I'm from .de
06:53:06 <bour> kosmikus do you study ?
06:54:08 <TheHunter> kosmikus: btw, i've kind of decided to stay in wuerzburg, it's probably not wise to change the university before I even know what I want to do.
06:54:56 <bour> TheHunter what do you study?
06:55:16 <kosmikus> bour: working towards my PhD
06:55:32 <bour> kosmikus cool what field?
06:55:34 <TheHunter> bour: math
06:56:32 <TheHunter> bour: what about you?
06:56:44 <bour> i study cognitive science
06:56:59 <kosmikus> 4 to 8 hours for a minesweeper; I think I'd accept the challenge ;)
06:57:51 <bourbaki> kosmikus whats your phd thesis about?
06:59:04 <kosmikus> generic programming in haskell
07:00:50 <bourbaki> kosmikus can you tell me what lifting is?
07:01:26 <kosmikus> I'm really confused: if X studied CS at a university, and X doesnt get a job aftewards because "he hasn't learnt C", why does everyone think that's the fault of the university?
07:01:48 <kosmikus> bourbaki: what kind of lifting?
07:02:43 <TheHunter> kosmikus: do you have a heise account?
07:03:31 <kosmikus> TheHunter: no
07:04:06 <kosmikus> I read the heise forums just for amusement ...
07:04:19 <bourbaki> kosmikus what kinds are there?:)
07:04:32 <TheHunter> kosmikus: i wish i wouldn't have one either...
07:04:59 <bourbaki> imho a good CS student should be independant of languages
07:05:31 <bourbaki> he should be familiar with the programming concepts and able to adapt top new languages
07:06:46 <kosmikus> ideally, yes, but certainly it cannot hurt to know a few mainstream programming languages; the question is whether the university should waste time teaching these language to the student ...
07:07:02 <bourbaki> no
07:07:14 <bourbaki> they should use their time to teach them the concepts
07:07:26 <kosmikus> bourbaki: in which context do you want to know what lifting is?
07:07:32 <bourbaki> you cant teach a language you have to write programs to learn them
07:07:34 * TheHunter wonders why he is so religious about programming languages
07:07:43 <MakeMyDay> As a strugling CS student with Haskell I need some heeeelp :/
07:07:46 <kosmikus> bourbaki: I'm not sure if there is a "generic" definition, I think it's a relatively vague concept
07:08:28 <bourbaki> kosmikus i have seen something about lifting on the tips and tricks haskell wiki if i only know the url again i just wondered what that is in math
07:08:36 <kosmikus> MakeMyDay: ask, otherwise no one can help
07:09:29 <bourbaki> kosmikus ah http://planetmath.org/encyclopedia/LiftingOfMaps.html ill read that first :)
07:10:19 <MakeMyDay> I have a list. The elements of that list point to other lists. I can't get a rekursion working that will give me out a list with all elements that are reachable from a starting list.
07:10:28 <bourbaki> hmmm
07:10:55 <MakeMyDay> I can't get in the functional logic behind this problem
07:11:06 <kosmikus> MakeMyDay: still your graph problem from above, right?
07:11:16 <MakeMyDay> yeah :/
07:11:22 <MakeMyDay> I can't stop thinking imperativ about it
07:11:30 <kosmikus> MakeMyDay: did you follow the suggestion and implement a 2-step-neightbours function ?
07:11:33 <Heffalump> have you read the paper about structuring DFS in Haskell?
07:11:34 <MakeMyDay> I tried
07:11:45 <bourbaki> Heffalump dfs?
07:11:59 <MakeMyDay> but my problem is at that step too.
07:12:21 <Heffalump> depth-first-search
07:12:44 <bourbaki> ah :)
07:12:46 <MakeMyDay> no... which is actually exactly what I am trying to achive..
07:13:34 <Heffalump> http://www.cse.ogi.edu/~jl/Papers/dfs.ps
07:13:39 <bourbaki> hm thats something i could do writeing a generic search algorithm for that FP graph lib on haskell.org
07:14:20 <bourbaki> kosmikus have you had a look at that url? what does lifting mean in that context in haskell?
07:16:03 <kosmikus> bourbaki: sorry, I've not yet looked at the url
07:17:22 <bourbaki> kosmikus thats must that you have two maks f and p and the lift is something like p o f^~ = f just wonder what that is good for
07:18:32 <kosmikus> yes, that's a bit like what I would've said would I have to vaguely define it: "making a mapping applicable in a wider context"
07:19:11 <kosmikus> but I just browsed the wiki, and they seem to use "lifting" in the sense of "lifting a local function to a higher syntactic level"
07:19:48 <MakeMyDay> Is there no cheap way to just use a static variable in Haskell?
07:20:10 <bourbaki> kosmikus and what is that good for?
07:20:41 <bourbaki> kosmikus i mean you wont gain anything if you have a lot of these p functions instead of the f functions directly would you?
07:22:00 * TheHunter doesn't think lifting in math and haskell are the same (in case of monads you would need a covering map m a -> a, which generally doesn't exist)
07:22:36 <kosmikus> the idea of lifting is that you have a function of type a -> b, and you need a function of type t a -> t b (for example, [a] -> [b]), then there might be an easy way of building a function of the required type from the one you have
07:22:58 <kosmikus> TheHunter: yes, but there are monadic lifting functions, such as 
07:23:02 <kosmikus> @type Control.Monad.liftM
07:23:03 <lambdabot> Control.Monad.liftM :: forall r m a1.
07:23:03 <lambdabot> 		       (Monad m) =>
07:23:03 <lambdabot> 		       (a1 -> r) -> m a1 -> m r
07:24:00 <bourbaki> ah ok sounds reasonable
07:24:07 <TheHunter> kosmikus: yes, but you won't find a suitable projection p, i guess
07:24:39 <bourbaki> TheHunter i think you map it so something where you know that such a p exists
07:24:47 <bourbaki> ie the list example
07:25:19 <kosmikus> TheHunter: why not?
07:25:24 <TheHunter> i'm confused
07:26:52 <TheHunter> m a - - -> m b
07:26:57 <TheHunter> |             |
07:26:59 <TheHunter> v          v
07:27:14 <TheHunter>    a ----->  b
07:27:31 <TheHunter> :(
07:27:54 <TheHunter> well, we have the map a->b and we want m a -> m b
07:28:54 <TheHunter> if there were suitable vertical projections, we could first draw the diagonal arrow ma -> b
07:29:10 <TheHunter> and then lift it to m a -> m b
07:29:28 <TheHunter> which would be lifting in the mathemtical sense
07:32:29 <TheHunter> (that's how you can lift a map between projective spaces to a map between speres for example)
07:32:52 <TheHunter> in haskell, it's similar, but you can't find suitable projections, unfortunately
07:33:19 <kosmikus> what's your problem with the projections?
07:34:01 <TheHunter> what should they be for example for maybe
07:34:45 <TheHunter> otoh, if you reverse the vertical arrows and use return, the lifted map isn't uniquely determined anymore
07:36:16 <kosmikus> I can lift a function f :: a -> b to Maybe a -> Maybe b by mapping nothing to nothing and mapping Just x to Just (f x)
07:37:56 <kosmikus> I can define a projection from Maybe a -> a by mapping Just x to x and Nothing to an arbitrary value of type a
07:38:10 <TheHunter> kosmikus, of course you can, but i think you can't make it in such every that it coincides with the mathematical lifting, though they seem pretty similar
07:38:37 <kosmikus> if I extend this projection naturally to the function space Maybe a -> Maybe b, then the projection cancels out the lifting
07:39:15 <TheHunter> kosmikus, allright, at least it works for maybe (i'd map Nothing to bottom)
07:39:49 <kosmikus> TheHunter: the functions don't have to be definable in Haskell
07:40:11 <TheHunter> kosmikus: that's an interesting point
07:40:15 <kosmikus> I think all that the condition really wants to ensure is that lifting is an injective operation
07:41:19 <kosmikus> I have to leave
07:41:34 <TheHunter> kosmikus: there could be a ()-Monad for which lifting isn't injective...
07:41:39 <TheHunter> bye, kosmikus
07:55:15 <bourbaki> can someone explain curry to me?
07:55:26 <bourbaki> curry :: ((a,b)->c) -> (a -> b -> c)
07:55:36 <bourbaki> thats the type of the curry func
07:55:40 <Marvin--> what do you want to know? :)
07:55:44 <bourbaki> but curry looks like this
07:55:54 <bourbaki> curry f x y = f (x,y)
07:56:28 <bourbaki> f is the function and x y are the parameters but shouldnt the parameters on the left side be paired ? (x,y)
07:56:28 <Marvin--> note that  curry f x y = f (x,y)  is equivalent to  curry f = \x y -> f (x,y)
07:56:57 <Marvin--> no, *f* is the function that wants a pair of arguments, the type of  curry f  is a -> b -> c
07:57:25 <Marvin--> @type curry
07:57:27 <lambdabot> curry :: forall c b a. ((a, b) -> c) -> a -> b -> c
07:57:30 <bourbaki> yes
07:57:30 <Marvin--> @type curry fst
07:57:32 <lambdabot> curry fst :: forall a b. a -> b -> a
07:57:41 <ibid> bourbaki: the parentheses around (a -> b -> c) may be confusing you
07:58:06 <ibid> bourbaki: they are redundant, but it's easier to grasp when they are not there
07:58:07 <bourbaki> (a -> b -> c) is the resulting function right?
07:58:16 <ibid> yes
07:58:25 <bourbaki> i just wonder why f (x,y) is on the right
07:58:45 <bourbaki> ahhhh
07:58:45 <ibid> because it should be there :)
07:58:47 <Marvin--> where else would it be?
07:58:51 <bourbaki> dumb me
07:59:03 <bourbaki> :)
07:59:09 <bourbaki> its of course a new function
07:59:21 <Marvin--> easy mistake, the curry and uncurry functions give most people pause when they first see them
07:59:47 <bourbaki> you have to "translate" it to a paired expression
08:00:07 <bourbaki> the result is the function on the left
08:00:22 <bourbaki> thanks anyway :)
08:00:50 <Marvin--> the result is what?
08:00:56 <bourbaki> of curry
08:03:57 <MakeMyDay> :/ seriously I am going nuts over this
08:04:21 <bourbaki> what?
08:04:45 <bourbaki> would anyone of you be interested in something like implementing some ai atuff with haskell?
08:04:56 <Lemmih> MakeMyDay, Try breaking the problem down to smaller bits.
08:04:57 <bourbaki> i am missing that on the haskell side in the lib section
08:05:35 <SyntaxNinja> bourbaki: I work for a company that implements AI in Haskell all the time.  but we don't release that code :(
08:05:52 <bourbaki> SyntaxNinja cool!!! what company is that and where is it?
08:06:04 <SyntaxNinja> bourbaki: you should write the libraries, or write the modules and type sigs at least!
08:06:13 <SyntaxNinja> bourbaki: http://www.aetion.com
08:06:15 <bourbaki> sigs?
08:06:21 <SyntaxNinja> type signatures.
08:06:35 <SyntaxNinja> nail down the API you want. post it in a public place, and maybe you and others can take bits of it and work on it
08:06:48 <SyntaxNinja> use darcs to maintain the code so people are encouraged to hack on little chunks.
08:06:55 <bourbaki> i want to write a generic search algo for fgl
08:07:26 <bourbaki> for starters
08:07:44 <SyntaxNinja> actually, FGL is somethign that Aetion contributed a bit to.
08:08:02 <SyntaxNinja> but not much; we reorganized it a bit for the hierarcical libraries.
08:08:05 <bourbaki> ah what can the lib to?
08:08:10 <bourbaki> do
08:08:15 <SyntaxNinja> so it'll be in the next compiler releases, It think.
08:08:40 <bourbaki> i would like to connect that graph thing to a fsm tool
08:08:48 <SyntaxNinja> what's FSM?
08:08:52 <bourbaki> so that you can concat graphs
08:08:57 <bourbaki> finite state machines
08:09:13 <bourbaki> intersect them and such
08:09:38 <SyntaxNinja> hm. yeah. ther'es that node ID problem, but otherwise it shoudl be easy, right?
08:09:54 <bourbaki> i think so yes
08:10:11 <bourbaki> i could use soemthing like mapgraph to give them unique ids
08:10:31 <bourbaki> like (graphname,id) for the node
08:11:25 <SyntaxNinja> the problem is tha tyou have to go through and change the node IDs, I think, right?
08:11:30 <bourbaki> heh the guy who seems to have written it lives like 15 min away from me :)
08:11:35 <SyntaxNinja> I mean... they can't conflict w/t he graph you're concating it with.
08:11:59 <MakeMyDay> while we are at it can you tell me how to give out that part of a graph that is accesible from a Node n?
08:12:12 <bourbaki> in fgl?
08:12:14 <MakeMyDay> I can't get the recursion
08:12:18 <MakeMyDay> No in anything:/
08:12:31 <bourbaki> well the usual idea is that you have a list
08:12:32 <SyntaxNinja> MakeMyDay: you mean "reachable"?
08:12:39 <SyntaxNinja> or the direct neighbors?
08:12:51 <MakeMyDay> > data Node 	= Knoten [String] String [String]  
08:12:57 <bourbaki> ah hm thats implementation dependant isnt it?
08:13:02 <MakeMyDay> type Graph 	= [Node]
08:13:14 <MakeMyDay> I can get the neighbours
08:13:22 <MakeMyDay> but I can't get deeper
08:13:29 <bourbaki> MakeMyDay http://web.engr.oregonstate.edu/~erwig/fgl/haskell/old/fgl0103.pdf
08:13:41 <SyntaxNinja> so you need to get the neighbors' neighbors and you need to recurse over them, watching out for loops.
08:14:01 <MakeMyDay> There are no loops
08:14:06 <MakeMyDay> so it should be simple
08:14:14 <MakeMyDay> but I am too stupid to make it works
08:14:22 <SyntaxNinja> something like:
08:14:22 <SyntaxNinja> reachables n = concat [reachables x | x <- neighbors n]
08:14:29 <SyntaxNinja> but you have to watch out for loops :)
08:15:02 <SyntaxNinja> is this for a homework / lab assignment, OOI?
08:15:10 <bourbaki> ooi ?:)
08:15:13 <MakeMyDay> yeah but that would work only 1 level deep no?
08:15:13 <SyntaxNinja> out of interest
08:15:16 <bourbaki> ah
08:15:24 <SyntaxNinja> MakeMyDay: the recursion will take care of the next level.
08:16:09 <bourbaki> you could make reachable make use of two params where the second is one that is a list of already expanded nodes
08:16:10 <SyntaxNinja> MakeMyDay: try to make ti work with a graph with no loops, then you can start thinking about what to do with loops.
08:16:37 <MakeMyDay> SyntaxNinja : My graph hasn't got loops
08:16:54 <bourbaki> MakeMyDay and next week youll have to do it with loops ;)
08:16:58 <SyntaxNinja> MakeMyDay: is it a tree? is it undirected? there's also a problem of duplicates.
08:17:02 <MakeMyDay> bourbaki: I have tried then yet can't get it to work:/
08:17:22 <SyntaxNinja> MakeMyDay: are you running into bugs or build problems?
08:17:29 <MakeMyDay> build problems
08:17:44 <SyntaxNinja> MakeMyDay: post the code to the wiki.
08:17:49 <SyntaxNinja> @wiki HaskellIrcPastePage
08:17:49 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
08:18:08 <SyntaxNinja> no promises, though :)
08:18:24 <MakeMyDay> the whole code`
08:18:26 <MakeMyDay> ?
08:18:34 <SyntaxNinja> MakeMyDay: the part that doesn't work, or that you don't understand.
08:18:46 <SyntaxNinja> MakeMyDay: you'll have to narrow down your questions if you want help here, I guess.
08:21:33 <bourbaki> MakeMyDay can you read lisp code?
08:21:44 <MakeMyDay> nope
08:22:03 <bourbaki> hm
08:22:32 <bourbaki> SyntaxNinja would you be interested in writeing some ai stuff in haskell and form a lib?
08:33:24 <SyntaxNinja> MakeMyDay: so what's the error?
08:33:37 <SyntaxNinja> bourbaki: no, but if someone else were doing it, I migth contribute here & there.
08:34:00 <bourbaki> ah cool well i will see what i can do first i try to understand the lib :)
08:35:37 <MakeMyDay> SyntaxNinja ..no error really I just can't combine all this to a recursion.Everytime I try it backfires
08:38:03 <SyntaxNinja> hm. so it's not a compilation problem? (that's what I meant by "build problem")
08:38:51 <MakeMyDay> ow
08:39:03 * esap blinks in.
08:40:55 * SyntaxNinja goes to lunch. ttyl
10:31:31 <bourbaki> bye
10:47:37 <Si\> I've got a problem with Text.Regex
10:48:38 <Si\> If I create a Regex of the form "[0-9]", it will accept any character from 0-9
10:49:12 <Si\> however, suppose I in reality want it to accept the set ['0', '-', '9'] for a particular character
10:49:38 <Si\> I would expect to pass "0\\-9", however mkRegex won't parse this
10:49:51 <sorrow> how about [09-]?
10:50:04 <Si\> yes, that is accepted
10:50:49 <Si\> but but crucially, - cannot be escaped within the String
10:50:53 <Si\> anywhere
10:51:23 <Si\> XML Schema Documents perform validation at the lowest level via regex
10:52:35 <Si\> now, the low-level type Integer (i.e. any whole number) is represented by the regex "[\\-+]?[0-9]+"
10:52:48 <Si\> which mkRegex also does not accept; why?
10:53:10 <Si\> it accepts it without the escapes, but not with
10:53:37 <sorrow> Why do you escape anyway?
10:53:42 <Si\> I don't
10:53:56 <Si\> This is the official W3C XML Schema definition
10:54:37 <sorrow> well, then haskell's regex syntax possibly is different?
10:54:51 <sorrow> I don't know about haskell's quoting behaviour.
10:57:44 <Marvin--> Si\: sounds like a bug
10:58:19 <Si\> I think so too
10:58:21 <Si\> egrep "[\\-+]?[0-9]+"
10:58:23 <Si\> works 
10:58:40 <Si\> and according to the docs, Text.Regex should be egrep compliant
10:58:49 <Si\> I'll report it on the GHC mailing list
10:59:17 <Si\> having said that, I'd better make sure I have the latest GHC first...
11:00:22 <monotonom> I am looking at the egrep man page and I don't see any guarantee as to \- inside []
11:00:42 <monotonom> Rather, and I quote, "Finally, to include a literal - place it last"
11:01:44 <monotonom> I am skeptic about compliance with undocumented features.
11:02:19 <Si\> Ok, so it looks like W3C Regular Expressions may not be the same as grep regular expressions
11:02:57 <Si\> Ok, I'll hang fire for a bit until I can gather more info
11:03:25 <Si\> for the moment I'll just filter out any escapes before -
11:03:29 <monotonom> which in turn is not the same as Solaris regular expressions
11:05:00 <Si\> Look's like I'm gonna have to resort to nasty hacks again then...
11:05:20 <Marvin--> the interesting question is what posix regex says, IMO
11:05:41 <monotonom> Right. Where can we find it?
11:05:56 <Marvin--> good question :)
11:06:26 <ibid> the posix standard?
11:06:39 <ibid> it's merged with the sus, you should be able to find it there
11:06:40 <Si\> This is quite vital to being able to process XSD doc's since the Regular expression is the foundation
11:06:42 <monotonom> The info page of egrep says - stands for itself when it is the first or the last.
11:07:05 <ibid> if your institution has ieeexplore subscription, that's another place to find it
11:08:04 <Si\> http://www.wellho.net/regex/posix.html
11:08:34 <Si\> says "To include  a  lit?
11:08:34 <Si\> eral `-', make it the first or last character, or the sec?
11:08:34 <Si\> ond endpoint of a range.  To use  a  literal  `-'  as  the
11:08:34 <Si\> first  endpoint of a range, enclose it in `[.' and `.]' to
11:08:34 <Si\> make it a collating element (see below)"
11:09:31 <monotonom> Furthermore \ lose its escaping power.
11:10:13 <monotonom> [\-+] is supposed to mean the range from \ to + (that is, if \'s ascii code were smaller in the first place)
11:11:53 <monotonom> All documentations conveniently sidestep the issue of ranges like z-a
11:12:44 <Si\> "[\\-+]" isn't parsed at all by mkRegex
11:13:29 <monotonom> By freedom of implementation, it is entirely possible that one implementation treats [z-a] as z|-|a, another as the empty range, and yet another as illegal.
11:14:28 <monotonom> My skeptism with undocumented features is justified.
11:15:41 <Si\> Hacks it is then
11:16:05 <monotonom> [-+] and [+-] are the obvious clean solution.
11:17:08 * ibid would not trust secondary sources
11:17:26 <Si\> Well, I can't change the W3C Specifications unfortunately ;)
11:18:56 <monotonom> Where can I find w3c's contorted idea of regex?
11:19:15 <ibid> no idea
11:19:25 <ibid> i thought you were talking about posix regexps
11:19:59 <monotonom> Before I condemn w3c I want to find out what it actually did.
11:21:01 <Marvin--> aww, but condemning is so much fun
11:21:20 <monotonom> Then I'll oblige.
11:21:48 <monotonom> A lot of people in a lot of large organizations never read the specs they're required to read and use.
11:22:30 <sorrow> how's that? http://www.w3.org/TR/2001/REC-xmlschema-2-20010502/#regexs
11:23:40 <monotonom> A friend once worked in a small department of a large company and told me this story.  A co-worker was asked to read an RFC and teach it to the rest of the group, because the group were about it implement it.  The co-worker didn't read; he made one up.
11:24:31 <monotonom> And now to give you more fuel, the large company was Microsoft, the small department was the group responsible for the product Microsoft Project.
11:28:46 <ibid> and what was the rfc?
11:29:29 <monotonom> We forgot.
11:30:13 <Si\> I don't mind so much when you have 2 standards that are totally different and quite obviously totally different, its when you have 2 standards that are very nearly the same, but different in a few vital details
11:31:26 <ibid> i mean, i don't immediately see what protocols would ms project implement
11:31:35 <monotonom> Yeah. I think w3c is condemnable whether it tries to adopt posix and screws up or it rolls its own.
11:32:02 <Riastradh> Therefore we ought to switch to SREs.
11:32:30 <Riastradh> s/we/everyone/1
11:33:12 <sorrow> "Secure and Reliable Embedded Systems"? ;-)
11:33:40 <monotonom> Translating from w3c regex to posix regex can be mechanicalized.
11:34:33 <Riastradh> SRE = Symbolic Regular Expression -- regexps in S-expressions.
11:34:51 <monotonom> BTW I cannot find sus.  www.google.com/search?q=sus leads me to the Microsoft "software update service (sus)"
11:35:47 <thebug> monotonom: 1/2 sec and I'll get you a link
11:35:57 <monotonom> Danke
11:36:26 <thebug> here's v2 while you wait :)
11:36:29 <thebug> http://www.opengroup.org/onlinepubs/007908799/
11:36:39 <thebug> and here is susv3
11:36:43 <thebug> http://www.unix-systems.org/version3/
11:38:49 <monotonom> I must condemn google for 1. putting Windows sacrilege as the first hit; 2. not bringing up The True SUS at all.
11:39:23 <Marvin--> yay, lots of condemning going on
11:39:25 * Marvin-- is pleased
11:41:30 <monotonom> I will enter the google condemnation to my two-day new slashdot personal journal.
11:42:13 <thebug> all we need now is Mr T to some and start pitying people while monotonom condemns them :)
11:42:22 <thebug> s/some/come
11:54:14 <monotonom> http://slashdot.org/~Albert%20Y.C.%20Lai
11:54:45 <monotonom> And w00t, my programming language post yesterday got modded up to 2, the very first time I get such treatment!
11:54:49 <Si\> Anyway, it works correctly now, I can validate against simple-types in XSD
11:59:01 <wagle> all the world is a vax!
12:00:17 <wagle> what is H16m command?
12:05:10 <wagle> nevermind.  haddock Makefile is completely psychotic on macosx..  i mean.. who needs to stop when there has been an error?
12:05:49 <Igloo> It probably means it failed to find GHC if you haven't worked it out
12:06:45 * Igloo scratches his head as IA64 manages to compile GHC without any unaligned accesses for no apparent reason
12:16:20 <RussellOConnor> @type callCC
12:16:21 <lambdabot> bzzt
12:16:28 <Riastradh> @type Control.Cont.callCC
12:16:29 <lambdabot> bzzt
12:16:33 <Riastradh> @type Control.Monad.Cont.callCC
12:16:34 <lambdabot> Control.Monad.Cont.callCC :: forall m a b.
12:16:34 <lambdabot> 			     (Control.Monad.Cont.MonadCont m) =>
12:16:34 <lambdabot> 			     ((a -> m b) -> m a) -> m a
12:17:19 <RussellOConnor> callCC probably ought to have type forall m a. (MonadCont m) => ((a -> forall b. m b) -> m a) -> m a
12:18:02 <RussellOConnor> But I guess that would need the Haskell extensions
12:19:48 <Igloo> That would mean there were some arguments you can give it now that you wouldn't be able to
12:20:19 <Igloo> Or that you could give its argument, or something
12:20:22 <Igloo> Anyway, I'm not here
12:20:47 <RussellOConnor> No, it would be less restrictive.
12:22:12 <RussellOConnor> you could do callCC (\cc -> ...  (cc Int 5) ... (cc Bool 6) ... (cc (Int->Bool) 7) ...)  
12:23:25 <RussellOConnor> As it stands now, your use of cc must always have the same return type in all places it is used.
12:40:59 <monotonom> http://haskell-libs.sourceforge.net  doesn't look good
12:49:29 <monotonom> Why is hws-wp not a formal package release on http://sourceforge.net/projects/haskell-libs/ ?
12:49:37 <Igloo> Russel: I meant more restrictions on cc - or does the monad make that for you in such a way that it always could accept any type?
12:52:38 <shapr> monotonom: I completely agree, wanna make a webpage? ;-)
12:53:09 * Igloo bounces
12:53:16 * shapr b01ngs
12:53:23 <shapr> Igloo: I suck at making debs.
12:53:36 <Igloo> :-(
12:53:39 <Igloo> What's the problem?
12:53:59 <shapr> dh_something gets called with zero arguments when building the ghc6 deps automagically
12:54:24 <Igloo> dh_shlibdeps or somesuch?
12:54:39 <shapr> monotonom: I was thinking about cutting the cvs tree of haskell-libs into separate darcs repos, and just point haskell-libs.sf.net to a page on the hawiki, what do you think?
12:55:04 <monotonom> Yes.
12:55:23 <Igloo> If I wrote ghc6's debian/rules it'll be heavily based on /usr/share/doc/debhelper/examples/rules (or maybe another of the rules* files there) BTW
12:55:56 <shapr> ok, I tried to just modify michaelw's rules, but I'll read the debhelper example.
12:56:18 <Igloo> Did you mean c2hs debs above?
12:56:21 <shapr> yes
12:56:32 <Igloo> Ah, OK. Why is it a problem?
12:56:54 <shapr> I tried to just drop in 0.13.1 and change the deps from ghc5 to ghc6
12:57:28 <RussellOConnor> Igloo, the implemenation of MonadCont should basically be the same.  At some point it the implemenation of callCC says ... (\_::b -> expr) ..., so in my version it would be ... (/\b::* -> \_::b -> expr) ... (I don't actually know the notation of this in the haskell extensions)
12:57:59 <Igloo> shapr: But what error are you getting or whatever?
12:58:48 <shapr> I'll tell you details in just a moment, I'm running debuild again.
12:59:50 <shapr> huh, it built!
13:00:34 <shapr> lintian isn't thrilled though.
13:00:56 * shapr dances the happy build dance
13:01:53 <thebug> is that like the snoopy dance?
13:01:59 <shapr> exactly!
13:02:07 <thebug> :)
13:02:45 <Igloo> Does c2hs support nhc98 too?
13:03:08 <shapr> I dunno
13:03:15 * Igloo does the happy dance with shapr  :-)
13:04:18 * wagle joins the square
13:04:39 <wagle> haddock is actually building this time
13:04:41 <shapr> nothing about nhc98 in the docs, I'll email Chilli
13:06:46 <Igloo> Ooops, ghc got picked up by a 40MHz 68040. Still, it does have a reasonable amount of RAM.
13:08:00 <Igloo> wagle: For Fedora?
13:08:57 <wagle> Igloo: macosx
13:09:23 <wagle> Igloo: NeXTstep?
13:10:08 <thebug> nice machines, old though :)
13:10:13 <Igloo> Ah, OK, I guessed based on the channels you were in  :-)
13:13:16 <wagle> fedora is selinux/etc testbed
13:14:26 <shapr> I like the latest kernel news on lwn.net
13:14:34 <shapr> gnupg signed kernel modules
13:32:42 <TheHunter> msg nickserv identify haxcsd
13:32:54 <TheHunter> dammit!
13:33:08 <shapr> whoops
13:34:53 <TheHunter> i should get a new keyboard. This one doesn't seem reliable
13:38:00 * Marvin-- ponders if there are any gotchas with suspend-to-disk in 2.6
13:40:26 <shapr> I'm afraid to try it...
13:40:52 <shapr> instance MonadCont SuspendToDisk
13:46:23 <shapr> Igloo: ah, it seems that c2hs does support nhc98
13:46:31 <Marvin--> suspend-to-ram kinda-worked
13:46:37 <Marvin--> I had some dma issues when it woke up
13:47:26 <shapr> would be neat to hack eros-style features into linux
13:48:44 <Igloo> OK, cool. It would be nice to have the package build binaries for both then (and may as well do ghc5 once you have the framework set up, unless c2hs support for ghc5 has rotted). But one step at a time, eh?  :-)
13:49:02 <Igloo> Wooo, 5 of 8 arches built ghc successfully so far
13:49:02 <shapr> right, one step at a time
13:49:06 * Igloo crosses his toes
13:51:52 * Riastradh stares in amazement at Igloo's feet.
14:21:23 <shapr> where are the different Standards-Version: numbers documented?
14:22:00 <Igloo> It's the version of Debian Policy. Basically you want to make it confirm to the latest version and use that
14:22:18 <ibid> shapr: in debian policy :)
14:22:22 <shapr> ah, ok
14:22:52 <Igloo> http://www.debian.org/doc/debian-policy/
14:23:26 <Igloo> The debian-policy package has an upgrading-checklist or similar so you don't have to reread the whole thing each time it changes
14:28:46 <shapr> SamB: nice ip
14:29:31 <shapr> yow, c2hs has a july 2001 standards-version
14:33:27 * Igloo needs to update most of my packages a bit, but I'll worry about that once GHC 6.2.1 manages to get into testing
14:35:55 <Igloo> Wow, that's not old enough to get it on http://lintian.debian.org/reports/Tancient-standards-version.html
14:37:27 <Igloo> Err, what version do you think it has, shapr?
14:37:40 <shapr> Standards-Version: 3.5.6.0
14:37:45 <shapr> that's from the control file
14:37:56 <shapr> looks like only minor changes needed
14:37:56 <Igloo> Is that really 3 years old?
14:38:32 <Igloo> Wow, you're right
14:38:32 <ibid>  -- Manoj Srivastava <srivasta@debian.org>  Tue, 24 Jul 2001 21:43:22 -0500
14:38:34 <Marvin--> 3.5.6 is from 2001, yes
14:39:02 <Marvin--> I think the ancient-standards-version page is broken
14:39:06 <shapr> hmm, do I unicycle, or fix up the standards-version...
14:39:12 <ibid> but note that what matters is when the next revision was released
14:39:17 <ibid> 3.5.7 is  -- Manoj Srivastava <srivasta@debian.org>  Sat, 31 Aug 2002 02:18:02 -0500
14:39:26 <ibid> so, only from aug 2002 :)
14:39:48 <Marvin--> true
14:39:59 <Marvin--> but it's still "older than one year"
14:40:04 <ibid> yes
14:40:24 <shapr> bah, just a few minutes of unicycling...
14:40:36 <ibid> i've found the PTS helpful
14:40:45 <Igloo> 3.5.6 is where I've mostly got stuck as I was more interested in getting ghc6 to build again than adding DEB_BUILD_OPTIONS support to it  :-)
14:40:47 <ibid> it notes old s-v
14:41:18 <Igloo> But all signs look good that I'll be able to work on such trivialities in about 10 days  :-)
15:22:14 <RussellOConnor> @type when
15:22:15 <lambdabot> bzzt
15:22:24 <RussellOConnor> @type Monad.when
15:22:25 <lambdabot> Monad.when :: forall m. (Monad m) => Bool -> m () -> m ()
17:07:17 <greenrd> I tried http://www.fh-wedel.de/~si/HXmlToolbox/ today to see if Haskell was fast for real-world tasks.
17:07:22 <greenrd> I was not impressed.
17:07:38 <greenrd> time HXPath -w '//packagereq[@type="mandatory"]' comps.xml
17:07:50 <greenrd> user    1m25.978s
17:09:05 <greenrd> wc -l comps.xml
17:09:10 <greenrd>    4651 comps.xml
17:09:17 <greenrd> Not a very large test case.
17:10:18 <greenrd> I understand that combinator libraries are not necessarily as efficient as other approaches... however, that's taking the piss.
17:23:05 <Riastradh> I bet arrow-based parsers that didn't require full backtracking would be faster!
17:24:34 <greenrd> How does on optimise Haskell code, anyway?
17:24:45 <greenrd> er, s/on/one
17:24:47 <Riastradh> With a profiler close at hand.
17:26:35 <greenrd> I ask this from the perspective of someone who doesn't understand the advanced Haskell idioms at all.
18:08:46 <bourbaki> jodel
20:15:26 <hyp3rion> hi ^_^
20:15:41 <heatsink> hi
20:16:59 <hyp3rion> is ghc 6 using gcc's backends?
20:17:39 <heatsink> That's a good question
20:18:58 <heatsink> My understanding is that ghc compiles to an abstract language that can be converted to machine language... but it may rely on gcc for classical optimizations on that IL
20:19:42 <hyp3rion> oh
20:19:54 <hyp3rion> i just discovered that in debian it depends on gcc
20:20:08 <heatsink> What... you don't have gcc installed? :)
20:20:09 <hyp3rion> but ghc itself is written in haskell right?
20:21:14 * heatsink shrugs
20:23:08 <hyp3rion> heatsink - well it was a fresh debian install
20:23:14 <hyp3rion> :-)
20:23:22 <hyp3rion> just tried to install ghc before gcc
20:35:08 <Leimy> howdy
21:44:23 <Leimy> hmmm
21:44:31 <Leimy> what's the . function do again?
21:44:40 <Riastradh> Function composition.
21:44:41 <Riastradh> @type (.)
21:44:43 <lambdabot> (.) :: forall c a b. (b -> c) -> (a -> b) -> a -> c
21:44:49 <Leimy> hey Riastradh
21:45:02 <Riastradh> @eval (head . tail) [1,2]
21:45:03 <lambdabot> 2
21:45:03 <Leimy> takes two functions
21:45:11 <Riastradh> @eval head (tail [1,2])
21:45:11 <lambdabot> 2
21:45:25 <Leimy> and evals the second one with the first functions parameter?
21:45:43 <Leimy> ph
21:45:45 <Leimy> oh
21:45:54 <Riastradh> f . g returns a function h that takes an argument x.  It applies g to x and then f to the result of g x, and returns what f returns.
21:45:58 <Riastradh> @info (.)
21:45:59 <lambdabot> -- . is a variable
21:45:59 <lambdabot> infixr 9 .
21:45:59 <lambdabot> (.) :: forall b c a. (b -> c) -> (a -> b) -> a -> c
21:46:06 <Riastradh> ...bah, no definition.
21:46:28 <Leimy> I see
21:46:29 <Leimy> ok
21:46:38 <Leimy> I was messing with a foldTree implementation
21:46:44 <Leimy> and saw a "mapTree" using it
21:46:48 <Leimy> now this makes more sense
21:46:53 <Riastradh> You can do some funky stuff with composing (.).
21:46:57 <Riastradh> @type (.).(.)
21:46:59 <lambdabot> (.).(.) :: forall a b c a1.
21:46:59 <lambdabot> 	   (b -> c) -> (a -> a1 -> b) -> a -> a1 -> c
21:47:02 <Leimy> mapTree f = foldTree Branch (Leaf . f)
21:47:09 <Riastradh> But that's kind of complicated.
21:47:10 <Leimy> where f is a function taking 1 arg
21:48:10 * Leimy fringe (mapTree (\x -> x == 'a') (Branch (Branch (Leaf 'd') (Leaf 'a')) (Leaf 'b')))
21:48:19 <Leimy> gives [False, True, False]
21:48:35 <Leimy> as expected
21:49:53 <Leimy> @type const
21:49:54 <lambdabot> const :: forall a b. a -> b -> a
21:50:08 <Leimy> @eval const 1
21:50:09 <lambdabot> <<EM Dynamic -> EM Dynamic>>
21:52:09 <Leimy> @eval (const 1) 2
21:52:09 <lambdabot> 1
21:52:11 <Leimy> :)
21:52:15 * Leimy figured it out
21:53:25 <Leimy> @type (const 1)
21:53:26 <lambdabot> (const 1) :: forall a b. (Num a) => b -> a
21:54:27 <Leimy> yeah... a function taking a parameter 'a' which returns a function that takes 1 parameter and returns the 'a' regardless of input
21:54:39 <Leimy> kind of a piece of glue but neat anyway
21:56:12 <Leimy> nifty
