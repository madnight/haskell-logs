02:39:17 <sazzle> can anyone tell me what this error means? (ghci -package wx)
02:39:19 <sazzle> Loading package wxcore ... ghc-6.2.1: can't load .so/.DLL for: wxc-gtk2.4.2-0.7 (/usr/X11R6/lib/libwxc-gtk2.4.2-0.7.so: Undefined symbol "_ZN10wxGLCanvasC1EP8wxWindowiRK7wxPointRK6wxSizelRK8wxStringPiRK9wxPalette")
03:03:03 <bourbaki> hi
03:18:52 * Lemmih is really glad for his HConf syntax.
03:31:38 <sazzle> what's HConf?
03:36:39 <Lemmih> sazzle: A configuration library which will allow programs to change user interface without changing the code.
03:39:12 <sazzle> ooh
03:40:06 <Lemmih> The infrastructure is much like WASH's, just with a little more evaluation control.
03:43:58 <sazzle> what's WASH?
03:44:25 <Lemmih> http://www.informatik.uni-freiburg.de/~thiemann/haskell/WASH/
03:45:06 <sazzle> aah
04:00:44 <Marvin--> Lemmih: where can I find HConf?
04:06:20 <Lemmih> Marvin--: Currently only on my hd (-: I'm probably gonna put in on sourceforge (or another place) when I get the internals worked out.
04:07:27 <Marvin--> oh
04:11:28 <sazzle> Lemmih: what exactly do you mean by UI?
04:15:44 <Lemmih> sazzle: I'm planning interfaces based on Readline,ncurses,WASH and (maybe) GTK. Then the user would be able to select the desired one at runtime.
04:16:14 <sazzle> do you have intermediate code?
04:16:37 <sazzle> i mean, are you specifying the interface in xml or something?
04:17:15 <Lemmih> No, it's all Haskell.
04:19:16 <sazzle> ah, right, so you have different interfaces that are linked at runtime?
04:20:44 <Lemmih> sazzle: Not really, but the effect is the same.
04:21:25 <Marvin--> I'm curious how you're going to provide sufficiently rich interfaces with such a diverse set of UI:s
04:21:41 <Marvin--> or can the client program provide hints on a per-UI basis?
04:21:55 <Marvin--> like a .glade file for gtk or something
04:21:59 <sazzle> yeah, i'm wondering that too
04:23:29 <Marvin--> I mean, heck, abiword and things like wx are incredibly complicated, and they just deal with different UI toolkits
04:24:21 <Lemmih> HConf is in a completely different domain.
04:24:23 <Marvin--> we do something like this in cdebconf for debian-installer -- pluggable UIs -- but of course there the interface is even more limited, and it's basically impossible to put a decent GUI on top of it
04:25:04 <Marvin--> btw, you may want to have a look at newt rather than working directly with ncurses
04:26:13 <Marvin--> so what is HConf's domain?
04:27:04 <Lemmih> It's for very simple interactions between the user and a Haskell program.
04:27:14 <sazzle> like, ghci?
04:28:15 <Lemmih> Marvin--: I'm not even sure I wanna create a ncurses based interface. My main goal is realline and WASH.
04:28:39 <Lemmih> sazzle: ghci is an interpreter...
04:29:06 <shapr> good morning #haskell!
04:29:21 <Lemmih> Hello shapr
04:29:40 <shapr> I want some WASH and GF goodness!
04:29:48 <Lemmih> GF?
04:29:52 <shapr> did Agent Ninja get WASH debianized?
04:29:58 <shapr> Grammatical Framework
04:30:50 <Marvin--> shapr: I don't know, but parts of it are cabalized at least :-)
04:31:21 <shapr> yay!
04:31:21 <Marvin--> Lemmih: uh, so basically it's a slightly higher level layer than getLine/putStr?
04:32:02 <Lemmih> Marvin--: I want something like: do { lineOne <- UI.getLine;action (doSomethingWithLineOne lineOne);lineTwo <- UI.getLine; action (doSomethingWithLineTwo lineTwo)}
04:32:08 <shapr> I've been waiting for Alistair to write ReidLine
04:32:12 * shapr snickers
04:32:16 <Marvin--> shapr: *groan*
04:32:29 <Marvin--> Lemmih: ok
04:32:31 <Lemmih> And then let the library handle stuff like the actual user interface and evaluation.
04:33:12 <Lemmih> s/evaluation/evaluation order/
04:44:44 * shapr studsar
04:45:20 <shapr> yow!
04:51:45 <shapr> accck, kernel oops
05:22:07 <Lemmih> Wb shapr
05:22:46 <Lemmih> What's a "kernel oops"?
05:35:23 <shapr> I'm using preempt, 4k stacks, and regparm; something broke
05:36:23 <andersca> what's regparm?
05:36:32 <shapr> pass parameters in registers
05:37:02 <shapr> it decreases the size of the kernel and speeds it up a bit
05:37:19 <andersca> ah
05:37:31 <shapr> but, it means you need to recompile all your kernel modules
05:37:48 <shapr> and it breaks most binary only kernel modules
05:38:47 <andersca> nod
05:39:40 <shapr> with gcc-3.4 regparm gives a shocking decrease in kernel size
05:45:39 <neologism> what is "regparm" ?
05:45:45 <neologism> that parametres are stored in registres?
05:45:47 <Marvin--> and having a small kernel on your computer is very important because...?
05:46:01 <shapr> well, the small speedup is what I'm after
05:46:17 <Marvin--> sounds like a lot of hassle for a "small speedup"
05:46:27 <Marvin--> or maybe I'm just boring
05:46:55 <shapr> I'm just fine with a lot of hassle for a smal speedup :-)
05:47:07 <shapr> kernel tuning is fun.
05:47:19 <Marvin--> good for you, I hate messing with the low-level side of computing
05:47:54 <andersca> me too
05:47:55 <andersca> :)
05:48:15 <Marvin--> the day we figure out a satisfying way to emulate hardware in software will be a good day
05:48:43 <Marvin--> or more precisely, the day we figure out a satisfying way to run software without hardware
05:49:03 <andersca> I like doing gfx hardware hacking though
06:00:32 * Marvin-- ponders what part of cabal to hack next
06:02:50 <Lemmih> Sanity checks maybe?
06:49:07 <Marvin--> hmm, the command/flag parsing could seriously use some refactoring
08:07:26 <Marvin--> "Can't combine named fields with locally-quantified type variables"
08:07:28 <Marvin--> hmmmmm
08:11:00 <poing> hm.  how's haskell's speed compare to c these days?
08:11:19 <poing> was reading lots of rants about slowness ... all old
08:11:36 <poing> was thinking of nhc98 for the small size
08:15:49 <Lemmih> Size is important to you?
08:22:34 <poing> in general.  not critically, like embedded or anything
08:42:49 <RussellOConnor> Is it possible to get the upper and lower array bounds of an array?
08:43:08 <Igloo> bounds
08:44:05 <RussellOConnor> excellent
08:45:48 <RussellOConnor> returns (lower_bound, upper_bound) ?
08:46:08 <Marvin--> yes
09:15:59 <RussellOConnor> So I wrote up what I'm looking for in some sort of MonadStream class.  For lack of a better place to put it, I stuck it on the wiki: <http://www.haskell.org/hawiki/MonadStream?action=show>
09:21:32 <Marvin--> looks nifty
09:22:21 <RussellOConnor> Thanks. It takes a suprisingly long time to write such a little amount of Haskell.
09:23:51 <Marvin--> I think you mean that it took surprisingly little code to express what took a long time to figure out :-)
09:24:17 * Marvin-- plays evil turn-about games ;)
09:24:47 <RussellOConnor> That's true, but what I mean is that it took me a long time to figure out how to express in Haskell what I wanted to express.
09:25:32 <RussellOConnor> There should be some way of making a fileIO instance.
09:25:33 <Marvin--> yes, but generalizing stuff is always tricky
09:26:03 <RussellOConnor> Yeah,  I wanted to generalize out State to MonadState, but GHC complained about undecidable instances.
09:26:26 <RussellOConnor> it sounded scary
09:26:38 <Marvin--> right, you need at least one concrete type in the instance head (unless you pass -fallow-undecidable-instances ...)
09:28:22 <Marvin--> myself, I'm playing with Typeable right now, trying to make a flexible command line parser
09:28:28 <Marvin--> it's scaring me
09:28:40 <RussellOConnor> What's Typeable?
09:29:15 <Marvin--> look at the Data.Typeable module
09:29:47 <Marvin--> and read the Scrap your Boilerplate paper, if you've got the guts for it ;)
09:30:52 <RussellOConnor> sounds like a fun read
09:31:33 <Marvin--> I enjoyed it immensely
09:32:10 <Marvin--> the stuff in Scrap your Boilerplate is implemented in the Data.Generics module if you want to play with it
09:39:47 <Marvin--> mkFlags :: Typeable a => [OptDescr (a -> IO a)] -> [OptDescr (Options -> IO Options)]
09:39:50 <Marvin--> how's that for cryptic
09:46:06 <RussellOConnor> I need to type a variable in the middle of a do clause
09:47:32 <Marvin--> are you sure?
09:49:19 <RussellOConnor> I think so
09:50:24 <Marvin--> Is it let-bound or the result of a monadic computation?
09:50:41 <RussellOConnor> result of monadic computation
09:51:10 <Marvin--> then you can either write    (x::T) <- m   or  x <- m :: M T
09:51:33 <Marvin--> (iirc)
09:52:01 <RussellOConnor> ah
09:52:08 <RussellOConnor> It helps to get the type right.
09:52:10 <RussellOConnor> *s*
09:52:42 <Marvin--> heh
09:52:46 <Marvin--> often :)
09:52:57 <Marvin--> whoa, this turned out pretty nifty
09:53:04 <RussellOConnor> (Array Word8 Int) vs (Array Int Wor8) ... What's the difference. *l*
09:53:27 <Marvin--> This is the point where I wish I'd thought of a more clever name than Foo.hs
09:53:39 <RussellOConnor> That happens to everyone
09:55:17 <Marvin--> yay, type class evilness
09:55:52 <RussellOConnor> Is there an (Show a) => a -> IO ()  funtion to print things?
09:56:09 <Lemmih> print?
09:56:10 <Marvin--> print
09:56:20 <RussellOConnor> *l*
09:56:28 <Marvin--> always the last place you look, eh? :)
09:56:51 <RussellOConnor> Much better than putstr $ show x
09:57:26 <Marvin--> well, print = putStrLn . show, so...
09:59:17 <RussellOConnor> IO functions are far more interesting to run if you replace the last return with a print.
10:00:45 <Marvin--> in the interpreter?
10:00:45 <Lemmih> Or just: func >>= print
10:00:48 <Marvin--> I typically just do func >>= print
10:00:53 <Marvin--> meh
10:00:53 <Marvin--> :)
10:01:08 <RussellOConnor> right, that's a good idea
10:04:10 <poing> is there an explanation of existential types "for dummies"?
10:04:29 <poing> i can't make sense out of the explanations i've read
10:06:33 <RussellOConnor> er, I'm familiar with existential types.
10:07:04 <poing> i'm told they're a way of doing "ad hoc" overloading, but i can't figure out how
10:07:05 <Smerdyakov> If x has type Exists a. T, then that means there exists some value for a such that x has type T
10:07:17 <RussellOConnor> You could read my favourite book in the world <http://www.cs.kent.ac.uk/people/staff/sjt/TTFP/>
10:08:51 <poing> ooh spiffy ... i guess i sort of need "type theory for dummies"
10:09:47 <Smerdyakov> poing, does what I said make sense to you?
10:09:49 <poing> every intro text to FP tells me stuff i already know.  lavish treatment of first class functions, HOF's, lambda, maybe currying and eta reduction
10:09:55 <poing> nothing about type theory
10:10:23 <RussellOConnor> usually T is a type expression with an a in it, no?
10:10:28 <RussellOConnor> as in T(a)
10:10:32 <Smerdyakov> RussellOConnor, yes
10:10:54 <poing> i get the idea of what Exists a. T means, does that mean you're going on and defining what that a is?
10:11:07 <poing> something like instantiating a template?
10:11:25 <RussellOConnor> One definition is Exists a. T(a) is a pair of (x,y) such that x has type a, and y has type T(a)
10:11:45 <poing> sort of a dearth of examples for hacker types like me who are weak on CS
10:12:47 <Smerdyakov> poing, existential types can be used to define "objects" in OO style, for instance.
10:13:10 <Smerdyakov> poing, the existentially bound variable stands for the type of the objects, and the body of the existential gives the available methods.
10:13:20 <poing> .oO (for "instance" ... *drum fill* )
10:14:09 <Smerdyakov> Exists whatever. {getInt :: whatever -> int, getReal :: whatever -> real}
10:15:23 <RussellOConnor> poing, I'm trying to look up where they talk about how to use existential type to implement haskell style classes.  Do those count as ad hoc overloading?
10:16:12 <poing> i guess.  i just heard the term and supposed it meant "ad hoc overloading of a type class", because afaik haskell already has ad hoc polymorphism
10:16:21 <poing> one reason i like it over ocaml :)
10:17:12 <poing> i'm trying to write some real programs in it tho, all i've done is some playing around with haxml and frantk from way back
10:17:15 <Smerdyakov> poing, did my example help?
10:17:31 <RussellOConnor> ahh, page 224
10:18:00 <poing> so you're defining functions that only work on that "whatever" object and nothing else?
10:18:04 <RussellOConnor> So anyhow, you would impelement Hasell's eq type as Exists T:type. T->T->bool
10:18:38 <RussellOConnor> SO it is a pair (x, y) where x is a type and y is a function from x -> x -> bool.
10:18:59 <Smerdyakov> poing, right
10:19:16 <poing> Smerdyakov: oh wow that was easy enough to understand
10:19:42 <poing> everything else i've seen buries me in formal or semiformal type language
10:19:49 <Smerdyakov> RussellOConnor, if you mean for this to be what is actually passed to functions that use type classes, then you'll need Exists T:type. (T, T->T->bool).
10:20:26 <Smerdyakov> RussellOConnor, or more than that... otherwise, you can't produce any values of the type. :)
10:20:52 <Smerdyakov> RussellOConnor, of course, when we're dealing with function arguments, universal quantification is enough.
10:21:08 <RussellOConnor> Smerdyakov, usually the thing being quantified is always accessible.  I do admit there are a varaity of slightly different interpretations of Exists.
10:21:34 <poing> so if thingie is of type Frob, and i make it an existential type, is it otherwise still considered of type Frob?
10:21:38 <poing> or am i making any sense?
10:21:47 <RussellOConnor> (Int, equalInt) :: Exists T. T->T->bool
10:22:09 <Smerdyakov> RussellOConnor, ... which is a useless existential type. There is no way to do anything with it.
10:23:00 <Smerdyakov> poing, your question doesn't really make sense. It's like you're asking "If I declare that the number 1 is a natural number, is it otherwise still considered an integer?"
10:23:25 <Smerdyakov> poing, you can describe things in many ways. The act of describing doesn't change the thing itself.
10:25:18 <RussellOConnor> Smerdyakov, \x::Exists T. T->T->bool . \y::(fst x) . \z::(fst x) . (snd x) y z
10:25:59 <Smerdyakov> RussellOConnor, oh. I wasn't familiar with how Haskell handles these things.
10:26:18 <RussellOConnor> Oh, I don't know how Existential types work in Haskell.
10:26:27 <RussellOConnor> This is how they would work in Coq.
10:26:43 <RussellOConnor> But Coq has first class types. :-)
10:28:24 <poing> i always found that "separate type language" thing a little weird
10:28:49 <Smerdyakov> poing, it's necessary to ensure decidable type inference.
10:30:06 <RussellOConnor> Smerdyakov is right.  Coq gets around this by having the entire language decideable, and hence isn't turing complete.
10:30:24 <RussellOConnor> But Coq can do very very large inductions.
10:30:40 <poing> so coq is mostly for theorem proving?
10:30:53 * esap would suggest it's only necessary to have decidable type checking, type inference is just for convenience.
10:31:08 <poing> i have more pedestrian aims, like writing nethack in haskell ;P
10:31:13 <shapr> yay nethack!
10:31:20 <shapr> have you seen Igloo's hcurses binding?
10:31:23 * esap played nethack just yesterday.
10:31:39 <poing> actually i want to use something like sdl
10:31:50 <shapr> there are two SDL bindings that I know of
10:31:51 <poing> i'm thinking something more like telengard or temple of apshai
10:31:54 <poing> with nethack like features
10:32:10 <poing> shapr: got urls for those sdl bindings?
10:32:16 <shapr> telengard was fun
10:32:22 <shapr> been a long time since I played that.
10:32:33 <poing> thinking telengard with more "abstract" graphics
10:32:41 <poing> as if you could get any more abstract than telengard
10:32:52 <shapr> the dragon looked nice
10:33:01 <poing> not bad for ascii art
10:33:15 <poing> or commodore-ascii art at any rate
10:33:51 <RussellOConnor> poing, I use coq for theorem proving, but I don't think that is the focus of the developers.
10:34:18 <RussellOConnor> poing, Coq programs can be extracted into Haskell, or ocaml programs.
10:35:08 <poing> got a couple other "fun" projects like that i want to use a better language than C++ for
10:35:47 <poing> i started with learning ocaml, which may be more "practical".  i got real turned off by the syntax warts and the module system
10:35:51 <Smerdyakov> Coq is certainly not meant for writing programs.
10:36:13 <Smerdyakov> Theorem proving is certainly the main focus of the developers.
10:36:24 <poing> i found myself boggling at stuff like Array.append, List.append, MyListType.append, MyOtherListType.append
10:36:35 <shapr> type classes are handy
10:36:35 <poing> and no apparent way to make them polymorphic.  heck even C++ manages that
10:36:58 <poing> i quit C++ in disgust because of the syntax and the bloody linker
10:37:24 <RussellOConnor> I thought the Coq developers wanted to verify things, like circuts, and other random things. I guess they are techinically interested in theorems, but not mathematical theorems.
10:37:27 <RussellOConnor> But I could be wrong
10:37:38 <Smerdyakov> RussellOConnor, verification is theorem proving.
10:37:50 <RussellOConnor> True
10:38:09 <shapr> QuickCheck has been used in circuit testing
10:38:10 <Marvin--> oh crud
10:38:15 * esap has decreased significantly use of C++ due to evil semantic hacks.
10:38:29 * esap refers to sizeof.
10:38:41 <Marvin--> I just realized that ReadP isn't Haskell98
10:39:05 <poing> the more i read about generic programming in C++ the more horrified i got
10:39:13 <poing> angle brackets and traits everywhere
10:39:30 <poing> felt like it would take 10,000 LOC to write more than hello world
10:39:53 <poing> mess it up anywhere and watch the linker mysteriously die on you
10:39:58 <esap> poing: The traits are the good part. When you misuse sizeof in ways that are badly specified by the standard.
10:39:58 <poing> stuff like that
10:40:11 <poing> esap: sure they're good, i just wish they weren't so damn verbose
10:40:52 <esap> poing: The verbosity is just a syntactic problem. It's not a big deal, you can always fix that with some thinking.
10:41:34 <poing> esap: true, but then there's the linker.  not the language's problem, but the implementations all manage to kill me with it
10:41:50 <esap> poing: The problem is, sometimes there is so bad semantics that you have to work around all the small restrictions that were not thought through.
10:41:58 <poing> i've read the linkers and loaders book, and the linker still feels like spooky action at a distance, when it breaks, i'm hopelessly lost
10:42:04 <RussellOConnor> poing, except for the 10 000 LOC part, it sounds like programming in haskell.
10:42:31 <poing> well, when it dies, it's not mysterious
10:42:47 <esap> poing: I think C++ handled the linker issue actually pretty well. It does bring some restrictions, but not the kind that would be real problems.
10:42:54 <poing> haskell seems to have the property that if it compiles, it's more likely to work
10:43:13 <poing> .oO( as opposed to how well noncompiling programs work )
10:44:06 <poing> i dunno.  i used templates back when they were a hack done with macros, and i still have that discomfort today
10:44:15 <poing> maybe it's badly trained instinct
10:44:36 <esap> poing: Well the template stuff is not due to linkers.
10:45:07 <poing> true, but spitting out mangled names for errors doesn't endear me to the linker
10:45:21 <esap> poing: it's due to the awful #include module system, the declaration order dependencies and the complex lookup rules.
10:45:21 <RussellOConnor> KeyTool.hs:26:
10:45:23 <RussellOConnor>     No instances for (MonadStream Word8 (State (b Int Word8, t)),
10:45:24 <RussellOConnor>                       IArray b Word8)
10:45:26 <RussellOConnor>       arising from use of `parsePacket' at KeyTool.hs:26
10:45:27 <RussellOConnor>     In the first argument of `evalState', namely `parsePacket'
10:45:29 <RussellOConnor>     In the second argument of `($)', namely
10:45:30 <RussellOConnor>         `evalState parsePacket (coldArr, 0)'
10:45:32 <RussellOConnor>     In the result of a 'do' expression:
10:45:33 <RussellOConnor>         return $ (evalState parsePacket (coldArr, 0))
10:45:35 <poing> esap: yep, no truly separate compilation
10:45:35 <RussellOConnor> Is pretty mysterious to me. :-)
10:46:03 <esap> poing: just use c++filt for the mangled names.
10:46:36 <poing> that unexpands templates, it doesn't demangle linker output does it?
10:46:55 <poing> e.g. _z93jafJFJejgjC_foo_14aSjjJJwrt 
10:47:14 <esap> poing: it demangles symbol names in error messages.
10:48:36 <poing> hm.  does it exist for msvc?
10:48:54 <esap> poing: I don't know. Possibly.
10:50:11 <ne1> RussellOConnor's example can be deciphered without knowing the implementation of MonadStream, State, IArray, etc.  The message does not give implementation details and you need not worry about it.
10:51:04 <ne1> Whereas in C++ the compiler is more than glad to tell you that an error occurs inside <algorithm> and it lists a line of code that you are never supposed to read.
10:51:34 <poing> helium is supposed to have nicer errors
10:51:48 <poing> 'course helium doesn't have overloading so it has a simpler job
10:52:11 * esap thinks ghc does have pretty good error messages.
10:52:21 <ne1> Yeah.
10:52:29 <poing> ocaml can generate some truly mysterious ones
10:52:35 * shapr hops cheerfully
10:52:37 <poing> my favorite is what the interpreter does
10:52:50 <poing> "the expression is of type foo but is used here with type foo"
10:53:07 <Smerdyakov> poing, what's wrong with that? If it gives the position of the expression in question, that's just about the perfect message.
10:53:30 <poing> Smerdyakov: what would be a useful message would be "warning: redefinition of type foo"
10:53:39 <ne1> If you use/allow overloading you pay the price of harder error messages.  I think it can't be helped.  And ghc is already doing the best possible.
10:56:04 <Smerdyakov> poing, well, what else could that mean?
10:56:06 <poing> i guess emacs's caml mode  not reusing the same interpreter would allay that error.  it just boggles the hell out of beginners
10:56:35 <Smerdyakov> poing, actually, SML/NJ indicates that problem by prefacing the out-of-scope type with ?.
10:56:45 <poing> that would be nice
10:57:10 <Smerdyakov> SML is going to beat OCaml in the end, anyway. :)
10:57:14 <poing> or it could simply suffix the error with "(possible redefinition of type foo)" if it sees they're the same string
10:57:15 <Smerdyakov> Might as well switch now!
10:57:28 <poing> alice looks like a very nice ML
10:57:33 <poing> not too fast tho
10:58:57 <poing> postprocessing error message output with helpful diagnostics is a nice thing in general 
10:59:58 <poing> i guess with ocaml i could just s/(type (.*) but is used here with type \2)/\1 (maybe you redefined \2?)/
11:00:36 <poing> but i won't fall into that pit again, so putting a warning next to it on just my compiler doesn't do much good
11:03:51 <Smerdyakov> poing, MLton is the future!
11:03:55 <Riastradh> Smerdyakov, not until MLton gets separate compilation.
11:03:59 <Marvin--> crud crud crud
11:04:11 <Smerdyakov> Riastradh, it's coming. I said "future," after all.
11:04:17 * Marvin-- wants HaskellTwo asap
11:04:20 <shapr> GHC is the future!
11:04:29 <shapr> Marvin--: we could always start the committee ourselves
11:04:34 <poing> could certainly do with a haskell2004 standard
11:04:36 <Smerdyakov> I think OCaml is gaining in popularity much more quickly than Haskell is.
11:04:44 <Smerdyakov> It was even mentioned in some mainstream Linux magazine!
11:05:14 <shapr> wxHaskell was also mentioned in a mainstream Linux magazine
11:05:16 * shapr shrugs
11:05:24 <poing> for such a popular language, its development seems to be stagnant
11:05:36 <poing> ocaml's that is
11:05:45 <Riastradh> poing, there was a new release, 3.08, a couple weeks ago.
11:05:49 * shapr hacks on GF
11:05:58 <poing> did it add much?
11:06:02 <Riastradh> I don't know.
11:06:18 <Marvin--> I just realized that since ReadP isn't Haskell98, I can't very well use it in Cabal code
11:06:31 <Marvin--> or we're effectively shutting nhc out
11:06:35 <shapr> that sucks :-(
11:06:36 <Marvin--> &!¤%"
11:06:50 <poing> cabal is intended to be something like cpan?
11:07:02 <Marvin--> poing: more like distutils
11:07:14 <poing> ah nice
11:07:22 <Marvin--> using Parsec kinda sucks too, since it introduces a bigass dependency
11:07:29 <shapr> is Parsec H98?
11:07:37 <Marvin--> yes
11:07:48 <Marvin--> well, I *suppose* so, since it works in nhc :)
11:09:25 <Marvin--> meh, so, I wonder if we should just slap some parser combinators on top of ReadS and use that instead
11:09:40 <Marvin--> we're not talking huge strings anyway
11:11:33 <Marvin--> still sucks
11:13:10 <Marvin--> meh, and my ideas for refactoring the command/flag parsing is of course right out. Not only does it use local quantification, it uses Typeable and stuff that won't even work in hugs either
11:13:58 <Riastradh> Ah, the joys of making code portable!
11:14:15 <Marvin--> "joy" isn't the word I'd choose, but...yeah
11:15:20 <Smerdyakov> Ah, the choys of making cod potable!
11:15:52 * Riastradh renders Smerdyakov depotable.
11:16:16 * Marvin-- drains his sorrows in what's left of his beer glass
11:16:23 <Marvin--> (... about one sip)
11:57:53 <RussellOConnor> Anyone know if GHC is optimize away the copy in freeze under reasonable circumstances?
12:03:30 <shapr> you could dump the core and see
12:04:12 <nleavrh> presumably the GHC sources have a handy dandy database-o-optimizations, but I haven't heard of it.
12:08:27 <shapr> man, I want zsh completion for GHC
12:16:57 <shapr> hey skew, wassup?
12:17:01 <skew> hi
12:17:05 <skew> working on PHI
12:17:11 <shapr> nifty!
12:17:24 <skew> I haven't touched it in a long time, with hardware problems and starting a job
12:17:54 <skew> after working with MSVC for a while you really appreciate make!
12:17:58 <shapr> yah, my summer has been busy too
12:18:01 <shapr> :-)
12:18:08 <shapr> how's the job?
12:18:22 <Riastradh> (GNU make is actually a functional programming language!)
12:18:32 <skew> I like it. I'm working at symantec
12:18:44 <skew> security is pretty interesting
12:21:04 <Smerdyakov> Talking about security is a good way to get US government money!
12:21:22 <shapr> what sort of stuff do you do?
12:21:35 <Smerdyakov> He roughs up people with unregistered copies of software.
12:22:05 <skew> most recently, I'm working on making their scanning stuff faster
12:22:11 <skew> and thinking about capability security
12:22:18 <shapr> yah, capability security is nifty stuff
12:22:23 <shapr> have you played with E?
12:22:31 <Smerdyakov> skew, are you interested in research at all?
12:22:32 <skew> I've looked at it a bit
12:22:35 <poing> skew heh i'm now working at symantec too
12:22:42 <poing> just got bought (brightmail)
12:22:48 <skew> oh
12:22:51 <skew> I heard about that
12:22:56 <skew> I'm in SRL
12:23:01 <poing> oooh
12:23:08 <Smerdyakov> skew, what is SRL?
12:23:10 <poing> prolly why you're talking on #haskell ;)
12:23:19 <skew> "Symantec Research Labs"
12:23:27 <skew> pretty application oriented
12:23:40 <skew> our job is basically to take a step back from the day to day operations and think a bit
12:23:41 <Smerdyakov> skew, URL?
12:23:50 <skew> I don't think we actually have a website
12:24:09 <Smerdyakov> Oh. Sounds like sort of a PR trick to call it a "research lab." ;)
12:24:15 <poing> brightmail's kind of low tech.   turns out brute force works pretty darn well.
12:24:40 <skew> another intern is trying to get some numbers from you
12:24:55 <skew> you do give email messages some kind of score, right?
12:25:30 <poing> sure, based on lots and lots of simpler rules mostly
12:26:33 <poing> all the sophisticated semantic analysis stuff can go into the client now where it belongs
12:26:58 <poing> pc's have cycles to burn, mta's generally don't
12:28:25 <skew> I just rechecked the segfault in PHI, and I'm getting the same results
12:29:29 <skew> if I never decrement a refernce count I see no segfaults and leak memory like a sieve, as expected
12:30:00 <skew> if I add that code back the haskell program that embedds a python interpreter segfaults, but the python program importhing a haskell library runs fine and doesn't leak
12:30:35 <Smerdyakov> skew, why do you want to use both Haskell and Python in one program?
12:31:28 <skew> Python is more dynamic and has some interesting libraries
12:31:28 <shapr> skew: StablePtr ?
12:31:43 <shapr> hiya stepcut 
12:31:51 <poing> a language that took the best of haskell and python ...
12:31:52 <Smerdyakov> skew, those aren't very convincing reasons without more context.
12:32:04 <poing> huh.  that'd be like a food that took the best of steak and cheesecake
12:32:09 <stepcut> hey shapr
12:33:31 <skew> well, it's mostly to try making this sort of interface
12:33:52 <skew> but that's why I picked Python
12:34:13 <RussellOConnor> Hmm, how do I convert a Word8 into an Integer?
12:34:25 <skew> to
12:34:30 <skew> toInteger?
12:34:34 <RussellOConnor> oh, there is a toInteger.
12:34:38 <RussellOConnor> :-)
12:35:02 <RussellOConnor> I've used fromInteger everywhere before.
12:35:09 <Marvin--> or use fromIntegral
12:35:10 <Smerdyakov> skew, it seems to me that, whenever people are combining high level languages in a single project, it's because of inadequate support for dynamic loading of code.
12:35:13 <skew> toInteger lives in Integral
12:35:19 <Smerdyakov> skew, with that, there's no reason to mix.
12:35:39 <shapr> I want PHI
12:35:49 <shapr> it would make my life easier.
12:35:56 <skew> there are also cases where complicated libraries are only implemented for the inferior languages ;)
12:36:10 <Smerdyakov> Sure, but most languages provide C interfaces, obviating the problem.
12:36:23 <skew> how is that?
12:36:33 <Smerdyakov> Language A talks to C talks to Language B.
12:36:37 <Smerdyakov> Now you can use either
12:36:40 <Smerdyakov> 's libraries in the other.
12:36:50 <poing> use SOAP!
12:36:52 * poing hides
12:37:14 <skew> that's the foundation, but you want to avoid writing C
12:38:20 <Smerdyakov> You do, but it's relatively uncommon to be writing this glue code.
12:38:26 <skew> I am basing this of the FFI and Python's C interface, if that wasn't obvious...
12:38:28 <Smerdyakov> The time is insignificant compared to normal development.
12:38:34 <skew> I'm not that crazy...
12:39:06 <shapr> skew: anything new to pull from the PHI repo?
12:39:21 <skew> not in the last few months...
12:39:30 <skew> mostly my system has been mysteriously refusing to turn on
12:40:20 <skew> I don't think I need StablePtrs
12:40:32 * skew checks if he actually uses them
12:42:06 <skew> I'm not actually using them in the bits that segfault
12:43:00 <skew> poing: where is BrightMail located?
12:43:13 <poing> skew san francisco
12:44:07 <skew> I'm in santa monica (actually, commuting from pasadena)
12:44:15 <poing> yow
12:44:28 <poing> i walk five blocks to work :)
12:44:59 <skew> I decided I'd rather not try to get an apartment in santa monica. Housing prices there are crazy
12:45:14 <poing> you should see SF
12:48:50 <skew> shapr: are you building a web framework in Haskell?
12:55:47 <shapr> skew: trying to stick together WASH and GF at the moment
12:55:59 <skew> what is GF?
12:58:08 <stepcut> skew: he is trying to get is girlfriend to do is dirty laundry
12:58:46 <skew> that sounds difficult
12:59:42 <Smerdyakov> Yeah, she'll never do _my_ dirty laundry.
13:03:40 <shapr> GF is Grammatical Framework
13:03:44 <shapr> and it doesn't clean my laundry.
13:03:50 <andersca> :(
13:04:50 <Smerdyakov> Sounds like it's time for a bug report, then!
13:05:09 <RussellOConnor> feature request I beleive
13:11:38 <RussellOConnor> Is there a monad iterate function?
13:11:51 <shapr> run?
13:13:12 <skew> not in general
13:13:38 <RussellOConnor> I want to iterate an operation, and ignore the result.
13:13:42 <skew> unless you monad is lazy
13:14:31 <skew> that's easier. forever = sequence_ . repeat should work
13:14:53 <RussellOConnor> right
13:14:59 <Igloo> replicateM_
13:15:15 <RussellOConnor> Igloo, bingo!
13:15:18 <RussellOConnor> I think
13:15:30 <RussellOConnor> if I could find documentation
13:15:31 <skew> that takes a finite number of repitions
13:15:35 <skew> Control.Monad
13:15:46 <RussellOConnor> I want to repeat only n times.
13:15:52 <RussellOConnor> I guess I should have been more clear
13:15:53 <skew> oh, that's exactly it then
13:16:13 <skew> I was thinking the iterate f x = x : iterate f (f x)
13:17:18 <RussellOConnor> This haskell IRC channel is super useful!
13:18:36 <skew> repeatM_ would be a natural addition to the library
14:09:22 <RussellOConnor> Show doesn't always print the Haskell representation of an object
14:10:02 <RussellOConnor> > System.Time.TOD 0 0
14:10:03 <RussellOConnor> Wed Dec 31 19:00:00 Eastern Standard Time 1969
14:15:06 <Cale> RussellOConnor: that's right
14:20:25 * RussellOConnor adds more typeing information to help prevent confusing error messages.
15:01:11 <RussellOConnor> 155594666598473668263331020269253862048050999253592753843206143787634303669692063260867330557028066153402709183142837013206304913239785932235213714494125267507991185313047746006759154915410467032198464811810472878988565959349849767480917437096998917087918214444497422085181838567929923802646865849162590758283
15:01:30 <RussellOConnor> This number is what Haskell's Integer type is all about.
15:04:07 <Cale> Hey, it's prime :)
15:04:46 <RussellOConnor> yep
15:04:55 <RussellOConnor> How did you check that?
15:05:00 <Cale> Mathematica
15:05:05 <RussellOConnor> ah
15:05:39 <RussellOConnor> It's part of my public DSA key
15:06:00 <RussellOConnor> I'm writing an OpenPGP packet parser in Haskell.
15:07:21 <Igloo> Oh, I already have a (very) partial one
15:07:30 <RussellOConnor> really?
15:07:37 <Igloo> It's probably pretty ugly but I can dig it out if you're interested
15:08:10 * nleavrh starts a GHC compile on MacOSX when J's q: can't handle that number.
15:08:16 <RussellOConnor> I perhaps wouldn't mind comparing it.  But don't spend too much effort.  Half the reason for writing this is to practice my Haskel
15:10:20 <Igloo> Looks like it can decrypt symmetrically encrypted, compressed files with a password of " "
15:10:32 <RussellOConnor> way further than I've gotten
15:10:42 <RussellOConnor> I can read in the parameters of a DSA key
15:11:16 <Igloo> http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/HazGuard/HazGuard-0.1.0.tar.gz isn't far off my working directory, I think
15:11:53 <RussellOConnor> Thanks.  I'll have a look at it later.
16:39:29 <aFlag> the emacs haskell module is mixing spaces and tabs, shouldn't it use only spaces?
16:39:47 <Igloo> Yes
16:40:04 <Igloo> (IMO. But I'm right.  :-)  )
16:40:32 <Riastradh> (setq-default indent-tabs-node nil) ; Kill all tabs!
16:40:57 <Riastradh> ...oh, you already found out in #emacs.
16:58:53 <stepcut> can ghc generate statically linked binaries ?
17:00:36 <Riastradh> A better question might be 'can it _not_ generate statically linked binaries?', to which I believe the answer is 'no.'
17:01:32 <stepcut> ldd ./=build/xl1.static
17:01:32 <stepcut> 		libm.so.6 => /lib/tls/libm.so.6 (0x40023000)
17:01:32 <stepcut> 	libgmp.so.3 => /usr/lib/libgmp.so.3 (0x40046000)
17:01:32 <stepcut> 	libdl.so.2 => /lib/tls/libdl.so.2 (0x40073000)
17:01:32 <stepcut> 	libc.so.6 => /lib/tls/libc.so.6 (0x40076000)
17:01:32 <stepcut> 	/lib/ld-linux.so.2 => /lib/ld-linux.so.2 (0x40000000)
17:02:05 <Igloo> Yes, -static
17:02:15 <Igloo> You can't not linke statically against the Haskell libraries currently, though
17:02:17 <stepcut> -static didn't work for me, but -optl -static did
17:02:30 <Igloo> Hmm, I thought -static was supposed to
17:02:41 <stepcut> dunno
17:03:25 <Igloo> Oh, it's "Use static Haskell libraries" according to teh manpage. I wonder how that differs from normal
17:03:40 <Igloo> Or it could just be accepted for future use I guess
17:16:44 <aFlag> hum... the indentation in the emacs haskell mode
17:16:49 <aFlag> is not working good
17:18:41 <aFlag> i think i'm installing it wrongly or something, did anyone have problems with it?
17:45:34 <aFlag> the emacs indentation module is using tabs and it's not indenting right i've tried to add (setq-default indent-tabs-node nil) ; on .emacs but it didn't work :-/
17:46:06 <Cale> that worked for me
17:46:10 <Cale> but I use the simple indent
17:46:17 <Cale> not sure about the complex one
17:47:06 <aFlag> hum... i'll try the simple one
17:49:21 <aFlag> hum... even the simple one is mixing spaces and tabs
17:59:03 <Cale> aFlag: M-: indent-tabs-mode
17:59:09 <Cale> and check that it's actually nil
18:00:27 <aFlag> i think it's t
18:01:46 <aFlag> wathever it means
18:01:59 <aFlag> i don't know, maybe the identation mode is changing it
18:04:23 <Cale> t means true
18:04:33 <Cale> you want it to be nil, which means false
18:05:00 <aFlag> oh
18:05:47 <aFlag> but i seted it to nil at the end of .emacs, shouldn't it be nil?
18:06:13 <Cale> yeah, it really should
18:11:14 <aFlag> how i set it during the emacs session?
18:11:56 <stepcut> M-: (setq indent-tabs-mode 'nil)
18:15:43 <shwom> hey
18:16:53 <shwom> i geuss no one is going to talk in here
18:17:24 <shwom> hello?
18:17:36 <arjanb> hey
18:17:38 <Riastradh> Do you really expect to have a long & involved discussion in two minutes?
18:17:48 <shwom> lol
18:17:57 <shwom> nope
18:18:11 <Smerdyakov> shwom expects everything.
18:18:16 <Smerdyakov> shwom expects all expectations.
18:18:31 <shwom> how is everyone today?
18:18:46 <Riastradh> I'm feeling Schemely.
18:19:17 <shwom> alright
18:19:20 <shwom> lol
18:19:40 <shwom> does anyone know safecracker?
18:20:02 <Smerdyakov> No.
18:20:12 <shwom> ok
18:20:23 <Riastradh> No.
18:20:42 <Smerdyakov> It sounds dodgy.
18:20:43 <shwom> does anyone know anything about python?
18:20:49 <Smerdyakov> I know that Python is dodgy~!
18:21:00 <shwom> lol
18:21:03 <Riastradh> I know Python's anonymous functions are horribly broken.
18:21:12 <shwom> ok
18:21:36 <shwom> i know also but i make it a point to learn every laung i come in contact with
18:21:58 <aFlag> Riastradh: how so?
18:22:54 <Riastradh> I learn enough of a language to get a feel of its mentality, whereafter I decide whether or not it's worth learning.  Python failed that test: yet another overly 'object-oriented' language with too much focus on quantity of library and not enough on language.
18:23:09 <Riastradh> aFlag, it doesn't have real closures.
18:23:25 <shwom> yeah
18:23:27 <aFlag> what do you mean by that?
18:23:49 <Riastradh> Functions in Python don't retain their environments properly.
18:24:32 <shwom> it is not  something i would like to stay with
18:24:59 <shwom> pluss it is interpreted
18:25:01 <aFlag> how would be properly?
18:25:11 <Smerdyakov> aFlag, just look up what closures are....
18:25:53 <Igloo> Can you give a simple example? Surely they aren't just dynamically scoped?
18:27:36 <shwom> the real problem i see with it is the fact that in order for someone to run a program scripted in py the user has to aquire the interpreter
18:28:55 <shwom> i have found some small interpreters which work for small programs but for a large programs it is not to stable
18:29:00 <aFlag> most distributions come with it
18:29:38 <shwom> true but if you want to send a program to a friend he must download the interpreter also
18:30:45 <shwom> but that is mabey, because i am new to the laung
18:34:01 <shwom> does anyone know anything about rerouting encryptions
18:35:49 <shwom> ???
18:36:07 <Riastradh> I'm sure there exists someone who does.
18:36:15 <shwom> lol
18:36:18 <shwom> ok in this room
18:37:14 <Smerdyakov> shwom, why are you asking in this channel?
18:37:23 <shwom> i dont know
18:37:28 <shwom> i was just wondering
18:37:50 <shwom> to talk about something
18:37:57 <shwom> because i am board
18:38:02 <shwom> and i have to win a bot
18:38:04 <shwom> bet
19:56:05 <mai1man> hello, anyone can say me what could cause a Control stack overflow, 'cause I'm a little lost :)
20:00:58 <mai1man> well, thanks anyway
21:15:55 <aFlag> where can i read the haskell api?
21:16:22 <aFlag> is there some kind of help function on ghc's interative interpreter?
21:17:10 <ayrnieu> :help
21:17:25 <ayrnieu> but I don't know what you mean by 'haskell API'.  GHC has library documentation.
21:17:25 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
21:17:47 <Cale> http://www.haskell.org/onlinereport/
21:18:08 <Cale> apart from the libraries, you'll want to look at the Standard Prelude
21:18:19 <Cale> in fact, that should be the first thing you look at
21:18:22 <Cale> (the Prelude)
21:32:43 <aFlag> yeah, i want to look at the stuff in the prelude
21:32:56 <aFlag> where can i read about it?
21:33:32 <Riastradh> Look at the pages at the URLs Cale already pointed you to...
21:33:49 <Cale> the online report links to the prelude
21:34:17 <aFlag> ok, thanks
21:43:41 <aFlag> haskell is hard, i want my for loop and side-effects! :P
21:44:25 <ayrnieu> aflag - the factorial page has something that you can use as a for loop, IYRWT use it.
21:45:09 <Riastradh> Side effects have dangerous side effects, you know!
21:46:21 <aFlag> i'm trying to do this "yet another haskell tutorial" exercice but it's quite hard
21:46:46 <aFlag> i can't have arguments on main, can i?
21:47:47 <ayrnieu> aflag - no.  Why would you want to?
21:48:08 <heatsink> aFlag: main takes one argument exactly, it's an IO monad
21:53:55 <SamB> yes, it takes the world!
21:54:18 <SamB> look at the source for the IO monad if you don't believe me!
21:55:12 <Riastradh> RUN!  It's out to conquer the world!
21:55:17 <Riastradh> Oh, wait, no, don't run it!
21:55:42 * SamB bursts into fits of laughter
21:55:44 <Riastradh> Hands off of unsafePerformIO!
21:56:52 * Smerdyakov bursts through a brick wall and asks if anyone wants some Kool-Aid.
21:57:18 * heatsink gives Smerdyakov a Hawaiian Punch
21:57:18 <Riastradh> No, I prefer my water not to have a very slight disgusting flavour in it.
21:57:25 <SamB> Smerdyakov: sorry, I don't like that stuff anymore.
21:58:01 <Riastradh> Distilled water would be preferrable, but as long as it has nothing more than the natural minerals in it I'd be fine with it.
21:58:08 <SamB> it tastes like crude chemical mixtures
21:58:26 <Smerdyakov> Riastradh, you don't like fluoride?
21:58:40 <ayrnieu> distilled water grows acidic when exposed to normal air, from the CO2.
21:58:56 <ayrnieu> I'll take filtered water =)
21:59:05 <Smerdyakov> I live on tap water.
21:59:32 <ayrnieu> smerdy - yeah, me too, but I remain preferential to filtered water -- just not so much to, you know, go out and buy a filter and use it.
21:59:49 <Riastradh> What comes out of my tap qualifies as 'natural minerals!'
22:00:08 <Smerdyakov> I wonder if "my tap" is a euphemism.
22:00:28 <Riastradh> No.  You just have a brain that thinks of the dumbest connections.
22:00:57 <ayrnieu> really, I just wish that I had San Antonio, TX water.  Better than bottled water, mm.
22:01:08 <SamB> well, too many euphamisms are around for a certain thing of which I know, imo.
22:01:28 <Smerdyakov> SamB, please never write that sentence again.
22:01:37 <ayrnieu> Smerdy - I "drink from the tap" AMATNB, but this isn't relaly the time.
22:01:48 <Smerdyakov> ayrnieu, "AMATNB"?
22:01:59 <Riastradh> Commercial bottled water is such a ridiculous concept.
22:02:27 <Smerdyakov> Ridiculous concepts are the cornerstone of civilization. You can't turn your back on a billion years of progress.
22:02:36 <SamB> Smerdyakov: I was certainly not planning on it
22:02:37 <ayrnieu> Smerdy - 'as much as the next boy', from 'as much as the next girl', from Adam Cadre's "I-0: Jailbait on the Interstate" IF game.
22:02:52 <Riastradh> Humans have existed for millions of years quite fine without commercial bottled water.
22:04:16 <ayrnieu> Riastradh - likewise, pennicilin, Haskell, wall-mounted remote-controlled air conditioners, and knot theory.
22:04:24 <clausen> Riastradh: sort of
22:04:31 <clausen> Riastradh: if you travel, you tended to get lots of diseases
22:04:36 <SamB> what is that second-to-last thing you mentioned for?
22:04:39 <clausen> *travelled
22:05:03 <ayrnieu> SamB - they have them in Japan.
22:05:19 <Riastradh> clausen, the fact that it's commercial, however, is ridiculous.
22:05:44 <SamB> they have all kinds of crazy electronic-related peraphranalia in japan.
22:05:49 <Smerdyakov> Commercialness is always ridiculous.
22:05:50 <clausen> Riastradh: why?
22:06:07 <SamB> Riastradh: you expected residential? industrial?
22:06:31 <Smerdyakov> Oh my god.
22:06:34 <clausen> non-profit water?
22:06:39 <Smerdyakov> It's like the Star Trek: TnG episode "The Game."
22:06:42 <Smerdyakov> Except it's Sim City.
22:06:45 <Smerdyakov> And They've gotten SamB.
22:06:55 <SamB> heh
22:07:11 <SamB> I don't know if I saw that one.
22:07:21 <Smerdyakov> SamB, Ashley Judd as Wesley's girlfriend?
22:07:41 <Riastradh> clausen, it's _water_.  It's a fundamental element of much life.  Why must I pay money to some corporate entity just to get a certain solution of water that my body is used to?
22:07:53 <SamB> who are "they"?
22:08:09 <clausen> Riastradh: so is clothing, food, ...
22:08:18 <Cale> I don't like bottled water either. I don't understand why people buy it.
22:08:23 <Habs24> Commercialness is always ridculous?  Explain these comments.
22:08:40 <Riastradh> clausen, those are dramatically varied areas.
22:08:55 <Riastradh> Water is water, modulo some certain elements.
22:09:13 <Riastradh> (Of course, most of my clothes were free anyway.)
22:09:38 <clausen> Riastradh: disagree... first, you need to transport it
22:09:43 <clausen> Riastradh: you want it to be sterile
22:09:44 <Riastradh> Transport what
22:09:45 <Riastradh> ?
22:09:55 <clausen> Riastradh: and you want it to have the right mineral composition
22:09:59 <clausen> pure water is toxic
22:10:10 <Riastradh> ??
22:10:16 <clausen> Riastradh: you need to get it from water source to mouth ;)
22:10:22 <SamB> Riastradh: and you definately don't want modern rain!
22:10:32 <Habs24> Actually, there are some notable differences in drinking water, tap water and spring water.
22:10:34 <ayrnieu> Riastradh - for the same reasons that you don't want to drink too much distilled water.
22:10:36 <clausen> Riastradh: if you drink lots of pure water, it will leech minerals from your body
22:10:40 <Riastradh> SamB, modern rain tends not to be pure water...
22:10:43 <Habs24> The biggest difference is in drinking water, where minerals are added for taste.
22:10:48 <clausen> pure water is dangerous
22:10:51 <Habs24> Sometimes, vitamins.
22:10:51 <SamB> Riastradh: exactly!
22:10:53 <clausen> rain water is ok :)
22:10:56 <Habs24> It's always filtered.
22:11:00 <SamB> not even with minerals only!
22:11:21 <SamB> clausen: umm, you are out of date with current rain.
22:11:21 <Habs24> You don't want to drink tap water from places like Houston either.
22:11:32 <ayrnieu> habs - hm, why not?
22:11:33 <SamB> current rain is polluted!
22:11:34 <clausen> SamB: well, where I live, rain water is ok
22:11:46 <SamB> oh. where do you live?
22:11:49 <clausen> SamB: melbourne, australia
22:12:05 <SamB> hmm. australians are probably not as stupid as americans.
22:12:19 <ayrnieu> SamB - well, they have socialized health care.
22:12:33 <ayrnieu> habs - Houston draws from an aquafer, don't they?
22:12:37 <SamB> what does healthcare have to do with it?
22:13:08 <Habs24> ayrnieu - Houston is one of the most polluted cities in North America.
22:13:24 <ayrnieu> SamB - they pay less for their healthcare than Americans and they get better healthcare for Americans, and they live longer on average.  That seems a point in their favor.
22:13:35 <SamB> oh.
22:13:41 <SamB> okay.
22:13:53 <ayrnieu> according to Zhivago, anyway.  I haven't researched it on my own.
22:14:05 <SamB> well, Zhivago is often correct
22:14:19 <ayrnieu> hobs - ... well, OK, I suppose that pollution could reach the aquafer from the 'recharge areas', but I don't think that matters so much.
22:14:20 <Smerdyakov> Zhivago is often a jackass. Ahem.
22:14:35 <SamB> well, possibly.
22:14:47 <SamB> Its so hard to tell when I can be so thick-skulled at times ;-)
22:15:28 * Riastradh raps SamB's skull with a hard cane.
22:15:46 <SamB> figuratively speaking...
22:16:11 <Habs24> Anyways, why is $1 for water so bad?
22:16:20 <Habs24> People pay $1 for bad music online.
22:16:28 <Smerdyakov> Riastradh, you forgot the quotes around your new hit rap single, "SamB's skull with a hard cane".
22:16:30 <Habs24> At least you benefit drinking mineraled water.
22:16:36 <clausen> I think it would be more efficient to have public taps
22:17:02 <Riastradh> Um, you suggest that people should value a song and a fundamental element of life about the same?
22:17:03 <clausen> i.e. everyone would be happier (there would be money left over to compensate the bottle-distributors)
22:17:12 <SamB> clausen: than selling bad rap at $1 a song online?
22:17:15 <Habs24> I love rap!  "My baby takes the morning train, he works from nine till five and then!"
22:17:21 <Smerdyakov> Watch out! clausen is an economics student!
22:17:33 <Habs24> Riastradh - Where the hell did you get that assumption from?
22:17:33 <Smerdyakov> He can't be counted on to think straight on this issue!
22:17:36 <clausen> SamB: I was talking about water, but come to think of it...
22:17:44 <ayrnieu> Riastradh - both luxuries, when you've whistling to yourself and dirty water.
22:17:45 <clausen> Smerdyakov: :p
22:18:27 <Habs24> clausen - Economics eh?  Cool.
22:18:38 <Riastradh> Habs24, you suggested that $1 for water is not so bad, and that people pay $1 for music online.  A simple combination and...
22:18:38 <clausen> Habs24: yeah, I'm moving that way...
22:18:52 <SamB> Riastradh: you don't think music is essential to life?
22:19:02 * Smerdyakov tweaks SamB's ear.
22:19:15 <SamB> although there is one obvious difference...
22:19:21 <clausen> SamB: I don't think bad rap is essential to life :p
22:19:29 <Habs24> Yes, $1 for chilled, filtered water isn't that bad when people pay $1 for "Get outta' da way Bitch"
22:19:29 <SamB> you can't drink a recording or simulation of water :-(
22:19:41 <Habs24> You want to whine about something, whine about that.
22:19:43 <SamB> clausen: I said *music*
22:19:51 <SamB> what does rap have to do with music?
22:20:06 <clausen> SamB: well, the original comparison was between $1 on bad rap and $1 on water
22:20:11 <Habs24> SamB - Lots.  
22:20:47 <SamB> Habs24: demonstrate?
22:20:58 <Riastradh> Hmmm.  It seems that every time I say something in this conversation it turns out to be controversial and branches the conversation off in another direction.
22:21:22 <Smerdyakov> Riastradh, and now you expect someone to make a joke about that last statement being controversial?
22:21:23 <Riastradh> Branch!  Branch!
22:21:25 <Habs24> Well, Rap is basically the newer form of blues.
22:21:25 <Smerdyakov> Riastradh, I don't think so.
22:21:31 * Riastradh hiccups.
22:21:37 <SamB> Riastradh: where is the repo?
22:21:37 <Habs24> Or something close
22:21:42 * Smerdyakov bottles Riastradh's hiccup and sells it to gypsies.
22:21:59 <Habs24> I remember seeing it in a documentary.
22:22:07 <clausen> SamB: on google: "water rap" 729,000.  "music rap" 4,710,000
22:22:20 <clausen> SamB: therefore, music and rap are more related than water and rap
22:22:22 <SamB> clausen: okay, so google is a little confused.
22:22:24 <clausen> (marginally)
22:22:39 <clausen> SamB: google just says what we tell it
22:22:44 <clausen> google confused => we're confused
22:22:45 <SamB> true.
22:22:47 * ayrnieu half-wants to try and implement K in Haskell, aside, instead of continuing with his mad 'just run linux in bochs on MacOSX!' scheme.
22:22:54 <SamB> so most of america is confused. not my fault!
22:23:23 <SamB> ayrnieu: you might see if qemu could be of use
22:23:29 <SamB> it has JIT
22:23:44 <ayrnieu> SamB - you can probably reconfuse it with a 'google bomb' =)
22:23:54 <Habs24> There are different types of bottled water anyways.
22:24:02 <Riastradh> SamB, yes, it's your fault by not spreading anti-confusion among the masses of Americans!
22:24:13 <clausen> Habs24: are some types of bottled water more related to rap than others? :p
22:24:15 <SamB> ayrnieu: the google bombsquad will just disarm it even if I manage to!
22:24:20 <Riastradh> Percolate the Enlightenment of non-confusionism!
22:24:53 * ayrnieu used to drink perrier because he liked the taste.
22:24:56 <Habs24> clausen, is that some kind of a sad attempt to make a witty comment?
22:25:03 <SamB> Habs24: oh, you mean rap could be like seltzer water?
22:25:29 <Riastradh> Habs24, I think that's what this entire discussion has been a sequence of.
22:25:50 <clausen> Habs24: yes.
22:26:12 <Smerdyakov> clausen, I heard you are a total nerd!!
22:26:32 <clausen> Smerdyakov: from amy? :)
22:26:36 <Smerdyakov> clausen, yup!
22:27:09 <clausen> I heard people couldn't resist having long battles with you...
22:27:17 <clausen> (gambling party comes to mind?)
22:27:33 <clausen> I guess I'm a total nerd :)
22:27:47 <Smerdyakov> clausen, ? We had a long Illuminati! game.
22:28:15 <clausen> didn't they want to bet on it?
22:28:16 <Smerdyakov> [We are talking about the Summer School on Software Security that apparently none of you were cool enough to attend!)
22:28:39 <Riastradh> How do you know I didn't, Smerdyakov?
22:28:43 <Smerdyakov> clausen, I don't think anyone cared.
22:28:53 <Smerdyakov> Riastradh, the list of attendees is available, and you're not on it.
22:28:55 <clausen> she thought they did *shrug*
22:29:00 <Riastradh> Maybe I used an alias.
22:29:37 <clausen> (she didn't, however)
22:35:40 <SamB> why did Smerdyakov come crashing through a brick wall anyway?
22:36:06 <SamB> and bring up the foul concoctions known as Kool-Aid
22:36:29 <Smerdyakov> Because * SamB bursts into fits of laughter
22:36:53 <SamB> Smerdyakov: that is a rather odd reason!
22:37:33 <Smerdyakov> SamB, _bursting_ through a wall...
22:40:17 <clausen> Smerdyakov: do you know anything about John Mitchell's crypto calculus thingy?
22:41:29 <ayrnieu> ah, another kind of unpotable rain.
22:41:55 <SamB> no more flamefests about water, please!
22:42:01 <SamB> and I'm not talking to FlamingRain
22:42:13 <FlamingRain> lol
22:42:32 <FlamingRain> i'm potable! it's that damn greek fire that's the problem!
22:42:58 <Smerdyakov> clausen, no. It might be related to things that I know about, though.
22:43:57 <ayrnieu> oh, very aside, if anyone happens to want a gmail invite (but see the paranoid gmail-is-for-'Google will let the government scan my mail for any reason'), /msg me your First/Last/Email.  I've two invites left of my ration.
22:45:03 <SamB> I wouldn't expect google to let the government scan mail. I'd just worry about what *they* might do scanning my mail.
22:45:52 <Smerdyakov> I don't need gmail! I am a member of the Internet Hosting Cooperative! You can be, too! http://hcoop.net/
22:46:50 <clausen> Smerdyakov: http://theory.stanford.edu/people/jcm/papers/ProbProcessCalc.pdf
22:48:34 <Smerdyakov> clausen, a quick glance reveals that this is based on the Pi calculus, which I am reasonably familiar with. If he mentions anything by Abadi as inspiration, then I probably know a bit about that, as well.
