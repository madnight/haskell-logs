02:23:22 <shapr> good morning #haskell! 
02:28:03 <norpan> hej shapr och andersca
02:28:35 <andersca> hej hej
02:28:40 <andersca> coffee
02:30:39 <shapr> mmm coffeee
02:31:23 <norpan> it's a drug i tell you. stop now or be forever damned!
02:31:42 <andersca> I guess I'm forever damned already
02:36:08 <Lemmih> I get "/usr/lib/libwxc-gtk2.4.2-0.8.so: undefined reference to `wxGLCanvas::SwapBuffers()'" when I try to compile a program utilizing wxHaskell.
02:40:15 <shapr> is that with the wxHaskell debs?
02:43:02 <sazzle> Lemmih: with ghc, or ghci?
02:50:14 <Lemmih> ghc.
02:50:37 <Lemmih> shapr: Nope, compiled 0.8 from source.
03:03:53 <Lemmih> Yo Marvin--
03:04:26 <Marvin--> yo
03:05:05 * Marvin-- fights nhc
03:05:19 <Marvin--> Type error type clash between System.IO.Error.IOErrorType and Prelude.IOError
03:05:22 * Marvin-- sighs
03:07:15 <Marvin--> trying to use the hierarchical libs as per the ghc docs in nhc turns out to be quite the challenge
03:10:12 <Marvin--> oh. damn.
03:12:18 <Marvin--> the is* functions take IOErrorType, not IOError
03:12:37 <Marvin--> which would be all right, except that nhc doesn't seem to ship any ioeGetErrorType function!
03:12:42 <Marvin--> oh for crying out loud
03:13:40 <Marvin--> oh wait, there are non-ErrorType is* predicates too, phew
03:15:22 <Marvin--> gnngh, the only is* predicate that returns True on trying to removeFile a directory is the isAlreadyExistsError
03:15:56 <Marvin--> well, it returns True on nhc, not on ghc
03:15:57 <Marvin--> joy
03:16:05 <norpan> happy joy
03:16:31 <Marvin--> of course, I wouldn't need this if I could actually determine whether a file is a directory or not, in a proper way
03:17:59 <Marvin--> remind me to whack syntax over the head for importing GHC.IOBase
03:22:49 <Marvin--> yay, ifdefs
03:23:39 <Lemmih> shapr: There are debs for wxHaskell?
03:24:05 <Marvin--> Lemmih: in haskell-experimental
03:24:09 <Marvin--> though they're kinda broken
03:27:38 <Marvin--> #ifdef NO_UNIX
03:27:38 <Marvin--> data FileStatus = FS_ { isDirectory :: Bool }
03:27:38 <Marvin--> getFileStatus :: FilePath -> IO FileStatus
03:27:38 <Marvin--> getFileStatus path = liftM FS_ (doesDirectoryExist path)
03:27:38 <Marvin--> #endif
03:27:41 <Marvin--> how's that for hackery? :-/
03:28:34 <sazzle> you can do #ifdef's in haskell?
03:29:07 <Marvin--> if you pass the file through cpp, sure
03:29:19 <Marvin--> and there's cpphs too
03:29:34 <sazzle> ah
03:30:00 <Marvin--> Igloo: ping
03:31:11 <Marvin--> well, that got rid of the GHC.IOBase import, though I'm not quite sure it will work
03:32:42 <bourbaki> hi
03:33:01 <Igloo> @type Directory.doesDirectoryExist
03:33:02 <lambdabot> Directory.doesDirectoryExist :: FilePath -> IO Bool
03:33:10 <Igloo> Isn't that what you want?
03:33:33 <Igloo> Of course, you'll have to catch exceptions anyway in case someone fiddles it from underneath you
03:34:09 * Igloo isn't really here
03:35:55 <Marvin--> Igloo: no, because that returns true for symlinks to directories
03:37:09 <Lemmih> Yay. Recompiling wxHaskell with openGL support did the trick (-:
03:37:32 <Marvin--> I'm trying to decide whether it's Good Enough to try (removeFile foo) and in the case of errors, use doesDirectoryExist
03:41:16 * Marvin-- swears at nhc for not distributing Control.Exception
03:42:29 <Marvin--> oh dear god, syntax, what have you done
03:43:59 <sazzle> Lemmih: didn't for me :-(
03:47:55 <Marvin--> Lemmih: in ghci too?
03:50:12 <Lemmih> No /-:
03:51:37 <Lemmih> It just stops when it's linking wxcore.
03:51:52 <Marvin--> exactly, that's the Issue
03:55:18 <Marvin--> what the
03:55:45 <Marvin--> Fail: The class Prelude.Monad has no instance for the type Prelude.Either.
03:55:48 <Marvin--> but I just defined it!
03:55:49 <Marvin--> dammit
03:56:40 <Marvin--> errrrr, or at least that was the INTENTION
03:57:26 <Marvin--> nhc loses my instantiation of Either!
03:57:31 <Marvin--> of Monad Either, that is
03:57:41 <Marvin--> what on earth
03:58:44 <Marvin--> gnnngh
03:58:48 <Marvin--> NHC IS BROKEN
03:58:55 <Marvin--> stupid thingy
04:02:57 <kosmikus> Marvin--: you cannot define a monad instance for Either?
04:06:54 <Marvin--> kosmikus: heh, I have a horrible hack: http://cvs.haskell.org/darcs/cabal/Compat/H98.hs
04:07:12 <Marvin--> but when I compile that module with nhc, it seems to lose the Monad instance
04:07:47 <Marvin--> at least it's not reflected in the .hi file and I can't compile a simple test program that includes the Compat.H98 module and does sequence [Left 'a']
04:11:24 * Marvin-- sighs
04:11:33 <Marvin--> I wonder if I'll get cabal to build with nhc any time this year
04:14:46 <Marvin--> oh well, off for lunch
04:16:01 <shapr> hOppiness!
04:16:53 <shapr> bringert: hey, does the 19k entry swedish lexicon have matching english vocab?
04:28:10 <brandon__> hi
04:30:58 <shapr> hiya brandon__, wassup?
04:31:02 * shapr bounces
04:31:37 <Lemmih> brandon__: Learning Haskell?
04:34:04 <shapr> bringert: does infra/Operations.Err look a lot like Either?
04:41:05 <kosmikus> Marvin--: strange indeed -- I can reproduce the problem
05:19:25 <bringert> shapr: dunno and dunno, will check
05:21:18 <esap> Category theory question: Is there an isomorphism between [1,C] and C? Doesn't this mean I don't need to make a big difference between functors and objects?
05:21:22 <shapr> can I get a copy of the 19k word lexicon?
05:22:05 <bringert> shapr: sure looks pretty much like Either
05:22:29 <bringert> are you talking about the lexicon that aarne mentioned?
05:23:17 <bringert> I don't think that there is a corresponding one for english, but I'm not sure
05:23:59 <bringert> btw, talked to aarne about user hierachical libs, he thought that was a good idea
05:24:34 <bringert> one reason behind some things not always being done as you might expect is that GF was originally compiled with hbc
05:25:06 <shapr> ah, I see
05:34:19 <bringert> but it's not anymore
05:38:52 <shapr> yah, I was asking about the lexicon that Aarne mentioned
05:41:11 <shapr> I've figured out how to call morphoTrainList and transTrainList, now to plug them into WASH...
05:42:00 <bringert> I'll ask him
05:42:12 <bringert> he's not here right now though
05:42:13 * Heffalump looks for a Swedish person
05:42:26 * bringert is swedish
05:42:38 * Lemmih is close to sweden.
05:42:53 <Heffalump> is "wearing a brown paper bag over one's head" a Swedish idiom of any form, or was it really originated by Linus?
05:43:06 <shapr> it's no hurry, I won't need it till this works with WASH.
05:43:08 <shapr> Linus is finnish!
05:43:18 <Heffalump> he's a Swedish-speaking Finn, however
05:43:19 <norpan> it's an old idiom yes
05:43:30 <shapr> he also speaks finnish from what I've heard.
05:43:36 <Heffalump> true
05:45:04 <Heffalump> norpan: ta
05:45:47 <mayhem> howdee 
05:46:20 <shapr> hiya mayhem 
06:21:49 * shapr hOps
06:21:54 <shapr> hiya SyntaxNinja, wassup?
06:28:44 <SyntaxNinja> hi shapr
06:39:58 <bourbaki> does someone of you happen to know if you can use stuff from wikipedia for a paper?
06:47:21 <Brandon__> Morning.  :)
06:50:46 <bourbaki> can someone explain to me the yoneda lemma?
07:00:07 <shapr> bourbaki: I think you can
07:01:35 <shapr> hoi goron 
07:01:52 <goron> hoi, ben jij Nederlands?
07:02:16 <shapr> nej
07:02:26 <shapr> but I do speak a tiny bit of dutch
07:02:36 <goron> OK, ever used FGL?
07:02:42 <shapr> a bit
07:02:51 <shapr> I know the maintainers.
07:02:53 <shapr> :-)
07:02:59 <goron> :-)
07:03:21 <goron> The simple type make and wait algorithm does not work. 
07:03:28 <shapr> ?
07:03:34 <shapr> which version of FGL are you using?
07:03:39 <goron> The newest. 
07:03:43 * shapr swears at realtime-lsm
07:03:46 <shapr> where'd you get it?
07:03:53 <shapr> fptools cvs repo?
07:03:56 <goron> http://web.engr.oregonstate.edu/~erwig/fgl/haskell/
07:03:57 * lelit admire shapr ability of knowing "little bits" of "lots of languages" :)
07:04:01 <goron> No
07:04:20 <shapr> lelit: that part is easy, the hard part is to know a language well.
07:04:28 <lelit> hehe
07:04:48 <goron> Is the CVS newer? As in is someone developing it?
07:05:05 <shapr> one reason I'm playing with the grammatical framework is so I can use it to study Swedish.
07:05:59 <shapr> I think aetion.com took over maintenance
07:06:01 <Brandon__> why?
07:06:20 <shapr> because I like Swedish!
07:06:48 <SamB> if they have the maintainership, why don't they have the page too?
07:06:52 <goron> I don't think so. They just changed a few(or more) bits
07:06:54 <shapr> foo, I gotta reboot to install my new kernel, brb
07:07:06 <goron> reboot? That's evil..
07:07:23 <SamB> hmm. fancy meeting a goron!
07:07:34 <Brandon__> bbl :)
07:08:14 <goron> Does anyone know of a working version of FGL?
07:08:43 <goron> I get this kind of errors:
07:08:45 <goron> Data/Graph/Inductive.hs:29:
07:08:46 <goron>     Failed to load interface for `Data.Graph.Inductive.NodeMap':
07:08:46 <goron>         Could not find interface file for `Data.Graph.Inductive.NodeMap'
07:08:46 <goron>         (use -v to see a list of the files searched for)
07:08:46 <goron> make: *** [Data/Graph/Inductive.o] Error 1
07:08:46 <SamB> if you edit a couple of lines or so, it builds
07:09:01 <goron> I changed the GHC verison in the make file.
07:09:04 <SamB> oh, and ignore the makefiles
07:10:02 <goron> Well, I thought about just ripping all sourcefiles and putting them in one directory, but will the hierarchical modules will work still then?
07:10:41 <SamB> iirc, I used ghc --make. I definately did not move the files
07:12:09 <goron> What did you do exactly? I thought ghc --make builded an executable?
07:15:16 <goron> shapr: That took long ;)
07:15:39 <shapr> :-P
07:15:41 <SamB> actually, it looks like I may have used the makefile afterall...
07:15:55 <shapr> it still didn't fix my jackd problem :-/
07:16:31 <goron> Is it possible to give makefile to ghc --make? I looked in ghc --help, but I overlooked it.
07:16:49 <shapr> nah, ghc --make takes a top level module
07:17:00 <shapr> then it figures out deps itself
07:17:12 <SamB> I honestly don't remember exactly how I changed the makefile...
07:17:19 <goron> Ok, and then it build an executable. 
07:17:32 <goron> Don't you have the files anymore?
07:17:40 * SamB opens the tarball in emacs
07:17:50 <goron> Thanks
07:18:22 * goron is more of a vim person... I hate Lisp... It's ugly..
07:19:21 <SamB> goron: well, I admit that it is not always pretty (tarballs are not meant for online processing...)
07:23:54 <SamB> patch detects that the patch is already applied, so, it should work ;-)
07:24:17 <SamB> oh, I'm trying to dcc you the diff
07:24:28 <SamB> goron:
07:24:32 <goron> I saw it. But it was "malformed"
07:24:46 <SamB> oh, right. ipv6...
07:24:58 <bourbaki> shapr i can explain the lemma to me myself :)?
07:25:35 <goron> I tried ipv6, but my provider doesn't supports it....
07:25:40 <goron> I tried ipv6, but my provider doesn't support it....
07:25:52 <shapr> ?
07:25:55 <shapr> I've read about yoneda, but I don't remember anything about it.
07:26:00 <shapr> goron: use a tunnel
07:26:15 <bourbaki> can anyone think of a why to write a progam in a pure way that modifies itself"
07:26:16 <bourbaki> ?
07:26:18 <goron> Well, that was too much effort...
07:26:22 <shapr> the best IPv6 support in the world is in Sweden, and second best in .nl :-)
07:26:58 <goron> It was 3 months ago that I tried it. Maybe they support it now. 
07:27:56 <goron> And BTW ipv6 is slower, because you have to send two bytes more...
07:28:04 <goron> Another malformed Dcc request.
07:28:18 <shapr> IPv6 is faster if you're using QoS and multicast
07:28:31 <shapr> plus you end up padding lots of TCP packets anyway
07:28:35 <shapr> so it's not a big deal in the end.
07:28:56 <goron> shapr: I don't know it. I just said something to feel important ;)
07:29:04 * shapr laughs
07:29:06 <shapr> ok :-)
07:29:40 <SamB> I'm starting epic
07:29:52 <SamB> that is me
07:29:57 <naesten> quit
07:30:08 <SamB> oh. I guess it started on v6...
07:30:40 <SamB> ack
07:31:02 <bourbaki> is it possible to write a program that modifies itself from within the program if you want to stay pure functional?
07:31:16 <SamB> maybe this works?
07:31:35 <goron> I do see something. 
07:31:49 <goron> Only it's waiting and I already pressed Accept. 
07:32:01 <goron> Stupid software.
07:32:24 <goron> From naesten.
07:32:40 <goron> Now I have it. 
07:33:02 <goron> Thanks naesten :)
07:34:43 <naesten> but, does it work?
07:34:54 <goron> This will be the first time I actually apply a patch... I always try to avoid hackisch behaviour... 
07:35:36 <shapr> programming is hackish ;-)
07:36:28 <SamB> I've probably made patches more than applied them (manually)
07:37:48 <goron> [root@zonnebloem src]# patch Makefile /home/goron/.xchat2/downloads/fglmakefile.diff
07:37:48 <goron> patching file Makefile
07:37:48 <goron> Hunk #1 FAILED at 1.
07:37:48 <goron> 1 out of 3 hunks FAILED -- saving rejects to file Makefile.rej
07:38:16 <goron> Doesn't sound to good. 
07:38:28 <goron> Doesn't sound so good. 
07:39:10 <SamB> huh.
07:39:37 <SamB> try the makefile instead?
07:40:12 <goron> Ok, I wonder why it's waiting for a couple of minuts and then starts?
07:42:29 <goron> naesten: Don't you have to press on some button to confirm you actually want to send me something?
07:45:25 <goron_> Cool I joined the channel two times... I am now using EPIC4.
07:45:51 <goron_> Can you send the file again?
07:47:35 <goron> :?
07:49:14 <goron> naesten: Can you resend the file?
07:53:51 <goron> Did everybody die all of a sudden?
07:58:53 * shapr isn't dead
08:00:11 * SamB was mowing
08:02:38 <goron> Ok, good to hear :)
08:05:47 <goron> I am still getting errors:
08:05:58 <goron> Data/Graph/Inductive/NodeMap.hs:30:
08:05:58 <goron>     Failed to load interface for `Data.Graph.Inductive.Graph':
08:05:58 <goron>         Could not find interface file for `Data.Graph.Inductive.Graph'
08:05:58 <goron>         (use -v to see a list of the files searched for)
08:05:58 <goron> Data/Graph/Inductive/NodeMap.hs:32:
08:05:59 <goron>     Failed to load interface for `Data.Graph.Inductive.Aux.FiniteMap':
08:06:01 <goron>         Could not find interface file for `Data.Graph.Inductive.Aux.FiniteMap'
08:06:03 <goron>         (use -v to see a list of the files searched for)
08:06:07 <goron> make: *** [Data/Graph/Inductive/NodeMap.hi] Error 1
08:06:41 <goron> An interface file is a .hi file?  (Haskell Interface) (seems logical)
08:08:28 <goron> Does order matters in a make file? I don't think so. From what I have understood is that a make file has targets and means of creating those targets. So in theory it should be able to figure it out for itself.
08:13:28 <goron> Can somebody explain why I get this error?
08:18:40 <shapr> er, what's the url where you got the archive again?
08:20:56 <Marvin--> so, do we have any nhc experts here?
08:22:12 <goron> shapr: I just found a thread where you where in, that was about the same problem I had. 
08:22:29 <goron> shapr: http://web.engr.oregonstate.edu/~erwig/fgl/haskell/
08:22:59 <goron> shapr: I will get it from CVS
08:23:27 <goron> I wonder why they don't switch to SubVersion, as is it better. 
08:24:09 <shapr> darcs is better!
08:24:22 <goron> Yes, ofcourse
08:24:32 <goron> But that's less known.
08:24:44 <goron> "the theory of patches" lol
08:25:03 <goron> I have read it a couple of months ago.
08:25:10 <goron> Do you use it?
08:25:46 <shapr> yup
08:25:55 <shapr> for all my projects, both personal and paying
08:26:22 <goron> http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/ is down :(
08:31:55 <shapr> ok, I got an error....
08:32:25 <shapr> but mine is different...
08:32:38 <RussellOConnor> The theory of patches works!?
08:34:08 <shapr> hiya shaleh 
08:34:11 <shaleh> heya
08:34:35 <shapr> wassup?
08:34:58 <shaleh> not much. finally had a non-hectic day at work, so I have time to hang out
08:36:40 <Marvin--> SyntaxNinja: I'm trying to get cabal to build with nhc
08:37:22 <shapr> oh, I think there is a later version of FGL around, they swapped the Aux name to something else
08:44:06 <bourbaki> esap are you reading?
08:44:37 <bourbaki> TheHunter you there?
09:04:05 <TheHunter> hey, bourbaki 
09:04:10 <bourbaki> hi
09:04:53 <TheHunter> wassup?
09:05:02 <bourbaki> TheHunter do you have an idea how you can build a category that contains a functor for itself?
09:05:24 <bourbaki> TheHunter that is something like a self modifing cat
09:05:43 <Smerdyakov> LOL
09:05:57 <bourbaki> Smerdyakov ?
09:06:37 <TheHunter> what do you mean by "functor for itself"?
09:06:56 <bourbaki> a function that modifies the category itself
09:07:04 <bourbaki> but it should be in that category
09:07:23 <bourbaki> think of an automaton that can modify itself
09:07:57 <bourbaki> but the function for that has to be in the automaton itself though i have the impression that this is not possible
09:08:03 <Smerdyakov> The self-modifying cat is very good at catching birds.
09:08:22 <bourbaki> Smerdyakov you bet ;)
09:09:00 <TheHunter> by modify you mean a functor into another category?
09:09:29 <bourbaki> TheHunter i thought that if was possible to so something like that if i would craft a functor over that cat and them glue it to that cat by changeing to the topological view
09:09:43 <Marvin--> does it catch self-modifying birds too?
09:09:44 <bourbaki> TheHunter i want to change ie an arrow in that cat
09:10:07 <bourbaki> no cause they can change to cats
09:10:34 <bourbaki> TheHunter the problem with that is that its not really pure and not very functional
09:10:50 <bourbaki> though it would keep anything in one "program" thing
09:11:42 <bourbaki> but i would need something like global variables that is all the networks would have to be stored somewhere and able to be reffered to or so
09:11:52 <bourbaki> so that would be some kind of side effect i guess
09:12:24 <bourbaki> something like this in c++
09:13:21 <SyntaxNinja> Marvin--: cool :)
09:13:23 * SyntaxNinja lunch &
09:13:28 <TheHunter> bourbaki: i think it is impossible that you can embed category of endofunctors of your cat into the cat itself (by an argument similar to russel's paradox), if that's what you mean at all. 
09:13:35 <bourbaki> whats the & for?
09:14:02 <bourbaki> TheHunter yeah i guess a pitty :(
09:14:30 <bourbaki> i think thats also some problem my prof told me about in neural networks
09:15:10 <bourbaki> though i could build some fixed endofunctor seperatly and then glue that new thing into that other category
09:15:22 <bourbaki> but that would be like a side effect right?
09:16:13 <Marvin--> whoa
09:16:22 <TheHunter> i don't see a connection between side effects and constructing a new cat
09:16:43 <bourbaki> well i want to have a functor that modifies an arrow
09:16:58 <bourbaki> thats quite a small category itself
09:17:20 <bourbaki> and if i see that thing as a topology i can glue it to the category that functor is acting on
09:17:55 <SamB> goron: I told you, a couple of lines needed changing. I suppose I should have mentioned that they were imports
09:19:27 <Marvin--> the missing instance Monad (Either e) in nhc was a feature
09:21:30 <Igloo> Oh?
09:22:49 <Marvin--> http://www.haskell.org//pipermail/nhc-users/2004-July/000137.html
09:22:51 <goron> SamB: You said so, but the errors didn't look like that. 
09:23:05 <goron> SamB: I now have the cvs version. 
09:23:41 <goron> How can I checkout the entire cvs repository? cvs -d somedir co doesn't work.
09:23:58 <Igloo> Euch
09:24:16 <Igloo> You'd think it could actually check first  :-)
09:24:42 <Marvin--> Igloo: no kidding
09:24:56 <Marvin--> I hope OPTIONS_COMPILE -prelude won't mess up ghc
09:25:33 <Marvin--> actually it won't, because I don't use Compat.H98 in the ghc build
09:25:37 <Marvin--> yay, workarounds!
09:27:51 <Marvin--> meh, now I just realized that neither nhc nor hugs have rawSystem yet
09:28:03 <shapr> whoops
09:28:08 <TheHunter> bourbaki: there is no "isomorphism" between categories and topological spaces, so it might be problematic if you switch between both sides and perform constructions both on top. space and on cats
09:29:26 <goron> The CVS version of fgl also is broken. How hard is it to make something that works?
09:29:57 <shapr> how is the cvs version broken?
09:30:00 <shapr> what error do you get?
09:30:29 <goron> [goron@zonnebloem fgl]$ make
09:30:29 <goron> ../mk/boilerplate.mk:21: ../../mk/boilerplate.mk: No such file or directory
09:30:29 <goron> ../mk/target.mk:15: ../../mk/target.mk: No such file or directory
09:30:29 <goron> make: *** No rule to make target `../../mk/target.mk'.  Stop.
09:30:40 <Igloo> Did you run configure?
09:30:54 <goron> Yes, but there is no configure...
09:31:04 <shapr> did you run autoconf?
09:31:12 <Igloo> autoreconf first, the configure
09:31:14 <Igloo> In the root
09:31:27 <Igloo> (probably)
09:31:29 <goron> ok
09:31:56 <goron> Then you need a configure.ac file.
09:32:02 <goron> That's no option.
09:32:16 <shapr> ?
09:32:41 <goron> There is no configure.ac file
09:32:55 <goron> So autoreconf can't work.
09:33:23 <Marvin--> hmm, now how can I implement a rawSystem replacement
09:33:35 <shapr> can you run just autoconf?
09:33:42 <goron> Yes
09:33:45 <goron> Already done that
09:34:19 <shapr> did it work?
09:34:23 <goron> Well, just autoconf not, but autoconf MakeFile works.
09:34:32 <goron> But I don't believe that's correct
09:34:53 <goron> As in: I almost am sure that's bullshit.
09:35:11 <goron> autoconf needs an .ac file
09:35:21 <Marvin--> there's no autogen.sh script or something?
09:35:27 <goron> No
09:35:39 <shapr> are you sure you're in the top level dir?
09:35:50 <shapr> of fptools?
09:35:50 <goron> I am in the fgl dir. 
09:35:59 <goron> So no
09:36:12 <shapr> try the autoconf stuff in the top level dir
09:36:22 <goron> Yes, there is a .ac file
09:36:38 <Marvin--> oh, you need to run autoreconf and configure in the top fptools dir before you can do anything
09:37:38 <goron> configure: error: cannot find install-sh or install.sh in . ./.. ./../..
09:39:09 <goron> autoconf runs without any stdout output. Then I run configure and then I get the error message above.
09:39:18 <bourbaki> TheHunter but cats can be rendered as diagrams
09:39:23 <bourbaki> and they have a topology
09:40:15 <goron> The dir where I am in in called libraries.
09:40:23 <shapr> goron: ok, try changing to the fgl dir and running ghc -fglasgow-exts -fallow-overlapping-instances -fallow-undecidable-instances --make Data/Graph/Inductive/Example
09:41:09 <Marvin--> goron: I still think you need to run autoreconf and configure in the *top* fptools directory
09:42:01 <goron> I would like to do a complete checkout with cvs but I don't know the command. I tried cvs -d somedir co, but that didn't work. 
09:42:59 <goron> I now did a checkout of some modules including libraries.
09:43:20 <Marvin--> uh, why don't you just cvs -d:pserver:anoncvs@cvs.haskell.org:/cvs co fptools ?
09:44:14 <goron> Is fptools the name of the root?
09:44:53 <Marvin--> yes
09:45:10 <Igloo> There's a page on the GHC page that tells you how to do all this stuff
09:45:21 <goron> ok, it's running. Yes, but that one is down.
09:45:27 <shapr> which one is down?
09:45:33 <shapr> and what's running? :-)
09:45:36 <TheHunter> bourbaki: so you can glue them together, but are you sure that what you get is still a category?
09:45:52 <bourbaki> TheHunter yes
09:46:00 * Marvin-- continues to wrestle nhc
09:46:01 <bourbaki> its follows any of the 4 laws
09:46:36 <goron> This one is down: http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/ The docs were still online. But I didn't knew that fptools meant the root dir. 
09:46:54 <Igloo> The docs are what I was refering to
09:47:04 <TheHunter> bourbaki: ok
09:47:21 <goron> Igloo: I understand
09:47:33 <bourbaki> TheHunter the think is just that it needs something beside the category itself
09:47:37 <Marvin--> goron: that's the cvs viewing cgi, it's not a page that tells you how to check it out ;)
09:47:51 <bourbaki> TheHunter that is something liek a place where all cats are or "programs" are
09:47:56 <goron> Marvin--: I knew that..
09:48:43 <shapr> hiya maihem 
09:49:29 <goron> I just didn't knew how to tell to cvs: "I want everything". Now, you told me it's called fptools. That was the problem.
09:49:52 <Lunar^> shapr: Could you install the same script that's on http://www.pastebin.com/ for paste.haskell.org ?
09:50:02 <Lunar^> shapr: That would be cool
09:50:14 <Lunar^> shapr: It's already on paste.plone.org in case you don't know
09:50:14 <Igloo> I have no idea what happens if you check out fptools rather than following the documented procedure
09:53:23 <Marvin--> huh, I think I did that
09:53:27 <Marvin--> oh well :)
09:54:30 <Igloo> :-)
09:54:36 <maihem> hello!
09:54:50 <Igloo> Yo!
09:55:00 <Marvin--> the implementation of rawSystem is very ugly
09:55:44 <Igloo> Is a stupid one not something like   system . concat . intersperse " "?
09:56:04 <Igloo> Or an FFI call to fork and one of the exec doodahs?
09:56:16 <Igloo> In fact, can't you just take the code from the libraries?
09:56:46 <shapr> goron: working?
09:57:03 <shapr> Lunar^: I can ask the webpeople
09:57:03 <Marvin--> well, I *could* do the system . concat thang, but that kinda ignores the reason rawSystem was added in the first place ;)
09:57:39 <Marvin--> Igloo: but escaping in windows is pretty tricky, apparently
09:57:56 <Marvin--> Igloo: and actually, you'd want to quote the arguments too...
09:58:02 <Lunar^> shapr: I thought you were
09:58:02 <Marvin--> and stuff
09:58:04 <Marvin--> yuck
09:58:17 <shapr> Lunar^: I'm the wiki person :-)
09:58:22 * Igloo wouldn't expend much effort making such cases work, I'd just wait for rawSystem to fix it all properly
09:58:53 <Marvin--> well, yeah
09:59:08 <Marvin--> except that the fptools version of System.Cmd still says #ifdef __GLASGOW_HASKELL__
09:59:45 <goron> shapr: I don't have 10Mb/s 
10:00:13 <Marvin--> error handling without Control.Exception turned out to be something of an adventure too
10:00:34 <Marvin--> goron: why don't you just do what the cvs cheatsheet tells you to do rather than listening to my misinformed suggestions?
10:00:54 <Igloo> Oh, that seems odd
10:01:15 <Marvin--> what seems odd?
10:01:16 <goron> Marvin--: I didn't do what you said. I only used fptools from your input. 
10:01:25 <Marvin--> ok
10:01:50 <goron> Marvin--: And if it still doesn't work, I will follow the docs by the letter
10:02:11 <Igloo> The ifdef
10:02:18 <Igloo> Nothin looks obviously non-portable to me
10:04:19 <Marvin--> "On Windows, the command line is passed to the operating system as a single string.  Command-line parsing is done by the executable itself."
10:04:21 <Marvin--> oh god
10:04:43 <Marvin--> Igloo: I suppose hugs and nhc haven't implemented proper c_rawSystem:s yet
10:06:38 <Igloo> I'd have thought that would be portable too
10:06:52 * Igloo shrugs
10:07:06 <Marvin--> true
10:07:14 <Marvin--> well I don't know
10:07:36 <goron> Well, doing things this way don't give me a ./configure file, unless I run autoconf. According to README, configure should be present
10:08:08 * Marvin-- happily (?) adds Compat.RawSystem
10:08:21 <goron> Is the README wrong, or didn't I instruct cvs correctly?
10:08:57 <Igloo> You're meant to run autoreconf. The README will be fore the tarballs
10:08:58 <goron> I already see what's wrong. 
10:09:02 <goron> I need fpconfig.
10:09:15 <goron> Just like the docs say...
10:11:19 <Marvin--> ======  Errors when renaming:
10:11:19 <Marvin--> Identifier putStrLn defined 2 times.
10:11:22 <Marvin--> *"(¤)/!!#¤%
10:11:27 <Marvin--> stupid nhc
10:11:38 <Marvin--> you basically can't import System.IO in nhc
10:11:53 <Igloo> hide putStrLn?
10:11:54 <Marvin--> well, unless you do  hiding (everything the prelude exports) I guess
10:12:11 <Igloo> It ought to come from teh same place, though, so that's probably a bug
10:12:48 <Igloo> You could just import the things you need. I find that useful anyway so I can easily find where a function comes from when reading unfamiliar code
10:13:00 <goron> Is there one reason for using nhc instead of ghc?
10:13:18 <Marvin--> yeah, SyntaxNinja is pretty zealous about it, which I find annoying at times :)
10:13:32 <Igloo> There are currently at least 2 reasons
10:13:34 <Marvin--> especially when I find he's imported a data type but not its constructors ;)
10:13:39 <Igloo> Heh
10:13:58 <Igloo> It can lead to huge import lines, but on balance I tend to prefer that
10:14:16 <goron> Oh, now it's completely clear :?
10:15:11 <Igloo> Oh, you wanted to know what?  :-)   Running Debian on an arm or mipsel machine
10:15:25 <Marvin--> goron: the nhc homepage lists some reasons
10:15:43 <Igloo> It's easier to port too, but less portable these days I'd say
10:16:10 <Marvin--> this is actually the first time I use nhc at all, but it's important that cabal works on all major implementations, so...
10:16:12 <goron> Marvin--: I have looked on it some time ago, but then I didn't really saw something that made me switch.
10:16:37 <Marvin--> I'm not saying you should switch
10:16:45 <Marvin--> I'm saying that it's existence is justified
10:16:46 <goron> I have done everything exactly like in CVS CHEATSHEET, but I don't get a configure file. 
10:16:52 <Marvin--> so run autoreconf
10:17:02 <goron> Marvin--: I didn't say you did. 
10:17:11 <goron> Marvin--: But then the docs are wrong.
10:17:17 <Igloo> No they aren't
10:17:22 <Igloo> e.g. http://www.haskell.org/ghc/docs/latest/html/building/sec-building-from-source.html
10:17:44 <goron> Igloo: I will check it, but I yet have no idea.
10:18:00 * Igloo wonders why people bother writing docs
10:18:18 <goron> Igloo: Those docs are correct.
10:18:39 <Igloo> Whereas whatever you were reading before will be for the tarballs, like I said
10:18:54 <goron> Igloo: But the README in the rootdir of fptools says different
10:18:58 <Marvin--> Identifier pkgName used at 57:59 is not defined.
10:18:59 <Marvin--> wtf
10:19:19 <Marvin--> goron: It's for the tarballs!
10:20:09 <goron> Marvin--: What tarball? (I am sorry for the n00bish)
10:20:31 <Marvin--> tarball distributions of fptools
10:20:41 <goron> Marvin--: That part I did understand. 
10:21:08 <goron> Marvin--: Where can I get the tarball? I don't have to get the sources.
10:21:14 <goron> Marvin--: Where can I get the tarball? 
10:21:51 <Marvin--> Igloo: uh, correct me if I'm wrong, but shouldn't exporting PackageIdentifier(..) in the module it's declared and importing PackageIdentifier(..) in the module where I want to use it, give me both constructor names and record selectors?
10:22:11 <Igloo> I couldn't swear to it without reading the report
10:22:41 <Marvin--> goron: I don't even know if there *are* tarball distributions of fptools, what I'm saying is that the README doesn't give you instructions for manipulating the cvs checkout
10:22:53 <Marvin--> Igloo: fair enough
10:23:48 <Marvin--> "The abbreviated form T(..) names the type and all its constructors and field names that are currently in scope (whether qualified or not)."
10:24:02 <Marvin--> so, should work
10:24:22 <Marvin--> and it doesn't
10:24:28 <keverets> has anyone used haskell to manipulate htpasswd files before (crypt and/or Apache's modified MD5 format)?
10:25:03 <goron> Marvin--: Thanks
10:28:00 <Marvin--> I'm starting to hate nhc
10:35:22 <RussellOConnor> starting?
10:36:13 <Marvin--> huh, now I seemed to have fixed it, I wonder what I did
10:36:42 <Igloo> Heh
10:36:53 <Igloo> Recompiled the imported module?
10:37:21 <Marvin--> I think I tried that too, earlier
10:37:24 <Marvin--> odd
10:37:25 <Marvin--> oh well
10:37:30 <Marvin--> yay, it builds
10:37:42 <Igloo> Changed optimisation level or something?
10:37:49 <Igloo> Cool  :-)
10:37:49 <Marvin--> nnno
10:37:59 <Marvin--> hmake -nhc98 -package base  is what I've been using all along
10:40:35 <Marvin--> I think the problem was that it tried to import the pkgName field directly instead of importing the data type
10:40:53 <Marvin--> pretty cryptic error message though
10:41:08 <Igloo> I thought that was meant to work too
10:41:28 <Igloo> Maybe doing both confuses nhc
10:45:00 <Marvin--> well it didn't import PackageIdentifier, it just imported pkgName, afaict
10:45:19 <Marvin--> though I might misremember
11:00:14 <goron> Well, this is failing too: 
11:00:17 <goron> make INSTALLING=0 BIN_DIST=0 - --no-print-directory -r all
11:00:17 <goron> /usr/local/bin/ghc -H16m -O -cpp -fglasgow-exts -package lang -O  -DHAPPY_VERSION=1.14  -c Version.hs -o Version.o  -ohi Version.hi
11:00:17 <goron> Version.hs:3: warning: backslash and newline separated by space
11:00:17 <goron> Version.hs:3: lexical error in string/character literal
11:00:17 <goron> make[3]: *** [Version.o] Error 1
11:00:18 <goron> make[2]: *** [all] Error 2
11:00:20 <goron> make[1]: *** [all] Error 1
11:00:22 <goron> make[1]: Leaving directory `/home/goron/cvs/fptools/happy'
11:00:24 <goron> make: *** [/home/goron/cvs/fptools/happy/src/happy-inplace] Error 2
11:03:52 <Lemmih> goron: What system are you using? I've successfully install GHC from cvs on both my Debian and Gentoo machine.
11:07:56 <SyntaxNinja> meh. explicit import lists make the code so much easier to understand
11:08:09 <Marvin--> SyntaxNinja: yeah, when nhc bleedin' understands them, sure
11:08:35 <Igloo> :-)
11:08:50 <Marvin--> I'm getting a bit fed up with nhc's "features"
11:09:03 <SyntaxNinja> nhc doesn't have explicit import lists?
11:09:08 <SyntaxNinja> (?!)
11:09:29 <Marvin--> of course it does, but it got confused about specifying field names in the import list
11:09:37 <Marvin--> or so it seems anyway
11:09:48 <Marvin--> I've got a patch for you that makes cabal buildable with nhc
11:09:54 <SyntaxNinja> sweet!
11:09:57 <SyntaxNinja> was it hard?
11:10:14 <Marvin--> well, yes and no
11:10:30 <Marvin--> the lack of Control.Exception is kinda painful
11:10:36 <SyntaxNinja> h
11:10:41 <SyntaxNinja> I mean "hm"
11:10:53 <Marvin--> but I've converted the code to use the error handling in System.IO.Error instead
11:11:20 <Marvin--> I don't know *what* you were smoki^Wthinking when you decided to import GHC.IOBase though
11:11:51 <SyntaxNinja> maybe it wasn't me! how do you know it was me! maybe it was jaffacake, I hear he likes ghc more than nhc.
11:11:59 <Marvin--> I've added Compat.RawSystem with broken implementations of rawSystem for nhc and hugs that may or may not work
11:12:49 <Marvin--> why don't I just mail you the patch and you can see for yourself what kind of havoc I've wreaked
11:12:54 <SyntaxNinja> sounds good.
11:13:14 <SyntaxNinja> the test suite doesn't really exercise exceptional conditions much.
11:13:47 <Marvin--> oh, test suite, good point, maybe I should re-run that after all my changes
11:13:48 * Marvin-- coughs
11:14:42 <SyntaxNinja> Marvin--: you're good for putting up with me ;)
11:15:04 <Marvin--> that cabal builds with nhc is all well and good, but we really need to make cabal's *usage* of nhc work too :-p
11:15:24 * SyntaxNinja agrees
11:15:29 <SyntaxNinja> but I wasn't going to worry about either for the 0.1 release
11:15:43 <SyntaxNinja> I'd like to tease out any problems here before we spend a lot of time duplicating the problems for NHC
11:15:44 <Marvin--> then buildNHC should probably reflect that
11:15:48 <Marvin--> yeah
11:16:16 <Marvin--> I mean, buildNHC should probably print "Go hack on the source" rather than doing something that probably fails to produce anything worthwhile without explaining why
11:17:14 <SyntaxNinja> yeah.
11:17:48 <Marvin--> Cases: 25  Tried: 25  Errors: 0  Failures: 0
11:18:12 <Marvin--> This is without the test cases in Distribution.Setup, they need to be rewritten from ground up
11:18:43 <SyntaxNinja> ok
11:18:44 <Marvin--> oh, and we should be able to get rid of Distribution.GetOpt now
11:18:47 <Marvin--> (yay)
11:18:53 <SyntaxNinja> wow cool.
11:19:13 <Marvin--> the new Distribution.Setup uses the standard getopt
11:30:35 <Marvin--> SyntaxNinja: just don't get it into your head that I'll be keeping up this hacking speed forever ;)
11:30:50 <Marvin--> what with the new job and all
11:31:26 <Igloo> Ooo? New job?
11:31:51 <goron> Lemmih: I am using ArchLinux. I think it's because I have gcc-3.3.3 and you need gcc-3.3.2. That was the reason I couldn't built hmake
11:32:47 <Lemmih> I got 'gcc version 3.3.3 20040412'.
11:32:52 <SyntaxNinja> Marvin--: no fear. I intend to ramp up my own hacking soon too; it seems like you picked up my slack when I hit a busy patch.
11:33:17 <Lemmih> And hmake version 3.08
11:33:19 <SyntaxNinja> the thing about Cabal, IMO, is that it's very hackable, and I expect that a lot of people will make small changes and lend a hand.
11:35:22 <SyntaxNinja> well, I've got basic wxhaskell 0.8 debs... I guess I should ITP it.
11:35:26 <SyntaxNinja> Igloo: so you don't care if I take this over?
11:35:42 * shaleh hugs SyntaxNinja
11:36:16 <SyntaxNinja> :)
11:36:50 <Marvin--> Igloo: oh, you didn't know either? I'm starting at safelogic 9 Aug
11:37:09 <andersca> Marvin--: yay
11:37:15 <Igloo> Go for it
11:37:38 <Igloo> I wouldn't put it in Debian until cabal and the policy are sorted, though
11:38:41 <Igloo> Also, if you're going to try for package name cabal it would be nice to know if you succeed before things have to build-dep on it
11:38:45 <Marvin--> Igloo: I disagree, policy should document best practices
11:39:07 <Marvin--> but I suppose when we've got haskell-experimental we can put it there instead
11:39:11 <Igloo> Marvin--: I'd rather we didn't have to change a bunch of package names, though
11:39:15 <Igloo> Exactly
11:39:26 <Igloo> Congrats on the job thing, BTW
11:39:32 <Marvin--> I still think the package should be called haskell-cabal
11:39:44 <Marvin--> hm
11:39:45 <Igloo> I think I do too
11:39:55 <Marvin--> the source package that is
11:40:07 <Marvin--> the binary packages should of course follow haskell-policy
11:40:25 <SyntaxNinja> Igloo: I don't plan to cabal-ize wxhaskell too-too soon.
11:40:30 <Marvin--> libghc6-cabal-dev or something
11:40:33 <SyntaxNinja> I guess it wouldn't be hard...
11:40:45 <stepcut> Igloo: I need a (even if its temporary) debian package for cabal, is there one around or should I make my own?
11:40:48 <SyntaxNinja> I was going to let Daan do it for the next release or something.
11:40:51 <Marvin--> or libghc6-cabal0.1-dev even
11:40:55 <Igloo> Don't ask me  :-)
11:41:15 <SyntaxNinja> stepcut: you need a debian package? interesting.
11:41:42 <Igloo> Did mails get sent about dashes in package names and API versions and stuff, incidentally?
11:41:45 <Marvin--> I guess we could whip up a pre-pre-prerelease package
11:41:56 <Marvin--> oh damn, no they didn't
11:42:05 <Marvin--> SyntaxNinja: would you? (send a mail about dashes that is)
11:43:03 <Igloo> FWIW it would make my life easier if package names matched [a-z0-9][-a-z0-9]+ (case sensitive)
11:43:33 <goron> Lemmih: Then I have *no* idea, except that it is really a bug in the source (of happy) in this case.  
11:44:04 <Marvin--> Igloo: no capitalization at all?
11:44:13 <Igloo> Yeah
11:44:20 <SyntaxNinja> yeah, I'll send out a mail about that.
11:44:30 <Igloo> Or case insensitive capitalisation, but that gets nasty when they map to filenames
11:45:05 <Igloo> Oh, I've just realised something - you can't have overlaps modulo case on Windows anyway, can you?
11:45:11 <Marvin--> no
11:45:18 <SyntaxNinja> erum. lemmy see about packaging cabal, stepcut
11:45:25 <SyntaxNinja> OOI, stepcut, why do you need a package already?
11:45:37 <Marvin--> windows is case preserving (at best :)
11:46:14 <Marvin--> I think there was a bug in windows 95 that let you create two links with the same name modulo capitalization but they would always refer to the same file, iirc
11:46:26 <stepcut> SyntaxNinja: because I wrote a tool in haskell for internal company use, and I need to debianized that to distribute it. But it depends on some libraries I wrote, so I need to debianized those as build dependencies
11:46:40 <stepcut> SyntaxNinja: an cabal *seems* like the easiest way 
11:47:04 <SyntaxNinja> stepcut: you wish is my command; I need debian packages too :)
11:47:15 <Marvin--> stepcut: it's not done yet, though, it'll change... a lot
11:47:22 <stepcut> too bad I can't tag off the cabal arch archive anymore :p
11:47:40 <SyntaxNinja> yeah... darcs seemed like the way to go :)
11:47:47 <stepcut> Marvin--: that's ok, I can artificially inflate version numbers since I controll all the packages
11:48:14 <Marvin--> Igloo: regardless of whether we allow capital letters in package names, making them lowercase for debian purposes shouldn't be a problem
11:49:10 <Igloo> Marvin--: Now I know it would break on Windows I'm less worried
11:49:15 <stepcut> Marvin--: besides, if I start using cabal *now* I can suggest changes before everything is fixed in stone :)
11:49:44 <SyntaxNinja> stepcut: that's what 0.1 is for :)
11:50:05 <Igloo> Yeah - please don't find to many problems pre-0.1 or the rest of us will never see it  :-)
11:50:28 <stepcut> so far, a big complaint I have is that doing './setup build' twice in a row, does not seem to do the right thing
11:51:07 <Marvin--> yeah I'm wondering if we shouldn't use some stamping to remember which phases have been run
11:51:11 <SyntaxNinja> stepcut: we're thinking of adding a little memory of what has happened so far
11:51:11 <stepcut> I have to make sure the package are not registered, and delete the dist directory, or (1) my changes don't show up (2) I get duplicate symbols when I try to link the library into an app
11:51:19 <SyntaxNinja> like Marvin-- said, and to run previous phases if it needs to
11:53:05 <Marvin--> hmm, I'm not sure that'd work though
11:53:17 <Marvin--> remember that each command has its own set of acceptable flags
11:53:33 <Igloo> stepcut: It's not finished, but http://urchin.earth.li/~ian/haskell-policy/ might be of interest to you too
11:53:36 <Marvin--> well, if you're happy with the default, it should work, I suppose
11:54:24 <SyntaxNinja> Marvin--: yeah; if they just say "./setup install" then they want the default of everything, I"d say :)
12:06:50 <Marvin--> huh, look at that, The Princess Bride is on tv
12:18:47 <SyntaxNinja> Marvin--: that's inconceivable!!
12:21:24 <Marvin--> SyntaxNinja: I don't think that means what you think it does :)
12:22:52 <SyntaxNinja> that's one of my favorite lines from that movie, somehow.
12:23:28 <Marvin--> "I'm not left-handed either"
12:24:10 <Marvin--> the fencing scene rules
12:24:46 <SyntaxNinja> yeah
12:24:48 <Smerdyakov> I haven't seen that movie since I was too young to be sentient.
12:25:00 <norpan> hehe
12:25:03 <norpan> good movie
12:26:04 <thebug> Inconceivable!
12:26:37 <Riastradh> Hahahahahahahahahahaha ---
12:26:41 <thebug> Nobody outwits a Sicilian!
12:34:34 <norpan> to many swedes here
12:34:43 <Riastradh> Indeed.
12:38:20 <Marvin--> "aaaas....yoooouuu...wiiiish"
12:42:12 <SyntaxNinja> so... I think I want to make a cabal-debian version number which is has the cabal version == 0.1 and the debian version < 1 so that the first real release of cabal will be cabal_0.1-1
12:42:35 <goron> All the compilations fail on C Macro's.
12:42:38 <goron> version = tail "\   \ HAPPY_VERSION"
12:42:49 <Marvin--> SyntaxNinja: 0.1-0.1 ought to work
12:42:57 <SyntaxNinja> ok
12:43:28 <goron> C Macro's in what program are they implemented? gcc?
12:43:34 <stepcut> hrm, but -0.1 means NMU 
12:44:16 <Marvin--> stepcut: doesn't really matter if we only put it in haskell-experimental
12:46:36 <goron> I am having problems compiling Haskell programs that contain C macro's. How are they caused? Or even better, how can I fix it?
12:46:53 <SyntaxNinja> goron: try the -cpp flag in ghc
12:47:05 <stepcut> there is always 0.1-~1 :p
12:47:22 <SyntaxNinja> stepcut: that'll sort < 0.1-1?
12:47:29 <stepcut> yes sir
12:47:34 <stepcut> dpkg --compare-versions 0.1-~1 lt 0.1-1 && echo true
12:48:16 <stepcut> ~ is a funky new operator, not sure if there is any guide on how to use it
12:48:16 <Igloo> It can't go into Debin yet, though
12:48:47 <stepcut> probably not
12:49:00 <stepcut> but it is the coolest operator 
12:50:05 <Igloo> :-)
12:51:10 <stepcut> 0.0.1-1 is also less than 0.1-1
12:51:39 <stepcut> but doesn't not accurately reflect the upstream number
12:52:14 <stepcut> and then there is fun stuff like:
12:52:21 <stepcut> 0.1-.1 or 0.1-01
12:52:33 <Marvin--> stepcut: oh give it up :)
12:52:59 <SyntaxNinja> I think stepcut is trying to trick me.
12:53:06 <stepcut> actually, i take it back, those last two are wrong
12:53:15 <SyntaxNinja> see!
12:53:27 <stepcut> I forget I switched the sense of my test
12:54:39 <Marvin--> but as Igloo said, we can't use ~ yet
12:54:50 <stepcut> there is also: 0.1-0pre1
12:55:39 <stepcut> this is my favorite debian version number so far: libcurl2     7.12.0.is.7.11.2-1
12:56:09 <SyntaxNinja> Igloo: sorry I haven' tlooked closely at haskell-utils yet, but I don't see anything obvious under debian/ with a ghc-pkg -a, ... I've never used ghc-pkg -u, is there a bug in ghc-pkg that makes it so that --auto-ghci-libs doesn't work w/ -u?
12:57:51 <goron> SyntaxNinja: Is it possible to change something somewhere such that -cpp is given to ghc during the build of everything in fptools?
12:58:35 <SyntaxNinja> 'fraid I don't know. 
12:58:55 <Igloo> SyntaxNinja: I'm not entirely sure what you're asking, but once ghc5/6 are fixed libwxh shouldn't need to use haskell-utils
12:59:25 <goron> But any idea why I am having this problem and it's not the rest of the world that's having this problem?
13:00:06 <SyntaxNinja> Igloo: so I want --auto-ghci-libs to work... does ghc-pkg -a actually get called anywhere?
13:00:12 <Marvin--> Igloo: what's wrong with ghc?
13:01:03 <Igloo> Marvin--: Currently package.conf is a normal file. I think if I just copy the base file there if it doesn't exist then everything should work across upgrades within the same upstream version
13:01:20 <Marvin--> oh, yikes
13:02:34 <Igloo> SyntaxNinja: Does -u not act like -a when it isn't already in package.conf?
13:03:01 <Igloo> Marvin--: haskell-utils can currently be used to take care of it, but I think the new way will be simpler and I can't think of a problem with it
13:03:56 <SyntaxNinja> Igloo: not sure... the help text seems to indicate that -g should go with -a, but I've never used -u... it doesn't look like -g is having any effect, but I wasn't sure if I was looking at the right call to ghc-pkg.
13:04:46 <Igloo> Ah, I see. Just experiment and see what works I think
13:05:02 <SyntaxNinja> why do you use -u instad of -a?
13:05:25 <Igloo> I imagine -a fails if it's already listed, so it just makes it a bit more likely to succeed
13:05:35 <SyntaxNinja> ok
13:05:43 <Igloo> I can't remember though
13:05:54 <Igloo> It might also just be that that's what the Makefiles did
13:06:28 <SyntaxNinja> ok cool. thanks.
13:06:33 <Cale> Do strings have to show up as almost the background colour in the wiki syntax colouring? ;)
13:07:05 <goron> I already(hmm... make that finally) know what's the problem: I have  gcc 3.4.1. It's too damn new. This isn't living on the edge, it's over the edge.
13:07:31 * goron is getting an old gcc 3.3.3...
13:08:25 <Marvin--> according to the version of ghc-pkg in cvs, -a is Add False and -u is Add True, AutoGHCiLibs should work with both
13:09:29 <Igloo> Cool, ta
13:10:30 <Marvin--> "I'm not a witch, I'm your wife!"
13:14:35 <thebug> To the pain!
13:16:09 <Marvin--> "Mawage is wot bwings us togeder tooday."
13:16:20 <SyntaxNinja> hm. so I find myself having to pass `wxgttk2--2.4-config --gl-libs` to things I compile w/ wxhaskell; should these flags be in the package file?
13:16:35 * SyntaxNinja found a chat log from this channel where igloo talks about this, so I thought I'd ask :)
13:16:46 <thebug> Princess Buttercup: Westley, what about the ROUS's?
13:16:51 <thebug> Westley: Rodents of unusual size? I don't think they exist.
13:19:20 <SyntaxNinja> it's fixed if I add -lwx_gtk_gl-2.4 to extra_libraries in the package file.
13:19:39 <Marvin--> does it work in ghci too?
13:19:47 <SyntaxNinja> no, I still haven't gotten it building the ghci-libs.
13:19:58 <SyntaxNinja> but I figured I'd prioritize this problem :)
13:34:09 <Igloo> That's one way to do it, but you're probably all bored of me giving my provide way by now  :-)
13:34:41 <SyntaxNinja> Igloo: no, I'm probably missing something. what's that?
13:34:59 <Marvin--> Igloo: btw, what if the flags for the packages distributed with ghc change in a new version?
13:35:26 <Marvin--> (kinda far-fetched, but humour me...)
13:36:44 <Igloo> SyntaxNinja: Splitting the WXH bits into OpenGL and non-OpenGL bits like the C libraries
13:37:28 <Igloo> Marvin--: Then I either don't do that until the next upstream release or I make a pretend upstream release. Same as would probably happen with code changes to the shipped libraries
13:37:40 <Marvin--> heh
13:37:47 <SyntaxNinja> Igloo: how does this help?
13:37:51 <Igloo> Or I do nasty hacks
13:38:02 <Igloo> SyntaxNinja: You don't end up with a binary linked against OpenGL if you don't use OpenGL
13:39:05 <Marvin--> Igloo: uh, yes and no, that depends on whether you want a separate wx-gl ghc-package or not
13:39:25 <Igloo> I'm saying you should
13:39:42 <Igloo> Just like you have a separate libwx_gtk_gl
13:41:28 <Marvin--> so libghc6-wx-dev should register the wx package and libghc6-wx-gl-dev should register the wx-gl package?
13:41:42 <Marvin--> crud
13:42:06 <Marvin--> I just realized that wxhaskell is an example of where it might make sense to have several libraries in a single cabal package
13:42:31 <Marvin--> (wx and wxcore)
13:42:43 <Marvin--> and, indeed, wx, wx-gl and wxcore (and perhaps even wxcore-gl)
13:43:50 <Marvin--> so, who's up for Library stanzas? ;)
13:45:21 <Marvin--> (insert groaning sounds about changing the parser again)
13:45:45 <Igloo> So according to our curent thinking libghc6-wx-core-dev would also be a separate package?
13:46:10 <Igloo> Should be a simple change - just s/opt/many/ or something  :-)
13:46:12 <Marvin--> I don't know
13:46:47 <Igloo> I'm torn between "this is silly" and "it doesn't matter, deps will pull it all in for you"
13:47:00 <Marvin--> well, from the cabal PoV, package <-> library is 1:0-1
13:47:14 <Marvin--> but since wxhaskell obviously has two libraries in it
13:47:22 <Igloo> Oh, wait, if you do the library stanza thing then it isn't a problem, right?
13:47:36 <Marvin--> how we choose to split it up in debian packages is sort of orthogonal
13:47:37 <Igloo> Because we take the cabal package name, not the 3 Haskell package names?
13:47:46 <Marvin--> right
13:48:12 <Marvin--> well, the library names obviously have to go into packages.conf, but the files should go in a directory based on the cpackage name
13:48:23 <goron> Xentac:I had to move some files. But now it's compiling :-) Thanks :)
13:48:40 <Igloo> OK. We should probably allow either assuming cabal does that) in case they are big or often used separately or something
13:48:49 <goron> Oops wrong channel ...
13:49:19 <goron> Marvin--: It's working.
13:49:58 <Marvin--> it might not make sense for Daan to put wx-gl as a library stanza in his Setup.description, but the debian rules file can run setup configure / setup build twice
13:50:16 <Marvin--> whether wx and wxcore go in different dpackages or not is completely orthogonal to how many libraries a cpackage can contain
13:50:35 <Igloo> Why wouldn't Daan have a wx-gl stanza?
13:50:36 <Marvin--> (am I the only one confused by the overloaded terminology? :-/)
13:50:54 <Igloo> Or rather, how would it get built if he didn't?
13:51:14 <Marvin--> passing different parameters to configure perhaps?
13:51:27 <Marvin--> ooh, we should let the 'build' command take optional arguments for build targets
13:51:37 * Marvin-- scribbles TODOs like a madman
13:51:39 <Igloo> I think the wx/wxgl splitshould be upstream. Do you disagree?
13:51:59 <Igloo> :-)
13:52:22 <Marvin--> wxgl might not always be buildable
13:53:12 <Igloo> Oh, do you just mean he would have 2 Setup.descriptions?
13:53:23 <Marvin--> nnnno, not necessarily
13:53:33 <Marvin--> but that's conceivable (though confusing)
13:53:40 <Igloo> Well wxgl would need to be /somewhere/, no?
13:53:50 <Marvin--> no, I'm more thinking passing a flag to ./setup configure
13:53:56 <Marvin--> ./setup configure --with-gl
13:54:00 <Marvin--> ./setup configure --without-gl
13:54:13 <Igloo> OK, and that makes either 2 or 1 hpackages?
13:54:37 <Igloo> IM 3 or 2
13:54:42 <SyntaxNinja> Marvin--: remember that the 1st release of cabal isn't meant to handle the most complex libraries out there :)
13:55:03 <Marvin--> if hpackage is what's goes in ghc's package.conf it'd make 4, wouldn't it? Doesn't wxcore contain gl stuff too?
13:55:47 <Marvin--> that is, ./setup configure --with-gl && ./setup build   would make wx-gl and wxcore-gl, whereas ./setpu configure --without-gl && ./setup build  would make wx and wxcore
13:56:06 <Igloo> OK, 4/2 then (I don't know the answer to that)
13:56:28 <Marvin--> though they'd both be called wx and wxcore and the rules script would have to do lots of trickery... hmm... no, upstream split is probably better
13:56:39 <Marvin--> SyntaxNinja: oh, I'm putting this down for 0.2
13:56:41 <Igloo> Oh, so --with-gl doesn't make the "normal" ones then? I think that's a bad name in that case
13:57:19 <Marvin--> I don't know, do you want the gl/no-gl debian packages to be able to be installed at the same time?
13:57:32 <SyntaxNinja> backing up a step, I don't understand how wxhaskell ever works without the -lwx_gtk_gl-2.4 flag
13:57:35 <Marvin--> or should they both provide wx and wxcore and conflict with each other?
13:57:48 <Igloo> The gl packages should depend on the normal ones
13:58:12 <Igloo> (assuming they do actually depend on their functionality, anyway)
13:58:32 <Igloo> SyntaxNinja: If the C library isn't compied with opengl support
14:00:14 <goron> Is there any developer present that does something with the fptools? I want to know why gcc-3.4.1 isn't supported. Is it a lack of funding?
14:00:51 <SyntaxNinja> Igloo: but --with-opengl wasn't passed to configure.
14:01:17 <Igloo> SyntaxNinja: huh?
14:01:25 <Igloo> I mean libwx-gtk
14:01:27 <Igloo> Not libwxc
14:03:32 <SyntaxNinja> Igloo: oh, this is not the haskell package?
14:03:51 <SyntaxNinja> goron: I don't know if anyone like that is here.  There aren't a lot of funding sources for haskell work, though.
14:03:53 <Marvin--> Igloo: uh
14:04:01 <Marvin--> Igloo: huh?
14:04:23 <SyntaxNinja> Igloo: so maybe that means that the debian configure call should include --with-opengl?
14:04:53 <Igloo> SyntaxNinja: I think that was new in 0.7 to "fix" the problem
14:04:56 <Igloo> Marvin--: hmm?
14:05:08 <goron> SyntacNinja: I know, mostly it's funded by universities. 
14:05:12 <SyntaxNinja> Igloo: "that" means "that configure option"?
14:05:19 <Igloo> yes
14:05:25 <goron> SyntacNinja: Or Microsoft.
14:05:45 <goron> SyntacNinja: GHC is funded by Microsoft, or isn't it?
14:05:59 <Marvin--> oh god, wait a sec
14:06:14 <Marvin--> a hpackage can contain multiple libraries
14:06:20 <Marvin--> well screw THAT
14:06:38 <Marvin--> this is becoming a M:N:K scenario or something
14:07:05 <goron> How long does compilation of all the fptools take? 
14:07:06 <SyntaxNinja> goron:  I'm not really clear on the various implementations' use of fptools; and yeah, most GHC development is done at MS Research in cambridge
14:07:28 <shaleh> why is MS interested in Haskell?
14:07:47 <goron> shaleh: They obviously need a better OS. 
14:08:18 <goron> shaleh: Only someone beat them: hOp. google.com search hOp Haskell
14:08:20 <Igloo> Marvin--: As in multiple libHSFoo.a?
14:08:35 <SyntaxNinja> the way I understnd it, and feel free to correct me, is that MSR in cambridge does pure research, more-or-less, and haskell is very interesting from a research perspective.
14:09:25 <goron> SyntacNinja: That would be something new. Microsoft doing things for nothing. 
14:09:43 <SyntaxNinja> for nothing?
14:09:57 <Marvin--> Igloo: yes, wxhaskell 0.8 splits the wxcore package up in  hs_libraries=["wxcore","wxcore0","wxcore1","wxcore2"]
14:10:02 <goron> SyntacNinja: Do not take my words too literal.
14:10:19 <shaleh> hmm, hOp sounds like it may be non-free. At least in part.
14:10:32 <Marvin--> MS Research has a long history of being funded and left alone, as far as I know
14:10:33 <goron> SyntacNinja: I mean that I think they are working towards some goal.
14:10:56 <Igloo> fun
14:10:56 <goron> Marvin--: How much money goes to it each year?
14:11:02 <Marvin--> I have no idea whatsoever
14:11:06 <Marvin--> how would I know?
14:11:31 <goron> Isn't that in the financial books?
14:11:37 <Marvin--> why would I read them?
14:11:46 <SyntaxNinja> goron: I think MS does have a vested interest in the long-term future of the field. (and btw, SyntacNinja != SyntaxNinja)
14:11:47 <Marvin--> Igloo: I don't know why they're split up though
14:12:03 <Igloo> It's to make our livesmore difficult
14:12:41 <Marvin--> bastard
14:13:39 <shaleh> hmmm, ok, the wording on the web page is poor. The functions from Sun are public domain, not "freely distributable".
14:13:49 <goron> Well, I will try to find how much money is going there? I must say that ghc is a nice piece of software. (The x and c are next to each other)
14:14:48 <Cale> goron: you might try typing "syn" and hitting tab, depending on your irc client
14:15:26 <Marvin--> $(WXCORE-CORE-A-OBJS) $(WXCORE-CORE-B-OBJS) $(WXCORE-CORE-C-OBJS) $(WXCORE-OBJS): $(WXCORE-IMPORTSDIR)/%.o: $(WXCORE-SRCDIR)/%.hs
14:15:26 <Marvin-->         @$(call compile-hs,$@,$<,$(WXCORE-HCFLAGS) -i$(WXCORE-IMPORTSDIR) -Iwxc/include)
14:15:28 <SyntaxNinja> goron: as for the original question, I would guess that the good folks at ghc-central just haven't gotten around to supporting the new gcc... I guess if they were better funded they would have more bandwidth and could prioritize it. who knows.
14:15:30 * Marvin-- boggles
14:16:28 <Marvin--> Igloo: maybe he thought that libwxcore.a was getting too big
14:17:23 <Igloo> Oh, ick, could be to get around linking taking so much memory
14:17:34 <Marvin--> the 0.7 libwxcore.a in haskell-experimental is 2.7M, for 0.8 I get
14:17:38 <Marvin--> 1,2M    /tmp/wxh0.8/lib/libwxcore0.a
14:17:39 <Marvin--> 2,6M    /tmp/wxh0.8/lib/libwxcore1.a
14:17:39 <Marvin--> 2,7M    /tmp/wxh0.8/lib/libwxcore2.a
14:17:39 <Marvin--> 2,8M    /tmp/wxh0.8/lib/libwxcore.a
14:17:45 <Marvin--> that's seriously huge
14:18:57 <Marvin--> libwxcore1.a contains Graphics/UI/WXCore/WxcClassesAL and libwxcore2.a contains Graphics/UI/WXCore/WxcClassesMZ
14:18:59 <Marvin--> ouch :)
14:19:39 <Igloo> HSbase is 16M, 20 with profiling
14:19:48 <Marvin--> oh
14:19:49 <Marvin--> fair enough
14:23:26 <goron> Cale: Great :)
14:27:18 <SyntaxNinja> well, mostly-working but probably rather broken wxhaskell packages for Debian can be found here: http://www.syntaxpolice.org/tmp/wxhaskell/
14:27:52 <SyntaxNinja> but some warnings 1) there's been some dns problems w/ this server, 2) these packages will change tomorrow without changing their version names, and 3) there's probably still plenty of problems to fix.
14:27:58 <SyntaxNinja> feel free to email me about such problems, though.
14:29:08 <goron> How long does the compilation of the fptools tree take on a relatively fast machine?
14:29:44 <Marvin--> SyntaxNinja: with separate library stanzas we will get "base" build info "for free"
14:29:52 <Marvin--> that'd be nice
14:30:16 <SyntaxNinja> I don't know what you mean by that
14:30:46 <Marvin--> like, you put Extensions: foo, bar in the initial stanza, and then extra Extensions stuff in the library/executable stanzas if they need different extensions
14:30:53 <SyntaxNinja> I think I like the idea of library stanzas, except for the lack of 1-to-1 mapping between cabal packages and libraries, which might have some surprising problems, but nothing we can't overcome.
14:31:44 <Marvin--> say all of your libs need MPTC, so you put that in the initial stanza, but only one lib needs fundeps, so you put that in the extension field for that particular lib
14:31:51 <SyntaxNinja> right.
14:32:01 <Marvin--> we just need a smart way to combine BuildInfo:s
14:32:03 <SyntaxNinja> but really, it's a per-source-file thing
14:32:06 <SyntaxNinja> extensions that is
14:32:22 <Marvin--> hush, don't spoil it for me :-(
14:32:28 <Igloo> :-)
14:32:41 <Marvin--> I think extension-per-source-file is a huge mistake
14:32:54 <Igloo> What do you guys do for keeping time on your laptops?
14:33:21 <Marvin--> you don't need any flags to use non-portable libraries, which means you lose track of whether your code is portable or not
14:33:28 <Marvin--> I think that's a design mistake
14:33:36 <goron> gcc: Internal error: Killed (program cc1)
14:33:36 <goron> Please submit a full bug report.
14:33:38 <Marvin--> like when I didn't figure out that ReadP needed local quantification
14:33:40 <Igloo> It would be nice for it to be overridable on a per-file basis, but that's easy to do, right?
14:33:43 <SyntaxNinja> there was some suggestion that the compilers could parse formatted comments in a standard way
14:34:00 <goron> That happens to me always...
14:34:17 <SyntaxNinja> Igloo: I just sync it when I notice it drifting
14:35:09 <Marvin--> yeah, I run ntpdate once in a while when I'm connected
14:36:00 <Cale> We have the page MonadsAsContainers, what should the other view's page be called? MonadsAsComputation? Anyone have a better name?
14:36:05 <SyntaxNinja> I keep planning to have a little program called "night-time-script" or something which does some backup, syncs the clock, runs find, and goes to sleep
14:39:37 <Marvin--> I should upgrade this machine to 2.6 and see if I can get suspend-to-ram to work
14:40:28 <andersca> Marvin--: do you have a nvidia card?
14:40:51 <Marvin--> ... yeah :/
14:41:30 <Marvin--> "give up"?
14:41:34 <andersca> pretty much
14:41:44 <Marvin--> what graphics card should one have these days?
14:41:45 <SyntaxNinja> so Marvin--, what was the problem with not importing the constructors with nhc?
14:42:27 <andersca> Marvin--: dunno, I have a radeon 7500 myself
14:42:46 <Marvin--> SyntaxNinja: I think nhc was confused by field names being imported as functions
14:42:59 <SyntaxNinja> ahh
14:46:04 <SyntaxNinja> Marvin--: that patch looks fine to me.
14:46:09 <SyntaxNinja> it's reassuringly small :)
14:48:11 <Marvin--> SyntaxNinja: you may want to look at the bits about rawSystem and error handling
14:48:48 <SyntaxNinja> ok
14:52:00 * Igloo gets hyppnotised by a not-as-flat-as-it-ought-to-be record wobbling
14:56:27 * SyntaxNinja home &
15:02:22 <shapr> man I love unicycling.
15:02:41 * Riastradh nullicycles.
15:05:22 <aFlag> and i love this girl, but we can't have everything we love :(
15:06:15 <shapr> yah, that's true.
15:06:31 <shapr> but if she's not taken, and you're not taken, you might as well go for it.
15:07:22 <andersca> I have a blister on my thumb
15:07:31 <andersca> @arr
15:07:31 <lambdabot> I'd like to drop me anchor in her lagoon
15:07:42 <shapr> lambdabot is thinking of girls too.
15:09:40 <stepcut> man I love unibrows.
15:10:20 <andersca> i love unixbrows
15:10:51 <Cale> man I love unixbrau
15:14:57 <stepcut> man I love duocycles
15:16:42 <shapr> :-)
15:16:46 <aFlag> yeah, she might as well say no again hehe
15:16:47 <Cale> I love subsets S of the set of edges of a graph X whose characteristic vector lies in both the cut space and flow space of X.
15:18:08 <aFlag> i didn't get most of that haskell humor at haskell.org :(
15:18:17 <Cale> (Such sets are known as bicycles - how is that for obscure?)
15:18:29 <stepcut> aFlag: no wonder you aren't good with the ladies
15:18:34 <shapr> Cale: oy ;-)
15:18:35 <wagle> are tricycles safer?
15:18:48 <shapr> reclining tricycles are *much faster*
15:19:08 <aFlag> yeah, when i learn more haskell i'll be irresistable :O
15:19:48 <shapr> wagle: http://www.recumbenttrikes.ca/
15:21:10 <aFlag> or maybe when i'm able to do my own cps
15:21:25 <shapr> one disadvantage of non-recumbent cycles is that you can't use your full leg strength, you only get leverage equal to your weight.
15:21:28 <wagle> wahhhhhh..  now i gotta wait 2 minutes for mozilla to swap in
15:21:39 * shapr grins
15:21:56 <Cale> cps is for when you already have a girl and you want to keep her - you just pass yourself as a continuation
15:22:15 <shapr> ha
15:23:12 <wagle> it'd be just your style to make a pass at her with a continuation...
15:23:28 <Cale> Haha
15:25:06 <aFlag> heh
15:25:28 <aFlag> haskell is really sweet with the ladies :D
15:26:01 <aFlag> hey girl, i'm functional!
15:26:38 <wagle> first-class!
15:26:59 <stepcut> and polymorphic too
15:27:06 <wagle> ..  but lazy and do { Nothing }
15:27:20 <Marvin--> wagle: ouch :)
15:27:25 <aFlag> being lazy just means she's on top, no big deal
15:27:55 <stepcut> that's true, haskell does have (_|_)
15:28:13 <Cale> and monads
15:28:55 <aFlag> i liked the catholic explanation for monads :)
15:29:06 <monotonom> Catholic explanation?
15:29:26 <aFlag> it's at haskell humor
15:29:29 <aFlag> at haskell.org
15:30:07 * wagle charges aFlag for another two minutes of swapping in mozilla
15:30:31 <aFlag> eheh
15:30:33 <monotonom> You can use links, you know.
15:30:43 <aFlag> i'm not there anymore
15:30:45 <aFlag> let me go there
15:31:26 <aFlag> http://www.newadvent.org/cathen/10447b.htm
15:32:58 <goron> Is it possible to attach files at the bugzilla of gnu?
15:33:44 <wagle> not if you dont hit the attach file button?
15:57:06 * Cale adds a little section on State to MonadsAsContainers
17:24:43 <Cale> Hmm... a value of type (State s a) is a labelled digraph where the outdegree of every vertex is exactly 1.
17:25:11 <Riastradh> Cale, anything new with respect to a graph monad?
17:26:28 <Cale> Not lately, as pretty much the only programming I've been doing has been for work. If you'd really like an implementation of what I was thinking, I could probably finish it up.
17:26:42 <Riastradh> Does that imply that you came up with an idea for what the graph monad would do?
17:27:05 <Cale> Well, I know that map, return and join would do.
17:27:08 <Cale> :)
17:27:16 <Riastradh> Well, duh.
17:27:29 <Riastradh> Well, what would join do?
17:29:40 <Cale> For each vertex v in the graph, let G(v) be the graph v is labelled with, and N(v) be the neighbours of v. Delete v in the graph and replace it with G(v), attaching every vertex in G(v) to each vertex in N(v).
17:30:17 <Cale> ("attaching" meaning "putting an edge between"
17:30:19 <Cale> )
17:31:42 <Pseudonym> @wiki DerivingFromSpecifications
17:31:42 <lambdabot> http://www.haskell.org/hawiki/DerivingFromSpecifications
17:31:45 <Pseudonym> Can people follow that?
17:31:50 * Pseudonym rewrote it completely
17:34:25 <Smerdyakov> Pseudonym, is there an automated technique behind this?
17:34:30 <Pseudonym> No.
17:34:41 <Pseudonym> Choosing what you want to be the passed context is still a black art.
17:34:43 <Smerdyakov> How dull. :D
17:34:54 <Pseudonym> That's really the only non-mechanical part, though.
17:35:02 <Pseudonym> Once you've worked out the right set of axioms.
17:35:13 <Pseudonym> (Which you generally only can do by applying them as you find a need for them.)
17:35:20 <Smerdyakov> It's a confusing introduction, since there has been a reasonable amount of work on deriving implementations automatically from specifications, literally.
17:38:47 <Pseudonym> I was specifically interested in the John Hughes technique.
17:38:52 <Pseudonym> Because I use it all the time nowadays.
17:48:13 <bourbaki> hi
17:56:30 <bourbaki> does anyone of you happen to know any video lectrues?
17:56:51 <bourbaki> on math or CS
17:56:56 <Smerdyakov> Any video lectures on any topic?
17:57:17 <Smerdyakov> It would be helpful if you didn't split messages into multiple lines like that unnecessarily.
17:57:23 <bourbaki> math or CS related
17:57:50 <bourbaki> sorry will try to not do so
17:58:09 <Smerdyakov> There are famous SICP video lectures.
17:58:10 <bourbaki> the problem is that i also think in short sentences ;)
17:58:11 <Riastradh> http://sicp-lectures.webhop.org/
17:58:19 <bourbaki> i got all of them :)
17:58:24 <Riastradh> bourbaki, those aren't sentences...
17:58:39 <bourbaki> i think in a very compact way :)
17:58:43 <Smerdyakov> bourbaki, do you have any particular reason for wanting these? Knowing that would make it easier to give helpful answers.
17:58:46 <Riastradh> Phrases like 'on math or CS,' anyway.
17:59:01 * Riastradh ducks for the horrible grammatical pun.
17:59:32 <bourbaki> well i am especially interested in topology atm and theoretical CS
18:00:14 <bourbaki> maybe some lecture on haskell?
18:01:34 <Cale> bourbaki: have you seen the topological type theory stuff?
18:01:45 <bourbaki> Cale nope
18:01:55 <bourbaki> sounds interesting is it a video lecture?
18:01:59 <Cale> no
18:02:04 <Cale> but it's a book
18:02:10 <bourbaki> ah cool whats the url?
18:02:17 <Cale> one sec - finding it
18:02:19 <bourbaki> sounds somewhat related to what i wanna do
18:02:22 <bourbaki> thanks
18:03:41 <Cale> http://www.cs.bham.ac.uk/~mhe/papers/barbados.pdf -- I think this is it - checking :)
18:04:19 <Cale> yeah
18:04:29 <bourbaki> do you happen to know david rhydeheart Cale?
18:04:59 <Cale> I don't think so, no.
18:05:32 <bourbaki> sec
18:06:06 <bourbaki> http://www.cs.man.ac.uk/~david/
18:06:23 <bourbaki> that book of that he wrote is quite interesting
18:06:41 <bourbaki> though you can only order the new edition at some company in canada :(
18:06:50 <bourbaki> there is the old edition on his site
18:07:04 <bourbaki> its on Category Theory and CS
18:07:21 <bourbaki> http://www.cs.man.ac.uk/~david/categories/book/
18:07:39 <bourbaki> with implementations in ML
18:08:59 <aFlag> good thing cale is from canda :P
18:09:15 <bourbaki> ah :)
18:09:21 <Pseudonym> Damn.
18:09:27 <Pseudonym> Unbelievable.
18:09:32 <Pseudonym> Yay for profiling, though.
18:09:39 <bourbaki> there are also some lecture notes of them around the net
18:10:01 <Pseudonym> Of the 80 odd seconds that this program took, 26 seconds were spent in an unfilled delay slot.
18:10:06 <Pseudonym> (Sparc hardware.)
18:20:26 <aFlag> i think 80 is even
18:20:48 <bourbaki> heh
18:20:56 <Pseudonym> 87 actually
18:21:04 <aFlag> it's odd then
18:21:04 <Pseudonym> Which is an odd form of 80.
18:24:37 <aFlag> next time someone asks me if 0 is even i'll say, yeah, but 3 is an odd form of 0
18:24:57 <Pseudonym> You do that.
18:25:07 <aFlag> :)
19:16:00 <bourbaki> night
19:32:58 <shapr> this new Paul Graham article is very amusing.
19:34:42 <shapr> it's awesome
19:35:25 <CrewdenX> shapr: which one?
19:35:59 <Riastradh> His most recent one, obviously.
19:36:32 <shapr> http://www.paulgraham.com/gh.html
19:36:38 <shapr> sleep
19:37:19 <SyntaxLaptop> shapr: when do you sleep?
19:37:29 <CrewdenX> Riastradh: i guess what i was asking for was an address.
19:37:45 <CrewdenX> shapr: thanks.
19:37:48 <Riastradh> At three (or four?) in the morning.
19:38:05 <shapr> SyntaxLaptop: I don't remember
19:38:16 <shapr> SyntaxLaptop: oh I remember! now!
19:42:25 <Cale> "[2] When Google advertises Java programming jobs, they cleverly require Python experience."
19:44:27 <Cale> Neat trick :)
19:45:54 <Smerdyakov> I think he even went that whole piece without mentioning a functional language!
20:11:14 <Cale> "(I cheat by using a very dense language, which shrinks the court.)"
20:42:10 <brian_m> does anyone know of a lazy eval. AND dynamically typed language?
20:42:33 <SyntaxLaptop> your basic-standard-issue-probably-broken cabal debian package is here: http://www.syntaxpolice.org/tmp/cabal/
20:42:51 <SyntaxLaptop> and the same goes for wxhaskell:  http://www.syntaxpolice.org/tmp/wxhaskell
20:42:54 <SyntaxLaptop> stepcut: that's for you :)
20:48:02 * SyntaxLaptop night&
21:09:28 <stepcut> argh, taking the sqrt of an Integer is a pain
21:09:56 <stepcut> got it..
21:10:48 <anduril1> stepcut: what was your solution?  I remember having that problem a while back
21:11:18 <Riastradh> sqrt . fromIntegral -- perhaps?
21:12:42 <Pseudonym> Another option, of course, is doing an actual integer square root.
21:13:09 <Pseudonym> @wiki LambdaLifting
21:13:09 <lambdabot> http://www.haskell.org/hawiki/LambdaLifting
21:17:08 <stepcut> Riastradh: the tricky part was casting it back to a Integer
21:17:25 <Riastradh> toInteger
21:17:32 <stepcut> nope
21:17:35 <Riastradh> No?
21:17:38 <Riastradh> @type toInteger
21:17:39 <lambdabot> toInteger :: forall a. (Integral a) => a -> Integer
21:17:44 <Riastradh> @type sqrt
21:17:46 <lambdabot> sqrt :: forall a. (Floating a) => a -> a
21:17:51 <Riastradh> @info Floating
21:17:52 <lambdabot> -- Floating is a class
21:17:52 <lambdabot> class (Fractional a) => Floating a where {
21:17:52 <lambdabot>     pi :: a;
21:17:52 <lambdabot>     log :: a -> a;
21:17:52 <lambdabot>     sqrt :: a -> a {- has default method -};
21:17:53 <lambdabot>     exp :: a -> a;
21:17:55 <lambdabot>     logBase :: a -> a -> a {- has default method -};
21:17:57 <lambdabot>     (**) :: a -> a -> a {- has default method -};
21:17:59 <lambdabot>     cos :: a -> a;
21:18:01 <lambdabot> [12 @more lines]
21:18:24 <Riastradh> I see.
21:18:54 <stepcut> one one is to use round, truncate, floor, or ceiling to specify how to deal with the non integer part of the float
21:19:25 <stepcut> which makes the most sense anyways?
21:20:03 <stepcut> s/\?/!/
21:20:13 <Riastradh> Except, apparently, round & friends aren't defined in Floating; they're defined in RealFrac.
21:20:21 <stepcut> yes
21:20:37 <Riastradh> There appears to be no way to go from a Floating to an Integral.
21:21:42 <Riastradh> Luckily, though, Float & Double both have instances for RealFrac.
21:22:01 <Riastradh> Of course, it would be easiest to just do real integer square roots.
21:22:17 <Riastradh> As Pseudonym initially suggested.
21:22:43 <stepcut> yes, I will now
22:09:57 <Pseudonym> That is a good article.
22:10:00 <Pseudonym> Paul Graham.
22:27:09 <pimpbot5000> might anyone know a bit about antlr?
23:47:49 <CrewdenX> if anyone has any good links comparing and constrasting haskell runtime performance with other languages, i'd like to see.
23:48:49 <monochrom> there is a shootout
23:48:57 <CrewdenX> a shootout?
