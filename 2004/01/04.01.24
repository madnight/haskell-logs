02:23:03 <A> Hi. I'm going to write perception experiments' software for our university's psych dep. I like functional programming, and considered doing it in Python & GTK (using the PyGTK bindings for uis and graphics). Is it possible/recomended to try doing it in haskell instead?  I should also mention that some of this stuff might be performance critical, and I might have to write some C extensions if I use python
02:24:47 <rey[lx]> hiho
02:24:49 <cleverdra> I would tend to -- Haskell has fine enough graphical extensions.  You may find that Haskell serves for the performance critical parts; you can also write 'C extensions'.
02:25:04 <andersca> and you can write gtk guis using gtk2hs
02:27:07 <A> Is there data available on Haskell performance?
02:28:01 <cleverdra> a - by which you probably mean that you want information on GHC performance.  I don't know, see http://www.haskell.org/ghc/
02:34:45 <A> cleverdra: thanks
02:50:30 <Maddas> Hm. I've got a question about do notation
02:50:39 <Maddas> Isn't (return s) >>= father >>= mother >>= mother 
02:51:07 <Maddas> Just in the opposite direction of do { m <- mother s ; gf <- father m ; father gf }?
02:51:21 <Maddas> I know it's ont, but I'm not sure why. Is it because of lazy evaluation?
02:51:23 <Maddas> not, even.
02:56:45 <Maddas> err, never mind, I'm stupid.
02:57:02 <andersca> I mean
02:57:09 <andersca> a <- someFun; return a
02:57:31 <andersca> hmm
02:57:35 <andersca> I don't remember it anymore ;)
02:58:48 <Maddas> andersca: The examples were different, that's why things were different too, I thought it's the same thing
02:58:54 <Maddas> I should pay more attention while reading
03:30:35 <Maddas> "do { p <- parent s ; parent p }" is the equivalent of "parent s >>= parent", correct?
03:44:01 <andersca> not really
03:45:08 <Maddas> Hm. What would the equivalent be?
03:45:18 <Maddas> without do-notation
03:49:35 <earthy> parent s >>= \p -> parent p, IIRC
03:50:37 <Maddas> Hm
03:50:47 <Maddas> ok, but that does the same, doesn't it?
03:50:48 <earthy> see also haskell report pages 26 & 27
03:50:58 <earthy> but, time to change CPU fan
03:51:00 <Maddas> Ok, I never had a look at the haskell report yet :)
03:51:09 <Maddas> Heh. Good luck!
04:14:31 <ned_> is 'gforge.scannedinavian.org' haskell-only ?
04:25:18 <phubuh> Maddas: those are equivalent
04:25:25 <Maddas> phubuh: ok :)
04:26:12 <Maddas> so if I said do { parent s; parent } would that translate to "parent s >> parent"?
04:26:27 <phubuh> yup
04:26:31 <Maddas> Ah, I see.
04:26:38 <phubuh> which itself translates to parent s >>= \_ -> parent
04:26:54 <Maddas> So there's no way doing it with do notation without assigning it to a temporary variable, is there?
04:27:14 <phubuh> you can mix do notation and explicit binding
04:27:24 <Maddas> Without explicit binding :-)
04:27:49 <phubuh> noope
04:40:00 * SamB wonders if there is an implementation of Pictures that still works
07:11:14 <_|_> Maddas: do { parent s >>= parent }    :-)
07:14:06 <_|_> Maddas: Oh, never mind, that's what you meant by explicit binding.
08:32:04 <phubuh> hey darius-
08:32:28 <darius-> howdy
08:32:28 <phubuh> hey shapr!
08:32:32 * shapr boings
08:32:33 <shapr> y0 y0
08:32:35 <shapr> wazzup?
08:32:57 <darius-> working on staying awake during the day :)
08:33:04 <shapr> I have that problem also.
08:33:49 <shapr> darius-: funny thing is that if you go to england, you'll have to switch schedules anyway
08:33:52 <darius-> i was just reading newton's principia - it closes with pages of theology
08:34:16 <shapr> have you read Neal Stephenson's Quicksilver?
08:34:21 <darius-> not yet
08:34:46 <shapr> you'll really like it (or really hate it) if you like reading newton's principia
08:36:03 <shapr> newton is one of the main characters.
08:36:07 <darius-> "in him are all things contained and moved; yet neither affects the other; God suffers nothing from the motion of bodies; bodies find no resistance from the omnipresence of God."
08:36:29 <shapr> hej phubuh, vad händer?
08:36:49 <phubuh> I'm trying that lhs2TeX thing out
08:36:53 <darius-> that's just such a science-fictional sentence - makes me wonder about the physics of a universe where all motion gets dissipated by friction with god, or something :)
08:38:21 <shapr> ned_: I don't think gforge.scannedinavian.org is limited to Haskell projects, but I'm also not sure if it's reliable yet. One example is that I'm not making regular backups at the moment. I'll start on that sort of thing after I have all the features working correctly.
08:38:50 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/", "ghc 6.2 is out", "ghc rpms: http://haskell.org/~petersen/rpms/ghc/","cryptolib 1.1.2 - http://www.haskell.org/crypto/ReadMe.html"]' by shapr
08:39:43 <shapr> viewpoint is the essence of perspective, and perspective allows understanding...
08:39:48 <shapr> or something equally metaphysical
08:40:00 <shapr> anyways, I think that's the central theme of Quicksilver.
08:40:05 <shapr> I really enjoyed that book.
08:40:20 <shapr> it increased my motivation to thoroughly understand category theory.
08:41:22 <shapr> cryptolib is up to 1.1.2 now
08:42:03 <darius-> well, if knuth can write a novel about nonstandard analysis, i don't see why we can't have a novel about category theory
08:42:05 <shapr> darius-: any progress on clickcheck et al?
08:42:30 <darius-> i'm making a more side-effecty interface to it
08:42:41 <shapr> hey, are you stuck with windows nowadays?
08:42:47 <darius-> yes
08:42:57 <shapr> oh, too bad.
08:50:43 * SamB wants something like what TeXmacs wants to be that is written in a functional language. Or so he thinks.
08:50:51 * shapr agrees
08:51:03 <shapr> one of my pipe dreams is Hemacs
08:51:25 <shapr> I think it'll be possible once some Haskell implementations has really good runtime loading
08:54:32 <SamB> I can't imagine what posessed these people to write TeXmacs in C++
08:56:00 <phubuh> hrm, lhs2TeX renders <- in do blocks as an \element
08:56:28 <phubuh> err, is it \element?  it's the element-of character, in any case
08:56:59 <Riastradh> SamB, so write your own.
08:57:41 <shapr> yes, let's write HeXmacs! w00!
08:58:02 <Riastradh> Do so!  That's the only way to get things done.
08:58:30 <darius-> hexmaxrox
08:58:50 <Riastradh> Jabbering about wishful thinking and flusteredly spewing out excuses about time problems never gets anything done.
08:59:06 <phubuh> it's fun nevertheless!
09:00:25 <Riastradh> Jabbering wishfully and excusing oneself in a flustered manner is fun?
09:00:38 <shapr> has anyone tried the Haskell editor combinators?
09:00:43 <phubuh> well, the former is.  the latter isn't especially fun.
09:01:23 <Riastradh> The former can be made even _more_ fun by realizing the wish.
09:01:29 <phubuh> true
09:02:19 <Riastradh> So what are you waiting for?  Go out there and start hacking a Haskmacs!
09:02:36 <shapr> I have to go shopping now, but I can check it out tomorrow.
09:02:48 <phubuh> I'm busy.
09:02:50 <Riastradh> 'Have to' go shopping?
09:02:57 <shapr> yes, "have to"
09:03:04 <shapr> she's standing behind me with a STICK!
09:03:07 <shapr> ok, no stick...
09:03:10 <Riastradh> I see.
09:03:21 * shapr grins
09:03:29 * shapr goes away
09:03:44 <SamB> Riastradh: actually, I don't really know the first thing about writing a mathematical text editor.
09:03:57 <Riastradh> SamB, so learn!
09:04:04 <SamB> unless the first thing is "don't use C++"...
09:04:06 <phubuh> neither did Knuth!
09:04:10 <Riastradh> Little problems like that never deterred hackers before.
09:06:44 <SamB> is this the part where I get to complain about school work?
09:17:57 <Riastradh> No, that falls under flustered excuses regarding time problems.
09:21:26 <SamB> then this would be a good time to ask what happened to Haggis?
09:37:10 <SamB> phubuh: knuth took a decade, you realize
09:37:30 <phubuh> well, yes
10:07:49 * SamB didn't realize that Unix software qualified as platfrom specific
10:09:47 <Riastradh> SamB, yes, it doesn't run on non-UNIX systems.
10:11:10 <SamB> Riastradh: yes, but unix systems can run in, on, or under almost anything, and unix software is generally easier to port to non-unix than vice versa, right?
10:12:13 <Riastradh> SamB, a) yes, but if you're _not_ using UNIX, then you can't use it; b) yes, but that's not really relevant here: you can't use it unless you change the specificness of it by porting it.
11:13:52 <rey[lx]> hi
11:33:14 <rey[lx]> hmm
11:33:29 <rey[lx]> i have a little problem here compiling hopengl
11:33:43 <rey[lx]> after make depend i do make
11:33:54 <rey[lx]> nad during compile this error occurs:
11:33:55 <rey[lx]> GL_BasicTypes.hs:60: parse error on input ``'
11:34:07 <rey[lx]> has anyone experienced this error before?
11:34:28 <rey[lx]> or can help me trying to figure out whats wrong?
11:35:08 <Cale> rey[lx]: you're compiling the hopengl that comes with GHC?
11:35:21 <rey[lx]> uh no
11:35:30 <rey[lx]> is there a special one for ghc?
11:35:37 <Cale> the package on the HOpenGL site is horribly out of date
11:35:46 <Cale> GHC comes with HOpenGL
11:35:53 <rey[lx]> hmm
11:36:50 <rey[lx]> i downloaded the binaries for ghc
11:37:00 <rey[lx]> and there seems no hopengl to be included
11:37:29 <Cale> hmm
11:38:15 <Cale> it's certainly in the source, and Debian at least includes it as an extra package
11:38:29 <Cale> have you checked your distribution?
11:39:06 <rey[lx]> i have slackware.. i dont think there is a special release of hopengl for slack
11:40:19 <Cale> well, you might try using the ghc that you already have installed to compile ghc from source
11:40:46 <rey[lx]> yeah, i played with this thought too
11:40:57 <rey[lx]> so that is what i will probably do
11:41:22 <Cale> make sure to --enable-opengl from configure
11:41:52 <Cale> actually, have a good scan through ./configure --help and see what you want
12:08:33 <cptchaos> Does anyone know how to apply the strictify "!" to an record entry?
12:09:42 <Igloo> I think it's before the type. If not it'll be before the selector name.
12:09:54 <Riastradh> You could try and find out.
12:10:15 <cptchaos> ok, I tried and failed
12:11:21 <cptchaos> i will try again, lost the code ...
12:12:42 <Riastradh> You could try various different ways and find out.
12:13:16 * cptchaos is currently trying
12:21:57 <cptchaos> both wrong?
12:22:20 <cptchaos> data SysState
12:22:20 <cptchaos>       = SysState {
12:22:20 <cptchaos>           period::!Integer
12:22:20 <cptchaos>         }
12:22:32 <cptchaos> and 
12:22:44 <cptchaos> data SysState
12:22:44 <cptchaos>       = SysState {
12:22:44 <cptchaos>           !period::Integer
12:22:44 <cptchaos>         }
12:22:45 <cptchaos>        deriving Show
12:22:49 <cptchaos> do not work 
12:22:59 <cptchaos> with ghci at last
12:24:40 <cptchaos> am I missing something?
12:24:55 <Igloo> Put a space between :: and !
12:25:38 <cptchaos> ah, thanks
12:33:26 <phubuh> given a ThreadId, is there any way to wait until the thread associated with it terminates?
12:33:46 <Riastradh> There's no threadJoin?
12:33:58 <Lunar^> phubuh: I think I used a QSem for this
12:34:17 <phubuh> Riastradh: nope
12:34:27 <phubuh> Lunar^: okay, I figured I might have to do something like that
12:35:05 <Lunar^> I think you could do some high-order IO function if you want
13:27:49 <Tirador> hello
13:28:28 <Tirador> I want do define my own data "Matrix" and it should consist of another data called "Row"
13:28:55 <Marvin--> evening
13:28:56 <Tirador> problem is that I've to implement a function Matrix Int -> Matrix Int
13:29:21 <Tirador> data Row a = Nix | CRow a (Row a) deriving Show
13:29:21 <Tirador> data Matrix Row = Nichts | CMatrix Row (Matrix Row) deriving Show
13:30:00 <Marvin--> data Matrix Row = ...  is a syntax error
13:30:03 <Riastradh> Tirador, [[data Matrix Row = ...]] that Row there doesn't belong.
13:30:14 <Tirador> sorry that was my new try
13:30:37 <Tirador> data Row a = Nix | CRow a (Row a) deriving Show - data Matrix a = Nichts | CMatrix a (Row a) deriving Show
13:31:08 <Marvin--> Tirador: but that will make a matrix either empty or a value and a row
13:31:53 <Marvin--> Tirador: but 'data Matrix a = ...' is on the right track
13:32:19 <Tirador> I tried Matrix Row a = ... doesn't work
13:32:46 <Marvin--> Tirador: no, Matrix a = ... is quite right, it's the ... you have to think about :)
13:33:21 <Tirador> A Row consists of a lot of numbers as a list
13:33:58 <Tirador> and a Matrix consists of different Rows, my problem is that I've to implement a Function Matrix Int -> Matrix Int which isn't conform to Matrix Row -> Matrix Row
13:34:52 <Marvin--> what should the function do?
13:35:12 <Marvin--> (though that's kinda orthogonal to the implementation of the type)
13:35:14 <Tirador> It should increment every number in the matrix \x->x+1
13:36:12 <Marvin--> do you understand what your latest Matrix type does?
13:36:57 <Tirador> CMatrix (CRow 1 Nix) Nichts <-- is a Matrix with one element
13:37:24 <Marvin--> ah, but that doesn't have type Matrix Int, that has type Matrix (Row Int)
13:38:06 <Tirador> I know that's my problem
13:38:48 <Marvin--> look at the type
13:38:55 <Marvin--> data Matrix a = Nichts | CMatrix a (Row a)
13:39:17 <Marvin--> a matrix is either empty (Nichts) or it's a value and a row
13:39:38 <Marvin--> but what you *want* is that a matrix should be either empty or a row and a matrix, right?
13:39:47 <Tirador> yes
13:40:27 <Marvin--> think about how you'd write that
13:40:37 <Tirador> I've tried things like CMatrix Row a (Row a) <-- doesn't work
13:41:17 <Tirador> I don't know how to write that in correct syntax
13:41:28 <Marvin--> you'd want CMatrix (Row a) (Row a)
13:41:32 <Marvin--> but that's not recursive either
13:41:43 <Marvin--> recursive would be using 'Matrix a' in the right hand side
13:42:01 <Marvin--> just as you're using 'Row a' in the right hand side of the definition of Row
13:42:35 <Tirador> I've tried that but then I've still the Matrix Int -> Matrix Int problem
13:43:15 <Marvin--> what other way have you tried writing the Matrix type?
13:43:33 <pimpbot5000> hi, does anyone know how to calculate the max flops of a pentium IV 1.6GHz?  or maybe a better place to ask this question?
13:43:43 <Tirador> Marvin--, hey I've it working
13:43:46 <Tirador> :)
13:45:11 <Marvin--> :) so what did you end up with?
13:46:50 <Tirador> I've changed it to CMatrix (Row a) (Row a) and rewrote my Matrix Int -> Matrix Int function
13:47:13 <Tirador> inc' (CMatrix m ms) = CMatrix (inc'' m) (inc'' ms)
13:47:14 <Tirador>                 where inc'' Nix = Nix
13:47:14 <Tirador>                       inc'' (CRow m ms) =  CRow (m+1) (inc'' ms)
13:47:26 <Tirador> is that good code? (I'm a haskell newbie=
13:48:03 <Marvin--> how would you write a 3 x 3 matrix then?
13:48:17 <Marvin--> it's type correct, but is it *correct*?
13:49:40 <Marvin--> you can't, you can only write n x 2 matrices
13:49:44 <Tirador> hmm a 3x3 matrix could be a problem
13:49:52 <Tirador> ideas?
13:50:37 <Marvin--> Is your Matrix type recursive?
13:51:09 <Tirador> data Matrix a = Nichts | CMatrix (Row a) (Matrix a) deriving Show
13:51:24 <Marvin--> now that's recursive!
13:51:30 <Tirador> I've changed it :)
13:51:32 <Marvin--> see how it has the same form as the definition of Row?
13:53:29 <ham[let]> hi
13:53:37 <Marvin--> hello
13:55:36 * Marvin-- is watching Being John Malkovich
13:58:35 <Tirador> inc' (CMatrix (CRow 2 (CRow 3 Nix)) ( CMatrix (CRow 1 Nix) Nichts))
13:58:36 <Tirador> CMatrix (CRow 3 (CRow 4 Nix)) (CMatrix (CRow 2 Nix) Nichts)
13:58:44 <Tirador> :)
13:59:31 <Marvin--> doesn't look very rectangular, but fair enough ;)
13:59:50 <Tirador> hey it works :)
14:00:16 <Marvin--> now, if I were evil, I'd introduce you to Data.Generics ;)
14:02:51 <stevehu> sweet sweet emacs
14:03:03 <Marvin--> my god what an absurd movie
14:03:07 * Marvin-- pours another whisky
14:03:09 <steveh> which movie is that?
14:03:35 <Marvin--> Being John Malkovich
14:03:52 <steveh> good film
14:03:57 <steveh> what part are you at?
14:04:23 <Marvin--> the part right after it ends? ;)
14:04:35 <steveh> oh
14:04:54 <steveh> I love John Malkovich playing John Cusack
14:05:00 <steveh> simply beautiful :)
14:05:10 <Marvin--> yeah, he's amazing
14:06:38 <Tirador> have you seen identity?
14:07:16 <Marvin--> no :(
14:08:11 <Tirador> John Cusack at its best
14:12:05 <Tirador> there is no gui in haskell?
14:13:02 <Marvin--> there are a few
14:13:08 <phubuh> not in the standard, but there are good GUI libraries
14:13:10 <phubuh> like gtk2hs
14:13:17 <Marvin--> I haven't really used any of them though
14:13:43 <phubuh> me neither.  I'm planning on using gtk2hs some time soon, though
14:13:50 <Marvin--> there's gtk2hs like phubuh said, and there's something wx based... there are opengl bindings... there's fudgets...
14:14:48 <Tirador> are you using haskell for your private aims?
14:15:15 <Marvin--> what do you mean private aims? :) do I write programs in haskell rather than other languages? Yes, when it's suitable
14:15:45 <Tirador> I mean if you're working in a company that wants you to use haskell
14:15:57 <Marvin--> nope
14:16:26 <Marvin--> but then, I'm a student
14:17:09 <Tirador> me too
14:17:18 <Tirador> I'm forced to learn haskell :)
14:17:36 <Tirador> in two weeks
14:18:16 <Marvin--> I hope you're not hating every minute of it ;)
14:18:16 <phubuh> what's your university and teacher?
14:18:41 <Tirador> RWTH Aachen, Giesl
14:19:13 <Tirador> I don't think you know that university, right`
14:19:20 <phubuh> nope, sorry :)
14:19:33 <Marvin--> the name doesn't ring a bell either
14:19:45 <ecraven> germany
14:19:58 <Tirador> right :)
14:20:09 <ecraven> should be south, is it?
14:20:39 <Tirador> no it's in the west. near the belgium and netherland border
14:21:21 <Marvin--> well yeah, I know where *Aachen* is, I meant Giesl :)
14:21:43 <phubuh> hey, has anyone gotten lhs2TeX working with --poly?
14:22:18 <phubuh> it doesn't align anything for me
14:22:20 <Tirador> Mr. Giesl -> http://www-i2.informatik.rwth-aachen.de/giesl/
14:22:23 <Marvin--> speaking of lhs2TeX, wasn't it Igloo who wrote some haskell->TeX thingy too?
14:23:10 <Marvin--> right, haskell2LaTeX
14:23:31 <phubuh> ooh, maybe that'd work better
14:23:40 <Marvin--> http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/Haskell2LaTeX/
14:23:46 <phubuh> I hope it likes my formatting
14:24:36 <Marvin--> it shouldn't really care since it parses the code, not just lexes it
14:24:44 <Marvin--> question is if *you* like *its* formatting ;)
14:28:44 <Marvin--> dear god, Den demokratiske terroristen on TV
14:34:52 <heatsink> Haskell's numeric types still confuse me... how do I convert an Integer to a Float?
14:35:20 <phubuh> you can convert an Integer to any number with fromIntegral
14:35:23 <phubuh> @type fromIntegral
14:35:24 <lambdabot> fromIntegral :: (Integral a, Num b) => a -> b
14:35:37 <phubuh> that is, it converts any Integral to any Num
14:36:45 <monotonom> Is the command set of lambdabot Church-complete?
14:37:17 <phubuh> @eval "certainly"
14:37:18 <lambdabot> certainly
14:39:24 * Marvin-- swears at his report and pours another whisky
14:39:27 <steveh> who here is employed as a programmer?
14:39:51 <Marvin--> I am, during summers
14:40:33 <steveh> does your employer make money through software development, or is it a support function for the real business?
14:41:34 <Marvin--> make money? :)
14:41:37 * Marvin-- grins
14:42:10 <Marvin--> I think the *intention* is to make money on software development and consulting and training for said software, but I don't know what the financial situation is
14:43:46 <monotonom> I am too, kind of. I get a TA job in which I design test cases and run student programs over the test cases en masse.
14:44:06 <Marvin--> I've worked as TA a lot, too
14:44:51 <steveh> oops, soryr
14:44:52 <steveh> sorry
14:44:57 <steveh> missed your answer Marvin--
14:45:06 <Marvin--> <Marvin--> I think the *intention* is to make money on software development and consulting and training for said software, but I don't know what the financial situation is
14:45:15 <steveh> ah I see
14:45:15 <steveh> well
14:45:29 <steveh> I work as an inhouse developer for a noncomputer company
14:45:38 <steveh> and I think I am scaring my coworkers
14:45:54 <Marvin--> heh
14:46:29 <steveh> i whipped out a simple parser for something last week, took maybe 90 minutes to get right
14:46:42 <Marvin--> sounds reasonable - in haskell anyway
14:47:00 <steveh> i used a state transition table, it was that simple. could have been done in a very ugly regexp
14:47:08 <steveh> it was in python
14:47:15 <steveh> haskell is not installed anywhere there ;)
14:47:28 <steveh> but they were giving me odd looks
14:47:47 <steveh> I am like "well, I could have typed everything out the way I wanted it, but that would have taken all day..."
14:48:11 <Marvin--> well, for a simple language that's just fine, for more complex I prefer using a tool like yacc
14:48:16 <steveh> yeah
14:48:18 * phubuh digs parsec
14:48:21 <steveh> this wasn't a language per se
14:48:29 <steveh> more like extracting useful information
14:48:29 <Marvin--> of course it was
14:48:35 <steveh> well yes it was
14:48:39 <steveh> a regular language
14:48:48 <Marvin--> it was a simple langauge, but a language still
14:48:50 <steveh> but I am saying, I was misusing a more full-featured language ;)
14:49:05 <steveh> in that I was ignoring everything in the file except what I was looking for
14:49:05 <Marvin--> so? all regular languages are context-free
14:49:13 <steveh> like I said, it could have been a very ugly regexp
14:49:17 <steveh> but that would have taken longer
14:49:33 <monotonom> I don't like regexp and perl. They are write-once, never-read notations.
14:49:33 <phubuh> I wrote a parser for Direct Connect messages in about 30 minutes with Parsec, not including reading the paper about it :-)
14:49:36 <steveh> plus I wanted to perform an action at each state
14:50:20 <steveh> i considered yacc until I realized there was no recursive definition in what I wanted
14:51:04 <steveh> but anyway
14:51:44 <steveh> these are people who don't seem to understand why it's a bad thing to run a database query for each desired item in a report
14:51:50 <Marvin--> so how come it took you 90 full minutes? ;)
14:51:53 <steveh> rather than doing a select *
14:52:14 <Marvin--> heh
14:52:58 <steveh> Marvin--: :-) it didn't really, but I was nominally working on it for that long. I am counting "ok, wtf to do about this... should I use yacc? uhoh, e-mail. how does Python's shlex work again? hmm..."
14:53:13 <Marvin--> fair enough ;)
14:53:49 <steveh> anyway
14:54:03 <steveh> applied computer science seems to be arcane here
14:54:08 <steveh> which both concerns and delights me
14:54:10 <steveh> :)
14:54:28 <phubuh> here as in in #haskell, or at your workplace?
14:56:48 <steveh> workplace
14:56:56 <steveh> here there are gobs of it
14:56:57 <steveh> :)
14:57:11 <steveh> the guy is optimizing a single query
14:57:24 <steveh> not realizing the issue is he is making hundreds of queries per record
14:58:38 <_joey> I'm glad haskell will be only for one semeter in our course:>
14:59:01 <Marvin--> _joey: but still, we have one semester to convince you otherwise, eh? .)
14:59:13 <_joey> who we?
14:59:21 <_joey> you in particular?>
14:59:45 <steveh> _joey: haskell is like a dream really. I wish I had more time to mess with it so I would learn to avoid silly type errors
15:00:08 <Marvin--> we as in #haskell
15:00:20 <_joey> if it was a dream language it'd be dominating
15:00:43 <_joey> I can just easily to solve most problems using imperative languages
15:00:47 <_joey> which most people do
15:01:00 <Marvin--> things don't dominate because they're best
15:01:04 <Marvin--> look at micros~1
15:01:13 <_joey> useless
15:01:15 <_joey> :>
15:01:33 <_joey> name me a commercial application written in haskell
15:02:16 <Marvin--> I don't recall any, but they exist
15:02:29 <monotonom> I took a code optimization course. We were required to implement dataflow algorithms and code optimizations in C++. In layman terms that means making weight-lifting a rocket science. I am glad it was just one semester.
15:03:20 <_joey> I am starting CS 1 year/1 semester and haskell is the language they are going to teach us
15:04:24 <_joey> 2nd semester it'l be C and everyone is looking forward to it:>
15:04:28 <monotonom> If I were allowed a choice, I would choose at least SML, so that traversing a set or list does not have to involve for (list<set <blah> >::iterator i...) BS like that.
15:04:39 <steveh> imperative programming rots your brain
15:04:40 <Marvin--> _joey: dear god, you people are insane
15:04:42 <steveh> I can attest to this
15:04:47 <steveh> I program Java at work
15:04:57 <steveh> even with the Collections API
15:04:59 * Marvin-- has taught Java, now *that* rots your brain
15:05:02 <steveh> it is still a bunch of crap
15:05:10 <Marvin--> steveh: the generics will make it slightly better
15:05:15 <steveh> it is like talking baby talk to a computer
15:05:26 <Marvin--> no more casting crap
15:05:33 <steveh> Marvin--: we have to support Java 1.3 for the forseeable future
15:05:38 <Marvin--> d'oh :(
15:05:41 <_joey> Marvin--: I think not, I think it's you who sealously following haskell wityhout knowing much about programming
15:05:54 <steveh> no no
15:05:56 <Riastradh> _joey, popularity is no basis for the merits of a programming language.
15:06:18 <steveh> imperative programming rots your brain after a point
15:06:36 <steveh> unless you are doing some serious optimization or deep hacking
15:06:39 <_joey> most practical problems are solved by imperative languages
15:06:41 <steveh> which you won't do
15:07:03 <Marvin--> _joey: I've programmed professionally in C, C++, Python and Java, and non-professionally in C, C++, Python, Java, PHP, Erlang, Haskell, and a whole slew of other languages
15:07:05 <Marvin--> I like Haskell
15:07:07 <steveh> most practical problems are solved by people who don't even know that their architecture forces you to make 1 million database calls to generate a report
15:07:08 <Riastradh> _joey, C forces you to think about _how_ the computer does things.  High-level, functional languages deal with _what_ you're doing.
15:07:12 <_joey> where would the techlogy be today if we all used functional languages lol
15:07:30 <_joey> Riastradh: no need to tell me this , I rea that already
15:07:37 <steveh> ask Ericsson, _joey :)
15:07:55 <Riastradh> It would all be a lot better, because we're not stuck spending time debugging memory leaks and invalid pointer references.
15:07:58 <Marvin--> yeah, Erlang is a cool language
15:08:16 <steveh> or wasting our time creating Iterator objects to iterate through a few collections
15:08:34 <Marvin--> and I agree with steveh, "most practical problems" are solved by people who don't know enough computer science to do anything properly
15:08:35 <steveh> I nested an iterator i, an iterator j, an iterator k, and an iterator l
15:08:45 <steveh> granted I can probably pull a method out of it
15:08:54 <steveh> but that _adds_ syntactic overhead
15:09:17 * Marvin-- is learning Lustre right now, nifty little language
15:09:18 <steveh> I was thinking to myself in a HLL the whole time
15:09:26 <monotonom> See? You do not have that syntactic burden in Haskell. Just fold or map it. No bloody iterator.
15:09:31 <Riastradh> Fold is your friend.  Cursors are unnecessarily complicated and have problems with resource management, and can trivially be created with fold.
15:09:31 <steveh> by HLL I mean something that will let you do map and fold
15:09:32 <steveh> exactly
15:09:44 <_joey> Marvin--you are talking crap man, industries that spend $$ using imperative problems don't know much and you know more ? hehe
15:09:57 <_joey> imperative languages to solve problems*
15:10:02 <steveh> i was thinking "fold, map" and typing a bunch of "for (Iterator i = ...)"
15:10:03 <monotonom> _joey: that is why they spend $$ not $
15:10:16 <Marvin--> well put
15:10:40 <Riastradh> _joey, Marvin-- knows about computer science _far_ better than CEOs and managers.
15:11:02 <Marvin--> if everybody thought "hey, the big guys do this, so it must be right", THAT's when we'd have no scientific progress
15:11:11 <steveh> the issue is that it's really difficult for nontechnical people to make hiring decisions about technical people
15:11:18 <Marvin--> people would still complain about the silliness of this "wheel" thingy
15:11:27 <_joey> beter than NASA, US military and a big list of well known ogrnizations?
15:11:34 <_joey> I think he is talking out of his sphincter:>
15:11:36 <steveh> and it's really difficult to convince most technical people to get in a position where they make those decisions
15:11:40 <steveh> heh
15:11:49 <steveh> you mean the NASA whose probe is in an infinite loop?
15:11:49 <steveh> :)
15:11:57 <ecraven> lol :) good point
15:11:58 <Marvin--> a big list of those well known organizations also pump $$ into computer science research, including functional programming
15:11:59 <_joey> anyway< ia m done with this discussion
15:12:30 <phubuh> _joey: try actually making points instead of making lame personal insults, popularity arguments, and authority arguments
15:12:41 <Marvin--> I don't doubt that there's a lot of competent people at NASA, but you explicitly said "most practical problems"
15:12:44 <steveh> I wonder if using jakarta collections would make things easier
15:12:55 <Marvin--> "most practical problems" aren't solved by NASA, for crying out loud!
15:13:00 <steveh> I already depend on it because of using Digester
15:13:25 <steveh> of course
15:13:44 <_joey> Marvin-- don't make thing up, I never said NASA solves most practicle problems, again. this shows you are talking out of your ass
15:13:53 <steveh> a state machine to parse "create table (...)" in a script drew funny looks
15:14:03 <Marvin--> whatever, dude
15:14:11 <steveh> who knows what org.apache.commons.collections.Closure would do to them
15:14:16 <steveh> or whatever the class is
15:14:17 <_joey> those were examples of government orgranizations that use imperative languages
15:14:33 <_joey> let's enough of this
15:14:35 <Marvin--> I bet most of them also use functional languages
15:14:35 <_joey> :>
15:14:44 <Riastradh> _joey, again, popularity is no basis for the merits of programming languages.
15:14:46 <Marvin--> NASA do a huge number of different things
15:14:47 <_joey> they would
15:14:57 <_joey> Marvin--: I agree with you on that
15:14:59 <Riastradh> _joey, who runs those big organizations?  Not computer scientists.
15:15:03 <phubuh> _joey: can you -please- present an *actual* argument against functional programming, instead of merely parroting that many smart people don't use it?
15:17:11 <steveh> hey, I have a haskell question to change the subjects
15:17:23 <phubuh> whee :-)
15:17:25 <steveh> what's a good naming convention for constructors?
15:17:30 <steveh> for example
15:17:44 <steveh> data Tree = Nil | ??? Tree a Tree
15:17:46 <steveh> or something like that
15:17:59 <phubuh> Branch?
15:18:02 <Marvin--> I would use  data Tree = Leaf | Node Tree a Tree in that case
15:18:17 <steveh> maybe a bad example
15:18:20 <phubuh> oh, yes, Node is better
15:18:32 <Igloo> Some people would use MkTree
15:18:47 <Marvin--> MkT is common for newtype:s
15:18:50 <Marvin--> hello Igloo :)
15:18:57 <Igloo> True, more common there
15:18:58 <Igloo> Hi
15:19:21 <steveh> ok
15:19:22 <Igloo> Personally I'd probably think of Fork first, but that's more to do with what you see first I suspect. Node might be better if you have values at branches rather than at leaves
15:19:28 <steveh> I guess that's what I'm confused about
15:19:38 <steveh> Some people treat those constructors as a "noun"
15:19:42 <steveh> others as a "verb"
15:20:07 <steveh> and others like Okasaki just use one capital letter
15:20:08 <steveh> the bastard
15:20:12 <phubuh> personally, I always use verbs
15:20:13 <phubuh> haha
15:20:22 <Marvin--> heh, yeah, Okasaki is a bit too brief :)
15:20:37 <steveh> which is odd
15:20:40 <Marvin--> I usually use nouns and use verbs for the visible functions
15:20:45 <steveh> because he typeset the thing in a proportional font
15:20:48 <Igloo> Could be to do with keeping width down for books/papers
15:20:52 <steveh> giving him more line width to play with
15:21:27 <steveh> so nouns for typenames and constructors
15:21:31 <steveh> verbs for functions?
15:21:35 <steveh> that's what I figure too
15:21:41 <steveh> but I have seen the MkFoo a bit
15:21:48 <steveh> and technically it is a function
15:22:04 <Marvin--> newtype:s are a bit different since they're just thin wrappers
15:23:16 <steveh> Marvin--: why do you favor "Leaf" over "Nil" in the case above? Because other things could have "Nil"s too?
15:23:59 <Marvin--> Nil is a bit too generic, and "leaf" is standard terminology when it comes to trees
15:24:05 <Igloo> MkFoo looks strange when pattern matched on IMO
15:24:36 <steveh> Igloo: I noticed that too
15:24:54 <Marvin--> Yeah, I think so too
15:25:04 <steveh> Here's another question about constructors
15:25:21 <steveh> It seems to me that I have to strict-ify them quite often. Is that everyone else's experience too?
15:25:43 <Igloo> Why are you strictifying them?
15:26:01 <steveh> because when I leave them lazy usage goes way up
15:26:06 <steveh> memory usage and GC ing
15:26:17 * Lunar^ prefers noun
15:26:31 <Lunar^> Because of pattern-matching
15:26:36 <steveh> though usually I start strictifying things everywhere
15:26:42 <steveh> maybe I should keep detailed notes
15:26:44 <Igloo> It's been a while since I ran anything big, but I don't remember needing more than the occasional key bit strictified
15:26:45 <Lunar^> I prefering thinking in terms of "If we got a Leaf then ..."
15:26:50 <steveh> and figure out what works or not
15:27:42 <Igloo> Evening Isaac
15:28:53 <SyntaxLaptop> hi Igloo
15:30:43 <Marvin--> syntax
15:31:56 <SyntaxLaptop> hey Marvin--, how's it going?
15:32:00 <steveh> Hi Syntax!
15:32:06 <steveh> ltnc
15:32:36 <Marvin--> SyntaxLaptop: well, I'm really good at not writing my project report :-(
15:34:50 <SyntaxLaptop> y0 steveh
15:35:04 <SyntaxLaptop> Marvin--: having trouble selling yourself? I like writing project report type things
15:36:11 <Marvin--> no, I guess I just don't know what to write
15:36:37 <Marvin--> I don't know how to write about the thoughts and intentions between my axiomatization
15:36:48 <Marvin--> er, s/between/behind/
15:37:10 <SyntaxLaptop> how do you explain them to people?
15:37:48 <Marvin--> I don't :( I think the problem is that I've spent too much time on practice and too little on the theory
15:38:32 <Marvin--> but, I mean, the idea is to have the axiomatization mimic Haskell's denotational semantics (otherwise what's the point?)
15:47:15 <SyntaxLaptop> Marvin--: who's your target audience for the project?
15:49:58 <Marvin--> good question, researchers I guess, people who know haskell and have moderate knowledge of first order logic
15:55:51 <SyntaxLaptop> Marvin--, Igloo: does this bug look correct: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=119263
15:56:08 <SyntaxLaptop> I'm going to fix it and change my address and upload a new haskell-mode, just for fun.
15:56:38 <SyntaxLaptop> I think #debian-devel is just trying to be contrary, btw ;)
15:57:13 <Igloo> If there are a non-trivial number then that would make sense. No idea what the emacs policy says, if there is one, or if emacs would still be able to find them though
15:57:39 * Igloo needs to make that an autochannel or whatever
15:58:01 <SyntaxLaptop> well, when I ls /usr/share/emacs/site-lisp/, they do stick out like a sore thumb
15:58:24 <steveh> emacs
15:58:25 <steveh> mmm
15:58:27 <Marvin--> I'm not an emacs user
15:58:29 * steveh uses freebsd
15:58:36 <steveh> can't really say what debian is doing on install
15:58:45 <steveh> my platform is emacs :)
16:09:07 <Marvin--> I'm off to catch some shut-eye
16:10:23 <SyntaxLaptop> 'night Marvin--
16:10:41 <Verbed> I keep mine in jars, to stare at something that doesn't stare back.
16:14:20 <SamB> hmm, is cayenne available in a version that works with something other than hbc?
16:14:50 <Riastradh> What's cayenne, aside from a kind of chili?
16:18:02 <esap> cayenne is a programming language, very much like Haskell. But with undecidable type system.
16:29:30 * SyntaxLaptop feels like he's uploading without a net
16:29:35 <SyntaxLaptop> Igloo: wanna check over my new haskell-mode package? :)
16:31:27 <SyntaxLaptop> http://www.syntaxpolice.org/tmp/
16:33:16 <Lunar^> SyntaxLaptop: What's new ?
16:33:30 <SyntaxLaptop> hi Lunar^
16:40:17 <steveh> what's the latest haskell-mode?
16:40:19 <steveh> i have 1.43
16:40:40 <SyntaxLaptop> 1.44
16:41:24 <steveh> who hacks on it nowadays?
16:42:55 <SyntaxLaptop> no one from what I can tell
16:43:53 <steveh> oh well
16:44:06 <steveh> someday I will learn the vagaries of programming emacs modes
16:44:20 <steveh> after about 80 billion other things
16:44:50 <SyntaxLaptop> heh
16:45:19 <steveh> lately I am using eclipse to my chagrin
16:45:36 <steveh> I am torn as to whether or not to use emacs keybindings
16:45:51 <steveh> since not having them is a good warning that I can't use it like emacs
16:46:05 <SyntaxLaptop> the shame
16:46:14 <steveh> whereas if C-a and C-e work I might forget and try to do M-x n do or something
16:46:19 <steveh> er
16:46:19 <SyntaxLaptop> do eclipse emacs keybindings work?
16:46:22 <steveh> M-x n d
16:46:58 <steveh> as long as you don't mind only having what Windows people can do
16:47:16 <steveh> they just remap C-rightarrow to C-e, etc.
16:48:48 <steveh> and that's C-x n d
16:48:55 <steveh> obviously been a little while ;)
16:49:46 <steveh> what would be slick is to use Emacs as Eclipse's editor, instead of Eclipse's editor
16:49:55 <steveh> but I don't expect that to ever be well integrated
16:52:01 <SyntaxLaptop> why do you use Eclipse, OOI?
16:55:13 <steveh> well
16:55:29 <steveh> at work it's websphere application developer studio, which is based on eclipse
16:55:42 <steveh> I tend to use emacs under cygwin for a lot of things though
16:56:16 <steveh> basically everything except java
16:56:21 <steveh> which mostly means Perl
16:56:30 <SyntaxLaptop> and haskell?
16:56:31 <SyntaxLaptop> :)
16:56:34 <steveh> and some Python scripts for my own convenience
16:56:35 <steveh> HA
16:56:45 <steveh> I was bitching about this earlier on #haskell
16:58:19 <steveh> pardon my C-y...
16:58:20 <steveh> <steveh> imperative programming rots your brain
16:58:20 <steveh> <Marvin--> _joey: dear god, you people are insane
16:58:20 <steveh> <steveh> I can attest to this
16:58:20 <steveh> <steveh> I program Java at work
16:58:20 <steveh> <steveh> even with the Collections API
16:58:22 <steveh> * Marvin-- has taught Java, now *that* rots your brain
16:58:23 <steveh> <steveh> it is still a bunch of crap
16:59:01 <steveh> <steveh> I nested an iterator i, an iterator j, an iterator k, and an iterator l
16:59:01 <steveh> <steveh> granted I can probably pull a method out of it
16:59:01 <steveh> <steveh> but that _adds_ syntactic overhead
17:00:05 <steveh> who knew one silly interview more than a year ago would suddenly make me into a primadonna? :)
17:03:39 <SyntaxLaptop> steveh: hyh?
17:03:46 <steveh> well
17:04:33 <steveh> back then Tom said "We use Haskell, you should look it over before you come in"
17:04:35 <steveh> so I did
17:05:02 <steveh> now I get seriously irked with languages that don't even have fold and map
17:05:05 <steveh> :)
17:05:53 <steveh> especially if they are Java and make it a big production to try to implement anything like that
17:06:43 <SyntaxLaptop> hehe
17:14:26 <_joey> when install ghc-6.2 from source how do you bootstrap? README provides little information
17:14:33 <steveh> whoa
17:14:39 <steveh> use a package
17:14:42 <steveh> ghc takes forever
17:14:59 <SyntaxLaptop> _joey: did you see the building guide on ghc's web page?
17:15:03 <monotonom> I recommend using a binary distribution or package too.
17:15:28 <monotonom> No one installs JVM from source.
17:15:42 <monotonom> (For example.)
17:15:52 <_joey> SyntaxLaptop could you paste the url?
17:16:29 <SyntaxLaptop> _jo: http://www.haskell.org/ghc/docs/latest/html/building/building-guide.html
17:16:54 <_joey> for example you have little idea that some version of *nix may not provide binary for 6.2 version
17:18:32 <monotonom> ghc has some os-specific parts that need non-trivial porting.
17:19:28 <monotonom> I say this because as a consequence, ghc runs on an OS iff someone has already posted binaries for that OS.
17:20:52 <steveh> maybe Hugs would be an easier environment to use _joey?
19:29:37 * Riastradh lost track of where the lambdabot source is available.
19:29:40 <Riastradh> @fact source
19:29:40 <lambdabot> Sorry, I don't know the command "fact", try "lambdabot: @listcommands"
19:29:44 <Riastradh> Bah..
19:29:45 <Riastradh> .
20:30:46 <_|_> Riastradh: http://sourceforge.net/projects/haskell-libs/
20:31:18 <_|_> @arr
20:31:18 <lambdabot> I'd like to drop me anchor in her lagoon
20:31:22 <_|_> @arr
20:31:23 <lambdabot> Drink up, me hearties
20:31:28 <_|_> @yow
20:31:29 <lambdabot> Edwin Meese made me wear CORDOVANS!!
20:32:08 <_|_> @listmodules
20:32:09 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
20:32:27 <_|_> @listcommands dict
20:32:27 <lambdabot> Module dict provides the following commands: ["dict","dict-help","all-dicts","devils","easton","elements","foldoc","gazetteer","hitchcock","jargon","lojban","prelude","vera","web1913","wn","world02"]
20:32:38 <monotonom> Somewhere on www.scannedinavian.org/repos/
20:33:32 <_|_> @listcommands quote
20:33:33 <lambdabot> Module quote provides the following commands: ["fortune","yow","arr"]
20:44:47 * SamB wonders if ghc supports plan9
20:45:05 <monotonom> Probably not.
20:45:17 <cleverdra> mono - no, SamB definitely wondered if ghc supported plan9.
20:45:21 <monotonom> I haven't heard of anyone trying to port ghc to plan9.
20:46:02 <monotonom> Oh haha I see what you mean cleverdra
