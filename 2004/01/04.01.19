03:24:03 <ham[kell]> hiho
03:24:49 <Maddas> hi
03:27:23 <ham[kell]> has anyone of you done something with diagramatic reasoning yet?
05:51:35 <Maddas> Good afternoon
06:13:56 --- mode: sterling.freenode.net set +b *!*@206.169.168.190
06:14:55 --- mode: weber.freenode.net set +b *!*@206.169.168.190
06:15:34 --- mode: truong.freenode.net set +b *!*@206.169.168.190
06:17:46 --- mode: kornbluth.freenode.net set +b *!*@206.169.168.190
06:18:55 --- mode: weber.freenode.net set +b *!*@206.169.168.190
06:19:14 <shapr> good morning #haskell!
06:19:15 <ham[kell]> good morning :)
06:19:19 <shapr> hi CowGirl, haven't seen you around much lately
06:19:24 <shapr> hey ham[kell], that paper is spiffy!
06:19:31 <shapr> too bad that toolkit is written in Clean
06:19:57 <shapr> hi d2004xx 
06:20:14 <Maddas> Good afternoon, shapr!
06:20:34 <shapr> hi Maddas, wassup?
06:20:48 <Maddas> Learning Haskell, the usual stuff :-)
06:21:01 <shapr> run across anything interesting in your learning?
06:21:09 <det> shapr: you dont like clean ?
06:21:11 <Maddas> Everything
06:21:24 <shapr> det: haven't even tried to learn it
06:21:32 <shapr> so I just have a null opinion
06:21:40 <Maddas> shapr: I have not yet run across anything uninteresting, so to say
06:21:57 <shapr> that's a neat way to look at it
06:22:17 <d2004xx> hi shapr
06:22:23 <det> shapr: sometimes in a rl conversation I get the urge to define some datatypes before to help explain myself :)
06:22:32 <shapr> d2004xx: are you learning Haskell?
06:22:57 <shapr> det: yes, once when very tired I tried to explain to someone that Salad :: [LettuceLeaf]
06:23:07 <Maddas> Haha
06:23:31 <det> :)
06:23:41 <shapr> they didn't really understand
06:24:07 <Maddas> "Salad colon colon opening  bracket Lettuce leaf closing bracket"
06:24:08 <d2004xx> shapr: not yet
06:24:15 --- mode: tenn.freenode.net set +b *!*@206.169.168.190
06:24:46 <det> "YOU DONT UNDERSTAND, THAT ISNT AN OPTION, WE ARE WORKING WITH 'datatype possibilies = Yes | No | ICantAnswerBecause of reason'"
06:25:05 <shapr> d2004xx: have you already found the Haskell tutorials and implementations?
06:25:10 <shapr> @learn
06:25:10 <lambdabot> http://www.haskell.org/learning.html
06:25:12 <d2004xx> shapr: i'll learn erlang first :)  But haskell may be more suitable for my future plan
06:25:17 <shapr> ah, ok
06:25:30 <d2004xx> isn't the only implementation GHC?
06:25:37 <shapr> no, there are several
06:25:50 <shapr> GHC, Hugs, UHC, Helium NHC, HBC
06:26:02 <shapr> that's all I can think of immediately
06:26:11 <d2004xx> ah i mean native compiler
06:26:13 <shapr> Helium and NHC are two different implementations
06:26:25 <shapr> in that case, only GHC, UHC, NHC, and HBC
06:26:38 <shapr> Hugs and Helium are interpreters
06:27:15 <d2004xx> which one generates the fastest code?
06:27:20 <shapr> GHC
06:27:47 <shapr> though maybe UHC for some specific applications, UHC has some unusual features
06:27:53 <d2004xx> i just got the tutorial
06:28:06 <shapr> lambdabot uses GHC
06:28:19 <shapr> @arr
06:28:20 <lambdabot> Smartly me lass
06:28:25 <d2004xx> performance would be my main concern :)
06:28:38 <shapr> in that case, you may want to investigate OCaml
06:28:43 <shapr> I've heard it's *very* fast
06:29:03 <d2004xx> i know, it even has its own native compiler (not via gcc)
06:29:12 <d2004xx> ah.. latter
06:29:12 <shapr> primarily because of the implementation of the compiler, but partially because it's a strict language
06:29:17 <shapr> GHC also has a native compiler
06:29:52 <det> clean is supposidly fast'
06:29:58 <det> and it is lazy
06:30:22 <shapr> the GHC backend is being rewritten right now, several pieces are being unified, C-- will be one of the new output options
06:30:45 <det> does C-- even work ?
06:30:47 <shapr> sure
06:31:03 <shapr> I thought it was working for some years?
06:31:16 <shapr> http://www.cminusminus.org/
06:31:23 <det> I thought it could barely do hello world
06:31:57 <shapr> I haven't tried it myself, just seen discussions on some of the Haskell mailing lists.
06:33:51 <shapr> since SPJ is one of the main movers and shakers in C--
06:34:02 <det> I didnt know that
06:35:53 <shapr> d2004xx: do you have any more questions about Haskell?
06:37:54 <shapr> det: I think the shootout needs updating
06:38:13 <det> I imagine so, but why do you say ?
06:38:28 <shapr> just wondering whether OCaml or Clean is faster
06:38:40 <shapr> and I know GHC has gotten faster, but I don't know how much it's improved
06:38:51 <det> Clean isnt on the shootout
06:38:53 <shapr> the eval/apply change really made a different in 6.2
06:39:01 <det> oh
06:39:06 <det> that is what you mean :)
06:39:08 <det> im slow
06:39:29 <shapr> me too
06:39:36 <shapr> I need more coffee
06:40:06 <det> yeah, I'd like to see newest ocaml, mlton, clean and ghc compared
06:40:38 <Maddas> det: Make some tests then!
06:40:51 <det> too much work!
06:40:55 <Maddas> :-(
06:41:03 <shapr> we could take the wiki approach
06:41:09 <det> hrmm
06:41:14 <det> interesting proposition
06:41:15 <shapr> I'd be happy to contribute GHC tests
06:41:16 <Heffalump> shapr: really? I got the impression it was a little better but not hugely so
06:41:28 <Heffalump> but that the main motivation was that it improved the design of the compiler significantly
06:41:32 <shapr> but I don't know anything about Clean or OCaml
06:41:50 <det> shapr: I could do some ocaml/sml
06:41:54 <Maddas> Just get somebody with a clue to write code for Haskell, somebody for O'Caml, somebody for SML, and then compare :-)
06:42:06 <shapr> Heffalump: it's noticeably faster on my machine
06:42:16 <Heffalump> oh, cool
06:42:43 <shapr> 6.2 (or was it 6.0?) cut several seconds off lambdabot compile times for example
06:42:54 <det> .oO( wikishootout.org)
06:42:59 <shapr> det: yah, good idea!
06:45:38 <det> does #haskell have a wiki
06:46:05 <shapr> yup
06:46:11 <shapr> @wiki RecentChanges
06:46:12 <lambdabot> http://www.haskell.org/hawiki/RecentChanges
06:47:09 <shapr> speaking of which, I haven't checked the latest PreludeExts changes
06:48:06 <det> hmm, ghc has special unboxed integer types ..
06:48:11 <shapr> yup
06:55:24 <det> does ghc have incremental compilation ?
06:56:33 <shapr> ghc compiles only the modules that have changed, and then relinks all the pieces
06:56:38 <shapr> is that what you mean?
06:56:48 <det> yeah
06:57:09 <det> after modifying something in lambdabot, how long does a compilation typicly take ?
06:57:20 <shapr> just a few seconds
06:57:23 <shapr> wanna see?
06:57:51 <det> why not
06:59:40 <det> I await recompilation!
06:59:47 <shapr> err, what's the right param for time?
07:00:03 <shapr> I've just changed one command in DummyModule.hs
07:00:53 <shapr> make  1.75s user 0.31s system 90% cpu 2.282 total
07:01:11 <shapr> that's a 600MHz box with 512MB of ram
07:01:19 <det> not bad
07:01:19 <shapr> and one change to DummyModule.hs
07:01:25 <shapr> @dynamic-reload dummy
07:01:26 <lambdabot> module reloaded
07:01:28 <shapr> @det
07:01:28 <det> how long does a fresh compilation take ?
07:01:29 <lambdabot> Sorry, I don't know the command "det", try "lambdabot: @listcommands"
07:01:32 <shapr> whoops
07:01:40 <det> @dummy
07:01:40 <lambdabot> dummy
07:01:57 <shapr> @dynamic-reload
07:01:57 <lambdabot> module not loaded
07:02:01 <shapr> @dynamic-reload dummy
07:02:01 <lambdabot> module reloaded
07:02:04 <shapr> @det
07:02:04 <lambdabot> detonate!
07:02:22 <det> I'd rather not!
07:03:52 <shapr> ok, total rebuild of lambdabot on this same 600MHz p3 machine - make  64.53s user 3.11s system 95% cpu 1:11.02 total
07:04:04 <shapr> that's make clean && time make
07:04:30 <shapr> lambdabot isn't the most accurate way to measure build time because it has various nifty tricks
07:04:54 <det> oh
07:05:12 <shapr> conf files that get turned into haskell source, and that sort of stuff
07:05:12 <det> I was just wondering, because I remember it being very slow
07:06:35 <det> and the UnboxedTypes wiki made me wonder if it is much faster than Mlton
07:06:40 <shapr> on my 1544MHz box - make  31.73s user 2.36s system 82% cpu 41.346 total
07:07:15 <shapr> I wonder if make -j 4 would work
07:07:38 <steveh> wouldn't that only help if you had multiple CPUs?
07:08:00 <shapr> make -j 4  34.09s user 1.98s system 160% cpu 22.494 total
07:08:04 <shapr> I do have multiple CPUs
07:08:21 <ecraven> :)
07:08:45 <det> and it is still slower :)
07:09:15 * Maddas drools at thinking of compiling things on the PowerMac G5 he's about to get
07:09:22 <steveh> you have a quad box shapr?
07:09:22 <steveh> rock
07:09:39 <steveh> Maddas: you are getting a g5? rock
07:09:52 * steveh is going to get an iBook in the near future
07:09:56 <steveh> I have been Macless for too long
07:09:59 <Maddas> steveh: Well, my family, but I convinced them to let it run 24/7 so I can use it as a server :-)
07:10:02 * Maddas pats his PowerBook
07:10:08 <det> steveh: ouch! what is this hard pointy object in my shoe!?
07:10:15 <shapr> steveh: nah, just a dualie
07:10:18 <steveh> det: stone!
07:10:50 <det> stones are never pointy!
07:10:59 <det> they are smooth and round!
07:11:24 <steveh> oh
07:11:27 <steveh> good point
07:11:28 <steveh> shard!
07:11:32 <det> shapr: try make -j2
07:11:51 <det> rather
07:11:59 <det> nice -20 make -j 2
07:12:03 <Heffalump> for a GHC compilation?
07:12:14 <shapr> nah, compiling lambdabot 
07:12:20 <Heffalump> the lambdabot makefile uses ghc --make, so parallelising it won't help
07:12:27 <shapr> it seems to help
07:12:32 <shapr> make -j 2  33.29s user 2.29s system 149% cpu 23.766 total
07:12:49 <det> shapr: that is slower by a second
07:13:03 <shapr> make -j 3  33.66s user 2.27s system 159% cpu 22.572 total - make -j 4  34.09s user 1.98s system 160% cpu 22.494 total
07:13:04 * shapr shrugs
07:13:11 <shapr> it's half the time that make -j 1 takes
07:13:17 <shapr> so I won't argue
07:13:28 <det> <shapr> on my 1544MHz box - make  31.73s user 2.36s system 82% cpu 41.346 total
07:13:37 <Heffalump> interesting
07:16:33 * shapr reads time man pages
07:17:49 * det sleeps
07:17:50 <det> g'night all
07:18:12 <shapr> g'night det
07:18:21 <det> steveh: just say it for me!
07:18:29 <steveh> rock!
07:18:34 <det> YES!
07:18:36 <shapr> roll!
07:18:37 * det passes out
07:18:40 <steveh> hehe
07:18:42 * shapr grins
07:18:59 <shapr> seems that /usr/bin/time can give a lot more details than the zsh builtin
07:19:37 <steveh> heheh
07:20:32 <shapr> heya Darius 
07:26:08 <shapr> surprisingly, it seems that make -j 2 is most expensive overall, and make -j 3 is least expensive overall, make is 34.17 seconds, make -j 2 is 23.59 seconds, make -j 3 is 22.58 seconds, and make -j 4 is almost exactly the same as make -j 3
07:26:34 <shapr> I guess that's why hyperthreading is useful
07:27:49 <Heffalump> I still don't understand how the build got parallelised at all.
07:28:11 <shapr> I'd say it's because multiple ghc --make compilations are running at the same time
07:28:26 <shapr> --make Foo and --make Bar can run at the same time
07:28:57 <Heffalump> oh, I didn't realise that
07:29:48 <Heffalump> ah, it's the modules
07:29:57 <shapr> right
07:56:27 <ham[let]> bk
07:59:15 <shapr> darcs
07:59:15 <shapr> !
08:01:26 <shapr> ham[let]: that Jerzy paper is spiffy, now I'm wondering whether I can do the same sort of tiling stuff with Pan/Pancito/PanTHeon/etc
08:02:26 <ham[let]> shapr: that paper i sent you?
08:02:34 <shapr> yes!
08:03:16 <shapr> I met Jerzy at ICFP, he's *really* cool.
08:03:44 <ham[let]> oh
08:03:55 <ham[let]> i wish i could go there too
08:04:09 <ham[let]> there are more papers on esherization
08:04:21 <shapr> yah, I saw he had some references
08:04:30 <ham[let]> i remember at least one from the siggraph er 2000/1 or so
08:05:26 <ham[let]> it would be funny to write my graph thing in haskell and use stuff like that to have something like a background in a squeak like window :)
08:05:46 <shapr> I'd like to see a squeak-like system in Haskell
08:06:06 <shapr> OpenCroquet-style would be even better
08:06:15 <ham[let]> yep
08:06:29 <ham[let]> i have started on my thesis
08:06:40 <shapr> some sort of shared 3D space, maybe 3D IRC :-)
08:06:48 <ham[let]> and i have no editor but a system like that would be great
08:07:07 <ham[let]> i thought in something like a 3d shooter for irc
08:07:12 <ham[let]> that is a channel is a room
08:07:23 <shapr> but how can you be in many rooms at once?
08:07:41 <ham[let]> you can just leave the room through a portal
08:07:51 <ham[let]> that then asks you to enter the name where you wanna go
08:08:03 <ham[let]> or if you have regular channels then have some doors for tht
08:08:12 <shapr> but how could you listen to multiple conversations at once then?
08:08:46 <shapr> hm
08:08:54 <ham[let]> you just would have either speach bubbles
08:08:59 <ham[let]> or something like a console
08:51:36 <shapr> ham[let]: your twin is here.
08:51:43 <ham[kell]> bk
08:51:45 <ham[kell]> :)
08:51:51 <ham[kell]> my conn went down
08:51:56 <shapr> it's like Agent Smith in The Matrix
08:52:36 <ham[kell]> heh :)
08:52:44 <ham[kell]> i froked myself
08:52:53 <ham[kell]> i forkgive you if yu forkget ;)
08:53:08 <shapr> that's amusing
08:53:18 <shapr> very punny misspelling
08:53:26 <ham[kell]> havent you seen mystery men?
08:53:31 <shapr> no, what's that?
08:53:47 <ham[kell]> thats a movie about 'superheros' :)
08:53:54 <shapr> sounds like fun, I'll check it out.
08:53:58 <ham[kell]> theres the blue radja the master of catlery
08:54:07 <shapr> oh, I have seen that 
08:54:12 <ham[kell]> and he likes forks best :)
08:54:15 <shapr> it had Janine Garafalo, or whatever her name is
08:54:27 <shapr> she was "The Bowler" right?
08:54:30 <shapr> or something like that
08:54:48 <ham[kell]> yep :) the bowlers daughter
08:54:56 <ham[kell]> her father was carmine the bowler :)
08:55:03 * shapr grins
08:55:13 <ham[kell]> but the cooles guy in that film is casanova frankenstein :)
08:55:58 <Riastradh> The best line in that movie was 'hey, I'm a publicist, not a magician,' but you have to know who said it to get why.
08:56:18 <ham[kell]> who said that again?
08:56:40 <Riastradh> Ricky Jay.
08:56:53 <ham[kell]> was that his name in the movie?
08:56:56 <ham[kell]> ah right :)_
08:56:59 <Riastradh> No, that's his real name.
08:57:03 <ham[kell]> in the car with cp amazing :)
08:57:16 <ham[kell]> whats whith death man? deathmans dead
08:57:16 <Riastradh> Yes.  I don't even know if he had a character name.
08:57:38 <ham[kell]> a super hero needs a super vilan :)
09:02:44 <shapr> I hope they get these artificial diamond CPUs moving soon
09:03:07 <ham[kell]> uh?
09:03:22 <shapr> on the downside, you'll be able to put your PC under one of those fake fireplaces and get the real heat.
09:03:40 <shapr> artificial diamond is nearing mass production
09:03:54 <shapr> iirc, diamond is better at conducting heat than copper
09:03:56 <ham[kell]> and they build machines on that?
09:04:07 <shapr> there are plans to do that
09:04:14 <shapr> but at last reading, they said probably ten years from now
09:04:33 <shapr> diamond CPUs could run at very high temperatures without damage to the CPU
09:04:42 <ham[kell]> i would like to have electronic paper first
09:04:49 <shapr> and you could heat your entire apartment building
09:04:58 <ham[kell]> and then i would tapester my walls and ceiling with it
09:05:04 <shapr> I'm sort of scared of electronic paper
09:05:09 <ham[kell]> why?
09:05:23 <shapr> noise pollution is nothing compared to eye pollution
09:05:32 <ham[kell]> :)
09:05:56 <ham[kell]> i think it would be cool ta have a room
09:06:13 <ham[kell]> that is controled by a biofeedbackdevice
09:06:13 <shapr> t-shirts, graffiti, advertisements
09:06:13 <shapr> everything will be animated
09:06:28 <ham[kell]> that then controls the papers
09:06:30 <shapr> and what if someone cracks into your PC, and makes the room spin around you?
09:06:35 <shapr> sudden seasickness
09:06:39 <ham[kell]> :)
09:06:58 <ham[kell]> havent you evern been lieing in your bed
09:07:04 <shapr> of course, it would be just as much fun as broadcasting M-C-DEL via Satellite to every bluetooth keyboard in the world
09:07:06 <ham[kell]> looking at teh ceiling and thought how boring?
09:07:17 <shapr> yes
09:07:22 <ham[kell]> i would like to have something like a michelangelo picture
09:07:23 <shapr> I put paper up on my walls so I can doodle
09:07:27 <ham[kell]> that actually moves
09:07:28 <shapr> butcher paper works
09:07:37 <shapr> it's thick, and you won't make marks on the walls behind
09:07:48 * shapr doodles on everything
09:07:49 <Heffalump> right. It's the week and stuff. Cya.
09:07:54 <shapr> I draw on my keyboard
09:07:59 <shapr> he's right, it's the week
09:08:01 <shapr> I gotta do some work
09:08:08 <ham[kell]> :)
09:08:09 <ham[kell]> sry
09:08:16 <shapr> fun talking to ya, I'll be back later
09:08:28 <phubuh> whoa
09:08:35 <phubuh> gtk2hs seems -awesome-
09:28:16 <andersca> yeah, it is 
09:31:58 * phubuh considers starting all over again in Haskell
09:32:26 <phubuh> hint: don't ever hire me to do anything that has a deadline
09:33:11 <Igloo> :-)
09:38:57 * esap prefers not to have any deadline.
09:46:25 <phubuh> naturally
09:46:29 <phubuh> testing
09:46:30 <phubuh> bah
10:19:52 <cm_> hiho
10:46:07 <rey[lx]> hiho
10:47:19 <ham[kell]> :)
10:47:35 <rey[lx]> du hammel ;)
11:25:07 <Marvin--> Tomasz mail on getopt was quite interesting
11:28:15 <rey[lx]> gott braucht das lang die gimp sources zu kompilieren
11:28:37 <rey[lx]> doh, wrong window
11:36:13 <phubuh__> hey, this is odd
11:36:38 <phubuh> I sent a subscription request to haskell and haskell-cafe some days ago, but I haven't received any mails
11:36:49 <phubuh> I did get the subscription notifications, though
11:37:20 <Marvin--> odd
11:52:06 <phubuh> whoops
11:52:26 <phubuh> Jan 19 20:27:00 igloo postfix/cleanup[5729]: warning: C9064A6300: write queue file: No space left on device
11:57:49 <Marvin--> heh
11:58:29 <phubuh> that can't be the reason though, I've been not getting Haskell message for days, and getting OCaml messages for days
11:58:38 <phubuh> maybe it's an ML conspircay
11:59:24 <Marvin--> yeah!
11:59:56 <Maddas> phubuh: The O'Caml part of SpamOracle has been classifying your Haskell mail as spam, I bet!
12:00:31 <phubuh> :O
12:10:51 --- mode: ballard.freenode.net set +b *!*@206.169.168.190
12:10:57 --- mode: tenn.freenode.net set +b *!*@206.169.168.190
12:12:56 * phubuh subscribes again and hopes that it'll work this time...
13:05:01 <ham[kell]> i have got a question according an error that occurs in my program
13:05:12 <ham[kell]> i have an n of type Int
13:06:22 <ham[kell]> in the function declaration i once use (fromIntegral n) > beta :: Rational and once 1/(fromIntegral n)
13:06:40 <ham[kell]> the error state that b was an ambigious type
13:07:04 <ham[kell]> how can i get rid of that kind of error?
13:15:45 * rey[lx] says: good fight, good night
13:16:02 <ham[kell]> :)
13:17:28 <Darius> One can't tell what's wrong without the whole function.
13:20:58 <ham[kell]> oh then i will paste the function
13:21:06 <ham[kell]> just havee to eat thanks
13:32:57 <ham[kell]> www.rafb.net/paste/results/J2019271.html
13:33:42 <ham[kell]> line 47 and 44
13:40:09 <Darius> You don't need fromIntegral nth. nth isn't an Integral.
13:40:58 <ham[kell]> hm sec
13:42:05 <ham[kell]> but then if i omit that from integral he says that he has no instance of fractorial in that line
13:42:10 * shapr boings happily
13:42:19 <phubuh> hey shapr!
13:42:20 <ham[kell]> oh so i (1 :: Fractorial )?
13:42:25 <shapr> hi phubuh! wassup?
13:42:28 <ham[kell]> wb
13:42:32 <phubuh> not much
13:42:40 <phubuh> I think I did good on my math test today, which is a relief
13:42:45 <shapr> cool
13:43:09 <shapr> what sort of math are you studying?
13:44:52 <phubuh> the test was about powers, logarithms and trigonometry, but I was supposed to have done it months ago -- now we're studying ... uh, I don't know
13:53:03 <Darius> ham[kell]:Which fromIntegral?
13:53:43 <ham[kell]> Darius: ok nth is then of type Factorial right?
13:56:33 <ham[kell]> hm got it i think
13:56:40 <Darius> 1 / fromIntegral n should be of type Fractional a => a
13:56:57 <ham[kell]> is that the same as Rational?
13:57:17 <Darius> No, though Rational should be an instance.
13:57:25 <ham[kell]> ah ok
13:58:29 <shapr> y0 SyntaxLaptop 
13:58:32 <shapr> wassup?
13:58:44 <SyntaxLaptop> hey shapr
14:00:22 <ham[kell]> oops :)
14:00:41 <ham[kell]> shreddered haskell and emacs
14:08:34 <Riastradh> HAH!  There are _FIVE_ more people in #scheme than here!!
14:09:01 <Riastradh> (Four if you exclude bots from both channels.)
14:09:07 <Marvin--> /kick Riastradh
14:09:12 <Marvin--> whoops
14:09:17 <opet> I was about to say, how many are bots? :)
14:09:41 <Riastradh> Three bots (lisppaste, sarahbot, and clog) in #scheme and two bots here (lambdabot and clog).
14:10:12 <phubuh> but lambdabot is sentient
14:10:17 <phubuh> unlike your braindead scheme bots!
14:10:21 <Riastradh> sarahbot is a lot more sentient than lambdabot.
14:10:27 <Riastradh> You can almost have coherent conversations with sarahbot!
14:11:05 <Riastradh> sarahbot has a complete and pretty safe Scheme evaluator, as well as a dedicated Scheme REPL channel.  So there!
14:11:50 <Darius> How are there five more people?
14:11:58 <Riastradh> ?
14:12:40 <Darius> <Riastradh> HAH!  There are _FIVE_ more people in #scheme than here!!
14:12:57 <Riastradh> There are 64 people in #scheme and 59 in here.
14:13:20 <Darius> For 3 minutes?
14:13:47 <Riastradh> Damn.  One just left.
14:14:35 <mgoetze> i mean, scheme is like, totally ok and all...
14:14:42 <mgoetze> it's just not as cool as haskell...
14:15:31 <Riastradh> One just joined again...
14:16:06 <Verbed> It seems that those prone to the aesthetic of minimalism would prefer Scheme.
14:18:32 * esap thinks scheme is huge.
14:20:14 <Riastradh> Compared to the X-Calculus, yes.
14:20:24 <Riastradh> But X is not very pleasant to write code in.
14:21:20 <esap> You can always add some syntactic sugar.
14:21:52 <Riastradh> No, you can't, if all you have is function application and X.
14:22:59 <phubuh> hmm, am I the only one having major problems compiling gtk2hs?  there are a bunch of trivial errors in generated code, like the FinalizerPtr and the Ptr argument to some function are consistently gotten backwards
14:23:07 <Riastradh> At least Scheme isn't constricted by a strict static type system.
14:23:08 * Riastradh ducks.
14:23:35 * phubuh stuffs Riastradh into a teeny meeny monad
14:24:24 <Igloo> The FFI changed those bits not unrecently
14:24:36 <phubuh> oh
14:24:44 * Riastradh invokes a continuation to escape.
14:25:04 <Igloo> I think GHC 6.2 agrees with FFI 1.0, so if you're using that you probably want to mail Axel(?)
14:25:19 <Igloo> And I'm sure he'd be happy if the mail included a patch  :-)
14:25:20 * esap raises an exception, and thinks what would happen without a type system.
14:25:45 * Riastradh catches it gracefully, having installed an exception handler without needing to infect himself with squiggly monads.
14:26:17 * phubuh adds 5 to "hello"
14:26:49 * Riastradh signals a type error statically to phubuh, having _analyzed_ but not _constrained_ his code with a static type system.
14:26:52 * esap considers catching the exception inadequate, you need to recover as well.
14:27:17 * Riastradh restarts from where the condition was raised with a new and correct value.
14:28:21 * esap has no way of ensuring it would work like that for every exception I raise.
14:28:55 * Riastradh throws a non-local exit out of the broken region and dumps himself into a debugger, where he can remove all references to esap and cause a garbage collection.
14:29:48 * andersca notices #haskell has turned into a mud battle
14:30:02 * andersca stabs monad
14:30:16 * esap doesn't want the run-time system to include a debugger.
14:30:22 * phubuh slings Arrows
14:30:30 <phubuh> no, he shoots Arrows
14:30:42 * Riastradh didn't release the program yet so it doesn't matter; he's still debugging it.
14:33:04 * Riastradh dumps a new heap without the esap bug and retries.
14:33:38 * esap eats an apple and dumps the core.
14:34:19 * Riastradh points out that esap is elsewhere in a Haskell heap, no longer a Scheme heap, wreaking havoc with Greek letters and adjunctions.
14:34:47 * Riastradh jumps onto another Kali node, closes the connection, and continues to hack, uninterruptedly.
14:35:00 <esap> Kali?
14:35:16 <Riastradh> Kali.
14:36:10 * esap has not heard of Kali.
14:36:18 <Riastradh> Barbarian ignoramus!
14:36:47 <Riastradh> http://www.neci.nec.com/PLS/Kali.html
14:38:08 <esap> Hmm.. I haven't kept up with Scheme things, world is large as it is even if you constraint yourself to well-typed things :-)
14:38:24 <Riastradh> Scheme48 does static type analysis, you know.
14:41:14 <esap> hmm.. the paper referenced on the Kali page describes Kali as "Kali is a fearsome goddess of the Hindu pantheon with one thousand arms, each equipped with a distinct weapon; we chose the name because of its relevance to distributed programming" :-) Sounds like bloat :-)
14:41:29 * shapr snickers
14:42:11 <Riastradh> Nah.  That's a reference to how flexible Scheme is; each of the thousand arms is composed of the simplicity and flexibility of Scheme.
14:42:23 <Maddas> haha
14:43:09 <esap> but why do you need thousand things, you can express everything with about six different things.
14:44:09 * esap points to adjunction as one of them.
14:44:10 <Riastradh> esap, the point is that those thousand things are what have been expressed by the simplicity and flexibility of Scheme.
14:44:21 <esap> oh applications?
14:44:28 <Riastradh> ?
14:45:04 <esap> I was thinking of "arms" refers to "tools".
14:45:20 <esap> s/arms/weapons/
14:45:59 <Riastradh> Well, then you're thinking wrongly.
14:48:30 * esap does that a lot.
14:48:47 <Riastradh> See what happens to your brain when you absorb yourself in Haskell?
15:08:59 <phubuh> Igloo: ah, the issue seems to be fixed in CVS
15:09:59 <SyntaxLaptop> shapr: how has darcs integration for gforge been going?
15:10:04 <phubuh> yay, now everything compiles with GHC 6.2
15:10:06 * phubuh cheers
15:10:44 <Igloo> gtk2hs CVS you mean?
15:10:52 <phubuh> oh, yup
15:11:07 <Igloo> Cool
15:11:15 <phubuh> it still uses foreignPtrToPtr instead of unsafeForeignPtrToPtr in one single place, though
15:11:17 * phubuh e-mails
15:11:20 <shapr> SyntaxLaptop: current plan is to hack the editsshkeys.php page into editdarcskeys.php, and change it from per-account to per-group
15:11:37 <shapr> that part shouldn't be too difficult
15:11:37 <SyntaxLaptop> ok
15:12:10 <Igloo> Does gforge make it easy to say "Anyone can hack on this without a project owner (or whatever) adding them"?
15:12:10 <shapr> darcs initialization needs to create a new per-project email address, and that requires LDAP
15:12:40 <shapr> no, but it lets people start their own projects
15:13:06 <shapr> I think wiki is the closest to hack without prior agreement
15:14:14 <shapr> Igloo: actually, if darcs-test were disabled, and gpg checking turned off, you'd have the same sort of thing
15:14:16 <shapr> that's a neat idea
15:14:28 <shapr> that would be a real cvs wiki
15:16:56 <shapr> that's a really spiffy idea
15:17:08 <phubuh> hey SyntaxLaptop, want a gtk2hs deb?  I'd have to learn how to make it first, but that can't be so difficult
15:18:02 <Marvin--> Famous Last Words
15:18:19 <shapr> I gotta try this...
15:18:24 <phubuh> hee hee
15:18:37 * Igloo would probably through kb up if you could do that
15:19:10 <shapr> Igloo: I can create an anonymous darcs repo on ScannedInAvian.org, is that a good start?
15:19:54 <Igloo> Ach, gotta go
15:20:07 <shapr> ok, I'll send info later
15:20:09 <SyntaxLaptop> phubuh: yeah sure.
15:20:36 <SyntaxLaptop> phubuh: if you make one, I'll check it over, try it on HE, and eventually upload it.
15:22:36 * isomer is away: nap
15:24:01 <SyntaxLaptop> i'm going to get some food.
15:24:08 <SyntaxLaptop> phubuh: let me know about gtk2hs
15:24:08 <SyntaxLaptop> peace
15:41:06 <shapr> g'day Pseudonym 
15:42:21 <shapr> Igloo just had a neat idea, darcs without gpg checks makes a great cvs-wiki
15:44:33 <Pseudonym> G'day.
15:51:53 * shapr tries the darcs repo permissions fix
15:53:16 <shapr> spiffyness!
15:53:18 <shapr> it works
15:56:33 <shapr> ok, wikiwiki darcs repository is up
15:57:11 <shapr> darcs get http://www.ScannedInAvian.org/repos/wikiwiki
15:57:27 <shapr> gpg checking is off, as is test execution
16:02:15 <shapr> Pseudonym: what's going on? any more rigging?
16:02:36 <Pseudonym> A little over the weekend.
16:02:40 <Pseudonym> Mostly I'm w*rking.
16:02:47 <Pseudonym> Finally got sorting happening after many months.
16:02:53 <Pseudonym> You'd never know that sorting was hard.
16:03:38 <shapr> oh, on a completely unrelated(?) note, the cryptolib mentioned in the topic has nice looking ASN.1 support
16:04:11 <shapr> at first glance it seems Z39.50 support wouldn't be too hard to hack together (assuming you have the ASN.1 specs)
16:04:56 <Pseudonym> Cool.
16:05:16 <Pseudonym> We don't have a really good Z39.50 implementation in the open source world.
16:05:21 <Pseudonym> There's Zebra, but it's kinda limited.
16:05:25 * Darius was right. Sylpheed had (grown?) some memleaks.  Hopefully they're fixed now.
16:05:28 <Pseudonym> Its indexing is all via ISAM.
16:05:53 <shapr> do you know if the Z39.50 specs are free?
16:06:06 <shapr> or are they one of those $500 per page specs?
16:06:44 * shapr googles for ISAM
16:06:55 <Pseudonym> They're free.
16:07:32 <Pseudonym> They're an ANSI/ISO standard, but they're maintained by the Library of Congress.
16:07:35 <Pseudonym> http://www.loc.gov/z3950/agency/
16:07:36 <shapr> just how scary is Z39.50?
16:07:41 <Pseudonym> Very scary. :-)
16:07:46 * shapr grins
16:07:47 <Pseudonym> The problem isn't that it's complicated.
16:07:54 <Pseudonym> The problem is that it's vague.
16:08:00 <Darius> yay! Brutally installing by overwriting without a backup seemed to work.
16:08:36 <Darius> Sylpheed looks different with every release.
16:08:39 <Pseudonym> There's a lot that's left unspecified, and any implementation is allowed to do anything reasonable.
16:08:57 <Pseudonym> Let me find an example from the spec.
16:10:10 <shapr> wow, Z39.50 looks like *big* business
16:10:26 <Pseudonym> Here's the section on authentication:
16:10:29 <Pseudonym> "The origin and target agree, outside the scope of the standard, whether or not this parameter is to be supplied by the origin, and if so, to the value."
16:10:37 <Pseudonym> Read that for a moment, then weep.
16:11:19 <Pseudonym> Oh, it is.  There's actually a law which says that every US government agency and department needs to deliver certain stuff via Z39.50.
16:11:21 <Pseudonym> Most don't.
16:11:27 <shapr> TietoEnator, Euro Space Agency, Smithsonian, Library of Congress, EBSCO, UCLA, Canadian and British Library Systems, Lucent, Oxford, 
16:11:41 <Pseudonym> It's also the standard used by libraries to share catalogue information.
16:11:51 <Pseudonym> Do you remember WAIS?
16:11:56 <Pseudonym> WAIS == Z39.50 version 1
16:12:06 <shapr> huh, I didn't know that
16:12:52 <Pseudonym> One of the problems with its adoption is that Z39.50 is a retrieve-only protocol.
16:13:05 <Pseudonym> It doesn't cover inserting, deleting or modifying records.
16:13:18 <shapr> and they haven't noticed HTTP GET yet?
16:13:20 <Pseudonym> Which, if you think about it, is reasonable.  I have no reason to modify the LoC's collection, only read it.
16:13:41 <Pseudonym> HTTP GET is stateless.
16:14:05 <Pseudonym> It assumes you know what you're getting and where you're getting it from.
16:14:18 <Pseudonym> Z39.50 covers searching, sorting, ranking and presenting subsets of data.
16:14:38 <Pseudonym> Also, Z39.50 handles MARC data natively, which libraries like.
16:15:14 <Pseudonym> I believe there's an XML binding for MARC now, though, which might make HTTP-like protocols more useful.
16:15:24 <Pseudonym> Tool reuse == good.
16:15:45 <shapr> you think a Haskell implementation would be worth the effort?
16:15:56 <Pseudonym> Not unless you need it.
16:16:02 <shapr> ok
16:16:07 <Pseudonym> It might be fun to have a lambdabot plugin which searches the library of congress.
16:16:12 * shapr grins
16:16:20 <shapr> I'd rather have xml-rpc and SOAP first, so we can search google
16:16:28 <Pseudonym> I bet no other IRC bot xodoes that.
16:16:39 <shapr> I bet you're right.
16:22:06 <Darius> A HTML scraping implementation of @google shouldn't be too hard.  It seems google precedes each real link with <!--m-->
16:24:15 <GreyLensman> I thought google had a pure XML based services, results come back in xml from, saves scraping.
16:28:46 <phubuh> GreyLensman: yeah, they do
16:28:51 <phubuh> <shapr> I'd rather have xml-rpc and SOAP first, so we can search google
16:28:51 <phubuh> <Pseudonym> I bet no other IRC bot xodoes that.
16:28:51 <phubuh> <shapr> I bet you're right.
16:28:51 <phubuh> --> GreyLensman (~ray@68-235-77-29.atlsfl.adelphia.net) gick in i #haskell
16:29:38 <shapr> ok, today's social experiment is the non-gpg checked non-test script executed darcs repository, designed to be a true source-wiki
16:30:16 <shapr> could be interesting
16:36:41 <Darius> running the regex /<!--m--><a href=([^>])>/ over a google page should spit out the links.
16:37:46 <Pseudonym> It's brittle, though.
16:37:55 <Pseudonym> Their HTML format is unsupported.
16:38:07 <Pseudonym> And it doesn't separate the paid advertising from the "real" links.
16:38:31 <Pseudonym> (Unless the <!--m--> does that?)
16:39:48 <Darius> It doesn't look like the <!--m--> is before anything but the real links.  For "haskell" there's a sponsored Amazon link which doesn't have a <!--m--> in front of it.
16:40:05 <Pseudonym> OK
16:41:01 <Darius> They also seem to use <!--a--> to start the "real" content and <!--z--> to end.
16:42:31 * Darius isn't really sure what <!--n--> is for.
16:42:35 <shapr> anyone has darcs handy who can test the wikiwiki darcs repo?
16:43:07 <Darius> Ah I think it separates each whole "entry".
16:46:56 <ham[kell]> isnt there some exp :: Float -> Float -> float?
16:47:18 <Darius> @type (**)
16:47:19 <lambdabot> (**) :: Floating a => a -> a -> a
16:47:23 <Darius> @type exp
16:47:24 <lambdabot> exp :: Floating a => a -> a
16:47:40 <ham[kell]> oh
16:47:49 <ham[kell]> heh i used ^
16:54:48 * shapr boings
16:55:53 <ham[kell]> hm
16:56:25 <ham[kell]> exp (3.74 :: Float) (-x) doenst work?
16:56:40 <Darius> Look at the type of exp
16:57:32 <ham[kell]> floating?
16:57:39 <Darius> No, it's unary.
16:57:47 <ham[kell]> ah oh man
16:58:15 <ham[kell]> stupid brain be more fast
17:01:14 <shapr> hey SyntaxLaptop, did you know HE is mentioned on the darcs webpage?
17:03:30 <SyntaxLaptop> hm.
17:03:30 <SyntaxLaptop> why?
17:03:48 <shapr> If you are running woody, and want to compile darcs yourself, you may want to add the following line as well, which provides a ghc compiler that is sufficiently recent to compile darcs:
17:05:07 <SyntaxLaptop> ahh
17:05:18 <SyntaxLaptop> I asked him about moving his stuff to HE, but he wasn't interested.
17:06:28 <shapr> hey, Igloo had the idea to create a completely unrestricted repository to allow a real source-wiki
17:06:57 <shapr> so I created a darcs repository that doesn't do GPG checking, but also doesn't run the repository test script
17:11:29 <SyntaxLaptop> hm. OK, so I'm thinking of ITPing darcs
17:11:47 <shapr> yay!
17:12:12 <SyntaxLaptop> since upstream seems to love Debian enough, it'll probably be a simple matter
17:12:42 <phubuh> ITP?
17:13:02 <SyntaxLaptop> Intent To Package
17:13:11 <phubuh> ah
17:29:31 <SyntaxLaptop> is david r. on IRC anywhere?
17:29:50 <shapr> I don't know
17:29:58 * shapr looks around
17:30:07 <Pseudonym> Who's David R.?
17:30:12 <shapr> he's not on #darcs
17:30:17 <SyntaxLaptop> does anyone know what all needs done to the package?
17:30:20 <Pseudonym> Ah, him.
17:30:20 <SyntaxLaptop> is there a #darcs?
17:30:24 <shapr> there is now
17:32:41 <shapr> hi alindeman 
17:32:48 <shapr> learning Haskell?
17:32:48 <alindeman> Evening :)
17:32:59 <alindeman> Checking out what it is
17:33:06 <shapr> @learn
17:33:07 <lambdabot> http://www.haskell.org/learning.html
17:33:16 <shapr> in short, Haskell is a purely function programming language
17:33:18 <alindeman> I can read the topic, thanks
17:33:21 <shapr> oh, sorry
17:33:48 <ham[kell]> hm
17:33:49 <Pseudonym> We like redundancy.  Unfortunately, this isn't machine-checked.
17:33:56 <ham[kell]> heh
17:33:58 <Riastradh> #scheme's topic is cooler.
17:34:07 <shapr> well, if you have any questions about Haskell, feel free to ask me.
17:34:19 <alindeman> HAHA
17:34:28 <alindeman> That's funny =)
17:34:48 <shapr> ?
17:34:48 <SyntaxLaptop> shapr: I think you should be the official newbie advocate for Haskell :)
17:34:57 <shapr> right on!
17:35:01 <alindeman> shapr: #scheme's topic
17:35:03 <alindeman> /list #scheme
17:35:05 <ham[kell]> am nearly finished hopefully you can have a look at my cool morph algorithm tomorrow
17:35:19 * shapr grins
17:35:26 <shapr> truly, that is a spiffy topic.
17:35:31 <ham[kell]> that is something visual
17:35:39 <Riastradh> I don't even remember whose initial idea it was to have a topic like that.  It has stuck for over a year.
17:35:44 <phubuh> the equivalent Haskell code would be shorter
17:35:47 <phubuh> therefore Haskell is better
17:35:49 <phubuh> Q.E.D.
17:35:58 <ham[kell]> i can morph between meshes then with different number of vertices
17:36:06 <shapr> gee, I think we should change the #haskell topic to be equally spiffy
17:36:13 <phubuh> whoops, I forgot about the commas
17:36:17 <phubuh> darn sneaky Lispers
17:36:19 <Riastradh> phubuh, wrong.  The Haskell code may not have the single-quote, the parentheses, or the hyphen in SURF-TO, but you've got commas.
17:36:24 <Riastradh> Zigackly.
17:36:41 <Pseudonym> ham[kell]: Sorry, I must have missed out on something.  What are you working on?
17:36:53 <Riastradh> #haskell's topic doesn't have links to the Abelson & Sussman SICP lecture videos, either, and only in #scheme are they relevant!
17:36:58 <shapr> ham[kell]: cool, I wanna see it.
17:37:01 <ham[kell]> i work on a small morph algo
17:37:05 <Igloo> Commas needn't take up more space than a space
17:37:18 <ham[kell]> that can morph meshes with non equal vertex numbers
17:37:18 <Pseudonym> 2D images?
17:37:21 <ham[kell]> 3d
17:37:22 <Pseudonym> Ah, OK.
17:37:30 <Pseudonym> Some kind of widged-edge model?
17:37:33 <Riastradh> You also don't have nifty foo.webhop.org hostnames to put all your long URLs into.
17:37:34 <ham[kell]> even nd if you want
17:37:41 <shapr> that gives a whole new meaning to "this --> <-- space for rent"
17:37:42 <phubuh> Igloo: oh, I didn't even consider that
17:37:48 <ham[kell]> the idea is that i have a unit shpere
17:37:59 <ham[kell]> that has a parametric form
17:38:02 <Pseudonym> Yes.
17:38:05 <phubuh> Riastradh: those videos are fun
17:38:14 <ham[kell]> sphere a l -> point
17:38:28 <ham[kell]> then i have a morph from that ball to the actual model
17:38:38 <phubuh> some of the people in the audience look weird though
17:38:40 <ham[kell]> then i have a parameterized model
17:38:57 <ham[kell]> then i can morph between the models
17:39:03 <Pseudonym> How do you parameterise the model?
17:39:07 <shapr> Riastradh: that's true, we need a shorter redirect hostname
17:39:08 <Pseudonym> Point repulsion?
17:39:24 <ham[kell]> i have a sphere that has the same number of vertices as the mesh
17:39:29 <Pseudonym> Ah, OK.
17:39:42 <Pseudonym> So you can't do arbitrary topology tyet?
17:39:56 <ham[kell]> and the shere consists of n horizontal orbits
17:40:05 <ham[kell]> kind of yes
17:40:13 <Pseudonym> How do you deal with holes?
17:40:16 <ham[kell]> you just have to map the orbts in the mesh
17:40:26 <Pseudonym> Hmmm.
17:40:26 <ham[kell]> thats not the same topology
17:40:34 <ham[kell]> then i would need a torus
17:40:38 <Pseudonym> Right.
17:40:47 <ham[kell]> but thats also possible
17:40:52 <Pseudonym> Yes.
17:40:55 <Pseudonym> SOunds very cool.
17:41:01 <Pseudonym> This is in Haskell?
17:41:03 <ham[kell]> i would just need to write some new spline object
17:41:06 <ham[kell]> yes
17:41:11 <Pseudonym> Very cool indeed.
17:41:21 <ham[kell]> i have alread a homotope spline implementation
17:41:24 <Pseudonym> Are you using some kind of winged-edge representation?
17:41:30 <ham[kell]> nope
17:41:41 <Pseudonym> I ask because I'm looking for one. :-)
17:41:49 <ham[kell]> i use just simple splines to do all that
17:41:50 <Pseudonym> I have an implementation of Loop triangular meshes which I wrote.
17:42:01 <Riastradh> Also, shapr, your topic can't be cool like #scheme's, because you've got things that aren't URLs.
17:42:05 <Pseudonym> But it's not general enough as it turns out.
17:42:13 <ham[kell]> is there any decent haskell lib for meshes?
17:42:17 <Pseudonym> No.
17:42:36 <ham[kell]> i would like to start an engine project in haskell somde
17:42:37 <ham[kell]> day
17:42:47 <shapr> I like the spiffy animated spline
17:43:02 <ham[kell]> yep its funny
17:43:05 <Pseudonym> I have a useful paper on lath-based mesh representations if you want it.
17:43:20 <ham[kell]> but i should render also the two splines that set up the homotopy
17:43:29 <ham[kell]> lath?
17:44:35 <ham[kell]> the cool thing is that if that really is ok with the parameterization i can do some really weird stuff on the meshes
17:44:39 <Pseudonym> It covers the design space of edge-based representations.
17:44:52 <Pseudonym> A "lath" is the generalisation of a winged-edge.
17:45:09 <ham[kell]> ah ok nah im not interested in anything that is super fast 
17:45:28 <ham[kell]> i want to show that FP is something really cool for graphics programming
17:45:32 <Pseudonym> Well the point is not that it's fast, but that it's flexible.
17:46:00 <ham[kell]> i think you can do a lot with topology
17:46:12 <ham[kell]> that is you could do lodding with topology
17:46:32 <ham[kell]> also you can integrate the winged edge stuff there
17:46:54 <ham[kell]> with neigbour hoods of some size
17:47:04 <ham[kell]> also NPR will be fun in FP
17:47:16 <shapr> what's NPR?
17:47:26 <ham[kell]> non photorealistic rendering
17:47:36 <ham[kell]> comic shaders etc
17:47:45 <shapr> oh, neat
17:47:54 <ham[kell]> i hope that there is someway to access the shader in hogl
17:48:15 <Pseudonym> I have a half-written RenderMan binding for Haskell.
17:48:23 <ham[kell]> cool
17:48:52 <ham[kell]> are you still working on it?
17:48:58 <Pseudonym> Every now and then.
17:49:03 <ham[kell]> fine
17:49:04 <Pseudonym> Adding things as I need them.
17:49:11 * Pseudonym should probably check it into haskell-libs
17:49:26 <ham[kell]> maybe i will release a demo written with haskell if that morph thing is cool enough :)
17:49:41 <shapr> yah, check it in!
17:49:43 <Pseudonym> Anyway, if you're interested in mesh representations, I can send you this paper.
17:49:49 <ham[kell]> sure a render man binding would be cool
17:50:17 <ham[kell]> ok marvintdr@gmx.net
17:50:21 <Pseudonym> I used to work for a certain company who wrote certain visual effects-related code.
17:50:33 <ham[kell]> what company?
17:50:34 * Pseudonym now hacks Aqsis in some of his spare time
17:50:34 <shapr> oh I gotta ask Heffalump what he's doing with that cvs-darcs sync script
17:50:42 <ham[kell]> i worked for www.codecult.com
17:50:57 <Pseudonym> Sorry.  Dot C.
17:51:03 <Pseudonym> www.dotcsw.com
17:51:57 <ham[kell]> cool
17:52:06 <Pseudonym> Oh, nice.
17:52:12 * Pseudonym hasn't done much real-time stuff
17:52:25 <Pseudonym> Almost none, in fact.
17:52:28 <ham[kell]> we did one of the nv gf 4ti demos
17:53:00 <ham[kell]> ry to google for games nvida codecult there are some more shots of the demo
17:53:29 <ham[kell]> but i thought that it was cool to get into that real shader stuff
17:53:46 <Pseudonym> OK, sent you the paper.
17:53:47 <ham[kell]> when i saw lotr i saw that they had only 5 ppl on staff for that
17:54:09 <Pseudonym> Little known fact: I almost got Dot C to accept a RenderMan shader compiler written in Haskell.
17:54:16 <Pseudonym> I left before it got finished, though.
17:54:21 <shapr> aw
17:54:26 * Pseudonym still owns the IP
17:54:33 <ham[kell]> where do you work now if i may ask?
17:54:40 <ham[kell]> what ip?
17:54:42 <Pseudonym> ham[kell]: http://www.inquirion.com/
17:54:45 <Pseudonym> The IP to the compiler.
17:55:03 <Pseudonym> I can't release it until I remove all the RDC-specific stuff, though, because it's commercian in confidence.
17:55:15 <Pseudonym> And I haven't been bothered to do that.
17:56:53 <ham[kell]> wargh
17:57:01 <ham[kell]> database systems?
17:57:05 <Pseudonym> Yup.
17:57:11 <Pseudonym> Text databases, to be precise.
17:57:39 <ham[kell]> thats something that i really disliked when i had to learn it
17:57:50 <Pseudonym> It's a lucrative business.  Not many people have terabytes of text to manage, but when they do, they have a lot of money to spend.
17:58:04 <ham[kell]> yep
17:58:22 <Pseudonym> Besides, we do scale down to mere gigabytes.
17:58:54 <shapr> so, how much does it cost? does it have a Haskell binding? :-)
17:59:04 <ham[kell]> :)
17:59:09 <Pseudonym> A$30,000 per CPU
17:59:13 <Pseudonym> And no, but it speaks Z39.50.
17:59:15 * shapr gicks
17:59:34 <Pseudonym> We can do you a deal if you need a few licences.
17:59:41 <shapr> even if the A$ is smaller than the kronor, I doubt I can afford even one.
17:59:58 <Pseudonym> One AUD is about .8 USD at the moment.
18:00:12 <Pseudonym> @eval 30000*.8
18:00:12 <lambdabot> (line 1, column 7):
18:00:12 <lambdabot> unexpected "."
18:00:12 <lambdabot> expecting simple term
18:00:17 <Pseudonym> @eval 30000*0.8
18:00:17 <lambdabot> type error
18:00:21 <Pseudonym> @eval 30000.0*0.8
18:00:22 <lambdabot> type error
18:00:22 <Pseudonym> Fine.
18:00:25 <shapr> probably need spaces
18:00:29 <Pseudonym> @eval 30000.0 * 0.8
18:00:29 <lambdabot> type error
18:00:45 <shapr> @eval 1 * 1
18:00:45 <lambdabot> 1
18:00:48 <shapr> @eval 1 * 1.0
18:00:49 <lambdabot> type error
18:00:51 <shapr> ah
18:00:52 <Pseudonym> @eval 30000 * 8 / 10
18:00:52 <lambdabot> 24000
18:00:55 <Pseudonym> OK.
18:01:04 <Pseudonym> Still a lot.
18:01:17 <shapr> let's translate into kronor...
18:01:31 <shapr> @eval (30000 * 8 / 10) * 9
18:01:31 <lambdabot> 216000
18:02:38 <ham[kell]> http://codemages.sf.net/thesis.tex if anyone is interested in the first outline of my thesis
18:02:53 <ham[kell]> ideas and comments are welcome
18:03:12 <Pseudonym> Cool, I'd be very interested in that.
18:04:33 <ham[kell]> i think the most tedious thing will be designing all these diagrams for the paper
18:04:41 * Pseudonym laughs
18:04:43 <Pseudonym> Oh, yes.
18:04:53 <Pseudonym> Can I interest you in a RenderMan binding? :-)
18:04:55 <ham[kell]> and i will need a lot of them
18:05:07 <ham[kell]> :)
18:05:30 <Pseudonym> Actually, outputting PostScript or xfig or something might do the trick.
18:06:09 <ham[kell]> i want to have the cool math look and feel of the springer papers and books
18:06:19 <ham[kell]> i already got their style file
18:06:26 <Pseudonym> That is a good look.
18:06:41 <Pseudonym> Metapost might do the trick, too.
18:07:23 <ham[kell]> i still have about 2 semesters time :) so i bother more about the text content
18:07:31 <Pseudonym> Fairy nuff.
18:08:04 <ham[kell]> my prof told me that i shouldnt do too much :)
18:08:14 <Pseudonym> That's always the danger.
18:08:22 <ham[kell]> there were some students that complain about ppl like me
18:08:26 <ham[kell]> yes i know
18:08:27 <Pseudonym> You're told that you have to make a contribution to science.
18:08:32 <ham[kell]> i had some burnouts
18:08:40 <Pseudonym> But there's the danger of biting off too much.
18:09:07 <Riastradh> There's the danger that science could be destabilized by the magnitude of your contribution and we could all be flung off of the surface of earth.
18:09:23 <Pseudonym> That's also true.
18:09:36 <ham[kell]> well he told me that some students said that ppl like me make it impossible to get good marks in 3 months of time
18:09:44 <Pseudonym> For all our sakes, don't morph the Earth into the Newell teapot.
18:09:53 <ham[kell]> :)
18:10:09 <ham[kell]> dont you live in a teapot :)?
18:10:45 <Pseudonym> Of course not.  I live in a shoe like normal people.
18:10:57 <ham[kell]> heh
18:11:08 <ham[kell]> that reminds me of a book that i had as a child
18:11:19 <ham[kell]> only i cant remember its name
18:11:30 <Pseudonym> So I guess it can't remind you that much.
18:11:38 <ham[kell]> :)
18:11:58 <ham[kell]> i just know that it was about a guy living in a shoe :)
18:12:05 <ham[kell]> maybe you ;)?
18:12:28 <Pseudonym> I'm not that old.
18:13:07 <ham[kell]> ?
18:13:18 <ham[kell]> you think i am older then you?:)
18:13:23 <Pseudonym> Well if you had the book as a child...
18:13:46 <ham[kell]> hm :)
18:13:47 <Pseudonym> It would be before we moved into the shoe.
18:13:57 <ham[kell]> heh :)
18:14:10 <Pseudonym> My parents could only afford a sandal.
18:14:28 * shapr laughs
18:14:30 <ham[kell]> :))
18:14:36 <Pseudonym> This is so much more fun than working, you know that?
18:15:02 <ham[kell]> :)
18:15:58 * Darius remembers those snooty people living in the high-heels.
18:16:12 <ham[kell]> :)
18:16:37 * shapr snickers
18:17:39 <Pseudonym> Yeah.  We used to throw stones at their aglets.
18:21:05 <Darius> So many people have no idea what aglets are called.
18:21:17 <Pseudonym> Darius: They're called "aglets".
18:21:22 <Pseudonym> Hope this helps!
18:21:33 <shapr> @all-dicts aglets
18:21:36 <lambdabot> No match for "aglets".
18:21:39 <Pseudonym> @wn aglet
18:21:40 <lambdabot> *** "aglet" wn "WordNet (r) 2.0"
18:21:40 <lambdabot> aglet
18:21:40 <lambdabot>      n 1: metal or plastic sheath over the end of a shoelace or ribbon
18:21:40 <lambdabot>           [syn: {aiglet}]
18:21:41 <lambdabot>      2: ornamental tagged cord or braid on the shoulder of a uniform
18:21:43 <lambdabot>         [syn: {aiglet}, {aiguilette}]
18:21:46 <shapr> huh, nifty
18:21:57 <Pseudonym> Useful word.
18:21:59 <shapr> new word!
18:22:11 <shapr> all of my new words in the last year have been swedish.
18:22:15 <Pseudonym> :-)
18:22:17 <shapr> except for this one
18:22:24 <Pseudonym> What's Swedish for "aglet"?
18:22:30 * shapr looks
18:22:56 <shapr> unsurprisingly, my dictionary doesn't know
18:23:23 * Darius used to have a really crappy dictionary; then he burned it.
18:23:29 <ham[kell]> in german its schnalle
18:23:38 <shapr> oh, I'll use that on bea tomorrow
18:23:42 * Darius has a really great fairly old dictionary though.
18:23:48 <ham[kell]> which is also a word for woman :)
18:23:59 <shapr> I have lambdabot, but he doesn't speak swedish.
18:24:08 <shapr> @sluta
18:24:08 <lambdabot> Sorry, I don't know the command "sluta", try "lambdabot: @listcommands"
18:24:11 <shapr> see?
18:24:25 <Pseudonym> You should teach lambdabot Swedish.
18:24:28 <Darius> Internationalize lambdabot.
18:24:38 <shapr> that's a nifty idea
18:25:26 <Pseudonym> Is Sweden the largest representation in non-Anglophone Haskell programming?
18:25:33 * Pseudonym would be willing to bet it is
18:25:51 <Pseudonym> There's some stuff going on in German-speaking countries.
18:26:02 <shapr> yah, but sweden has Gothenburg
18:26:06 <Pseudonym> Right.
18:26:22 <ham[kell]> whats in gothen burg?
18:26:24 <shapr> even my out-in-the-boonies uni next city over does Haskell.
18:27:01 * shapr recently graffiti'd Arrows info on a classroom board that had boring old monad code
18:27:35 <shapr> bet they're still wondering where that came from
18:27:42 <shapr> ham[kell]: chalmers, and gu
18:27:55 <shapr> http://www.cs.chalmers.se/Cs/
18:29:05 <shapr> chalmers has John Hughes, Koen Claessan, Lennart Augustsson (still?), and several people from #haskell are students there
18:29:29 <ham[kell]> dont know even one of the,
18:29:31 <ham[kell]> them
18:29:46 <ham[kell]> but then i dont know much ppl anyway
18:51:30 <_|_> @arr
18:51:31 <lambdabot> Smartly me lass
18:51:57 <ham[kell]> hi
18:52:06 * shapr yawns
18:52:07 <ham[kell]> mr not T :)
18:52:16 <_|_> hi
18:52:22 <shapr> as 4am approaches me, I approarch my bed
18:52:28 <Pseudonym> Night.
18:52:32 <Pseudonym> While it's still night.
18:52:33 <shapr> nytol
18:52:35 <ham[kell]> gn8
18:53:08 * Pseudonym thinks . o O ( gnate? )
18:53:21 <ham[kell]> good nite
18:53:25 * Pseudonym thinks . o O ( Lesser known GNU tool? )
18:53:49 <ham[kell]> the m8t n8 :)
18:55:10 <ham[kell]> _|_: http://codemages.sf.net/thesis.tex
18:55:29 <Darius> Well, I guess with German pronunciation eight would be right.
18:55:36 <ham[kell]> _|_: i would like to hear what you think of that first outline of my thesis
18:55:58 <_|_> ham[kell]: k
18:56:03 <ham[kell]> thanks
18:56:53 <ham[kell]> its just a collection of topics so far
18:57:50 <_|_> Understand, I'm not an academic.
18:58:46 <_|_> Smartaleck, perhaps  :-)
18:58:53 <ham[kell]> oh but you seem quite knowledgable
19:00:31 <_|_> Flattery will get you everywhere.  :-)
19:00:42 <ham[kell]> flattery?
19:02:00 <ham[kell]> ah
19:02:03 <ham[kell]> heh
19:02:14 * Darius will try to flatter that bouncer at the club next time...
19:02:34 <_|_> Good luck, Darius.
19:04:56 <ham[kell]> tell him the shoe story
19:07:40 <_|_> ham[kell]: Well I read it, but I'm afraid it was mostly over my head.
19:08:09 <ham[kell]> hm does it at least sound intersting in any respect?
19:08:11 <Pseudonym> If shoes are over your head, something is terribly wrong.
19:08:25 <ham[kell]> :)
19:08:30 <Pseudonym> You could be upside-down.
19:08:37 <Pseudonym> Is your nose running?
19:08:47 <ham[kell]> mine?
19:08:49 <_|_> Pseudonym: if so, I'd better catch it.
19:08:57 <Pseudonym> Are your feet smelling?
19:09:09 <_|_> Pseudonym: constantly
19:09:12 <ham[kell]> :)
19:09:20 <Pseudonym> These are good indicators that you are, indeed, upside-down.
19:10:37 <ham[kell]> i think it sounds a lot more complicated then it is
19:11:45 <_|_> ham[kell]: the part about direct sums & equivalence classes flew right past me.
19:11:58 <Darius> It'd better.  How are you going to impress any body if you say 1 + 1 = 2 instead of the colimit of the discrete diagram containing two objects in Set.
19:12:08 <Darius> (responding to ham[kell])
19:12:08 <_|_> ham[kell]: Can you give me the basic idea, in layman's terms?
19:12:28 <ham[kell]> layman?
19:12:43 <_|_> Darius: no doubt :-D
19:12:47 <Pseudonym> There's a classic paper from a SIGGRAPH conference in... oh, about '86 or so.
19:12:58 <_|_> ham[kell]: sorry, I mean simple terms anyone could understand
19:13:03 <Pseudonym> The great new company, Pixar, had about six papers in that conference.
19:13:17 <Pseudonym> So they put in a joke paper just to be sure.
19:13:26 <ham[kell]> the idea is that you can combine channels
19:13:42 <Pseudonym> In the literature review, they discovered that papers are more likely to be published at SIGGRAPH if they contain complicated differential equatsions.  So here are some.
19:14:01 <ham[kell]> heh
19:14:11 <Pseudonym> In the FP literature, it would be sequent calculus.
19:14:21 <Pseudonym> I'm convinced that nobody actually understands sequent calculus.
19:14:35 <Riastradh> What's sequent calculus?
19:14:37 <Pseudonym> It's just put there because you can't get a paper accepted without it.
19:14:41 <ham[kell]> i will try to do some examples along the text
19:14:51 <_|_> ham[kell]: you mean like IRC channels?  ;-)
19:14:59 <ham[kell]> yes
19:15:05 <Darius> Pseudonym: If no one understands it, how does someone decide when that statement is false.
19:15:09 <ham[kell]> i even use irc
19:15:09 <Pseudonym> Riastradh: http://en.wikipedia.org/wiki/Sequent_calculus
19:15:37 <_|_> ham[kell]: why combine them?
19:16:12 <ham[kell]> programs have to have one input and one output
19:16:18 <ham[kell]> and if there is a branching
19:16:55 <ham[kell]> that is if there are two processes in paralell i have to show that its possible to do that formally
19:17:15 <ham[kell]> one example will be a neural network
19:17:34 <ham[kell]> where you have splittings and joins 
19:17:46 <ham[kell]> that is there are serecal arrows from one node
19:18:00 <ham[kell]> and several arrows toward a node
19:19:45 <_|_> ham[kell]: Sorry, I still don't think I understand.
19:20:11 <ham[kell]> so if you have two funtions out of one channel to two different ones you take the product of the two channels which is like the product in CT
19:20:23 <ham[kell]> i am also a bad explainer
19:20:49 <_|_> ham[kell]: that's ok.  What is CT?
19:20:57 <ham[kell]> category theory
19:23:01 <ham[kell]> in the end you can collapse a neural net to a single frunction that way
19:24:48 <_|_> ham[kell]: It sounds like you're talking about multiplexing.
19:25:07 <ham[kell]> where does that term comefrom?
19:25:21 <ham[kell]> sounds like network stuff
19:25:39 <_|_> ham[kell]: From communications.  It means transmitting multiple streams over a single medium.
19:25:50 <ham[kell]> ah right
19:26:58 <ham[kell]> it has so many connections
19:27:04 <ham[kell]> but thats whay i like
19:27:12 <ham[kell]> also petri nets
19:36:10 <_|_> ham[kell]: I wish you luck on your thesis.
19:36:23 <ham[kell]> thanks
19:36:27 <_|_> I'm heading to bed.
19:36:31 <ham[kell]> bye
19:36:40 <_|_> Goodnight.
19:41:05 <Igloo> Why should   Is x <- foo   give me "user error (Pattern match failure in do expression" when something like   do Is x <- Error []; return x doesn't?
19:42:03 <ayrnieu> what type does foo have?
19:43:12 <Igloo> StateT Something IO (CouldBe somethingorother)
19:43:42 <Igloo> I haven't tried that precise thing at the end of the line, but that sort of thing generally seems to work as I thought it should
19:44:32 <Igloo> (oh, but with "return $ " in front of Error)
19:45:57 <Igloo> I can't seem to replicate my problem with a small example though  :-(
19:47:41 <Darius> do Is x <- return (Error []) doesn't give you a pattern match failure.
19:47:43 <Darius> ?
19:49:20 * Darius ais away.
19:51:57 <Igloo> Ah, after wrapping it up that does. Odd.
19:52:02 * Igloo goes to see what the difference is
19:57:28 <ham[kell]> see you laters
19:57:36 <Igloo> Doh, I was using the wrong test function
19:57:51 <Pseudonym> Farewell.
19:59:46 * Igloo decides sleep is required
19:59:55 <SyntaxLaptop> Igloo: bah
20:00:02 <Igloo> Hmm?
20:00:13 <SyntaxLaptop> sleep? it's only 11:PM
20:00:32 <Igloo> Yes dear
20:00:35 <Igloo> Good night  :-)
20:01:36 <SyntaxLaptop> 'night
20:10:58 <Pseudonym> Night,.
20:30:55 <SyntaxLaptop> shapr: any insight as to the difference between a "task" and a "feature request" in gforge?  
20:31:03 <SyntaxLaptop> it seems like there's no _hard_ distinction...
