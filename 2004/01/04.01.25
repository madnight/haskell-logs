00:30:00 <insperace> people use this language???
00:30:18 <Cale> yeah
00:30:20 <Cale> it's a decent language
00:30:37 <insperace> hehe....my cs345 teacher uses it
00:30:56 <Cale> have you played around with it at all?
00:31:20 <insperace> just for homework
00:31:45 <insperace> and the crappy tests
00:32:45 <Cale> I recommend having a good look at it, I find it quite fun to code in.
00:34:16 <insperace> you like working I/O with it?
00:34:26 <Cale> IO is fine.
00:35:28 <Cale> There's a really nice tutorial on IO and monads in general
00:35:58 <insperace> u use an interpreter?
00:36:20 <Cale> http://www.nomaware.com/monads/html/index.html
00:36:26 <Cale> I use ghci and ghc
00:36:39 <Cale> (ghci being the interpreter)
00:37:44 <Cale> Especially check out Appendix 1 of that site
00:37:57 <Cale> (the physical analogy)
00:39:38 <insperace> have you seen the guy who started haskell?
00:39:48 <insperace> he looks like a mad scientest
00:39:57 <Cale> SPJ?
00:40:28 <Cale> http://research.microsoft.com/Users/simonpj/
00:42:47 <Cale> yeah, I suppose he does, a bit. :)
00:50:07 <insperace> hehe
00:50:34 <insperace> i forgot his name...i was trying to track it down
00:51:47 * insperace night night
00:52:08 <Cale> gnight
01:14:30 <emu> wadler
02:18:21 <Maddas> hm, haskell has really good libraries (tons of handy functions)
02:42:56 <kaol> Is there a TCP sockets library for haskell?
02:49:37 <stratocaster> kaol: ghc comes with a Network module ("listenOn :: PortID -> IO Socket", etc)
02:58:36 <kaol> how about IO multiplexing? (like with unix select(2))
02:59:58 <phubuh> there is a select, but you can also use synchronous I/O with concurrent haskell
03:04:00 <kaol> ok, found select in haskell libraries. Looks like haskell has everything I need.
03:04:45 <phubuh> whee :-)
03:04:59 <phubuh> what are you writing, if I may ask?
03:07:48 <kaol> nothing at the moment. But next time I need to write a server for something, I know I'll use Haskell.
03:10:41 <phubuh> ok, nifty
03:38:34 * Arnia looks forward to practical dependent typed languages
03:51:34 <Maddas> hm
04:52:51 <ham[let]> hiho
05:17:48 <shapr> yow!
05:17:54 <shapr> good morning #haskell!
05:18:06 <cptchaos> good Morning
05:18:13 <shapr> hi cptchaos, how's code?
05:18:56 * cptchaos is looking in his dictionary
05:20:48 <cptchaos> took over my Brain ...
05:21:06 <cptchaos> i really should lerarn for a Physiks lecture test
05:21:16 <ham[let]> hi
05:22:10 <cptchaos> but I just can't stop thinking of spcial idea
05:24:00 <shapr> hi ham[let] 
05:52:00 <shapr> it's the weekend, where's Heffalump?
05:52:34 <shapr> has anyone else used the cvs_convert.pl script to pull from cvs into darcs?
09:45:01 <ham[let]> can you do your own mem management in haskell?
09:57:46 <Riastradh> ham[let], no.  Haskell is garbage-colected.
09:58:16 <ham[let]> and you cant rewrite the code?
09:58:39 <Riastradh> ?
09:58:54 <ham[let]> i mean if you want to write for example a game or so
09:59:16 <ham[let]> then the garbage collector is nor really what you want
09:59:39 <Riastradh> Then Haskell is not really what you want for writing the rendering engine.
09:59:47 <phubuh> then haskell isn't really what you want, either.  you could write the relevant sections in, say, C, and use the FFI to hook in the code that you can write in Haskell
10:00:13 <ham[let]> true
10:18:16 * earthy modifies the statements
10:18:30 <earthy> `current haskell compilers do garbage collection at times that cannot be controlled'
10:18:43 <earthy> there is no language-requirement for stop-and-go GC in haskell.
10:19:19 <kosmikus> I think you can force GC in Haskell
11:02:07 <rey[lx]> hiho
11:02:41 <rey[lx]> is it right that hopengl is included in the ghc source?
11:02:47 <rey[lx]> or am i wrong?
11:05:15 <Maddas> I think not
11:06:44 <rey[lx]> hmm.. someone told me it would, but whatever
11:06:56 <rey[lx]> this was just to be sure
11:07:09 <rey[lx]> because i tested it with ghc-pkg -l
11:07:15 <rey[lx]> and it didnt seem to be included
11:07:47 <rey[lx]> so i downloaded the source, started with ./condigure, and it came to the result that i had to install greencard
11:07:53 <rey[lx]> and thats where i am stuck at
11:07:56 <rey[lx]> ls
11:08:04 <rey[lx]> -ls
11:08:07 <rey[lx]> doh
11:08:14 <Cale> Oh, it is
11:08:26 <Maddas> oh, sorry then
11:08:41 <Cale> ./configure --help
11:08:43 <rey[lx]> hm, so how can i find it!?
11:09:06 <Cale> let me just download the ghc source :)
11:09:32 <rey[lx]> do i have to say explicitely that i want hopengl to be compiled with the ghc source?
11:09:34 <monotonom> I am just guessing: I think you need greencard indeed.
11:09:40 <Cale> yeah you do
11:09:44 <rey[lx]> ok
11:09:51 <rey[lx]> i tried to compile greencard
11:10:14 <rey[lx]> but it keeps bothering me with some error
11:10:27 <Cale> what is that error?
11:10:49 <rey[lx]> and since i did everithing how it was told in some readmes i feel a littlebit helpless
11:10:51 <rey[lx]> mom
11:12:36 <rey[lx]> http://rafb.net/paste/results/I3158550.html
11:14:30 <Cale> hmm... looks like greencard is requesting -fno-prune-tydecls and not getting it.
11:16:56 <rey[lx]> i know, but i dont know what -fno-prune-tydecls is...
11:17:09 <Cale> well, you might have more luck with the binary bundle for greencard
11:17:15 <Cale> it's an option to the compiler
11:17:30 <Cale> I could probably edit the makefile for you and remove it
11:18:47 <Cale> hmm...
11:20:31 <Cale> yeah - go into the lib directory
11:20:44 <rey[lx]> ok
11:20:51 <Cale> open up the Makefile there in your favourite text editor
11:21:02 <Cale> change GHC_OPTS = -cpp -fglasgow-exts -fno-prune-tydecls
11:21:06 <Cale> to GHC_OPTS = -cpp -fglasgow-exts # -fno-prune-tydecls
11:21:18 <rey[lx]> k
11:21:25 <Cale> (i.e. comment out the -fno-prune-tydecls
11:21:56 <rey[lx]> yep
11:22:17 <rey[lx]> so, lets give it a try
11:22:25 <Cale> it built for me when I did that
11:22:35 <rey[lx]> did u have the same error?
11:22:38 <Cale> yeah
11:22:55 <rey[lx]> everythings fine so far
11:22:56 <rey[lx]> thx
11:26:43 <Cale> make sure that when you go to build ghc, you have a look through the configure help
11:27:08 <Cale> you'll need to turn on hopengl at configure, and you might find some other stuff that you want there
11:29:06 <rey[lx]> okeydoke
11:31:53 <rey[lx]> so, lets wait hours for ghc to compile
11:45:58 <rey[lx]> hmmm
11:45:59 <rey[lx]> GL_BasicTypes.hs:60: parse error on input ``'
11:46:00 <rey[lx]> make[1]: *** [GL_BasicTypes.o] Error 1
11:46:00 <rey[lx]> make: *** [install] Error 1
11:46:18 <rey[lx]> anyone familiar with this error during hopengl compile?
12:37:05 <rey[lx]> hmm
12:37:39 <rey[lx]> i tried nearly all of the available flags for configure and googled for about half an hour and still nothing..
12:37:52 <Maddas> :/
12:37:58 <rey[lx]> somehow it starts to annoy me
12:40:29 <Darius> What's on line 60 of GL_BasicTypes.hs
12:40:42 <rey[lx]> just a sec
12:40:47 <rey[lx]> its some case stuff..
12:40:49 <rey[lx]> i paste it
12:40:50 <rey[lx]> mom
12:43:50 <rey[lx]> http://rafb.net/paste/results/Bt405458.html
12:44:54 <Cale> this is while compiling ghc?
12:45:14 <rey[lx]> this is while compiling hopengl
12:45:16 <rey[lx]> ah doh..
12:45:23 <rey[lx]> jumped to wrong line
12:45:29 <rey[lx]> what i pasted is not line 60
12:45:31 <rey[lx]> sec
12:45:36 <Cale> hopengl comes with ghc - you don't need the separate package
12:45:57 <Cale> the separate package is horribly outdated and no longer builds on current ghcs
12:46:21 <Darius> and _casm_ has been deprecated and has been removed from 6.2, so unless that's in #ifdef blocks that won't compiler.
12:46:38 <Darius> As Cale suggests, it looks like you have an out of date version.
12:47:17 <Cale> rey[lx]: if you compiled and installed ghc with the --enable-hopengl flag, then you should already have it
12:47:35 <Cale> --enable-opengl rather
12:47:36 <rey[lx]> ah doh..
12:47:42 <rey[lx]> yes i have it
12:47:50 <rey[lx]> i forgot to check after recompiling
12:47:55 <rey[lx]> virtual stupidity
12:48:02 <rey[lx]> sorry for bothering you
12:48:07 <Cale> no problem
12:48:10 <rey[lx]> shit
12:48:23 <rey[lx]> just wasted one hour
12:52:34 <SyntaxLaptop> shapr: did you send that email?
17:13:55 * clausen teste
19:12:15 <ham[let]> hiho
19:52:24 <Vulpyne> Hey, shapr.
21:05:28 * SyntaxLaptop pokes shapr and tells him to send that mail
21:09:38 <_joey> I'm quite new to Haskell, how do I store list value returned by a function in a variable?
21:10:23 <cleverdra> listReturningFunction = [1..]
21:10:32 <cleverdra> let x = listReturningFunction in take 5 x
21:10:40 <cleverdra> or...
21:10:45 <cleverdra> take 5 x where x = listReturningFunction
21:12:04 <_joey> I hate Haskell, useless really
21:13:00 <cleverdra> why tell us?
21:13:04 <_joey> in first case why is the function on the left hand side of =?
21:13:15 <_joey> why not?
21:14:18 <cleverdra> When I dislike a programming system I usually just stop using it and go away.  Why do you mutter things like 'I hate haskell, useless really' in #Haskell instead of just leaving?
21:15:14 <cleverdra> joey - programming languages fairly universally define the left-hand-side by the right-hand-side.
21:15:15 <monotonom> I think we are all through this.
21:15:29 <cleverdra> mono - all through what?
21:15:30 <_joey> I am doing a subject and I need to get grade
21:15:46 <monotonom> All through the pros and cons of learning Haskell.
21:15:56 <cleverdra> OK.  Make it easier on yourself by not whining about it in-channel.
21:16:18 <_joey> cleverdra: show me in C how I could assing a value to a function?
21:16:21 <monotonom> Also I think last time _joey was the one who wanted to drop that topic. I don't know why he's starting it again.
21:16:23 <_joey> universally? hehe
21:17:32 <cleverdra> joey - even in C the function-defining structures put the name of the function before the definition of the function.
21:17:55 <cleverdra> I find it totally bizarre that you'd find this of interest.
21:18:06 <_joey> show the code and stop bullshitting
21:18:32 <ozone> aww, how nice
21:19:31 <_joey> and why all of a sudden few wankers think they need to contribute when someone hates useless Haskell
21:20:02 <ozone> that's ok, i hate haskell too, useless really
21:20:10 <ozone> i just hang around here for the friendly people
21:20:14 <cleverdra> joey - welcome to #Haskell
21:21:35 <SamB> is useless haskell a new extension?
21:21:57 <monotonom> Haha
21:21:59 <ozone> SamB: yes, along with linear implicit parameters :>
21:22:20 <SamB> _joey: that was just an example function. okay?
21:22:42 <SamB> _joey: what is more, it was a silly example because the function didn't take any args.
21:23:40 <_joey> why telling me, tell to a person who presented the example
21:24:24 <cleverdra> No, don't tell me -- I've decided to block on a sensical question.
21:24:39 <_joey> I've seen in Perl5 using function on the left hand side a couple of times not any other languages
21:25:38 <SamB> cleverdra: this is why we need an asynch framework!
21:34:00 <_joey> silly 'programmers' give silly examples, I suppose
21:36:50 <SamB> silly xs = sum ys where ys = map (+1) xs
21:36:54 <dennisb> _joey: there is no function call on the lhs. It's a definition of a list called listReturningFunction
21:37:49 <SamB> in haskell, the only difference between a function and another kind of variable is that a function takes arguments
21:37:51 <dennisb> at least that is what I think is the misunderstanding
21:38:19 <SamB> so, really, you could take the view that any variable is a function.
21:38:42 <SamB> and many do. especially the one called main.
21:38:44 <cleverdra> since the question had nothing to do with functions, per se, it hardly matters.
21:39:11 <cleverdra> take 5 x where x = id listReturningFunction
