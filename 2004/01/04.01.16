00:49:22 <shapr> hello durnew 
00:51:18 * shapr yawns
00:57:42 <mgoetze> huomenta
00:57:55 <shapr> hyv‰‰ huomenta mgoetze 
00:58:00 <shapr> mitta kuuluu?
00:59:15 <mgoetze> hyv‰‰ kuuluu, kiitos
00:59:23 <Lunar^> Hello shapr :)
01:00:16 <shapr> bonjour Lunar^, comment Áa va?
01:01:43 <shapr> hey Lunar^, do you have ned's network go game handy?
01:02:02 <Lunar^> shapr: I could, but I'm also trying to follow a course right now
01:02:20 <Lunar^> shapr: But I can't help myself trying to push the WiFi system I finished to set up yesterday
01:02:33 <Lunar^> shapr: I'm going to ned's this evening
01:02:59 <shapr> ok
01:14:59 <ned> shapr: i have :)
01:15:08 <ned> (and i'm alive)
01:18:21 <shapr> bonjour ned!
01:19:27 <ned> bonjour :)
01:19:37 <ned> to all
01:20:08 <ned> shapr: you found time to read a bit my code ?
01:21:39 <shapr> I haven't looked at it in detail
01:22:14 <shapr> but it seems to work
01:22:21 <ned> there's this durty thing 'trad' to translate Int to GLfloat, but i didn't succeed it
01:22:52 <ned> with a proper way
01:23:11 <ned> trad 1 = 1 ... and so ... silly :)
01:24:18 <shapr> have you tried fromInteger?
01:24:29 * shapr tries
01:24:41 <shapr> er, fromIntegral
01:26:43 <shapr> it seems to compile with trad = fromIntegral
01:28:23 <ned> really ? i thought i tried, but i re- :)
01:28:46 <shapr> I haven't tried to execute the program yet with that change
01:31:24 <ned> argh. you're right / i'm shamed ;)
01:33:16 <shapr> nah, we all learn stuff all the time
01:38:49 <shapr> ned: GoCubeServ running on 213.242.136.207
01:39:31 <shapr> I've connected as 1 on 213.242.136.207
01:40:26 <shapr> ned: want to try "2 213.242.136.207" ?
01:40:48 <ned> k
01:41:20 <shapr> only accepte 1 so far
01:41:24 <shapr> oh there it is!
01:41:35 <ned> yeah !!
01:41:45 <ned> press 'space' please
01:41:51 <shapr> I did
01:42:26 <shapr> the screen doesn't update when I've pressed space
01:42:34 <shapr> but it does work :-)
01:43:05 <ned> it updates when i send response
01:43:08 <shapr> oooh, ascii art 
01:43:15 <ned> almost :)))
01:43:23 <shapr> Y O something
01:43:31 <shapr> oh Y 0 !
01:43:33 <shapr> hah
01:43:51 <shapr> very nifty
01:44:18 <shapr> this looks like a fun project
01:44:23 <shapr> I'll have to learn how to really play go now
01:44:28 <ned> :)
01:44:29 <shapr> ned: how do I quit?
01:44:56 <ned> heuu ...  the brutal way fo now :)
01:45:25 <shapr> ok :)
01:45:36 <ned> i have to learn this
01:45:52 <ned> there's no 'exit()' function i suppose ?
01:46:00 <shapr> I don't know about GLUT
01:46:08 <shapr> I can find out on the weekend
01:46:28 <ned> great if you can
01:47:33 <shapr> here's a screenshot of ned's networked Haskell Go client - http://scannedinavian.org/~shae/ned-go.png
01:47:50 <Lunar^> hehe
01:48:25 <Lunar^> neat :)
01:48:32 <shapr> yah, fun!
01:48:39 <Lunar^> ned: Do you want to host the Go project on gforge ?
01:49:06 <Lunar^> shapr: This could be a good test IMHO
01:49:15 <shapr> yes, I agree
01:49:53 <ned> My Lord :!)
01:50:00 <ned> why not :)
01:50:13 <ned> what's the process ?
01:50:24 <shapr> ned: join gforge.scannedinavian.org as a user
01:50:29 <shapr> request a new project
01:50:33 <shapr> then I'll approve it
01:50:49 <shapr> I haven't added darcs support to gforge yet, I'll try that this weekend.
01:51:26 <shapr> ned: the idea behind gforge.scannedinavian.org is that gforge.haskell.org might be a good idea, but we want to try out gforge first
01:51:45 <ned> k
01:52:52 <shapr> for example, I broke the apache ssl plugin recently, and haven't figured out how to fix it yet.
01:53:05 * shapr learns new stuff everyday
01:56:04 <shapr> ned: so, if you see anything that needs improving, changing, or have any comments about gforge, I'd appreciate the feedback
01:58:36 <kosmikus> shapr: maybe that has been asked before, but what about subversion support?
01:59:07 <shapr> kosmikus: I've heard rumors that someone on #gforge is working on it, but there's not currently support in the debs
01:59:37 <shapr> kosmikus: I'll see if there's svn support in gforge CVS, or if it's planned for the debs
02:00:17 <shapr> kosmikus: at worst, you could hack the PHP and add it, but you may find PHP distasteful
02:04:22 <shapr> kosmikus: okay, seems like to happen soon
02:04:35 <kosmikus> excellent
02:05:31 <shapr> the debian package maintainer will start working on svn support next week (and has long train trips and laptop)
02:16:27 <shapr> hi harsha123 
02:18:14 * shapr bounces happily
02:20:52 <tic> mm, perforce..
02:23:10 <shapr> amusingly, the popularity of Lord of the Rings means that I'm getting lots of hits for http://www.scannedinavian.org/~shae/emacstengwar.jpg
02:24:55 <harsha123> :) cool shapr ! calls for a beer
02:25:07 <shapr> well, it's a bit early for beer
02:25:12 <shapr> plus the only alcohol I like is sake
02:25:12 <harsha123> :)
02:25:22 <harsha123> heheh
02:25:40 <shapr> sushi and sake, mmm
02:26:07 <harsha123> :-) 
02:26:14 * adept wonders how it is possible to drink something that is hot and alcoholic ...
02:26:15 <harsha123> hey cool fonts.. where did ya get them?
02:27:13 <harsha123> No Doubt is a beautiful band.. anyone has heard to their.. "Running" ..
02:27:22 <harsha123> amazing number.. lotsa music
02:27:44 * harsha123 is hearing the song time and again
02:28:26 * Darius needs to learn how to play all of Don't Speak again sometime.
02:28:47 * harsha123 wonders why
02:29:58 <shapr> you can download the truetype fonts from the 'net
02:30:39 <shapr> once you get xfs-xtt or xfstt to serve them, you can get them in emacs with something like (make-face 'tengwar-parmaite)(set-face-font 'tengwar-parmaite "-ttf-tengwar parmaite-medium-r-normal-*-*-260-*-*-p-*-iso8859-1")
02:30:43 * shapr adds that info to the page
02:31:03 <harsha123> ok
02:31:29 <shapr> can I ask xset for the value of my x font path?
02:33:15 <adept> xset q
02:33:21 <shapr> thanks
02:35:26 <harsha123> xb
03:03:43 <ham[kell]> hiho
04:07:57 <shapr> how close is GHC to allowing utf-8 function names?
04:15:06 <adept> not to mention generalized whitespace overloading ... ;)
04:19:23 --- mode: anthony.freenode.net set +b *!*@206.169.168.190
04:19:42 --- mode: kornbluth.freenode.net set +b *!*@206.169.168.190
04:19:50 --- mode: capek.freenode.net set +b *!*@206.169.168.190
04:20:19 --- mode: bradbury.freenode.net set +b *!*@206.169.168.190
04:21:32 <shapr> elvish is alive!
04:45:28 <ham[kell]> ?
04:45:43 <shapr> !
04:45:47 <ham[kell]> quite some splits lately
04:45:48 <phubuh> .
04:45:55 <ham[kell]> whos elivsh?
04:45:55 <shapr> yup
04:46:36 <shapr> elvish is a language, created by JRR Tolkien
04:46:52 <ham[kell]> ah
04:51:29 <Taaus> What definition of "alive" are you using, shapr? :)
04:51:56 <shapr> Taaus: ok, it's not alive like english, but it's probably up there with latin
04:52:32 <Taaus> As alive as a dead language? Okay, I'll buy that ;)
05:00:50 <shapr> hey Taaus, haven't you been here before, many months ago?
05:00:58 * shapr has a vague recollection of such
05:01:03 <Taaus> It's possible.
05:01:20 <shapr> for some reason I'm convinced you're a programming teacher in .dk
05:01:32 <shapr> maybe I'm confusing you with someone else
05:01:35 <Taaus> Ah, well... Right country, wrong occupation.
05:01:51 <Taaus> I'm just a lowly student. Math/CS.
05:01:51 <shapr> professional programmer?
05:01:53 <phubuh> are you thinking of Tanenbaum? :-)
05:02:00 <shapr> phubuh: does he show up here?
05:02:07 <phubuh> I strongly doubt it
05:02:11 <shapr> actually, I'm probably thinking of jlouis
05:02:40 <ham[kell]> is there any haskell 3d engine project? i dont refer to these low level interfaces
05:02:49 <shapr> oh, Pseudonym put more code into PreludeExts, unless anyone wants to make more last minute additions, I'm going to mail libraries@haskell.org with the url
05:03:00 <shapr> ham[kell]: sort of, FunGen for example
05:03:10 <shapr> ham[kell]: there's also haSDL, but I don't know if that counts
05:03:15 <ham[kell]> k ill chel
05:03:22 <ham[kell]> check
05:03:44 <ham[kell]> i read in my topology book yesterday again :) and i want to do some math visualization
05:03:59 <shapr> I'm glad HOpenGL is gathering momentum
05:04:30 <Igloo> @wiki PreludeExts
05:04:30 <lambdabot> http://www.haskell.org/hawiki/PreludeExts
05:04:44 <ham[kell]> yep though i wanst too imperessed the first time i saw it
05:05:04 <ham[kell]> i mean what would be cool is if you had some cool mesh data structure on it
05:05:28 <shapr> Igloo: any idea what "newtype ListS a = ListS { [a] -> [a] :: mkListS } " should do?
05:05:47 <shapr> ghci complains about it
05:05:59 <Igloo> It should give you an error about mkListS not being on the LHS
05:06:31 <shapr> eh?
05:06:35 <Igloo> In fact, you probably want to swap mkListS and [a] -> [a]
05:06:45 <shapr> ok, I'll try that.
05:07:12 <shapr> seems to have fixed it, thanks!
05:08:35 <shapr> hm, ghci isn't happy about instance Monoid ListS
05:08:47 <shapr> kind error, not applied to enough types
05:09:45 <Igloo> Try instance Monoid (ListS a)
05:10:38 <shapr> hm, no. the instance works but it causes other type errors.
05:10:43 <shapr> I'll email Pseudonym
05:12:38 <shapr> esap: amusingly, Pseudonym suggested the name cartesian_product_with
05:13:36 <shapr> aw, too bad I can't throw import statements anywhere in the file
05:13:59 <shapr> I was hoping to make PreludeExts a bit more modular
05:21:32 <shapr> ah, someone is fixing on PreludeExts
05:21:47 <shapr> looks like it's even Pseudonym himself :-)
05:24:43 <shapr> hoi asmodai 
05:24:52 <asmodai> eyea shapr 
05:25:00 <shapr> hoe gaat het met jou?
05:25:09 * shapr again pretends to have a clue about dutch
05:25:15 <asmodai> Bad, have a cold
05:25:22 <shapr> oh, that sucks
05:25:40 <asmodai> yeah
05:25:50 <asmodai> my gf loved me a bit too much to give me that too
05:26:06 * shapr tries to parse that
05:26:18 <shapr> er, huh?
05:26:50 <asmodai> heh
05:26:55 <asmodai> my gf was sick
05:26:58 <asmodai> and handed it to me
05:26:59 <shapr> oh
05:27:07 <shapr> now I understand
05:27:17 <asmodai> :)
05:49:32 <shapr> hi ca
05:49:46 <ca> hey shaprs
05:50:31 <shapr> wassup?
05:51:02 <ca> mm, just learning haskell
05:51:08 <shapr> got any questions?
05:51:48 <ca> not right now, thanks :)
05:51:56 <shapr> ok
05:52:44 <ca> well ive written some code, if you could glance at it and give me some pointers i'd appreciate that very much ..http://members.webace.com.au/~d33p/LinearAlgebra.hs 
05:53:50 <shapr> you may want to use Array instead of a list for Matrix
05:53:58 <shapr> Array types give O(1) access
05:54:16 <ca> okay
05:54:18 <shapr> though updating the array is slow unless you use one of the tricky types
05:54:38 <ca> is that a standard type or do i need a library?
05:54:45 <shapr> it's a standard type
05:54:49 <ca> cool
05:54:50 <shapr> are you using GHC?
05:54:55 <ca> no, hugs
05:55:10 <shapr> I'd recommend GHC
05:55:23 <shapr> unless you're running on a memory or drive space constrained machine
05:55:30 <ca> can i get prebuilt binaries because my computer really cant build large stuff
05:55:45 <shapr> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.html
05:55:51 <shapr> yes, lots of prebuilt binaries
05:56:29 <ca> ok, i'll look for those then :)
05:56:36 <shapr> you use linux?
05:56:40 <ca> yes
05:56:44 <shapr> which distro?
05:57:15 <ca> um, sourcemage but its sort of broken (esp the package management stuff)
05:57:30 <shapr> ah, I don't know anything about sourcemage
05:58:08 <ca> iam going to try and get debian installed but i havent got around to it as of yet
05:58:25 <shapr> I'm fond of debian
05:58:43 <shapr> especially since Igloo maintains the GHC debs, and he's *very* responsive to users
05:58:43 <phubuh> yay debian :-)
05:58:43 <ca> ive noticed lots of haskell people use it
05:59:12 <shapr> oh, and SyntaxNinja maintains Hugs dbs
05:59:14 <shapr> debs
06:00:54 <ca> cool, i downloaded knoppix last week but my sister accidentally took my cd with her on a trip so iam stuck till she gets back. i'll try to use the array thing now.. brb
06:01:01 <shapr> ok
06:11:42 <shapr> bonjour fanou 
06:12:49 <shapr> comment √ßa va?
06:14:32 <fanou> ca va bien merci =)
06:14:44 <ca> um, hi 
06:14:58 <fanou> justement je voyais ta conversation sur #python ...
06:15:07 <shapr> ca: parlez vous fran√ßais aussi?
06:15:15 <ca> :)
06:15:16 <fanou> shapr: i do
06:15:20 <fanou> shapr: =)
06:15:21 <mgoetze> shapr: tu fait du utf-8?
06:15:30 <fanou> mgoetze: "fais" 
06:15:30 <shapr> oui, maintenant
06:15:54 <shapr> mais, si vous voulez, je peux changer au latin-1
06:15:57 <shapr> or something like that
06:16:05 <shapr> my french isn't wonderful
06:16:07 <mgoetze> nah, don't bother :)
06:16:19 <mgoetze> but it's one of the major problems with irc... hehe
06:16:27 <shapr> fanou: do you use Haskell?
06:16:36 <shapr> bonjour SyntaxNinja 
06:16:41 <shapr> we were just talking about you on #python
06:16:41 <SyntaxNinja> yo shapr
06:16:48 <mgoetze> terve, SyntaxPolice
06:16:54 <shapr> jemfinch and I
06:17:08 <shapr> fanou: ecrivez vous Haskell?
06:17:14 <SyntaxNinja> gaim is acting strange
06:17:18 <SyntaxNinja> ...
06:17:28 <SyntaxNinja> anyway, you're looking at an official debian developer :)
06:17:36 <SyntaxNinja> brb
06:17:47 <Igloo> Congrats, Syn!  :-)
06:17:49 <SyntaxNinja> ok
06:17:49 <mgoetze> SyntaxNinja: congratulations!
06:17:51 <fanou> shapr: no, not at all, but your conversation on #python made me think that maybe i should read its documentation, because i know nothing about it
06:17:51 <SyntaxNinja> :) :)
06:18:11 <fanou> shapr: what does haskell have that python doesn't ?
06:18:16 <shapr> fanou: I have time to give you the short intro, but not much more
06:18:19 <mgoetze> anyway, back to getting my two switches to talk to each other...
06:18:35 <SyntaxNinja> OK meeting
06:18:36 <mgoetze> fanou: what does python have that it didn't steal from haskell? :)
06:18:39 * SyntaxNinja &
06:18:48 <shapr> fanou: at the most basic level, they're both turing complete, that's obvious
06:19:18 <fanou> shapr: i'm reading the intro right now
06:19:23 <shapr> major differences between Python and Haskell, Haskell has lazy evaluation, referential transparency
06:19:34 <shapr> much more support for higher order programming
06:19:43 <Riastradh> Is Haskell defined by the report to be lazy or just non-strict?
06:19:48 <phubuh> strongly and statically typed!
06:19:49 <shapr> non-strict I think
06:19:59 <phubuh> what's the difference?
06:19:59 <shapr> Riastradh: oh oh, I have an arrows question to ask you
06:20:05 <Riastradh> So it could be call-by-name, couldn't it?
06:20:10 <shapr> phubuh: spec_eval can work in non-strict
06:20:21 <shapr> at least, I think that's right
06:20:35 <shapr> Riastradh: I'm not sure
06:20:48 <shapr> fanou: partial application
06:20:49 <phubuh> what's spec_eval? :)
06:20:57 <Riastradh> shapr, what's your question?
06:21:31 <shapr> Riastradh: you explain monads to me as something like "a datatype and a continuation to call"
06:21:36 <shapr> I finally understood that
06:21:38 <Riastradh> (Be forwarned that I understood arrows for about four minutes after I spent hours digesting Hughes' paper on them, and I'm no longer among the four or five people on earth who understand them.)
06:21:56 <shapr> I think you gave a similar sort of description of arrows, but I don't remember what it was
06:21:58 <Maddas> heh
06:22:16 <shapr> fanou: for the dive right in approach: http://www.scannedinavian.org/~shae/src/haskell/Demo.hs
06:22:27 <Riastradh> Oh.  That an arrow is an entry point, a datatype, and an exit point (continuation), perhaps?
06:22:43 <shapr> fanou: Haskell has all the type safety that Java and C have ever wished for, with 1% of the type declarations
06:22:44 <fanou> shapr: thank you
06:23:25 <Riastradh> Haskell has typeclasses, which are 90% of the time what you really want when you think you want an object system.
06:23:46 <Riastradh> Well, OK, maybe not 90% of the time.  But a lot of the time.
06:23:48 <shapr> fanou: if you've used lambda, map, filter, and reduce in Python; Haskell is that, but much more of that.
06:24:20 <phubuh> with do, a lambda in haskell can even contain more than one statement
06:24:21 <phubuh> :-P
06:24:29 <Riastradh> Python's lambda is lame: it doesn't create real closures.
06:24:58 <shapr> it also can't be multiline 
06:25:08 <shapr> the binding rules of python don't bother me
06:25:14 <shapr> single-line lambdas do
06:25:42 <shapr> fanou: do you have any questions?
06:26:04 <shapr> fanou: should I ask that again after you've had some time to think?
06:26:07 <shapr> @learn
06:26:07 <lambdabot> http://www.haskell.org/learning.html
06:26:50 <Maddas> hmm
06:27:11 <Maddas> phubuh: do you mind a query?
06:27:44 <fanou> shapr: sorry i was reading the Haskell intro
06:27:52 <phubuh> not at all
06:29:01 <shapr> Maddas: go ahead
06:29:14 <shapr> whoops
06:29:19 <Maddas> shapr: heh :)
06:29:33 <shapr> :-)
06:43:57 <ham[kell]> does anyone of you use win32 emacs?
06:46:59 <shapr> is [] an instance of MonadPlus?
06:47:26 <Riastradh> @type [1,2,3] mplus [4,5,6]
06:47:28 <phubuh> yup
06:47:32 <Riastradh> @type [1,2,3] `mplus` [4,5,6]
06:47:35 <Riastradh> Bah.
06:47:38 <Riastradh> lambdabot: you suck!
06:47:39 <shapr> @type mplus
06:47:39 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
06:47:46 <shapr> hmm
06:48:26 <shapr> ok, so what can I do with the combinationsM function that Pseudonym put into PreludeExts ?
06:55:05 <shapr> a darcs browser would be spiffy with a on-the-fly haddock plugin
07:00:09 <Lunar^> wwiii
07:00:37 <phubuh> No instance for (MonadPlus IO)
07:00:37 <phubuh>   arising from use of `mplus' at <No locn>
07:00:41 * phubuh looks puzzled
07:03:37 <kosmikus> phubuh: ?
07:04:28 <phubuh> the GHC docs claim that IO has a MonadPlus instance
07:05:33 <kosmikus> do they?
07:05:46 <phubuh> http://etudiants.insia.org/~jbobbio/pafp/docs/base/GHC.IOBase.html#t%3AIO
07:06:35 <phubuh> http://www.haskell.org/ghc/docs/latest/html/libraries/base/GHC.IOBase.html#t%3AIO if you want a more authoritative source :-)
07:07:13 <phubuh> hdaume explains its behavior in http://www.haskell.org/pipermail/glasgow-haskell-users/2003-January/004706.html
07:08:20 <kosmikus> interesting
07:11:21 <ham[kell]> hm cant i use where in lambda expressions?
07:11:43 <kosmikus> phubuh: it's defined in Control.Monad.Error
07:11:46 <Riastradh> Just use let.
07:11:47 <phubuh> ah
07:11:49 <Riastradh> where is weird.
07:11:57 <ham[kell]> i got something like (\l -> blalba where blablabla)
07:12:00 <Riastradh> Even if you can use it in lambdas, it's weird.
07:12:02 <ham[kell]> ok then its let :)
07:12:17 <kosmikus> you cannot use where in lambdas
07:12:30 <ham[kell]> hm then he says unexpected keyqord let
07:12:34 <ham[kell]> instead of where :)
07:12:36 <shapr> Lunar^: just got your ingeniweb postcard :-)
07:12:45 <Riastradh> (\l -> let a = b in blalba)
07:12:53 <ham[kell]> ah ok
07:14:32 <ham[kell]> hm sec ill post taht
07:14:45 <shapr> phubuh: that's a neat trick, mplus on IO
07:15:10 <shapr> Lunar^: wiwiwi?
07:15:24 <ham[kell]> http://rafb.net/paste/results/C1038621.html
07:15:38 <phubuh> yeah
07:16:08 <ham[kell]> if i use let then he tells me that l isnt defined since i get that from the function
07:16:43 <shapr> ham[kell]: you could have l as one of your function args
07:16:59 <ham[kell]> yep
07:17:02 <shapr> you could get the same behaviour by partially applying buildSpline
07:17:56 <ham[kell]> hm how?
07:18:09 <Riastradh> buildSpline pl l =
07:18:18 <Riastradh>   let x = ...; ... in
07:18:28 <Riastradh>     addVec (addVec (mulVec ...) ...) ...
07:19:15 <ham[kell]> ok but then the l is fixed in that expression isnt it?
07:19:33 <Riastradh> No.  It's pretty much the same function.
07:19:56 <Riastradh> You can use buildSpline just as you used it before.
07:19:58 <shapr> ham[kell]: addN = (+) ; addFive = (+ 5)
07:20:06 <shapr> or even addFive = add 5
07:20:07 <shapr> that's better
07:20:15 <shapr> or addN 5
07:20:49 <shapr> @type (+)
07:20:49 <lambdabot> (+) :: Num a => a -> a -> a
07:20:52 <shapr> @type (+ 5)
07:20:53 <lambdabot> flip (+) 5 :: Num a => a -> a
07:20:59 <shapr> @type (5 +)
07:21:00 <lambdabot> (5 +) :: Num a => a -> a
07:21:21 <ham[kell]> ah that is because that l isnt bound if i dont have a second parameter right?
07:21:27 <ham[kell]> its just a scope thing
07:21:28 <shapr> right
07:21:52 <phubuh> MonadPlus IO seems useful
07:21:53 <ham[kell]> ok thanks and how do i do that "type" conversion from int to float?
07:22:07 <Riastradh> fromIntegral or something.
07:22:14 <phubuh> readAnyFile = msum . map readFile
07:29:26 <ham[kell]> hm fromInt?
07:37:39 <ham[kell]> hm but there is no fromInt is there?
07:38:45 <phubuh> fromIntegral will work
07:38:59 <phubuh> @type (fromIntegral (10 :: Int)) :: Float
07:38:59 <lambdabot> fromIntegral 10 :: Float
07:40:36 <ham[kell]> k thx
07:41:26 <ham[kell]> hm this gives me the creeps
07:42:27 <ham[kell]> http://rafb.net/paste/results/ca163596.html
07:46:47 <ham[kell]> what does Instance of Integral Float required tell me?
07:56:17 <shapr> fanou: what do you think so far?
08:02:26 --- mode: hardy.freenode.net set +b *!*@206.169.168.190
08:04:02 <ham[kell]> can someone explain me that error?
08:04:31 <shapr> ham[kell]: you need to put the fromIntegral between where a float is wanted, but an int is given
08:04:34 <shapr> @type ^
08:04:37 <shapr> @type (^)
08:04:38 <lambdabot> (^) :: (Num a, Integral b) => a -> b -> a
08:05:06 <shapr> @type (1 :: Int) ^ (1 :: Int)
08:05:06 <lambdabot> 1 ^ 1 :: Int
08:05:27 <shapr> @type (/)
08:05:27 <lambdabot> (/) :: Fractional a => a -> a -> a
08:05:40 <shapr> I've forgotten which Prelude functions require a Float
08:05:43 <shapr> @type (**)
08:05:44 <lambdabot> (**) :: Floating a => a -> a -> a
08:05:45 <ham[kell]> ok i see
08:05:46 <shapr> aha
08:05:56 <shapr> @type (1 :: Int) ** (1 :: Int)
08:06:01 <shapr> fails miserably
08:06:17 <ham[kell]> hmm
08:06:17 <shapr> @type (fromIntegral (1 :: Int)) ** (fromIntegral (1 :: Int))
08:06:18 <lambdabot> fromIntegral 1 ** fromIntegral 1 :: Floating a => a
08:06:22 <shapr> but that one works
08:07:10 <ham[kell]> oh there is no / for float and int???
08:07:45 <shapr> @type (1 :: Int) / (1.0 :: Float)
08:07:53 <shapr> @type (fromIntegral (1 :: Int)) / (1.0 :: Float)
08:07:53 <lambdabot> fromIntegral 1 / 1.0 :: Float
08:08:29 <ham[kell]> ok i dont get it all all right now
08:08:40 <ham[kell]> x = 1 / Int is a float then right?
08:08:52 <shapr> huh?
08:09:16 <ham[kell]> 1 / (length list)
08:09:28 <shapr> @type (length [])
08:09:29 <lambdabot> length [] :: Int
08:09:42 <ham[kell]> ok so i write
08:10:01 <ham[kell]> 1.0 / (fromIntegral (length list)) ?
08:10:10 <shapr> try it
08:10:20 <shapr> do you use emacs?
08:10:24 <ham[kell]> doesnt work
08:10:25 <ham[kell]> yep
08:10:48 <shapr> I make edits in my haskell file and hit C-c C-l to immediately dump the file into ghci
08:10:53 <shapr> that way I get to see errors quickly
08:11:15 <shapr> ham[kell]: try commenting out the type signature for buildSpline, and for spline
08:11:19 <shapr> that should get you a bit further
08:11:22 <ham[kell]> i have some probs with installing the haskell mode in wi32 emacs
08:11:34 <shapr> oh, I haven't tried that
08:13:49 <ham[kell]> ok i still dont get it at all :(
08:14:58 <ham[kell]> x = (1 :: Float) / (fromIntegral (length list)) whats wrong with that?
08:15:13 <shapr> looks right to me
08:15:35 <shapr> what error do you get?
08:15:48 <ham[kell]> that he needs an instance
08:15:57 <shapr> who needs an instance?
08:16:20 <ham[kell]> Instance of Integral Flot required
08:16:27 <ham[kell]> for definition of buildSpline
08:16:38 <shapr> which line in the file requires that instance?
08:17:20 <ham[kell]> 13
08:17:40 <shapr> what is on line 13?
08:17:54 <ham[kell]> http://rafb.net/paste/results/ca163596.html
08:18:07 <ham[kell]> 14: x = 1 / (fromIntegral (length pl))
08:18:08 <shapr> are you using GHC?
08:18:18 <ham[kell]> 14: x = (1 :: Float) / (fromIntegral (length pl))
08:18:20 <ham[kell]> nope hugs
08:18:23 <shapr> ah
08:18:34 <ham[kell]> is there a ghc for win32?
08:18:39 <shapr> yes
08:18:47 <shapr> ghc says the error is on line 17
08:19:37 <ham[kell]> ok so floor is of Int?
08:19:53 <shapr> actually, I'm still trying to fix that one...
08:19:56 <ham[kell]> oh man :)
08:20:06 <ham[kell]> 		t = tt - (fromIntegral (floor tt))
08:20:16 <ham[kell]> thats it
08:20:19 <shapr> yay!
08:20:30 <ham[kell]> man man i think i should change to ghx
08:20:35 <ham[kell]> man man i think i should change to ghc
08:20:37 <SamB> fromIntegral takes an integral
08:20:41 <ham[kell]> but i think there is no win version
08:21:05 <shapr> http://www.haskell.org/ghc/download_ghc_62.html
08:21:21 <ham[kell]> ah cool thank you
08:22:10 <shapr> if you're having type matching problems in Haskell, careful use of fromIntegral usually fixes it.
08:22:47 <ham[kell]> ok thank you i think i would have been able to get the error if i have had that line :)
08:22:48 <SamB> ham[kell]: win is for lusers. and people with unsympathetic employers and/or programs with no linux counterparts. and winners who haven't won yet, and genii who haven't realized there is a problem ;-)
08:22:54 <ham[kell]> thank you very much
08:23:06 <ham[kell]> i also have a lx machine
08:23:19 <shapr> lx?
08:23:23 <ham[kell]> and i think that the OS doesnt really matter as long as i got my compiler
08:23:24 <ham[kell]> linux
08:23:28 <shapr> oh
08:23:40 <ham[kell]> ux = unix ;)
08:23:47 <SamB> ham[kell]: well, I wouldn't mind if it didn't take so long to load emacs ;-)
08:24:08 <shapr> windows feels to me like it gets in my way, so I don't use it.
08:24:13 <ham[kell]> im fed up with all this OS war
08:24:21 <shapr> and I think tic uses BeOS
08:24:26 <ham[kell]> i just use it to play
08:24:28 <shapr> ham[kell]: it's just whatever fits your head
08:24:38 <shapr> like programming languages, you choose what's right for you
08:24:45 <ham[kell]> and since its in my living room and i want to hear some music i use my win machine :)
08:24:47 <SamB> ham[kell]: that comes under programs with no linux counterparts, I believe
08:25:00 <shapr> I play lots of games on Linux
08:25:25 <ham[kell]> i also could run xfree on win and access my lx machine
08:25:37 <shapr> I had a wiwiwi page with a bunch of my reviews of linux games, I can get that back online
08:25:43 <ham[kell]> but maybe i change to plan9 :)
08:25:51 <SamB> ham[kell]: that worked okay for me
08:25:54 <shapr> have you looked at inferno?
08:25:58 <shapr> I want to try inferno
08:25:59 <ham[kell]> it looks funny at least
08:26:03 <ham[kell]> not yet
08:26:09 <shapr> but I haven't gotten to it yet
08:26:19 <ham[kell]> but i want to set up a new system with plan9
08:26:20 <shapr> so many interesting things in life, not enough time in each day =)
08:27:27 <ham[kell]> does haskell get rid of constants while compiling?
08:27:32 <ham[kell]> such as + 0
08:27:38 <phubuh> definitely
08:27:42 <ham[kell]> ok
08:28:49 <SamB> haskell's purity allows lots of nice optimizations
08:32:00 <Igloo> It can only do that if it knows the type
08:39:42 <SamB> Igloo: well, yeah. I suppose thats one of the nice things about cross module inlining?
08:55:17 <SamB> of course, it would be really nice to have both static and dynamic optimization ;-)
09:06:15 <shapr> well, I'll mention PreludeExts on libraries@
09:17:49 <shapr> hiya
09:18:00 <cptchaos> hi
09:18:17 <shapr> have you seen PreludeExts?
09:18:36 <cptchaos> no, not jet
09:18:44 <shapr> @wiki PreludeExts
09:18:44 <lambdabot> http://www.haskell.org/hawiki/PreludeExts
09:19:04 <cptchaos> \me looking PreloudeExts
09:19:09 <shapr> if you have some code you wish were in the Prelude, feel free to add it in there.
09:19:10 <cptchaos> brr
09:19:21 <cptchaos> ok
09:25:49 <cptchaos> there is nothing I would add there at the moment, ...
09:25:55 <shapr> ok
09:26:53 <cptchaos> but I would like to see the select call in the hirachical Libraries
09:27:21 <shapr> posix select ?
09:27:46 <cptchaos> yes or a more genreal IO multipexer
09:28:40 <cptchaos> there is a select in the old libraries, that is quite nice 
09:29:16 <shapr> I think that was recently discussed on one the mailing lists
09:29:59 <cptchaos> hm, I do not read the mailinglist, at the moment
09:30:10 <cptchaos> is there an archive?
09:31:11 * cptchaos searching haskell.org
09:32:20 <shapr> there's an archive, but I don't think it's searchable
09:33:59 <cptchaos> you are right ...
09:35:24 <shapr> I had a lambdabot plugin that could search the mailing lists
09:35:34 <shapr> but it used a stupendous amount of memory, so I pulled it
09:36:12 <shapr> it used something like 700MB of ram to index 16mb of mails
09:36:50 <shapr> obviously, I need to find a better way to save indices in haskell
09:38:50 <cptchaos> wow, 700MB 
09:39:43 <shapr> I still have the code if you know to make better indices
09:40:30 <cptchaos> hm, I don't know, how have you done it?
09:40:30 <shapr> actually, I remember Pseudonym described better indices to me
09:41:36 <shapr> http://cvs.sourceforge.net/viewcvs.py/haskell-libs/libs/lambdabot/SearchMailingList.hs?rev=1.1&view=markup
09:42:01 <shapr> basically, cut the message body into words, then build a FiniteMap from word to message filename
09:42:36 <shapr> so "@searchml ghc" might return "1 2 5 79" and then you could do "@showml 1" to see the message
09:42:48 <shapr> I also realized IRC isn't a good way to view email
09:42:53 <Maddas> heh
09:47:49 <basti_> hi
09:48:00 <shapr> hi basti_ 
09:49:54 <ham[kell]> bk
09:50:02 <shapr> darcs
09:50:17 <Igloo> Huzzah!
09:50:24 * shapr grins
09:50:30 <shapr> hi Igloo, what's up?
09:50:51 <Igloo> Many things
09:50:58 <basti|_> whoops
09:51:16 <Igloo> I just got and replied to a mail from MW about merging hat diffs, which is good
09:51:31 <cptchaos> shapr: how many messages did you index? maybe a performGC after making the finit map helps?
09:51:36 * Igloo gives those nice people at Habeas some more spam
09:51:39 <shapr> cool, the diffs that made hat-ghc-6.2 debs work?
09:51:58 <Igloo> That and the other bits and pieces in there
09:52:52 <shapr> cptchaos: I indexed about three thousand message
09:52:58 <ham[kell]> hm where do i get an example for HGL ?
09:53:04 * Igloo wants the Debian port machines back so I can fix bugs  :-(
09:53:52 <ham[kell]> i wanna see if my spline homotopy does its job :)
09:55:37 <cptchaos> shapr: i do not see why your index consumes so much memory, at the moment ...
09:56:17 <shapr> I'm not sure either.
09:59:03 <shapr> zombie network scans are immensely cool
10:01:32 <cptchaos> what's that?
10:02:27 <shapr> if you are able to do effective TCP sequence number prediction on a given host
10:02:42 <shapr> for example, if it's idle, the sequence only changes by time
10:02:48 <cptchaos> ok
10:03:12 <shapr> then you can send SYN packets to a separate host, faking the IP address as the first, zombie host
10:03:50 <shapr> then you can send a SYN to the zombie to see if its sequence number has changed only with time, or if it has received an ACK, which would change its sequence number further
10:04:08 * shapr isn't sure if that was clear as mud
10:04:57 <cptchaos> ok, if i remeber tcp right, this shuld be a type of stealth scan
10:06:22 <shapr> yes, it's nearly impossible to detect the originating host
10:07:07 <cptchaos> :-)
10:07:18 <cptchaos> ok, thats fine
10:08:45 <mgoetze> shapr: right, so, how do you do the tcp seq number prediction? :)
10:10:04 <shapr> there are OSes do not add a random amount per second, as according to the standard, but only a fixed amount.
10:13:23 <shapr> mgoetze: http://www.insecure.org/nmap/idlescan.html
10:18:00 <ham[kell]> does anyone run hugs in win32 and is able to compile the sample opengl files?
10:22:28 <shapr> esap: hey, did you see Iavor's response to your adjunction code?
10:23:22 <esap> hmm.. no, where?
10:23:35 <shapr> on libraries@haskell.org 
10:23:50 <shapr> I'll forward to you esa at iki maybe?
10:23:58 <shapr> or esap at iki ?
10:23:59 <Maddas> are n+k considered bad?
10:24:40 <Igloo> By many people
10:24:47 <Igloo> Personally I like them
10:25:20 <Riastradh> n+k?
10:26:00 <Maddas> err
10:26:05 <Maddas> n+k patterns :-)
10:26:55 <Maddas> Cool, Hugs seems to handle really large numbers
10:27:47 <Igloo> foo (n+1) = f n   sort of thing
10:28:10 <Riastradh> Igloo, yes, I know.
10:28:24 <Igloo> What were you asking then?
10:28:38 <Maddas> Igloo: I dropped "patterns" in the original sentence
10:28:49 <Igloo> Oh, right
10:29:07 <Riastradh> I don't like them unless I can also do something like:
10:29:19 <Riastradh> (*@&#) x y = ...  -- define my own operation
10:29:31 <Riastradh> f (4 *@&# x) = x
10:29:35 <Maddas> haha
10:29:42 * shapr grins
10:30:45 <Igloo> That would be possible if the language had a way to declare inverses
10:32:01 <esap> inverses? Would Adjunction do?
10:32:05 <basti_> hmm
10:32:13 <basti_> anyone knows Coq?
10:32:27 <basti_> it uses the calculus of inductive constructions
10:32:29 <adept> basti_: i played with it a little tinsy bit
10:32:42 <basti_> thats somehow "inverse" to the usual way of construction ;)
10:33:04 <basti_> i saw an inductive definition of euclids algorithm
10:33:12 <basti_> went like .oO∞ ( ? ? ? )
10:33:22 <Maddas> haha
10:33:37 <Maddas> basti_: that looks funny :-)
10:44:17 <basti_> uh my s.o. will get her daily soap fix in about 3 minutes
10:44:40 <shapr> she's going to wash your clothes?
10:44:58 <basti_> no watches "gute zeiten schlechte zeiten" (good times bad times)
10:45:03 <basti_> german daily soap
10:45:08 <shapr> aha
10:45:25 <basti_> not even 3 wow
10:49:49 <ham[kell]> how can i track why ghc cant load a package?
10:50:17 <shapr> which package is it?
10:50:18 <SyntaxNinja> -v will give you info about where it's looking for it
10:50:19 <ham[kell]> in this case he states that he cant load the GLUT package though he can load the OpenGL package
10:50:34 <ham[kell]> k sec
10:51:07 <SyntaxNinja> oh, ghc-pkg -l might be what you want
10:51:12 <SyntaxNinja> I was thinking of a module, not a package.
10:51:52 <ham[kell]> hm isnt opengl and glut build in?
10:53:10 <ham[kell]> they are both listed
10:53:33 <shapr> do you get any interesting error?
10:53:48 <ham[kell]> sec
10:54:41 <ham[kell]> ../ghc/HSGLUT.o: unknown symbol _glutMainLoop
10:55:06 <ham[kell]> ghc.exe panic! ... can't load package GLUT
10:55:26 * shapr has no idea
10:55:47 <ham[kell]> got any sample that runs in your ghc?
10:56:07 <shapr> sure, but if you can't load package GLUT, they won't run
10:56:36 <shapr> I don't know anything about GLUT on win32
10:56:40 <ham[kell]> i used an example from hugs
10:56:49 <ham[kell]> since ghc didnt provide samples
10:56:57 <shapr> I'd recommend you check the archives of the HOpenGL mailing list
10:57:50 <ham[kell]> i just wonder i mean its in the install package
10:58:14 <ham[kell]> plz give me a sample file that i can exclude any error for that file
10:58:25 <shapr> ok
10:58:45 <ham[kell]> cool thanks
10:59:59 <shapr> ham[kell]: http://www.scannedinavian.org/~shae/src/
11:00:04 <shapr> Cube.hs and the Makefile
11:00:08 <shapr> written by Igloo 
11:01:18 <ham[kell]> erm ok
11:01:28 <ham[kell]> this just makes my console crash 
11:01:32 <ham[kell]> and terminate
11:01:45 <shapr> that's surprising
11:02:02 <ham[kell]> strange
11:02:07 <shapr> does "ghc-pkg -l" list GLUT ?
11:02:18 <ham[kell]> i mean dont these ppl test their releases?
11:02:25 <ham[kell]> yes glut and opengl
11:02:37 <shapr> do you see anything useful in "ghc-pkg -s GLUT" ?
11:03:07 <ham[kell]> sec
11:03:39 <shapr> I know some people are using GHC 6.2 with HOpenGL on win32
11:03:51 <ham[kell]> cool do they hang out here?
11:04:47 <shapr> I don't know of any
11:05:04 <shapr> I'd suggest checking the archives of the HOpenGL mailing list
11:05:28 <ham[kell]> ah you mean in general :)
11:05:32 <shapr> right
11:05:37 <ham[kell]> yes that has to be the way then
11:05:52 <ham[kell]> if i make it then you could put it on that site of yours
11:06:46 <shapr> make it? you mean, get HOpenGL to work on win32? or the spline source?
11:06:57 * shapr is always willing to host Haskel related stuffs
11:07:01 <ham[kell]> get ogl to run
11:07:05 <shapr> ah, ok
11:07:17 <ham[kell]> i want to write some funny topology renderings
11:07:43 <ham[kell]> you can now build homotope function over splines
11:07:54 * shapr wonders what that is
11:07:58 <ham[kell]> and its not really funny if you cant look at it :)
11:08:02 <ham[kell]> that is
11:08:09 <ham[kell]> if f and g are 
11:08:24 * basti_ imagines some kind of colorful hairball
11:08:32 <ham[kell]> continous mappings f,g: X -> Y
11:09:09 <ham[kell]> then a homotope function h: X x [0,1] -> Y
11:09:49 <ham[kell]> such that h(x,0) = h_0(x) = f(x)
11:09:50 <ham[kell]> and
11:09:58 <ham[kell]> h(x,1) = h_1(x) = g(x)
11:10:08 * basti_ jaw drops gradually
11:10:24 <ham[kell]> thats like a morph orsuch
11:10:32 <shapr> well, maybe I'll understand it when I see the pretty pictures ...
11:10:37 <Maddas> basti_: are you currently visualizing it based on the information?
11:10:50 <shapr> esap: ok, I'm convinced I need to read up on adjunctions
11:11:04 <basti_> Maddas not really
11:11:05 <Maddas> mm, junctions!
11:11:12 <ham[kell]> adjunctions?
11:11:16 <Maddas> basti_: oh, ok, I thought that's why your jaw dropped
11:11:28 <basti_> you mean like in fireworks?
11:11:32 <basti_> i was rather black hole
11:12:34 <shapr> neat Bryn Keller put some regex code into PreludeExts
11:13:27 <esap> shapr: What's interesting about adjunctions is that they don't actually "do" anything. They just provide a framework which forces the code to be very cleanly organized :-)
11:14:01 <ham[kell]> what are these adjunctions?
11:14:31 <esap> Adjunctions are a concept from category theory, you could think of expressing the concept of inverse for functors.
11:15:27 <shapr> esap: hey, did you send a reply to Iavor? or should I tell him that it's your code rather than mine?
11:15:53 <ham[kell]> esap and what is it good for?
11:16:37 <ham[kell]> or where can i read on that?
11:17:22 <shapr> oh, I think esap suggested some papers yesterday, but I've forgotten which ones.
11:17:23 * shapr checks the logs
11:17:25 <esap> ham: hold on, I'll look up some papers. and see PreludeExts from wiki.
11:17:43 <shapr> ah, I'll wait for the looked up urls.
11:17:45 <ham[kell]> k sry thx
11:18:05 <ham[kell]> ah
11:18:09 <ham[kell]> i know what that is
11:18:16 <ham[kell]> not for haskell
11:18:24 <ham[kell]> but what it means graphically
11:18:36 <ham[kell]> its just that you glue together two spaces right?
11:18:50 <ham[kell]> that was the next thing i wanted to visualize
11:19:24 <esap> ham: http://citeseer.nj.nec.com/fokkinga93adjunction.html
11:20:01 <ham[kell]> http://planetmath.org/encyclopedia/Adjunction.html
11:21:12 <esap> ham: http://citeseer.nj.nec.com/goguen91categorical.html  has some intuition.
11:22:01 <esap> ham: http://citeseer.nj.nec.com/487012.html also has good explanation of adjunctions.
11:23:12 <ham[kell]> thanks a lot
11:23:43 <esap> the planetmath version is not quite the same concept.
11:24:02 <ham[kell]> i just see it as glueing two spaces together
11:24:13 <ham[kell]> you map from one to the other
11:24:32 <ham[kell]> and then quotening out the stuff that is doubled at the glue place
11:24:48 <esap> adjunction is more like a relationship between a space and a path to an element in that space.
11:24:50 <ham[kell]> ~ is where x ~ f(x)
11:25:16 <esap> 'f' in Adjunction f g  is the path.
11:26:06 <esap> or a functor that represents 'path to _' or something like that.
11:26:08 <ham[kell]> f: X -> Y where X    is some space and Y the path or expression?
11:27:58 <esap> no, it's more like 'unit :: (Adjunction path space) => a -> space (path a)' creates a space of paths
11:29:08 <ham[kell]> i think its easier if i read it in the paper :) though i think i at least understand what it does in topology
11:29:27 <basti_>  <= -><-
11:29:38 <ham[kell]> so i think ill just need to be told what spaces X and Y are
11:29:55 <ham[kell]> but first i need ogl :)
11:41:02 * shapr throws lambdas
11:41:18 <ham[kell]> :)
11:41:37 <ham[kell]> what one really needs is an editor that has a lambda in its font set
11:41:55 <shapr> there's pretty-lambda.el for emacs
11:42:09 <ham[kell]> hm
11:42:18 <Darius> Editors typically have some way of changing the fonts.
11:42:30 <shapr> hi Darius 
11:42:40 <ham[kell]> wasnt there a realtime tex editor written with haskell?
11:42:54 <Darius> heya shapr
11:42:55 <basti_> it was??
11:43:00 <basti_> ham[kell] tell more
11:43:22 <Maddas> ham[kell]: sounds a bit like TeXmacs, but I don't know if it is written in Haskell
11:43:25 <ham[kell]> fun->pdf(since 10/06/2003: via Internet Archive) 
11:43:25 <ham[kell]> An implementation of a PDF dynamic writer in Haskell. 
11:43:43 <ham[kell]> havent had a look at it
11:44:43 * basti_ looks for it
11:48:40 <esap> Hmm.. can I post to the libraries list if I haven't subscribed to it? can I reply to something I read from the archive without breaking the threads?
11:52:51 <shapr> I think you can post
11:53:21 <SamB> esap: you could code the message by hand
11:53:30 <shapr> but I think you will break the thread unless you have a matching References: field
11:54:02 <Igloo> You can get an mbox from the webpage, but possible only for all time
11:54:26 <Igloo> Also, you'll probably need to wait for the message to be moderated
11:54:28 <esap> ok, thanks.
12:22:27 <ham[kell]> i got it :)
12:22:51 <shapr> yay!
12:22:52 <ham[kell]> you just need to change one line in the package file and have to download the glut32.dll ;)
12:22:56 <shapr> what was it?
12:22:58 <shapr> oh, neat
12:23:03 <esap> Hmm.. I think I just realized a good interpretation of Adjunctions in common software engineering terms. Aren't adjunctions actually the relationship between _classes_ and _sets of methods_  (something like (Adjunction f g) => g a  is a class and (Adjunction f g) => f a is a method)
12:23:14 <ham[kell]> that line in the packae file and the gult32.dll ;)
12:24:20 <esap> of course, that idea might require that 'g' is a coalgebra.
12:24:21 <ham[kell]> hm
12:24:22 <ham[kell]> i might be able to state something about that when i read the papers :)
12:24:29 <Darius> esap: Have you read Tetsuya Hagino's thesis?
12:25:01 <esap> darius: I think long time ago, I've read it. I'm not sure I understood all of it back then.
12:25:25 <ham[kell]> what did he write about?
12:25:33 <esap> coalgebras and OO.
12:25:49 <esap> if I recall correctly.
12:26:36 <Darius> http://www.tom.sfc.keio.ac.jp/~hagino/index.html.en
12:27:24 <shapr> hm, that class and method comparison is interesting
12:27:51 <ham[kell]> whats an example of a comultiplication?
12:28:11 <ham[kell]> d: A -> A (x) A
12:28:34 <ham[kell]> isnt that like a reverse multiplicatin?
12:28:58 <shapr> I like John Meacham's repMaybe
12:29:31 <esap> Hmm.. actually, I'm not sure I've seen that. Must have been something else from Hagino that I'm remembering.
12:30:12 <shapr> maybeToMonad is also interesting
12:33:25 <Darius> The from{Either,Left,Right} functions exist
12:33:36 <Darius> And I think repMaybe might be Maybe's mfix.
12:33:48 <shapr> buildTable RL and LL are cute
12:33:54 <Darius> replicateM and repeatM I think are in Control.Monad but not in Monad.
12:34:16 <shapr> would be a sensible mfix for Maybe
12:34:44 <shapr> his epoch and endOfTime are sticking way off the page
12:34:46 <Maddas> heh, Haskell makes me feel stupid :-)
12:34:52 * shapr reformats
12:34:57 <shapr> Maddas: me too, that's why I like it.
12:35:05 <Darius> And isn't that powerSet function the form that will take massive amounts of memory.
12:35:06 <shapr> Maddas: I'd lost that feeling with all the other languages.
12:35:12 <Maddas> shapr: True
12:35:15 <shapr> Darius: if so, fix it!
12:35:30 <Maddas> shapr: It is a bit intimidating until you get at least good enough to walk on your own, though :)
12:36:00 <shapr> I can understand that
12:36:29 <shapr> the day I've learned everything there is to know about Haskell, I'll probably switch to another language.
12:36:45 <Maddas> shapr: Heh
12:37:00 <shapr> happily, I doubt that will be soon.
12:37:21 <shapr> Simon Peyton-Jones' talk at HIM has lead me down the road of type theory, and once again, I feel clueless.
12:37:45 <shapr> after that, there's arrows
12:37:47 <shapr> category theory
12:37:56 * shapr considers making a list
12:38:25 <shapr> Maddas: oh, have you seen the martial arts ranking on http://www.haskell.org/hawiki/HaskellIrcChannel ?
12:38:33 <Maddas> Not yet!
12:38:57 <Maddas> Which belt do you have?
12:39:13 <shapr> blue
12:39:19 <Maddas> ah, I see :)
12:39:37 <shapr> I wouldn't count myself proficient with monads until I can handle monad transformers with no trouble
12:40:28 <shapr> there's a big jump between green and blue
12:40:38 <shapr> anyways, it's just for fun, no seriousness about it
12:41:26 * Maddas nods
12:41:45 <shapr> happily, we have at least one black belt 5th dan on this channel ;-)
12:42:11 <shapr> and Chilli is a 6th dan, though we haven't seen him around here in months
12:42:29 <Maddas> Heh. No need to fear fighters of other languages then! 
12:42:40 <shapr> right! our code-fu is superior!
12:42:53 * shapr lifts some lambda
12:43:10 * shapr flexs his trexs
12:43:24 <Maddas> shapr: That, and your superior weapons 
12:43:58 <shapr> arrows?
12:44:04 <Maddas> Haskell, silly :)
12:44:06 <shapr> oh!
12:44:13 <shapr> right!
12:44:54 <Riastradh> shapr, monad transformers are simple.  They're just monads on piggy-backs.
12:45:13 * shapr envisions a tower of monads
12:50:51 <door> hm, why isn't Char.* available from hugs' command line?
12:52:02 <Igloo> :l Char
12:52:35 <door> oh.. thanks :)
13:01:22 <Maddas> phubuh: ping
13:01:52 <phubuh> pong
13:08:30 <Darius> Oh, to respond to something earlier, googling 'site:haskell.org <term>' is a fairly effective way to search the mailinglists.
13:08:59 <Maddas> phubuh: Mind if I apply a continuation of the query? :)
13:09:13 <Maddas> (That probably is completely wrong)
13:09:25 <Darius> shapr: http://www.haskell.org/pipermail/haskell-cafe/2003-June/004484.html
13:09:39 <phubuh> if I understand you correctly, no, I don't mind :-)
13:13:16 <Marvin--> god I suck
13:14:27 <door> :/
13:14:56 <Marvin--> I'm never going to get this report finished
13:40:22 * shapr yodels
13:40:57 <shapr> Marvin--: ah the voice of optimism ;-)
13:41:04 * phubuh just discovered that his wireless phone works all the way to local pizzeria/coke shop
13:41:31 <Marvin--> shapr: I just looked through a presentation Koen had done at a CoVer meeting and it was basically my project, but...better
13:41:32 <ham[kell]> you got a coke shop?
13:41:36 <shapr> phubuh: oh, that's handy, you can start an office in there
13:41:38 <phubuh> coke as in coca cola
13:41:44 <ham[kell]> isnt that supposed to be illegal?
13:41:44 <phubuh> shapr: haha
13:42:00 <shapr> I wish I could do that
13:42:30 <shapr> hey Marvin--, have you seen PreludeExts.hs?
13:42:42 <Marvin--> shapr: yeah I saw the mail on the list
13:42:53 <Marvin--> haven't looked closer at it
13:43:50 <shapr> I could ask Koen if has any other bits he'd like to contribute
13:44:20 <shapr> Darius: spiffy, thanks for fixing powerset
13:44:37 <Riastradh> ham[kell], no, they stopped putting coke in Coke a century ago, or close thereto anyways.
13:44:44 <shapr> that's exactly the sort of process I was hoping for...
13:44:54 <shapr> one person contributes, another person improves
13:44:56 <Riastradh> At least back then it was _interesting_.  Now it's just coloured sugar-water.
13:45:06 <ham[kell]> :)
13:45:50 <shapr> at this rate I'll mention it on haskell-cafe soon
13:45:56 <phubuh> that's better than non-coloured sugar-free-water!
13:46:02 <Riastradh> I can't understand how people manage to force that bilge down their throats.
13:46:19 <phubuh> I don't even have to force myself, imagine that
13:46:41 <shapr> I wonder where Lor is lately.
13:47:46 <Marvin--> Riastradh: me neither
13:47:58 <shapr> I like Battery
13:48:09 <shapr> it's a bit more exciting than coke
13:49:01 <Marvin--> I like beer
13:49:08 <shapr> oh HXML uses an arrow based combinator library
13:49:17 <shapr> Marvin--: see, I don't understand why people drink alcohol
13:49:20 <Marvin--> if non-alcoholic, I prefer water
13:49:32 <ayrnieu> I prefer sassafras tea or spiced chai tea or oolong tea or something derived from coffee or just coffee.
13:49:45 <Marvin--> shapr: don't try that one, I've seen you drink beer
13:49:47 <shapr> I love stimulants, but imho depressants are a waste
13:49:56 <Marvin--> unless I'm sadly mistaken, *you* bought *me* beer :P
13:50:06 <shapr> ok, it's good for social situations
13:50:08 <shapr> I admit
13:50:14 <shapr> and yes, I did buy you beer
13:50:26 <ayrnieu> (Mochas on the house!)
13:50:57 <Riastradh> Tea et alia are stand-alone, not for drinking with meals or at parties.  (That sentence changes dramatically during tea time, but only then.)
13:51:10 <shapr> but when sitting at home, I'd rather have large amounts of caffeine, taurine, guarana, ginseng, methylphenidate, b vitamins, ginko biloba, etc
13:51:21 <shapr> oh and Bea of course
13:51:36 <shapr> (she's standing behind me ;-)
13:51:46 <phubuh> bea is common swedish slang for bearnaise sauce
13:51:47 <ayrnieu> Riastradh - yes, I prefer just water at such occasions.
13:52:20 <phubuh> which, although very tasty in controlled amounts, is quite yucky when you're eating it in large amounts
13:52:50 <Marvin--> phubuh: you just have to balance it with a proper amount of beef :P
13:52:59 <phubuh> true
13:53:07 <Riastradh> Oxygen and capsaicin are the best drugs.
13:53:26 <shapr> I've wanted to try other xanthines
13:53:28 <phubuh> I ate at IKEA today, like a true Swede
13:54:03 <shapr> I didn't know they sold food.
13:54:04 <Marvin--> mm, roast beef with bea
13:54:08 <Marvin--> phubuh: heh
13:54:22 <phubuh> their restaurant, at least in g√§vle, is surprisingly good
13:54:33 <shapr> well, time to be social
13:54:36 <Marvin--> the bigger stores usually have restaurants, and they're usually decent
13:54:43 <Riastradh> Beef isn't particularly desirable at times like these.
13:54:45 <Marvin--> whee, I got my wlan pcmcia card today :-)
13:55:02 <phubuh> whee
13:55:17 <shapr> this is interesting - http://www.flightlab.com/~joe/hxml/arrows.html
13:55:24 <phubuh> shapr: bye dude
13:59:51 <Marvin--> shapr: yes, this is very interesting
14:00:40 <Riastradh> Yikes.  That's an actually understandable description of arrows!
14:01:09 <Marvin--> Riastradh: that was my spontaneous thought too :)
14:01:15 <basti_> actually yes
14:01:27 * Riastradh pops back into the set of four or five people who actually understand arrows again.
14:01:34 <Riastradh> ...or pushes, perhaps.
14:02:51 <SamB> Riastradh: aren't arrows just a generalization of functions?
14:03:43 <Riastradh> SamB, yes, but understanding the logic and combinators around them is an entirely different matter.
14:10:10 <Marvin--> there's a typo in the page, though
14:10:32 <Marvin--> it says that Filter (\x -> [z | y <- f x, z <- g y]) = Filter (concatMap f g)
14:11:55 * phubuh starts a petition to ban Greek letters
14:12:58 * Riastradh starts a petition to ban more descriptive names that Greek letters traditionally represent.
14:13:27 <Riastradh> Mu, not join!  Eta, not return!  Eslupherum, not fmap...!...oh, wait, that's not a Greek letter.
14:13:37 <Riastradh> Eslupherum is still a better name than fmap.
14:14:06 <SamB> Riastradh: you seek to enslave us?
14:14:23 * phubuh consults gucharmap to no avail
14:14:35 <SamB> what is eslupherum?
14:14:50 <Riastradh> Eslupherum is what Haskell calls 'fmap.'
14:15:08 <SamB> used to call it just plain map.
14:15:22 <Riastradh> No, fmap bears no resemblance to map.
14:16:10 <phubuh> eh?
14:17:01 <phubuh> I thought fmap was a generalized map that works on all functors
14:17:19 <Riastradh> Er, OK, I guess it does sort of resemble map.
14:17:37 <Darius> instance Functor [] where fmap = map
14:17:45 <Riastradh> Bah!
14:31:42 * Heffalump waves
14:34:31 <phubuh> (>>>) ::  a b c -> a c d -> a b c
14:34:34 <phubuh> huh
14:35:06 <Marvin--> should be  -> a b d
14:35:08 <Riastradh> That looks wrong.  Shouldn't it be [[(>>>) :: a c d -> a b c -> a b d]]?
14:35:12 <phubuh> yeah, it should
14:35:21 <Riastradh> ...or, er, yeah, what Marvin-- said, not what I said.
14:39:18 <Marvin--> why isn't the stupid theorem prover doing this case analysis for me
14:42:23 <SamB> Marvin--: what case analyasys? are you refering to the type system?
14:44:46 <Riastradh> Analyasys?
14:51:00 <Marvin--> SamB: oh, my project on encoding haskell in first order logic and using automatic theorem proving
14:51:02 <SamB> Riastradh: whatever.
14:51:24 <SamB> Marvin--: first order?
14:51:36 <Marvin--> SamB: predicate logic?
14:53:15 <SamB> yeah, I knew that.
14:57:40 <ca> removeLeadingZero (v:vs) (v':vs') |v' == 0 && (v == 0) = v':removeLeadingZero vs vs'
14:57:48 <ca> can anyone spot a syntax error here .. 
14:57:49 <ca> :-/
14:59:04 <Marvin--> no?
14:59:15 <ca> ok, something is buggered up then
14:59:31 <clausen> don't you need brackets
14:59:31 <Marvin--> are you sure you have the guards aligned?
14:59:35 <clausen> around (remove ... vs')
14:59:48 <ca>  Syntax error in declaration (unexpected `;', possibly due to bad layout)
15:00:07 <Marvin--> clausen: no, functions bind tighter than operators
15:00:09 <ca> clausen: well ive tried experimenting with those
15:00:16 <Marvin--> ca: what's the next line?
15:01:05 <ca> the next line was working fine before, but now when i remove the first line it still gives me the same error
15:01:26 <ca> this is the original working function 
15:01:27 <ca> removeLeadingZero (v:vs) (v':vs') | v' == 0  =  (v':vs')
15:01:28 <ca> 				  | v' >= v =  vectorSum (scalarVectorProduct (-v' / v) (v:vs)) (v':vs')
15:01:28 <ca>                                   | otherwise = vectorSum (scalarVectorProduct(-v / v') (v':vs')) (v:vs)
15:01:42 <ca> i've got the |'s lined up in emacs
15:02:34 <Marvin--> ca: you have to align the guards
15:02:34 <Riastradh> Ewwwww.  Get rid of all that needless indentation.
15:02:34 <Marvin--> ca: since the indentation is syntax
15:02:39 <Riastradh> And don't use tabs.
15:03:29 <Riastradh> ca, still, that code is hideous with the beastly amounts of indentation.  Just move the first guard onto the next line.
15:03:42 <ca> Riastradh: ok
15:04:19 <Marvin--> yeah, try putting every | on its own line, and just, say, one space away from the first column
15:04:35 <Riastradh> And send [[M-: (setq-default indent-tabs-mode nil)]] to Emacs.
15:05:03 <ca> shall i paste now? because it still wont work
15:05:59 <Riastradh> OK.
15:06:02 <ca> removeLeadingZero (v:vs) (v':vs') 
15:06:03 <ca>     | v' == 0   =  (v':vs')
15:06:03 <ca>     | v' >= v   =  vectorSum (scalarVectorProduct (-v' / v) (v:vs)) (v':vs')
15:06:03 <ca>     | otherwise = vectorSum (scalarVectorProduct(-v / v') (v':vs')) (v:vs)
15:06:03 <ca>     
15:06:10 <Riastradh> Ahhh.  Much better.
15:06:23 <ca> :)
15:06:51 <Riastradh> Are you getting the same error regarding semicolons?
15:07:22 <ca> yes, but hmm i commented out the function before this one and now it works. weird because i didnt touch that function and it was working earlier
15:07:38 <Marvin--> ah, well, sometimes it's the line before, sometimes it's the line after
15:07:45 <Marvin--> bet you have an indentation problem in that function
15:08:13 <ca> rowReduceMatrix (m:ms) =  m | rowReduceMatrix [removeLeadingZero m k | k <- ms]
15:08:21 <ca> thats the line before.. hmm
15:08:40 <ca> cheers guys, sorry for the bother
15:09:06 <Riastradh> Um, I think you mean ||, not |.
15:09:16 <Riastradh> | makes no sense there.
15:09:43 <ca> yeah, i changed it to = 
15:10:01 <Marvin--> um
15:10:15 <Riastradh> = makes no sense there, either.
15:10:23 <Riastradh> = and | are lexical syntax.
15:10:30 <Riastradh> (||) is an operator.
15:11:06 <ca> i had it as = earlier, but then i must have changed it accidentally
15:12:09 <Riastradh> Er.  I was referring to the [[m | rowReduceMatrix ...]], not the [[... m k | k <- ms]]].
15:12:29 <ca> oh
15:13:04 <ca> mm, it should have been :
15:13:04 <Riastradh> The | in [[... m k | k <- ms]]] seems right to me.
15:13:07 <ca> sorry
15:13:21 <Marvin--> makes more sense :)
15:13:31 <Riastradh> Ah, OK!
15:13:36 <ca> thanks :)
15:31:06 <opet> oh no
15:31:11 <opet> new ghc version!
15:31:35 * opet makes his poor machine go through the compilation game
15:31:38 <opet> poor thing
15:32:05 * Marvin-- will make his machine go through the apt-get upgrade game instead
15:33:18 <Igloo> Newer than 6.2?
15:33:33 <SamB> Marvin--: but you don't get to fix compilation errors in that game! </facetious>
15:34:04 <phubuh> you get to fix broken packages though, which is nearly as fun
15:34:06 <Marvin--> SamB: no, I let Igloo fix them instead :-)
15:35:08 <SamB> phubuh: yeah, then sometimes you get to play the compilation game anyway
15:35:21 * Marvin-- disbelieves :P
15:35:26 <Marvin--> I used apt-src for the first time today
15:38:30 <Marvin--> I have no idea what I did, but it seemed to work and the wlan pcmcia card happily said *beep beep* when I plugged it in afterwards
15:38:54 <Marvin--> oh hi Igloo :)
15:39:23 <Marvin--> *argh* fixpoint induction, why didn't I think of that
15:39:31 <Igloo> hello?
15:40:15 <Marvin--> uh, I was just saying hi since I just noticed that you showed up
15:40:25 <Igloo> Ah, OK  :-)
15:42:12 * Marvin-- ponders how much would be screwed up if I added a notion of bottom at this point
15:43:05 <Marvin--> meh, I'll just put it in future work
15:54:39 <ca> um with the \ lambda thingy, can you write those recursively?
15:55:07 <Marvin--> what do you want to do?
15:55:39 <ca> i have some computation i need to do but i dont want to write a seperate function for it
15:56:26 <Riastradh> fix f = f (fix f)
15:56:44 <Riastradh> fix (\f -> <put a lambda expression for your function here>)
15:56:47 <Marvin--> I mean, do you want to write things like   \x -> ... (\y -> ... y ...) ...  ?
15:56:56 <Marvin--> do you mean recursive or nested?
15:57:23 <ca> hmm, lemme figure it out first
15:57:49 <Marvin--> in general, if you want a function to be recursive, you might as well give it a name
15:58:35 <ca> okay
15:59:06 <Darius> There are many combinators that encapsulate patterns of recursion.  If your code has the form of one of them, then that would be a better choice.
16:01:40 <Darius> ca: Why do you onot want to defined a separate function?
16:02:43 <ca> Darius: hm, i am writing a little LinearAlgebra.hs module and each function so far kinda has meaning outside the module
16:03:36 <phubuh> you can pick and choose which symbols to export
16:03:58 <Marvin--> and also, there's this nifty thing called where clauses
16:05:14 <Darius> or let expressions
16:05:58 <ca> alright, i'll just write a function then.
16:06:12 <Marvin--> everything is a function :)
16:06:25 <ca> are you one too?
16:06:28 <Marvin--> yep
16:06:39 <ca> :)
16:06:39 <Marvin--> and right now my domain is the bed, night people
16:06:50 <ca> g'night marvin
16:44:56 * shapr boings
16:45:06 <shapr> hey clausen, have you seen PreludeExts.hs ?
16:45:18 <clausen> no
16:45:20 * esap added new example to PreludeExtsUseExamples.
16:45:25 <shapr> @wiki PreludeExts
16:45:25 <lambdabot> http://www.haskell.org/hawiki/PreludeExts
16:46:31 <shapr> it's the unofficial Haskell Power Tools distribution.
16:46:35 * shapr grins
16:46:53 <clausen> hehe
16:47:02 <shapr> if you have power tools that you wish were in the Prelude, you are invited to add them to the page.
16:47:20 <clausen> powerSet might be useful
16:47:59 <Lunar^> Why isn't box defined on MonadPlus ?
16:49:20 * shapr dunno
16:49:41 <Darius> I think box is meant to be the singleton function.
16:51:39 <esap> Hmm.. do you think my AdjointMonad example would be fit for PreludeExts?
16:52:09 <shapr> I think I can really wrap my head around HXML's arrow stuff
16:52:24 <Lunar^> rmap :: [a -> b] -> a -> [b]  --- hey, we talked about the name of that one here :)
16:52:28 * Darius wonders why it even bothers if it's equivalent to a monad.
16:52:48 <esap> It structures the program in different way than a monad.
16:53:29 <Darius> Define Kleisli composition and you'd have the same
16:53:52 <Darius> @type let a --- b = 3 in 5 --- 2
16:54:15 <shapr> --- fits well with +++
16:54:27 <Darius> @type let (---) _ _ = 3 in (---)
16:54:48 <Darius> @type let f --> g = g . f in (-->)
16:54:49 <lambdabot> let {(f (g $0) (0 (g . f)) $0 --> $0) $0} in (-->) :: (a -> b) -> (b -> c) -> a -> c
18:14:37 * shapr sighs
18:14:46 <shapr> microsoft - http://www.amitech.dk/
18:17:39 <shapr> silly question, is there a general purpose n-dimensional shape tile finder equation?
18:18:23 <shapr> I've been thinking of something like the Sieve of Eratosthenes for tiled shapes in n-dimensions, wondered if someone has already done it
18:19:54 <Cale> shapr: The sieve of Eratosthenes finds primes -- exactly how are you relating it to tiling shapes?
18:20:31 <shapr> the sieve is a lazy filter
18:20:41 <shapr> I think the same thing is possible with n-dimensional shapes
18:21:14 <shapr> each time you find a tile, you get to factor it out of larger shapes
18:41:17 <ham[ogoblin]> bk
18:41:46 <shapr> darcs!
18:41:50 <shapr> always you speak of bitkeeper!
18:42:04 <ham[ogoblin]> who or what is darcs?
18:42:31 <shapr> http://www.abridgegame.org/darcs/
18:43:18 <ham[ogoblin]> funny logo :)
19:32:23 <ham[ogoblin]> shapr what do you want to tile?
19:32:36 <ham[ogoblin]> and have you been looking at escher stuff?
19:32:44 <shapr> nah, 3D tiles
19:33:04 <ham[ogoblin]> i think you can do esherization there also
19:33:23 <ham[ogoblin]> i got a paper from a guy who did texture synthesis with haskell
19:33:28 <ham[ogoblin]> also some esher things
19:37:32 <ham[ogoblin]> i just need to find it withing my thousands of paper s:)
19:39:12 <ham[ogoblin]> shapr dcc ok?
19:39:19 <shapr> I don't have dcc
19:39:49 <ham[ogoblin]> hm its 1.4mb big
19:39:56 <shapr> do you have sendfile?
19:40:04 <ham[ogoblin]> sendfile?
19:40:21 <ham[ogoblin]> what irc are you useing that you dont have dcc?
19:40:49 <shapr> ERC
19:40:55 <shapr> it's an irc client written in elisp
19:41:00 * Cale points out that X-Chat is rather nice.
19:41:05 <ham[ogoblin]> urgs
19:41:08 <ham[ogoblin]> irssi
19:41:13 <shapr> I'm fond of emacs
19:41:16 <ham[ogoblin]> there is no better irc client
19:41:22 * shapr disagrees
19:41:28 <ham[ogoblin]> can you make a shot of your emacs please?
19:41:32 <shapr> sure
19:41:36 <shapr> I have several
19:41:36 <Cale> though if you're used to emacs, I suppose it's pretty cool
19:42:04 <Cale> Does erc handle unicode?
19:42:08 <shapr> http://www.scannedinavian.org/~shae/erc-pal.png http://www.scannedinavian.org/~shae/erc.png
19:42:10 <ayrnieu> I find IRC clients written in (especially 'runtime'-) hackable languages quite nice.
19:42:13 <shapr> those are some examples
19:42:16 <Cale> Êº¢Â≠ó
19:42:32 <shapr> Cale: yes, and I get to switch on the fly
19:42:48 <shapr> I just swap to the irc process buffer and hit C-x C-m p
19:42:56 <Cale> cool
19:42:57 <shapr> it asks me for input and output encodings, and I'm done
19:43:25 <shapr> we've swapped kanji and some other stuff on #emacs
19:43:45 <ham[ogoblin]> hm
19:43:56 <ayrnieu> shapr - ooh, nifty.
19:43:57 <shapr> as you can see from the screenshots, I also use ion for my 'window manager'
19:44:08 <ham[ogoblin]> ion?
19:44:17 <shapr> it's more of an anti-wm
19:44:24 <Cale> yeah, quite a few people at my uni are hooked on ion
19:44:26 * Riastradh plugs Orion.
19:44:31 <shapr> I luv ion
19:44:32 * ayrnieu could certainly use Emacsian Chinese input methods.
19:44:37 <Cale> I can't figure out exactly what it is they see in it :)
19:44:48 <ham[ogoblin]> whats so special about ion>
19:44:48 <ayrnieu> I find ratpoison extraordinary comfortable.
19:44:48 <ham[ogoblin]> ?
19:44:50 <Riastradh> http://www.scsh.net/resources/graphics.html
19:44:57 * Cale is an enlightenment user.
19:45:13 <shapr> Cale: I touchtype well, swapping windows, workspaces, executing new apps, these should all be available on the keyboard
19:45:18 <ham[ogoblin]> i use fluxbox
19:45:52 <ham[ogoblin]> but if i was used to emace more i would use xemacs as my win manager
19:45:52 <shapr> I've remapped my keyboard to have Hyper and Super as well as the standard Alt and Meta
19:46:17 <shapr> ayrnieu: I'm waiting for tengwar to make it into unicode so I can chat in quenya on irc =)
19:46:41 <Cale> I'd like to have Greek
19:46:47 <shapr> should work
19:47:05 <Cale> (i.e. keyboard mappings to type greek unicode)
19:47:09 <shapr> oh
19:47:14 <shapr> I use x-symbol
19:47:17 <ham[ogoblin]> shapr ok anyhow how can i send you the file?
19:47:33 <Cale> http://vx.hn.org/autoshare/screenshot-1.png
19:48:18 <shapr> ham[ogoblin]:  you using win32?
19:48:41 <ham[ogoblin]> shapr yep since my lx box is broken
19:48:53 <shapr> I dunno if there's a win32 implementation of sendfile
19:48:56 * ayrnieu files 'lx' as 'new evil abbreviation for linux'
19:49:11 <ham[ogoblin]> isnt there any pub server i can upload to?
19:49:17 <shapr> ham[ogoblin]: you could just tell me the title of the paper, I can search for it
19:49:24 <shapr> or email it to me :-)
19:49:29 <ham[ogoblin]> ayrnieu its ok i think
19:49:34 <ham[ogoblin]> lx ux ix
19:50:04 <ham[ogoblin]> shapr dont you have a public folder on your ftp server?
19:50:15 <Cale> <RMS> It should be glx!
19:50:21 <shapr> I don't think so
19:50:34 * shapr is getting very sleepy
19:50:51 <ham[ogoblin]> shapr i will find some way so you get it tomorrow ok?
19:51:06 <shapr> sure, no worries
19:51:07 <ham[ogoblin]> you wont read it today anyway i think :)
19:51:12 <shapr> that's true
19:51:25 <ham[ogoblin]> i am really happy now that i can use ogl :)
19:52:03 <shapr> do you have screenshots of your splines?
19:52:17 * shapr falls over asleep
19:52:23 <ham[ogoblin]> not yet
19:52:31 <ham[ogoblin]> i have been in a bar :)
19:52:48 <ham[ogoblin]> but its something that i will do tomorrow or later this eve
19:53:48 <ham[ogoblin]> maybe i will even abuse that bezier patch demo for my homotope mapping ;)
22:20:56 <ca> is there a standard function which takes a list of type a and a predicate p on a such that it returns the first element which doesnt satisfy p?
22:25:37 <stepcut> i think so
22:25:58 <Riastradh> head . dropWhile p
22:26:07 <dennisb> find
22:26:09 <stepcut> find
22:26:12 <stepcut> oh wait
22:26:22 <dennisb> (together with not)
22:26:56 <stepcut> find (not p) list
22:28:14 <stepcut> or something
22:28:36 <stepcut> hrm
22:28:52 <stepcut> find (not . even) [2,4,1,3,5]
22:28:57 <stepcut> Just 1
22:30:14 <stepcut> or: find_not p = find (not . p)
22:30:20 <stepcut> find_not even [2,4,1,4,5]
22:30:27 <stepcut> Just 1
22:30:34 <ca> Riastradh: cool, i just ended up using that one
22:30:59 * ca looks up find
22:31:02 <Riastradh> stepcut, find . (not .)
22:31:16 <stepcut> Riastradh: ah yes
22:31:18 <ayrnieu> lambdabot: (head . dropWhile (<3)) [1..]
22:31:18 <lambdabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
22:31:22 <ayrnieu> lambdabot: @eval (head . dropWhile (<3)) [1..]
22:31:23 <lambdabot> (line 1, column 20):
22:31:23 <lambdabot> unexpected "<"
22:31:23 <lambdabot> expecting simple term
22:31:33 <Riastradh> lambdabot doesn't evaluate Haskell, ayrnieu.
22:31:45 <stepcut> Riastradh: too much ocaml programming  --- no . operator :(
22:32:07 <Riastradh> stepcut, um, you used . anyways.
22:32:51 <stepcut> Riastradh: yeah, but it's not natural for me to think about using it, so I didn't immediately see the more elegant solution, that's all
22:36:36 <dennisb> Doesn't ML use o for function composition?
22:36:53 <SamB> can you not write your own .?
22:37:48 <ayrnieu> ocaml does not create operations as easily as Haskell.
22:37:56 <ayrnieu> not without camlp4, I suppose.
22:38:34 <SamB> oh. Uck. another nail in the coffin (as far as it having any value to me).
22:38:36 <stepcut> ocaml does not use 'o', and you can't write your own using o or . because ocaml does not allow either of those characters in an infix operator
22:38:59 <ayrnieu> sam - well, camlp4 gives it considerable relative power over Haskell =)
22:39:16 <stepcut> camlp4 is quite the powerhouse
22:39:52 <SamB> does it make spaghetti too?
22:39:58 <ayrnieu> sam - yes.
22:41:11 <ca> can i do pattern matching in a lambda expression, like func = \(x:xs) -> ... and then have another line with something like, func [] = [] ?
22:41:28 <Darius> No
22:41:40 <ca> ok
22:41:44 <ayrnieu> use a 'case' expression.
22:41:52 <Darius> Just use pattern matching.
22:42:32 <ca> Darius: i am getting an func multiple definition error
22:43:23 <stepcut> ca: i think you have to do something like: let func = \l -> case l of (x:xs) -> ... ; [] -> []
22:43:29 <SamB> ca: use patterns which are all the same arity?
22:43:53 <ca> SamB: i dont know what that means
22:44:04 <dennisb> ca: if you show the function (for example using http://paste.msunix.org) we can help
22:44:25 <ca> ok, one moment
22:44:26 <Darius> @wiki HaskellIrcPastePage
22:44:26 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
22:50:27 <ca> sorry about that delay, i was trying to format it nicely for pastebin.com but i couldnt get it to work .. http://tinyurl.com/2ld4w
22:50:40 <ca> its the function on the bottom
22:54:04 <SamB> move the (x:xs) to the left of the = and get rid of the lambda
22:54:37 <ca> ok
22:55:03 <ca> nice, it worked
22:55:16 * SamB thinks he is quite possibly still a newbie
22:55:25 * ca nods
22:56:13 <ca> so i dont need to use lambda that way, i can just write a function definition? 
22:56:30 <SamB> yeah
22:56:44 <ca> thanks!
22:58:10 <SamB> quite welcome. I'm almost always happy to be of service.
23:00:52 <Darius> ca: Why did you think it was right to use pattern matching for the second clause (the [] case) but not for the first?
23:02:00 <ca> hm, intuition :P
23:02:48 <ca> i thought i could write it that way using lambda, match the different arguments [] and not [] 
23:02:49 <SamB> intuition needs some honing, it seems
23:03:06 <ca> SamB: it just needs more experience
23:03:28 <SamB> ca: yes. honing means sharpening.
23:03:48 <Darius> ca: You also could always simply try and see.
23:04:06 <ca> Darius: i did and i got an error, as i reported
23:09:40 <Darius> Instead of "reporting an error" why didn't you check your assumptions?
23:11:45 <ca> i thought i did, when i asked my first question .. but ok, point taken
23:13:54 <Darius> Apparently not.  I meant check your assumptions through experimentation or looking something up.
