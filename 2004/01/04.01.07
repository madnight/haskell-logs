01:01:17 <phubuh_> hey hey
01:01:26 * phubuh_ is back in school
02:51:01 <shapr> g'day seafood!
02:53:06 <phubuh> hi
02:54:14 <Matt-W> Hi
02:54:22 <shapr> good morning #haskell!
02:54:30 <shapr> it's still morning for six minutes here.
02:54:49 <shapr> how are you irc'ing from school phubuh?
02:55:02 <shapr> hello Matt-W
02:55:07 <Matt-W> hello shapr
02:55:15 <shapr> how's code treating you?
02:55:19 * Matt-W is new here, as people might have noticed
02:55:25 <phubuh> computer class :-)
02:55:35 <phubuh> well, I'm at home now
02:55:50 <shapr> Matt-W: I thought you might be new here. Are you learning Haskell? or looking for other users?
02:56:11 <Matt-W> shapr: I know a reasonable amount, I'm just looking to get more involved
02:56:40 <Matt-W> Got the Haskell bug at University, but they won't let me use it at work :-(
02:56:41 <shapr> this is a good place to do that.
02:56:48 <shapr> oh, I know that feeling.
02:57:20 <Matt-W> still, C++ and Perl aren't all that bad
02:57:21 <shapr> my fiancee and I run our own company, and I haven't found a way to sell Haskell to our clients yet.
02:57:55 <shapr> so, how do you want to get involved?
02:58:08 <Matt-W> Well, I doubt I'll be able to sell Haskell to my boss any time soon because we need code that goes very, very, very fast, so we need C unfortunately
02:58:26 <phubuh> you might be able to sell objective caml :-)
02:58:28 <Matt-W> Oh, just do things, find a project or two to poke around with, any excuse to write more Haskell really
02:58:36 <shapr> but, you may be able to wrap some small bits of fast C code inside some elegant Haskell code
02:58:47 <shapr> anyways, that's my Haskell bias talking
02:58:58 <Matt-W> Perhaps in my next job :-)
02:59:15 <shapr> yes, maybe so
02:59:41 <shapr> lambdabot is our fun irc code-toy
02:59:55 <shapr> haskell-libs.sf.net is the cvs-wiki for the channel
03:00:22 <shapr> there are quite a few 'standard' libraries that don't exist for Haskell yet.
03:00:34 <Matt-W> I noticed
03:00:39 <shapr> it's getting better, but still slowly.
03:01:36 * phubuh discovers how fun GUI design is
03:01:57 <Matt-W> Well at the moment I'm working on making Haddock produce man pages, but in reflection that's not necessarily all that useful. I'm still going to do it though
03:02:06 <shapr> I think it is useful
03:02:08 <shapr> I'd use it.
03:02:15 <Matt-W> good
03:02:21 <ejt> y, me too
03:02:25 <Matt-W> It wouldn't be an entirely wasted effort then :-)
03:04:42 <shapr> man pages would be faster to get to
03:04:55 <Matt-W> Perhaps
03:05:22 <Matt-W> I've noticed that man pages don't seem entirely designed to deal with languages like Haskell, there seems a general assumption that you're using it for C
03:05:39 <Matt-W> But I should be able to come up with something
03:06:15 <shapr> I want to try it when you have some working code :-)
03:07:22 <Matt-W> working code is a help. I'm taking the approach of first writing a man-page generation library, then writing an output method for Haddock which uses it
03:09:01 <shapr> another possible approach is to use one of the DocBook to man page conversion utilities
03:09:33 <shapr> though the DocBook code in haddock isn't that close to working.
03:10:51 <Matt-W> yes, that's another way, but I'd have to learn DocBook to fix the DocBook code
03:11:18 <Matt-W> I suppose I could have a go at that next if nobody else does it first
03:12:01 <shapr> well, if you're doing it for fun, you should choose whatever seems like the most fun.
03:12:28 <shapr> that's the way I approach writing Haskell code, and probably why I enjoy it more than my for-pay Python code.
03:12:59 <shapr> g'day Pseudonym 
03:13:19 <shapr> mmmm, coffee
03:13:42 <shapr> Matt-W: so, what's your speedy-code-requiring day job? or is NDA'd?
03:14:38 <Matt-W> I'm a developer for a company who produce transparent caches for peer-to-peer networks
03:14:47 <shapr> oh, that's neat.
03:15:10 <Matt-W> It's very frustrating at times
03:15:26 <shapr> how so?
03:15:45 <Matt-W> buggy p2p clients mostly
03:15:53 <shapr> oh
03:15:54 <Matt-W> each of them seems to have its own idea of what the protocol actually is
03:16:12 <Matt-W> sometimes it's amazing any of them work at all
03:16:38 <shapr> I've heard the win32 p2p clients are often infested with spyware.
03:16:47 <Matt-W> I'd be tempted to write one in Haskell, but the company might object if I use what I've learned of the protocols from them to write an opensource product
03:17:01 <Matt-W> yes, that's quite common, they seem to think it'll make them money
03:17:13 <shapr> on the other hand, your company writes a caching product, not an actual client
03:17:17 <shapr> at least you could write a sane client :-)
03:17:53 <Matt-W> I could, but I really can't be bothered
03:17:59 <Matt-W> I have better things to do
03:18:38 <shapr> it'd make more sense to have an IPv6 looping file multicast for each unique hash, that anyone could subscribe to
03:19:00 <Matt-W> only when people actually have IPv6 support...
03:19:08 <shapr> right, there is that small obstacle
03:19:39 <shapr> speaking of which, I wonder if freenet6 has come back
03:19:53 <shapr> aha
03:20:03 <shapr> brb
03:21:09 <shapr> happiness, I'm on via IPv6 now.
03:21:13 <Matt-W> wb
03:21:29 <Matt-W> oh yes, I see you've got an IPv6-ish host thingy
03:21:39 <harsha123> hey shapr! 
03:21:49 <shapr> hey harsha123, what's up?
03:21:58 <harsha123> nothing much..killing time..!
03:22:11 <harsha123> tweaking emacs.. :)
03:22:11 * shapr shoots time
03:22:17 <shapr> ah, that's always fun
03:22:37 <shapr> I still haven't investigated adding IPv6 support to GHC
03:22:42 <harsha123> shapr: how do i switch to an IPv6 address/host?
03:23:17 <harsha123> shapr: any link ?
03:23:22 <shapr> harsha123: modprobe ipv6 && apt-get -uf install freenet6 && M-x erc-select irc.ipv6.eu.freenode.net
03:24:22 <harsha123> great lemme do that.. 
03:25:27 <shapr> there are three IPv6 freenode servers, .eu .us and .au I would guess that .eu is fastest from .in
03:26:50 <harsha123> "Setting up freenet6 IPv6 tunnel (sit1): Status code from server: 501 Invalid IPv4 address
03:26:52 <harsha123> No ipv6 tunnel has been set (use -h for help)"
03:26:57 <harsha123> shapr: whats this error?
03:27:52 <Heffalump> why does a compiler need IPv6 support?
03:30:39 <Matt-W> if it's got built-in distributed compiling?
03:30:53 <Matt-W> which is unlikely
03:31:04 <shapr> Heffalump: er, the runtime system
03:31:05 <Heffalump> yesh, ok :-)
03:31:14 <Heffalump> shapr: errm, surely that's a job for libraries?
03:31:24 <shapr> sure, ok
03:31:58 <harsha123> shapr: any idea whats that error? 
03:32:16 <shapr> er, I remember I had to edit /etc/freenet6/tspc.conf
03:32:18 <shapr> I think
03:35:19 * shapr creates a userid on freenet6.org
03:36:24 <harsha123> should i change the server name ?  how do i set an ipv6 tunnel ?
03:36:25 <shapr> I'd like to try running our internal LAN on IPv6 and our gateway as a 6to4 tunnel
03:36:54 <shapr> harsha123: ohh, do you have a public IPv4?
03:37:12 <harsha123> shapr: yes 
03:37:46 <shapr> hm, the error message looks like it's saying you have 192.168.*.* or 10.*.*.* or whatever the Class C address is.
03:39:00 <harsha123> hmmm.. but all the packets from my box get NAT'ed to a Public IP
03:39:16 <shapr> then you need to set up the IPv6 tunnel on the NAT box
03:39:18 <harsha123> werid.. howz that bearing a Class C address
03:39:45 <harsha123> shapr: ok
03:40:18 <shapr> there are three private address sets, I can remember the class A and class B, but I always forget the class C.
03:40:27 <shapr> 172.something maybe?
03:40:48 <harsha123> no 192.*.*.*
03:41:10 <harsha123> 192.. is class C
03:41:30 <shapr> oh, I must be confused.
03:42:50 * harsha123 is sure about that :)
03:43:33 <shapr> then, what's the class B private address?
03:43:52 * shapr grabs a handy TCP/IP book
03:44:07 <harsha123> hey no.. private addresses belong to class C
03:44:15 <harsha123> ie the internal network
03:45:59 <harsha123> and /whois harsha123  shows my public IP..
03:47:46 <shapr> private IPv4 address ranges: 10.0.0.0 - 10.255.255.255 is the Class A; 172.16.0.0 - 172.31.255.255 is the Class B; 192.168.0.0 - 192.168.255.255 is the Class C
03:48:43 <harsha123> yeah right...but you said 172... was class C
03:48:45 <harsha123> :)
03:48:54 <shapr> yup, I was confused.
03:54:10 <det> shapr: scannedinavain.org still down ?
03:54:41 <shapr> det: yes
03:54:49 <shapr> but hopefully I'll get a phone call today
03:54:59 <shapr> hei smkl
03:55:25 <shapr> det: do you want access to the darcs repo on ScannedInAvian.org ? I can make my local repo accessible.
03:55:45 <smkl> heip?hei
03:56:17 <shapr> smkl: um, vad händer? :-)
03:58:31 <det> shapr: I dont imagine I would contribute to anything :)
03:58:48 <det> shapr: I was thining of our conversation yesterday about backup MX
04:00:47 <det> thinking*
04:06:31 <det> shapr, what ipv6 server do you use ?
04:07:31 <det> n/m
04:11:47 <Heffalump> shapr: my darcs question is this
04:12:04 <Heffalump> suppose you have two branches, let's call them A and B
04:12:20 <Heffalump> and they diverge at a certain point, and branch A has patch alpha and branch B has patch beta
04:14:24 <Heffalump> if we pull patch alpha onto branch B, a merge between alpha and beta might be necessary
04:15:09 <ejt> yes
04:15:32 <Heffalump> which might require manual intervention
04:15:40 <ejt> yes
04:15:43 <Heffalump> thus generating some extra information that branch B will record
04:16:21 <Heffalump> now, suppose we pull patch beta onto branch A. Again, a merge with manual intervention will be required, but the work we did for branch B can be used again here. Does darcs work this out automatically?
04:17:35 <ejt> it just tries to apply the patch, and if it doesn't apply cleanly drops back to a manual method
04:18:31 <Heffalump> ok, so it doesn't notice that branch B already contains enough information to do the merge?
04:18:31 <ejt> ie. the patches in B which includes the  B version of alpha
04:20:06 <ejt> have you read the 'theory of patches' section ?
04:20:09 <Heffalump> yeah
04:20:20 <ejt> Tom Lord also had a lot to say about these situations
04:20:34 <Heffalump> it's not very clear about what darcs actually does (apart from how it does unwinding for merges)
04:20:53 <ejt> I'm still reading the code myself, so not completely sure
04:44:29 <shapr> Heffalump: I don't think I can answer your question until I know how darcs handles branches. Does it handle them at all?
04:44:48 <Heffalump> in separate repositories, yes
04:45:41 <shapr> okay, in that case, isn't the question whether a manual merge create an actual patch? if it does, you should be able to apply that patch to the other repo, yes?
04:46:10 <Heffalump> I'm really asking whether darcs automatically notices said patch exists and uses it
04:48:29 <shapr> I don't think darcs can use any information not in the current repo. If you push a patch that contains a manual merge that you did elsewhere, it should work just fine.
04:49:33 <shapr> type repo = [Patch], pull :: repo -> Patch -> Maybe repo
04:49:45 <shapr> that's a gross simplification of darcs, yes?
04:50:29 <shapr> Heffalump: of course, you could specifically create said situation and see what happens :-)
04:52:00 <shapr> sadly, no one has responded to my message about implementing refactoring in terms of darcs patches. I was hoping David would have something to say about that.
04:52:26 <shapr> I still think that's the Right Thing (tm) to do in that situation.
04:54:53 <shapr> hello troon2 
04:55:05 <shapr> @arr
04:55:06 <lambdabot> I want me grog!
05:20:35 <shapr> hey SyntaxNinja 
05:21:14 <SyntaxNinja> y0
05:22:02 <shapr> hey dnm, ltns
05:22:59 <dnm> shapr: Hey there!
05:23:55 <dnm> shapr: How goes it?
05:24:03 <shapr> dnm: life is good, how are you?
05:24:11 <dnm> Not bad.
05:24:20 <shapr> still doing EFF?
05:24:38 <dnm> Bored, up late, and ought to be working on a paper, and on too many IRC channels, procrastinating. ;]
05:24:39 <dnm> Yep!
05:24:48 <shapr> interesting paper?
05:24:54 <dnm> What are you up to these days.
05:25:13 <shapr> zope for money, haskell for fun
05:25:17 <shapr> same old stuff
05:25:18 <dnm> Yeah, I hope so. Meant for a somewhat lay audience, this draft/version anyway, but the end paper will be for geeks like me.
05:25:38 <dnm> How's that going?
05:25:56 <shapr> the zope is fine, but I'm fighting to figure out the correct structure of a network server in Haskell.
05:26:44 <shapr> written any cool code lately?
05:27:55 <dnm> Nope.
05:28:02 <dnm> Too busy writing documents for work.
05:28:22 <shapr> anything noteworthy?
05:28:40 <dnm> Hacking has been contained largely to fanciful idea creation, a small little bit of poking on a friend's project to speed up a compression program, and investigating new CASs.
05:28:55 <dnm> Nothing yet published, so I'd rather not say just now.
05:29:04 <dnm> That's for other people to decide.
05:31:02 <harsha123> shapr: how does "dope" for money sound? ;) :p
05:31:55 <shapr> dope for money?
05:32:09 <harsha123> hehhe..just kidding!
05:32:42 <harsha123> zope for money... with a pun!
05:32:50 <shapr> oh, I get it :-)
05:32:56 <harsha123> no offence meant though!
05:33:30 <SyntaxNinja> I successfully set up a source code mirror w/ tla (arch) yesterday
05:33:32 <SyntaxNinja> :)
05:33:55 <shapr> cool!
05:34:09 <shapr> we are SCCS expert on #haskell
05:34:14 <shapr> cvs, arch, darcs
05:35:20 <ejt> is 'frequency' a standard library fn ?
05:35:36 <shapr> @type frequency
05:35:41 <shapr> guess not
05:36:32 <SyntaxNinja> I've used svn too :)
05:37:08 <shapr> I wonder which has the best combination of features.
05:37:15 <shapr> well, it's #haskell, so I'll stick with darcs
05:38:20 <ejt> oh, it's part of quickCheck
05:38:29 <shapr> oh, that one
05:38:53 * ejt slaps shapr
05:39:07 * shapr whines
05:39:16 <shapr> ejt: is it code I wrote?
05:40:06 <shapr> ejt: http://www.haskell.org/ghc/docs/latest/html/libraries/doc-index.html
05:40:12 <shapr> frequency is listed under F
05:40:54 <ejt> ah, thx,I didn't know there was an index
05:41:17 <shapr> I do wish @type pulled from that index
05:41:26 <shapr> but I've never gotten around to finish the HaddockModule for lambdabot 
05:42:34 <shapr> oh, brb
05:45:15 <shapr> dang, I was hoping that would fix my IPv6 reverse DNS
05:51:36 <phubuh> mm, I love having a hamburger bar on the way home from school
05:52:34 <shapr> probably not conducive to low cholesterol though
05:52:52 <phubuh> true
06:41:09 <Segora> re
06:44:29 <det> does 2001:470:1F01:185::/64 mean I have 2001:470:1F01::/64 or would that be a /48
06:46:03 <SyntaxNinja> shapr: we should get lunch.  what are you doing today?
06:46:12 <SyntaxNinja> and why are you always up at around the smae time I am?
06:47:06 <Igloo> Are you back in Sweden again?
06:48:15 <Heffalump> that would be a /48 I think
06:49:34 <SyntaxNinja> Igloo: no
06:49:49 <SyntaxNinja> I was hoping he'd come here. there's a nice place around the corner ;)
06:50:29 <SyntaxNinja> Igloo: you don't have any acquaintance with my co-worker Mark Carroll, do you?
06:50:35 <SyntaxNinja> (he just had a 2nd baby, btw)
07:01:55 <Igloo> The name rings a bell
07:02:09 <SyntaxNinja> I understand that you're both from the same small island
07:02:12 <Igloo> Probably just from the lists though
07:02:22 <Heffalump> oh, then we definitely should know him
07:02:33 <Heffalump> IM, there's only 56 million people on it
07:03:13 <Smerdyakov> I think "IM" is not a poor choice for that use, since it means "instant messaging" to most people.
07:03:17 <Smerdyakov> s/not/now
07:03:25 * phubuh digs the portfolio at http://www.outerside.com/
07:04:13 <Darius> Well then it's a good thing God invented context.
07:04:18 <Heffalump> most people are too obsessed with "instant messaging" and should be trained out of it :-)
07:04:47 <Smerdyakov> "Obsessed"? How so?
07:05:08 <Heffalump> oh, never mind, I'm just trolling
07:05:47 <SyntaxNinja> what does IM mean in this context anyway?
07:06:07 <SyntaxNinja> Igloo: your name rang a bell to him too. probably from lists as well.
07:06:51 <Igloo> :-)
07:07:09 <Heffalump> "I mean"
07:07:22 <Heffalump> what's his background in the UK?
07:07:43 <Heffalump> s/the UK/GB/
07:08:24 <SyntaxNinja> went to Cambridge for undergrad
07:08:36 <SyntaxNinja> I think he lived in a handful of places growing up. I don't recall exactly
07:09:30 <shapr> SyntaxNinja: hah, let's have lunch in MY country of residence this time!
07:09:38 <Smerdyakov> I think I'm going to Edinburgh for a conference in May.
07:10:07 <Smerdyakov> I think I might even have to present a paper. :)
07:10:21 <SyntaxNinja> I liked Edinburgh a lot
07:10:35 <Heffalump> I haven't been to Edinburgh for years
07:10:44 <shapr> SyntaxNinja: ok, let's have lunch in your country first, then the next time can be in my country.
07:10:59 <shapr> SyntaxNinja: signs point to yes for summer.
07:11:01 <SyntaxNinja> shapr: simple question: Where was the last place we had lunch?
07:11:03 <Heffalump> Smerdyakov: paper on what?
07:11:22 <Smerdyakov> Heffalump, generating test cases with full coverage using a model checker
07:11:34 <shapr> SyntaxNinja: at that mall in Stockholm, with SPJ
07:11:35 <Heffalump> how is full coverage defined?
07:11:35 <shapr> no wait
07:11:51 <shapr> SyntaxNinja: we had lunch at the same table moments before you got onto a plane, right?
07:11:51 <Smerdyakov> Tickling every reachable code point
07:12:00 <SyntaxNinja> shapr: Right! in YOUR country.
07:12:05 <shapr> oops
07:12:06 <shapr> :-)
07:12:08 <SyntaxNinja> :)
07:12:36 <shapr> ok, next time lunch is in the US.
07:12:55 <SyntaxNinja> cool
07:13:00 <shapr> Smerdyakov: does your paper apply to Haskell as well? I'd be interested in such a thing.
07:13:09 <SyntaxNinja> I just got an awesome food processor, so I'll cook.
07:13:13 <shapr> yay!
07:13:18 <shapr> since I can't cook at all...
07:13:20 <Smerdyakov> shapr, you can apply the technique if you write a suitable model checker.
07:13:36 <shapr> does your paper apply to either HUnit or QuickCheck?
07:13:49 <shapr> I wonder if QC counts as a model checker.
07:13:53 <Smerdyakov> Probably both.
07:14:10 <Smerdyakov> Anything where you want some tests that will exercise all the code.
07:14:18 <shapr> ok, what's the url to your paper?
07:14:38 <Smerdyakov> Currently unpublished. Camera ready version is due at the beginning of February. :)
07:14:44 <shapr> oh
07:14:51 <Smerdyakov> Being the most junior author, I'd prefer not circulating it now, not knowing the "rules."
07:15:00 <shapr> fair enough
07:15:19 <Smerdyakov> But it's a really simple idea.
07:15:44 <Smerdyakov> The guys I worked with wanted to try for a software engineering paper that applied their existing stuff in a simple but useful way.
07:15:45 <shapr> well, if it's NDA'd, I'll try to remember to read the released paper.
07:16:57 <Smerdyakov> It's really a simple idea: Go through each code location and ask the model checker if it's reachable. If it is, you get a trace that exercises it. Keep doing that on locations that you're not sure are reachable and eventually you have your test set.
07:17:43 <shapr> oh hey, I bet I could fake that with a separate GHC profile for each unit test, then combine the profiles.
07:17:56 <shapr> Smerdyakov: that is a nice idea.
07:18:04 <Heffalump> surely reachability is undecidable?
07:18:29 <Smerdyakov> Yup, but an overly conservative test set can't hurt.
07:19:24 <Smerdyakov> Though I'm not sure if that really describes what we do...
07:19:39 <Heffalump> but there may be some code that in truth is unreachable, but for which you can't figure this fact out. What test data do you generate?
07:20:36 <Smerdyakov> I think that now it will give up (possibly after running for a long time) if it can't figure out whether something is reachable.
07:21:40 <shapr> I wonder if TH could be used to generate separate GHC profiling info for each HUnit or QuickCheck test
07:21:50 <Smerdyakov> The model of execution used is certainly sufficiently abstracted enough that traces it's sure are possible may not be, based on interactions with outside code, etc..
07:22:20 <Smerdyakov> shapr, this method doesn't rely on profiling information at all, in case you might be thinking that.
07:22:35 <Smerdyakov> shapr, unless you just want a control flow graph?
07:22:48 <shapr> no, I wasn't thinking that, I was just thinking how I could easily get the same results with GHC.
07:23:19 <Smerdyakov> Implementing a model checker that can run tractably on real programs is actually not a walk in the park. :)
07:23:21 <shapr> even so, GHC profiling data will only give a subset of coverage data
07:23:53 <Smerdyakov> You'll want a proof-generating theorem prover in there somewhere if you try to use predicate abstraction and refinement.
07:24:39 <shapr> maybe Marvin--'s SnabbProve
07:26:27 <Smerdyakov> You can use the same ones we use if you're willing to communicate through pipes. :-)
07:39:27 <shapr> ozone: you still alive?
08:05:38 * shapr bounces merrily
08:05:59 <shapr> yay, our most recent client website is online, and the client seems happy.
08:07:10 <Igloo> Cool
08:09:05 <shapr> anyone know how to convert .rm videos into something more open like mpg?
08:09:23 <shapr> hei esap 
08:09:27 <esap> Hi!
08:09:32 <Heffalump> RealPlayer and a video camera?
08:09:39 <shapr> esap: have you read Neal Stephenson's book Quicksilver?
08:09:41 <shapr> Heffalump: hah!
08:09:53 * Heffalump got it for Christmas
08:09:55 <Heffalump> haven't read it yet
08:09:59 <shapr> so did I
08:09:59 <esap> shapr: no, I haven't.
08:10:04 <shapr> I've gotten a few pages in...
08:10:22 <shapr> amusingly, I was reminded of esap.
08:17:12 <ham[let]> hiho
08:18:12 <shapr> hello ham[let] 
08:18:26 <shapr> esap: so, if you get the chance to read Quicksilver, I think you'll like it.
08:18:35 <ham[let]> has anyone seen anything like visual programming with haskell yet?
08:18:54 <Smerdyakov> What would that mean, ham[let]?
08:18:56 <ham[let]> i need some graph editing tool for my thesis
08:19:07 <shapr> I vaguely recall seeing something like that, but I don't have time to google for it right now.
08:19:09 <Smerdyakov> No! Use GraphViz!
08:19:09 <esap> shapr: have to put that one on my list of things to read.
08:19:10 <Darius> You may want to look at Vital.
08:19:23 <Smerdyakov> If you're laying out graphs visually, you are in the Stone Ages. :)
08:19:27 <ham[let]> the prob with graph viz is that i can extend it
08:20:22 <ham[let]> cant :)
08:20:42 <ham[let]> and that its not interactive really
08:21:16 * Igloo has springgraph vcg tulip down as OS graphviz substitutes, but hasn't looked at them
08:21:19 <Darius> Well there's dotty and lefty.
08:21:38 <ham[let]> Igloo ah cool can you have a look at tulip?
08:21:49 <ham[let]> i have also seen that but havent dled it yet
08:22:02 <Igloo> Not now, no
08:22:09 <ham[let]> no in general
08:22:27 <Igloo> Well, not until I need to draw a graph again  :-)
08:22:35 <Lunar^> shapr: here?
08:22:37 <shapr> Lunar^: yah!
08:22:53 <Lunar^> shapr: zip() is not defined in Python Scripts ?
08:23:01 <ham[let]> but there is no such tool written in haskell is there?
08:23:05 <ham[let]> btw 
08:23:14 <shapr> Lunar^: it is
08:23:20 <ham[let]> Igloo daVinci is a tool that connects to haskell
08:23:28 <shapr> Lunar^: what version of Python?
08:23:41 <Lunar^> shapr: Zope 2.6.2, Python 2.1
08:23:48 <ham[let]> http://www.pms.informatik.uni-muenchen.de/mitarbeiter/panne/haskell_libs/daVinci.html
08:24:04 <Darius> I suggested Vital.  I don't know what language it's written in, but it may be what you want.  Though it's not a graph -visualization- tool.
08:24:39 <Igloo> Which may actually be pretty soon if I want to look at type derivation trees, actually
08:24:39 <esap> shapr: the book is about Newton and Leibniz? hmm...
08:24:44 <ham[let]> k thanks let me see
08:25:32 <ham[let]> Darius got any url cause vital is not a good string to search for :)
08:26:34 <shapr> Lunar^: zip([1,2,3],[1,2,3])
08:26:54 <Lunar^> shapr: Zope says "not in global"
08:26:55 <Darius> There's a link on the libraries and tools section of Haskell.org
08:27:08 <shapr> huh
08:27:12 <shapr> hmm
08:27:43 <shapr> Lunar^: PythonScrip?
08:28:56 <ham[let]> Darius thx
08:29:02 <Lunar^> shapr: yes
08:30:09 <ham[let]> Darius heh really funny cause i stumbled on a paper of that person earlier this day :)
08:30:20 <ham[let]> though thats not really what i need
08:32:42 <shapr> Lunar^: researching...
08:32:56 <Lunar^> shapr: thanks :)
08:35:18 <ham[let]> why isnt there something like eclipse for haskell?
08:35:34 <shapr> we have emacs.
08:35:42 <shapr> ok ok, that's not a good answer.
08:35:49 <shapr> ham[let]: because no one has written such a thing yet.
08:35:50 <Lunar^> ham: Soon soon
08:36:04 <shapr> I am eagerly awaiting the next release of Darius's LVM interpreter.
08:36:06 <Lunar^> shapr: It's part of sebc thesis :)
08:36:13 <ham[let]> lvm?
08:36:20 <shapr> Lazy Virtual Machine
08:36:21 <Darius> Next release? When was the first release? ;)
08:36:33 <shapr> Darius: the next release is the first release isn't it? :-)
08:36:33 <ham[let]> i also could need something like that for my theis
08:37:12 <shapr> Hemacs would be possible right now, if dynamic loading didn't require separate type tables for the static and dynamic parts.
08:38:39 <shapr> Lunar^: zip is not available in the standard Zope, no one seems to know why. I'm checking the PythonScript sources to see if there are docs.
08:39:11 <Lunar^> shapr: I was thinking that you'd had already it that point before
08:39:20 <Lunar^> s/it/hit
08:39:55 <shapr> Lunar^: you may want to hang out on #zope also, though there is a lot of chatter.
08:40:04 <shapr> Lunar^: I'm also on #plone and #archetypes
08:40:12 <Lunar^> shapr: A friendly ear is better ;)
08:40:19 <shapr> yes, that's true.
08:40:49 <Lunar^> And I'm anger against Zope is slowly slowly building
08:41:05 <shapr> Zope has its good points. I still wish there were something like it written in Haskell.
08:41:18 <Lunar^> shapr: That would be hard to do
08:41:22 <shapr> why?
08:41:36 <Lunar^> shapr: Zope is based on uncheckable assumptions
08:41:54 <shapr> how so?
08:42:02 <Lunar^> shapr: The whole acquisition thing makes type check irrelevant
08:42:54 <shapr> that's true, but I was thinking more about some sort of Haskell-style web application framework
08:43:13 <Lunar^> But it would hardly be "like Zope"
08:43:15 <shapr> acquisition is nice for OOP, but not so nice for FP.
08:43:26 <shapr> that would be a benefit in many parts :-)
08:43:42 <shapr> it's nearly impossible to unit test Zope
08:43:43 <Lunar^> I don't trust acquisition for anything
08:44:10 <Lunar^> Bad for security, bad for debugging, bad for namespaces
08:44:14 <shapr> I use acquisition in lots of places, but you have to really cover your ass, much like anything in dynamic OOP.
08:45:13 <shapr> debugging irritates me most
08:45:27 <shapr> it's extremely hard to find out what has just broken, much less why.
08:45:59 <Lunar^> especially for a typo
08:46:03 <shapr> yup
08:46:21 <Lunar^> That definitely makes me angry...
08:46:24 <shapr> my solution is to write lots of separate pieces that I can at least vaguely test
08:49:01 <esap> Why would acquisition not work for FP?
08:49:21 <Lunar^> static type checked FP
08:49:22 * esap thinks OO and FP are dual, so everything should work in both :-)
08:49:41 <shapr> you could fake it with implicit parameters
08:49:54 <shapr> but the way it's done in Zope, all acquisition happens at runtime.
08:50:11 <Lunar^> (that's why it's so slow, btw)
08:50:28 <shapr> at some level, Python is a lot like Template Haskell, everything in Python happens at 'compile time'
08:56:03 <shapr> oooh, chalmers has New PhD positions.
08:56:40 <shapr> gee, will I finish my degree by sept 1st 2004?
08:59:49 <Smerdyakov> You a degree get?
09:00:31 <shapr> Smerdyakov: nowhere close.
09:00:44 * Smerdyakov ponders the differences in European vs. American PhD's.
09:01:08 <Smerdyakov> Those crazy Europeans advertise new positions, while American schools always accept a roughly constant number of students each year.
09:01:17 <shapr> happily, #haskell gives me many of the benefits of doing a PhD at chalmers.
09:01:47 <esap> what would those benefits be?
09:02:27 <shapr> I get to talk to smart people who really enjoy writing/talking/reading FP
09:02:45 <Smerdyakov> I assume you realize that this is not the essence of any academic degree. :P
09:03:19 <shapr> I thought the point of a degree was to learn stuff in your chose subject?
09:04:03 <Smerdyakov> Sure, and you don't do that by talking to people alone.
09:04:23 <shapr> right, but everything else involved I can do by myself.
09:04:38 <Smerdyakov> Most people can't.
09:05:09 <Smerdyakov> You're going to do at least half a dozen research projects on sundry topics and write publishable quality papers on them, to simulate taking classes?
09:05:26 <Smerdyakov> And then you're going to write a 100-200ish page dissertation, with no one to push you to get it finished?
09:05:32 <Smerdyakov> And teach a class or two?
09:06:04 <phubuh> he didn't say hanging on an IRC room was a perfect substitute for getting a degree
09:06:06 <shapr> those things aren't the essence of a degree either.
09:06:10 <Smerdyakov> <shapr> right, but everything else involved I can do by myself.
09:06:28 <harsha123> shapr: you going to chalmers? :)
09:06:30 <Smerdyakov> shapr, they are for a PhD. It's career training, and you can't learn without doing.
09:06:32 <shapr> actually, I would like to publish papers on FP subjects, and I have some ideas that I'm investigating.
09:06:43 <shapr> Smerdyakov: I already have a career.
09:07:00 <shapr> I thought a PhD was training to become a higher level academic?
09:07:18 <Smerdyakov> The fact that you aren't interested in the career PhD's train you for doesn't mean that you already know the skills it teaches.
09:07:28 <Smerdyakov> Yes. "Higher level academic" is a career with identifiable skills required.
09:07:38 <shapr> I agree that you can't learn without doing, therefore I am doing.
09:08:05 <Smerdyakov> And what _I_ said was that it is supremely unlikely that you'd push yourself to do what people do to earn PhD's in CS.
09:08:33 <shapr> you may be right, I'll get back to in ten years and tell you how it went ;-)
09:08:36 <Smerdyakov> While also saying that the things themselves have value, not just "knowledge" you gain in the end.
09:11:12 <shapr> you've brought up a good point, maybe I should write at least essays on the various software books I've read.
09:11:51 <Smerdyakov> They make us do that in miniature a lot in classes.
09:11:53 <shapr> do you know how the sundry topics are chosen for papers?
09:12:05 <Smerdyakov> The professor assigns papers. Each student has to write a summary of each. Then we discuss them in class.
09:12:29 <shapr> cool, now I only need a list of papers.
09:12:33 <Smerdyakov> Chosen based on the professor's mental roadmap of the class subject.
09:12:36 <harsha123> shapr: planning a d
09:12:54 <harsha123> planning a doctorate? :)
09:13:08 <shapr> harsha123: planning to learn :)
09:13:21 <harsha123> you do that every minute
09:13:34 <Smerdyakov> shapr, if you want to learn about Computer Systems, you can steal this syllabus complete with downloadable papers for all but 2 of them: http://www.cs.berkeley.edu/~brewer/cs262/ (I took this last semester)
09:13:57 <shapr> true, but I have certain goals I'd like to reach, such as full understanding of System F and surrounding type theory.
09:14:00 <Smerdyakov> But you probably don't want to read those. :)
09:14:15 <Smerdyakov> You might like the Programming Language Implementation class I'm taking this spring.
09:14:28 <Smerdyakov> Haskell should be mentioned at least once.
09:14:29 <harsha123> Smerdyakov: whats your age?
09:14:32 <shapr> yes, that does sound more interesting.
09:14:43 <Smerdyakov> The instructor is a Lisp fanatic. He was on the Common Lisp standardization committee.
09:14:51 <Smerdyakov> harsha123, 22
09:15:07 <shapr> I wonder if there's a list of papers that would be good for understanding FP.
09:15:21 <harsha123> oops.. am older to you by an year and a half!
09:15:23 <Smerdyakov> shapr, I guarantee you can find dozens with a little web research.
09:15:28 <shapr> probably http://haskell.readscheme.org/
09:15:47 <shapr> Smerdyakov: I have dozens already, but I do not have a unified plan of attack.
09:16:04 * shapr consults Darius 
09:16:04 <Smerdyakov> I mean dozens of syllabi complete with an order of papers.
09:16:08 <harsha123> darn! i dont know where i am going! 
09:16:17 <shapr> oh, that's a good idea.
09:16:26 <shapr> I hadn't though of checking syllabi.
09:16:36 <Smerdyakov> shapr, like this for what I took last semester: http://www.cs.berkeley.edu/~necula/cs263/lectures.html
09:16:56 <Smerdyakov> Though this is general programming language semantics, not a "FP course"
09:17:22 <shapr> that looks a lot like the stuff covered in TaPL
09:17:44 <shapr> in fact, I would not be surprised it TaPL was the textbook for that course.
09:17:48 <Smerdyakov> Yes. That's the recommended text for the 2nd part of the course.
09:18:10 <Smerdyakov> There was never any need to use it, though, since the complexity of the type systems part was so nonexistent. :)
09:18:26 <harsha123> Smerdyakov: thats a mountain, what you are reading..
09:18:38 <Smerdyakov> harsha123, for which?
09:18:44 <shapr> he covers a lot of other stuff in the early parts of TaPL. I'm very happy it's so self-contained.
09:18:51 <harsha123> the last link you pasted
09:19:11 <Smerdyakov> harsha123, I skipped reading most of it since I knew most of the course content already :-)
09:19:38 <harsha123> Smerdyakov: :) 
09:20:06 <Smerdyakov> shapr, there is a bit of more conventional PL semantics stuff not covered by Pierce, though, like denotational and axiomatic semantics./
09:20:06 <harsha123> no wonder you are at Berkeley!
09:21:07 <shapr> he does cover denotational and axiomatic semantics actually.
09:21:15 <Smerdyakov> Didn't see it in a quick pass over ToC
09:21:28 <shapr> at least, he covers them shortly and gives pointers to papers and books that describe them further.
09:22:04 <Smerdyakov> Oh. That doesn't count.
09:22:23 <shapr> I'll follow up on them when I'm done with the book.
09:25:30 <harsha123> Smerdyakov: You know of any material that talks of Lambda Calculus? 
09:25:43 <harsha123> the Mathematical perspective..
09:26:04 <Smerdyakov> harsha123, sure. The book shapr is talking about. :-)
09:26:05 <ham[let]> harsha123 what language?
09:26:09 * esap thinks all material of lambda calculus fits :-)
09:26:48 <Smerdyakov> harsha123, also, depending on the angle you want to take, there's "To Truth Through Proof," by Peter Andrews, which is a mathematical logic textbook that uses typed lambda calculus as the basis for all of higher order logic and all the standard results.
09:26:50 <harsha123> which book, sorry i had to restart my erc..
09:27:05 <Smerdyakov> Benjamin Pierce, "Types and Programming Languages"
09:28:09 <esap> harsha123: one good one is: "Lectures on the curry-howard isomorphism" by Sorensen. citeseer.nj.nec.com/519604.html
09:28:24 <Smerdyakov> Oh, that sounds possibly bad for an introduction, esap. :)
09:28:47 * esap learned lambda calculus from it :-)
09:29:17 <Smerdyakov> Do you have the same mathematical background as harsha123?
09:29:44 <harsha123> Smerdyakov: yeah, I do :)
09:29:58 <harsha123> 2 years of math
09:30:17 <Smerdyakov> In your whole life? :D
09:30:25 <harsha123> hehhe nope..
09:30:38 <harsha123> 2 years in my engineering course
09:30:58 <Smerdyakov> Engineering math is generally next to useless in computer science. :P
09:31:25 <harsha123> I agree
09:31:47 <harsha123> i also learnt discrete math
09:31:49 <Smerdyakov> Programs that get confused about this and require CS majors to take engineering math courses are confused.
09:34:13 <harsha123> is the citeseer link correct? the page doesnt open
09:34:21 <esap> For introduction, maybe SICP works as well.
09:34:32 <harsha123> esap: am reading sicp
09:34:43 <ham[let]> citeseer had some conn problems here also
09:35:07 <ham[let]> has anyone that scip at hand?
09:35:22 <harsha123> ham[let]: yes i do
09:35:27 <ham[let]> there was a quote in the beginning of the modules section i think
09:35:44 <ham[let]> something like anything changes but keeps its form or such
09:35:45 <esap> harsha123: ftp://ftp.diku.dk/diku/semantics/papers/D-368.ps.gz is another place for it.
09:36:34 <ham[let]> harsha123 can you have a look in the beginning of that chap plz?
09:37:23 <harsha123> ham[let]: which chapter?
09:37:50 <ham[let]> harsha123 theres one on modules or so
09:38:06 <ham[let]> dont know the exact name i just had that book in hand for a minute
09:38:27 <harsha123> ham[let]: i have a softcopy.. am trying to find.. i dont get any hits
09:38:42 <harsha123> modularity?
09:38:50 <ham[let]> yeah maybe 
09:38:58 <harsha123> ok what should i see there?
09:39:00 <ham[let]> is there a quote in the start of that chap?
09:39:15 <ham[let]> something like blabla bla changes or so
09:39:20 <ham[let]> but keeps it form
09:39:29 <harsha123> yeah
09:39:34 <ham[let]> ah coooool
09:39:37 <harsha123> (Even while it changes, it stands still.)
09:39:37 <harsha123> Heraclitus
09:39:37 <ham[let]> what does it say?
09:39:44 <ham[let]> ah :)))
09:39:56 <ham[let]> thats one of the quotes ill use in my thesis :)
09:40:12 <harsha123> ham[let]: which University are you at? :)
09:40:19 <ham[let]> germany osnabrueck
09:41:15 <harsha123> ok
09:41:22 <ham[let]> maybe i will buy that book eventually altough i wont read it :)
09:41:32 <ham[let]> harsha123 which one are you at?
09:41:47 <ham[let]> the wizards book ;)
09:42:49 <harsha123> ham[let]: I finish my undergrad a year back. am working right now.. but rearing to get back for my masters
09:42:56 <CrewdenX> the wizards book?
09:43:03 <harsha123> S I C P
09:43:24 <ham[let]> yep it has some medival clad ppl on it
09:43:46 <ham[let]> also named the purple book because of its nice color which is why its nice to have it in the shelf ;)
09:44:10 <esap> yea, the color is everything for CS books.
09:44:26 <Smerdyakov> Racists!!
09:44:29 <ham[let]> and i havent got a purple one yet ;)
09:44:55 <harsha123> Racists! whats a high degree word for a BOOK, a mere book! ;)
09:45:02 <harsha123> s/whats/thats
09:46:00 <harsha123> Smerdyakov: do you get to sleep ?:)
09:46:15 <Smerdyakov> Yes, I do.
09:46:35 <Smerdyakov> It's between semesters now. :D
09:46:41 <harsha123> hehehe
09:47:37 * esap would not call SICP a mere book. It's much more than that. It's FUN.
09:48:13 <ham[let]> esap why is it fun?
09:48:18 <harsha123> i referred to the physical book, not the contents in it! :)
09:48:25 <harsha123> the book as an Object
09:49:29 <Smerdyakov> harsha123, are you getting my private messages?
09:49:33 <esap> harsha123: just look at the table of contents. http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html  The top-level headings tell you all the important things in CS [ok, maybe not quite, but close enough].
09:50:01 <harsha123> Smerdyakov: yes
09:50:15 <Smerdyakov> harsha123, but you don't like to respond? :D
09:51:01 <harsha123> Smerdyakov: dont get me wrong.. it comes to me on the other window. and i am not aware of it
09:51:16 <harsha123> i have to enable erc-track-mode
10:01:29 <esap> Another great fun in SICP is in the footnotes. Very cool stuff there.
10:01:36 <ham[let]> has anyone this book here ? : Basic Category Theory for Computer Scientists  
10:04:11 <SyntaxNinja> ham[let]: I've seen it, don't have it.
10:04:25 <ham[let]> SyntaxNinja is it any good?
10:04:57 <ham[let]> i try to get this book: Basic Category Theory for Computer Scientists but its out of print and i need to order it from a press in canada :(
10:06:26 <SyntaxNinja> ham[let]: I didn't like it much. I found "Conceptual mathemtaics" by "Lawvere & Schanuel" a bit better
10:07:01 <ham[let]> SyntaxNinja does it cover also concepts of CS with CT?
10:16:19 <SyntaxNinja> not sure, really.
10:16:27 <SyntaxNinja> I haven't gotten very far in it.
10:17:22 <ham[let]> hm thx anyway
10:17:31 <ham[let]> SyntaxNinja whats your specialty?
10:18:27 <SyntaxNinja> ham[let]: hm. not sure I guess :) I work in AI right now.
10:18:40 <ham[let]> ah what exaclty?
10:19:39 <SyntaxNinja> the focus of the company I work at is "abductive inference" http://www.aetion.com is our web page, but probably not very enlightening.
10:20:11 <ham[let]> thats what websites are for ;)
10:26:30 <Darius> ham[let]: I think "Basic Category Theory for Computer Scientists" is available online.
10:26:52 <ham[let]> Darius oh cool you dont happen to know the url do you?
10:27:22 <ham[let]> Darius http://www.cwru.edu/artsci/math/wells/pub/ctcs.html
10:27:43 <ham[let]> the site says you have to buy it but maybe there is the 2nd ed
10:28:25 <jasonw> amazon.com says it will ship it to you in 24 hours.
10:28:51 <ham[let]> ????
10:28:55 <ham[let]> url plz
10:29:38 <jasonw> http://www.amazon.com/exec/obidos/tg/detail/-/0262660717/qid=1073500058//ref=sr_8_xs_ap_i0_xgl14/002-7008471-8295226?v=glance&s=books&n=507846
10:30:08 <ham[let]> ah sry
10:30:16 <ham[let]> mixed it up with that other book
10:30:24 <ham[let]> Category Theory for Computing Science
10:30:51 <ham[let]> Darius do you have an url for the other book thatd be really great
10:33:24 <Darius> http://www.iist.unu.edu/~sm/research/category.html
10:33:41 <Darius> er hold on.
10:34:48 <Darius> I think I'm thinking of a different book.
10:36:10 <Darius> (Not "Category Theory for Computing Science" which I know isn't available online)
10:54:24 <SyntaxNinja> when apt-get dist-upgrade wants to remove packages, what might be the reasons for that?
10:56:51 <ham[let]> Darius http://www.let.uu.nl/esslli/Courses/barr/barrwells.ps
10:57:03 <ham[let]> Darius the course notes are online
11:01:32 <Darius> Yeah.  I know.  I've read them three times.
11:02:06 <Darius> They're the reason I want to get the book "Category Theory for Computing Science"
11:02:23 <ham[let]> Darius you can buy it at that link i gave you
11:02:33 <ham[let]> i also have a copy of the lib here
11:02:37 <ham[let]> but i wanna own it ;)
11:13:13 <ham[let]> gn8 ppl
11:13:20 <ham[let]> see you tomorrow
13:31:55 * ejt struggles
13:34:11 <ejt> I really want to do:
13:34:33 <ejt> type (Cache c) => Search c = State (SearchInfo c) Line
13:34:50 <ejt> but I don't think I'm allowed to with 'type'
13:35:12 <ejt> however if I use 'data' then it'll no longer be a monad
13:36:23 <ksandstr> isn't that sort of thing what newtype is for?
13:36:56 <ejt> newtype (Cache c) => Search c = SState (SearchInfo c) Line
13:37:02 <ejt> ABEval.hs:48: parse error on input `Line'
13:37:06 <ejt> very confused
13:38:52 <ksandstr> do you mean "newtype Cache c = SState Search Line"?
13:39:30 <ksandstr> though that has the feel of newtype abuse
13:39:54 <ejt> I don't think so, I want do make 'Search c' equivalent to 'State (SearchInfo c) Line'
13:41:41 <ksandstr> but in the type declaration earlier, you have two meanings for "c", right?
13:42:00 <ejt> no, 'c' is always an instance of Cache
13:44:01 <ejt> (sorry if I'm being dense)
13:44:03 <ksandstr> shouldn't "this is an instance of that" be after the =>, not before?
13:46:25 <ejt> not sure how you mean
13:48:50 <ksandstr> i'm not sure if i have the terminology to properly explain this
13:51:45 <SyntaxNinja> ejt: You can use data and still make it a monad; you just have to implemennt the monad functions.
13:52:12 <ejt> seems overkill though, all I'm trying to do is save some typing in a couple of function declarations
13:52:29 <SyntaxNinja> I seem to remember that there's something funny about that type constraint, though, maybe it won't get checked? I can't remember.
13:59:29 <Darius> There isn't any reason to put the constraint on the type synonym (especially as it isn't syntactically legal)
13:59:45 <Darius> With data you can, but there still isn't any reason.
14:00:31 <ejt> ah, thx
14:14:28 <det_> weee, ipv6 reverse dns goodness :)
14:15:32 <ejt> how do I convert an Int to a Word64 ?
14:23:11 <Darius> fromIntegral
14:24:17 <ejt> heh, I was trying fromInteger, thx
14:38:49 <Pseudonym> lambdabot should have a @yawn operation
14:38:52 <Pseudonym> Dunno what it would do, though.
14:39:42 <stormix_> what's wrong with this: f x = if x < 1 or x > 2 then g x else h x
14:39:53 <stormix_> where g and h are functions that have been defined and return the same type etc.
14:40:04 <Pseudonym> What error do you get?
14:40:26 <Pseudonym> BTW, I do know what the problem is.  Teach a man to fish and all that.
14:40:39 <stormix_> ERROR "file.hs":29 - Ambiguous use of operator "(<)" with "(>)"
14:41:01 <Pseudonym> Oh, that's an odd error.
14:41:28 <Riastradh> @type or
14:41:29 <lambdabot> or :: [Bool] -> Bool
14:41:31 <Pseudonym> OK, I can see why you wouldn't get it from that error.
14:41:36 <Pseudonym> Right.
14:41:38 <Riastradh> or isn't an infix operator.
14:41:40 <Pseudonym> @type (||)
14:41:40 <lambdabot> (||) :: Bool -> Bool -> Bool
14:41:56 <stormix_> ahh
14:42:02 <Riastradh> Too bad lambdabot doesn't give infix associations in @type.
14:42:11 <Riastradh> Or fixities.  Or whatever the term is.
14:42:20 <Pseudonym> I wonder if you could produce a better error message.
14:42:23 * Pseudonym hmms
14:42:45 <Pseudonym> Probably if you used an old Gofer-style parser.
14:42:53 <stormix_> thanks for that, i've been searching for days on it
14:43:03 <Pseudonym> Hard to see how you could do it with an LR-style parser, though.
14:43:07 <Riastradh> ...of course, if you used an unambiguous syntax, like S-expressions, you'd _never_ have these problems...
14:43:21 <Pseudonym> No, you'd have a whole other class of problems.
14:43:32 <Pseudonym> Which is not better and not worse, just different.
14:43:46 <Riastradh> Like what?
14:44:08 <Pseudonym> It's easier for the compiler to parse, but more difficult for the programmer to parse.
14:44:18 <Riastradh> Oh, come on.
14:44:46 <Riastradh> Infix is far worse than either real algebraic or S-expression.
14:44:47 <esap> maybe S-expressions are not a good example of an unambiguous syntax?
14:44:57 <Pseudonym> Did you read the disclaimer where I said it wasn't worse?
14:45:11 <Pseudonym> Personally, I think it's entirely a matter of degree.
14:45:18 <Riastradh> No, you just said that the class of problems were different.
14:45:28 <Pseudonym> Haskell is, by design, based heavily on standard mathematical syntax where possible.
14:45:32 <Pseudonym> That means infix operators.
14:45:43 <Pseudonym> Because it's easier for people with mathematical training to parse.
14:45:49 <Riastradh> _Based_.  But it's constrained by text.
14:45:57 <Pseudonym> True enough.
14:46:11 <Pseudonym> The offside rule being one such constraint.
14:46:23 <Riastradh> The offside rule?
14:47:13 <Pseudonym> The offside rule is the rule about meaningful indentation.
14:47:50 <esap> see section 2.7 of the online report. "The layout (or "off-side") rule takes effect whenever the open brace is omitted after the keyword where, let, do, or of."
14:48:26 * Riastradh has heard of it referred to only as 'layout.'
14:48:30 <Pseudonym> Ah, OK.
14:48:42 <Pseudonym> "Offside rule" is an old term which goes back to Miranda.
14:48:45 <Pseudonym> Possibly earlier.
14:49:35 <Riastradh> It would be cool to be able to program with a real algebraic syntax.
14:49:51 <Pseudonym> Yes, it world.
14:49:57 <Riastradh> Macros, though, would be made absolute hell.  (As if macros in infix syntax weren't bad enough.)
14:49:59 <Pseudonym> LaTeX, perhaps?  Or a visual editor?
14:50:04 * esap would like to program with a syntax that exactly matched the semantics.
14:50:21 * Pseudonym would like to program using only one command: "do what I mean"
14:50:38 <Riastradh> If you were using LaTeX, you'd be using the TeX syntax.
14:50:50 <esap> pseudonym: just define a function 'do_what_I_mean = ...'.
14:50:57 <Pseudonym> Yes, but at least you'd be able to see it algebraically.
14:50:58 <Riastradh> Imagine the loopholes in that system, Pseudonym.
14:51:43 <Riastradh> I'd rather be hacking S-expressions than TeX.
14:51:53 <Pseudonym> Yes, admittedly, I would too.
14:52:12 <Pseudonym> At least Lisp and family tend to have decent macro systems.
14:59:14 <phubuh> using S-expressions in TeX would be horrible
14:59:28 <Riastradh> TeX _in_ S-expressions...!
14:59:38 <Riastradh> Combine algebraic and S-expression syntax!  Aiee!
15:00:44 * Riastradh semantifies denotationally.
15:01:02 * phubuh becomes slightly puzzled
15:02:39 * Pseudonym semantifies operationally
15:03:04 * phubuh sleepifies tiredly
15:03:09 <phubuh> good night!
15:03:13 <Pseudonym> Night.
15:03:44 * Riastradh denotes Pseudonym!
16:33:11 <Igloo> Can anyone give me a foreign import that nhc98 breaks with if the header file isn't included?
16:36:06 <TripleDES> hi
16:39:41 <Igloo> Ah, n/m, I can do it by claiming a function on doubles is on Floats
18:17:11 <flippo> Got my copy of Lawvere and Schanuel's Categories today
18:17:25 <flippo> Looks like a fun approach.
18:17:50 <flippo> Much less musty than my previous introduction in a math phys book
18:19:42 <flippo> (My previous book was Geroch's "Mathematical Physics."  Read it back in the 80's.  Haven't used any category theory since, either. :)
18:45:01 <Smerdyakov> What's the difference between mathematical physics and physics?
18:47:17 <emu> mathematical physics - physics = mathematical
18:58:50 * Smerdyakov pokes flippo.
18:59:50 <flippo> Smerdyakov: oh, that's a tricky one
19:00:02 <flippo> Smerdyakov: math phys is math that is considered useful for phys
19:00:43 <Smerdyakov> Hm. Seems to defy usual conventions of adjective use.
19:00:53 <Smerdyakov> If it's primarily math, it should be _something_ mathematics!
19:00:53 <flippo> It does seem backward
19:01:39 <flippo> Physics math would be more accurate.  Physical math would be frightening.
19:05:05 <Smerdyakov> flippo walks into the office with his leg in a cast. "Wha happened?" "Physical math."
19:06:17 <flippo> Twister sometimes requires graph theory
19:06:36 <flippo> But it's NP complete
19:30:11 <emu> the math of arms and legs?
19:39:16 <Riastradh> *chop*
19:42:52 <flippo> That's how to take a section of a fiber bundle
19:50:59 <ham[let]> hiho
19:53:43 <pimpbot5000> is anyone here familiar with how GHC optimizes code?
19:56:51 <Darius> Don't ask "Can anyone answer my question?" questions, just ask your questions.  If someone can answer it they will, if they can't they won't.
19:57:29 <Smerdyakov> And I think some persons intimately connected to GHC are often watching the channel.
20:52:37 <ham[let]> is there any project that tires to build an OS on a functional programming language?
20:53:39 <Pseudonym> http://www.ai.mit.edu/projects/express/
20:53:49 <ham[let]> thx
20:53:51 <Pseudonym> Actually, that's an old page.
20:53:55 <emu> purely fp?
20:53:55 <Darius> There are and were several.
20:53:59 <Pseudonym> But there are links.
20:54:30 <ham[let]> Darius cool any really usable ones?
20:54:45 <ham[let]> i thought it would be cool to base an Os on channels
20:54:58 <ham[let]> and then have arrows beteween them 
20:55:14 <ham[let]> ie a device is a channel and you can map data to it or from it
20:56:05 <Darius> Heck if I know.  Obviously they haven't taken over the OS landscape.  (Though, if you count Lisp as a functional language, there were Lisp OSes that were at least on the map for a while)
20:56:27 <ham[let]> yes a pitty
20:57:17 <ham[let]> isnt there something like c to haskell ;) then one could run it over the kernel code of linux or so ;)
20:57:29 <emu> heh
20:57:38 <Darius> And then run the Haskell compiler and produce C!
20:57:46 <ham[let]> :)))
20:57:54 <emu> i can imagine the disaster that would be in trying to translate the pointer munging
20:58:26 <Darius> emu: It wouldn't be hard.  It's not like the resulting code would be very Haskelly anyways.
20:58:51 <emu> well yes, it would miss the point of the language
20:59:39 <Darius> Anyways, there's a massive barrier to entry for a relatively original OS.
20:59:47 <emu> on stock hardware
21:00:08 <ham[let]> maybe TCPA will lead to new hardware :)
21:00:37 <ham[let]> like open hardware projects
21:54:41 <pimpbot5000> does anyone know some guidelines for helping GHC to generate fast code?  ie. making sure values get unboxed.  I'm having trouble some pure C calls not getting unboxed
22:23:21 <ham[let]> see you later ppl
