08:06:47 <esap> Whoa, ghc-6.2 supports the arrow notation.
08:07:09 * esap immediately starts to use it.
09:03:51 <TripleDES> hi
09:40:02 <Darius> crap.  GCC doesn't like int n = n, but doesn't say anything about it (with no options).
09:41:00 <Igloo> Presumably it is valid?
09:43:21 <Darius> What is it supposed to mean?  If I put, int main(void){ int n = n;printf("%d\n",n);return 0; } into a file I get 0 when executing.  In the more sensible case where there was an outer n I got nonsense (41400 or something where the outer n = 4).
09:44:26 <Darius> It seems obvious I'm just getting values on the stack, but why allow it.  While I was wondering if C would let me nest locals, I didn't expect this behavior.
09:45:02 <Igloo> Oh, my brain is in Haskell mode, so interpreted it as effectively the same as int n, but you could equally say that n isn't in the scope of the RHS
09:45:52 <Darius> That's what I expected and was hoping it would look to an outer scope as that would be sensible.
09:47:40 <ibid> the declared name is visible in the rhs of the definition
09:47:55 <Darius> Why?
09:48:00 <ibid> otherwise you couldn't do int * p = malloc(sizeof *p)
09:48:12 <ibid> which is handy, imho :)
09:50:37 <Igloo> In which case getting nonsense is expected
09:50:56 <ibid> uh?
09:51:03 <ibid> the value of the rhs is well-defined
09:51:07 <ibid> in my example
09:51:13 <Igloo> But not in his
09:51:17 <ibid> true
09:51:59 <ibid> it looks like a nop except that it probably is undefined behaviour (accessing a possible trap representation)
09:52:13 <ibid> don't have the energy to go read the standard, though
10:04:16 <Lunar^> Happy new year haskellers :)
10:18:16 <Darius> Wow.  It's been a while since I last dealt with C/C++.  I almost wrote, word *rIP,rSP,etc. instead of what I meant.
10:22:41 <Darius> Hmm, or maybe I actually do want that...
10:25:44 <Igloo> :-)
10:36:32 * Darius was wondering when someone was going to make a partial evaluator using TH.
10:57:42 <musasabi> Could someone give me pointers, for typing a fold function for heteregenous tuples? (general static typing, not haskell)
10:58:28 <Smerdyakov> You mean things like folding over (1, 'a', "hi") like it's [1, 'a', "hi"]?
10:58:41 <musasabi> yes
10:59:08 <Smerdyakov> I don't even see any way in which "folding" would make sense there.
10:59:34 <Smerdyakov> You would need to give some description of the pattern of types in the tuple.
10:59:40 <Smerdyakov> Which would be more trouble than it's worth, I suspect.
11:00:04 <musasabi> that is given a function defined for f: string->b, f: int->d then fold (string,int) -> (b,d)
11:00:23 <esap> gfoldl might do that, but I'd suggest looking whether it's really needed.
11:00:29 <Smerdyakov> Sounds useless, musasabi.
11:00:54 <Smerdyakov> Well, maybe not useless.
11:00:58 <ustenzel> isn't that more like generic map than generic fold?
11:01:01 <Smerdyakov> But certainly not typeable in Haskell.
11:01:16 <Smerdyakov> If you want arbitrary length tuples.
11:01:47 <Smerdyakov> I don't know of _any_ type system that would accommodate such a function.
11:02:05 <musasabi> yes, I was just wondering whether it could be doable.
11:02:19 <Smerdyakov> Well, obviously it's doable if you can modify type systems to suit your whims. :)
11:03:00 <esap> I've once done a polymorphic container thing that always when you looked up something did a dynamic filtering based on the type of the elements looked up. So it's possible, but I think it costs more than it's worth.
11:04:42 <ustenzel> could a typeclass work?  like so:
11:04:58 <ustenzel> class HasF a b | a -> b where { f :: a -> b }
11:05:21 <Smerdyakov> What is the intent of it?
11:05:25 <ustenzel> then "map :: (HasF a c, HasF b d) => (a,b) -> (c,d)" should be possible.
11:05:44 <ustenzel> Argh, left out the function...
11:05:45 <Smerdyakov> So it's a map with a hardcoded function for each function type that is allowed?
11:06:15 <ustenzel> right, something is missing.
11:06:34 <musasabi> yes, it seems quite hard to specify.
11:07:15 <musasabi> limiting the input to be a of some typeclass is easy (as the function needs to be callable)
11:07:36 <musasabi> but constructing the result type seems hard
11:07:54 <Smerdyakov> This sounds to me like a case where you forget typing and just use TH.
11:10:04 <ustenzel> what is this mysterious "f" supposed to be?  it needs to have some very strange type, it seems.
11:12:19 <Smerdyakov> ustenzel, I think you've misread something. It's part of a type class.
11:12:29 <Smerdyakov> ustenzel, though I do agree that it's a weird type class to want to use.
11:14:15 <ustenzel> Hm.  I'd just make the tuple (a,b) an instance of that typeclass.  If there is only one function that could ever be mapped, then there is no point in a map-like hof.
13:58:48 <Darius> My mostly automatically generated from Haskell LVM is only about 2-3 times slower than the Helium LVM for at least one (non-GCing) program, and it represents memory indirectly.
14:02:48 <ned> how can i transform 'IORef GLfloat' into 'IORef Int' ?
14:02:52 <ned> or GLfloat to Int
14:02:54 <ned> ?
14:03:08 <Darius> @type floor
14:03:09 <lambdabot> floor :: (RealFrac a, Integral b) => a -> b
14:03:13 <Darius> @type ceiling
14:03:13 <lambdabot> ceiling :: (RealFrac a, Integral b) => a -> b
14:03:18 <Darius> @type truncate
14:03:19 <lambdabot> truncate :: (RealFrac a, Integral b) => a -> b
14:03:26 <Darius> @type round
14:03:26 <lambdabot> round :: (RealFrac a, Integral b) => a -> b
14:03:40 <ned> thx :)
14:05:45 <ned> i thought it didn't work with 'GL', sorry :)
14:09:21 <Lunar^> ned: magic of Haskell type classes
14:10:39 <Lunar^> ned: sometimes it force you to declare types though..
14:10:58 <Lunar^> ned: You could write a toplevel function with a type anotation like glFloatToInt :: GLfloat -> Int
14:13:42 <Xer0> is there any of those magic conversions of types for convert from Int to Integer?
14:14:33 <Darius> @type fromIntegral
14:14:34 <lambdabot> fromIntegral :: (Integral a, Num b) => a -> b
14:24:46 <Xer0> and for converting fron Int to Float?
14:24:54 <Smerdyakov> Same
14:24:57 <Smerdyakov> Since Float is Num
14:26:20 <Xer0> well the problem is I have an Int and I need to calcule its sine
14:26:40 <Xer0> and sine needs a Floating class type
14:27:03 <Xer0> but i can't get the right conversion
14:35:48 <Darius> @type sin . fromIntegral
14:35:48 <lambdabot> sin . fromIntegral :: (Integral a, Floating b) => a -> b
21:41:53 <harsha123> xb
