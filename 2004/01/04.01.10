02:08:29 <ham[let]> moin
03:19:49 <polli> hi
03:47:22 <shapr> polli: hej
03:53:16 --- topic: set to '["We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Learning Haskell - http://www.haskell.org/learning.html","http://www.syntaxpolice.org/haskell-experimental/haskell-experimental.html","new HC&A Report - http://www.haskell.org/communities/", "ghc 6.2 is out", "ghc rpms: http://haskell.org/~petersen/rpms/ghc/","cryptolib 1.0.1 - http://www.haskell.org/crypto/ReadMe.html"]' by shapr
04:12:51 <polli> shapr: what's up?
04:41:04 <shapr> polli: cleanin the lägenhet, after which I shall setup ScannedInAvian.org
04:41:13 <shapr> polli: what's up with you?
04:41:26 <shapr> ANNOUNCE: Cryptographic Library for Haskell - http://www.haskell.org/crypto/ReadMe.html
04:41:51 <shapr> looks spiffy
04:42:32 <hram> shapr: Fiddling around with lambdabot, the more-problem was incredibly easy to solve...
04:43:39 <Igloo> cool
04:46:56 <Darius> hram: There's another easy problem to solve there concerning long lines ;)
04:49:11 <hram> Darius: Wrapping -> more lines?
04:50:34 <Darius> Splitting them into sendable chunks, preferably broken on nice boundaries.
04:50:39 <Darius> @listcommands
04:50:40 <lambdabot> I react to the following commands: ["all-dicts","arr","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","learn","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude","quit",
04:53:11 <hram> Darius: Ah, not quite so simple then. Just to Implementing the tex-algorithm in Haskell...
04:53:28 <hram> "Just to implement" ..
04:56:42 <Igloo> It's not too bad
04:57:18 <Igloo> If length > maxlen find space before maxlen and split there, else find one of - , ; and do the same, else just split at maxlen
04:59:56 <hram> Igloo: Yes, probablly suitable for most situations, but far from all...
05:01:42 <Igloo> Unless you're going to get hints from each module or something it's as good as you're going to do. I guess you /could/ try hypenating where you break words in the last case, but that might do more harm than good
05:06:53 <earthy> euhmm... the algorithm TeX uses for line-breaking is somewhat more complicated than that
05:06:58 <hram> Igloo: Well, perhaps if you add quite a bunch of more characters than - , ;... Well almost all non alphanumerics really (but thats even simpler)
05:07:41 <Igloo> earthy: I'm talking about what we'd want, not TeX
05:07:49 <earthy> ah. right.
05:07:55 <earthy> that's just fmt then, isn't it?
05:08:07 <Igloo> hram: The set of characters you use doesn't change the complexity of the code, though  :-)
05:08:34 <Igloo> Quite possibly - is there a Haskell implementation already then?
05:10:26 <earthy> not that I know of
05:11:41 <Heffalump> it seems some IRC servers silently drop too long lines
05:11:45 <Heffalump> or something inside lambdabot does
05:12:30 <Igloo> Well given the above lambdabot doesn't
05:12:44 <Heffalump> oh, true
05:12:54 <Heffalump> when I was testing it on my laptop on the train @listcommands just refused to do anything
05:13:04 <Heffalump> until I inserted a "take n"
05:13:26 <hram> Igloo: No, but one could just use something like isalnum (in haskell?) instead of some list...
05:14:19 <polli> shapr: not much, just got home after the vacation
05:14:20 <Heffalump> oh, and since the smartlinker still needs dependencies explicitly told to it, I couldn't be bothered to port the Dynamic module of lambdabot to it, since that already does reference counting itself anyway so there's very little to gain
05:14:43 <Heffalump> @listmodules
05:14:43 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
05:16:06 <hram> Heffalump: Well, I'm just coding a new dynamic loading library with some additional features... (using my smart linker)
05:16:29 <Heffalump> will it read .hi files to do dependencies?
05:17:14 <hram> Heffalump: No, since .hi-files tend to change every time you blink...
05:18:05 <hram> Heffalump: however it will not use hardcoded deps.
05:18:20 <Heffalump> how'll it work, then?
05:19:51 <hram> Heffalump: you'll have to specify all deps in a separate file which will be read (on load and on command)
05:20:00 <Heffalump> ah
05:22:38 <Darius> That would be helpful.  It's annoying to have to recompile because you're importing a new module.
05:23:24 <hram> Darius: Its annoying that you'll have to recompile if anything changes... (whole BotConfig should be rewritten)
05:25:12 <Darius> I'm pretty sure making the whole  BotConfig information into a configuration file has been discussed, but I don't think there has been too much demand for it.
05:26:25 <hram> perhaps because so few use it since it's so akward to configure...
05:26:57 <Heffalump> it clearly should read stuff in from a file rather than being compiled in
05:27:04 <Heffalump> just noone's been bothered to write that yet
05:27:23 <Darius> More likely because so few use it .  But also most of the configuration doesn't change too much.
05:27:35 <Darius> After the first compile.
05:28:11 <Heffalump> I don't see any advantage to specifying deps in a separate file for lambdabot, since moving what's in BotConfig to a file that gets read in would have the same effect
05:31:57 <hram> Heffalump: The obvius reason is that you can modify it while running...
05:51:58 <Heffalump> but a sensible framework for BotConfig would make that possible too, for the other lambdabot settings too
05:52:31 <Heffalump> I'm not saying your dynamic linker isn't a good idea, it's just that lambdabot probably doesn't really need that extra functionality
05:59:26 <hram> Heffalump: No, my dynamic linker is not a big boost of any kind, but the DynamicModule needs a general boost, whether using the current linker och mine...
06:00:06 <Heffalump> which will happen if someone fixes BotConfig to read from a file (and to make re-reading possible)
06:01:10 <hram> Heffalump: Yes and no. :) You want the dynamic module to be separate from the other configstuff...
06:01:46 <Heffalump> why?
06:01:58 <Marvin--> happy 2^30 btw
06:02:00 <Heffalump> most IRC bots have the modules configured in the same place
06:02:03 <Heffalump> as everything else
06:03:36 <hram> Heffalump: because it is something separate. you want to be able to reaload plugins separate from other stuff (and at least I put different stuff in different modules)
06:04:14 <Heffalump> I don't really see why. Look at the design of eggdrop, for example, which seems to work reasonably well
06:05:12 <hram> Heffalump: Doesn't eggdrop use shared objects without dependencies and you just specify paths where to find plugins?
06:05:24 <shapr> wouldn't it make the most sense for plugin modules to specify their own dependencies?
06:06:19 <hram> shapr: You could not do that very smoothly (well using multiple files perhaps)
06:06:20 <Heffalump> well, ideally it'd be just in the .o file
06:06:47 <shapr> Igloo: you got acks in the cryptolib :-)
06:06:48 <Heffalump> hram: yes, true
06:08:34 <hram> Heffalump: thus you can add more plugins to a conventional IRC-bot without taking it down or reloading the configuration...
06:08:35 <shapr> there must be some way to figure out which modules are imported by a module
06:09:08 <shapr> hram: oh, what was the solution to the @more problem?
06:09:08 <Heffalump> reloading the configuration shouldn't be a particularly hairy step, though
06:09:15 <hram> shapr: You could either look at the .hi-files or inspect (in an OS-dependent manner) the undefined symbols...
06:09:36 <shapr> is the .hi format convoluted?
06:09:45 <shapr> are there GHC tools to look at the format?
06:10:04 <shapr> that would match up well with a dynlinker
06:10:07 <hram> Heffalump: No, it will probably be something quite simple, but you do not want bad "features"...
06:10:49 <hram> shapr: the .hi format changes often and ghc can dump some info (--show-iface)
06:11:10 <hram> now I'm going to eat a bit...
06:11:30 <shapr> ok
06:11:38 <shapr> it shows module dependencies
06:11:47 <shapr> and package
06:12:07 <Heffalump> actually, the argument against dependencies being in the config file is that they should be supplied by the plugin author, not by the bot owner
06:12:07 <shapr> I wonder how dependable --show-iface is
06:12:31 <shapr> yes
06:13:01 <shapr> the plugin author could use hampus' explicit dependencies thingy
06:14:09 <shapr> Heffalump: did you see whether Base can be dynloaded?
06:14:13 <shapr> I haven't tried that yet.
06:14:16 <Heffalump> oh, no, I forgot
06:14:21 <shapr> I can try it now
06:14:27 <Heffalump> I got distracted by investigating other bugs I found
06:14:33 <shapr> oh, like what?
06:14:43 <Heffalump> the biggest one was with @listcommands
06:15:06 <Heffalump> on the test server I was running on my laptop, it just doesn't output anything, because it tries to send too long a line to the server
06:15:25 <Heffalump> how would Base being dynloaded help, btw?
06:16:12 <Heffalump> isn't ircPrivmsg in IRC.hs
06:24:46 <shapr> yes, it is
06:24:53 <shapr> for some reason I thought differently yesterday5
06:27:46 <Heffalump> oh, actually the issue is where it gets called from
06:27:59 <Heffalump> so I think making _every_ module dynamic would be ok, yeah
06:29:06 <Heffalump> hmm.
06:29:08 * Heffalump not sure
06:31:46 * shapr tries drinking maté tea in a coffee kuksa
06:32:43 <shapr> I wonder if Dominic's ASN.1 support reads the format specs
06:34:29 <shapr> hm, it shows how to do manual conversions
06:36:20 <shapr> looks like a job for TH
06:37:49 <shapr> hi Chimp 
06:39:59 <hram> shapr: Base isn't really a module it just connects some callbacks that are needed to do anything irc-like so it has to be dynloaded before connection...
06:40:33 <Heffalump> that would be fine
06:40:34 <shapr> yup
06:40:42 <shapr> that's why I hadn't tried to dynload it before
06:42:54 <hram> One small problem with reading dependencies from hi-files is that you have to know which modules belong to the packages and which don't (and then if you shadow a module name... hm...)
06:47:22 <Chimp> hi shapr 
06:59:50 <shapr> hram: what was your solution to the @more problem?
07:01:07 <hram> shapr: Just simply load it dynamically. You can do that without any modification to the module itself.
07:02:08 <hram> shapr: you must of course remove it from Static and dynamic-load it, but it works just fine...
07:41:18 <shapr> 800MHz feels much slower than 1544MHz when compiling with GHC
07:47:53 <hram> shawn: well, 800MHz isn't so bad as just 256MB... :(
07:48:02 <shapr> that's a good point
07:48:20 * hram really do not like irssi:s nickcompletetion!
07:49:02 <hram> @listmodules
07:49:03 <lambdabot> I have the following modules installed: ["base","dict","dummy","dynamic","eval","hello","karma","more","quote","seen","state","system","topic","type"]
07:49:56 <shapr> hram: ah, I missed your solution while I was offline installing the old ScannedInAvian drive into my desktop machine.
07:51:40 <shapr> now if I can get apache configured on the new machine, I'll apply said solution
07:51:52 <hram> shapr: Just simply load it dynamically. You can do that without any modification to the module itself.
07:52:10 <hram>  shapr: you must of course remove it from Static and dynamic-load it, but it works just fine...
07:52:24 <shapr> I just saw that in the channel logs
07:52:47 <hram> ah, such funky stuff too :)
07:55:32 <shapr> lambdabot: @quit
07:57:47 <hram> shapr: I think I lied a bit... you have to add a "theModule"-function to the acctual module...
07:58:14 <shapr> yup
08:00:27 <hram> shapr: another thought... a simple (but heavyweight) eval-module could use "ghc -e" to typecheck and evaluate (first :t to scan for IO, then evaluate).
08:00:51 <shapr> Lunar^ wrote a nice GHCiModule
08:01:09 <shapr> it gives full interactive access to GHCi
08:01:30 <shapr> it's not installed because I don't know how to disable access to the local drive
08:02:55 <hram> shapr: Well, always precheck the input strings against usage of bad stuff (such as :! and unsafePerformIO) then always run a :t before acctually evaluating it).
08:04:53 <shapr> I'm not sure I would trust that.
08:07:05 <hram> shapr: Why not? You can't get IO without IO showing in the type (without installting strange libraries - which you cant)
08:10:29 <shapr> hram: ok, write it, I'll try it :-)
08:22:49 <Heffalump> the ghci module doesn't actually work, AFAICT, btw
08:24:32 <hram> It won't even load for me...
08:24:48 <shapr> it needs shell-haskell
08:25:01 <shapr> http://www.electronconsulting.com/shell-haskell/
08:25:26 <Heffalump> which isn't in the distribution?
08:25:34 <Heffalump> I had unresolved symbols in Shell.o when I tried
08:25:43 <Heffalump> (after I fixed a capitalisation error in BotConfig.hs)
08:26:36 <shapr> yah, the caps thingy is that somewhere the loader assumes XxxxModule
08:27:30 <Heffalump> no, it's just what BotConfig.hs says
08:27:43 <Heffalump> that defines the mapping from module name to object file, and it gets it wrong
08:30:58 <hram> yepp, now it loads, lets see if it works too :)
08:32:10 <hram> hm, nope, or only once...
08:42:09 <Igloo> Is anyone familiar with alex's startcodes?
08:43:53 <Heffalump> with what?
08:44:30 <Igloo> They're essentially states of the lexer
08:44:42 <Heffalump> oh, that kind of alex
08:49:16 <shapr> dang, darcs-createrepo is giving an error
08:52:22 <shapr> oh
08:54:14 <hram> Igloo: Doesn't the documentation say it all?
08:55:15 * Igloo had missed a bit, but I think I understand now
09:40:46 <shapr> yay, hlibs darcs repo is back online
09:42:21 <Heffalump> was it created with cvsps, btw?
09:42:35 <Heffalump> or some other way that preserves changeset history from the CVS version
09:43:08 <shapr> neither
09:43:16 <shapr> I just threw my local repo into the dir
09:46:13 <shapr> hm, I can't seem to push to it yet.
09:48:42 <Heffalump> but what's the patch history in your local repo?
09:48:58 <shapr> same as in the original darcs repo
09:49:21 <shapr> alternatively, I could replace it with the original repo that was online
09:49:29 <shapr> now that I have that drive mounted
09:49:56 <shapr> I don't think there are any differences between my local repo and the one that was online
09:49:57 * shapr checks
09:51:39 <shapr> From a visual inspection of the patches dir, it seems they are the same.
09:53:16 <Heffalump> I meant in relation to the CVS repo on sf.net
09:53:29 <shapr> I haven't synced with CVS yet.
09:57:47 <Heffalump> so you made the repo by just taking a single tree?
09:58:18 <shapr> yes, it's the old hlibs darcs repo with accumulated local changes.
09:59:18 <shapr> does that script create a new darcs repo from a cvs repo, or can it also do diff/sync?
10:00:04 <Heffalump> it syncs one way
10:03:57 <shapr> dang, I've forgotten how Marvin-- and I worked out the forwarding with postfix
10:05:27 <Marvin--> we did?
10:05:35 <Marvin--> I've never used postfix in my entire life
10:05:56 * Marvin-- suspects shapr is becoming senile
10:05:59 <shapr> yah, but you helped me with the forwarding stuff
10:06:07 <Marvin--> ... or that I'm becoming senile
10:06:21 * shapr doesn't remember becoming senile ;-)
10:08:02 <Marvin--> and I don't remember helping you with forwarding... what forwarding? :)
10:08:06 * shapr grins
10:08:30 <shapr> remember that hlibs@scannedinavian.org wasn't working?
10:10:57 <shapr> shouldn't a .forward containing |command pipe the mail into that command?
10:11:25 <Marvin--> umm... I think so?
10:24:14 <Igloo> Why does make do things line at a time rather than sticking the whole thing through sh -e?
10:24:32 <Marvin--> I dunno
10:25:41 <Marvin--> hysterical raisins, perhaps?
10:35:54 <Marvin--> oh come on! is that supposed to be a *hard* question?
10:35:59 * Marvin-- watches game shows on TV
10:36:57 <Marvin--> dear god, that was embarassing
10:37:27 <Marvin--> they asked what post the prime minister had before becoming prime minister... sheesh
10:43:28 <phubuh> I dig the dude who's playing
10:47:26 <shapr> Marvin--: what post did he have?
10:48:05 <phubuh> finansminister
10:53:01 <Marvin--> yes, minister of finance
10:53:12 <Marvin--> interesting format on the quiz
10:57:08 <shapr> hi cm
10:57:55 <cm> hello shapr 
10:58:08 <shapr> what's up?
10:59:09 <cm> not much, just got up. which is sick as it's 8 PM.
11:00:07 <Darius> meh
11:00:08 <shapr> it's not the schedule of the average bookkeeper, I agree.
11:01:14 <cm> was working on a school assignment til 7 AM, then read a while.
11:15:19 <cm> uh
11:15:56 * shapr hrms
11:17:14 <SyntaxNinja> I'm using HaXmL to read an XML file, modify it, and write it back out; but if I read AND write, I get a "Resource busy" error on the write.  If I delete the read or the write, it goes fine, but obviously that won't due.
11:17:37 <shapr> on win32?
11:17:51 <SyntaxNinja> thing is, we've got readXml and writeXml, neither of which gives me any way to close the file, I can only assume that they're doing so themselves.
11:17:56 <SyntaxNinja> shapr: hahahahahhaahahah!!!
11:18:07 <SyntaxNinja> no, linux :P
11:18:11 <shapr> oh, ok
11:18:27 <SyntaxNinja> it's so strange
11:18:40 <SyntaxNinja> it doesn't help if I use hReadXml and hWriteXml and close the files by hand!
11:18:50 <shapr> iirc, you can open a file in read,write,or read+write. is that true?
11:19:54 <SyntaxNinja> yeah
11:20:24 <shapr> are you sure the file is being opened in ReadWriteMode ?
11:21:36 <SyntaxNinja> well, thing is, you don't tell writeXml how to open the file, it handles all that itself
11:22:30 <shapr> sounds like you need a tempfile
11:22:55 <pimpbot5000> hi, this is a GHC specific question.  I have this data declaration: data M = d1 d2 .. d5.  There are tons of operations that do the following: access d1 and return a new M without touching d2 .. d5.  What's a good way to optimize this in GHC (besides using the obvious data declaration)?
11:23:17 <SyntaxNinja> so strange, though.
11:23:23 <SyntaxNinja> but in fact, I want a tempfile anyway...
11:23:45 <Darius> pimpbot5000: It looks like you want a record, otherwise I'm not sure what you're asking.
11:24:31 <pimpbot5000> well, i have all these ops that access M.  but the most used field is d1
11:24:51 <pimpbot5000> i want to avoid recopying d2 .. d5 each time
11:25:14 <shapr> does ExitSuccess mean exitcode 0?
11:25:24 <pimpbot5000> i suppose i could use data M = d1 (d2, .., d5)
11:25:46 <Darius> Yes, or (d1,M)
11:26:14 <Darius> However, it's likely only copying about 4 words of 'extra' information.
11:26:21 <Darius> Are you sure this is a problem?
11:27:08 <pimpbot5000> well i checked the profiler, im getting a huge number of allocations
11:28:11 * shapr swears at gpg
11:28:43 <Darius> As long as they aren't surviving the young generation that shouldn't be too much of a problem.
11:28:54 <cm> the cryptography library mentioned on the haskell mailing list is interesting
11:29:31 <cm> Darius: i'm eagerly awaiting your next response in the monads thread on c.l.f ;)
11:30:19 <Darius> pimpbot5000: The problem may be that the updates are being delayed for a long while.
11:31:18 <pimpbot5000> yea that's my worry
11:32:10 <shapr> looks like gpg options changed
11:32:22 <pimpbot5000> the function im running has a large number of recursions, so im afraid ghc is backing them up until the last minute
11:35:07 <ejt> pimpbot5000: have you tried adding strictness annotations ?
11:35:38 <Darius> I'd suggest making d1 strict if that's not a problem and perhaps adding strictness annotation to the updates though those should already be "strict" in effect.
11:36:09 <Darius> (However, code like f (m { d1 = (g d1) }) might be usefully strictified)
11:37:32 <ejt> is there anyone here who knows about multiparameter type classes ?
11:37:45 <SyntaxNinja> OK maybe there's something I don't get. Now I output the size of the object after I read it in, and everything works. seems like I"m running into trouble w/ strictness, but I thought that wasn't supposed to happen in the IO monad?
11:38:05 <Darius> ejt: sure
11:38:32 <ejt> Darius: I'm trying to define a class for Caches:
11:38:46 <Darius> SyntaxNinja: If HaXML is using lazy IO ...
11:39:16 <ejt> > class Ord k => Cache c k v where
11:39:16 <ejt> >      empty :: c k v
11:39:16 <ejt> >      lookup :: k -> c k v -> Maybe v
11:39:16 <ejt> >      insert :: k -> v -> c k v -> c k v
11:39:30 <Darius> Though assuming hRead/WriteXML are what I'd expect them to be, hClose'ing the file should('ve) work(ed).
11:39:40 <ejt> actually forget that, I'll put the source file on the web
11:41:03 * shapr finds another possible darcs buglet
11:41:18 <ejt> darius: http://people.sistina.com/~thornber/haskell/Cache.lhs
11:41:42 <ejt> darius: if I load this into ghci, and try and do:
11:41:49 <TripleDES> hi
11:41:55 <ejt> :type Cache.empty :: NoCache Int Int
11:42:11 <ejt> it says there's no instance for (Cache c Int Int)?
11:42:45 <shapr> hi TripleDES, did you see the latest release of the Haskell cryptolib?
11:42:48 <SyntaxNinja> Darius: hmmm
11:45:36 <kosmikus|away> ejt: what would you expect?
11:46:43 <ejt> NoCache Int Int ?
11:47:24 <Darius> What are you trying to say with your instance declaration for NoCache?
11:47:38 <kosmikus|away> but there is no instance for (Cache c Int Int) ...
11:48:00 <ejt> THat NoCache is a Cache, and these are the methods
11:48:33 <Darius> What do you think the "Cache c k v =>" means in that instance declaration?
11:49:02 <kosmikus|away> ejt: it does not have to do anything with multiparameter classes
11:49:07 <kosmikus|away> what you are doing is like defining
11:49:10 <kosmikus|away> class X a where
11:49:10 <kosmikus|away>   x :: a
11:49:17 <kosmikus|away> and then asking :t x :: Int
11:49:50 <Darius> That's not the problem (or at least not directly the problem).
11:50:27 <ejt> Darius: Cache c k v is declaring a relationship (Cache) between three type variables c k v ?
11:51:03 <Darius> ejt: Your instance declaration for NoCache says: "NoCache k v is a Cache for any k v as long as for any c, c k v is a Cache"
11:51:29 <Darius> You just want to say: "NoCache k v is a Cache for any k and v."
11:51:49 <ejt> instance Cache (NoCache) k v where ?
11:52:18 <Darius> Yes.  Though I think you'll run into other problems (sooner or later) with your class declaration.
11:52:56 <ejt> > instance (Ord k) => Cache NoCache k v where
11:53:00 <ejt> works
11:53:28 <ejt> so what's wrong with the class decl. itself ?
11:55:27 <SyntaxNinja> seems to work if I leave out all hClose. maybe haXmL is closing them :(
11:55:49 <hram> those brave and bold might visit irc.csbnet.se and join #kaktusar and try out a new ghci-module (without some constraints that are needed)
11:55:49 <Darius> It's not wrong, but there's another way of writing it that's likely closer to what you mean and that should result in ambiguous situations occuring less often.  Actually, I'm wondering if you need MPTCs at all.
11:56:15 <ejt> it would be great if I could do without
11:56:15 <Darius> hram: Wouldn't it be the person hosting the module who would need to be brave?
11:56:50 <hram> Darius: No, that person (I) need to be exceptionally brave :)
11:57:10 <Darius> ejt:  Well the two questions are: Why are you using MPTC's at all?  and will you ever have an instance of "Cache" that does something different based on k or v?
11:58:17 <ejt> I tried without to start with and got v. confused
11:58:41 <ejt> so I don't need to mention k or v at all ?
11:59:09 * ejt tries
11:59:41 <Darius> You might not.
12:03:02 <ejt> ok, I've updated the source on that URL, the instance of InfiniteCache gives me 'Inferred type is less polymorphic than expected', which is why I started thinking it had to be mptc
12:07:20 <Darius> It'd still be a constructor class rather than a type class, i.e. you would still have class Cache c where empty = c k v etc.
12:09:58 <ejt> ahh, the penny drops, that works
12:10:01 <ejt> much cleaner
12:10:05 <ejt> thanks
12:25:31 <ejt> what we really need is a Haskell cookbook
12:25:36 <shapr> ejt: yes!
12:28:21 <ejt> hmmm, perhaps I should volunteer to collect peoples entries
12:28:35 <shapr> ejt: you could store them on the HaWiki
12:28:44 <shapr> there's a ShortExamples page I think
12:28:44 <ejt> indeed
12:29:00 <Darius> @wiki ShortExamples
12:29:00 <lambdabot> http://www.haskell.org/hawiki/ShortExamples
12:29:35 <ejt> not really a cookbook though
12:29:57 <ejt> that needs to be indexed by what the programmer is trying to achieve (see the excellent Perl cookbook)
12:30:39 <Smerdyakov> I'd look up "perfection" every time.
12:31:07 <shapr> can I use FFI stuff in GHCi?
12:39:49 <Darius> Try it and find out.
12:39:58 <shapr> seemsnot
13:10:48 <shapr> hram just wrote up a @ghci plugin, it's running in betabot, you are invited to try to break it, or find ways in which it is unsafe.
13:11:08 <shapr> det: this means you ;-)
13:11:24 <shapr> and anyone else awake
13:12:13 <shapr> @ghci :t Control.Monad.State.StateT
13:12:13 <lambdabot> Sorry, I don't know the command "ghci", try "lambdabot: @listcommands"
13:12:17 <betabot> Control.Monad.State.StateT :: forall a m s.
13:12:17 <betabot> 			      (s -> m (a, s)) -> Control.Monad.State.StateT s m a
13:12:18 <shapr> um
13:12:53 <shapr> betabot: map (+ 1) [1..10]
13:12:53 <betabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
13:12:56 <hram> betabot: @ghci map (\a -> show (a ++ "\n") ["try", "to", "break", "me", "!"]
13:13:00 <betabot> <interactive>:1: parse error (possibly incorrect indentation)
13:13:09 <hram> betabot: @ghci map (\a -> show (a ++ "\n")) ["try", "to", "break", "me", "!"]
13:13:14 <betabot> ["\\"try\\\\n\\"","\\"to\\\\n\\"","\\"break\\\\n\\"","\\"me\\\\n\\"","\\"!\\\\n\\""]
13:13:21 * shapr grins
13:13:26 <hram> betabot: @ghci concat $ map (\a -> show (a ++ "\n")) ["try", "to", "break", "me", "!"]
13:13:30 <betabot> "\\"try\\\\n\\"\\"to\\\\n\\"\\"break\\\\n\\"\\"me\\\\n\\"\\"!\\\\n\\""
13:13:55 <shapr> @ghci putStrLn "foo"
13:13:56 <lambdabot> Sorry, I don't know the command "ghci", try "lambdabot: @listcommands"
13:13:57 <betabot> You aren't allowed to execute that statement.
13:14:40 <hram> I do not think any of you will break it!
13:15:03 <hram> but now I'm going to eat while you have your fun :)
13:15:11 <shapr> yes, I want food too
13:15:19 <shapr> @ghci :m + Graphics.Rendering.OpenGL.GL
13:15:19 <lambdabot> Sorry, I don't know the command "ghci", try "lambdabot: @listcommands"
13:15:50 <shapr> betabot: @ghci :t getArgsAndInitialize
13:15:54 <betabot> Variable not in scope: `getArgsAndInitialize'
13:16:14 <shapr> betabot: @ghci :m + Graphics.UI.GLUT
13:16:19 <shapr> betabot: @ghci :t getArgsAndInitialize
13:16:23 <betabot> getArgsAndInitialize :: IO (String, [String])
13:16:48 <shapr> that's pretty spiffy
13:16:58 <shapr> hram: is there some way to see what modules are in scope?
13:17:10 <shapr> obvious @ghci :m would get rid of everything at once
13:17:26 <shapr> betabot: :b Char
13:17:27 <betabot> Sorry, I'm not a very smart bot yet, try "lambdabot: @listcommands"
13:17:34 <shapr> betabot: @ghci :b Data.Char
13:17:38 <betabot> data Char =
13:17:38 <betabot> ord :: Char -> Int
13:17:38 <betabot> chr :: Int -> Char
13:17:38 <betabot> type String = [Char]
13:17:38 <betabot> intToDigit :: Int -> Char
13:17:39 <betabot> showLitChar :: Char -> String -> String
13:17:41 <betabot> digitToInt :: Char -> Int
13:17:43 <betabot> lexLitChar :: String -> [(String, String)]
13:17:45 <betabot> readLitChar :: String -> [(Char, String)]
13:17:47 <betabot> [14 @more lines]
13:17:52 * shapr cheerfully spams the channel
13:18:06 <hram> @more
13:18:06 <betabot> isAlpha :: Char -> Bool
13:18:06 <betabot> isAlphaNum :: Char -> Bool
13:18:06 <betabot> isAscii :: Char -> Bool
13:18:06 <betabot> isControl :: Char -> Bool
13:18:06 <betabot> isDigit :: Char -> Bool
13:18:07 <betabot> isHexDigit :: Char -> Bool
13:18:07 <lambdabot> wrong type (<<[] Char>>) in ModuleState
13:18:09 <betabot> isLatin1 :: Char -> Bool
13:18:11 <betabot> isLower :: Char -> Bool
13:18:13 <betabot> isOctDigit :: Char -> Bool
13:18:15 <betabot> [5 @more lines]
13:18:22 <hram> and more works too!
13:18:25 <shapr> huh, I thought lambdabot was fixed
13:18:25 <hram> @more
13:18:25 <lambdabot> wrong type (<<[] Char>>) in ModuleState
13:18:25 <betabot> isPrint :: Char -> Bool
13:18:25 <betabot> isSpace :: Char -> Bool
13:18:25 <betabot> isUpper :: Char -> Bool
13:18:25 <betabot> toLower :: Char -> Char
13:18:25 <betabot> toUpper :: Char -> Char
13:18:46 <shapr> does it fail only if empty?
13:18:51 <shapr> betabot: @more
13:18:56 * shapr blinks
13:19:28 <shapr> lambdabot: @more
13:19:29 <lambdabot> wrong type (<<[] Char>>) in ModuleState
13:19:34 * shapr is confused
13:19:55 <shapr> bah, foodtime
13:20:13 <Riastradh> Bah??
13:20:24 <Riastradh> Food is _bahful_?
13:21:53 <Heffalump> food is a distraction from hacking
13:27:46 <Riastradh> Food is necessary _for_ hacking.
13:28:00 <Riastradh> The best food is that which tastes good _and_ is not very distracting.
13:28:16 <Riastradh> Capsaicin doesn't count towards the distraction factor because it stimulates you to hack faster.
13:28:51 <Smerdyakov> Like vegan "buffalo wings" from Gardenburger. I recommend highly.
13:29:09 <Riastradh> So well-packed burritos stuffed full of habaneros are good hacking food.
13:30:48 <Riastradh> Buffalo wings are far too distracting.  You have to navigate through the bones, and then you get grease all over your keyboard.
13:30:52 <shapr> Smerdyakov: I agree, I enjoy eating vegans.
13:31:29 * shapr attempts to eat while hacking
13:32:48 <shapr> so, I couldn't figure out a way to do IO computations in hram's GhciModule, if someone does figure out a way, please tell me.
13:37:47 <Smerdyakov> Riastradh, those I spoke of have no bones.
13:37:56 <Smerdyakov> Riastradh, it's textured soy.
13:38:22 * Riastradh restrains doing something.
13:38:29 <shapr> Bea made some elk gratin today, it's very nice.
13:38:42 <Marvin--> I was just going to ask how something that's vegan has bones...
13:39:16 <shapr> crap, I can't figure out why gpg is failing.
13:39:26 <Riastradh> Marvin--, well, if it were an attempt to _realistically_ imitate buffalo wings, it would have fake bones.
13:39:27 * shapr grumbles
13:40:02 <shapr> Marvin--: can you make changes to the hlibs darcs repo?
13:41:32 <Marvin--> shapr: no idea
13:41:43 <Marvin--> and I'd be afraid to try since I haven't used darcs for a while :-P
13:41:46 <shapr> ok
13:41:57 <shapr> could someone try to push a change to the hlibs darcs repo?
14:17:37 <Marvin--> gnome hackers seem to be dying at a rate of one per month these days :-(
14:17:48 <shapr> ?
14:18:34 <Marvin--> in November, Chema died, in December, Ettore died, both Ximian people, and now Mark Finlay is dead
14:20:21 <phubuh> yeah, it's horrible :(
14:20:32 <shapr> what happened?
14:27:20 * shapr googles
14:29:44 <shapr> hi Sean
14:29:49 <Sean> hey
14:29:53 <shapr> how's code?
14:30:05 <Sean> haha decent
14:30:35 <shapr> have you been here before?
14:31:15 <Sean> nope
14:31:20 <Sean> in not this channel
14:31:39 <shapr> are you learning Haskell? or looking for other users?
14:32:52 <shapr> I'm the local proselytizer, that's why I ask.
14:33:21 <phubuh> @introductory-interview
14:33:22 <lambdabot> Sorry, I don't know the command "introductory-interview", try "lambdabot: @listcommands"
14:33:25 <phubuh> bah!
14:33:27 <shapr> phubuh: :-P
14:33:34 <shapr> phubuh: quick, contribute it!
14:33:59 <phubuh> hee hee :-)
14:34:21 <shapr> phubuh: we're having a bughunt party on #joy
14:34:34 <shapr> Darius just pulled off some Template Haskell magic with @ghci
14:34:47 <phubuh> ooh
14:57:53 <shapr> Sean: still awake?
15:04:15 <shapr> Igloo: any idea if "ghc -fglasgow-exts -fno-th" should still allow Template Haskell
15:04:35 <shapr> ?
15:05:39 <shapr> docs say that -fglasgow-exts implies -fth, but I wonder if -fno-th should counteract that.
15:05:59 <Igloo> I'd expect the last one to win
15:06:06 <Igloo> I haven't looked to see what happens, though
15:07:23 <shapr> Igloo: -fglasgow-exts -fno-th still allows splices in GHCi at least.
15:07:34 <shapr> I haven't check to see if it's different without --interactive
15:07:59 * shapr yawns
15:08:15 <shapr> Igloo: you think it's worth me reporting that as a bug?
15:09:05 <Igloo> I think it's non-standard, so yeah
15:09:10 <shapr> ok, thanks
15:09:22 <Igloo> Better to turn the features you want on than to disable those you happen to nkow your code breaks with IMO, though
15:20:23 <Smerdyakov> Anyone know how to get CVS to tell you which files you've changed in a repository and would be committed if you asked?
15:21:00 <phubuh> cvs diff :)
15:21:08 <Heffalump> cvs -qn update
15:21:32 <Heffalump> (-q to stop it telling you what directories it is visiting, -n to stop it actually pulling updates from the server)
15:21:46 <Smerdyakov> OK
15:21:53 <Smerdyakov> Thanks
15:21:55 <Heffalump> the ones that are marked as M are locally changed, P and U would be patched from the server, ? are files not in CVS and not in .cvsignore
15:22:12 <Smerdyakov> Oo. Useful.
15:22:36 <Heffalump> I've spent far too long working with CVS :-)
15:37:36 <isomer> Smerdyakov: i find the following two aliases extremely useful:
15:37:43 <isomer> alias cvsmod='cvs -n update 2>/dev/null | grep "^M"'
15:37:43 <isomer> alias cvsnew='cvs -n update 2>/dev/null | grep "^\?"'
15:38:12 <isomer> cvsmod shows you what files you've modified, and cvsnew shows you what files need to be added to cvs (or .cvsignore)
15:38:17 <Smerdyakov> I seeee.
15:38:24 <Heffalump> -q is better than 2>/dev/null, cos of real errors
15:38:42 <isomer> hmm... fair enough. thanks
15:38:55 <Heffalump> (I used 2>/dev/null for ages until someone pointed -q out to me :-)
15:39:05 * isomer changes his .bashrc
15:40:23 <isomer> yeah, that works well. thanks Heffalump
16:15:15 <earthy> g'night all
19:18:42 * SamB doesn't think he'll be happy with the math in any programming language ever again
19:22:07 <Riastradh> The numerical support or the semantic mathematics?
19:22:34 <shapr> or maybe the lack of functional dependencies in other languages?
19:23:55 <SamB> shapr: they don't work well with numbers which aren't annotated with their types
19:25:27 <SamB> well, not yet, anyway.
19:25:50 <SamB> note that I said *any* programming language.
19:26:49 <shapr> everything could use some improvement
19:26:57 <shapr> but I haven't found anything better than Haskell so far
19:29:34 <shapr> Igloo: have you made your zsh prompt public yet?
19:30:09 <Igloo> No  :-(
19:30:17 * Igloo has too many interesting distractions
19:30:44 <shapr> aww
19:30:53 <shapr> it's a rather sexy looking prompt.
19:31:13 * shapr considers googling for zsh prompts
19:31:40 <SamB> yeah, thats part of the problem, I haven't found something that looks like a non-toy functional language which would allow pretty matrix/vector math...
19:34:41 <Riastradh> SamB, just wait for Haskell Two, where we shall split Num into several typeclasses.
19:34:48 <clausen> SamB: me neither
19:35:03 <clausen> SamB: I think we need some abstract Ring typeclass
19:35:39 <clausen> and some syntatic sugar to make matrices pretty
19:35:45 <clausen> (matrices are rings)
19:37:17 <SamB> Riastradh: you mean like Add a b c | a b -> c?
19:38:21 * SamB wonders jokingly why its not called Haskell XP
19:39:03 <clausen> oops, I was talking rubbish
19:39:13 <clausen> only square matrices are rings
19:39:19 <Riastradh> SamB, yes, like that.
19:39:37 <SamB> clausen: thats okay, I didn't understand you anyway ;-)
19:39:46 <clausen> do you know what a ring is?
19:39:58 <Riastradh> SamB, of course, you could write your own layer over what Haskell provides.
19:39:59 <clausen> it's a generalization of fields
19:40:10 <clausen> (as in Q, R, C)
19:40:43 <SamB> clausen: I've neglected my education in that area, it would seem...
19:41:05 <clausen> Q = rational numbers, R = real numbers, C = complex numbers
19:41:09 <clausen> (know what I'm talking about?)
19:43:02 * SamB tries looking it up in wikipedia
19:43:48 <clausen> wikipedia seems to have died recently :(
19:43:59 <SamB> oh? well then why is it working?
19:46:18 <shapr> seafood: g'day
19:46:49 * shapr goes back to sleep
19:47:40 * SamB wishes they would advertise the books these subjects appear in on the pages ;-)
19:48:25 <clausen> SamB: they've fixed it a fair bit :)
19:48:53 <clausen> SamB: there's a reasonable online book on Abstract Algebra
19:49:10 <clausen> http://www.math.niu.edu/~beachy/aaol
19:49:51 <SamB> cool
19:53:13 <clausen> seafood: you know Allan Blair?
19:53:27 <clausen> (he spells it Alan, oops)
21:31:08 <stepcut> template haskell is cool
21:31:26 <stepcut> I am currently writing a program, that when compiled, accesses a mysql database
21:31:45 <stepcut> hrm
21:31:50 <stepcut> let me rephrase that better:
21:32:20 <stepcut> I am writing a program, that accesses a database during the compilation process
23:12:15 <seafood> clausen: Actually yes, I do know Alan Blair.
23:12:46 <clausen> seafood: I haven't spoken to him for ages
23:12:56 <clausen> seafood: but I used to chat with him lots
23:13:00 <clausen> (when he was in melbourne)
23:13:06 <clausen> you know him well?
23:16:17 <seafood> clausen: No, I don't. Just met him a couple of times.
23:21:27 <clausen> he was very popular in unimelb
23:21:46 <clausen> although the students sometimes thought he didn't know very much about maths
23:21:51 <clausen> (which is wrong - he did a PhD in applied maths)
23:22:15 <clausen> he said: "with this back propagation, it's fairly easy to prove that this formula works..."
23:22:26 <clausen> "... you don't believe I can do it, do you?"
23:22:32 <clausen> (so he then did it :)
23:39:36 <seafood> clausen: Hehe. That's a great story.
