02:43:26 <det> shapr: around?
03:37:40 <ham[let]> hidiho
03:38:11 <ski> hi
03:52:25 <shapr> det: yes
03:52:31 <ski> @arr
03:52:32 <lambdabot> Arrr!
03:52:34 <shapr> @arr
03:52:35 <lambdabot> Yeh scurvy dog...
03:52:48 <ham[let]> heh
03:52:50 * ski :)
03:53:15 <shapr> @fortune
03:53:17 <lambdabot> Historical Slumming:
03:53:17 <lambdabot> 	The act of visiting locations such as diners, smokestack
03:53:17 <lambdabot> industrial sites, rural villages -- locations where time appears to
03:53:17 <lambdabot> have been frozen many years back -- so as to experience relief when
03:53:17 <lambdabot> one returns back to "the present."
03:53:18 <lambdabot> 		-- Douglas Coupland, "Generation X: Tales for an Accelerated
03:53:20 <lambdabot> 		   Culture"
03:54:10 <ski> wasn't there a @more feature ?
03:54:16 <shapr> there was
03:54:18 <shapr> there still is
03:55:35 <ski> hmm, guess it could perhaps be hard to predict flooding limits ..
03:55:55 <shapr> it's configurable in BotConfig.hs
03:56:16 <ski> mhm
03:57:11 <ski> mm, what should we do in the StudyGroup ?
03:57:43 * ski just enlisted
03:58:10 <ski> study ?
03:58:17 <shapr> good idea!
03:58:42 <darius-> studygroup?
03:58:46 <shapr> I thought it would be a good place to collect questions, notes, ideas, etc
03:58:48 <ski> compare solutions to exercises ?  discuss ?
03:58:56 <shapr> darius-: http://www.haskell.org/hawiki/StudyGroup
03:59:03 <shapr> yah, that sort of stuff
03:59:18 <darius-> cool
03:59:19 <ski> yea
04:00:32 <shapr> I wonder what else fits there, maybe wadler's Marriage of Effects and something paper?
04:00:51 <ski> shapr : monads IIRC
04:05:36 <ski> well, is it supposed to be related to monads or category theory ?
04:07:51 <ham[let]> monads are CT
04:07:58 <ham[let]> its a categroy
04:08:01 <ham[let]> er gory
04:09:05 <ski> i know, but many haskell&monads papers doesn't mention category theory much/explicitely ..
04:09:27 <ham[let]> yeah because its not really needed i guess
04:10:12 <ski> though, i would guess that those 2 moggi papers do
04:14:42 <darius-> shapr - know what i'd like to see in haskell-libs?  a subdirectory for totally random stuff that's short and cute
04:25:44 <shapr> darius-: that's a great idea
04:25:54 <shapr> darius-: want me to give you commit privs? :-)
04:25:57 <ham[let]> whats a subdir?
04:26:20 <ham[let]> within haskell or in the wiki?
04:26:25 <darius-> shapr - ok, but i won't be very active :)
04:26:33 <shapr> ham[let]: within haskell-libs.sf.net
04:26:34 <darius-> hamlet - i meant in the cvs
04:26:51 <ham[let]> ah ok i was confused for a sec :)
04:26:59 <shapr> darius-: plus I'd like to encourage use of the darcs repo for haskell-libs, if it were online and accessible :-/
04:27:01 <ham[let]> not that this isnt my usual state ;)
04:27:24 <shapr> just gotta get the hardware to my colo ISP
04:27:25 <darius-> shapr - i'd rather wait till i have my own machine up again
04:27:59 <shapr> ok
04:28:18 <darius-> i do have cvs installed here
06:00:17 <shapr> ok, ScannedInAvian.org should be back up tomorrow.
06:11:25 <ham[let]> shapr what kind of site is that?
06:15:01 <shapr> ham[let]: it's my personal DNS name and server, but it has hosted the darcs repo for haskell-libs in the past, and has also hosted lambdabot, since my desktop machine isn't so stable.
06:15:20 <ham[let]> ah thx
06:15:35 <ham[let]> is there any ai repository for haskell?
06:15:37 <shapr> I'm going to setup gforge there as well, since I'd like to propose a gforge.haskell.org community site.
06:16:27 <ham[let]> whats that gforge thing?
06:16:37 <shapr> if you can think of other useful haskell community services that I could host, I'd like to hear about them.
06:16:53 <shapr> http://gforge.org/
06:17:01 <shapr> it's a mini-sourceforge
06:17:25 <ham[let]> ah cool
06:17:54 <shapr> it only supports CVS right now, but I'd like to add darcs support.
06:18:22 <shapr> I don't know of an AI repository for Haskell, but if the gforge thing works, you can start one :-)
06:18:40 <ham[let]> :)
06:18:45 <ham[let]> maybe i do so
06:18:59 <ham[let]> i found a cool site sev
06:19:00 <ham[let]> sec
06:19:20 <ham[let]> http://web.engr.oregonstate.edu/~erwig/papers/abstracts.html
06:19:34 <ham[let]> that contains a lot on FP and graphs
06:19:54 <ham[let]> id really like to do some work on that i think once i am into haskell
06:20:10 <shapr> jump in, Haskell is great fun
06:20:34 <ham[let]> yes i will do so i think haskell is what i longed for quite some time
06:21:29 <ham[let]> i just need to find a problem that is intriguing enough to make me think about it :)
06:23:38 <ned> ham[let]: if you want a never-ending project, try to code a go player
06:23:43 <ned> :)
06:24:04 <shapr> y0 SyntaxNinja, ScannedInAvian.org should be up tomorrow.
06:24:06 <ham[let]> heh
06:24:10 <ham[let]> any go players in here?
06:24:20 <ned> a great reward in case of success :)
06:24:25 <ned> yep
06:24:37 <SyntaxNinja> ham[let]: there are several :)
06:24:39 <shapr> SyntaxNinja: leastways, I have an 8am appointment to plug it into power&network at my colo ISP.
06:24:48 <ham[let]> oh cool
06:24:50 <shapr> hi dak 
06:25:05 <SyntaxNinja> shapr: cool!  i'm excited.
06:25:32 <shapr> yah, I want to play with gforge.
06:25:44 <ham[let]> anyone of you in for a game on kgs now?
06:25:51 <shapr> can you think of other useful services for the Haskell community?
06:26:00 <ned> not now for me, sadly
06:26:29 <ham[let]> what id like to have is something like seti
06:26:43 <SyntaxNinja> ham[let]: mgoetze often is looking for games. I think emu also plays, iirc.
06:26:49 <ham[let]> you provide some module and that is run on your machine and you can share your CPU power
06:26:56 * SyntaxNinja is at work, so no game for me.
06:27:02 <shapr> so I heard SPJ wants nice syntax for commuter monads. I guess that would let you easily specify the traveling salesman problem.
06:27:36 <shapr> ham[let]: there is an app like that
06:27:40 <SyntaxNinja> shapr: don't know. I'll think about it.  we could set up a bugzilla thing too, and maybe phpgroupware, just to check 'em out.
06:27:46 <ham[let]> oh there is whats its name?
06:27:53 <SyntaxNinja> phppgroupware is probably not too relevant.
06:28:05 <shapr> ham[let]: recently released by some US research group, it's win32 specific. I think I saw it on slashdot, I've forgotten the name.
06:28:37 <ham[let]> ah nice cause i have been thinking that this would be a great thing like filesharing (cpu power sharing)
06:28:53 <shapr> bonjour ned, comment Ã§a va?
06:29:07 <ham[let]> shapr how long is it since you have seen it? cause i dont read /.
06:29:21 <shapr> sometime in the last two weeks I think
06:29:29 <shapr> you may find it if you google for grid computing
06:29:40 <ham[let]> ah thx ill look for it
06:30:35 <ham[let]> what would be cool is something like a bookshelf shapr
06:30:49 <shapr> there's http://haskell.readscheme.org/
06:30:54 <ham[let]> where ppl could comment on books and list them in there personal profile
06:30:59 <shapr> but it could be more comprehensive
06:31:12 <shapr> ah, that sounds like the research paper wiki I've been thinking about.
06:31:16 <ham[let]> and then something that links to online papers and books
06:31:18 <shapr> yes, that would be useful
06:31:43 <ham[let]> cause often i want to know it its worth to buy a book and amazon isnt much of a help there really
06:33:11 <ham[let]> to be honest i dont like the shape of that site
06:33:41 <ham[let]> i would like to see the topics in one column its hard to read all the topic names
06:40:56 <shapr> ham[let]: if you click on one of the boxes, you can see the list of topics in the left navigation column
06:41:08 <mgoetze> ham[let]: da kommste in die deutsche ecke, ueberzeugst n 3d mit dir n spiel zu spielen, und haust dann einfach wieder ab?
06:41:24 <SyntaxNinja> yay! spj found and fixed a bug I filed 2 days ago
06:41:25 <mgoetze> ham[let]: also, so wird das nichts mit deiner go-karriere
06:41:41 <esskay> hello shapr, not on #emacs today?
06:42:04 <shapr> nah, trying to do some work
06:43:22 <shapr> irc: is that an eponymous nickname?
06:43:52 <irc> no, thats a fallback name of gaim
06:44:16 <irc> cptchaos is already used
06:45:22 <shapr> it doesn't seem to be used on freenode.
06:45:54 <irc> hm ...
06:48:36 <amb> Hi everyone
06:49:06 <amb> Can you help me with a small problem? Shouldn't take more than 10-20 secs for you :-)
06:49:37 <shapr> amb: it's better to ask the question rather than asking to ask
06:49:52 <amb> ok :-)
06:50:02 <amb> maxl :: [a] -> a
06:50:04 <amb> maxl [x] = x
06:50:04 <amb> maxl (x:xs)
06:50:04 <amb> 	| x < maxl xs = maxl xs
06:50:04 <amb> 	| otherwise = x
06:50:09 <amb> what is the problem with this? :-)
06:50:46 <shapr> cptchaos: yay, it worked!
06:51:04 <amb> When I run it I get a mistake in the "maxl[x] = x" line
06:51:25 <amb> If I delete the guards though, it works
06:51:25 <cptchaos> hm, has been misconfigured
06:52:07 <shapr> amb: what does the "max [x] = x" line do?
06:52:30 <earthy> amb: is this haskell or clean? :)
06:52:33 <amb> it should return x if max only has a single element in the paramlist
06:52:41 <amb> clean?
06:52:47 <amb> it should be haskell
06:52:56 <earthy> ah
06:52:58 <earthy> 'kay
06:53:08 <shapr> amb: I think that line doesn't actually say that.
06:53:19 <amb> ouch, that might be it then :-)
06:53:45 * shapr tries
06:53:57 <earthy> maxl (x:[]) = x     would though
06:54:04 <shapr> right
06:54:43 <amb> still the same error :-(
06:54:44 <amb> ERROR "D:\Dokumente und Einstellungen\eixei\Desktop\haskell\test.hs":66 - Cannot
06:54:44 <amb>  justify constraints in explicitly typed binding
06:54:44 <amb> *** Expression    : maxl
06:54:44 <amb> *** Type          : [a] -> a
06:54:44 <amb> *** Given context : ()
06:54:46 <amb> *** Constraints   : Ord a
06:54:59 <earthy> owh, yeah. duh.
06:55:19 <earthy> you want to specify the type as   maxl :: Ord a => [a] -> a
06:55:36 <amb> wow, ok, thanks a lot! :-)
06:55:38 <shapr> gee, it works for me.
06:55:44 <shapr> in ghci
06:55:56 <shapr> oh, I didn't give a type sig
06:56:27 <amb> earthy: hugs 98 still doesn't like it :-/
06:57:20 <amb> it works if I define the type to Int though :-)
06:58:04 <amb> I guess I'll let it as Int then
06:58:04 <amb> Thanks a lot!
06:58:45 <earthy> maxl :: Ord a => [a] -> a
06:58:45 <earthy> maxl (x:[]) = x
06:58:45 <earthy> maxl (x:xs) | x < maxl xs = maxl xs
06:58:45 <earthy>             | otherwise   = x
06:58:50 <earthy> that works.
06:59:01 <earthy> in my hugs nov 2002
07:00:22 <earthy> now I may be stupid, but I wouldn't consider my hugs stupid. :)
07:01:08 <amb> lol, yeah it works :-)
07:01:10 <amb> Thanks a lot
07:01:25 <amb> I guess I am just too dumb to type it in right *g*
07:01:45 <earthy> ERROR "maxl.hs":1 - Haskell 98 does not support tag classes
07:01:50 <earthy> yeah. you'n'me both. :)
07:01:59 <amb> *g*
07:02:16 * earthy originally typed maxl :: Ord => [a] -> a
07:02:16 <shapr> tag classes??
07:02:24 <shapr> oh!
07:02:25 <shapr> neato
07:02:47 <amb> Btw, could you tell me what the "Ord a =>" does, or tell me what it is called so I can search for it in google?
07:02:59 <shapr> it's a typeclasse
07:03:04 <shapr> er "typeclass"
07:03:09 <amb> ok, thanks :-)
07:03:17 <earthy> it's a restriction of a to a typeclass
07:03:19 <SyntaxNinja> @wiki TypeClass
07:03:19 <lambdabot> Sorry, I don't know the command "wiki", try "lambdabot: @listcommands"
07:03:36 <amb> hehe
07:03:48 <earthy> syntax meant http://www.haskell.org/hawiki/TypeClass
07:03:59 <shapr> SyntaxNinja: what should that do? look for page name, or do a keyword search if that can't be found?
07:04:26 <amb> thanks, I found exactly that page as the first result in google :-)
07:04:39 <SyntaxNinja> earthy: I was trying to find the place :)
07:04:45 <SyntaxNinja> s/place/URL
07:04:53 <earthy> *ah*. :)
07:05:17 <SyntaxNinja> shapr: I just want it to concat its parameter to the end of "http://www.haskell.org/hawiki/"
07:05:33 <SyntaxNinja> but then later maybe it should do more fancy things.
07:06:21 <earthy> such as?
07:06:33 <earthy> add skeleton pages if the wikiword doesn't currently exist?
07:07:31 <shapr> @wiki ShaeErisson
07:07:31 <lambdabot> http://www.haskell.org/hawiki/ShaeErisson
07:07:55 <phubuh> hee, that was quick
07:08:23 <shapr> I stuffed it into the DummyModule and reloaded the module.
07:09:42 <SyntaxNinja> shapr: you rule.
07:09:57 <shapr> now if only I can get gforge up that quickly :-)
07:10:08 <earthy> hee
07:10:40 <SyntaxNinja> earthy: smarter things might include telling us when / by whom the page was modified, giving us a preview of the content, refusing to post the link of th epage doesn't exist
07:10:49 <SyntaxNinja> do a keyword search, as shapr mentioned
07:17:48 <earthy> ah. yes, I see where that'd come in useful
07:37:31 <cm> ouch @ c.l.f's monads thread
07:37:34 <cm> poor Darius :)
07:37:55 * shapr hasn't read it yet
07:41:05 <cm> hi shapr :)
07:41:17 <shapr> hello cm
07:43:50 <cm> how are you doing?
07:43:59 <cm> pythong-working? ;)
07:44:13 <shapr> yup
07:47:34 <amb> bye everybody
07:47:39 <amb> And thanks a lot again!
07:48:26 <cm> erik meijer is guest-blogger on lambda the ultimate
07:48:33 <cm> very cool, just read the news :)
07:51:08 * shapr looks for the socket code in the GHC runtime system
07:52:18 <shapr> Igloo: ayh?
07:52:32 <Igloo> I have always been here.
07:52:39 <Igloo> (wurble wurble)
07:52:57 <shapr> :-)
07:53:13 <Igloo> Why would there be socket code in the RTS?
07:53:25 <Igloo> If it was me I'd have written it as foreign imports in the appropriate library
07:53:29 <Igloo> Or do I misunderstand?
07:53:31 <shapr> is libraries/network the right place to look for opportunities to add IPv6 support?
07:53:39 <shapr> no, I think you are correct.
07:54:51 <Igloo> network/Network/{BSD,Socket}.hsc look like the places to be
07:55:09 <shapr> ok, thanks
07:55:21 <Igloo> There's probably some stuff in base somewhere too if it's in H98
07:55:24 <SyntaxNinja> hey Igloo: when I apt-get dist-upgrade, and apt wants to remove some packages, why might that typically be?
07:56:09 <shapr> I thought dist-upgrade should be only for going from stable to unstable or so?
07:56:26 <Igloo> It uses some heuristics to spot things like library upgrades I think
07:56:38 <Igloo> Is it removing anything you want to keep?
07:57:04 <Igloo> If so I'd try apt-get install whatever before the dist-upgrade, if not don't worry about it  :-)
07:59:50 <SyntaxNinja> Igloo: well, i'm not the only one using the machine, so it might be stuff that others are using
08:00:11 <SyntaxNinja> and it's tricky stuff like perl libraries and mod-perl
08:00:35 <SyntaxNinja> I was thinking it might want to remove them because I removed the thing that depended on them (for which they were installed), but I ddn't think apt did that (aptitude does, I guess)
08:01:12 <SyntaxNinja> shapr: dist upgrade will install packages that you didn't have installed before if one of the packages you have installed depends on them.  Upgrade won't do that.
08:01:35 <Igloo> Is it upgrading apache to something that has perl functionality included perhaps?
08:02:10 <Igloo> You can ask apt to explain why it does things with -o somethingorother (listed in the example apt.conf IIRC)
08:02:35 <SyntaxNinja> hard to say. there's a good chance that some apache upgrade thing is happening.
08:02:39 <shapr> SyntaxNinja: wouldn't you get the same behaviour with apt-get -f upgrade?
08:02:42 <SyntaxNinja> this system is a mixed stable/unstable thing
08:02:50 <SyntaxNinja> so things are a little confusing
08:03:43 <SyntaxNinja> shapr: not sure
08:04:08 <Igloo> I don't think so
08:04:28 <Igloo> -f is for when things have got into a confused state isn't it?
08:04:57 <shapr> "Fix; attempt  to  correct  a  system  with  broken  dependencies  in  place."
08:05:11 <Igloo> Right
08:05:45 <shapr> so, upgrade will only install packages that do not require new packages to be installed, right?
08:06:01 <shapr> right
08:06:05 <shapr> that's what the man page says
08:06:36 <shapr> neat, I've learned something.
08:06:38 <ham[let]> me |-> (bed,me)
08:06:40 <Igloo> Or other packages to be removed, yes
08:06:41 <ham[let]> see you laters
08:06:54 <shapr> ham[let]: it's only 5pm!
08:06:58 <shapr> cya
08:07:10 <ham[let]> yeah but my rythm is screwed
08:07:18 <shapr> yah, so's mine
08:07:19 <ham[let]> i stand up at 4 in the morning
08:07:29 <shapr> that sounds like a nice rhythm
08:07:39 <ham[let]> ill get a quick nap now and then stand up again
08:07:50 <ham[let]> and stay up till 12h or so
08:08:01 <ham[let]> then sleep 4h and get up again :)
08:08:17 <ham[let]> the shit is that you dont get food at 4h in the morning
08:08:18 * Magico is away: busy.
08:08:19 <shapr> I've heard that called polyrhythmic sleep.
08:08:28 <ham[let]> hm
08:08:32 <ham[let]> is that any good?
08:08:47 <shapr> some people claim it lets you get less sleep and better functionality
08:08:48 <ham[let]> i try to sleep when i am sleepy
08:08:57 <ham[let]> and eat when i am hungry and such
08:09:22 <shapr> supposedly you can get four or six hours of polysleep and still work just as well (or better)
08:09:25 <shapr> I haven't tried it myself.
08:09:40 <ham[let]> i sleep about 4-6h intotal a day
08:10:03 <shapr> I'd like to sleep less, do more.
08:10:08 <ham[let]> depends on how exiting the day is :)
08:12:15 <earthy> ham[let]: and you survive on that?
08:12:16 <earthy> wow.
08:12:27 * earthy is at 6h and that is Too Darn Little
08:12:28 <ham[let]> ?
08:12:50 <ham[let]> i have been working for 1 1/2 year 7d per week
08:12:52 <earthy> (I mean, I don't drop down, but I should sleep ~7h to be fully functional)
08:12:54 <ham[let]> 14-16h a day
08:12:55 * Smerdyakov is pretty consistent around 8h.
08:13:01 <ham[let]> and had 7 days off in that period
08:13:13 <earthy> ham[let]: what were you working on?
08:13:17 <Smerdyakov> ham[let], and you are happy with that schedule?
08:13:22 <ham[let]> atm i am studying again
08:13:24 <Magico> There is a portuguese famous politician (and book reviewer, lawyer, writer, and so on...) who sleeps only 4 hours each day
08:13:30 <ham[let]> Smerdyakov yes it was fun 
08:13:37 <ham[let]> i worked as a game programmer
08:13:46 <Smerdyakov> Oh, OK. Coool. :D
08:14:23 <ham[let]> worked on gothic and an engine that was never released ;)
08:14:37 <cm> hehe
08:14:43 <ham[let]> www.codecult.de
08:14:51 <cm> oh yeah, that one :)
08:15:08 <ham[let]> though that was due to the fact that the mother company did fraud on business bills
08:15:24 <ham[let]> cm you have heared of cc?
08:15:26 <cm> yup
08:15:33 <ham[let]> from me?
08:15:51 <cm> nope; wasn't there a techdemo of the engine at some point?
08:16:00 <ham[let]> yes
08:16:04 <ham[let]> we did a tech demo for nv
08:16:15 <cm> hrm, codecreatures, was that the name of the engine?
08:16:16 <ham[let]> which was released with the gf4ti i think
08:16:20 <ham[let]> yep
08:16:21 <cm> remember something like that
08:16:23 <cm> ah :)
08:16:45 <ham[let]> i did the water and the sky in that demo
08:17:11 <ham[let]> though the sky had a lot more featrues that werent shown in the demo
08:17:18 <cm> the engine looked really cute from the pics i saw at that time :)
08:17:24 <ham[let]> it had some kind of pseudo raytracing
08:17:45 <earthy> ham[let]: raycasting?
08:17:47 <ham[let]> and it was also able to clip the sun against the clouds
08:18:09 <cm> are you located in germany, btw? (as you worked on gothic)
08:18:09 <ham[let]> yeah i did some atmosphere stuff for the sky colour
08:18:18 <ham[let]> cm yep
08:18:31 <cm> die welt ist klein :)
08:18:36 <ham[let]> :)
08:20:04 <earthy> und wird jeden tag kleiner
08:20:11 <ham[let]> haha
08:20:31 <kosmikus> solange sie nicht negativ wird ...
08:20:37 <ham[let]> :)))
08:20:42 <cm> :)
08:20:51 <cm> atliens!
08:21:01 * earthy suddenly tninks of Zeno's paradoxes... ;)
08:21:05 <earthy> s/tni/thin
08:21:07 <shapr> I finished the first book in Quicksilver last night, it's quite spiffy so far.
08:21:13 <ham[let]> earthy which say?
08:21:31 <ham[let]> shapr what quicksilver books?
08:21:42 <shapr> the first book of three by Neal Stephenson
08:21:48 <ham[let]> ah
08:21:52 <ham[let]> which one?
08:21:57 <ham[let]> snow crash?
08:22:06 <shapr> nah, quicksilver is his latest
08:22:08 <earthy> snow crash is not one of the quicksilver books, IIRC
08:22:11 <ham[let]> ah :)
08:22:23 <ham[let]> thats the name not the shape
08:22:25 <ham[let]> heh
08:22:36 <earthy> ham[let]: zeno states that achilles cannot overtake a tortoise
08:22:43 <shapr> http://www.amazon.com/exec/obidos/tg/detail/-/0380977427/
08:23:03 <ham[let]> i just have snow crash and the cryptonomicon
08:23:13 <earthy> for, by the time achilles has reached the point the tortoise is at, the tortoise has moved on
08:23:24 <ham[let]> and i have yet 4 gibson books to finish
08:23:38 <ham[let]> ah i remember ;)
08:23:40 <earthy> and given that the time interval will never reach zero, he can never overtake the tortoise.
08:25:52 <ham[let]> has anyone of you a link to an implementation of an irc client written in haskell?
08:26:01 <earthy> @google hircules
08:26:01 <ham[let]> or that source of that lambdabot or so?
08:26:01 <lambdabot> Sorry, I don't know the command "google", try "lambdabot: @listcommands"
08:28:58 <harsha123> @listcommands
08:28:59 <lambdabot> I react to the following commands: ["all-dicts","arr","define","definitions","del-definition","devils","dict","dict-help","dummy","dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo","elements","eval","foldoc","fortune","gazetteer","get-definition","goodbye","hello","hitchcock","jargon","join","karma","karma+","karma-","leave","listchans","listcommands","listmodules","lojban","more","msg","part","prelude","quit","reconne
08:29:19 <Smerdyakov> @lojban lojban
08:29:20 <lambdabot> ERROR: connect: does not exist (Connection refused)
08:29:45 <phubuh> @cmafihe lojban
08:29:45 <lambdabot> Sorry, I don't know the command "cmafihe", try "lambdabot: @listcommands"
08:29:54 <phubuh> bah.
08:31:49 <cm> @karma
08:31:50 <lambdabot> I can't find the karma of nobody.
08:31:56 <cm> @karma cm
08:31:56 <lambdabot> You have a karma of 0
08:31:59 <cm> :(
08:32:51 <Smerdyakov> Better than -inf
08:33:25 <ham[let]> @karma ham[let]
08:33:26 <lambdabot> You have a karma of 0
08:33:32 <ham[let]> how do i get karma?
08:33:38 <cm> @karma+ cm
08:33:39 <lambdabot> You can't change your own karma, silly.
08:33:40 <cm> :P
08:33:47 <earthy> @karma shaper
08:33:47 <lambdabot> shaper has a karma of 0
08:33:48 <Magico> the bot is programmed in what language?
08:33:49 <earthy> @karma shapr
08:33:49 <cm> @karma- lambdabot 
08:33:49 <lambdabot> shapr has a karma of 0
08:33:49 <lambdabot> lambdabot's karma has been decremented.
08:33:54 <ham[let]> @karma+ cm
08:33:54 <lambdabot> cm's karma has been incremented.
08:33:58 <earthy> @karma+ shapr
08:33:58 <lambdabot> shapr's karma has been incremented.
08:33:59 <ham[let]> :)
08:34:03 <earthy> @karma shapr
08:34:03 <lambdabot> shapr has a karma of 1
08:34:09 <Smerdyakov> Possibly the dumbest possible use for a bot.
08:34:19 <cm> alright, i'll bbl
08:34:37 <cm> (finish consuming "modern compiler impl. in ml"
08:35:34 * earthy should go home and continue consuming `An early implementation of revised ALGOL 68'
08:38:31 <SyntaxNinja> Magico: the bot is written in haskell
08:52:21 * Igloo reads the ghc 6.2 ports message and wonders if it relies on already having a GHC or if it has the .hc files included
09:28:42 <cptchaos> Could anyone, please, tell me what the type _|_ is ? 
09:28:48 <shapr> it's called bottom
09:28:57 <Igloo> Are you sure youi mean type?
09:29:16 <esap> It represents "absurd" or "impossible" or "infinite loop".
09:29:17 <cptchaos> in the Haskell report they called it a type
09:29:18 <phubuh> that's the bad-bad value
09:29:19 <Igloo> Rather than "type of" or "value"?
09:29:28 <Igloo> Where abouts?
09:29:36 <Cale> It's an element of every type.
09:29:51 <cptchaos> ah thanks
09:34:44 <cptchaos> Igloo: sorry, the report is correct, they use is as a value of any type
10:04:50 * esap just figured out a way to build polymorphic lists.
10:06:17 <shapr> how?
10:06:57 <esap> you have to include an operation to access the elements in the same data structure.
10:07:03 <esap> >data PEList b = forall a. PEList (a -> b -> b) !(Either b (a, PEList b))
10:07:53 <esap> 'a' is the element type.
10:10:23 <esap> Now you can fold over this list by applying the embedded function and obtain a value of type 'b'.
10:13:23 <shapr> is that ! in the type a strictify?
10:13:33 <esap> yup.
10:14:48 <esap> I'm not sure it's really needed, most uses of Either type need to evaluate it anyway.
10:24:01 <esap> it's not strictly necessary to embed that function in the type, but it helps, because then you can include element-specific handling in the list itself.
10:36:51 * Smerdyakov is skeptical.
10:36:56 <Smerdyakov> Doesn't look like a very useful datatype.
10:38:47 <esap> I guess it works if your list contents is relatively stable, and you have limited amount of things you want to do with it.
10:39:50 <Smerdyakov> What can the function possibly do with the a?
10:41:29 <esap> It depends on what 'b' is. For example, if b is Integer, then the function can for example first use 'fromIntegral' and then sum it.
10:42:05 <Smerdyakov> I don't follow. Can you give the code for this function?
10:42:30 <esap> \x f -> fromIntegral x + f
10:43:04 <Smerdyakov> But that function doesn't have the right type. Not all a's give valid parameter types for fromIntegral.
10:43:31 <esap> But that's why you have to put in the function already when you construct the list.
10:43:53 <Smerdyakov> That doesn't help.
10:44:18 <Smerdyakov> Either I misunderstand you, or you are confusing universal and existential types.
10:44:30 <esap> that is clearly existential types.
10:45:06 <Smerdyakov> But you use forall! That's universal!
10:45:53 <esap> heh, existential types have syntax that uses 'forall'. It's weird, I agree, but that's what GHC does, I think :-)
10:46:08 <Smerdyakov> O_o
10:46:12 <harsha123> how do i go about reducing this.. ((lambda x (x x))(lambda x (lambda y (x y)))) 
10:47:12 <phubuh> don't you mean (\x -> x x) (\x -> \y -> x y)? :-P
10:48:05 <harsha123> phubuh: not sure! :-(
10:49:04 <Smerdyakov> esap, OK, it makes sense now. But what an odd notation. :D
10:49:36 <harsha123> Smerdyakov: was reading a tutorial at Univ of Cal San Deigo site ..
10:49:40 <harsha123> picked it from there
10:49:42 <esap> smerdyakov: yes. I would very much prefer separate keyword for existential quantification.
10:50:39 <harsha123> thats if you guys are referring to the expression i pasted..:)
10:51:34 <Smerdyakov> harsha123, no
10:51:41 <esap> smerdyakov: GHC manual says "Notice the way that the syntax fits smoothly with that used for universal quantification earlier."
11:09:15 <cptchaos> harsha123: i don't really have a clue, but if it is the same as the notation from phubuh, i would assign each lambda expression a name, and reduce that.
11:09:56 <cptchaos> should be easier to think about.
11:11:56 <cptchaos> so ((lambda x (x x)) is f1 :: ( a -> a ) -> a (right?)
11:13:24 <cptchaos> i am unsure about the type of the first expression, i am just a beginner in functional languages
11:16:16 <Smerdyakov> I think harsha123 is working with the untyped lambda calculus, anyway.
11:16:29 <cptchaos> hm the first expression can not men \x -> x x or it is invalid haskell (so says hugs )
11:16:34 <harsha123> yep untyped
11:16:52 <phubuh> no, that should be valid
11:17:08 <phubuh> err, sorry
11:17:10 <phubuh> interesting.
11:17:17 <cptchaos> hm :type \x -> x x gives
11:17:42 <cptchaos> *** Because        : unification would give infinite type
11:18:10 <cptchaos> but it is untyped ...
11:20:05 <cptchaos> but i really do not have a clue what untyped lambda expressions are ...
11:20:29 <Smerdyakov> Interesting. They're less complex than typed lambda expressions, you know. :)
11:21:44 <cptchaos> hm, I have read "The Craft of Functional Proramming" and i am not studying Informatics
11:22:08 <cptchaos> or Coputersience just Math
11:22:52 <cptchaos> is there a short tutorial on untyped lamda expressions?
11:23:10 <Smerdyakov> Probably, but there really isn't any lurking complexity.
11:23:20 <Smerdyakov> Pretend they're typed and there is only one type that encompasses all possible values.
11:26:12 <shapr> hello botah 
11:28:06 <shapr> batoh: looking for Haskell info?
11:29:40 <phubuh> I think he's looking for some routes
11:29:56 <shapr> routes?
11:30:14 <phubuh> lame joke, look at his quick message
11:30:20 <shapr> heh
11:30:21 <phubuh> or his quit message
11:30:45 <shapr> botah: hello?
11:36:45 <botah> hello :)
11:36:57 <shapr> botah: hello! are you looking for info about Haskell?
11:37:36 <botah> well as one week in haskell... and first day in IRC
11:38:16 <shapr> they're both interesting.
11:38:41 <shapr> if you're learning Haskell, http://www.haskell.org/learning.html may be helpful.
11:38:51 <botah> agree
11:38:58 <shapr> do you have any questions?
11:38:58 <Matt-W> hello botah
11:39:02 <Matt-W> evening shapr
11:39:08 <botah> thanks, I've read some of the texts there
11:39:10 <shapr> good evening Matt-W
11:40:17 <botah> not yet
11:40:24 <botah> hello Matt-W
12:59:11 * Smerdyakov gets e-mail about this: http://www.cs.uoregon.edu/activities/summerschool/summer04/
12:59:14 * Smerdyakov ponders going.
14:11:48 <Riastradh> darcs question: why does it seem to download the original version of every file, every patch ever made for that file, and apply every patch, rather than just having a 'latest' version of each file?
14:14:52 <_joey> which version of ghc  should I install?
14:15:16 <_joey> i have source for 5.04.3
14:16:15 <Matt-W> 6.2 is the latest
14:16:58 <_joey> how is ghc 5.x differnt to 6.x?
14:17:33 <Riastradh> It's older.
14:17:44 <Matt-W> language features, supported architectures, bugfixes, optimisation paths, all kinds of things people put into compilers when they're bored...
14:18:41 * Matt-W -> bed
14:19:13 <_joey> hwat I am curious is why 5.04.3 is getting installed using packaging system
14:19:54 <SyntaxNinja> _joey: you can read about the differences if you look at the release notes for each version here: http://www.haskell.org/ghc/overview.html
14:20:01 <SyntaxNinja> (click on the version, then click on "Release notes")
14:21:12 <SyntaxNinja> _joey: what packaging system?
14:21:41 <_joey> pkgsrc
14:22:26 <_joey> person who maintains ghc decided to keep 5.04.3 instead of ghc 6.x
14:22:27 <SyntaxNinja> no idea what that is. maybe ghc6 hasn't been packaged yet for your operating system?
14:23:36 <_joey> NetBSD's pkgsrc , direcotry of Makefiles, similar to FreeBSD's ports
14:24:14 <SyntaxNinja> I see.  Not sure why someone would avoid GHC 6. it's pretty darn good. perhaps 5.04.3 is more stable, but I doubt it actually.
15:49:34 <det> Pseudonym: heya
15:49:41 <Pseudonym> G'day.
15:51:59 <det> lindor isnt being a very good slave :)
15:52:09 <det> I think detriment.org may be typoed
15:52:16 <det> for DNS
15:52:21 <Pseudonym> Let me look.
15:53:06 <Pseudonym> Aha.
15:53:13 <Pseudonym> I wrote "detriment.com".
15:53:27 <Pseudonym> I see your zone file now. :-)
15:54:12 <det> hooray!
15:54:23 <det> thanks! :)
15:57:38 <Pseudonym> Lindor needs some encouragement every now and then.
16:21:08 <cm> what program do you guys use to create presentations?
16:21:29 <Igloo> I normally use prosper.sf.net
16:22:17 <cm> has it worked well so far?
16:24:04 <Pseudonym> I often use LaTeX.
16:24:19 <Pseudonym> Make PDFs and use acrobat reader in full-screen mode to actually present.
16:27:32 <Igloo> That's what I do - prosper is a LaTeX package
16:27:37 <Pseudonym> Ah, OK.
16:27:46 * Pseudonym usually used slitex
16:27:50 <Igloo> And yeah, it's worked as well as anything else I've found
16:29:19 <cm> thanks
16:29:25 <Igloo> http://web.comlab.ox.ac.uk/oucl/work/ian.lynagh/talks/talk.pdf is written using it
16:32:06 <cm> oh.
16:32:17 <cm> you're famous :)
16:32:58 <Pseudonym> That's quite nice.
16:33:30 <cm> one of the TH guys, cool. and yeah, prosper seems nice, thanks
16:33:58 <Pseudonym> Oh, while I think of it, I do have a TH question.
16:34:16 <Pseudonym> Are there tools for generating "data" declarations?
16:34:27 <Pseudonym> All I've seen examples of so far is tools for generating code.
16:36:31 <mattam> Igloo: look at active-dvi
16:37:48 <Igloo> There are a number of different, err, skins? themes?, for it - that one is obviously designed to look like the ppt one that is quite popular
16:38:00 <Igloo> Ta, mattam, I'll have a poke when I have a chance
16:38:12 <Pseudonym> Actually, my last presentation did use ppt.
16:38:15 * Pseudonym felt so dirty
16:38:33 <Pseudonym> http://www.mds.rmit.edu.au/~ajb/renderman/
16:38:36 <Igloo> Pseudonym: You can splice in a list of Decs, and a Dec can be a data declaration - or do you mean something else?
16:38:45 <mattam> you write your slides using LaTeX with some interaction commands like \wait, \embed, transitions etc
16:38:52 <Pseudonym> Yes, I think that's what I mean.  I want to generate data declarations.
16:39:10 <Pseudonym> This came up on haskell or haskell-cafe a month or so ago.
16:39:23 * Igloo doesn't remember it
16:39:52 <Pseudonym> Someone wanted a data structure with annotations, but didn't want any overhead (run-time or coding-time) if there were no annotations attached.
16:40:09 <Igloo> Ah, right, yes, that rings a bell
16:40:17 <Pseudonym> It's the coding-time overhead that I thought TH might be able to cope with.
16:40:44 <Pseudonym> Generate both an annotated and an unannotated version of the same data structure, plus code to move between them.
16:40:49 <Igloo> *nod*, probably a bit more the first time but essentially none thereafter
16:40:58 <Pseudonym> Right.
16:41:27 <Igloo> Should "char *header = (char*)malloc(10*sizeof(char));" give "warning: cast to pointer from integer of different size"?
16:42:08 <Pseudonym> How old is your C library?
16:42:24 <Igloo> It's probably not far off latest Debian unstable
16:42:38 <Igloo> Oh, it'll be a missing #include
16:42:49 <Pseudonym> That was my next guess.
16:43:07 <Pseudonym> Been playing with doxygen.
16:43:19 <Pseudonym> Found one particularly annoying feature so far.
16:43:42 <Pseudonym> It insists that my #include guards are important file-scope members which must be documented.
16:44:23 <Pseudonym> And there's no obvious way to turn that off.
16:44:43 <Pseudonym> Maybe I want haddock for C++.
16:48:49 <Igloo> I was trying to make C headers from C files with cproto earlier, but it wasn't copying #includes or types across, so I had to give up and do it by hand
16:50:06 * shapr decides that grub is spiffier than lilo
16:50:09 * Igloo realises I could have tried just copying the .c to .h. Oh well, too late to worry about it now
16:50:13 <Igloo> Definitely
16:52:46 <shapr> ok, I'm now switching all my boxen to grub.
16:53:04 <Pseudonym> Grub is definitely worth it.
16:53:43 <shapr> lilo just crapped out on me twice
16:54:06 <shapr> necessitating a re-net-install since I don't have a floppy drive in that box.
16:56:41 <shapr> is grub limited to x86?
16:57:59 <Igloo> It's being rewritten (and renamed) to be more easily portable I think
16:58:04 <shapr> oh
16:59:39 <shapr> hey darius-, you have privs in haskell-libs now
16:59:52 <darius-> thanks!
17:00:16 <darius-> you can have the same in epan if you want
17:00:29 <darius-> open to anyone
17:00:35 <shapr> what's epan?
17:00:50 <darius-> like haskell-libs for e
17:00:53 <shapr> oh, neat
17:01:33 <shapr> I haven't written much E code
17:01:40 <Igloo> If it was called haskell-stuff I could put kb in  :-)
17:01:51 <shapr> well, it really is haskell-stuff
17:01:56 <shapr> that probably would be a better name for it.
17:02:05 <darius-> e-stuff would be better too :)
17:02:36 <shapr> since people occasionally get confused about whether haskell-libs.sf.net is "official" or not, it probably wasn't a good name.
17:02:58 <darius-> i'll make a 'stuff' directory as soon as i have anything to put in it
17:03:01 <darius-> or as late
17:05:50 <cm> i'll bbl :)
17:53:27 <Pseudonym> OK, that was odd.
17:54:06 <Pseudonym> I asked a question on #c++.  The response I got was, basically, "use a nonstandard extension and drop support for platforms that don't support it".
17:54:36 <Smerdyakov> I asked a question in #haskell, and people told me to use ghc extensions. ;)
17:54:41 <Pseudonym> :-)
17:54:55 <Riastradh> Ah, but the great difference is, with Haskell, no one uses anything else.
17:55:07 <Pseudonym> At least GHC works everywhere that pretty much ANY haskell implementation works.
18:03:44 <Darius> Where's GHC on a PDA?
19:16:03 * eonbleu PUNCHES NORPAN IN HIS NIGGER FACE WHAP WHAP
19:16:26 <Riastradh> ...
19:18:17 * eonbleu urinates on Riastradh's mexican face
19:18:30 <Riastradh> ...?
19:19:57 <eonbleu> shut up afrikan
19:22:39 <Heffalump> ??
19:23:03 <Heffalump> are you a troll?
19:23:22 * Heffalump is too sleepy to troll-detect properly so will have to rely on asking
19:24:38 <Riastradh> Or a bot, perhaps?
19:25:41 --- mode: ChanServ set +oo Riastradh Heffalump
19:27:03 --- mode: ChanServ set +o Pseudonym
19:27:09 <Pseudonym> Might as well.
19:27:56 <Heffalump> I should go to bed.
19:28:25 <Pseudonym> Night.
19:28:44 <Heffalump> that doesn't mean I *am* going to bed.
19:28:58 <Heffalump> for one thing, I need some conclusions.
19:29:40 <Pseudonym> How about "you're damned if you do and you're damned if you don't"?
19:30:16 <Heffalump> I don't think those would be very good conclusions, for this context.
19:30:28 <Riastradh> What's the context?
19:30:42 <Pseudonym> How about "And they lived happily ever after"?
19:31:12 <Heffalump> a conference talk
19:31:17 <Pseudonym> You could do a deus ex machina, I suppose.
19:31:23 <Heffalump> big scary audience
19:31:45 <Pseudonym> OK.  I propose as your conclusion: "I'll go hide in a corner now."
19:32:12 <Riastradh> Er, what made ChanServ make me an op?
19:32:52 <Heffalump> me
19:33:03 <Heffalump> in an attempt to look threatening to potential trolls
19:33:08 <Riastradh> ...oh.
19:33:12 <Pseudonym> Igloo, how come you're mentioned twice in the list?
19:33:35 <Riastradh> Presumably because he was added twice.
19:33:41 <Igloo> I don't think I knew I was mentioned once...
19:34:21 <Riastradh> Presumably one was before he registered the nick Igloo and one was after, and the person who added the registered nick Igloo wasn't aware of the entry for Igloo!*@*.
19:35:21 <Pseudonym> Tha'ts better.
19:35:41 <Igloo> Is Igloo!*@* the gaping security hole it sounds like?
19:35:51 <Riastradh> Igloo, yup.
19:35:54 <Pseudonym> Yes, I think so.  But the privs are low.
19:36:00 <Riastradh> Not even high enough to get ops.
19:36:04 <Pseudonym> Right.
19:36:10 <Pseudonym> What can you do at level 5?
19:36:14 <Riastradh> Not much.
19:36:30 <Riastradh> I can use the INVITE command.
19:36:50 <Riastradh> And nothing else.
19:36:54 <Pseudonym> Ah.
19:37:44 <Igloo> And to think any old person could have been inviting people - shocking!  :-)
19:37:50 <Pseudonym> I know!
19:38:01 <Pseudonym> Actually, they still can, by the look of it.
19:38:08 <Pseudonym> And they may have done it, 30 weeks ago.
19:38:11 <Riastradh> Yes.  They can use the nick Janni.
19:39:29 <Pseudonym> Are these levels documented anywhere?
19:39:38 <Riastradh> Yes.  With 'level #haskell list'.
19:40:00 <Pseudonym> Ah, so they are.
19:41:31 <Pseudonym> No clue what most of these do.
19:41:39 <Riastradh> Like what?
19:42:05 <Pseudonym> Like all of the channel modes.
19:42:31 <Pseudonym> And what's autovoice?
19:42:39 <Riastradh> Automatic +v upon join.
19:42:49 <Pseudonym> What does that do?
19:42:54 <Riastradh> +v allows speaking while the channel is in +m, moderated.
19:43:00 <Pseudonym> Ah.
19:43:05 <Pseudonym> SO most of these are useless fo rus.
19:43:09 <Riastradh> Yes.
19:46:11 <Heffalump> all we basically need is the ability to get ops very occasionally
20:56:33 <mattam> i'm trying to define an instance of MonadState like this:
20:56:35 <mattam> instance MonadState s (Handler s m) where
20:56:35 <mattam>    put = putState
20:56:35 <mattam>    get = getState
20:56:54 <mattam> where putState and getState have the good types, and Handler is:
20:57:09 <mattam> type Handler s m a = ReaderT Pid (NetworkT s m) a
20:57:43 <mattam> type NetworkT s m = StateT (Network s m) IO, Network is a list
20:58:11 <mattam> ghc keeps complaining:     Type synonym `Handler' should have 3 arguments, but has been given 2
20:58:15 <mattam>     In the instance declaration for `MonadState s (Handler s m)'
20:58:40 <mattam> However, if i add an 'a' argument, it will not work either
20:59:02 <mattam> Is it a problem with ghc or with me ?
21:01:47 <Darius> With Haskell, then you, then GHC.
21:02:36 <Darius> You can't use type synonyms in instance declarations at all in Haskell 98 if I'm not mistaken.
21:02:42 <mattam> aye
21:02:54 <Darius> GHC allows this, but it doesn't allow partially applied type synonyms.
21:03:17 <mattam> i find the constructor workaround awful :(
21:03:31 <Darius> This is because this would be like a type level lambda abstraction, which as you may guess may lead to undecidability of inference and checking.
21:04:05 <mattam> haskell already has undecidability in some corners doesn't it anyway ?
21:04:10 <Darius> No.
21:04:24 <Darius> Not type-wise.
21:04:30 <mattam> i thought it was mandatory for rank-2 polymorphism
21:04:38 <Pseudonym> GHC extensions do, with -fallow-undecidable-instances.
21:04:43 <Darius> Haskell doesn't allow rank-2 polymorphism.
21:05:14 <mattam> ha ? my teacher lied!
21:05:30 <mattam> and i haven't checked 
21:06:05 <Pseudonym> I recommend you check this out: http://research.microsoft.com/~simonpj/papers/type-class-design-space/
21:06:54 <Pseudonym> Very interesting, because it covers what extensions make the system undecidable.
21:07:05 <mattam> thanks
21:08:59 <mattam> so the type system of Haskell 98 is equivalent to the one of ocaml for example ? type classes typing is sound and complete etc... ?
21:59:10 <ham[let]> hiho
22:06:13 <darius-> `/j #p2p-hackers
22:06:16 <darius-> oops
22:06:42 <darius-> hiho hamlet
22:06:43 <det> mattam: ocaml has no type classes
22:16:17 <mattam> det: i wanted to say: core (equivalent to ocaml core) + type classes 
22:27:55 <det> Pseudonym: hey
22:28:07 <det> ml and haskell core are not the same
22:28:58 <Pseudonym> G'day.
22:29:58 <det> where do you colocate lindor at ?
22:30:02 <det> and what do you pay ?
22:30:30 <Pseudonym> At a friend's place, and about AUD$70 a month.
22:30:40 <Pseudonym> Which is... uhm... US$40 or so.
22:31:23 <Pseudonym> It's an unofficial hosting syndicate.  We dilute each others' costs.
22:31:33 <det> like DSL ?
22:31:53 <Pseudonym> Yes.  ADSL at the moment, but we're going to SDSL next month.
22:34:20 <det> oh
22:48:09 <mattam> det: they're two ML dialects at least
23:06:47 <Pseudonym> Nytol.
