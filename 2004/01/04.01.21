02:16:38 * shapr yawns
02:18:26 <shapr> good morning!
02:20:17 <Verbed> There's still a snowsky of night here.
02:20:46 <shapr> it's 11:20am here
02:20:54 <shapr> I have a business lunch, could be interesting.
02:21:03 <Verbed> 3:20am
02:21:18 <shapr> nearly bedtime for your
02:21:25 <shapr> s/your/you
02:21:28 <shapr> ?
02:22:02 <Verbed> I don't know, perhaps in a few hours.
02:23:30 <shapr> time for lunch
05:17:01 <shapr> w00
05:17:39 <phubuh> hey shapr
05:17:42 <phubuh> how'd lunch go?
05:18:02 <shapr> interesting
05:18:20 <shapr> I think I persuaded that company to switch from PHP to Python/Zope
05:18:25 <phubuh> whee
05:18:56 <shapr> sadly, I couldn't interest them in Haskell
05:19:29 <shapr> Vulpyne: hey, long time no see
05:19:56 <shapr> Vulpyne: when was the last time you were Myrdraal?
05:21:42 <shapr> bonjour fanou, comment ça va?
05:21:50 <shapr> phubuh: how's math treating you?
05:23:19 <phubuh> I haven't gotten the test corrected, but it felt really easy, I might have aced it :)
05:23:34 <shapr> yay!
05:23:35 <phubuh> of course, that's what I always think, and I never ace tests
05:23:45 <shapr> heh
05:25:32 <phubuh> wow, parsec is nifty
05:25:40 <shapr> ja!
05:25:44 <shapr> var gör du?
05:25:51 <shapr> er "vad"
05:25:53 <shapr> dang
05:25:56 <phubuh> lÃ¤ser dokumentationen :-)
05:26:01 <shapr> jaså
05:26:09 <shapr> har du provat parsec?
05:26:14 <phubuh> inte Ã¤nnu
05:26:26 <shapr> aha, so that's how you say "not yet"
05:26:33 <shapr> neat
05:27:09 <phubuh> inte Ã¤n might be more 'correct', I'm not sure
05:27:38 <phubuh> I say Ã¤n, but for some reason I wrote Ã¤nnu, hm
05:28:22 <phubuh> "inte Ã¤nnu" has more google hits
05:29:01 <shapr> swedish is nifty
05:32:04 <shapr> coi Vulpyne .i ma nuzba
05:58:35 <shapr> hi andre`
05:58:52 <shapr> looking for Haskell info?
06:00:36 <phubuh> hmm, can you see how emacs wants to indent this for you?
06:00:46 <phubuh> foo = do char '('
06:00:47 <phubuh> char ')'
06:02:13 <shapr> eww
06:02:27 <phubuh> bah
06:03:06 <shapr> that sucks
06:03:35 <phubuh> ?! it doesn't work with explicit braces and semicolons either
06:03:51 <shapr> it's because emacs uses regexes for syntax, indentation, etc
06:04:03 <phubuh> yeah
06:04:19 <shapr> we need a semantic-bovinator haskell mode
06:04:33 <andre`> shapr : im not wondering about anything particular, but i got started with haskell yesterday and thought it would be nice to hang here and maybe pick up some things and get to know other people who use it :-)
06:04:35 <phubuh> oh, can you use semantic-bovinator to indent?
06:04:39 <phubuh> that's cool
06:04:56 <shapr> semantic-bovinator is lex/yacc for elisp nowadays
06:05:03 <phubuh> yeah
06:05:35 <phubuh> lparen = '('
06:05:35 <phubuh>            rparen = ')'
06:05:38 <phubuh> also indents incorrectly :(
06:06:01 <phubuh> lparen = '(' -- ) to keep emacs happy
06:06:01 <phubuh> rparen = ')'
06:06:04 <phubuh> hee hee
06:06:09 <shapr> yah, I have to do that too
06:08:11 <shapr> andre`: good urls in the topic, and I'd suggest you check out the HaWiki - http://www.haskell.org/hawiki/
06:09:15 <andre`> thanks
06:09:50 * phubuh adds a note on HaskellMode
06:31:02 <shapr> yow!
06:31:27 <shapr> PreludeExts is getting huge, I like Igloo's suggestion of splitting it into smaller pieces.
06:43:51 <Cale> just caught a small bug in combinationsM (missing parentheses)
06:44:13 <shapr> last I tried, I couldn't get PreludeExts to compile
06:44:21 <shapr> haven't tried the latest version
06:46:45 <shapr> vimrc?
06:46:57 <vimrc> hello 
06:47:18 <shapr> hi
06:51:38 <Cale> I was thinking it would be useful to have a fairly large collection of mini-libraries. It seems like languages which tend to become popular have these collections of mini-libraries which are filled with many somewhat mundane but useful functions.
06:51:54 <shapr> I agree
06:52:34 <shapr> any suggestions for mini-libs that don't exist?
06:53:54 <x4004> :)
06:54:28 <x4004> im changing my mind on new recursively world :P
06:56:48 <x4004> data Trie = Node [ Trie ] | Leaf Bool Char String | Empty
06:56:48 <x4004> 	    deriving Show
06:56:48 <x4004> contenido (Leaf True x y)  =  [y]
06:56:48 <x4004> contenido (Node (x:s)) = contenido x ++ contenido s
07:00:04 <x4004> i want to have Node as list of Trie
07:03:04 <x4004> but "s" is a list... not Trie, i don't know how...
07:03:10 <x4004> :(
07:03:51 <adept> what is "s" ?
07:03:59 <adept> ah, i see...
07:04:27 <adept> so, if "s" is not a Trie, then what is "s"?
07:04:40 <x4004> list of Trie's
07:04:50 <x4004> i suppose
07:04:54 <adept> right
07:05:35 <adept> and thus you have Node as a list of Trie's. 
07:06:16 <x4004> right
07:06:22 <x4004> and... function "contenido" does not receive a list of Tries?
07:06:23 <adept> And? :)
07:06:42 <adept> No, it operates on Trie.
07:07:03 <adept> And what's wrong with it?
07:07:12 <x4004> *** Expression     : contenido s
07:07:13 <x4004> *** Term           : s
07:07:13 <x4004> *** Type           : [Trie]
07:07:13 <x4004> *** Does not match : Trie
07:08:22 <adept> Now, it's not possible for contenido to operate on Tries _and_ list of Tries at the same time, right?
07:09:39 <adept> I suggest that you start with formulation for you problem, because merely getting this piece of code to compile could be done in several different ways, none of which might not be even close to what you want to achieve.
07:09:56 <x4004> hmm, right...
07:11:15 <x4004> i see... :)
07:11:41 <x4004> fold?
07:11:58 <x4004> ++ fold contenido s ?
07:12:06 <x4004> no
07:12:38 <x4004> ++ fold concat every "contenido" ?
07:22:35 --- mode: weber.freenode.net set +b *!*@206.169.168.190
07:23:55 * shapr is on irc.work.harder!
07:25:51 <adept> x4004: just apply? you are not interested in the result?
07:27:11 <x4004> yes im interested on receive a list of words
07:27:47 <adept> x4004: so, recursive traversal that will collect all Strings from your Trie?
07:28:42 <x4004> what can i do?
07:29:53 <adept> you can do that recursive traversal, thats for sure :)
07:30:13 <adept> so, how to collect that word from Empty? Write it.
07:31:53 <x4004> :P ok
07:33:18 <adept> or, even better, write in English how to do that traversal. Right here and now :)
07:38:27 <x4004> :$ english?
07:39:00 <adept> yep. Like "to compose a list of all Strings from Trie one should ..."
07:39:02 <x4004> http://localhost/../../ 
07:39:08 <x4004> ok
07:39:26 <x4004> hmm
07:40:31 <adept> after that, it will be a simple matter of English->Haskell translation, which is very easy.
07:40:42 <shapr> right!
07:41:05 <adept> To write recursive algorithm, you must first decide, what is the "corner case" - that is, when recursion will stop.
07:41:11 <x4004> to compose a list of all string from trie i should verify first if this Leaf contains valid string, if have this is the finish of recursion, else, we have to 
07:42:12 <adept> Then, describe the "common step", like "suppose we alread in the middle of things. To add next word to our list we must ...".
07:42:13 <x4004> apply the same for all sub Tries of mother trie
07:42:38 <adept> x4004: you have way too many "if"s in the first part :( incomprehensible :(
07:43:55 <x4004> :P i first should take english class :'(
07:44:04 <adept> not at all
07:45:04 <adept> Consider Trie that consists of one Empty element. What is the list of Strings from this Trie?
07:45:34 <adept> Then, consider Trie that consists of one Leaf only. What is the list of String from this Trie?
07:46:05 <x4004> Empty = Empty, Leaf x y z = z
07:46:13 <adept> Then think how you could use knowledge about processing those simple trees to process Node?
07:47:19 <x4004> ok
07:48:11 <adept> In order to process Node you want to process 1,3 and 5th child Trie and put processing result in a list. Right or wrong?
07:50:10 <x4004> right
07:51:37 <adept> Really? So, for Node [ Leaf "a", Leaf "b", Leaf "c", Leaf "d", Leaf "e"] result will be ["a","c","e"]?
07:52:01 <x4004> yes
07:52:06 <x4004> hmmm
07:52:14 <x4004> contenidos ( (x:s) ) = contenido x ++ contenidos s
07:52:15 <x4004> contenido (Empty) = []
07:52:15 <x4004> contenido (Leaf True x y)  =  [y]
07:52:15 <x4004> contenido (Node (x:s)) = contenido x ++ contenidos s
07:52:20 <x4004> :) it runs
07:52:34 <adept> right
07:52:49 <adept> but contenidos is not needed, really.
07:53:12 <adept> it just applies contenido to every element of s, right?
07:53:19 <x4004> yes
07:55:20 <x4004> i hear something of "fold" function, that apply function to every element of a list... but fold are not reconoziged by hugs... its fold or im doing a typo error?
07:57:38 <phubuh> foldr is the haskell function that represents what one usually means when one says "fold"
07:58:08 <phubuh> foldr (+) 0 (1 : 2 : 3 : []) = (1 + 2 + 3 + 0)
07:58:33 <phubuh> (notice how where there's a : in the input, there's a + in the output, and likewise for [] and 0)
07:58:53 <x4004> ahhhh ok, :P 
08:00:14 <x4004> thanks
08:40:04 <ham[kell]> hiho
08:52:21 <SamB> x4004: it is possible that you really wanted map, since you say to every element
09:03:15 <phubuh> hmm
09:03:59 <phubuh> I want to get the name of a Parsec parser
09:04:11 <phubuh> for string "foo" I want "foo", etc
09:04:27 * SamB wonders why ghc doesn't like qualified function names in instance declarations
09:04:53 <Igloo> Because H98 disallow them
09:05:43 <SamB> good reason ;-)
09:10:53 <SamB> how come Hat tries to use them?
09:16:01 <Igloo> Because it's broken
09:16:16 <Igloo> The Debian patched hat should work, and I suspect the CVS hat should too
09:16:17 <phubuh> debuggers are for the weak anyway
09:16:37 * shapr cackles happily
09:16:53 <shapr> http://www.scannedinavian.org/AvianWiki/ShaeErisson
09:17:03 <shapr> moin + enscript + haskell = pretty!
09:17:08 <phubuh> yay!!!
09:17:33 <phubuh> hawiki desperately needs that
09:17:37 <shapr> not nearly as pretty as the C belowe it though
09:17:50 <shapr> yah, that's why I just fixed it up, so I could ask for it on HaWiki
09:17:58 <SamB> what pretty C? rare, that.
09:18:00 <shapr> the processor was horribly b0rked
09:18:45 <shapr> whoa, spiffy! Igloo's wiki problem has been solved!
09:18:53 <shapr> This page was opened for editing or last previewed at 2004-01-21 17:18:11 by c-62b670d5.028-10-67766c2.cust.bredbandsbolaget.se.
09:18:54 <shapr> You should refrain from editing this page for at least another 10 minute(s), to avoid editing conflicts.
09:18:59 <shapr> big banner at the top of the page says that
09:19:09 <SamB> why did it not highlight do?
09:19:23 <shapr> food, bbl
09:19:28 <Igloo> Bet it doesn't highlight   map (\qualified -> 1 + qualified) [3,4,5]   properly  :-P
09:19:38 <shapr> Igloo: look at haskell.st
09:20:04 <Igloo> shapr: That's not a complete solution by any means IMO
09:21:16 <Igloo> Although granted it is better than nothing
09:33:12 <basti_> hi
09:33:24 <ski> hello basti_
09:36:26 <raver> y0!
09:36:33 <phubuh> y0 y0
09:36:41 <basti_> l33tsp33k?
09:36:50 <door> y34h
09:36:57 <basti_> dewd wuts ur skillz?
09:38:25 <ski> 14W3r5p33X !
09:39:52 <phubuh> lawyer speech?
09:40:12 <ski> lamer
09:40:16 <basti_> ah
09:40:19 <phubuh> no you
09:40:22 <phubuh> !
09:40:38 <ski> ?
09:41:01 <phubuh> never mind.
09:42:30 <shapr> Igloo: haskell.st is the enscript plugin for haskell
09:42:46 <shapr> the highlight rules can be extended
09:48:58 <shapr> it doesn't suck too bad, I just pasted Demo.hs into that page
09:54:07 <shapr> anyone here has experience writing enscript plugins? :-)
09:58:16 <shapr> Are the keywords listed in the H98 report?
10:05:01 <phubuh> how do I get the part before " Pk=foo|" from "asdfasdfasdf Pk=foo|" with Parsec?
10:05:10 <phubuh> I don't know what the asdfasdfasdf will be in actual input, nor foo
10:05:27 <phubuh> err, no pipe at the end
10:06:01 <shapr> is the asdfasdfasdf part of a token or something?
10:06:29 <phubuh> in regex terms, I want $1 from /(.*?) Pk=(.*)$/ :-)
10:06:47 <shapr> what about 'many1 alphaChar' ?
10:07:09 <shapr> first_word = do w <- many1 alphaChar ; return w
10:07:29 <phubuh> the first part can contain a lot of stuff... I'm not sure what it can't contain, actually
10:08:02 <phubuh> I want the part before the last " Pk="
10:08:07 <shapr> ohh
10:08:12 <phubuh> maybe I should just use a regular expression
10:08:24 <shapr> there's a takeUntil sort of thingy
10:08:26 * shapr looks
10:11:55 <shapr> do stuff <- many1 anyChar; string " Pk="; return stuff
10:11:56 <shapr> that might work
10:11:57 * shapr tries
10:13:07 <phubuh> I think it doesn't backtrack
10:13:47 <shapr> oh
10:14:16 <ski> can you manually used mplus instead ?
10:14:25 <ski> s/used/use/
10:14:58 <ski> or is it inefficient ?
10:15:12 <phubuh> I don't know what mplus does on Parsers
10:15:47 <shapr> it's <|> in parsec
10:15:52 <ski> hmm, dunno about Parsec, but in ParseLib it's backtrackable choice
10:15:55 <phubuh> oh
10:15:56 <ski> ok
10:16:06 <phubuh> <|> isn't backtrackable in parsec :/
10:16:12 <phubuh> (I think)
10:16:55 <shapr> there is a way to do this with <|> but I can't remember how
10:17:43 <shapr> or maybe it's with try
10:18:13 <ski> do you need to do it with a parser, or can you just make/reuse some list function(s) ?
10:18:25 <phubuh> no, I can use anything
10:18:44 <phubuh> I'm writing a little regex placeholder now
10:19:18 * SamB wonders about the formal definition of decimal
10:19:33 <ski> so perhaps you can reverse and search for first "=kP " ?
10:19:48 <shapr> that's a nice solution
10:19:52 <phubuh> ah, yes!
10:19:57 <ski> SamB : decimal number system ?
10:20:05 <phubuh> I did that when I implemented this parser in C# :-)
10:20:10 <phubuh> (which was horrible, by the way)
10:20:14 <ski> or make some rember-like function ..
10:21:19 <SamB> ski: yes. what else? how are you supposed to make proofs involving numbers higher than 9 if you don't have a formal definition of decimal?
10:22:03 <ski> SamB : depends on the representation IMO
10:22:40 <SamB> I suppose you could just pretend it was atomic
10:22:56 <SamB> er, s/it was/they were/
10:23:44 <ski> or have a Zero&Successor repr. or a binary position system ..
10:24:22 <ski> (well, depends if you want naturals or integers or rationals or ... of course)
10:26:27 <SamB> oh. the book I'm reading talks about that ;-). (it's called "A = B", and it has a foreword by knuth. you can download it from http://www.cis.upenn.edu/~wilf/AeqB.html)
10:34:07 <ham[let]> shapr: do you remember that word of that thing of the shoe that started with a?
10:34:24 <shapr> no, but you can look at the channel logs.
10:34:48 <ham[let]> was it yesterday?
10:35:03 <shapr> I'm not sure.
10:42:46 * phubuh tries hunit
10:43:14 <shapr> if you use HUnit and Emacs, there's some neat stuff on @wiki HaskellMode
10:43:25 <phubuh> yeah, I saw that
10:43:33 <phubuh> that's what inspired me to try it out :-)
10:43:41 <shapr> :-)
10:54:35 * SamB wonders if an open-source company would qualify as an institute of learning
11:20:38 * phubuh compares http://www.phubuh.org/parse-message.c + http://www.phubuh.org/parse-message.h + http://www.phubuh.org/run-tests.c -- to http://www.phubuh.org/Message.hs
11:20:40 <phubuh> *giggle*
11:23:26 <Maddas> phubuh: heh
11:24:26 <Maddas> phubuh: Is it for DC? :)
11:24:52 <phubuh> yeah
11:25:01 <phubuh> :-)
11:25:12 <Maddas> Nice :)
11:25:16 <ski> DC ?
11:25:21 <Maddas> Direct Connect
11:25:29 <ski> mm
11:25:57 <Maddas> A p2p thingy, surely phubuh knows more than me about it
11:26:07 <Maddas> phubuh: And those really do roughly the same?
11:26:29 <phubuh> yup
11:26:43 <phubuh> there are some discrepancies in the unit tests though
11:28:18 <phubuh> and every Haskell function has a comment line :-)
11:28:46 <Maddas> Heh. 
11:30:55 * Maddas goes on reading
12:06:10 <shapr> hi taw 
12:06:20 <taw> hello
12:06:27 <shapr> looking for Haskellers?
12:06:58 <taw> i'm trying to answer the question: ml vs. haskell vs. prolog today
12:06:59 <taw> ^^
12:07:21 <shapr> do you have any particular priorities?
12:07:32 <taw> that is - what nice things does haskell have that the others don't
12:07:34 <taw> not really
12:07:40 <taw> just having a free evening
12:07:58 <shapr> in my opinion, Haskell is more expressive than ML
12:08:01 <taw> i know ocaml quite well, and prolog so-so
12:08:12 <basti_> i know prolog quite good
12:08:14 <shapr> but, ml is fast
12:08:19 <basti_> i wouldnt call either better
12:08:23 <taw> oh yeah, ml is fast indeed
12:08:33 <phubuh> haskell is referentially transparent, and has type classes :-)
12:08:38 <taw> btw. i still don't know if prolog is good for anything except for logical puzzles
12:08:42 <shapr> also, haskell is lazily evaluated, so sometimes you get space leaks
12:09:03 <shapr> but you also get some nifty abilities from lazy evaluation
12:09:13 <basti_> *g*
12:09:31 <taw> are prolog/haskell used for anything i might be using (like open source stuff) ?
12:09:38 <shapr> truly, type classes are great, I wouldn't want to code without them.
12:10:00 <phubuh> they let you create monads, which gives you do notation, which is so wonderful
12:10:08 <Maddas> heh
12:10:15 <basti_> hmm i heard noxbot (a famous quiz bot, at least on ircnet) is prolog
12:10:17 <taw> can i get an example of a "type class" ?
12:10:33 <ayrnieu> taw - Eq Ord Num
12:10:35 <taw> is that some kind of OO programming ?
12:10:42 <phubuh> kind of
12:10:53 <shapr> it's some sort of polymorphism
12:11:15 <phubuh> you define an interface containing functions, which can later be used on any type that is an instance of the interface
12:11:22 <shapr> because you can define the equals operator == on multiple types
12:12:12 <taw> quicksort  []           =  []
12:12:12 <taw>  quicksort (x:xs)        =  quicksort [y | y <- xs, y<x ]
12:12:12 <taw>                          ++ [x]
12:12:12 <taw>                          ++ quicksort [y | y <- xs, y>=x]
12:12:12 <taw>  
12:12:13 <taw>  
12:12:19 <taw> this example looks interesting
12:12:19 * ayrnieu grumbles.
12:12:57 <ayrnieu> taw - that'll sort anything that subscribes to Ord =)
12:13:05 <ayrnieu> a list of anything, I mean.
12:13:13 <phubuh> that can be defined about as succintly in O'Caml too
12:13:23 <taw> phubuh: really ?
12:13:31 <ayrnieu> taw - yes, really.
12:13:40 <ski> taw : it's somewhat similar to interfaces (as opposed to classes) in Java or C#, but I think type classes is more expressive
12:13:46 <taw> with List.append and 2 List.filter ?
12:14:20 <phubuh> let rec quicksort = function [] -> [] | (x::xs) -> quicksort (List.filter (\y -> y < x) xs) @ [x] @ quicksort (List.filter (\y -> y >= x))
12:14:21 <taw> yeah, but that wouldn't be vary camlish, as it would be rather slow ^^
12:14:22 <ayrnieu> taw - yes.
12:14:32 <phubuh> well, it's even slower in Haskell :-)
12:14:38 <taw> hehe, true
12:14:50 <Maddas> phubuh: \y?
12:14:55 <phubuh> err
12:14:55 <taw> fun y ->
12:14:57 <Maddas> phubuh: I think you mean fun y -> y < x
12:14:58 <taw> son \y 
12:14:58 <phubuh> bah :P
12:15:05 <taw> not \y
12:15:10 <phubuh> at first I wrote List.filter (< x) :-)
12:15:11 <ayrnieu> function works well enough in this case.
12:15:13 * Maddas silently mutters something about confusing syntax
12:15:14 <Maddas> :-)
12:15:23 <shapr> one reason type classes are more expressive than interfaces in Java is that long years after defining both the typeclass and the type, you can still make the type an instance of the typeclass
12:16:09 <taw> comparing any language's expresivness to java is rather unfair ;-)
12:16:09 <ayrnieu> phubuh - ((<) x)
12:16:28 <phubuh> ah, of course
12:16:53 <ayrnieu> phubuh - but (( < ) x), probably, to avoid the (*) nastiness.
12:17:16 <shapr> http://www.scannedinavian.org/AvianWiki/HaskellDemo
12:17:21 * shapr pulls out the old faithful Demo.hs
12:17:33 <phubuh> whee, now with syntax coloring
12:17:38 <ayrnieu> taw - if you like, I can dcc you a small set of simple Haskell programs.
12:17:38 * Maddas remembers phubuh's parser in .hs
12:17:48 <shapr> yah, which I gotta email to the HaWiki maintainer
12:18:02 <phubuh> parsec is a nice example of what can be done with monads and do notation
12:18:25 <taw> ayrnieu: are any of these programs useful or just some toys ?
12:18:36 <shapr> lambdabot is useful! well...
12:18:37 <ayrnieu> taw - well, I use the little mud client to talk to IFmud.
12:18:47 <ayrnieu> taw - but all toys, yes.
12:18:48 <taw> yay, http://vipe.technion.ac.il/~shlomif/lecture/Perl/Haskell/slides/
12:19:11 <taw> that's the problem i have with prolog too - it's nice for toys, but what then ?
12:19:22 <shapr> there's a web server written in Haskell
12:19:23 <ayrnieu> taw - and then you write real programs.
12:19:25 <taw> ocaml is used in real life to pirate porn and mp3s at least ;-)))
12:19:30 <shapr> lambdabot is an irc bot written in Haskell
12:19:31 <ayrnieu> taw - I offer these *because* they serve as toys.
12:19:45 <Maddas> taw: Haskell is certainly used in real life
12:19:53 <shapr> lots of integrated chip design programs are written in Haskell
12:20:01 * ayrnieu goes back to school.
12:20:04 <shapr> Lava, Hawk, BlueSpec, etc
12:20:08 <taw> oh, but the real men learn c by reading apache sources, why should it be different with haskell ;-)
12:20:15 <Maddas> phubuh: You could point him at your parser
12:20:25 <Maddas> taw: Because Haskell is more expressive?
12:20:28 <phubuh> taw: http://www.scannedinavian.org/AvianWiki/ParsecDemo is a parser for Direct Connect commands that I just wrote for practical purposes :-)
12:20:39 <Maddas> (I'm just guessing.)
12:20:44 <shapr> now with 100% more color!
12:20:48 <phubuh> yay!
12:21:02 <Maddas> shapr: Wouldn't it be infinitely much more? :-)
12:21:12 <taw> uhm, i think i heard about some magical tester for haskell
12:21:16 <shapr> depends on which way you measure
12:21:20 <phubuh> quickcheck is fairly magical
12:21:24 <shapr> yah, QuickCheck roxxors
12:21:38 <phubuh> another amazing testament to the power of type classes :-)
12:21:39 <shapr> Maddas: if you think of 100% of the color it has now, was missing before...
12:21:49 <Maddas> shapr: I think that way of thinking is wrong
12:21:53 * shapr grins
12:22:07 <shapr> ok ok, infinitely more color
12:22:11 <Maddas> heh
12:22:12 * shapr laughs
12:22:30 <Maddas> Not that I wanted to be a tyrant
12:22:34 <Maddas> :-)
12:23:14 <shapr> just another opportunity for humor
12:23:37 <phubuh> taw: here's the classical QuickCheck example
12:23:42 <phubuh> testReverse :: [Int] -> Bool
12:23:42 <phubuh> testReverse xs = reverse (reverse xs) == xs
12:23:54 <phubuh> (i.e., see if the reverse of the reverse of a list is equal to the list)
12:23:59 <phubuh> > quickCheck testReverse
12:23:59 <phubuh> Loading package QuickCheck ... linking ... done.
12:23:59 <phubuh> OK, passed 100 tests.
12:24:09 <Maddas> shapr: Now, if I were not as tolerant I would tell you that humor should be deprecated in favour of humour
12:24:10 * Maddas grins
12:24:19 <phubuh> it passed 100 random lists to testReverse and made sure it always worked
12:24:19 <ham[let]> phubuh: palindrome
12:24:23 <taw> hehe
12:24:23 <taw> nice
12:24:59 <phubuh> a palindrome tester would be
12:25:03 <phubuh> testPalindrome :: [Int] -> Bool
12:25:03 <phubuh> testPalindrome xs = reverse xs == xs
12:25:22 <ham[let]> ah sry 
12:25:26 <phubuh> > quickCheck testPalindrome
12:25:27 <phubuh> Loading package QuickCheck ... linking ... done.
12:25:27 <phubuh> Falsifiable, after 0 tests:
12:25:27 <phubuh> [-2,0]
12:25:38 <phubuh> but all lists aren't palindromes :-)
12:26:06 <ham[let]> ok am too tired off to bed
12:26:07 <phubuh> I like to use QuickCheck when I'm doing math
12:26:11 <shapr> g'night ham[let] 
12:26:36 <phubuh> if I have some relation that I think is true, instead of manually testing some instances on my calculator, I just feed it to QuickCheck :-)
12:27:15 <taw> nice idea
12:27:20 * shapr discovers the problem with booting 2.6
12:27:26 <taw> i wonder if i could do the same with ml ...
12:27:44 <phubuh> you'd have to do something like
12:27:53 <phubuh> quickCheck generateRandomIntList testPalindrome
12:28:11 <taw> ocaml really needs a few more magical operations
12:28:18 <phubuh> or type classes :-)
12:29:08 <taw> i must play more with camlp4
12:29:30 <phubuh> whoops
12:29:40 <phubuh> ParsecDemo found a bug in enscript
12:29:41 <SyntaxNinja> hm. I'm messing with Hat again (sometimes I wonder why I try) and find that the generated code wants to import a module Hat.Hat. does Igloo or anyone else have a clue where this module should be?  I've used ghc-pkg to register the hat package.
12:29:44 <phubuh> http://www.scannedinavian.org/AvianWiki/ParsecDemo?action=show
12:29:47 <phubuh> look at the bottom :(
12:30:26 * Darius thinks orElse is fromMaybe
12:31:01 <phubuh> ah yeah, that desperately needed a better name
12:31:57 * phubuh fades away for a while
12:32:50 <Darius> For specificCommand, why don't you just use lookup?
12:34:26 <Darius> uniqueChoice = choice . map try (except for the base case)
12:44:31 <phubuh> I thought there was something like lookup, but I was too lazy to look it up
12:44:34 <phubuh> thanks! :-)
12:47:50 <phubuh> updated
12:55:42 * ski sighs
12:58:25 <ski> why did my screen turn very blurry ?? (rethoric)
14:23:37 <ham[kell]> ck
14:23:40 <ham[kell]> vk
14:23:45 <ham[kell]> er bk
14:43:55 <SyntaxNinja> am I crazy, or do the -main-is and --make flags not really work well together
14:44:37 <phubuh> hey SyntaxNinja
14:44:53 <SyntaxNinja> hi phubuh
14:44:54 <Darius> False dichotomy
14:47:57 * SamB pretends to think that basic took let from Haskell do notation
14:49:03 <SyntaxNinja> Darius: howso?
14:49:18 <SyntaxNinja> oh, both?
14:49:30 <SyntaxNinja> I thought you mean tthat --make and -main-is was a false dychotomy
14:49:37 <SyntaxNinja> or dichotomy even
14:49:47 * ski shudders
14:52:27 <ski> Darius : you're not the Dariusz at CW'04, right ?
14:52:41 <Darius> SamB: You could define a BASIC monad.
14:53:00 <Darius>  /whois Darius
14:53:10 <ski> oh, right
14:54:47 <ski> the papers on continuations in natural language seems pretty cool, methinks
15:48:08 --- mode: jordan.freenode.net set +b *!*@206.169.168.190
16:42:12 <ski> @moo
16:42:13 <lambdabot>          (__)
16:42:13 <lambdabot>          (oo)
16:42:13 <lambdabot>    /------\/
16:42:13 <lambdabot>   / |    ||
16:42:13 <lambdabot>  *  /\---/\
16:42:13 <lambdabot>     ~~   ~~
16:42:15 <lambdabot> ...."Have you mooed today?"...
16:55:04 <Riastradh> @moo
16:55:05 <lambdabot>          (__)
16:55:05 <lambdabot>          (oo)
16:55:05 <lambdabot>    /------\/
16:55:05 <lambdabot>   / |    ||
16:55:05 <lambdabot>  *  /\---/\
16:55:05 <lambdabot>     ~~   ~~
16:55:07 <lambdabot> ...."Have you mooed today?"...
16:55:10 <Riastradh> What?  It's the same thing?
16:55:12 <Riastradh> Lame!@
16:55:24 <Riastradh> That @ was unintentional, but it makes a good supplement to the comment.
16:55:35 <ski> heh
16:55:58 <ski> @arr
16:55:58 <lambdabot> Well me hearties, let's see what crawled out of the bung hole...
16:56:03 <ski> @rave
16:56:03 <lambdabot> Sorry, I don't know the command "rave", try "lambdabot: @listcommands"
18:26:24 <ski> @eval "@arr"
18:26:24 <lambdabot> @arr
18:26:41 <ski> bah !
18:28:56 <Darius> @define a "@eval a"
18:28:57 <lambdabot> a defined
18:29:00 <Darius> @eval a
18:29:01 <lambdabot> @eval a
18:29:26 <ski> it seems it doesn't listen to itself .. (?)
18:29:32 <Darius> Correct.
18:31:16 <ski> wonder if that is because it knows its name ..
18:31:42 <ski> or if it just has an unsymmetrical viewpoint
18:31:53 <Vulpyne> When you send a message to the IRC server, the server doesn't echo it back.
18:31:59 <ski> (dunno enough about irc protocols to tell)
18:32:16 <ski> 'k
18:35:41 <Darius> I believe there's code that specifically makes lambdabot ignore itself.
18:35:49 <ski> mhm
18:37:57 <ski> (i was going to look at the source but i couldn't find it)
19:12:22 <SyntaxLaptop> Igloo: FYI I implemented a lot of your suggestions, but haven't gotten around to replying to your email.
19:15:51 <Igloo> Cool, don't worry about it  :-)
19:24:22 <_|_> @arr
19:24:23 <lambdabot> I'll keel haul ya fer that!
19:24:39 <ski> @yow
19:24:40 <lambdabot> OKAY!!  Turn on the sound ONLY for TRYNEL CARPETING,
19:24:40 <lambdabot>  FULLY-EQUIPPED R.V.'S and FLOATATION SYSTEMS!!
19:31:36 * SyntaxLaptop hates when he thinks simonMar might be right
19:32:57 <SyntaxLaptop> but I want one package database for all the compilers!
19:45:03 <Darius> Pseudonym: Ever looked at geometric algebra?
19:50:12 <Pseudonym> Yes.
19:50:16 <Pseudonym> Looks very cool.
19:53:52 <Pseudonym> My only problem with it is that multivectors are hard to work with.
19:54:34 <ayrnieu> How should I nicely break a string into a fixed number of fixed-lengeth (and equally-lengthed) substrings?
19:54:36 <Darius> Computationally or mathematically?
19:54:38 <ski> multivectors ?
19:56:05 <ski> ayrnieu : perhaps chunk at http://www.haskell.org/hawiki/PreludeExts does that .. ?
19:56:10 <monotonom> Due to the Curry-Howard isomorphism, the two choices (computationally or mathematically) are one.
19:56:24 <Pseudonym> Computationally.
19:57:12 <Darius> ski: http://carol.science.uva.nl/~leo/clifford/
19:57:33 <Pseudonym> For a start. it's hard to divide by multivectors.
19:57:37 <Pseudonym> There are special cases.
19:57:54 <Pseudonym> Secondly, they're not as type-safe.
19:58:19 <Pseudonym> Sometimes you want the addition of a vector with a bivector to be a type error.
19:58:31 <ayrnieu> ski - yes =)  Thank you.
19:58:32 <ski> Darius : thanks
19:59:02 <ayrnieu> break n m s = take n $ chunk m s
19:59:12 <ayrnieu> not calling it 'break', of course.
19:59:27 <ski> ayrnieu : ok, just took a guess at what you wanted
20:05:00 <Darius> Pseudonym: That makes sense.
20:07:49 <Pseudonym> Having said that, clifford/geometric algebra does look very handy.
20:09:11 <Darius> Well my first impression reading about some speed issues makes me think to manipulate them symbolically and "compile" to another form.
20:10:50 <Pseudonym> Yes, I think that's true.
20:11:03 <Pseudonym> I see geometric algebra as an algorithm-generation tool.
20:28:22 <_|_> @yow
20:28:23 <lambdabot> Oh, I get it!!  ``The BEACH goes on,'' huh, SONNY??
22:18:49 --- mode: tolkien.freenode.net set +b *!*@206.169.168.190
23:14:27 <Maddas> Good morning!
23:14:38 <Maddas> I've got a question regarding type classes :-)
23:14:52 <ski> morning Maddas
23:15:07 <Maddas> morning ski 
23:15:29 <ski> so, what dost thou wonder ?
23:15:49 <Maddas> Ok, mind if I paste a few lines? (I can put it on the web otherwise)
23:15:53 <ski> sure
23:16:16 <ski> at least, i don't mind, if it isn't *too* big :)
23:16:27 <Maddas> ok, from the Gentle Introduction to Haskell
23:16:31 <Maddas> four lines :)
23:16:37 <ski> mm
23:16:45 <Maddas> Actually, Ic an do with less
23:17:03 <Maddas> There is an example of a data type Tree
23:17:27 <Maddas> oops
23:17:29 * Maddas curses copy+paste
23:17:35 <Maddas> Sorry :-(
23:17:39 <Maddas> data Tree a = Leaf a | Branch (Tree a) (Tree a)
23:18:11 <Maddas> Then, there is a function to display trees, showTree, which simply prints out the tree in a certain way
23:18:27 <Maddas> showsTree :: (Show a) => Tree a -> ShowS
23:18:44 <Maddas> Now, that makes Tree a member of the typeclass Show, doesn't it?
23:19:15 <ski> almost
23:19:30 <Maddas> Could you elaborate?
23:19:34 <ski> you have to declare the instance
23:19:52 <Maddas> But I didn't, and hugs didn't complain
23:19:58 <ski> no
23:20:01 <Maddas> and in the example I don't see it defined either, that's what makes me wonder :-)
23:20:16 <ski> you can use the function as is
23:20:17 <ozone> Maddas: it doesn't make Tree a member of the Show class
23:20:25 <ski> right
23:20:40 <Maddas> Hm. 
23:20:41 <ozone> Maddas: the type signature ensures that 'a' must be a member of Show for the showsTree function to be well-typed
23:20:52 <Maddas> Oh, duh, I see
23:21:01 <ozone> so if you try to run showsTree on something which isn't in Show, you'll get a type error
23:21:09 <Maddas> Yeah, I see, I was being silly
23:21:17 <ski> yes, it doesn't say that Tree a is an instance of Show, if you thought that :/
23:21:22 <Maddas> I thought Tree was made a member of Show :-)
23:22:06 <ski> to do that you have to begin the invocation "instance Show a => Show (Tree a) where ..." :)
23:22:28 <ozone> Maddas: yeah, to make things members, use 'instance', like ski said
23:22:34 <Maddas> Yes, I see
23:22:44 <ski> (or deriving, in some cases)
23:22:52 <Maddas> I thought that, but I didn't see it in the example code, hence I thought that I missed some syntactic magic
23:22:58 <Maddas> (Since I assumed Tree was made member of Show)
23:23:33 <ski> (like "data Season = Winter | Spring | Summer | Autumn deriving Show)
23:24:19 <Maddas> Ok, thanks :)
23:25:20 <ski> so the "Show a =>" in the typing of showsTree only says that to be able to show a tree (with this function), the type of it's elements must be an instance of Show
23:25:24 <ski> fine
23:27:03 <Maddas> I see
23:27:18 <Maddas> I confused a with the Tree type itself instead of the type that the Tree contains
23:27:24 <Maddas> the 'a' in Show a, that is
23:29:45 <Maddas> Hm, another problem.. I can't execute an example in the Gentle Introduction to Haskell in HUGS, HUGS complains
23:29:53 <Maddas> I tried to fix it, but I failed :-)
23:30:10 <Maddas> the example says: type ShowS = String -> String
23:30:37 <monotonom> It is already in the prelude. You have run into a name clash.
23:30:56 <Maddas> Thought so. I just called it ShowStr, but then this didn't work:
23:31:17 <Maddas> showsTree :: (Show a) => Tree a -> ShowStr
23:31:21 <Maddas> showsTree (Leaf x) = shows x
23:31:41 <Maddas> showsTree (Branch l r) = ('<':) . showsTree l . ('|':) . showsTree r . ('>':)
23:32:02 <Maddas> The (inferred) type doesn't seem to be correct
23:32:04 <monotonom> That is odd.
23:32:08 <ski> yes
23:32:20 <Maddas> I just copy/pasted from the tutorial :-(
23:32:34 <monotonom> Ah, the inferred type will say one of (String -> String), ShowS, or ShowStr, but it doesn't have to be the one you expect.
23:33:20 <ski> ?
23:33:29 <monotonom> "type LHS = RHS" declares a type synonym. Everywhere you expect to see LHS, the computer is allowed to print out RHS instead.
23:33:30 <Maddas> I don't understand.
23:33:39 <Maddas> Ah, I see.
23:33:58 <Maddas> But still, it yields an error: Type error in explicitly typed binding
23:34:00 <ski> i don't see how that could cause a type error
23:34:22 <Maddas> on the line: showsTrtee (Leaf x) s = shows x
23:34:24 <Maddas> showsTree, that is
23:34:34 <Maddas> ah, of course
23:34:36 <ski> try commenting out the signature and ask Hugs what type it thinks showsTree has
23:34:49 <Maddas> shows returns a ShowS, which is not the same as ShowStr
23:35:18 <ski> 'tshould be, methinks
23:35:30 <Maddas> Hm. ShowS seems to be [Char] -> [Char]
23:35:41 <ski> and String = [Char]
23:35:52 <Maddas> Oh
23:36:00 <Maddas> Hm
23:36:19 <Maddas> I have a typo
23:36:20 <Maddas> :-)
23:36:26 <ski> one more :)
23:36:35 <ski> ?
23:36:48 <Maddas> Yes, I added an additional parameter
23:36:53 <Maddas> And the ShowS confused me :-)
23:37:00 <ski> ah
23:37:06 <Maddas> Sorry for the hassle!
23:37:20 <ski> no prob
