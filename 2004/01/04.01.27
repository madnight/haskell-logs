02:09:20 * Darius wonders what happens if you spoof an email from g-h-b to g-h-b.
02:09:43 <Heffalump> I really hope it doesn't accept it :-)
02:10:32 <Darius> haskell to g-h-b should do the same...
02:19:04 <Darius> ah, good.
02:19:32 <saz> g-h-b?
02:19:47 <Darius> glasgow-haskell-bugs
02:20:55 <saz> ah
02:38:40 <naren> hello ... whats the difference between logic and reasoning?
02:39:43 <saz> er
02:40:18 <`John> naren, you sound like my ex girlfriend.
02:40:20 <`John> :)
02:40:35 <naren> haha :) 
02:43:15 <naren> well i was reading abt lamba calculus .... and went on reading realted stuff.. And this question poped up?
02:44:09 <shapr> yow!
02:46:53 <`John> shapre, door hit you on the way out?
02:48:32 <`John> ;)
02:49:07 <shapr> on the way in....
02:49:09 <Heffalump> naren: one answer is that logic is one particular way of going about reasoning
02:49:10 <shapr> good morning #haskell!
02:51:18 <Lunar^> Hello shapr 
02:51:32 <shapr> bonjour Lunar^! comment ça va?
02:51:33 <`John> reasoning is the path while logic are the gates of the path.
02:53:24 <Lunar^> shapr: I hate Python
02:53:36 <shapr> I really like Python. Zope is more trouble though.
02:53:48 <Lunar^> Maybe I don't know
02:54:03 <Lunar^> Last hit was yesterday : You can throw any string as an exception
02:54:07 <shapr> I agree that Zope and Plone can be a lot of trouble.
02:54:09 <shapr> yes, that's true.
02:54:13 <Lunar^> But there's no way to catch any string !
02:54:36 <shapr> you can catch anything with except:
02:54:41 <Heffalump> you could think of logical reasoning as distinct from intuitive reasoning, for example
02:54:49 <shapr> but it's a bad idea 99% of the time
02:54:51 <Lunar^> Ok, and then, how could I get the string thrown ?
02:54:51 <Heffalump> you might also view the word "logic" as describing formal logic
02:55:42 <shapr> Lunar^: there's an evil trick you can do to pull the most recent exception out of the environment, but I don't remember how to do it off the top of my head
02:56:06 <shapr> I can find out if you really want to know
02:56:21 <Lunar^> shapr: Using sys.<i don't remember either> which is not usable in Zope
02:56:34 <shapr> it is usable in Zope, but it's mostly not safe
02:56:45 <Lunar^> shapr: I hate this mess
02:56:54 <shapr> I understand
02:56:58 <shapr> it is a mess, I agree.
02:57:11 <Lunar^> Did you received the card btw ?
02:57:16 <shapr> yes, thanks :-)
02:57:23 <Lunar^> hehe :)
02:57:27 <shapr> I was very entertained!
02:58:00 <shapr> I wish for a web application server in Haskell
02:58:13 <shapr> something with less spaghetti than Zope.
02:58:33 <Lunar^> Maybe it would be betteer to look at Clean for this
02:58:45 <Lunar^> It seems that its dynamic loading features are better
02:59:25 <shapr> Do you have some demo code?
03:00:04 <shapr> I think there might be a way to make a type-safe dynamic loader that uses Template Haskell
03:00:55 <Heffalump> even if there was, you'd have to ship GHC with your dynamic loader
03:01:06 <shapr> yes
03:01:20 <shapr> elisp ships with emacs :-)
03:01:39 <shapr> if Moore's law holds out, GHC will be a small binary.
03:01:49 * shapr grins
03:04:44 <shapr> Heffalump: do you know of a better way?
03:05:40 <Heffalump> if it had been more of a design goal to begin with, it wouldn't be a problem
03:05:53 <Heffalump> I don't think it's conceptually hard, it just needs some engineering to make it work
03:06:06 <Heffalump> though someone on here was saying they thought there are fundamental theoretical problems, but I forget what
03:06:29 <shapr> I don't remember either.
03:06:47 <shapr> maybe that the full source was required for type safe dynamic loading?
03:07:21 <shapr> or was it just the source of the types involved?
03:07:52 <shapr> I could ask on ghc-users
03:10:06 <shapr> Lunar^: too bad we can't do any PairProgramming, it would probably reduce your frustration with Zope.
03:10:24 <Lunar^> maybe
03:10:54 <Lunar^> But I really don't fell confident in the technology at all
03:11:27 <shapr> neither do I
03:11:33 <shapr> but mostly because I can't unit test it
03:13:40 <shapr> the mailing list search request is a good chance to start with WASH-CGI
03:17:00 <Lunar^> I really don't like WASH-CGI
03:17:07 <Lunar^> I do not trust the way it works
03:17:21 <Lunar^> Maybe that's unrational...
03:20:13 <shapr> do you know of something better than WASH-CGI?
03:23:32 <shapr> g'day clausen, what's up?
03:23:46 <clausen> gday shapr :)
03:23:58 <clausen> it feels like the .com boom is back!
03:24:37 <shapr> ack! that dam virus has faked an email from ME to glasgow-haskell-users!
03:24:41 <clausen> I've been getting subtle enquiries about my employment availability...
03:24:49 <clausen> ugh
03:24:59 <shapr> oh, that's good to hear, employment is pleasing.
03:26:29 <Darius> Yes, I was wondering why you would send a "test" email to g-h-u especially with a zip file attached.
03:28:59 <Heffalump> my mail handling path has stripped the Received headers, so I can't see where it really came from
03:29:15 <Heffalump> but presumably they show it didn't come from where shapr's mail normally comes from
03:31:21 * clausen only wants to do a PhD
03:31:31 <clausen> PhD scholarship == free money AND free time! :)
03:33:10 <saz> PhD -> free time?
03:33:45 <clausen> saz: if you choose a good topic, yes :)
03:33:57 <clausen> you get to choose what you spend your time on
03:34:15 <clausen> if you choose well, it would be something you would do even if you weren't doing a PhD
03:35:03 <saz> clausen: I don't know.. but the PhDs I've met don't exactly have a lot of free time
03:35:19 <clausen> all the PhD students I know do
03:35:21 <saz> It depends on how much you want to do, and how long you want to take though
03:35:31 <clausen> like, they are all busy/stressed
03:35:44 <clausen> but they still have plenty of time to socialize in comparison with all my friends who have jobs
03:35:58 <clausen> there is a *huge* difference
03:36:31 <saz> really?
03:36:32 <saz> hmm
03:36:39 <saz> I'm no PhD student
03:36:45 <clausen> yes, really :)
03:36:49 <saz> but, I find I have a lot more free time in my 9-5 job
03:36:55 <saz> than I do during the time I'm at uni
03:37:07 <saz> (doing undergrad work)
03:37:13 <clausen> postgrad is quite different
03:37:22 <clausen> you can organize your time
03:38:28 <clausen> I think most 9-5 jobs are not "9-5"
03:38:53 <clausen> I personally find 9-5 jobs very draining
03:39:17 <clausen> whereas when I come home from doing research, I feel very energetic
03:39:50 <saz> true
03:39:58 <saz> well, I come home completely drained
03:40:12 <saz> but I don't have to think about assignments/projects/reports over the weekend
03:40:24 <liiwi> Break! coffee and cookies for everyone
03:40:28 <clausen> if I achieve something big/good in a 9-5 job day
03:40:34 <ski> liiwi : again ?
03:40:39 <clausen> then I also feel energetic/good after work
03:40:42 <clausen> but that is rare
03:40:46 <clausen> (maybe one day a week)
03:40:54 <saz> heh, yeah
03:41:14 <clausen> it is true, that a PhD is something that is always on your mind
03:41:25 <saz> I do enjoy being a student more than I do being a code monkey
03:41:45 <saz> but, I still think being a student is a helluva lot more stressful
03:41:54 <clausen> agreed
03:42:05 <liiwi> ski: twice a day
03:42:08 <clausen> so, 9-5: draining/boring
03:42:13 <clausen> uni: energetic/stressful
03:42:18 <clausen> I much prefer the uni option ;)
03:42:31 <clausen> I should add "anti-social" to 9-5 and "social" to uni
03:42:38 <saz> hehe
03:42:41 <saz> yes, very true
03:42:48 <saz> uni people are a lot cooler than work people
03:42:55 <clausen> also, much bigger diversity
03:43:03 <saz> hm
03:43:04 <saz> well
03:43:05 <clausen> saz: just noticed that you're also aussie :)
03:43:09 <clausen> (unsw?)
03:43:12 <saz> yep
03:44:07 <clausen> at a uni, it's possible to become acquainted with 100s of people
03:44:10 <clausen> (even 1000s)
03:44:22 <saz> yeah
03:44:27 <saz> uni's both diverse, and completely not
03:45:15 <saz> i mean, at my work, there's an indian woman, an indonesian woman, a vietnamese guy, a sudanese guy, another sudanese guy, a chinese guy and an aussie guy
03:45:20 <saz> oh, and me
03:45:29 <clausen> you born in .au?
03:45:33 <saz> and a turkish guy or two
03:45:34 <saz> no
03:45:56 <clausen> well, I have uni friends of all of those nationalities
03:45:59 <clausen> (except sudan)
03:46:02 <saz> so do I
03:46:06 <saz> actually
03:46:17 <saz> most of my uni friends are chinese or indian
03:46:28 <saz> but there's a lot of variety
04:04:08 <swisscheese> Hi - can someone answer a simple code question?
04:04:26 <ski> can try ..
04:04:27 <shapr> I can!
04:04:36 <ski> shapr : :)
04:04:54 <Heffalump> shapr: *any* "simple" code question, or just some of them? :-)
04:05:05 <swisscheese> Thanks - new to H. Getting mismatch of Int to Maybe Int. How to cast the Maybe Int back to Int?
04:05:23 <shapr> any code question that I consider simple, I can answer :-)
04:05:30 <Heffalump> :-)
04:06:20 <ski> swisscheese : what do you want to to if there is Nothing to cast back ?
04:06:47 <swisscheese> There will always be something but an Error would be OK.
04:06:47 <ski> s/to to/to do/
04:07:20 <ski> maybe (error "whatever") id theMaybeInt    should prolly work
04:07:37 <ski> @type maybe (error "whatever") id
04:07:38 <lambdabot> maybe (error "whatever") id :: Maybe a -> a
04:07:59 <ski> or do you want to know what it does ?
04:08:00 <swisscheese> I have code like this:
04:08:00 <swisscheese> findBlank :: [] -> Int
04:08:00 <swisscheese> findBlank str = findIndex (==' ') str
04:08:00 <swisscheese> But interpreter complains elsewhere of mismatch of Int with Maybe Int. I want to handle the maybe only here and nowhere else.
04:08:00 <swisscheese> This just makes matters worse:
04:08:02 <swisscheese> findBlank str = Just findIndex (==' ') str
04:08:45 <ski> yes
04:09:14 <swisscheese> SDU (Sorry Dont Understand)
04:09:15 <ski> findBlank str = maybe (error "foo") $ findIndex (== ' ') str
04:09:16 <ski> ?
04:09:49 <shapr> well, Simon Marlow seems to think gforge is interesting
04:10:12 <ski> swisscheese : you can't put Just there, and if you add parens, then it will try to return a  Maybe (Maybe Int)  instead of an Int
04:10:28 <swisscheese> What does the $ do?
04:10:38 <ski> oh
04:10:50 <ski> that's just so i don't have to type more parens
04:10:58 <ski> f $ x = f x
04:11:09 <ski> $ has very-low priority
04:11:18 <ski> so you could also write
04:11:27 <shapr> swisscheese: I'm terribly curious, are you actually swiss?
04:11:38 <ski> findBlank str = maybe (error "foo") (findIndex (== ' ') str)
04:11:40 <swisscheese> No, NJ USA
04:11:56 <shapr> oh, okay. I'm born in Selma, AL; living in North Sweden
04:11:58 <ski> swisscheese : do you have holes ?
04:12:37 <swisscheese> Coming from cpp this is weird stuff! How does the maybe return an Int??
04:12:44 <shapr> if you're just beginning with Haskell, you might find the learning url in the channel topic helpful
04:12:52 <shapr> and the Haskell wiki is nice also
04:12:57 <shapr> @wiki FrontPage
04:12:58 <lambdabot> http://www.haskell.org/hawiki/FrontPage
04:13:21 <ski> swisscheese : btw, the type signature of findBlank above is wrong, it should probably read something like "[SomeTypeHere] -> Int", for SomeType (Char ? String ?)
04:14:24 <swisscheese> There is another irc channel for H newbies?
04:14:42 <shapr> not that I know of
04:14:53 <shapr> but this is a good place to ask Haskell questions of any flavor
04:15:14 <shapr> from newbie to esoteric
04:15:22 <shapr> gutentag cptchaos 
04:15:30 <swisscheese> What is "learning url in the channel topic"
04:15:47 <cptchaos> shapr: :-) guten Tag
04:15:49 <shapr> you're using mIRC, so you probably have box at the top of the window
04:16:01 <ski> swisscheese : you wanna know how "maybe" function works ?
04:16:02 <shapr> and it should say stuff like "We put the Funk in Funktion" and lots more.
04:16:03 <shapr> do you see it?
04:16:23 <swisscheese> no
04:16:34 <shapr> okay, you may be able to see it with the /topic command
04:16:38 <swisscheese> new to irc too :-((
04:16:47 <shapr> that's okay, we don't usually bite.
04:17:21 <shapr> lambdabot has been voted most likely to bite
04:17:43 <shapr> anyways, the learning Haskell url is 
04:17:44 <shapr> @learn
04:17:44 <lambdabot> http://www.haskell.org/learning.html
04:18:27 <shapr> each irc channel has a topic, originally for writing in a rough description of the current discussion on the channel
04:18:37 <swisscheese> I've spent hours at haskell.org have 2 books, etc but still can't get a solution :-(
04:18:52 <shapr> which books do you have?
04:18:58 <ski> solution of what ?
04:19:04 <swisscheese> SOE and Davie
04:19:27 <shapr> oh, Davie is from 92, it's a bit older.
04:19:31 <shapr> I like SOE
04:19:59 <swisscheese> SOE starts out nice and slow but goes 60mph after few chapters.
04:20:11 <shapr> zoom!
04:21:13 <shapr> ok, back to talking about Maybe then?
04:22:37 <shapr> swisscheese: you're still looking for the solution to the findBlank above?
04:23:18 <swisscheese> Well I have "maybe (error "foo") (findIndex (== ' ') str)
04:23:28 <swisscheese> But I don't understand it.
04:23:37 <ski> could be easier to use fromJust, in module Maybe ..
04:24:00 <ski> well, you know error ?
04:24:06 <swisscheese> yes
04:24:08 <ski> @error
04:24:09 <lambdabot> Sorry, I don't know the command "error", try "lambdabot: @listcommands"
04:24:14 <ski> @type error
04:24:15 <lambdabot> error :: String -> a
04:24:16 <ski> :)
04:24:25 <ski> ok
04:24:28 <ski> @type maybe
04:24:29 <lambdabot> maybe :: a -> (b -> a) -> Maybe b -> a
04:24:58 <ski> so, shall i explain what the maybe funtion does, or show how it's written ?
04:25:57 <ski> swisscheese : hmm ?
04:26:00 <swisscheese> I've see the code for maybe - I guess I just need to study the background some more. I find this stuff tricky after a decade+ of cpp.
04:26:49 <shapr> Haskell will stretch your brain into new ways of thinking. Happily, those new ways of thinking will also apply to C++
04:27:28 <ski> mm
04:27:37 <ski> well, look at the def. of fromJust, here :
04:27:40 <ski> fromJust              :: Maybe a -> a
04:27:40 <ski> fromJust (Just a)      = a
04:27:40 <ski> fromJust Nothing       = error "Maybe.fromJust: Nothing"
04:28:08 <shapr> part of the secret of Maybe is that algebraic datatypes are structural lego
04:28:13 <swisscheese> Ah - I was looking for that - tried to write myself to no avail. thanks.
04:28:15 <shapr> at least, that's my opinion
04:28:24 <ski> so this function (fromJust) is defined by what it returns for different cases
04:28:57 <ski> so you see what this is doing ?
04:29:19 <swisscheese> Basically yes.
04:29:28 <ski> good
04:29:50 <swisscheese> There is something about the flexibility of H that boggles the mind.
04:29:58 <ski> hehe :)
04:30:15 <ski> yes, Haskell's quite flexible
04:30:47 <swisscheese> BTW what are all the people doing online not chatting - just waiting for something interesting?
04:31:34 <Heffalump> or just leaving clients connected but not watching
04:31:42 <shapr> I have DSL, and I work from home, and I never turn off my computer. So I'm always connected to the 'net and irc.
04:32:25 <swisscheese> OK, thanks to all - you've been great. Have to go to work now! Bye.
04:32:34 <ski> bye
04:32:47 <shapr> bye!
04:33:30 <shapr> it's nearly time for the Heffalump focus strategy.
04:35:17 <cptchaos> what kind of strategy is that?
04:35:52 <shapr> that's the strategy where you leave #haskell to get work done, because #haskell is far too interesting.
04:36:23 <saz> heh
04:36:26 <cptchaos> my
04:37:03 <shapr> at least, since I've followed Heffalump's example, I have noticed that I get distracted less while working.
04:37:12 <shapr> g'day saz
04:37:21 <shapr> isn't it dark there?
04:37:23 <saz> evening shapr 
04:37:29 <saz> yeah, it's almost midnight
04:38:09 <cptchaos> shapr: maybe that would help me to prepeare for my Quantummechanics test ...
04:38:29 <shapr> probablyso
04:40:08 <shapr> lessee, what's a good way to cut apart mbox files in Haskell?
04:42:56 <Vulpyne> Hey, shapr.
04:43:04 <Vulpyne> Remember me?
04:43:18 <shapr> of course
04:43:21 <shapr> aka Myrdraal
04:43:28 <shapr> do you still have that risque job in the desert?
04:43:41 <Vulpyne> I have a different risque job in the desert. :)
04:43:44 <shapr> haha
04:44:10 <det> In the desert ?
04:44:17 <Vulpyne> Can't get out once you're sucked in!
04:44:28 <Vulpyne> det: It's in Arizona.
04:44:32 <det> ahh
04:44:37 <Vulpyne> shapr: How have you been?
04:44:39 <det> I am just above you in nevada
04:44:45 <det> your desert is nicer
04:44:54 <shapr> doing well, moved to Sweden, own half a company
04:44:59 <Vulpyne> Nice.
04:45:09 <Vulpyne> My boss is Swedish. :)
04:45:11 <shapr> making 99% of my income from Python
04:45:19 <det> my boss is swedish as well
04:45:24 <det> damned swedes
04:45:35 <Vulpyne> det: I want to move out of the deserty portion and up into the wooded mountain area.
04:45:43 <shapr> my boss is German
04:45:46 <Vulpyne> shapr: Very good. I have to do most of my stuff in C.
04:45:50 <det> Vulpyne: what city are you in ?
04:45:51 <shapr> that sucks
04:46:02 <Vulpyne> I kind of like C. :)
04:46:06 <Vulpyne> But not as much as Python.
04:46:11 <shapr> have you tried Haskell?
04:46:29 <Vulpyne> shapr: I can write a program to get the length of lists!
04:46:34 <shapr> yay!
04:46:41 <Vulpyne> And generate random passwords, and take sections of lists.
04:46:49 <Vulpyne> I'd like to do more with it... I really like it.
04:46:59 <Vulpyne> det: I'm in Glendale (it's very near Phoenix.)
04:47:00 <shapr> me too
04:47:21 <Vulpyne> shapr: It kind of seems like the language I would design if I was smart enough. :)
04:47:24 <det> Vulpyne: I lived in tempe for a bit
04:47:31 <shapr> yes, same for me
04:47:51 <Vulpyne> det: Fun... I was there once.
04:47:54 <Vulpyne> Got a parking ticket. :(
04:49:39 <shapr> Vulpyne: the handy 'bot here is written in Haskell
04:49:42 <det> The machine I am IRCing from is in pheonix in fact
04:50:04 <Vulpyne> det: Interesting... Is it in a large datacenter?
04:50:11 <Vulpyne> shapr: I know. :)
04:50:17 <Vulpyne> Though I haven't looked at the source for it.
04:50:31 <det> Vulpyne: qwest DSL :)
04:50:46 <Vulpyne> Oh.
04:50:48 <Vulpyne> Same as me. :)
04:51:05 <det> do you have the 8 ips package as well ?
04:51:18 <Vulpyne> Probably.
04:51:28 <Vulpyne> I have the 1mbit which comes with several IPs.
04:51:31 <det> oh
04:51:32 <shapr> it sucks that mbox is a latex command, I can't google for mbox parser haskell
04:51:34 <Vulpyne> I only have two machines, though.
04:51:35 <det> this is a very slow DSL
04:51:45 <det> I understand pheonix qwest DSL is expensive
04:51:54 <Vulpyne> What do you consider expensive?
04:52:14 <det> I think he is paying like $30+ for 128kbits
04:52:22 <det> down
04:52:50 <shapr> yes, that was my cue
04:52:52 <Vulpyne> Odd... I'm paying something like $45-$50 for 1mbit symmetrical.
04:52:56 <shapr> time for the Heffalump focus strategy
04:53:00 <det> in Las Vegas, I pay like $40 for 1.5mb down
04:53:11 <det> it is $50 for 3.0MB
04:53:23 <Vulpyne> Damn... I would pay $60 for that!
04:53:38 <Vulpyne> I work from home now, but at my old job we had an OC3.
04:53:38 <det> it is cable though
04:53:41 <det> not statics ips
04:53:48 <Vulpyne> 1mbit feels pretty slow after that. :)
04:53:54 <Vulpyne> Ah... That's slightly lame.
04:53:55 <det> I imagine :)
04:54:11 <Vulpyne> My IPs are technically dynamic too.
04:54:23 <Vulpyne> Get them from a DHCP server, but they haven't changed in a year.
04:54:29 <det> oh this machine has 8 static ips (5 usable) with reverse DNS
04:54:38 <det> he needs static ips though, maybe the explains the price delta
04:54:56 <Vulpyne> Ah... I guess he probably has the least expensive business one.
04:55:14 <Vulpyne> On my DSL, they filter incoming connections on various services (like HTTP or SMTP, etc.)
04:55:19 <det> oh
04:55:24 <det> yeah he runs http server, etc
04:56:36 <Vulpyne> That's handy.
04:56:44 <Vulpyne> I could, but I'd have to put it on port  8080 or something.
04:56:50 <Vulpyne> And I'm sure they'd harass me if I did any actual bandwidth.
05:00:57 <det> I am sure
05:01:36 <det> this is nice, we run all kinds of services, SMTP, DNS, HTTP for like 5 domains
05:03:06 * Vulpyne nods.
05:10:26 --- mode: capek.freenode.net set +b *!*@206.169.168.190
08:24:07 <TripleDES> hi
08:24:35 <TripleDES> anybody know a nice url to buy techincal books online in UK ?
08:27:53 <Igloo> {amazon,blackwells,waterstones,borders}.co.uk are where I'd look, although I think borders at least doesn't sell books online
08:28:09 <Igloo> And one of the middle two is Amazon-driven
08:38:10 <shapr> y0 SyntaxNinja 
08:38:52 <shapr> you got a moment?
08:40:07 <SyntaxNinja> ja
08:40:25 <shapr> any other thoughts from the current feedback?
08:41:00 <shapr> I'm fine with admin'ing gforge on ScannedInAvian.org
08:41:04 <SyntaxNinja> did you see my last mail?
08:41:11 <SyntaxNinja> cool! that resolves several of his worries, I think.
08:41:32 <SyntaxNinja> backups are an issue...
08:41:45 <shapr> I'm fine with admin'ing gforge on any debian/unstable box where I have root
08:41:57 <shapr> yah, I dunno about that.
08:42:29 <SyntaxNinja> so you should reply to Olef's emails with some assurances to his objections.
08:42:32 <shapr> I just bought a new drive, and I'll pick up another soon enough, so at least I'll have more space.
08:42:34 <shapr> yah, ok
08:42:52 <shapr> I agree with John's wiki thoughts, maybe I should mention the darcs source-wiki idea?
08:43:20 <shapr> anyways, one of his points is that we should have a list of everything
08:43:58 <SyntaxNinja> gforge can provide that, right?
08:44:01 <shapr> sure
08:44:17 <shapr> the major question there was, is the "overhead too high?"
08:45:35 <shapr> I think you're right, if we offer a few free memberships, we should get more people who can register themselves.
08:46:14 <shapr> anyways, it's worth trying. I don't see how it could possibly hurt the Haskell community, even if it completely fell on its face.
08:47:33 <Igloo> a few free memberships? Does that mean you'd charge for them later on?
08:48:00 <shapr> no, means that I'd create accounts for people who can't register themselves
08:48:18 <shapr> I was trying to be funny :-)
08:48:39 * shapr won't quit his day job
08:48:45 <Igloo> Oh, OK, I'm just lost, please ignore me  :-)
08:49:51 <shapr> anyways, I'm thrilled to have gforge on snowblind, my only worry is that snowblind is too slow.
08:50:05 <shapr> oh, I could ask on #gforge what sort of hardware *they* use for what number of accounts/projects.
08:50:35 <SyntaxNinja> what's snowblind?
08:51:00 <shapr> err, that's the name of my colocated server
08:51:06 <shapr> snowblind.ScannedInAvian.org
08:51:35 <SyntaxNinja> oh OK
09:02:07 <TripleDES> Igloo: thanks
09:05:01 <shapr> SyntaxNinja: any other options for more lightweight than gforge?
09:05:12 <shapr> wikis aren't wonderful for source control
09:05:27 <shapr> I wonder if moinmoin and darcs could be integrated
09:06:03 <SyntaxNinja> shapr: there's a tradeoff between organized / useful to the community, and lightweight. I think gforge is at a fine balance point.
09:06:21 <shapr> hm, I hadn't thought of that tradeoff, excellent point.
09:12:42 <SyntaxNinja> one of the things that's sorta going unsaid (and I don't have time to expound on it, because I'm about to leave) is that I think the community has a "not-invented-here" problem, which is in some ways useful and in some ways not.  non-useful ways are in everyone having their own little web page w/ a single source tarball on it.  one reason to use gforge rather than sourceforge is that it was "invented here" in a sense.
09:13:16 <shapr> I don't quite understand
09:14:47 <SyntaxNinja> hm. well, it's just a feeling and probably not very relevant, but I think that there's a lot of psychology that is related to the way people release software in our community, and gforge (the software) might appeal to that psychology more than sourceforge (the service).
09:14:49 <SyntaxNinja> but I really have to go ;)
09:15:01 <shapr> ok, cya
09:15:03 * shapr thinks about that
09:15:59 * SyntaxNinja &
09:16:16 <raver> y0!
09:16:19 <shapr> y0 y0
09:17:05 <shapr> oh, I think SyntaxNinja means that a haskell-oriented sourceforge clone would appeal to Haskell programmers more than using sourceforge itself.
09:17:43 <shapr> but I don't understand that well enough to describe it an email
09:20:00 <TripleDES> hey raver :P
09:23:32 <raver> hey TripleDES
09:24:18 <raver> can you remember me the title of Modelling's book?
09:24:24 <raver> :)
09:40:28 <shapr> SyntaxNinja: hey, can syntaxpolice.org handle backups?
09:41:11 <shapr> hi monotonom 
09:41:26 <monotonom> hi
09:54:16 <shapr> well, I wonder what the next reaction will be.
09:54:56 <shapr> SPJ is a cool guy.
10:28:42 <andersca> shapr: have you seen http://www.dtek.chalmers.se/~d00bring/haskell-xml-rpc/ ?
10:28:56 <shapr> nooo
10:29:01 <shapr> mmmm
10:30:44 <shapr> spiffy!
10:31:30 <andersca> yeah
10:32:34 <shapr> FIXME: pretty prints ugly XML
10:32:38 <shapr> haha, an ugly printer :-)
10:37:03 <shapr> ok, now I can do cool stuff with Zope again.
10:50:13 <SyntaxNinja> shapr: idono, maybe. we pay for bandwidth (over a certain amount) ...
10:50:35 <SyntaxNinja> maybe haskell.org could handle backups if you're hosting the primary. Olef's objection was over accounts
10:51:15 <shapr> if backups are rsync'd, it'll only be deltas
10:51:30 <SyntaxNinja> I know
10:51:46 <shapr> anyways, I'll investigate that iff they give gforge a go
10:51:58 <shapr> heyy, did you see the xmlrpc client/server andersca found?
10:51:59 <SyntaxNinja> I'll think about it and mention it to the primary admin of that machine
10:52:03 <shapr> ok
10:52:21 <Igloo> Don't forget that to do it safely you might need to get locks on things before rsyncing
10:52:23 <shapr> I may have to start paying for my bandwidth if gforge gets popular. I would be so happy :-)
10:52:25 <andersca> shapr: bjorn bringert wrote it
10:52:41 <shapr> andersca: he's doing HaskellDB for GHC now, right?
10:52:43 <Igloo> shapr  :-)
10:53:21 <shapr> seriously, pop straw poll
10:53:29 <shapr> who here would use gforge.haskell.org if it existed?
10:53:39 <shapr> I know I'd move haskell-libs to it.
10:54:01 <shapr> kosmikus said he'd be interested
10:54:18 <shapr> ned already has files online :-)
10:54:28 <Igloo> I probably would
10:54:47 <shapr> and SyntaxNinja has a LIP mirror on gforge
10:54:50 <shapr> so, that's four
10:55:54 <shapr> Olaf Chitil was wondering if gforge was too much overhead for people to put up their weekend hacks, anyone have thoughts on that?
10:56:57 <phubuh> zuh
10:57:05 <phubuh> my ERC is being weird, testing
10:57:09 <shapr> hi phubuh 
10:57:14 <phubuh> hi
10:57:16 <shapr> zuh back to ya
10:57:20 <liiwi> sproing
10:57:30 <shapr> hei liiwi, hyvää ihlta
10:57:36 <phubuh> noo!  I made this pretty color theme, and color-theme-describe doesn't work!
10:57:39 <liiwi> tÃ¶ttÃ¶rrÃ¶Ã¶
10:57:45 <shapr> yow, utf-8
10:58:04 <liiwi> yes, I moved to this millenia
10:58:27 <shapr> phubuh: there's a function to export & save your color-theme in its own file
10:58:29 <Igloo> I think it might if you have to wait for a project to be created. OTOH some namespace control, and possibly anti-abuse?, would perhaps be nice
10:58:30 <shapr> but I've forgotten the name
10:59:21 <phubuh> that's color-theme-describe :-)
10:59:22 <Igloo> Maybe people should be able to create projects matching ^hack-.* or something which don't come with accounts or anything else potentially risky/resource intensive without needing authorisation?
10:59:37 <phubuh> actually, I guess Saving for Future Sessions in customize-face should work
10:59:43 * phubuh hopes
10:59:50 <Igloo> Depends what you are trying to guard against by having the authorisation really
10:59:51 <shapr> I check the pending projects list in the morning and the evening
11:00:14 <shapr> but I'd be fine turning off approval until (or when) something abusive happens
11:00:22 <phubuh> whoops.  it didn't.
11:00:25 <shapr> maybe nothing abusive will happen.
11:00:38 <shapr> phubuh: your emacs starts up that fast?
11:00:40 <Igloo> shapr: Sure, but no matter how quick you are one can mkdir public_html/foo and copy the files in there now, while they're working on it
11:00:48 <phubuh> hee hee
11:01:16 <phubuh> (custom-set-faces
11:01:17 <phubuh>   ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
11:01:17 <phubuh>   ;; Your init file should contain only one such instance.
11:01:17 <phubuh>  )
11:01:18 <phubuh> stupid Custom
11:02:07 <shapr> hoi earthy 
11:02:24 <earthy> hey shapr
11:02:28 <shapr> wassup?
11:02:38 <earthy> I seem to have gotten a virus addressed from shae@scannedinavian.org
11:02:42 <earthy> that kinde fazed me for a moment
11:03:05 <shapr> that dam virus pisses me off
11:03:06 <shapr> it faked an email from me!
11:03:14 <shapr> I DIDN'T DO IT!
11:03:24 * shapr throws himself on the mercy of the court
11:03:24 <phubuh> From: headers are quite trivial to spoof
11:03:25 <earthy> yah
11:03:30 <earthy> phubuh: I know
11:03:37 <phubuh> ok :-)
11:03:48 <earthy> however, it *is* kinda interesting to see a virus spoof *valid* from headers
11:04:13 <shapr> it doesn't always, I think it's just looking at the address book, and sending to a random address from another random address.
11:04:28 <shapr> notice that a virus was also sent from sven_panne@betaresearch.de
11:04:30 <earthy> i.e., we're in one common addressbook somewhere. ;)
11:04:34 <earthy> shapr: exactly. :)
11:04:40 <shapr> and I don't think he uses win32 either
11:04:42 <shapr> I know I sure don't.
11:04:46 * earthy either
11:04:58 <earthy> but people'll probably have had mail from me then as well
11:05:35 <earthy> but it was an interesting twist on the `spam spam spam viruses and spam' problem that plagues ones mailboxes
11:06:07 <shapr> I cancelled the one that said "libraries@haskell.org does not have a subscriber glasgow-haskell-users@haskell.org, you can wait for moderator approval, or go to this url to cancel"
11:06:20 <shapr> or maybe the addresses were the other way around, whatever.
11:06:36 <shapr> yes, haskell.org needs clamav or something
11:07:05 <shapr> oh hey earthy 
11:07:17 <shapr> you know anything about good on-disk indexing data structures?
11:10:03 <earthy> b-trees
11:10:18 <shapr> hm, ok
11:10:23 <earthy> but then, that's the canonical answer.
11:10:53 <earthy> I'll check my introduction to algorithms and my knuth
11:10:54 <earthy> just a sec.
11:11:39 <earthy> owh, there's ISAM as well, but that is classified as woefully outdated
11:12:42 <earthy> 'kay, introduction to algorithms only mentions b-trees
11:23:04 <earthy> and knuth specifically mentions b-trees, multiway trees (of which ISAM is a subset, and B-trees an interesting extension) and that's about it.
11:23:12 <earthy> so.
11:23:22 <shapr> I that covers it.
11:26:13 <earthy> anyway, time to do some Knoppix helldesking
11:26:21 <shapr> heh, yay!
11:26:38 <earthy> well, it is my head on the line tomorrow if I don't. :)
11:27:13 <earthy> the financial administration of our dance group is hidden in a seemingly broken knoppix that I manufactured. ;)
11:27:30 <earthy> (yay gnucash boo knoppix's persistent homedir support)
11:55:37 * shapr cheers for update-alternative
12:00:19 <shapr> has anyone tried to install the XmlRpc lib yet?
12:00:27 <shapr> make install doesn't seem to work for me.
12:08:12 --- mode: saberhagen.freenode.net set +b *!*@206.169.168.190
12:11:31 <SyntaxNinja> any debian folk have trouble with the -2 version of haskell-mode? I just got a bug report.
12:13:35 <shapr> I haven't had any trouble with it yet.
12:13:45 <shapr> did the prompt-regex change in -2 ?
12:14:30 <SyntaxNinja> no, nothing is really changed, it's just loaded from a diff location
12:14:39 <SyntaxNinja> shapr: do you use emacs or xemacs, btw, because I don't think xemacs users use my package.
12:14:57 <shapr> I submitted a bug report and a fix for prompt-regex long ago, any idea what happened to that?
12:15:11 <shapr> xemacs
12:15:11 <shapr> oh
12:15:11 <shapr> that might explain it.
12:15:30 <SyntaxNinja> simonMar said he's not fixing bugs in haskell-mode. he wants someone else to take care of it.
12:15:50 <SyntaxNinja> I think I'm going to ask him if he minds if I troll around for someone to take care o fit.
12:15:52 <shapr> well fooey
12:16:04 * SyntaxNinja doesn't want to learn elisp any more right now
12:16:08 <shapr> yah, same here.
12:16:14 <shapr> I know more than I ever wanted to.
12:16:27 <shapr> elisp isn't bad, it's just not fun for me.
12:16:53 <shapr> anyway, for sanity's sake it should be using semantic
12:17:09 <shapr> any idea how I can tell xemacs to stop using its own haskell-mode?
12:17:23 * shapr suspect load-path hacking shall happen
12:17:30 <shapr> hi adept 
12:18:30 <SyntaxNinja> shapr: you can probably remove it via the package system (the xemacs package system, that is)
12:18:33 <SyntaxNinja> then maybe it'll load it
12:19:09 <shapr> scary thought
12:19:23 <adept> shapr: hi!
12:19:47 <shapr> adept: how's code?
12:20:56 <adept> these days, i'm mostly concerned with things other than code :) I'm looking for snowboard for my US Size 14 feet ...
12:21:12 <shapr> wow, big feet
12:22:07 <adept> indeed. And I thought that finding boots was a trouble ...
12:22:38 <SyntaxNinja> size 14. hmm
12:22:42 <SyntaxNinja> for europeans, that's about...
12:22:48 <SyntaxNinja> size 1,000,000
12:22:53 <adept> European 46.5. Boots have to be 47
12:23:31 <adept> and the worst part is that I can do exactly nothing with it :)
12:23:47 <adept> no workaround
12:27:13 <shapr> gzip your feet?
12:27:24 <adept> LOL :))) 
12:27:37 * adept dreams about bzip2-ing his feet
12:28:13 <shapr> has anyone tried HaRe with emacs?
12:29:48 <shapr> andersca: does bjorn bringert use irc?
12:30:43 <shapr> if so, he is not easily looked up.
12:31:20 <phubuh> elisp is pretty bad, actually :-(
12:31:30 <phubuh> in my opinion, of course
12:31:35 <shapr> mine too
12:31:47 <shapr> but several people on #emacs can do amazing things with it.
12:31:52 <phubuh> yeah, definitely
12:32:14 <phubuh> it could use closures and proper tail-recursion
12:32:23 <shapr> yup
12:34:37 <shapr> grr, HTTP.hs assumes port 80, you can't pass it in the url.
12:35:02 <phubuh> hmm
12:35:06 <phubuh> I have a fun problem for you dudes
12:35:25 <phubuh> there's one bot that responds to "perl foo" by evaluating foo with perl, and printing it
12:35:34 <phubuh> and another bot that responds in the same way to "@haskell foo"
12:35:43 <shapr> how to loop them?
12:35:44 <Riastradh> @ghci 1 + 2
12:35:44 <lambdabot> Sorry, I don't know the command "ghci", try "lambdabot: @listcommands"
12:35:55 <Riastradh> @dynamic-load ghci
12:35:55 <phubuh> in both, evaluated strings become unquoted
12:35:56 <lambdabot> symbol resolution failed
12:35:58 <Riastradh> Bah.
12:36:07 <phubuh> shapr: yeah, and without storing a string in some variable or something :-)
12:42:27 <shapr> nothing simple comes to mind
12:42:33 <shapr> Darius is the expert :-)
13:00:43 * shapr tries to hack port number parsing into HTTP.hs
13:08:34 <shapr> (\host -> maybe 80 (\x -> read ((drop $ x + 1) host) :: Int) $ (elemIndex ':') host) "foo:80"
13:08:39 <shapr> mmm, pretty code. (not!)
13:09:55 <phubuh> hee hee
13:13:05 <Igloo> case break (':' ==) host of ... would be nicer
13:16:17 <shapr> thanks Igloo!
13:16:26 <shapr> that really is much nicer.
13:16:45 <shapr> case break (':' ==) "foo" of (_,[]) -> 80; (_,c:n) -> read n :: Int
13:16:58 <shapr> or put "foo:80" instead of "foo"
13:19:14 <Riastradh> shapr, why did you write ((drop $ x + 1) host)?
13:19:37 <Riastradh> Why not just [[... -> read (drop (x + 1) host :: Int) ...]]?
13:20:16 <Igloo> The :: Int shouldn't be necessary, BTW. Just give a type sig to the top level function.
13:20:43 <shapr> Riastradh: because the function started out very differently
13:21:21 <shapr> I try to be explicit when I use read, otherwise I get lost.
13:21:34 <shapr> well, it compiles, lessee if it actually works.
13:21:40 <Igloo> You probably also want to return (Host, Port) rather than just Port
13:22:18 <shapr> nah, the host is pulled out with parseURI
13:22:29 <shapr> I'm checking the authority part of the URI record for a port
13:22:56 <Igloo> Presumably you are breaking it up in exactly the same way elsewhere to get the hostname, though?
13:23:07 <shapr> authority $ Data.Maybe.fromJust $ parseURI "http://foo.com:80/"
13:23:16 <shapr> "foo.com:80"
13:23:37 <shapr> HTTP.hs has openTCP that just assumes port 80, and opens up...
13:23:41 <shapr> oh, you're right, duh
13:23:47 <Riastradh> shapr, why do you call it parseURI?  Do you handle URNs, too?
13:23:57 <shapr> it's a standard library, I didn't name it.
13:24:06 <Riastradh> ...oh.
13:24:14 <Riastradh> Well, does it handle URNs?
13:24:21 <shapr> dunno
13:32:39 <shapr> yay, it compiles
13:38:10 <shapr> lsof -i says it's working
13:38:22 <shapr> but no response from Zope...
13:38:23 <shapr> hmm
13:41:29 <adept> shapr: could be a Zope thing, though ...
13:53:31 <phubuh>   let lock = Array.init (String.length slock)
13:53:31 <phubuh>                (fun x -> int_of_char (String.get slock x)) in
13:53:31 <phubuh>   let key = Array.make (Array.length lock) 0
13:53:31 <phubuh>   and v1 = lock.(0) lxor 5 in
13:53:31 <phubuh>     key.(0) <- ((v1 lsr 4) lor (v1 lsl 4)) land 0xff;
13:53:31 <phubuh>     for i = 1 to (Array.length lock) - 1 do
13:53:33 <phubuh>       let v1 = lock.(i) lxor lock.(i - 1) in
13:53:35 <phubuh>         key.(i) <- ((v1 lsr 4) lor (v1 lsl 4)) land 0xff
13:53:37 <phubuh>     done;
13:53:39 <phubuh>     key.(0) <- key.(0) lxor key.((Array.length lock) - 1);
13:53:41 <phubuh> eww
13:53:44 * phubuh dreads at the thought of converting this to Haskell
13:57:27 <phubuh> why are these people allowed to design protocols
14:00:06 <monotonom> Which protocol?
14:01:01 <phubuh> Direct Connect :-/
14:01:21 * phubuh considers just FFIing to a C version he wrote
14:01:33 <phubuh> yeah, that'll be easiest :-)
14:01:49 <phubuh> ok, now to learn FFI
14:02:31 <andersca> ffi is easy
14:02:43 <phubuh> great
14:08:32 <earthy> !sigh
14:11:24 <adept> phubuh: DCTC in Haskell? Neat :)
14:11:44 <phubuh> not quite DCTC, but a client indeed :-)
14:17:17 <adept> phubuh: neat! when it will be possible to play with it?
14:17:18 * adept wants to contribute
14:17:38 <shapr> what's DCTC?
14:18:00 <phubuh> yay! :-) pretty soon, it'll be capable of logging in and staying logged in
14:18:28 <phubuh> I don't have school tomorrow, I'll probably have time to get it working then
14:18:51 <phubuh> shapr: it's a command-line Direct Connect client
14:18:57 <shapr> oh
14:19:23 <phubuh> adept: scout, as the client's called, will have a GTK2 GUI soon enough
14:20:11 <phubuh> something like http://www.phubuh.org/~phubuh/scout3.png
14:20:29 <phubuh> the version in the screenshot is written in C.  what was I thinking? :-)
14:21:51 <adept> shapr: peer-to-peer network.
14:22:07 <adept> shapr: good thing to have when amazon.com does not ship to your country.
14:23:05 <shapr> makes sense
14:23:30 <shapr> are you close enough to a border to have a ship-to address that you can reach?
14:24:23 * adept . o O (but #bookz is better)
14:26:14 <adept> shapr: in fact, amazon.com ships. for $40-$50. Plus local taxes. Takes all fun out of purchase. Taking into account avg price of $8-10 for translated books.
14:26:34 <adept> shapr: closet border is Poland. Only marginally better.
14:26:42 <shapr> sounds scary all round
14:26:49 <adept> yep
14:27:18 <shapr> I liked living in Seattle, sometimes I could web-order in the morning and have the book at my doorstep by 3pm
14:27:24 <adept> you bet. Instead of reading "Scholl of expression", f.e., I'm forced to read "C.T. for working programmer". Scary, yep
14:27:30 <shapr> had to order before 11am or something though
14:28:05 <shapr> mail to North Sweden from amazon.co.uk isn't very fast.
14:28:20 <phubuh> true :/
14:40:31 <shapr> oh, is Graham Klyne in Oxford?
14:47:50 <phubuh> final link ... ghc-6.2: internal error: checkProddableBlock: invalid fixup in runtime linker
14:47:51 <phubuh>     Please report this as a bug to glasgow-haskell-bugs@haskell.org,
14:47:51 <phubuh>     or http://www.sourceforge.net/projects/ghc/
14:47:51 <phubuh> whoops
14:48:06 <shapr> oh, neat error
14:48:59 * phubuh doesn't think ghc likes debugging symbols in .o files
14:50:10 <phubuh> nope.
14:57:09 * phubuh shoots off a mail
15:05:01 <phubuh> yay, FFI is working :-)
15:05:11 <phubuh> that was surprisingly easy
15:05:14 * shapr has underestimated HTTP.hs
15:05:29 <phubuh> with O'Caml, I'd have to change the guts of the C function to use all kinds of strange macros and magic incantations
15:05:45 <shapr> I thought OCaml had swig support?
15:05:48 <phubuh> shapr: in its ability to do what you want, or in its ability to refuse? :-)
15:05:58 <phubuh> ooh, you're probably right, I haven't looked into that stuff
15:05:59 <shapr> in its ability to refuse :-)
15:06:06 <shapr> swig kicks ass in Python
15:06:07 <phubuh> oh, too bad
15:06:17 <shapr> Haskell doesn't have swig support, sadly.
15:07:20 <phubuh> how about greencard and c2hs and what have you?  I haven't tried any of them, is swig easier to use?
15:07:30 <shapr> I dunno
15:07:38 <shapr> FFI looks pretty simple
15:07:48 <phubuh> yeah, it does
15:08:00 <phubuh> foreign import ccall "static keygen.h" generate_key :: CString -> IO CString
15:08:00 <phubuh> generateKey :: Lock -> Key
15:08:00 <phubuh> generateKey lock = unsafePerformIO $ withCString lock generate_key >>= peekCString
15:08:04 * phubuh feels all unsafe
15:08:09 <shapr> heh
15:13:09 <det> phubuh: you should check out MLtons C FFI
15:13:15 <shapr> oh, I bet the problem is in the XmlRpcClient module!
15:14:49 <phubuh> det: it also looks nice
15:14:54 <det> phubuh: you dont need any C glue at'll! "val cos = _import "cos": real -> real"
15:15:40 <phubuh> have you seen haskell's FFI?  foreign import ccall "static math.h" cos :: Double -> Double
15:15:41 <phubuh> :-)
15:16:09 <phubuh> they seem pretty much equivalent
15:16:17 <shapr> I tried to use that to get around @ghci but foreign import doesn't seem to work in ghci
15:16:25 <det> well, that is something that generates actualy C stubs? :)
15:17:11 <det> erm, I mean, is that something you import to greencard or something that generates C stubs that are actually used?
15:17:27 <phubuh> nope, that's regular Haskell code ready to be fed to GHC or Hugs
15:17:38 <det> then what is math.h needed for
15:17:57 <phubuh> I'm not sure... type checking, perhaps?  I'll try removing my header file :-)
15:18:09 * shapr waits for phubuh's computer to EXPLODE!
15:18:22 <phubuh> uh oh!
15:18:44 <shapr> well, no exploding just yet
15:18:46 <det> I am just wondering if it generates some C internally, MLton has no extra indirection
15:18:57 <phubuh> det: nope, it still works
15:19:07 <det> neat!
15:19:45 * phubuh too wonders why it wants a header file name
15:19:56 <det> so HOpenGL is just a bunch of "foreign import" definitions I imagine ?
15:20:17 <shapr> with some pretty wrapper code I think
15:20:30 <phubuh> I guess it comes down to that, but it's probably defined with some preprocessor
15:20:46 <phubuh> or script that wraps OpenGL functions automatically
15:20:47 <det> I see
15:20:58 <phubuh> that's just speculating, of course :-)
15:21:09 <det> I was just really impressed with MLton's FFi after looking at Ocaml's
15:21:15 <det> Haskell's looks nice as well
15:21:24 <phubuh> yeah, same here, except Haskell instead of MLton :-)
15:21:30 <det> oh, and python's
15:21:38 <phubuh> I haven't looked at that at all
15:21:39 <det> python's is owrse than O'caml
15:21:44 <phubuh> heh
15:22:02 <det> but I guess that is to be expected from an interpreted language
15:22:22 <shapr> python has swig though
15:23:18 <det> yeah, but it is terrible
15:23:35 <det> PyOpenGL uses SWIG + some custom C code
15:23:39 <det> and it is awful
15:23:45 <det> buggy and broken
15:24:06 <det> you can't really use SWIG exclusively for alot of things
15:24:50 <shapr> well, when I next attempt to wrap C functions, I shall use Haskell's FFI
15:24:54 <shapr> so I'm not very worried.
15:26:01 <shapr> anyways, I've got enough debug statements in here to see the problem
15:26:06 <shapr> now if I can only figure out where it's happening
15:26:57 <shapr> g'day clausen 
15:27:56 <clausen> g'day shapr
15:28:09 <phubuh> now that I've gotten about as far on this client as I got in O'Caml, C, C++, and C#, I can finally say that Haskell has been by far the most pleasant one :-)
15:28:59 <phubuh> admittedly, I come with knowledge from -five- previous implementations, and "about as far" means "not far at all"
15:52:00 <shapr> hi stratocaster 
15:52:24 <cleverdra> howdy, strat.
15:53:06 <cleverdra> det - Python's status as an 'interpreted language' has little to do with the horribleness of its FFI.
15:53:22 <cleverdra> det - see certain decent Forth and Scheme FFIs.
15:57:13 <det> cleverdra: for example ?
15:58:14 <cleverdra> det - gforth's lib.fs, and Guile.
16:00:58 <det> I stand corrected!
16:02:22 <cleverdra> sigh, IIRC even Ruby has a sane enough FFI.
16:49:25 <shapr> @yow
16:49:26 <lambdabot> It's the land of DONNY AND MARIE as promised in TV GUIDE!
16:49:40 <Riastradh> @fortune
16:49:44 <lambdabot> You are not a fool just because you have done something foolish --
16:49:44 <lambdabot> only if the folly of it escapes you.
16:51:08 <shapr> @fortune
16:51:12 <lambdabot> QOTD:
16:51:12 <lambdabot> 	All I want is more than my fair share.
16:51:34 <shapr> I swear the problem in HTTP.hs is obvious, but I surely can't see it.
16:52:03 <shapr> something about my changes means that it now sets the host to a blank string before opening connections.
16:55:17 <Igloo> Even if you don't give it a port?
16:56:25 <shapr> oh, something's wrong with my port snippy code.
16:56:32 <shapr> that's the last place I'd think of looking
16:57:18 <shapr> I don't get it.. it works in ghci
16:57:23 * Igloo suspects what I said earlier about returning (Host, Port), BICBW
16:57:28 * shapr blinks stupidly
16:57:30 <shapr> no, I did that
16:57:35 <Igloo> Ah, OK
16:57:37 <shapr> c <- uncurry openTCP (case break (':' ==) host of (h,[]) -> (h,80); (h,c:n) -> (h,read n :: Int)) -- yay cheeze!
16:57:50 <shapr> at least, I think I did.
16:58:03 <Igloo> Strange if it works in ghci. Can hat trace it?
16:58:12 <Igloo> That looks like what I meant, yes
16:58:32 <shapr> oh, I think it's something else
16:58:55 <shapr> I'm being passed an empty host, that's why.
17:07:33 <Igloo> Ah  :-)
17:07:38 <Igloo> What are you writing?
17:09:06 <shapr> I'm trying to hack Warrick Gray's HTTP.hs to understand the port part of foo.com:8080
17:09:30 <Riastradh> Writing a simple HTTP URL parser doesn't seem like a particularly tasking task.
17:10:07 <shapr> specifically because Bjorn Bringert wrote an xmlrpc library, so this would allow me to get paid to write Haskell services for Zope.
17:10:45 <shapr> Riastradh: if you can fix the HTTP.hs that comes with XmlRpc, I'd be thrilled.
17:11:18 <Riastradh> Link?
17:11:31 <shapr> http://www.dtek.chalmers.se/~d00bring/haskell-xml-rpc/
17:13:08 <shapr> I've hacked the openTCP function in HTTP.hs to take an additional port argument, and I thought it'd be easy to hack the simpleHTTP function to furnish that argument.
17:13:23 <shapr> XmlRpcClient only uses the simpleHTTP function
17:17:20 <shapr> I suspect I'm just tired.
17:18:33 <Riastradh> It looks like it's not HTTP.hs that's borking here but Network.URI; it doesn't seem to bother with ports.
17:19:06 <shapr> authority $ Data.Maybe.fromJust $ parseURI "http://foo.com:80/"
17:19:11 <shapr> "foo.com:80"
17:19:16 <Riastradh> Yes, zigackly.
17:19:43 <shapr> then in simpleHTTP I've done: uncurry openTCP (case break (':' ==) host of (h,[]) -> (h,80); (h,c:n) -> (h,read n :: Int)) -- yay cheeze!
17:20:23 <shapr> or is that where I'm missing something?
17:20:30 <Riastradh> Does that not work?
17:20:42 <shapr> hey darius-
17:20:57 <shapr> Riastradh: it works interactively just fine
17:21:11 <shapr> but somehow, I get an empty host variable
17:21:21 <shapr> that's where I'm lost
17:21:30 <darius-> hey shapr
17:21:36 <shapr> both with and without the colon and port, I get an empty host
17:21:48 <darius-> i was surprised not to find emacs on your box
17:21:59 <Riastradh> shapr, that looks broken to me!
17:22:07 <shapr> what looks broken?
17:22:22 <shapr> for whatever reason, "authority $ rqURI r" returns a blank string
17:22:54 <shapr> darius-: didn't install it because I have tramp locally so can use emacs to edit anywhere I have a login, want me to install it?
17:23:12 <Riastradh> Well!  That looks pretty odd.
17:23:22 <darius-> shapr - i'd like that :)
17:23:46 * darius- just used ed, believe it or not
17:23:52 <shapr> :-)
17:23:54 <shapr> gnu or x?
17:24:04 <darius-> i'm used to gnu
17:24:22 <shapr> ok
17:24:26 * darius- wonders if anyone else codes haskell in ed
17:24:33 * shapr grins
17:24:43 <Riastradh> Um, I can't load HTTP.hs.
17:24:55 <shapr> what does it complain about?
17:25:11 <Riastradh> It's complaining about getting Exception when IOError is expected.
17:25:49 <shapr> it loads into ghci for me
17:27:05 <Riastradh> On lines 605, 677, and 908.
17:27:46 <shapr> oh, I think you might have a shadowing HTTP.hs
17:27:50 <shapr> I had that problem
17:28:00 <Riastradh> ?
17:28:40 <shapr> I had another non-xmlrpc copy of HTTP.hs in my .ghci load-path
17:28:46 <shapr> darius-: ok, try it, haskell-mode also
17:29:42 <shapr> speaking of which, SyntaxNinja just made a change to the haskell-mode paths, so please report any problems.
17:29:47 <Riastradh> I don't have another HTTP.hs on my file system.
17:29:54 <shapr> well then, that's probably not it.
17:30:21 <darius-> shapr - File mode specification error: (file-error "Cannot open load file" "haskell-mode"
17:30:28 <shapr> you did ":set -i/path/to/xmlrpc/src" ?
17:30:36 <darius-> looking good otherwise
17:30:37 <shapr> sounds like it's broken alright.
17:30:47 <Riastradh> Er, I wouldn't happen to need the rest of the XML RPC stuff, would I?
17:30:51 <shapr> you would
17:30:58 <Riastradh> Mumble.
17:31:03 <shapr> at, least I think so
17:33:41 <Riastradh> shapr, where are you getting the request r from?
17:34:49 <shapr> from post_ in XmlRpcClient.hs
17:34:54 <shapr> eresp <- simpleHTTP (request uri content)
17:35:08 <Riastradh> What does [[rqURI r]] return?
17:36:05 <shapr> shapr.homelinux.net:9673
17:36:28 <shapr> want my heavily debugged copy of HTTP.hs? and I have test_client2.hs to exercise it.
17:37:22 <Igloo> Does it compile with "hmake -hat -hc ghc6 test_client2"?
17:37:36 <shapr> I'll try it.
17:37:42 <Igloo> (hat-ghc6 and hmake needed)
17:38:30 <Riastradh> shapr, uh.
17:38:34 <shapr> ?
17:38:37 <Igloo> If so then ./test_client2; hat-trail test_client2 ought to allow you to follow what happened
17:38:40 * Igloo AFKs for a bit
17:38:42 <Riastradh> shapr, tell me, what does [[scheme (rqURI r)]] evaluate to?
17:38:58 <Riastradh> And what does [[path (rqURI r)]] evaluate to?
17:39:57 * Riastradh waits for the earth-shattering crash of shapr's palm against his forehead.
17:40:38 <shapr> er, how'd it do that?
17:40:50 <Riastradh> shapr, the input is shapr.homelinux.net:9673, right?
17:40:51 <shapr> wtf?
17:40:55 <shapr> yup
17:41:01 <Riastradh> So.
17:41:04 <Riastradh> Where's the URL scheme in that?
17:41:11 * shapr blinks cluelessly
17:41:30 <Riastradh> shapr, you know that URLs are of the form <scheme>:<scheme-specific>, right?
17:41:35 * shapr sighs
17:41:52 <shapr> thanks Riastradh :-)
17:42:02 <Riastradh> And I thought _I_ was tired...
17:42:12 <shapr> adding the http:// fixed it.
17:42:16 <shapr> man I can't believe that.
17:42:23 <shapr> I really need sleep :-)
17:42:27 <Riastradh> Network.URI is kind of silly.
17:42:42 <Riastradh> It's a _URL_ module, except it's specific to HTTP URLs.
17:42:43 <shapr> happily, Graham Klyne rewrote it just this evening.
17:42:47 <Riastradh> Oh, good.
17:42:52 <shapr> and he used Parsec
17:42:57 <shapr> so it's probably extraspiffy.
17:43:07 <Riastradh> ...um, why do you need a whole monadic parser combinator library just to write a simple URL parser?
17:43:10 <shapr> I want to meet Graham Klyne, I think he needs Ritalin as much as I do.
17:43:47 <Riastradh> Now I'm off to work on a Scheme URL module.
17:44:00 <Riastradh> (Well, a bit more than that, but that's part of it.)
17:44:03 <shapr> thanks for your help!
17:48:01 <shapr> darius-: anymore sysadmin requests before I go to sleep?
17:48:12 <shapr> want to write a lambdabot plugin? :-)
17:48:13 <darius-> no, thank you :)
17:48:25 <darius-> not till after i get that e thing working again
17:48:32 <shapr> ok
17:54:10 <jiwon> hm, can anyone recommend me a good, widely-used haskell compiler/interpreter ?
17:54:21 <shapr> GHC!
17:54:42 <shapr> the Glorious Glasgow Haskell Compiler
17:54:50 <shapr> lambdabot uses GHC.
17:55:12 <cleverdra> jiwon - GHC, Hugs.  nbc has some niftiness to it.  hbc has little life left in it.
17:55:29 <jiwon> cleverdra: little life? what do you mean?
17:55:46 <jiwon> ah.. I see.
17:56:31 <jiwon> thanks, guys!
17:56:39 <shapr> sure, feel free to drop by and ask more questions.
17:57:04 <jiwon> thanks.  btw, I want to feel haskell a little bit because
17:57:20 <cleverdra> jiwon - GHC gives you all that you'd want, for the most part -- Hugs gives you some windows-utility (e.g., you can trivially write COM clients with one distribution of Hugs) and a fast start for small tests (as opposed to GHCi) -- and Hugs works on OpenBSD, unlike GHCi.
17:57:25 * Riastradh hmms and finds he does want monadic parsers for URL parsing.
17:57:34 <jiwon> I'll be given a (one-time) lecture on self-interpreter using haskell...
17:57:53 <shapr> Sun's research project, the language Self?
17:57:54 <jiwon> I'm from FreeBSD, so maybe I'll use GHC
17:58:20 <jiwon> shapr: no, I don't think so...
17:58:36 <jiwon> flooding, sorry.
17:58:37 <jiwon> I will describe a small programming languae designed for being used in a course on computability. The language is designed in such a way that it is rather easy to write an interpreter for the language in the language itself. In C or Java this program is several hundred of pages long. In this language it is a few lines
17:58:49 <shapr> sounds interesting
17:59:00 <jiwon> that's the comment the lecturer wrote...
18:01:17 <jiwon> so, for that kind of purpose, could you kindly recommend some tutorials?
18:02:04 <shapr> @learn
18:02:04 <lambdabot> http://www.haskell.org/learning.html
18:02:18 <jiwon> ah.. thanks.
18:02:26 <shapr> I think that writing programming languages in Haskell is a large subject.
18:02:49 <shapr> you'll probably want to check out the nomaware monadic tutorial once you're comfortable with pure code.
18:02:58 <jiwon> ah, ok.
18:03:19 <jiwon> but you know, interpreter implementation from SICP isn't that complicated...
18:03:27 <jiwon> (although that interpreter is rather simple one...)
18:03:29 <shapr> the first paper on monadic parser combinators will be useful to you, if that's what the lecturer is using for implementation.
18:03:51 <shapr> lambdabot has a very nice interpreter
18:04:00 <shapr> @eval (\x -> x + 1) [1,2,3,4]
18:04:01 <lambdabot> type error
18:04:04 <shapr> whoops
18:04:07 <shapr> @eval map (\x -> x + 1) [1,2,3,4]
18:04:08 <lambdabot> [2, 3, 4, 5]
18:04:11 <jiwon> um, what is monadic?
18:04:17 <jiwon> I mean, monadic parser
18:04:28 <shapr> a monad is an interface used for abstraction
18:04:37 <shapr> object oriented is another one of those
18:05:33 <shapr> they're both a set of conventions and standard names and ideas that work together to make a certain type of abstraction.
18:05:51 <jiwon> ah...
18:06:52 <shapr> it took me some time to really understand how to design object oriented programs, the first time I understood class, instance, subclass, etc
18:07:10 <shapr> it was a big lightbulb for me, but hard thinking at the beginning
18:07:40 <shapr> monads are the same, hard thinking till you get the lightbulb.
18:07:55 <jiwon> ah.. I like that kind of thing. :)
18:07:58 <shapr> me too
18:08:16 <shapr> Haskell has several of those that come after monads
18:08:17 <Riastradh> No, monads are really quite simple!  They're just CPS computations abstracted to arbitrary values.
18:08:26 <shapr> right, I totally agree.
18:08:38 <shapr> g'day ozone 
18:08:52 <Riastradh> And arrows aren't too complicated, either.
18:08:57 <Riastradh> As long as you're a pointless kind of person.
18:08:58 <shapr> ok, explain them :-)
18:09:11 <shapr> how do you compare to the CPS description you just gave?
18:09:14 <Riastradh> They're generalizations of functions, abstracted over arbitrary values.
18:09:32 <shapr> I think I'm going to put this on the QuotesPage so I won't forget it.
18:09:41 <Riastradh> Monads are just computations that produce output.  Arrows take inputs.
18:10:08 <Riastradh> ...and produce output, too.
18:10:25 <shapr> @type ord >>> char
18:10:43 <Riastradh> >>> is just function composition, except s/function/arrow/1.
18:10:49 <shapr> yup
18:11:00 <Riastradh> Given:
18:11:10 <Riastradh> instance Arrow (->) where
18:11:15 <Riastradh>     (>>>) = (.)
18:11:21 <Riastradh>     ...first = ...etc...
18:11:32 <shapr> @arr
18:11:33 <lambdabot> I'd like to drop me anchor in her lagoon
18:11:36 <shapr> @arr
18:11:36 <lambdabot> This is the END for you, you gutter-crawling cur!
18:11:41 <Riastradh> @type ord
18:11:49 <Riastradh> Er, which is ord and which is chr again?
18:11:57 <shapr> @type Data.Char.ord
18:12:02 * shapr smacks lambdabot 
18:12:11 <Riastradh> @eval ord 33
18:12:12 <lambdabot> unbound variable: ord
18:12:14 <Riastradh> Bah.
18:12:15 <shapr> bad puppy!
18:12:19 <Riastradh> @eval chr 33
18:12:19 <lambdabot> unbound variable: chr
18:12:21 <shapr> anyways...
18:14:21 <Riastradh> OK.  [[ord >>> chr :: Char -> Char]].
18:14:26 <Riastradh> Er.
18:14:42 <Riastradh> Yes, something like that.
18:14:47 <shapr> right
18:15:07 <Riastradh> shapr, anyways, _you_ were the one who pointed _me_ to that page on arrows on the HaXmL web site or something.
18:15:22 <shapr> yes, I know.
18:22:41 <shapr> hi nerdlor 
18:27:35 <shapr> dang, the XmlRpc library appears to work (strace looks right) and I can get a response from zope via the python xmlrpclib... but not the test client
18:28:18 <nerdlor> hi shapr 
18:28:34 <nerdlor> ever use the GHC Network.CGI library?
18:29:37 <shapr> once or twice
18:30:04 <shapr> but I'm about to fall over asleep, so I can't help till tomorrow.
18:30:11 <nerdlor> far out
18:30:16 <nerdlor> no problem -- get you some sleep!
18:30:30 * shapr disappears
18:30:49 <Riastradh> CGI is evil.
18:31:07 <nerdlor> you mean, in general?
18:33:25 <Riastradh> Yes.
18:33:37 <nerdlor> sure
18:50:14 <_|_> @arr
18:50:15 <lambdabot> Avast!
