00:35:41 <magr> Happy 2004, #haskell
00:50:09 <mattam> Note the software analogy raising its ugly head again. Zermelo-Fraenkel set theory is a bit like the Windows operating system: once you're locked into it, it's hard to imagine breaking out. You use it because everyone else does and you're too lazy to do anything about it. Topos theory is more like the "open source" movement: you're welcome and even expected to keep tinkering with the code.
00:50:16 <mattam> haha
00:56:01 * earthy thinks
00:56:19 <earthy> so, where does category theory fit into that? :)
00:58:43 <mattam> well, maybe tunes
01:00:39 <earthy> ;)
01:40:56 <shapr> good morning #haskell!
01:41:03 <shapr> it's another lovely day to write code!
01:41:18 <shapr> @arr
01:41:19 <lambdabot> I want me grog!
01:41:39 <andersca> arr
01:41:40 <andersca> @arr
01:41:41 <lambdabot> Avast!
01:41:44 <andersca> Avast!
01:41:45 <andersca> arr
01:42:01 <ejt> @arr
01:42:01 <lambdabot> May the clap make ye incapable of Cracking Jenny's Tea Cup.
01:42:34 * ejt is back in the land of the imperative :(
01:42:44 <shapr> ejt: see, this way you have lots of perspective
01:43:18 <ejt> I have so many strange dreams about lazy evaluation ATM
01:43:33 <shapr> I get Haskell dreams, they're quite nifty.
01:43:58 <shapr> I once restructured my thinking into monads
01:44:05 <shapr> (in my dream)
01:44:15 <ejt> lol, that sounds so much like my dreams
01:44:44 <shapr> I vaguely recally that I used unsafePerformIO to let me see a few seconds into the future
01:45:19 <phubuh> haha
01:45:24 <ejt> rofl
01:45:26 * shapr grins
01:48:05 <shapr> ejt: alternatively, you could use Haskell to prototype and generate the imperative code you're writing now.
01:49:02 <ejt> funnily enough that was the reason I started learning haskell all those months ago
01:49:25 <ejt> I wanted to write programs that write programs
01:49:39 <shapr> have you reached that point?
01:51:21 <shapr> Igloo: I've been totally memed by that song, I woke up singing, "then I saw her face, now I'm a believer."
02:06:59 <ejt> shapr: no
02:07:32 <ejt> I need more experience just writing programs (which is why I'm playing with this chess thing)
02:09:44 <phubuh> I wonder if it could be noice to code with dasher
02:10:22 <phubuh> nice
02:13:51 <ejt> what is dasher ?
02:15:06 <phubuh> A really cool keyboardless input device
02:16:55 <phubuh> You use a mouse or an eytracker to control a zooming thing, it's really difficult to describe
02:17:19 <ejt> URL ?
02:18:53 <phubuh> http://www.inference.phy.cam.ac.uk/dasher/
02:20:03 <phubuh> I'm very slow with it still , but I am learning
02:21:41 <earthy> dasher is cool yeah.
02:22:19 <earthy> basically it's a weighted tree of string continuations
02:22:33 <earthy> that you then can `easily' navigate
02:22:38 <earthy> to select a particular string
02:24:09 <ejt> looks fun, apt-getting it now
02:28:11 <mattam> looks weird
02:31:03 <phubuh> It is fun even though I have no practical use for it
02:39:11 <ejt> well my first attempt was 'hollo, how army ou'
02:42:48 <phubuh> It can easily be used to generate postmodern poetry.
02:43:35 <phubuh> Newspaper bank and the most importances, being as the past. The tried the first by the needed it was at the greater than Kyozax
02:44:46 <Xer0> is anyone working with Haskell Graphic Library?
02:53:43 <shapr> Xer0: you mean the HGL from Hudak's book?
02:54:02 <Xer0> shapr: yes
02:54:21 <shapr> I haven't used it lately
02:54:50 <Xer0> have you used hgl version 3?
02:56:00 <shapr> I don't remember.
02:56:07 <shapr> what sort of question do you have about it?
02:56:56 <Xer0> it could be a basic question but... it is: i can't install ghc version 3
02:57:01 <Xer0> :)
02:57:17 <Xer0> sorry not ghc... i wanted to say hgl
02:57:41 <shapr> what's the problem/error?
02:58:43 <Xer0> when i try to compile it it doesn't... compilation breaks
02:59:01 <Xer0> it says something about boot directive of the Makefile
02:59:12 <shapr> are you trying to install it with Hugs, GHC, nhc, hbc?
02:59:19 <Xer0> ghc
02:59:29 <shapr> are you using a certain Linux distro? or a particular windows flavor?
02:59:33 <Xer0> debian
02:59:45 <shapr> which flavor of debian? unstable?
02:59:49 <Xer0> unstable
02:59:55 <shapr> ok, that's better
03:00:05 <shapr> since I'm using that myself
03:00:10 <shapr> are you using the latest ghc6.2 debs?
03:00:22 <Xer0> i tryied with that
03:00:25 <Xer0> but no success
03:00:39 <Xer0> now i was trying with a alienized ghc6 from rpm
03:00:44 <Xer0> and no success again
03:00:59 <shapr> the ghc6 debs are most likely to succeed, imho
03:01:30 <Xer0> i tryied by other way
03:01:37 <Xer0> downloading hgl3 precompiled
03:01:48 <Xer0> but it was compiled with ghc6.0
03:02:05 <Xer0> i didn't found debs of ghc6.0
03:02:13 <Xer0> so i alienized ones from rpm
03:02:41 <Xer0> and it's worse yet... it gives undefined references when linking
03:02:49 <shapr> what's the url to the HGL website?
03:03:03 <shapr> I'll try to install the latest version
03:03:13 <Xer0> http://haskell.cs.yale.edu/graphics/
03:04:22 <shapr> ok, lemme see if I can build it.
03:04:36 <Xer0> ok thanks shapr
03:08:22 <shapr> no guarantees that I can fix it, but maybe I can help with part of it.
03:08:45 <shapr> what error did you get?
03:09:08 <Xer0> did you successfully compiled it?
03:09:24 <shapr> no
03:09:26 <shapr> I got an error
03:09:58 <shapr> oh, I see why
03:10:09 <shapr> I have greencard 3.00, and this requires greencard 3.01
03:10:22 <shapr> do you have greencard 3.01 installed?
03:10:33 <Xer0> in  greencard              3.01-5                 (no hay ninguna descripción disponible)
03:10:47 <Xer0> ok
03:10:52 <Xer0> it could be the problem
03:10:53 <Xer0> in
03:11:41 * shapr installs greencard 3.01-5
03:12:10 <ecraven> what is greencard?
03:12:18 <shapr> http://haskell.org/greencard/
03:12:24 <shapr> it's sort of like SWIG for Haskell
03:12:37 <shapr> makes life easier when binding to C libs
03:13:11 <ecraven> nice
03:13:46 <Xer0> ok now i have greencard installed but hgl doesn't compiles yet
03:13:51 <Xer0> :(
03:14:09 <shapr> what error do you get?
03:18:12 <shapr> Xer0: why doesn't it compile? is there a useful error message?
03:18:17 <shapr> brb
03:20:13 <Xer0> shapr: i paste you the last lines of the make command
03:20:33 <shapr> ok, last three lines should be fine
03:21:39 <Xer0> ------------------------------------------------------------------------
03:21:39 <Xer0> ===fptools== Finished making `all' in mkdependC ltx mkdirhier runstdtest sgmlverb docbook lndir ...
03:21:39 <Xer0> PWD = /home/sergio/descargas/pracPD/HSHGL-3.00/fptools/glafp-utils
03:21:39 <Xer0> ------------------------------------------------------------------------
03:21:39 <Xer0> make[1]: Leaving directory `/home/sergio/descargas/pracPD/HSHGL-3.00/fptools/glafp-utils'
03:21:40 <Xer0> make[1]: Entering directory `/home/sergio/descargas/pracPD/HSHGL-3.00/fptools/libraries'
03:21:42 <Xer0> make[1]: *** No rule to make target `boot'.  Stop.
03:21:44 <Xer0> make[1]: Leaving directory `/home/sergio/descargas/pracPD/HSHGL-3.00/fptools/libraries'
03:21:58 <Xer0> make: *** [build] Error 1
03:22:03 <shapr> hm
03:22:18 <shapr> same error I get
03:22:36 <Xer0> do you know what it could be?
03:22:52 <shapr> oh, I see part of the problem
03:23:08 <shapr> HGL requires the HSX11 package
03:23:40 <Xer0> http://www.reid-consulting-uk.ltd.uk/projects/HSX11.html
03:23:49 <shapr> yes, that one
03:23:55 <Xer0> yes
03:24:27 <Xer0> i will try to compile hsx11 first
03:24:32 <shapr> ok
03:25:47 <Xer0> well i don't know if this is the best way to do i want to do
03:25:51 <Xer0> i mean
03:26:07 <Xer0> i was with 2.0.5 version of HGL which runs under hugs
03:26:28 <Xer0> but I needed to make some calculus with a type returned by a funcion of HGL
03:26:41 <Xer0> that type is an INt
03:26:55 <Xer0> Int, which is in GHC but not in Hugs
03:28:04 <Xer0> i need to calculate the sine of that value
03:28:27 <Xer0> and sine needs a floating class type instance
03:29:05 <Xer0> so i found the int2float cast but it's only available for GHC
03:29:42 <shapr> what about fromIntegral ?
03:29:43 <ejt> hugs has Int
03:29:45 <Xer0> any idea on how to do calculate sine(a) when a is of Int type?
03:30:18 <phubuh> sin (fromIntegral a)
03:30:22 <shapr> yup
03:30:23 <Xer0> i tryied with fromintegral
03:30:31 <Xer0> but it doesn't work
03:30:58 <Xer0> fromIntegral(a) makes a Integral, but not Floating
03:31:29 <Xer0> sorry not an Integral, it makes a Num
03:31:50 <ejt> Prelude> fromIntegral(3) :: Float
03:31:50 <ejt> 3.0
03:32:12 <phubuh> @type sin (fromIntegral 3)
03:32:12 <lambdabot> sin (fromIntegral 3) :: (Floating a, Integral b) => a
03:32:38 <shapr> since @type specifically calls Hugs
03:44:01 <Xer0> nice
03:44:06 <Xer0> that works
03:44:09 <shapr> yay
03:44:20 <Xer0> but now i get another problem...
03:44:28 <Xer0> (sorry by too much questions)
03:44:43 <Xer0> no i need to get that back to Int type
03:46:08 <Xer0> i tryed toInteger but... of course, it says me Int/=Integer
03:46:48 <ejt> I hope you've multiplied the sin by something, otherwise converting to an int is a bit silly
03:47:10 <Xer0> yes i make some multiplies with that
03:48:15 * shapr reads Paul Graham's latest article
03:48:45 <shapr> the paper "CyberInsecurity: The Cost of a Monopoly" is interesting
03:48:50 <shapr> not surprising, but interesting.
03:49:37 <shapr> I'm particularly amused by the fact that the lead researcher for this paper was fired from @Stake some few minutes after this paper was released.
03:50:19 <shapr> amusing quotes from this paper: "The threats to international security posed by Windows are significant, and must be addressed quickly."
03:51:25 <Xer0> lot's of thanks for the help
03:52:05 <shapr> Xer0: I'd suggest you write a small test module where you try to figure out how go from Float to Int
03:52:08 <shapr> that's what I would do
03:52:43 <Xer0> ok
03:52:45 <Xer0> thanks shapr
03:53:14 <ham[let]> hidiho
03:53:21 <shapr> my you smell all nice and flowery
03:53:30 <ham[let]> me?
03:53:38 <shapr> wasn't that a Mr. Hanky quote?
03:53:44 <ham[let]> heh
03:53:47 <ham[let]> dunno
03:54:05 <shapr> Are you familiar with Mr. Hanky the Christmas Poo?
03:54:06 <ham[let]> shapr do you know about process algebra?
03:54:18 <ham[let]> nope i just know that its related to south park
03:54:23 <ham[let]> but thats about it
03:54:24 <shapr> too bad :-)
03:54:28 <shapr> well, pi-calculus?
03:54:35 <shapr> have you tried Pict?
03:54:46 <ham[let]> i also know that it exists :)
03:54:48 <shapr> I've just heard of them, haven't gotten to the point of investigating them myself.
03:55:06 <ham[let]> i need to tell my prof to by that pi calc book
03:55:48 <ham[let]> shapr that stuff i described you is closely related to concurrency and process algebras i think
03:56:33 <ham[let]> and i have found a book on quotent categories and equivalence categories :) so i hope to get all that connected
03:56:53 <ham[let]> i havent yet found the patience to write it all down
03:57:50 <earthy> process algebra... pfft. ;)
03:57:58 <ham[let]> earthy ?
03:58:13 <earthy> I prefer not to thread in those waters.
03:58:13 <ham[let]> i just want to have a mathematical foundation for my thesis
03:58:24 <shapr> I agree that pi-calculus and other ways of describing 'multi-threaded' processes look promising
03:58:34 <shapr> earthy: where angels fear to thread? ;-)
03:58:36 <earthy> well, process algebra is reasonably well known. ;)
03:58:40 * shapr snickers hysterically
03:58:40 <earthy> shapr: :)
03:58:57 <shapr> is carpet-cleaning threadsafe?
03:59:13 * shapr gives it up before the jokes really get knotted
03:59:17 <earthy> shapr is in a `funny' mood, I see. ;)
03:59:29 <shapr> oh, what other moods do I have?
03:59:39 <earthy> happy new year's to you too, shae. not too much absinth, I hope? :)
03:59:44 * shapr snickers
03:59:49 <ham[let]> what i need though is something that is able to make proofs on these graph/automatons in the end
04:00:00 <earthy> graph/automatons?
04:00:08 <shapr> you're always poe-poe'ing my jokes ;-)
04:00:12 <ham[let]> yeah i build graphs that represent programs
04:00:15 <earthy> shapr: am I?
04:00:24 <shapr> bad pun on poe and absinthe
04:00:29 <ham[let]> something like petri nets i think
04:00:32 <earthy> hm. maybe that's because you overdo them from time to time. :)
04:00:39 <shapr> probably more than that
04:00:52 <ham[let]> but what i do is mixing programs and data as graphs
04:01:05 <earthy> ham[let]: do you know about graph rewrite systems?
04:01:17 <ham[let]> hm no will look into that though
04:01:18 <shapr> isn't GHC a graph rewriter at some level?
04:01:35 <ham[let]> is that like graph isomorphism?
04:01:44 <shapr> earthy: you're right, I do feel silly.
04:01:47 <ham[let]> or equivalence automatons?
04:02:10 <earthy> shapr: what, not spineless? :)
04:02:23 * shapr snickers
04:02:38 <ham[let]> isnt snickers known as twix?
04:02:38 <shapr> tagless and listless maybe
04:02:49 <earthy> but yeah, IIRC the g-machine is something like graph rewriting. :)
04:03:02 <earthy> ham[let]: do you know the lambda calculus?
04:03:13 <ham[let]> what do i rewrite? and what does the graph represent?
04:03:16 <ham[let]> yep
04:03:22 * shapr sings la-la-la-la-lambda (to the tune of "la bamba")
04:03:24 <earthy> ham[let]: well, it is basically a rewrite system.
04:03:30 <ham[let]> shapr heh :)
04:03:38 <earthy> now, you can generalize that to term rewrite systems
04:03:40 <ham[let]> ah ok sounds reasonable
04:04:01 <earthy> and then generalize that to *graph* rewrite systems, where you have graph patterns that you match against particular graphs and rewrite those
04:04:18 <ham[let]> thats something i also thought about that you can bind specific nodes or arrows to an object
04:04:24 * earthy nods
04:04:40 <ham[let]> cool that sounds like a cool thing to also look into for my thesis
04:04:55 <ham[let]> cause that shape thing was something i wanted to emphasis
04:04:57 <earthy> now think bigger. think of the objects as implemented as subgraphs themselves.
04:05:08 <ham[let]> thats what i want to call modules
04:05:21 <shapr> hoi kosmikus!
04:05:27 <ham[let]> modules are subgraphs that have a strict input and output
04:05:32 <shapr> wie geht es?
04:05:47 <ham[let]> such that you can intorduce proxy nodes for them and collapse them to a module
04:06:04 <ham[let]> thus you can zoom in and out of programs
04:06:04 <kosmikus> guten tag shapr -- es geht mir gut, und Dir?
04:06:10 <earthy> ham[let]: you're encoding dataflow with the graphs?
04:06:23 <ham[let]> earthy i want to mix some things
04:06:26 <earthy> or both data and control flow?
04:06:33 <ham[let]> i want to be able to model automatons
04:06:37 <ham[let]> then also neural nets
04:06:46 <ham[let]> and i base all that on channels
04:06:51 <earthy> what is a channel?
04:07:04 <earthy> in your terminology? :)
04:07:06 <ham[let]> a channel is something like that thing we are currently chatting in
04:07:17 <ham[let]> the listenders in that channel are functions
04:07:33 <ham[let]> and they map to other channels
04:07:41 <earthy> or to the same channel?
04:07:47 <ham[let]> or to the same yes
04:07:51 <earthy> sounds very much like data flow. ;)
04:07:54 <ham[let]> endomorphisms are possible
04:08:41 <ham[let]> isnt anything dataflow then in the end?
04:08:52 <earthy> ham[let]: not necessarily.
04:08:58 <ham[let]> i want to be able to have graphs over graphs
04:09:09 <earthy> what for?
04:09:12 <ham[let]> and they also should represent data 
04:09:24 <ham[let]> thats higher order isnt it?
04:09:33 <ham[let]> ie you have a neural net
04:09:46 <ham[let]> with no weights attached so far just the network
04:10:01 <ham[let]> then you could have a functor that applies the weights
04:10:27 <ham[let]> or you have program fragments like recursion while if else etc that you can combine to programs 
04:10:43 <ham[let]> or you want the program to be dynamic
04:11:04 <ham[let]> that is you write a non deterministic automaton that refines itself
04:11:19 <earthy> so, your neural net is the object, and what you want to be describing is the methods of dealing with that object?
04:11:24 <ham[let]> also the program/graph stores data
04:11:36 <ham[let]> nope that object runs itself
04:11:40 <ham[let]> all the nodes are channels
04:11:47 <earthy> ham[let]: do look into graph rewrite systems. :)
04:12:05 <ham[let]> now i need something like category theory or process algebra (join calc as far as i know)
04:12:34 <ham[let]> graph rewriteing seems to me like a cool method to do proofs in the programs
04:12:46 <ham[let]> or collapsing programs
04:13:04 <ham[let]> ie joining loops in a program
04:13:56 <ham[let]> also that is interesting for agents systems
04:14:18 <earthy> you know, you managed to completely lose me right there...
04:14:30 <ham[let]> ? why
04:14:52 <ham[let]> my idea is that if there are structures in that graph that can be reused then they should be joined
04:15:00 <earthy> I just completely lost where you're going. ;)
04:15:01 <ham[let]> like you have a filter on a picture
04:15:05 <ham[let]> and another one
04:15:14 <earthy> *AH!* now we're down to graph rewrite systems again! :)
04:15:28 <earthy> `if graph matches pattern on left, replace with pattern on right'
04:15:38 <ham[let]> i seek for a structure that enables you do draw programs like you would do on paper
04:15:42 <shapr> go away or I will rewrite you as a very small graph!
04:16:03 <earthy> shapr: what, c-graph, bourne-graph or korn-graph? :)
04:16:23 <shapr> um, gnuplot?
04:16:27 <ham[let]> i do that for ai and i think that the general structure is more important then the exact implementation
04:16:29 <earthy> ham[let]: I draw programs in lots of different ways on paper.
04:17:01 <earthy> (because there's so many aspects to the structure of a program that you can highlight)
04:17:22 <ham[let]> yep but graphs seem to be a good structure right?
04:17:47 <earthy> owh, yeah. it's always some sort of graph
04:17:48 <ham[let]> i mean maybe what i wanna  do is total bullshit
04:18:04 <ham[let]> but i like it because i think that it helps you abstracting
04:18:09 <earthy> it's just that for any program I can usually draw several different graph.
04:18:11 <earthy> +s
04:18:14 <ham[let]> which is what i like in functional programming
04:18:36 <ham[let]> that is what equivalence automatas and quotient automatas are for
04:18:53 <ham[let]> they model something like program "isomorphism"
04:19:08 <ham[let]> they are morphistic on what they do
04:20:08 <ham[let]> i mean if you can draw something like a graph that models the program then alot of ppl can understand that
04:20:26 <earthy> *cough*UML*cough*
04:20:26 <ham[let]> and it helps to see patterns within the program
04:20:31 <ham[let]> heh ;)
04:20:55 <ham[let]> i dont like uml
04:21:17 <earthy> but it *is* a graph-like representation for programs
04:21:27 <ham[let]> i want that structure to be able to run as a program also
04:21:43 <ham[let]> and also make proofs over that structure
04:22:24 <ham[let]> one idea i had some time ago was for analogies
04:22:39 <ham[let]> you build something like an indeterministic automaton
04:22:52 <ham[let]> that has all the possible operations as arrows
04:23:23 <ham[let]> and then do a search for a path in that graph that yields the next number
04:23:47 <ham[let]> also something like constraint programming would be interesting to integrate
04:24:07 <ham[let]> or logic programming with latices
04:25:53 <ham[let]> is there any automaton module for haskell? like the fsm tools from at&t
04:27:53 <earthy> don't ask me, I'm not the maintainer of the Haskell Communities & Activities report. ;)
04:28:04 <earthy> (which kinda does remind me...)
04:28:33 <shapr> dang, I've forgotten how to reopen drafts in gnus
04:33:11 <earthy> dang, I'm seeing myself forced to do grading again...
04:47:52 <ham[let]> wow i found someone who does nearly exactly what i want to do :)
05:17:23 <shapr> Igloo: It's very pleasing to have ghc-cvs packages. thanks for all your work on the many debs.
05:18:18 <det> shapr: BOO
05:18:21 <Igloo> np
05:18:27 <det> shapr: you fixed lambdabot
05:18:35 * Igloo grins at having infected shapr with I'm A Believer  :-)
05:18:59 <shapr> arggh, I had escaped that for over an hour!
05:19:06 <shapr> det: I did?
05:19:12 <det> shapr: someone did
05:19:18 <shapr> I'm a receiver!
05:19:28 * shapr puts up the Rabbit Ears antenna
05:19:32 <det> shapr: it strips ascii \CR, \013 from output
05:19:38 <shapr> ah, I did that, yes.
05:19:48 <shapr> just after we last talked about it in fact.
05:19:49 <det> so BOO, I say
05:19:58 <shapr> det: now you get to find something better :-)
05:20:11 <shapr> I'm sure there are lots of holes in lambdabot
05:21:31 <Igloo> Freaky - Monkees theme tune on darts program
05:22:37 <det> @eval "++ATH0"
05:22:37 <lambdabot> ++ATH0
05:22:41 <det> I give up
05:23:07 * shapr snickers
05:23:13 <shapr> det: you could look at the sources
05:23:25 <shapr> I know of at least one major hole that I haven't yet fixed.
05:23:27 <det> and corrupt my mind with haskell
05:23:29 <det> no thank you!
05:23:34 <shapr> your choice
05:23:39 <det> shapr: what hole ?
05:23:45 <det> shapr: gives us a hint
05:23:46 <shapr> det: :-P look at the sources
05:25:11 <det> is there such a thing as a transformation from normal order evaluation to strict or is that undecidable ?
05:29:03 <wuuru> det: you need to rewrite your program in a language for which a strict implementation exists :-)
05:29:07 <wuuru> det: e.g. ML :-)
05:29:13 <wuuru> imho
05:29:32 <wuuru> det: why do you want go strict? :-)
05:30:14 <det> just a general question
05:30:30 <det> I dont mean transforming haskell
05:31:34 <wuuru> det: well, of course, it is the translator that decides wether to use strict or lazy ...
05:31:45 <shapr> bonjour Lunar^ 
05:32:27 <Darius> det: You want to translate a program in a non-strict language to a non-strict program in a strict language?
05:32:54 <shapr> g'day Darius 
05:33:34 <det> more like, is it possible in a non-strict language to determine when you can do an operation strictly without affecting the meaning
05:34:58 <Darius> shapr: heya
05:35:30 <Darius> Yes, but not in general.  if halts(program) then seq x () else ()
05:37:54 <shapr> so, who has the grey category theory book? I want to put some names on the HaWiki page
05:38:16 <ham[let]> grey CT book?
05:38:18 <shapr> yup
05:38:24 <ham[let]> whats its name?
05:38:34 <shapr> http://www.haskell.org/hawiki/StudyGroup
05:38:46 * shapr adds phubuh, SyntaxNinja
05:41:15 <Lunar^> Seems an interesting book
05:43:23 * shapr makes evil comments on phubuh's HaWiki page.
05:43:37 <ham[let]> ?
05:43:50 <shapr> just entertaining myself :-)
05:44:04 <shapr> today is my first workday after Christmas holidays, and I'm not very focussed yet.
05:44:30 <ham[let]> whats the url of that phubuh site?
05:44:47 <ham[let]> shapr is that book any good?
05:44:56 <shapr> I don't know, I've only gotten a few pages into it.
05:45:18 <shapr> jao recommended it to me. I was planning on getting the Benjamin Pierce CT book while I was getting his TaPL book.
05:45:52 <shapr> jao said he had both of them, and that he would recommend the Lawvere & Schanuel book
05:45:55 <ham[let]> somewhere here in that gigantic pile of papers i have a paper on CT and programs that was the first thing that was really connected to CT and programming in general
05:46:06 <ham[let]> TAPL?
05:46:12 <shapr> Types and Programming Languages
05:46:15 <shapr> very nifty book
05:46:37 <shapr> I have a bad habit of explaining the basics of type theory to random people at parties.
05:46:45 <ham[let]> :)
05:46:53 <ham[let]> whatst he core of it?
05:47:08 <shapr> Russel's Paradox from the Principia Mathematica
05:47:18 <ham[let]> i have the same bad habbit which results in the fact that not much ppl listen to me
05:47:27 <ham[let]> which then results in me not going to parties :)
05:47:29 <shapr> Russell(sp?) and Whitehead wanted to unify all of mathematics into a single book, named the Principia Mathematica
05:47:41 <ham[let]> yep i know
05:47:43 <shapr> actually, most people I explain this to find it very amusing
05:47:45 <ham[let]> manhattan project
05:47:56 <ibid> russel's paradox is older than principia
05:47:59 <shapr> right
05:48:01 <ham[let]> though they failed
05:48:12 <shapr> ibid: is it russel or russell?
05:48:16 <ham[let]> and that paradox was found just after pubing the book :)
05:48:30 <ibid> russell probably, can't be bothered to check
05:48:39 <ibid> ham[let]: wrong
05:48:45 <ham[let]> oh
05:48:56 <shapr> russell's paradox is a simple problem from set theory
05:48:58 <shapr> hi SyntaxNinja!
05:49:05 <ibid> russell found the paradox in frege's work
05:49:11 <shapr> that is, there's the set of all rocks, which is just 'all rocks'
05:49:22 <shapr> there's the set of all sets, which is just all sets
05:49:22 <ibid> and it was frege's book that was almost fully printed when he learnt of it
05:49:33 <ham[let]> ibid ah right
05:49:47 <shapr> next there's the set of all self-containing sets, obviously the set of all sets is a member of that, and the set of rocks is not
05:49:54 <ibid> frege added an appendix about it
05:49:54 <ham[let]> shapr i like the analogy to the catalouges in the lib
05:50:04 <shapr> then there's the set of all sets that don't contain themselves
05:50:21 <shapr> question is, where does that one fit in? does it contain itself or not?
05:50:24 <ibid> actually, your presentation fails at "there's the set of all sets, which is just all sets" :)
05:50:33 <shapr> ibid: bah, it works fine at parties
05:50:39 <ham[let]> :)
05:50:47 <ibid> i find the barber's problem better for the layman :)
05:50:57 <ibid> which is a reformulation of russell's paradox
05:51:04 <shapr> who shaves the barber?
05:51:16 <ibid> no, does the barber shave himself :)
05:51:28 <shapr> what's that one again?
05:51:36 <shapr> no man can shave himself, and there's only one barber?
05:51:50 <SyntaxNinja> hi shapr
05:51:58 <SyntaxNinja> happy new year all!
05:51:59 <ibid> in a village every man had a beard, and the village had a barber
05:52:03 <shapr> SyntaxNinja: how's life? did you get nifty Christmas presents?
05:52:16 <ibid> the barber promised, "i will shave every man who does not shave himself"
05:52:29 <ibid> (the barber is a man, obviously)
05:52:39 <ibid> does the barber shave himself?
05:52:54 <shapr> surprisingly, most people I've spoken to at parties have no trouble dealing with set theory
05:53:01 <SyntaxNinja> shapr: I got an awesome food processor and some nice clothes. I got a belalaika (3 stringed instrument) from Russia
05:53:03 <ibid> i don't doubt it
05:53:23 <shapr> I'm not used to dealing with people who don't mind thinking.
05:53:28 <ibid> but the problem is, it's hard to present the set theory version of russell's paradox correctly at a party :)
05:53:33 <shapr> really?
05:53:44 <ibid> without resorting to such nonsense as "there is a set of sets" :)
05:53:50 <shapr> that's not too much nonsense
05:54:03 <ibid> well, yeah, it's just a false statement :)
05:54:07 <shapr> plus it easily leads to the next step, which is "R&W solved this problem by ranking sets"
05:54:25 <ibid> ranking sets? you mean their version of types?
05:54:29 <shapr> right
05:54:37 <shapr> each set could only hold things of a lower rank
05:54:48 <shapr> set of rocks is okay
05:54:49 <ibid> yeah
05:55:05 <shapr> and the set of sets of concrete objects like rocks, tables, etc is also okay.
05:55:21 <shapr> but sets aren't allowed to refer to themselves, or any higher ranked sets
05:56:23 <shapr> so then you get to say "types in programming languages are about the same thing, don't try to add strings to numbers"
05:56:29 <ibid> theh
05:56:43 <ibid> actually, types make more sense in programming languages than in logic
05:56:45 <ibid> imho :)
05:56:50 <shapr> yah, I agree
05:57:00 <ham[let]> though if you see it on the level of the higher set its ok isnt it?
05:57:05 <shapr> by the end of this, most of these people at parties are thinking "gee, this math stuff doesn't sound too hard"
05:57:09 <shapr> which is true, it isn't too hard.
05:57:13 <ibid> true
05:57:33 <ham[let]> i mean thats just like posets 
05:57:39 <ibid> of course, if you then show them an actual principia, they will flee screaming, even if they are trained mathematicians :)
05:57:40 <ham[let]> ontology
05:57:50 <shapr> ibid: of course :-)
05:57:51 <ibid> unless they specialize in historic notation :)
05:58:15 <ham[let]> if you want to add numbers to strings you have to do that within the type of the supreme of the two types
05:58:41 <ibid> ham[let]: in principia's type system, there is no such lease :)
05:58:44 <ecraven> ibid: how different is principia mathematica to current notation? how much of it is still valid/useful to know?
05:59:00 <ham[let]> i havent read pm
05:59:01 <ibid> ecraven: it's mostly only of historical interest
05:59:07 <ibid> i have read parts of it
05:59:13 <ham[let]> i just think myself what would be reasonable :)
05:59:26 <ecraven> ok, thanks
05:59:59 <ibid> ecraven: their formal system is quite unlike any of the currently favoured ones, and their notation is quite strange by current standards
06:00:24 <ibid> (though both were common still at least in 1940's)
06:01:12 <ham[let]> ibid are you a logician?
06:01:39 <ibid> ham[let]: depends on how you define that term :)
06:01:56 <ham[let]> ibid have you ever heared of heytin latices?
06:01:59 <ibid> ham[let]: i am training myself to become a 
06:02:05 <ham[let]> i hope thats the right spelling :)
06:02:11 <ibid> theoretical computer scientist
06:02:35 <ibid> and logic is quite necessary in my areas of interest
06:02:44 <ibid> but i'm not specializing on logic
06:02:56 <ham[let]> so you havent heared of him?
06:03:05 <ibid> i know lattices, but heytin does not ring a bell
06:03:08 <ham[let]> whats your special field?
06:03:23 <earthy> oeh!
06:03:35 * earthy nods to shae and sees a new way of specifying birthdays!
06:04:29 <ibid> ham[let]: theoretical computer science, series b, specifically formal methods and programming languages, and some OSS SE thrown in :)
06:04:43 <ham[let]> oss sw?
06:04:45 <ham[let]> we se
06:04:50 <ham[let]> er oss se
06:04:57 <ibid> open-source software engineering
06:05:01 <ham[let]> ah
06:05:49 <ham[let]> does someone of you know what fibering in CT is?
06:05:58 <ham[let]> mathworld seems to be down
06:06:07 <ham[let]> planetmath i mean
06:06:41 <ham[let]> ibid where are you from?
06:06:57 <ibid> ham[let]: jyväskylä, finland
06:06:58 <ibid> and you?
06:07:12 <ham[let]> osnabrueck germany
06:07:23 <ham[let]> thats a name i cant spell :)
06:08:11 <shapr> earthy: oh good point, another spiffy way to say how old I am!
06:08:53 * shapr checks to see if the SubGenius options are compiled into the debian version of ddate
06:09:07 <earthy> yikes. you're quite a bit older than I am... :)
06:09:27 <shapr> I like any man page that mentions an option and the docs are "try it and see"
06:10:47 <earthy> to be more exact, there are 479 RFC's between your and my birthdays. ;)
06:10:58 <shapr> heh
06:11:13 <shapr> when did you see that .signature? I haven't used it for awhile.
06:11:26 <Darius> ibid: Didn't no one worry about the set of all sets until after the Russel Paradox was discovered?
06:11:46 <ibid> Darius: basically, no
06:11:51 <earthy> you used it just now, shapr
06:12:19 * shapr looks
06:12:26 <earthy> Subject: parttime mensen gezocht
06:12:36 * earthy kills his mouse
06:12:36 <shapr> oh, so I did
06:12:38 <earthy> and the latency.
06:12:56 <Darius> ibid: No I'm wrong or no they didn't?
06:13:07 <ibid> Darius: Frege was the first one to build the theory so far that the question could be posed intelligently
06:13:08 * Darius probably shouldn't phrase questions as double negatives.
06:13:11 <ibid> they did not
06:13:59 <ibid> and Russell figured out that Frege's theory was inconsistent, by giving the example that is now known as Russell's paradox
06:14:37 <ibid> (Frege basically had an unrestricted predicate calculus, ie one where quantification over predicates was allowed without restrictions)
06:15:13 <shapr> I wish I knew how to spell merry christmas in croatian. I can only say it.
06:15:29 <ibid> (so, actually Russell's paradox was not originally about sets, though Russell provided an alternative formulation also which is based on Cantor's set notation)
06:15:44 <ecraven> jesi li hrvatsko?
06:15:55 <shapr> ecraven: you know croatian?
06:16:06 <ecraven> not a lot.. just trying to learn it
06:16:20 <ham[let]> is haskell.org down?
06:16:27 <shapr> I know a few words, but spelling them is beyond me
06:16:36 <ham[let]> nm
06:16:38 <shapr> ham[let]: works for me
06:17:06 <ham[let]> strange i tried it trice the forth time it worked
06:17:24 <shapr> hi CrewdenX 
06:17:46 <CrewdenX> shapr: hello
06:17:52 <shapr> how's code treating you?
06:19:58 <SyntaxNinja> does Igloo or anyone else know offhand whether the greencard in HE should work with the GHC in HE?
06:21:04 <CrewdenX> shapr: not doing much coding at the moment.
06:21:13 <shapr> CrewdenX: oh, other fun stuff?
06:21:36 <Igloo> I suspect it won't as it was compiled for GHC 6.0.1 or so, but I have no real facts to back that up with
06:22:05 <shapr> the greencard package that is 3.01-5 appears to work
06:22:15 <CrewdenX> shapr: filtering out my thousands of spam messages
06:22:29 <shapr> CrewdenX: tried one of the automated filters?
06:22:32 <shapr> saves lots of time
06:22:50 <SyntaxNinja> Igloo: OK. thanks.
06:23:08 * Igloo has never actually used GC, so isn't the best person to be asking really  :-)
06:23:32 <SyntaxNinja> do you know if it builds with ghc 6.2?
06:23:44 * SyntaxNinja doesn't use GC either ;)
06:23:50 <Igloo> No
06:23:53 <shapr> is there some way to figure out which apt-source a package is in?
06:24:12 <Igloo> apt-cache showpkg if it's in one of the ones you have
06:24:15 <CrewdenX> shapr: i'm writing one of my own.  
06:24:32 <shapr> CrewdenX: oh nifty, which lanuage? how does it work?
06:24:48 <SyntaxNinja> Igloo: you don't know, or it doesn't build?
06:25:02 <Igloo> I don't know
06:25:24 <CrewdenX> shapr: it works ok.  done in c++
06:25:25 <SyntaxNinja> ok
06:26:40 <shapr> SyntaxNinja: the description of the greencard package says it's the source package, and so should work with any H98
06:27:04 <shapr> whereas greencard-ghc6 depends on ghc6.0.1
06:27:27 <shapr> Igloo: neat, thanks
06:28:59 <SyntaxNinja> shapr: I'll get the package and build it
06:35:19 <shapr> hm, Hudak's Dance language looks applicable to machinima
06:35:48 <Darius> Dance language?
06:35:55 <ham[let]> heh dance lang?:)
06:35:58 <shapr> http://haskell.cs.yale.edu/yale/papers/dance-30-tr/index.html
06:36:06 <ham[let]> linke in that ps2 things :)?
06:36:24 <shapr> and it's based on Yampa
06:36:54 <Darius> Do they interpret it as commands for some of the FRP robots?
06:37:19 <shapr> yup
06:37:39 <Darius> Well, I guess I nailed that one on the head (looking at the page)
06:37:48 <shapr> :-)
06:37:51 <shapr> punny
06:39:08 <SyntaxNinja> Labanotation is cool.  It's used by modern dancers (at least) to notate their pieces.
06:40:21 <shapr> I've nearly finished the plot for my first machinimation, now I just need to figure out how to film it.
06:51:39 * Darius is entertained by the thought of GCing the framebuffer.
06:52:28 <shapr> is that greencard or garbage collect?
06:56:22 <Darius> garbage collect
07:14:56 * earthy needs to look into that!
07:15:56 * earthy could see a use for computerized dance notation stuff in teaching dances...
07:16:20 <earthy> yet another hobby project
07:21:32 <earthy> damn, that is one cool paper!
07:22:22 <Darius> The last sentence is cool.
07:23:31 * earthy nods
07:23:51 <earthy> the system lacks a thing or two though. :)
07:23:59 <earthy> try describing ballroom dancing with it.
07:25:27 <shapr> I'd like to use it to describe movements of multi-legged and multi-armed creatures.
07:26:29 <earthy> oh, I'd *merely* like to describe square dances with it
07:27:03 <earthy> (not the american kind though, the older european court-dance kind :))
07:28:15 <shapr> this would be great for machinima, you could describe a scene in a general way, and let the reactors use their own 'brain' to walk around in the scene, change their position, facing, etc
07:28:28 <SyntaxNinja> earthy: I haven't read the paper, but people use labanotation to describe things that are probably harder to notate than ballroom dancing.
07:28:43 <shapr> maybe reactress is a better name, so people won't think radioactively.
07:29:05 <earthy> syntaxninja: labanotation itself is flexible enough.
07:29:11 <earthy> the Dance stuff isn't.
07:29:48 <ham[let]> what is machinima?
07:30:18 <earthy> making movies with game engines.
07:30:35 <ham[let]> ah
07:30:44 <ham[let]> sounds like fun
07:30:52 <ham[let]> ever heared of the movies?
07:30:53 <shapr> or a cheap way to make 'real' movies.
07:31:26 <ham[let]> yeah our bosses aimed to sell the engine for that kind of stuff also :)
07:32:10 <ham[let]> shapr and you make movies of that kind?
07:32:14 <shapr> no
07:32:16 <shapr> but I'd like to
07:32:24 <ham[let]> yeah would be fun
07:32:35 <SyntaxNinja> earthy: I see.
07:32:41 <ham[let]> http://fear.sf.net
07:32:44 <shapr> I can write passable stories, and I can write code, but I don't know enough about 3D engines yet
07:33:11 <ham[let]> shapr use an existing one
07:33:20 <ham[let]> fear is a good way imho
07:33:43 <ham[let]> it abstracts the engine form the bots and it runs with q2 so far
07:33:52 <shapr> I don't know *anything* about 3D engines yet.
07:34:01 <ham[let]> you dont need to
07:34:10 <ham[let]> fear is an agent framework
07:34:31 <shapr> I've made some 3D models with wings3d, that was fun, and more difficult than I expected.
07:34:45 <ham[let]> wings3d?
07:34:54 <ham[let]> ever had a look at blender?
07:35:00 <shapr> yah, I was not impressed.
07:35:18 <shapr> last I looked, it doesn't have an undo function
07:35:32 <shapr> that immediately underwhelmed me.
07:35:43 <ham[let]> i think it has now though i gave it up to lookinto such programs
07:36:09 <shapr> also, the python scripting available in blender3d was badly integrated
07:36:21 <shapr> I figured I'd rather learn Erlang so I could hack on wings3d
07:36:31 <ham[let]> hm
07:36:41 <Darius> Blender has (had) a horribly unintuitive interface or at least a very steep learning curve for it.
07:36:41 <ham[let]> never heared of wings3d
07:36:49 <shapr> Darius: I totally agree
07:36:57 <shapr> the wings3d interface was much better
07:36:58 <ham[let]> then never use maya
07:37:00 <earthy> hmmm. I hadn't heard 'bout labanotation till now...
07:37:32 <ham[let]> shapr whats the url of that wings3d thing?
07:37:33 <earthy> `interesting stuff'
07:37:51 <earthy> even more for me to do in my copious free time.
07:38:44 <shapr> this channel is better than memepool.com
07:38:58 * earthy nods
07:39:11 <shapr> ham[let]: http://www.wings3d.com/
07:40:08 <shapr> I've heard that other modelers are better for high-poly-count models, but I have enough hardware.
07:42:02 * Darius wants to play with some F-Rep stuff.
07:42:17 <ham[let]> frep?
07:42:33 <ham[let]> shapr and they use erlang as a script lang?
07:42:44 <shapr> it's written in erlang
07:43:24 <Darius> http://cis.k.hosei.ac.jp/~F-rep/
07:43:25 <shapr> erlang is a bit more networky and procedural than Haskell, but it's still much functional, so I figure I could learn it.
07:43:42 <shapr> oooh, nifty
07:44:01 <SyntaxNinja> shapr: do I owe you an email or anything? What's the status on gforge?
07:44:29 <shapr> SyntaxNinja: hardware should be going online either today, or day after tomorrow.
07:44:50 <SyntaxNinja> cool!
07:45:02 <shapr> I've got gforge installed on the new box, but bind won't be configured till I get hold of the old box.
07:45:56 <shapr> I don't remember where we were with swapping of gforge emails
07:45:57 * shapr checks
07:46:34 <shapr> oh, I owe you an email
07:46:53 <shapr> I think
07:48:02 <SyntaxNinja> I feel like that's true :)
07:48:10 <SyntaxNinja> we have a new version of FGL that might go in there.
07:48:14 <shapr> spiffy
07:48:31 <shapr> it'd be nice to split haskell-libs into separate projects
08:03:42 <Igloo> Does gforge mean you're forced to use CVS or something, or will you still be using darcs?
08:04:11 <ecraven> darcs?
08:05:36 <SyntaxNinja> gforge would help us to use stuff like darcs, since it would be running on our own server
08:05:46 <SyntaxNinja> ecraven: darcs is a version control system written in Haskell.
08:11:33 <shapr> Igloo: atm, gforge is limited to CVS, but #gforge says it's not too tightly bound, though it would require some PHP hacking to change.
08:12:52 <shapr> I haven't looked at the source myself, so that's just hearsay
08:13:20 <shapr> I would really prefer to allow darcs on a Haskell community dev site
08:14:04 * shapr notices that the GHC back-end rewrite is starting
08:14:08 <shapr> go C-- !
08:14:09 <Lunar^_> ???
08:14:15 <Lunar^_> Tell me more ?
08:14:35 <shapr> look at the ghc-cvs list, with subject "New back end for GHC"
08:15:35 <Lunar^_> thanks
08:16:13 <Lunar^_> Will this remove the evil mangler ?
08:16:54 <shapr> don't know
08:17:26 <shapr> I wonder what the branch name is, it'd be neat to watch things happening
08:18:42 <Igloo> It'll be at the top of the commit messages
08:19:59 <shapr> ok
08:24:28 <Lunar^_> Is SPJ using Outlook ? :(
08:25:39 <Igloo> Him and SM both use something like that (and as such break threading all over the place  :-/)
08:26:15 <Lunar^_> :(((
08:26:27 <Lunar^_> buggy mail client, buffy mail browser :(
08:26:33 <Lunar^_> s/buffy/buggy
08:31:51 <shapr> yup
08:38:21 <SyntaxNinja> does anyone know of a good summary of different cell phone systems in different countries?
09:03:12 <shapr> I see all these articles where game developers are dying left and right, mostly because it requires at least 150 people to write a decent game nowadays, and I've heard on #icculus.org that game codebases are a complete nightmare, so I wonder if one or two heavy duty FP CS departments should get some Haskell grad students together and make money.
09:04:03 <shapr> 3D models, 2D artwork, and music seem amenable to contracting, but writing the game is the risky part
09:06:34 <`John> shapre, are you implying that Haskell with a few programmers can easily compete with 150 game programmers?
09:10:12 <ham[let]> bye see you laters
09:10:47 <ham[let]> shapr nah you dont need that many ppl to make a good game
09:11:44 * Igloo coughs in the direction of kb  :-)
09:11:50 <ham[let]> ive been working on two major titles black and white and gothic and both teams where rather small
09:11:56 <Igloo> Hmm, I should put the latest bits up somewhere. Maybe I'll do that tomorrow
09:15:31 <shapr> `John: I am implying that, yes. In fact, were I given a decent budget and much managerial freedom, I would happily hire up a bunch of people from this channel and write a spiffy game (more realistically, I would get out of the way of that bunch of people and organize up whatever they needed/wanted)
09:17:15 <shapr> imho, managers are really misnamed secretaries, their job should be to quickly solve organizational problems that the machine that is the employees encounters.
09:18:27 <shapr> `John: actually, I think any language with a few programmers and some heavy duty XP practices could easily compete with 150 game programmers.
09:18:48 * Igloo hopes shapr finds a decent budget  :-)
09:18:52 * shapr grins
09:18:58 <phubuh> so do I :-)
09:19:49 <Igloo> In fact, I'll even pledge 20p towards it!
09:19:52 * shapr laughs
09:22:02 <shapr> my managerial style is simple: reiterate the goal, ask people what resources we would need to get there quickly, acquire those resources, then run interference between the employees and anyone who wants to distract them from accomplishing the goal
09:22:29 <`John> shapr, well I think it's all about resue. I see alot of duplicate code, even in haskell that can be compressed furthur, but more important however is the means by which layers of software be applied, rather than just racking together imperative scripts with little pattern reuse.
09:22:38 <`John> s/resue/reuse
09:23:19 * `John prefers the older games.
09:23:37 <shapr> I think it's all about speed of change.
09:24:02 * `John has bought morrowind and found that walking in hours in any direction of a polygon world is quite boring.
09:24:26 <shapr> if your code is structured such that it's easy and safe to change it, then you can go wherever you need to go
09:26:08 <`John> shapr, well abstraction binds structure and reuse. and abstracting the game physics from the bare metal is preferable into a language which can be read by a near-layman, or layman programmer at the api usage level.
09:26:25 <`John> so that i agree with. :)
09:29:07 <shapr> I have noticed that there's a balance between well-factored and easy to understand. If there's zero duplicate code in your app, you usually have a whole bunch of tiny functions that aren't particularly high level. That profusion of functions can be hard to grasp, like trying to grasp sand.
09:29:29 <ejt> shapr: I'm trying darcs out, but having trouble with 'apply', it just sits there eating the command when given a small patch.  Does this work for you ?
09:29:40 <shapr> if instead you have fewer less-factored functions, it's a lot easier to just jump in and understand everything.
09:30:27 <phubuh> yeah
09:31:29 <shapr> ejt: I haven't used darcs apply, I've only used record, pull, and push
09:31:31 <phubuh> I think that if you just focus on making the code easy to understand, you get as much abstraction as you need automatically
09:32:17 <shapr> phubuh: I don't know which flavor is better, I guess it depends on the culture of developers on your app.
09:32:26 <`John> shapr, perhaps if the function are in the form verb-adj-object it would be easier. ie lisp-does-this-alot. standards in any one project is important whatever that may be.
09:33:35 <shapr> meaningful names is another XP principle, but I've noticed that once you get past verbObject, that is, as soon as you add adjective, then you often could refactor that out into a separate bit of code
09:34:01 <shapr> ejt: did you get an error? were the patches applied?
09:34:12 <ejt> no, it just sat there
09:34:51 <shapr> did you specify a patchfile on the command line? or did you just run "darcs apply" ?
09:35:19 <ejt> I tried specifying the file, and redirecting, same response
09:35:29 <ejt> nm, I'll read the code
09:35:47 <shapr> maybe adding --verbose will give some extra info?
09:36:11 <ejt> no
09:36:18 <`John> shapre, so that means you would have verObject's and adjectives in functions by themselves?
09:37:37 <shapr> `John: in Java, getBigObject and getSmallObject can be refactored into getObject().small() and getObject().big()
09:38:23 <`John> that means inheritance then, right?
09:38:44 <shapr> could be, object factory or whatever
09:41:29 <Darius> `John: why would that imply inheritance?
09:42:04 <`John> that also could stand for containment.
09:42:15 <shapr> yup, if you want
10:17:13 <keverets> perhaps a dumb question, but I want to compile a program I've made using Hugs using ghc 6.2 ... problem being that I used to just "import Word" and got the "word16ToInt" and similar functions.  When I try to load the file using ghci, I get a "Variable not in scope" for that function.  The Debian packages of GHC don't seem to have easily greppable source files, so how does one determine what module might include these functions?
10:18:50 <shapr> check the library index?
10:19:20 <shapr> I have haskell-doc installed, so I can look at file:///usr/share/doc/ghc6-doc/html/libraries/doc-index.html
10:21:23 <keverets> so, I look there, and look under "w" for "word" and find references to Data.Word, GHC.Exts, GHC.Word, Word (none of which seem to have any wordxxToxx functions)
10:21:37 <keverets> Does this mean that they are undefined?
10:22:29 <shapr> I looked at Word16, and it seems to be an instance of Integral among other things
10:22:49 <keverets> so am I to use "fromIntegral" or similar, then?
10:22:53 <shapr> so it's entirely possible that fromIntegral will work
10:23:45 <shapr> it's possible that "import Data.Word" and "fromIntegral" will work
10:23:55 <shapr> those might even work for Hugs
10:24:28 * shapr is hopeful
10:26:04 <shapr> keverets: does it work?
10:26:30 <keverets> shapr: still trying...
10:28:38 <keverets> hrm... I've made a mistake somewhere.
10:29:20 <keverets> it seems to work in general, though.
10:30:20 <shapr> that's good
10:30:46 <keverets> and hugs behaves the same as ghci
10:34:42 <keverets> ah... better.  showHex seems to behave differently (no longer prepends "0x" to the output)
10:41:22 <keverets> shapr: all good now.  Thanks!
10:43:44 <Darius> Well the Report implies that Hugs is wrong about showHex.
10:46:06 <keverets> It appears to be fixed in the 98.200311 version of hugs.
10:59:28 * SyntaxNinja is pleased w/ the arrow stuff in ghc6.2 so far
10:59:50 <SyntaxNinja> I stupidly tried to run ghc on a Filename.as instead of Filename.hs, though :)
11:00:04 <Igloo> What's a .as?
11:00:29 <SyntaxNinja> it's the input file for arrowp
11:01:09 <Darius> What are you doing with arrows SyntaxNinja?
11:01:10 <Igloo> Isn't that what GHC should now work with?
11:01:46 <Darius> That would make sense.
11:02:37 <SyntaxNinja> Igloo: well, if you think about it, if you add the arrow syntax to the GHC compiler, then it should treat it seamlessly as haskell.
11:02:43 <SyntaxNinja> so it works directly on .hs files
11:04:03 <Darius> Sure, but why not add support to automatically add -farrows if the input file is a .as.
11:04:19 <SyntaxNinja> Darius: I'm trying to apply Yampa stuff to the AI work of the company I work for (Aetion Technologies)
11:05:25 <SyntaxNinja> Darius: that seems like a reasonable idea.  In this case, it was looking for a module named FooBar, and couldn't find FooBar.{lhs,hs}, where there was actually FooBar.as.  So the thing that searches for files would have to look for .as files, and if they are there, turn on -farrows.
11:06:26 <Igloo> Right, OK, that makes sense
11:07:05 <Darius> (If .as didn't already exist it wouldn't be an issue)
11:08:01 <SyntaxNinja> I think it's best to get rid of .as as soon as possible.
11:08:18 * shapr agrees
11:08:53 <Darius> Yes, I've thought about that too, but it doesn't seem likely that arrow support will be in even Haskell 2 so arrowp may be around for quite a while.
11:10:14 <SyntaxNinja> interesting; why do you think arrows won't make it into haskell 2?
11:10:54 <Darius> There don't seem to be any movement by other implementations to directly support the syntax which would be very helpful to get something standardized.
11:11:25 <esap> I think the arrow classes need to work as well.
11:11:31 <esap> s/to/some/
11:12:07 <Darius> Yes, there's also the newness of arrows, but I doubt they'll be so new by the time Haskell 2 is being worked on.
11:12:15 <SyntaxNinja> it wouldn't surprise me at all if hugs suddenly got native support. has Ross Patterson said anything about it?
11:12:59 <Igloo> I don't remember him doing so
11:13:05 * esap is having trouble making things arrows, almost none of my candidates can support the interface.
11:13:25 <Darius> Another issue is applications.  Will they be used widely enough to bother standardizing the syntax (in the Haskell Report)?
11:14:07 <SyntaxNinja> yeah
11:14:26 <shapr> yay, 2.4.24 fixes another brk-style bug
11:14:36 <SyntaxNinja> well, the GHC people obviously like them well enough, and Ross seems to like them well enough.
11:15:20 <shapr> how long did it take for monads to become generally used?
11:15:22 <esap> I would say arrows as a concept are something that should really be standardized and made more use of. But it needs to stabilize first.
11:15:57 <Darius> The thing is arrows aren't as "necessary" as monads.
11:16:21 <shapr> I dunno, I've seen zillions of "how do I fix this space leak" messages on haskell@
11:16:32 <esap> darius: I disagree. They're not as necessary _if_ you use monads to do half of their task.
11:17:07 <shapr> of course, I don't really know if arrows would fix all those space leaks, so maybe I'm drawing the wrong conclusion.
11:17:52 <shapr> heck I barely understand monads, so I'll just go stand in a corner and write more Python code ;-)
11:17:54 <Darius> Arrows fixed the space-leaks (and time-leaks) in earlier FRP by keeping you from directly manipulating or even holding onto the signals.
11:18:57 <shapr> but arrows also let you examine the first class action before executing it, unlike monads. Wouldn't that help?
11:19:18 <Darius> esap: Using arrows where you could use monads would just be introducing unnecessary complexity.
11:20:37 <shapr> at least, that was how I understood the advantage arrows brought to parsers, you knew earlier whether the parser would succeed
11:20:42 <Darius> As has been illustrated, you don't need arrows to write many programs (they may be handy, but they aren't necessary) whereas you obviously need monads to write any Haskell program (due to main) and they are widely used as well.
11:20:46 <shapr> monads with introspection?
11:20:50 <Darius> (for other reasons)
11:21:04 <Darius> You could make IO an arrow, but that would just be gratuitous.
11:21:09 <shapr> that's true, I've heard horror stories about stream based IO
11:22:38 <esap> darius: I don't think arrows are more complex than monads. Arrows [the basic arrow class] is just a representation of composition (>>>) and raising the level of abstraction (first, second). Monads also represent two things (composition and failure).
11:22:54 <Darius> On another front, I personally like the fact that do is such a thin-syntactic sugar and imagine that that's helpful pedagogically.
11:23:37 * esap doesn't like 'arr'.
11:23:39 <Darius> esap: Using arrows where monads would work is more complex, not arrows in general.
11:23:41 <shapr> @arr
11:23:41 <lambdabot> Prelude.(!!): index too large
11:23:44 <shapr> !!
11:23:47 <shapr> what the heck??
11:23:52 <Darius> !! indeed!
11:23:57 * shapr snickers
11:23:58 <shapr> @arr
11:23:59 <lambdabot> I'd like to drop me anchor in her lagoon
11:24:05 <SyntaxNinja> index !! tooLarge
11:24:08 <Darius> fencepost error?
11:24:09 <shapr> welll, there's another bug.
11:24:23 <shapr> most likely
12:06:34 <SyntaxNinja> is anyone looking at the Dance paper?  I think there's a typo on page 10 which reads "non-sensual" instead of "nonsensical"
12:07:58 <ayrnieu> mmm.
12:09:02 <SyntaxNinja> ayrnieu: are you being sensual? ;)
12:09:43 <ayrnieu> Syntax - hey!  Please restrict yourself to non-sensual questions.
12:10:10 <SyntaxNinja> heh
12:10:28 <SyntaxNinja> I usually do, I think :)
12:34:43 <SyntaxNinja> that's nothing compared to section 5.2 "From Performance to Stimulation"
12:34:46 <SyntaxNinja> ;)
12:43:54 <Marvin--> ...
12:44:38 <Igloo> Yo, Marvin!
12:46:34 <Marvin--> evening
12:50:05 * Marvin-- struggles with his report
13:26:05 * shapr boings
13:27:24 <shapr> SyntaxNinja: I think you're right, it is a typo, might be purposeful though.
13:40:01 <blackdog> hardly a typo anymore, then, hm? I think we need a new word, like ha-ha-only-serious
14:36:56 <Riastradh> esap, here?
14:46:45 * esap is here.
15:07:12 * esap blinks.
15:10:58 <esap> Hmm... if I wanted to build arrows without referring to built-in lambda abstraction (as in 'arr'), what all would I need to inclued?
15:54:14 <Pseudonym> Local technical book shop is having an end-of-lease sale.  75% off, or for the basement items, all you can fit in a bag for $10.
15:54:17 <Pseudonym> Anyone want anything?
15:54:30 <Pseudonym> Just thought I'd offer.
15:54:44 <darius-> pseudonyn - http://accesscom.com/~darius/personal/to-read :-)
15:55:05 <Pseudonym> I have a copy of a thesis called "Axiomatic Domain Theorty in Categories of Partial Maps" which looks interesting.
15:55:23 <darius-> too heavy for me, i'm afraid
15:55:40 <earthy> pseudonym: what kind of stuff do they have?
15:55:43 <Pseudonym> Probably too heavy for me, too, but there was room in the bag.
15:55:52 <Pseudonym> earthy: Stuff that hasn't already been picked over.
15:56:04 <earthy> if it's *anything* connected to ALGOL 68 I'm interested.
15:56:20 <Pseudonym> earthy: No, but there was a book on components in Ada.
15:56:33 <earthy> nah, I'm not quite that braindead. :)
15:57:20 <earthy> (to wit: I'd be *amazed* if you'd actually managed to find anything. totally amazed)
15:57:47 <Pseudonym> Oh, the thing is, there's a lot of cool random stuff in there.
15:57:56 <Pseudonym> I picked up an anatomy textbook, for example.
15:58:04 <Smerdyakov> Pseudonym, great. Now you can donate it all to your local library.
15:58:15 <darius-> pseudonym - anything that looks like the stuff in my to-read list?
15:58:28 <Pseudonym> darius: Network outage.  I can't get to your to-read list atm.
15:58:38 <darius-> ah.  damn isp.
15:58:43 <Smerdyakov> darius, you have made a mistake in requiring computation to extract the entries of your lsit.
15:58:48 <Pseudonym> Also a copy of "PNG: The Definitive Guide", plus an interesting tome called "Production Design for Television".
15:58:49 * earthy has a textbook on anatomy and massage
15:59:07 <earthy> pseudonym: but I totally envy you for having such a cool bookshop
15:59:10 <darius-> smerdyakov - next time i'll send you a haskell program
15:59:40 <Smerdyakov> darius, or a nice table would do!
16:00:08 <Smerdyakov> earthy, oh yeah? You like to buy books and then have them sit around unused when other people you don't know would like to read them?
16:00:09 <darius-> i was too lazy - perhaps that will get forced later
16:00:21 <Pseudonym> earthy: Well it's only going to be there until tomorrow. :-)
16:01:21 <earthy> smerdyakov: I use the massage knowledge. :)
16:01:50 <earthy> the more knowledge the better, and anyone is welcome to come by and borrow
16:02:09 <Smerdyakov> Pseudonym, well? How do you feel about buying instead of borrowing books? What will be the eventual near-term fate of these books post-reading?
16:02:27 <Pseudonym> Smerdyakov: Near-term, I have a lot more than I can read.
16:02:34 <Pseudonym> Long term, I'll at least open them all.
16:02:35 <earthy> the thing is, the local library just doesn't cater to my tastes.
16:02:50 <Pseudonym> Working at a university helps.  Well-stocked library at the workplace.
16:02:54 <earthy> nor does the local university library... not really
16:03:10 <earthy> however, my employing university does have a reasonably cool library
16:03:13 <Smerdyakov> Pseudonym, what do you mean, "open them all"?
16:03:19 * darius- misses berkeley where the UC library was in walking distance
16:03:34 <Smerdyakov> darius-, <5 minutes for me. :)
16:03:37 <Pseudonym> I mean I'll check them all to see if they're worth reading or not.
16:03:49 <earthy> and had a drive to start a scientific library in Albania
16:03:51 <Smerdyakov> Pseudonym, but I asked what happens after you read them.
16:04:19 <Pseudonym> Smerdyakov: They'll probably sit on my shelf.  If they're worth referring to, I'll do that at periodic intervals.
16:04:20 * earthy tends to have friends that then read his books
16:04:40 <Pseudonym> Why, did you want some of them?
16:04:50 <earthy> and there's a sizeable portion of books that I just browse through every so often
16:04:56 <Pseudonym> They'll be in plain view of my cow-orkers, of course.
16:05:12 <Pseudonym> If they want to borrow them (or, in some cases, steal them) they're welcome.
16:05:24 <Smerdyakov> Pseudonym, you don't think it makes more sense to give them to a library?
16:05:43 <Pseudonym> In some cases it may.
16:05:55 <Pseudonym> If I can find a library which wants them.
16:06:04 <earthy> jeepers. I've been using FVWM for almost as long as it exists...
16:06:06 <Pseudonym> Is it worth my time to find such a library?
16:06:07 <Smerdyakov> Then it shall be your holy quest!! ;)
16:06:22 <Pseudonym> Or shall I just mail them to you and you can find a library?
16:06:38 <Smerdyakov> I'm not the one who bought them indiscriminately ;)
16:07:19 <Pseudonym> I sense a spin on the term "indiscriminately".
16:07:30 <Pseudonym> Fact is, if nobody buys them they're going to get pulped.
16:07:38 <Pseudonym> Anyone who cares has already passed over them.
16:07:45 <Smerdyakov> What happens to the pulp?
16:08:00 <Pseudonym> Probably gets recycled into packaging for the next round of unbought books.
16:08:26 <Pseudonym> It keeps someone in business, I'm sure.
16:08:45 <Smerdyakov> Then you can return them for pulping. :)
16:09:13 <Pseudonym> Return them to where?  The bookshop will be closed at some point tomorrow afternoon.
16:09:29 <Pseudonym> And Cambridge University Press doesn't exactly have a local office.
16:09:35 <earthy> pseudonym: what about paper recycling?
16:09:51 <Smerdyakov> BETTER HURRY! :D
16:09:53 <Pseudonym> earthy: Possibly.  I'm not sure if our local recyclers collect PhD dissertations.
16:10:03 <earthy> oooh, CUP's bookstore is one of the most dangerous once I've ever been inside of...
16:10:07 <Pseudonym> But that's a good suggestion.
16:10:09 <earthy> s/once/ones
16:10:47 <earthy> PhD dissertations... ah... it's great to find them in your mailbox
16:11:18 <earthy> especially if they're about the implementation of an ALGOL 68 compiler on the Control Data 6000 computer
16:11:26 * earthy still glows from that find earlier toda
16:11:27 <earthy> +y
16:11:30 <Pseudonym> earthy: Would you like "A Compositional Approach to Performance MOdelling" or "A Modular and Extensible Network Storage Architecture"?
16:11:47 <Pseudonym> earthy: Really?  Whose thesis is that?
16:12:13 <darius-> earthy - i used to have the algol 68 report but i sold it
16:12:19 <Riastradh> esap, still here?
16:12:24 <Pseudonym> darius: You found someone to buy it?
16:12:30 <darius-> yeah
16:12:34 <Pseudonym> Or were you giving them away at $10 a bag?
16:12:45 <darius-> the former.  yay for the internet.
16:12:50 <earthy> Pseudonym: *really*
16:12:54 <Pseudonym> Ah!  Yes, eBay!
16:12:56 <earthy> oh, I own a copy of the revised report.
16:13:02 <Pseudonym> That's what I could do with old books.
16:13:10 <darius-> pseudonym - unfortunately i did give away a bunch left over before moving
16:13:21 <darius-> hope they didn't get thrown in the trash or anything
16:13:30 <earthy> (found it at the dumpsite of the CWI library in Amsterdam... CWI being the old Mathematisch Centrum, where the Report was written. :))
16:13:48 <Pseudonym> Oh, the stuff that universities throw away is amazing, sometimes.
16:13:55 <earthy> absolutely.
16:14:01 <Pseudonym> There's a lot of knowledge not taught nowadays.
16:14:17 * earthy nods in full agreement
16:14:48 <earthy> and simply browsing through the dumpsters that the CWI uses tends to result in lots of really nice stuff
16:14:57 <earthy> (I've got half a shelf full of it. :))
16:15:28 <earthy> (and I've been picky! I had to schlepp it halfway across the country... pity the dumpsters aren't on my way to lunch any more... ;))
16:23:50 <Smerdyakov> darius-, is the resume on your web site out of date when it says you live in Berkeley?
16:38:48 <darius-> smerdyakov - oh, yes it is, thanks
16:39:28 <darius-> i just updated my quickcheck page - http://www.accesscom.com/~darius/software/clickcheck.html
16:52:48 <Smerdyakov> darius-, your fiction collection is too heavily SF. :P
16:54:11 * darius- apologizes :)
16:57:56 <Igloo> Have you sold any prints?
16:58:02 <darius-> afraid not
16:58:12 <Igloo> :-(
17:18:50 * Riastradh supposes it's probably very early in the morning in Finland right now.
17:19:28 <phubuh> Tue Jan  6 02:17:09 CET 2004
17:21:09 <Riastradh> ...and that deters only the Finn I wish to ask something of, of course.
17:22:14 <phubuh> esap?  he was here right after you asked for him
17:22:25 <Darius> If you had just asked you're question in the first place, he could've answered when he responded.
17:23:08 <Riastradh> Curse you, Darius, for not informing me of that arcane possibility in the first place.
17:23:45 <phubuh> with my friends, pinging before asking usually leads to a long sequence of "yes?" "hello?" messages with about 12 hours in between
17:23:46 <Pseudonym> Grrrr.  Networm still out.
17:26:04 <Pseudonym> FINALLY!
17:26:54 <Pseudonym> Some good stuff in this list, darius.
17:27:15 * Heffalump looks around hopefully for someone familiar with darcs
17:27:20 <Pseudonym> I just finished reading "Understanding Natural Language" for the third time.
17:27:28 <Pseudonym> Excellent book.
17:28:53 <Darius> Heffalump: If you poke shapr hard enough with a stick he might roll over.
17:29:25 * Heffalump pokes shapr hard with an extremely pointy stick
17:29:37 <Pseudonym> That sound you hear is shapr turning in his... whatever he's in.
17:29:41 <Riastradh> Great.  Then you'll have a dead shapr on his other side with blood spurting out all over you and a darcs problem still unsolved.
17:30:02 <Heffalump> finding kosmikus would be an alternative
17:41:29 <Smerdyakov> Or maybe you could find your inner child.
18:52:41 <shapr> Heffalump: eh?
18:53:29 <Pseudonym> It lives!
18:53:35 <shapr> about to sleep
18:53:44 <Pseudonym> Ah.  Well, it doesn't live much, then
18:55:22 <shapr> hey, GHC back-end rewrite has just started
18:55:34 <det> hrmm, I have a machine that runs it's own dns and mail server, Is there anyone here who would be willing to run a simple backup MX/DNS for it and I can do the same for them?
18:55:37 <shapr> Styx and Asm will be united into Cmm (C--)
18:55:49 <shapr> det: sounds interesting to me
18:56:09 <shapr> as soon as I get ScannedInAvian.org back up (wednesday?)
18:56:13 <det> ok!
18:56:36 <Pseudonym> det: I can do it now.
18:56:55 <Pseudonym> Gimme details.
18:56:57 <det> Pseudonym: that would be great! :)
19:25:36 <det> shapr: why has scannedinavian.org gone down ?
19:36:11 <Heffalump> oh, damn
19:36:13 <Heffalump> oh well
