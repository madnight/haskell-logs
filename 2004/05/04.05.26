02:39:17 <shapr> hi javaNewb, looking for Java info?
02:39:31 <javaNewb> no
02:39:34 <shapr> whew
02:39:38 <javaNewb> java info in #java
02:39:46 <shapr> yes, I totally agree
02:39:46 <javaNewb> :)
02:39:59 <shapr> looking for Haskell info?
02:40:18 <javaNewb> not right now...doing java assignment then haskell assignment :0
02:40:25 <shapr> ah, ok
02:42:35 <javaNewb> thanks anyway tho
02:42:37 <javaNewb> :)
02:42:47 <shapr> sure, ask me if you have any questions
03:00:31 <shapr> hi david
03:00:37 <droundy> hello.  :)
03:00:39 * shapr grins
03:02:17 * shapr wonders if anyone is awake
03:02:21 <Lunar^> Hi david
03:02:33 <Lukhas> i am
03:02:38 <Lunar^> I was wondering if you ever came here few days ago :)
03:02:46 <droundy> Hello.  This is my first time.
03:03:02 <JaffaCake> welcome :)
03:03:11 <Lunar^> :)
03:03:38 * JaffaCake passes round the tea and biscuits
03:03:58 <shapr> lambda shaped biscuits?
03:04:06 <JaffaCake> of course
03:04:10 <shapr> mmm
03:04:12 <Lukhas> :)
03:05:51 <shapr> I've been looking for good ways to do distributed computing with Haskell, is there anything more than GdH/GpH/hMPI/Eden?
03:06:42 <shapr> I'd like to be able to add new boxes at runtime, and migrate computation to them
03:07:27 <Lunar^> shapr: You would need that for what ?
03:07:28 <JaffaCake> shapr: nothing else that I know of
03:08:04 <shapr> Lunar^: writing mnesia in Haskell for one
03:08:51 <Lunar^> A distributed object system for hOp ? :)
03:09:04 <shapr> for Haskell in general
03:09:16 <shapr> and for hOp :-)
03:09:34 <shapr> EuroHaskell is getting closer!
03:09:40 <Lunar^> yeah ! :)
03:10:59 <shapr> hej spenatmannen 
03:11:08 <shapr> wassup?
03:50:34 * shapr bounces
03:50:56 * Lukhas cooks
03:53:32 <shapr> hi Loom_, wassup?
03:53:44 <shapr> Lukhas: escargots?
03:53:50 <Lukhas> hrm
03:54:04 <Lukhas> yeah, and i'm wearing a beret, drinking a glass of red wine :)
03:54:25 <earthy> sounds like the good life :P
03:54:29 <shapr> and I'm from Alabama, and barely able to read irc ;-)
03:56:04 <Loom_> hey there
03:56:18 <Loom_> what's happening?
03:56:47 <shapr> lots of code 
03:57:38 <Loom_> anything specific?
03:58:35 <shapr> well, there's a hOp release just under the horizon, so I'm interested in parsing tcp/ip packets with Haskell
03:59:17 <shapr> I'd like to turn lambdabot's new plugins into command-line programs that work with emacs' haskell-mode
04:00:25 <shapr> @index (>>>)
04:00:26 <lambdabot> bzzt
04:00:35 <shapr> @index arr
04:00:36 <lambdabot> Control.Arrow
04:00:47 <shapr> @index >>>
04:00:47 <lambdabot> Control.Arrow
04:00:52 <shapr> ah, that's confusing
04:01:02 <Loom> can't say I know haskell
04:01:22 <Loom> I know, what am I doing on a cahnnel called haskell?
04:01:41 <Loom> good question, I don't know.  So give me the sales pitch
04:01:57 <shapr> lemme guess, you had a class at unsw that taught Haskell?
04:02:02 <shapr> ah, the sales pitch
04:02:25 <shapr> Haskell is purely functional, and based on lambda calculus
04:02:44 <shapr> that gives you some handy features that allow for greater abstraction and code reuse in my experience
04:02:55 <Loom> nope, I got bored and thought I'd go back and visit IRC.  It's not like the old days.
04:03:14 <shapr> what were the old days like?
04:03:20 <Loom> Can it solve my queuing problems?
04:03:26 <shapr> probably
04:03:31 <Loom> I was younger then, now I'm older.
04:03:32 <shapr> what are your queuing problems?
04:03:54 <shapr> I see
04:04:01 <Loom> We didn't have spam back then, and no one had tried to make money selling crap to morons on the internet
04:04:40 <shapr> that must have been a loong time ago
04:04:55 <Loom> I've got a server process written in Magik (I'm not kidding, proprietry GIS language)
04:04:58 <shapr> I think I got spam before #haskell got started
04:05:15 <Loom> The thing appears to behave as a queue, no threads, no processes, nothing
04:05:33 <Loom> Spam has been around for a while
04:06:51 <Loom> Anyway, our server is running at about 80% CPU capacity on a quad processor box, the guys I work with want more hardware, I want to prove that a small reduction in service rate, will mean a large reduction in overall response time.
04:07:21 <shapr> if you don't have threads, why are you using SMP?
04:07:46 <shapr> what are you serving? maps?
04:07:57 <Loom> we can run multiple instances of the server process and use a load balancer to distribute work across them.
04:08:23 <Loom> as for why we actually got SMP to start with, Its a government  department, and they wanted it.
04:08:46 <shapr> ah, I see
04:10:26 <Loom> So, haskell, purely functional....  no objects?
04:10:37 <shapr> depends on what you mean by objects
04:10:59 <shapr> state is explicit, not kept in small chunks like OOP instances
04:11:26 <shapr> that's really handy for testing and reuse
04:11:59 <Loom> logical constructs which package data and the operations on that data into a series logical entities.
04:12:11 <shapr> ah, typeclasses do that
04:12:30 <shapr> for example, equality is defined in the Eq typeclass
04:12:36 <earthy> in a sense they do that
04:12:41 <earthy> in another, they don't
04:12:48 <shapr> in what sense don't they?
04:12:53 <Loom> Usually to the detriment of common sense, meaning the "programming" is moved towards the lowest common denominator, and a holistic understanding of a system is no longer necessary
04:13:01 <earthy> the code isn't packaged up with the data
04:13:15 <shapr> the code is packaged with the type
04:13:19 <shapr> hi cmoline
04:13:26 <shapr> looking for Haskell info?
04:13:26 <cmoline> hey shapr :)
04:13:30 <earthy> yes. which is a fine distinction
04:13:54 <cmoline> nah. just hanging
04:13:57 <shapr> ok
04:14:11 <Loom> technically objects don't package code with data, the provide a development framewoark in which code is only able to interact with certain data in certain ways
04:14:36 <shapr> in Haskell, you can define operations per-type
04:14:44 <shapr> the Eq typeclass defines equality
04:15:22 <Loom> would you say kaskell is strongly typed?
04:15:31 <Loom> sorry, haskell
04:15:32 <shapr> if you create an entirely new type, (say, mpg movie) you can define equality however you want
04:15:54 <shapr> you could define that a movie at different resolutions is equal, as long as its the same 'title'
04:16:04 <shapr> yes, strongly statically typed
04:16:15 <Loom> in C++ terms, operator overriding? or am I on the wrong track?
04:16:16 <shapr> but type inference gives it qualities of dynamically typed languages
04:16:50 <earthy> loom: right.
04:17:14 <earthy> but you meant to say `operator overloading', right?
04:17:16 <Loom> hmm, so what do you actually do with it?
04:17:29 <Loom> really, I'm not trolling.
04:17:36 <shapr> lambdabot is written in Haskell
04:17:36 <shapr> @yow
04:17:37 <lambdabot> I'm encased in the lining of a pure pork sausage!!
04:17:50 <shapr> there's a nice web server written in haskell
04:18:03 <shapr> the spiffiest Haskell compiler is written in haskell
04:18:16 <shapr> along with a source control system named darcs, etc etc
04:18:25 * earthy waves hi to jaffacake :P
04:18:36 * JaffaCake waves back
04:18:45 <shapr> I recently hacked up a web-based mailing list search in about 200 lines of code and four evenings
04:18:54 <earthy> some of the cooler things are stuff like pan, pancito and the like, and fran and yampa
04:19:06 <cmoline> shapr: does lambdabot have the address of the community report? maybe point Loom to that?
04:19:08 <earthy> fran == functional reactive animations
04:19:09 <shapr> HaskellDB is also very cool, statically typed SQL queries!
04:19:15 <shapr> cmoline: good idea
04:19:27 <shapr> earthy: ps, the report is great!
04:19:36 <earthy> you think so?
04:19:40 <shapr> yah, it's cool
04:19:46 * earthy finds the typography somewhat shoddy
04:19:48 <shapr> http://www.haskell.org/communities/
04:20:02 <Loom> looking at it now.
04:20:03 <shapr> I've only looked at the HTML version
04:20:24 <earthy> ah yes. that's worse. :P
04:20:38 <shapr> looked okay to me
04:20:49 <shapr> I found a bunch of stuff I'd never heard of before
04:20:58 <earthy> mostly. I dislike the list of events
04:21:22 <shapr> well, you can still fix it
04:21:35 * earthy nods
04:22:05 <shapr> I was happy to see the new stuff in Vienna, Portugal, and Brazil
04:22:09 * earthy grins
04:22:13 <earthy> yeah, that was good
04:22:20 <earthy> I love the eclipsefp stuff
04:23:30 <earthy> that really means Haskell is considered as a language people want to use, as opposed to an experimental platform
04:23:46 <shapr> which we all knew, and now the rest of the world is realizing it too
04:23:53 <shapr> ;-)
04:23:54 * earthy nods
04:24:32 <earthy> it's a bit of a pity the Clean Haskell compiler is bitrotting though
04:25:02 <shapr> yah, too many things fall through the cracks
04:25:06 <vegai> what's that?
04:25:30 <Loom> I found http://www.haskell.org/aboutHaskell.html useful
04:25:58 <earthy> a partial implementation of Haskell in Clean, using the Clean compiler to compile Haskell code with
04:26:11 <earthy> leveraging the strictness benefits that gives
04:26:13 <shapr> Loom: http://www.haskell.org/complex/why_does_haskell_matter.html
04:26:56 <shapr> do you know if the Vienna guys have any published OSS GIS Haskell sources?
04:26:58 <JaffaCake> earthy: if there are benefits to doing that, shoudn't we incorporate those benefits in the existing Haskell compilers?
04:27:46 <earthy> yes, we should. :)
04:28:02 * JaffaCake thought so :P
04:28:07 <shapr> maybe a simpler implementation of spec_eval ?
04:28:22 <JaffaCake> what's spec_eval?
04:28:28 <JaffaCake> oh, speculative
04:28:58 <JaffaCake> well, maybe... we didn't find a way to do it, though
04:29:03 <shapr> Robert Ennals stuff
04:29:17 <shapr> I think the cvs branch was named spec_eval
04:29:29 <JaffaCake> I want strict types, been thinking about it for a while
04:29:34 <shapr> ?
04:29:53 <JaffaCake> types that don't contain _|_
04:30:04 * shapr thinks about that
04:30:05 <Loom> from my incredibly brief experience with haskell, (ie 20 minutes) I'd sy it looks like a good language for getting stuff done, n\but not for figuring out what people want to do
04:30:19 <Loom> is that a reasonable statement.
04:30:34 <dons> hmm...
04:30:34 <shapr> what's the difference?
04:30:41 <Loom> massive
04:30:53 <Lukhas> shapr: unreadable source if it's not yours, i'd say
04:30:59 <JaffaCake> dons: hi :)
04:31:22 <shapr> oh, you mean like Perl's write-once-read-never facet
04:31:28 <Lukhas> :)
04:31:39 <earthy> that is simply untrue
04:31:47 <dons> JaffaCake: hey
04:31:47 <shapr> Perl can be like that
04:31:53 <earthy> Haskell is not
04:31:57 <shapr> yah, I agree
04:32:08 <JaffaCake> it can be, like any language
04:32:21 <shapr> it's harder than you might think in Haskell
04:32:32 <JaffaCake> just requires more imagination :)
04:32:35 <shapr> JaffaCake: you're going to enter the Succ Zero IOHCC and prove me wrong, right? ;-)
04:33:00 <earthy> what, like do ptr <- alloca;    etc... ? :)
04:33:05 <Lunar^> JaffaCake: would strict types allow us to write the RTS in Haskell ?
04:33:08 <JaffaCake> hmm, I might
04:33:13 <shapr> JaffaCake: yes please!!
04:33:24 <dons> shapr: www.cse.unsw.edu.au/~dons/pretty.html
04:33:39 <shapr> though I propose a special entry category for "authors of Haskell compilers"
04:33:39 <Lunar^> earthy: That literal C translation on haskell-cafe was so funny :)
04:33:44 <earthy> btw, shapr: Not Found
04:33:44 <earthy> The requested URL /iohcc was not found on this server.
04:33:45 <earthy> Apache/1.3.29 Server at www.scannedinavian.org Port 80
04:33:48 <shapr> ahem
04:33:50 <shapr> well
04:33:54 <shapr> earthy: yes, right away :-)
04:33:57 <JaffaCake> Lunar^: it would give you more control over allocation, but writing the RTS in Haskell is a different matter
04:34:03 <earthy> you *might* want to fix that now. :)
04:34:14 <Lukhas> RTS ?
04:34:18 <JaffaCake> runtime system
04:34:31 <Lukhas> thanks
04:34:37 <shapr> Loom: can you give more info on why you think Haskell is not for figuring out what people want to do?
04:34:52 <Lunar^> JaffaCake: I heard that folks at Galois did have translated the RTS in Haskell in order to proove it
04:34:54 <earthy> is there any reason for not being able to write it in Haskell as it is now?
04:35:01 <JaffaCake> Lunar^: yep
04:35:14 <JaffaCake> but you need another RTS to run it on, of course :)
04:35:22 <earthy> that's a matter of bootstrapping :P
04:35:27 <Lunar^> sure.. :) That would be nice to use it directly
04:36:10 <Lunar^> It's a bit unrelated, but the Sceduler code is such a mess right now, with 4 differents implementation inside the same .c
04:37:22 <Loom> shapr:  some rediculously large number of IT systems fail, because they don't meet user requirements.
04:37:43 <Loom> web based systems piss people off more than they deliver results
04:37:58 <Loom> IT projects spend more time on functionality than UI
04:38:35 <JaffaCake> Lunar^: I know, the scheduler is a nightmare
04:38:46 <JaffaCake> I ripped out the SMP stuff recently to make it easier to read
04:38:57 <shapr> what makes one language better than another for meeting user requirements?
04:39:06 <Loom> I'm thinking that something like haskell could turn that around if it was coupled with a decent UI event managemtn toolkit, JSF, .net webforms delphi, etc
04:39:22 <Lunar^> JaffaCake: When working on it for hOp, I had a removed anything not green thread related
04:39:23 <JaffaCake> I'd really like to kill the PAR/GRAN stuff too, or at least move it somewhere
04:39:40 <Lunar^> JaffaCake: sebc said that it was a bad idea, if we want to keep patch based release
04:40:04 <JaffaCake> it'll make merging harder sure
04:40:06 <Lunar^> #include "Schedule_gran.c" ?
04:40:18 <Lunar^> (that's awfull but...)
04:40:32 <JaffaCake> a lot of the code is shared though, it's not easy to see how to factorise it
04:40:54 <Lunar^> lambdas :)
04:41:16 * JaffaCake blows raspberries
04:41:22 <Loom> usable system start with business requirements, projects then cut back from there to deliver capabilites supported by a delivery framework.  The industry is moving towards a framework based development metaphor, if it doesn't meet the framework, it can't be deliverd
04:41:51 <JaffaCake> translation, anyone?
04:42:10 <shapr> I think frameworks come out of repeated refactoring
04:42:50 <shapr> imo, decent frameworks require that you refactor your framework through the development three or more separate projects that use that framework
04:43:11 <shapr> J2EE should shot, buried, and heavily irradiated.
04:44:50 <shapr> I'm a great fan of the XP practices, release once at the end of each short iteration, only change priorities between iterations, merciless refactoring, etc
04:45:01 <Loom> whilst I agree with you, J2EE  and .NET also encapsulate something like 90% of current IT solutions  development
04:45:09 <shapr> I am not a lemming.
04:45:24 <shapr> J2EE is the cliff of IT.
04:45:47 <JaffaCake> and what's .NET?
04:46:40 <shapr> due to the presence of listening microsoft employees whose work I respect, I won't say ;-)
04:46:47 <Loom> standardisation achieved wonders for IT util about '95, then it sporned the evil philosophies we follow today.
04:47:05 <earthy> that's a bunch of APIs thrown haphazardly onto MicroSoft's CLR to be earlier than the next bandwagon
04:47:25 <shapr> the goals of J2EE and .NET are laudable
04:47:36 <earthy> unfortunately, the APIs were bad when they were still called OLE
04:47:44 <Loom> I work in the 10% which can't be delivered by .NET and J2EE, but we end up having to deliver them as well, since answers don't always mean solutions
04:47:50 <earthy> and haven't really changed since, AFAICT. :)
04:49:16 <JaffaCake> and what's more, OLE and COM still exist and are widely used
04:49:38 <Loom> JAVA was designed as a cross platform client-side language.
04:49:43 <Loom> it still is :)
04:49:49 <shapr> not really
04:50:01 <shapr> it's turned into a server side language
04:50:18 <Loom> so why does it still need a VM?
04:50:39 <shapr> it doesn't, you've got gcj, TowerJ, etc
04:51:10 <shapr> the HotSpot vm has JIT poly-inline caching just for long-running processes like J2EE
04:52:17 <shapr> one of my favorite features in both Haskell and Python is that I can change the system to do what I want, even if the language designers thought it might be unsafe
04:53:42 <shapr> Loom: I think a web-publishing system for types would be useful
04:53:56 <shapr> something like "derive WebPublish"
04:54:29 <Loom> There are currentlt several implementaions of the java VM, and several matching javac's to go wih them, then the got through a JIT, why does this happen?  why not bit the bullet, and use a native compiler, based off the already standard API's and native code libraries?
04:55:11 <shapr> JITs are good for distributing 'binaries' that are portable
04:55:24 <shapr> Oberon had slim binaries way back when
04:55:36 <Loom> shapr: if you're talking about type definitions, then yes
04:55:53 <Loom> so did Centura
04:56:32 <shapr> unix has the perfect JIT ;-)
04:56:47 <shapr> tar xzf foo.tgz && make
04:57:02 <Loom> can haskell deliver an event driven rich widget set for a user interface?
04:57:14 <Loom> can it deliver that over HTTP
04:57:35 <earthy> I don't quite grasp that question
04:57:41 <shapr> if there were some sane way to do dynamic UI updates over http, sure
04:57:52 <shapr> but there's no standard right now
04:58:03 <earthy> loom, do you maybe want NeWS?
04:58:34 <Loom> what's NeWS?
04:58:39 <JaffaCake> tunnel X11 over HTTP
04:59:08 <earthy> loom: back in the day Sun did their own variant of Display PostScript
04:59:18 <shapr> JaffaCake: ha!
04:59:33 <earthy> that ran a PostScript interpreter at the client side, and ran multithreaded PostScript processes there
04:59:47 <Jon> JITs also can compile code with dynamic information, resulting in optimisations just not possible at traditional compile time
04:59:54 <earthy> a program could then send code to display widgets with to that interpreter
05:00:06 <earthy> and then have that code interact back over that same link to the main program
05:00:10 <Loom> can the X Server run in a web browser with no specific hardware or software requirement of the local PC?
05:00:18 <shapr> I think so
05:00:31 <earthy> Loom: there is such an X Server, yes.
05:00:32 <shapr> I think I've seen a java applet that does that
05:01:10 <shapr> I think this is a good idea: http://home.tiscali.be/stevevh/thesis/demo/guiLogon.htm
05:01:16 <earthy> see http://www.broadwayinfo.com/
05:01:24 <Loom> Problem is java applets fall under the non-standard category for some orgganisations
05:01:37 <shapr> it's for data-centric webapps, it automatically generates input/edit/view pages according to a spec
05:03:44 <shapr> I think mozilla's XUL and ms's XAML etc will end up being a single standard
05:03:48 <Loom> input/edit/view ends up falling under the HTTP request response,  It isn't interactive, unless every mouse move and keystroke becomes a request
05:04:20 <shapr> it is interactive if you run a continuous http request that sucks down javascript and executes it
05:04:27 <shapr> that's the best way to do that right now
05:04:57 <shapr> if you're using mozilla you can see the Mozilla Amazon Browser for a XUL demo: http://mab.mozdev.org/
05:05:28 <Loom> broadway doesn't run in  my opera
05:05:46 <shapr> Loom: the problem with real interactivity like you're talking about is that there's no good way to do it in a browser.
05:06:02 <shapr> the javascript trickle is the only way that works right now
05:06:43 <Loom> Absolutely.
05:07:00 <shapr> the w3c is working on a better way
05:07:01 <Loom> but most people don't need or want to be told how to do their job.
05:07:10 <shapr> ?
05:07:39 <Loom> the w3c was formed after http and html were defined, and still havent come up withh anything useful
05:08:08 <Loom> a request response metaphor dictates a workflow
05:09:21 <shapr> now we're hitting the rant horizon...
05:09:23 <Loom> that isn't always appropriate, we can predict variations in workflow and account for the in simple circumstances, but most of the time, you can't actually guess what someone will want to do next, or with the context/state that they current;y have.
05:09:43 <Loom> shapr: it isn't a rant, really.
05:10:09 <Loom> the request response metaphor was fine for static pages.
05:10:36 <shapr> yah, I agree we need something better
05:10:39 <Loom> CGI intrioduced dynamic pages of a submittes form, request-response works here too
05:11:19 <Loom> online ordering gave us state in our requests, add to order, browse some more kind of stuff
05:11:52 <Loom> but it is incredibly hard to allow the user to go further tnan that with the current technology
05:12:04 <shapr> what's further than that?
05:12:35 <Loom> webforms, JSF, Struts, etc all suffer from the same assumptuion, which is that the workflow is pre defined.
05:13:20 <Loom> once the workflow isn't defined, those UI metaphors break down.
05:13:26 <shapr> I'd just like to be able to update select lists of a currently displayed page.
05:13:59 <shapr> so, has this discussion convinced you to learn Haskell ;-)
05:14:17 <Loom> <sarcasm>what without refreshing the WHIOLE page</sarcasm>
05:14:45 <Cale> WH*IO*LE <-- sekrit hidden message!
05:14:52 * shapr grins
05:15:18 <Loom> nope, but it's convinced me that there are some people here who still think before they write
05:15:44 <Loom> it hasn't convinced me not to learn haskell
05:15:53 <shapr> yah, but all of those people are being silent right now ;-)
05:16:29 <Loom> Then I don't care what they think :)
05:17:40 <shapr> earthy: DPS was nifty
05:18:06 <shapr> NeXT used DPS, I wonder if MacOS X supports DPS
05:20:04 <dons> oops. the symbol "ghc_memcmp
05:20:10 <shapr> anyway, my current idea of what I'd like for "derive WebPublish" is the demo of Steve's thesis - http://home.tiscali.be/stevevh/
05:20:23 <dons> " is already in use by another well known piece of ghci-related software
05:21:57 <Loom> Seriously, I'm writing a paper on rich web user interfaces att the moment, it'as got a long way to go, but one of my premises, is that the mechanisms that deliver the capability don't necessarily coreespond at all with the mechanisms which implement the capability.
05:23:37 <Loom> meaning, A) frameworks for the delivery of business functionaltiy have nothing at all to do with making that funcftionality usable and B) I have quite definatley finished my bottle of wine.
05:24:46 <shapr> I'd like to read your paper, I'm interested in better web UIs myself.
05:25:03 <shapr> dons: what's that from?
05:25:28 <dons> hehe.
05:25:36 <dons> i was loading hs-plugins as a plugin
05:25:42 <dons> and it uses some C hooks from GHC
05:25:56 <dons> *and* it uses bits of the rts
05:26:03 <Loom> shapr, drop me an email, dww@optusnet.com.au, I expect to finish it in the next month or so.......   
05:26:16 <shapr> ok
05:28:00 <shapr> that was fun
05:32:34 <shapr> any better suggestions for web publishing with Haskell?
05:38:13 <shapr> hi sundeep
06:15:31 <shapr> hey Isaac
06:15:49 <SyntaxNinja> hey shapr!
06:18:23 <shapr> what's going on?
06:18:53 <SyntaxNinja> nomuch. just got into work.
06:19:07 <SyntaxNinja> tyring to decide if I should round my timesheet to 9:30 or 9:00
06:21:21 * JaffaCake has just finished reading the HC&A report
06:21:26 <JaffaCake> nice job, earthy
06:26:20 <earthy> thanks
06:50:51 <SyntaxNinja> we should buy earthy a round
06:51:10 <SyntaxNinja> or at least a drink
06:52:29 <kosmikus> I could symbolically do that for all of us ...
06:53:25 <SyntaxNinja> kosmikus: I have no idea what you mean, but it sounds like a good idea.
06:53:27 <shapr> Content-type: multipart/alcohol
06:53:55 <kosmikus> SyntaxNinja: well, *I* could buy earthy a drink, because I seem him every day
06:54:10 <SyntaxNinja> ahh. I was right. it is a good idea.
06:54:11 <kosmikus> s/seem/see
07:17:57 * earthy looks at kosmikus' low bookcase sees a brown paper bag with the logo of one of his favorite breweries
07:18:05 <earthy> +and, somewhere in the sentence
07:18:10 <earthy> pity the bag is empty though ;P
07:48:30 <shapr> hey lowks_, wassup?
08:47:25 <ksandstr> would someone more familiar with HaXml mind telling me how to output a XML document without HaXml's pretty-printer stomping on my whitespace?
08:48:58 <shapr> I thought HaXml only stomped on whitespace inside tags?
08:49:08 <shapr> since whitespace between tags is significant...
08:49:51 <ksandstr> likewise
08:50:53 <shapr> maybe it's an optional stomp?
08:51:04 <shapr> I haven't used HaXml recently, I don't remember
08:51:45 <ksandstr> maybe. though it seems like a strange thing to do by default
08:52:19 <shapr> most people that I've seen do use XML as if the whitespace doesn't matter
08:52:37 <shapr> which can really suck when you get a hand written XML doc from some clueless people, but you're just not sure....
08:54:18 <ksandstr> i suppose how whitespace is interpreted is really up to the processing application. still, it's a little difficult to do basic formatting in a <pre> tag when someone eats all the whitespace between tags...
08:55:23 <shapr> whitespace between tags is significant in XML, and should not be changed by the app
08:55:37 <shapr> whitespace inside the tag is not significant though
08:55:44 <shapr> that's how I've seen HaXml do pretty printing
08:55:53 <shapr> <foo
08:55:58 <shapr> >  <bar>
08:55:59 <shapr> like that
08:59:58 <ksandstr> hm. maybe i'm doing something wrong (a very definite possibility) after all. i'm getting "<b\n>Heading:</b\n><![CDATA[32173821]]>" for "<b>Heading:</b> <special-tag-here>", where my application is replacing the special tags with something pulled from a SQL database
09:00:48 <ksandstr> blaming the pretty-printer is kind of simple, being that i don't particularly care for its indent style :)
09:05:04 <chucky> your potions of healing boil and explode!
09:05:04 <chucky> you die..."
09:05:19 <chucky> agh damnit
09:05:26 <chucky> Wrong window. :)
09:06:12 <shapr> ksandstr: how are you replacing the tags?
09:06:53 <shapr> ksandstr: that CDATA[...] really looks a reference to some actual content, I think HaXml needs to resolve that reference somehow
09:07:11 <shapr> or maybe the reference gets resolved somewhere else
09:07:26 <shapr> but for now, it's unicycle time!
09:07:27 <ksandstr> shapr: that CDATA contains what it's supposed to
09:07:57 <ksandstr> a literal number, that is
09:08:43 <shapr> oh, then maybe HaXml is just showing it incorrectly
09:09:10 * kosmikus wonders to which window chucky wanted to write that ...
09:09:14 <shapr> maybe that CDATA thingy is HaXml 'escaping' the CDATA into an xml tag?
09:09:40 <shapr> do you have a unit test that just stuffs a number/string/other cdata in place of a tag?
09:09:48 <chucky> kosmikus: :) wanted to tell cbus about how badly my nethack games are going
09:10:34 <shapr> You polymorph the little dog behind you into a dragon, your dragon breathes fire on the monster in front of you. You die.
09:10:46 <ksandstr> looks to me like the CDATA behaviour is triggered when you specify that a Content.CString has "significant whitespace"
09:10:49 <kosmikus> shapr: I actually did that once
09:10:56 <shapr> yah, me too
09:11:16 <kosmikus> shapr: I think it was a golden naga, though, or something like that
09:12:06 <shapr> ksandstr: I guess it's saying that it can't figure out what the significant whitespace is for your CDATA?
09:12:34 <cbus> chucky: the rng is fucking stuff up for you+
09:12:36 <cbus> ? ;)
09:13:13 <chucky> absolutely. :)
09:14:11 <ksandstr> shapr: i don't think that's where the problem is, really. though maybe I should try without the significant whitespace flag
09:14:32 <shapr> ok, now I'm really off to unicycle
09:17:25 <ksandstr> kind of makes me wonder if it weren't a good idea for HaXml to also have a ugly-printer :)
09:18:44 <chucky> ksandstr: I dare you to implement one! :)
09:20:46 <ksandstr> or maybe just a non-pretty-printer would do...
10:11:51 <SamB> hawiki is down, and he is off to unicycle?
10:12:36 * shapr arrives in a puff of smoke
10:12:39 <shapr> SamB: you called?
10:12:56 * shapr examines the problem
10:12:57 <shapr> aha
10:13:05 <shapr> haskell.org now has new hardware
10:13:31 <shapr> it seems to be a completely new install that was just copied over
10:13:49 <shapr> this looks like a good chance to upgrade to the latest moin version
10:14:35 <SamB> so do they not have the same python version installed, or what exactly?
10:16:20 <shapr> I think moin isn't installed correctly right now
10:17:15 <shapr> yup, moinmoin isn't installed
10:19:21 * shapr downloads moin 1.2.1
10:22:47 <shapr> yow, lots more space on the new hardware
10:28:43 <shapr> hi gintas, how's code?
10:33:07 <gintas> shapr: too good; I'm trying to prepare for my exams and yet I find myself coding :)
10:33:33 <shapr> I understand that.
10:35:36 <shapr> SamB: tada!
10:36:15 <shapr> now to fix the plugins
10:45:52 <SyntaxNinja> is there any way in TH to  ask whether a particular type belongs to a particular typeclass?
10:52:54 <shapr> SamB: wiki is back!
10:53:03 <shapr> mostly
10:55:24 <bringert> SyntaxNinja: not afaik, there is very little type system stuff in TH
10:55:51 <bringert> disclaimer: I don't know what I'm talking about
10:56:27 <shapr> anybody know if Xilinx is ever going to release Lava as OSS?
10:56:42 <shapr> oh, pete might know
10:57:50 <SyntaxNinja> bringert: thanks :)
11:03:49 <bringert> shapr: gammie?
11:04:00 <shapr> yup
11:04:05 <shapr> I sent him an email
11:04:23 <bringert> I was trying to get him on irc
11:04:28 <shapr> did it work?
11:04:31 * shapr looks around
11:04:41 <bringert> he said he might try it out
11:04:43 <shapr> cool
11:05:07 <bringert> I'll bug him again tomorrow
11:05:25 <shapr> I should have mentioned #haskell in my email to him
11:05:32 * shapr proselytizes freely
11:07:10 <shapr> g'day stepcut, how's the barby?
11:07:42 <stepcut> cookin'
11:07:47 * shapr is planning a barbie soon
11:08:01 * stepcut is having bbq for lunch
11:08:07 <shapr> I just got some gourmet import Deep South barbeque sauce.
11:08:25 <shapr> I'm not sure how to reify barbeque :: Gourmet
11:08:29 <shapr> but I'm workin on it
11:08:45 <shapr> stepcut: oh, good choice
11:09:15 <stepcut> have you read the pointless haskell paper yet?
11:09:34 <shapr> no, but it looks like fun
11:09:49 <shapr> I'm fixing the wiki atm. (breaking it actually)
11:10:00 <stepcut> I started reading it, but I think I will skip to the end first :)
11:10:23 <stepcut> that's were all the good stuff usually is, who cares about all those damn laws and proofs ;p
11:12:00 * shapr grins
11:12:07 <shapr> ah, the wiki isn't ugly anymore
11:12:08 <shapr> whew
11:13:25 <shapr> huh, we have an InterWiki name.
11:13:40 <shapr> that's awesome
11:15:54 <bringert> shapr: what's that?
11:16:47 <shapr> it means that you can use HaWiki:BjornBringert in any MoinMoin wiki after a certain version to refer to your page on HaWiki
11:17:26 <bringert> cool
11:46:49 <pseiko> hi everybody
11:48:29 <SyntaxNinja> hi pseiko
11:49:01 <pseiko> *g* i was offline a pretty long time and have not hacked at haskell for nearly four months :-(
11:49:09 <pseiko> this is so frustrating
11:49:49 <pseiko> now i am back and ready to rumble
11:49:53 <pseiko> *g*
11:50:04 <SyntaxNinja> welcome back!
11:50:13 <SyntaxNinja> don't worry, Haskell won't fight back.
11:50:45 <pseiko> seems like most people here are just idle :-)
11:50:49 <Philippa_> though the type system might psych you a few times when you're doing things wrong ;-)
11:51:02 <pseiko> lol
11:51:19 <pseiko> i am just reading the community report to get up to date again
12:23:35 <bringert> pseiko: I'm not idle
12:23:38 <bringert> I promise
12:23:47 <bringert> I'll keep on talking
12:24:26 <bringert> pseiko has quit ("leaving")
12:24:28 <bringert> oh
12:24:56 <bringert> back to idling for me I guess
12:40:39 <SyntaxNinja> does anyone know offhand if someone has put HUnit into the hierarchical libraries yet?
12:54:02 <stepcut> bringert: any developments on that ugly bug when you have two tables with shared field names
12:54:56 <bringert> nope
12:55:08 <bringert> still don't know how to fix it
12:55:35 <bringert> except work around it by using a different (possibly fake) field for one of them
12:56:24 <shapr> SyntaxNinja: yes, I think so
12:58:43 <stepcut> bringert: it would be nice it there was someway to see the BUGS, TODO, and ChangeLog from the nightly build without having to download the source first
12:58:56 <stepcut> (or whatever those files are named)
12:59:02 <bringert> yes
12:59:48 <bringert> the HaskellDB project at chalmers is over now, and we are planning to move CVS, bug reporting etc. to sourceforge
13:00:09 <bringert> so the bugs would be in the SF bug reporting system
13:02:47 <bringert> in fact, I think I'll start adding the bugs to the SF system right now
13:03:27 <bringert> to tired to do anything that requires brain activity anyway
13:04:06 * shapr feels the same
13:04:44 <shapr> to get access to /dev/mem, do add myself to the kmem group?
13:05:55 * shapr tries it
13:20:18 <d3z> My /dev/mem only gives read permission to the kmem group.
13:24:48 <bringert> my memory doesn't give me read access at all today
13:25:24 <bringert> no write access either, I suspect
13:25:35 * earthy curses his iBook's having crashed hard
13:26:02 * bringert needs sleep
13:26:18 <stepcut> bringert: don't suppose you are considering switching to arch or darcs :p
13:30:28 * earthy needs a shower
13:30:32 <earthy> 'night bringert
13:31:02 <earthy> anyway, I have other stuff I can do tomorrow.
13:31:13 <kosmikus> what's happened with your iBook?
13:32:54 <earthy> snowcrash. rebooted. couple of minutes of work done, another snowcrash, black screen. power off, power on, startup sound, black screen. boot into open prom, reset-nvram, reset-all, bootup sound, black screen. try to reboot into open prom again, nothing but black screen
13:33:22 <kosmikus> grmlbrgx
13:33:27 * earthy nods
13:34:08 <earthy> then at 19:55 I call AppleCare. `Thank you for calling Apple. We're closed now. You can reach us from monday through friday from eight in the morning to eight in the evening.'
13:34:11 <earthy> and *thank*you*
13:34:19 <bringert> stepcut: I've just started playing with darcs, but we will probably go with SF CVS for now
13:34:26 <bringert> earthy: haha
13:34:35 <earthy> thank *god* I released HC&AR yesterday. :)
13:34:43 <earthy> all the work was on the laptop ;)
13:35:05 <bringert> but that can of course be changed later
13:35:13 <stepcut> bringert: no problem. Its actually pretty easy for me to track cvs projects using tla/arch
13:36:12 <kosmikus> earthy: you want to tell me that you didn't make backups of your work on HC&AR?
13:36:58 <SyntaxNinja> bringert: you should use darcs or tla :) it's way more 1337
13:38:12 <stepcut> SyntaxNinja: forget 1337, decentralized source control is just damn useful!
13:38:23 <earthy> kosmikus: I uploaded the darcs patches daily
13:38:28 <earthy> at the *very* least
13:38:35 <earthy> so haskell.org had a copy
13:39:03 <earthy> but that was flaky all monday and tuesday, so the work from friday evening till tuesday afternoon wasn't uploaded
13:39:18 <earthy> which was almost all the touching up
13:39:26 <bringert> stepcut: what's your sourceforge id? (I'm trying to put the id of whoever reported the bug in the report)
13:39:45 * stepcut ponders
13:39:55 <earthy> the current state is completely on haskell.org :)
13:39:59 <SyntaxNinja> stepcut word!
13:40:48 <earthy> (but for the report.{aux,toc,log} files, but those are generated anyway)
13:46:20 <bringert> lots of bugs in haskelldb: http://sourceforge.net/tracker/?group_id=101095&atid=629040
13:46:30 <bringert> hooray for bugs
13:46:56 <stepcut> bringert: i think my idea on source forge is toadx, but I forget the password. So, if I can't recover it, then I will use stepcut instead...
13:47:19 * stepcut has to 'use it', bbiab
13:47:34 <bringert> I just put you real name
13:48:05 <bringert> your
13:59:19 <SamB> shapr: what mean you by this "mostly"?
14:00:20 <SamB> does this have something to do with the way ShaeErisson comes out?
14:23:24 <shapr> the plugins aren't working yet
14:23:30 <shapr> hi Anvil_Vapre, interesting nickname
14:23:44 <Spark> distinctly goth :o
14:23:59 <Anvil_Vapre> not goth
14:24:13 <Anvil_Vapre> it's an Album title from the band Autechre
14:24:23 <shapr> ah
14:24:23 <Anvil_Vapre> ^Album^album
14:24:43 <shapr> would you like to learn Haskell?
14:24:44 <Anvil_Vapre> now that you mention it though, I guess it does sound a bit goth
14:24:53 <Anvil_Vapre> I would like to learn haskell
14:24:58 <shapr> excellent!
14:25:12 <shapr> do you have any questions?
14:25:16 <Anvil_Vapre> not yet
14:25:21 <shapr> or do you just want urls to tutorials?
14:25:24 <shapr> @learn
14:25:25 <lambdabot> http://www.haskell.org/learning.html
14:25:27 <Anvil_Vapre> I figured I'd just watch for a while
14:25:28 <shapr> there's good stuff there
14:25:31 * Spark will start learning on the 5th june
14:25:33 <Anvil_Vapre> ah, I saw that in the subject
14:25:45 <shapr> if you have FP experience with Lisp or Scheme, the Gentle Intro may be for you
14:25:58 <shapr> if not, the Yet Another Haskell Tutorial might be easier
14:25:58 <Anvil_Vapre> I'm working with ocaml right now
14:26:16 <shapr> Haskell is much like ocaml, but lazy and with typeclasses
14:26:41 <Anvil_Vapre> how do they compare in terms of performance?
14:26:51 <Lor> ...and many other typing features, and without many typing features of ocaml.
14:26:54 <Lor> ocaml is faster.
14:26:56 <shapr> ocaml is faster
14:27:03 <shapr> but Haskell is more expressive, imo
14:27:07 <chucky> ocaml has a better compiler
14:27:10 <Lor> haskell is _prettier_.
14:27:31 <Lor> chucky, um. That's rather a daring judgement.
14:28:01 <chucky> Lor: I'd say "ocaml is faster" is a more daring judgment
14:28:05 <stepcut> The ocaml compiler generates faster native code, but it's also solving a much simpiler problem :)
14:28:05 <Anvil_Vapre> are there any other functional languages as fast as ocaml?
14:28:26 <Lor> Anvil_Vapre, note that languages proper aren't fast or slow, but implementations are.
14:28:27 <Riastradh> _Languages_ can't be measured efficiency-wise.
14:28:37 <Riastradh> A pox upon you, Lor, for beating me to it.
14:29:01 <Lor> However, the fastest (only) implementation of ocaml is (generally, for most purposes) faster than the fastest implementation of Haskell.
14:29:13 <Anvil_Vapre> I realise that, however, some languages make it very hard to write efficient code, others make it easy - ocaml tends to make it easy
14:29:15 <Riastradh> Stalin, a Scheme compiler, is probably the most highly optimizing functional language compiler you'll find.
14:29:29 <shapr> Haskell makes it easier to write code
14:29:33 <shapr> in my experience
14:29:40 <Riastradh> MLton, an SML compiler, is right up there, too.
14:29:41 <Anvil_Vapre> how so
14:29:42 <Anvil_Vapre> ?
14:30:17 <shapr> I believe that it's more expressive
14:30:18 <stepcut> having written a bunch of code in ocaml and haskell, I would have to say that I prefer haskell
14:30:27 <shapr> check out typeclasses for example
14:30:31 <SamB> Riastradh: there are some languages which are just harder to do efficiently. perhaps even impossible, but I'll leave that to researchers
14:31:44 <Lor> With whole-program analysis you can do just about anything.
14:33:19 <shapr> Anvil_Vapre: Haskell is worth trying
14:34:06 <Anvil_Vapre> I intend to try it
14:34:15 <Anvil_Vapre> I'm tasting as many languages as I can
14:35:24 <shapr> good idea
14:35:29 <shapr> have you tried Self or Joy?
14:36:46 <chucky> shapr: What's that? Sounds like my friend's theoretical language for generating porn from XML-based descriptions. :)
14:37:02 <shapr> ha
14:37:09 <shapr> SelfJoy
14:37:24 <Anvil_Vapre> no, I havan't tried either of those
14:37:34 <shapr> Self is a project by Sun Research
14:37:42 <shapr> Joy is a project by Manfred von Thun
14:37:55 <Lor> Is there a reasonable implementation of self?
14:37:58 <shapr> the Self motto is "Like Smalltalk, only moreso"
14:38:01 <shapr> there is
14:38:01 <Lor> sun's packages are not reasonable.
14:38:06 <shapr> that's true
14:38:15 <stepcut> and then there's slate
14:38:16 <shapr> there's a working linux implementation at gliebe.de
14:38:34 <shapr> water is one of the few people I can't stand to be on the irc channel with
14:38:59 <shapr> slate looks interesting feature-wise
14:39:09 <Anvil_Vapre> my research is mostly in areas where efficiency and parallelism are really important...
14:39:27 <shapr> have you investigated data parallelism?
14:39:41 <Anvil_Vapre> define data parallelism
14:39:46 <Lor> Hm, is that sun license dfsg-compliant?
14:39:51 <shapr> Anvil_Vapre: http://www.cse.unsw.edu.au/~chak/nepal/
14:40:09 <shapr> Lor: I don't think the latest release runs on Linux as-is
14:40:26 <shapr> but it claims to be easier to port
14:40:27 <Anvil_Vapre> hrm, no I hadn't heard of nebal
14:40:29 <Anvil_Vapre> ^nepal
14:41:21 <Anvil_Vapre> woa, nepal looks cool
14:41:30 <shapr> Joy is fun because it's a functional concatenative stack-based language
14:41:59 <shapr> make Perl look verbose
14:42:13 <Anvil_Vapre> hrm
14:42:20 <shapr> DEFINE approxEqual == 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .
14:42:39 <shapr> hi timbod
14:42:43 <shapr> looking for Haskell info?
14:44:06 <shapr> Anvil_Vapre: another good reason to learn Haskell is so you get monads and arrows
14:44:18 <timbod> hi shapir - no not exactly. I'm already a user.
14:44:30 <shapr> cool, do you have Haskell questions?
14:44:35 <Anvil_Vapre> right now I'm working on a generic code transformation system that evovles sets of program transformations according to user defined fitness tests... I wrote the prototype in perl, and I'm just starting to work on a more complete ocaml version - would you recommend another language over ocaml for doing this? (yes, it's for class)
14:44:58 <timbod> other than why does ocaml not have type classes, no.
14:44:59 <Smerdyakov> Anvil_Vapre, no
14:45:09 <Anvil_Vapre> ah
14:45:10 <timbod> (partially in jest)
14:45:11 <Anvil_Vapre> why not?
14:45:19 <shapr> yah, typeclasses and generics would be handy for that
14:45:38 <Smerdyakov> OCaml is good, that's why. :P
14:46:05 <shapr> how do you evolve the transformations?
14:46:07 <Anvil_Vapre> yeah, but performance is important until I can get access to our school's IBM z/990
14:46:24 <Smerdyakov> OCaml is a great choice for performance.
14:46:35 <Smerdyakov> Very little lost over using C with gcc.
14:46:38 <shapr> Haskell is also a great choice for performance
14:46:44 <Anvil_Vapre> each potential transformation system is stored as a tree of regular expressions
14:47:06 <Smerdyakov> shapr, really? I thought there were no Haskell compilers producing output competitive with gcc in speed.
14:47:15 <Anvil_Vapre> each node defines a constraint precondition, and the a replace function
14:47:29 <shapr> Smerdyakov: lovely details on the HOpenGL list
14:47:42 <Smerdyakov> Well, I'll take your word for it. :)
14:48:15 <Anvil_Vapre> transformations are evolved by doing crossover with the branches
14:48:17 <Lor> How far is optimistic evaluation nowadays?
14:48:24 <Hipo> OpenGL is quite bad thing to compare with because most of the things isn't done with language itself.
14:48:28 <Anvil_Vapre> + insertion/deletion/mutation
14:48:28 <shapr> how do you define the fitness tests?
14:48:40 <Anvil_Vapre> that's defined by the user.
14:49:07 <Anvil_Vapre> my system does the transfomation and evolution, the user defines how a transformation is scored
14:49:11 <Anvil_Vapre> with tests
14:49:13 <shapr> if you were already using Haskell, I'd suggest you steal the QuickCheck conditionals
14:49:41 <Anvil_Vapre> ^ with tests on the transformed code
14:51:01 * SyntaxNinja home
14:51:03 <SyntaxNinja> peace all
14:51:09 <shapr> you may be interested in QuickCheck, http://www.cs.chalmers.se/~rjmh/QuickCheck/
14:51:14 <shapr> g'night SyntaxNinja 
14:51:27 <shapr> timbod: so what do you do with Haskell?
14:52:19 <Anvil_Vapre> quick check looks interesting, but I think it's too constraining for my purposes
14:52:53 <SamB> constraining?
14:53:04 <Anvil_Vapre> yeah
14:53:35 <SamB> what about QuickCheck do you see as constraining?
14:53:56 <Anvil_Vapre> it only works with Haskell programs
14:54:11 <Anvil_Vapre> my system works with any ascii-based language
14:54:22 <SamB> okay...
14:54:28 <Anvil_Vapre> rather, any language that can be written with ascii characters
14:54:57 <SamB> that sounds rather non-optimal
14:55:05 <SamB> does it work with befunge?
14:55:08 <shapr> you can write custom generators with QuickCheck
14:56:32 <SamB> how about weird?
14:56:40 <Anvil_Vapre> the part of my system that could use quickcheck would be set up by the user anyway, so it doesn't really apply to me
14:56:48 <shapr> yes, there is that
14:57:46 <Anvil_Vapre> I've never heard of befunge or weird, but as long as the code is stored as plaintext, I can evolve transformations
14:57:53 <Anvil_Vapre> for it
14:58:22 <monotonom> I am thinking it is easier to transform a parse tree.
14:58:31 <SamB> Anvil_Vapre: both of those have two-dimensional control flow!
14:58:39 <monotonom> But hey, whatever that works.
14:59:07 <Anvil_Vapre> SamB, why should that matter?
14:59:12 <SamB> monotonom: hehe, that wouldn't work for befunge or weird!
15:00:01 <Anvil_Vapre> monotom, it _would_ be easier to transform a parse tree, but you have to predefine the language before you can do that..
15:00:14 <Anvil_Vapre> I might at a feature to read in a BNF grammer so I can do that
15:00:28 <Anvil_Vapre> right now I'm going for rabid eleganc
15:00:30 <Anvil_Vapre> e
15:00:49 <SamB> Anvil_Vapre: well, how do you match 2d code against a regex?
15:01:01 <Anvil_Vapre> what do you mean by 2d code?
15:01:03 <monotonom> what is befunge or weird?
15:01:42 <timbod> shapir - I work with C++/python, tinker with haskell. I will enter the icfp contest this year.
15:01:43 <SamB> the code is two-dimensional, and the instruction pointer can travel in multiple directions
15:01:56 <Anvil_Vapre> that sounds...odd
15:02:50 <SamB> Anvil_Vapre: well, yeah ;-)
15:02:55 <Anvil_Vapre> were they created just to be weird like BrainFuck or Java2000?
15:03:10 <SamB> hmm, never heard of Java2000
15:03:13 <Anvil_Vapre> it's a 
15:03:26 <Anvil_Vapre> 'probalistic' language
15:03:36 <Anvil_Vapre> 2 + 2 is _sometimes_ 4
15:03:55 <Spark> the alphabet becomes the cartesian product of the original alphabet with itself
15:03:58 <SamB> is it based on qm?
15:04:05 <Spark> something like that anyway
15:04:55 <Anvil_Vapre> I think they mention in the faq 'it's easy to write a hello world program in Java2K that prints 'hello world' 20% of the time, but it's much harder to write a hello world program that prints 'hello world' 99% of the time'
15:05:40 <Anvil_Vapre> are befunge or weird actually used for anything?
15:06:05 <Marvin--> proof of concept against people who claim they can do something "for all languages"? ;)
15:08:02 <Anvil_Vapre> hrmm... I don't see why my system _woudn't_ work for a language just because of an insane syntax
15:08:37 <Anvil_Vapre> it may take a long time to get something useful...but it should _eventually_
15:09:58 <monotonom> "for all languages" is a bogus quantification anyway. :)
15:10:31 <Marvin--> monotonom: be nice :)
15:10:34 <Anvil_Vapre> and...jesus, looking at some befunge code....that could be a very very long time
15:10:39 <Anvil_Vapre> it's a valid criticism
15:10:53 <Anvil_Vapre> but, note, I never said 'all languages'
15:10:57 <SamB> Anvil_Vapre: all you need is 2d regexes
15:11:13 <monotonom> I personally would just claim "for all Turing-decidable languages" :)
15:11:25 <SamB> you said "any ASCII-based"
15:11:37 <Anvil_Vapre> right
15:11:40 <monotonom> Yeah that's worst that "any" :D
15:11:47 <monotonom> err I can't type.
15:12:03 <monotonom> I need a type-safe IRC program.
15:12:09 <Anvil_Vapre> well, no reason why it wouldn't work with a non-ascii character set, that's just a current limitation
15:12:19 <SamB> typo-safe, you mean
15:12:23 <Anvil_Vapre> lol
15:12:41 <Marvin--> SamB: that's what he wrote, but he made a typo :-)
15:12:45 <SamB> hack erc to integrate ispell for that
15:33:24 <stepcut> mmmmm, as-you-type spellchecking for emacs
15:37:20 <SamB> stepcut: as-you-try-to-hit-enter, even
15:44:02 <cgibbard> as-you-typo spellchecking
15:44:39 <stepcut> haha
15:44:46 <stepcut> sounds like a trademark
15:45:56 <kosmikus> can't you just use flyspell minor mode with erc?
16:06:38 <bringert> and in conclusion:
16:06:41 <bringert> @eurohaskell
16:06:42 <lambdabot> less talks, more code!
16:06:42 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
16:06:42 <lambdabot> EuroHaskell - Haskell Hackfest - June 10-12 - Gothenburg, Sweden
16:07:01 <bringert> Spark: get your tickets yet?
16:27:18 <bringert> EU citizens: fight software patents
16:27:35 <bringert> talk to your European Parliament Members
16:28:21 <bringert> quick poll: EU council decision on software patents, good or bad?
16:29:02 <bringert> sorry, should probably keep politics out of here
16:29:34 <vegai> there probably is no such thing as a good decision there ;/
16:30:28 <bringert> I kinda liked the EU parliament decision from this fall
16:44:56 <Spark> bringert: nope :|
16:45:03 <Spark> i do intend to come though
16:45:11 <Spark> i may bring a friend
16:45:30 <Spark> which airline did you recommend again?
16:46:07 <bringert> does he/she know any haskell?
16:46:14 <bringert> or just coming for the beer?
16:46:43 <bringert> ryanair, but I don't know if I neccessarily recommend them, there are others too
16:47:21 <bringert> they had cheap tickets when I looked, but that was quite a while ago
16:48:46 <bringert> hmm, seems quite a bit more expensive now
16:54:30 <bringert> SAS actually looks like they might be cheaper with the taxes and all, now that the really cheap ryanair tickets are gone
16:57:49 <Spark> we intend to learn haskell in the week preceding :)
16:58:17 <bringert> do you know any haskell so far?
16:59:16 <Spark> nope :)
16:59:28 <Spark> my exams finish on the 4th
16:59:43 <Spark> so after a brief period of drunken activity, i'll start coding stuff and see what happens
16:59:49 <Spark> probably start hammering the chan with questions too :)
17:00:35 <bringert> you might want to start looking for tickets really soon
17:00:46 <bringert> unless you want to try to fly last minute
17:00:54 <wagle> is there an isabelle guru in the house?  the Isabelle/isar proof general tutorial wants me to do theorem "A & B -> B & A"; proof; assume "A & B"; then obtain B and A ..;
17:00:56 <bringert> they are starting to get expensive
17:01:09 <wagle> and wants to follow that with a qed
17:01:12 <Spark> what are the precise dates?
17:01:20 <ayrnieu> aye, I have a four-day weekend coming up.  Finally some time to work on my protocol silliness that nobody else wanted to take up.
17:01:31 <wagle> but isabelle complains that the proof is not complete.  anyone know what is wrong?
17:01:38 <bringert> @eurohaskell
17:01:39 <lambdabot> less talks, more code!
17:01:39 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
17:01:39 <lambdabot> EuroHaskell - Haskell Hackfest - June 10-12 - Gothenburg, Sweden
17:02:07 <Spark> Wed, 09 Jun 04
17:02:08 <Spark>        Flight   FR892
17:02:17 <Spark> Sun, 13 Jun 04
17:02:17 <Spark>        Flight   FR8927 	  	
17:02:18 <Spark> 13:10 	
17:02:28 <Spark> why cant people design sites that are easy to paste from :|
17:02:32 <Spark> anyway thats 18 quid
17:02:38 <Spark> oops 20 quid
17:02:51 <bringert> where did you find that?
17:03:10 <Spark> ryanair
17:03:42 <bringert> hmm, i could only find 60-80 GBP each way
17:04:27 <Spark> :)
17:04:38 <Spark> it seems to be highly dependent on the precise days of arrival/departure
17:04:48 <bringert> I tried the same dates
17:04:59 <Spark> maybe ive got the wrong city
17:05:10 <Spark> lol
17:05:12 <Spark> loire valley
17:05:26 <bringert> hehe, good thing you didn't buy them
17:05:40 <bringert> otoh, I guess that's a pretty nice place too
17:06:57 <Spark> it seems to randomise the city each time you click back
17:07:29 <bringert> why doesn't virgin fly from the UK?
17:07:36 <bringert> isn't virgin british?
17:08:03 <bringert> there is a ferry btw...
17:08:13 <bringert> takes 24 hours or something
17:08:40 <Spark> hmm thats interesting
17:08:50 <bringert> I thought there was anyway
17:08:52 <Spark> any idea how much it costs?
17:08:54 <Spark> ah right
17:09:06 <bringert> I found one from newcastle
17:09:18 <bringert> I know there at least used to be one from harwich
17:10:33 <bringert> newcastle one is http://www.dfdsseaways.co.uk/
17:11:28 <Spark> how many sek to the pound? :)
17:11:55 <bringert> 13,48 SEK
17:13:04 <bringert> hmm googling for ferry gothenburg harwich just gives me a bunch of hits from the 90's
17:13:28 <bringert> that route is probably gone
17:14:12 <bringert> if you want to visit more of scandinavia, you could fly to Copenhagen and take the train
17:15:29 <Spark> still scared of not being able to communicate with anyone / read signs / maps / etc :)
17:15:37 <bringert> not a problem
17:15:45 <bringert> almost everyone speaks english
17:15:48 <Spark> heh ok
17:16:16 <bringert> signs might not be in english, but on airports / train stations they often are
17:17:31 <bringert> or you could fly to stockholm, spend a day or so there and take the train here
17:17:43 <bringert> the high speed train takes 3 hours
17:18:27 <Spark> all the sas flights seem to be 2770 sek
17:18:37 <Spark> and all the ryanair ones about 80 quid
17:18:56 <Spark> and the ferry service site is down :)
17:19:05 <bringert> 80 GBP is for one-way, right?
17:19:17 <bringert> and 2200 SEK for return?
17:19:52 <Igloo> I think sites like expedia.co.uk are meant to find cheapest flights
17:19:55 <Spark> yeah
17:21:13 <bringert> http://www.opodo.co.uk/ finds GBP 139.30 ** Total incl. taxes return
17:21:25 <bringert> expedia found GBP 158
17:21:30 <bringert> both with SAS :)
17:21:35 <Spark> heh
17:21:43 <Igloo> Hey, I never said they were good at it  :-)
17:21:52 <Spark> why is it all these sites have such primitive usability? :)
17:22:00 <bringert> whoa, departure from gothenburg at 06.40
17:22:04 <Spark> heh
17:22:10 <Spark> up-all-night job
17:22:15 <bringert> true
17:22:18 <Spark> heh that would be wicked
17:22:21 <Spark> in a bar until 4am
17:22:23 <Spark> them go to the airport
17:22:32 <bringert> bars close at 4 or 5 so you should be fine
17:24:07 <bringert> weird, http://www.ebookers.com/ says the same flight is GBP 111
17:25:00 <bringert> GBP 113 actually
17:25:11 <Spark> thats not too bad
17:25:25 <bringert> how can they get different rates for the same flight with the same airline on the same date
17:25:35 <bringert> the airlines are strange
17:25:42 <Igloo> At this rate they'll be paying you to fly by 2am
17:25:50 <bringert> :)
17:25:58 <Spark> that would be perfect :)
17:26:21 <bringert> I think some airline did that
17:26:26 <bringert> as a promotion
17:26:37 <Igloo> I might even be able to make it myself then  :-)
17:27:34 <bringert> Igloo: all right! you thinking of coming?
17:28:25 <Igloo> Nah, too broke  :-(
17:28:30 <bringert> :(
17:28:38 <bringert> off to bed
17:28:45 <bringert> good night
17:28:50 <Igloo> Also I think I'm already doing two other things now if it's around the ICFP contest time
17:28:53 <Igloo> g'night
17:34:37 <Spark> what is polylogarithmic time?
17:34:48 <Spark> O(log(polynomial(n)) ?
17:35:01 <Spark> or maybe O(log(n) * polynomial(n))
17:35:24 <Pseudonym> I think it's O(polynomial(log n))
17:35:56 <Pseudonym> For example, prime testing is (assuming the Sophie-Germaine conjecture is true) O((log n)^6)
17:36:01 <Pseudonym> where n is the number being tested.
17:36:22 <Spark> ah right
17:45:50 * wagle uses the google and derives http://www.nist.gov/dads/HTML/polylogarith.html
20:09:08 <SamB> shapr: hmm. I find it interesting how there is all this different stuff jammed into this one repository (hlibs)
20:10:59 <SamB> it would be nice if there was a file explaining that
23:30:26 <desrt> dear lord
23:30:36 <desrt> i just reimplimented lookup from the prelude
23:30:46 <desrt> using the exact same name
23:30:58 <desrt> right down to the exact functionality including returning Maybe
23:39:36 <shapr> desrt: man, you need to read the Prelude tour
23:40:01 <desrt> shapr; can you do me a favour?
23:40:17 <desrt> impliment push and pop
23:40:18 <shapr> probably not :-P
23:40:29 <desrt> monadically
23:40:33 <shapr> huh?
23:40:37 <desrt> ie: create a stack monad type
23:40:42 <desrt> and push and pop operations
23:41:29 <Pseudonym> I don't understand the spec.
23:42:44 <desrt> i need something like:
23:42:57 <desrt> er.. i don't know how to type it
23:43:01 <desrt> what i want to be able to do:
23:43:01 <desrt> do
23:43:04 <desrt>   push 4
23:43:06 <desrt>   push 6
23:43:11 <desrt>   _ <- pop
23:43:17 <shapr> SamB: actually, it would be better to rip out the haskell-libs cvs repo and convert it into a separate darcs repo for each 'product'
23:43:18 <desrt>   thisisfour <- pop
23:43:23 <desrt> and so on
23:43:25 <shapr> along with unit tests to check that everything works
23:43:35 <shapr> otherwise it's difficult to claim it's being maintained
23:45:50 <shapr> desrt: c'mon man, that would be a fun project!
23:45:55 <desrt> well
23:45:57 <desrt> i'm trying it now
23:46:03 <desrt> but i have no idea how to do monads :)
23:46:29 <shapr> read the nomaware tutorial, and do it wrong a bunch of times
23:46:40 <shapr> that's pretty much how I figured it out.
23:49:58 <dons> shapr: got the .hi file parser working in hs-plugins. finally.
23:50:18 <dons> and now I know more than I ever wanted about how .hi files are put together
23:50:50 <shapr> dons: that's cool!
23:51:03 <shapr> new release of hs-plugins?
23:51:08 <dons> next few days
23:51:11 <dons> no more .dep files now
23:51:18 <desrt> *** Outstanding context : (Monad ((->) [c]), Num c)
23:51:19 <desrt> huh
23:53:12 <desrt> woot
23:53:19 <desrt> i have monad power
23:53:20 <desrt> (sort of)
23:53:38 <desrt> i have to reimpliment >>= and >> to make it work
23:54:18 <dons> that is not unusual
23:59:33 <desrt> hmm
23:59:40 <desrt> i'm not sure that what i have is a monadable thing
