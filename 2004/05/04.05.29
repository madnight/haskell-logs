00:15:07 <andersca> morning
01:56:41 <cedricshock> @arr
01:56:41 <lambdabot> Shiver me timbers!
02:30:13 * SamB wishes it wasn't so easy to miss a night
02:36:16 <bringert> morning
06:06:10 <neologism> that C language is so messy ;(
06:14:01 * bringert thinks that C is a rather good assembly macro language
06:15:07 <neologism> bringert: I just finished debugging malloc/free horror
06:15:26 <neologism> what makes us my networking professor think that C is the only allowed language
06:21:12 <bringert> use of C should only be allowed when writing very low level stuff
06:21:28 <bringert> networking code should never be written in C
06:21:33 <neologism> I have to do so
06:21:51 <neologism> and the code is terrible (due my rush and C ugliness)
06:22:10 <bringert> write an embedded language in haskell, and a compiler to C :)
06:22:40 <neologism> bringert: I started today a nd tommorow is deadline ;)
06:22:45 <bringert> :)
06:22:50 <neologism> and its finished now so I wont bother
06:43:20 <p0lartype> is there arithmetic in lambda calculus, except church integers ?
06:44:52 <Philippa_> there's any arithmetic you care to invent, and none that you don't
06:45:38 <Philippa_> neologism: Ow. C++ at least, please!
06:46:35 <neologism> Philippa_: I didnt set the conditions
06:47:01 <Philippa_> yeah, I realise. And not allowing C++ in place of C is something I'll almost always argue with a lecturer about
06:52:59 * bringert thinks that with the FFI, Haskell is often a better C than C
06:58:12 <Philippa_> bringert: I'm in two minds about that
06:58:23 <Philippa_> mostly due to laziness
06:58:36 <Philippa_> depends what you value in C, of course
06:58:56 <Philippa_> it's getting to be pretty poor as a portable assembler these days, most processors don't work anything like it
06:59:02 <Hyp3rion> Hiyas!
09:37:37 <desrt> keverets; is the CAS network down?
09:37:41 <desrt> (for you)
10:02:42 <keverets> desrt: today is the day that they were cutting off power.
10:03:31 <keverets> 08:00 -> 18:00, I believe
10:30:06 * Cale almost spelled "Monday" as "Monady"
11:02:06 <desrt> keverets; ah.  thanks for the info
11:02:32 <desrt> because of the new building?
11:09:10 <TheHunter> how do I convert a string to an integer?
11:11:20 <monotonom> { f :: String -> Int; f _ = 0 }
11:11:44 <monotonom> But seriously try show "93142"
11:11:59 <monotonom> Ugh I mean read "93142" :: Int
11:12:00 <Lor> perhaps rather read.
11:12:01 <andersca> or read "93142"
11:12:02 <andersca> :)
11:12:47 <Lor> TheHunter, please note the ambiguity of your question, whence the first answer. Just for the exercise, try to express _exactly_ what you want.
11:13:34 <TheHunter> thx, i think read is fine.
11:17:12 <TheHunter> think this was a _stupid_ question, shame on me
11:18:08 <monotonom> Next time I will give the Godel numbering.
11:19:31 <TheHunter> I've got a better question (sorry for asking again):
11:19:39 <TheHunter> If I have
11:19:47 <TheHunter> basicRec :: ((k -> v) -> k -> v) -> k -> v
11:19:55 <TheHunter> basicRec rec = f where
11:20:02 <TheHunter>     f = rec f
11:20:11 <TheHunter> what is the type of f?
11:20:58 <TheHunter> it should actually be f :: k -> v, but Haskell doesn't unify this with the basicRec type signature
11:21:21 <monotonom> rec takes up the part ((k -> v) -> k -> v).
11:21:30 <TheHunter> right
11:21:58 <monotonom> My inference coincides with yours.
11:22:16 <monotonom> What does the error message say?
11:22:20 <Igloo> It works for me
11:22:33 <Igloo> Oh, you won't be able to give f an explicit type signature
11:22:40 <Igloo> Because type variables aren't scoped
11:22:54 <TheHunter> Inferred type is less polymorphic than expected
11:22:57 <Igloo> So you'd be saying the same thing as
11:22:58 <Igloo> basicRec :: ((k -> v) -> k -> v) -> k -> v
11:22:59 <Igloo> basicRec rec = f where
11:22:59 <Igloo>     f :: a -> b
11:22:59 <Igloo>     f = rec f
11:23:13 <TheHunter> Yeah, that's exactly the problem
11:23:26 <monotonom> Is it related to the monomorphism restriction?
11:23:30 <Igloo> No
11:24:01 <Igloo> Just don't give f a type signature and it'll work fine
11:24:03 <TheHunter> But if I _want_ to give it a type? Can't I say somehow that it should use the same type names as in the basicRec type signature?
11:24:18 <Igloo> I think there might be a GHC extension that allows it
11:24:34 <monotonom> I suppose it is a 2nd-rank polymorphism issue then.
11:25:02 <Igloo> No, it's a lack of scoped type variable issue...
11:30:38 <TheHunter> Thanks, a lot. Googling for "scoped type variable" brought me to "http://www.haskell.org/ghc/docs/latest/html/users_guide/type-extensions.html" which seems to address this issue. But it doesn't work yet :(
11:32:10 <TheHunter> Now I got it: basicRec (rec::((k -> v) -> k -> v)) = f where. Thanks again!
11:40:40 <sm> shapr: playing with lambda bot.. just pulled latest, when I run it gives EvalModule/LMEngine.o: unknown symbol `__stginit_TextziParserCombinatorsziParsecziError_'
11:41:45 <Cale> use --make
11:41:58 <sm> --make ?
11:42:00 <Cale> You need to include the Parsec package
11:42:17 <Cale> The --make option to ghc will detect and include it.
11:42:25 <sm> aha, thx
11:42:37 <Cale> I think --package parsec would also work.
11:42:54 <Cale> er
11:43:03 <Cale> perhaps that's only one dash
11:45:05 <sm> yes that seems better, unfortunately same error.. maybe I need to rebuild the whole lot
11:45:52 <sm> no.. it already has -lHSparsec -package parsec
11:46:52 * sm tries a ghc upgrade
13:09:24 <Hyp3rion> nite!
13:38:03 <arjanb> I'm wondering whether abstractions like monads could be useful in imperative languages too
14:52:11 <sm> could someone explain to me the meaning of => in type signatures ?
14:52:24 <shapr> it's a typeclass constraint
14:52:57 <shapr> (Show a) => a -> a means that a must be an instance of Show
14:53:19 <shapr> for example, the Ord typeclass has an (Eq a) => type sig
14:53:38 <shapr> because it's difficult to order items unless they can be already checked for in/equality
14:53:50 <sm> thanks.. hi shapr, I've been looking at lambdabot
14:53:57 <shapr> how does he look?
14:54:09 <sm> arr is my favourite :)
14:54:13 <shapr> :-)
14:54:14 <shapr> @arr
14:54:14 <lambdabot> I want me grog!
14:54:16 <sm> trying to figure out what else works
14:54:32 <sm> how does he store definitions ?
14:54:33 <shapr> @arr
14:54:33 <lambdabot> May the clap make ye incapable of Cracking Jenny's Tea Cup.
14:54:38 <shapr> what sort of definitions?
14:54:43 <shapr> you mean for @eval?
14:54:55 <sm> no, I wondered if he could remember arbitrary stuff like fsbot
14:55:28 <sm> ah, you don't need to address him directly, yay
14:55:32 <shapr> that was the first lambdabot plugin actually, but I ripped it out because HSQL was such a pain in the ass to install
14:55:40 <sm> sql, ugh
14:55:42 <shapr> but it's gotten better now, I should put that plugin back in
14:56:06 <shapr> anyway, part of the point of lambdabot is for people to come along and write a plugin they want
14:56:13 <sm> yup
14:56:21 <shapr> so if you'd like a factoid plugin that doesn't use SQL, write it!
15:06:33 <shapr> hiya cedric
15:06:34 <shapr> wassup?
15:12:39 <cedricshock> shapr: just rejoining after leaving accidentally
15:13:02 <shapr> how's code?
15:14:06 <earthy> tiring
15:15:27 <shapr> earthy: fun code?
15:16:39 <earthy> initrd linuxrc
15:16:42 <earthy> not really, no
15:16:51 <shapr> oh, too bad
15:18:30 <shapr> konichiwa tea-san
15:21:38 <Lunar^> shapr: Got any more fun with hOp ?
15:22:40 <shapr> nope, stayed away from the computer today
15:22:40 <Lunar^> I started gathering old x86 hardware pieces in order to build a box to run it natively
15:22:45 <shapr> cool :-)
15:22:57 <shapr> would be neat to see if it's much faster native
15:23:30 <shapr> I wish I had some business card CDR blanks, we could distribute some hOppix at EuroHaskell
15:23:51 <Lunar^> shapr: neat demo in Paris also http://open-files.com/redac/tete.jpg
15:24:16 <shapr> nice
15:24:52 <Lunar^> shapr: about.. 1000 people protesting against the new law, EUCD and patents
15:25:17 <Lunar^> shapr: It's a the first time this happen in Paris, I hope we'll be able to do others
15:25:21 <shapr> me too
15:25:45 <cedricshock> Lanur^: New law? Did one of the software patent things go through?
15:26:09 <Lunar^> cedricshock: No, the law is called the LEN, « Loi sur la Confiance en L'Économie Numérique »
15:26:31 <Lunar^> It's mostly about privacy, and hosting responsability
15:27:18 <Lunar^> Someone can ask the hosting services to shut a website down if it contains illegal content
15:27:30 <Lunar^> without going though any juge or something
15:27:57 <cedricshock> Ah, not good for common carriers, or anyone else for that matter.
15:28:28 <Lunar^> It the host refuses, and that the one asking win the trial, the host takes 1 year of prison and a fine of 75 000 euros
15:28:35 <cedricshock> How's the EU pattent battle going? The last news I heard was positive, but that was months ago.
15:28:47 <shapr> I dream of peer to peer ad-hoc networks
15:28:54 <Lunar^> cedricshock: Don't ask shapr, his pretty mad about this
15:29:30 <Heffalump> yo
15:29:32 <Lunar^> What is awfull, is that, if the host effectively shut the website down, the webmaster can do a trial for illegal contract break
15:29:47 * Heffalump pokes #haskell in search of people experienced in doing CGI stuff with Haskell
15:30:03 <shapr> WASH?
15:30:04 <Lunar^> Heffalump: I did some
15:30:22 <shapr> curryspondence uses WASH, but it's really basic
15:30:29 <Heffalump> what's curryspondence?
15:30:39 <Heffalump> hmm, I think I probably also need to use a database
15:30:45 <shapr> http://shapr.homelinux.net/cgi-bin/wash/SearchML
15:30:52 <Heffalump> HaskellDB is postgres only, isn't it?
15:31:03 <Lunar^> It's not
15:31:07 <cedricshock> Lunar^: That's not good. It forces the host to have perfect legal judgment. If the contracts poorly written, they could be liable either way. That's worse than the few DMCA things here affecting carriers.
15:31:07 <shapr> no, it's MySQL, SQLite, ODBC, PostgreSQL
15:31:11 <shapr> and maybe something I forgot
15:31:23 <Heffalump> MySQL before version n?
15:31:35 <shapr> er, I think after version n
15:31:45 <Heffalump> where n is the version in woody
15:31:59 <Lunar^> cedricshock: I'm not talking about the fact that every service provider has to give the identity of an user if the police ask (without any juge instructions or something)
15:32:00 <shapr> I think it might be MySQL 4.1 or something
15:32:09 <shapr> but I don't user MySQL, so that number could be way off
15:32:13 <shapr> Heffalump: did you try curryspondence?
15:32:39 <Lunar^> shapr: I thought you eard the fan going faster ;)
15:32:56 <shapr> I have headphones turned up loud right now :-)
15:34:51 <Heffalump> hmm.
15:36:39 <Marvin--> woo, Road Warrior on tv
15:41:10 <shapr> Heffalump: curryspondence darcs repo available if you want to check it out, it's a small amount of code
15:44:29 <Heffalump> yeah, just looking at it
15:45:07 <cmoline> im having a problem with putStr
15:45:18 <cmoline> the docs say it takes a string
15:45:31 <cmoline> but ive been holding one up to the monitor and its not taking it
15:46:59 <shapr> oy
15:47:00 <Marvin--> tried putStrLn?
15:47:07 <Heffalump> I think you may be misunderstanding the Haskell type system :-
15:47:10 <Heffalump> s/-/-)/
15:47:16 <Heffalump> or rather, Haskell calling conventions
15:47:35 <shapr> I've heard some amazing Haskell calling conventions from frustrated students.
15:48:03 <shapr> something about anatomically impossible partial applications.
15:48:22 <cmoline> yeah i tried those too
15:48:23 * Heffalump ponders the pain of getting to grips with postgres
15:48:26 <cmoline> didnt work either
15:48:36 <shapr> Heffalump: what are you writing?
15:48:58 <Heffalump> a rants system, eventually
15:48:59 <arjanb> what's the error?
15:49:04 <Heffalump> but first I need to write the authentication end
15:49:05 <shapr> oh that sounds like fun.
15:49:15 <shapr> look at the HaskellDB Forum code
15:49:18 <shapr> they have auth
15:49:34 <shapr> in fact, you can probably modify HaskellDB Forum without much trouble
15:49:38 <Heffalump> I suspect my authentication desires are idiosyncratic but simple enough I'd be better off writing my own
15:49:44 <Heffalump> and same for the rants system
15:50:20 <shapr> hi ez4, lookin for Haskell info?
15:53:57 <Heffalump> where is the required MySQL version documented?
15:54:18 <shapr> somewhere in the HaskellDB docs
15:54:36 <Heffalump> I've been looking :-)
15:54:43 * Heffalump looks again
15:55:36 <shapr> look at INSTALL
15:56:21 <shapr> line 62
15:56:34 <Heffalump> I guess downloading it would have been smart :-)
15:56:40 <Heffalump> (I was trying to find it in the online stuff)
15:56:56 <shapr> yup
15:56:57 <Heffalump> I hate sourceforge download
15:57:03 <shapr> me too
15:57:41 <Heffalump> hmm, Debian doesn't have MySQL >=4.1 at all.
15:58:30 <shapr> I got HaskellDB Forum mostly working with PostgreSQL
15:59:16 <Heffalump> I'm just not familiar with adminning that at all.
15:59:47 <dennisb> it's very simple, don't be afraid!
16:00:37 <shapr> truly, it is easy
16:00:53 * Heffalump --> give it a go
16:01:23 <shapr> anyway, I've written my blog entry, time to sleep
16:01:43 <Heffalump> nn
16:05:34 <dennisb> if you run stable debian you will get an old version of pg, starting with 7.4 is probably a good idea and it's available from debian in some way (I don't use debain so I'm not sure how)
16:06:12 <dennisb> I just know that 7.4 is packaged and working in some branch of debian
16:07:02 <Heffalump> why is 7.4 a good idea?
16:08:26 * Marvin-- boggles at the "00000000" password
16:11:24 <dennisb> Heffalump: pg have been getting a lot of new features (and speed). That debian uses 7.2 is not because it's more stable (it's in fact so old that there probably will not be any more updates to the 7.2 branch) 
16:11:47 <Heffalump> will 7.2->7.4 upgrades be a problem?
16:12:10 <dennisb> you need to dump the database and then import it in 7.4, the binary files are not compatible
16:12:18 <dennisb> other then that there should be no problem
16:12:39 <dennisb> (and that is not a problem, it's the normal way to upgrade pg)
16:13:34 <dennisb> well, if you get into trouble there is a #postgresql channel, lots of friendly souls that can help there
16:29:28 <HellBlast> cale, what functions did you use to implement sieve's prime algorithm?
16:29:46 <Cale> hm?
16:29:57 <Cale> sieve's?
16:30:10 <aFlag> sieve of eresthotenes, something like that
16:30:14 <aFlag> i always forget
16:30:21 <Cale> Eratosthenes, I think.
16:30:25 <Heffalump> yes
16:30:37 <Heffalump> IIRC there's a one-liner for it
16:30:47 <Cale> primes = sieve [ 2 .. ]
16:30:47 <Cale>         where sieve (x:xs) = x : sieve [y | y <- xs, (y `rem` x)/=0]
16:31:16 <Heffalump> that's the one.
16:31:27 <aFlag> oh, it's using a bunch of stuff i don't know yet, i was trying to do it using filter
16:31:37 <Heffalump> oh, and you can use iterate too IIRC
16:31:45 <Cale> well, that is using filter
16:31:52 <Heffalump> that list comprehension is equivalent to a filter
16:32:38 <Cale> sieve (x:xs) = x : sieve (filter (\y -> y `rem` x /= 0) xs)
16:33:27 <aFlag> hum... i was trying to iterate through the list also, but then i realized i was trying to do some sort of emperative programing with haskell hehe
16:34:49 <aFlag> what's the best way to ident a "let in" thing?
16:35:01 <aFlag> on the tutorial i'm reading it's indented like this
16:35:13 <aFlag> let x=2
16:35:19 <aFlag> in blabla
16:35:26 <Cale> That's normal.
16:35:36 <aFlag> let x=2
16:35:40 <aFlag>     y=3
16:35:44 <aFlag> if theres more
16:35:53 <Cale> occasionally, I'll stick an extra space after the in, to keep things lined up.
16:35:54 <aFlag> and in on the beggining
16:36:04 <aFlag> but the haskell mode on emacs don't let me indent like that
16:36:11 <Cale> Use vim :)
16:36:13 <Cale> heh
16:36:24 <aFlag> heh
16:37:07 <TheHunter> so you mean if I want to write haskell I should stick to vim. I was just gonna learn emacs...
16:37:20 <Cale> It doesn't matter, of course :)
16:37:29 <Cale> Personally I use vim.
16:37:46 <Cale> They're just editors.
16:38:11 <aFlag> i don't like vim so much
16:38:35 <TheHunter> But vim can't indent the let clause right either
16:38:36 <Cale> as long as your editor allows you to treat spaces as tabs and convert tabs to spaces, you're okay.
16:38:47 <Cale> Of course it can.
16:39:17 <TheHunter> you mean I can write let x = 2 and the next line begins right under the x?
16:39:21 <Cale> anyway - dinner time :)
16:39:44 <Cale> tap space a few times if it doesn't - it won't kill you :)
16:39:58 <TheHunter> right, but it ain't perfect
16:40:02 <Cale> you'll spend more time thinking than typing when writing Haskell code anyway :)
16:40:16 <TheHunter> that's true
16:40:33 <aFlag> i find writting haskell code quite hard
16:41:02 <aFlag> i'm leaving also, bye
16:41:30 <reffie_> i find _reading_ haskell code quite hard
17:09:38 <sm> does it get easier, for non-mathematician ?
17:14:57 <sm> ok I think I've deciphered lambdabot main loop
17:14:59 <sm> phew!
17:15:10 <Heffalump> is that the one I wrote?
17:15:14 <sm> that was exciting :)
17:15:26 <Heffalump> (lots of monad transformers everywhere
17:15:50 <sm> probably
17:16:08 <sm> are you still working on it ?
17:16:39 <Heffalump> haven't for ages
17:17:09 <sm> would you remember what monad LB represents ?
17:18:02 <sm> "-- in monad LB we don't have a connection".. so it's.. a state of the world  ?
17:18:36 <TheHunter> @hello
17:18:37 <lambdabot> Hello world. 
17:19:44 <Heffalump> yes, the LB monad is for when there is no connection to the server
17:19:52 <TheHunter> @fdfsdafdsa
17:19:52 <lambdabot> Sorry, I don't know the command "fdfsdafdsa", try "lambdabot: @listcommands
17:19:53 <Heffalump> and the IRC monad is the LB monad + server connection stuff
17:20:22 <sm> I see.. thanks
17:20:53 * sm wonders what it stands for
17:23:49 <Heffalump> LB = LambdaBot
17:24:16 <sm> ahh
17:24:46 <TheHunter> Good night!
17:49:05 * sm hacks the lambdabot!
17:51:18 <Heffalump> in what way are you hacking it? :-)
17:54:22 <sm> made it say hello sm! :)
17:55:18 <sm> it's starting to look very useful
18:02:32 <Heffalump> are you hacking the core, or writing a new module?
18:05:24 <sm> the modules
18:05:41 <sm> I want to look up wiki pages & such
18:05:54 <sm> which I believe fsbot does
18:06:31 <Heffalump> ooh, cool
19:17:06 <ShaminoDC|FBK> how to filter all double elements out of a list ?
19:17:28 <keverets> nub ?
19:17:46 <keverets> or do you mean get rid of all elements that there are exactly two of?
19:18:03 <ShaminoDC|FBK> get rid of all elements that are double or more
19:18:58 <keverets> including the first of those?
19:19:00 <ShaminoDC|FBK> [1,2,2,3]
19:19:07 <ShaminoDC|FBK> so i hat to remove the 2 in this case
19:19:18 <keverets> to get [1,3] or to get [1,2,3] ?
19:19:21 <Cale> what should the resulting list be?
19:19:22 <ShaminoDC|FBK> 1,2,3
19:19:26 <keverets> nub
19:19:29 <Cale> yep
19:19:42 <ShaminoDC|FBK> nub [1,2,3,4]?
19:20:32 <keverets> [1,2,3,4]
19:20:36 <ShaminoDC|FBK> lol
19:20:43 <ShaminoDC|FBK> dont make fun of me
19:21:06 <ShaminoDC|FBK> i am asking you if there is something defined in the prelude
19:21:23 <maihem> @eval nub [1,2,3,4]
19:21:24 <lambdabot> [1, 2, 3, 4]
19:21:39 <Cale> ShaminoDC|FBK: Yes - we told you, nub - it's in List
19:21:46 <ShaminoDC|FBK> nub is not defined
19:21:48 <maihem> import List
19:21:59 <maihem> its not the prelude, but hey.
19:22:24 <keverets> or "import List (nub)" if nub is all you want.
19:22:48 <maihem> does "List.nub" work?
19:23:08 <keverets> yup.
19:23:17 <Cale> nub [] = []; nub (x:xs) = x : nub (filter (x /=) xs)
19:23:35 <Cale> you could also write it yourself pretty quickly :)
19:23:47 <keverets> and probably a good exercise, too.
19:24:01 <ShaminoDC|FBK> i wanted to work with predefined
19:24:11 <keverets> sometimes you can even write it more elegantly than the prelude (though that's somewhat subjective)
19:24:42 <Cale> well, the "List" version is defined quite nicely in terms of nubBy :)
19:25:27 <Cale> which is in turn defined pretty similarly to what I gave, with a little bit of generalisation.
20:15:12 <ithkuil> decaffeinated coffe is like crack without the cocaine
20:16:40 <ithkuil> is anyone here?  is it stupid to want to assemble machine instructions with a haskell program
20:17:28 <Smerdyakov> Haskell is a reasonable language to use to write an assembler, but it's unclear why you don't use an existing assembler.
20:17:41 <ithkuil> there is someone else here!
20:18:17 <ithkuil> i dont want to have to rely on another assembler for my compiler, i want to be able to implement for different architectures 
20:18:51 <ithkuil> i am also curious about ia32 and internals of the pc in general
20:18:55 <Smerdyakov> Architectures that don't have assemblers?
20:19:33 <ithkuil> i dont think the assembler needs to be a separate step, i think it should be part of the same program
20:19:47 <ithkuil> i want to create an interactive incremental compiler
20:20:13 <ithkuil> besides, i just want to learn about assembly language and the machine while i am learning about compilers
20:20:26 <Smerdyakov> Well, it's convenient for it to be a separate step.
20:21:31 <ithkuil> i didnt really want to argue about that :)
20:21:35 <ithkuil> i'm sure youre right
20:22:49 <ithkuil> anyway, smerdyakov, suppose a person was assembling instructions with haskell (even though he should probably just use an existing compiler)
20:23:42 <Smerdyakov> Yes?
20:23:47 <ithkuil> i have this c# code with some overloaded Move methods like public IA32AssemblyInstruction Move(SegmentRegister destinationRegister, Register16 sourceRegister)
20:23:54 <ithkuil> i am overloading in my c# program
20:24:09 <ithkuil> trying to read tutorials to understand ad hoc polymorphism in haskell
20:24:13 <ithkuil> not really getting it
20:24:39 <ithkuil> i guess i should just read it several more times
20:26:07 <ithkuil> i think actually i need to read everything several more times
20:27:19 <ithkuil> if i wanted to be able to have two or more versions of move, say like above and another that moves between two register16s
20:27:22 <ithkuil> how would i do that
20:28:17 <Smerdyakov> How about making a separate function for each kind?
20:28:35 <ithkuil> right, a separate function
20:28:49 <ithkuil> guess its not so hard huh
20:28:57 <ithkuil> so i dont need to use classes/instances?
20:29:19 <Smerdyakov> You don't _need_ to use them for anything....
20:30:14 <ithkuil> ah, of course not!
20:30:33 <ithkuil> I will have to read more slowly I think..
20:31:10 <ithkuil> on the suggestion of simply using an existing assembler
20:31:25 <ithkuil> and an existing linker
20:32:28 <ithkuil> those existing tools only process monolithic streams
20:33:12 <Smerdyakov> What do you mean?
20:33:21 <ithkuil> well say the gnu tools
20:33:35 <ithkuil> input from files or stdin 
20:33:51 <ithkuil> read in assembly language as text? correct?
20:34:04 <Smerdyakov> Yes
20:34:46 <ithkuil> serializing information isn't such a good idea or a necessary step
20:35:07 <ithkuil> thats just the way people have been doing things because they can only form one word at a time with their mouths
20:35:32 <Smerdyakov> What are you proposing instead?
20:35:38 <ithkuil> information isn't naturally serialized, we just put it in a certain order because like i said we can only make one sound at a time
20:36:03 <ithkuil> well there is no reason to create a text file
20:36:07 <ithkuil> for one thing
20:36:18 <Smerdyakov> Why not?
20:36:57 <ithkuil> if the haskell program can assemble the machine instructions itself, translating to text is just an extra step
20:37:22 <ithkuil> the idea was to create a compiling/linking/assembling tool
20:37:28 <Smerdyakov> Whatever other format you want will be equivalent to a "text file" in all the ways that matter.
20:39:47 <ithkuil> a program in machine code is an ordered list of instructions
20:40:05 <Smerdyakov> No, it's a sequence of bytes. :P
20:40:42 <ithkuil> ultimately it will be a sequence of bytes
20:42:32 <ithkuil> anyway i dont want to store it as text, because i dont want to parse the text, and i dont want to have to rely on someone else's crappy c program to do the assembling and linking
20:42:53 <Smerdyakov> You want to manipulate assembly code?
20:43:01 <Smerdyakov> Instead of just generating it?
20:43:14 <ithkuil> yes
20:43:20 <ithkuil> what do you mean exactly manipulate it
20:43:23 <ithkuil> oh
20:43:34 <ithkuil> good point
20:43:55 <ithkuil> sure, text has certain advantages
20:44:07 <ithkuil> i think that the disadvantages might outweigh them though
20:44:27 <ithkuil> i wanted to create an interactive program
20:44:49 <Smerdyakov> So?
20:45:10 <ithkuil> so if the programmer wanted to insert an extra OUT or STORE or whatever into the generated codes, there would be a user-interface feature that would allow that
20:45:27 <Smerdyakov> You can't do assembly incrementally.
20:45:36 <Smerdyakov> You need the entire source file to do any of it.
20:46:09 <ithkuil> it could be stored as a list in memory
20:47:04 <Smerdyakov> OK, but you need the list to contain the _entire_program_.
20:49:10 <ithkuil> let me ask another stupid question not exactly on that track
20:49:22 <ithkuil> i know, you cant stop me from asking questions anyway
20:49:36 <ithkuil> does haskell do corba 
20:49:51 <Smerdyakov> I don't know.
20:50:51 <ithkuil> i think its all about programs being able to interoperate conveniently
20:51:32 <Smerdyakov> I don't think CORBA is very helpful for that. :P
20:52:23 <ithkuil> what would you suggest?  writing to a text file in one program, the next program reading it in?
20:52:59 <Smerdyakov> No. Stop thinking of "programs" as having separate address spaces and your problem is gone.
20:53:37 <ithkuil> im actually right with you on that one i think
20:54:14 <ithkuil> programs traditionally had to run in separate processes with separate address spaces 
20:54:26 <ithkuil> but ah, what do you mean
20:54:49 <Smerdyakov> ? Consider all your programs to be separate modules of one program.
20:55:19 <ithkuil> exactly!
20:55:36 <np_hard> service oriented architecture
20:55:49 <ithkuil> only, what if say, i wanted it to be practical for c or c++ programmers to interoperate with my incremental compiler
20:55:54 <Smerdyakov> np_hard, this is an alternate suggestion to mine, right?
20:56:08 <Smerdyakov> ithkuil, I don't really care about C or C++ programmers.
20:56:13 <ithkuil> haha
20:56:15 <np_hard> it is the buzzword compliant alternative to corba :)
20:56:34 <ithkuil> np_hard what, web services or something?
20:56:35 <Smerdyakov> ithkuil, writing anything compiler-like in C or C++ is evidence of extreme incompetence.
20:57:13 <ithkuil> not another compiler, just some other program using my compiler
20:57:26 <np_hard> ithkuil: the web is good, but the other portion is to not expose too much granularity, rather than distributing objects, publish services. :)
20:57:39 <Smerdyakov> I mean "compiler-like" to include anything that interacts with a compiler.
20:58:06 <ithkuil> see i started to learn about compilers and quickly realized that c# wasnt the answer to all of my programming dreams
20:58:12 <np_hard> hahah
20:58:20 <ithkuil> then i learned about functional programming
20:58:25 <np_hard> the pain of disillusionment
20:59:04 <np_hard> ithkuil: http://www.ccs.neu.edu/home/matthias/BALJ/
20:59:40 <ithkuil> i was amazed at the world i was missing out on.  i had played with lisp a little years ago, but mostly dismissed it as being cryptic
21:00:43 <ithkuil> thank you for the nice link
21:01:02 <np_hard> no problem, I have a copy out from the local library
21:02:02 <ithkuil> are you still there smerdyakov
21:02:08 <Smerdyakov> Yes
21:02:10 <ithkuil> as far as the thing with programs as modules
21:02:23 <ithkuil> i think i know what you mean
21:02:41 <ithkuil> just distribute the code for my program and then the next guy can import the module
21:02:51 <ithkuil> so then he can interoperate with it?
21:03:07 <np_hard> or you could make your program available as a web service
21:03:17 <np_hard> you don't need the source to "ls" to use it
21:03:18 <Smerdyakov> Yes
21:08:59 <ithkuil> np hard
21:09:11 <ithkuil> what do you mean dont expose too much granularity
21:10:02 <np_hard> clients don't give a flip about your objects, they probably suck (no offense intended, all code sucks)
21:10:44 <np_hard> just let them give you an input and you provide an output. a web service is a nice portable interface to do basically the same thing that the unix command shell does
21:11:32 <np_hard> you don't see cut or grep making you futz around with object models or whatnot
21:11:33 <ithkuil> i see
21:11:57 <ithkuil> no, you just spend all of your time reading what the commands mean and what the command line options do
21:12:06 <ithkuil> and then trying to put them in the right order
21:13:08 <np_hard> naturally
21:13:32 <np_hard> as opposed to doing all that and trying to figure out how to get the "object model" to do what you want
21:14:29 <np_hard> it is all about reducing things to essential difficulty. the essential difficulty of programming is: given an input, how to produce the desired output. everything else is incidental difficulty which should be shunned
21:15:12 <np_hard> the essential difficulty of "software engineering" is deciding what outputs and inputs to handle in the first place, and ninety percent of that field is half mental
21:16:10 <ithkuil> hm
21:16:17 <ithkuil> right
21:16:35 <ithkuil> i think something that might change about programming
21:17:11 <ithkuil> is that we may in the not too distant future have a way to describe what our inputs and outputs are in a way that other people's programs can understand
21:17:22 <ithkuil> or rather there will be multiple ways
21:17:27 <ithkuil> well there already are of course
21:17:36 <ithkuil> but that is going to be further resolved
21:17:59 <ithkuil> i mean for example web services
21:18:07 <Smerdyakov> You already have this, with things like the MS CLR.
21:18:11 <ithkuil> and maybe applying ideas like description logics to programming interfaces
21:18:41 <ithkuil> well i guess there are lots of solutions to that type of problem
21:19:21 <ithkuil> i think that the solutions will get significantly better
21:19:40 <ithkuil> or the technologies commonly in use will improve
21:19:40 <Smerdyakov> Typed Assembly Language is a pretty good one.
21:19:52 <ithkuil> ok
21:20:00 <ithkuil> i guess i will look that up typed assembly
21:22:23 <ithkuil> when you compile to intermediate code, you lose optimisations that are possible for certain specific architectures
21:24:10 <ithkuil> this tal thing is pretty significant
21:24:27 <Smerdyakov> What do you mean?
21:24:32 <ithkuil> my pipedream is better though.  of course thats all it is and i cant even express it
21:24:51 <ithkuil> significant, i thought you felt it was significant also, isnt that why you mentioned it
21:25:03 <Smerdyakov> I am asking what you mean by "significant."
21:25:34 <ithkuil> well at the time i typed that, it was really just an attempt at thanking you for giving me the link
21:25:39 <ithkuil> the thing i read that i liked was about
21:25:58 <ithkuil> The type soundness of our assembly code implies many important security properties such as memory safety. As a result, our assembly code is a form of proof-carrying code. TAL applets, like Java applets, may be downloaded from untrusted sources on the internet, verified, and executed safely without fear they will corrupt the host machine.
21:27:50 <ithkuil> anyway thats enough human interaction for me.  its hurting my brain.. im better at watching tv
21:27:53 <ithkuil> thanks
23:21:02 <cmoline> wow i didnt realize there were so many users
23:21:11 <cmoline> on this channel that is
23:22:01 <np_hard> yep, eddie haskell is a great figure in entertainment history
23:33:35 <lispy> eddie haskell?
23:33:43 <lispy> who's dat?
