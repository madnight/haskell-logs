00:04:16 <ozone> hmm, anyone here know how clean's uniqueness types differ from linear types, if at all?
00:04:51 <Pseudonym> AFAIK they're the same.
00:05:22 <ozone> right.  i'll have to read some papers on uniqueness types to find out why the papers were written, then
00:05:29 <ozone> (seems a bit odd to have so many papers about it if they're the same)
00:06:57 <Pseudonym> If you can find a copy, the Clean book is very good.
00:07:19 <Pseudonym> "Functional Programming and Parallel Graph Rewriting"
00:07:44 <ozone> by 'book', i'm guessing you mean it's not available online
00:07:51 <Pseudonym> Don't know.
00:07:59 <Pseudonym> Most likely not.
00:08:19 <ozone> wow, amazon has it.
00:08:37 <ozone> my amazon wish list is getting rather large.  damn types books cost a fortune!
00:08:40 <Pseudonym> Most decent university libraries have it.
00:09:23 <ozone> oh!
00:09:24 <ozone> it's online
00:09:31 <ozone> http://www.cs.kun.nl/~clean/Manuals/Addison__Wesley_book/addison__wesley_book.html
00:09:39 <Pseudonym> Ah, there you go.
00:10:04 <Pseudonym> I'm not sure how far in depth it goes into uniqueness types.
00:10:14 <Pseudonym> But that's the best reference about Clean's internals.
00:10:28 <ozone> time to give the printer at work a bit of a workout. :)
01:12:47 <earthy> hm. `Functional Programming and Parallel Graph Rewriting wasn't all that good in my opinion
03:12:12 <shapr> yow
03:12:49 <shapr> good morning #haskell!
03:13:49 <shapr> what's going on?
03:14:46 <shapr> have you guys seen the nifty HaskellDB Forum?
03:16:18 <shapr> http://jackass.tekno.chalmers.se/dp03-7/cgi/run <-- login/pw guest/guest
03:16:23 <shapr> looks very nifty
03:20:51 <Lunar^> Is that in Haskell ?
03:20:55 <shapr> yup
03:21:01 <Lunar^> rocks
03:21:13 <Lunar^> One more step toward ruling the world :)
03:21:13 <shapr> I got it built and running on my box last night too
03:21:17 <shapr> yes!
03:40:42 <shapr> hej ski
03:40:46 <shapr> wassup?
03:41:01 <ski> hej shapr
03:41:21 <ski> sitting in a library ..
03:41:39 <shapr> sounds lice fun
03:41:50 * ski chuckles
03:45:17 <shapr> like
03:45:17 <shapr> erg
03:45:37 <shapr> did you see the HaskellDB forum? it's a neat demo project
03:47:30 <ski> erg ?
03:49:12 <shapr> erg == I saw a typo
03:50:33 <ski> you mean the channel ?
03:51:42 <shapr> login/pw guest/guest http://jackass.tekno.chalmers.se/dp03-7/cgi/run
03:53:40 <ski> hmm
03:54:48 <ski> "Warning. Important Message!!!  You are seeing this message, because we have detected that you have tracking software installed in your machine. (more info) ..."
03:55:13 <shapr> huh?
03:55:21 <shapr> where's that from?
03:55:27 <ski> this lib. computer said that when i logged in
03:55:57 <ski> (logged into the HDB site, i.e.)
03:56:35 <ski> (seems some program called Fizzle Bar popped it up ..)
03:56:44 <shapr> sounds like spyware
04:03:54 <shapr> hey Si\, wassup?
04:09:40 <liiwi> yoyoyo
04:09:58 <ski> @yow
04:09:59 <lambdabot> I just heard the SEVENTIES were over!!  And I was just getting in touch
04:09:59 <lambdabot>  with my LEISURE SUIT!!
04:10:03 <Si\> hi, do you have any idea if anyone has implemented any sort of compression algorithm in pure Haskell?
04:10:18 <shapr> I think Igloo did
04:10:30 <JaffaCake> there are a couple of implementations of LZW in the nofib suite
04:11:03 <Si\> can't use LZW til the end of July or thereabouts
04:11:33 <shapr> is that when the patent runs out?
04:12:49 <Si\> in the UK
04:13:00 <Si\> ran out a year ago in USA
04:13:35 <shapr> oh
04:14:49 <Igloo> I wrote the decompression bit only I think
04:15:26 <Si\> interestingly, the developer of libbzip2 was as of 2002 working on GHC
04:16:11 * Lunar^ needs to focus
04:16:18 <Lunar^> hOp hOp hOp
04:16:29 * shapr bOings
04:16:54 <shapr> Lunar^: you could make a release and then listen to us complain about it :-)
04:16:57 <Si\> I want a compression algorithm which I can use with HAC's plugin system; currently it just invokes bzip2
04:17:29 <shapr> I do wish it were easier to incrementally build hOp
04:18:29 <shapr> a lot of cool people have put code into GHC
04:23:00 <Lunar^> shapr: Yes I need to do that
04:23:37 <Si\> I also need to know if there's any function in the RTS like c_loadObj, except rather than loading from a file it loads from a buffer in the memory
04:25:30 * shapr doesn't know
04:27:06 <Si\> cuz we're never gonna be able to truely move away from "object as plugin" while you have to dynamically load via loadObj
04:27:51 <shapr> yup
04:28:10 <shapr> that's part of the point of the hs-plugin framework right?
04:28:59 <Lunar^> Si\: I would like this kind of function
04:29:07 <shapr> me too
04:29:13 <Lunar^> Si\: It doesn't seem hard to add though
04:29:17 <Si\> yes, but hs-plugin framework is still multiple objects, it just hides it
04:29:34 <shapr> isn't there an interface to GHCi that does something like that?
04:30:50 <Lunar^> Si\: Look at *nix version of loadObj in Linker.c
04:31:23 <Lunar^> Si\: I think splitting it just after the mmap part would do the trick
04:31:34 <Si\> I dunno, all I know is if you can get random access to a bzip2 file and then read the objects from the into the memory, and then you can link in what you load, you'd have a killer plugin system for Haskell
04:31:57 <ski> bye
04:33:25 <Lunar^> Si\: what do you mean when you say that hs-plugin is multiple objetcts ?
04:34:04 <Si\> if you want to use a load of Haskell files for a plugin you get a whole bunch of files
04:34:17 <Si\> instead of one
04:34:39 <Si\> even more so if you wanted to do type negotiation via hi
04:35:15 <may> hi
04:35:30 <shapr> bonjour may
04:35:39 <shapr> do you know TTY?
04:35:40 <may> Im studying the static semantic of system F and there is one thing that I dont understand, anyone can help ?
04:36:13 <shapr> you can ask the question, someone may know
04:36:21 <may> shapr: yes ;) the cat is right in front of me now ;) fucking cat
04:36:40 <shapr> I have a poster of TTY on my wall!
04:36:44 <may> ahah
04:36:48 <shapr> and pictures of her on my website
04:36:57 <shapr> tty_se_repose
04:37:05 <may> im right now in prologin's office
04:37:13 <shapr> cool!
04:37:38 <shapr> one day I'll meet TTY in person.
04:37:54 <may> the first cat who ever coded in java 
04:38:06 <shapr> anyway, what's your question about System F?
04:38:25 <may> fucking crazy guyz subscribed the cat to meetings portals
04:38:35 <shapr> "ce chat code en Java, Et vous?"
04:39:41 <Lunar^> Si\: Yes packaging these would be a good idea
04:39:54 <Lunar^> may: shapr is on Orkut too
04:40:05 <Lunar^> may: But actually bankair did subscribe his stone
04:40:07 <may> what ? shapr is a cat ?
04:40:12 <may> someone lied to me ?
04:40:18 <shapr> I am not a cat
04:40:23 <Lunar^> may: Never eard of Brutus ?
04:40:26 <shapr> I can show pix to prove it!
04:40:39 <shapr> et tu Brutus?
04:40:43 <may> Lunar^: nope ;) who's that 
04:41:02 <Lunar^> It's a 'pavé' adopted by bankair
04:44:52 <shapr> I wish I knew where that stack overflow is coming from
04:45:07 <Lunar^> shapr: -RTS +xc ?
04:45:42 <may> Lunar^: ahah very good 
04:45:48 <Si\> the other issue is that GHC compiled objects are hardly the smallest of files; for example my SOAP Implementation weighs in at over 250K uncompressed, but only about 64K compressed
04:45:58 <shapr> I have a few outstanding lambdabot issues that might be the problem
04:46:41 <may> so my system F question is : T C (included in) TheTypeContext ; ForAll alpha.U
04:46:43 <may> => 
04:47:03 <may> e[T] : U [ T / Alpha]
04:47:14 <may> I know its about specialisation.
04:47:57 <may> ah
04:48:21 <shapr> you figured it out?
04:48:29 <may> hum
04:48:33 <may> strange cause U seems to be a type 
04:48:48 <may> but its used as an expression in the result 
04:49:39 <may> unless expressions are abstracted as types in the type context, then it would be clear 
04:49:42 <may> but im not sure 
04:50:06 <may> if anyone can help, thats great 
04:50:46 <shapr> in Haskell I've seen forall a.a
04:54:39 <may> shapr, are you french ?
04:54:54 <shapr> non, merci
04:55:01 <shapr> je suis american
04:55:17 <shapr> mais, j'habiter en suede (?)
04:55:24 <may> -r
04:55:29 <shapr> merci
04:55:45 <shapr> it's been a long time since I had french classes
04:57:16 <may> damn it, i discovered that continuation passing style, its really good, i wanted to do something like that but it does exist already heh doh ;)
05:10:56 <earthy> :)
05:31:40 <Dark|Shadow> is there a standard function in haskell to square?
05:32:08 <shapr> @type (^2)
05:32:09 <lambdabot> (^2) :: forall a. (Num a) => a -> a
05:32:15 <shapr> @type (**2)
05:32:16 <lambdabot> (**2) :: forall a. (Floating a) => a -> a
05:32:52 <MakeMyDay> why can't I use mod on integers?
05:33:07 <Igloo> @type (^^2)
05:33:09 <lambdabot> (^^2) :: forall a. (Fractional a) => a -> a
05:33:13 <Igloo> Just for completeness  :-)
05:33:22 <Dark|Shadow> thx
05:33:33 <Igloo> You can
05:33:43 <Igloo> ^2 is the one you want incidentally
05:34:18 <MakeMyDay> damn it , working with neverending streams of numbers is frustrating
06:04:07 <MakeMyDay> hm..
06:04:39 <MakeMyDay> I have String , but I want to analyse it's everycharacter , how do I do that? Is there something like "a:as" for lists? 
06:06:50 <Igloo> (a:as) /is/ for lists
06:07:27 <Igloo> Oh, I think I see what you mean
06:07:50 <Igloo> You can say (x:y:z:zs) to get the first 3 elements and the rest, but you can't do it for the general case
06:08:00 <MakeMyDay> yeah I mean something equivalent for strings..
06:08:03 <MakeMyDay> hm ok
06:08:04 <Igloo> You can either recurse over the list yourself or use a function like all or any
06:08:19 <Igloo> strings are just lists (of Chars)
06:08:44 <Igloo> Ahh, I see what you were asking now  :-)
06:10:09 <MakeMyDay> :)
06:10:34 <Igloo> So yeah, you just used the list syntax
06:11:17 <MakeMyDay> yeah I thought it wasn't working but it was some stupid layout error
06:11:18 <MakeMyDay> thx!
06:22:31 <shapr> oy vey
06:22:40 <shapr> what's goin on?
06:24:21 <Igloo> vey?
06:24:37 <shapr> yah, that's yiddish
06:24:52 <Igloo> Ah
06:25:20 <shapr> not that I know what it means
06:26:25 <bringert> last. class. ever.
06:26:26 <Igloo> :-)
06:26:52 <shapr> bringert: you gonna graduate?
06:27:03 <bringert> some day
06:27:26 <shapr> do you have a job lined up already?
06:27:29 <bringert> still have a thesis to do
06:27:38 <bringert> nope
06:27:40 <shapr> oh, what about?
06:27:48 <bringert> well, I have one over the summer
06:27:54 <bringert> dunno yet
06:28:30 <shapr> any vague plans?
06:29:13 <bringert> probably something to do with computer science
06:29:21 <shapr> heh :-)
06:29:38 <shapr> no thesis on the weaving styles of amazon birds, eh?
06:30:19 <bringert> hmm, I also have to get started on the thesis for my degree in russian
06:30:30 <bringert> that's not going to be about birds either
06:33:04 <SyntaxNinja> y0y0 shapr
06:33:06 <SyntaxNinja> how's life?
06:33:08 <shapr> how many degrees are you getting?
06:33:28 <shapr> y0 SyntaxNinja, I'm dealing with the vagaries of procedural software
06:33:38 <shapr> and with bea standing over my shoulder
06:34:31 <bringert> shapr: only two
06:34:50 <bringert> yikes, procedural languages
06:34:55 <bringert> I feel so dirty
06:35:16 * shapr does some mudslinging
06:35:30 <SyntaxNinja> shapr: sounds exciting. say "hi bea" for me.
06:36:48 <shapr> hi bea
06:37:16 <shapr> SyntaxNinja: should I get you one of the open source EuroHaskell tshirts?
06:38:11 <SyntaxNinja> shapr: pic?
06:38:45 <shapr> http://www.dtek.chalmers.se/~d00bring/misc/eh-tshirt-bjorn.jpg
06:39:01 <shapr> bringert: should I be hosting that myself?
06:39:27 <bringert> it's ok to keep it there
06:39:32 <SyntaxNinja> haha
06:39:41 <bringert> I think the server can handle it
06:39:44 <SyntaxNinja> I like the symbol.
06:39:48 <shapr> me too
06:39:49 <SyntaxNinja> (logo)
06:40:03 <shapr> both Marvin-- and bringert worked on it
06:40:55 <shapr> the logo
06:41:01 <SyntaxNinja> I would proudly wear such a shirt, but I suppose it would be difficult to deliver, adn I have no plans to go back to europe any time soon.  thanks, though!
06:41:21 <shapr> bringert: putting the agenda up as a type proof was sheer genius
06:43:32 <bringert> I'm hoping it isn't too obscure, seeing how you need to be in ((watches south park) `union` (read slashdot comments)) `intersect` (knows what an inference rule is)
06:43:38 <bringert> to get it
06:44:38 <bringert> otoh, maybe obscure is good
06:44:40 <SyntaxNinja> bringert: you don't have to watch south-park, since reading slashdot is enough to get that part of the joke
06:44:51 <bringert> hence the union :)
06:45:00 <SyntaxNinja> oh, yeah.
06:45:32 <bringert> obscure is probably good, that way people won't know you're a geek
06:45:55 <bringert> they will only know that if they are geeks themselves
06:46:00 <SyntaxNinja> I guess the set of (read slashdot) `intersect (knows ...) is pretty close to the size of (knows ...)
06:46:35 <SyntaxNinja> colin walters thinks the shirt rules too
06:47:04 <SyntaxNinja> bringert: oh, yeah... they won't know you're a geek.... suuuuuuuuuure
06:47:45 <bringert> :)
06:47:59 <bringert> ok, it does say hacking on there
06:48:41 <SyntaxNinja> the thing about geeky things, is that you don't have to understand them to know that they're geeky.  They just give off this geeky smell...
06:48:52 <bringert> true
06:50:02 <bringert> does really everyone read slashdot?
06:50:16 <ibid> no
06:50:36 <bringert> but you know what an inference rule is?
06:50:48 <ibid> sure
06:50:58 <bringert> SyntaxNinja: proof by example
06:51:27 <ibid> well, actually, it depends on how you define "read slashdot" :)
06:51:41 <SyntaxNinja> ibid: did you get the joke?
06:51:56 <ibid> which joke? :)
06:52:13 <ibid> http://www.dtek.chalmers.se/~d00bring/misc/eh-tshirt-bjorn.jpg?
06:52:21 <SyntaxNinja> the joke of the form 1) ..., 2) ..., 3) ..., ? 4) profit
06:52:31 <SyntaxNinja> or maybe that was too many steps.
06:52:49 <ibid> yeah, sure i know it :)
06:53:23 <SyntaxNinja> ibid: how?
06:53:31 <bringert> I think that in the extended slashdot form, any number of steps is ok, as long as the last one is profit, and that there is a ??? somewhere on the path to profit
06:53:49 <bringert> of course the original form is more stringent
06:53:52 <ibid> SyntaxNinja: it's hackerdom folklore :)
06:54:11 * bringert feels like watching the episode right now
06:54:14 * bringert does
06:54:17 <ibid> i had no idea people associate it with slashdot. i don't.
06:54:45 <ibid> how is south park related to that joke?
06:54:51 <Matt-W> it was in South Park
06:54:55 <Matt-W> was the plan of the underpants gnomes
06:55:04 <Matt-W> they had 1) steal underpants 2) ? 3) Profit!
06:55:07 <Matt-W> and a song, too
06:55:17 <ibid> evidently the south park writers know their lore :)
06:55:29 <Matt-W> I always thought they invented it
06:55:42 <ibid> perhaps
06:55:47 <Matt-W> But I may of course be wrong
06:55:56 <Matt-W> In fact, it's highly likely, since I've never attempted to find out for sure
06:56:01 * SyntaxNinja saw it on slashdot first, and has seen it in many places since then
06:56:07 <ibid> it  would not be the first time i catch on a fad later on
06:56:27 <Matt-W> ibid: I am number one fashion slacker, so you're not alone
06:56:35 <ibid> :)
06:57:01 <ibid> i have no recollection where i first saw that joke
06:57:27 <ibid> probably on some mailing list, possibly debian
06:57:32 <ibid> perhaps on some web page
06:57:40 <ibid> possibly but not likely on slashdot
06:57:44 <ibid> i'm very irregular there
06:57:52 <bringert> South Park, episode 30 (217), First Aired December 16, 1998
06:58:20 <ibid> almost certainly not in south park, as i have not seen any of its episodes
06:58:32 <ibid> just bits and pieces in the ads
06:58:59 <earthy> hey! it's a syntaxninja!
06:59:04 <ibid> what? i have moderation points on slashdot?
06:59:10 * earthy whacks syntaxninja around with a big trout
06:59:43 <earthy> and goes back to editing.
07:00:13 <bringert> why trout?
07:01:41 <MakeMyDay> how do I get the first element of a Tupel back?=
07:01:57 <MakeMyDay> Tuple
07:02:09 <bringert> @type fst
07:02:10 <lambdabot> fst :: forall a b. (a, b) -> a
07:02:19 <MakeMyDay> aahh rgr thx
07:02:43 <earthy> bringert: because it's the canonical slap-fish
07:03:11 <bringert> I always thought that was cod
07:05:48 <SyntaxNinja> earthy: erum
07:05:50 <SyntaxNinja> so is it too late?
07:06:00 <SyntaxNinja> earthy: lots of catching up to do... you know
07:07:28 <earthy> well, put it like this: get it to me within the next 6 hours and it'll be in. :)
07:08:10 <earthy> (you're in good company by the way... prof. Swierstra hasn't sent in anything either)
07:08:21 <earthy> and I've been bullying him quite a bit more. :)
07:08:46 <SyntaxNinja> earthy: so if nothing much has changed, say for the Debian group, should I submit something anyway?
07:09:04 <earthy> well, mail me that nothing much changed
07:09:06 <SyntaxNinja> I mean, it's sorta like, continuing to move forward as it should be, but nothing really to report. that's kinda the nature of that.
07:09:09 <earthy> I can recycle easily. ;)
07:09:23 <SyntaxNinja> or do you want me to do the recycling?
07:09:45 <earthy> you don't have to
07:09:52 <earthy> you just need to check if you want to add stuff
07:09:57 <earthy> and if so, send the additions
07:11:01 <SyntaxNinja> ok
07:23:08 <earthy> damn that sunburn
07:25:09 <MakeMyDay> is " / " a [Char] or a Char type ?
07:25:17 <earthy> 1st.
07:25:26 <MakeMyDay> hm
07:25:47 <earthy> ' ':('/':(' ',[])
07:25:51 <earthy> )
07:33:55 <bringert> @type " / "
07:33:56 <lambdabot> " / " :: [Char]
07:34:01 <bringert> @type '/'
07:34:02 <lambdabot> '/' :: Char
07:34:12 <earthy> @type "/"
07:34:14 <lambdabot> "/" :: [Char]
07:34:27 <bringert> @type (/)
07:34:27 <earthy> ah. so the " *are* the dead giveaway. :)
07:34:28 <lambdabot> (/) :: forall a. (Fractional a) => a -> a -> a
07:34:41 <forester> filter2 f xs = foldr (\x -> if f x then ([x] ++) else ([] ++)) [] xs
07:34:48 <forester> we're trying to express filter2 in terms of foldr
07:34:52 <forester> is there a better way than this?
07:34:55 * forester is andersca right now btw
07:35:05 <desrt> earthy; (/) is a function that takes 2 arguments and returns their quotient
07:35:46 <bringert> ([x]++) === (x:)
07:36:03 <earthy> desrt: where did I use (/) ?
07:36:04 <bringert> ([]++) === id
07:36:20 <desrt> earthy; sorry.  that was meant for bringert :)
07:36:24 * earthy grins
07:36:32 <desrt> bringert; no.
07:36:38 <bringert> desrt: ?
07:36:40 <SyntaxNinja> earthy: your wish is (finally) my command
07:36:43 <desrt> bringert; id works on all types
07:36:47 <desrt> []++ would only work on list types
07:36:51 * earthy is reminded of the cylons :)
07:37:01 <bringert> ok, I was sloppy
07:37:13 <bringert> they're not equal, I meant that it can be replaced by id
07:37:19 <desrt> right
07:37:35 <forester> bringert: ah, thanks
07:37:43 <desrt> but why would you?
07:37:47 <bringert> forester: what is the function supposed to do?
07:37:53 <desrt> []++ is so much more likely to win the haskell obfuscation contest :)
07:38:01 <bringert> desrt: :)
07:38:46 <forester> bringert: we're just seeing how many things you can do as foldr
07:39:22 <bringert> you can implement everything using foldr
07:39:35 <bringert> (everything computable anyway)
07:39:42 <forester> yeah :)
07:42:16 <bringert> @type (head . foldr (:) [] . (:[]))
07:42:17 <lambdabot> (head . foldr (:) [] . (:[])) :: forall a. a -> a
07:42:26 <bringert> much nicer than id
07:53:57 <earthy> yay! 14 entries of the >100 left.
08:02:07 <earthy> damn stupid me. almost classified syntaxpolices contribution as SPAM
08:03:21 <bringert> "EN1Arge YOUR L1BR4RY!!1!"
08:04:35 * earthy laughs
08:08:25 <bringert> is there a haskell library for drawing graphs?
08:08:36 <bringert> of statistics
08:08:39 <earthy> not that I know of
08:09:02 <earthy> though hgl might help a bit
08:09:07 <earthy> not sure
08:09:52 <earthy> nope, it doesn't, so nope, there isn't. :)
08:12:46 <bringert> I guess the gtk bindings or wxhaskell would be enough, and then just draw some lines
08:14:23 <earthy> yeah, but that's not really really helpful
08:15:22 <edwinb> Last time I wanted to do that I decided it was easier to output gnuplot data...
08:15:34 <edwinb> that's probably not really helpful either
08:17:25 <MakeMyDay> ok is there a nice Haskell editor that highlights parentheses etc for Windows ? My eyes will start bleeding soon...
08:18:29 <neologism> I use vim... and it suits me ;)
08:18:49 * esap suggests emacs.
08:19:06 <MakeMyDay> emacs for windows? I wasn't aware that it exists
08:19:21 <esap> yes it exists.
08:20:06 <MakeMyDay> ok downloading ..thx
08:20:56 <earthy> ummm... there is a set of eclipse plugins for haskell, nowadays
08:21:03 <earthy> haven't played with that though.
08:22:30 <MakeMyDay> anybody care to search for a lost/extra parenthesis ? :)
08:23:11 * esap never has had any problems with parenthesis (except in lisp :-)
08:24:29 <MakeMyDay> I think I would make a good lisp programmer then :)
08:24:31 <MakeMyDay> ('<',_)     ->  (Begin (printTag (b:bs))) 	 : (lex ( drop  ((length ( printTag (b:bs))) + 2) (a:b:bs)
08:24:54 <esap> you should learn to use '$'
08:25:00 <neologism> this looks rather lispish ;)
08:25:39 <bringert> $ kicks ass
08:25:46 <MakeMyDay> $ ? 
08:25:53 <bringert> @type ($)
08:25:54 <lambdabot> ($) :: forall b a. (a -> b) -> a -> b
08:26:07 <bringert> a way to avoid many parantheses
08:26:13 <esap> it's function application but with low precedence.
08:26:26 <MakeMyDay> not a bad idea
08:26:26 <bringert> f (x y) === f $ x y
08:26:43 <MakeMyDay> aaa
08:28:31 <MakeMyDay> I'm trying to find it but I can't get $ to be included in the search in google :P
08:28:42 <esap> in Prelude
08:28:54 <MakeMyDay> ow it's in the Prelude , ok.
08:30:15 <neologism> btw: is there any way how can I show definition of function in hugs interactive mode/
08:30:25 <neologism> I mean something similar to :t func for type
08:31:12 <esap> :edit ? :-)
08:31:34 <neologism> its not for functions
08:31:49 <neologism> hugs or ghci
08:32:40 <esap> I don't think they show the implementation. The interface can be shown with :type and :info.
08:33:02 <esap> But you can always read the source code...
08:33:08 <neologism> I saw something which could show me the code
08:33:28 <neologism> yes, I can read the code, but thats slower...
08:33:33 <neologism> for oneliners
08:33:54 * esap keeps emacs open all the time, not that slow to read any file.
08:48:16 <MakeMyDay> AAAAAAAAAAAa
09:04:13 <MakeMyDay> why is '\' an improperly terminated character constant?
09:04:53 <Philippa> because \ is an escape character
09:05:10 <MakeMyDay> ahh so how to I check if a character is the \ character?
09:06:59 <neologism> '\\' ?
09:07:36 <MakeMyDay> yeah it works
09:07:42 <MakeMyDay> I don't quite understand why though
09:08:27 <neologism> \ tells the next character wont be intepreted as a control char
09:08:59 <MakeMyDay> a rgr
09:12:22 <Philippa> \n is used to indicate a new line, there're a few other such sequences. So you need \\ for ordinary \ so you can write the string "\\n" (which is two characters)
09:13:45 <MakeMyDay> case (a,b) of ('\\',n) ->   blahblah
09:14:02 <MakeMyDay> this should be calles when a= \ and b = n   yes?
09:14:37 <ne1> If an earlier case had not already intercepted it.
09:15:00 <ne1> Ah you have no earlier case.
09:15:39 <MakeMyDay> well I have but it doesn't intercept it. But it doesn't get recognized. It is getting intercepted by the case after it
09:15:57 <ne1> It works for me.
09:15:58 <MakeMyDay> which is (_ , _)
09:16:51 <neologism> shouldt it be "case (a,b) of ('\\','n') -> blahblah" ?
09:17:04 <MakeMyDay> yeah yeah it is sorry about that
09:17:22 <ne1> ('\\', whatever) still matches ('\\','n')
09:17:35 <MakeMyDay> tried that also
09:18:09 <neologism> ne1: he might have that n defined in code before...
09:18:10 <MakeMyDay> when I try the function with ('\\' , 'n' ) it gives me a program error
09:18:50 <ne1> The global n will be hidden away.
09:19:27 <neologism> foo x n = blah bla where bla (x,n) where bla = case (a,b) ....
09:19:32 <MakeMyDay> ow I think I found the problem
09:20:32 <MakeMyDay> it's the fact that my argument is a string and in that string there are '\' characters.
09:20:40 <MakeMyDay> and it screws up right there
09:20:52 <MakeMyDay> or something like that
09:21:23 <neologism> MakeMyDay: you'd better show us the whole code
09:29:36 <Lunar^> Why does it takes so long to make a patch pretty :(
09:30:32 <ne1> neologism: http://www.haskell.org/onlinereport/exps.html#sect3.17.2
09:32:29 <ne1> For example {let n = 1 in case 2 of n -> n} see what happens.
09:36:35 <MakeMyDay> http://www28.brinkster.com/myvariouscrap/lexcase.txt
09:36:42 <MakeMyDay> in lex
09:36:54 <MakeMyDay> the program doesn't catch the 3rd case
09:37:16 <MakeMyDay> everything else works so don't try to understand my shamefull code
09:38:50 <ne1> would it have something to do with evil tabs?
09:39:14 <MakeMyDay> not sure what you mean
09:39:21 <MakeMyDay> the problem or the program?
09:39:27 <ne1> the program code
09:40:04 <MakeMyDay> it's a lexer for xml documents..
09:40:59 <MakeMyDay> so "<PLAY></PLAY>" would turn into [Begin "Play" , End "Play" ]
09:41:25 <ne1> Does "<PLAY></PLAY>" work?
09:41:31 <MakeMyDay> everything works
09:41:44 <ne1> alright then the tabs don't cause a problem.
09:41:58 <MakeMyDay> but the "/n" 's in the string get returned as [PCData "/n"]
09:42:19 <MakeMyDay> when they should be ignored
09:42:29 <_Codex> wouldnt it be \n?
09:43:06 <ne1> "\n\\n" what should you get?
09:43:17 <MakeMyDay> err..
09:43:29 <MakeMyDay> Codex : yes \n sorry
09:44:01 <MakeMyDay> ne1 : PCData "\"  I suppose 
09:44:10 <ne1> Why?
09:44:36 <MakeMyDay> no idea..it is an exercise so it doesn't have any real implementation...
09:44:48 <ne1> I am asking "should".
09:44:55 <ne1> I am asking specification.
09:46:15 <ne1> Alright you make up your mind on how you *want* to interpret "\n\\n" and then you will be able to code it up.  As of now I see confusion due to oversight.
09:46:56 <MakeMyDay> I told you it should be interpreted as [PCData "\" ] 
09:47:03 <MakeMyDay> ow wait
09:47:04 <MakeMyDay> arr
09:47:07 <MakeMyDay> I see your point
09:53:24 <ne1> There are three chars in "\n\\n".  newline, backslash, n.  I would think the lexer should skip the newline, then give [PCData "\\n"], i.e., PCData of the string having backslash n.
09:56:20 <MakeMyDay> wait.. /n  in a String is interpreted as a single "special" character?
09:56:43 <ibid>  /n is two characters, a slash and an n
09:56:50 <ibid>  \n is another story
09:56:56 <MakeMyDay> \n sorry
09:57:23 <ibid>  \n in a string or character literal denotes the line feed character
09:58:02 <MakeMyDay> ok so if I was to catch it with a case ( '\\' , 'n' ) wouldn't work 
09:58:35 <ibid> no, unless you actually want to catch the two-character sequence backslash en
09:58:47 <ne1> If you give it "\\n" it will be caught, but I contend that this is not the right behaviour when it comes to parsing xml.
10:00:59 <MakeMyDay> i wouldn't worry about the right behaviour this is supposed to be simplefied.
10:01:21 <MakeMyDay> and I can't give it "\\n" because I am catchin characters not string...
10:05:33 <ne1> ['\\','n']
10:15:55 <MakeMyDay> hmm.. I think I am going to ask my prof about exactly what he want's ...
10:15:59 <MakeMyDay> thx for your help though.
10:16:05 <MakeMyDay> you have been really helpfull
10:22:24 <MakeMyDay> baibai till tommorow:)
13:34:50 <ShaminoDC|FBK> is there a predefined function for prime numbers in the prelude ?
13:47:47 <ne1> No.
14:29:58 <shapr> gah
14:30:16 <shapr> I forgot to write a QuickCheck entry
14:30:22 <shapr> double foo!
14:30:38 <iolotusbobo> hey shapr
14:30:49 <shapr> hi iolotusbobo 
14:31:05 <iolotusbobo> howdy shapr ... how are you?
14:31:34 <shapr> I'm slightly inebriated. How are you?
14:34:31 <iolotusbobo> i am k s
14:38:59 <shapr> earthy: HC&AR tommorow?
14:39:03 <iolotusbobo> what did u take shapr
14:39:28 <shapr> iolotusbobo: two beers, one cider, and something else.
14:39:49 <iolotusbobo> heh :) shapr ... can u still walk on a straight line 
14:39:50 <shapr> happily, I weigh more than 100 kilos so it doesn't do much
14:40:18 <iolotusbobo> really shapr? a 100 kilos... u r kidding me
14:40:30 <shapr> no, it's true.
14:40:46 <shapr> http://www.scannedinavian.org/~shae/foto/shaecycle.jpg
14:40:57 <shapr> that's me and my unicycle
14:41:08 <iolotusbobo> u should do something about it then shapr ... run or something
14:41:19 <shapr> I'm not fat :-)
14:41:31 <shapr> just... large.
14:41:44 <Marvin--> "big bone"
14:41:47 <Marvin--> :-)
14:41:50 <shapr> right
14:41:56 <iolotusbobo> heh shapr :)
14:42:05 <shapr> Marvin--: you met me, am I overweight?
14:42:06 <iolotusbobo> 8 feets shapr ??
14:42:19 <shapr> no, pretty short actually
14:42:20 <iolotusbobo> oops...
14:42:25 <Marvin--> nah
14:42:34 <Lunar^> shapr: Stay tuned tonight :)
14:42:37 <shapr> anyway, I'm going to be social
14:42:45 <shapr> Lunar^: ohhh, hOp?
14:42:52 <Lunar^> shapr: I'm nearly done :)
14:42:59 <shapr> I'm going to be back tomorrow for code
14:43:00 <iolotusbobo> heh shapr ... social? ... going to a dance party?
14:43:03 <shapr> Lunar^: yay!
14:43:08 <Marvin--> man this sucks
14:43:11 <shapr> iolotusbobo: not exactly
14:43:16 * shapr disappears
14:43:19 <Lunar^> cya :)
14:44:00 * iolotusbobo prestos back shapr
14:51:04 <keverets> shapr: accidentally copy & pasted just shae/foto/shaecycle.jpg into firefox, which dropped me at http://www.shaemarks.com/ which I'm pretty certain is not you and your unicycle.
14:52:54 <iolotusbobo> shapr ... reappear()
15:02:04 <ShaminoDC|FBK> what is the proper command to check if something is element of a list
15:02:14 <ShaminoDC|FBK> should be something like
15:02:16 <keverets> `elem`
15:02:20 <ShaminoDC|FBK> k thx
15:24:41 <ShaminoDC|FBK> if i want to use this with int it says
15:25:03 <ShaminoDC|FBK> *** Type           : Int
15:25:03 <ShaminoDC|FBK> *** Does not match : [a]
15:25:37 <ShaminoDC|FBK> if b `elem` a then ...........
15:49:08 <Riastradh> What are a and b?
15:49:20 <Riastradh> @type elem
15:49:21 <lambdabot> elem :: forall a. (Eq a) => a -> [a] -> Bool
15:49:41 <Riastradh> If a is the element you're checking for and b is the list, flip the arguments.
16:11:50 <ShaminoDC|FBK> yes it was because it wasnt a list
16:11:55 <ShaminoDC|FBK> fixed it alrdy
17:09:46 <desrt> Cale; i have graphs now :)
17:25:36 <Cale> desrt: cool
17:25:58 <Cale> So is it fixed?
17:47:44 <blackdog_> can anyone explain to me in small words what polymorphic recursion is and what it's good for?
18:17:51 <desrt> Cale; i /msg'd you today from the seminar
18:17:58 <desrt> but you were ignoring me so you didn't notice until you got home :P
21:20:52 <tyler> hi, anyone can point me a (small) documentation about monads ?
21:21:21 <tyler> something straight forward
21:22:20 <desrt> tyler; what is the type of zipWith?
21:22:25 <desrt> (without looking it up)
21:23:28 <desrt> (for sake of fairness: zipwith takes 3 arguments.  the first is an operator.  the 2nd and 3rd are lists.  it applies the operator to the first element of the first and second lists to get the first element of the result, and so on...)
21:23:56 <desrt> if you can't type that, you don't have a hope in hell of understanding monads :)
21:25:01 <tyler> desrt: I'm not really into haskell, I just study it, I'm a maths student and I dont care about the arguments of zipwith
21:25:01 <tyler> :)
21:25:56 <desrt> ah.  if you're a math student you might have hope
21:26:48 <desrt> there's something about an introduction to monads for working haskell programmers
21:26:53 <desrt> i found it to be informative
21:27:04 <desrt> http://www.engr.mun.ca/~theo/Misc/haskell_and_monads.htm
21:27:05 <desrt> this one
21:27:22 <tyler> thanks
21:27:36 <tyler> btw, Im not really a math student, I just wanted that url.
21:27:37 <tyler> ;)
21:27:57 <desrt> if you're not a math student and you can't type that function, best of luck to you :)
21:28:29 <tyler> keep your judgements for you, thx for the url
22:01:06 <tyler> desrt: what are you into ?
