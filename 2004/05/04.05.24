00:35:27 <platypus> anyone know how to use labltk on windows ?
02:25:47 <Lunar^> LTU should really move to a real server
02:25:53 <Lunar^> It's always down :(
02:28:30 <bringert> like the one haskell.org uses?
02:28:33 <bringert> :)
02:29:11 <vegai> LTU?
02:30:10 * vegai guesses `Lambda the Ultimate'
02:34:48 <Lunar^> yes
05:48:30 <shapr> good afternoon #haskell!
05:48:48 <Lukhas> hello shapr
05:49:23 <shapr> bonjour Lukhas, comment ça va?
05:49:37 <Lukhas> va bien, et toi ?
05:59:24 <shapr> bien aussi
06:01:01 <Lukhas> parfait :)
06:20:55 <shapr> obonjour SyntaxNinja 
06:21:04 <shapr> gutentag Joachim
06:22:18 * shapr bounces cheerfully
06:23:00 <shapr> what's going on in the world of Haskell? anything new?
06:26:20 <blackdog_> we all saw the light and started learning Cobol. Man's gotta eat.
06:26:29 <Lukhas> :)
06:27:15 <bringert> shapr: what's that? Pascal?
06:28:05 <Lunar^> shapr: You need to finish the build :p
06:28:15 <blackdog_> we need to start an unoffical family of languages ending in -scal that are nothing like each other.
06:28:18 <shapr> oh right
06:28:48 <Lukhas> Rascal ?
06:28:52 <blackdog_> Rascal, a non-imperative language: point-blank refuses to do what it's told.
06:28:52 <shapr> Pascal Hascal Rascal Intercal Cobalcal
06:28:57 <blackdog_> damn, beat me to it.
06:29:04 <shapr> wow, in triplicate
06:29:42 <shapr> lambdacal
06:29:47 <shapr> pical
06:29:53 <blackdog_> catskills
06:30:02 <shapr> speaking of which, anyone tried Pict?
06:30:04 <blackdog_> (very boring language)
06:30:19 <blackdog_> WHat's Pict? ( restrains self from joke about woad )
06:30:51 <shapr> didn't the Catskills host the McCoys and the other family who had a generations long feud?
06:31:12 <shapr> Pict is a language that has something to do with pi calculus I think
06:31:21 <blackdog_> Hatfields.
06:31:25 <shapr> TaPL author had something to do with it
06:31:29 <shapr> right, hatfields
06:31:55 <blackdog_> pity. i think a language with insane screaming little blue dudes could only be a good thing for the world.
06:32:04 <SyntaxNinja> hejhej shapr
06:34:34 <bringert> hmm, this is amazingly inefficient
06:35:18 <shapr> oh, what is it?
06:35:50 <bringert> a query that I made with haskelldb
06:36:01 <shapr> blackdog_: http://www.cis.upenn.edu/~bcpierce/papers/pict/Html/Pict.html
06:36:27 <bringert> an equivalent query takes no time at all, but this one takes forever (for all values of forever that I have tried so far) in both mysql and postgre
06:37:25 <blackdog_> shapr: mad. anything that helps control the complexity of concurrent programming is an unalloyed Good Thing.
06:37:28 <bringert> otoh, it's generating the query straight from abstract syntax for english
06:37:43 <shapr> oh there's your problem
06:38:18 <shapr> should have used german ;-)
06:38:27 <bringert> :)
06:39:19 <bringert> the query uses three levels of nested queries, and needlessly joins a table with itself 
06:39:21 <blackdog_> shapr: no plug for lojban?
06:39:27 <bringert> among other atrocities
06:39:40 <juhp> bbl
06:39:47 <bringert> shapr: the abstract syntax is actually language independent, I think
06:40:04 <bringert> so you can write a german frontend for me if you like :)
06:40:18 <blackdog_> <clueless newb> is there much work done on automatically rewriting SQL to be more efficient? </>
06:40:35 <bringert> haskelldb does some of that already
06:41:20 <blackdog_> not enough, clearly. :)
06:41:28 <bringert> the rdbmss (what's the plural of acronyms ending in s?) also do a lot of optimization
06:41:39 <bringert> blackdog_: :)
06:43:58 <shapr> blackdog_: it's a natural language class project I think
06:44:51 <shapr> bringert: if I rearrange the curryspondence table structure some will it affect what you're doing?
06:45:26 <bringert> not really
06:45:32 <shapr> ok, cool
06:45:44 <bringert> I am using a slightly modified table anyway
06:46:11 <shapr> oh can I pull updates?
06:47:12 <bringert> I haven't modified SearchML to use it (basically it's just a few changes in nullability)
06:47:20 <bringert> but I can do that if you want
06:48:42 <bringert> btw, it might be good to include the DBDirect-generated files in the repo
06:49:30 <bringert> since if you use mysql, DBDirect reports a different nullability of the msgdate field
06:49:44 <shapr> ok
07:59:41 <SyntaxNinja> cool, -Wall just caught a bug before it became a bug :)
08:00:11 <JaffaCake> anyone here know much about O'Caml?
08:01:30 <JaffaCake> guess not :)
08:01:41 <SyntaxNinja> hmmm. that might be a good one for the quotes page...
08:02:24 <Igloo> Therre are a couple of ML people he hang out here - Riastradh and mattam I think. I'm fairly sure mattam is O'Caml in particular too
08:02:30 <eivuokko> Hey, JaffaCake, wasn't it you that had Vs.Net stuff for Haskell?  How's it going?
08:02:31 <earthy> oh dang. look at the time.
08:02:33 <Igloo> s/he/who/
08:02:45 * SyntaxNinja was into O'Caml before I got a job doing Haskell, but I've forgotten most of it by nopw
08:02:55 <JaffaCake> eivuokko: it's coming along (slowly)
08:03:42 <shapr> earthy: how's HC&AR?
08:03:43 <JaffaCake> eivuokko: planning to get something shippable by the end of the summer
08:04:04 <earthy> shapr: getting the HTML ready as we speak
08:04:04 <eivuokko> JaffaCake, Cool!  What's missing?  Something haskell newbie can help with?
08:04:11 <shapr> earthy: yay!
08:04:14 <Lunar^> earthy: neat ! :)
08:04:26 <JaffaCake> eivuokko: not really, it's pretty hairy stuff
08:05:03 <Lunar^> .NET may help us getting paid Haskell job... maybe
08:05:09 <eivuokko> JaffaCake, Ok :)  Drop me a note if I can help, or even test :)
08:05:16 <JaffaCake> sure, no problem
08:05:44 <JaffaCake> Lunar^: it's VS rather than .NET I'm working on, but there is a project to target .NET too
08:06:21 <Lunar^> JaffaCake: goes together I think for management people
08:06:24 <JaffaCake> we're just not convinced that anyone is going to actually want Haskell on .NET when they see how slow it's going to be :)
08:06:38 <Lunar^> Is F# so slow ?
08:06:51 <JaffaCake> F# doesn't have updates
08:07:01 <JaffaCake> and it's a better fit for .NET
08:07:24 <JaffaCake> also Haskell's type system is a bit too general even for .NET with generics
08:07:33 <JaffaCake> so you'd be running unverified code
08:07:54 <Lunar^> Any .NET code is unverified compared to Haskell code, don't you think ? :)
08:08:04 <andersca> not really
08:08:43 <JaffaCake> it's a question of whether it's worth targetting .NET compared to running native code, and it's not clear there are any real benefits
08:09:03 <andersca> JaffaCake: well, being able to use existing .NET code
08:09:10 <andersca> although you can do that already with hugs and ffi
08:09:14 <andersca> although hugs doesn't compile 
08:09:17 <Lunar^> Write GUI in C#, algorithms in Haskell
08:09:25 <JaffaCake> andersca: you can do that already, without running your Haskell code on .NET
08:09:33 <JaffaCake> yep
08:09:49 <JaffaCake> GHC has the same support for .NET interop as Hugs
08:09:51 <Lunar^> Though, I would prefer not have to do any C# :)
08:09:52 <andersca> ah, cool
08:09:59 <andersca> JaffaCake: who did the ilx backend for .NET?
08:10:04 <andersca> JaffaCake: did don do that?
08:10:08 <JaffaCake> yes
08:10:13 <andersca> interesting
08:10:14 <JaffaCake> he gave up on it, though
08:10:18 <andersca> ah
08:10:18 <Lunar^> I'm a lot interested in the Objective-C binding
08:11:42 <Igloo> What do you mean by "F# doesn't have updates"? Updating closures in the heap with something more evaluated?
08:12:12 <JaffaCake> yes
08:12:33 <JaffaCake> updates are really common in lazy languages, so you need direct support for them
08:12:46 <JaffaCake> .NET doesn't have anything like updates or indirections, last I checked
08:13:47 <Igloo> In managed mode or at all?
08:14:07 <Igloo> (I mean verified, not managed, I think)
08:14:11 <JaffaCake> at all, really - it's a property of the storage manager
08:14:58 <JaffaCake> sure you can program your own indirections, but the GC won't remove them
08:15:09 <Igloo> Ahh, I see
08:15:21 * andersca reads about cool type system extensions in ghc
08:19:30 * earthy heads for a train to finish up the last details and the announcement in
08:24:55 * shapr waits excitedly for the HC&AR release
08:37:20 <Lunar^> shapr: Mhh.. I think you're one of the most featured :)
08:46:03 <shapr> Best Supporting Actor maybe
08:46:29 <shapr> but the people who write the code are the important ones
08:47:31 <shapr> hi an9n
08:47:37 <an9n> hey
08:47:50 <Lunar^> shapr: Mhh stop that low self-esteem, your communication role is really important :)
08:47:57 <shapr> you just registered for EuroHaskell, yah?
08:48:08 <an9n> shapr yes I did
08:48:16 <shapr> an9n: cool!
08:49:04 <bringert> an9n: welcome
08:49:12 <an9n> shapr: Found a poster on a wall at school and had to check it out ;)
08:49:14 <shapr> Lunar^: when I have sufficient Haskillz to write and release missing libraries, I'll be happier.
08:49:21 * shapr points at bringert 
08:49:28 <an9n> bringert: thanx
08:50:14 <Lunar^> shapr: I think you have the skills, you're just missing time
08:50:29 <shapr> bringert is head of marketing for EuroHaskell (and head of premise organization, and head of beer outlet finding, and head of...)
08:50:54 <bringert> shapr: are you the tail then?
08:51:04 <shapr> hah!
08:51:12 <an9n> lol
08:51:21 * shapr laughs
08:52:18 <shapr> Lunar^: we'll see in the summer. I should have more time then.
08:53:21 <shapr> an9n: so, have you written any Haskell code?
08:54:03 <an9n> shapr nah, not as much as I would have liked to...
08:54:42 <shapr> do you have any code online?
08:54:51 <an9n> shapr, nope
08:55:18 <shapr> how did you get into Haskell? chalmers?
08:55:50 <an9n> shapr, yes I'm in the CS programme, so all my haskell has been labs at school so far
08:55:54 <shapr> I got Haskell books for my birthday a few years back and was hooked
08:57:24 <an9n> shapr, but I think it is interesting
08:57:44 <shapr> me too
08:57:57 <shapr> I like the way all the state is in one place
08:58:13 <shapr> I think that makes testing and reuse easier
08:58:57 <shapr> is your nick short for an9nymous?
08:59:21 <an9n> shapr, heh, no I sometimes get that question
08:59:55 <an9n> shapr, its a pun of my realworld name, and a looong story too !
09:00:31 <shapr> hm, I'll ask you at EuroHaskell
09:00:38 <an9n> shapr, I'll tell you .... yes exaclty
09:00:54 <_Codex> the theory is interesting.
09:01:18 <shapr> _Codex: haskell theory?
09:01:36 <_Codex> yes. (categories, I'd suppose)
09:01:43 <an9n> And, oh, btw, what will be happening at Eurohaskell?
09:02:31 <bringert> you saw the poster, right?
09:02:52 <an9n> I did obviusly take a look at the wiki;)
09:03:15 <an9n> ok.... beer hack  ...   profit!
09:03:16 <shapr> the priorities are 1) together and have fun, 2) write code 
09:03:33 <bringert> an9n: exactly
09:03:42 <shapr> oh, did you see the spiffy tshirt that bringert designed?
09:03:59 <an9n> yes I dide
09:04:11 <Marvin--> I want one too
09:04:18 <Marvin--> me want
09:04:26 <shapr> me three!
09:04:38 <bringert> the t-shirt is open source
09:04:49 <bringert> you have to build it from source yourself
09:04:54 <Marvin--> dang
09:04:54 * shapr grins
09:04:55 <an9n> So the idea is to bring a T shirt and get it printed on? Like burn your own?
09:05:06 <shapr> heh, burn your own copy
09:05:06 <bringert> yeah
09:05:23 * shapr wants TShirt ISOs
09:05:24 <bringert> burning it might not be a good idea
09:05:24 <Lunar^> bringert: Will you have paint ?
09:05:33 <bringert> Lunar^: yes
09:05:45 <Lunar^> bringert: cool :)
09:06:29 <bringert> does anyone have an iron they could bring?
09:07:37 <shapr> we've got one, dunno if it'll fit next to the unicycle.
09:07:44 <bringert> hehe
09:08:01 <bringert> probably easier if someone from gothenburg brings one
09:08:28 <bringert> andersca: do you have an iron?
09:08:37 <Marvin--> I have an iron :)
09:08:41 <shapr> yay
09:09:02 <bringert> lets all go to Marvin--'s place and paint t-shirts
09:09:12 <Marvin--> bad idea
09:09:18 <shapr> heh
09:09:20 <an9n> 0.o
09:09:35 <bringert> I didn't mean right now :)
09:10:03 <Jon> hi all
09:10:09 <bringert> hi
09:10:11 <an9n> hi
09:10:12 <Jon> I am revising hindley milner type stuff and I am thoroughly confused :(
09:10:13 <shapr> an9n: #haskell.se is our official spot for swedish discussion, if you're into that sort of thing. No Japanese, sorry.
09:10:17 <shapr> y0 Jon
09:10:32 <Jon> is the let x = y in z construct in HM identical to that in haskell, i.e. for common sub expressions
09:10:47 <Jon> or is it more intrinsically linked to the typing doodahs
09:10:49 <Jon> greetings
09:10:52 * Jon idles a little less
09:11:08 <an9n> shapr ... Japanese?
09:11:26 <shapr> just in case you're into Japanese :-)
09:11:56 <an9n> .... shapr ... youre more close to home than you think ... but why?
09:12:08 <shapr> why what?
09:12:25 <an9n> Why do you mention japanese?
09:12:44 * an9n getting curious
09:12:46 <shapr> google is the smart half of my brain.
09:12:54 <an9n> hahahahahaha
09:12:57 <chucky> heh
09:12:59 <Igloo> Jon: If you ignore the monomorphism restriction and the ability to bind multiple variables then I think it's identical (assuming you can use x in y in your HM system, anyway)
09:13:52 <Jon> Igloo: thank you
09:14:04 <Jon> two days until the Programming Language Design exam :-)
09:14:23 <kosmikus> Jon, Igloo: isn't HM let non-recursive?
09:15:07 <Philippa_> kosmikus: yes and no, you can support letrec
09:15:37 <Philippa_> hrmm, mebbe I should go grab the brick book from over there...
09:15:39 <Igloo> I'd have thought people would probably use HM to mean both, but the original had fix instead I think, yeah
09:15:46 <Jon> kosmikus: yes thats one thing in my notes
09:16:43 <kosmikus> Philippa_: I know, I just wanted to point out a possible problem :)
09:17:25 <Jon> thanks for your help gentlemen
09:17:40 <Jon> it appears that the introduction of `let' in the context of type-checking is a bit of a red herring after all
09:20:11 <kosmikus> Jon: I'm not sure I understand ... in HM, let is where generalization occurs
09:20:32 <Jon> ah
09:20:59 <Jon> I think I'm confident that I don't :)
09:21:03 * Jon awaits lecturer email 
09:21:08 <kosmikus> (which is the same as in Haskell), so it is different from a lambda
09:22:33 <kosmikus> let wouldn't be needed as far as reduction is concerned, where let x = y in z is treated the same as (\x. z) y
09:22:51 <Jon> thats true
09:23:40 <Jon> so how does it differ?
09:24:01 <kosmikus> for HM the difference is that in the lambda abstraction, x can only have monomorphic type, whereas in the let-statement, x can have a type scheme (a type with universal quantifications)
09:25:20 <Jon> aah
09:25:40 <kosmikus> and the reason why it is difficult to do the generalization for lambda as well is that a lambda abstraction can be seen apart from it's argument, i.e., y's type is not known during type inference for (\x. z)
09:26:12 * SamBv4 wonders what he was going to look for
09:26:13 <kosmikus> for a let, there is only one y that will ever be bound to x, and it's type can be inferred, so it is no problem to generalize based on that type
09:28:20 <Jon> right
09:28:57 <Philippa_> you can think of let as ((\x.z) y) all in one inseperable block
09:29:20 <Philippa_> letrec's more useful than that, of course, but hey
09:31:23 * SamBv4 remembers that he was going to look for something about optimizing bf compilation
09:34:55 * shapr grumbles at lambda.weblogs.com
09:42:19 <shapr> hi Heffalump, wassup?
09:42:27 <Heffalump> 'lo. AspectJ.
09:42:58 <shapr> do you get to talk to Hugunin?
09:43:18 <Heffalump> nope.
09:43:27 <shapr> aw
09:45:50 <Jon> thanks all, you've proved very helpful. I've made some more notes and it all seems to be consistent (although I couldn't argue with any certainty that I understood this HM thoroughly, yet). Going to catch some air and return to the books. hope to un-idle again in the near future!
09:51:12 <shapr> has someone already mapped monads/arrows to aspects?
09:52:04 <shapr> ah, yes
10:25:27 <an9n> Gotta run, catch you later ... !
11:03:05 <stepcut> shapr: where is the best place to get RFC822.hs ?
11:05:30 <shapr> don't, it sucks. Get Peter Simons' RFC2822.hs and friends
11:06:00 <stepcut> ok
11:06:02 <shapr> it was in haskell-libs Unstable/Peti/
11:06:09 <shapr> might be in the attic there
11:06:25 <shapr> if it's not I have a working though not recent copy
11:06:35 <stepcut> I just need something that can parse the file formats into a data structure
11:06:48 <stepcut> tla/arch uses that format for its patch-logs
11:06:54 <Lukhas> (from rfc822.hs) : "f <$> p   = do{ x <- p; return (f x) }" <- looks like perl
11:07:13 <stepcut> hehe
11:07:46 <shapr> WASHMail does some rfc822 parsing, but peti's code is thorough
11:08:02 <stepcut> ok
11:08:08 <stepcut> thanks
11:08:22 <stepcut> seems peti has a bunch of useful stuff here
11:08:31 <Marvin--> and quite silly too, it should just say (<$>) = fmap
11:09:08 <Marvin--> or liftM
11:28:17 <SyntaxNinja> shapr: got a pointer to your crazy keyboard?
11:29:05 <shapr> it's on my blog
11:29:40 <shapr> http://shapr.homelinux.net/~shae/blog/
11:31:07 <SyntaxNinja> I didn't realize my question was so timely :)
11:34:10 <Spark> as precise as your pieces, as timely as your toys
11:34:11 <desrt> that mainboard is disgusting
11:36:35 <shapr> desrt: whyso?
11:36:42 <desrt> too small
11:36:45 <desrt> i'd lose it :)
11:36:48 <Lukhas> lol
11:37:01 <shapr> the keyboard is too big to lose
11:37:09 <desrt> ok
11:37:13 <desrt> the keyboard is just plain disgusting :)
11:37:18 <shapr> so, put the mainboard in the keyboard...
11:37:21 <shapr> whyso?
11:37:22 * desrt likes his keyboards straight, thank you
11:38:14 <bringert> shapr: your blog says I'm a part-time lawyer
11:38:31 <shapr> er
11:38:33 <shapr> well
11:38:36 <bringert> that's some accusation
11:38:40 <shapr> lemme rephrase that
11:39:11 <shapr> how would you describe advokat?
11:39:26 <bringert> advokat == lawyer
11:39:54 <shapr> ok, was I confused about that swedish conversation?
11:40:00 * shapr is thinking yes
11:40:31 <bringert> hmm, I don't think I ever said that I am a lawyer
11:40:37 <bringert> but I can't rule that out
11:40:55 <bringert> I never know with me
11:41:09 <shapr> maybe I should say "does lawyery stuff in his spare time" ?
11:41:31 <bringert> but I don't
11:41:35 <shapr> ok
11:41:39 <bringert> :)
11:41:49 <chucky> maybe bring is a Haskell advocate?
11:41:55 <bringert> :)
11:42:28 <chucky> I'm officially attending EuroPython now by the way
11:42:36 <Marvin--> advocate != advokat :)
11:42:59 <bringert> advokat != avocado
11:43:01 <bringert> also
11:43:07 <Marvin--> mmm, avocado
11:43:27 <Marvin--> I had some the other day, but now they're gone :(
11:44:10 * shapr edits the bringert entry a bit.
11:45:37 <shapr> so, anyone else here wants me to link to their blog?
11:48:28 <Lukhas> sounds like "no" :)
11:48:35 * shapr agrees
11:50:48 <ibid> link from where?
11:51:08 <shapr> from my blog?
11:51:21 <shapr> could be a dangerous association :-)
11:51:22 <ibid> link if you want :)
11:51:25 <shapr> ok
11:51:49 * Marvin-- doesn't do blog
11:52:19 * Lukhas neither
11:52:41 <shapr> I'm trying it, could be interesting
11:53:02 <shapr> but I really want to have some sort of per-entry feedback
11:53:44 <bringert> shapr: turning plog into slashcode are we? :)
11:54:32 <shapr> hmm
11:54:39 <shapr> yah, sure
11:54:44 <shapr> why not?
11:56:06 <SamBv4> shapr: so do you not like the "what do you really want to do" policy?
11:56:27 <shapr> er, which policy?
11:57:08 <shapr> oh, you mean the irc stuff
11:57:21 <shapr> sure, that's a great approach
11:58:02 <shapr> but assumptions are often wrong
11:58:20 <iolotusbobo> 'lo shapr
11:58:33 <Heffalump> does shapr's blog do RSS?
11:58:53 <SyntaxNinja> Heffalump: no
11:58:59 <Heffalump> OOOH, OOOH, ImageMagick Haskell bindings?
11:59:02 * SyntaxNinja just asked that question :)
11:59:05 <ibid> planet haskell? ;)
11:59:11 <shapr> When someone joins #haskell, if I think I have a shortcut to their answer I say "if you're trying to do x, y will make your life much easier."
11:59:12 <SyntaxNinja> we definitely need a planet haskell.
11:59:31 <Heffalump> who would edit it?
11:59:40 <shapr> edit it?
11:59:46 <Heffalump> SyntaxNinja: sorry I missed you in Oxford, btw. That weekend turned out to be rather crazy.
11:59:46 <SyntaxNinja> shapr: you can link to my blog :)
12:00:03 <SyntaxNinja> Heffalump: yeah, same here.  just didn't work out, I guess.  would have been good to see you, though.
12:00:06 <shapr> SyntaxNinja: thanks!
12:00:12 <SyntaxNinja> shapr: thank you :)
12:00:58 <reffie> OOOOH OOOH
12:01:14 <shapr> SamBv4: imho, it's fine to jump ahead with an answer as long as you check with that person to see if that's what they want
12:01:22 <ibid> shapr: remind me of your blog's address :)
12:01:30 <shapr> http://shapr.homelinux.net/~shae/blog/
12:01:58 <bringert> reffie: does 'vittumagneetti' mean what I think it does?
12:02:02 <Heffalump> I thought you meant planet haskell like planet debian
12:02:02 <reffie> yes :)
12:02:11 <Heffalump> or maybe I'm confusing it with debian planet
12:02:39 <Marvin--> planet debian = blog collection, debian planet = community site
12:02:56 <SyntaxNinja> yes. we need both, but we should give them better names ;)
12:03:05 <SyntaxNinja> as to who would edit it, I propose "not me" :)
12:03:10 <shapr> I think between stepcut's RSS code and galority's CheckRDF, we can scrape up a haskell aggregator.
12:03:31 <monotonom> galority is a funny name
12:03:42 <Marvin--> SyntaxNinja: that's a lot of people
12:04:21 <SyntaxNinja> Marvin--: that's what I was thinking :) should find SOMEONE willing to do so, with such a big list...
12:13:20 <stepcut> shapr: what sort of haskell aggregator  ?
12:13:48 <shapr> like this --> http://planet.debian.net/
12:14:58 <reffie> http://www.microsoft.com/mspress/uk/
12:15:00 <reffie> pwnd
12:15:48 <shapr> ouch
12:16:43 <Hyp3rion> planetDebian is 99% lame :-/ http://debianplanet.org/node.php?id=1100
12:18:02 <Hyp3rion> reffie, Heh, msPress cracked 8-/
12:18:02 <shapr> hi darius- 
12:18:12 <darius-> howdy shae
12:18:15 <reffie> :\
12:18:31 <darius-> going to do the icfp contest this year?
12:19:19 <shapr> don't think so,  EuroPython and EuroHaskell are nearly at the same time.
12:19:22 <stepcut> more bad news for microsoft -> http://yro.slashdot.org/yro/04/05/24/1833210.shtml?tid=106&tid=109&tid=185&tid=187
12:19:45 <shapr> darius-: pickcheck is getting interest
12:20:07 <darius-> where's that?  perhaps i should actually promote it
12:20:58 <shapr> various places have been linking to it, zooko was one I think
12:21:05 <darius-> cool
12:22:26 <ibid> Hyp3rion: note that people like me who don't care about debian planet never noticed that article and hence did not take partin the discussion
12:23:01 <darius-> shae - he sent me a transcript where you mentioned:
12:23:05 <darius-> <shapr> imho it should/could subsume unit testing and design by contract
12:23:13 <shapr> yes, I think so
12:23:15 <darius-> <shapr> it even works with unit test first with an idea that Heffalump came up with
12:23:22 <shapr> yes it does
12:23:30 <darius-> don't think i've heard that idea
12:23:34 * shapr looks significantly at Heffalump
12:24:16 * darius- passes over in silence the part where someone mentions a cobol version :)
12:24:17 <shapr> it's easy, save the seed for any failing generated test, and try it first on the next run
12:24:20 <Hyp3rion> ibid?
12:25:05 <ibid> Hyp3rion: 22:16  <Hyp3rion> planetDebian is 99% lame
12:25:06 <darius-> ah, i thought you meant something like writing a concrete test first and then generalizing it into a quickcheck law
12:25:26 <darius-> yeah, the save-failures idea sounds like a good one, i should do something about it
12:26:19 <shapr> but, you need a "generate cases" feature for when you want to change the generator, since seeds won't be enough
12:27:02 <darius-> hm, well, the generator names are dynamically bound in lisp (since common lisp doesn't give you lexical globals)
12:27:04 <Hyp3rion> ibid, Well, planetDebian is kinda BLog... I just linked to that DebianPlanet page about planetDebian (err confusing eh?) because i wonder how many people think ther that planetDebian is lame ~= not interesting
12:27:07 <darius-> so you could rebind them
12:28:41 <ibid> Hyp3rion: i took it to mean that you think (or would like us to think that you think) that pd is 99 % lame, based on that dp article
12:30:03 <Hyp3rion> ibid, I dont read planetDebian :-/ Maybe a Haskell one would be cooler :-)
12:30:39 <desrt> Cale; ?
12:50:32 <skew> shapr: how are the laws in sweden?
12:50:40 <skew> I'm looking into the DMCA and such...
12:56:30 <Cale> desrt: hey
12:58:42 <desrt> is the pipeliner in a working condition?
12:59:06 <desrt> i've been working on optimising the code and i've gotten a 2-fold increase by doing memory tricks
12:59:20 <desrt> well.. better than 2-fold
13:00:07 <Cale> I'm not sure if it compiles or what :)
13:00:32 <desrt> it doesn't need to compile.. i'll use it with hugs =)
13:00:54 <desrt> (ya.. that was a joke..)
13:01:22 <desrt> hmm.  gcc's code generation on linux is significantly different than on OSX
13:02:16 <Chimaira> hey people
13:03:17 <desrt> apple has some goodies in their gcc :)
13:03:47 <desrt> anyway... today's topic: memory prefetches and cachline zeros
13:04:23 <desrt> oh.  and also: avoid over-aligning arrays with respect to each other
13:06:32 <d3z> quit
13:11:23 * an9n 's just lurking ;)
13:11:55 * SamBv4_ finds an interesting extract from a story at the end of a spam, and finds the real thing on google
13:21:15 <wagle> i'm looking at some code that uses a "when" function inside of do notation without defining "when".  is "when" standard haskell, or do i hunt down their defn?
13:22:32 <kosmikus|away> wagle: when is in Monad (or Control.Monad)
13:22:46 <Cale> when             :: Monad m => Bool -> m () -> m ()
13:22:56 <Cale> when p s         =  if p then s else return ()
13:23:02 <skew> the index of the GHC library documentation is really useful for looking up functions
13:23:08 <wagle> yeah.. i found it far away in their web pages
13:23:30 <wagle> thanks all
13:26:51 <d0pd0pd0p> hi !
13:26:57 <Cale> hello!
13:28:28 <d0pd0pd0p> i am sure you guys wont appreciate it, but can anyone ask some beginner haskell questions ?
13:28:42 <d0pd0pd0p> errr, with ask i meant answer :)
13:28:48 <SyntaxNinja> d0pd0pd0p: sure you can
13:29:06 <SyntaxNinja> erum. you can ask, I mean :)
13:30:34 <d0pd0pd0p> okay, i am currently trying to do my homework, and i have a problem wich i cant solve anymore by myself.
13:31:25 <d0pd0pd0p> i know the haskell basics, and my "programm" works for like 99% , but there is a small error/ mistake in the programm, so it wont run completly (can I post the sourcecode here ?) its about 20 lines
13:32:24 <SyntaxNinja> don't post it here...
13:32:30 <SyntaxNinja> @wiki HaskellIrcPastePage
13:32:31 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
13:32:42 <SyntaxNinja> post it there
13:32:44 <SyntaxNinja> but you might review:
13:32:47 <SyntaxNinja> @wiki HomeworkHelp
13:32:48 <lambdabot> http://www.haskell.org/hawiki/HomeworkHelp
13:33:35 <shapr> @index when
13:33:35 <lambdabot> Control.Monad,Control.Monad.Cont,Control.Monad.Error,Control.Monad.Identity
13:33:35 <lambdabot> Control.Monad.List,Control.Monad.RWS,Control.Monad.Reader,Control.Monad
13:33:35 <lambdabot> State,Control.Monad.Writer,Monad
13:35:28 <d0pd0pd0p> okay, i posted it in the IRCPAstepage
13:36:04 <d0pd0pd0p> i did sth wrong, because my source has no nice canvas around it
13:36:34 <wagle> i dont see it?
13:36:37 <d0pd0pd0p> i had to write a small function called simplify, which simplifies products and summs
13:36:52 <vajrabum_> It's at the top of the page, right?
13:37:04 <wagle> i see it now
13:37:26 <d0pd0pd0p> err, yeah
13:37:31 <d0pd0pd0p> it should be there.
13:37:58 <d0pd0pd0p> my products are nicely simplified (if a Con 0 is in the List, it is left out)
13:38:02 <SyntaxNinja> the last definition of simpleprod is not filled in
13:38:13 <SyntaxNinja> simplprod (x:y) = 
13:38:17 <d0pd0pd0p> yeah, that is exactly my problem.
13:38:25 <SyntaxNinja> is a syntax error
13:38:44 <d0pd0pd0p> if i simplify (Prod (Con 0, Con 1)) it works
13:39:08 <d0pd0pd0p> but if i simplify Prod (Con 1, Con 0) the Con 1 is still there.
13:39:46 <wagle> gee.. and i've been staring at the continuation monad..  >)
13:39:49 <d0pd0pd0p> The line would be "simplprod (x:a) = x:simplprod (a)"
13:40:07 <desrt> i take that back
13:40:16 <desrt> apple's gcc does *not* have tricks up its sleeve
13:40:29 <d0pd0pd0p> but this is wont work, it only works if it begins with Con 0 , if Con 0 is NOT the first member of the list, it wont work.
13:40:31 <SyntaxNinja> d0pd0pd0p: but then you wouldn't simplify x?
13:40:33 <desrt> it just seemed faster because linux was in powersaving mode when i ran the test.  linux actually beats osx :)
13:41:00 <vajrabum_> desrt, that's tricksy. Did you notice when you reran your test?
13:41:32 <desrt> original results were something like:
13:41:35 <desrt> osx: 6.7 seconds
13:41:37 <desrt> linux: 7.1
13:41:41 <d0pd0pd0p> SyntaxNinja, yeah you are right. In the Sum it is easy its like = "0+3+2+1+0"  becomes "3+2+1"
13:41:46 <desrt> but then i turned powersaving off in linux and got 5.3 seconds :)
13:41:51 <Riastradh> desrt, either way, gcc isn't exactly the kind of compiler to use if you really want speed.  If you really want speed on the PPC, use xlc.
13:41:53 <Dark|Shadow> linux rulez =)
13:42:07 <desrt> xlc, eh?
13:42:18 <vajrabum_> BTW, given OSX's mach kernel the result is no surprise if there's much at all in the way of system calls.
13:42:28 <d0pd0pd0p> but in the Prod it should become complete Zero. currently it is "3*2*0*2*5" becomes "3*2"
13:42:32 <desrt> no system calls
13:42:33 <SyntaxNinja> d0pd0pd0p: also, in the previous one, you are nnot handling "a"
13:42:34 <desrt> straight-up computation
13:42:57 <desrt> i think the difference is in the compiler
13:43:17 <wagle> desrt: i think apple's gcc does "compile" include files
13:43:18 <Cale> d0pd0pd0p: makes sense :)
13:43:30 <vajrabum_> Sounds like. Hmm, maybe it's just an older version of gcc. 
13:43:31 <SyntaxNinja> d0pd0pd0p: the normal way to do something like this is to handle the "head" item, then recurse over the rest of the list
13:43:44 <SyntaxNinja> oh, I see what you're doing there...
13:43:48 <desrt> wagle; i mean the speed difference is in the effiency of the code output by the compiler
13:43:53 <shapr> is there an apache plugin that will auto tempban ips that are scanning me for IIS flaws?
13:44:01 <desrt> not that it takes 5 seconds to compile :)
13:44:43 <vajrabum_> shapr, I don't know, but wasn't there a mod_slashdot referred to on one of the debian pages posted earlier?
13:44:45 <desrt> does xlc have a homepage or what?
13:45:00 <Riastradh> desrt, look about on IBM's web site.
13:45:05 <d0pd0pd0p> I search for something like, that clears the list completly, even if variables have been returned :(
13:45:11 <desrt> i just googled host:ibm xlc
13:45:18 <wagle> d0pd0pd0p: important question: when would your simply function know that 1 * 2 * 3 * 0 reduces to 0?
13:45:22 <Riastradh> (You might see that it costs loads of dough, but there is a free version somewhere.)
13:45:59 <shapr> vajrabum_: interesting, thanks
13:46:09 <d0pd0pd0p> wagle, it will return 1,2 and 3, then it sees the 0 and returns an empty list []. But 1,2 and 3 are already returned, so i cant change it anymore.
13:46:28 <vajrabum_> Better yet, it's written in python http://theory.stanford.edu/~amitp/proxy.html#proxy3
13:46:33 <desrt> and ibm's search is very borked
13:46:42 <wagle> d0pd0pd0p: then dont return them before you can decide whether you should return them
13:46:46 <SyntaxNinja> in TH, is there a way to test if a type is, for instance, the  "Int" from the prelude, when it comes out as "GHC.Base:Int" ?
13:47:09 <d0pd0pd0p> wagle, how can I do that ? Can I create a global variable that buffers the input ?
13:47:26 <d0pd0pd0p> can I write like a "for loop" wich checks the Array ?
13:47:28 <wagle> d0pd0pd0p: there arent global variables
13:48:04 <wagle> d0pd0pd0p: i'm leaving some insights for you to have..  i'm trying to point you away from your rut
13:48:17 <d0pd0pd0p> wagle, yeah i know. and there is no for loop. so, i dont know, how can i Dont return values ?
13:48:49 <wagle> helper functions can take more arguyments than the one they are helping
13:48:59 <Igloo> Prelude Language.Haskell.TH> do ConT x <- runQ [t| Int |]; print x; print (x == ''Prelude.Int);
13:49:02 <Igloo> GHC.Base.Int
13:49:05 <Igloo> True
13:49:05 <d0pd0pd0p> i am normally a c / c++ programmer, the whole haskell thing is quite hard for me to understand. I read some websites, it took my 24 hours to get my first program running :)
13:49:34 <wagle> haskell is a completely different way of thinking
13:50:07 <shapr> yes it is
13:50:11 <d0pd0pd0p> wagle, yeah i could post a helper function the complete list, but i cant iterate it....
13:50:17 <SyntaxNinja> d0pd0pd0p: sounds like you're trying to gear up too fast, you should have been able to incrementally build smaller programs that can work almost right away
13:50:21 <wagle> ... so yeah, you have to step back from your usual way of thinking
13:50:23 <shapr> but that way of thinking can improve you C++ code
13:50:30 <SyntaxNinja> Igloo: hmmm
13:50:35 <d0pd0pd0p> SyntaxNinja, do you think my program is large :) ?
13:50:45 <an9n> True, totally different ... that's whats so interesting.
13:51:33 <SyntaxNinja> d0pd0pd0p: it isn't a large number of lines, but you are trying to learn a large number of things at once :)
13:51:59 <SyntaxNinja> d0pd0pd0p: there are other ways, besides global variables, to keep information around between function calls :)
13:52:00 <wagle> d0pd0pd0p: think inductively.  what is sp []?  sp [1]?  sp [0]? sp[1,0]?
13:52:47 <wagle> sp[1,1]?  sp [1,?]?  sp [0] after sp[1,?]?  sp [0,?]
13:52:58 <d0pd0pd0p> wait, a sec
13:53:07 <d0pd0pd0p> i am getting an idea here.
13:53:20 <d0pd0pd0p> FYI I am like 8 hours now on this problem.
13:53:42 <wagle> d0pd0pd0p: its tricky, dont worry
13:54:28 <wagle> .. which is why its a good homework question
13:54:49 <vajrabum_> Is simplprod (Con 0:a) = [] a typo?
13:54:52 <d0pd0pd0p> sp (Con 0:y) = []
13:54:52 <d0pd0pd0p> sp (x:y) = if sp(y) != [] then return y else return []
13:55:01 <d0pd0pd0p> this i my new idea...
13:55:24 <wagle> d0pd0pd0p: try it out
13:55:32 <d0pd0pd0p> vajrabum_, no if the first member is Con 0 it returns an an empty list.
13:55:39 <vajrabum_> Gotcha
13:55:46 <d0pd0pd0p> wagle, i would like to, but there is no IF in haskell
13:56:00 <wagle> if x then y else z
13:56:12 <d0pd0pd0p> yeah this is like C
13:56:13 <wagle> d0pd0pd0p: sure there is
13:56:38 <d0pd0pd0p> but its not in haskell , i am very sure, i tried for 8 hours, there is even no !=
13:56:54 <Riastradh> There's /=, not !=.
13:57:01 * an9n thinks | guards are pretty
13:57:24 * SamBv4 wouldn't be surprised if somebody had written a work of IF in haskell
13:57:46 <wagle> SamBv4: ?
13:58:04 <d0pd0pd0p> sp (Con 0:y) = []
13:58:04 <d0pd0pd0p> sp (x:y) = if sp(y) != [] then return y else return []
13:58:06 <d0pd0pd0p> sorry
13:58:13 <d0pd0pd0p> sp (Con 0:y) = []
13:58:13 <d0pd0pd0p> sp (x:y) = if sp(y) != [] then return y else return []
13:58:15 <d0pd0pd0p> ???
13:58:23 <wagle> dont use return
13:58:31 <d0pd0pd0p> I am sorry again my IRC client is fuxx0rd
13:58:35 <SyntaxNinja> d0pd0pd0p: != is actually /= in haskell
13:58:45 <d0pd0pd0p> SyntaxNinja, WTF ? really ?
13:58:54 <an9n> lol you are a syntaxninja!
13:58:55 <Riastradh> d0pd0pd0p, that's what I _just_ said a minute ago.
13:59:06 <SyntaxNinja> d0pd0pd0p: are you using an interpreter?
13:59:13 <SyntaxNinja> d0pd0pd0p: type: if True then "foo" else "bar"
13:59:16 <vajrabum_> Might take a look at section 3.6 of the haskell report as well http://www.haskell.org/onlinereport/exps.html
13:59:32 <SyntaxNinja> if 3 /= 4 then "foo" else "bar"
13:59:39 <vajrabum_> Most of it isn't so obscure as to be intimidating.
13:59:52 <SyntaxNinja> an9n: :)
13:59:59 <d0pd0pd0p> not so fast, i am on the edge of success.
14:00:01 <d0pd0pd0p> one second
14:00:02 <wagle> there is a "return" function in haskell that is nothing like what you think it would be
14:00:57 <d0pd0pd0p> what does "Instance of Eq Expr required for definition of simplprod" mean ?
14:01:33 <SyntaxNinja> d0pd0pd0p: it means that you can't compare Expr's without implementing that by hand
14:01:52 <Riastradh> d0pd0pd0p, it means that you really ought to be reading a Haskell tutorial, not cramming snips of code together, tweaking that, and expecting it to somehow work.
14:02:46 <Riastradh> (or that you ought to ask your professor for help, if this is homework; I wasn't paying attention at the very beginning of the conversation)
14:02:58 <d0pd0pd0p> i think it works
14:03:34 <SyntaxNinja> Riastradh: yeah, it's homework.
14:05:05 <d0pd0pd0p> yeah its homework, no my professor wont help, i only have a very complicated script to understand the hole thing.
14:05:22 <Riastradh> d0pd0pd0p, why won't your professor help?
14:05:24 <d0pd0pd0p> the introduction to haskell is like 4 pages long in the script.
14:05:40 <d0pd0pd0p> Riastradh, that is normal in germany.
14:06:03 <d0pd0pd0p> either you find it out by yourself, or youre history. The professor wont help .
14:06:04 <Riastradh> This is an introductory Haskell course and your professor won't help you understand Haskell??
14:06:25 <d0pd0pd0p> its an course in building compilers.
14:07:30 <Riastradh> OK, s/introductory Haskell course/course in building compilers for languages you don't know (i.e. Haskell)/
14:07:56 <wagle> s/for/in/
14:08:14 <Riastradh> Nah.  'On' would be best.'
14:08:23 * Riastradh curses at his quote key and its proximity to the return key.
14:08:23 <wagle> heh
14:08:29 <an9n> *laugh*
14:08:29 <d0pd0pd0p> okay, i updated the IRCPaste-page.
14:08:30 <Riastradh> ...oh, wait.
14:09:04 <Riastradh> Are you writing the compiler in Haskell or a Haskell compiler?
14:09:08 <d0pd0pd0p> but this is quite common habit in germany, the professor sits in front, and says the exact words that are written in the scripts.
14:09:15 <Heffalump> who is the professor?
14:09:16 <SyntaxNinja> d0pd0pd0p: have you come across any of the Haskell Tutorials yet?
14:09:20 <SyntaxNinja> @wiki LearningHaskell
14:09:20 <lambdabot> http://www.haskell.org/hawiki/LearningHaskell
14:09:36 <d0pd0pd0p> then he hands out the homework, and then you are supposed to handle it
14:09:55 <SyntaxNinja> d0pd0pd0p: what are scripts?
14:09:56 <d0pd0pd0p> Heffalump, Peter padawitz, University Dortmund.
14:10:12 <wagle> d0pd0pd0p: if you are going to write a compiler in haskell, you really really need to go through tutorials, books, etc
14:10:15 <d0pd0pd0p> SyntaxNinja, like a book for the course
14:10:39 <SyntaxNinja> so you have a book on writing compilers, with a 4-page intro to Haskell?
14:10:51 <d0pd0pd0p> wagle, really i dont know what compilers have to do with haskell. and no we are not writing a haskell compiler
14:11:11 <SyntaxNinja> d0pd0pd0p: it's often the case that a compiler implementation is very elegant in a language like Haskell
14:11:24 <d0pd0pd0p> http://ls5-www.cs.uni-dortmund.de/index.en.html
14:11:25 <wagle> "compiler in haskell" /= "haskell compiler"
14:11:36 <d0pd0pd0p> wagle , right
14:12:03 <SyntaxNinja> d0pd0pd0p: by the end of this course, will you have a more-or-less real compiler in Haskell?
14:12:05 <Riastradh> d0pd0pd0p, what _are_ you going to write in this course, then?
14:12:18 * ibid has made that mistake once or twice
14:12:26 <d0pd0pd0p> SyntaxNinja, err no I dont know.
14:12:43 <d0pd0pd0p> I dont think that we will write a compiler in haskell.
14:12:48 <SyntaxNinja> d0pd0pd0p: because if you're going to spend a lot of time writing haskell code, you should go through the tutorials, and even perhaps buy a book
14:13:01 <SyntaxNinja> (like wagle said)
14:13:18 <d0pd0pd0p> Riastradh, currently we are trying to put a Moore or mealy automate into an haskell programm
14:13:27 <d0pd0pd0p> or a reg exp in an haskell programm
14:13:37 <Riastradh> Yes, but what are you learning Haskell for in this course?
14:14:14 <SyntaxNinja> Igloo: oddly, I get a "False" as the output there.  must be version differences
14:14:26 <d0pd0pd0p> Riastradh, I tell you the COMPLETE truth when I tell you, that I dont know WHY i am learning Haskell, I only know that I have to solve the Homework in Haskell, and thats it.
14:14:51 <SyntaxNinja> Igloo: also, how in the world could youg et a "True" output there?
14:14:56 <Igloo> Does the first line look right?
14:15:11 <SyntaxNinja> it says "GHC.whatever:Int" as I would expect
14:15:12 <Igloo> '' should give you the real name of a type
14:15:13 <Riastradh> d0pd0pd0p, do you know if you'll be doing anything without Haskell?
14:16:09 <Igloo> What does ''Prelude.Int say?
14:16:11 <d0pd0pd0p> Riastradh, I think all homeworks will be in Haskell.
14:16:15 <wagle> what is Igloo's code that you guys are referring to?
14:16:27 <SyntaxNinja> > do ConT x <- runQ [t| Int |]; print x; print (x == "Prelude.Int");
14:16:27 <SyntaxNinja> "GHC.Base:Int"
14:16:27 <SyntaxNinja> False
14:16:31 <SyntaxNinja> (for wagle)
14:16:36 <SyntaxNinja> Igloo: what do you mean by that?
14:16:51 <Igloo> Err, that's not the code I pasted is it?
14:17:09 <Igloo> If the code I pasted doesn't work you'll need later GHC
14:17:40 <SyntaxNinja> (16:49:02) Igloo: Prelude Language.Haskell.TH> do ConT x <- runQ [t| Int |]; print x; print (x == ''Prelude.Int);
14:17:40 <SyntaxNinja> (16:49:05) Igloo: GHC.Base.Int
14:18:00 <Igloo> Right, ''Prelude.Int not "Prelude.Int"
14:18:10 <SyntaxNinja> Igloo: oh, sorry
14:18:17 <SyntaxNinja> I fixed it :)
14:18:21 <SyntaxNinja> yeah, that gave me an error
14:18:54 <SyntaxNinja> d0pd0pd0p: I'm trying to be helpful when I say that you will probably waste lots of time tweaking your code and asking for help on IRC, without first going through one or more Haskell tutorials.
14:19:11 <SyntaxNinja> d0pd0pd0p: for instance, you should definitely have been introduced to both the Eq typeclass, and the (/=) function.
14:19:59 <SyntaxNinja> Igloo: so what does that '' syntax do? 
14:20:44 <Igloo> Gives you the Name of a type
14:21:49 <d0pd0pd0p> Yeah Haskell tutorials, will do it.
14:21:59 <d0pd0pd0p> but first ! MY program works !!!
14:22:15 <d0pd0pd0p> YEAH ! And only thanks to you guys, the hint with /= was great !
14:22:28 <d0pd0pd0p> wagle the idea of the recursion was great.
14:22:31 <SyntaxNinja> d0pd0pd0p: the one on the IRC paste page?
14:22:41 <d0pd0pd0p> i update the IRC page now a sec pls
14:23:51 <d0pd0pd0p> updated
14:25:14 <wagle> d0pd0pd0p: and you didnt even do it the way i was thinking of
14:28:28 <d0pd0pd0p> haskell is sooo ard
14:28:34 <d0pd0pd0p> err.... hard
14:29:37 <wagle> note that the time complexity of your simplprod is quadratic
14:29:40 <SyntaxNinja> d0pd0pd0p: oh, it's not too bad. steep initial learning curve is all, especially if you don't appreciate that you'll have to adopt a new way of thinking, and slowly try to adopt that way of thinking.
14:30:12 <d0pd0pd0p> 3 year ago i learned prolog.
14:30:33 <SyntaxNinja> prolog is so different that you can't trick yourself into thinking in C :)
14:30:40 <d0pd0pd0p> prolog has similiarities to haskell, but the course was easier.
14:31:22 <SyntaxNinja> compiler courses are usually pretty labor intensive
14:31:43 <SyntaxNinja> and the instructors usually like you to understand several kinds of programming languags
14:31:45 * SyntaxNinja goes home
14:36:55 * an9n logs off
14:37:11 * shapr analyzes logs
14:38:46 * wagle graphs on log-log
14:47:52 <shapr> is there any relation between MPI/PVM and Petri Nets?
16:56:24 <SamBv4> hmm. comments in type annotations don't seem to highlight right on the wiki... http://haskell.org/hawiki/ExistentialTypes exhibits the problem
16:59:45 <wagle> maybe it doesnt recognize -- comments?
17:00:09 <SamBv4> oh, shapr isn't here anyway
17:02:32 <wagle> could try {- comment -} if you are impatient
17:02:49 <Lukhas> it's symetric, so it looks better :)
17:05:36 <SamBv4> it does know about -- comments, though. It looks like a problem with the handling of :: to me
18:47:36 <SamBv4> <SamBv4> hmm. comments in type annotations don't seem to highlight right on the wiki... http://haskell.org/hawiki/ExistentialTypes exhibits the problem
18:48:01 * shapr looks
18:48:48 <shapr> oh, I think that's the simplistic enscript regexp matcher
18:53:53 <SamBv4> it does feel like that sort of thing
18:55:49 <shapr> hi nanda 
18:56:06 <shapr> looking for the land of pure code?
18:56:55 <nanda> hi shapr
18:57:06 <nanda> just came to hang around ...
18:57:17 <shapr> ah, pull up a hammock
19:15:03 <shapr> hiya Arnia 
19:15:12 <Arnia> Hey
19:16:00 <Arnia> How're you?
19:18:06 <shapr> doing okay
19:18:31 <shapr> playing with PLog, the Haskell blog software :-)
19:18:50 <SamBv4> what is the P for?
19:19:01 <Arnia> Sorry about my abrupt departure, I was in danger of saying something rude :)
19:19:04 * shapr writes about mobile phones and personal area networks
19:19:11 <shapr> no worries
19:19:33 <shapr> SamBv4: I don't know.
19:19:39 <shapr> oh!
19:19:45 <shapr> Pete's Log!
19:19:54 <shapr> I think that's probably it.
19:20:26 <SamBv4> hmm, being rude isn't too much of a problem here, is it? it is when you won't admit to having been rude that the trouble comes, afaik.
19:21:20 <shapr> people are rarely rude here on #haskell, I like that.
19:21:47 <shapr> I hacked around my mysterious problem, yay!
19:21:56 <shapr> and boy is it an ugly hack
19:22:11 <SamBv4> hmm. that isn't very nice, but it is better than nothing...
19:22:27 * shapr makes an unfactoring browser for automating ugly hacks
19:22:53 <Arnia> SamBv4: I would have been very rude and wouldn't have regretted it
19:24:22 <shapr> SamBv4: do you have a website?
19:24:39 <shapr> Arnia: oh, look at my blog: http://shapr.homelinux.net/~shae/blog/
19:24:45 * shapr hOps hAppily
19:26:15 <SamBv4> shapr: well, a person who I was does. but not me, no.
19:26:30 <shapr> that makes sense.
19:26:54 <shapr> could you direct me to the website of the person that you used to be?
19:27:41 <SamBv4> well, it isn't very interesting
19:28:02 <shapr> seems particularly sensible to me, I used to be someone else too.
19:28:33 <shapr> well, if you don't want to show it off, I can understand that.
19:32:17 <SamBv4> ;-)
19:33:01 * SamBv4 wonders if his almost exclusive use of the ;-) smiley is ever annoying
19:33:43 <SamB> of course, I also use the :-( frown, occasionally
19:34:36 * shapr uses real smiles carefully uuencoded from cheerful days.
19:34:47 <vajrabum_> lol
19:35:25 <shapr> hi vajrabum, wassup?
19:35:25 <SamB> shapr: on IRC?
19:36:26 <shapr> yes, my fiancee accuses me of not smiling much. I just hope she dosn't ever check my mail.smileys group in gnus.
19:36:58 <vajrabum_> I'm rereading SPJs Tackling the Awkward Squard this evening.
19:40:15 <shapr> I'm trying to fix this stoopid website.
19:40:36 <vajrabum_> This is for a client?
19:40:41 <shapr> yup
21:06:13 <shapr> hi dave007 
21:06:20 <shapr> are you a secret agent?
21:06:28 <dave007> hello shapr
21:06:54 <dave007> why yes, a cool british spy 
21:06:55 <dave007> hehe
21:07:38 <shapr> that's nice.
21:08:08 <shapr> Haskell is being used in crypto a lot lately, that must be why you're visiting us?
21:08:30 <shapr> looking for british spy quality gadgets?
21:08:52 <shapr> in fact, we have access to Q
21:09:45 <dave007> haha
21:13:03 <shapr> dave007: would you like to learn Haskell?
21:13:41 <shapr> Haskell has the coolest gadgets of any language I've used.
21:13:46 <dave007> yes, it sounds like an intrresting language
21:14:00 <dave007> but I don't know if I could use it at this moment
21:14:16 <shapr> what would you want to use it for?
21:14:31 <dave007> well, I do mainly kernel devb
21:14:32 <dave007> well, I do mainly kernel dev
21:14:49 <dave007> however, once in a while I will go to user space :)
21:15:01 <shapr> there is a Haskell kernel...
21:15:16 <dave007> I mean linux dev 
21:15:28 <shapr> and I know an excellent Haskeller who's also a linux kernel hacker
21:15:48 <shapr> I think he has used some tools written in Haskell to assist his kernel dev
21:15:49 <dave007> cool
21:16:04 <shapr> tools that he wrote himself
21:17:05 <dave007> ok, whats the best place to start??
21:17:15 <dave007> I supose its a structures lang right?
21:17:26 <dave007> structured
21:17:56 <shapr> @learn
21:17:57 <lambdabot> http://www.haskell.org/learning.html
21:18:04 <shapr> there are several tutorials
21:18:32 <shapr> if you have some experience with functional programming in Lisp, Scheme, elisp, etc
21:18:40 <shapr> then the Gentle Intro might be nice
21:19:07 <shapr> otherwise you may like "Yet Another Haskell Tutorial" more.
21:19:25 <shapr> I bought some books and meandered into Haskell.
21:20:03 <dave007> ok
21:20:12 <dave007> Im downloading ghc6
21:20:27 <shapr> if you use emacs, haskell-mode is nice
21:20:46 <shapr> I dunno much about Haskell with vim
21:20:54 * dave007 is an emacs lover
21:21:00 <shapr> me too
21:21:21 <shapr> debian has good Haskell packages
21:21:34 * dave007 is a debian lover
21:21:37 <dave007> (and slackware)
21:21:39 <dave007> hehe
21:22:00 <shapr> if you have debian handy you're in good shape
21:22:14 <shapr> ghc6 and ghc6-doc
21:22:16 <dave007> yeah, I have used debian for about 3 year now
21:22:19 <dave007> years
21:22:36 <dave007> apt-get install ghc6 ghc6-prof ghc6-doc haskell-doc hugs haskell-mode
21:22:37 <shapr> the Haskell Wiki has a bunch of useful info as well
21:22:41 <shapr> yup
21:22:56 <shapr> I don't think you'll need hugs
21:23:03 <dave007> ok
21:23:12 <shapr> hugs is an interpreter written in C
21:23:22 <dave007> ohh
21:23:23 <shapr> GHC is a compiler written in Hascell
21:23:34 <dave007> nice
21:23:51 <shapr> hugs is handy for doing Haskell on the Sharp Zaurus for example
21:24:07 <shapr> GHC is a hog, but worth it
21:24:17 <shapr> lambdabot uses GHC for example
21:24:25 <shapr> @yow
21:24:26 <lambdabot> I'm wet!  I'm wild!
21:25:09 <dave007> I see
21:25:20 <dave007> looks like a neat lang
21:25:46 <shapr> haskell wiki: http://www.haskell.org/hawiki/FrontPage
21:25:53 <shapr> lots of useful info there
21:26:58 <shapr> anyway, here's a syntax demo if you're impatient http://www.scannedinavian.org/AvianWiki/HaskellDemo
21:27:17 <shapr> and I can point you to more demo code if you like
21:27:23 <dave007> cool
21:27:41 <dave007> <shapr> dave007: would you like to learn Haskell? <--- how did you know I didn't know haskell??
21:28:06 <blackdog_> shapr knows every haskell programmer, ever
21:28:25 <shapr> really?
21:28:30 <shapr> cool!
21:28:34 <dave007> really?
21:28:48 <blackdog_> close enough for government work, anyway.
21:28:52 <shapr> heh
21:29:02 <dave007> the haskell community must be praying for new coders
21:29:03 <dave007> hahah
21:29:08 <shapr> seems possibly exaggerated to me
21:29:14 <shapr> ;-)
21:29:26 <blackdog_> I wouldn't exaggerate! I'm Australian!
21:29:45 <dave007> blackdog_, who won the super 12??
21:29:47 <ozone> knob.
21:29:50 * shapr thinks about that
21:29:54 <blackdog_> garn get stuff, andre. :)
21:30:00 <dave007> I missed it, due to a linux conference
21:30:01 <blackdog_> s/stuff/stuffed/g
21:30:18 <blackdog_> the brumbies. bloody thing wasn't broadcast on free to air, though.
21:30:20 <shapr> blackdog_: hey are you using PLog?
21:30:28 <ozone> <- raising the barrier to mediocrity
21:30:33 <dave007> awsome!! I have NZ rugby
21:30:33 <shapr> heh
21:30:34 <blackdog_> shapr: nah. still using movable type
21:30:44 <shapr> man, PLog is great
21:30:49 <dave007> I hate NZ rugby sorry
21:30:59 <dave007> I don't know what's the matter with my writting today
21:30:59 <shapr> have you seen my PLog?
21:31:10 <blackdog_> Why? It's interesting to watch - it's the english who bore me to tears
21:31:23 <blackdog_> shapr: where'd you see it last?
21:31:40 <shapr> swimming off southwards
21:31:44 <dave007> blackdog_, I think they're arrogant (specially the all blacks)
21:31:50 <blackdog_> dave007: weird game, though - they scored about 40 points in the first 20 minutes.
21:31:53 <shapr> ya know pets always try to travel home
21:31:53 <dave007> btw, I'm not english
21:32:00 <dave007> I'm american
21:32:05 <shapr> I'm not english either.
21:32:13 <shapr> I'm American too.
21:32:17 <dave007> blackdog_, wow
21:32:19 <blackdog_> dave007: of course they're arrogant, they're a tiny little nation that play rugby better than anyone but us. :)
21:32:51 <blackdog_> <wrenching it back on topic> shapr, what're you doing with Plog?
21:32:53 <dave007> shapr, where from?
21:33:06 <shapr> blackdog_: writing a blog :-P
21:33:11 <dave007> blackdog_, the do play good rugby do
21:33:17 <dave007> I can't argue that
21:33:17 * blackdog_ grits teeth and smiles sweetly
21:33:30 <shapr> dave007: that center of hi-tech, alabama!
21:33:36 <dave007> hahaha
21:33:41 <dave007> alabaaaaaaaama
21:33:58 <shapr> but I've moved house a bit
21:34:06 <shapr> I'm in Sweden now.
21:34:14 <dave007> I'm from SC and moved to chile
21:34:45 <shapr> blackdog_: http://shapr.homelinux.net/~shae/blog/
21:34:53 <dave007> dave@offworld:~$ ghc6 --version
21:34:53 <dave007> The Glorious Glasgow Haskell Compilation System, version 6.2.1
21:34:56 <dave007> :)
21:34:59 <shapr> yay!
21:35:18 <dave007> what a name
21:35:19 <dave007> hahaha
21:37:22 <shapr> blackdog_: I want to hack in RSS next
21:37:39 <shapr> and a commenting system
21:38:10 <blackdog_> velociraptors?
21:38:24 <shapr> you want details?
21:38:35 <blackdog_> I asked Pete about commenting. He said he had a spam-proof, totally reliable method in mind.
21:38:52 <shapr> or was that just an interjection of disbelief?
21:38:53 <blackdog_> People send him email, and if he thinks it's not stupid, he puts it on the blog. :)
21:39:09 <shapr> oh
21:39:10 <shapr> hm
21:39:12 <blackdog_> I'm curious what advantage you think you'll get.
21:39:31 <Cale> dave007: you can use ghci to play around with things, but not to make anything more than 1-line definitions (and definitions have to be prefixed with let)
21:39:52 <blackdog_> shapr: it's an issue, thhough. my movable type blog gets spammed all the time.
21:40:00 <shapr> advantages would be increased speed, mobility, stealth, and efficiency
21:40:14 <dave007> Cale, ok
21:40:28 <shapr> if you're still asking about velociraptors that is
21:40:40 <Cale> dave007: ghci actually makes a pretty good calculator :)
21:40:44 <dave007> do all haskell coders have blogs?? like the gnome community???
21:40:57 <Cale> I don't have a blog.
21:41:05 <blackdog_> shapr: how would you get those things? As soon as you move away from a vaguely anthropoid frame, you start to get control issues.
21:41:08 <dave007> Cale, I'm already playing with it (I really should be studying induction)
21:41:09 <dave007> hahah
21:41:13 <Cale> hehehe
21:41:13 <dave007> me neither
21:41:26 <Cale> Yay! I'm a counterexample!
21:41:32 <dave007> haha
21:42:06 * Cale is away: sleep.
21:42:31 <shapr> blackdog_: erm, I'll write it up
21:43:35 <shapr> velociraptors can lie flat easily, tail improves turning, limb structure is designed for running speed
21:43:54 <dave007> haha
21:44:37 <shapr> strong long legs with a sharp object attached would be real handy in a knife fight
21:45:19 <shapr> blackdog_: what do you think?
21:46:44 <blackdog_> it's a very different design. the original heinlein model was almost a jetsuit, i think - you'd spend most of your time in the air, in long loping jumps. and hand-to-hand? Not when you've got tacnukes.:)
21:48:45 <shapr> seems to me jumps would make a big target
21:50:39 <blackdog_> yeah, that's why they tried to keep them low, i guess. but you're right, a parabola is kinda predictable, even if it's flat.
21:52:09 <shapr> velociraptor body shape would help dissipate heat as well
21:53:06 <shapr> I had some ideas about dumping heat into the ground with spikes or something similar
21:53:52 <shapr> anyway...
21:53:59 <shapr> dave007: any more questions?
21:54:06 <shapr> I'm nearing bedtime
21:54:37 <dave007> shapr, no, but tomorrow I think I'll have a load
21:54:52 <shapr> that's great :-)
21:55:00 <dave007> so get a good night sleep so you can answer my daunting questions
21:55:01 <dave007> hehehe
21:55:12 <shapr> :-)
22:01:32 <dave007> http://shapr.homelinux.net/~shae/blog/images/eh-tshirt-bjorn.jpg
22:01:33 <dave007> nice
22:01:34 <dave007> heheh
23:37:59 <skew> hello. Lots of hacking tonight.
23:38:40 <skew> my code is getting pretty ugly though - I could use some help eliminating global tables and dealing with heterogeneous collections.
