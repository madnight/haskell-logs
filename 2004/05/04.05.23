02:39:31 <iolotusbobo> shapr, hello
03:48:50 * esap just found a wikipedia page on "pointless topology". Very funny name.
03:49:26 <basti_> lol
03:49:46 <esap> It ties very well with 'point-free notation' as well...
03:50:02 <basti_> is that set-theory-based topology?
03:50:16 <esap> yes, something like that.
03:50:22 <basti_> i see
03:54:03 <esap> It even refers to an article called "The point of pointless topology". Hmm.. 
03:55:54 <basti_> -g-
04:23:02 <shapr> @yow !
04:23:03 <lambdabot> Gee, I feel kind of LIGHT in the head now, knowing I can't make
04:23:03 <lambdabot>  my satellite dish PAYMENTS!
04:23:39 <shapr> good .. afternoon #haskell!
04:23:50 <basti_> hi shapr :)
04:24:45 <shapr> hey basti_ 
04:24:51 <shapr> what's goin on?
04:25:01 <basti_> oh not much just having a look
04:25:22 <basti_> a bit busy during the term
04:26:23 <shapr> yah, I've been busy too
04:28:06 <shapr> haven't had much time for fun code, which makes the time I do have that much sweeter
04:28:51 <basti_> ;)
04:29:57 <shapr> have you written any fun code lately?
04:30:24 <basti_> not at all...
04:30:52 <basti_> im attending a seminar about genetic programming... thought about doing that a bit... but nothing happened yet .)
04:31:02 <basti_> oh but i did a little Coq
04:31:25 <basti_> not exactly programming though
04:33:04 <MakeMyArs> can't I have an if clause in an if clause?
04:34:24 <basti_> back
04:34:26 <shapr> MakeMyArs: yes
04:34:28 <basti_> opera keeps crashing :(
04:34:40 <basti_> and now its killing my system too
04:34:45 <shapr> yuk
04:35:35 <MakeMyArs> ow ..stupid parenthesis
04:41:14 * shapr buuilds hOp
04:41:22 <basti_> whats that?
04:41:59 <MakeMyArs> ooooo it works
04:42:08 <shapr> the haskell Operating system
04:42:20 <MakeMyArs> you know when something works in Haskell I love it.
04:42:20 <shapr> http://www.macs.hw.ac.uk/~sebc/hOp/
04:42:21 <basti_> now that sounds interesting.
04:42:28 <MakeMyArs> When it doesn't I hate it with a passion.
04:42:36 <shapr> it is very interesting
04:43:00 <Lunar^_> Damn... I overslept
04:43:32 <Lunar^_> shapr: Did you looked at the code first ?
04:43:52 <basti_> ia32 is intel compatible 32 bit processors?
04:45:12 <shapr> Lunar^_: I'm just building it now
04:45:15 <shapr> basti_: yup
04:45:24 <MakeMyArs> weeeeeeeeeeeeeeeeee it works!!!
04:45:56 <basti_> mmd: what is working? ;)
04:46:40 <MakeMyDay> a never ending Stream of nonprimes
04:46:52 <MakeMyDay> newbie stuff:)
04:46:53 <shapr> yay
04:47:16 <basti_> i see
04:47:17 <basti_> ;)
04:47:39 <basti_> lol i showed hugs to a few friends lately and explained the fibonacci example
04:47:43 <basti_> their eyes like fell out ;)
04:47:47 <MakeMyDay> hehe
04:48:33 <shapr> :)
04:48:46 <MakeMyDay> Now for the XML Parser  :/
04:48:51 <basti_> "what you say, thats not infinite recursion?"
04:49:04 <MakeMyDay> But first I think I'm gonna take a brake...
04:49:26 <MakeMyDay> heh as I said when something that I wrote in Haskell work I love the language
04:49:29 <MakeMyDay> when it doesn't..
04:49:49 <Lunar^_> MakeMyDay: It always work, you just have to get it compiled first ;)
04:49:57 <MakeMyDay> ;p
05:06:14 <shapr> I think I should have tried make -j3 with hOp
05:07:58 <Lunar^_> I'm telling this all the time :)
08:32:59 <shapr> seems I'm not the first to think Haskell would be a good tool to analyze other languages
08:33:31 <shapr> Alistair Reid has written a nice C parser for the Cross Module Inliner at utah.edu
08:36:15 <shapr> hi Tomas 
08:36:39 <shapr> learning Haskell? long time user?
08:36:47 <Tomas> learning
08:36:53 <Tomas> I have a bit of a problem though
08:37:02 <shapr> yes?
08:38:22 <Tomas> when I try to write to a file it overwrites it
08:38:33 <Tomas> but when I put putStr file at the top it dosnt it then appends
08:39:08 <shapr> at the top of what?
08:39:15 <Tomas> at the top of the do
08:39:32 <chucky> are you reading and writing to the same file?
08:39:36 <Tomas> yes
08:41:22 <shapr> I've never tried reading and writing to/from the same file at the same time
08:41:44 <chucky> the problem is that readFile is lazy
08:41:53 <chucky> so the file is closed before the entire file is read
08:41:57 <Lunar^_> shapr: successful build ?
08:42:09 <Tomas> chucky: can I work around that without putStr?
08:42:40 <chucky> one of the solutions would be to do readFile fileName 'seq' return ()
08:43:04 <Tomas> ok
08:43:04 <shapr> Lunar^_: nah, crashed and haven't gotten back to it yet
08:43:32 <Cale> you want those quotes around seq there to be backticks: `
08:47:10 <chucky> Oh yes I forgot that. My keyboard layout is still in beta. Evidently i forgot to implement backquotes
08:47:21 * basti_ chuckles
08:53:27 <chucky> `seq` now it works. :)
08:55:12 <Tomas> nice now it works :)
08:55:12 <Tomas> thanks
08:55:48 * basti_ .o° ( synchronizity hello )
09:09:44 <Lunar^_> shapr: What crashed ?
09:30:33 <jadrian> newtype M = M Int        deriving Show
09:30:53 <jadrian> just wraps an Int
09:31:09 <jadrian> --
09:31:09 <jadrian> instance Wraper M a where
09:31:09 <jadrian>     unwrap (M n)  = 
09:31:09 <jadrian> --
09:31:18 <jadrian> opsss... clearScreen
09:31:40 <jadrian> -- wrapping an int
09:31:47 <jadrian> newtype M = M Int           deriving Show
09:31:58 <jadrian> -- class to unwrap things
09:32:09 <jadrian> class Wraper b a  | b -> a where
09:32:09 <jadrian>     unwrap   :: b -> a
09:32:21 <jadrian> -- instace to unwrap Ms
09:32:27 <jadrian> instance Wraper M Int where
09:32:27 <jadrian>     unwrap (M n)  = n
09:32:33 <jadrian> and my question is...
09:32:40 <jadrian> why do I need a fun dep?
09:33:04 <jadrian> to be able to define such an instance...
09:33:19 <basti_> -?-
09:33:38 <jadrian> I thought all they did was to avoid ambiguities
09:34:44 <jadrian> basti_: if I remove de functional dependency in my class definition
09:35:01 <jadrian> basti_: unwrap (M 1) -- won't work
09:35:28 <basti_> im not really "getting" what you are trying to do
09:35:35 <jadrian> not sure why that fun dep is needed
09:35:35 <basti_> mind to explain the idea?
09:35:58 <jadrian> I can do it, this is just a dummy example 
09:36:13 <jadrian> I trimmed down my code to make easier
09:36:37 <jadrian> My idea may be kind of ugly but I thought it could be handy
09:36:58 <jadrian> I'm using lots of newtypes
09:37:32 <jadrian> sometimes I'd like to lift functions to the underlying type
09:37:39 <jadrian> for instance:
09:37:39 <basti_> mmh
09:37:48 <basti_> ok
09:37:59 <jadrian> ID1 = ID1 str
09:38:03 <jadrian> ID2 = ID2 str
09:38:22 <jadrian> s/str/String
09:38:31 <jadrian> and add a newtype on the back
09:38:31 <jadrian> argh
09:38:43 <jadrian> newtype ID1 = ID1 String
09:38:46 <jadrian> newtype ID2 = ID2 String
09:39:21 <jadrian> so I just defined a class:
09:39:30 <jadrian> class Wraper b a | b -> a where
09:39:31 <jadrian>     wrap   :: a -> b
09:39:31 <jadrian>     unwrap :: b -> a
09:39:31 <jadrian>     lift   :: (a->a)->(b->b)
09:39:31 <jadrian>     lift f = wrap . f . unwrap 
09:39:42 <tautologico> hi
09:39:44 <jadrian> this works fine
09:39:46 <basti_> uhm just a moment
09:39:53 <jadrian> k
09:40:00 <tautologico> anyone using emacs on windows ?
09:40:12 <jadrian> nope
09:41:16 <tautologico> haskell-mode makes emacs (21.3) crash... it works well on unix
09:41:29 <jadrian> :-/
09:41:43 <jadrian> tautologico: have you tried Xemacs?
09:42:18 <jadrian> tautologico: I've heard good things about Xemacs on windows
09:42:38 <basti_> back
09:42:41 <jadrian> wb basti_
09:42:53 <basti_> whats the sense of | in a class definition?
09:43:05 <jadrian> oh, you don't know...
09:43:07 <tautologico> jadrian: I know, I used it sometime ago, but I didn't want to download the beast, it's huge :)
09:43:25 <jadrian> | b -> a  is a functional dependency
09:43:37 <jadrian> it means that a is uniquely defined by b
09:43:37 <basti_> ah now i know why i didnt understand that part.
09:44:12 <jadrian> at first it seemed to make sense to have it there, but now I wanted to get rid of it
09:44:16 <jadrian> bu I can't...
09:44:23 <jadrian> and not sure why
09:44:24 <basti_> hmm
09:44:39 <basti_> it says that the type is only dependant of b and not of a?
09:44:47 <jadrian> (admitedly I should probably read more about multi par classes)
09:45:00 <jadrian> no
09:45:17 <jadrian> it is a multi parameter class
09:45:25 <basti_> yes i see
09:45:36 <basti_> b and a are the parameters
09:45:37 <jadrian> yes
09:45:57 <jadrian> but for each b
09:46:03 <jadrian> you cannot have an instance with diferent a's
09:46:16 <basti_> i see
09:46:38 <jadrian> anyway I should just read more about multi par classes to see why I need the fun dep here...
09:46:48 <basti_> humma.
09:46:48 <basti_> ;)
09:46:57 <ne1> Without the fundep, you could implement both "instance AllPurposeWrapper Int" and "instance AllPurposeWrapper String". I don't think that would be good.
09:54:22 <jadrian> ne1: that's what I wanted to do ;)
09:54:47 <jadrian> ne1: anyway the problem is that it stops working for even just one instance
09:55:03 <jadrian> ne1: If I just keep, Instance ID1 String where ...
09:55:48 <jadrian> hmmm wait
09:56:08 <jadrian> nevermind
09:56:08 <jadrian> it works
09:56:21 <jadrian> argh I just remebered I'm working in the wrong file
09:56:24 <jadrian> :(
09:56:45 <basti_> lol
10:15:30 <basti_> re
10:16:28 <basti_> F(YF)=YF... -sigh- the elegance...
10:17:13 <tic> I still think that's pretty difficult to grasp :)
10:17:25 <basti_> oh yes it is ;)
10:18:29 <andersca> isn't it just a fixpoint combinator?
10:20:37 <basti_> i think he meant how to find it.
10:21:27 <tic> no, I meant it was difficult for me to grasp the concept of the fixpoint combinator.  Sure, I can unroll it, but I wouldn't understand it intuitively.
10:21:34 <basti_> oh
10:21:59 <basti_> i find the "unrolling" the harder part. strange.
10:27:16 <Cale> if you look at YF as a single thing, that equation is just the definition of a fixed point of a function. (i.e. a point x such that f(x) = x)
10:27:36 <basti_> yes
10:58:05 <ne1> Do not unroll.
10:58:14 * basti_ won't.
11:01:40 <stepcut> aahh
11:01:48 <Riastradh> Burma.
11:02:20 <shapr> Calcutta
11:02:33 <stepcut> Cuba
11:02:33 <ne1> Persia
11:02:44 <ne1> Romana
11:02:59 <Riastradh> Transylvania.
11:02:59 <Hyp3rion> Hungary
11:03:00 <shapr> Nantucket
11:03:09 <basti_> Kerguelen
11:03:19 <Cale> Nauru
11:03:22 * Hyp3rion ?
11:03:26 <shapr> man, I'm lost :-)
11:03:45 <Riastradh> Latvia.
11:03:54 <iolotusbobo> hey shapr whats it?
11:03:56 <ne1> Chengdu
11:04:08 <shapr> iolotusbobo: it's word association football
11:04:54 <ne1> Chang'an
11:04:57 <Riastradh> Jeff
11:05:19 <shapr> Goldblum
11:05:34 <Riastradh> Linker
11:05:40 <shapr> word association football is the ultimate party game
11:06:06 <shapr> it's the most efficient way to get to know someone (imho)
11:06:15 <stepcut> shapr: what about truth and lie?
11:06:28 <shapr> nah, that turns dangerous
11:06:31 <stepcut> :)
11:06:51 <Riastradh> <FNORD>
11:07:25 <shapr> rules for word association football: you can't reuse the same concept twice in the same game, and you have to explain the connection if someone asks
11:07:30 <iolotusbobo> how to play shapr
11:08:02 <shapr> you get some people, set up the order of players, and someone starts
11:08:15 <shapr> so I said Goldblum, and Riastradh said Linker
11:08:36 <shapr> Riastradh: what's the connection?
11:08:39 <iolotusbobo> so i can see gcc shapr ?
11:08:41 * stepcut goes of to play "add better hyperlink support to wash/cgi football"
11:08:49 <Riastradh> The terminal I was looking at said both 'Goldblum' and 'linker' somewhere on it.
11:08:59 <shapr> stepcut: oh, I want to play that too
11:08:59 <iolotusbobo> linker and gcc is a compiler shapr
11:09:03 <Riastradh> The <FNORD> was from 'dangerous.'
11:09:12 <Riastradh> Proceed!
11:09:17 <shapr> Riastradh: makes sense to me
11:09:37 <shapr> iolotusbobo: sure, that's a valid connection
11:10:11 <iolotusbobo> heh afk for a while ... bbl
11:11:26 <shapr> if the connection makes sense to you, it's valid
11:11:26 * shapr runs social experiments on a regular basis
11:11:44 <ayrnieu> McDonalds
11:12:11 <shapr> freedom
11:12:21 <ayrnieu> shapr - 1633? =)
11:13:18 <ne1> 55
11:13:19 <shapr> gee, who's playing?
11:13:30 <ne1> not me
11:13:30 <ayrnieu> shapr - well, I just asked a question.
11:14:19 <ayrnieu> (1633 has a organization, in the year 1633, that uses the golden arches of a transported McDonalds as their symbol of freedom.)
11:14:34 <MakeMyDay> has anybody programed Parsers with Haskell before?
11:15:15 <shapr> er, what's significant about 1633?
11:15:15 <shapr> calories in a freedom fry?
11:15:19 <Riastradh> Yes, someone has, MakeMyDay.
11:16:14 <shapr> meme!
11:16:26 <ayrnieu> shapr - a year.  "1632", the previous book, had a random small midwest US town suddenly transported into 1632 Germany.
11:17:04 <Spark> wicked
11:17:25 <Spark> vampires and barbarians
11:17:25 <Spark> and forests
11:17:25 <Spark> and knights
11:17:25 <basti_> in 1632 germany?
11:17:26 <basti_> curious.
11:17:26 <basti_> ;)
11:39:59 <shapr> whee
11:47:27 <iolotusbobo> ok shapr ... see u tomorrow then :) bye
11:48:12 <shapr> cya
12:27:16 <basti_> -sigh-
12:28:05 * shapr agrees
12:28:48 * basti_ nods
15:13:39 <wagle> what's the best candidate for a continuation monad in haskell (is there more than one)?  the implementation i have is virtually useless, largely due to "infinite type" errors whenever you try to do something
15:14:29 <Smerdyakov> I suspect you just don't know how to use it properly, if you can't do _anything_ with it.
15:16:48 <wagle> "first class continuations" as values
15:18:09 <wagle> i guess my question was whether i just didn't know how to use it, or whether i was using the wrong one
15:18:33 <wagle> i'm trying to do stuff that i could do in scheme
15:23:05 <Riastradh> wagle, what stuff in specific is that?  Since call/cc is the most general control flow manipulation construct, there's a lot of things you could be doing in Scheme regarding continuations that you wish to do in Haskell.
15:25:34 <wagle> i'm trying to do stuff with callcc, and get "infinite type" errors whenever i try to do something interesting, like return the continuation that was just grabbed
15:27:03 <wagle> i'm asking whether or not its likely that I grabbed the wrong implementation of the continuation monad, and whether i mioght be beating my head against a unbreakable wall
15:39:24 <wagle> the expression "callcc f", invokes f with a representation of the "current continuation".  is there a implementation of the continuation monad that lets you pass that continuation value out of the "callcc f" expression?
15:39:55 <Riastradh> Certainly.  You still need to be in a continuation monad computation, however, to use it usefully.
15:40:00 <wagle> all the examples i see only use the continuation within the f expression
15:40:33 <Riastradh> The continuation monad is basically just CPS written monadically.
15:41:14 <wagle> Riastradh: how do i return the "current continuation" from the "callcc f" expression..  what is a simple f?
15:41:48 <Riastradh> callcc (\x -> x)
15:41:53 <wagle> nope
15:42:03 <wagle> infinite type error
15:42:54 <wagle> ok, that one isnt infinite type, but still doesnt work
15:43:12 <wagle> ie "been there, done that"
15:44:12 <wagle> callcc (\k -> k k) is the infinite type one (not too surprising)
15:44:56 <Riastradh> It is somewhat difficult to utilize continuations in a language as strictly & statically typed as Haskell, compared with Scheme.
15:46:01 <wagle> i'm getting that idea..  but i'm still wondering how to return k from the expression callcc (\k -> ???)
15:46:38 <Riastradh> I haven't thought hard enough about it to be able to answer that very well.
15:47:13 <Riastradh> You will probably have to encapsulate it within some data type.
15:47:53 <wagle> my attempts to do that met with the "infinite type" errors
15:48:01 <Riastradh> (Have one variant for continuations and one variant for the 'real' result.)
15:48:34 <Riastradh> I'm too lazy and the Haskell REPLs I know of are too braindead for me to particularly want to experiment with it, and I'm busy hacking T's linker.
15:48:35 <wagle> hmm 
15:48:56 <wagle> no problem... thanks
15:49:24 <wagle> T? like the scheme variant?
15:49:37 <Riastradh> Yes.
17:19:01 * shapr hops
17:19:17 * stepcut hops
17:19:25 * stepcut hOps
17:20:13 * shapr boings
17:20:17 * shapr bOings
17:21:13 <stepcut> I hear bOing is much better than hOp, probably because it uses spears
17:21:49 <shapr> haha!
17:29:33 <Cale> spears should solve all the problems of combining arrows together :)
17:29:42 <stepcut> :p
17:29:57 <Pseudonym> Actually, there's probably some research to be done in coproducts of arrows.
17:30:29 <wagle> braided arrows?
17:32:48 <Pseudonym> Does anyone know the incantation for changing the pass phrase on an SSH key?
17:34:05 <stepcut> man ssh-keygen ?
17:34:19 <stepcut>      ssh-keygen -p [-P old_passphrase] [-N new_passphrase] [-f keyfile]
17:34:19 <wagle> google ssh change passphrase
17:34:29 <Pseudonym> Thanks.
17:34:45 <Pseudonym> Sorry, I would have used google/man, but I'm in a hurry.
17:34:52 <Pseudonym> My ssh key has been compromised.
17:34:55 <stepcut> fortunately, my irc client has a man page viewer built in ;p
17:35:22 <wagle> i sometime have difficulty getting hits out of google
17:35:35 <stepcut> Pseudonym Pseudonym, he's our man, if you can't change it, someone else can
17:35:35 <Pseudonym> And I need to fix it right now.
17:35:38 <Pseudonym> As you can imagine.
17:35:54 <Cale> ssh-keygen -p  apparently
17:36:07 <wagle> the webpage i'm at has it as
17:36:15 <wagle> ssh-keygen -p -t dsa
17:37:24 <wagle> (which assumes dsa)
17:38:46 <wagle> thats odd.  the man pages dont list -t as an option?
17:39:59 <stepcut>      -t type
17:39:59 <stepcut>              Specifies the type of the key to create.  The possible values are
17:39:59 <stepcut>              ``rsa1'' for protocol version 1 and ``rsa'' or ``dsa'' for proto-
17:39:59 <stepcut>              col version 2.
17:40:10 <wagle> one place recommends deleteing ~/.ssh/authorized_keys, then creating new key
17:43:59 <stepcut> I want to get a grant to make a rube goldberg cappuccino maker, except I have no experience. I wonder if that is a problem.
17:48:42 <wagle> i often compare gcc to a RB machine the size of oregon
17:48:46 <stepcut> haha
17:49:09 <stepcut> if I ever write a monad tutorial, I think it will be title 'The Amazing Monad'
17:52:46 <Pseudonym> Lesser known sidekick to The Amazing Rando!
17:54:23 <wagle> fill in the blank: get the expression "callcc (\k -> ???)" to return k somewhere in its value
17:54:58 <stepcut> in scheme or in haskell?
17:55:40 <wagle> haskell
17:55:49 <wagle> scheme is easy
17:56:04 <wagle> (call/cc (lambda (k) k))
17:56:06 <stepcut> i have done something similar to this before in haskell
17:56:10 * stepcut ponders
17:57:47 <stepcut> in ocaml you can specify a flag -rectype, but is frowned upon, because it's dangerous
17:59:14 * wagle shoots the occurs check
17:59:28 <stepcut> :
17:59:29 <stepcut> :p
17:59:45 <wagle> infinite types forever
18:00:17 <wagle> what good is a programming langauge without Y?
18:00:37 <stepcut> safe
18:00:55 <wagle> rubber room is safe
18:02:07 * wagle wonders whether AFA helps
18:09:27 <stepcut> wagle: http://www.haskell.org/hawiki/HaskellIrcPastePage?action=show
18:09:32 <stepcut> check the last entry on that page
18:10:07 <stepcut> its not quite what you asked, but it's a solution to solving the 'infinate types' error using a data type
18:12:07 <stepcut> f x = (x, f (x+1))
18:13:24 <wagle> jeez.  someone major dies, and so you de-immortalize them by deleting their homepage
18:15:06 <stepcut> wagle: let me know if that helps...
18:18:04 <wagle> stepcut: working on it
18:19:03 <ayrnieu> also, "some artist has decided to flee the net, but he will take the entirety of his work with him, thank you very much."
18:32:27 <wagle> stepcut: it might help.. will have to stare a while (going to dinner now)
18:32:28 <wagle> thanks
18:32:59 <stepcut> no problem, maybe I will look into callcc later
19:02:03 <stepcut> @stepcut
19:02:04 <lambdabot> juicy bits of code
19:16:26 <shapr> ok, what's the connection between RSS and RDF?
19:16:37 <shapr> is there any existing RSS code in Haskell?
19:17:05 <dons> I *think* there might be, somewhere out there
19:17:55 <shapr> I found obraun's CheckRDF, but, how is RDF related to RSS?
19:18:14 <dons> don't know
19:18:26 <keverets> RDF Site Summary
19:18:28 <keverets> (RSS)
19:18:32 <shapr> ah
19:19:18 <stepcut> shapr: I wrote a simple RSS module 
19:19:30 <dons> http://www.haskell.org/pipermail/haskell/2003-June/012013.html ?
19:20:46 <shapr> stepcut: you want to release it?
19:24:17 <stepcut> shapr: hold on, I am working on it
19:25:14 <shapr> dons: swish looks like overkill for adding RSS to PLog
19:25:56 <dons> ah! yes :)
19:31:51 <shapr> so, anyone here writes a blog that I can link to?
19:32:11 <platypus> shapr, any sorta topic ?
19:32:50 <shapr> sure, I guess so
19:33:07 <platypus> http://lowks.org/cranium/html
19:33:17 <shapr> programming being my favorite
19:34:00 <shapr> neat
19:34:16 <platypus> the rss is at : http://lowks.org/cranium/html/backend.php
19:34:32 <platypus> shapr,i have more :) --> www.kakicomic.com
19:34:44 <platypus> shapr, where is your site ?
19:35:15 <shapr> at the moment here: http://shapr.homelinux.net/~shae/blog/
19:35:34 <shapr> I'm moving it to ScannedInAvian.org soon
19:36:02 <stepcut> http://www.n-heptane.com/nhlab/src/RSS.hs
19:36:03 <platypus> shapr, do you still use python ?
19:36:14 <shapr> for paying work, lots
19:36:14 <stepcut> shapr: its just something I hacked up
19:36:25 <stepcut> shapr: but it might make a nice start
19:37:20 <shapr> platypus: but for fun I use Haskell
19:37:29 <platypus> shapr, hmm okay
19:37:32 <shapr> stepcut: nifty
19:37:39 <platypus> shapr, is that guy in the black tee shirt u ?
19:38:23 <stepcut> shapr: I might have a better version someplace too, but I am not sure..
19:38:26 <shapr> nah, that's bringert
19:38:39 <platypus> hehe
19:38:47 <platypus> where do you work ?
19:38:50 <shapr> if you look at the first entries you'll see pix of me
19:39:07 <shapr> I work at home, in the north of sweden
19:40:25 <shapr> platypus: are you the same person as lowks?
19:44:07 <stepcut> shapr: I found a better version of that RSS.hs thing, I will upload it after I eat (~30mins)
19:44:22 <shapr> stepcut: cool!
19:44:46 <stepcut> shapr: that version has a few minor bugs, the new version has the same API
19:45:16 <platypus> shapr,yes
19:46:12 <shapr> nice cartoons
19:46:40 <shapr> dogicons are funny
19:46:46 <platypus> shapr, hehe thanks
19:47:24 <platypus> platypus, some links are dead tho ... coz http://lowkianseong.keenspace.com stopped linking of images
20:09:03 <platypus> shapr, i am curious where are you linking at ?
20:10:12 <shapr> same url
20:12:14 <stepcut> shapr: I updated the RSS.hs
20:35:27 <platypus> is there a window manager written with haskell ?
20:35:40 <dons> someone should do that
20:35:54 <dons> with plugins!
20:36:10 <platypus> but i am pretty sure there is already one
20:37:07 <dons> there are plenty of high-level gui libraries, and a X11 binding, but I haven't seen a window manager
20:38:16 * stepcut has not yet seen a window manager
20:38:53 <platypus> http://xwinman.org/scwm.html
20:38:57 <stepcut> I wonder if I could write a window manager in elisp...
20:39:01 <platypus> in scheme sorry
20:39:03 <platypus> :)
20:40:12 <dons> hmm.. would make a good 4th year thesis topic
20:40:24 <stepcut> haha
20:40:51 <dons> seriously. use TH and plugins to script it in Haskell, too
20:41:16 <stepcut> my elisp window manager will kick your haskell window manager down the stairs any day of the week!
20:41:19 <ayrnieu> two Common Lisp window managers exist, as well.
20:41:52 <dons> stepcut: on what metric?
20:41:56 <ayrnieu> and I don't much care for what you write a window manager in if it doesn't act like treewm =)
20:42:46 <stepcut> screw, metric, it's imperial mesurements all the way!
20:43:17 <platypus> ayrnieu, any urls ?
20:43:29 <dons> no. I'm serious. this would be a good project. Someone want to come to UNSW to do this for me?
20:43:43 <ayrnieu> platypus - for what?  The CL window managers or treewm?
20:46:42 <shapr> dons: me me!
20:46:59 <stepcut> shapr: did you see that I updated RSS.hs ?
20:47:08 <shapr> yes, looking now
20:47:50 <shapr> that is a very cute cat
20:48:15 <shapr> hiya vajrabum
20:48:24 <vajrabum> Hello
20:48:42 <dons> sharpr: I'm writing this up as a thesis topic right now.
20:49:00 <stepcut> shapr: here's the whole collective http://www.n-heptane.com/newpics/3cats.jpg
20:49:17 <stepcut> I meant to use that pic anyway, since its a 'image/jpeg' and alice.gif is not :)
20:49:40 <shapr> dons: I think Hemacs would be more likely to start a movement along the lines of Alice's Restaraunt.
20:49:47 <platypus> ayrnieu, both
20:50:17 <shapr> vajrabum: what can we do for you?
20:50:50 <vajrabum> not a thing. I just read about this channel on the wiki and decided to check you out.
20:51:09 <shapr> we are cool.
20:51:17 <dons> Alice's restaurant?
20:51:49 <ayrnieu> platypus - http://www.nongnu.org/stumpwm/ http://www.common-lisp.net/project/eclipse/ http://treewm.sourceforge.net/
20:51:52 <shapr> um, Arlo Guthrie
20:52:07 <shapr> very strange folk singer
20:52:13 <dons> oh, I know who he is.
20:52:20 <dons> weird reference
20:52:26 <ayrnieu> wee, I know him.
20:52:27 <vajrabum> hemacs being hebrew emacs?
20:52:36 <shapr> nah, Haskell Emacs
20:52:42 <vajrabum> heh
20:52:47 <vajrabum> duh
20:53:01 <ayrnieu> I don't want no pickle, I just want my motorcycle.
20:53:10 <shapr> I don't wanna die...
20:53:17 <stepcut> I wonder some derivative of hOp might make a good basis for Hemacs
20:53:24 <ayrnieu> I just want my motorcy-cle =)
20:53:25 <shapr> I just wanna ride my motorcy..... cle
20:53:39 <ayrnieu> oops, yes.
20:53:41 <vajrabum> And I don't want no diamond ring, don't want no cadillac car, just want to drink my ripple wine down in the lightnin' bar.
20:54:36 <shapr> yay, http://www.arlo.net/lyrics/motorcycle-arlo.shtml
20:55:43 <shapr> whoa, that song is older than me
20:56:04 <stepcut> hehe
20:56:58 <shapr> vajrabum: so, you write code?
20:57:16 <vajrabum> when I have to yes
20:57:35 <stepcut> when you *HAVE* to!!!
20:57:36 <shapr> not for fun?
20:57:42 <dons> shapr: here you go. last entry on the list
20:57:43 <dons> http://www.cse.unsw.edu.au/~pls/thesis-topics/
20:57:51 <vajrabum> I'm a sysadmin and network engineer for a living though.
20:58:24 <shapr> I used to be a sysadmin, but it got boring after awhile.
20:58:49 <shapr> of course, I did hardware repair before that
20:59:08 <shapr> I wonder what comes after programming
20:59:10 <vajrabum> Doing the routine stuff certainly is boring.
20:59:22 <shapr> what parts do you enjoy?
21:00:17 <vajrabum> Setting up new kinds of stuff. Figuring out enough about what the users are up to so that they actually get what they need.
21:00:47 <vajrabum> Spec'ing hardware and software
21:02:03 <shapr> I do that for all two people in my company nowadays.
21:02:05 <vajrabum> I do like to code a bit. I've been reading some logic stuff and playing with programs around that.
21:02:18 <vajrabum> All 2 people?
21:02:29 <shapr> dons: there have been at least two wikis written in haskell
21:02:42 <shapr> yup, me and my fiancee/boss
21:03:01 <vajrabum> So why are they still running moin-moin over at haskell.org?
21:03:10 <stepcut> shapr is sleeping with the boss =O
21:03:12 <dons> yeah, I know. I'm not sure why chilli wants that topic
21:03:29 <shapr> vajrabum: cuz I'm the wiki maintainer :-P
21:03:37 * vegai starts a summerjob as a sysadmin soon.
21:03:46 <vajrabum> And?
21:04:03 <stepcut> shapr is a python junky :)
21:04:11 <vajrabum> ah, gotcha
21:04:13 <shapr> and the haskell implementations don't have as many features as MoinMoin
21:04:18 <shapr> not yet
21:04:35 <vajrabum> Maybe that means as the maintainer, you should get hacking. ;)
21:04:36 <stepcut> MoinMoin *is* really nice. 
21:04:49 <shapr> oh I am hacking, don't worry
21:05:13 <shapr> vajrabum: you could hack too!
21:05:25 <shapr> Haskell is simple and powerful
21:05:25 <vajrabum> It's got to be better than the old wiki. That thing thrashed itself pretty regularly.
21:06:10 <shapr> the last one had rcs lock problems
21:06:14 <vajrabum> Like I said I've been playing with some logic stuff. Mostly trying to automate the semantic tableaux exercises in this book I've been reading.
21:07:06 <shapr> dons: Ennals told me that resurrecting spec_eval would take a lot of work
21:08:06 <dons> hm. yeah, I reckon that's probably right
21:08:52 <dons> GHC rts is an unwieldy thing
21:09:38 <shapr> for the doxygen page you probably want to link to Programatica's html source browser and the whole ATerm/SDF collection at uu.nl
21:10:24 <shapr> hi Blastercbi
21:10:27 <dons> that's a good idea
21:10:49 <dons> I'll tell seafood
21:11:06 <shapr> spec_eval would be really handy for the embedded Haskell project :-/
21:11:35 <dons> yep
21:11:47 <vajrabum> What's spec_eval?
21:11:55 <shapr> the shell would be fun!
21:12:48 <shapr> vajrabum: Robert Ennals and SPJ did some work on speculative evaluation in GHC
21:12:57 <shapr> it's nifty stuff
21:13:30 <vajrabum> Ahh. Thanks.
21:13:34 <dons> shapr: I really want someone to come and do the shell. It would be great
21:14:04 <vajrabum> That does sound like a cool idea. I'm not sure what a lazy shell would be like though.
21:14:10 <shapr> NDP is also spiffy
21:14:32 * stepcut was working on some shell-like stuff for haskell, but it got sidelined
21:15:31 <shapr> type-error slicing could fit on the Advanced UI Page
21:15:37 <dons> vajrabum: but shells are already lazy. that's the '|' operator..
21:15:42 <Smerdyakov> stepcut, I remember your talking about issues you encountered.
21:15:58 <stepcut> yeah, I have new ideas, but no time :)
21:16:48 <vajrabum> Dons, that seems reasonable.
21:16:51 <stepcut> I figured out how to get the old way working, but it turns out that fudgets are just really bad at asynchonise IO
21:17:08 <vajrabum> So, do you do this as a DSL or is it a standalone program?
21:17:26 <shapr> what about Yampa?
21:27:32 <vegai> hmm, bad day for servers
21:27:55 <vegai> archlinux.org has been down for days, and now, so is haskell.org
21:28:08 <vegai> shapr: apparently the world needs sysadmins too ;P
21:31:43 <shapr> haskell.org has been flaky lately
21:31:59 <stepcut> paypal's button generate generates terrible html, it's not even close to being valid xhtml
21:32:05 <shapr> I think they need new hardware
21:32:06 <stepcut> boggles the mind I tell ya
21:33:04 * stepcut still hasn't learned to proof read before pressing enter
21:33:13 <shapr> dons: that list looks great, lots of cool thesis projects
21:34:23 <dons> good. just need some students to do them now
21:34:42 <stepcut> does being a student pay well?
21:35:08 <vajrabum> They do look like amusing ways to spend time hacking. And they'd be fun toys to play with if done well.
21:35:31 <shapr> the NDP stuff would be powerful
21:35:47 <shapr> and it would tie in well with the mcmasters.ca project
21:36:05 <dons> stepcut: not for undergrads
21:36:31 <stepcut> :p
21:38:29 <Smerdyakov> stepcut, being a good PhD student pays well!
21:38:44 <dons> absolutely!
21:40:38 <dons> what's the emoticon for irony?
21:41:37 <Smerdyakov> First, what's the occasion for irony?
21:41:51 <shapr> every occasion is good for irony
21:42:14 <vajrabum> 'being a good (or any other type of) PhD student pays well"
21:42:35 <vegai> does it?
21:42:42 <vegai> oh, in America, I guess
21:42:49 <Smerdyakov> Yeah, in America.
21:42:57 <vegai> the land of the $$$
21:42:58 <Smerdyakov> I make $50k/year to work on whatever interests me.
21:43:03 <shapr> .ienai
21:43:07 <Smerdyakov> If you think that's not good, then change your value system. :P
21:43:10 <vegai> shapr: .coi
21:43:14 <shapr> @cmafihe .ienai
21:43:15 <lambdabot> .ienai <UI*1> [disagreement] 
21:43:29 <vajrabum> Where is that Smerdyakov?
21:43:31 * vegai smirks.
21:43:39 <shapr> coi vegai .i xu do tavla mi fo la lojban
21:43:50 <Smerdyakov> vajrabum, Berkeley. It would be about the same at any of the top schools.
21:44:26 <Smerdyakov> And did I mention that I have guaranteed job security for a 6-year period as long as I meet minimal standards of progress? :)
21:44:28 <shapr> mi djica lenu sipna
21:44:37 <vegai> shapr: well, I understand something, but not enough to call it a discussion
21:44:41 <vajrabum> I've been away from schools for a long time. The last time I was around grad students the "stipend" was just about good enough to qualify you for food stamps.
21:45:16 <Smerdyakov> vajrabum, the stipends here are just above the level where you get discounts for low income. However, I have some outside funding, through fellowships.
21:45:46 <vegai> shapr: ...though lambdabot is very helpful 
21:45:51 <shapr> :-)
21:46:26 <vegai> and yes, vegai is spelled "vegai" in lojban =)
21:46:39 <vegai> or .vegai
21:47:02 <shapr> mi cuxna lenu gunka
21:47:13 <vegai> hmm
21:47:22 <reffie> here's my question:
21:47:32 <reffie> why is haskell.org down so much? 
21:47:37 <shapr> lojban has awesome emoticons
21:47:46 <shapr> reffie: the hardware is being flaky
21:47:54 <reffie> ah
21:48:12 <shapr> I have a backup of the wiki on scannedinavian.org
21:48:29 <shapr> but any changes made there won't be sync'ed
21:48:55 <vegai> shapr: I especially like the fact that I can say "I feel sorry for you" in lojban without being arrogant =)
21:49:04 <shapr> http://www.ScannedInAvian.org/HaWiki
21:49:19 <shapr> yah, lojban allows for many interesting tricks
21:49:23 <reffie> thanks
21:49:38 <vegai> hmm, I sounded evil there for a while. But that's English for you
21:49:54 <shapr> .ienai
21:50:13 <vegai> no?
21:50:15 <shapr> go'i na palci
21:50:19 <shapr> :-P
21:50:32 <shapr> right, this isn't #haskell.lo
21:50:43 <vegai> yup
21:51:34 <vegai> you know #lojban, right?
21:51:42 <shapr> yup
21:52:44 <shapr> sumti act sort of like lambda calculus functions
21:53:11 <vajrabum> I've been reading about the NDP stuff. That rocks.
21:53:27 <vegai> yes, they do
21:54:02 <shapr> gismu gives you partial application with implicit zo'e, first class gismu gives you sumti
21:54:22 <vegai> aye
21:54:29 <vegai> I wrote about that in a paper for my Writing Skills class
21:54:38 <vegai> the poor humanists didn't quite like it =P
21:55:19 <shapr> what did they say?
21:55:27 <vegai> they didn't get it
21:55:36 <vegai> first year English majors
21:56:10 <shapr> I only advocate lojban as the first spoken language with a yacc grammar
21:56:39 <dons> !
21:56:47 <vegai> or rather, they probably got it, but thought they didn't because I had used some mathematical symbols earlier on the paper =)
21:56:59 <shapr> ph33r!
21:59:02 <shapr> most people assume something they haven't seen before (especially math) is hard to understand
22:00:01 <vajrabum> I think some people are simply frightened by the symbols. They've been conditioned by bad teaching to feel bad just seeing them.
22:00:09 <shapr> I like to explain Russell's Paradox at parties, if you don't tell people that it's math, they usually understand it just fine.
22:02:08 <Smerdyakov> I like to leave at parties.
22:03:19 <shapr> reffie: moin 1.2 has some features that aren't on the canonical HaWiki: http://www.ScannedInAvian.org/HaWiki/PageSize
22:04:47 <vajrabum> Do you have a bot here that collects stuff like that shapr?
22:05:04 <shapr> clog is a logbot
22:05:31 <shapr> #haskell has been logged for sometime > 1 year
22:05:37 <vajrabum> That's the thing that writes to tunes.org?
22:05:42 <shapr> yup
22:05:49 <shapr> lambdabot is written in Haskell
22:06:09 <vajrabum> Does clog do something beyond writing the logfiles?
22:06:13 <shapr> though lambdabot is more of a code toy with some useful features
22:06:21 <shapr> not that I know of
22:07:39 <vajrabum> I see now. There's a person here with the handle reffie. I thought you were flagging something for the bot. Hehe.
22:13:53 * stepcut finally sorta understands how wash/cgi works internally
22:25:55 <shapr> oh tell me!
22:26:15 <stepcut> it's magic
22:26:21 <shapr> oh
22:26:25 <shapr> wow!
22:27:26 <stepcut> the key to understanding wash/cgi is to understand what everyline in 'ask' is doing
22:28:10 <shapr> I sort of figured out ask and tell with curryspondence
22:28:29 <shapr> obviously I need to study it some
22:29:16 <stepcut> i think it ought to be possible to take all the data that normally gets stuck in the hidden field of a forum and cram it into a URL
22:29:51 <stepcut> which means you could use normal links instead of having to all the navigation via submit buttons
22:30:17 <shapr> oh that would be nice
22:30:35 <stepcut> of course, you could also do some tricks with javascript so that 'clicking a link' really ran some javascript and did a post, but that would not work if javascript was disabled ;)
22:30:54 <shapr> right
22:31:13 <shapr> meaning lynx/links/w3/etc would not work
22:31:47 <stepcut> yeah
22:31:56 <stepcut> so, that's why I would rather cram the data into the URL
22:32:11 <vajrabum> lsn't that called a get (vice a post) stepcut?
22:32:57 <stepcut> vajrabum: not sure I understand your question
22:33:36 <vajrabum> Doesn't an HTTP get put all the parameters into the URL?
22:33:59 <vajrabum> Like http://www.google.com/search?hl=en&ie=UTF-8&q=http+get&btnG=Google+Search
22:34:45 <ayrnieu> no, an HTTP "GET" has nothing to do with CGI.
22:36:05 <stepcut> vajrabum: yeah, the problem is, WASH/CGI currently does not have anyway to put the stored session data in the URL, it only knows how to pass stuff around via hidden fields in a form. But that requires that you do a POST. 
22:36:15 <vajrabum> Gotcha
22:36:29 <stepcut> So if you write a site in wash/cgi, all your navigation has to be done by pressing form buttons, which can be a bit cheesy
22:37:09 <skew> but the length of a query string can be limited
22:37:45 <stepcut> yes, to 2,083 characters
22:38:13 <skew> I don't quite know how to make a site that lets you use navigate by links and still use the back button without problems
22:38:59 <skew> althought giving pages and users IDs and storing data on the server might work
22:41:24 <stepcut> skew: damn back button
22:42:05 <stepcut> skew: I think it depends on how you want the site to behave when you hit back
22:42:32 <stepcut> skew: if you store *all* the state in the url, then hit the 'back' button, its very much like going back in time
22:42:37 <skew> I'm thinking of the model in WASH, where the state cdomes with the page
22:42:49 <ozone> skew: i read on shapr's blog that you've put up your haskell code on a website?  do you mind sending me the URL?
22:44:17 <skew> ozone: page-208.caltech.edu
22:44:29 <skew> everything is very much unfinished or trivial
22:44:35 <skew> but some of it might be interesting
22:45:35 <vajrabum> Where's shapr's blog?
22:45:47 <stepcut> http://shapr.homelinux.net/~shae/blog/
22:46:57 <ozone> skew: PHI, eh?  very nice name. :)
22:47:06 <ozone> does python do multiple implementation inheritance?
22:47:38 <skew> I think so
22:47:44 <skew> if you mean what I think you mean
22:48:01 <skew> name resolution in a class looks for things in all the ancestors
22:49:47 <ozone> skew: thought as such
22:49:50 <skew> classes are really not a big issue, at least on the interface side
22:49:52 <ozone> skew: nice cooling setup, by the way. :)
22:51:07 <skew> actually, I've taken that down to cool the entire room now that LA is starting to have summer
22:52:35 <skew> somehow my processor fan started spinning reliably again, so it isn't quite as necessary.
22:54:54 <skew> It is much cooler though
22:56:28 <ozone> :)
22:58:27 <stepcut> haha, some guy on usenet is trying to figure out how to install an espresso machine in his land cruiser glovebox
22:59:17 * stepcut goes to bed
23:00:53 <ozone> skew: got a quick commandline test for PHI's ./a.out?
23:01:01 <shapr> I want to go to bed too!
23:01:09 <skew> operator add 1 4
23:01:19 <skew> then watch it add 1 and 4 several times before it segfaults
23:02:18 <ozone> skew:
23:02:19 <ozone> 16:02 .../phi.darcs/PHI % uname -a
23:02:20 <ozone> Darwin g5.nsw.cmis.CSIRO.AU 7.3.0 Darwin Kernel Version 7.3.0: Fri Mar  5 14:22:55 PST 2004; root:xnu/xnu-517.3.15.obj~4/RELEASE_PPC  Power Macintosh powerpc
23:02:24 <ozone> 16:02 .../phi.darcs/PHI % ./a.out operator add 1 4 | head -3
23:02:27 <ozone> Result of call: 5
23:02:29 <ozone> Result of call: 5
23:02:31 <ozone> Result of call: 5
23:02:34 <ozone> zsh: 13560 bus error  ./a.out operator add 1 4 | 
23:02:37 <ozone> zsh: 13561 done       head -3
23:02:39 <ozone> 16:02 .../phi.darcs/PHI % 
23:02:41 <skew> looks good
23:02:41 <ozone> congratulations, works on mac os x :)
23:02:44 <ozone> (with some makefile tweaking)
23:02:56 <skew> except for the bit where it segfaults in PyMalloc
23:03:49 <skew> try loading the module into a python interpreter
23:04:21 <skew> if you can build it you should be able to run an interpreter in the same directory and "import hadd"
23:04:58 <ozone> can't build the module yet (mac os x doesn't support support gcc's -shared option)
23:05:10 <skew> that's an option for ld
23:05:58 <skew> you should be able to build it as I did before simon told me about -optl, by trying to compile together the same inputs with ghc -v, recording the linker options, and adding -shared
23:06:17 <skew> assuming osX uses gnu ld and shared objects at all, that is
23:06:29 <ozone> it doesn't use gnu LD
23:06:33 <ozone> gnu ld, rather :)
23:06:51 <ozone> i don't really know enough about mac os x shared library arcana to put in the appropriate incantations
23:06:55 <vajrabum> Can't you build gnu ld?
23:07:10 <ozone> vajrabum: i could, but i'm 99% sure there's no mach-o support in gnu ld
23:07:23 <vajrabum> Or is it that the OSX notion of a shared lib is different?
23:08:14 <skew> well, the thing to do to get it to work is to figure out how to build a python extension module on max os X, figure out what Haskell libraries my code needs to be linked with, and get both to happen.
23:08:25 <skew> It's a pain
23:08:45 <vajrabum> Sounds like.
23:08:47 <ozone> yeah.  the information is readily available, i just need to find it, which takes time. :)
23:08:50 <ozone> will have to play with it later
23:08:57 <ozone> back to actual work for now ...
23:09:05 <shapr> skew: can I link to your site? I didn't know if it was public.
23:09:26 <skew> It's my home machine and sometimes I forget to start the webserver after a reboot
23:09:36 <skew> but other than that you can link to it
23:09:40 <shapr> cool
23:45:00 <dons> hmm. they encode fixity in .hi files
23:46:31 * shapr always to do something with brokity
23:46:38 <shapr> "wanted"
23:46:54 <dons> boxity?
23:47:32 <shapr> fixity =/ brokity?
23:47:56 * shapr gives up and goes off to sleep
23:48:03 <dons> data Boxity 
23:48:03 <dons>   = Boxed
23:48:03 <dons>   | Unboxed
23:48:04 <dons>   deriving( Eq )
23:48:26 <dons> data FixityDirection = InfixL | InfixR | InfixN
23:48:32 <dons> data Fixity = Fixity Int FixityDirection
23:49:28 <shapr> data Brokity = Broke PainLevel | NotBroke
23:49:54 <dons> :D
23:50:50 <dons> We *must* put Brokity into ghc
23:51:45 <ozone> data PainLevel = DonIsNotHappy | SvenIsNotHappy | SimonMIsNotHappy deriving (Enum, Ord)
23:52:36 <dons> haheha
23:53:11 <dons> I'm putting Brokity into MinHS right now
23:54:20 <vajrabum> My cat has been typing squggol on my keyboard. I still can't read that stuff.
23:54:48 <vajrabum> Err, squiggol
