01:51:48 <shapr> good morning #haskell!
01:53:48 <bring> good moring
01:55:20 * bring meant morning of course
01:55:27 <shapr> hej bring, what's up?
01:56:06 <bring> "moring" is swedish for a ring used for mooring ships
01:56:13 <bring> not too much
01:56:28 <bring> working on our haskelldb paper
02:00:58 <eivuokko> Is there a general way of resolving overlapping instance declarations?
02:01:12 <bring> the most specific one wins
02:01:33 <bring> the ghc manual talks about it I think
02:01:36 <eivuokko> But GHC complains.
02:01:42 <eivuokko> Ahas, I'll search, thanks.
02:01:55 <bring> I have been looking for a paper with a formal description, haven't found one yet
02:02:07 <bring> what are your instances?
02:02:24 <eivuokko> Maybe (Maybe a) vs Maybe b
02:02:40 <eivuokko> I am not solving a real problem, just playing around with types.
02:02:41 <bring> are you using -fallow-overlapping-instances
02:02:59 <eivuokko> Nope.
02:02:59 <bring> your example should be ok with that flag
02:03:10 <eivuokko> Ok, thanks :)
02:03:13 <bring> without it, no overlapping instances are allowed
02:03:39 <eivuokko> Why are these things unallowed by default (haskell98 or what-it's-called)?
02:03:43 <bring> anyone know of a paper the describes overlapping instances?
02:03:54 <eivuokko> (I already have allow-undecidable-instances)
02:04:11 <bring> hmm, that should not be neccessary for that example
02:04:27 <bring> yes, haskell98 forbids overlapping instances
02:04:41 <eivuokko> Mmmm, might be a left-over from previous tests.
02:05:48 <bring> shapr: what are you up to?
02:06:16 <eivuokko> Thanks, I'll go play a bit more :)
02:07:41 <shapr> bring: nothing yet
02:08:44 --- mode: shapr set -o shapr
02:16:18 <shapr> hey pesco 
02:54:42 <pesco> Ahoj shapr.
03:07:04 <shapr> whee
03:07:40 <pesco> profiling galore, yay.
03:08:00 <shapr> what's galore?
03:09:02 <pesco> *shrug*
03:09:22 <skew> hi
03:09:28 <shapr> oh, I thought it was the name of the app you were profiling, doh
03:09:32 <skew> pesco: what are you profiling for?
03:09:39 <shapr> hey skew
03:09:50 <skew> I played around with rewrite rules some today. It's pretty nifty what GHC does with them
03:09:58 <skew> hi shapr
03:11:54 <pesco> skew: I'm solving a system of ODEs for a particle system (animated in OpenGL with Yampa). And it's time consumption grows more than linear with the number of particles (=> equations).
03:12:24 <skew> sounds like laziness
03:12:41 <skew> maybe not, but squish laziness anyway
03:12:48 <pesco> Aha, can you elaborate the issue?
03:13:07 <pesco> I'm not familiar at all with how inefficiencies can creep into Haskell code.
03:13:10 <skew> This probably wouldn't give you superlinear behaviour
03:13:19 <skew> but if you do something like foldl (+) 0 [1,2,3,4]
03:13:44 <skew> that recurses down the list building up ((((0+1)+2)+3)+4)
03:13:57 <skew> with laziness, you get thunks that look exactly like that
03:14:04 <skew> and don't actually add until the result is forced
03:14:09 <skew> which is bad
03:14:21 <pesco> Ahum
03:14:54 <pesco> I'm not "seeing the thunks", though.
03:15:20 <skew> what is profiling showing?
03:15:47 <pesco> I meant in your example with foldl.
03:16:31 <skew> first application is foldl (+) 0 (1:(2:(3:[])))
03:16:47 <skew> on recursion we have foldl (+) (0+1) (2:(3:[]))
03:17:00 <skew> not 1 mind you, but a thunk that will evaluate 0+1 when forced
03:17:21 <skew> maybe write it foldl (+) [0+1] (2:(3:[]))
03:17:39 <pesco> Ok.
03:17:41 <skew> next iteration, we get a thunk around adding the accumulator to 2
03:17:51 <skew> an the accumulator isn't any particular integer, but this thunk
03:18:01 <pesco> Ah, I see.
03:18:03 <skew> so, foldl (+) [[0+1]+2] (3:[])
03:18:18 <skew> in the end it evaluates to [[[0+1]+2]+3]
03:18:42 <skew> so you build something as big as the whole list
03:18:51 <skew> that's more of a memory issue, I suppose
03:18:54 <pesco> So only when the sum is really needed, the thunk structure is traversed an rippling back up as 0+1+2+3.
03:19:13 <skew> yep, and consuming stack proportional to the length of the list
03:19:32 <skew> realy bad for things like sum [1..2^40]
03:19:45 <skew> or rather, foldl (+) 0 [1..2^40].
03:19:59 <pesco> So, how do you make it strict?
03:20:00 <skew> sum uses seq or maybe $! appropriately
03:20:19 <skew> you can make your own functions more strict like that as well
03:20:27 <skew> GHC has pretty good strictness inference
03:20:45 <skew> if it can tell that a result will always be used it will compute it
03:21:49 <skew> supposedly you can tell by reading Core what your function is doing
03:22:13 <skew> I'm not sure reading Core is actually any easier
03:22:33 <skew> if you know perl and can read and understand the mangler it might make more sense
03:23:09 <pesco> The .hi files contain the strictness info, it says.
03:23:16 <skew> Ah, that they do
03:23:36 <skew> have you made a memory profile?
03:23:40 <skew> do you have any space leaks?
03:24:17 <pesco> No, I've not yet made a memory profile.
03:25:46 <skew> they are easy and pretty. you should make one
03:25:58 <skew> and run it through hp2ps and view it
03:26:01 <pesco> I just did, but I'm not familiar with reading them.
03:26:39 <skew> can you tell a horizontal line from a diagonal line?
03:27:06 <pesco> Yes. I supposed that's what I'm looking for and my picture looks bad.
03:27:11 <skew> ah
03:27:31 <pesco> Well, if you like to look at mountain ranges, it might be pretty.
03:27:36 <skew> next step (a bit more complicated) is to look at the little bands
03:27:43 <skew> mountain ranges aren't so bad
03:27:49 <skew> going up and coming back down is okay
03:27:57 <skew> an upwards trend is a space leak
03:28:07 <skew> anyways, look at the little bands, and see which of those grow
03:28:13 <skew> usually more are relatively constant
03:29:00 <skew> going up and down means you are allocating memory constantly (pretty common) but it is becoming garbage just as fast
03:29:37 <pesco> No, they're definately growing.
03:30:09 <pesco> There are small bands at the bottom that stay constant, but I'm not sure what they represent.
03:30:44 <pesco> Each band rep's a cost center, I suppose?
03:30:50 <skew> is it just one or two bands that definitely grow?
03:30:57 <skew> each band is a cost centre, I think
03:31:00 <pesco> 6.
03:31:17 <skew> that makes the optimizing a bit trickier
03:31:30 <pesco> They're the vector operations.
03:31:31 <skew> or, more code possibly involved at least
03:31:41 <pesco> Top is addition.
03:31:44 <skew> that doesn't sound so bad
03:32:04 <skew> you are matching the colors (or shades of grey) to the legend on the right?
03:32:14 <pesco> Yes, from top to bottom.
03:32:46 <skew> well, this is all there is to reading heap profiles
03:33:01 <skew> now we figure out why these things hang onto memory
03:33:03 <pesco> *g* got it.
03:33:28 <pesco> The particle positions are X/Y-pairs. The vector the Runge-Kutta operates on is a list of those.
03:34:01 <skew> I can now serve HTTP/1.1. netcat is fun.
03:34:18 <pesco> :)
03:34:39 <pesco> Are you pipe-connecting Haskell and netcat?
03:39:59 <pesco> My vector addition on the list of vectors is, naturally, defined as xs ^+^ ys = zipWith (^+^) xs ys
03:41:03 <skew> no, just writing raw files
03:41:27 <pesco> Ah.
03:41:30 <skew> I'm trying to understand how to make a web page with a notion of session
03:41:41 <skew> which requires understanding cookies
03:42:04 <skew> I found the RFC for that, and I'm reading 2616 as background
03:42:51 <skew> I think that zipWith may produce a vector of thunks
03:43:35 <skew> let me check, with the *magic* of unsafePerformIO
03:43:48 <skew> (something like the magic of orbital bombardment)
03:44:03 <pesco> Ah, yes.
03:44:21 <skew> you remember Marathon?
03:44:38 <pesco> No, Master Of Orion.
03:46:07 <skew> At one point in Marathon an insane (okay, okay, "rampant") AI running a starship says something about the *magic* of orbital bombardment
03:46:16 <skew> with the "*", IIRC
03:46:32 <skew> anyway, zipWith will definitely produce thunks
03:46:33 <pesco> heheh.
03:46:58 <pesco> Ok, but shouldn't those be consumed after every frame draw?
03:47:20 <skew> I guess I still don't know how it works out with a strict argument
03:48:00 <skew> if you actually visit all the celsl
03:48:18 <skew> if one of them hangs around you could build a thunk refering to that on the next frame
03:48:34 <skew> that only lasts for so long though
03:48:52 <skew> does the slowdown seem more like increasingly frequent GC?
03:49:23 <skew> one RTS option beeps at each collection, I think there is another that prints something at each collection
03:49:37 <pesco> I was just going to look for that.
03:49:39 <skew> never mind, you already know you have a space leak
03:49:57 <skew> well, I guess you can see if they feel correlated
03:50:08 <skew> especially the precipitous decline into sawp
03:53:22 <pesco> -s shows 42.5% GC time.
03:54:08 <skew> like string.letters
03:54:22 <skew> that's probably it
03:54:40 <skew> any superlinear time complexity and you would really hurt
03:56:18 <skew> so, now we just squish space leaks
03:56:34 <skew> where is the bit in the user's guide about strictness?
03:57:15 <pesco> Chapter 5?
04:01:12 <shapr> yay, WASH is a GHC pkg now
04:16:10 <skew> pesco: try adding a call to some deepSeq function
04:20:15 <skew> like deepSeq . zipWith (+) as bs
04:20:28 <skew> rather  deepSeq $ zipWith (+) as bs
04:20:57 <skew> if you don't have a deepSeq module you can define sequening on lists easily enough
04:45:51 * shapr bounces cheerfully
06:08:29 * shapr bounces happily
06:23:20 <shapr> yeehaa
06:23:32 <shapr> wassup peoples?
06:23:36 <shapr> anything?
06:24:38 <pesco> shapr: Where in the hell do you obtain all that happiness?
06:25:12 <pesco> As for your question, I'm hunting down a single last space leak.
06:25:16 <shapr> it's natural. I take drugs to stop being happy when I have to work.
06:25:32 <pesco> Oh, I see.
06:25:50 <pesco> Maybe I should take some drugs to keep happy while I work.
06:26:23 <shapr> when I'm happy I don't usually feel like doing anything useful
06:27:46 <shapr> pesco: hey, are you coming to EuroHaskell?
06:28:18 <pesco> Hm, what is EuroHaskell, a conference I suppose. Where is it, and when?!
06:28:31 <shapr> @wiki EuroHaskell
06:28:32 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
06:28:48 <shapr> it's not really a conference, that's the one FAQ so far
06:29:08 <pesco> ok
06:29:32 <shapr> on the other hand, we may be hacking on an ethernet driver for GHC there
06:29:50 <shapr> among other fun things
06:30:40 <pesco> An ether-what?
06:30:53 <shapr> EuroHaskell is classed as an academic lan-party
06:31:10 <shapr> a network card driver for GHC
06:31:31 <shapr> have you tried hOp?
06:31:44 <pesco> No, but I'm looking at it...
06:32:44 <pesco> I'd heard of it, but had not actually had the time to check it out...
06:33:02 <shapr> it's nifty
06:33:33 <maihem> damned international borders. I can't get a passport in time.
06:34:04 <shapr> doesn't the Shengen accord let you go through anyway?
06:34:26 <maihem> I think that just means I don't need a visa for that specific trip
06:34:31 <shapr> oh
06:34:51 <maihem> I still have to prove I'm not an international terrorist
06:34:57 <shapr> oh I see
06:35:00 <shapr> that sucks
06:35:15 <maihem> It sucks to be British
06:36:07 <maihem> I suppose I'm one of the fortunate ones, I'm as pink as spring lamb so I don't get stopped by the police for nothing
06:37:02 <saz> heh
06:41:00 <pesco> Where is that last memleak coming from?!!
06:46:15 <bring> maihem: I don't think you need a passport to travel to sweden if you're a british citizen
06:46:59 <pesco> bye, I gotta go...
06:49:49 <bring> d99mary: jag ser millenium bug i mysql
06:50:05 <bring> +---------+---------------+------+------+----------+------------+
06:50:05 <bring> | farm_id | farm_name     | size | cows | chickens | est        |
06:50:05 <bring> +---------+---------------+------+------+----------+------------+
06:50:05 <bring> |       0 | Doebrook      |  375 |    3 |       15 | 1893-01-01 |
06:50:05 <bring> |       1 | Emmerdale     | 1002 |   10 |      106 | 1725-03-06 |
06:50:06 <bring> |       3 | Millenium bug |  458 | NULL |       50 | 2000-05-02 |
06:50:08 <bring> +---------+---------------+------+------+----------+------------+
06:50:16 <shapr> bring: wrong channel :-P
06:50:23 <bring> oops
06:50:27 <bring> sorry about that
06:50:36 <shapr> though that is useful info to know
07:00:27 <maihem> bring: really? I must visit the Citizens Advice Beureau and check. then I can look for a cheap hotel and flights
07:01:15 <bring> you may need some form of internationally recognized identification, but a passport should not be neccessary with the Schengen area
07:01:42 <maihem> I wonder, though, about getting *back*
07:03:07 <bring> :)
07:03:15 <bring> that should be ok too
07:03:49 <bring> the point being that they aren't supposed to check your passport when travelling between Schengen coutries
07:04:00 <bring> at least I think so
07:04:15 <bring> can remember that they've checked in a while
07:04:19 <ibid> not may need but will need some sort of internationally recognised identification
07:04:37 <maihem> drivers license?
07:04:41 <ibid> at least in finland, they don't generally let you to cross the border without one
07:05:15 <ibid> maihem: for finnish citizens, i believe only passport or a recent id card from the police is sufficient
07:05:23 <ibid> maihem: don't know about other countries
07:05:27 <ibid> what they issue
07:06:16 <bring> maihem: how long does it take to get a passport in the UK?
07:07:40 <maihem> six weeks, after they receive it, they sometimes can do it quicker, but I don't live near anyone of professional standing that's known me for 2 years. So I'd have to post it off, receive it back, then sign it and post it again first.
07:08:51 <bring> you need a professional to say that you are you?
07:08:57 <bring> what kind of professional?
07:09:18 <bring> isn't some other form of id ok to get a passport?
07:09:58 <maihem> police officer, magistrate, teacher... hey! my old university prof. I'll email him!
07:11:02 <bring> those being the only reliable professions?
07:11:02 <maihem> He's only a 45 minute drive away
07:11:24 <maihem> docter, armed forces officer
07:11:31 <maihem> that sort of thing
07:11:38 <maihem> someone with something to lose
07:12:11 <bring> basically anyone with an education and employed by the state?
07:12:36 <bring> interesting system
07:12:48 <maihem> yeah, or who if they were found lying to the state would lose their necessary reputation
07:13:05 <bring> what if, hypothetically, you don't know any such person?
07:13:13 <bring> or rather, no such person knows you
07:15:27 <maihem> Heh, I imagine there is somewhere in london, but I don't know
07:15:59 * ibid got my first id from the police by bringing my mother, who had an id and who also had with her an official document certifying that she had a child with my name and age
07:16:21 <ibid> i got my passport several years later by presenting that id
07:16:34 <bring> I think that's how it works in sweden too
07:16:38 <maihem> For UK passport you need your birth certificate as well as a photo signed by the professional to certify that it is a true likeness
07:17:23 <maihem> oh, apparently the countersignatory must also hold a valid UK passport
07:17:50 <bring> what's the base case?
07:17:56 <bring> the queen?
07:18:11 <maihem> Probably the Home Secretary
07:18:19 <ibid> the document was not a birth certificate, it was a "virkatodistus" (almost literally, "official document") issued by the registry office
07:18:52 <Spark> we;re getting id cards here now
07:19:15 <Spark> hmm i wonder why the EU doesnt do something like that
07:19:27 <Spark> that would be good for immigration policing surely
07:19:28 <bring> they're called "personbevis" (literally "proof of person") in sweden
07:19:45 <Spark> mm sweden
07:20:04 <bring> Spark: did you decide to come yet?
07:20:18 <Spark> if i did go to euro haskell, how would i get from the airport to the university, without knowing a word of swedish?
07:20:24 <maihem> Spark: no way, illegal immigrants can only get into a country by not being seen. How do you check that they have an ID card if you don't know they're there?
07:20:29 <ibid> Spark: the eu doesn't do what?
07:20:45 <Spark> id cards in all member states
07:20:50 <bring> Spark: there's an airport bus
07:20:55 <Spark> cool
07:20:57 <bring> gets you to downtown
07:21:12 <bring> can walk, take tram or bus from there
07:21:16 <Spark> mm right
07:21:30 <Spark> chances of bus drivers knowing english?
07:21:31 <ibid> Spark: may be that eu does not have jurisdiction on that
07:21:44 <bring> Spark: high
07:21:48 <bring> especially on the airport bus
07:21:49 <Spark> yeah probably, i know fuck all about politics :)
07:21:51 <dennisb> Spark: most people speak english
07:21:57 <Spark> good for them
07:22:01 <Spark> i guess ill come then
07:22:07 <Spark> where can i get plane tickets?
07:22:33 <bring> ryanair flies stanstead-gothenburg city airport
07:22:43 <bring> for GBP 7 and up
07:22:51 <bring> something like that anyway
07:23:12 <bring> + taxes and getting to the airport (which is more than the flight)
07:23:36 <bring> Spark: will you bring a computer?
07:23:41 <Spark> hmm
07:23:49 <Spark> i have a laptop, with crap batteries
07:24:00 <Spark> it can only do 800x600 though, which should be ok for programming
07:24:04 <bring> we have electricity in sweden
07:24:13 <bring> but you need an adapter
07:24:13 <Spark> cool
07:24:18 <Spark> ah
07:24:27 <bring> hm, do you have the same plug as on Ireland?
07:24:31 <Spark> is it the same as the one i needed for finland?
07:24:37 <Spark> heh
07:24:44 <Spark> 3 pins in a triangle
07:24:47 <Spark> top one is earth
07:24:51 <bring> square pins?
07:24:53 <Spark> they all go into the wall
07:24:58 <Spark> yeah, rectangularish
07:25:04 <Spark> but they have corners :)
07:25:15 <bring> yeah, finland has the same as sweden I believe
07:25:33 <bring> two circular plugs
07:25:33 <Spark> ok ill just get a universal adapter from around here somewhere
07:25:45 <Spark> ah right
07:25:46 <bring> earth stripes on the sides of the plug
07:25:49 <Spark> and an earth sticking out?
07:25:50 <Spark> oh
07:25:59 <Spark> ah yeah
07:27:41 <Spark> is anyone else coming from the UK?
07:27:59 <Spark> theres gonna be net access in the uni, right? ethernet style
07:28:34 <bring> there will be RJ45 ethernet
07:28:48 <bring> we will try to get 802.11b WLAN as well
07:29:27 <bring> I may ask for you MAC address at some point before the conference
07:29:36 <Spark> heh ok
07:29:56 <Spark> its a lot like "00:40:F4:22:BF:2E"
07:30:48 <Spark> they have some weird system at my department, you plug in your laptop, it gets a 10.x.y.z ip, and access to a single web server
07:31:15 <Spark> you then authenticate with a user/pass (the dept unix login) and it then NATs you to the net
07:32:15 <bring> we have a similar system
07:33:33 <bring> I put a picture of the plug you need on the wiki page
07:33:37 <bring> @wiki EuroHaskell
07:33:38 <lambdabot> http://www.haskell.org/hawiki/EuroHaskell
07:35:22 <Spark> ace
07:37:18 <Spark> spark@stealth:~$ firefox
07:37:18 <Spark> Segmentation fault
07:37:45 <Spark> that happens when i enter "stanstead<tab>" in the flight section of www.lastminute.com :)))
07:38:46 <bring> :)
07:39:56 <Spark> ok shall i aim to arrive the day before?
07:40:52 <Spark> i assume its going to be a sort of 9am-----somedays------> 5pm sort of timespan
07:41:24 <bring> we haven't decided that, but something like that sounds reasonable
07:41:30 <bring> 9 am is pretty early though
07:41:53 <Spark> ok i dont really mind being early since ive never been in sweden before, ill just explore :p
07:42:00 <bring> considering item 2 on the agenda
07:42:13 <Spark> hehe
07:42:20 <bring> sweden's nice in the summer
07:42:20 <Spark> i almost forgot about that actually
07:42:24 <andersca> are there pubs open at 9am?
07:42:29 <bring> haha
07:42:36 <bring> don't think so
07:42:40 <andersca> I heard bring was going to give away free beer
07:42:55 <bring> I heard andersca was doing the catering
07:43:08 <andersca> indeed
07:43:16 <andersca> I can cook in the kitchen monad
07:43:39 <bring> andersca: return that potato dammit
07:44:14 <andersca> too late, it's been garbage collected now
07:44:56 <bring> speaking of garbage collection, I think I may need some help getting rid of all the empty beer cans from last week
07:45:02 <Spark> can we arrange an upper hard limit on the number of haskell puns a day? :)
07:45:36 <andersca> bring: sure you don't need help drinking the full beer cans instead?
07:45:48 <bring> well
07:46:08 <bring> are you going to join the paintball game this weekend?
07:46:30 <andersca> doubtful, I might be going out on friday
07:46:37 <andersca> it's the gnome 2.6.1 release party
07:49:26 <Spark> theres actually a party for that?
07:50:16 <andersca> not really
07:50:22 <andersca> we just like to find excuses to drink
07:51:00 <Spark> ah
07:51:14 <Spark> shall i persuade any of my friends to come?
07:51:19 <Spark> i know of at least 1 thats interested in FP
07:51:45 <Spark> but he knows SML, not haskell :)
07:54:08 <bring> if you think that he'd appreciate lots of haskell hacking and beer
07:58:32 <Spark> ok from my perspective, since im such an ameteur, id probably be best off trying to code something fairly basic, and asking people if i get stuck
07:58:47 <Spark> the real benefit to going would be socialising with other people i think :)
07:59:41 <bring> true
08:00:36 <Spark> i learnt mathematica yesterday, that was wicked
08:00:57 <Spark> experimented with a hopfield neural network
08:05:19 <bring> Spark: add yourself to the wiki page if you think you're coming
08:13:56 <Spark> done
08:14:58 <Spark> cool i could create a page about myself, how delightfully egotistical would that be
08:43:10 <bring> Spark: I can add one about you, then it wouldn't be egocentric
08:49:26 <bring> it would actually be good if you had a page, easier to find your email if we need you MAC or something like that
08:52:59 <jadrian> hello
08:53:15 <bring> hi
08:53:23 <jadrian> hi again bring
08:53:44 <jadrian> is there anyway to permanently add dirs to the path of ghc 
08:54:01 <jadrian> by editing some ~/.ghc file or something like that
08:54:24 <bring> ghc-pkg can sort of do that
08:54:44 <jadrian> hmmm crate my own package?
08:54:50 <bring> yeah
08:55:05 <jadrian> not sure if that's the most apropriate in this case...
08:55:10 <bring> I'm sure there's some environment variable you could set too
08:55:17 <jadrian> that would mean I'd have a pre compiled module right?
08:55:38 <jadrian> or modules...
08:56:06 <jadrian> let me check the ghc-pkg
08:57:02 <bring> hmm, can't find anything about environment variables for ghc
08:57:42 <bring> you could use an alias
08:57:53 <bring> a little ugly, but it should work
08:58:08 <bring> like most things I seem to propose here
08:58:38 <bring> ok, some are very ugly
08:58:58 <jadrian> A package seems overkill. I just want to have a dir with some auxiliary modules
08:59:36 <jadrian> and I keep changing those aux modules...
08:59:43 <jadrian> so I'd have to keep updating the package
08:59:47 <bring> alias ghc=ghc -i/some/where
08:59:52 <jadrian> I know...
09:00:01 <jadrian> but I don't want to keep doing that either :)
09:00:11 <bring> put that in you login file
09:00:19 <jadrian> hmmm
09:00:21 <Spark> mm i pic might be a good idea too
09:00:25 <Spark> ill sort something out
09:00:37 <jadrian> alias, I didn't see the "alias" there
09:00:39 <jadrian> right 
09:00:58 <jadrian> yeah, it's probably enough
09:01:24 <jadrian> also
09:01:30 <jadrian> alias ghci=ghci -i/some/where
09:01:33 <jadrian> that should do it
09:01:34 <bring> would be nice if there were a GHC_PATH env var you could set
09:01:38 <jadrian> yeap
09:01:49 <bring> hmm, hehe
09:02:09 <bring> at least on my machine /usr/bin/ghc is a shell script
09:02:19 <bring> you could add options in there
09:02:33 <jadrian> :)
09:02:43 <jadrian> don't want to change it to other users though
09:02:50 <jadrian> I don't think my sister would mind lol
09:02:59 <jadrian> but still that's way to ugly
09:03:08 <jadrian> I guess I'll stick with the alias :P
09:03:26 <bring> I'm sure I can come up with something worse than that
09:03:33 <jadrian> :)
09:04:01 <jadrian> brb
09:04:22 <bring> hmm, create a ~/bin/ghc that symlinks all the files in the aux dir to the current dir, runs ghc, and then deletes the symlinks
13:45:28 <ibid> Igloo: the sparc charToUtf8 problem affects bnfc builds as well (just a note)
13:47:19 <Igloo> Ta
13:48:36 * Igloo doesn't have time to track it down right now. I /think/ it's the automatically generated patError being created wrongly, but haven't tested that theory (and there's a lot to trace through even if I'm right)
13:49:36 <ibid> Igloo: i don't expect you to, i'm just too lazy to mail a metoo to g-c-bugs :)
13:49:45 <ibid> so i pointed you to it :)
13:49:46 <Igloo> :-)
13:50:18 <ibid> it is annoying though, it's the only thing keeping bnfc out of testing right now
13:50:41 <ibid> well, actually, i just reset the day counter with an upload, but you get the idea :)
13:51:21 <Igloo> I'm pondering asking for the IA64 binaries for all my packages to be removed as I can't even log in to an IA64 machine ATM, let alone attempt to debug the problems
13:54:06 <ibid> it appears i'm the only bnfc debian user currently
13:54:27 <ibid> nobody bugged me about my use-inhibiting blunder for two weeks...
13:54:57 <Igloo> Is it a new package?
13:55:05 <ibid> fairly new
13:55:17 <ibid> a month or two in unstable
13:55:21 <Igloo> Not that surprising then
13:55:43 <ibid> true
13:55:56 <Igloo> It's not the sort of thing that will catch many people's eyes
13:56:04 <ibid> yeah
13:56:19 <ibid> the best frontend generator i've run into, though
14:24:14 <jadrian> hmm can't you do multiple matches in case expressions
14:24:19 * jadrian doesn't use case that much
14:24:36 <jadrian> by multiple matches I mean something similar to:
14:24:39 <jadrian> case n of
14:24:41 <ibid> what do you mean, multiple matches?
14:24:45 <jadrian>   1 , 2 -> blah
14:25:15 <bring> x | x == 1 || x == 2 -> blah
14:25:31 <jadrian> I mean in a case expression
14:25:47 <ibid> jadrian: that is a partof a case expression
14:25:47 <bring> you can have guards in case
14:26:03 <ibid> of course, the use of == is ugly :)
14:26:03 <jadrian> oh
14:26:16 <jadrian> you match it with x, which always matches
14:26:26 <jadrian> and then you can put guards in it...
14:26:30 <jadrian> is that it?
14:26:40 <bring> yes
14:26:51 <ibid> and if all guards fail, we continue with the next pattern, if any (iirc)
14:26:58 <jadrian> never seen that...
14:27:08 <jadrian> (I don't like it though)
14:27:12 <bring> :)
14:27:28 <jadrian> guess this is why I always end up not using cases ;)
14:27:37 * ibid likes case
14:28:15 <bring> x | x `elem` [1,2] -> blah
14:28:25 <bring> looks a little more like the syntax you wanted
14:28:29 <ibid> jadrian: in general, the problem with multiple patterns in the same alternative is with variables in the patterns
14:28:39 <jadrian> I just don't like those guards
14:28:41 <ibid> bring: still requires a ==, which is not nice
14:28:54 <bring> yeah, but you don't see it :)
14:28:57 <ibid> :)
14:29:47 <jadrian> for more complicated patterns this might look awful
14:30:03 <ibid> i think there is some variant of that that would add an Eq constraint to the enclosing function
14:30:10 <ibid> jadrian: not really
14:30:30 <jadrian> ibid: well you end up not using pattern matching
14:30:42 <jadrian> ibid: and some things look more elegant when you use it...
14:30:47 <jadrian> let me think of an example...
14:31:10 <jadrian> case n of 
14:31:27 <ibid> jadrian: that's true
14:31:34 <jadrian>   Just 1:_, Just 3:4:_, Nothing
14:31:45 <jadrian> ibid: try that one
14:32:37 <ibid> jadrian: try Just x, Just y -> show (x, y)
14:32:46 <ibid> jadrian: what do you suppose that would do?
14:33:03 <bring> case n of { Just 1:_ -> foo; Just 3:4:_ -> foo; Nothing -> foo } where foo = ...
14:33:20 <bring> doesn't cost that many characters
14:33:24 <ibid> well, actually Just (x:[]), Just (_:y) -> show (x, y)
14:33:25 <bring> but I see you point
14:33:41 <ibid> bah
14:33:45 <ibid> that's not good either
14:33:49 <jadrian> I'm lost :)
14:33:49 <bring> need a few parantheses to
14:34:00 <ibid> Left x, Right y -> show (x, y)
14:34:03 <ibid> now, try that :)
14:34:49 <jadrian> ibid: what exactly do you mean by "Left x, Right y -> show (x, y)"
14:34:51 <jadrian> ?
14:35:11 <Riastradh> It should show "(<x>, " (where <x> is whatever [[show x]] is) and then make demons fly out of your nose, ibid.
14:35:14 <ibid> jadrian: you tell me
14:35:30 <Riastradh> ...with a closing paren there, of course.
14:35:45 <Riastradh> Or if the value was [[Right y]], then it should be "(", nasal demons, ", <y>)".
14:35:50 <ibid> Riastradh: note that i'm trying to convince jadrian that multiple patterns is a bad idea
14:35:52 <jadrian> ibid: good point
14:36:01 <jadrian> ibid: very good point...
14:36:05 <jadrian> :)
14:36:18 <bring> jadrian: Haskell Regualar Patterns allows something like what you want
14:36:24 <bring> http://www.haskell.org/pipermail/haskell/2004-February/013720.html
14:36:27 <Riastradh> Multiple patterns would be a good idea if they _all_ had _exactly_ the same set of variables and their respective types.
14:36:42 <bring> implementation exists, but is not available for download yet I think
14:37:09 <ibid> Riastradh: well, i suppose you could have variables not bound be bound to bottom
14:37:11 <jadrian> bring: seems nice, but in fact I just wanted to match a bunch of constants
14:37:16 <bring> they solve the problem of different sets of bindings in different subpatterns by using Maybe
14:37:35 <jadrian> bring: and I can symply use guards and an `element`...
14:37:39 <ibid> Riastradh: then all that is required that variables have consistent types
14:37:44 <Riastradh> ibid, why would you want those variables at all?
14:37:53 <ibid> Riastradh: i wouldn't
14:38:00 <Riastradh> They're clearly not useful, so there's no reason to add that misfeature.
14:38:17 <ibid> Riastradh: i just tried to come up with a good counterexample to jadrian's proposal
14:38:54 <jadrian> ibid: it didn't even ocurred to me because I was just thinking about constants...
14:38:54 <ibid> Riastradh: but if you did have that feature, then it would be possible to be liberal with the variables as long as types match
14:39:07 <ibid> jadrian: i gathered that :)
14:39:11 <bring> see HaRP
14:39:18 <ibid> jadrian: for constants, it'd be a nice thing
14:39:26 <jadrian> ibid: that's what happens when you're coding in Haskell and Pascal at the sime time :)
14:39:26 <Riastradh> ibid, yes, but why would you want liberal variables?
14:40:28 <ibid> Riastradh: i don't
14:40:38 <ibid> Riastradh: but it would be possible, should one want them
15:13:42 <skew> jadrian: how is the average function working out?
15:14:40 <skew> realToFrac isn't specialized for the various Integral -> Fractional conversions, but it's enough to add rules that use fromIntegral at that type, and rely on the rules for fromIntegral
15:17:26 <jadrian> skew: I just implemented a bunch of versions and moved on... 
15:19:07 <jadrian> skew: can't waste much more time with this kind of issues, got to concentrate on my own work :)
15:19:30 <jadrian> skew: but yeah, I think I'd be able to do a pretty efficient version now
15:20:14 <skew> adding {-# RULES "realToFrac/Int/Double" realToFrac = fromIntegral :: Int -> Double #-} should do it
15:21:08 <skew> that is, with that rule a use of realToFrac at type Int -> Double compiles to a call to the int2double primitive
15:22:04 <jadrian> yeap
15:22:11 <jadrian> I wonder why that isn't done already
15:24:26 <jadrian> is there a difference between functions defined at both, GHC.IO and System.IO
15:24:28 <jadrian> ?
15:24:46 <skew> I don't think so
15:24:55 <jadrian> I wonder why the overlaping...
15:25:02 <skew> GHC modules generally have the implementation and some internal functions
15:25:32 <skew> then the other modules export the standard interface
15:25:53 <jadrian> ah right
15:26:04 <jadrian> so I should use System.IO
16:32:06 * shapr chortles happily
16:33:06 <Igloo> Wassup, Shae?
16:33:17 <shapr> general happiness
16:33:23 <shapr> wassup with you?
16:33:24 <Igloo> Excellent
16:33:33 <Igloo> Saw Isaac today
16:33:37 <shapr> neat!
16:33:55 <Igloo> Before banishing him to two weeks in the wilderness up North
16:33:56 <shapr> did you have a hackfest?
16:33:59 <shapr> heh
16:34:25 <Igloo> Nah, only a 2 hour encounter or so, but I'll be seeing him for longer on his way back
16:34:47 <shapr> that's good
16:35:11 <shapr> are you coming to EuroHaskell?
16:35:26 <Igloo> Nope  :-(
16:35:34 <shapr> ah, too bad
16:35:58 <shapr> maybe next time EuroHaskell will happen in the UK
16:36:07 <Igloo> I might be putting in appearences at HW and AFP SS though
16:36:11 <Igloo> :-)
16:36:13 <shapr> nifty
16:37:04 <shapr> I think EuroPython and EuroHaskell are all the conferences I can afford this year.
16:39:16 <Pseudonym> Shame none of these things happen in my neck of the woods.
16:39:16 <Igloo> *nod*
16:39:25 <Pseudonym> Haven't been to a conference since OSCON 2000.
16:40:28 <shapr> you could organize HaskellDownUnder
16:40:40 <Pseudonym> No I couldn't.
16:40:47 <Pseudonym> :-)
16:41:58 <shapr> get enough people and hardware together and you've got something
16:42:31 * andersca bounces
16:42:42 * shapr studsar
16:43:00 <Pseudonym> You also need enough time.
16:43:10 <Pseudonym> And enough care factor.
16:44:08 <shapr> I do enjoy getting people together to write code
16:44:42 <Pseudonym> There are a lot of Haskellers in Melbourne, admittedly.
16:44:53 <Pseudonym> Maybe next time Melbourne hosts ACSC.
16:45:25 <shapr> you're in Sydney, right?
16:45:30 <Pseudonym> No, Melbourne.
16:46:07 <shapr> well then
16:48:01 <Pseudonym> How's this for a paper title?
16:48:04 <Pseudonym> "Efficiently Computing the Top N Averages in Iceberg Cubes"
16:48:18 <shapr> interesting
16:48:33 <Pseudonym> The mental image which it conjures is priceless.,
16:48:36 <shapr> is that from the Iceberg game?
16:48:45 <Pseudonym> No idea.
16:53:50 <shapr> hi kpreid 
16:54:05 <shapr> looking for Haskell info?
16:54:15 <kpreid> only lurking
16:54:43 <shapr> xu do tavla mi fo la lojban
16:57:05 <shapr> kpreid: nice smartwheel
16:57:20 * kpreid . o O ( i've been googled? )
16:57:34 <shapr> yup
16:58:04 <kpreid> .ii .u'i
17:00:08 <shapr> mi djica lenu sipna
17:00:36 <shapr> g'night ppls
17:00:47 * shapr wanders off
17:01:21 <Pseudonym> Night.
18:09:59 <skew> does anybody here know where to look in the logs for SynatxLaptop's (IIRC) newbie vignette?
18:17:27 <skew> I found this from a #tunes log "<nate37> haskell and maude are implementations of self i presume"
18:21:51 <Cale> heh
18:21:57 <Cale> heheh
23:49:13 <earthy> coolness!
23:49:45 <earthy> a topic I didn't have on my list before!
23:49:58 <earthy> and the corresponding entry to go with it in the HC&AR
23:50:04 <earthy> yeah
23:50:16 <earthy> good morning, by the way. :)
23:50:27 <skew> hi
23:50:37 <skew> what's the coolness entry for the HC&AR?
23:50:39 <l^rchkrn> Mornin
23:55:27 <earthy> oh, EclipseFP
23:55:44 <earthy> it's up on the web already ;)
