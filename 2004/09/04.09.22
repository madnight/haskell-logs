00:32:20 <xkb> Is it possible to create a dynamic jpeg, served by http with haskell?
00:32:26 <xkb> For use as an avatar on fora
01:11:06 <stefan_> @yow
01:11:06 <lambdabot> I predict that by 1993 everyone will live in and around LAS VEGAS and
01:11:06 <lambdabot>  wear BEATLE HAIRCUTS!
01:54:56 <yohan_> does anyone know how i might convert a char to a integer? my chars are all integers and i just want it converted...doesnt seem to work with ord or fromEnum
01:55:07 <yohan_> '5' i want to be 5 etc
01:58:01 <earthy> read ['5']::Int
01:59:54 <arjanb> fromEnum '5' - fromEnum '0'
02:01:48 <yohan_> thank you
02:05:47 <yohan_> but if i have "36" for example, how would i convert that?
02:07:18 <yohan_> nvm
02:08:37 <yohan_> read works a charm
02:14:59 <kristnjov_> hi
02:20:42 <xkb> hmm is mod_haskell still active?
02:21:05 <earthy> no. :)
02:21:22 <xkb> Age: 4 years
02:21:23 <xkb> ah :D
02:21:50 <xkb> Is there any alternative to use haskell to output to html?
02:21:57 <xkb> and esp. an image?
02:22:56 <earthy> well, there's wash
02:23:05 <xkb> wash
02:23:05 <xkb> ok
02:23:12 <xkb> wash.info it was?
02:23:23 <xkb> ah no
02:23:29 <xkb> google still is my friend
02:23:56 <xkb> hmm I want the following:
02:24:12 <xkb> browser requests http://something.net/picture.jpg
02:24:22 <xkb> however picture.jpg is a haskell script
02:24:31 <xkb> that sets the contenttype to jpeg
02:24:34 <xkb> image/jpeg
02:24:41 <xkb> and returns an image
02:24:46 <earthy> hm. yeah
02:24:53 <earthy> that's gonna be a bit trickier :)
02:25:06 <xkb> yeah.. I did the same in PHP and Java b4
02:25:14 <xkb> and this is just a a proof of concept
02:25:26 <xkb> people said it could only be done with php :?
02:25:38 <earthy> that is quite untrue ;)
02:25:49 <earthy> I could easily do it by hand in C, e.g.
02:25:51 <xkb> yeah...
02:25:55 <xkb> perl even :P
02:26:10 <xkb> haskell is a bit harder though :P
02:26:13 <earthy> but I don't know a library for generating jpeg off the top of my head
02:26:39 <earthy> but halipeto might be helpful...
02:27:12 <xkb> thats a template system?
02:27:35 <earthy> the other thing Andrew made...
02:27:40 <xkb> ah
02:27:58 <earthy> pancito
02:28:19 <earthy> I always mistakenly pick the one for the other
02:28:58 <earthy> http://acooke.org/jara/pancito/
02:36:25 <kristnjov_> hi again
02:36:30 <kristnjov_> how do i add two lists together?
02:36:40 <arjanb> ++
02:40:29 <kristnjov_> thx
02:43:10 <kristnjov_> how do i return an empty list looking like [(Int,Int)]?
02:43:25 <xkb> []
02:49:09 <kristnjov_> if I have a list of integers and want to use each integer in the list as an argument for a different function, how would i do that?
02:49:54 <xkb> iterate over the list?
02:50:11 <kristnjov_> where can i read about iteration then? :P
02:50:21 <xkb> any basic haskell tutorial
02:50:28 <xkb> iteration is done using recursion
02:50:46 <kristnjov_> you mean recursion?
02:50:54 <kristnjov_> yeah... but that didn't seem to work very well for this one.
02:51:02 <xkb> using a differnt function is harder indeed
02:51:11 <xkb> can you describe what you want to accomplish?
02:51:26 <xkb> perhaps there's an easier way
02:51:30 <kristnjov_> it's very diffuse, but i'll try to explain
02:51:46 <xkb> ok
02:52:09 <kristnjov_> buildHistogram (b:bs) (o:os) = (addObservation o (emptyHistogram (b:bs)))
02:52:25 <andersca> we're not gonna do your lab assignment for you :)
02:52:28 <kristnjov_> that's the code i have... and i want to do that for each value of o
02:52:49 <kristnjov_> yeah well i'm not trying to get straight answers from you, i just need direction
02:53:16 <xkb> so you want to apply buildHistogram to each value of o
02:53:17 <xkb> ?
02:53:24 <kristnjov_> exactly.
02:53:50 <xkb> read about currying and map.. *I think*
02:54:03 <xkb> hard to tell without the type's and exact description
02:54:24 <kristnjov_> yeah well i can't really give you an exact description, that would be too much :P
02:54:34 <xkb> ok :)
02:54:36 <kristnjov_> but i looked map up now and it might just work
02:54:37 <kristnjov_> thanks
02:54:43 <xkb> welcome
02:59:38 <kristnjov_> hmm, seems to be a bit more tricky than that
03:00:54 <shapr> d00d
03:01:19 <kristnjov_> ye
03:09:50 <kristnjov_> how do i get the first list from a list such as [[(Int,Int)]]?
03:10:25 <cptchaos> xs!!0
03:10:29 <arjanb> head
03:10:31 <cptchaos> where xs is the list
03:11:05 <kristnjov_> thanks
03:11:11 <kristnjov_> but dammit this function isn't working.. :/
03:11:49 <arjanb> kristnjov_: you should read the prelude to see the basic functions
03:11:54 <shapr> yes
03:12:06 <shapr> http://www.cs.uu.nl/~afie/haskell/tourofprelude.html
03:12:17 <kristnjov_> i knew of head, but i thought it returned the first element of a list..
03:12:46 <shapr> if you read the tour of the prelude, you'll suddenly have bigger Haskell muscles.
03:13:49 <xkb> [[a]] is a list of lists
03:13:56 <xkb> so the first element of that list is a list
03:14:04 <kristnjov_> heh, true
03:14:09 <kristnjov_> never thought of it that way
03:16:16 <kristnjov_> thanks for the help
03:16:17 <kristnjov_> i'm off
03:19:04 <Boegel> hello everyone
03:20:43 <Boegel> tic, how did your project work out ?
03:21:16 <tic> Boegel, hey.  Good, I hope. :)
03:21:18 <tic> No results yet.
03:21:26 <tic> but, now I should get started on my TSP handin.
03:21:55 <Boegel> but you managed to finish it ?
03:23:59 <Boegel> TSP = Travelling Salesman Problem?
03:24:02 <Boegel> that's a classic :)
03:24:39 <xkb> prio queue imp needed? :D
03:25:48 <tic> xkb, actually, first hand-in is only two problems: 1. do it by hand using a map of europe, 2. brute force. :)
03:25:57 <xkb> ahh
03:27:12 <Boegel> that's pretty easy then...
03:28:19 <tic> Yup, indeed.
03:28:31 <tic> the 2nd, and probably last, hand-in is to devise an algorithm.
03:28:41 <tic> but well, that's far in the future
03:28:45 <tic> so why not waste away at IRC, as usual. :)
03:30:07 <shapr> hoi wouter 
03:30:14 <wouter> hi shapr
03:33:28 <Boegel> hehe
03:45:14 <shapr> hiya mnemo 
03:45:21 <mnemo> hi :)
03:45:31 <mnemo> i didnt even know this chan existed lol
03:45:39 <shapr> heh
03:46:03 <shapr> lotsa people on #haskell today
03:46:20 * shapr peers around for new arrivals to #haskell
03:46:32 <shapr> Boegel: aha! who are you? ;-)
03:46:42 <Boegel> hello ;)
03:46:45 * shapr snickers
03:47:31 * Boegel bounces :p
03:48:54 <tic> shapr, and who are you!
03:49:52 <Boegel> I'm just a n00b shapr, don't mind me :p
03:54:30 <shapr> tic: well, I heard about this cool thingy called curry.
03:54:37 <shapr> and I googled for curry
03:54:48 <shapr> and lots of people on this irc channel talk about curry.
03:55:42 <shapr> tic: do you know how to make curry?
03:55:49 <Boegel> lol :o)
03:55:52 <tic> Hm..
03:55:56 <tic> I know how to make curry
03:56:05 <tic> I prefer it with Chicken.
03:56:21 <vegai> google "curry" I'm feeling lucky
03:56:23 <kosmikus> shapr: try http://www.informatik.uni-kiel.de/~mh/curry/  ;)
03:56:48 <Boegel> woops :)
03:56:49 <shapr> Boegel: heh :-)
03:56:54 <shapr> kosmikus: yay!
03:57:27 <Boegel> hehe
03:59:17 <Boegel> so shapr, there won't be a Haskell magazine soon ?
03:59:42 <xkb> no magazine?
03:59:43 <xkb> :(
03:59:45 <shapr> there will be, if there are more people interested than just me
04:00:18 <Boegel> I think it's clear I'm interested :p
04:00:25 <Boegel> I've been thinking about the GUI article
04:00:28 <shapr> ok, write it
04:00:35 <Boegel> hehe
04:00:40 <shapr> I think Lemmih will write an article also
04:00:42 <Boegel> maybe I will
04:00:45 <Boegel> but
04:00:58 <shapr> if we get a few articles, I'll publish the first issue
04:00:59 <shapr> I'll make the time
04:01:00 <Boegel> you have to figure out how you will spread the magazine
04:01:05 <Boegel> I think Wiki won't do
04:01:13 <shapr> I think it will do for the beginning
04:01:19 <Boegel> a few, meaning 5 or so ?
04:01:21 <shapr> though I agree that .ps or .lhs would look better
04:01:21 <edwinb> a haskell magazine, you say?
04:01:32 <shapr> edwinb: yes, want to write an article or maybe even a column?
04:01:32 <Boegel> here we go :o)
04:01:35 <shapr> epigrams? ;-)
04:01:48 <edwinb> I don't want to write anything at all ever again ;)
04:01:57 <xkb> lol
04:01:58 <edwinb> But maybe...
04:02:23 <Boegel> why not edwinb ?
04:02:30 <shapr> Boegel: thing is, a magazine needs some regular writers, people who will commit to writing a either series of articles, or a regular column
04:02:44 <edwinb> I've only just finished a thesis.
04:02:52 <edwinb> What sort of thing would it have in it? How technical, for example?
04:03:03 <shapr> as technical as you want
04:03:20 <shapr> I'd like to have a balance
04:03:20 <Boegel> yeah, that's the problem
04:03:26 <Boegel> I'm not really that regular :p
04:03:28 <shapr> I've been volunteered for shapr's n00b column
04:03:33 <shapr> and that's fine with me
04:04:15 <shapr> but I'd also like to see articles on working with/against the type system; ie.  using types to encode program information, or using Dynamics to escape the type system
04:04:41 <edwinb> Fun ways to subvert the type system...?
04:04:52 <xkb> Dynamics are koel!
04:04:54 <shapr> edwinb: if you wrote a response to Frank Atannasow's thoughts on disadvantages of dependent typing, I'd be *very* interested
04:05:05 <Boegel> that's nothing for me shapr, I don't even know what you're talking about :p
04:05:08 <edwinb> Now that'd be something worth writing actually.
04:05:25 <edwinb> But I'm not sure what it has to do with haskell (except for SPJ's recent interest in more dependent stuff)
04:05:33 <Boegel> maybe you should start with a 2-monthly issue or so ?
04:05:35 <shapr> Lemmih pointed out the ACM web submission contest that has zillions of programming problems for the puzzle column
04:05:43 <Boegel> once a month is pretty hard I think
04:05:57 <shapr> Boegel: I wanted a weekly issue at first :-)
04:06:01 <Boegel> hehe
04:06:05 <Boegel> good luck with that ;)
04:06:15 <shapr> that's still my goal
04:06:16 <xkb> or "Library of the week"
04:06:22 <xkb>  /month
04:06:34 <shapr> xkb: that would be cool, someone suggested a spotlight column
04:06:47 <Boegel> yeah, but I don't think that's possible in the beginning
04:06:58 <Boegel> also, you should get some pro's to write article's
04:06:58 <shapr> Boegel: yah, monthly sounds like a good starting point
04:07:07 <Boegel> else it's just a bunch of wannabe's writing stuff
04:07:13 <xkb> or also interesting: "Haskell in real-life problems"
04:07:19 <shapr> what's the difference between a wannabe and a pro?
04:07:22 <xkb> as that is the most often heard question
04:07:25 <xkb> I need to answer
04:07:28 <shapr> a wannabe doesn't actually do anything :-)
04:07:40 <xkb> isnt that a wannado
04:07:40 <xkb> :D
04:07:43 <shapr> heh
04:07:44 <shapr> good point
04:08:00 <shapr> a Haskell in Industry spotlight column would be very cool
04:08:03 <Boegel> that's a wanndo'nt ;)
04:08:08 <xkb> lol
04:08:32 <Boegel> pro's have a nested name, they can help in making the magazine 'famous'
04:08:42 <xkb> or stories about other functional languages.. 
04:08:46 <Boegel> else nobody would care about it
04:08:46 <shapr> I think good content will make a good magazine
04:08:54 <xkb> however: pro's will often go to jfp
04:09:00 <Boegel> jfp ?
04:09:06 <shapr> journal of functional programming
04:09:12 <Boegel> yeah, maybe
04:09:12 <shapr> costs money :-/
04:09:25 <Boegel> but a specific Haskell magazine might interest them too
04:09:26 <shapr> I'm poor, can't afford a subscription, and I don't work for or near a university.
04:09:41 <Boegel> I'm a student in a university
04:09:46 <edwinb> This sounds like it's aiming at a very different audience from JFP
04:09:59 <shapr> right, people who want to learn and write Haskell.
04:10:43 <Boegel> I don't think you should make stories on other functional languages, because that would be too close to jfp then
04:10:57 * shapr shrugs
04:11:00 <xkb> shapr, what do you do for work?
04:11:10 <shapr> I write Python code for Zope/Plone
04:11:14 <xkb> ahh
04:11:18 <shapr> I'm a self-employed programmer.
04:11:35 <xkb> nice.. Im doing freelance work atm
04:11:37 <xkb> java
04:11:45 <shapr> I do think Haskell has the potential to be the next C, where all the apps of the next generation are written in it
04:11:50 <xkb> and trying to write a thesis :P
04:11:56 <shapr> I do freelance Java also
04:12:09 <shapr> heck I'll do freelance coding of any flavor if the pay is right.
04:12:10 <xkb> nice.. J2ee stuff?
04:12:19 <shapr> yes, J2EE, though I don't like it much
04:12:22 <shapr> Zope is a lot less trouble.
04:12:55 <shapr> I'm a fan of Jython, I can get a lot of Java work done quickly that way.
04:13:06 <xkb> Never used it
04:13:22 <xkb> that a binding from java to python?
04:13:26 <xkb> or the otherway around?
04:13:29 <shapr> it's a Python implementation written in Java
04:13:32 <shapr> very nifty
04:13:34 <xkb> ah
04:14:03 <shapr> I wrote a tiny PowerPoint clone in Jython for the Nokia 9210 in a coupla weeks
04:14:17 <shapr> http://www.scannedinavian.org/~shae/nokia-emu-jython.png
04:14:38 <shapr> sadly, that's just a boring screenshot of the Jython interpreter running on the Nokia 9210 emulator
04:14:46 <shapr> I didn't think of taking pix of the PowerPoint clone
04:16:16 * shapr considers JournalOfFunk
04:17:39 <Boegel> shapr, I think 'Haskel' should be in it
04:17:44 <Boegel> Haskell that is :p
04:17:55 <shapr> Anyway, I'm interested in standalone articles, but I'm even more interested in authors for article series or regular columns.
04:18:07 <shapr> CurriedFunk?
04:18:14 <Boegel> that will be harder I think
04:18:39 <Boegel> not many people know for sure they'll have time to write articles in the near future
04:19:00 <kosmikus> shapr: you should probably have a look at the HCAR and ask people that currently seem to be doing interesting stuff for articles
04:19:07 <shapr> some columns will be pretty simple, like someone who will put up one of the ACM problems and then judge and write up something about the submissions for next month
04:19:12 <shapr> kosmikus: oh good point!
04:19:52 * Boegel sees it coming together
04:20:07 <shapr> Boegel: yes, same for me, being self-employed means I usually have either too much work or not enough money.
04:20:09 <kosmikus> shapr: yes, and tell everyone who writes an article about something that isn't in the HCAR that he/she should do so for the next issue in November ;)
04:20:13 <xkb> now someone needs to acctually write :D
04:20:39 * edwinb wonders where to find Frank's comments on dependent types. Are they liberally scattered around LtU?
04:21:03 <shapr> edwinb: I don't remember, but I'm sure I can google them up again if you want.
04:21:11 <edwinb> I'm googling and not finding much...
04:21:20 <edwinb> All I remember is "lack of modularity"
04:21:40 <shapr> or you can just ask him to write a coherent essay on dep types
04:21:57 <shapr> I'm sure he'd be willing to cough up a few paragraphs
04:22:01 <edwinb> Coherent essays on dependent types are not the easiest things to write ;)
04:22:06 * shapr grins
04:22:11 <edwinb> (or read, I'm not sure which)
04:24:31 <shapr> well, there seems to be a certain level of Haskillz where people realize they can encode lots of useful info into the type system
04:24:47 <shapr> after that, you reach the next level where you realize there's info you cannot encode into the HM typesystem
04:25:07 <shapr> then you find epigram and realize it can encode a lot of the stuff HM can't handle
04:25:38 <shapr> I haven't yet reached the point where I can see the limitations of epigram.
04:26:35 <edwinb> Well, other than purely practical limitations of the current implementation.
04:27:33 <shapr> those are a simple matter of programming
04:28:11 <edwinb> heh, yes.
04:28:20 <shapr> I'd like to see if Si\'s xml encoding problems are solved by epigram's type system for example.
04:28:42 <edwinb> So would I. I'm looking for a killer app to make a research proposal out of...
04:28:50 <cptchaos> sorry, what is  epigram?
04:29:05 <shapr> http://www.dur.ac.uk/CARG/epigram/
04:29:11 <edwinb> It's an experimental dependently typed programming language
04:29:17 <shapr> it's way sexy
04:29:20 * cptchaos is reading
04:31:11 <shapr> edwinb: from what I understand, epigram can encode behavioural properties, and I don't know of anything else that can
04:31:47 <edwinb> One of the nice things is to encode invariants in the type so that just by writing a program, you get a proof that those invariants hold.
04:32:02 <shapr> that might mean you could hook up with Simon Thompson and the rest of the embedded Haskell bunch to do embedded epigram
04:32:26 <shapr> the single hardest problem with Haskell is that its behaviour is not very deterministic
04:32:31 <edwinb> One thing I have in mind is to knock up a bytecode machine which encodes stack invariants, for example.
04:32:35 <shapr> space leaks being the real killer
04:33:12 <shapr> if you can use epigram's type system to prove that a certain program is just as deterministic as a refcounted implmenetation
04:33:36 <shapr> then you get all the power of epigram with all the reliability of something like Python
04:33:59 <edwinb> that sort of thing might be more tricky, because you're wanting to encode things about the implementation of Epigram.
04:34:11 <shapr> yes, that would be the biggest problem
04:35:25 <edwinb> I should learn more about XML. I'm sure there;s some interesting problems there.
04:35:54 <edwinb> I don't understand real world problems. I only write programming languages ;)
04:37:04 <shapr> I wish I could be self-employed half-time and a PhD student half-time
04:37:06 <shapr> that would be fun
04:37:43 <shapr> I really like applying cool technology to real client problems.
04:38:27 <shapr> though I have some advice: never try to explain to a PHP programmer that their language is just one instance of the idea of a domain specific language ;-)
04:39:01 <edwinb> heh
04:39:08 <xkb> shapr, lol
04:39:42 <xkb> They always try to explain me that their language is the best programming language
04:39:51 <xkb> because they can develop in it so quickly
04:40:38 <edwinb> The one PHP developer I know says he wishes it had static typechecking...
04:40:47 <xkb> wow.. how rare
04:41:19 <edwinb> As far as I know, this guy doesn't know *any* statically typed languages...
04:43:48 * edwinb wanders off for a liquid lunch
04:44:08 <yohan_> can I somehow test a generator? I would like to see its output, so i know it works
04:51:58 * Boegel is off again, again throwing himself at FunMath
04:52:31 <shapr> yohan_: sure, what generator?
04:52:41 <shapr> yohan_: I assume you're talking about QuickCheck?
04:53:01 <yohan_> yeah ive written a generator which returns a sorted list of integers and i want to check if it works
04:53:12 <yohan_> yeah quickcheck
04:53:18 <shapr> load it up into ghci and call arbitrary on it
04:53:35 <yohan_> ghci?
04:53:43 <xkb> ghc interactive
04:54:00 <xkb> its in the ghc package
04:54:01 <yohan_> k i started it now
04:54:20 <yohan_> i assume i load my main then do what?
04:58:24 <shapr> arbitrary is a typeclass method
04:59:09 <shapr> umm
05:01:36 * shapr tries to remember how this works
05:02:10 <shapr> generate 9 (mkStdGen 6) (arbitrary :: Gen Int)
05:02:20 <shapr> assuming System.Random is in scope
05:02:26 <shapr> I think there's an easier way though...
05:02:37 <shapr> Marvin-- is the real expert on QuickCheck
05:03:17 <shapr> the first Int there is the size argument, and the second is the rng
05:03:36 <shapr> you can choose which arbitrary instance is called by changing the type sig
05:03:42 <shapr> arbitrary :: Gen [Int] for example
05:03:46 <shapr> yohan_: does that help?
05:03:54 <musasabi_> morning
05:03:56 <yohan_> ah
05:04:19 <shapr> hyvää paiva Einar
05:04:20 <musasabi_> anything new in the haskell world today?
05:04:25 <yohan_> k ill figure it out
05:04:38 <yohan_> thnx
05:04:45 <yohan_> musasabi_ ha nihonjin desu ne
05:05:01 <musasabi_> iie, chigaimasu, finrando-jin desu.
05:05:01 <shapr> yohan_: so, generate 9 (mkStdGen 6) (arbitrary :: Gen {insert your type name here})
05:05:02 <shapr> musasabi_: want to write a column for Haskell Monthly?
05:05:09 <musasabi_> formal ;) god dag Shae.
05:05:26 <yohan_> ah k
05:05:45 <yohan_> ah, sou sou....nande anata no name ha musasabi?
05:05:49 <shapr> yohan_: hey, have I met you before at chalmers?
05:06:06 <yohan_> shapr maybe, why do you ask? :)
05:06:21 <musasabi> shapr: in principle that sounds interesting, but I would have to know more to say anything definitive.
05:06:29 <shapr> it's always nice to connect realnames with irc nicknames
05:06:34 <shapr> musasabi: what more would you like to know?
05:06:51 <shapr> like most of my ideas, there's no real plan beforehand.
05:07:00 <yohan_> shapr, hehe maybe you saw my nollbricka sometime?
05:07:08 <shapr> hm
05:07:22 <yohan_> what year are you in?
05:07:29 <shapr> -4 probably
05:07:51 <shapr> I have yet to reach chalmers, though I would like to attend.
05:07:55 <musasabi> yohan_: Sore wa mukashi no hanashi...
05:08:14 <shapr> I was at chalmers for EuroPython and EuroHaskell
05:09:02 <shapr> jag har ingen aning vad du pratar om! har är kanin med pannkaka på huvudet: http://www.scannedinavian.org/~shae/kanin.jpg
05:09:06 * shapr loves that pic
05:09:30 <yohan_> ah. sou da ne...nihongo o benkyoushite imasuka
05:09:41 <shapr> yohan_: I'm a 33-year old self-employed progrer from the USA, living in Boden
05:09:44 <shapr> programmer
05:09:45 <shapr> oy
05:09:47 <yohan_> ah lol shapr 
05:10:05 <yohan_> how do you get money? :)
05:10:10 <shapr> I write Python
05:10:10 <yohan_> i mean
05:10:13 <musasabi> shapr: things like how long, what style of text, for which audience and when it should be ready.
05:10:13 <yohan_> what are you doing :)
05:10:15 <yohan_> ah
05:10:34 <yohan_> is Chalmers very famous in the states shapr?
05:11:36 <shapr> musasabi: um, I'd say between one and five pages, informal style (this is *not* JFP), I hope for an audience with mixed newbies and experienced FPers, and the first issue won't come out until I have enough content
05:11:57 <shapr> yohan_: in the Haskell world, sure
05:12:11 <yohan_> wow, cool
05:13:22 <shapr> anyway, you may enjoy #haskell.se for the svenska specific content
05:14:11 <shapr> yohan_: so, did your generator work?
05:14:51 <shapr> I gotta drive over to my old apartment to dump some furniture and put some air in my tire
05:14:58 * shapr disappears
05:15:41 <yohan_> shapr nope...im having trouble figuring out how to make the lists generated sorted
05:15:49 <yohan_> later man
05:16:43 <musasabi> shapr: I'll think about it...
05:16:49 <musasabi> => (home from uni)
05:22:43 * Si\ just notices his name was mentioned hurrah!
05:23:18 <Si\> It _think_ my XML de/serializer is almost working now
05:30:34 <musasabi> Si\: are you handling cyclic data *and* strings?
05:59:01 <Si\> musasabi: I'll answer that later :)
06:05:43 <thebug> yo shapr 
06:14:53 <tic> shapr, you've worked with both haskell and python.  what would happen if one were to add lazy eval to python?
06:16:45 <ski> 3 ppl looking for shapr ..
06:17:51 <Lemmih> Make that four.
06:20:20 <thebug> :)
06:27:00 <reffie> shapr is so popular
06:45:55 <shapr> :-P
06:46:04 <Lemmih> And he's back (-: Yay
06:46:12 <shapr> and about to go shopping
06:46:25 <shapr> tic: should be easy to do actually
06:47:04 <xkb> is anyone here using lstlisting in latex?
06:47:24 <shapr> I suspect it would be straightforward to create a Thunk class that wraps existing instances
06:49:03 <musasabi> xkb: yes.
06:49:53 <xkb> musasabi, how can I create a ref to a listing?
06:49:59 <xkb> where do I place \label
06:50:13 <xkb> behind the caption does not work
06:50:26 <xkb> at the end of a lstlisting refers to the current paragraph
06:50:56 <xkb> ah
06:50:59 <xkb> found it
06:51:01 <xkb> never mind
06:52:12 <xkb> you need to place it within the caption
06:52:57 <musasabi> sorry, was too slow..
06:53:04 <xkb> np
06:53:33 <tic> shapr, [thunk]  how would it work? I mean, what happens if you use: if a or b: ? You only need to evaluate one of them.
06:54:49 <shapr> or is already lazy
06:54:55 <shapr> so is if for that matter
06:55:11 <shapr> if has to be lazy, otherwise you'd execute both branches
06:56:04 <shapr> optimistic GHC is the only system I can think of where both branches of an if would normally be eval'd
07:01:33 <earthy> shapr: actually, in speculative out-of-order execution of machine code processors tend to speculatively execute *both* codepaths after a branch if they're in the cache
07:01:57 <Philippa> yeah, but only insofar as they don't involve a write
07:02:03 <Philippa> (to memory, obviously)
07:02:07 * earthy nods
07:02:27 <earthy> but in IA64 even that is not necessarily true anymore
07:02:40 <Philippa> really? What've they done with that?
07:02:55 <earthy> predicated instructions
07:03:40 <earthy> so a store can be predicated, and it can be tentatively executed, in which case the store will be marked in the write cache to be possibly squashed later
07:04:22 <Philippa> interesting, though the side-effects're limited until it's known the write stands
07:04:58 <ski> (partial evaluation (PE) (e,g, type-directed PE) also can evaluate both branches, as well as staged programming, in some sense)
07:05:14 * earthy nods
07:07:57 <ski> (e.g. in MetaML,  reify (fn x => if x then print "a" else print "b")  might print 'a' and 'b' and return  <fn false => () | true => ()>  or something like that)
07:22:52 <Boegel> and I'm back
07:23:08 <Boegel> shapr, how many candidates do you have to write an article ?
07:23:18 <Boegel> musasabi, me, ... anymore ?
07:26:19 <Boegel> which of you guys knew prof. Boute again ? and FunMath :s
07:26:31 <Boegel> it's only been 2 days orso, and I forgot already :)
07:28:28 <ski> Boegel : shapr's gone shopping, i think
07:28:50 <ski> Boegel : (article about what ?)
07:29:30 <Boegel> we'll, I was thinking to write an article on the different GUI library's for Haskell
07:29:39 <Boegel> I need to study them anyway for my thesis, so ...
07:29:51 <Boegel> but it won't be a 'high level' article dough :)
07:29:51 <ski> mhm
07:29:54 <Boegel> I'm still a student
07:30:59 <Boegel> ski, what ? not a good idea ?
07:32:02 <Philippa> Boegel: user level articles are what we need more of anyway
07:32:07 <ski> Boegel : huh ?
07:32:27 <Philippa> the sort of thing you can hand to newbies to pick a GUI lib with
07:32:30 <Boegel> [16:29] <ski> mhm
07:32:55 <Philippa> ski: "mhm" gets read as variously contemplative, sarcastic, ironic, maybe even satirical...
07:33:24 <Boegel> I would pay attention on the pro's and ocn's of the different library's, include a 'Hello World' example for each of them, and discuss the installation requirements
07:33:50 <Boegel> but I'm starting to wonder when I will have time for writing the thing :)
07:33:56 <ski> Philippa : oh
07:34:10 <edwinb> Well if you have to study them, writing about them is a good way to do that.
07:34:12 * ski just roughly meant he understood
07:34:26 <ski> (i.e ~ contemplative)
07:34:29 <Boegel> ski, your reaction seemed like 'mhm, what a dumb idea' :p
07:34:43 <Boegel> edwinb, I think so too
07:34:43 <ski> no, that's not at all what i meant, lol
07:34:54 <Boegel> ski, okay then :o)
07:35:23 <Boegel> do you guys have tips on which library's I should look into ?
07:35:44 <Boegel> I'm already thinking about FranTk, wxHaskell and gtk2hs
07:35:55 <Boegel> but the only one I've really worked with is FranTk
07:36:19 <Boegel> the manual sucks, the look 'n feel isn't that spectacular, and it's outdated
07:36:35 <Boegel> my promotor even had to make a few adjustments to it to get it working with Hugs
07:36:46 <Boegel> and he said a lot more adjustment is needed to get it working with GHC
07:39:28 <ski> Boegel : just another link for you : http://www.cs.chalmers.se/Cs/Grundutb/Kurser/afp/yahu.html
07:40:46 <Boegel> thx ski
07:40:48 <Boegel> looks good
07:40:53 <Boegel> I'll write it down :o)
07:41:11 <Boegel> move the programming model of Yahu (Attribute/set/get functionality) into the Haskell library hierarchy so that other (GUI) libraries can use it
07:41:17 <Boegel> source: http://cs-www.cs.yale.edu/homes/nilsson/HIM/slides-and-notes.html
07:41:28 <ski> (not that i've used it much. iirc it's a kinf of wrapper for Tk)
07:42:09 <Boegel> FranTk is based upon Tcl/Tk too
07:42:19 <Boegel> but it's aged (unfortunately)
07:42:25 <Boegel> it bled to dead I think
07:43:30 <musasabi> Boegel: sounds nice.
07:44:10 <Boegel> it's nice it bled to death ? :p
07:44:12 <Philippa> Boegel: will you include the installation requirements for win32 as well as *nix flavours?
07:44:26 <Philippa> (where appropriate, of course)
07:44:27 <Boegel> I'll try to, but I only work on Windows...
07:44:33 <Philippa> heh
07:44:49 <Philippa> I tend to run into *nix-only more than windows-only around here
07:44:50 <Boegel> I'll include them for Windows for sure, and I'll try to do the same for linux
07:45:02 <Boegel> I know, and I'm ashamed of that :s
07:45:24 <musasabi> Currently I like the model where a GUI is a structured document best.
07:45:28 <Boegel> but if the magazine is also meant to be for newbie's, I shouldn't exclude Windows, should I
07:45:42 <Philippa> no kidding
07:45:44 <Boegel> musasabi, which model is that ?
07:45:58 <Philippa> I'm all but windows-only - this machine dual-boots Debian, but I haven't loaded it in ages
07:46:17 <musasabi> Boegel: a little bit WASH like...
07:46:21 <Philippa> don't have any good cause, whereas I play enough games...
07:46:34 <Boegel> I could install linux for testing the installation sequence of the library's
07:46:39 <Philippa> heh, I just had to work out how to respond to GETs in WASH the other day...
07:46:57 <Boegel> musasabi ? what is wash ?
07:47:07 <musasabi> Boegel: a web framework.
07:47:11 <Boegel> I don't know it :)
07:47:19 <Boegel> damn, i really am a n00b :p
07:47:20 <musasabi> Boegel: basically one needs to have just one gui function - namely "setGui :: Gui -> IO ()" and then build guis as structured documents.
07:47:45 <musasabi> Boegel: e.g. button :: String -> (Gui -> IO ()) -> Gui
07:48:02 <musasabi> Boegel: hbox :: [Gui] -> Gui
07:48:16 <Philippa> how'd you find fruit?
07:48:22 <Igloo> I always find myself passing too many control to too many functions when I write GUIs
07:48:57 <musasabi> fruit?
07:49:45 <earthy> it's a GUI toolkit, musasabie
07:49:56 <Boegel> ow, I'll add that one too then :)
07:49:56 <earthy> http://haskell.cs.yale.edu/yale/papers/haskellworkshop01/
07:50:29 <earthy> but, if you want to do guis in haskell these days, the accepted way to go seems to be wxHaskell
07:50:57 <Philippa> yeah, once you've figured out how to use WxCore for the stuff not in Wx it's pretty cool
07:51:08 <Boegel> do you knwo any more earthy ? I already have: FranTk, wxHaskell, Fruit, gtk2hs, Yahu
07:51:18 <Boegel> *know*
07:51:23 <Philippa> am looking forward to the proposed wxYampa thingy when it's done
07:52:32 <earthy> Boegel: FranTk, wxHaskell, Fruit, gtk2hs, Yahu, Fudgets, HTk, HToolkit, HSX11
07:53:03 <earthy> oh, and if you're looking for something haskelly, check http://www.haskell.org/communities/
07:53:11 <Philippa> Igloo: I'm still slowly working towards the point where I'll implement something MVC-like...
07:53:19 <Philippa> that being roughly the solution AFAICT
07:53:33 <Igloo> Philippa: Can you easily explain what that means?
07:54:29 <Philippa> "Model-View-Controller" - somewhere there's a model of what's going on, there's a view of what's going on (the GUI!) and a controller sitting between the two of them IIRC
07:54:45 <Philippa> it's an OO thing, but I figure there's no reason the design can't be adopted
07:55:36 * ski thinks he's heard the term in Smalltalk
07:55:46 <Igloo> Oh, I thought you meant the C standard library thing with similar initials
07:55:52 <Philippa> ah :-)
07:56:31 <Philippa> ski: most of the sensible GUI libs I've seen either support it directly or get out of your way so you can implement it yourself. MFC, being just document-view, isn't sensible :-)
07:56:56 <Igloo> Ah, yes, MFC, that's the bunny  :-)
07:57:07 <ibid> Philippa: that's not MVC :)
07:57:16 <ibid> Philippa: that's a bastardization of MVC
07:57:30 <Philippa> exactly, MFC's just crap...
07:58:01 <Philippa> but yeah. There's no one good GUI library under win32, but that's old news...
07:58:18 <Boegel> they don't even mention FranTk anymore in the Haskell report...
07:58:19 <Boegel> http://www.haskell.org/communities/05-2004/html/report.html#sect4.5
07:58:30 <ibid> the real MVC has the view handling the display and the controller handling the keyboard and other input devices
07:58:55 <Boegel> mostly the model and controller are one in MVC
07:59:07 <Boegel> atleast, I always did it that way :o)
07:59:13 <ibid> no, that's a bastardization of MVC
07:59:14 <ibid> :)'
07:59:50 <Philippa> ibid: that kinda figures. And yeah, when you put it like that MVC makes kinda natural sense for FP
08:00:21 <ibid> the model where there is a model and a view which are mediated by a controller is more likely properly the three-level architecture
08:00:28 <ibid> Philippa: it's from smalltalk :)
08:00:43 <Philippa> sure, isn't most interesting OO stuff?
08:01:00 <ibid> like class, inheritance etc? :) no :)
08:01:00 <ski> (MFC = Microsoft Foundation Classes, i take ?)
08:01:17 <Philippa> I meant the designs rather than the concepts - I know of Simula
08:01:38 <Philippa> ski: More Festering Crap is more like it, but yeah
08:01:53 <ibid> yeah, i was mainly teasing you (i *am* often irritated by the OO = smalltalk blasphemy:)
08:02:30 <ibid> perhaps it's because i live in norden :)
08:02:38 <ibid> (finland, specifically)
08:02:53 <ibid> i'm more affiliated with the scandinavian school than the american school
08:04:13 <Philippa> myself I was never big on OO, just big on some of the concepts I first met properly in it
08:04:34 <ibid> i'm an oo skeptic
08:04:46 * Philippa nods
08:04:56 <Philippa> I often think of it as a way to carry on thinking when you don't know what you're doing...
08:05:06 <ibid> but i've invested time in getting to know it better, know your enemy and all that
08:05:38 <Philippa> though perhaps that's overly cynical if you're doing a lot of IO or need a good modelling language for a larger system that merely has computational components
08:07:05 <ibid> when i'm writing imperative stuff i'm starting to prefer oo over procedural
08:08:56 <Boegel> hmm, wxHaskell looks really cool indeed :)
08:09:17 <Boegel> I think I'll suggest it again to my promotor, and asks him clearly why he prefers FranTk
08:09:33 <Philippa> oh, I do OO(ish) for imperative, but really I just use it as a toolbox for 101 other things...
08:09:44 <Philippa> well, not quite true for GUIs or simulation, but the rest of the time
08:10:15 <Philippa> Boegel: wxHaskell's not having a 1.0 release might be a reason, plus I think Tk's slightly more portable
08:10:45 <Boegel> but FranTk has been dead since 2001
08:10:57 <Boegel> I think it wouldn't be wise to use it for a thesis...
08:11:18 <Boegel> and plus, I would have to write some extentions to it, since I need pixel control (for my ray tracer)
08:12:55 <Boegel> it's been developping quickly, they're at 0.8 already
08:13:08 <Boegel> I think a 1.0 release isn't that far off, or am I mistaking ?
08:15:06 <Boegel> probably he likes the FranTk syntax more than the wxHaskell one
08:15:25 <Boegel> a 'Hello World' example is much simpler in FranTk than it is in wxHaskell
08:15:28 <Boegel> http://cvs.sourceforge.net/viewcvs.py/wxhaskell/wxhaskell/samples/wx/HelloWorld.hs?view=markup
08:16:02 <Boegel> altough the Hello World example I saw in FranTk didn't have a menu, this one does...
08:16:20 <Boegel> :)
08:16:25 <Boegel> that's probably the reason
08:16:45 <Boegel> but I'm off, if some people have tips for other GUI library's, just let me know ! :)
08:18:08 <TheHunter> has anybody checked out wxFruit?
08:25:24 <Philippa> is there a release yet?
08:25:43 <TheHunter> i found this one: http://zoo.cs.yale.edu/classes/cs490/03-04b/bartholomew.robinson/
08:25:58 <TheHunter> but i haven't managed to compile it yet...
08:26:17 <TheHunter> apperantly WX.size has to be replaced by WX.Size
08:30:45 <shapr> man I love unicycling
08:31:00 <shapr> it's the only way to shop.
08:32:41 <Philippa> heh
08:32:45 <Philippa> how many odd looks does that get you?
08:33:23 <ski> you unicycled inside the shop, too ?
08:33:45 <shapr> no, I locked up my unicycle outside the shop just like any other bike.
08:33:58 <shapr> Philippa: today I got several hundred odd looks
08:34:05 <ski> hehehe
08:34:28 <shapr> and a variety of people asked me questions and make jokes.
08:35:04 <shapr> Unicycling seems to be one way to get famous in northern sweden.
08:36:17 <shapr> I also went to the bike shop here and tried to order the magura HS33 hydraulic brakes for this here mountain unicycle, and the swedish magura retailer had a bad case of his reality check bouncing.
08:39:44 <shapr> speaking of bouncing...
08:39:57 <TheHunter> `ghc -i/usr/local/lib/ghc/imports/afrp/ -package wx -fglasgow-exts -farrows WXFruit.hs paddle.hs -o paddle' gives me a hell lot of undefined reference errors. What am I doing wrong?
08:40:49 <shapr> using 6.2.1 ?
08:41:01 <TheHunter> yepp
08:41:21 <shapr> hm, are there wxHaskell debs?
08:41:30 <TheHunter> i probably didn't install afrp properly
08:42:17 <TheHunter> wxHaskell usually works
08:42:33 * Philippa is currently installing afrp-0.4...
08:42:46 <Philippa> I tend to use GHCi rather than GHC most of the time though
08:43:10 <TheHunter> ghci doesn't work with wxHaskell here
08:43:24 <Igloo> shapr: Should be some in H-U
08:44:07 <shapr> H-U --> http://haskell-unsafe.alioth.debian.org/haskell-unsafe.html
08:44:10 <Philippa> really? Ouch
08:44:30 <SyntaxNinja> no reason that ghci shouldn't work with wxhaskell
08:44:41 <SyntaxNinja> I believe you that yours doesn't, but in general it does :)
08:45:09 <Igloo> There's certainly a problem with gtk2hs and ghci caused by libpthread
08:45:20 <TheHunter> SyntaxNinja: i just checked again, it appears to work now
08:45:36 <shapr> Heisenbugs suck
08:47:34 <SyntaxNinja> hehe
08:47:40 <SyntaxNinja> see?! ;)
08:51:16 <TheHunter> ha, paddleball works with ghci!
08:52:26 <shapr> w00
08:52:53 <shapr> hiya danja
08:53:30 <danja> hiya
08:53:36 <shapr> how's code?
08:54:18 <danja> still not written any Haskell ;-)
08:54:38 <Igloo> My condolences
08:55:28 <danja> soon, soon
08:55:46 <danja> I just received a copy of "The Haskell Road..."
08:55:48 <shapr> danja: ok, carefully type map (1 +) [1..9] into Hugs or GHCi
08:56:07 <shapr> then you will have written some Haskell!!
08:56:09 * shapr bounces!
08:56:58 <danja> heh - good start - it didn't liike that
08:57:11 <shapr> it didn't??
08:57:21 <danja> Cannot Infer Instance
08:57:36 * shapr grumbles
08:57:36 <danja> Num [a]
08:57:50 <danja> Expression 1 + enumFromTo 1 9
08:57:52 <shapr> map (1 +) [1 :: Int .. 9]
08:57:56 <shapr> better?
08:58:07 <danja> ah, that'll be a type will it...
08:58:15 <shapr> uh oh
08:58:19 <ski> "map (1 +) [1..9]" works for me
08:58:37 <shapr> shapr :: Stereo
08:58:40 <danja> ah, that last version worked
08:58:50 * shapr feels StereoTypical
08:59:18 <ski> danja : did you forgot "map" or the parens around "1 +" ?
08:59:43 <danja> very good - yep, I missed 'map' (d'oh!)
08:59:59 <danja> now it works
09:00:07 <shapr> danja: you can now officially say that you have written some Haskell :-)
09:00:11 <danja> woot!
09:00:19 * shapr cheers
09:00:22 <danja> thanks shapr
09:00:25 <ski> danja : so you actually told it to try to add a number and a list (which it doesn't like)
09:00:53 <danja> ok, I see it wouldn't
09:01:27 <shapr> danja: oh, check this out: http://www.scannedinavian.org/AvianWiki/HaskellDemo
09:01:36 <shapr> that's the Haskell introduction for the highly impatient
09:02:44 <shapr> like me
09:02:48 <shapr> I'm highly impatient.
09:02:57 <ski> yay!
09:10:58 <tic> shapr, as for the if a or b, it's in Python I meant.  It's not lazy there.
09:11:09 <tic> shapr, you said you could easily create a lazy evaluated class in Python.
09:11:18 <tic> But I don't understand how it'd work if you'd actually use it.
09:11:20 <shapr> or isn't lazy in Python?
09:11:25 <tic> neh
09:11:38 * shapr isn't convinced
09:11:39 * shapr tries
09:12:49 <tic> hrm..
09:12:52 <tic> sorry, it actually is lazy.
09:13:03 <tic> nope
09:13:22 <tic> def a(): print "a"; return False
09:13:24 <shapr> whew
09:13:29 <shapr> thought my brain was really frying in my old age.
09:13:30 <tic> def b(): print "b"; return True
09:13:50 <tic> if a() or b(): return "a or b"
09:13:54 <tic> and the printout is:
09:13:56 <tic> a
09:13:57 <tic> b
09:13:58 <tic> a or b
09:14:24 <tic> but, hrm.. on the other hand, if you swap their locations, it'll be lazy.
09:14:29 <tic> dagnabbit.
09:14:38 <shapr> um, it's lazy
09:14:43 <tic> So anyway.  How wouldd you go about creating that lazy class?
09:15:43 * shapr thinks
09:16:12 <ski> shapr : does that 'or' combine two generators or something ?
09:16:46 <shapr> or works like if a() else b()
09:16:55 <shapr> a() or b()
09:17:16 <tic> yeah, appearently. 
09:17:17 <shapr> if the left thingy returns true, we're done, otherwise do the right thingy
09:17:35 <tic> so c'mon, gimme some sauce. :)
09:17:39 <shapr> I'm thinking
09:17:48 <tic> good. :)
09:17:49 <shapr> I know it can be done
09:17:57 <shapr> but I haven't come up with a way to make Python 100% lazy
09:18:05 <ski> shapr : oh. just like C's '||' or ML's 'orelse' ..
09:18:09 <shapr> I'd bet money that Kraget Sitaker knows how
09:18:18 <shapr> "Kragen Sitaker"
09:18:37 <shapr> he wrote the Self-style Python classes in about fifty lines of Python code
09:18:41 <shapr> he didn't even use metaclasses.
09:18:53 <tic> oh.
09:18:54 <shapr> he ended up using proxies
09:19:10 <shapr> of course, lazy eval is a much deeper change than prototype versus object
09:19:32 <shapr> I vaguely recall hearing that function is a real type now
09:19:50 <shapr> if that's really true, it should be pretty easy to reimplement function
09:20:11 <tic> hm?
09:20:21 <tic> what'd you mean with it being a type+
09:20:22 <tic> ?
09:20:28 <shapr> like dict is a subclassable type now
09:20:30 <shapr> and int, etc
09:20:32 <tic> yeah.
09:20:37 <tic> ahh.. you mean like that.
09:20:44 <shapr> that's how I got ++1 and --1 to work in Python :-)
09:20:53 <tic> heh, subclassed int? :)
09:20:59 <shapr> yup
09:21:00 <shapr> way cheesy
09:21:18 <tic> how does that work anyhow?  you have to apply it to something.
09:21:34 <tic> like, you can't just do "++1" on a line (that's useless)
09:22:07 <tic> i don't think functions are first-hand types.
09:22:12 <tic> (classes are, though.)
09:37:13 <shapr> tic: what's useless about ++1 ?
09:39:31 <tic> why would you want to increase the number 1 ?
09:39:35 <tic> l
09:39:37 <tic> yeah, it was a 1.
09:40:19 <shapr> ok, ++x :-P
09:40:43 <tic> I know I've read it some place.. But I can't remember how it was done.  x++ should be easy, but how do you do the reverse?
09:40:56 <tic> (or will that be handled by the same code?)
09:41:22 <shapr> I don't know how to do x++
09:41:24 <shapr> or x--
09:41:27 <tic> oh?
09:41:48 <tic> __add__(), right?
09:41:52 <shapr> nope :-)
09:42:03 <shapr> doesn't add require two operands?
09:42:07 <tic> yes it does.
09:42:13 <tic> So, how did you implement it?
09:42:16 <tic> I know I've read abuot it.
09:42:18 <tic> about it.
09:42:28 * shapr leaves that as evil puzzle for tic to obsess about
09:42:40 <shapr> anyway, it's easy enough to just look at the unary ops and see how I did it.
09:42:54 <tic> yeah, I know.
09:43:06 <tic> I think I've implemented it myself, but I can't remember the unary ops..
09:43:09 * tic asks dir
09:44:04 <tic> Uhm, I should download a more recent documentation package. 2.1.1 is old.
09:44:21 <shapr> I think my solution requires 2.2
09:44:28 <tic> aha.
09:44:31 <tic> I have 2.2 on my system.
09:55:03 <ski> wb danja
11:25:59 <shapr> soooo, what's going on?
11:27:24 <Lemmih> shapr: I'm looking at FunctionalForms.
11:27:39 <Philippa> I'm wondering which bastard gave me fresher's flu for my birthday
11:28:53 <Philippa> but yeah, otherwise I've played with WASH a bit, am trying to get wxFruit working...
11:30:32 <shapr> FunctionalForms looks cool
11:35:21 <xkb> Philippa, you like WASH?
11:35:32 <xkb> did you by chance try the CGIGraphics stuff?
11:37:05 <Philippa> haven't tried the CGIGraphics, but yeah, I like
11:37:26 <Philippa> took a while to find out how to do the bits I wanted to though, and I need to play with the persistance more - I'm considering writing a wiki clone in it
11:38:06 <xkb> I want to dynamically generate pictures with it
11:38:32 <xkb> 2 bad the CGIGraphics part isn't updated in ages
11:51:59 <Leimy> howdy
11:52:06 <shapr> y0
11:52:36 <shapr> wassup?
11:52:39 * Leimy is still in the process of appreciating and grokking monads :)
11:53:10 <shapr> monads are very cool
11:53:22 <Leimy> the type [a] -> (a -> [b]) -> [b] means takes a list of a and a function taking a producing list of b ultimately yielding a list of b?
11:53:25 <Leimy> shapr: indeed
11:53:41 <Leimy> and I am trying to understand what happens with State Monads in particular
11:54:58 <shapr> yup
11:55:00 <Leimy> I guess what I am wondering is if "fmap" needs to exist for that type to do the (a -> [b]) [map for lists...]
11:55:06 <Leimy> but if I was using say Tree
11:55:22 <Leimy> Tree a -> (a -> Tree b) -> Tree b
11:55:29 <Leimy> would I need Tree to be an instance of Functor?
11:56:52 <Leimy> I am wondering if there is a fundamental necessary relationship between fmap and Monads :)
11:57:55 <shapr> http://www.ninebynine.org/Software/Learning-Haskell-Notes.html#functors
11:58:19 <monochrom> A monad is supposed to be a functor too.
11:58:26 <monochrom> A functor has fmap.
11:58:48 <Leimy> right
11:58:51 <Leimy> ok
11:58:56 <Leimy> I knew that second part :)
12:00:16 <Si\> musasabi: you asked me earlier whether my serializer can cope with cyclic data structures, are you talking about serialization or deserialization?
12:00:17 <TheHunter> btw, it is total crap that Monads aren't defined by class Functor m => Monad m.
12:00:51 <monochrom> But in practical programming, people find it convenient to make an instance of Monad without adhering to all the monad laws. So Monad is not required to be Functor.
12:01:14 <shapr> a monad is a partially filled in type, and two functions, one function to fill in the type with a 'normal' value, and one function to stick together two filled-in types
12:01:33 <shapr> I like Cale's explanation on the wiki
12:01:52 <TheHunter> monochrom: if people don't care about obeying laws, they might as well define fmap = liftM
12:02:30 <Leimy> yeah... I know haskell doesn't enforce laws like /= being equivalent to not ( something == something_else)
12:02:38 <Leimy> but it just seems the right thing to do :)
12:04:15 <monochrom> They can also care not the law that a monad is a functor.
12:08:25 <shapr> ya know
12:08:31 <Leimy> just like I can define ++ for a class in C++ to do something completey unrelated to increment :)
12:08:42 <shapr> I'd like to see coherent explanations and examples for that sort of stuff
12:08:42 <Leimy> er completely 
12:14:17 <Leimy> shapr: me too
12:14:22 <Leimy> it can get a little fuzzy
12:14:55 <Leimy> but what I was trying to do is make State Monad based "word counter" where if the previous character seen was a space and the current is a character you increment a value
12:15:27 <Leimy> but if the previous was a character you just store the current value over it and move on
12:15:48 <Leimy> so it seems like the input would almost unroll to a pipeline of function applications
12:16:03 <Leimy> but I'm not sure
12:19:20 <Marvin--> hey hey
12:20:30 <stepcut> hey hey ?
12:20:51 <Marvin--> ...
12:21:00 <Marvin--> just trying out a friendly greeting y'know
12:22:06 <stepcut> hey hey hey, it's fat albert!
12:22:40 <Igloo> And there was me thinking you were launching into a duet of a 4 Non Blondes(?) song
12:22:56 <cptchaos> hm, I still trying to understand the epigram tutorial, but on page 2 there is an formal descrition of a typing rule, something like
12:22:56 <cptchaos> f : forall x : S => T s : S
12:22:56 <cptchaos> -----------------------------------
12:22:56 <cptchaos> f s : [s/x]T
12:23:14 <cptchaos> is there a good resource on the net explaining this?
12:23:21 <Marvin--> hey Igloo, and congrats :)
12:23:27 <Igloo> Thanks  :-)
12:23:34 <Leimy> Igloo: programming contest?
12:23:48 * Leimy takes a wild guess
12:23:50 <Igloo> cptchaos: Are those colons really all the same?
12:24:53 <cptchaos> there is a comment that the author uses ':' for the copula.
12:25:09 <kristnjov> also known as a COLON
12:25:15 <kristnjov> heh.. colon.. hehe, you said colon.. heh..
12:25:49 <cptchaos> Igloo: I don't know if the colons are the same
12:26:42 <cptchaos> it is an exact ASCII pictogram of what is written there, but I don't know this formalism
12:26:56 <Igloo> Without seeing the rest of it it's hard to be sure, but it says eomthing like   f s has type (T with all x replaced by s)  given  ... whatever the top means, which I can't quite parse without knowing more of the definitions
12:28:04 <cptchaos> Igloo: it is about depenent types
12:30:05 <cptchaos> the top should say somethink like T depends on x
12:31:26 <cptchaos> he writes something of a generalisation of the funktion Space S -> T known from traditional funktional languages,
12:32:02 <cptchaos> so if someone has a good link on that topic please tell me
12:32:18 <cptchaos> (tell me the link as well, please :-) )
12:32:40 <Igloo> Does it say what => means?
12:33:07 <Igloo> Oh, there is more space between the T and s, right?
12:33:49 <Igloo> The top says   f has type (for all x, S -> T)  AND   s has type S
12:34:28 <Igloo> (I think. The surrounding text and the original layout/symbols should either validate or contradict this)
12:38:53 <musasabi> Si\: yes (was away )
12:39:21 <Igloo> cptchaos: Did you see what I said?
12:39:27 <musasabi> Si\: mainly serialization, deserialization would be added bonus.
12:39:44 <cptchaos> oh, whats going on here?
12:39:59 <Igloo> Oh, there is more space between the T and s, right?
12:40:01 <Igloo> The top says   f has type (for all x, S -> T)  AND   s has type S
12:40:02 <Igloo> (I think. The surrounding text and the original layout/symbols should either validate or contradict this)
12:40:09 <Boegel> hello everyone :)
12:40:22 <cptchaos> the last think I saw, was:cptchaos: Are those colons really all the same?
12:40:43 <cptchaos> ah, yes
12:41:05 <Igloo> Oh, you also missed this then: Without seeing the rest of it it's hard to be sure, but it says eomthing like   f s has type (T with all x replaced by s)  given  ... whatever the top means, which I can't quite parse without knowing more of the definitions
12:41:28 <cptchaos> ok, thanks
12:41:51 * stepcut has to go to the dentist :(
12:43:03 * Boegel went to the dentist this morning, and is glad he only has to go back once
12:43:27 <stepcut> I think I brushed my teeth too much :(
12:43:36 <Boegel> why's that ?
12:43:52 <Boegel> how on earth can you brush 'em too much ?
12:44:07 <Marvin--> you wear them down
12:44:08 <Marvin--> duh
12:44:09 <stepcut> brushed them 20 mins/day :(
12:44:13 <Si\> musasabi: How would you suggest serializing an infinitately recursive data-type? GXS allows for add-on encoders which would allow such a thing to be implemented.
12:44:19 <Boegel> why do you do that ?
12:44:23 <Marvin--> stepcut: sounds a bit obsessive
12:44:29 <Boegel> Marvin--, it's pretty hard to wear down teeth
12:44:33 <Boegel> they're made to last
12:44:50 <stepcut> well, brushing my teeth is boring, so then I start surfing the net, and then... it's 20 mins later and I am still brushing 
12:44:57 <Marvin--> haha
12:44:59 <Boegel> *hehe*
12:45:18 * Boegel tries to picture stepcut brushing and browsing at the same time
12:45:37 * Riastradh imagines stepcut IRCing with toothpaste lather dripping onto his keyboard.
12:45:57 <thebug> *plop*
12:45:58 <stepcut> so, I think I also probably irratated the gums, making it easier for tartar to get below the gum line and cause peridontal disease
12:46:47 <Si\> I think deserialization is a lot easier, since all you've got to do is build the thing fro ids and refs, serialization would effectively require the interrogation of the internal data-type to see if it is identical to one further up the parse tree
12:46:52 <Boegel> sounds like I don't won't that :s
12:48:03 <stepcut> hopefully I can get away with just some scaling and root planning :(
12:48:39 <Boegel> I hope the same for you
12:48:41 <Si\> I'm not saying it's in anyway impossible, I think it could be done, but such handling isn't (shouldn't be) in the XML serializer proper
12:48:54 <Boegel> with me it was just filling some caries, because I too much candy :)
12:49:33 <Si\> since references aren't part of XML itself, there are several different ways of doing them and so they should be done via add-on encoders (which I do support)
12:50:58 <Si\> incidently, if my serializer can finally parse XML Schemas, I should be able to make a beta release tomorrow
12:52:09 <Boegel> anybody know a good link for english->dutch translation ?
12:52:09 <Si\> afaics, XSD should stress test most of the complex parts of serilization
12:52:09 <Boegel> woops, what was that ?
12:52:09 <Boegel> netsplit or something ,
12:52:09 <Si\> esp. the XML Schema Schema ;)
12:52:28 <Leimy> which is defined in DTD right? :)
12:52:39 <Si\> yes, but also as a schema
12:53:02 <Si\> and HXT won't parse the DTD anyway ;p
12:53:28 <Si\> must remember to tell Uwe about that...
12:53:32 <Boegel> damn, what the hell is happening ?
14:52:14 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - http://www.cis.upenn.edu/proj/plclub/contest/results.php#first"]'
14:52:14 --- topic: set by shapr on [Tue Sep 21 09:26:31 2004]
14:52:30 <ski> hi clog, welcome to #haskell !
15:04:35 <Lemmih> shapr: Yay! I solved it! (-:
15:04:58 <shapr> yay!
15:18:32 * ski laughs at McBride poem
16:17:36 * shapr throws stealth lambda mines into the channel
16:17:45 <thebug> (!)
16:17:49 <thebug> BOOM
16:18:17 <Igloo> Ah, so they're mined. I always wondered where all the lambdas came from.
16:18:24 * shapr snickers
16:19:03 * thebug goes to find a lambda pick-axe
16:30:17 * shapr agrees with arjanb
16:30:20 <shapr> time for sleep!
16:33:24 <thebug> enjoy, shapr 
17:01:18 <lmbdwr> lambdawar !
17:09:48 * thebug tosses a pointy lambda throwing star in lmbdwr's direction
18:10:23 <np_hard> what's new?
18:13:00 <shammah> http://news.google.com.au/nwshp?hl=en&gl=au <= you can probably find something there if you're lucky ;)
21:49:56 <musasabi> morning
23:51:28 <stefan_> @yow
23:51:29 <lambdabot> I love FRUIT PICKERS!!
23:57:01 <TheJohn> @yow
23:57:02 <lambdabot> LIFE is a never-ending INFORMERCIAL!
