00:14:06 <stefan__> @yow
00:14:07 <lambdabot> I have a very good DENTAL PLAN.  Thank you.
00:22:30 <Pseudonym> @yow
00:22:31 <lambdabot> I just remembered something about a TOAD!
00:52:13 <musasabi> What should be the performance of foo n = let mylist = fun : mylist in mylist !! n ?
00:52:49 <musasabi> That is ghc able to see that the list is infinite and each element is identical and avoid the generation/traversing?
00:54:14 <pesco> I wouldn't guess so.
00:55:19 <pesco> musasabi: Where do you have a piece of code like that?
00:55:47 <pesco> musasabi: (Just wondering)
00:56:51 <musasabi> pesco: well I have a user supplied integer which should be used to select from a list.
00:57:22 <musasabi> pesco: so I was thinking of case1 : case2 : ... : error_case_list 
00:57:35 <musasabi> if it was constant time that would be neat.
00:59:38 <musasabi> using a finite list is possible - except that now I have to do select [] = error_case \n select x = head x \n get lst n = select $ drop n lst
01:00:03 <musasabi> which is not as pretty as simple get lst n = lst !! n
01:02:10 <musasabi> Does that explain it well?
01:02:37 <pesco> But the optizimation you mentioned would only apply if the list was indeed a cyclic one-element list. In what fraction of all cases does that happen?
01:03:25 <pesco> You can use an array if you need fast random access.
01:05:41 <musasabi> pesco: well all the tail of the list would be cyclic one element list.
01:07:15 <pesco> Oh, that's what you mean. Now I see. I'd say implement it explicityl in your "get" function, if it really is that important.
01:08:03 <pesco> However, given that you're talking about n being user-supplied, maybe consider just transforming it to n`mod`length lst...
01:08:16 <pesco> Ah no, that's not what you wanted, sorry.
01:08:54 <pesco> max n (length lst)
01:08:59 <pesco> That's what I meant.
03:07:44 <ski> GCed wiki.
06:54:40 <roconnor> Igloo: ... and now it follows that P=NP.
06:55:52 <ski> really ?
06:56:28 <roconnor> I'm not going to go over it again. :-P
06:56:50 <ski> lol
06:57:46 <edwinb> It's left as an exercise for the reader.
06:58:37 <edwinb> But obviously N=1.
06:59:50 <ski> or P = 0
07:00:13 <roconnor> Igloo: Are you in North America?
07:00:37 <edwinb> Scientists will now have to argue for centuries over whether P=0 or N=1, so at least it's not fully solved yet. Phew.
07:03:43 <Igloo> No, England
07:09:11 <xkb> Hi, is there an implementation of hashtables in Haskell?
07:10:07 <ibid> hashtables are mostly useless in haskell
07:10:54 <xkb> What would u suggest as an alternative?
07:11:07 <ibid> FiniteMap
07:11:22 <xkb> Hmm. I'll look it up..
07:11:42 <xkb> ahh.. ord keys
07:11:49 <xkb> eh Ord key
07:12:39 <xkb> Looks ok
07:12:51 <xkb> it supports the same basic functionality as a hashmap
07:13:26 <xkb> And I allready used it for my letter frequency thingy I now remember :P
07:17:30 <Lemmih> Eeek. Are the db facilities in wxHaskell Windows(tm) only?
07:30:26 <stefan__> i'm looking at a misbehaving haskell program: it loops ... any advice on finding out which function is causing the loop ... (I'm using GHC)?
07:31:00 <ski> hmm
07:31:03 <Lemmih> Debug.Trace perhaps?
07:31:09 <ski> i guess you could use trace
07:31:20 <edwinb> trace seems easiest
07:31:27 <stefan__> let's try :)
07:32:00 <ski> is it a big program ?
07:32:58 <stefan__> about 1000 lines
07:33:05 <ski> okie
07:34:08 <Igloo> If it's throwing a loop exception then compiling it with -prof and running it with +RTS -xc should show you where
07:35:57 <stefan__> Igloo: thanks
07:39:19 * Lemmih wonders what happened to the good old 'dbConnect :: Server -> Database -> Username -> Password -> IO DB'
07:42:51 <stefan__> Igloo: it tells me it loops in Main.CAF ... I could have figured that out I guess ...
07:43:14 <stefan__> Igloo: how do I drill down?
07:43:20 <Igloo> Can I see the code?
07:43:45 <stefan__> it's 1000+ lines 
07:43:56 <Igloo> Put it on the web?
07:44:04 <ski> is main so big too ?
07:44:42 <stefan__> main is quite simple, but not causing the loop ... I'm sure of that ... the behaviour is input dependent :(
07:46:18 <ski> mhmm
07:46:47 <ski> you could maybe put it on the wiki if you can't make it online any other way
07:48:05 <stefan__> Mmm ... I seem to haved isolated the problem
07:48:12 <ski> ok
08:12:30 <stefan__> ski, Igloo: solved it, thanks
08:12:39 <ski> ok, fine
08:52:42 <Lemmih> haskelldb-0.9 is broken?
09:09:24 <roconnor> for some reason I find the TIM confusing.  I think I'm going to have to re-read it or write an implementation to watch it work.
09:35:01 <Lemmih> Yay. Another dane.
09:35:37 <PeterE> Me?
09:37:17 <Lemmih> Yes.
09:38:00 <PeterE> Danes are vikings, and vikings rulez! :-)
09:39:05 <ski> only those who lived in the bay between Norway and Sweden were originally called Vikings
09:39:29 <ski> (Vik = Bay in nordic languages)
09:45:54 <PeterE> Lalalalala, I have have my fingers in my ears, so I can't hear you. :-)
09:51:11 <Lor> ski, scandinavian, not nordic. :)
10:06:13 <ski> Lor : is icelandish scandinavian ?
10:09:09 <esap> Hmmm.. strange. Wikipedia has categorized CS, Logic and Mathematics under a top-level category "Abstractions". Weird.
10:10:19 <ski> "Abstractions" ?
10:10:32 <esap> http://en.wikipedia.org/wiki/Wikipedia:Browse_by_category
10:44:47 <ibid> weird?
10:56:15 * esap thinks CS is not an abstraction.
10:56:39 <ibid> it deals with abstractions
10:56:52 <esap> yes, but that's not the same thing.
10:57:26 <ibid> true, but this kind of "coercion assumptions" are quite common
11:00:40 * esap doesn't understand the term 'coercion assumption'.
11:01:19 <ibid> the assumption that coercions are made
13:07:19 <ShereKahn>  
13:08:01 <cptchaos> did he say a thing? (or is my client buggy?)
13:11:49 <Lemmih> I think he said ' '.
13:12:02 <cptchaos> Lemmih: ok, thanks
13:12:38 <Lemmih> And your client is a little buggy (-:
13:14:10 <cptchaos> Lemmih: i know ...
14:19:13 <stepcut`> doh! I think my teeth are going to fall out, apparently I am eating the wrong food, using the wrong kind of toothbrush, breathing with my mouth open, and who knows what else!
14:19:26 <stepcut`> only brushing and flossing once per day :(
14:20:22 <stepcut`> spending too long brushing
14:20:52 <stepcut`> eating food that is the wrong temperature
14:23:45 <stepcut`> and my eyes are very sensitive to sunlight (which somehow relates to bad teeth...)
14:26:01 <stepcut`> (vitamin B2 deficiency perhaps...)
14:26:08 <Jerub> stepcut`: your dentist is attempting to scare you it seems.
14:27:17 <stepcut`> hrm, maybe I should go see a dentist :p
14:28:33 <Jerub> ;)
14:29:09 <stepcut`> I definately have some dental problems, the question is, do I have periodontal disease, or just sensitive teeth from brushing to hard and long
14:29:41 <Jerub> I give this advice to many people that ask me about medical stuff on irc.
14:29:57 <Jerub> ASK YOUR DOCTOR<esc>cbDENTIST.
14:30:24 <stepcut`> i plan on it!
14:31:48 <Boegel> hello everyone !
14:32:01 <stepcut`> fortunately, my mom is a dental hygenist, and my bother's wife is in dental school, so I can harass them too :p
14:32:43 <Lemmih> Hey Boegel.
14:34:54 <stepcut`> Jerub: but, if, for example, sensitivity to sunlight tells the dentist that I might be B3 deficent (for example), I don't want to forget to bring it up :p
14:38:45 <Boegel> awfully quiet here :s
14:39:46 <stepcut`> for example, B3 deficiency also has the possible side effects: canker sores, fatigue, halitosis, muscular weakness, and skin erruptions -- all of which I am subject too. Which is not to say that I *am* B3 deficient, just that I should find out if I am
14:47:40 <stepcut`> apparently, I need to eat more nuts, fish, whole wheat, and green leafy things :)
14:50:14 <stepcut`> and liver...
14:51:04 <Smerdyakov> You never need to eat more meat....
14:51:57 * Boegel smells a vegetarian
14:51:59 <Boegel> :p
14:52:22 * stepcut` already eats way to much meat
14:52:53 <stepcut`> I am probably not B12 deficient, but I think I could be deficient of most of the other B vitamins
14:53:44 <Boegel> you should drink Looza Ace, lots of vitamins
14:53:45 <Boegel> :)
14:53:47 <stepcut`> nice! b1 repels insects!~
14:55:00 <stepcut`> hrm, ok, I think I am going to switch the meat portion of my diet to include more steamed seafood  -- being careful to not get too much mercury :(
14:55:21 <Smerdyakov> No, you should cut out the meat portion of your diet.
14:55:43 <stepcut`> no thanks
14:59:43 <stepcut`> brewers yeast has lot's of good B vitamins, and taste good on popcorn :)
15:00:09 <stepcut`> (in small quantities)
15:29:18 * stepcut` goes to whole paycheck
16:19:25 <dan2> how would I rewrite my fib.c in haskell
16:19:49 <dan2> http://rafb.net/paste/results/fbgON489.html
16:25:27 <dan2> haskell looks fun
16:25:34 <dan2> Cale: you know haskell?
16:25:37 <Jerub> dan2: here's a hint.
16:25:41 <Cale> dan2: yes
16:25:41 <Jerub> dan2: wikipedia.org
16:25:51 <Jerub> ;)
16:26:01 <dan2> Cale: http://rafb.net/paste/results/fbgON489.html <-- fibonacci number cruncher with limitations
16:26:14 <Cale> dan2: I spent the summer writing haskell code as my job.
16:26:31 <dan2> now my question is this
16:26:52 <dan2> can Haskell fix the limitations of my fibonacci number cruncher
16:27:04 <Riastradh> What limitations do you refer to?
16:27:12 <dan2> the one major problem is the amount of space I can store my numbers
16:27:18 <dan2> since C can only work with fixed range
16:27:32 <dan2> Riastradh: I am saying that I can go past fib number 45 really
16:27:36 <Cale> dan2: that can certainly be fixed with Haskell
16:27:40 <Jerub> dan2: here's a O(n) computation, O(1) memory implementation of fibonnaci in haskell
16:27:51 <Cale> The Integer type in Haskell is unbounded.
16:27:56 <Jerub> fib n = product [1..n]
16:27:57 <dan2> Cale: thats scary
16:28:20 <Cale> Int, however is still a machine Int.
16:28:20 <dan2> Cale: what if I were the throw some numbers like 256^984981981 in it
16:28:46 <Cale> then you may be waiting a while for the result
16:28:51 <Riastradh> dan2, it would take a long time, and you might run out of memory, but, ignoring those factors -- which would be present in _any_ system --, it would work.
16:28:53 <dan2> Cale: :)
16:28:59 <Jerub> its taking a few seconds to run on my 2.4ghz desktop
16:29:17 <dan2> Cale: anyway, is it easy to convert my fib program?
16:29:22 <Cale> yeah
16:29:26 <Riastradh> You might have to wait a while for the 256^984981981 operation to compute in the first place.
16:29:27 <Jerub> dan2: I just gave you a fibonnaci implementaiton ;)
16:29:35 <Cale> in fact, incredibly easy, the way your wrote it
16:29:39 <Cale> you*
16:29:48 <dan2> Cale: it was written to be very very fast
16:30:18 <dan2> Jerub: how does that work?
16:30:32 <Cale> Jerub: that was factorial
16:30:40 <dan2> Cale: my point exactly
16:30:46 <dan2> :)
16:31:01 <Cale> fibs = 1 : 1 : zipWith (+) fibs (tail fibs)
16:31:16 <Cale> there's my favourite way to write the fibonacci sequence in Haskell
16:31:24 <dan2> hmm
16:31:34 <dan2> its probably optimized to use the benefits of haskell
16:31:40 <dan2> altho mine is clearly simple number operations
16:32:50 <Cale> that says:
16:33:01 <Jerub> oh ffs.
16:33:05 <Jerub> I got it the wrong way around.
16:33:22 <Cale> the list of fibonacci numbers starts with 1 and 1, and then the rest can be gotten by adding the sequence to its own tail
16:33:51 <dan2> hmm, that does make sense
16:34:01 <dan2> Cale: but what would be a replica implementation in Haskell
16:34:20 <Cale> fib n = fiba n 0 1
16:34:35 <Cale> fiba n f0 f1 | n == 0 = f1
16:34:59 <Cale>              | otherwise = fiba (n-1) f1 (f0 + f1)
16:35:17 <dan2> how do those | work
16:35:22 <Riastradh> Note that those essentially do the same thing.
16:35:23 <dan2> is that like an if statement
16:35:57 <Cale> It breaks a function into cases based on contitions on its inputs.
16:36:09 <Cale> so yes, somewhat like an if statement
16:36:18 <dan2> more like a switch case
16:36:19 <Cale> you could write it directly as an if statement as well
16:36:29 <cm> butterfly effect is scaring me
16:36:49 <Cale> fiba n f0 f1 = if n == 0 then f1 else fiba (n-1) f1 (f0 + f1)
16:37:10 <Riastradh> You could also write this:
16:37:15 <Riastradh> fiba 0 f0 f1 = f1
16:37:23 <Riastradh> fiba n f0 f1 = fiba (n - 1) f1 (f0 + f1)
16:37:38 <dan2> function overloading?
16:37:45 <Cale> not quite
16:37:46 <Riastradh> No, no overloading here.
16:37:49 <Riastradh> Just pattern matching.
16:37:54 <dan2> looks interesting
16:38:09 <Riastradh> What I wrote is the same as:
16:38:13 <Cale> and then main would look something like...
16:38:14 <Riastradh> fiba n' f0 f1 =
16:38:17 <Riastradh>     case n' of
16:38:28 <Riastradh>         0 -> f1
16:38:39 <Riastradh>       | n -> fiba (n - 1) f1 (f0 + f1)
16:38:39 <Cale> main = do [a] <- getArgs
16:38:55 <Jerub> yay pattern matching.
16:39:05 <Jerub> I've yet to implement that for python.
16:39:06 <Cale>           putStrLn $ fib (read a)
16:39:10 <Cale> er
16:39:12 <Riastradh> It's just more convenient not to have to write the case expression.
16:39:15 <Cale>           print $ fib (read a)
16:39:16 <Cale> :)
16:39:40 <dan2> umm
16:39:48 <dan2> whats the do [a] ... do
16:39:56 <Cale> it matches a list of one element
16:40:05 <Riastradh> Monad junk.  Don't worry about the 'do' part.
16:40:41 <dan2> Riastradh: can the do be ignored
16:40:44 <Cale> "do" starts a block of computations which will be executed in order
16:40:48 <Riastradh> No, dan2.
16:40:50 <dan2> ok
16:41:08 <Riastradh> It will all make sense once you learn about monads.
16:41:17 <Cale> right, you shouldn't worry about the mechanics of how it works until you understand the Haskell type system
16:41:45 <dan2> fib.hs:3:10: The last statement in a 'do' construct must be an expression
16:42:02 <Cale> probably a problem with layout
16:42:24 <dan2> oh fun
16:42:29 <dan2> Cale: what do you mean
16:42:30 <Riastradh> You need to be careful about indentation.  And tabs are evil.
16:42:44 * Jerub thinks for a moment.
16:42:45 <dan2> Riastradh: shit, I thought haskell ate whitespace
16:42:50 <Jerub> yes, in haskell, tabs are just evil.
16:42:57 * stepcut` uses tabs all the time
16:42:59 <Jerub> dan2: no, you're thinking about the C preprocessor ;)
16:43:00 <Riastradh> No, tabs are evil in general, except in very special circumstances.
16:43:15 <Jerub> Riastradh: Mixing Tabs And Spaces is evil.
16:43:34 <stepcut`> though, I should probably add that one line to my .emacs to use spaces only...
16:43:36 <Cale> if you want to compile that, you'll need "import System" at the top as well
16:43:45 <Jerub> Riastradh: but haskell demands variable shiftwidth for alignment of code, so tabs are extremely evil.
16:44:39 <dan2> Cale: does emacs have a mode for haskell
16:44:43 <Cale> (for getArgs)
16:44:45 <Cale> dan2: yeah
16:44:48 <Jerub> dan2: yes.
16:45:01 <Cale> It's fairly nice - not perfect, but good
16:45:11 <dan2> as long as its half decnet
16:45:12 <dan2> decent
16:45:21 <Cale> http://www.haskell.org/haskell-mode/
16:45:24 <Riastradh> It makes indentation in Haskell much easier to work with.
16:45:36 <Cale> I like the less-smart indentation
16:45:51 <Cale> (i.e. the simple Haskell indentation mode)
16:48:11 <dan2> Cale: I can't get rid of that error
16:48:53 <Cale> dan2, perhaps try:   main = do { [a] <- getArgs; print $ fib (read a) }
16:49:02 <Cale> so that indentation doesn't matter
16:49:17 <Cale> (it works for me)
16:49:24 <dan2> ok
16:49:49 <dan2> Cale: in a {} block, does haskell eat white space
16:49:55 <Cale> yeah
16:50:02 <dan2> thanks
16:51:06 <Cale> anyway, fib of 100000 should be no problem
16:51:42 <dan2> haskell does math fast
16:52:01 <Cale> okay, gotta run
16:52:06 <Cale> I'm moving back to waterloo
16:54:22 <dan2> Riastradh: I take it haskell will give me no problem getting pi to the the 3000 digit or so
16:57:50 <dan2> whats the haskell function for acos?
17:06:07 <dan2> ?
17:06:08 <Jerub> dan2: probably in a math module somewhere.
17:06:08 <dan2> Jerub: hmm
17:06:08 <dan2> Jerub: is there a list of math modules
17:06:10 <Jerub> dan2: I'd be using google to find the answer, check both for acos and arccos
17:06:10 <dan2> Jerub: Prelude
17:06:10 <dan2> Jerub: so just add an import statement for it?
17:06:10 <Jerub> if its in prelude then its in there by default :)
17:06:10 <dan2> oh
17:06:19 <dan2> Jerub: the problem is pi is endless
17:06:28 <dan2> I want to be able to stop the output of pi at a certain precision
17:06:49 <dan2> pi_3000 = acos(-1) ... 
17:06:57 <dan2> I want to be able to limit the output of acos even
17:08:27 <dan2> Jerub: how would I do that
17:08:40 <dan2> I can only speculate Float is boundless like Int
17:11:16 <dan2> or, i need to create a bounded type similar to float
17:16:09 <dan2> ??
17:16:09 <dan2> anybody around
17:21:46 <dons> hey Lor
17:22:10 <Pseudonym> G'day.
17:22:44 <dan2> are Floats bounded?
17:23:27 <Pseudonym> Yes, sort of.
17:24:26 <Pseudonym> Floats have a representation of infinity, both positive and negative.
17:24:26 <dan2> hmm
17:24:26 <dan2> I am worried about the output of acos(-1)
17:24:26 <Pseudonym> The useful numbers are bounded, though.
17:24:40 <Pseudonym> Prelude> acos (-1)
17:24:41 <Pseudonym> 3.141592653589793
17:24:45 <dan2> Pseudonym: I want the first 3000 digits of acos(-1)
17:24:45 <Pseudonym> What's wrong with that?
17:24:50 <Pseudonym> Ah, OK.
17:24:57 <Pseudonym> What method are you using?
17:25:48 <dan2> Pseudonym: what do you mean?
17:25:50 <Pseudonym> I mean how are you computing acos(-1)?
17:25:52 <dan2> I was hoping I didn't have to rewrite acos
17:25:58 <Pseudonym> Ah.
17:26:02 <Pseudonym> Well, yes you will.
17:26:11 <Pseudonym> And you can't use Float if you want 3000 digits.
17:26:15 * dan2 can't remember the formula for acos
17:26:24 <dan2> Pseudonym: what will I need instead?
17:28:25 <dan2> damn, rewrite cosine will be a bitch
17:28:38 <Pseudonym> Do you really want acos or do you just want pi?
17:28:48 <dan2> I just want pi to precision n
17:29:46 <Pseudonym> OK, that's easy.
17:29:46 <Pseudonym> http://cvs.sf.net/viewcvs.py/haskell-libs/libs/exactreal/
17:29:46 <Pseudonym> You'll need ContFrac.hs.
17:29:58 <Pseudonym> Load it up and type: showcf picf
17:30:27 <Pseudonym> ecf is also available if you need it.
17:30:47 <Pseudonym> And if you really need it, there's also atan of integers.
19:21:33 <dan2> how do you return error codes?
19:30:00 <dons> System.Exit
19:30:13 <dons> exitWith :: ExitCode -> IO a
19:44:19 <stepcut`> the specs for bittorrent suck
19:46:57 <dan2> how do you create sockets in haskell
19:53:43 <stepcut`> dan2: http://www.haskell.org/ghc/docs/latest/html/libraries/index.html
19:53:53 <stepcut`> check out Network, and Network.Socket
20:16:24 <dan2> stepcut`: haskell seises to amaze me
20:16:25 <dan2> ;)
20:16:37 <dan2> stepcut`: now, I need something to parse xml ;)
20:17:49 <dan2> never seises
20:17:49 <dan2> ;)
20:18:10 <stepcut`> I used HaXml, (which is not in the default libraries)
20:18:16 <stepcut`> there is also HXml or something
20:18:17 <dan2> thats fine
20:18:19 <dan2> :)
20:18:37 <dan2> stepcut`: how portable is Haskell?
20:19:10 <stepcut`> http://www.flightlab.com/~joe/hxml/
20:19:26 <stepcut`> it runs on unixy things, MacOS X, and windows
20:19:43 <stepcut`> though some unixes (linux, freebsd) are better supported than others
20:21:11 <dan2> stepcut`: :)
20:21:45 <dan2> stepcut`: thats because people actually use Linux and FreeBSd (Not SCO or Slowaris ;)
20:22:46 <stepcut`> :p
20:23:24 <stepcut`> linux and windows have the best support, as far as i know, thought I have not had problems with freebsd either
20:24:48 <stepcut`> damn, i finally configured my firewall for bittorrent and now I am getting 300KB+
20:25:45 <dan2> if you are using BT
20:25:51 <dan2> I highly reccomend QoS
20:26:14 <dan2> (Traffic Shaping)
20:26:40 <stepcut`> that comes later
20:26:59 <dan2> gnite, I need some sleep
20:27:05 <stepcut`> night
20:27:09 <dan2> the Haskell socket library is nice
20:27:10 <dan2> ;)
20:27:15 <stepcut`> :P
20:44:43 <dons> dan2: Haskell is very portable. esp. nhc98 -- ported to ~26 architectures
20:44:56 <dan2> dang
20:44:57 <dan2> :)
20:45:01 <dan2> and ghc?
20:45:01 <Riastradh> I can't even _name_ 26 architectures.
20:45:04 <dan2> ghc is my favorite
20:45:35 <Riastradh> ...unless you count toy & ancient architectures.
20:45:52 <dan2> umm
20:46:00 <dan2> Haskell does Lazy (?)
20:46:04 * dan2 just forgot
20:46:17 <dons> ghc is ported to ~7-8 archs atm, lesser support on others
20:46:21 <Jerub> Riastradh: toy and ancient both count, we're in academia.
20:46:25 <Jerub> well, lots of us are.
20:47:13 <dan2> ahh Lazy Eval
20:47:54 <Jerub> dan2: Lazy Evaluation, 'Eval' is a term often used to refer to dynamic execution of arbitary code usually contained in a string.
20:48:10 <Jerub> synonymous with 'Evil'
20:48:23 <dan2> heh
20:48:44 <dons> eval isn't so bad if you have dynamic typing. but that is a whole 'nother story
20:49:59 <Jerub> eval is always bad.
20:50:08 <Jerub> dynamic typing doesn't make it better.
20:50:42 <Riastradh> Jerub, how do you propose that REPLs be implemented?
20:51:01 <Riastradh> (Hint: REPL stands for 'Read-*Eval*-Print Loop')
20:54:35 <Jerub> Riastradh: hey, evil doesn't necesserily mean you shouldn't use.
