00:55:48 <earthy> Good Morning, #haskell!
00:57:57 <xkb> @yow
00:57:58 <lambdabot> WHY are we missing KOJAK?
00:58:10 <andersca> @arr
00:58:10 <lambdabot> I'd like to drop me anchor in her lagoon
00:58:12 <earthy> Because he ran out of lollypops
01:04:19 <kristnjov> where can i download emacs for win32?
01:08:18 <adept> kristnjov: emacs or xemacs?
01:08:30 <kristnjov> emacs, but i've already found it, thanks anyways! :)
01:08:54 <kristnjov> why, is there an xemacs for win32?
01:08:55 <kristnjov>  :)
01:09:17 <earthy> http://www.xemacs.org/Download/win32/
01:09:22 <kristnjov> thanks!
01:09:42 <earthy> you could've googled for it yourself though
01:10:04 <kristnjov> i was, just before i asked
01:10:13 <kristnjov> thought the x was for "only x systems"
01:10:19 <earthy> nope
01:10:31 <earthy> divergent emacs development
01:10:58 <earthy> theres fewer emacsen out there than there's vi's... so...
01:17:42 <kristnjov> wtf xemacs is f**ked up
01:18:15 <kristnjov> it's extremely slow in scrolling although it's using barely any cpu time
02:14:44 <Maddas> shapr: Hm. I think you convinced me to try Ion :-)
02:23:13 * shapr yawns
02:23:16 <shapr> good morning #haskell!
02:24:44 <Maddas> Good morning
02:24:59 <shapr> ion is nice
02:25:22 <shapr> coffee is nice too
02:25:44 <Maddas> Yeah. It's just that I don't actually run many things X11 (mostly OS X application)
02:27:35 <Maddas> Oh well :-)
02:28:28 <shapr> I haven't used OS X
02:28:45 <shapr> well, I used it once on Halloween of 99
02:28:52 <Maddas> heh :-)
02:29:31 <shapr> it was cool then because finder was running as an app on top of NeXTStep
02:33:52 <earthy> that version sucked. :)
02:34:13 <earthy> and I told as much to the apple.nl reps that came to demo it.
02:34:30 <earthy> still, it was a cool preview of things to come and definitely The Right Direction
02:51:29 <tromp> morning, #haskell
03:57:16 * shapr boings
04:04:05 * Oejet_ gets hit in the head by shapr and pronounces: $&!@{?¤
04:17:41 * shapr is the most dangerous part of #haskell
04:22:23 <Igloo> Ooo, I dunno. That unsafePerformIO's got a nasty bite.
04:31:45 * shapr grins
04:54:12 <pesco> Booh.
04:54:26 <pesco> "unsafePerformIO?"
04:58:14 <ibid> you don't want to know
05:02:21 <shapr> it's evil!
05:02:49 <ibid> unsafe, more to the point :)
05:02:56 <tuomov> but it's quite necessary... I don't want to drag IO around everywhere
05:03:20 <tuomov> when calling some rather safe foreign routines
05:03:37 <ibid> you don't need uPIO to call safe foreign routines
05:04:05 <tuomov> the alloc routines need IO
05:04:11 <tuomov> afaik
05:04:29 <shapr> I'm too little!
05:04:31 <ibid> sure
05:04:36 <ibid> but they are not safe :)
05:05:42 <tuomov> surely they must be safe enough to be called with unsafePerformIO?
05:06:01 <ibid> no
05:06:17 <ibid> that's exactly what they are not
05:06:23 <tuomov> that sucks seriously
05:06:25 <ibid> in isolation, that is
05:06:53 <ibid> it's probably possible to cook up a IO routine using them that is safe to hand to uPIO
05:07:22 <tuomov> e.g. I have this iconv wrapper that needs to have memory allocated to it
05:07:31 <tuomov> and I do not want to call it in the IO monad
05:07:56 <tuomov> it seems to work..
05:08:25 <ibid> yeah, that falls under the heading 15:06  <ibid> it's probably possible to cook up a IO routine using them that is safe to hand to uPIO
05:08:44 <shapr> otoh, it might cause the occasional corruption
05:08:51 <ibid> oh?
05:09:29 <tuomov> shapr: no, the code that was corrupting things was called in IO, and I think it is a bug in my libc
05:09:34 <shapr> oh, ok
05:09:47 <tuomov> specifically, wcsrtombs not null-terminating the string
05:52:36 <musasabi> morning
06:02:35 <shapr> hei musasabi 
06:05:10 <tuomov> ah, it appers that allocArray0 while allocate one extra element, does not set it to zero
06:06:09 <shapr> I had guessed from the name that allocArray0 should be zero-terminating the arry
06:06:41 <tuomov> so would I have though... and apparently who wrote that code originally
06:06:45 <tuomov> +t
06:06:56 <tuomov> and so would the documentation indicate
06:07:13 <shapr> ergo, it's a bug
06:12:26 <tuomov> I'm not so sure about that. Some of the *Array0 functions require that marker to be specifically passed to them
06:12:56 <tuomov> but it still is strange that the alloc primitives don't require it to be passed
07:10:16 <shapr> yow!
07:10:18 <arjanb> shapr: wiki spam again :(
07:10:23 <shapr> dangit
07:12:23 <shapr> ok, now there's less spam
07:13:14 <shapr> and the ip is banned too
07:17:20 <shapr> arjanb: if you login you can do revert
07:19:04 <arjanb> i know but i haven't made a login yet..
07:19:21 <shapr> ok
07:26:23 <shapr> hi knoen 
07:26:34 <shapr> how's code?
07:26:39 * shapr wibbles
07:28:13 <knoen> i guess fine, sharp, still learning
07:30:02 <knoen> sharp: can you recommend me some good haskell compiler? supporting easy linking with c++ code on win32?
07:30:56 <shapr> I like GHC
07:32:48 <knoen> can GHC be used for commercial app development? no royalites of any kind?
07:32:57 <shapr> sure
07:33:25 <knoen> great, thx
07:33:30 <musasabi> ghc is probably your best bet.
07:34:40 <knoen> i'll try it out
07:41:39 <shapr> knoen: there's an msi installer online, and I can point you to various tutorials if you want.
07:44:29 <knoen> i found ghc-6-2-1_1.msi 40mb, i have few tutorials already (yet another haskell tutotial - hal daume iii), i saw many tutorials on official site
07:44:45 <shapr> the yaht tutorial is nice
07:45:30 <knoen> is yet another haskell tut. good for haskell rookie?
07:45:39 <knoen> ok
07:45:43 <shapr> I think it is
07:45:52 <knoen> ok
07:45:54 <shapr> mostly because I was a rookie, and I made a lot of noise, and then YAHT got started
07:46:12 <shapr> I was not happy with the 'Gentle Intro', it felt like a baseball bat to me.
07:46:34 <knoen> why?
07:46:48 <shapr> because I had very little theory, and very little prior functional programming experience.
07:47:13 <shapr> nowadays the gentle intro looks just fine to me
07:47:20 <knoen> that's similar to my backround :-)
07:47:21 <shapr> three of Haskell coding later :-)
07:47:25 <shapr> um "Three years"
07:47:38 <knoen> of course
07:47:44 <shapr> in that case, I can probably help you lots, because I went from Python to Haskell
07:47:58 <shapr> I wrote this: http://www.scannedinavian.org/AvianWiki/HaskellDemo
07:48:06 <shapr> for the ultra-short quickstart
07:48:42 <shapr> it's like those ice-cream shops that give out one free spoonful so they can make more sales ;-)
07:49:07 <knoen> incredible, i learned python before going into haskell and ocaml also
07:49:11 <knoen> :-)
07:49:34 <shapr> oh, if you already know ocaml, the hardest part will be 'false friends'
07:49:50 <shapr> I've heard that OCaml is quite similar to Haskell
07:51:01 <shapr> hej psi
07:51:17 <psi> hej
07:51:55 <shapr> wassup?
07:52:01 <knoen> i'm learning ocaml too, on the same level as haskell
07:52:02 <knoen> what are 'false friends'?
07:52:02 <knoen> are haskell and ocaml somewhat complement languages?
07:53:06 <psi> shapr: i'm watching pilot episode of tru calling
07:53:37 <shapr> haven't heard of that
07:54:18 <psi> it's with eliza dushku, aka faith in buffy :)
07:54:24 <shapr> knoen: ocaml is functional, but not pure. it produces faster binaries, but the language and syntax are not as expressive
07:54:25 <knoen> sharp: as I see it now, they share many same concepts but there are some performance differences - i understand....
07:54:49 <shapr> knoen: imho, ocaml falls far behind Haskell in programmer performance
07:55:07 <shapr> as in, I can write programs faster with Haskell
07:55:19 <tromp> shapr, is there a typo in yoiur HaskellDemo?
07:55:21 <knoen> sharp: now i have much clearer picture on these two langs.
07:55:29 <shapr> tromp: could be, where?
07:55:35 <tromp> at ackermanoutput left in -
07:55:52 <shapr> oh
07:56:01 <shapr> that's the wiki plugin that calls enscript
07:56:07 <shapr> the plugin has a bug
07:56:28 <shapr> I need to fix that, especially since it's also present in the Haskell Wiki
07:56:45 <tromp> is your wiki source also online?
07:56:50 <shapr> the enscript plugin was written for an older version of MoinMoin, and I hacked on it till it worked with the latest version
07:56:57 <shapr> er, what wiki source?
07:57:30 <shapr> source for the page? for the wiki? for the enscript plugin?
07:57:30 <tromp> well, did you type in all of the Demo by hand?
07:57:35 <tromp> for the page
07:57:51 <shapr> oh, just click on the EditText link and you'll see the source
07:58:15 <tromp> good idea:)
07:58:26 <shapr> I typed that Demo into XEmacs, then when it worked and looked okay, I pasted it into the wiki page.
07:59:30 <tromp> what is special about that ackermann line that makes plugin trip?
07:59:38 <shapr> it's the -- part
07:59:58 <shapr> that's a unixism for "stop reading program options"
08:00:00 <pesco> Oh. I tripped the plugin! :)
08:00:06 <tromp> ah, it's the first -- not at line start
08:00:29 <shapr> actually, I think -- at the beginning of a line works, but not further into a line
08:00:41 <pesco> Hello everyone.
08:00:42 <shapr> enscript has a flaky Haskell syntax highlighting state machine
08:00:48 <shapr> greetings pesco!
08:01:40 <shapr> but, the enscript plugin already sort of worked, so I just grabbed it and upgrade it to "mostly working" instead of just "sort of working" 
08:02:19 <shapr> the haskell.org guys seem to like it, they've created a bunch more haskell.org wikis for classes they teach.
08:02:33 <shapr> oh the embedded LaTeX plugin is cool too
08:03:02 <pesco> shapr: What is it exactly that breaks enscript there? -- ending command line options?!
08:03:16 <shapr> either that or the enscript statemachine
08:06:15 <shapr> knoen: a 'false friend' is a word that sounds the same in two different languages, but doesn't really mean the same thing
08:06:28 <shapr> words that do mean the same thing in different languages are cognates
08:06:33 <shapr> like elev in french and swedish
08:06:40 <shapr> or map in Python and Haskell
08:07:26 <shapr> there are a bunch of false friends between german and swedish, but I can't think of any off the top of my head.
08:07:30 <Lunar^> shapr: I don't any 'elev' word in french ;)
08:07:46 <shapr> oh, I've got one for finnish and english, 'asia'
08:07:47 <pesco> Do you know any false friends between Haskell and O'Caml?
08:07:52 <knoen> sharp: i see, ok, i'll be careful
08:08:14 <shapr> Lunar^: student?
08:08:15 <adept> pesco: module?
08:09:38 <kosmikus> pesco: : and ::?
08:10:37 <pesco> adept: What does module mean in O'Caml?
08:10:56 <pesco> kosmikus: Are their roles reversed in O'Caml? Or what?
08:11:03 <kosmikus> pesco: yes
08:11:11 <pesco> kosmikus: Cool.
08:11:27 <pesco> Oh, I know everyone's favourite.
08:11:29 <pesco> killall
08:11:30 <Lunar^> shapr: élève
08:11:52 <shapr> Lunar^: bah, close enough :-P
08:12:19 <adept> pesco: modules are first-class in ocaml, to start with ...
08:12:45 <pesco> adept: Oh they are! When are we going to make first-class modules in Haskell...
08:13:50 <kosmikus> pesco: the proposal is out there ... guess someone has to implement it and show that it's not so bad
08:14:12 <pesco> I thought there were several proposals, all of which weren't quite perfect.
08:14:25 <shapr> then there's Oleg's recent proposal
08:14:36 <kosmikus> for first-class modules?
08:14:38 <tromp> what wld be a module's type?
08:15:10 <pesco> Module. Just a wild guess. ;)
08:15:16 <shapr> Oleg showed how to do parameterized modules with GHC right now
08:15:28 <pesco> Oh wow, what did he do?
08:15:28 <shapr> I don't remember whether they were first-class or not.
08:15:36 <kosmikus> ok, which proposals are there besides the one of Mark Shields?
08:15:37 <shapr> pesco: his standard terrifying stuff
08:15:42 <shapr> you know Oleg
08:15:49 <pesco> Actually, I don't. :/
08:15:59 <shapr> Oleg Kiselyov(sp?)
08:16:12 <shapr> okmij.org I think
08:16:12 <kosmikus> being able to do it right now doesn't mean it's practical
08:16:13 * shapr checks
08:16:14 <pesco> kosmikus: I don't remember. It's just a skeletal memory from when I stumbled across this.
08:16:41 <kosmikus> frankly, many of the things that Oleg does I'd consider impossible to sell to the standard user
08:16:43 <pesco> Cool, his website reminds me of mine.
08:16:48 <tromp> i wonder how one would define a function Module -> Bool
08:16:59 <shapr> kosmikus: I can't understand half of what Oleg does
08:17:00 <tromp> you can't really pattern match on a module can you?
08:17:12 <shapr> at least, not without days of reading background material.
08:17:23 <shapr> of course, I really do enjoy being in that sort of community =)
08:17:46 <kosmikus> tromp: a module is essentially a record of the functions that are in there
08:17:51 <adept> shapr: :)))
08:18:02 <kosmikus> tromp: the type of a module would be it's interface
08:18:03 <tromp> but would it have constructors?
08:18:38 * adept remembers himself digging through type-encoded vector lengths from Oleg's site ...
08:18:55 <kosmikus> tromp: possibly; depends on how you implement records
08:21:28 * dblhelix always stored contibutions from Oleg to the Haskell mailing list in a special place of my inbox and keep it aroung waiting for the weekend; then, the weekend typically ends with a major headache ;)
08:22:15 <shapr> Oleg sent me an email asking to join haskell-libs, and he included a list of references to stuff he's done to prove that I should let him in I guess...
08:22:31 <shapr> of course, I was thrilled he wanted to join =)
08:23:18 <shapr> would be fun to get him to show up here and talk to us
08:23:35 <dblhelix> anyway, his proposal for first-class modules was, as far as I could follow what was going on, far from ready for exposure to end users
08:24:09 <dblhelix> shapr: but maybe that would require some preparation from our sides ;)
08:24:15 <shapr> probably so :-)
08:55:02 <DenizzzZ> i don't get this error!..
08:55:02 <DenizzzZ> ERROR "D:\programming\haskell\lab4\Larry.hs":28 - Last generator in do {...} must be a
08:55:02 <DenizzzZ> n expression     
08:55:33 <DenizzzZ> can I paste 7 lines ?
08:55:43 <phubuh> does the last part of your do look like ``foo <- bar''?
08:55:44 <shapr> paste on the wiki
08:55:56 <DenizzzZ> no..
08:56:06 <DenizzzZ> number 28 look like..
08:56:18 <DenizzzZ> case line of
08:56:31 <kristnjov> case parse line of
08:56:34 <shapr> that's the last line?
08:56:36 <DenizzzZ> :)
08:56:42 <kristnjov> DenizzzZ, i know what the error is
08:56:46 <DenizzzZ> you do ? :D
08:56:47 <kristnjov> DenizzzZ, it's an indentation error
08:56:51 <kristnjov> i'm at dtek as well :)
08:56:53 <DenizzzZ> oh..
08:56:57 <DenizzzZ> hehe.. hi!
08:57:04 <kristnjov> hi :>
08:57:11 <kristnjov> i believe we've spoken briefly once
08:58:06 <DenizzzZ> heh :D
09:19:04 <shapr> heya stepcut 
09:21:30 <stepcut> hey
09:21:49 <shapr> how's code?
09:22:18 <stepcut> I am trying to write a literate haskell document that I want to typeset in TeX/LaTeX, but I am having trouble figuring out the best way to do it
09:22:33 <shapr> have you tried lhs2TeX?
09:22:52 <stepcut> that was my next step
09:23:15 <stepcut> it does not seem to be in debian...
09:23:30 <shapr> I've heard rumors that there's an unofficial deb available somewhere
09:23:41 <shapr> http://www.cs.uu.nl/~andres/lhs2tex/
09:23:50 <stepcut> thanks
09:23:57 <stepcut> have you used it ?
09:24:05 <shapr> no, but I know the author.
09:24:13 <stepcut> ok
09:24:15 <shapr> I have actually never used TeX in my whole life
09:24:20 <shapr> but I hope to fix that at some point
09:24:26 <xkb> I did use it..
09:24:31 <xkb> works pretty nice
09:24:41 <stepcut> xkb: have you tried alternate methods ?
09:24:43 <shapr> pesco and some other people (Graham Klyne? phubuh? ) have used lhs2TeX
09:24:57 <xkb> stepcut, I used lstlisting packages
09:24:59 <shapr> oh, I think andrew cooke is using it too.
09:25:06 <shapr> or a modified version of it.
09:25:07 <xkb> but thats not normal lhs
09:25:26 <stepcut> well, if lhs2TeX is the recommended tool, then that's what I want :)
09:26:01 <xkb> I think it's the *only* tool :D
09:26:05 <shapr> bok Amadan 
09:26:10 <Amadan> hiya
09:26:16 <xkb> all my others use some kind of filtering
09:26:21 <xkb> like sed/perl
09:26:21 <stepcut> :p
09:35:06 <stepcut> ii  lhs2tex                          1.9-1                            <insert up to 60 chars description>
09:35:06 <stepcut> :p
09:35:54 * shapr grins
09:36:47 <stepcut> I am not much of a TeX expert, but I have used it lightly since 5th grade :-|
09:37:02 <shapr> !
09:37:05 <shapr> since 5th grade??
09:37:08 <Maddas> shapr: Hm, Ion 3 is cool :-)
09:37:10 <shapr> how old are you?
09:37:11 <stepcut> yes sir!
09:37:18 <stepcut> 28
09:37:32 <shapr> Maddas: I haven't upgraded to Ion 3 yet, but I've heard it's not hard to convert my config files
09:37:48 <Maddas> I don't know, I just thought I'd start with the newest if I'm trying it anyway
09:38:00 <shapr> yah, I agree
09:38:06 <shapr> ion 3 is the latest and greatest.
09:38:13 <Maddas> Fink only seems to have Ion (the tarball is from 2002), and I didn't want to start with that :-)
09:38:36 <kosmikus> I can comment more on lhs2TeX later today if there's interest, but I have to catch my bus ...
09:38:46 <Maddas> Took me quite a while to build, I *always* get the build options wrong the first fifteen times :-) (I have libraries installed in non-standard directories)
09:38:51 <Maddas> (I rarely build non-trivial stuff by hand)
09:39:27 <Maddas> Now to install a recent Emacs that runs in X11. 
09:40:27 <Maddas> Can you recommend any particular widget set thingy? I can choose from, uh, plain 'emacs', emacs-gtk and emacs-xaw3d :-)
09:41:15 <shapr> I like xemacs-gtk, it seems to be the fastest elisp interpreter
09:41:18 <shapr> plus I prefer xemacs
09:41:21 <Maddas> Hm
09:41:33 <Maddas> I just don't really want to re-learn much.. :-)
09:41:35 <shapr> imho, xemacs is more user-friendly, but gnu emacs has a larger community and more add-ons
09:41:56 <shapr> there are enough incompatibilities between gnumacs and xemacs to make it really irritating to switch
09:42:29 <Maddas> I don't know Emacs well enough to find out what exactly the breakage in my .emacs will be when I switch :-)
09:42:38 <Maddas> Even less how to fix it
09:43:00 <shapr> in that case, you may want to stick with gnu emacs
09:43:03 <Maddas> Can you name a few major points why you think XEmacs is more user-friendly? (just curious)
09:43:28 <Maddas> Well, on the other hand, I've got an exam tomorrow, so I'm willing to use any excuse I get to do something other than studying :-)
09:43:31 <shapr> xemacs has more tab completion, far more sane menu structuring, built-in package management
09:43:34 <shapr> heh
09:43:36 <shapr> I know that feeling
09:44:05 <Maddas> Hm
09:44:18 <Maddas> I'll give it a try sometime, then, but not now I think :-)
09:44:32 <Maddas> (It's my last exam so I'll have time afterwards)
09:44:53 * Maddas gives emacs-gtk a try
09:48:29 * shapr boings
09:50:04 <Maddas> oi, gtk adds 27 dependencies. I'll try plain emacs first :-)
09:50:07 <xkb> shapr, you must have a slight case of ADHD :)
09:50:09 * andersca hacks
09:50:15 * phubuh chuckles
09:50:16 <shapr> xkb: *slight* ??
09:50:18 <shapr> I think not.
09:50:35 <xkb> With all the boinging going on :)
09:50:44 <shapr> there's nothing slight about my case of ADHD.
09:50:58 <phubuh> map greet ["shapr", "Maddas", "andersca"]
09:51:11 <xkb> shapr, serious?
09:51:15 <shapr> xkb: monstrous maybe, but not slight.
09:51:17 <andersca> return $ "hello " ++ show phubuh
09:51:37 <shapr> sure, I'm serious. I've been getting ADD meds for the last few years, and I've written various stuff about Ritalin, ADD, etc
09:51:40 <shapr> you want to see some?
09:51:49 <xkb> lol
09:52:13 <xkb> I've been diagnosed as a little bit attention disorder(ic)
09:52:31 <xkb> never got meds for it though
09:52:38 <shapr> look for the parts signed --ShaeErisson here: http://c2.com/cgi/wiki?RitalinDrug http://c2.com/cgi/wiki?AttentionDeficitDisorder
09:52:40 <Maddas> shapr: I'd like to see some :?)
09:52:47 <Maddas> Thanks
09:53:03 <shapr> or just ask me
09:53:26 <XTL> shapr: Have you checked/filled wikipedia?
09:53:38 <shapr> xkb: let's see, I changed my name when I was 27, I moved to Finland when I was 28, I've had six years of college, several different majors, and no degree
09:53:52 <Maddas> {- Hello phubuh! Unfortunately my Haskell skills are severely lacking :-) -}
09:53:58 <xkb> shapr, that's sounds like a familliar pattern indeed
09:54:22 <xkb> do you also notice that your concentration span is getting smaller due to using a computer alot?
09:54:29 <phubuh> at least you write comments
09:54:29 <xkb> or is that just me
09:54:55 <shapr> xkb: I think that I expect more interactivity because I use a computer so much.
09:55:06 <shapr> for example, I hate TV, it's too slow. I can read so much faster.
09:55:22 <shapr> plus I can put down a book and wander off, and that's socially acceptable.
09:55:39 <shapr> but movies and TV are usually group activities, and people get irritated when I wander off in the middle.
09:55:51 <xkb> shapr, very recognizable
09:56:03 <shapr> xkb: but, there are ways of making ADD work *for* you rather than against you.
09:56:10 <shapr> it can be an advantage
09:56:52 <xkb> I think you are usually alot more energetic :d
09:57:08 <shapr> more energetic than what?
09:57:18 <xkb> than others in general
09:58:29 <shapr> you get to see me when I'm doing stuff that I consider fun.
09:59:07 <shapr> compared to the 'average' person, it's easier for ADD folkes to do fun stuff and harder to do not-fun stuff
09:59:14 <Maddas> phubuh: :-)
09:59:20 <XTL> Hmm. Karate tomorrow. I wonder how that knee will hold up
09:59:54 <xkb> anyway.. im off reading about tapestry
09:59:58 <shapr> :-)
10:00:20 <shapr> xkb: I'd love to talk to you about useful coping strategies when you have time.
10:00:30 <shapr> especially for professional programming.
10:00:46 * Maddas doesn't want to miss that :-)
10:00:48 <shapr> XTL: no, I have not
10:01:11 <xkb> shapr, ah nice.. I think I can make some time soon :D
10:01:38 <shapr> ok, cool
10:11:22 * kosmikus reappears
10:11:37 <shapr> wow, totally kosmik d00d
10:14:21 <kosmikus> Oh wow!  Everything looks so kosmik!
10:14:27 * shapr grins
10:16:45 * kosmikus shouldn't have quaffed that purple-red potion ...
10:30:54 <shapr> g'day aj
10:31:01 <shapr> would you like to learn Haskell? ;-)
10:31:06 * aj frees up some more disk space ;)
10:32:29 <aj> so what's a good manual? i seem to have something called "haskell98-report" ?
10:32:57 <Philippa> there's not really a good manual, but there're decent tutorials available from haskell.org and GHC comes with library documentation
10:32:59 * shapr gets it organized
10:33:09 <Philippa> the report's the language spec
10:33:27 <shapr> aj: here's the intro for the totally impatient --> http://www.scannedinavian.org/AvianWiki/HaskellDemo
10:33:52 <shapr> that's like "we'll let you smoke the first lambda for free"
10:34:15 <shapr> past that, I'd recommend the GHC compiler, and Hal Daume's 'Yet Another Haskell Tutorial'
10:34:31 <Philippa> yeah, GHCi (part of GHC) is great for learning
10:34:56 <aj> oh, GHCi is an interpreter?
10:35:02 <shapr> yup
10:35:15 <aj> nifty!
10:35:32 <shapr> local touristy spots are the channel bot, lambdabot; the Haskell Wiki; the channel logs, and the learning page on Haskell.org
10:35:41 <aj> Loading package base ... /usr/lib/ghc-6.2.1/HSbase.o: unknown architecture
10:35:41 <aj> ghc-6.2.1: panic! (the `impossible' happened, GHC version 6.2.1):
10:35:41 <aj>         loadObj: failed
10:35:45 <aj> bahaha, less nifty :)
10:36:41 <aj> how about hugs, can i just use it?
10:36:50 <shapr> sure, you can use hugs to learn stuff
10:36:54 <shapr> but I don't think darcs works with hugs
10:36:59 <shapr> hugs is a Haskell interpreter written in C
10:37:05 <shapr> GHC is a Haskell compiler written in Haskell
10:37:13 <aj> oh well, i can use a different machine to hax0r darcs i guess
10:37:45 <ibid> what architecture is that?
10:37:53 <aj> ibid: ppc
10:37:58 <ibid> hmm
10:38:06 <aj> ibid: ghc itself seems to work fine
10:38:29 <ibid> oh, hmm
10:38:34 <ibid> report a bug? :)
10:38:44 <shapr> yah, which arch are you using? what distro of which OS?
10:39:11 <aj> debian powerpc, sarge (ghc6 6.2.1-4)
10:40:13 <shapr> ah
10:42:09 <ibid> already reported apparently (#252215)
10:42:39 <aj> okay, i386 works
10:42:43 <ibid> and apparently fixed upstream
10:42:48 <aj> Prelude> somenumber = 1
10:42:51 <aj> doesn't work?
10:42:58 <ibid> no
10:43:03 <ibid> let somenumber = 1
10:43:27 <aj> the wiki examples don't use let?
10:43:33 <ibid> (when you know haskell better, you'll note that the prompt behaves much like a do expression)
10:43:53 * ibid looks
10:44:09 <ibid> ah, that's supposed to be saved to a file
10:45:22 <aj> yay! i just did my first curried function :)
10:45:50 <ibid> let us see? :)
10:46:00 <shapr> oh I want to see!
10:46:00 <aj> Prelude> let k = add 1
10:46:00 <aj> Prelude> k 2
10:46:00 <aj> 3
10:46:17 <ibid> heh:)
10:46:57 <Igloo> Someone commited support for ghci on powerpc a few days ago, but it'll probably be a few weeks before it gets into Debian
10:50:01 <aj> Prelude> data Tree a = Nil | Node (Tree a) a (Tree a) deriving Show
10:50:01 <aj> <interactive>:1: parse error on input `data'
10:50:21 <aj> any way to make that work?
10:50:28 <ibid> you cannot enter type definitions on the prompt
10:50:32 <ibid> put them to a file
10:50:46 <Igloo> If I want to do interactive stuff I generally use "hugs foo.hs" and :e in hugs to edit the file to give declarations etc
10:51:15 <ibid> (the prompt essentially parses sort of expressions, and a data declaration is not an expression)
10:51:33 <ibid> :reload works in ghci
10:51:42 <ibid> well enough at least
10:52:33 <Igloo> And in hugs, if you prefer that way of working
10:53:31 <aj> can i use a datatype from the prompt? or only after i've declared the variable as a test?
10:53:51 <ibid> you can use it if you have read in a file that defines it
10:54:31 <aj> *Main> mytree :: Tree Int
10:54:31 <aj> <interactive>:1: Variable not in scope: `mytree'
10:54:55 <ibid> that's not a declaration in the sense of c or otherwise
10:54:58 <aj> then when i let mytee = something, the :: line just acts as a test
10:55:01 <ibid> that's more like a type assertion
10:55:22 <Igloo> It is a declaration, that's the problem
10:55:33 <Igloo> let mytree :: Tree Int; mytee = Nil should sork
10:55:35 <ibid> let { mytree :: Tree Int; mytree = something }
10:55:46 <ibid> yeah, the {}s are unnecessary
10:55:49 <shapr> hiya velco 
10:55:56 <velco> y0
10:56:23 <ibid> Igloo: but not in the same sense as a variable declaration is in many other languages
10:57:36 <aj> so what's let do there? evaluate both... declarations? simultaneously?
10:57:43 <shapr> velco: you want to learn Haskell?
10:58:21 <Igloo> It's simultaneous, yes
10:58:34 <ibid> aj: i think it's better to think of :: as a type assertion: foo :: T means that foo is or will be of type T
10:58:35 <velco> hmm ...
10:58:35 <velco> only if the usual naming conventions do not include caps :)
10:58:38 <Igloo> I'm not quite sure what a good verb would be, though  :-)
10:58:55 <aj> ibid: evaluates both assertions at once then, might be a better way of putting it?
10:59:44 <Igloo> let f = g; g = f   simultaneously finds f and g. "evaluates" is misleading as no evaluation will happen with let
10:59:46 <ibid> aj: the other is a definition :) and evaluation is not quite right, but yeah, that's essentially what it is
10:59:59 <Igloo> In the mytree case both the type sig and the binding are part of the same definition really
11:00:11 <Igloo> Aaargh, s/finds/binds/
11:00:16 <ibid> :)
11:00:16 <Igloo> What is up with my typing tonight?
11:00:22 <ibid> aj: any fp experience?
11:01:06 <aj> ibid: yeah, i did a course ages ago; logic and functional programming, but the functional language was kind of a toy language
11:01:33 <ibid> aj: real fp or sorta fp? :)
11:02:03 <ibid> aj: ie. did you have assignments (as in, x = 5; print x; x = 6 print x;)
11:02:03 <aj> ibid: umm, what's "sorta" fp?
11:02:09 <aj> oh, real fp then
11:02:15 <ibid> no assignments?
11:02:17 <ibid> nice
11:02:31 <aj> no state, certainly
11:02:34 <ibid> (many lisp-style fp courses are really "sorta fp")
11:02:37 <aj> there was probably names
11:02:43 <aj> no lisp either :-/
11:03:46 <monochrom> functions are 1.1th class in lisp.
11:04:05 <ibid> monochrom: note: i count scheme as lisp
11:04:07 <Igloo> how so?
11:04:54 <monochrom> in scheme it's 1st class alright.
11:05:32 <Igloo> Ah, OK, I don't want to know about fiddly details between lisp variants  :-)
11:20:06 <monochrom> I think I remember now.  In Lisp a variable can have two bindings, a function binding and a value binding.
11:20:45 <monochrom> When you write (x blah blah), the function binding of x is used.  whichever function is bound to the function binding of x is called.
11:20:59 <monochrom> When you write (blah blah x), the value binding of x is used.
11:21:14 <velco> btw, are there "object systems" for haskell. No matter what "style" of OO: C++/Java, CLOS, smalltalk or something else ?
11:21:21 <shapr> sort of
11:21:26 <monochrom> (defun x ...) sets the function binding of x.  (let x ...) sets the value binding of x.
11:21:35 <shapr> but Haskell doesn't have identity, so object systems doesn't really apply
11:21:50 <monochrom> So now if I write (let x (lambda ...)) I am storing my function to x's value binding, not function binding.
11:21:52 <Philippa> well, you can sorta forcibly add identity, but yeah
11:22:05 <Philippa> you could certainly build a decent object system with template haskell
11:22:05 <monochrom> Then if I write (x ...) it will not work as I expect in all sane languages.
11:22:35 <shapr> Philippa: sure, but the referentially transparent subset doesn't support OOP...
11:22:39 <ibid> shapr: there are declarative object models, and identity can be faked :)
11:22:42 <shapr> though with monads you can pretty much do whatever you want
11:22:56 <shapr> ok, I retract my no OOP in Haskell statement :-P
11:23:56 <Philippa> ibid: how faked?
11:24:43 <Philippa> shapr: yeah, I agree you're not gonna get proper RT OO as things stand
11:25:19 <ibid> Philippa: explicit identity, possibly along with forcing some sort of time concept with monads
11:25:51 <Philippa> yeah, that's pretty much how I'd do things atm
11:25:55 <ibid> with explicit identity, it's essentially a persistent object model (in the traditional, not oo sense of persistence)
11:26:07 <ibid> (if there are no monads, that is)
11:26:09 <Philippa> "objects hang around" :-)
11:26:44 <ibid> no, object states hang around
11:26:55 <ibid> i mean, you have access to the past
11:27:05 <ibid> and you may have more than one now
11:27:15 <Philippa> sorry, yeah, that's what I meant
11:29:05 <ibid> also makes time travel feasible
11:30:33 <phubuh> monochrom: to be pedantic, (let ((x ...)) ...) establishes a binding for X in the current lexical scope; to set the value slot of X, use (setf x ...) :P
11:31:48 <monochrom> lisp is overtly complicated
11:32:05 <ibid> _common_ lisp is overtly complicated
11:32:19 <ibid> (overtly as in in plain sight?;)
11:32:32 <kristnjov> lisp is weird.
11:33:41 <ibid> common lisp is sorta like c++
11:34:30 <pesco> How's that?
11:34:30 <Oejet> => thus C++ is weird.
11:35:09 <ibid> pesco: both are complex languages with huge libraries and developed over time from a small language
11:35:35 <velco> I wouldn;t call C++ library huge
11:35:52 <pesco> The standard C++ library isn't huge, that's true.
11:36:00 <kristnjov> STL!
11:36:02 <aj> ooo, arrays. how nifty
11:36:12 <ibid> pesco: seen the C++ standard lately?
11:36:28 <phubuh> much of what common lisp provides at runtime, C++ provides at compile-time
11:36:29 <ibid> aj: arrays in haskell are less useful than one might think
11:36:39 <pesco> ibid: Has there been a revision lately?
11:36:50 <ibid> pesco: small revisions, nothing major
11:36:56 <phubuh> so a lot of stuff that counts as part of CL's library is built into the C++ language
11:37:03 <pesco> ibid: Then, pretty much yes.
11:37:35 <ibid> pesco: well, if not huge then pretty big in any case (compared to the small language, anyway)
11:37:56 <pesco> What is the small language? C++ without STL? :-/
11:38:04 <kristnjov> C?
11:38:08 <ibid> C
11:38:24 <xs> forth.
11:38:43 <ibid> xs: forth was the missing link between B and C? :)
11:38:43 <kristnjov> but i hope we can all agree on that cobol is the language we all want to code in.
11:39:04 <xs> ibid: hm, i consider it the missing link between c and assembly ;)
11:39:13 <pesco> Is C's standard library that much smaller?
11:39:32 <ibid> it isn't that many years ago that our university taught cobol (which was mandatory even to some students)
11:39:32 <xs> pesco: it depends which standard you talk about.. ;)
11:39:50 <pesco> xs: Really? I'd say C99.
11:40:14 <xs> then it's quite smaller than c++ standard library, i think...
11:40:35 <ibid> pesco: well, take the C standard.  take the C++ standard.  (take the wiley editions.)  they are equally thick, but the C standard book includes a rationale document, which makes up almost half of the book, and the c++ standard is printed with a clearly smaller font
11:41:05 <pesco> ibid: However, we were talking about the standard libraries, not the _language complexity_.
11:41:44 <ibid> pesco: you were, maybe, but i was defending my original statements which compared _languages_, not _libraries_
11:41:52 <velco> pesco: 2003
11:41:52 <ibid> (languages with libraries that is)
11:41:53 <pesco> Oh, ok.
11:42:02 <velco> C
11:42:02 <velco> logo
11:42:10 <velco> nah, C99 is between C and fortran
11:42:20 <velco> C++ includes by reference the C one
11:42:22 <velco> e.g. #include <cstdio>
11:42:34 <ibid> C++ inculdes only a part of the C standard by reference
11:43:49 <pesco> Is CLOS part of Common Lisp?
11:43:56 <velco> yes
11:43:56 <phubuh> yes
11:44:11 <ibid> pesco: besides, i'd estimate that about one half of the c++ standard is dedicated to the library
11:44:16 <phubuh> common lisp is defined in terms of CLOS; they're inseparable
11:44:34 <pesco> phubuh: Are you sure?
11:44:42 <phubuh> yes
11:45:15 <pesco> But it would be well possible to define CL without CLOS.
11:45:27 <phubuh> no -- that wouldn't be CL :)
11:45:28 <Maddas> It wouldn't be CL, then
11:45:39 <velco> I don;t think so
11:45:50 <ibid> CL used to be separate from CLOS, afaik
11:45:52 <velco> (while reading, Common Lisp - The language
11:47:07 <pesco> What's called CL is simply a matter of definition. Since CLOS was created after Lisp, it must be possible that CL had been defined without including CLOS. Anyway, it's unimportant.
11:47:32 <ibid> but CL is way younger than lisp :)
11:47:49 <pesco> Of course it is.
11:47:52 <Maddas> pesco: When I say "CL", I mean what the ANSI standard describes.
11:47:52 <ibid> i seem to recall that CLOS was defined after the first version of CL, CLOS was an appendix in the book
11:47:56 <ibid> iirc
11:48:54 <aj> ibid: i'm more impressed that they exist than that they might be useful; implementing them so that they're any more efficient than just functions seems clever
11:49:29 <ibid> aj: i'm lost as to the context, sorry
11:49:38 <aj> ibid: arrays in haskell
11:49:48 <ibid> ah
11:50:27 <pesco> Hearing arrays, what should I use to represent large vectors in Haskell, besides lists?
11:52:04 <Philippa> aj: interface != implementation, they're probably implemented as per ordinary arrays for the more obvious index types and hashed for the others
11:54:23 <aj> Philippa: the tutorial gives the impression that arrays can only be indexed by integer ranges, so hashing's not really relevant
11:54:47 <Igloo> No, they'll be real arrays of pointers in general I assume. They can be inefficient as whole arrays can need to be copied due to no destructive updates, though
11:55:00 <ibid> Philippa: istr any index type must be mappable to an integer range
11:55:43 <Philippa> ah, figures
11:55:46 <ibid> aj: i usually use ghc's Data.FiniteMap when i need arrays or dictionaries
11:55:58 <Philippa> Igloo: yeah, yeah, boxing and all that
11:56:53 <ibid> pesco: depends on the usage patterns
11:57:15 * shapr wibbles
12:00:15 <pesco> ibid: ODE integration.
12:00:22 * Philippa is getting weird behaviour from Network.CGI
12:00:41 <aj> what's "x $ y" do?
12:00:49 <pesco> x y
12:01:00 <aj> so what's the $ for?
12:01:06 <ibid> aj: precedence
12:01:11 <ibid> aj: it allows you to lose parentheses
12:01:21 <ibid> aj: a $ b c means a (b c)
12:01:43 <pesco> ($) has very low priority
12:02:07 <pesco> ($) is also useful because it gives a name to function application.
12:02:14 <ibid> pesco: i have no idea what that means :)
12:02:23 <ibid> ODE, that is
12:02:36 <pesco> Ordinary Differential Equations
12:02:40 <ibid> ah
12:02:57 <ibid> ok, i have no idea what kind of usage patterns that implies :)
12:03:14 <shapr> when I first found Haskell, the idea that it was useful to have function application as a symbol was seriously strange
12:03:41 <shapr> but then I saw some neat examples that started out map ($) ...
12:04:06 <pesco> ibid: Basically, vector addition, multiplication with scalars. If I remember correctly.
12:04:43 <ibid> essentially maps then
12:04:53 <pesco> Yes.
12:05:10 <pesco> maps and zips.
12:05:25 <ibid> are they sparse?
12:05:30 <pesco> No.
12:05:31 <pesco> Dense.
12:05:32 <ibid> ok
12:05:35 <ibid> i'd use lists then
12:05:39 <ibid> perhaps arrays
12:05:49 <pesco> Sure about arrays? I don't need the indexing.
12:05:56 <ibid> not sure
12:06:36 <ibid> i'd expect large arrays to be more efficient than large lists if one updates them by map-like stuff
12:06:38 <pesco> I did use lists. It works. Although I ran into space leaks and had to explicitly seq one or two things.
12:06:52 <ibid> but it depends on if there are useful map-like functions
12:07:19 <cptchaos> list acces is slow, while true array should need constant time to acces any element
12:07:42 <ibid> cptchaos: list access is fast if one never needs random access
12:07:54 <pesco> cptchaos: Yes, what ibid said.
12:08:33 <cptchaos> so take list element n needs n steps, but taking element n in an array should be one step
12:08:46 <ibid> cptchaos: that's random access
12:08:47 <aj> so, "seq foo $ bar" is the same as "bar" isn't it?
12:08:53 <ibid> cptchaos: which is not always needed
12:09:16 <ibid> aj: no, if foo diverges
12:09:29 <pesco> cptchaos: All you nead for zipWith and map is sequential access!
12:09:30 <cptchaos> so if you do numerics, you should preferably use arrays
12:09:42 <aj> if foo diverges, seq foo $ bar will diverge?
12:09:45 <cptchaos> especially for matrix mutliplication
12:09:48 <ibid> aj: yes
12:09:59 <ibid> cptchaos: not necessarily
12:10:02 <ibid> cptchaos: you oversimplify
12:10:21 <pesco> cptchaos: You can perform matrix multiplication sequentially.
12:10:30 <pesco> But you need transpose. :/
12:10:38 <pesco> I'm not sure how much the cost of it is, though.
12:10:44 <aj> ibid: is that the point of seq, or?
12:10:54 <cptchaos> I know that with transpose
12:11:24 <ibid> aj: that, and also forcing computation
12:11:27 <cptchaos> but maybe there is an efficient way to do that,
12:11:37 <cptchaos> and I am just not aware of it
12:11:45 <cptchaos> so maybe ibit is right
12:12:00 <pesco> I'm not sure, but anyway, my question only concered vectors for the moment.
12:12:01 * esap just wrote some OO code with Haskell.
12:12:27 <pesco> I should benchmark this some time.
12:12:43 <cptchaos> for numeric maybe it is best to use unsave performIO (in an save way and destructive updates)
12:12:46 <ibid> cptchaos: things are never as simple as "if you are doing numerics, use arrays". it depends on usage patterns. if your algorithms need only sequential access, lists are good
12:13:13 <ibid> cptchaos: if you are doing destructive updates, uPIO is definitely wrong
12:13:19 <pesco> IOUArrays vs. lists vs. PArrays vs. ?
12:13:35 <ibid> (unless you code your stuff very carefully so that the statefulness does not leak)
12:15:08 <cptchaos> ibid: thats true, you have to be very carefully, but there are high opitmised algorithms (using that) for many problems
12:16:03 <aj> so "seq p1 $ foo p1 blah" means "foo p1 blah (given that p1's not screwed up)"
12:16:31 <ibid> functionally yes
12:16:46 <ibid> the seq may have an effect on efficiency, though
12:17:36 <ibid> aj: i've usually seen seq used as infix operator though: p1 `seq` foo p1 blah
12:22:36 <cptchaos> peso: last time I used lists for my numeric computations too, but I don't thing it is the best way to do it (but an easy one :-) )
12:25:47 * esap wonders why Functor cannot be derived.
12:32:05 <Philippa> anybody know in what circumstances I might expect stdin to be semi-closed?
12:33:55 <cptchaos> Phillippa: If you do a getContext on it before ?
12:35:19 <cptchaos> sorry, it is getContents
12:35:32 <cptchaos> @index getContents
12:35:32 <lambdabot> Prelude,System.IO,IO
12:35:53 <cptchaos> @index hGetContents
12:35:53 <lambdabot> GHC.IO,System.IO,IO
12:36:43 <Philippa> thanks
12:39:06 <pesco> I'm gone. Goodbye everyone.
12:44:08 * Philippa finally figures out WTF Network.CGI does with POST data... argh!
12:44:20 <kristnjov> what does it do?
12:44:59 <Philippa> parses it and sticks it in the (key,value) list all the environment variables use
12:45:42 <Philippa> which no doubt I should've known had I written CGIs in any other language, but hey
12:45:58 <kristnjov> exactly what i was thinking :/
12:46:54 <Philippa> anyway, I've got all the tools I need now...
12:55:50 <Philippa> rather irritatingly, it won't parse the QUERY_STRING on a POST
12:58:27 <xkb> Philippa, for your wiki clone?
13:55:14 <Boegel> hello everyone !
13:55:42 <shapr> hoi Boegel 
13:56:57 * shapr cranks up Analog Cabin
13:57:42 <Boegel> @arr
13:57:42 <lambdabot> Get out of me way, yeh landlubber
13:58:08 <shapr> @arr
13:58:08 <lambdabot> Ahoy mateys
13:58:16 <Boegel> @arr
13:58:16 <lambdabot> Get out of me way, yeh landlubber
13:58:21 <Boegel> this is fun :p
13:58:24 <Boegel> @arr
13:58:25 <lambdabot> I heard andersca is a pirate
13:58:25 <shapr> @fortune
13:58:26 <lambdabot> The most important service rendered by the press is that of educating
13:58:26 <lambdabot> people to approach printed matter with distrust. 
13:58:35 <shapr> ooh, lambdabot is talking about andersca
13:58:42 <Boegel> :o)
13:58:43 <Jad> @moo
13:58:43 <lambdabot>          (__)
13:58:43 <lambdabot>          (oo)
13:58:43 <lambdabot>    /------\/
13:58:43 <lambdabot>   / |    ||
13:58:43 <lambdabot>  *  /\---/\
13:58:44 <lambdabot>     ~~   ~~
13:58:46 <lambdabot> ...."Have you mooed today?"...
13:58:51 <Boegel> lolz
13:58:51 <shapr> nice cow
13:58:52 <Jad> apt-get moo
13:59:03 <andersca> @arr
13:59:03 <lambdabot> Avast!
13:59:08 <Boegel> @arr
13:59:08 <lambdabot> I heard andersca is a pirate
13:59:12 <Boegel> again ! :)
13:59:15 <shapr> wow
14:00:18 <Boegel> @arr
14:00:18 <lambdabot> Eat maggoty hardtack, ye unkempt, jenny frequentin', son of a gun.
14:00:30 <Boegel> lolz
14:00:35 <shapr> @listmodules
14:00:35 <lambdabot> I have the following modules installed: ["base","cmafihe","dict","dummy
14:00:35 <lambdabot> ,"dynamic","eval","hello","karma","more","quote","seen","state","system
14:00:35 <lambdabot> ,"topic","type"]
14:00:39 <Boegel> who implemented that ?
14:00:45 <shapr> @listcommands quote
14:00:45 <lambdabot> Module quote provides the following commands: ["fortune","yow","arr"]
14:00:46 <Jad> shapr
14:00:48 <shapr> I did @arr 
14:00:55 <Boegel> @yow
14:00:55 <lambdabot> Don't hit me!!  I'm in the Twilight Zone!!!
14:01:10 <Boegel> how the hell did you came up with it ?
14:01:16 <Jad> @listcommands kamra
14:01:16 <lambdabot> No module "kamra" loaded
14:01:27 <shapr> it started when I discovered emacs' M-x yow command
14:01:35 <shapr> I thought it was hysterically bizarre
14:01:50 <shapr> so I hacked up a lambdabot plugin that did that
14:02:02 <shapr> it was a small step to add a fortune command
14:02:14 <shapr> and then andersca discovered 'talk like a pirate day'
14:02:18 <Boegel> how does the emacs thing work ?
14:02:22 <shapr> which is where @arr came from
14:02:25 <shapr> do you have emacs?
14:02:25 <Boegel> ctrl+x and then ?
14:02:29 <Boegel> yes I do
14:02:35 <shapr> meta-x yow <enter>
14:02:35 <Boegel> and I work in it frequently
14:02:39 <shapr> meta is probably alt on your system
14:02:46 <shapr> so, alt+x yow enter
14:02:47 <Boegel> ow okay
14:03:03 <shapr> emacs has huge amounts of bizarre stuff inside it
14:03:05 <Boegel> lolz :)
14:03:06 <shapr> for example
14:03:13 <shapr> M-x tetris
14:03:13 <Boegel> it has a psychiatrist too
14:03:16 <shapr> and M-x dunno
14:03:21 <Boegel> ow nice :)
14:03:28 <shapr> oh you can get the psychiatrist to talk to yow :-)
14:03:37 <shapr> M-x psychoanalyze-pinhead
14:03:58 <shapr> er M-x dunnet
14:04:00 <shapr> not M-x dunno
14:04:31 <shapr> man, this IOHCC submission is so massively cool
14:04:46 <Boegel> dunnet is something like mud ?
14:04:52 <shapr> yup, something like that
14:05:06 <shapr> mud, dunnet, etc all came from a very old unix program named 'adventure'
14:05:14 <shapr> it's the original
14:05:25 <Boegel> what does psychoanalyse-pinhead do ?
14:05:31 <Boegel> it creates a whole load of text :s
14:05:35 <Boegel> it won't stop :s
14:05:35 <shapr> you know about the psychiatrist, right?
14:05:39 <Boegel> yes
14:05:41 <Boegel> a little bit
14:05:52 <shapr> it's a simple program that asks stuff like "why do you say that?"
14:06:07 <shapr> and it uses the text you typed in a little bit
14:06:16 <Boegel> uhu, I know it
14:06:22 <Boegel> it's a whole conversation ?
14:06:22 <shapr> so, psychoanalyze-pinhead gets M-x yow to talk to M-x psychiatrist
14:06:28 <Boegel> and it doesn't stop ? or does it ?
14:06:37 <shapr> it doesn't stop unless you hit something
14:06:45 <shapr> control+g maybe?
14:06:45 <Boegel> damn
14:06:48 <Boegel> that's cool
14:06:49 <shapr> control+c ?
14:06:50 <Boegel> ctrl+c
14:06:52 <Jad> yep
14:06:53 <Jad> no
14:06:54 <shapr> I don't remember
14:06:55 <Jad> cntrl+g
14:06:58 <Boegel> that's a standard in emacs
14:07:20 <shapr> emacs has a lot more 'standards' but they're not rigorously followed.
14:08:25 <shapr> this IOHCC submission uses Language.Haskell.Syntax, Language.Haskell.THSyntax, and Data.Generics; all in the same program under 5k
14:08:29 <Boegel> I think it's a good program, but you need to know a lot of shortcuts to work efficiently
14:08:45 <Boegel> many students I know won't work in it, just because they don't know the shortcuts
14:08:51 <shapr> I can point you to some useful emacs info that I mostly wrote, if you want.
14:09:05 <Boegel> yeah sure
14:09:07 <Boegel> always welcome
14:09:38 <Boegel> does anyone here know Flogging Molly ?
14:09:41 <shapr> http://www.emacswiki.org/cgi-bin/wiki/EmacsNiftyTricks
14:10:10 <shapr> oh someone has reorganized that page
14:10:11 <shapr> neat
14:10:55 <shapr> dang, I wish Marvin-- were here
14:12:20 <Boegel> bookmarked for further study shapr :) thx
14:12:24 <Boegel> ow osrry
14:12:31 <Boegel> thanks :)
14:12:35 <shapr> :-)
14:12:47 <Boegel> I'm doing my best :p
14:13:02 <Boegel> but when you're used to chatting on messenger, it's not easy :p
14:13:26 <shapr> I understand.
14:13:34 <Boegel> nobody knows Flogging Molly ?
14:14:07 <kristnjov> i know of them
14:14:09 <kristnjov> they're a great band
14:15:31 <kristnjov> ..you did refer to the band, right?
14:17:13 * shapr grits his teeth and tries to understand 
14:17:49 <shapr> "all Haskell programs are (in a certain sense) alpha-equivalent"
14:17:52 * shapr blinks
14:17:58 <shapr> Igloo: ayh?
14:19:40 <shapr> what does alpha-equivalent mean there?
14:20:35 <monochrom> I know what it means commonly.  I don't know what it means *there*.
14:20:44 <shapr> what does it mean commonly?
14:20:53 <monochrom> alpha conversion: (\x -> x+1) = (\y -> y+1)
14:21:11 <monochrom> err replace = by "can be rewritten as"
14:21:14 <shapr> right
14:21:24 <shapr> alpha conversion as in TaPL
14:21:25 <shapr> hmm
14:21:38 <monochrom> alpha-equivalence: two terms that can be made the same by alpha conversion.
14:21:48 <shapr> right
14:21:56 <shapr> so
14:22:03 <monochrom> Therefore the quoted statement makes no sense to me.
14:22:10 <shapr> that's what I was thinking.
14:22:19 <shapr> seems to work though :-)
14:23:11 <Oejet__> Hello, I'm reading Launchbury and P. Jones's article "Lazy Functional State Threads".  They describe a state monad and functions newVar, readVar and writeVar.  I haven't been able to find those funktions in GHC's library, maybe because the article is from '94.  What are the contemporary names?
14:23:24 <shapr> maybe IORef?
14:23:33 <shapr> oh wait
14:23:52 <Oejet__> Data.STRef?
14:23:55 <shapr> is that the MVar stuff in Control.Concurrent?
14:24:03 <shapr> could be
14:24:08 <shapr> @index newVar
14:24:08 <lambdabot> bzzt
14:24:14 <shapr> @index newSTRef
14:24:14 <lambdabot> Data.STRef.Lazy,Data.STRef,Data.STRef.Strict,GHC.STRef
14:24:19 <shapr> @index newIORef
14:24:20 <lambdabot> Data.IORef,GHC.IOBase
14:24:37 <cptchaos> @index newMVar
14:24:37 <lambdabot> Control.Concurrent,Control.Concurrent.MVar,GHC.Conc
14:25:10 <monochrom> Look into the Data.IORef and Data.STRef.* modules.
14:25:45 <monochrom> Probabaly the latter.
14:26:24 <Boegel> yeah kristnjov, I meant the band
14:26:31 <Boegel> I was em live last month
14:26:37 <kristnjov> cool
14:26:38 <Boegel> was -> saw
14:26:49 <Boegel> and i didn't know them at all
14:26:53 <Boegel> but they're damn great
14:26:57 <kristnjov> indeed
14:27:03 <Boegel> Devil's Dance Floor is just amazing :)
14:27:07 <Boegel> it cheers me up
14:27:19 <Boegel> I'm thinking of putting it on cd, and using it as a wake up call :)
14:27:59 <Igloo> shapr: What context?
14:28:10 <Oejet__> Hm, I tried STRef, but my attempt at making up an example failed:
14:28:10 <Oejet__> fun = do  x <- newSTRef 5; modifySTRef x (*2); readSTRef x; return x
14:28:10 <Oejet__> How do I use the value?
14:28:38 <Boegel> tomorrow my order is coming in
14:28:45 <Boegel> a new pc for my brother in lax
14:28:47 <Boegel> law
14:28:59 <Boegel> but it's the first time I'll build a new pc from bits and pieces
14:29:05 <Boegel> I hope it'll work :)
14:35:22 <shapr> ask me if you have any problems
14:35:22 <shapr> I first built my own IBM XT 4.77 MHz with 512k ram
14:35:23 * shapr lags horribly
14:39:03 <Boegel> nice
14:39:18 <Boegel> I know where to go if I experience any problems
14:39:19 <Boegel> thx
14:39:24 <Boegel> want to see what I bought ?
14:41:44 <Boegel> shapr, want to see what I bought ?
14:42:18 <shapr> sure!
14:42:36 <Boegel> how shall I give it to you ? mail ?
14:42:51 <shapr> er
14:42:54 <shapr> I dunno? what did you buy?
14:42:58 <shapr> the PC?
14:43:00 <Boegel> uhu
14:43:06 <Boegel> the hardware stuff
14:43:11 <shapr> what kind of PC is it? 
14:43:11 <Boegel> which brand, and so on
14:43:28 <Boegel> we'll, it's all seperate
14:43:32 <Boegel> I have to put it together
14:43:36 <shapr> sure, mail it to me if you want
14:43:45 <Boegel> that's the whole problem (I hope not, but I fear it)
14:43:50 <Boegel> adress ?
14:43:59 <shapr> shae at scanned in avian dot com
14:44:10 <Boegel> :)
14:44:13 <Boegel> span free :)
14:44:22 <Boegel> *spam
14:46:48 <Boegel> sent
14:46:56 <Boegel> let me know when you get it
14:46:59 <shapr> oh, you'll probably get a tmda bounce
14:47:03 <shapr> unless I've whitelisted your address
14:47:08 <Boegel> woops :s
14:47:19 <stepcut> shapr: next year you should run the iomsc
14:47:24 <Boegel> kenneth dot hoste at gmail dot com
14:47:24 <shapr> what's that?
14:47:40 <shapr> stepcut: international obfuscated what?
14:47:44 <stepcut> international obsfuscated mail server contest
14:47:49 * shapr laughs
14:47:58 <stepcut> the winner has to successful deliver a mail message to you
14:48:05 <shapr> truly :-)
14:48:29 <Boegel> hehe
14:48:43 <Boegel> anything yet shapr ?
14:48:52 <Boegel> because GMail isn't working very well yet
14:48:56 <shapr> hoi Jan_w 
14:49:08 <Jan_w> ah, finally, more haskell users :)
14:49:18 <Jan_w> hoi shapr
14:49:20 <shapr> yes, I think you've found a whole nest.
14:49:20 <Boegel> hehe
14:50:04 <Jan_w> i've been trying to install hdirect, but I can't seem to can it to work :)
14:50:22 <Jan_w> has anyone used it on a win32 platform?
14:51:03 <Jan_w> I'd like to link a haskell program to a VC++ program (that is, call a haskell fuction from it)
14:51:13 <shapr> can you use the FFI?
14:51:20 <Boegel> shapr, I'm not getting a bounce...
14:51:26 <Boegel> are you getting anything at all ?
14:51:30 <shapr> oh, weird
14:51:43 <Boegel> but it's probably Gmail's fault :)
14:51:57 <kristnjov> gmail > *
14:52:04 <Boegel> I'll try it with another mail adress...
14:52:14 <Boegel> kristnjov, I have no secrets, so I don't give a shit
14:52:17 <shapr> I wonder if my mail server is horribly broken
14:52:19 * shapr checks his logs
14:52:20 <Jan_w> shawn: what does FFI stand for ? (i'd like to do something like http://www.haskell.org/hdirect/user-5.html)
14:52:27 <shapr> my mail server tends to stay horribly broken :-/
14:52:35 <Jan_w> the problem is, I can't compile hdirect 
14:52:39 <Boegel> so you're not getting any mail ?
14:53:00 * shapr checks
14:53:04 <Jan_w> shapr: sorry, i said shawn
14:53:06 <shawn> foreign function interface
14:53:24 <shapr> doh, I found the bug
14:53:33 <Jan_w> shawn: thanks :)
14:53:36 <shapr> I should suddenly get a lot of email now.
14:53:41 <Boegel> hehe :>
14:53:50 <Jan_w> shapr: yes i think i understand the FFI
14:53:51 <Boegel> is mine in it ?
14:54:55 <Boegel> shapr: the easy way : http://studwww.ugent.be/~kehoste/pc.txt
14:54:59 <shapr> oh that is easy
14:55:16 <Boegel> :o)
14:55:38 <shapr> Jan_w: you want to call from C++ into Haskell?
14:55:41 <shapr> or the other way around?
14:55:44 <Jan_w> I think the problem is the way I'm trying to use hdirect, i've installed cygwin, to be able to use make and gcc=mingw32 to compile hdirect under windows, is that right ?
14:56:02 <Jan_w> shapr: i want to call a haskell fucntion from c++
14:56:08 <shapr> I don't know much about hdirect or win32
14:56:50 <Boegel> shapr: what do you think about the stuff I bought ?
14:56:53 <Jan_w> the problem is, my c++ program is MS VC++, so i have to link to somehow
14:57:10 <shapr> Boegel: looks good. I'd probably go with more ram and drive space, but that's just me.
14:58:00 <shapr> Boegel: I always choose intel cpu and chipset for boxes I build for others. For myself, I get something less reliable, but more fun :-)
14:58:03 <Boegel> my brother in lax chose less because of the price
14:58:21 <Boegel> lax -> law (again)
14:58:37 <Boegel> total price is 1175 euros
14:58:50 <Boegel> without my work for putting it together :p
15:00:02 <shapr> sounsd good
15:00:19 <shapr> it's a full system
15:00:32 <Boegel> idd
15:00:50 <Boegel> I ordered it at an online shop
15:01:00 <shapr> I like your choice of manufacturers, I stay away from no-name components.
15:01:05 <Boegel> and the postal service will deliver it tomorrow (normally)
15:01:23 <Boegel> I got advice from an experienced builder
15:01:33 <Boegel> I couldn't have done it on my own
15:01:36 <Boegel> but I'm learning :p
15:02:07 <shapr> well, all of your component choices are solid, and a good balance between quality and expense
15:03:00 <Boegel> nice
15:03:02 <Boegel> I'm glad :)
15:03:10 <Boegel> how should I start building ?
15:03:33 <Boegel> the other guy told me this: first cpu and memory in motherboard, then motherboard in box
15:03:45 <Boegel> then cables (little ones), then drives, then the rest
15:03:54 <Boegel> and watch out for static :)
15:04:20 <emu> don't forget any necessary jumpers, and of course the heatsink on the CPU
15:05:16 <Boegel> jumpers, like master/slave stuff ?
15:05:20 <shapr> I always put enough of the system together to see it boot before I stick it in the case
15:05:23 <Boegel> or jumpers on the motherboard to ?
15:05:36 <shapr> otherwise, you don't know if you've got something not quite well-enough plugged in
15:05:37 <Boegel> you boot it without being in the case ? :s
15:05:49 <emu> it's possible
15:06:00 <shapr> sure, I've run lots of systems with no case at all
15:06:00 <emu> just place everything carefully on non-static surfaces
15:06:10 <Boegel> and forgetting the heatsink would be killing the machine within an hour or so, right ? :)
15:06:20 <Boegel> hmmz
15:06:22 <emu> depends on the system =)
15:06:37 <Boegel> I think I'll put it in the case anyway
15:06:38 <shapr> Boegel: won't take an hour to kill a system without a heatsink
15:06:46 <Boegel> i think it's safer for my first time
15:06:50 <emu> an athlon will probably die within the minnute
15:06:53 <emu> hehe
15:06:57 <shapr> emu: a few seconds
15:06:58 <shapr> I fried one
15:06:59 <Boegel> shapr: I _really_ shouldn't forget that then :)
15:07:17 <Boegel> hehe, forgot the heatsink ej ? :)
15:07:18 <Boegel> @arr
15:07:19 <lambdabot> I heard andersca is a pirate
15:07:23 <Boegel> again, lolz :p
15:07:26 <emu> Boegel: do you have thermal conductor?
15:07:27 <shapr> the heatsink was there, but the fan froze up
15:08:00 <emu> like arctic silver?
15:08:50 <Boegel> emu, you mean the past for between the heatsink and the cpu ?
15:08:56 <Boegel> past -> paste
15:08:59 <emu> yep
15:09:03 <Boegel> no I don't :s
15:09:07 <Boegel> is that a problem ?
15:09:12 <Boegel> won't it be included ?
15:09:29 <emu> sometiems the heatsink comes with a cheapo thermal pad already applied
15:09:34 <emu> you could get away with that, i suppose
15:09:40 <Boegel> ow :s
15:09:45 <Boegel> but I'll ask that then :p
15:10:06 <Boegel> intel would give a thermal pad instead of thermal conductor ?
15:10:09 <emu> applying a heatsink unit is usually lots of fun, especially the first time you do it
15:10:48 * emu remembers mounting the heatsinks on his dual-athlon
15:11:00 <emu> one of the CPUs consistently runs a few degrees higher than the other
15:11:02 <Boegel> INTEL PIV 530 (3000Mhz) 1024KB Socket 775 800FSB Boxed with cooler
15:11:12 <emu> and I thought I did a better job on the higher-temp one!
15:11:32 <Boegel> :)
15:11:51 <emu> i don't knnow how hot the P4 burns
15:11:51 <Boegel> we'll, you should hear my current pc
15:12:05 <Boegel> the fan on the graphics card is kinda crooked
15:12:18 <emu> usually the manufacturer supplied Heat-Sink-Fan isn't that great, but adequate
15:12:19 <Boegel> when the machine boots, it's like a helicopter :)
15:12:45 <Boegel> he won't heat up his pc to full capacity
15:12:52 <Boegel> it's mainly just for basic stuff
15:13:03 <Boegel> internet, surfing, instant mess
15:13:06 <Boegel> and some games
15:13:14 <Boegel> but not a lot probably
15:13:23 <emu> instant mess indeed
15:13:30 <shapr> the athlon heatsinks come with a thermal pad
15:13:43 <shapr> I prefer the thermal ad over thermal compound
15:13:45 <emu> shapr: that i do remember; i scraped it off with rubbing alc
15:14:15 <Boegel> ow, I won't start with alcohol on my new stuff
15:14:26 <emu> it's the proper way
15:14:32 <Boegel> atleast not the first time
15:14:46 <Boegel> I think using a pad won't cause any problems, 
15:14:50 <emu> yeah
15:15:01 <Boegel> it will just be a little bit louder (fan), am I right ,
15:15:02 <Boegel> ?
15:15:03 <emu> i was particularly concerned about the Athlon MPs enough to get arctic silver and do it myself
15:15:17 <shapr> what speed MPs are you running?
15:15:27 <emu> 2000+
15:15:32 <Boegel> I'll see all that tomorrow
15:15:37 <Boegel> I hope they deliver in the morning
15:15:39 <emu> 1.6GHz? they were newish when I got them
15:15:46 <Boegel> then I have 1,5 day to put it together
15:15:48 <shapr> my dual 1800+ crashes if I don't keep air flowing through the room
15:15:53 <Boegel> nothing hasty
15:16:02 <shapr> Boegel: it'll be fun :-)
15:16:08 <emu> I also now have an Athlon 2500+ sitting next to it, and an Athlon 1800+ at my office
15:16:23 <Boegel> it'll be fun if I don't experience too much trouble
15:16:29 <emu> or maybe that one was also 2000+, XP
15:16:37 <Boegel> cause he's been waiting for quite a while 
15:17:04 <emu> no, i'm  dumb (cat /proc/cpuinfo) 1800
15:17:26 * emu hasn't used Intel for a very long time
15:17:34 <Boegel> why not emu ?
15:17:46 <Boegel> I had a bad experience with Athlon on a laptop last year
15:17:55 <Boegel> it made a whisteling sound
15:17:59 <Boegel> we brought it back
15:18:00 * emu is still bewildered by Athlon laptops
15:18:13 <Boegel> and the manat the shop said there was a factory error
15:18:17 <emu> athlons are power-hungry heat-emitting beasts
15:18:23 <Boegel> 75% of those laptops was coming back
15:18:38 * emu uses a G4 powerbook
15:18:40 <Boegel> my girlfriend wasn't too happy about that
15:18:42 <shapr> yah, does seem strange to put athlons into a laptop
15:18:46 <Boegel> it was her laptop :p
15:19:05 <emu> i get athlons because they're more bang for the buck
15:19:10 <Boegel> http://www.manzonderkop.be/Post/?P_ID=5810 nice :)
15:19:11 <shapr> same here
15:20:29 <Boegel> do you guys know a good website with free wallpapers ?
15:20:32 <Boegel> I need a new one
15:20:50 <stepcut> Boegel: hold on...
15:21:47 <stepcut> http://contests.deviantart.com/linspire/
15:22:20 <stepcut> http://browse.deviantart.com/contests/linspire/
15:22:26 <stepcut> (better link)
15:23:17 <Boegel> ok, let's choose :)
15:23:40 <stepcut> only 4000+ wallpapers for linspire :p
15:23:47 <Boegel> omg, it's all linux stuff ?
15:24:18 <Boegel> I hate those watermarks
15:25:01 <stepcut> haha
15:25:27 <stepcut> there are other non-linux wallpapers
15:25:34 <stepcut> just not in that section
15:25:50 <stepcut> http://wallpaper.deviantart.com/
15:34:49 <Boegel> thx stepcut ! http://www.deviantart.com/deviation/932492/  <- this is the new one
15:34:53 <Boegel> and bookmarked !
15:35:00 <Boegel> I like that abstract stuff
15:36:17 <stepcut> i hardly ever see my background....
15:36:42 * shapr uses ion
15:37:02 * jao too
15:40:24 <Boegel> what's ion ?
15:40:40 <Boegel> I only see my background when i boot, but still
15:40:53 <Boegel> a nice background gives the impression of a fast system
15:40:57 <Boegel> _impression_
15:42:13 * XTL uses ion where he can
15:42:34 * kosmikus tried to use ion a while ago, but it seemed rather extreme ...
15:42:45 <shapr> really?
15:43:00 <XTL> Sadly getting it into FC without root at uni or Irix is something I haven't managed yet
15:43:05 <Boegel> shapr, what's ion ?
15:43:12 <shapr> FC?
15:43:14 <kosmikus> I guess I just didn't understand it ;)
15:43:16 <shapr> ion is a window manager.
15:43:28 <XTL> Fedora Core, what RHL became.
15:43:32 <shapr> oh
15:43:37 <Boegel> http://modeemi.cs.tut.fi/~tuomov/ion/ ?
15:43:41 <shapr> yup, that's it
15:43:51 <shapr> written by tuomov 
15:44:01 <kosmikus> I, for instance, don't want all my windows to resize if I open a new one; at least not always
15:44:07 <XTL> There's no lua in those systems. Maybe I'll try again sometime.
15:44:23 <shapr> kosmikus: huh?
15:44:35 <XTL> Hm. I don't think ion does that. Maybe you think larswm?
15:44:37 <kosmikus> as I said, I probably don't understand it
15:44:56 <kosmikus> or it has changed a lot
15:45:01 <XTL> Ion just adds new windows in the current frame as tabs, splitting the "title bar", right?
15:45:05 <shapr> yah
15:45:13 <shapr> ion is about being full-screen and keyboard-friendly
15:45:29 <XTL> It's pretty swift, too :)
15:45:34 <shapr> I can take a screenshot of my current setup if you want
15:45:42 <kosmikus> I like the keyboard-friendly, that's why I looked at it
15:45:52 * kosmikus hates to use the mouse
15:46:05 <kosmikus> costs so much time
15:46:21 * Boegel thinks it comes in handy sometimes
15:46:31 <kosmikus> I think I should try ion once more
15:46:32 <XTL> I used it at work and it was great. I had a few regular desktops (screen, gabber, vux on one, browser on another) and a few ones that just got split into shell windows
15:46:58 <XTL> Having no pointing device at hand and having to point sucks, too.
15:47:35 <shapr> http://www.scannedinavian.org/~shae/ion2.png
15:48:02 <XTL> At least I haven't learned a neat way to throw filenames or urls from a program to another in an easier way that paint and paste
15:48:29 <shapr> I use 'insert-selection' in xemacs
15:48:36 <shapr> I have it bound to S-y
15:49:13 <shapr> then I can just do C-l S-n S-y to paste the url I'm currently looking at from galeon into #haskell
15:49:29 <XTL> shapr: Well, you have stuff in emacs :)  Does yanking in emacs put stuff to the ....
15:49:38 <shapr> if you set it right, yes.
15:49:58 <XTL> I see. Well, I only said that I hadn't found a way ;)
15:50:11 <XTL> And I don't use emacs either, being a vi addict.
15:50:14 <shapr> ah, ok
15:50:50 <XTL> I often wonder what would be a nice way to work with just a stylus or such.
15:51:03 <shapr> a drafting board interface
15:51:07 <shapr> I've already thought about that
15:51:29 <shapr> they do exist
15:51:43 <shapr> but quite expensive
15:51:57 <XTL> I've used a few palmtops and other touch screens etc.  It seems to require either something like the touchpads in laptops or a bit different gui system.
15:52:03 <shapr> since they're essentially a standard desk with a touchscreen covering the whole top
15:52:39 <XTL> shapr: That sounds neat. I've only seen some small-ish one with a keyboard marked on it
15:53:03 <shapr> screens that large are expensive
15:53:12 * XTL goes to shower
15:53:23 <XTL> There should be vector displays...
15:53:47 <shapr> kosmikus: if you try ion again, I'd be happy to help you set it up right.
15:54:54 <XTL> I also found it nice to make ion use those pc win keys for windowing stuff.
15:55:26 <XTL> I guess I ended up getting a compose key and some others at the same go. I've forgotten already. I'll probably get to try again after I get things set up again here.
15:55:44 <kosmikus> I tend to use those in other wms as well
15:57:33 <kosmikus> anyone tried ion3 -- is it usable?
15:57:41 <shapr> yes
15:57:49 <jao> kosmikus, i use it daily
15:58:26 <shapr> I think tuomov said the major changes were a reorganization of the class hierarchy
16:00:06 <jao> it adds a couple new workspaces too
16:01:30 * kosmikus types "emerge ion3" and goes to bed
16:05:49 <tuomov> no, there's no major class hierarchy changes; I just did some unification
16:06:30 <tuomov> but the config files and exported functions are a bit different, and there are quite a few new features
16:08:43 <Boegel> did you write ion tuomov ?
16:08:56 <tuomov> most of it
16:09:26 <Boegel> damn, that must be a lot off work
16:09:31 <Boegel> is it a full time job ?
16:10:04 <tuomov> not at all, and I've been working on it for 6 years now, starting to count when I first started to code pwm
16:16:39 <Boegel> and do you have a job next to it then ?
16:16:50 <tuomov> not anymore
16:16:55 <Boegel> only ion ?
16:17:18 <tuomov> more like only idling..
16:17:23 <Boegel> :)
16:17:36 <tuomov> well, I wrote 'riot' last week..
16:18:23 <Boegel> what's that ? (I don't use ion)
16:18:55 <tuomov> http://iki.fi/tuomov/riot/
16:20:28 <tuomov> other than that, I'm just thinking what I want to do when I'm big..
16:22:03 <jao> tuomov, has the idea of making ion haskell-aware crossed your mind?
16:22:52 <tuomov> I've thought of it
16:23:16 <jao> i'd love that
16:23:20 <tuomov> it shouldn't be that big a job
16:23:26 <tuomov> replacing the luaextl.c code
16:23:52 <tuomov> but ion relies quite much on Lua's tables, and since haskell is strongly typed, the api would be rather inconvenient
16:23:58 <XTL> Riot looks interesting. I wonder how the UI was done from Haskell
16:24:37 <jao> tuomov, hm. that's a pity.
16:24:44 <tuomov> and, well, there are the few files with lua routines that are quite essential
16:25:09 <tuomov> so it's not really feasible without too much work
16:25:54 <jao> i see
16:27:17 <tuomov> although.. it might be quite easy to call the lua side..
16:27:38 <jao> oh?
16:29:17 <Boegel> tuomov, how did you handle the GUI for Riot in Haskell (like XTL wonders too)
16:29:52 <tuomov> I took the curses bindings from ginsu and then just wrote my code
16:30:04 <tuomov> had to tweak them a little to get SIGWINCH handled properly etc.
16:30:58 <tuomov> then I just have a status structure that is passed between event handlers
16:31:53 <Boegel> I don't understand anything of it, but fine, atleast XTL got his answer
16:31:58 <Boegel> I'm going to sleep
16:32:06 <tuomov> and it's not really a gui..
16:32:10 <Boegel> have to be awake for pc building tomorrow
16:32:23 <Boegel> bye everyone
16:37:36 <XTL> I should be able to get up for some lectures in the morning
17:35:27 <danols_> hey
17:35:33 <danols_> does haskell have webcam support ?
17:35:53 <danols_> as in a library ?
17:36:50 <danols_> or if there is another way i'm all ears
17:37:00 <dons> there's plenty of graphics libraries. maybe you'd need to write a specific binding if you wanted some low-level interface. otherwise file or binary io would be fine, no?
17:37:34 <danols_> well I have an asg to do, I hope I can have it done in haskell, I need to track a red dot, using a webcam
17:37:51 <dons> what type of data does the webcam spit out?
17:37:54 <danols_> dons use it as a sort of mouse device
17:38:18 <danols_> dons i don't know, i'm just doing my initial resarch right now
17:38:31 <dons> i think you'll have to get hacking, but it shouldn't be too hard to write a binding to the C interface to the webcam
17:38:49 <danols_> dons could you explain in more plain english terms ?
17:39:20 <dons> the webcam probably has a C interface already. a Haskell library will access the device through these functions
17:39:37 <dons> you'll have to use the foreign function interface
17:39:50 <danols_> I see
17:40:07 <danols_> when you mean by C interface you mean the dll ?
17:41:25 <danols_> dons sorry if I sound like a numpty, but I do not have much pratical programing experience excpet for the small programs i made myself
17:42:24 <dons> you can write this code in haskell. you'll need more info on the interface to the webcam first
17:42:56 <danols_> hmmm what about using directshow or something like that
17:43:07 <dons> i have no idea
17:43:36 <danols_> the IO library, what did you have in mind when you first suggested it ?
17:43:58 <dons> well, on unix at least you can just open /dev/webcam, and get back some data
17:44:09 <danols_> yeah that's what i thought you meant
17:44:12 <danols_> crap not that easy on windows
17:44:38 <dons> so you need to find out what the C interface is, and go through that
17:45:02 <danols_> what do you mean by C interface ? a C library for it already ?
17:45:07 <dons> so you're really looking for a haskell binding to a windows webcam device
17:47:02 <danols_> dons http://sourceforge.net/projects/opencvlibrary/ i would have to bind haskell to that library ?
17:48:39 <dons> write a C program that accesses the device somehow, once that works, write a haskell binding using the ffi
17:48:54 <dons> if you can go through this library, all the better
17:49:06 <danols_> dons i see
17:49:18 <danols_> dons just curious can it be not written in haskell all together ?
17:49:58 <dons> yes, it could be. but since you don't know how to access the device at all, starting with a C test program seems reasonable
17:50:36 <np_hard> hear hear
18:13:51 <danols_> is there a webcam library for haskell ?
18:14:00 <danols_> i've been trying to find one on the net but no luck
20:36:50 <shrimpx> does hudak's SOE stuff run on ghc?
21:04:03 <SyntaxLaptop> shrimpx: it should porbably, but I'm not sure.
21:26:50 <Helicopter> ocaml is reported to have good results in performance, but how much of that high performance code is in the imperative style, does anyone know ?
22:37:19 <Pseudonym> Posession is nine tenths of the law, so they say.
22:37:30 <Pseudonym> But Sturgeon's Law states that 90% of everything is crap.
22:37:43 <Pseudonym> There's probably a corollary in there somewhere.
22:40:55 <ibid> that what you own is 0.9^2 = 81 % crap? ;)
22:43:31 <Pseudonym> What you own is _legally_ 81% crap.
22:43:53 <ibid> but the laws cancel out!
22:44:17 <ibid> you have "of the law" on the one hand and "but sturgeon's law" on the other
22:45:15 <ibid> hm, maybe it should've been 0.9 / 0.9 = 100 % crap ;)
22:45:26 <Pseudonym> True!  If 90% of the law is crap, then posession is only 9% moral.
22:53:26 <musasabi> morning
22:54:19 <Helicopter> night
23:42:47 <dblhelix> @yow
23:42:48 <lambdabot> I once decorated my apartment entirely in ten foot salad forks!!
23:42:51 <adept> good(?) morning(?)
23:43:23 <dblhelix> adept: yep, it's morning here, and for now I've no reason to assume it won't be a good one
23:43:53 * adept got drenched in the raim :(
23:43:58 <dblhelix> adept: and a good morning to you, ofcourse
23:44:03 <adept> !time dblhelix
