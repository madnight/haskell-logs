01:45:58 * Lemmih wonders when wxHaskell will be usable.
01:56:40 <musasabi> How much overhead in terms of code does a newtype with deriving specs generate with GHC?
01:56:44 <musasabi> newtype CSS = CSS String deriving (Show,Eq,Data,Typeable)
01:58:19 <musasabi> kig: tervetuloa ^_^
01:58:57 <kig> musasabi: mooi :]
01:59:21 <musasabi> tajusit vihdoin haskelin olevan lopullinen ratkaisu?
02:00:24 <Lemmih> Hello Marvin--
02:02:55 <stefan__> musasabi: I think you can answer this by examinating the generated instance declaration; of course you can't really see this declararion, but you can imagine what it looks like; I think the actual code generated will not perform worse than such a imaginary declaraion
02:03:05 <kig> musasabi: jaa-a, kirjottais siina ensiks jonkun ohjelman, niin voisi sanoa jotakin aiheesta
02:03:21 <stefan__> show (CSS cs) = "CSS " + show cs
02:03:31 <Marvin--> morning
02:03:54 <musasabi> stefan__: of course but does it get eliminated when compiling optimized code or not - that is the question...
02:04:01 <dons> musasabiD[D[D[D[D: quick test. compile the module with -ddump-stg and count the lines of code emitted. with derivings: 379 lines, without: 6 lines
02:05:02 <dons> and if you don't need generics or typeable: 67 lines
02:05:18 <dons> so you get a lot more code if it needs to derive Typeable or Data
02:05:22 <musasabi> of course show can be eliminated with using "instance Show where show = gshow" for the top-level types - the only problem remains that I'd have to specialize gshow for some types.
02:06:03 <musasabi> dons: well the newtype exists only as a boilerplate selector. (or I am thinking about using a strategy like that)
02:06:44 * Marvin-- swears at dh_installdocs
02:08:29 * musasabi mutters about existentials making automatic deriving hard.
02:08:43 <dons> interesting. in terms of C code you get 40/453/2427 for no deriving, Eq+Show, all deriving.
02:09:48 <dons> it is so nice getting code written for you
02:14:33 <musasabi> yes, only the code is in this case too inlined for my taste..
02:16:30 <dons> and with the new C-- backend we get 65/473/2559 lines of C--, which is a little more verbose than C (macros have been expanded)
02:16:30 <musasabi> because if I have newtype Foo = Foo String deriving (...) for 30 types that is clearly not a very scalable solution.
02:18:31 <musasabi> Why can't eq be defined the same for all newtype X = X B deriving(Eq) ? that is why does the code get multiplied?
02:23:49 <dons> you only get 1 extra line of stg code if you add deriving Eq to your example:
02:23:50 <dons> T.$fEqCSS = NO_CCS GHC.Base.:DEq! [GHC.Base.==1 GHC.Base.$s$dm/=];
02:25:55 <dons> which seems to get turned into references to GHC.Base.==
02:26:11 <dons> no new Eq code seems to get generated
02:28:53 <musasabi> Each eq seems to generate 20 lines of C code here.
02:29:23 <musasabi> with the debian haskell ghc package and -O3.
02:29:24 <dons> I'm looking at the C-- backend = a lot more readable. 
02:29:36 <musasabi> that is the cvs one.
02:29:52 <dons> If a have a data XXX = XXX then I get a fair bit of real eq code created, but not for newtype
02:30:54 <dons> we have a -O3 now?
02:31:16 <musasabi> not really.
02:31:27 <dons> doesn't change the generated code on my end
02:32:03 <musasabi> dons: try adding two newtypes to the file.
02:33:07 <dons> just checked == generation on 6.2.1. Same code generated as in the C-- backend. i.e. no actual function, but a ref to EC_(GHCziBase_eqString_closure);
02:34:29 <dons> if I add more newtypes, I get more refs to the Eq code for the basic types, but no new code.
02:34:42 <dons> I pronounce deriving Eq for newtypes to be cheap :)
02:35:24 <dons> and C-- to be a lot more readable than Abstract C. hehe
02:36:27 <musasabi> http://youzen.b2.fi/~musasabi/results.txt
02:37:13 <musasabi> dons: look at the last number and see if you can replicate those results.
02:37:29 <dons> what kind of output are you looking at?
02:37:49 <dons> is it -ddump-absC ?
02:38:05 <musasabi> dons: ghc -O3 -fglasgow-exts -C tt.hs && wc -l tt.hc
02:39:24 <dons> I don't understand the two no-eq/eq columns.
02:41:50 <musasabi> dons: I attached a short explanation.
02:41:55 <musasabi> (can write more if you want)
02:42:46 <dons> ah. you actually remove some of the types. that I didn't guess :)
02:43:09 <musasabi> basically no-eq: number of "newtype <Foo> = <Foo> String" and eq: number of "newtype <Bar> = <Bar> String deriving(Eq)"
02:44:21 <musasabi> my problem is understanding why I suddenly go to an eq cost of 20 lines instead of 5 when deriving 2 Eq?
02:45:04 <musasabi> and the cost appears to be 20 lines after that.
02:46:37 <dons> yep
02:46:40 <dons> see http://www.cse.unsw.edu.au/~dons/results.txt
02:46:54 * Marvin-- messes around with his gtk2hs packages, oh man this is so going to break
02:47:06 <dons> adding 1 Eq gave me 8 extra lines of code, 2 Eqs meant another 30
02:48:30 <musasabi> dons: seems we have the same behaviour.
02:48:42 <dons> hmm. we actually get a new function generated for the 2nd Eq
02:48:47 <dons> but none for the first Eq
02:49:09 <dons> T_zdfEqBar_entry()
02:49:56 <dons> you can look for Eq or zeze in the output. (zeze is Z-encoding of "==")
02:50:38 <dons> ah! EqBar actually uses T_zdfEqFoo_closure;
02:51:42 <musasabi> added results for 3 types
02:53:23 <dons> the extra code doesn't do the Eq function though, it is just setup code to call GHC.Base.==
02:53:33 <musasabi> yes :-(
02:53:46 <musasabi> (the 3 types results are in line with the earlier ones)
02:54:15 <Marvin--> *argh* the gtk2hs clean/distclean targets are way too volatile and stateful
02:54:42 <dons> yeah -- exactly the same code gets generated for each newtype
02:54:54 <dons> they just setup some regs, and jump to the Eq for the first newtype
02:55:23 <dons> would you usually have all the newtypes having the same structure, like this?
02:55:59 <dons> Marvin--: re gtk2hs clean: I bitched to Chilli about it :)
02:56:16 <Marvin--> dons: gtk2hs /= gtk+hs
02:57:28 <dons> oops. that's right :}
02:57:45 <Marvin--> gtk2hs is Axel Simon, Jens Petersen, Duncan Coutts and others
02:57:50 <dons> gtk+hs has a weird clean script as well. hehe
02:58:40 <Marvin--> gtk2hs has a horribly complex set of .mk files and it seems like depending on when I press ctrl-c during the build, make clean will do different things
02:58:54 <Marvin--> which of course plays havoc with my generation of a proper .diff.gz for Debian
02:59:13 <dons> urgh!
03:00:08 <Marvin--> and I'm not sure where to even begin to debug that
03:00:26 <Marvin--> of course, running debuild to completion twice works :-/
03:04:22 <musasabi> dons: yes, with boilerplate code.
03:04:37 <musasabi> It uses type based selection...
03:06:24 <dons> maybe you could query spj about this?
03:10:56 <dons> though the cost is very small. extra newtypes generates 24 extra asm instructions.
03:12:03 <dons> 25 if you use -fvia-C
03:13:46 <dons> sorry. 21 with -fasm, 25 with -fvia-C
03:14:22 * dons says "no more asm"
03:15:44 * Marvin-- looks at his build tree and build log and boggles
03:16:09 <Marvin--> oh! dh_clean -k, phew, I thought I was going mad
03:22:14 <musasabi> dons: true, maybe I should just live with it.
03:23:16 <dons> or hack the ghc code generator.. :)
03:44:48 <Igloo> marvin: Running configure before clean often makes things better
03:46:14 <Marvin--> Igloo: yeah, I suppose
03:47:10 * Igloo doesn't tend to do that in clean tatgets, just do it by hand when necessary. I keep thinking maybe I should, though.
03:52:59 <Marvin--> what the ***?!
03:57:32 <Marvin--> oh bother, this is completely b0rk
03:57:53 <Marvin--> the gconf lib uses hierlibs but they're installed as if they're flat
05:29:57 <No-BAnN> hi all
05:45:33 <musasabi> hello
06:24:08 * Igloo mutters at python
08:00:53 <goron> test = f a ++ g a where a = expensiveComputation Will a be calculated once or twice? 
08:03:29 <musasabi> it should be computed once.
08:06:49 <ibid> likely once
08:07:10 <Philippa> once if the optimiser's any good...
08:07:19 <Philippa> or even if it isn't particularly
08:09:38 <Igloo> Grr, how can there be no sane way to kill a process once it and all its children have used more than x CPU seconds?
08:13:51 <Marvin--> Igloo: ulimit?
08:14:53 <Igloo> That calls setrlimit, right? That gives each process x seconds, and you can't find out if one of them was killed for exceeding it
08:15:18 <Marvin--> hmm... you could catch SIGXCPU, couldn't you?
08:16:05 <Igloo> I wouldn't even see it - a child of the thing I call would (AIUI)
08:16:35 <Marvin--> well, yeah
08:16:55 <goron> Philippa: And is the optimizer of GHC any good?
08:17:59 <roconnor> wow, gpdf suck.  For now on, it's xpdf for reading papers on functional programming.
08:21:07 <roconnor> goron: lazy evaluation requires that a be computed only once.  I'm not sure if the Haskell specification requires that the execution be lazy, or just specifies that it has the result be the same as normal-order evaluation.
08:25:27 <Philippa> goron: at that kind of level GHC's optimiser's pretty good - I just wouldn't want to try the code duplication version
08:25:42 <roconnor> goron: I fully expect that GHC will evaluate a only one.  If you write test = f expensiveComputation ++ g expensiveComputation, I would still fully expect GHC to evaluate expensiveComputation only once.
08:26:01 <Philippa> you can find out which it does using Debug.Trace
08:26:08 <roconnor> You can actually check the number of times expensiveComputation is computed by inserting Debug.Trace.
08:26:18 <Philippa> one of those guilty little modules you're supposed to get used to being without before you hear about :-)
08:26:19 <roconnor> Yeah, what Philippa said.
08:27:07 <Philippa> I use it, but only when I'm doing really hairy stuff...
08:27:07 <goron> Never used Debub.Trace before. I think I will use it in some time. Thanks.
08:27:13 <roconnor> that duplicate version may require some flag like -O2 to be used.
08:27:15 <goron> b-.g
08:27:31 <goron> b->g
08:27:40 <Philippa> roconnor: I think -O2 only affects what gcc does afterwards
08:27:46 <Philippa> though I could be wrong
08:27:47 <roconnor> goron:s/Debub/Debug
08:27:51 <Igloo> I don't think GHC would share the result in that case as it's a time/space tradeoff, so it'll probably do the obvious thing
08:27:56 <roconnor> Philippa oh
08:27:58 <Igloo> I'm really guessing, though
08:30:01 <Philippa> Igloo: given the horror stories I've heard about space usage that were cured with a single seq, I'm not so sure...
08:30:42 <Philippa> the space loss per time you do that isn't exactly huge most of the time
08:31:01 <Philippa> but I've decided FiniteMaps must have really weird behaviour :-)
08:32:13 <roconnor> Igloo: I figured GHC implements the maximal subexpression thingy
08:33:01 * roconnor doesn't see how extra space is incurred.
08:33:22 <Philippa> with FiniteMaps, or the subexpression thingy?
08:33:43 <roconnor> with the subexpression thingy
08:33:44 <goron> roconnor: I already did "b->g". This has the same semantics as /s/b/g
08:34:14 <roconnor> goron: s/b/g would replace Debub with Dugub.
08:34:16 <Philippa> there's not going to be a lot until f or g starts evaluating the thunk and walking along the resulting data structure...
08:34:37 <Philippa> goron: I find *debug is easier :-)
08:34:49 <goron> roconnor: I know, but you are not Posix compliant.
08:35:08 <goron> roconnor: At least, that's what I think :)
08:35:13 <Marvin--> s/b/g/2
08:35:49 <roconnor> Philippa: I don't follow.
08:36:34 * musasabi usually does not care untill the profiler tells me it is something I should care about.
08:37:28 <Philippa> roconnor: expensivecomputation returns a list [thunk]. Suppose f is evaluated first and goes through large quantities of it, then g only wants the first bit - the GC doesn't find this out until g terminates
08:38:07 <Philippa> this isn't too bad until you're doing a lot of similar stuff and you could've chucked half the data away by now at any one point...
08:39:05 <roconnor> but f is going to need that space anyways.
08:40:55 <Philippa> sure. But g isn't
08:41:26 <Philippa> it starts getting nasty when part of the expensivecomputation's used in something state-like that persists for ages, even worse when there's little bits of similar expensivecomputations
08:41:32 <roconnor> so it is a matter of when space is freed, rather than how much is used.
08:42:08 <Philippa> in that situation you may well be able to throw most of one away at any one time...
08:42:41 <Philippa> it's not if you can pipeline your space usage
08:47:33 <Igloo> It can be how much is used too
08:48:17 <Igloo> e.g. (last expensive_long_list, last $ init expensive_long_list) is constant space without sharing
08:49:58 <roconnor> with -O2, expensivecomputation is evaluated once even if it appears twice.
08:51:45 <roconnor> How it that constant space without sharing?
08:54:18 <roconnor> oh, right, I misunderstood what init did.
08:55:31 <roconnor> would ghc really do last expensive_long_list in constant space?
08:57:02 <Igloo> Assuming expensive_long_list produces each element in constant space, yes
08:57:45 <roconnor> would ghc really do last $ init expensive_long_list in constant space?
08:58:41 <roconnor> would ghc really do (last . init) expensive_long_list in constant space?
08:59:49 <Igloo> It should. I haven't tested it.
09:00:20 <roconnor> interesting
09:05:56 <roconnor> ghc only does these in constant space because the code is being optimized?
09:07:01 <Igloo> no
09:07:05 <roconnor> So the subexpression optimization is `colliding' with this list memory optimization thing.
09:07:58 <roconnor> Igloo: really?  It strikes me that the lazy operational semantics of last expensive_long_list would require O(N) space.
09:08:17 <roconnor> Igloo:  But that is really just my intuition at work.
09:08:41 <Igloo> last [x]          = x
09:08:41 <Igloo> last (_:xs)       = last xs
09:08:55 <Igloo> Suppose we have some list we want to find last of
09:09:37 <Igloo> we get the first element x. We look to see if there is another element. There is. We commit to the second case and throw away x, returning last of the empty list
09:09:45 <Igloo> The GCer then frees x
09:10:03 <Igloo> Repeat until we find there is no next element, at which point we return x
09:10:40 <roconnor> Igloo: okay, I see that now.
09:10:58 <Igloo> The init case is just a slightly more complicated variation, and needs us to have 3 elements rather than 2 before we can throw the first one away
09:15:14 <roconnor> If only the redexs were evaluated simultaneously
09:15:50 <roconnor> well, I suppose the thing to do is to write your own lastTwo function.
09:16:08 <Igloo> But then suppose (last . init) is another_expensive_function and that laziness means its result will never be needed
09:17:12 <roconnor> On the plus side, I suppose in a strict language the problem is much worse.
09:54:27 <xkb> I got my "read a file in Clean" program running
09:54:53 <xkb> I needed to get used to the World passing style
09:55:33 <xkb> Its also possible to use monads for it.. the underlying unique type system is quite nice
11:50:25 <stepcut> whee!
11:50:50 <basti_> yep.
11:52:08 <Riastradh> Indeed.
11:52:20 <stepcut> what is epigram?
11:52:47 <basti_> a proof assistant.
11:52:52 <basti_> and a programming language
11:53:07 * stepcut looks at the webpage
11:53:29 <Riastradh> A dependently-typed programming language.
11:53:41 <stepcut> is it intended to be practical, or just researchy?
11:54:27 <kig> newbie question; how would i go about writing a blog-like webapp in haskell? needing some project to try the language out with..
11:54:40 <Riastradh> See WASH, kig.
11:55:09 <edwinb> stepcut: researchy, primarily
11:55:44 <stepcut> kig: ask shapr when he is around, I think he has two different blogs written in haskell, also, I think there might be an example one referenced from the haskelldb website
11:57:11 * stepcut looks for ideas to steal from epigram
11:57:26 <basti_> steal like how?
11:58:07 <stepcut> basti_: to use in xl (a different experimental language I have some influence over)
11:58:24 <basti_> do you have an url?
11:58:46 <Smerdyakov> Bah. Coq is the king of such languages/things. :P
11:59:04 <basti_> hehe
11:59:09 <stepcut> basti: not really, there are only some mailing list posts
11:59:17 <basti_> oh
11:59:21 <stepcut> basti: that's why it is not to late to steal ideas :)
11:59:35 <basti_> ;)
11:59:53 <Smerdyakov> stepcut, why are you working on this new thing in the first place?
11:59:54 <stepcut> xl is a bit like a spreadsheet, and a bit like make/prolog
12:00:15 <basti_> .uhm.
12:00:36 <stepcut> Smerdyakov: well, it is not my idea, but I will have to use the end product, so I want to be happy with it 
12:01:03 <Smerdyakov> stepcut, your company is developing it, or what?
12:01:24 <stepcut> Smerdyakov: no, it will be used in the future for some of the internals of tla
12:01:40 <Smerdyakov> tla?
12:01:59 <stepcut> as in the arch revision control program
12:02:22 <Smerdyakov> I don't know anything about arch, but why would dependent types factor into this?
12:02:40 <stepcut> Smerdyakov: dunno yet, I have not read about dependent types yet
12:03:03 <Smerdyakov> stepcut, dependent types are cognate for a complete formalization of logic. I doubt you want that.
12:03:07 <kig> Riastradh, stepcut: thanks, reading those
12:03:30 <edwinb> There's other interesting things to steal from Epigram though.
12:03:38 <edwinb> The interactive type directed editing is quite nifty, I think.
12:03:46 <stepcut> edwinb: exactly!
12:04:00 <edwinb> I mean, dependent types are nifty too, but they're not for everyone ;)
12:04:32 <edwinb> And dependent types are used to some extent to direct that editing, whether or not your program is dependently typed.
12:06:07 <stepcut> xl is a bit different than most popular languages in that it does not have the halting problem. All xl programs terminate (and can be statically analyzed to find out after how long they will terminate)
12:07:38 <edwinb> how do you know they all terminate? Are they structurally recursive or similar?
12:07:54 <edwinb> (you'd have that in common with epigram too...)
12:08:22 <edwinb> I am curious about xl now...
12:08:31 <stepcut> edwinb: yes, currently there is no recursion at all, but we are investigating adding structural recursion, or at the very least, things like map, fold, etc
12:09:42 <stepcut> obviously, not all programs can be expressed in xl, but (hopefully) all *meaningful* programs in the context it is used can be expressed
12:10:11 <basti_> uh.
12:10:14 <edwinb> Sure - I never want to write a non-productive, non-terminating program for a start ;)
12:10:29 <edwinb> How much do you know about inductive families and their elimination rules?
12:10:34 <stepcut> one use of xl is for advanced config files -- one would hope that evaluating a config file will always terminate 
12:10:40 <edwinb> indeed
12:11:02 <stepcut> edwinb: I currently only know a little about the inductive families -- working on learning enough :)
12:11:18 <edwinb> Yes, I think they'll be useful to you, since they are essentially folds.
12:11:25 <edwinb> Sorry, elimination rules, that is.
12:11:50 <stepcut> edwinb: you probably also don't *want* to write programs with type errors, but if the language/compiler will let you, then you probably will
12:12:26 <edwinb> Absolutely.
12:18:38 <stepcut> some areas that xl (or xl derivatives) might work well in are, config files, templates, and possible a replacement for make
12:22:53 <stepcut> and in the case where xl is used as a config file language, it would be nice if it where self-documenting and had pretty printer rules, such that you automatically create high level guis for changing the config file settings..
15:19:53 <No-BAnN> hi folks
15:22:36 <jadrian> hi
15:24:26 <No-BAnN> I program in delphi I need to understand a short code coded using haskell in order to translate it, can you help me?
15:33:38 <No-BAnN> anyone can help me plz
15:33:54 <Cale> No-BAnN: perhaps
15:34:01 <Cale> could you paste the code somewhere?
15:34:07 <Smerdyakov> (Not the channel)
15:34:20 <Cale> Use http://www.haskell.org/hawiki/HaskellIrcPastePage
15:36:41 <No-BAnN> ok
15:36:43 <No-BAnN> done
15:37:36 <Cale> whoa, what is this supposed to do?
15:38:07 <Cale> it's a parser for some sort of code?
15:38:34 <No-BAnN> it's supposed to get a string i think X and check wheteher it's the right authentification or not
15:38:45 <Smerdyakov> Cale, this is part of an online game, believe it or not.
15:38:54 <Smerdyakov> Cale, No-BAnN is cheating by asking for help here.
15:39:05 <Cale> ah
15:39:09 <No-BAnN> just wanna understand
15:39:12 <No-BAnN> not cheating
15:39:17 <Cale> also, the type signatures have an obvious flaw
15:39:33 <Smerdyakov> No-BAnN, I believe any help understanding is cheating, right?
15:39:48 <Cale> how important is the game?
15:39:55 <arjanb> No-BAnN: why not take some time to learn Haskell?
15:40:32 <No-BAnN> this is what i'm doing, I like haskell structure
15:41:16 <No-BAnN> problem is: i can't understand the digit stuff
15:41:16 <Smerdyakov> No, when you have a particular assignment, getting step-by-step help with it is not "learning."
15:41:18 <Smerdyakov> It is "cheating."
15:41:36 <No-BAnN> i don't wanna step by step
15:41:44 <Smerdyakov> Getting any help specific to the assignment is cheating.
15:41:54 <No-BAnN> :)
15:41:56 <Cale> "digit" is probably a parser which parses a digit
15:41:58 <Smerdyakov> Getting help on general concepts is not. (Using the assignment to illustrate the concepts is)
15:42:19 * stepcut` starts to get the hang of haskells callCC
15:42:58 <Smerdyakov> No-BAnN, trust us: going over this example is a poor way to learn Haskell.
15:43:01 <Cale> whoever wrote that code clearly did not want people to have an easy time understanding it
15:43:11 <Smerdyakov> No-BAnN, if you want to learn Haskell for its own sake, use a tutorial.
15:43:45 <Cale> what is the online game that this is a part of?
15:44:09 <No-BAnN> i get tutorials about haskell in general and about parsing
15:44:46 <Smerdyakov> No-BAnN, I don't know what you mean.
15:45:32 <Cale> Smerdyakov: are you running part of the game, or involved with it?
15:45:48 <Smerdyakov> Cale, no. People ask about it here on a regular basis.
15:45:51 <Cale> oh
15:46:06 <Cale> this is the first that I've seen it
15:46:26 <Smerdyakov> I don't remember what it's called or where it is found.
15:46:35 <Cale> mod-x.co.uk
15:46:41 <Cale> apparently
15:46:54 <No-BAnN> i understand that it takes a string and check his length, if 48 then ignore it
15:47:13 <No-BAnN> the only thing i understand
15:49:50 <Cale> that's not right
15:50:06 <Cale> have you actually tried running the code?
15:50:13 <No-BAnN> sure
15:50:20 <No-BAnN> it'as full of bugs 
15:50:51 <No-BAnN> i downloaded hugs
15:50:51 <Cale> easy to remove bugs :)
15:53:05 <No-BAnN> the code was using sum
15:53:20 <No-BAnN> i change it with foldr(+) 0
15:54:38 <Cale> why?
15:54:58 <No-BAnN> because in hugs it gives error :( using sum
15:57:36 <jadrian> what is the error?
16:02:52 <stepcut`> is there some scope issue with throwDyn/catchDyn, it seems like my dynamic execption gets turned into a normal exception if my catchDyn is in main and the throwDyn is nested down a few function calls (and hence, my catchDyn does not catch anything)
16:16:47 <roconnor> stepcut: Is Haskell's callCC actually adequate for use?
16:18:56 <stepcut`> roconnor: dunno yet :)
16:22:01 <roconnor> I fear without the use of rank-2 polymorphism it won't be
16:22:13 <roconnor> However, it might be adquate for most common cases.
16:22:26 <roconnor> not that I've ever used callCC
16:23:15 <dons> is the callCC you're looking at the one in ContT.hs ?
16:23:17 <dons> callCC f    = C (\c -> f (\a -> C (\_ -> c a)) $$ c)
16:23:47 <roconnor> I believe that is right
16:24:57 <stepcut`> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control.Monad.Cont.html
22:04:29 <Bimba> www.forumfree.net/index.php?c=8957
22:04:31 <Bimba> :D
