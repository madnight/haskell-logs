08:49:12 <arjanb> it's quiet here
08:49:28 <thebug> gollum gollum
09:09:27 <musasabi> niuh
09:45:55 <dxlvi> @type getChar
09:45:55 <lambdabot> getChar :: IO Char
09:46:17 <kaol> @type id
09:46:18 <lambdabot> id :: forall a. a -> a
09:46:29 <dxlvi> :-(
10:05:09 <stefan__> dxlvi: what's wrong with getChar and id??
10:09:51 <norpan> who knows
12:55:25 <basti_> hi
12:56:00 <musasabi> hello
13:03:25 <psi> i'm trying to use the function fromInt (as described in my haskell book), but hugs says the Undefined variable. why? :S
13:03:48 <stefan__> @index fromInt
13:03:48 <lambdabot> bzzt
13:04:10 <Riastradh> @info fromIntegral
13:04:10 <stefan__> psi: don't you mean fromInteger?
13:04:11 <lambdabot> -- fromIntegral is a variable
13:04:11 <lambdabot> fromIntegral :: forall a b. (Integral a, Num b) => a -> b
13:04:16 <Riastradh> @info fromInteger
13:04:17 <lambdabot> -- fromInteger is a method in class Num
13:04:17 <lambdabot> fromInteger :: forall a. (Num a) => Integer -> a
13:04:52 <psi> stefan__: the book (the craft of functional programming, 2nd edition) says fromInt
13:05:31 <stefan__> psi: don't have the book here ... what does it say about its type?
13:05:45 <psi> Int -> Float
13:06:19 <stefan__> psi: use fromIntegral instead
13:06:56 <stefan__> @type (fromIntegral (5 :: Int)) :: Float
13:06:57 <lambdabot> (fromIntegral (5 :: Int)) :: Float :: Float
13:07:32 <psi> okay, but, is the book wrong?
13:07:42 <psi> or is it hugs
13:09:18 <stefan__> not sure ... it's seems the standard libraries do not define fromInt ... so, in a sense, you might want to consider the book wrong
13:10:05 <psi> ok
13:10:15 <psi> i just noticed something weird, though
13:10:30 <psi> fromInt works when i start hugs from the shell, but not through emacs
13:11:28 <stefan__> ehm, I don't use Hugs myself, but I can imagine certain command-line switches causes it to load a special version of the Prelude
13:11:35 <stefan__> just guessing here
13:13:59 <psi> right... i'll just forget about fromInt for now and use fromIntegral :)
15:38:32 <basti_> do we have ebola?
15:39:03 <shrimpx> i don't
15:39:45 <basti_> people are just dying away
15:40:49 <shrimpx> not really... mostly joining and quitting
15:41:29 <shrimpx> aw
15:41:45 <basti_> :P
15:41:55 <shrimpx> yay
15:42:01 <No-BanN> hi
15:42:39 <No-BanN> I downloaded hugs for windows and it says Char.hs Char undeclared type or something like that :(
15:43:42 <shrimpx> what are you trying to run?
15:46:16 <No-BanN> a code in file into hugs for windows
15:49:08 <No-BanN> sorry
15:56:54 <No-BanN> how can I read a file line by line using haskell?
15:57:43 <Riastradh> @info hGetLine
15:57:49 <Riastradh> @info IO.hGetLine
15:57:50 <lambdabot> -- GHC.IO.hGetLine is a variable
15:57:50 <lambdabot> GHC.IO.hGetLine :: GHC.IOBase.Handle -> IO String
16:00:31 <No-BanN> thx
17:46:37 <heatsink> While reading the standard library documentation, I noticed that Data.Unique.newUnique is an IO type
17:47:08 <heatsink> This forces calls to newUnique to be sequenced; but the order in which newUnique is called does not matter
17:49:47 <heatsink> Couldn't newUnique be called lazily like any pure function?
17:52:33 <emu> um, does newUnique return the same value every time?
17:52:52 <heatsink> no
17:52:55 <emu> well then
17:54:34 <heatsink> but its value is independent of any IO operations that are performed before or after the call
17:55:19 <emu> it can't be a pure function though
17:55:28 <heatsink> true
17:55:39 <heatsink> but it doesn't need to be sequenced
17:55:47 <heatsink> monads sequence operations
17:55:53 <emu> it needs to be in a monad
17:56:25 <Riastradh> How could it return a unique value every time if it were a pure function?
17:56:40 <heatsink> yes, it is impure
17:56:50 <Cale> I think heatsink means that it ought to be in some commutative monad.
18:04:20 <heatsink> Do haskell compilers/interpreters recognize commutative monads?
18:17:22 <heatsink> I think it would also be possible to achieve the correct behavior if haskell had delay and force operators
18:17:33 <heatsink> let uniq = (delay newUnique)
18:17:33 <heatsink>     uniqPairs = ((force uniq), (force uniq)) : uniqs
18:19:15 <emu> uh
18:19:24 <emu> isn't that trivial to implement? and pointless?
18:19:41 <heatsink> How would I implement it?
18:20:01 <emu> delay and force? first, i am presuming that you mean the usual semantics?
18:20:22 <emu> ie. simulating lazy evaluation in an applicative-order language?
18:20:26 <heatsink> right
18:21:03 <heatsink> hmm... no, not right
18:21:09 <emu> well then
18:21:12 <emu> what do you mean?
18:21:59 <heatsink> I'm saying that uniq is a function that returns newUnique when evaluated
18:22:49 <heatsink> the usual haskell semantics do not let you specify where something is evaluated
18:22:55 <heatsink> so that's what my 'force' is for
18:23:23 <emu> sequencing
18:24:11 <heatsink> yes, like `seq`
18:24:39 <heatsink> except that it is Delay a -> a instead of a -> a
18:25:58 <emu> you want to enforce the order of evaluation.  what is wrong with using monads, again?
18:26:51 <heatsink> monads would require the operations to be sequenced in a certain order
18:27:27 <heatsink> if I only read the first tuple element out of each element of uniqPairs, then the second (force uniq) will never be evaluated
18:27:56 <heatsink> and if I only read the second tuple element out of each element in uniqPairs, then the first (force uniq) will never be evaluated
18:28:21 <heatsink> (read and use those values in a case statement, that is)
18:29:44 <heatsink> so I have constructed this data structure without forcing an order on it and possibly creating values I would never use
18:32:17 <heatsink> with monads: let uniqPairs = do a <- newUnique; b <- newUnique; (a,b) : uniqPairs
18:33:05 <heatsink> actually, that's not quite right
18:34:51 <emu> well I don't know why it's in the IO monad
18:35:11 <emu> but I can imagine a monadic implementation of what you want
18:36:02 <heatsink> I'd like to know
18:37:01 <emu> is this part of the standard?
18:37:23 <heatsink> what does "this" refer to?
18:37:36 <emu> newUnique
18:38:08 <heatsink> yes
18:38:21 <heatsink> Data.Unique.newUnique :: IO Unique
18:38:51 <emu> so... surely there is some discussion surrounding that decision?
18:39:17 <heatsink> wait a minute
18:39:39 <heatsink> the standard is the language specification + prelude?
18:40:29 <heatsink> it's part of the hierarchical libraries, but it's not in the haskell 98 report
18:43:22 <heatsink> I haven't been able to find discussion about why Unique was designed that way
21:12:07 <stepcut> crud, I think one of my accounts went past 30 days due (not my fault), but I can't find out till tuesday :(
21:35:55 <stepcut> well, my credit report is clean. also made for an interesting read, I didn't realize how many different credit cards I have had over the years (and I am not that old!!)
21:54:43 <stepcut> hrm... this be some tricky code!
21:55:58 <stepcut> @arr
21:55:59 <lambdabot> Avast!
21:56:48 <stepcut> me dreams of module functors
21:57:00 <stepcut> for haskell...
22:03:00 <skew> okay, I'm back. Now, what was that about modules?
22:03:21 <skew> stepcut, are you reading that paper about embedding modules in Haskell?
22:13:14 <stepcut> skew: no, I am writing programs where I need those features!
22:14:31 <skew> Ah, well I just heard that there is a paper showing how to get them
22:14:56 <skew> I'll track it down, just a second
22:15:10 <stepcut> yeah, I have read that paper, there is no way to get something as powerful as ocaml module functors, but there are some hacks that work for some cases
22:15:26 <stepcut> though, I should read it again and see if it will work in this case
22:19:53 <skew> I saw Oleg's post, http://www.mail-archive.com/haskell@haskell.org/msg15217.html
22:20:05 <skew> I haven't read any of the stuff, but it sounds like it might
22:20:19 <skew> what was it you needed again?
22:21:31 <skew> I'm reading about Epigram now, myself
22:29:20 <skew> I haven't worked out what conor is using the different kinds of arrows for
23:08:08 <skew> does the CVS GHC have generalized abstract data types?
23:09:01 <skew> (I'm being lazy about checking because I'm playing with Epigram)
23:51:40 <skew> Hello Joachim
23:52:23 <skew> is Germany waking up now? 9AM?
23:59:21 <skew> #haskell is pretty quiet when Europe is asleep
