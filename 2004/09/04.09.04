00:00:49 * Lemmih is awake.
00:06:50 <emu> 9AM? who the hell wakes up at 9AM?
00:22:25 <skew> I don't remember exactly how the timezones work, but I thought germany was central USA + 7, I'm on the west coast for another 2, and it was midnight when I wrote that
00:23:02 <skew> which adds up to 9AM if Joachim's .de domain means Germany
00:23:43 <Lemmih> emu: I actually woke up at 7am.
00:39:08 <emu> Lemmih: are you ok?
00:39:27 <emu> i usually go to sleep around then
00:44:49 <Lemmih> emu: Actually I'm not OK. I slept all yesterday because I was sick.
00:58:33 <musasabi> moeninf
05:47:31 <musasabi> Anyone know what happened to shapr?
05:48:36 <cptchaos> @seen shapr
05:48:36 <lambdabot> I saw shapr leaving #darcs 3 days 16 hours 47 minutes 27 seconds ago.
05:54:15 * andersca bounces
05:54:18 <andersca> @arr
05:54:19 <lambdabot> Drink up, me hearties
06:06:51 <Lemmih> Have anyone implemented a Prolog interpreter in Haskell?
07:21:06 <xkb> hi
07:21:13 <xkb> anyone here athome with Clean IO?
07:21:29 <xkb> Im trying to write a program that reads a [Char] from a file
07:26:53 <musasabi> @type readFile
07:26:55 <lambdabot> readFile :: FilePath -> IO String
07:27:02 <musasabi> @type String
07:27:03 <lambdabot> bzzt
07:27:10 <musasabi> type String = [Char]
07:27:23 <xkb> yeah.. but thats not Clean
07:27:31 <xkb> I know the haskell way by now :D
07:28:07 <ibid> have i by mistake joined #clean?
07:28:07 <ibid> ;)
07:28:21 <xkb> hehe.. there isnt any #clean
07:28:25 <xkb> sometimes I create it
07:28:34 <xkb> for fun.. but there is not official #clean
07:28:51 <Igloo> Have you got some sort of clean tutorial? I don't remember it being particularly complex
07:28:52 <musasabi> hmm I don't remember clean very well
07:29:09 <xkb> Im following the clean book
07:29:15 <xkb> its a bit old though
07:29:23 <xkb> and lacks good examples
07:30:09 <xkb> Perhaps Im thinking tomuch haskell like
07:30:33 <xkb> I got a sfopen function to open a File(pointer)
07:30:42 <Igloo> ftp://ftp.cs.kun.nl/pub/Clean/papers/cleanbook/CleanBookI.pdf p 121 (11 in the book) talks about IO
07:30:57 <xkb> yeah.. that's what Im trying now
07:31:07 <xkb> not exactly that example
07:44:10 <xkb> my problem is this: Using IO in Clean you need to pass an environment.. like this: 
07:44:34 <xkb> doSomethingWithFile :: String *env -> *env | FileSystem env
07:44:55 <xkb> I however try to get an array of Char out of the function..
13:54:56 <Lemmih> Anyone around to help a frustrated Haskeller?
13:56:43 <Marvin--> is a tired Haskeller good enough?
13:57:52 * Marvin-- yawns for emphasis
14:01:11 <musasabi> hmm?
14:05:21 <Lemmih> I have N characters and a word list. With these I gotta create crosswords which will use all the available characters, and the score will be determinant by the number of crossing words.
14:08:41 <cptchaos> Lemmih: what were your Ideas till now?
14:09:57 <Lemmih> cptchaos: I'm stuck in an imperative world of two dimensional arrays.
14:13:24 <cptchaos> hm, is this for an crossword puzzle? are there any predefined sizes of the "field"
14:19:35 <Lemmih> cptchaos: Nope. I got some magnet letters on my refrigerator and I would like to impress my brother with funny crosswords. At first I thought it was a simple task but I haven't been able to work out a nice model yet.
14:21:12 <cptchaos> can you give an example. I'am not sure if I understand right
14:25:08 <Lemmih> ['h','e','l','l','o','y'] ["hello","yo"] => Should result in a crossword where "hello" and "yo" shares the 'o'.
14:29:02 <musasabi> well you could approach it as an optimisation problem with a greedy backtracking algo.
14:33:27 <cptchaos> Lemmih: how do you want to represent the resulted crossword? 
14:33:51 <cptchaos> as a prerryprinter document?
14:34:58 <Lemmih> prerryprinter?
14:35:19 <cptchaos> ah prettyPrinter, sorry
14:35:54 <cptchaos> e.g. Text.PrettyPrint
14:36:27 <cptchaos> then you could give a chain of crosswords
14:36:57 <cptchaos> begin with on, and cross it with th first matching, and repeat this
14:37:46 <cptchaos> otherwise you won't get around to solve an optimisation problem
14:41:02 <stepcut> I have magnetic letters on my alphabet, but only one of each letter, so we have to get real creative...
14:42:24 <Lemmih> cptchaos: Is that possible when a word can share letters with many other words?
14:44:19 <cptchaos> Lemmih: Lemmih: hm, if your are sattisfied with only one shared letter,between to word, yes, why not? 
14:45:22 <Lemmih> That is not satisfactory.
14:45:47 <cptchaos> Lemmih: ok,  but thn this 
14:46:07 <cptchaos> is really not trivial to solve I think
14:46:37 <cptchaos> at least if you are not specialised in discrete optimization 
14:47:34 <stepcut> generic algorithm maybe?
14:48:25 <cptchaos> spepcut: generic algorithm? test every possibillity?
14:49:12 <stepcut> generic algorithms usually don't test every possibility. that is sort of the point...
14:51:59 <cptchaos> stepcut: I do  not really now, what a generic algorithm is, however testing all possibilities is in some way generic 
14:52:09 <stepcut> so, I bought some full-range speakers (just the drivers, no box, etc), for $0.89 each. Since it's a three day weekend, I want to try to design and build some boxes for them, and maybe build a small transistor amp to go with them.... but instead I am going to clean my apartment :(
14:53:02 <stepcut> cptchaos: well, testing *all* the possibilities could take a very, very long time. Genetic algorithms are a method for attempting to evolve an answer
14:53:02 <heatsink> stepcut: need garbage collection?
14:53:13 <stepcut> heatsink: yeah, in a major way
14:53:19 <Lemmih> Testing all possibilities would actually be OK. But I'm not sure how to represent the crosswords without being _really_ inefficient.
14:54:20 <stepcut> Lemmih: it would depend on how many letters there are, it seems like it would grow out of control pretty fast
14:56:23 * stepcut goes to use the facilities
16:39:06 <No-BAnN> hi
16:39:11 <No-BAnN>  Last generator in do {...} must be an express
16:39:13 <No-BAnN> ?
16:42:22 <Igloo> You probably have your indentation wrong
16:56:47 <Cale> No-BAnN: what's the last line of your do {...} ?
16:58:44 <No-BAnN>  return (dd ++ de)
16:59:30 <Cale> yeah, probably just a problem with the indentation as Igloo said
17:00:04 <Cale> you could put semicolons between the lines and put braces around the block and see if it helps
17:01:03 <No-BAnN> what is a brace ? i'm frensh :(
17:01:46 <mattam> {
17:02:13 <No-BAnN> ok thx a lot
17:02:37 <mattam> brace = accolades, brackets = crochets et ( tu dois savoir :)
17:04:05 <No-BAnN> hehe merci
17:04:17 * Igloo wonders if there's any relation to the English accolade (~= honour)
17:04:53 <No-BAnN> can I pm you mattam?
17:05:19 <mattam> somehow, we have accolade meaning bracing someone like you
17:05:29 <mattam> s/you/in english/
17:07:49 <mattam> embracing is the correct word it seems
17:09:53 <Igloo> Ah, right, yes
17:12:55 <Igloo> Is a crochet a ( or a [?
17:13:04 <Cale> [, I thought
17:15:51 <mattam> crochet isn't a symbols name, it's a hook
17:16:09 <mattam> oh nm
17:16:38 <Jerub> crochet is the act of using a hook to make a fabric out of yarn.
17:16:51 <Jerub> you're thinking of a crochet hook, the hook involved.
17:16:56 <Jerub> ;)
17:18:21 <mattam> it's a symbol name i just messed up 
18:54:02 <Blhargh> hello
18:54:17 <Blhargh> is there some way to have local declarations in instance definitions
18:54:40 <Blhargh> instance A a where
18:54:42 <heatsink> What do you mean by "local declarations"?
18:55:01 <Blhargh>   foo = f local
18:55:21 <Blhargh>   bar = g d + h local
18:55:28 <Blhargh>   where local = 3
18:55:32 <Blhargh> ...
18:55:46 <Blhargh> that is local is only in the scope of that instance definition
18:55:52 <heatsink> why does it need to be local?
18:56:04 <Blhargh> it doesn't but it would be more elegant
18:56:35 <heatsink> As far as I know, you can't do what you want
18:56:39 <Blhargh> also it would allow me to use it in similar instance declarations in the same module
18:56:53 <Blhargh> since the purpose will be exactly the same
18:57:35 <Blhargh> if I have 4 instance declarations of that kind I'll have to come up with 4 different identifiers
18:57:49 <Blhargh> and they will all be global
18:58:15 <Blhargh> pretty messy when compared to one single identifier, and only local to the definition
18:59:27 <heatsink> You can kludge it
18:59:44 <Blhargh> ?
18:59:48 <Blhargh> what does that mean?
19:00:19 <Blhargh> ok just found the meaning :)
19:00:25 <Blhargh> kludge it? how?
19:01:28 <heatsink> foo = f local 1
19:01:40 <heatsink> actually
19:01:42 <heatsink> foo = f $ local 1
19:01:50 <heatsink> for the first instance
19:01:59 <heatsink> foo = f $ local 2 for the second instance
19:02:01 <heatsink> etc.
19:02:22 <Blhargh> eh
19:02:25 <heatsink> Not pretty either, but you won't have to make different identifiers
19:02:38 <Blhargh> how is that better than
19:02:40 <Blhargh> local1
19:02:41 <Blhargh> local2
19:02:43 <Blhargh> ...
19:02:43 <heatsink> or you can just delete the space between local and 1 :)
19:02:44 <Blhargh> :)
19:02:49 <Blhargh> exactly ;)
19:03:01 <Blhargh> well I'd be just waisting one identifier
19:03:07 <Blhargh> anyway not worth the trouble
19:03:31 <Blhargh> also I don't know how optimizations are done
19:03:51 <Blhargh> but that could eventually lead to "local n" calculations not beeing shared
19:03:52 <heatsink> ghc can optimize that
19:06:16 * Blhargh whish scopes in haskell where better
19:06:23 <Blhargh> implicit parameters help
19:06:27 <Blhargh> but it could be better
19:06:50 <heatsink> modules help a lot for scoping
19:06:59 <Blhargh> yes 
19:07:31 <Blhargh> and even that is not being used for implicit parameters... :-/
19:09:21 <Blhargh> for instance imagine you could do something like
19:10:25 <Blhargh> module ?opts :: Opt => Module ( .... ) where
19:11:16 <heatsink> I can't figure out what that should do
19:11:25 <Blhargh> and in practice that would just mean that you could use the implicit parameter ?opts without declaring it in the context
19:11:48 <Blhargh> imo that would already simplify it's usage so much
19:12:27 <Blhargh> you'd just be saying that the module is parameterized
19:12:39 <Blhargh> instead of typing it for every function that uses it
19:13:15 <Blhargh> and then, instead of using the functions of that module as
19:13:31 <Blhargh> let ?opts = ... in foo
19:13:36 <Blhargh> let ?opts = ... in bar
19:13:41 <Blhargh> you could simply
19:14:07 <Blhargh> import Module where ?opts = ...
19:14:14 <Blhargh> and use foo, bar
19:14:21 <Blhargh> or even
19:14:29 <Blhargh> import Module as M1 where ?opts = ...
19:14:33 <Blhargh> import Module as M2 where ?opts = ...
19:14:37 <Blhargh> and then 
19:14:40 <Blhargh> M1.foo
19:14:43 <Blhargh> M2.foo
19:14:46 <heatsink> oh that would be cool
19:15:14 <Blhargh> seems just pure syntatic sugar
19:15:23 <Blhargh> so should be possible
19:15:34 <Blhargh> I sent it to the mailing list once
19:16:36 <Blhargh> another nice possibility of that would be inheritance of the implicit parameter by modules
19:16:43 <Blhargh> just like it happens with functions
19:17:02 <Blhargh> that means that if you have:
19:17:27 <Blhargh> module ?opt => M1 where
19:17:42 <Blhargh> import M2
19:17:44 <Blhargh> ...
19:17:53 <Blhargh> module ?opt => M2 where
19:17:56 <Blhargh> ...
19:18:08 <Blhargh> then
19:18:23 <heatsink> I don't really like the implicit parameter inheritance
19:18:38 <Blhargh> it's really the same with functions
19:18:48 <heatsink> I wonder if modules could be recursive. That would be awesome. ;)
19:19:14 <Blhargh> do you have that already?
19:19:21 <Blhargh> s/do/don't 
19:19:28 <Blhargh> recursive modules?
19:19:49 <heatsink> module RecursiveModule where import RecursiveModule as RM where depth = (depth-1)
19:20:29 <Blhargh> ah :)
19:20:52 <Blhargh> now that's much more than plain syntatic sugar :D
19:21:00 <Blhargh> but yeah that would be great ;)
19:21:22 <Blhargh> hmmmm
19:21:25 <heatsink> yeh, it would be fun to play with that :)
19:21:34 <Blhargh> but let me think
19:21:50 <heatsink> I don't like the implicit parameters in modules because they resemble global parameters
19:22:16 <heatsink> if M1 imports M2 imports M3, and M1 and M3 take an implicit parameter but M2 doesn't, what happens?
19:22:48 <Blhargh> well it would just work as functions
19:22:56 <Blhargh> f1 takes an implicit par
19:23:01 <Blhargh> f2 doesn't 
19:23:04 <Blhargh> f3 does
19:23:09 <Blhargh> how does that works
19:23:18 <Blhargh> then it depends on how f2 imports f3
19:23:30 <Blhargh> if you have:
19:23:43 <Blhargh> f2 = ... f3 ... where ?opts
19:24:00 <Blhargh> then you are not using *f3* actually
19:24:11 <Blhargh> but f3 with some specific implicit parameter
19:24:23 <Blhargh> so f2 depends on no parameter
19:24:29 <Blhargh> if you just use
19:24:34 <Blhargh> f2 = ... f3 ...
19:24:46 <Blhargh> then f2 depends itself on an implicit parameter
19:24:55 <Blhargh> so with modules you'd have the same thing
19:25:01 <Blhargh> either you have
19:25:11 <Blhargh> module M2 where
19:25:21 <Blhargh> import M3 where ?opt = ...
19:25:32 <Blhargh> and M2 is not parameterized by any implicit par
19:25:35 <Blhargh> or 
19:25:49 <Blhargh> import M2 where 
19:25:54 <Blhargh> opss
19:25:56 <Blhargh> or
19:26:09 <Blhargh> module ?opt => M2 where
19:26:14 <Blhargh> import M3 
19:26:18 <Blhargh> is the only way to go
19:26:26 <Blhargh> because M2 also depends on that implicit par
19:26:55 <Blhargh> I really don't think it's that much different from implicit parameters in functions
19:27:32 <Blhargh> IMO there is only *1* detail that I really have no good answer for
19:27:38 <Blhargh> but I didn't give it much thought
19:27:41 <Blhargh> and that would be
19:28:20 <Blhargh> By implicitly parameterizing a module would you be
19:28:33 <Blhargh> a) implicitly param. all functions in that module
19:28:57 <Blhargh> a) implicitly param. only the functions that need to be (that is, that use it)
19:29:06 <Blhargh> (and that would be a b) ) ;)
19:29:22 <Blhargh> a) can be done obviously
19:29:34 <Blhargh> b) seems better but more complicated
19:30:16 <heatsink> I think it would be b
19:30:20 <Blhargh> me too
19:30:47 <Blhargh> but I'd like to give it some more thought 
19:31:29 <heatsink> what is this where ?opts syntax for functions? I haven't seen that before
19:31:43 <Blhargh> ?
19:31:51 <Blhargh> it's just syntax for implicit parameters...
19:31:53 <Blhargh> errr
19:32:00 <Blhargh> you never used implicit parameters?
19:32:08 <Smerdyakov> It sounds awful.
19:32:41 <heatsink> I'm trying to find mention of it in the haskell report
19:32:46 <Blhargh> Smerdyakov: eh, IIRC functional deps sound awful to you :P
19:32:58 <Blhargh> Smerdyakov: just kidding :)
19:32:59 <Smerdyakov> Blhargh, I think you've confused me with someone else.
19:33:05 <Blhargh> Smerdyakov: maybe...
19:33:24 <Blhargh> Smerdyakov: but really what did you find awful by the way? just whole thing?
19:33:38 <Blhargh> Smerdyakov: or any particular thing...
19:33:55 <Smerdyakov> Blhargh, "implicit" anything tends to indicate the death of compositional reasoning.
19:34:15 <Blhargh> Smerdyakov: so you think that of implicit parameters to right?
19:34:32 <Smerdyakov> Blhargh, I couldn't parse that.
19:34:46 <Blhargh> sorry
19:34:49 <Blhargh> Smerdyakov: so you think that of implicit parameters too, right?
19:34:52 <Blhargh> :)
19:35:15 <Smerdyakov> Blhargh, "implicit parameters" has "implicit" in it, doesn't it? I've never been talking about anything else....
19:35:33 <Blhargh> ok that's what I was trying to understand
19:35:42 <Blhargh> whether you were talking about implicit parameters
19:35:48 <Blhargh> or the generalization I was proposing
19:36:04 <Smerdyakov> Oh, don't worry, I wasn't paying attention to you. :P
19:36:11 <Blhargh> :)
19:36:22 <Blhargh> I find them quite useful really
19:36:49 <Blhargh> death of compositional reasoning seems a bit exagerated to me
19:37:12 <Blhargh> it's just a slight generalization of scoped functions
19:37:38 <Blhargh> and IMO scoped functions are a good thing
19:37:44 <Smerdyakov> Exaggeration is what separates man from the animals.
19:38:37 <Blhargh> by the way, what do you think of scoped functions?
19:38:54 <Blhargh> (I think that is the proper name)
19:39:15 <Smerdyakov> What are they?
19:39:24 <Blhargh> f = ...
19:39:26 <Blhargh>   where
19:39:29 <Blhargh>   foo = ...
19:39:32 <Riastradh> Smerdyakov, so do you object to an implicit lexical environment?
19:39:33 <Blhargh>   bar = ...
19:40:00 <Blhargh> foo and bar are
19:40:19 <Blhargh> not sure if I got the name right. Scoped functions? local?
19:41:27 <Smerdyakov> Whaaat?
19:41:42 <Smerdyakov> You are talking about a feature that all functional languages have, right?
19:41:48 <Smerdyakov> I assumed it was something more cutting edge.
19:41:55 <Blhargh> no
19:42:06 <Blhargh> I wasnt talking about this obviously 
19:42:23 <Blhargh> I just see implicit parameters as a very useful generalization of local functions
19:42:40 <Smerdyakov> Implicit parameters are passed by evaluating a known expression in the local environment, right?
19:43:08 <Blhargh> yes
19:43:43 <Smerdyakov> That's awful. I prefer binding structure to be obvious for every variable use.
19:43:55 <Blhargh> but it reflects in the type
19:44:27 <Blhargh> in practice it's like taking the local function "foo" to the main level 
19:44:38 <Blhargh> and explicitly say
19:44:53 <Smerdyakov> No, because local functions have fixed, known binding structure!
19:44:56 <Blhargh> this function "foo" only works when this parameters are defined
19:46:41 <Blhargh> yeap
19:46:52 <Blhargh> you are right of course
19:47:26 <Blhargh> and you can use implicit parameters to do much more than what I'm saying 
19:47:37 <Blhargh> but you can use them in ways that are pretty safe and useful
19:47:50 <Blhargh> you cannot test local functions
19:48:25 <Blhargh> I see no harm in using implicit parameters to move a few local function to the main level
19:48:29 <Blhargh> to be able to thest them
19:48:58 <Smerdyakov> That's garbage. I don't know enough about the utility of these things to say whether they make sense, but this is _not_ "moving a few local functions."
19:49:17 <Smerdyakov> The mechanism admits much more than what you're suggesting for this testing.
19:49:27 <Blhargh> again, I didn't say it was that, but that it can be used for that purpose
19:49:35 <Smerdyakov> You might then decide, "oh, what the hey, I moved it up there, might as well use it here, too!"
19:51:24 <Blhargh> yeap, maybe they can mess things up
19:51:56 <Blhargh> still imo they can be used in very safe ways and help a lot in terms of readability of a program
19:52:22 <Blhargh> The same concept is used in math books all the time
19:52:54 <Blhargh> sometimes a process is being described, and suddenly they'll just say
19:53:11 <Blhargh> from now on, assume W =... X=... Z= ...
19:53:41 <Blhargh> and then you just have lot's of definitions that use W X Z as constants
19:53:45 <Blhargh> and you don't pass them around
19:54:05 <Blhargh> having to pass W X and Z around everywhere would make things so much harder to read
19:54:06 <Smerdyakov> You can closure convert your own code if you want to remove local functions.
19:54:35 <Blhargh> what does that mean?
19:54:42 <Blhargh> "closure convert"?
19:55:22 <Smerdyakov> Well, the end result is a program with no local functions. You modify the code as necessary to achieve this.
19:55:28 <Smerdyakov> All functional language compilers do this.
19:57:05 <Blhargh> Compilers? I'm talking about making your code easier to write/read...
19:57:13 <Blhargh> where to compilers fit in?
19:57:27 <Smerdyakov> Yup. And you can do what the compilers do, but do it manually, to remove local functions that you want to test.
19:57:41 <Blhargh> oh but it's not just about test
19:57:44 <Blhargh> as an example
19:58:05 <Blhargh> I was implementing some stuff for a chemstry eng. friend
19:58:17 <Blhargh> it kept happening stuff like
19:58:42 <Blhargh> OK, from now on  we assume a temperature T, pressure P and volume V
19:58:57 <Blhargh> and then you have some functions and algorithms described
19:59:23 <Blhargh> most use T, P or V
19:59:42 <Blhargh> you also have other  "constants" defined by T,P,V
20:00:13 <Blhargh> if you pass them around as parameters your algorithms and functions will be completely different from the ones in the book
20:00:39 <Blhargh> also now the "constants" defined using T,P,V are not constants anymore, but functions
20:01:05 <Smerdyakov> I'd need more details to decide if this is a convincing example -- but I don't really want the details now. ;)
20:01:06 <Blhargh> that means that maybe they are ever recalculated each time I used them
20:01:30 <Blhargh> Smerdyakov: I wouldn't give them to you, I'm off to bed!
20:01:33 <Blhargh> 4am here
20:01:43 <Smerdyakov> IT IS NOT 4AM HERE.
20:01:57 <Blhargh> good for you ;)
20:02:17 <Blhargh> bye!
20:02:42 <Smerdyakov> Thank God I live in a sane country, where it is not 4am.
20:04:19 <Smerdyakov> Can I get an Amen?
20:05:21 <Riastradh> No way, man.  You just lied about the sanity of this country, and God don't take kahndly t'liars!
20:05:43 <Smerdyakov> Now God is going to take you over his knee.
20:09:29 <heatsink> I'm curious what you think of my proposal for new syntax for functions that have no side effects but a return value that is not determinstic
20:09:50 <Smerdyakov> Are you asking me to scroll up? :)
20:10:11 <heatsink> no
20:10:30 <Riastradh> I believe you mean 'referentially transparent,' not 'deterministic.
20:10:31 <Riastradh> '
20:10:50 <heatsink> yeah, that sounds right
20:11:47 <heatsink> Currently such functions are monads
20:12:00 <heatsink> are implemented with monads
20:13:08 <heatsink> Which is overkill because they are sequentially executed that way, but they don't need to be
20:13:13 <Cale> heatsink: an example of such a function?
20:13:32 <heatsink> next RandomGen
20:13:50 <Cale> but that will have a side effect, will it not?
20:14:25 <heatsink> does the side effect matter?
20:14:37 <Cale> it could
20:14:55 <Smerdyakov> You want your pseudo-random generator to be predictable with fixed seeds.
20:14:58 <Smerdyakov> Helps with debugging.
20:15:22 <Smerdyakov> I don't see how non-determinism arises in real programs, without side effects.
20:15:35 <heatsink> The only other example I have is newUnique
20:16:21 <heatsink> it generates a value that is unique throughout the program, and the value can only be compared with other values returned from newUnique
20:17:19 <Smerdyakov> Which is, of course, maintained through side effects.
20:17:31 <heatsink> right, but the side effects are invisible to the program.
20:17:50 <heatsink> If I run my program twice, will memory always be allocated at the same locations?
20:18:06 <heatsink> at the same virtual addresses, at least?
20:18:07 <Smerdyakov> No. If you have a unique and you are the only one ever to have called newUnique, then you know that any comparison between uniques will return equality.
20:18:19 <Smerdyakov> If some jackass calls newUnique in another thread, you might get into trouble.
20:20:01 <heatsink> I hadn't thought of that
20:20:20 <heatsink> But the synchronization would just be moved into the library instead of being exposed to the programmer
20:21:01 <Smerdyakov> What do you mean?
20:21:55 <heatsink> Data.newUnique would have to be implemented into something other than haskell, that could take account of side effects,  to make this work
20:22:12 <heatsink> s/into/in/
20:22:38 <Smerdyakov> That would be bogus, unless some clever mechanism like monads were used to express this fact on the Haskell side.
20:23:17 <heatsink> I was going to propose such a mechanism
20:23:38 <Smerdyakov> OK, what is it?
20:23:43 <heatsink> It is essentially a laziness annotation
20:24:46 <heatsink> If I were to try to implement newUnique without this annotation, and I wanted to make an infinite list of unique values, it might look like this:
20:25:09 <heatsink> uniqs = uniq:uniqs where uniq = newUnique
20:25:45 <heatsink> but this would come out as an infinite list of the same value, rather than an infinite list of different values
20:26:17 <heatsink> so I say uniqs = force uniq:uniqs  where uniq = delay neqUnique
20:27:06 <heatsink> ... maybe I shouldn't call it a laziness annotation >_>
20:27:50 <heatsink> the point is that each (force uniq) evaluates to a call to newUnique
20:28:08 <Smerdyakov> That doesn't fit very well aesthetically with the rest of the language.
20:28:53 <Cale> how often do you need uniques?
20:28:55 <Smerdyakov> It sounds like a minor implementation nightmare, too.
20:29:13 <Smerdyakov> What happens when you have a lazy expression that might contain force within it, or might not?
20:29:32 <Cale> Usually I use a state monad, or just pass accumulating parameters around when I need unique id's
20:29:47 <Cale> zip [0..] xs is another option.
20:31:03 <heatsink> Smerdyakov: (force x) would be evaluated by normal haskell rules of evaluation. Evaluation actually occurs only if the value is forced by seq or case
20:32:02 <heatsink> Cale: true that I can't think of very many applications for this. I could only come up with unique and random.
20:40:20 <heatsink> Smerdyakov: the only difference is that the x in the application (force x) is never updated
20:40:25 <heatsink> during execution
20:47:20 <heatsink> I looked for info online about commutative monads, didn't find anything
20:48:28 <roconnor> what were you looking for?
20:48:44 <heatsink> info about commutative monads
20:53:42 <heatsink> monad doesn't sound like nomad??
20:55:22 * heatsink made hugs segfault
20:57:49 <heatsink> Hmm... iteration over an unordered set would be another application of this, although it still introduces nondeterminism like the random number generator
20:58:31 <Smerdyakov> Puh-lease. It's a _pseudo_-random number generator, and there's no nondeterminism there.
20:59:37 <heatsink> Does haskell have a nondetermistic prng (such as one that uses a systemwide random number generator?)
21:00:01 <heatsink> that might be a real rng
21:00:06 <Cale> It's easy enough to get one
21:00:26 <Cale> if you can get at one from C, the FFI will get you one :)
21:00:33 <heatsink> what is FFI?
21:00:40 <Cale> foreign function interface
21:00:58 <Smerdyakov> heatsink, you can never gte a real RNG.
21:01:02 <Smerdyakov> heatsink, anywhere.
21:03:33 <heatsink> Smerdyakov: doesn't that depend on whether the universe is deterministic?
21:03:52 <heatsink> Smerdyakov, do you believe in fate? :)
21:04:00 <Smerdyakov> I am in charge of the universe, and I say there are no RNG's.
21:04:53 <Riastradh> So, like, entropy doesn't really exist, by your decree, Smerdyakov?
21:04:54 <heatsink> Smerdyakov: YOU are responsible for getting that man into office!
21:05:33 <heatsink> How could you?!
21:05:46 <heatsink> You better not let him be reelected
