03:37:30 <musasabi_> Does anyone got any good queue benchmarks? I may have created a faster queue abstraction...
03:38:28 <clausen> musasabi_: how does it work?
03:38:44 <clausen> (you've read Okasaki's book?)
03:39:07 <musasabi_> sorry.
03:39:16 <musasabi_> Chan with Queue instead of the mvar list.
03:39:29 <musasabi_> finnish -> english + tired :-(
03:39:36 <clausen> ?
03:39:44 <clausen> what's a chan?
03:39:49 <clausen> what's an mvar?
03:40:44 <musasabi_> Control.Concurrent.*
03:41:27 <musasabi_> then again I am playing without dupChan.
04:29:56 <sond> is there a general way to construct a list of all possible elements of an arbitrary datatype (in the Ord class)
04:31:31 <sond> perhaps in some haskell extension? :)
04:39:53 <skew> what's the type of memo x here?
04:40:37 <skew> oops, that was a question for #epigram
04:41:22 <skew> well, three channels open and I got the question to #epigram on the third try :)
04:44:16 <musasabi_> sond: no (look at Enum for that)
04:44:59 <musasabi_> sond: think about e.g. a datatype for Real numbers. How would you define the next value?
04:55:26 <skew> that would help. A lot of the notation is underspecified
04:55:35 <skew> oh no, not again
04:55:51 <edwinb> heh. I'm over here! ---->
05:12:42 <skew> what does all P : all x : Nat mean? for any P of any type x of kind Nat?
05:22:22 <skew> that would help a lot
05:37:00 <sond> musasabi, well.. for Float there's no problem. but for 'real' reals ofcourse you can't do it
05:47:38 * pesco groans in boredom.
05:53:55 <skew> bored? try to learn epigram
05:54:12 <skew> it's keeping me busy
05:54:49 <skew> edwinb was just explaining how they can optimize Peano numeral into something you might actually want to execute :)
05:54:57 <skew> no word on plus yet, unfortunately
05:55:29 <edwinb> well, no, plus is optimised too, just by brute force rather than anything elegant...
05:55:49 <edwinb> or at least it will be when I get my hands on Conor's spangly new refactored epigram.
05:57:33 <skew> you mean you just spot plus and change it around?
05:58:08 <edwinb> essentially, yes. Not nice, but it works...
05:58:54 <edwinb> Really, though, if you're actually doing heavy arithmetic, I don't think Nat is what you want.
05:59:03 <edwinb> But we don't have any primitives yet, so you're stuck with it ;)
05:59:25 <skew> you can always turn a pair of Nat into integers
05:59:39 <edwinb> indeed.
05:59:46 <skew> like any good algebraist knows :)
06:00:16 <edwinb> But Nats are more about the structure of things, and counting things.
06:00:21 <skew> and factor a few more times to get reals if you need them
06:00:46 <edwinb> You could model binary, then IEEE floats, if you really wanted to...
06:00:58 <skew> when are you going to start adding GUI libraries?
06:01:05 <edwinb> Hehe.
06:01:06 <edwinb> who knows ;)
06:01:18 <skew> I have to build those from Nat too?
06:01:57 <skew> how easy is it to stick stuff into the interpreter, if I want to add some primitives?
06:02:00 <edwinb> If you really want to Godel code everything I'm sure you can...
06:02:45 <edwinb> I guess it wouldn't be that hard to add, say, Float and Integer.
06:03:02 <edwinb> Although with Float in particular you might have problems with a conversion rule.
06:03:28 <skew> conversion rule?
06:04:01 <skew> ordering should be enough of a destructor, if that's what you are talking about
06:04:21 <edwinb> If you're comparing two types, say A and B, as you do when you're typechecking, you need to reduce A and B to normal form then compare.
06:04:33 <edwinb> And you might have Floats in those types, since they're dependent types.
06:04:46 <edwinb> And as we know, equality on floats isn't the most accurate operation...
06:05:15 <edwinb> This shouldn't stop us adding floats as primitive, but we'd need to take care about having types which depend on floats.
07:46:37 <stepcut`> anyone had any luck calling C++ from haskell
08:21:35 <Cale> stepcut`: I just succeeded
08:39:11 <Cale> stepcut`: to see how it might be done, see the paste page
08:40:34 <stepcut`> which paste page, there are a few I have seen in use
08:40:55 <Cale> http://www.haskell.org/hawiki/HaskellIrcPastePage
08:41:48 <Cale> (that's a pretty simplistic example, but the ffi documentation should make it pretty clear how to extend it. :)
08:44:38 <Cale> in fact, let me extend it a little...
08:45:16 <stepcut`> so in that case, you have wrapped the C++ with C functions?
08:46:02 <Cale> roughly
08:46:18 <Cale> so as not to have the names mangles
08:46:21 <Cale> mangled*
08:46:34 <Cale> If you want to determine the mangled names, you could import those too
08:46:46 <stepcut`> any idea how python<=>C++ bindings (such as PyKDE) work?
08:47:13 <Cale> not really -- I haven't looked into ffi in python
08:47:21 <stepcut`> ok.
08:48:18 <stepcut`> There are binding generators for KDE/Qt, for both perl and python (they each have their own generator). I am trying to figure out if any of that could be reused to haskell/KDE bindings, or at the very least ocaml/KDE
08:49:13 <stepcut`> i think name managling might be the way to go -- its behavior is defined for >= g++ 3.2, which is all I care about
08:50:47 <stepcut`> but, I am going to *start* by doing a small littel kde app with hand written bindings
08:51:05 <Cale> there are apparently already C bindings to KDE
08:51:21 <stepcut`> the c bindings appear to be removed in kde 3.3
08:51:26 <Cale> oh
08:51:30 <stepcut`> or perhaps just moved
08:52:51 <stepcut`> the comment says,  "C bindings now superceded by the Smoke library."
08:53:18 <stepcut`> smoke is used to generate the perl bindings, but is supposed to be general enough to use with any scripting language
08:53:45 <stepcut`> so my plan was (1) do a bit by hand to understand the problem better (2) see if smoke can work for kde
08:54:17 <stepcut`> Scripting Meta Object Kompiler Engine
09:44:15 <No-BAnN> hi
09:44:27 <Lemmih> Yo
09:55:33 <shaleh> morning all
09:57:57 <No-BAnN> hi
10:41:44 <xkb> Are there any haskell datastructures that behave like a cyclic list? I need a list I can rotate.
10:42:28 <xkb> like [1,2,3] rotate 1 = [3,1,2]
10:42:31 <Lemmih> I think there's something on the wiki about this.
10:42:39 <esap> how about a cyclic list? :-)
10:42:43 <shaleh> xkb: http://www.haskell.org/hawiki/TyingTheKnot
10:43:02 <xkb> ah cool
10:43:03 <shaleh> found via google: 'haskell cyclic list'
10:43:04 <xkb> thanks
10:43:08 <xkb> :P
10:43:08 <shaleh> (-:
10:43:10 <xkb> ok..
10:43:15 <esap> let x = [1,2,3] ++ x in x
10:43:16 <xkb> got the point
10:43:22 <shaleh> xkb: not ragging on you
10:44:01 <xkb> esap, that constucts an endless list?
10:44:05 <xkb> or am I wrong
10:44:14 <esap> xkb: yes.
10:45:45 <esap> just have to understand that you can't extract "all elements" of such list, since there is no way you can test for end of the list.
10:47:27 <esap> nor can you check whether some elements were already handled.
10:49:09 <esap> which is why writing that in ghci will give you a very long output...
11:27:05 <No-BAnN> est ce que quelq'un parle français?
11:28:03 <Cale> sorry, I only dare to read it :)
11:28:08 <xkb> So do I
11:28:13 <No-BAnN> lol
11:28:30 <Riastradh> Un peu, mais nous preferons (sp!) anglais dans le channel.
11:28:40 <No-BAnN> est ce que je peux vous parler en prive?
11:29:47 <No-BAnN> xkb is it possible to pm you?
11:30:26 <xkb> you can.. but I'm by no means a haskell wizzard :D
11:31:28 <xkb> Actually: Im wondering why Clean complains about not having an instance of mod defined of mod for Int
11:31:39 <xkb> what else would you need mod for
11:32:40 <Cale> mod could be defined on most any integral domain.
11:32:42 <xkb> its prolly defined somewhere else in a lib
11:33:11 <xkb> When I look trough StdInt I cant find an instance.. strange
11:33:41 <xkb> just the signature.. defined on generic type a
11:34:15 <xkb> whats that haskell code dump site again?
11:36:29 <Cale> http://www.haskell.org/hawiki/HaskellIrcPastePage
11:36:34 <xkb> tu
11:55:08 <xkb> ok.. that was one weird guy
11:55:17 <xkb> he was doing something with monadic parsers
11:55:29 <shaleh> (-:
11:55:32 <xkb> but it was by far the worst haskell code I've ever seen besides my own
11:55:39 <shaleh> heh
11:55:56 <xkb> It smelled like homework :P
11:56:28 <xkb> and if a game is using THAT code.. they better look again
11:57:22 <shaleh> I am always amoazed at the quality of people's code
11:57:24 <shaleh> always
11:57:35 <xkb> in a positive way?
11:57:45 <shaleh> xkb: usually not (-:
11:57:49 <xkb> :P
11:58:04 <xkb> Then I better keep my code hidden from you ;)
11:58:13 <shaleh> code review is beneficial
11:58:26 <xkb> true.. esp. when learning a language
11:58:31 <shaleh> we all benefit from it. Just like when people spilled red ink all over my essays in school.
11:58:39 <xkb> :D
11:58:47 <xkb> those ignorant people... :P
11:59:15 <shaleh> A common problem I see is people not expecting to be code reviewed
11:59:33 <shaleh> just the act of being ready for a review improves your code
11:59:53 <xkb> I do think, however, that codereviews should not be "programmer bashing"
12:00:06 <xkb> They should provide constructive comments
12:00:15 <xkb> not "haha.. look at yr lame ass code"
12:01:28 <Riastradh> I've unfortunately seen a considerable amount of code in such an awful state that nothing but that, or a politer version thereof, would be suitably applicable.
12:02:20 <shaleh> xkb: I agree on the face, however occasional humiliation can be beneficial as well
12:03:45 <xkb> hmm.. that may depend on the company culture..
12:04:12 <xkb> If you are rather "anonymous", i.e. you work in a large group
12:04:17 <xkb> It might work
12:04:36 <xkb> I'm thinking of inter-programmer relations..
12:04:55 <xkb> Depending on the culture it might improve the quality of code.
12:06:34 <opet> we do code infromal reviews at work, just between the programmers
12:07:02 <opet> it does improve code and speads ideas around, but it's hard not to feel targeted when it's your code on the podium :)
12:07:11 <xkb> kind of pair programming ..
12:07:11 <shaleh> indeed
12:07:33 <xkb> What do u guys think of pairprogramming anyway?
12:07:37 <shaleh> real pair programming would drive me mad
12:07:54 <xkb> me 2
12:08:14 <shaleh> a slighlty more decoupled form would probably be nice though
12:08:22 <xkb> My rate of typos rose exponential :D
12:08:40 <shaleh> 2, 3 man teams focused on a problem with near constant input / feedback from the others
12:08:50 <shaleh> but having two people and 1 keyboard -- no way
12:09:54 <SyntaxNinja> xkb: I like pair programming
12:09:59 <SyntaxNinja> have had many good experiences with it.
12:10:04 <shaleh> on the other hand it is probably harder to shirk work and sit on irc when forced to pair program. So my efficiency may actually improve (-:
12:10:21 <xkb> hehe
12:10:32 <shaleh> SyntaxNinja: physically in the same space or via irc/etc.?
12:10:46 <edwinb> I've done pair programming fighting over a keyboard. It can get quite tiring...
12:10:50 <edwinb> we probably weren't doing it right ;)
12:11:05 <xkb> edwinb, it reduces RSI, dont you think
12:11:17 <xkb> the fighting part..
12:11:17 <SyntaxNinja> shaleh: physically in the same space is really the definition, I think.
12:11:21 <edwinb> heh
12:11:29 <SyntaxNinja> not any two programmers can be paired, though.
12:12:13 <shaleh> I believe when it works it can be quite powerful. But at the same time I believe it failing would happen far more often
12:12:16 <edwinb> It was good, in that it was harder to skive for one thing.
12:12:39 <edwinb> But we only really tried it by accident...
12:14:05 <shaleh> food
12:14:08 <Marvin--> I did a lot of pair programming at Strakt, I loved it
12:14:40 <Marvin--> to the point where I get nervous when I'm working solo on something :)
12:15:06 <Marvin--> I hope I'm not annoying my colleagues *too* much with my requests to "hey, would you look at this for a sec?" all the time ;)
12:18:46 <SyntaxNinja> what I like about pair programming is this: while hacking, you have to make tons of decisions every day. it's hard to make decisions in a vacume and you are forced to either take a few minutes away from hacking to think about it, or wait on someone to take  a look at your code.
12:19:21 <Marvin--> exactly
12:19:38 <Marvin--> getting input and feedback is so incredibly important
12:20:23 <SyntaxNinja> I think that the idea of design documents is to help you make decisions and trade-offs, but they're usually not good enough, and it may very well be that just having another programmer nearby is good enough.
12:23:44 <Marvin--> well, design is important too, but not in a nail-everything-down sort of way, but more of a high level what-do-we-want-and-how-can-we-do-it way
12:24:21 <SyntaxNinja> yeah
12:37:00 <esap> I think it all depends on what you're doing. Doing something for a platform is very different than doing something to build applications.
13:08:58 <anduril1> http://cse.unl.edu/~sjanssen/funcand.hs
13:09:29 <anduril1> can anyone tell me what I'm doing wrong?  I'm trying to do logic ala Lambda Calculus, but the types aren't working out
13:11:14 <esap> it's not clear what you're trying to do. Note that you are trying to apply 'p' with two arguments, 'q' and '(\x y -> y)', neither of which really match the type.
13:18:33 <anduril1> okay
13:19:00 <anduril1> when I get rid of the types, it works like it should, I'm kind of having trouble articulating what I mean
13:19:25 <esap> try use ghci or hugs to ask what the type really is.
13:36:59 <anduril1> http://cse.unl.edu/~sjanssen/funcand.hs if you'd visit it again, it might be a little bit more clear what I'm trying to accomplish
13:50:59 <anduril1> well, apparently existential types are the answer to my problem, though I don't quite understand what they're doing for me
13:53:35 <esap> Existentials may or may not be what you want. You can make the code compile with them, but I'm still not sure they would be a good solution.
13:54:36 <anduril1> esap: what are the downsides of doing it this way?
13:55:34 <esap> Well existentials will hide the actual type. That is, you may have some trouble trying to extract it back.
13:56:57 <esap> Maybe what you need is just an algebraic datatype.
14:02:19 <anduril1> another thing, can existentials be instances of classes?
14:03:02 <shrimpx> ya, that's pretty much the only way they're elegantly useful
14:03:46 <shrimpx> data T = forall a.Show a => MkT a
14:04:13 <shrimpx> map show [MkT 0,MkT "blah",MkT 6.5]
14:04:20 <shrimpx> er no
14:04:38 <shrimpx> map (\(MkT s) -> show s) ...
14:05:42 <anduril1> I think what you're saying is that instances may be existential, where I want to say:
14:05:58 <anduril1> type MyE = forall x . x -> x -> x
14:06:15 <anduril1> instance Eq MyE where . . .
14:06:42 <shrimpx> hmm
14:11:41 <shrimpx> you can, but i dunno how you can make it useful
14:12:24 <shrimpx> since you can't "inspect" an existential package
14:15:05 <shrimpx> you could tag each existential package with a proper value, like an Int, and you can do comparison on that :) but that's hackish
15:38:33 <dan2> how do I grab the 'n'th number in a infinite sequence
15:38:47 <dan2> I tried take, but that took the whole sequence with it
15:39:17 <Cale> list !! n
15:40:11 <dan2> thats the !!?
15:40:22 <No-BAnN> hi
15:40:41 <dan2> Cale: and what module is that in
15:40:49 <Cale> the prelude
15:41:10 <dan2> hm
15:41:13 <dan2> that didn't work for me
15:41:32 <Cale> Prelude> [0..] !! 6
15:41:32 <Cale> 6
15:41:33 <dan2> print $ list (read a) fibs
15:41:52 <dan2> ?!
15:42:05 <dan2> Cale: I just want to grab the 'n'th from fibs
15:42:16 <Cale> what is "list"
15:42:56 <dan2> oh...
15:43:27 <Cale> (fibs !! n) should work
15:43:52 <dan2> thanks
15:46:14 <dan2> Cale: haskell has problems hitting the 200000 n in the fib sequence
15:46:26 <Cale> which problem in particular?
15:46:35 <dan2> --- SIGVTALRM (Virtual timer expired) @ 0 (0) ---
15:46:43 <Cale> hm?
15:47:07 <Cale> can I see your code?
15:47:10 <dan2> yeah
15:47:28 <dan2> import System
15:47:28 <dan2> fibs = 1 : 1 : zipWith (+) fibs (tail fibs)
15:47:28 <dan2> main = do { [a] <- getArgs;
15:47:28 <dan2>        print $ fibs !! (read a) }
15:47:49 <dan2> should I put that in ()?
15:48:02 <Igloo> The signal itself is normal I believe. If strace is dieing when you see it then try upgrading strace
15:49:17 <Cale> try running your program with something like "./fibs +RTS -K200M -RTS 200000"
15:49:34 <Cale> to give it a bit more memory
15:51:12 <Cale> that's actually overkill, but what the heck? :)
15:51:34 <Cale> probably somewhere around 2M would be enough
15:52:03 <dan2> Cale: my recursive loop fibonacci burns the fibonacci sequence
15:52:15 <dan2> Cale: ghc does a much better job optimizing it
15:52:31 <Cale> yeah
15:52:31 <Igloo> If you replace !! with something that seqs all previous list elements it ought to be constant stack space I think
15:52:56 <dan2> Cale: is ghc smart enough to detect loops?
15:53:24 <Cale> dan2: in many instances
15:53:33 <dan2> in this case -->
15:53:42 <dan2> import System
15:53:42 <dan2> fiba n f0 f1 = if n == 0 then f1 else fiba (n-1) f1 (f0 + f1)
15:53:42 <dan2> fib n = fiba n 0 1
15:53:42 <dan2> main = do { [a] <- getArgs;
15:53:42 <dan2>        print $ fib (read a) }
16:02:46 <Smerdyakov> dan2, what do you mean "detect loops"?
16:03:03 <dan2> Smerdyakov: optimize for loops
16:03:17 <Smerdyakov> Well, tail call optimization is a given for any functional language.
16:03:32 <Smerdyakov> I wouldn't think there'd be much else needed for your example.
16:10:21 <dan2> how do I make a while loop in haskell?
16:11:10 <Smerdyakov> You don't. Use recursion.
16:11:24 <Smerdyakov> I don't think there are any iteration constructs in the language.
16:12:09 <dan2> Smerdyakov: how would I do this then
16:12:43 <Smerdyakov> You can always transform any while loop into a recursive function.
16:12:52 <Smerdyakov> Its arguments are those variables that change in the course of the loop.
16:13:07 <No-BAnN> really strange this haskell with it's layout and all its bizarre stuffs
16:13:13 <dan2> Smerdyakov: but recursive functions aren't as efficient as an iterative loop
16:13:36 <Smerdyakov> dan2, that's a nonsensical thing to say. Recursive functions are language constructs, which have no inherent runtime properties.
16:13:49 <dan2> Smerdyakov: in C they burn...
16:14:01 <Smerdyakov> dan2, you deserve it if you are using recursion in C. :D
16:14:02 <jesse99> it's true for many implementations tho Smerdyakov
16:14:18 <dan2> I am assuming ghc is smart enough tho
16:14:20 <Smerdyakov> The point is that recursion is not inefficient with mature functional language compilers.
16:14:55 <Smerdyakov> All you need is tail call elimination to get acceptable performance, in most cases.
16:15:10 * Smerdyakov leaves.
16:19:38 <dan2> how do you do exception handling?
16:25:17 <jesse99> not very well :-)
16:25:34 <jesse99> there's an exception monad i believe
16:25:56 <dan2> jesse99: bummer, I want good exception handling
16:26:02 <dan2> jesse99: how well does the exception monad work
16:26:28 <jesse99> well it doesn't act as a control flow operator
16:27:25 <jesse99> exceptions are actually tricky to do in a functional language: if you treat them as non-local gotos you wind up exposing order of evaluation which can destroy referential transparency
16:28:27 <dan2> jesse99: hmm... but exceptions are generally necessary
16:28:48 <jesse99> i wouldn't disagree with you
16:29:03 <dan2> especially since you can't use return codes
16:29:11 <jesse99> you can use return codes
16:29:23 <jesse99> better than you can in c even
16:31:50 <dan2> hmm?
16:32:06 <dan2> return n?
16:32:25 <jesse99> you can return a tuple or use some sort of maybe type
16:33:41 <dan2> I can't return integers?
16:34:22 <jesse99> you can't have a function that does a side effect, so a function that only returns an error code is useless
16:34:52 <edwinb> You can do exception handling in the IO monad...
16:35:37 <edwinb> but otherwise error handling can be done perfectly well in any monad...
16:43:50 <dan2> jesse99: whats the syntax of |
16:44:44 <jesse99> i'm not a haskell expert...
16:46:23 <jesse99> the syntax for | was very simple as I recall tho
16:47:38 <dan2> I got it, thanks anyway
17:04:16 <Riastradh> jesse99, no, not in functional languages: in non-strict languages.
17:05:44 <jesse99> strict languages dont usually fix the order of evaluation
17:06:13 <Cale> sure they do, they're strict about it
17:06:13 <np_hard> ?
17:06:19 <np_hard> call-by-value
17:06:28 <np_hard> kind of hard to do that without the value
17:07:17 <jesse99> f(p(x), q(x)) my understanding is that strict language can evaluate p first or q first
17:07:24 <jesse99> or in parallel for that matter
17:24:13 <dan2> Cale: is there anyway to get Haskell to pre-alloc memory for my thing
17:26:05 <Jerub> jesse99: definately not in parallel in a strict language.
17:26:20 <jesse99> why not?
17:28:22 <Jerub> jesse99: in a strict language, for instance, C, p(x) would be fully evaluated, q(x) would be fully evaluated, and then f(r,s) would be evaluated.
17:28:31 <Jerub> jesse99: because there's a strict order of evaluatoin.
17:29:22 <jesse99> thats not what wiki says Jerub: http://c2.com/cgi/wiki?StrictEvaluation
17:29:31 <dan2> does anybody know how to do pre-allocation in haskell?
17:30:37 <Jerub> jesse99: uhh, its undefined.
17:30:43 <Jerub> jesse99: but I'm talking about a particular implementation.
17:31:09 <Jerub> jesse99: are you aware of the issues involved in concurrent programming?
17:31:37 <jesse99> yes, the order of evaluation is undefined so implementations are free to evaluate args in any order including in parallel
17:31:52 <jesse99> i'm aware of quite a few issues...
17:32:23 <Jerub> jesse99: okay, I'm actually quite confused at this point.
17:32:43 <Jerub> jesse99: I am not aware of any langauge that will evaluate args in parallel.
17:33:05 <Jerub> jesse99: I'm aware of many languages in which that would be a shockingly bad idea.
17:33:32 <Jerub> even erlang, which is designed from the ground up for concurrency doesn't spawn threads without being told to.
17:34:01 <jesse99> no kidding, but it's a theroritical possibility and might even be practical with some complexity annotations
17:34:34 <jesse99> some dataflow languages spawn of crazy number of threads
17:34:42 <jesse99> s/of/off
17:35:27 <Jerub> okay, dataflow. I don't actually know anything about those languages.
17:36:14 <jesse99> they dont seem too successful as yet, too much overhead from all the threads
17:36:15 <Riastradh> Jerub, strictness has nothing to do with _order_.
17:36:20 <Riastradh> Rather.
17:36:37 <Riastradh> Strictness has nothing to do with order in the flat structure of function & argument evaluation.
17:36:51 <Jerub> Riastradh: after doing some reading, I'm finding lots of interesting misconceptions I've had about the definitions here.
17:37:01 <Jerub> NormalOrderEvaluation looks kinda neat.
17:37:24 <Riastradh> Nested structures -- _entring_ a function -- are ordered, but the flat structure of evaluating a function & arguments is irrelevant to the meaning of 'strict evaluation.'
17:38:01 <Riastradh> Scheme, for example, leaves the order of function & argument evaluation unspecified; all it specifies is that it must be consistent with a sequential evaluation, i.e. none of that parallelized weirdness.
17:38:25 <jesse99> scheme is only mostly functional tho
17:39:00 <Riastradh> It doesn't matter.  Even if you made the store immutable except for allocation its argument evaluation rules would remain the same.
17:39:26 <jesse99> yeah but it's a lot harder for a compiler to use parallel evaluation if side effects are present
17:39:31 <Riastradh> OK, I'm off now.
17:39:51 <Riastradh> Parallelism is an entirely different matter, and R5RS prohibits it in argument evaluation.
17:43:59 <Jerub> jesse99: in my experience "functional" or "object oriented", etc, is a matter of the programmer, not the language ;)
17:44:59 <jesse99> a pure functional language opens up optimization opportunities to compilers that a non-pure language doesn't (without heavy and cross-module analysis)
17:45:06 <dan2> does _ANYBODY_ know how to pre-alloc memory for an integery
17:45:23 <jesse99> you dont manually manage memory in haskell dan
17:46:05 <dan2> jesse99: the reason this program is slow is because it spends most of its time allocating memory
17:47:01 <jesse99> well try to rewrite it so it allocates elss memory
17:47:15 <dan2> jesse99: thats kinda hard for a 42000 digit integery
17:47:18 <dan2> integer
17:47:42 <dan2> jesse99: unless there was a way to feed a 42000 digit integer ahead of time
17:47:54 <dan2> so memory is pre-alloced
17:58:10 <dan2> is there a for or while loop in haskell?
18:03:45 <jesse99> don't think so dan
18:04:45 <dan2> bah!
18:04:51 <dan2> so I can't create an iterative version to compete with
18:05:27 <jesse99> loops generally work via side effects, eg destructively updating a loop counter
18:16:24 <Smerdyakov> dan2, what, you didn't want to listen to me when I said "no" the last time? :P
18:16:30 <dan2> how can I do threads in haskell
18:17:43 <Cale> dan2: see the stuff in Control.Concurrent
18:19:32 <roconnor> I don't suppose I can compile Haskell to C.
18:21:44 <dan2> roconnor: sure you can, but not nice looking C
18:21:44 <Igloo> Not in the way you mean it, I suspect
18:22:00 <dan2> ghc -O -C foo.hs
18:22:13 <roconnor> I have this slight desire to enter top-coder and try programing in Haskell. *l*
18:22:28 <dan2> gcc -I/usr/lib/ghc*/include foo.hs -o foo -lgmp ...
18:23:56 <Smerdyakov> roconnor, MLton has a C backend. I don't know about Haskell compilers. :)
18:24:23 <Smerdyakov> roconnor, unfortunately, I think they have odd rules that disqualify you for purposeful obfuscation.
18:25:00 <Smerdyakov> roconnor, TopCoder exists to sell advertising space to big industrial employers, which means they couldn't care less about actual useful languages. :)
18:25:03 <roconnor> Hmm... I wouldn't call it purposefull obfuscation. ... I'll add the haskell code as a comment. :-)
18:25:28 <roconnor> Smerdyakov :-)
18:26:02 <roconnor> It strikes me that Haskell would be good for quickly writing correct ``simple'' programs.
18:26:24 <roconnor> If only I were any good a problem solving, which is probably more important than language choice.
18:26:55 <Smerdyakov> I wouldn't use the term "problem solving" here. All programming is problem solving.
18:27:05 <Smerdyakov> What gets me with TopCoder is the emphasis on combinatorial optimization problems.
18:28:31 <roconnor> Oh I agree all programming is problem solving.  I'm a little slow at solving problems compared to the TopCoders
18:28:51 <Smerdyakov> And, of course, we all know the dirty little secret that hardly anyone ever writes programs that solve combinatorial optimization problems.
18:28:59 <Smerdyakov> Despite the emphasis found in university CS programs
18:29:27 <Smerdyakov> There are many kinds of problems that show up in software development.
18:29:41 <Smerdyakov> I would say that problems of organization and design for understandability and reuse are far more important.
18:30:33 <Smerdyakov> I think my strengths are in that area, and my biggest weakness is in "classical" algorithm design problems.
18:30:48 <Smerdyakov> Which works out fine In Real Life, but not in these competitions. :)
18:30:55 <roconnor> yep
18:32:24 <Smerdyakov> We'll start our own instead, with these problems fixed. ;)
18:33:37 <roconnor> our own contest?
18:33:45 <Smerdyakov> Yes.
18:33:53 <Smerdyakov> The winner gets to carve his initials into saon's body.
18:34:09 <roconnor> sounds tough to judge
18:34:21 <saon> sounds like fun
18:35:17 <Smerdyakov> saon, who changes his nick every week. You can't throw our boys off the trail. We're watching you.
18:35:29 <saon> lol
18:35:41 <Jerub> roconnor: A complaint I have heard is that haskell is hard to write incomplete programs in.
18:36:09 <Igloo> incomplete programs?
18:36:17 <Jerub> Igloo: a program that isn't finished yet.
18:36:40 <Igloo> You just put undefined or error "Foo" in the bits you haven't written yet
18:38:09 <Smerdyakov> I think Jerub is referring to Haskell's poor support for the most common method of programming:
18:38:13 <Smerdyakov> Write random code and mutate it until it works.
18:38:26 <Smerdyakov> At least, this is the most common among university students!
18:40:34 <roconnor> Harsh words
18:42:26 <Smerdyakov> Oh, ask anyone else here who has helped teach a programming class.
18:42:52 <Jerub> Smerdyakov: me
18:43:49 <Smerdyakov> Jerub, thank you.
18:44:02 <roconnor> Jerub: You're opinion?
18:44:06 <roconnor> err
18:44:09 <roconnor> Your opinion
18:44:12 <roconnor> *sigh*
18:45:39 <Smerdyakov> Hahaha, roconnor fired as president of English club!!
18:46:14 <roconnor> Smerdyakov: My fingers have a mind of their own, and they don't know any grammar.
18:47:50 <roconnor> I have a feeling that this topcoder plan of mine isn't going to work.
18:48:05 <Cale> why wouldn't they allow code in Haskell?
18:48:10 <Smerdyakov> You'd need to get everything, garbage collector and all, into one source file.
18:48:29 <roconnor> It would be grand
18:48:30 <Smerdyakov> Cale, you have to use their Java IDE, which only supports a few languages that have MS compilers.
18:48:41 <Cale> that sucks
18:48:54 <Cale> why?
18:49:31 <Smerdyakov> Well, it's what they thought of first as a security mechanism, I guess. They run all submissions on their servers.
18:49:31 <roconnor> D'oh syntax error in Block.h
18:49:55 <Smerdyakov> The ol' "trusted compilers" plan.
18:52:26 <roconnor> Hmm Visual Studio .NET doesn't seem to like empty structures.
18:52:42 <roconnor> I need to get gcc
18:52:46 * Smerdyakov faints.
18:53:00 <Smerdyakov> It takes a brave man to admit here to not having gcc installed.
18:53:07 <Igloo> OK, if anyone is familiar with enigma (or oxyd, or whatever other names it has) and has a few minutes I'd be grateful if you could tell me if you can see anything wrong with this: http://urchin.earth.li/~ian/enigma/microban_132.html
18:53:16 <roconnor> If only I had my latop
18:54:40 <Smerdyakov> Igloo, I don't know anything about it, but it's a pretty picture.
18:55:20 <Igloo> The picture is not mine, sadly  :-)
18:56:08 <Cale> ah, solving enigma levels with Haskell eh? I've done that :)
18:57:40 <Cale> microban 137 is left out of my copy of enigma though
18:57:55 <Cale> oh, 132 -- hmm, let me check that again :)
18:58:45 <Igloo> It's number 94 in the Sokoban set
18:58:56 <Cale> yeah
18:59:01 <roconnor> *s* This game was implemented in the Coq proof system, just to prove that you could.
18:59:24 <Cale> you are aware that the oxyd stones are placed randomly
19:00:15 <Igloo> Yes - my problem is that I believe, both based on my logical deductions and the Haskell program I wrote on that page, that it is not possible to get the blocks onto the blue whatsits
19:00:20 <Cale> I suppose there's no way that could matter here
19:00:26 <Cale> yeah
19:29:16 * Igloo sighs as I fail to do a level I've already done and wonders if they've changed
19:40:39 <Igloo> Ah, no, that one was just me being a muppet
20:27:43 <dan2> Cale: whats the most simplistic way to create threads per connection in haskell
20:29:07 <Cale> probably calling forkIO
20:29:24 <Cale> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Control.Concurrent.html
20:29:47 <dan2> Cale: k
20:30:07 <dan2> Cale: but.. why not forkOS.. wouldn't it make more sense to use native threads?
20:31:53 <Cale> Perhaps, but read about them
20:32:22 * dan2 likes the haskell glorified threading system
20:33:13 <dan2> Cale: in haskell, can I use "6 a" syntax to multiply like Mathematica?
20:35:45 <dan2> whats a reccomended book for Haskell?
20:36:28 <dons> http://www.haskell.org/bookshelf/
20:37:36 <Cale> If you want a tutorial, I like "Yet Another Haskell Tutorial"
20:38:54 <dan2> nah, I need a testbook
20:38:57 <dan2> text even
20:39:41 <dan2> Cale: how do I return boolean values?
20:39:51 <Cale> it almost is a textbook
20:40:12 <Cale> return in what sense?
20:40:42 <Cale> the boolean values are called True and False
20:47:52 <dan2> Cale: a function that returns a value
22:07:52 <Cale> dan2: just like you'd return any other value, just say True or False.
