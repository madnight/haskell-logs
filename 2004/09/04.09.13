01:54:59 <Z> is there a channel for general functional programming questions?
01:59:13 <jesse> there arent many channels on freenode for general anything really, but here would probably be as good a place as any to ask 
02:03:10 <Z> ok. I want to write a set of functions that operate on a "text" string. Before any of these functions are fed the "text", it has to pass through a certain function (let's call it init()). Now in OOP I'd make an object and have all the functions as its methods. The "text" would be fed through a setAttribute() method and then the init() function would be process it.
02:03:26 <Z> What's the equivalet FP way of doing that?
02:04:49 <earthy> make a monad, bind it in the monad, have the attributes work on the monad
02:05:01 <earthy> that's the only way to enforce it
02:05:18 <Z> monad is haskell-specific, right?
02:05:20 <earthy> nope
02:05:30 <Z> which other languages have it?
02:05:31 <earthy> monads is just category theory
02:05:41 <earthy> Clean, Ocaml, ML, Scheme
02:05:58 <earthy> Haskell has support for monads in its stdlib though, Clean does as well I think
02:06:00 <earthy> the rest I don't know
02:06:06 <Z> Python doesn't
02:06:10 <earthy> anyway, time for breakfast
02:06:16 <Z> thanks for your help :)
02:06:20 <earthy> Python is not a functional language ;)
02:06:30 <Z> I don't think Lisp does either btw
02:06:43 <earthy> you may be right there ;)
02:14:17 <jesse> if you take out the object, and the setattribute portion, you are left with init, and the rest of the functions, which is how id model it, bar some special requirements, in a functional language
02:16:24 <Z> jesse: you mean you'd just add "text = init(text)" at the beginning of each function ?
02:17:40 <jesse> what exactly does init do first?
02:18:33 <Z> it might do something very simple, like remove whitespace from the beginning and end of "text"
02:18:58 <Z> that's what it does right now, in fact
02:19:11 <Z> later, I might add some more preprocessing there
02:23:46 <jesse> init is what sets text processing into motion though right?
02:24:21 <Z> no. init() does some basic processing of the text, which is common to all the functions in the set
02:24:37 <Z> i.e. all functions expect input without trailing whitespace
02:24:44 <jesse> ok, then yeah, text = init(text)
02:24:49 <Z> :)
02:24:53 <Z> that's what I thought
02:25:02 <Z> and what I was trying to avoid
02:25:21 <Z> adding that line at the beginning of every functions seems repetitive and ugly
02:25:31 <Z> not to mention I might neglect doing that
02:26:03 <jesse> you dont have to, you could pre-process the text prior to handing it off to the other functions
02:26:34 <Z> yes, like someFunc(init(text))
02:27:03 <Z> but, again, since basically I need to do that to _all_ functions, there's some redundancy here
02:30:40 <jesse> how is that different from the OOP approach?
02:31:27 <Z> jesse: conObj = Converter()
02:31:41 <jesse> ok
02:31:42 <Z> conObj.setText(text)
02:31:47 <jesse> alright
02:31:50 <Z> :)
02:32:30 <jesse> but there is no setText in the functional version
02:32:38 <Z> yes
02:32:46 <Z> but you do setText only once
02:32:55 <Z> conObj.setText(text)
02:32:57 <Z> then:
02:32:59 <jesse> only once for each peice of text
02:33:04 <jesse> like the functional version
02:33:16 <Z> conObj.conversion1)
02:33:22 <Z> conObj.conversion2()
02:33:25 <Z> etc.
02:33:57 <Z> jesse: even if there's only one conversion, it's still impossible to neglect running init() at the beginning
02:34:29 <jesse> conversion2(conversion1(init(text))
02:34:51 <jesse> and its impossible to neglect calling setText in your version
02:35:07 <Z> ok:
02:35:11 <jesse> or, the oop version
02:36:06 <Z> 1. even if there's only one coversion, you simply can't "forget" running the text through the init() function first, since setText() does it for you
02:36:36 <Z> 2. conversion2(conversion1(init(text)) is nice, but suppose I need the output of con1 and con2 separately?
02:37:05 <Z> conObj.dispCon1()
02:37:07 <Z> conObj.dispCon2()
02:37:11 <Z> does that nicely
02:38:55 <jesse> i still dont see why you would need to re-'init' the string between intermediate steps
02:39:46 <jesse> in the functional version
02:40:26 <Z> jesse: you don't need to reinit
02:41:05 <Z> oh
02:41:30 <Z> initdText = init(rawText)
02:41:38 <Z> then you can run the conversions
02:41:43 <jesse> yeah
02:41:57 <Z> the object contains the initdText
02:42:11 <Z> ie conObj.text = init(text)
02:42:23 <jesse> right
02:42:26 <Z> that's what conObj.setAttr(text) does
03:55:02 <shapr> d00d
05:15:37 <shapr> @yow !
05:15:38 <lambdabot> Is it 1974?  What's for SUPPER?  Can I spend my COLLEGE FUND in
05:15:38 <lambdabot>  one wild afternoon??
05:47:09 <xkb> j #subversion
05:47:11 <xkb> oops
06:54:20 <CoolPops> I am trying to start learning wxhaskell, but it's the first add-on I have ever put into haskell. I'm running gentoo and have wxhaskell-0.8 w/ghc 6.2.1 . A simple configure, make, make install says everything went ok, but when I compile a sample app (ghc Minimal.hs) it reports: Failed to load interface for `Graphics.UI.WXCore' .. Can anyone help me?
06:59:39 <Lemmih> @seen shapr
06:59:40 <lambdabot> I saw shapr leaving #haskell 1 hour 42 minutes 29 seconds ago.
07:04:44 <Lemmih> CoolPops: Must be a problem with the ebuild. I used the tarball from sf and it's running great (except in GHCi).
07:05:18 <CoolPops> Lemmih: of wxhaskell or ghc?
07:06:25 <SyntaxNinja> CoolPops: are you using the -package wx flag?
07:06:37 <SyntaxNinja> CoolPops: if you say "ghc-pkg -l" do you see wx?
07:06:47 <Lemmih> Heh (-: That could also be the problem
07:07:13 <CoolPops> SyntaxNinja: hold on a sec, recompiling wxhaskell. Will tell you when it's done.
07:16:18 <CoolPops> SyntaxNinja: Lemmih: I guess I spoke too soon. I removed all wxstuff from ghc, removed wxgtk, recompiled wxgtk and wxhaskell .. now things seem to be working.
07:17:34 <SyntaxNinja> cool.
07:18:58 <CoolPops> Lemmih: it even works in ghci :)
07:54:14 <Lemmih> CoolPops: Woah.
07:55:33 <Lemmih> CoolPops: Try running main twice.
07:57:45 <CoolPops> Lemmih: ah, ok.
09:29:48 <pesco> Ahoi!
09:36:47 <Lemmih> Hey
09:41:34 <musasabi> evening
09:43:49 <pesco> I'm learning to type with one Hand!
09:45:29 <Lemmih> That can hardly be productive.
09:46:15 <Lor> It's more productive than trying to type one-handed without learning how to do it.
09:48:25 <Igloo> trying to type one-handed /is/ learning how to do it
09:48:30 * CoolPops thinks it would depend also on how dependent you are to your mouse... for a graphic artist, it might be a good skill.
09:49:45 * Lemmih is still looking for HaskellDB developers.
09:51:28 * Igloo suspects you aren't trying to lure them with a competetive salary though, unfortunately
09:56:26 <Lemmih> Igloo: Actually I'm not looking for new ones. I wanna ask one of them if I've found a bug or just a weird feature.
09:56:33 <CoolPops> Does haskell have database libs?
09:58:50 <Lemmih> CoolPops: I'm quite fond of HSQL.
09:58:51 <cm_> CoolPops: http://haskelldb.sourceforge.net/
09:59:06 <cm_> For example, google is your friend ;-)
09:59:16 <Lemmih> But only when it's combined with HaskellDB.
09:59:19 <Smerdyakov> Lemmih, did you make anything that someone else would want to use yet?
10:00:37 <Lemmih> Yeah but I'm not proud of it.
10:02:46 <Igloo> Oh, right, completely misunderstood you then  :-)
10:04:37 <Lemmih> Smerdyakov: I even made enough money to buy me a new computer.
10:05:40 <Smerdyakov> Lemmih, from robbing hot dog stands?
10:09:32 <Lemmih> Smerdyakov: You shouldn't try so hard to get me down. I know I'm OK even tho I find it more fun to play around with some small library than completing some trivial but vital feature in a boring business system.
10:14:00 <Smerdyakov> Lemmih, the hot dog stands was just a joke. :D
10:47:55 <Igloo> Does anyone know where Marvin-- got to on gtk2hs debs?
11:26:55 <pesco> @seen pesco
11:26:56 <lambdabot> pesco is in #haskell.
11:28:28 <thebug> wasn't that mildly pointless? ;)
11:28:58 <pesco> Yes.
11:29:37 <thebug> /msg seenserv seen <nick> works as well :)
11:29:40 <thebug> 14:29 -SeenServ(SeenServ@services.)- pesco is on IRC right now!
11:30:17 <stepcut> @seen lambdabot
11:30:17 <lambdabot> Yes, I'm here
11:30:19 <stepcut> :p
11:30:24 <thebug> haha
11:38:45 <pesco> @seen pesco
11:38:45 <lambdabot> pesco is in #haskell, #moodswings, #fuckall, #anger and #hate.
11:39:08 <ne1> You need anger management.
11:39:15 <thebug> ha
11:40:21 <pesco> ne1: wadsat?
11:45:21 <Lemmih> @seen shapr
11:45:21 <lambdabot> I saw shapr leaving #haskell 6 hours 28 minutes 10 seconds ago.
14:32:14 <Boegel> officially 1337 ? what does that mean ?
14:37:03 <Boegel> awfully quiet here ... :|
14:38:33 <monochrom> shh
14:38:42 <Lor> boegel: http://www.megatokyo.com/index.php?strip_id=9
14:40:28 <monochrom> haha
14:41:51 <Boegel> I know what 1337 means
14:41:55 <Boegel> but
14:42:04 <Boegel> why is Haskell 'officially' 1337?
14:59:30 <Lemmih|Sleeping> @seen shapr
14:59:30 <lambdabot> I saw shapr leaving #haskell 9 hours 42 minutes 19 seconds ago.
15:26:07 <cptchaos> @seen pesco
15:26:07 <lambdabot> I saw pesco leaving #haskell 3 hours 3 minutes 55 seconds ago.
15:26:45 <cptchaos> @listcommand
15:26:45 <lambdabot> Sorry, I don't know the command "listcommand", try "lambdabot: @listcommands
15:26:57 <cptchaos> @listcommands
15:26:57 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
15:26:57 <lambdabot> ,"definitions","del-definition","det","devils","dict","dict-help","dummy
15:26:57 <lambdabot> ,"dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo
15:26:57 <lambdabot> ,"elements","eurohaskell","eval","foldoc","fortune","gazetteer","get-definition
15:26:57 <lambdabot> ,"goodbye","hello","hitchcock","index","info","jargon","join","karma","karma
15:26:58 <lambdabot> ","karma-","learn","leave","listchans","listcommands","listmodules","lojban
15:27:00 <lambdabot> ,"moo","more","msg","musasabi","part","prelude","quit","reconnect","resume
15:27:02 <lambdabot> ,"seen","set-fuel","shapr","state","stepcut","topic-cons","topic-init",
15:27:04 <lambdabot> topic-snoc","topic-tail","topic-tell","type","vera","web1913","wiki","wn
15:33:22 <stepcut> @stepcut
15:33:22 <lambdabot> juicy bits of code
15:33:24 <stepcut> :p
15:50:25 <dan2> stepcut: how do I get getArgs to put all its data into one array
15:50:41 * stepcut ponders
15:50:52 <stepcut> @type getArgs
15:50:57 <lambdabot> bzzt
15:51:23 <dan2> @type System.getArgs
15:51:24 <lambdabot> System.getArgs :: IO [String]
15:51:42 <stepcut> it is already a list, is an array better for some reason ?
15:52:30 <dan2> stepcut: I don't care, I just want to be able to grab the full list
15:52:42 <dan2> stepcut: and concatenate into one list
15:52:46 <dan2> erm string
15:52:57 <stepcut> ah, you want to turn the list into a string ?
15:53:27 <dan2> yeah
15:54:02 <Cale> well, that's easy enough to do
15:54:30 <Igloo> You won't get exactly what the user entered, though
15:54:37 <dan2> hmm
15:54:41 <Cale> right, but you don't have access to that
15:54:45 <Igloo> Nor can you with C etc
15:54:46 <dan2> heh
15:54:49 <Cale> only the shell does
15:55:03 <stepcut> do something like: getArgs >>= \a -> print $ intersperse " " a
15:55:23 <stepcut> rr
15:55:27 <dan2> basically in C you could iterate over argv with argc
15:55:51 <Cale> dan2: right, you can do that here too - getArgs gives you argv as a list of strings
15:56:09 <stepcut> liftM (intersperse " ") getArgs <-- shorter version
15:56:12 <dan2> ok
15:56:25 <dan2> stepcut: I don't want it to print that way
15:56:43 <abarrett> @yow
15:56:43 <lambdabot> My LIBRARY CARD expired...
15:56:53 <stepcut> yeah, the second version, returns a String intsead of printing it right away
15:57:12 <dan2> oh
15:57:13 <Igloo> argv is, loosly speaking, a list of strings. That's what getArgs gives you. I don't see what your problem is...
15:58:07 <dan2> stepcut: what library is intersperce and liftM in
15:58:24 <Igloo> List and Monad
15:58:24 <dan2> s/library/module/
15:58:26 <dan2> k
15:58:44 <Igloo> Or Data.List and Control.Monad perhaps I should say
15:59:41 <stepcut> yeah, what Igloo said
17:21:19 <dan2> @type Data.List
17:21:20 <lambdabot> bzzt
17:22:51 <monochrom> @info Data.List
17:24:22 <dan2> @info Control.Concurrent
23:20:18 <shapr> good morning #haskell!
23:21:10 <Pseudonym> G'day.
23:21:30 <shapr> g'day Pseudonym 
23:21:44 <shapr> hey, have you had a chance to look at the IOHCC entries?
23:22:26 <Pseudonym> Hang on, #iohcc.
23:41:11 <Pseudonym> Just wrote something interesting.  My brother is building a better mousetrap for a uni course.
23:41:18 <shapr> heh, neat
23:41:26 <Pseudonym> So now it can be queried via SNMP.
23:41:50 <Pseudonym> :-)
