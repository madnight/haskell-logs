01:12:12 <Lemmih> @seen bringet
01:12:12 <lambdabot> I haven't seen bringet
01:13:10 <Lemmih> @seen bringert
01:13:11 <lambdabot> I haven't seen bringert
01:17:02 <andersca> @arr
01:17:02 <lambdabot> This is the END for you, you gutter-crawling cur!
01:23:05 <musasabi> Is there any way to put an Int32 to a stream?
01:24:24 <musasabi> basically void hPutInt(int fd, int v) { write(fd, &v, sizeof int); }
01:28:14 <musasabi> or is hPutChar enough?
01:53:55 <Lemmih> Any haskelldb developers around?
02:17:20 <gpciceri> hi all, any HSQL guru here ? I'm having problems compiling 1.4. with mysql support
04:37:03 * Lemmih is greatly annoyed by missing/incorrect documentation.
04:52:05 <musasabi> Why is String so braindead?
04:52:17 <musasabi> Why couldn't they make it at least a newtype ?
04:54:59 <musasabi> Makes serializing very very painfull.
04:55:22 <musasabi> As one would like to support efficient strings and potentially cyclic lists.
04:59:42 <musasabi> c
05:43:43 <shapr> dan2: it's on sourceforge I think
05:43:55 <shapr> dan2: Dominic Steinitz and some other guy wrote it.
05:43:59 <shapr> for british airways I think
05:46:07 <shapr> g'day dons_
05:49:02 <esap> hmm.. is it possible to somehow distinguish total and partial functions in Haskell?
05:49:24 * esap thinks the answer is no.
05:49:40 * shapr can't tell them apart
05:49:49 <Lor> No.
05:50:09 * esap wants that feature.
05:50:18 <Lor> Termination analysis?
05:50:29 <esap> no, just syntactic way to distinguish them.
05:50:56 <Lor> Well duh, if you want it to be a reliable one, you need some way of checking that something declared to terminate really does.
05:52:36 <esap> Well I guess what I really want is that the compiler require me to prove such termination, if I declare that.
05:53:24 <esap> In some cases, that might be hard.
05:54:04 <Lor> Not when you can live with a conservative enough approximation.
05:54:40 <Lor> There's a very simple form of effect system that effectively forbids all recursion. I've mentioned to you about it.
05:54:50 <esap> Right. I guess the amount of conservatism would be just based on what you can prove.
05:54:52 <Lor> And then of course you could support primitive recursion.
05:56:28 <Lor> (Provided you don't have cyclic data structures.)
05:57:34 <esap> I think it's simple to do that for cyclic data structures as well [assuming limited resources].
05:58:39 <Lor> Uh, how?
06:01:26 <esap> ok, this requires some work with pullbacks. You just use 'fst' and 'snd' operation on the pullback, that takes you to a resource. Then if you have a relation between a cyclic data structure and one of its representations, you can build projections from the resource to its representations [pullback does that already behind the scenes]. But the amount of resources itself can be restricted.
06:02:57 <esap> say, given a pullback A x_C B, you have a function fst : A x_C B -> A|C   and A x_C B -> B|C  where 'A|C' means a subtype of A that has a shared portion 'C'.
06:04:02 <Lor> Gah. I should have already learned that talking with you invariably brings up pullbacks and adjunctions...
06:04:18 <Lor> I really really should find the time to learn about them (and category theory in general).
06:04:22 <esap> hehe I always talk about the relationship between OO and FP, which is pullbacks and adjunctions :-)
06:04:43 <esap> and duality.
06:05:50 <esap> the reason is that pullback specifies a "subtype of a product", which is, by other name, an UML association. Which is obviously related to OO.
06:06:20 <Lor> A subtype (-set?) of a product is a relation.
06:06:35 <esap> exactly.
06:06:38 <Lor> All right.
06:06:49 <esap> UML association is a relation.
06:07:04 <esap> and 'classes' in OO languages are also relations.
06:13:36 <esap> btw, another thing I just realized is that pushout is related to algebraic data types.
06:34:46 <esap> Hmm.. where can I find description of semantics for type classes for kinds other than '*'? I don't currently understand their semantics well enough.
06:35:22 <Lor> Didn't Faxen develop a complete static semantics for H98?
06:35:33 <Lor> It's rather hairy, though.
06:35:49 <esap> good point, I'll look at that.
06:44:08 <musasabi> btw why is an empty set not a category? (that is why is the smallest category C={1} (with Mor_C = { id: 1->1 } ) ? Or is it just an arbitary decision?
06:44:41 <Lor> That's a singleton set.
06:45:35 <Lor> Where is it said that that is not a category?
06:46:20 <musasabi> Well {1} is an category but why is {} not a category?
06:47:02 <musasabi> or does the definition of id cause that the set cannot be empty?
06:47:57 <Lor> No, you just need an identity morphism for each object.
06:48:11 <musasabi> As I see it id is just defined as \forall c \in C id c = c, which is not problematic with empty sets.
06:49:05 <esap> the empty set is an initial object of the category of sets and mapping between sets.
06:51:04 <musasabi> is it possible to have a category with no objects?
06:51:11 <musasabi> and if not why?
06:51:24 <Lor> I don't see why not.
06:52:15 <esap> I think any such category would have to be an initial object of 'Cat'. So assuming Cat has an initial object, I guess an empty category exists.
06:52:55 <Lor> That's sounds really backwards.
06:53:32 <esap> heh :-)
06:53:37 <esap> you're right.
06:56:33 <Lor> From PlanetMath: "Some examples of categories: 0 is the empty category with no objects or morphisms, 1 is the category with one object and one (identity) morphism."
06:57:21 * esap thinks a lot in terms of Cat, since for some reason for me that's the simplest approach to understanding the structure of categories.
06:57:48 <Lor> So Asperti and Longo's book seems a bit inaccurate.
06:58:13 <Lor> If they assume nonemptiness for some practical reason, they at least ought to mention it.
07:00:37 <musasabi> thanks ^_^
07:03:36 <Lor> The empty category is probably not particularly interesting, though.
07:04:09 <Lor> Nor is an empty topology.
07:05:18 <esap> Empty category might be useful as a way to describe arbitrary categories [there is a unique functor from the empty category to every category].
07:37:36 <dan2> is there a standard configuration parser for haskell
07:56:19 <dan2> how do I use hat
07:58:02 * musasabi likes buddha (but it lacks support for fffi)
07:59:47 <Igloo> There's an example on its webpage (www.haskell.org/hat/ IIRC)
08:04:28 <dan2> Igloo: hmm, hats doesn't like to work with ghc6 does it
08:05:49 * dan2 pulls a cvs version of hats
08:05:52 <dan2> hat
08:26:02 <shapr> nothing up my sleeve
08:27:02 * shapr pulls a rabbit out of his hat
08:31:18 <dan2> shapr: heh, hat doesn't work at all with ghc
08:31:43 <shapr> hmm, seems to work in debian
08:31:53 <dan2> Im on debian
08:32:11 <shapr> you using hat-ghc6 ?
08:32:15 <dan2> yep
08:32:21 <shapr> what doesn't work?
08:32:35 <shapr> oh, you're probably using some of the ghc extensions?
08:33:43 <dan2> no I am not
08:34:02 <shapr> I know hat works by automagically transforming the module source into an instrumented version
08:34:03 <dan2> Hat/fib.hs:1:
08:34:03 <dan2>     Ambiguous type variable `a' in the top-level constraint:
08:34:03 <dan2>       `Num a' arising from use of `hfib' at Hat/fib.hs:69
08:34:03 <dan2> Hat/fib.hs:1:
08:34:03 <dan2>     Ambiguous type variable `a1' in these top-level constraints:
08:34:03 <dan2>       `Num a1' arising from use of `hfib' at Hat/fib.hs:69
08:34:05 <dan2>       `Ord a1' arising from use of `hfib' at Hat/fib.hs:69
08:34:08 <dan2>       `Read a1' arising from use of `hread' at Hat/fib.hs:69
08:34:37 <dan2> import System
08:34:37 <dan2> fiba n f0 f1 | n > 0 = fiba (n-1) f1 (f0 + f1)
08:34:37 <dan2>              | otherwise = f1
08:34:38 <dan2> fib n = fiba n 0 1
08:34:40 <dan2> main = do { [a] <- getArgs;
08:34:42 <dan2>        print $ fib (read a) }
08:34:49 <shapr> ah
08:34:57 <shapr> give a type to that read
08:35:03 <dan2> shapr: ?
08:35:09 <dan2> shapr: whats that mean
08:35:24 <dan2> shapr: type signature?
08:35:25 <shapr> @type read
08:35:26 <lambdabot> read :: forall a. (Read a) => String -> a
08:35:41 <dan2> @type fib
08:35:41 <Igloo> Can you put the entire source somewhere we can see it?
08:35:42 <lambdabot> bzzt
08:35:47 <dan2> Igloo: I just pasted it
08:35:58 <Igloo> Oh, duh. Thanks.
08:36:00 <shapr> dan2: thing is, read is a typeclass
08:36:11 <shapr> it lets you turn a string into a 'real' value
08:36:24 <shapr> question is, should that value be a char, an int, a float, another string, or what?
08:37:12 <Philippa_> that reminds me of one of the things to do with my dissertation if I have time - add System O-style overloading
08:37:13 <Igloo> Oh, probably the translation wraps a up so it isn't in class Num any more or something
08:37:33 <dan2> ======  In file: fib.hs:
08:37:33 <dan2> 6:17 Found (.) but expected a {-end-of-definition-or-EOF-}
08:37:47 <dan2> (line where read type signature was added)
08:38:07 <shapr> Igloo: right, so an explicit type sig should fix that
08:38:11 <dan2> @type main
08:38:12 <lambdabot> bzzt
08:38:18 <shapr> @type bzzt
08:38:19 <lambdabot> bzzt
08:38:31 <dan2> @type Control.Concurrent.forkOS
08:38:32 <lambdabot> Control.Concurrent.forkOS :: IO () -> IO GHC.Conc.ThreadId
08:38:57 <Igloo> shapr: But it also shouldn't happen  :-)
08:39:03 <shapr> Igloo: oh, sure
08:39:26 <dan2> shapr: hat complains about the read definition, now what
08:39:58 <dan2> @type Network.Socket.socket
08:40:00 <lambdabot> Network.Socket.socket :: Network.Socket.Family
08:40:00 <lambdabot> 			 -> Network.Socket.SocketType
08:40:00 <lambdabot> 			    -> Network.Socket.ProtocolNumber -> IO Network.Socket.Socket
08:40:10 <dan2> @type Network.Socket.bind
08:40:11 <lambdabot> bzzt
08:40:20 <dan2> @type Network.BSD.bind
08:40:21 <lambdabot> bzzt
08:40:26 * dan2 beats lambdabot 
08:40:36 <dan2> @type Network.listenOn
08:40:37 <lambdabot> Network.listenOn :: Network.PortID -> IO Network.Socket.Socket
08:40:59 <dan2> shapr: so how do I deal with that type signature
08:41:04 <dan2> @type Network.PortID
08:41:05 <lambdabot> bzzt
08:41:19 * dan2 thinks he finally understands type signatures
08:41:26 <dan2> last thing is the return value
08:41:34 <dan2> everything preceding is arguments?
08:41:51 <dan2> @type Network.accept
08:41:53 <lambdabot> Network.accept :: Network.Socket.Socket
08:41:53 <lambdabot> 		  -> IO  (GHC.IOBase.Handle,
08:41:53 <lambdabot> 			  Network.BSD.HostName,
08:41:53 <lambdabot> 			  Network.Socket.PortNumber)
08:42:36 <dan2> shapr: explicit type sig don't work?
08:42:46 <shapr> should
08:42:50 <dan2> it isn't
08:42:54 <shapr> what does your code look like right now?
08:42:59 <dan2> hat-trans barfs all over it
08:43:08 <shapr> hmm
08:43:10 <dan2> import System
08:43:10 <dan2> fiba n f0 f1 | n > 0 = fiba (n-1) f1 (f0 + f1)
08:43:10 <dan2>              | otherwise = f1
08:43:10 <dan2> read :: forall a. (Read a) => String -> a
08:43:10 <dan2> fib n = fiba n 0 1
08:43:10 <dan2> main = do { [a] <- getArgs;
08:43:14 <dan2>        print $ fib (read a) }
08:44:46 * shapr hacks on Dan2.hs
08:45:31 <shapr> dan2: oh, not that kind of type sig...
08:45:35 <shapr> just a moment
08:46:39 <shapr> dan2: print $ fib (read (head a) :: Int) }
08:47:12 <dan2> shapr: I fixed it by giving fib a type signature
08:47:17 <shapr> fair enough
08:47:34 <shapr> I just did head a to get the first arg, and :: Int to say that read should return an Int
08:48:25 <dan2> assuming this is the correct type signature for fib... fib :: Integer -> Integer
08:48:42 <shapr> well, you can load the file into hugs or ghc and see what it infers
08:49:08 <dan2> how would I see what it infers?
08:49:16 <dan2> shapr: it should only be Integer anyhow
08:49:27 <dan2> it won't work on a floating point number
08:49:29 <shapr> do you use emacs?
08:50:58 <dan2> yes
08:51:16 <shapr> do you use haskell-mode to edit your haskell sources?
08:51:30 <dan2> I actually prefer to use jed
08:51:36 <dan2> because I can't stand using emacs haskell-mode
08:51:40 <dan2> I can't get the indentation right
08:51:43 <shapr> oh
08:51:53 <shapr> yah, it does weird stuff with indentation, I agree.
08:51:57 <shapr> even so, I generally use it.
08:52:05 <shapr> one nice haskell-mode feature is C-c C-l
08:52:13 <dan2> hmm
08:52:16 <dan2> fiba :: forall a a1. (Ord a, Num a, Num a1) => a -> a1 -> a1 -> a1
08:52:40 <dan2> Integer -> Integer -> Integer -> Integer makes much more sense
08:52:50 <shapr> assuming you've done M-x turn-on-haskell-ghci, then C-c C-l will dump your source into ghci
08:52:56 <dan2> ahh
08:52:59 <dan2> I just used
08:53:01 <dan2> ghci fib.hs
08:53:04 <dan2> :info fiba
08:53:09 <shapr> also try :t fiba
08:53:25 <shapr> in fact, the @type command on lambdabot just dumps the source into ghci and runs :t
08:53:48 <dan2> ahh
08:54:08 <dan2> a forall type signature to fib isn't all that great
08:54:09 <shapr> useful ghci commands are :t or :type
08:54:16 <dan2> esp since its not a recursive function
08:54:22 <shapr> :info or :i
08:54:30 <shapr> there's browse which can be useful too
08:54:36 <shapr> I do wish ghci had @index
08:55:20 <dan2> shapr: can making a correct type signature optimize your code
08:55:44 <shapr> yes it can
08:55:56 <shapr> but you don't need to worry about most of the time
08:56:14 <dan2> isn't Integer -> Integer -> Integer -> Integer more appropriate then the definition ghci gave for fiba
08:56:38 <shapr> sure
08:56:43 <shapr> if you like that :-)
08:56:59 <dan2> shapr: what would you suggest?
08:57:15 <shapr> I'd suggest leaving off as much of type sigs as you can leave off and still get your code to work
08:57:25 <shapr> have you used Python or Perl before?
08:58:00 <dan2> yes
08:58:02 <shapr> One advantage of those languages is that dynamic typing makes code changes a lot easier than manifest typing such as Java has.
08:58:03 <dan2> major python fan
08:58:06 <shapr> me too
08:58:27 <shapr> obviously, Java and C make life difficult when you want to change the type of a variable
08:58:39 <shapr> because you have to make everything explicit all the time, no other choice
08:58:44 <dan2> shapr: but I wanted to make fibonacci functions stricter, otherwise float number would mess it up
08:59:05 <shapr> I call Haskell 'compile-time dynamic typing' because it can guess 99% of the type signatures for you.
08:59:22 <shapr> so you get strong points of both worlds, Python and C/Java.
08:59:39 <shapr> well, try it with a float number
09:00:40 <dan2> shapr: it doesn't work, because no fib number is float
09:01:08 <shapr> ok, so you want to limit it to only using Int and Integer, right?
09:02:05 <shapr> dan2: http://www.haskell.org/onlinereport/basic.html scroll down to "standard haskell classes"
09:03:50 <dan2> shapr: ok
09:03:52 <shapr> dan2: do understand typeclasses to some degree?
09:04:50 <shapr> the simple answer is: fiba :: (Integral a) => a -> a -> a -> a
09:05:26 <dan2> hm
09:05:33 <dan2> I understand now
09:06:31 <shapr> the longer answer explains type signatures and typeclasses, if you don't already understand them.
09:06:33 <dan2> shapr: what did that do for me
09:06:44 <shapr> have you used Java?
09:06:53 <shapr> are you familiar with Java interfaces?
09:06:58 <shapr> greetz Si\, wassup?
09:07:02 <dan2> yes, I have been programming java for a while
09:07:12 <shapr> Si\: how's the XML type tricks going?
09:07:15 <dan2> but not so much with java intergaces
09:07:29 <Si\> working well, but I've got a few problems
09:07:34 <shapr> dan2: you know what 'implements Serializable' means?
09:07:49 <dan2> shapr: the word Serializable still puzzles me
09:08:03 <Si\> firstly, does anyone know if Array has an instance of Data anywhere?
09:08:11 <shapr> dan2: actually, the word means "able to become a single stream of single bits"
09:08:21 <dan2> shapr: oh
09:08:36 <dan2> shapr: but implements generally means fills in the blanks 
09:08:42 <dan2> (Objective-C)
09:09:08 <dan2> an inteface is like a function definition
09:09:13 <dan2> int foo (int a)
09:09:19 <shapr> or like a contract, sort of
09:09:22 <dan2> right
09:09:33 <shapr> and that's mostly what typeclasses are for
09:10:13 <shapr> a typeclass often specifies an operation, and you can make a type do that operation long after the fact
09:10:35 <shapr> for example, the Eq typeclass is for equality
09:10:58 <shapr> it's one of the basic typeclasses in that pretty picture I pointed you to
09:11:30 <shapr> so, for something like http://www.scannedinavian.org/AvianWiki/HaskellDemo
09:11:40 <shapr> data Season = Winter | Spring | Summer | Fall
09:11:51 <shapr> you could make an Eq instance that looks like
09:12:13 <shapr> instance Eq Season where
09:12:27 <shapr>     Winter == Winter = True
09:12:33 <shapr>     Spring == Spring = True
09:12:40 <shapr> (two more that you can do yourself)
09:12:46 <shapr>     _ == _ = False
09:13:05 <shapr> dan2: doesn't that look a lot like a Java interface, or Objective-C 'implements' ?
09:13:22 <dan2> kind of
09:13:34 <dan2> only its more flexible
09:13:41 <shapr> another typeclass is the Ord or 'orderable' typeclass
09:13:42 <dan2> because data can be of more than one type
09:13:47 <shapr> dan2: you got it
09:14:03 <shapr> dan2: also, you can define an instance years after both the type and the class have been defined on different contents
09:14:11 <shapr> 'continents'
09:14:38 <Riastradh> (it's an Objective-C 'protocol,' by the way)
09:14:46 <dan2> Riastradh: I know :)
09:15:04 <shapr> the most basic part of the Ord typeclass is the 'compare' function
09:15:14 <Riastradh> Yes, but apparently shapr didn't.
09:15:23 <shapr> but the whole Ord typeclass has "class (Eq a) => Ord a where" as part of the type sig
09:15:29 <shapr> Riastradh: I didn't, thanks for the info
09:15:49 <dan2> shapr: so, after I put in a type sig for fiba, I checked fib's inferred type sg
09:16:00 <dan2> fib :: forall a. (Integral a) => a -> a
09:16:02 <shapr> dan2: the => thingy means "your guy a has to already be an instance of that other typeclass or we won't even look at him"
09:16:25 <shapr> obviously, you can't see if two things are orderable without being able to test for in/equality
09:16:42 <shapr> so, to be an instance of Ord , you must already be an instance of Eq
09:16:54 <shapr> the Integral typeclass includes two types, Int and Integer
09:17:30 <shapr> dan2: spiffy, looks like it works
09:17:35 <dan2> shapr: :)
09:18:37 <shapr> typeclasses have advantages and disadvantages compared to Java interfaces (probably similar comparison with ObjC's protocol)
09:19:31 <shapr> in general, I prefer typeclasses, but in general I'm biased towards Haskell, so take it with a grain of salt ;-)
09:21:46 <Smerdyakov> It's rarely the case that Haskell type classes buy you anything over ML functors, and I think the latter has less of a habit of invading the type system.
09:23:00 <dan2> shapr: why is -> fibs = 1 : 1 : zipWith (+) fibs (tail fibs) drastically more inefficient than my recursive fibonacci function
09:23:48 <shapr> that's a good question, have you tried to profile them both?
09:23:52 <Lor> It shouldn't.
09:24:04 <dan2> shapr: like fibs !! 200000 is MUCH slower than fib 200000
09:24:12 <dan2> Lor: must be memory being thrown around
09:24:13 <Lor> (And the first fib is 0, not 1, dammit)
09:24:29 <dan2> Lor: bah
09:24:47 <dan2> shapr: its only speculation that ghc optimizes the loop and not the sequence
09:25:25 <shapr> dan2: apt-cache show ghc6-prof
09:26:08 <shapr> greetings vidvandre 
09:26:21 <shapr> @info Array
09:26:26 <vidvandre> hi
09:26:26 <shapr> @index Array
09:26:27 <lambdabot> Data.Array,Data.Array.Diff,Data.Array.IArray,Data.Array.Unboxed,GHC.Arr
09:26:27 <lambdabot> GHC.Arr,Array
09:26:33 <shapr> @info Data.Array.Array
09:26:35 <lambdabot> -- GHC.Arr.Array is a type constructor
09:26:35 <lambdabot> data (GHC.Arr.Ix i) => GHC.Arr.Array i e
09:26:35 <lambdabot>     = GHC.Arr.Array !i !i (GHC.Prim.Array# e)
09:26:48 <shapr> hm
09:26:53 <shapr> shouldn't it show instances there as well?
09:27:27 <shapr> @index Data
09:27:27 <lambdabot> Data.Generics,Data.Generics.Basics
09:30:09 <Smerdyakov> Doesn't GHC save all the intermediate results with the second definition, but not the first?
09:30:17 <Smerdyakov> (for fibs)
09:34:16 <anduril1> dan2: what does your recursive fib look like?
09:35:27 <dan2> anduril1: scroll up, I alraedy pasted it
09:35:52 <dan2> <dan2> fiba n f0 f1 | n > 0 = fiba (n-1) f1 (f0 + f1)
09:35:52 <dan2> <dan2>              | otherwise = f1
09:36:38 <dan2> shapr: 1min 15 seconds for fibs, and 8.54 seconds for recursive fib
09:37:26 <Smerdyakov> Did y'all see what I just said?
09:37:49 <dan2> Smerdyakov: what does that mean?
09:39:00 <anduril1> dan2: how does "fibs = 0:(scanl (+) 1 fibs)" compare to the others?
09:39:38 <dan2> anduril1: that's not an equivalent fibs
09:39:46 <norpan> it may be slower because ghci caches the result from top-level functions with no arguments
09:39:48 <dan2> anduril1: because that starts at 0
09:40:00 <dan2> norpan: I compiled it then ran
09:40:09 <anduril1> dan2: okay, give it a one at the beginning instead
09:40:42 <Smerdyakov> dan2, imagine that your recursive function kept around a list of past values instead of just the last two.
09:40:49 <Smerdyakov> dan2, that's what the recursive list version does.
09:40:54 <Smerdyakov> dan2, unbounded memory usage.
09:42:31 <dan2> Smerdyakov: yes, I created a C version that burned the haskell version
09:42:39 <dan2> Smerdyakov: preallocated memory (using gmp)
09:42:53 <norpan> ghc optimizes tail recursion pretty well
09:43:20 <dan2> Smerdyakov: there is no reason to keep around any results older than the last two
09:43:46 <norpan> not sure how extensively it can optimize list usage like that
09:44:06 <dan2> anduril1: 2minutes 5 seconds
09:44:51 <Smerdyakov> dan2, but, of course, there is: The 'fibs' identifier is still in scope, so later code may want to access selected elements of it.
09:47:54 <norpan> try fibb n = let fibs = 1:1:zipWith (+) fibs (tail fibs) in fibs!!n
09:48:03 <norpan> so that it won't cache fibs
09:48:29 <norpan> maybe it can optimize better then
09:52:38 <dan2> norpan: if its not caching then it will be slower still
09:52:50 <dan2> norpan: because then it has to recalculate the previous two values
09:57:06 <norpan> it will cache those values of course
09:57:49 <norpan> while the value is in use it will not garbage collect it or allow an optimization to throw the value away
09:59:48 <dan2> norpan: doesn't seem to be compatible
09:59:59 <dan2>     Couldn't match `[a]' against `Int -> a1'
09:59:59 <dan2>       Expected type: [a]
09:59:59 <dan2>       Inferred type: Int -> a1
09:59:59 <dan2>     In the first argument of `(!!)', namely `fibb'
09:59:59 <dan2>     In the second argument of `($)', namely `(fibb !! (read a))'
10:00:35 <dan2> oops
10:00:37 <dan2> now I see what I did
10:00:38 <dan2> :)
10:02:44 <dan2> norpan: it overflows the stack
10:04:33 <dan2> nevermind
10:05:36 <andersca> hello mr norpan
10:06:45 <dan2> norpan: 1 min 27 seconds
10:09:30 <dan2> norpan: tail recursion optimization is the best atm
10:09:38 <dan2> norpan: if only I could make an iterative version in haskell
10:17:36 <norpan> tail recursion will be optimized into an "iterative" version
10:24:04 <Riastradh> What most imperative programmers think of as 'iterative' is merely a restriction of what recursion can permit.
10:29:37 <dan2> norpan: I see
10:30:33 <Si\> Does anyone have any idea whether there's anyway of defining an instance of Data for Array?
10:36:02 * shapr looks at Data.Array
10:37:25 <dan2> is there a difference between Int and Integer?
10:37:39 <dan2> Int bounded or something
10:37:41 <Lor> Int is bounded.
10:37:45 <dan2> ok
10:39:30 <shapr> Si\: Array is already an instance of Typeable at least
10:41:14 <shapr> I don't immediately see how to define gfoldl for Array, but it sounds like it shouldn't be too scary.
10:42:37 <shapr> Si\: hey, Data is deriviable with 6.2.1
10:42:42 <shapr> er 'derivable'
10:43:08 <dan2> is there anything where I can time the processing of a function in haskell
10:43:12 <shapr> Si\: for starters you can probably throw 'deriving Data' into GHC.Arr somewhere
10:43:17 <dan2> lieke gettimeofday from C
10:44:06 <shapr> @index getClockTime
10:44:06 <lambdabot> System.Time,Time
10:44:13 <vidvandre> I almost managed to compile ghc.. except this time it complains about missing libreadline.4
10:44:23 <shapr> vidvandre: are you on Solaris?
10:44:53 <Si\> you can only derive Data with algebraic data-types not magic types
10:45:00 <shapr> oh
10:45:02 <shapr> foo
10:45:15 <vidvandre> shapr: no, linux, (archlinux).. trying to make an archlinux package for it
10:45:44 <shapr> ah, ok. I know GHC building on Solaris has troubles linking to readline, though I forget exactly why.
10:46:05 <vidvandre> I have libreadline.5 but not .4
10:47:39 <Si\> I also think someone ought to go through and add ext[2..5][T,M,Q,R] or even better extN[T,M,Q,R] with TH
10:53:57 <shapr> Happy Programmer's Day! http://en.wikipedia.org/wiki/Programmer%27s_Day
10:55:22 <andersca> shapr: did you know that next sunday it's talk like a pirate day
10:55:32 <shapr> YAY!
10:55:36 * shapr cheers happily
10:55:44 <shapr> I'll set lambdabot to auto@arr every five seconds
10:55:47 * shapr laughs
10:55:57 <shapr> @arr
10:55:58 <lambdabot> Prelude.(!!): index too large
10:55:59 <shapr> oops
10:56:11 <shapr> hm, I guess I don't have the latest code running.
10:56:27 <Igloo> What are ext*?
10:58:20 <Si\> extR, extQ, extT, ext1R, ext1Q, ext1T etc.
10:58:24 <dan2> Igloo: ahh, you maintain those haskell packages don't you
10:58:38 <shapr> Igloo is famous.
10:58:52 <Igloo> Yes
10:58:57 <Igloo> Si\: But what do they do?
10:59:05 <shapr> @index extQ
10:59:05 <lambdabot> Data.Generics,Data.Generics.Aliases
10:59:10 <shapr> @type Data.Generics.extQ
10:59:11 <lambdabot> Data.Generics.extQ :: forall q a b.
10:59:11 <lambdabot> 		      (Data.Typeable.Typeable b, Data.Typeable.Typeable a) =>
10:59:11 <lambdabot> 		      (a -> q) -> (b -> q) -> a -> q
10:59:27 <dan2> whats the best way to daemonize a haskell program
10:59:32 <Si\> btw. notice that HXT has finally been properly integrated into the hierarchical library :D
10:59:37 <dan2> @index daemon
10:59:37 <lambdabot> bzzt
10:59:44 <shapr> Si\: yes, I was happy to see that. Did you do that?
10:59:50 <shapr> dan2: there's code on the wiki to do that.
11:00:05 <Si\> I did, well almost they did make a few sensible changes
11:00:27 <shapr> they being Uwe, right?
11:00:37 <Si\> Igloo: ext* are used to switch been various functions depending on the type of the argument
11:00:39 <Si\> correct
11:01:03 <shapr> Si\: oh hey, I built a new website with Halipeto. I really like Halipeot.
11:01:05 <shapr> Halipeto
11:01:17 <dan2> whats the best way to parse a configuration file?
11:01:23 <shapr> new website --> http://www.scannedinavian.org/
11:01:34 <Si\> Well once I've finished my XML serializer I hope everyone is gonna start using it
11:01:39 <shapr> dan2: there are several config parsers around
11:01:57 <Si\> it essentially allows any data-type to be serialized with just a call to the serialize function and it's fully expandable
11:02:02 <shapr> first one that comes to mind is inside ginsu, John Meacham's Gale client
11:02:17 <shapr> Si\: does it work for more that just XML?
11:02:26 <shapr> actually, I guess XML-only would be fine too
11:02:43 <shapr> I think that would give me cross-RTS Chans
11:02:46 <dan2> shapr: which one do you prefer
11:03:20 <Si\> no, it's just an XML serializer
11:03:41 <Si\> I've abandonned the HAIFA approach for now, I'm not qualified enough to properly create it
11:03:51 <shapr> dan2: I don't remember the details of all the offerings off the top of my head. I do know that the ginsu code is in regular use, so it's likely solid. On the downside, you'd have to pull it out of ginsu, I don't think it's distributed separately.
11:04:02 <shapr> Si\: from the messages on the list, seems no one else is either :-)
11:06:17 <shapr> dan2: oh yeah, Cabal has a config parser.
11:06:22 <shapr> that's probably a good place to start.
11:06:25 <shapr> hoi wouter 
11:09:21 <shapr> hiya stepcut 
11:09:48 <stepcut> hey
11:09:56 * stepcut is reading 'Applicative translucent functors in Haskell'
11:12:35 <stepcut> shapr; i finally looked into the halipeto -- i think I am going to try using it for the static portions of my upcoming website
11:12:46 <shapr> oh, did you see my halipeto website?
11:12:51 <shapr> http://www.scannedinavian.org/
11:12:53 <shapr> it's cool!
11:14:42 * stepcut is check out the site
11:16:07 <shapr> the graphics still have some cheesy bits, but it's not bad for a first hack.
11:16:28 <stepcut> heh
11:16:33 <shapr> it's a modification of the halipeto demo site
11:17:05 <stepcut> http://www.scannedinavian.org/output/sv/languages.html
11:17:25 <shapr> yah, lots of flaky bits on the swedish side
11:18:01 <shapr> andrew is interested in simplifying the layout parts, where fewer files are needed to define site structure.
11:18:40 <stepcut> the whole left navigation thing in general seems a little flakey
11:18:59 <shapr> yah, I agree
11:19:09 <shapr> I couldn't think of anything better off the top of my head though.
11:20:24 <shapr> any ideas?
11:20:59 <stepcut> well, it is just a bit confusing
11:21:02 <shapr> I had great fun making the graphics, they look really nice for being ten minute hacks.
11:23:13 <shapr> actually, it looks a lot confusing.
11:23:28 * shapr hacks on the menu
11:24:40 <stepcut> in unrelated news, mysql released 4.1.4 gamma, ~2 weeks ago, I wonder if that means a final release is really soon now
11:24:48 <shapr> stepcut: on the good side, all the weird bits are actually in the actual website, halipeto itself is really elegant.
11:25:01 <stepcut> hehe
11:25:15 <shapr> four days till IOHCC results are released
11:25:16 <shapr> yay!
11:25:19 <stepcut> :P
11:25:57 <shapr> When bringert and Pseudonym show up, we can have a final discussion and maybe put the results up early.
11:26:03 <stepcut> cool
11:26:56 <Smerdyakov> How coincidental. Your notification date is suspiciously close to POPL's.
11:28:05 <stepcut> I wonder if there is a IUPCC...
11:28:18 <shapr> ?
11:28:23 <Smerdyakov> I Use Proof-Carrying Coded
11:28:34 <stepcut> international unobfuscated perl code contest
11:28:36 <shapr> oh
11:28:44 <shapr> I think people get money to do that.
15:42:52 * shapr hops
15:43:03 <dons> heya shapr
15:43:35 * shapr bunnyhops on his unicycle
15:43:38 <shapr> g'day dons 
15:49:07 <Lemmih> shapr: Unicycling at this hour?
15:49:19 <shapr> no, not really.
15:49:33 <shapr> earlier today, but not now.
15:55:14 <Lemmih> shapr: Been looking at my query?
15:57:48 <shapr> Lemmih|Sleep: won't have time to look at it before tomorrow
15:58:02 <shapr> swedish homework now, and swedish class tommorrow morning
16:55:35 <dan2> is ghc --make better than hmake
16:59:14 <dons> hmm.. tricky question
16:59:45 <dons> ghc --make means you can get away without installing an extra tool
17:00:22 <dons> whereas hmake works with arbitrary Haskell compilers
17:00:22 <dons> most ghc users never use hmake. but nhc users love hmake
17:02:28 <dan2> dons: does ghc --make do dependency solving as well
17:02:48 <dons> that is its main function
17:03:13 <dons> ghc also has -M, which generates a Makefile fragment of dependency info
17:03:19 <dan2> dons: I love ghc, and I want its threads; Is there anyway for me to get away without this libgmp3 dependency
17:03:20 <dons> that was what we had before --make came along
17:03:58 <dons> ghc requires libgmp. but if you don't want an external dependency, then build ghc from scratch and have it use its own in-tree gmp
17:05:57 <dan2> dons: k
17:08:53 <dan2> dons: is that like throwing in a static libgmp in every build?
17:09:10 <dan2> dons: size is a problem here
17:09:47 <Pseudonym> Size doesn't matter, it's how you use it.
17:12:46 <dons> yes, it gets linked statically. doesn't really matter considering how big the ghc rts already is
17:13:21 <dons> you're stuck with libgmp, so you may as well use the system version
17:15:55 <dan2> dons: how do you use intree gmp
17:18:21 <dons> it is enabled by default if ./configure can't detect an external version
17:19:08 <dons> so you'd have to uninstall libgmp, or trick configure some how
17:20:17 <dan2> heh
17:29:54 <dan2> dons: how would I statically link gmp
17:32:44 <dons> if you use the in-tree gmp, it happens automatically
17:34:04 <dons> otherwise you'd need to tweak ghc/rts/Makefile link the external gmp statically (instead of the in-tree version)
18:58:37 <dan2> is there a haskell pastebin
19:02:14 <Pseudonym> @wiki HaskellIrcPastePage
19:02:14 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
19:16:02 <Jerub> dan2: you confused me earlier.
19:16:42 <Jerub> dan2: you're on #python, #haskell and #gaim. you made me mix up which window was which.
19:18:06 <dan2> Jerub: heh
20:35:01 <det> Jerub: And for a second I thought this was #twisted, you hypocrite :p
20:35:21 <Jerub> det: hah! 
20:35:36 <Riastradh> Man, you guys are confusing.  All I ever see you guys in is #haskell, so my brain is totally weirded out when I see you here!
20:35:40 <Riastradh> ...oh, wait.
20:35:44 <Riastradh> What channel is this?
20:36:12 * Riastradh wanders back whence he came, mumbling incomprehensibly.
21:27:02 <musasabi> morning
22:56:09 <pesco> Good Morning!
22:56:32 <pesco> @seen shapr
22:56:32 <lambdabot> shapr is in #haskell, #darcs, #haskell.se, #webwitches, #haskelldb and 
22:56:32 <lambdabot> joy.
22:56:43 <pesco> Ah, he's back! Yay!
22:57:52 <pesco> It is 07:56 local time. I'm HIGH ON A HAPPY VIBE.
