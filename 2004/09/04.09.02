01:36:26 <musasabi> What is the nice way of saying (\a b -> f b a) ?
01:41:15 <kaol> musasabi: flip?
01:41:48 <kaol> @info flip
01:41:53 <lambdabot> -- flip is a variable
01:41:53 <lambdabot> flip :: forall a b c. (a -> b -> c) -> b -> a -> c
01:43:31 <musasabi> yep
01:44:58 <musasabi> Why cannot one show/read or gshow/gread TypeReps ?
01:46:09 <musasabi> that is one cannot read them and one cannot gshow them.
03:44:09 <XTL> puuh
03:51:42 <basti_> pubuh?
04:03:13 <musasabi> Is there a good example diff implementation in haskell? 
04:35:30 <Igloo> darcs has one, but witha different algorithm to that of diff
04:37:46 <musasabi> is the darcs one O(n^2) or O(N+D)
04:38:09 <Igloo> No idea
04:40:16 <XTL> basti_: A kind of sigh.
04:40:25 * XTL has finally moved.
04:40:50 <XTL> Milling around the university, looking for stuff. Maybe I even managed to order a dsl line home.
04:41:53 * XTL goes hunting for some food
06:14:32 <Igloo> Can anyone translate this python for English to me please?
06:14:32 <Igloo> def eq(x):
06:14:33 <Igloo>     return lambda y,z=x: y == z
06:16:22 * edwinb boggles
06:16:40 <edwinb> Ah!
06:16:55 <arjanb> looks like someone wanted currying in python
06:17:06 <edwinb> x is a tuple, yes? So it just returns whether the arguments are equal
06:17:59 <edwinb> Is there an obfuscated python code contest on?
06:18:46 <Igloo> This is a util from GHC's testsuite. I still don't see how I should be parsing it (I don't know python's syntax other than what I've picked up from reading the testsuite code)
06:19:31 <edwinb> hmm
06:20:05 <edwinb> I'm told it's the same as "return lambda y: x==y"
06:21:16 <Iter> Igloo, that's an old idiom.  Python didn't use to have proper closures.
06:21:48 <Iter> def eq(x):  return lambda y: y == x   now works, but it didn't in the past.
06:22:03 <Iter> I think that changed with python 2.2, but I'd have to check release notes.
06:22:17 <Iter> It might have been 2.1 or even 2.0
06:22:37 <Igloo> Ah, OK, ta
06:23:15 <Iter> and yes it would be the same as currying equality, and python dosn't have currying :(
06:23:56 <Iter> Jerub is a good person to ask python questions of.  Although it's 2330 in .au, so he's probably inactive.
06:27:41 <Igloo> I don't suppose anyone has a chunk of code handy to replace "return os.system( cmd )" with "return the equivalent of os.system( cmd ) but kill it (and return failure) if it (and its children) use more than x seconds of CPU time"?
06:30:01 <Iter> Igloo, wrote it once for an employer, but didnt' get to keep it :(
06:30:22 <Igloo> :-(
06:30:43 * Igloo wouldn't have thought something that small would be copyrightable, but IANAL etc etc
06:31:11 <Iter> it was part of a larger work.
06:31:32 <Igloo> Ah, right
06:32:16 <Iter> and these days I could probably patent it just by specifying it was written in python rather than C :( :(
06:33:27 <Igloo> heh
10:59:40 <SyntaxNinja> quiet today
10:59:48 <basti_> yes.
10:59:52 <shrimpx> ya
11:00:08 <Lemmih> @yar
11:00:08 <lambdabot> Sorry, I don't know the command "yar", try "lambdabot: @listcommands"
11:00:16 <musasabi> evening
11:00:55 <Lemmih> @arr
11:00:55 <lambdabot> Eat maggoty hardtack, ye unkempt, jenny frequentin', son of a gun.
11:01:32 <SyntaxNinja> <heresy>is there any way in Haskell to create a program with events & listeners like in Java?</heresy>
11:02:32 <basti_> SyntaxNinja IORef Functions?
11:03:14 <Lemmih> listeners?
11:03:33 <basti_> like "Callback Functions"
11:03:40 <SyntaxNinja> basti_: I'm picturing a little more framework, I think.
11:04:16 <basti_> hmm or, Classes that have something like a "processEvent :: Event -> IO()"
11:04:39 * musasabi remembers that there were some papers on that
11:05:42 <SyntaxNinja> I guess I basically want a dynamic collection of functions that listen for events and alter a global blackboard
11:05:59 * stepcut ponders
11:06:42 <musasabi> data Event a = E [a -> IO ()]; signal Event a -> a -> IO (); signal (E l) v = mapM_ (\f -> f v) l
11:07:32 * SyntaxNinja nods
11:07:49 <musasabi> addEvent (E l) handler = E (handler : l)
11:08:48 <Lemmih> When is Happy more appropriate than Parsec?
11:09:33 <musasabi> that has one drawback though - you cannot delete handlers from the list - for that you would have to make it an alist and use a unique-name generator...
11:12:33 <lambdabot> topic doesn't parse
11:13:06 <SyntaxNinja> Oo
11:15:26 <lambdabot> topic doesn't parse
11:15:55 <SyntaxNinja> what is lambdabot talking about?
11:16:17 <basti_> about the topic, which doesn't parse.
11:16:46 <SyntaxNinja> I can't see what's wrong with it, but then again, I'm not a parser :)
11:17:05 <Lemmih> ghci thinks the topic is fine.
11:19:45 <Lemmih> What would be recommend for a Prolog parser, Parsec or Happy?
11:20:27 * SyntaxNinja slightly prefers Happy but can't really justify it :) I've just had more success with it.
11:21:06 <Lemmih> s/be/you/
11:41:00 <cptchaos> Lemmih: I prefer Parsec, since I find it easier to create good errormessages with it. (And it has quite good default error messages)
11:43:22 <Igloo> I find it easier to write a quick correct parser quickly in happy. I haven't cared about error messages yet, really
11:44:34 <cptchaos> Igloo: right, but I am currently writing an real world parser, and changed form Happy to parsec for that reason
11:45:04 <cptchaos> but just writing a parser is quicker in Happy I think.
11:45:31 <cptchaos> but it is not such a big difference
11:51:26 <SyntaxNinja> it also makes a difference if you already know lex / yacc
11:52:06 * esap wonders what's the dual of garbage collector?
11:52:32 <musasabi> hmm?
11:52:36 <musasabi> dual?
11:52:42 <esap> as in category theory duality.
11:52:43 <Igloo> heap allocator?
11:52:51 <esap> igloo: I think not. I'
11:53:02 <esap> igloo: I'd say a scheduler would be closer.
11:53:16 <ski> why ?
11:53:23 <esap> Because time is dual to space.
11:54:21 <esap> At least that sounds right :-)
11:54:21 <ski> it is ?
11:54:39 <cptchaos> that could be an physical statement.
11:54:42 <esap> Think of the duality between /\ and \/.
11:54:54 <ski> esap : is this related to your Adjuction class example 
11:54:55 <ski> ?
11:55:25 <ski> esap : do you mean physical time and space (like 1 + 3 dimension (or maybe more)) ?
11:55:28 <esap> ski: yes, I guess you mean  _ \/ _ -| Copy(_) -| _ /\ _  
11:56:07 <esap> ski: well I mean in the sense used in complexity theory (e.g. PSPACE vs. P)
11:56:19 <ski> esap : i mean @hawiki PreludeExtsUseExamples
11:56:51 <ski> good evening esap and #haskell, btw
11:56:53 <esap> ski: yes, that's it. If you use the adjunction twice, you get duality.
11:57:13 <esap> ski: as in the above, _ \/ _ and _ /\ _ are duals, but '-|' represents adjunction.
11:57:28 * ski 's not sure what PSPACE is ?
11:57:46 <ski> yeah
11:58:07 <esap> PSPACE is the set of all problems that can be solved in polynomial space. P is the set of all problems that can be solved in polynomial time.
12:01:22 <ski> oh
12:01:22 <ski> ok
12:01:50 <ski> (me associated SPACE with function space, which proved to be worng)
12:05:25 <esap> Ok, anyway, the reason why space and time are duals is that if you look at /\ and \/, which are clearly dual, then /\ is a mechanism for specifying (type for) two distinct locations in space, whereas \/ is a mechanism for specifying (type for) two distinct instances of time.
12:05:50 <basti_> -?-
12:06:02 <basti_> mh
12:06:11 <ski> not sure about that
12:06:38 <ski> are you thinking mostly of additive or multiplicative /\ here ?
12:06:43 <ski> ;)
12:07:00 <esap> Consider algebraic data types. data A = X Int | Y Float is clearly a data type that specifies two instants of time, one where you have value of type Int and another where you have a value of type Float.
12:07:14 <basti_> ah
12:07:22 <ski> hmm, ok for the discuss.
12:09:02 <esap> Then a pair, say, data P = P { val1 :: A, val2 :: B } is two values, one that can be accessed via destructor 'val1' and another that can be accessed via 'val2'. It's kind of dividing one big value into two parts (val1 and val2), so division based on space.
12:10:28 <esap> Now, in reality, to have absolute duality, you'd have to use the categorical product and coproduct.
12:10:30 <ski> ok, multiplicative /\ then, prolly
12:10:56 <ski> (and the \/ is additive)
12:11:04 <esap> yes.
12:11:22 <ski> so the dual of (additive) \/ is additive /\
12:11:37 <esap> what do you mean?
12:11:50 <basti_> preferences i think
12:11:51 <ski> think of continuations
12:12:13 <esap> what's the difference between additive /\ and multiplicative /\?
12:12:18 <ski> oh
12:13:05 <esap> It's discriminated union (coproduct) and a pair (where elements are distinct).
12:13:09 <ski> this distinction arises in linear logic (or in relevant or affine (or generally substructural)), i believe
12:13:46 <ski> so, with a linear type system you can(must) use each value exactly once
12:14:20 <esap> ok
12:14:23 <ski> so to use a value of multiplicative /\ type, you must use both parts (e.g. adding two numbers)
12:14:54 <ski> and to use a value of additive \/ type, you must decide/choose exactly one component to use
12:15:02 <ski> arg
12:15:21 <ski> s/"additive \/"/"additive /\"/
12:16:21 <ski> (to use a value of additive \/, you just check which form it is in, and use the contained value inside that constructor/injection)
12:16:22 <ski> ok ?
12:16:28 <esap> ok. I think I understand it now.
12:16:50 <ski> so additive \/ is dual to additive /\
12:17:28 <esap> The product I'm thinking of doesn't have a requirement to use each value exactly once. You can use any number of times.
12:17:31 <ski> in \/ the choice is already made by the provider (cf. "opponent in game theory), in /\ you make the choice
12:17:58 <ski> (multiplicate \/ is harder to get intuitive feeling for ;)
12:18:38 <ski> ok
12:19:29 <esap> I'd say multiplicative \/ would be a coproduct where you must extract both values, and it'll raise an exception for the case where the value wasn't there.
12:19:40 <ski> then, i guess to be fully symmetric, you should also allow a continuation of (multiplicative :) \/ type to be used as many times as wanted
12:20:26 <ski> (but the continuations must not necessarily be appearent at the surface of the lang, i think)
12:20:47 <ski> hmm
12:21:26 <basti_> wtf?
12:24:32 <esap> ski: Ok, but what do you think, do you agree that time and space are duals?
12:24:51 <esap> or that my justification for that is any good? :-)
12:24:51 <ski> for some definitions of time and space, maybe
12:25:07 <ski> it makes sense in a sense :) somewhat
12:26:07 <esap> I guess it's discrete time and space anyway.
12:26:08 <ski> (i'm not totally sure though about calling them time and space. at least not in close analogue to physical such)
12:26:27 <ski> that doesn't matter as much, i think
12:28:11 <esap> Yea, physics has three space dimensions and one time dimension. It's somewhat harder to define such dimensions when you're discussing storage/memory space and time as measured by computer's clock.
12:29:11 * esap is totally ignoring modern theories about time and space.
12:30:08 * ski has played a little with the idea of an (imperative) language with two-dimensional time ..
12:31:31 <basti_> BEFunge?
12:32:20 <ski> haven't looked at that, so can't tell
12:32:29 <basti_> more of a joke.
12:32:33 <basti_> the language.
12:32:43 <basti_> for certain values of humor
12:32:49 <ski> it's a turing tar-pit iirc
12:33:30 <basti_> i think so.
15:20:52 <np_hard> :)
15:56:52 <roconnor> People do crazy things in lazy languages.  I don't know how Richard Bird comes up with those algorithms
15:57:15 <stepcut> heh
15:58:29 <roconnor> problem, take an infinite stream of things, group them into groups of size n, and apply a given permutation to each group of n items
15:59:16 <roconnor> solution, group the stream into groups of size n, transpose, apply the permuation ONLY ONCE, transpose.
15:59:27 <roconnor> insanity!
15:59:38 <ski> sounds fun
16:12:06 <Lor> Ah. Neat.
16:13:24 <Lor> Did this have some tangible advantage over mapping?
16:13:59 <roconnor> doing the permunation is expensive.  It is basically a sort, so require at least N log N steps.  Best to do it only once.
16:15:00 <roconnor> mapping would require running the permulation on each block of size N.
16:15:34 <roconnor> so the mapping solution is O(M log N) where M is the length of the stream, and N is the size of the blocks.
16:16:07 <roconnor> Bird's solution with the transpose is O(M + N log N)
16:16:37 <Lor> Righto.
17:16:37 <np_hard> has anyone read "the algebra of programming?
17:22:23 * ski would like to
17:44:58 <wagle> i keep meaning to
17:45:46 <wagle> it keeps moving to the top of the stack of "books to read next", but never quite manages to get popped
17:45:52 <wagle> 8) 8/
17:48:24 <Pseudonym> http://homokaasu.org/gematriculator/
17:48:27 <Pseudonym> catki.no-ip.org/c++ (memo LIM to add info) ||
17:48:36 <Pseudonym> Whoops.
17:48:47 <Pseudonym> Interestingly, http://www.haskell.org/definition/ is almost pure goodness.
17:49:41 <Pseudonym> But then so is http://www.zib.de/benger/C++/, so what does it know.
17:50:15 <ski> fun!
17:59:16 <wagle> aww.. man!  i cant find the text of the necronomicon online
18:01:07 <kaol> evil.com was 93% good.
18:02:16 <ski> www.chulhu.org is only 46% evil :(
18:02:38 <ski> bah
18:02:44 <ski> www.cthulhu.org
18:04:01 * wagle knew someone in the US navy who translated the necronomicon into elvish and then through it overboard for the USSR ship shadowing them to pick up
18:04:24 <wagle> s/through/threw/
18:04:34 <Pseudonym> OK, that's funny.
18:06:22 <Pseudonym> www.subgenius.com is 97% good.
18:06:26 <Pseudonym> We know something is wrong here.
18:46:11 <ski> parting ..
19:14:34 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","Donate your brain! - hawiki/UsingHaskellWikiMaterial","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/hawiki/EuroHaskell","May 2004 HC&AR: http://www.haskell.org/communities/","http://www.haskell.org/cabal/"]'
19:14:34 --- topic: set by shapr on [Fri Jun 25 02:34:22 2004]
19:14:34 --- names: list (clog ksandstr ihb zruty kyagrd GreyLensman Cale Pseudonym Joachim_ roconnor esap monochrom gabor_ flaw psi gnufan opet juhp sorje ozone lambdabot arjanb tic shawn [dan] polli Pinnen Lunar^_ cmeme XTL andersca np_hard Lemmih flori musasabi ibid shammah wagle shrimpx det sisko isomer CLxyz Fractal thebug mattam kaol Smerdyakov Lor earthy asmodai Igloo Taaus eshu Hipo dennisb norpan Riastradh arauko dons anduril1 rc51 edwinb)
20:05:25 <stepcut> i swear I am going to find a use for arrows someday
20:07:12 <Riastradh> Yeah...like hunting or something.  Shooting them at circular targets down ranges can get boring at times.
22:18:10 <shammah> stepcut: Fruit?
22:19:00 <stepcut> haven't played with it yet
22:37:26 <stepcut>  oh oh oh!! I might get to use MonadReader
22:41:34 * stepcut goes to bed dreaming of Control.Monad.Reader
22:53:06 <Pseudonym> Do stepcuts dream of reader monads?
23:25:34 <musasabi> morning
23:44:02 <Pseudonym> G'day.
