05:37:14 <TeRRoriSsima> hi folks
05:37:27 <TeRRoriSsima> anyone saw ski?
05:37:57 <Lemmih> @seen ski
05:38:35 <TeRRoriSsima>  @seen ski
05:38:38 <TeRRoriSsima> @seen ski
05:39:55 <Lemmih> The lambdabot is gone.
05:41:11 <TeRRoriSsima> :)
05:42:25 <TeRRoriSsima> when we get parser1 +++ parser2
05:42:46 <TeRRoriSsima> and parser 1 fails in second action, did first one count?
05:43:17 <Lor> "count"?
05:43:30 <TeRRoriSsima> means
05:43:46 <TeRRoriSsima> if string is abcd
05:44:47 <TeRRoriSsima> parser 1 = char'a' ; char 'd'   +++   parser2 = char'a' ; char 'b'
05:45:22 <TeRRoriSsima> eating char 'a' by first parser will it take effect on second
05:45:37 <Lor> Depends on your parser. :)
05:45:59 <Lor> Is this with parsec? Or something else?
05:46:14 <TeRRoriSsima> ParseLib
05:46:37 <TeRRoriSsima> Parser
05:46:42 <Lor> Ah. Don't know about that. But if it is a monadic library, then it most likely generates LL(1) parsers.
05:46:51 <Igloo> The easy way to find out is to try it
05:46:55 <Lor> And hence it must disambiguate with one symbol of lookup.
05:47:16 <Lor> So your example wouldn't work.
05:47:33 <ibid> some of them are infinite lookahead
05:47:34 <Lor> (Hopefully you'll get an error already when creating the parser.)
05:47:59 <Lor> Personally, I like deterministic parser combinators more.
05:48:46 <TeRRoriSsima> when parser1 fail will it give only "bcd" ?
05:49:07 <Lor> Hopefully not.
05:49:31 <TeRRoriSsima> so it will give "abcd"?
05:49:40 <Lor> Your string shouldn't parse.
05:49:47 <TeRRoriSsima> great :)
05:49:51 <Lor> If the grammar is S -> ad | ab
05:50:14 <Lor> No, sorry.
05:50:26 <Lor> You should get "ab" only, with "cd" left unparsed.
05:50:43 <Lor> _If_ the parsers support more than one symbol of lookahead.
05:50:49 <Lor> (Or, alternatively, backtracking)
05:51:02 <ibid> left-factoring is simple enough
05:51:12 <ibid> iirc even algorithmic
05:51:18 <Lor> I wish some library did it automatically.
05:51:30 <Lor> UU_Parsing does, of course.
05:51:39 <ibid> UU_Parsing?
05:52:04 <Lor> Swierstra and Duponcheel's deterministic parsing combinators.
05:52:13 <TeRRoriSsima> i don't bother about cd left unparsed
05:52:19 <ibid> not really haskell related, but...: http://www.mit.jyu.fi/antkaij/quadmachine/ :)
05:52:55 <TeRRoriSsima> just want to know if after the OR parser2 will get same as what parser2
05:53:45 <Lor> Try It Out.
05:54:00 <Lor> It depends on how the library is written.
05:58:32 <Lor> ibid, how can you program the machine if you cannot store temporaries either in the stack or in registers?
06:00:48 <ibid> Lor: you can store temporaries in either data memory, zero memory (equivalent to Unix bss segment) or in the stack
06:10:31 <TeRRoriSsima> I defined parser1 :: Parser String
06:10:46 <TeRRoriSsima> when I call parser1 "somestring"
06:10:51 <TeRRoriSsima> it gives error
06:11:01 <Lor> Have you read any of the documentation for that library?
06:11:50 <TeRRoriSsima> some
06:12:05 <Lor> Well, the documentation no doubt says how to invoke the parser.
06:12:55 <TeRRoriSsima> papply
06:26:39 <Lor> ibid, btw, did you notice that ICFP '05 is in Tallinn?
07:32:33 * ski almost thought he'd gotten a mail from the HSU
08:15:31 <XTL> Humdidum
08:30:00 <no-bann> i finished my game with haskell
08:32:38 <Boegel> hello everybody
08:41:12 <Philippa> no-bann: cool - what kind of game?
08:41:33 <Philippa> I've been meaning to have a go for ages but not got round to it
08:46:05 <no-bann> mod-x
09:26:21 <Lemmih> no-bann: Using hopengl?
09:28:39 <no-bann> what?
09:36:50 * ski sighs
10:37:35 <stepcut> let's say I have a branch, main, and another branch, extras, and I am doing some development where I have merged main and extras in my working directory, and then made some changes. Now I want to commit my *changes* back to main, but *not* the merging in of extras. Is that possible? Or do I need to create a third branch that has main and extras merged ??
10:39:57 <Lor> Naming the version control system in question might increase your chances of getting a useful reply.
10:40:19 <Riastradh> Come on, Lor.  Where's your telepathy?
10:40:44 <Lor> Defunct, apparently.
10:40:46 <stepcut> ack, wrong channel :)
10:42:17 <stepcut> but, just in case, arch/tla :)
10:43:08 <Lor> All right. That would probably have been only my fourth guess or so. :)
10:44:11 <Lor> (No, I don't know anything about arch.)
10:58:25 * Philippa curses
10:58:32 <Philippa> hs-plugins has posix dependencies...
11:03:07 <Lor> Well, it requires _something_ like dlopen.
11:04:24 <stepcut> what is an easy way to just dump the headers for a query via http? kinda like curl -D, except that wants to download the whole file, not just the headers
11:04:34 <Philippa> makes it useless for those of us on a win32/mingw setup though
11:05:31 <Lor> There's probably something like dlopen for win32, too, though most likely much harder to use.
11:05:52 * Lor has heard that w32 dlls are a pain in the ass.
11:05:56 <Philippa> yep, that sounds like win32 to me...
22:43:46 <Gahhh> what is CiteSeer, Cale ?
22:45:11 <ibid> citeseer.org
22:46:57 <Gahhh> nifty
22:47:03 <Jerub> Gahhh: LEARN ABOUT CITESEER
22:47:09 <Jerub> *cough*
22:47:10 <Jerub> sorry.
22:47:11 <Gahhh> aaargh
22:47:14 <Gahhh> heh np
22:47:20 <Jerub> its one of those things that I didn't find out until I was in 3rd year uni.
22:47:39 <Gahhh> could be worse. I graduated a while ago.
22:49:04 <Cale> Gahhh: are you asking because of my post to the haskell mailing list?
22:50:31 <Gahhh> yeah
22:50:51 <Gahhh> I am not the guy who asked the question. I just didnt know what citeseer was
22:52:11 <Gahhh> imo, he was hoping for something like java doc, html with frames with member methods crosslinked, etc.
22:57:12 <Cale> Apart from the lack of frames, is that not like the GHC library documentation?
23:00:04 <Gahhh> it's a little light on text
23:01:21 <Gahhh> you may have seen my post on haskell-cafe regarding naming conventions
23:01:41 <Gahhh> stuff like "data Array i e" is really cruel on newbies
23:02:36 <Gahhh> I don't mean to say haskell needs as much verbiage as java
23:02:45 <Gahhh> but this page has only one line of english:
23:02:46 <Gahhh> http://www.haskell.org/ghc/docs/latest/html/libraries/base/Data.Array.html#t%3AArray
23:03:11 <Cale> That's described in the report anyway
23:03:24 <Cale> but I suppose they could have at least the report text there
23:03:32 <Cale> http://www.haskell.org/onlinereport/array.html
23:04:00 <Gahhh> yes, the report is better
23:04:47 <Gahhh> << newbie that just learned how to parse a file via "lex" and readDec
23:14:34 <Gahhh> countdown to ping timeout
23:23:15 <Cale> Whee, it works, 331129263 results per second :)
23:23:47 <Cale> (those are sines and cosines on a 2 GHz processor)
23:24:16 <Cale> oh, actually
23:24:22 <Cale> 800Mhz processor
23:24:35 <Cale> :)
23:24:56 <Gahhh> a result circa 2 cycles ?
23:25:01 <Cale> yep
23:25:39 <Cale> 2.41 cycles per result.
23:25:49 <Gahhh> well, what does the code look like ?
23:26:00 <Cale> It's machine-scheduled assembly
23:26:11 <Gahhh> oh
23:26:21 <Cale> scheduled by the pipeline scheduler I wrote in Haskell
23:26:30 <Gahhh> ahha
23:26:36 <Gahhh> I knew this was somehow related to haskell
23:27:22 <Gahhh> so it's reorganizing asm code for the pipeline ?
23:27:59 <Cale> yeah
23:28:37 <Cale> It takes a declarative form of assembly as input
23:28:54 <Gahhh> "declarative form assembly" ?
23:29:06 <Gahhh> let mov ax,bx = blah blah ?
23:29:24 <Cale> result = opcode arg1, arg2, arg3
23:29:49 <Gahhh> ah, instead of opcode arg1 arg2 arg3 arg4
23:29:54 <Cale> yeah
23:30:01 <Gahhh> more like rtl
23:30:01 <Cale> and you can declare something in multiple ways and it will try all possibilities
23:30:26 <Cale> (favouring faster ones)
23:30:56 <Gahhh> like result = mul 2 ax and result = shiftleft 2 ax ?
23:31:05 <Gahhh> err shiftleft 1
23:31:08 <Cale> yeah
23:31:31 <Cale> this especially matters when the operations will happen on different units in the processor
23:31:47 <Cale> perhaps one unit is very busy, and the other instruction can be used
23:32:05 <Cale> (or chain of instructions)
23:33:28 <Gahhh> of course, the problem is to emit intermediate code that aligns well with the arch
23:34:48 <Cale> yes, we're working on that too
23:35:36 <Gahhh> grad school or work ?
23:35:42 <Cale> The goal is to select hand tuned chunks of declarative machine specific assembly and combine them based on goals in a higher level language
23:36:01 <Cale> undergrad research (working for professors)
23:36:15 <Gahhh> so the input is hand written assembly ?
23:37:22 <Cale> yeah, at this level
23:37:59 <Cale> hand written funny looking declarative assembly
23:38:01 <Cale> :)
23:39:13 <Gahhh> nice
23:39:17 <Cale> there will eventually be a higher level language which sits on top of this (and probably another on top of that). The goal is to take very high level mathematical descriptions of signal processing algorithms, and find fast implementations for them.
23:40:21 <Cale> (and we don't particularly care if the compiler takes days to run)
23:41:30 <Pseudonym> Should've hired me.  Writing compilers that take days to run are my speciality.
23:41:42 <Pseudonym> They don't always generate correct code, though.
23:41:44 <Cale> :)
23:41:46 <Cale> heheh
