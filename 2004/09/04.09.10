00:36:33 <dons> Does anyone know where tmp files should be created on Windows?
00:36:40 <dons> Equivalent of "/tmp"
00:36:52 <Cale> maybe C:\windows\temp ?
00:37:12 <Cale> if they still put them there :)
00:37:19 <dons> I have no idea
00:45:02 <ikegami--> the "C" drive is the default, however, someone maybe use "F:\windows\temp" 
00:45:25 <ikegami--> i think the environment variable TEMP (or TMP) should be pointed to the temporal directory
00:45:37 <dons> not TMPDIR?
00:46:33 <ikegami--> no, because my Windows computer does not have TMPDIR :)
00:46:39 <dons> ok
00:46:51 <ikegami--> but have both TEMP and TMP
00:47:11 <dons> argh. this is going to be nasty with all these '\' instead of '/'. hmm
00:47:14 <ikegami--> they are the same (C:\Windows\temp)
01:03:51 <ikegami--> today I fall in a pit of Haskell about case expression and String
01:04:43 <ikegami--> foo :: String -> Bool
01:04:49 <ikegami--> foo s = case s of
01:04:56 <ikegami-->         bar -> True
01:05:02 <ikegami-->         otherwise -> False
01:05:14 <ikegami-->         where bar = "bar"
01:06:46 <jesse> i think 'otherwise' is intended for guards, and evaluates to True
01:06:48 <ikegami--> I expect that 'foo "moo"' is False
01:07:37 <jesse> that shouldnt even compile
01:10:14 <ikegami--> how to modify this code?
01:10:40 <ikegami--> we can use 'if then else' of course,
01:10:55 <jesse> you could use _ instead of otherwise
01:11:09 <ikegami--> ok, i'll try
01:11:12 <ikegami--> thanks
01:15:12 <ikegami--> hmm, with _ and with otherwise, results are the same
01:16:04 <ikegami--> ghc warns 'pattern matches are overlapped'
01:16:26 <ikegami--> so, I may have some mistakes
01:18:11 <jesse> overlapping patterns are only a problem when the most general pattern comes before more specific patterns, aslong as the bar clause comes before the _ clause, you should be ok
01:18:54 <jesse> maybe.... ive never actually tried pattern matching with bound variables, it may be shadowing the definition of bar
01:19:29 <jesse> try using the string literal there instead of var
01:19:34 <jesse> bar*
01:19:50 <Cale> probably the same reason as why otherwise works there :)
01:20:05 <jesse> yeah :P
01:20:43 <ikegami--> ok, the last advice is fit
01:21:06 <ikegami--> without bar, using the stringliteral seems work well
01:28:44 <ikegami--> i learn that i should use the guard definition instead of case expression
01:43:49 <ikegami--> now i grasp the problem
01:44:40 <ikegami--> thanks all
01:49:09 <ikegami--> however, i think the compiler should tell us when some variables in where clause does not use...
01:49:48 <ikegami--> (in the previous my example, 'bar' does not use in the definition of 'foo')
01:58:26 <dons> try -Wall
02:02:53 <ikegami--> great
02:14:06 <shapr> hi
02:14:22 <shapr> wasssup?
02:15:47 <shapr> I built a new website for myself using Halipeto. Halipeto is really nice: http://www.scannedinavian.org/output/index.html
02:16:41 <Cale> I'm going to bed, but I might as well let you know that my scheduler is a success. 331129263 floating point results per second on an 800 MHz G4 for our sine/cosine example. :)
02:16:57 <shapr> yay!
02:17:02 <Lor> Hum, not by a Finnish author after all. Wonder what "halipeto" is supposed to mean, then.
02:17:15 <Lor> Because in Finnish it means "hug-beast". :)
02:17:19 <shapr> hehe!
02:17:35 <shapr> Andrew Cooke wrote Halipeto
02:18:26 <shapr> oh, I got a new unicycle!
02:18:52 <shapr> compared to my first unicycle, this one is a monster truck.
02:20:22 <shapr> so, what's going on? nifty stuff?
02:20:36 <shapr> musasabi: hey, what's up with the code you were hacking on?
02:22:01 <shapr> Cale: I liked your example of C++ to Haskell binding, do you have an example of going the other way?
02:23:33 <Cale> no, but it's probably easy enough to figure that out with the ffi paper
02:23:40 <shapr> ok
02:24:11 <Cale> (I'd try, but it's really late)
02:24:14 <shapr> no worries :-)
02:26:54 <earthy> bork bork bork
02:27:10 <shapr> hoi arjanb
02:27:14 <shapr> hoi earthy 
02:27:23 * shapr bounces
02:28:17 <earthy> not with your unicycle though, right?
02:28:41 <shapr> actually, I bounce with my unicycle too
02:28:52 <earthy> scary bugger, you
02:29:06 <shapr> though I can't get more than about six centimeters of height so far
02:30:12 <shapr> I got the third unicycle down on this page: http://www.krisholm.com/products/index.htm
02:31:15 <shapr> earthy: what are you doing for fun these days? (no unicycling? ;-)
02:41:15 <shapr> any interesting new languages around these days?
02:41:37 <shapr> It's interesting to see Tim Sweeney's work from the two angles of FPS player and language designer.
02:42:36 <earthy> for fun... I'm playing with cocoa programming
02:42:45 <earthy> ;)
02:43:42 <earthy> and still dance, ofcourse, and nowadays also teach some dancing. that's great fun as well... highly exhilarating to have some 50 people dance to your explanation...
02:45:22 <shapr> nifty, what sort of dancing do you teach?
02:46:26 <earthy> classical court dances of the 1750's to 1850's (roughly)
02:46:37 <shapr> wow, cool
02:46:52 <earthy> think Rococo and Biedermeier music and elegant pair- and square-dances.
02:49:24 <shapr> I think it would be fun to watch.
02:50:22 <earthy> owh yeah
02:50:40 <earthy> we perform them in costume as well
02:50:48 <earthy> tends to be well appreciated ;)
02:53:16 <shapr> Do you have any pix?
02:58:19 <earthy> hm. yeah. I'll put a few online in a sec
02:58:48 <earthy> there don't seem to be any on the group's webpage though, strangely enough.
02:59:03 <earthy> might have something to do with us having rcently taken new promotional pictures ;)
03:02:06 <earthy> http://www.cs.uu.nl/~arthurvl/IMG_0182.JPG (warning, *large* ;))
03:04:05 <earthy> and .../IMG_0166.JPG
03:04:38 <shapr> looks very nice
03:04:50 <earthy> is very hot ;)
03:05:35 <earthy> the second picture I mentioned was taken somewhere in the middle of a 15 minute choreography
03:05:54 <shapr> I bet it's a blast
03:06:00 <earthy> great fun ;)
03:06:30 <earthy> anyway, back to code! :)
03:06:34 <shapr> right, back to code!
03:06:43 <shapr> oh, did you see that Edinburgh is hiring?
03:06:53 <earthy> nope
03:07:03 <earthy> but I'm still on the order of three years from my Ph.D.
03:07:16 <earthy> two and a half
03:07:16 <shapr> I'm going to send in my resum√© on the off chance that I get to work with Phil Wadler :-)
03:07:29 <earthy> go for it!
03:08:44 <earthy> hm, bay-leaf liquorice is *nice*
03:10:54 <earthy> btw, did everybody here already hear that kosmikus is now kosmikus, Ph.D.?
03:11:09 <shapr> yay kosmikus!
03:11:18 * earthy nods
03:11:22 <shapr> sorry, yay DOCTOR kosmikus!
03:11:27 <earthy> very impressive defense. ;)
03:12:35 <earthy> (and very nice talk by Jeremy Gibbons, in the afternoon: rationals = iterate next 1; where next x = 1 / ((floor x) + 1 - (frac x));   )
03:13:07 <shapr> I read that paper I think, that's his Spigot algorithm stuff, right?
03:13:21 <earthy> (where frac x = x - floor x)
03:29:06 <earthy> no, in fact it's this: http://web.comlab.ox.ac.uk/oucl/work/jeremy.gibbons/publications/rationals.pdf (so not the Spigot stuff)
03:29:13 <shapr> ah, ok
03:32:05 <earthy> his formulation is nicer, ofcourse ;)
04:22:39 <shapr> hej cm_
04:22:48 <cm_> hej
04:33:00 * shapr boings
04:55:50 <shapr> hej ski
04:55:57 <ski> hej shapr
04:57:08 * ski looks some in Okasaki's book
04:57:39 <shapr> I have a new unicycle! This one is named Python
04:57:44 <ski> oh
04:57:50 <Jerub> yay
04:57:52 <ski> what happened to the old one ?
04:57:56 <ski> still around ?
04:58:07 <shapr> yes, I've loaned it to a friend who is learning now :-)
04:58:09 <Jerub> shapr: I have a new spinning wheel.
04:58:49 <shapr> the old one is 20" and designed for learning, I broke the seatclamp, wore out a tire, and replaced the seat.
04:58:54 <shapr> Jerub: nifty, what kind?
04:59:11 <shapr> so I got a 24" Mountain Unicycle
04:59:13 <Jerub> shapr: it's homemade.
04:59:36 <Jerub> shapr: but functional, just needs a bit of oiling and stuff ;)
05:00:21 <shapr> a spinning wheel has at least two meanings in english, which one do you mean?
05:02:00 <shapr> this new unicycle is great, I can easily roll over sand, gravel, curbs, soft muddy ground, small children...
05:02:10 <ski> ;)
05:02:27 <shapr> actually, I've been able to keep from rolling over small children so far.
05:02:49 <edwinb> Is that because they got out of the way, or you missed?
05:03:21 <shapr> actually, it's because I got out of the way. I've had two "deer in the headlights" sort of situations.
05:03:53 <edwinb> erk
05:04:19 <shapr> I did do an entertaining somersault from my unicycle onto the ground while wrapped around a large dog.
05:05:14 <shapr> I think the dog was trying to jump into my lap and be friendly or something, but that doesn't work while unicycling.
05:05:36 <shapr> anyway....
05:05:49 <shapr> has anyone written some cool Haskell code lately?
05:06:22 <edwinb> Pah. I wish.
05:06:32 * ski 's working on a type system
05:06:34 <shapr> ok, cool Epi code lately? :-)
05:06:37 <shapr> ski: oh fun!
05:06:40 <edwinb> Again, I wish ;)
05:06:48 <edwinb> I've started writing an optimising back end for Epigram now...
05:07:00 <shapr> hey, do you know if Chameleon's modular type-system can be used to do soft typing?
05:07:09 <shapr> edwinb: oh cool! any ETA?
05:07:15 <ski> shapr : just to try out some ideas i've had for some time
05:07:34 <shapr> I was thinking about type system equality and super/sub sets of typing systems.
05:07:49 <edwinb> shapr: Well it really needs a working front end first.
05:08:17 <edwinb> So some time after that...
05:09:14 <ski> shapr : but maybe i'll completely rewrite some of it. it's a bit of a mess at the time (so is the specs :)
05:10:19 <shapr> I wonder if Chameleon could be used to do type system slicing, where you can prove that a subset of a program is fine in HM, but combined with another piece of source would require dynamic typing.
05:13:13 <ski> hm, what's Chameleon ?
05:13:30 <shapr> Martin Sulzmann's thingy
05:13:33 * shapr gets url
05:13:50 <shapr> http://www.comp.nus.edu.sg/~sulzmann/chameleon/
05:14:35 <ski> it's about more powerful type class systems ?
05:15:17 * ski notices Rossberg's on the team, too
05:16:37 <shapr> I'd say it's "Hindley/Milner implemented with Constraint Handling Rules" which gives it a different flavor.
05:17:06 <ski> mhmm
05:19:01 <ski> looks like it's interresting
05:20:03 <ski> there's too many interresting things in the world :(
05:20:56 <Jerub> ski: yes :(
05:21:35 <ski> hard to concentrate
05:23:02 <Jerub> ski: there are drugs that help with that
05:23:07 <ski> no
05:23:11 <ski> not in that sense
05:23:15 <shapr> I think there aren't enough interresting things in the world.
05:23:25 <shapr> I keep running out.
05:23:42 <earthy> hm, by the way: http://www.dse.nl/%7Egeertjan/Publikatie/The-roots-of-any-polynomial-equation.pdf
05:23:43 <ski> to many interresting things i'm already thinking on, which leads to hard to concentrate
05:25:05 <shapr> @y√∂w !
05:25:05 <lambdabot> Sorry, I don't know the command "y√∂w", try "lambdabot: @listcommands"
06:30:57 <shapr> hej vidvandre 
06:31:19 <vidvandre> hei :)
06:32:24 <ski> du vandrer i fjaellen ?
06:33:03 <vidvandre> hehe.. dÂrlig med vandring her
06:33:24 * ski kan egentligen inte norsk
06:34:11 * ski har dock besoekt folgefonna och andra glaciaearer
06:35:01 <vidvandre> ah. jeg mener Â ha vÊrt der selv engang
06:38:01 <ski> klaettrade upp lite pao austerdalsisen, tex
06:38:08 <ski> (fronten)
08:45:53 <deniz> is it allowed to speak an other languges here ?
08:46:03 <deniz> hehe.. stupid question maybe.. :)
08:53:37 <Igloo> Some people speak ML, but we frown upon them
08:53:57 <Igloo> If you want to speak Swedish then try #haskell.se?
09:02:08 <Lemmih> @seen shapr
09:02:08 <lambdabot> I saw shapr leaving #haskell 1 hour 59 minutes 48 seconds ago.
09:02:20 <Lemmih> Woah. He's back.
10:27:11 <shapr> d00d
10:27:19 <Lemmih> Hey shapr (-:
10:27:24 <shapr> 2.5 hours of unicycling, w00
10:27:46 <Lemmih> http://www.scannedinavian.org/AvianWiki/HaskellDbTutorial is outdated/flawed.
10:34:27 <shapr> I've lost 11.5 kilos in three months.
10:34:47 <Lemmih> shapr: May I try to fix it?
10:34:52 <stepcut> from unicycling?
10:36:13 <shapr> Lemmih: sure, go for it.
10:36:31 * shapr lags horribly
10:36:54 <stepcut> shapr: pedal faster!
10:37:08 * shapr switches back to IPv4 to get rid of lag
10:41:05 <shapr> stepcut: yes, 11.5 kilos down just by unicycling.
10:41:15 <stepcut> nice
10:41:19 <Lemmih> shapr: You should probably look it through when I'm done since I'm _very_ new to haskelldb.
10:41:39 <shapr> Lemmih: if the code you put in actually works, then it's okay, right?
10:42:12 <shapr> I'd rather have that page as a literate haskell somehow so I could just hit a button to get it all compiled with the latest to make sure it works.
10:42:23 <shapr> it all worked at one point.
10:43:37 <shapr> 235 to 210, yay!
10:46:06 <Lemmih> kilos?
10:46:10 <shapr> pounds
10:46:18 <shapr> 107 to 95.5 kilos
10:51:49 <ski> wb shapr
10:51:55 <shapr> hej ski
10:52:24 * ski ska nog gao hem och aeta nu snart ..
10:52:27 <ski> hej
10:52:49 <shapr> yah, I'm hungry too
10:53:03 <ski> only a banana for lunch
10:53:15 <ski> is not much
10:57:12 <shapr> yes, you should eat
11:01:21 * esap just ate bananas [and was reminded of barbed wire :-) ]
11:01:32 <shapr> haha
11:11:07 <shapr> we're having a birthday+apartment moving party a week from tomorrow if you guys want to show up.
11:11:33 <shapr> psi: feel free to drop by if you want, I think you're the closest #haskeller :-)
11:16:10 <psi> okay :) your birthday?
11:16:32 <shapr> yes
11:16:59 <shapr> that's how I could afford the new unicycle, I asked my friends to pay for part of it for my birthday present ( and probably christmas too )
11:17:54 <psi> nice
11:17:59 <psi> how old are you, btw?
11:18:14 <shapr> I'll be 33 this year.
11:18:43 <psi> ok. i'm 18 :)
11:18:49 <shapr> ok :-)
11:19:12 <shapr> I suspected you were about that age since you're going to luth.se
11:19:13 <edwinb> If you keep changing bases, you can alternate between 18 and 21 every year...
11:19:18 <shapr> hehe
11:19:34 <shapr> speaking of moving, I need to pack some boxes now...
11:19:36 * shapr disappears
11:34:33 * ski decides to leave
11:44:27 * esap just noticed I've been misreading fokkinga&Meertens. It actually solved my problems and I didn't notice it! :-)
11:45:33 * esap points to the characterization of partial functions in terms of Maybe.
11:51:42 <esap> Hmm.. I think 'undefined' has not been implemented correctly :-)
11:52:03 <Igloo> ?
11:52:18 <esap> I think what you should have there is a Haskell interpreter.
11:53:21 <esap> A generic eval would not be typeable within Haskell, so it's type would be _|_.
11:55:59 <esap> This idea can be directly derived from the Adjunction  E -| Maybe that is given in fokkinga&Meertens (point 73).
11:57:08 <esap> And the idea about _ \\ a -| Either a _  which connects control operators and either.
11:59:05 <esap> And the notion that an interpreter provides a platform for the programs written in the interpreted language.
12:00:22 * shapr 's brain shuts down everytime esap says adjunction
12:01:19 <esap> And then you just note that a platform doesn't know what is written on top of it.
12:01:41 <esap> So there is the connection to _|_.
12:02:22 * edwinb looks up "adjunction" so as not to feel so ignorant ;)
12:02:55 * esap suggests: fokkinga&meertens: "Adjunctions", which was actually what I was referring to....
12:03:01 <shapr> hm --> http://en.wikipedia.org/wiki/Adjunction
12:03:21 <esap> http://citeseer.ist.psu.edu/fokkinga93adjunction.html
12:03:32 <edwinb> shapr: Well apparently I'll have to write it first...
12:03:39 <Cale> http://en.wikipedia.org/wiki/Adjoint_functors
12:04:59 <shapr> We put the funk in funktor.
12:06:05 <edwinb> I think that's way beyond me at this time of the week.
12:06:11 <shapr> oh, if you want free legal music check this out: http://gnomoradio.org/
12:06:19 <shapr> and it's a deb for easy access.
12:06:24 <edwinb> It might even be way beyond me any time of the week, but that's another matter.
12:06:34 <shapr> we now return you to your regularly scheduled category theory.
12:06:59 <shapr> hiya stratocaster, how's Tucson?
12:07:44 <shapr> well, I understand abelian groups.
12:09:20 <Cale> skip to "Formal Definitions" if the mathematical history doesn't make any sense :)
12:09:42 <shapr> hey, do you guys read 'irregular web comic' ?
12:10:11 <shapr> http://www.irregularwebcomic.net/cgi-bin/comic.pl?comic=470
12:10:42 <edwinb> hehe
12:11:08 * edwinb bookmarks
12:11:09 <Cale> that's awesome
12:11:23 <shapr> iirc, that guy is also a Haskeller
12:11:28 * shapr doubts anyone is surprised
12:12:49 <shapr> Cale: I thought you might get a kick out of a webcomic that has abelian groups and JRR Tolkien in the same joke. I sure did.
12:13:54 * esap stops coding and starts reading funny comics.
12:14:01 <shapr> oh no!
12:14:30 <esap> :-)
12:19:15 <shapr> I want a Wikipedia darcs repo
12:23:40 <shapr> oh hey, is there a similarity hash?
12:24:22 <shapr> like, something where it's easy to do hash collision because the hash is totally predictable... something that you can use to test text document similarity percentage for example?
12:29:10 <Smerdyakov> Clearly such a thing is impossible in full generality.
12:30:08 <Smerdyakov> You'd need to specify what size inputs and outputs you want the function to support, as well as a probability distribution on the input domain.
13:11:50 <shapr> hej paulis 
13:13:26 <paulis> I have defined a new type and now I want to make use of the + (addition) between 2 objects of that type. The problem is that addition aint defiend for this type. how can I come around this? 
13:13:34 <paulis> hej shapr 
13:14:08 <shapr> you can define your type to be an instance of the Num typeclass.
13:14:38 <shapr> @info Num
13:14:39 <lambdabot> -- Num is a class
13:14:39 <lambdabot> class (Eq a, Show a) => Num a where {
13:14:39 <lambdabot>     (-) :: a -> a -> a {- has default method -};
13:14:39 <lambdabot>     (*) :: a -> a -> a;
13:14:39 <lambdabot>     (+) :: a -> a -> a;
13:14:41 <lambdabot>     negate :: a -> a {- has default method -};
13:14:43 <lambdabot>     signum :: a -> a;
13:14:46 <lambdabot>     abs :: a -> a;
13:14:47 <lambdabot>     fromInteger :: Integer -> a;
13:16:13 <paulis> shapr : En instance s√§ger du... Nu vet jag inte riktigt hur man g√∂r det. Men jag kan sl√• i boken, det b√∂r nog st√• d√§r.
13:16:29 * shapr pekar p√• #haskell.se
13:16:47 <shapr> ocks√• - http://www.scannedinavian.org/AvianWiki/HaskellDemo
13:17:10 <paulis> Tack, jag ska ta en titt p√• dom. 
13:17:52 <shapr> anyway, we take the swedish haskell discussion to #haskell.se
13:18:04 <shapr> are you doing Haskell at chalmers?
13:18:33 <tic> either that or gu.
13:18:37 <paulis> yes I am ;) how did you know, have there been more ppl then me from chalmers at this channel ? ;) 
13:18:52 <tic> paulis, a bunch. also, the olf.sgsnet.se gives out a fair bit of info ;)
13:19:57 <paulis> hehe.. well the first lecture we learned to build a "wheel" now we are supposed to build a "volvo"! So there is alot of things that I dont have a clue about :/ 
13:20:35 <shapr> Haskell is easy and fun to get into, it'll be no problem.
13:21:08 * shapr sends email to a unicycling chalmerist.
14:28:25 <dan2> whats a good way to create a parser
14:29:55 <shapr> parsec
14:30:01 <Lemmih> I would probably use Parsec but Happy is also a choice.
14:31:55 <dan2> I don't know BNF syntax, is parsec easy to work with?
14:32:45 <shapr> I think so.
14:33:16 <Lemmih> Yes. Parsec is easy to use and it's very well documented.
14:34:51 <Lor> parsec is only ll(1), though.
14:35:17 <Lor> except with explicit backtracking.
14:36:11 <dan2> ll is probably more than what I need 
14:43:51 <shapr> hiya wagle 
14:43:53 <dan2> hmm
14:44:09 <dan2> its missing some .mk files in the parsec build
14:44:27 <shapr> Parsec comes with recent versions of GHC
14:44:31 <shapr> do you have GHC installed?
14:45:48 <dan2> yes
14:46:36 <dan2> shapr: how do I invoke it then
14:46:45 <shapr> @index sepBy
14:46:46 <lambdabot> Text.ParserCombinators.Parsec,Text.ParserCombinators.Parsec.Combinator
14:46:59 <shapr> try 'import Text.ParserCombinators.Parsec' at the top
14:47:39 <Lemmih> Isn't ':set -package text' needed?
14:48:21 <wagle> shapr: howdy
14:48:23 <shapr> I don't think so, but I'm not totally sure.
14:48:33 <shapr> wagle: how's code?
14:49:22 <Smerdyakov> Hey everybooody. Who knows of PhD students graduating this year doing research in functional programming or other logicy things?
14:50:52 <wagle> Emir Pasilic?
14:52:04 <Lor> I saw a version of his thesis from last december. It looked nearly finished, so I'd expect him to graduate this year.
14:52:20 <wagle> (Pasalic)
14:52:29 <shrimpx> wagle: were you out at lunch with us today?
14:52:37 <wagle> he defended a couple weeks ago, and is moving to rice tomorrow
14:52:49 <wagle> shrimpx: yes
14:52:55 <Smerdyakov> wagle, oh. I meant people who were open for hiring. :)
14:53:13 <shrimpx> wagle: k. i met too many people :)
14:54:01 <wagle> shrimpx: i sat across from you
14:54:35 <shrimpx> cool
14:55:44 <dan2> shapr: is the parsec/LL syntax hard to learn?
14:56:46 <shapr> dan2: nah, it's pretty easy. I used it to hack up a crappy RFC822 parser without too much trouble.
14:57:08 <shapr> happily, someone else finished a good Parsec RFC2822 parser before I finished my crappy parser.
14:57:17 <dan2> shapr: well, funny you say that, I needed to create a rfc2822 parser
14:57:46 <dan2> shapr: where can I get it
14:58:20 <shapr> Peter Simons wrote it, lemme see if his version is online at his website...
14:59:19 <shapr> http://cryp.to/hsemail/
14:59:38 <shapr> looks like he's extended it since I last checked.
15:00:25 <shapr> I am glad he finished the RFC2234 implementation, and that he integrated a lot of my suggestions.
15:02:28 <dan2> hmm, whats rfc2234?
15:03:13 <shapr> dan2: it's the RFC combinator stuff.
15:03:21 <dan2> oh
15:03:43 <dan2> shapr: I am indire need of a mathematical expressions parser.. I want to create a math engine like mathematica
15:03:47 <shapr> um
15:03:51 <shapr> hmm
15:04:33 <shapr> ok, I'll get back to math engines in Haskell, but first, have you tried Gnu Octave or some of the other open source mathematical or maple clones?
15:05:02 <Cale> maxima :)
15:05:10 <dan2> yeah... maxima
15:05:21 <dan2> Cale: and boy does it suck
15:05:21 <dan2> ;)(
15:05:26 <Cale> :)
15:06:25 <shapr> ok, now that we have the formalities out of the way...
15:06:46 <shapr> there was a recent thread on the haskell mailing list about something like this, was that your thread?
15:07:48 <dan2> shapr: nope
15:08:30 * shapr looks it up
15:08:55 <dan2> Cale: wouldn't you agree haskell would be a good language to implement such
15:09:47 <Cale> I think it would, but I wouldn't underestimate the sort of undertaking that a full featured CAS is to create.
15:12:28 <shapr> anyone remember where that thread was?
15:13:02 <shapr> aha, http://www.haskell.org/pipermail/haskell/2004-August/014441.html
15:13:15 <shapr> dan2: that should be informativve
15:13:50 <Igloo> I don't know how "real" CASs work, but if they're tree manipulation programs like simple ones would be then Haskell is a reasonable choice I'd say
15:15:30 <Cale> The other day Wolfgang Thaller said "The thing about Matlab is that anything which can be done in Matlab can be done more elegantly in C++, and more efficiently in Haskell". :)
15:15:53 <Igloo> Nice  :-)
15:16:05 <dan2> Cale: :)
15:16:11 <dan2> Cale: haskell is pretty mighty on math
15:16:22 <dan2> Cale: it was able to turn a bad algo into a good one
15:16:35 <Cale> hm?
15:16:54 <Cale> then it wasn't a very bad algorithm after all was it?
15:16:55 <Cale> :)
15:16:59 <Smerdyakov> dan2 is pretty might on saying confusing things that make me want to hurt myself.
15:17:03 <Smerdyakov> s/might/mighty
15:18:14 <dan2> Cale: any recursive algo is pretty much _BAD_
15:18:36 <dan2> Cale: altho, it seems ghc smart optimizes these
15:18:41 <Smerdyakov> No one with any knowledge of CS would say that, dan2.
15:19:02 <dan2> Smerdyakov: wouldn't you agree with me?
15:19:12 <Cale> recursion is good
15:19:14 <Smerdyakov> dan2, no, and no one else whose opinion matters would agree with you, either.
15:19:20 <dan2> :)
15:19:32 <dan2> Cale: ok, throwing memory around the stack is never good
15:19:48 <Smerdyakov> There is no concept of "stack" in most theories of algorithms.
15:19:59 <Cale> recursion does not imply any particular implementation
15:20:32 <dan2> Cale: I was referring to the many C, and C-like implementations
15:20:44 <dan2> Cale: tho, this is haskell, its not C ;)
15:20:56 <Smerdyakov> Don't say "algorithms" when you mean "C programs."
15:22:25 <dan2> hmm, I need a pop3 parser too, anyone have one of those
15:27:52 <Lor> Usually implementing a protocol involves more than just parsing.
15:29:13 <Lunar^> dan2: POP3 is trivial to parse
15:33:34 <dan2> Lor: not entirely, I just need to make a quick dummy, so I can make upgrading the mail server more trivial
15:33:42 <dan2> Lor: so the users don't notice anything
16:12:06 <abarrett> In a case statement... can a single expression be associated with multiple patterns? (I should purchase a book...)
16:12:16 <Smerdyakov> There are no statements in Haskell.
16:12:20 <Smerdyakov> Perhaps you mean "case expression"?
16:12:50 <emu> statements don't make sense in a language with no side-effects =)
16:13:11 <abarrett> I've confused the terminology.
16:13:26 <abarrett> ( And more, I imagine. )
16:13:42 <Riastradh> 'Statement' is a horrible term anyway.
16:14:49 <Igloo> There are statements (in do blocks)
16:15:15 <Smerdyakov> Hm. There are at least no "case statements." :)
16:15:20 <shrimpx> abarrett: how would you expect that to behave?
16:15:24 <Jerub> Igloo: do blocks are just syntactic sugar for what is just a bunch of expressions tho
16:15:34 <emu> abarrett: don't worry; you'll know even less after we get done with you =)
16:15:41 <shrimpx> haha
16:15:45 <Igloo> Jerub: Yes, but the report calls them statements
16:16:49 <abarrett> shrimpx, I had in mind something resembling... pattern1 | pattern2 -> expression
16:23:04 <shrimpx> ah
16:23:04 * abarrett trudges through the 'Gentle Introduction'
16:23:42 <shrimpx> haskell doesn't have or-patterns afaik. but you can probly get a similar effect with guards
16:25:05 <abarrett> Ah, I think I understand.
16:30:45 <Cale> abarrett: you might try "Yet Another Haskell Tutorial"
17:31:15 <dan2> hmm, I need a BNF tutorial
17:32:02 <Jerub> dan2: yes. you do.
17:32:10 <dan2> Jerub: know of a good one?
17:32:22 <Jerub> dan2: I learned it at uni from lecture notes and a textbook.
17:32:23 <Jerub> EBNF.
17:34:43 <dan2> Jerub: hmm
17:34:51 <dan2> Jerub: is it difficult to learn?
17:35:08 <Jerub> dan2: nope.
17:35:17 <Jerub> I'd start with wikipedia and go from there.
17:35:43 <Jerub> its just a notation for a context-free grammar, such as what many computer languages use.
17:42:35 <dan2> Jerub: do you know of a place that stores EBNF notations of various languages?
17:42:42 <dan2> Jerub: or even protocols
17:46:22 <np_hard> ebnf or yacc?
17:50:47 <dan2> np_hard: ebnf would be good so I could use happy
18:05:54 <Jerub> dan2: most programming language documentation defines the ebnf
18:13:34 <dan2> Jerub: I want a imap ebnf
18:37:54 <dan2> hmm
18:37:58 <shapr> hmm?
18:38:09 <dan2> does ghc provide a parallel implementation
18:38:24 <shapr> sort of
18:39:13 <dan2> shapr: what does that mean?
18:39:52 <shapr> means that most of the parallel implementations are many versions behind, they're not in the main tree
18:40:38 <shapr> if you google for phil trinder and haskell you should find two of the versions, Gph and GdH (parallell and distributed)
18:40:51 <shapr> Hal Daume wrote an hMPI haskell to MPI binding that's nice
18:41:01 <dan2> shapr: hmm, whats that mean
18:41:18 <shapr> Manuel Chakravarty wrote a Data Parallell library that's cool, but I don't know if it works on 6.2+
18:41:36 <shapr> what does what mean?
18:42:04 <shapr> MPI is 'message passing interface', GpH uses PVM and has explicit par and seq combinators
18:42:36 <shapr> I forget the details on GdH, but I vaguely recall that it's based on earlier work by chakravarty, I think his Goffin stuff.
18:43:01 <dan2> shapr: so what does MPI do
18:43:19 <shapr> it's one of the two major standards for Beowulf clustering, PVM and MPI
18:43:31 <shapr> parallel virtual machine and message passing interface
18:43:38 <dan2> shapr: ahh I see
18:43:56 <dan2> shapr: how's the threading interfaces in haskell
18:44:01 <dan2> haven't had a chance to use them myself
18:44:05 <shapr> between excellent and seriously kickass
18:44:18 <dan2> shapr: sounds good, easier to use than pthreads?
18:44:23 <dan2> (pthreads are a pita)
18:44:38 <shapr> support for coroutines, preemptive threading, separate OS Threads that also do thread local state
18:45:08 <shapr> the only deficiency in GHC threading is that it's not really fine grained enough to use GHC as a full OS kernel.
18:45:23 <shapr> the scheduler would need to be rewritten for that.
18:45:39 <shapr> but, GHC does run on the bare metal just fine
18:45:48 <dan2> shapr: cool
18:46:30 <shapr> it's about bedtime for me, I'll talk to ya tomorra
18:46:39 <dan2> shapr: I take it makes more sense to use OS Threads over Haskell threads no?
18:47:00 <shapr> I think Haskell threads are generally easier to deal with.
18:47:06 <dan2> ok
18:47:10 <shapr> but if you have a big C background, you may not agree.
18:48:07 <dan2> hmm.. I haven't used pthreads much in the past
18:48:15 <dan2> however, I do have a large C background
18:51:02 <dan2> shapr: do you have an example of a socket and thread implementation where it creates a thread on connect?
18:54:55 --- mode: irc.freenode.net set +n
19:03:38 <dan2> I need a haskell tool to fix my indentation
19:08:28 <koli> if i have a category, A, with two objects and only two morphisms (ie. the two identity morphisms) and a category, B, with one object and one morphism (the identity morphism), then surely a functor from A to B is full, faithful and dense.
19:08:31 <koli> right ?
19:17:31 <dan2> wow, these threads kick ass
