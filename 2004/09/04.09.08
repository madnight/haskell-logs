00:23:33 <xkb> Hmm this might be a stupid question: I'm trying to use mod in Clean. I included StdEnv, containing a mod signature. The compiler complains that mod is not defined on Int
00:23:45 <xkb> anyone here have an idea how to solve this?
00:24:01 <xkb> I grepped for mod in the libraries.. No result except the signature
00:43:24 <xkb> ok.. found it
00:43:37 <xkb> the function mod is never implemented
00:43:57 <xkb> a function doing almost the same is defined in StdOverloaded
00:43:59 <xkb> rem
01:23:46 <earthy> sounds like Clean alright. :P
05:04:44 <xkb> Is anyone of u subscriber to JFP?
05:04:46 <xkb> (journal of...
05:06:51 <ibid> not me
05:23:31 <earthy> not personally
05:23:39 <earthy> I think we have it in the library
05:31:52 <ibid> we don't
05:54:08 <Lemmih> @seen shapr
05:54:08 <lambdabot> I saw shapr leaving #darcs 7 days 16 hours 53 minutes ago.
05:54:29 <Lemmih> Who killed shapr?
05:55:06 <ski> Lemmih : how did you know i was just going to ask lambdabot that ?
05:55:21 <TeRRoriSsima> hi all
05:55:28 <ski> hello TeRRoriSsima
05:56:16 <TeRRoriSsima> what's wrong with papply any_parser_function any_string
05:56:24 <TeRRoriSsima> there's a type problem
05:57:25 <ski> which ?
05:57:42 <TeRRoriSsima> papply any_parser_function any_string
05:57:52 <ski> which type problem ?
05:58:30 <ski> copy&paste the error message, please
05:59:00 <ski> or put your code on the irc paste page
05:59:46 <TeRRoriSsima> now It's working yesterday not - weird haskell :)
05:59:53 <ski> oh
06:00:26 <ski> (anyway s/any_parser_function/any_parser/)
06:00:50 <TeRRoriSsima> thx
06:02:00 <TeRRoriSsima> I need some code to read data from file line by line and assign it to variables
06:02:22 <TeRRoriSsima> there's a readfile func but I'm not sure how to make it read line by line
06:02:50 <ski> read line by line, in what way ?
06:02:53 <TeRRoriSsima> is there any examples of that over the net?
06:03:11 <TeRRoriSsima> means if file struct is like that:
06:03:14 <TeRRoriSsima> abcd
06:03:16 <TeRRoriSsima> abde
06:03:45 <ski> do you still want to read with readFile ?
06:03:47 <TeRRoriSsima> it read first abcd and assign it to a, then abde and put it in b
06:03:47 <Lemmih> (\x -> readFile x >>= return . lines) ?
06:04:46 <TeRRoriSsima> this will  get line by line from file x?
06:05:00 <pesco> TeRRoriSsima: You seem to be in imperative assign-to-variables mode. What is it that you are actually trying to accomplish?
06:06:01 <TeRRoriSsima> accomplish :) I'm learning haskell and trying to do some useful program
06:06:40 <TeRRoriSsima> Lemmih, the \ is what's for?
06:07:01 <ski> it creates a function
06:07:40 <ski> readLines f = do s <- readFile f; return (lines s)
06:07:44 <ski> if you want to name it
06:08:39 <TeRRoriSsima> f <- "Path"?
06:08:47 <ski> yes
06:08:56 <Lemmih> uh?
06:09:00 <ski> readLines :: FilePath -> IO [String]
06:09:20 <TeRRoriSsima> aha
06:09:21 <TeRRoriSsima> thx
06:09:30 <TeRRoriSsima> let's try 
06:13:13 <TeRRoriSsima> now I have a recursive function in the code
06:13:36 <ski> mm
06:13:42 <TeRRoriSsima> i need to make yours call it with the line it got, then the other recall it when work is done
06:14:30 <ski> hm
06:15:00 <ski> if readLines calls your function, then it shouldn't be called readLines anymore
06:15:32 <TeRRoriSsima> why?
06:15:38 <ski> why not just take the code of readLines and integrate it into your function if you don't want to call it ?
06:16:16 <ski> because then it doesn't just read all the lines from a file. then it would call your function also (which i assume actually does something interresting :)
06:16:46 <ski> maybe you can show the code of your function and/or tell what you are trying to do ?
06:16:48 <TeRRoriSsima> lol
06:16:54 <TeRRoriSsima> very very interesting
06:17:17 <ski> (anyway, if it called your function, "readLines" would be the wrong name for it)
06:17:20 <TeRRoriSsima> I'll do interesting stuffs after a while as everyone of you do :) that's life
06:17:55 <ski> so, how is your function organised ?
06:18:44 <ski> with readFile you get the whole contents of the file, which one can then divide into lines by e.g. "lines", and then process those lines further
06:19:28 <ski> one could also use hGetLine to just read one line from the file at a time, but then you have to have an IO loop for reading more lines
06:19:54 <ski> with readFile you can have a non-IO function processing the lines
06:20:06 <ski> so it depends on how you want to do it
06:20:08 <ski> ok ?
06:20:39 <TeRRoriSsima> i need no-IO
06:20:44 <ski> ok
06:20:46 <TeRRoriSsima> just strings to use them
06:20:56 <ski> then you prolly want readFile and possibly lines
06:21:04 <Lemmih> ski: readFile is lazy so it will actually only read the lines you're using.
06:21:13 <ski> Lemmih : i know
06:21:59 <ski> (it still gives you the whole file)
06:25:47 <TeRRoriSsima> I used the |
06:26:03 <TeRRoriSsima> for the recursion one
06:26:18 <TeRRoriSsima> and now when I put code for reading file it gives error
06:28:13 <ski> hm ?
06:29:20 <ski> can't you paste your code at the wiki ?
06:29:24 <ski> @wiki HaskellIrcPastePage
06:29:25 <lambdabot> http://www.haskell.org/hawiki/HaskellIrcPastePage
06:29:45 <TeRRoriSsima> 1 sec
06:31:46 <TeRRoriSsima> ok
06:31:52 <TeRRoriSsima> here is the function
06:32:16 <TeRRoriSsima> i just want to put line by line into x
06:32:35 <TeRRoriSsima> then show result of parsing
06:34:09 <ski> hm
06:34:52 <ski> you don't need "== False", in any case
06:35:01 <arjanb> i think i have seen that code before
06:35:13 <ski> "length x /= 49" is better
06:35:43 <ski> ok
06:36:15 <ski> if you read in the file by readFile, and convert it to lines by "lines"  (or, equivalently, with readLines)
06:36:46 <ski> then you probably want to recurse through the list of lines and call your parser on each line
06:36:56 <TeRRoriSsima> can you paste how it should look like plz
06:37:05 <TeRRoriSsima> yeah
06:38:09 <ski> hm
06:38:20 <ski> what monad is "run" in ?
06:38:31 <ski> Maybe or List or some parser ??
06:39:05 <TeRRoriSsima> that's my run function
06:41:49 <ski> i pasted a sketch of how you *might* want to do it
06:42:00 <ski> but i'm nut sure what the type of "result" is
06:42:04 <ski> s/nut/but/
06:42:04 <TeRRoriSsima> can't see it
06:42:33 <TeRRoriSsima> ah ok now
06:42:33 <ski> reload
06:43:14 <ski> hmm, forgot a thing
06:44:35 <ski> so, what type does your "result" have ?
06:45:45 <TeRRoriSsima> result            :: [([Char],a)] -> String
06:46:08 <ski> and what do you want to do with the String that "result" returns ?
06:46:11 <ski> print it ?
06:46:27 <TeRRoriSsima> yeah
06:46:33 <ski> and why the "mzero" in the "/= 49" case ?
06:46:40 <ski> what do you want to do there ?
06:46:46 <TeRRoriSsima> putsrln(result)
06:47:12 <TeRRoriSsima> i want to ignore string of that lzngth
06:47:28 <TeRRoriSsima> and the recursion continue
06:48:16 <ski> oh
06:48:24 <ski> then you want "return ()", i think
06:48:30 <arjanb> ski: this (obfuscated) code is part of some game
06:49:50 <ski> oh
06:49:56 <TeRRoriSsima>  Illegal type "[String] -> IO" in constructor application    
06:50:05 * ski thinks he remembers some other obfuscated haskell code that should be corrected to parse a whole file of passwords, only accepting the correct one ..
06:50:11 <ski> of course
06:50:22 <ski> that's why i put an "?" there
06:50:30 <ski> i don't know what you want to return
06:50:41 <ski> TeRRoriSsima : btw, i modified it again
06:52:31 <TeRRoriSsima> ok thx
06:53:35 <TeRRoriSsima> runMany [          ] = ?
06:53:50 <ski> yes
06:54:08 <ski> what do you want to do when the you have finished reading the file ?
06:54:08 <TeRRoriSsima> is putting return() ok in place of ?
06:54:24 <ski> depends on if that's what you want to do
06:55:54 <TeRRoriSsima> Undefined variable "x" 
06:55:56 <TeRRoriSsima> grrrrr
06:56:03 <TeRRoriSsima> always a new eroor
06:56:23 <ski> right
06:56:36 <ski> s/x/line/ and s/xs/lines/ of course
06:57:12 * ski can't rename properly
06:58:18 <xkb> hmm it looks like an attempt to crack a passwrd ;-)
06:58:53 <TeRRoriSsima> that's it but don't working :)
06:59:04 <xkb> still isnt?
06:59:28 <xkb> pas mal eh
06:59:41 <TeRRoriSsima> oui
07:02:54 <ski> here's the old such i help someone with a time ago : http://www.mdstud.chalmers.se/~md9slj/code/upyours.org.hs
07:12:33 <SyntaxLaptop> Igloo: around?
07:13:10 <Igloo> Afraid so
07:14:27 <SyntaxLaptop> Igloo: remember that little program you sent me a while ago to sorta imitate references?
07:14:40 <Igloo> No
07:14:53 <Igloo> Oh, tha hash consing thing?
07:15:24 <SyntaxLaptop> erum. maybe? it was so we could have a shared store of instances and handles to them.
07:15:36 <Igloo> Right, yup
07:16:05 <SyntaxLaptop> can you send that again? i lost it.
07:17:11 <Igloo> Done
07:20:44 <SyntaxLaptop> thanks!
09:23:15 <shaleh> morning all
09:23:31 <ski> 'afternoon
09:23:38 <shaleh> anyone around who minds a short tutor session? I am reading the wiki and hit a section I am not following.
09:36:33 <Cale> shaleh: what in particular?
09:40:03 <shaleh> Cale: the factory function at http://haskell.org/hawiki/FactoryFunction. The example does not explain why this is desired or what the goal is.
09:40:17 <shaleh> I find the wiki very frustrating as a newbie.
09:41:53 <Cale> ah, the point is that eAdd, when passed two ints, for example, gives an EInt with their sum, whereas EAdd will simply give something like (EAdd (EInt a) (EInt b))
09:42:36 <Cale> eAdd does a little of the work of evaluating the expression
09:43:27 <Cale> (in the special cases there)
09:44:43 <shaleh> hmm, I guess the example just feels so contrived, it does not make sense. Why would you define the code the way they did?
09:46:00 <Cale> well, it's not that contrived - that actually could be useful code, if you needed to work with symbolic expressions
09:47:20 <Cale> It's just like, rather than having some special "simplify" function which you call, you do the work of simplifying the expressions as you build them
09:47:35 <shaleh> ok
09:48:14 <Cale> similarly, if you were, say, building a balanced tree, you could have a special constructor that did balancing when it combined two subtrees
09:48:36 <shaleh> gods, functional programming is hard to learn. So many of the peopole writing about it start from the top ledge. No one seems to remember where they started from. Not all of us have phd's in Mathematics.
09:49:00 <shaleh> Cale: yeah, that makes senese
09:49:02 <shaleh> sense
09:50:41 <Cale> I haven't had too hard a time of it, but then I am a math student, and so I'm biased. :)
09:51:17 <Cale> I find that most functional programmers are generally willing to try to help you understand things, anyway.
09:52:28 <shaleh> Cale: I just wish they were better at writing about it (-:
09:52:55 <shaleh> the wiki is really, really dense. Coupled with my usual annoyance with wikis -- everyone has an opinion and feels the need to chime in.
09:53:44 <Cale> I think the wiki is more intended as a communication mechanism than a reference work.
09:54:02 <Smerdyakov> Oh, so I can't cite it in papers?
09:54:06 <Cale> (with some actual information thrown here and there)
09:54:17 <Cale> I wouldn't cite it :)
09:55:02 <Cale> I suppose you could, but wikis are pretty unstable things.
09:55:54 <Cale> shaleh: did you read my article on monads?
09:56:07 <Cale> (MonadsAsContiners)
09:56:51 <shaleh> Cale: no, haven't got there yet
09:58:33 <Cale> http://haskell.org/hawiki/MonadsAsContainers -- check it out, and see if it makes any sense
09:59:44 <Cale> Many people think about monads in a completely different way, but I find that the container analogy tends to be easier to explain to beginners.
10:01:55 <Smerdyakov> That doesn't make much sense for IO ()!
10:09:35 <shaleh> Cale: yes, that is well explained. thanks. If only more of the wiki / online docs were like that.
10:09:57 <Cale> Smerdyakov: it does, in some ways :)
10:11:13 <shaleh> Andrew Bromage on the other hand should stick to PhD texts.
14:36:36 <Smerdyakov> Does anyone know a good channel to ask consumer hardware questions?
14:47:07 <TeRRoriSsima> hi folks
14:49:17 <shaleh> g'day
15:04:16 <musasabi> Smerdyakov: local channels with friends mostly :-(
15:27:48 <deniz> dc
15:28:02 <Smerdyakov> Roger that, deniz.
15:30:50 <deniz> Smerdyakov <- Bool <- wow <- usefull?
15:30:53 <deniz> =)
15:31:03 <deniz> i`ve just started learning haskell
15:31:12 <deniz> anyone here use it in real life?
15:31:44 <Cale> I have
15:31:53 <deniz> ok =)
15:31:58 <deniz> what kind of applications?
15:31:59 <Cale> and I'm pretty sure there are others here
15:32:22 <Cale> I was working on a compiler for a new kind of special purpose programming language this summer.
15:32:45 <deniz> wow
15:33:04 <deniz> sounds.... "theoretical"   ;)
15:33:56 <Cale> in particular, my part was a pipeline scheduler for powerpc+altivec assembly
15:35:24 <deniz> cool =) i bet its a very "functional" pipeline ;) tihi
15:35:39 <Cale> We have a piece of sine-cosine computing code which uses altivec and on average spits out a float every 2 or so cycles
15:37:19 <Cale> :)
15:46:46 <Riastradh> For a functional language, Cale?
15:47:11 <Cale> This is eventually going to be a declarative language
15:47:49 <Cale> the assembly that I was scheduling was actually written in a declarative form of assembly language.
15:48:49 <Cale> this is one of the lower level segments of coconut, which is a project to create a declarative language for high performance signal and image processing
16:18:04 <roconnor> I was trying to implement the bitFlipper example problem from TopCoder <http://www.topcoder.com/?&t=support&c=sample_problems>
16:18:21 <roconnor> minFlip = length . concat . (takeWhile (not . null)) . tail . (iterate ((dropWhile id) . reverse . (dropWhile id) . reverse . (map not))) . (map (=='1'))
16:18:22 <Smerdyakov> I won $1600 from them!
16:18:35 <dan2> Cale: why is a sequence less eficient than a loop?
16:18:36 <roconnor> wow
16:19:11 <Cale> dan2: memory wise?
16:19:19 <dan2> Cale: that might explain a lot
16:19:36 <dan2> Cale: I guess computation a sequence thats infinite will eat memory like crazy
16:19:38 <roconnor> go pointless-style
16:20:21 <Cale> dan2: except that Haskell has a garbage collector, so it shouldn't be too much of a problem, if you're just using each of the values once
16:20:24 <dan2> Cale: I was able to prove the one single problem with garbage collected languages ... it was with my fibonacci sequence and large numbers (500000)
16:21:06 <dan2> Cale: all of the slow down was in memory allocation, where I wrote a C version that used gmp, and used static alloc, its was roughly 5x faster
16:21:21 <dan2> Cale: 5x faster on combo 500000
16:21:36 <Cale> well, 5x isn't that much :)
16:22:05 <dan2> Cale: heh, it took C 5 seconds to computate
16:22:11 <dan2> Cale: it took haskell 24.87
16:22:12 <Cale> if it was something like 100 or 1000 times, then we'd have to worry.
16:22:28 <dan2> Cale: now if only I could preallocate the memory
16:23:14 <Cale> If worse comes to worse, you can always use the ffi and call a C function from Haskell to do the computation.
16:23:36 <dan2> heh
16:23:43 <Cale> but generally, things run fast enough
16:30:10 <flaw> hrm, does haskell(ghc) do a bit of its own memory management(read allocating and deallocating), or does it just call malloc/free for every little thing that it needs?
16:33:48 <Cale> flaw: I suspect that it's more sophisticated than calling malloc/free for each little thing. :)
16:34:27 <dan2> whats a function to make fail ...
16:34:42 <dan2> like fail with an error message or something
16:35:20 <Cale> error
16:35:40 <Cale> It will kill the program completely though
16:37:31 <flaw> Cale: hrm, I was asking because dan2 said that the slow down was in memory allocation, so I was curious if the ghc folks had worked on optimizing [de]allocation. For instance, python has it's own object[memory] [de]allocation system for that purpose, iiuc.
16:40:22 <dan2> flaw: I am using ghc.. couldn't tell you
16:40:31 <dan2> flaw: but profiling showed that allocation was the slow down
16:40:42 <dan2> 86% of the time was spent allocating memory
16:40:47 <Cale> dan2: and did you pass -O to ghc?
16:40:51 <dan2> Cale: of course
16:41:07 <dan2> Cale: otherwise 500000 would have taken years with a recursive function
16:42:30 <Igloo> It mallocs (well, mmap anonymouss) 1M chunks IIRC
16:45:06 <dan2> Cale: how do I define make a variable equal to something while using this syntax
16:45:10 <dan2> or how about this
16:45:16 <dan2> powerf x n r | n > 0 = do { r = r*x; n = n - 1; powerf x n r}
16:45:16 <dan2>              | n == 0 = r
16:45:31 <dan2> ghc complains about the equals sign in that do part
16:46:14 <Igloo> let n' = n - 1; powerf x n' r
16:46:30 <dan2> k
16:46:49 <Igloo> let n = n - 1 would have made a recursive binding
16:49:43 <dan2> oh
16:50:25 * dan2 kicks ghc
16:51:49 <dan2> bah!
16:51:55 <dan2> damn ghci
16:52:03 <dan2> powerf x n r | n > 0 = do { let r' = r*x; let n' = n - 1; powerf x n' r'}
16:52:03 <dan2>              | n == 0 = r
16:52:34 <Cale> dan2: which monad is that?
16:52:37 <dan2> power.hs:9: parse error on input `}'
16:53:16 <dan2> Cale: I/O iirc
16:53:27 <Cale> and r is of type?
16:53:37 <dan2> Integer
16:53:52 <dan2> hmm, maybe it should be float
16:53:52 <Igloo> There's no reason why this function needs to be monadic, you know?
16:54:01 <dan2> Igloo: monadic?
16:54:05 <dan2> Igloo: what do you mean
16:54:10 <Cale> you're using do
16:54:24 <dan2> Cale: oh, well it was complaining about the equals signs
16:54:44 <Cale> yeah, but beyond that, there are type errors :)
16:55:12 <Cale> there's no need for "do" there
16:55:17 <dan2> ok, removed do
16:55:21 <Igloo> monadic = in a monad
16:55:23 <dan2> its complaining about let
16:55:25 <Cale> you can just put
16:55:45 <Igloo> The reason for your syntax error is because you aren't using braces consistently - you also need them around the bodies or your let statements
16:55:56 <Cale> let { r' = r*x; n' = n - 1 } in powerf x n' r'
16:56:03 <Igloo> do { let {r' = r*x}; let {n' = n - 1}; powerf x n' r'}
16:56:19 <dan2> ahh I see
16:56:50 <Cale> or you can just skip the braces altogether
16:56:58 <Cale> and make sure that your editor is sane :)
16:57:00 <dan2> how would that work
16:57:10 <Cale> let r' = r*x
16:57:16 <Cale>     n' = n - 1
16:57:24 <Cale> in powerf x n' r'
16:58:04 <keverets> why not just "... | n > 0 = powerf x (n-1) (r*x)" ?
16:58:26 <Cale> this is also a sensible comment :)
17:01:43 <dan2>     No instance for (Fractional [Char])
17:01:43 <dan2>       arising from use of `/' at power.hs:5
17:01:43 <dan2>     In a right-hand side of function `power': 1 / (powerf x (- n) 1)
17:02:05 <Cale> well, that's interesting
17:02:29 <Cale> any chance there are strings getting in somewhere?
17:02:35 <dan2> yes...
17:02:43 <dan2> I don't know how to return an error properly
17:02:47 <Cale> remember to "read" strings
17:02:53 <dan2> k
17:02:58 <dan2> but its not an integer strings
17:03:00 <dan2> it a string
17:03:52 <Igloo> Do you think powerf should return a string?
17:03:53 <Cale> you'll get "*** Exception: Prelude.read: no parse" if you pass something invalid to read
17:04:04 <dan2> Igloo: no
17:04:10 <dan2> Igloo: I need exceptions badly
17:04:29 <Cale> dan2: why? Your program doesn't run yet :)
17:04:46 <Igloo> Are any of the results of powerf a string?
17:04:59 <Cale> can we see the definition of powerf?
17:05:11 <Cale> (the one that you settled on)
17:05:41 <Igloo> Oh, I missed your error line
17:06:01 <dan2> here, I'll paste the whole thing
17:06:01 <Igloo> You can just use   error "foo"   to return an error for now
17:06:09 <dan2> power x n | n > 0 = powerf x n 1
17:06:09 <dan2>           | n == 0 = 1
17:06:09 <dan2>           | x == 1 = 1
17:06:09 <dan2>           | n < 0 = 1/(powerf x (-n) 1)
17:06:09 <dan2>           | x == 0 = 0
17:06:12 <dan2>           | otherwise = -1
17:06:14 <dan2> powerf x n r | n > 0 = do { let {r' = r*x; n' = n -1};
17:06:16 <dan2>                             powerf x n' r' }
17:06:20 <dan2>              | n == 0 = r
17:06:43 <Cale> add a type signature for powerf
17:06:50 <dan2> Cale: ?
17:06:56 <Cale> and the compiler will point out what's wrong :)
17:07:10 <dan2> whats a type signature?
17:07:15 <Cale> i.e.
17:07:26 <Cale> gcd :: Integer -> Integer -> Integer
17:07:38 <Igloo> YM e.g.
17:07:39 <Cale> or map :: (a -> b) -> [a] -> [b]
17:07:46 <dan2> hmm, I do not know how to write type signatures
17:07:50 <Cale> yeah, e.g.
17:07:51 <Cale> :)
17:08:07 <dan2> whats an appropriate type sig?
17:08:36 <Cale> probably something to the effect of Float -> Float -> Float -> Float
17:08:48 <keverets> powerf :: (Num a) => a -> a -> a -> a
17:08:54 <dan2> thanks
17:09:14 <monochrom> @info (^)
17:09:18 <lambdabot> -- ^ is a variable
17:09:18 <lambdabot> infixr 8 ^
17:09:18 <lambdabot> (^) :: forall a b. (Num a, Integral b) => a -> b -> a
17:09:48 <Cale> yeah, n probably shouldn't be a float :)
17:10:41 <keverets> True, dat.
17:10:45 <dan2>     Cannot unify the type-signature variable `a' with the type `t t1'
17:10:45 <dan2>       Expected type: a
17:10:45 <dan2>       Inferred type: t t1
17:11:34 <Cale> well, I'll tell you what your problem is
17:11:49 <Cale> r is not intended to be in some monad
17:11:51 <monochrom> What is the do statement doing there?
17:11:59 <keverets> confusing things.
17:12:03 <Cale> but it's in the same place as that do statement, only in another case
17:12:33 <monochrom> let {r' = r*x; n' = n - 1} in powerf x n' r'
17:15:14 <dan2> ok, I changed it, it works now
17:20:19 <dan2> Cale: how do I pull the first two arguments from the commandline then print them
17:20:46 <Cale> do [a,b] <- getArgs
17:20:51 <Cale>    putStrLn a
17:20:56 <Cale>    putStrLn b
17:21:02 <dan2> perfect, thanks
17:21:51 <Cale> perhaps better would be "a:b:_ <- getArgs"
17:22:06 <Cale> which wouldn't fail when passed more than 2 args
17:26:53 <dan2> ahh
17:53:32 <dan2> is there a getopt clone for haskell?
17:56:09 <keverets> System.Console.GetOpt
17:57:15 <keverets> Which I really should use.
17:59:00 <dan2> looks like there are a few GetOpts in Haskell
