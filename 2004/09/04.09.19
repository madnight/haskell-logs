02:56:56 * Marvin-- growls
03:39:05 <Igloo> Wassup, Marvin?
03:40:06 * Igloo blinks
03:40:07 <Marvin--> libglade links with libpthread
03:40:34 <Marvin--> thing is, compiling a haskell program using the gtk2hs glade package works fine
03:40:43 <Marvin--> but ghci -package glade doesn't work
03:40:58 <Marvin--> I'm guessing it's because /usr/lib/libpthread.so is a GNU ld script
03:41:05 <Igloo> Oh, I'm going to sue you for emotional trauma, BTW
03:41:13 <Marvin--> uh-oh
03:41:24 <Igloo> I had to use unsafeCoerce# 3 times to write my gtk2hs program
03:41:29 <Marvin--> ouch
03:41:31 <Marvin--> why?
03:41:34 <Igloo> I think I'll be scarred for life
03:41:39 <Marvin--> :-/
03:42:29 <Igloo> tm <- listStoreNew [TMstring]; comboBoxSetModel cg_cb (unsafeCoerce# tm)    and two cases of   onOMChanged (unsafeCoerce# cg_set_cb :: OptionMenu) $ foo
03:42:39 <Igloo> It's possible I just missed the right functions, of course  :-)
03:43:52 <Igloo> There was something on one of the lists recently about things being ld scripts I think
03:44:30 <Igloo> http://www.mail-archive.com/glasgow-haskell-users@haskell.org/msg06239.html
03:45:37 <Marvin--> heh, and it was related to gtk2hs there too
03:49:25 <Marvin--> what you could do instead of using unsafeCoerce# is using the "safe" cast functions provided by gtk2hs
03:49:45 <Marvin--> like  castToTreeModel :: (Hierarchy.GObjectClass obj) => obj -> TreeModel
03:51:42 <Marvin--> or even   toTreeModel :: (TreeModelClass o) => o -> TreeModel
03:52:14 <Marvin--> (ListStore is an instance of TreeModelClass)
03:52:37 <Marvin--> actually, it would be even better if the comboBoxSetModel function did that for you ;-)
03:53:35 <Igloo> Aha, that's fixed that one, ta  :-)
03:54:12 <Marvin--> the treeViewSetModel function does that, it has type  (TreeViewClass tv, TreeModelClass tm) => tv -> tm -> IO ()
03:54:39 <Marvin--> so the type of comboBoxSetModel is probably to be considered a bug
03:54:45 * Marvin-- writes it down
03:57:56 <Marvin--> anyway, there are probably similar functions for your other unsafeCoerce# uses too
03:59:00 <Marvin--> (of course, the big secret is that all these toSomeType and fromSomeType functions are actually just unsafeCoerce#, but used ... safely :)
03:59:11 <andersca> @thpe unsafeCoerce
03:59:11 <lambdabot> Sorry, I don't know the command "thpe", try "lambdabot: @listcommands"
03:59:12 <andersca> doh
03:59:15 <andersca> @type unsafeCoerce
03:59:16 <lambdabot> bzzt
03:59:18 <andersca> :(
03:59:30 <Igloo> @type GHC.Base.unsafeCoerce#
03:59:31 <lambdabot> bzzt
03:59:37 <Igloo> a -> b, anyway
03:59:40 <andersca> ah
03:59:47 <andersca> so it does nothing then
03:59:51 <andersca> just tricks the type system
03:59:57 <Igloo> Yup
04:00:02 <Marvin--> exactly
04:00:25 <Marvin--> and if you restrict the usage with proper type signatures and classes and instances and crud, you can get away with it
04:00:46 <andersca> nod
04:01:32 <Marvin--> gtk2hs has this gigantic auto-generated file Hierarchy.chs (4700+ lines) that mirrors the gtk object inheritance
04:03:07 <andersca> ah, how...nice
04:03:25 <Marvin--> not really, but kinda necessary
04:04:02 <andersca> yeah
04:04:08 <Marvin--> now let's see if I can get these packages uploaded to haskell-unsafe
04:08:15 <Igloo> Cool
04:09:13 <Marvin--> yay, uploaded
04:09:22 <Marvin--> 0.9.6-0pre1, talk about a humble version
04:13:46 <Marvin--> Igloo: so anyway, all bug reports on not being able to use ghci -package glade, I'll just reassign to ghc6? :)
04:14:52 <Igloo> If it makes you feel better  :-)
04:15:59 <Igloo> More seriously, I can't do anything more than mark them upstream though  :-/
04:16:09 <Marvin--> well, neither can I :/
04:16:13 <Igloo> Although on x86+powerpc at least we may soon have .so's to solve the problem
04:16:39 <Igloo> Can you not hack it for the glade case as Sven suggests though?
04:16:54 * Marvin-- laughs at Russel Coker's mail to -devel
04:16:58 <Igloo> Hang on, is this for cmopiling?
04:17:10 <Igloo> I don't see why that thread should be relevant for compiling
04:17:51 <Marvin--> no, it's for ghci
04:18:06 <Marvin--> and you're right, I ought to be able to hack it.. the question is why Duncan hasn't done so upstream already...
04:18:35 <Igloo> OK, that's not so bad then
04:19:02 <Marvin--> ghc -package glade works fine, it's ghci -package glade that breaks
04:19:57 <Marvin--> http://lists.debian.org/debian-devel/2004/09/msg00971.html
04:19:59 * Marvin-- giggles
04:20:53 <Igloo> :-)
04:21:58 * edwinb wonders if anyone has ever tried using GHC's core language as a back-end for something else
04:25:32 <xkb> edwinb, arent there any corelanguage to jvm bytecode compilers?
04:25:48 <edwinb> No, that's not what I mean - I'm talking about replacing the front-end.
04:26:04 <xkb> ah
04:26:07 <edwinb> I'd like Core to machine code just as it is. I'm just wondering how hard it is...
04:26:18 <xkb> so compiling java to core 4example?
04:26:27 <edwinb> Well, another lazy functional language.
04:26:29 <xkb> or am I misunderstanding frontend here
04:27:52 <xkb> perhaps I should propose compiling clean to haskell core :P
04:27:54 <xkb> naah
04:28:35 <edwinb> Clean already has a whizzy fast back end so I'm not sure there'd be much point ;)
04:28:51 <xkb> I still need to read about that abc machine
04:29:17 <xkb> the exception part Im working on uses abc code extensively.. and I just dont get it (yet)
04:29:52 <xkb> Its for stack rewinding
08:27:59 <tnks> hello.
08:28:17 <tnks> I was wondering. . . if I have a list of IO actions.
08:28:30 <tnks> what would be a quick way to run them all in sequence?
08:29:11 <Riastradh> @info sequence
08:29:12 <lambdabot> -- sequence is a variable
08:29:12 <lambdabot> sequence :: forall m :: (* -> *) a. (Monad m) => [m a] -> m [a]
08:29:24 <tnks> thanks
08:29:26 <Riastradh> @info sequence_
08:29:27 <lambdabot> -- sequence_ is a variable
08:29:27 <lambdabot> sequence_ :: forall m :: (* -> *) a. (Monad m) => [m a] -> m ()
08:31:58 <Lemmih> @seen shapr
08:31:59 <lambdabot> I saw shapr leaving #Chalmers 1 day 22 hours 25 minutes 26 seconds ago.
09:42:47 <xkb> @type thrd
09:42:48 <lambdabot> bzzt
09:42:52 <xkb> @type thr
09:42:54 <lambdabot> bzzt
09:42:55 <xkb> hmm
09:43:07 <xkb> is there a selector function for the third element in a 3tuple?
09:43:14 <arjanb> @index thrd
09:43:14 <lambdabot> bzzt
09:43:31 <tic> xkb, you have to roll your own. =)
09:43:40 <xkb> ok.. no problem
09:43:41 <tic> 3rd (_,_,x) = x
09:43:42 <tic> ;)
10:14:23 <Marvin--> xkb: select sz ix = lam1E (TupP [ VarP ("x"++show k) | k <- [1..sz] ]) (varE ("x"++show ix))   and then splice it with $(select 3 3) tup  :-)
10:15:27 <xkb> looool
10:16:11 * Marvin-- likes over-engineered TH solutions ;)
10:16:29 <xkb> very much over-engineered indeed
10:19:14 <Marvin--> meh, the pretty printer is horrible for large tuples
10:19:26 * Marvin-- decides not to copy&paste the type signature for $(select 60 1)
11:40:04 <lmbdwr> hey
11:40:24 <lmbdwr> is it correct to say that denotational semantic is the semantic for the lambda calculus ?
11:40:43 <ibid> not really
11:41:11 <lmbdwr> or is it operational semantic ?
12:01:21 <ibid> lmbdwr: neither
12:01:43 <ibid> lmbdwr: though denotational semantics was developed to describe the semantics of lambda calculus
12:01:49 <ibid> but that doesn't make it the semantics of lc
12:12:43 <lmbdwr> ibid, denotational semantic is based on context modification right ?
12:15:01 <ibid> depends on what you mean by "context modification"
12:15:09 <ibid> that's not how i think of it, though
12:39:48 <lmbdwr> ibid, I'm talking about the semantic of with syntax : [[a <-- b]]E
12:40:30 <lmbdwr> (for a context modification)
12:40:42 <lmbdwr> like a closure where only one value has been changed (e.g. one beta reduction)
12:41:13 <lmbdwr> s/beta-reduction/beta0-reduction/
12:42:15 <lmbdwr> in that exemple E beeing the environment (context), and [[ ]] beeing the modification
12:42:57 <lmbdwr> of course you can express lots of stuff like continuations in it, but its just a little example to know if we're talking about the same thing 
12:52:04 <ibid> that's one possible notation for environment update, which is fundamental to all semantics systems
14:46:32 <screanjap> Hi, i'm a new haskell (hugs) user, for debugging i'd like to print a value in every iteration of a recursive function, is that possible ?
14:50:33 <screanjap> no one ???
14:57:41 <TheHunter> well, it's possible, but you should only use it if you know the implications of it
14:58:12 <TheHunter> there's a function trace in Debug.Trace which prints a message each time it's evaluated
14:58:47 <TheHunter> but that's something which is actually impossible to do in haskell
14:58:53 <screanjap> ok
14:58:59 <screanjap> suppose i have http://www.rafb.net/paste/results/YOhM1h42.html
14:59:17 <screanjap> and i want to know "restWaarde" for every iteration
14:59:24 <TheHunter> it should only be used for debugging only 
14:59:25 <screanjap> how  would i go about that ?
14:59:52 <screanjap> TheHunter: yes, that is what i want...
15:00:12 <screanjap> to see if the recursion goes as i planned :)
15:00:51 <TheHunter> so you import Debug.Trace and you replace (for example) restWaarde = a - b with restWaarde = trace (show (a - b)) a - b
15:01:13 <TheHunter> then each time, restWaarde gets evaluated, a message is printed
15:03:08 <TheHunter> sorry, should be restWaarde = trace (show (a - b)) (a - b)
15:03:36 <screanjap> ah
15:03:40 <screanjap> i wondered about that :)
15:04:25 <TheHunter> the thing is, because of haskell's lazy semantics, you never know when something get evaluated, which makes debugging kind of complicated
15:05:46 <screanjap> TheHunter: yea, but "trusting" recursion pretty much "works" most of the time :)
15:06:08 <screanjap> TheHunter: it works great !, thanks !!
15:06:48 <TheHunter> exactly
15:27:15 <screanjap> thanks again TheHunter and good night.
15:55:51 <G|o][> guys is there a way to put 2 lists into 1?
15:58:10 <psi> list1 ++ list2
16:05:08 <G|o][> tnx
17:16:33 <desrt> is there a newer ghc binary for powerpc than 5.04.3?  i'm trying to use it to build ghc 6 and it seems to be somewhat broken (ie: it rejects the code in ghc-6.2.1)
17:16:44 <desrt> (powerpc, linux, that is)
17:18:35 <desrt> failing that, getting some help using my pc to bootstrap the mac would be cool
17:37:02 * desrt finds a nice howto
18:03:37 <desrt> lame.  non-threadsafe build alert
18:04:24 <thebug> do you run debian?
18:04:39 <desrt> gentoo
18:04:55 <desrt> (on both the host and the target)
18:05:01 <thebug> don't have a clue then ... but for debian, there are 6.2.1 packages on the HE server
18:05:09 <desrt> for powerpc?
18:05:16 <thebug> dunno, let me check
18:05:28 <desrt> it listed about 8 arches for which the pacakges were avail.  powerpc wasn't one, i don't think
18:05:32 <desrt> weird stuff like hppa, even
18:06:18 <desrt> ! powerpc
18:06:22 <desrt> <- dumb :)
18:06:40 <thebug> appears that no
18:06:54 <desrt> hm?
18:06:57 <thebug> but it -should- work
18:07:13 <desrt> i sort of want to bootstrap this thing myself just for fun
18:07:15 <thebug> though I don't remember if ppc is registerized / splittable
18:07:19 <thebug> (yet)
18:07:22 <desrt> but the idea of compiling ghc 3 times doesn't really appeal to me
18:07:47 <thebug> umm...you do run gentoo, don't you?
18:07:53 <desrt> hahah
18:08:05 <thebug> let's examine that statement .... ;)
18:08:17 <desrt> ok ok
18:08:19 * Riastradh feels obligated to refer to <http://www.funroll-loops.org/>.
18:08:29 <desrt> that page is very dumb
18:08:43 <thebug> no, I'm not making this a distro war, I was just questioning the recompiling remark ...
18:08:48 <Riastradh> No, that page contains a lot of dumbness.  It is itself very amusing.
18:09:10 <desrt> Riastradh; but the page seems to be anti-gentoo... the people who it quotes often make reasonable statements.
18:09:22 <Riastradh> (I have nothing against Gentoo users; I just find what that page has on it amusing.)
18:09:23 <desrt> ie: the page ends up making a case for why you *should* use gentoo
18:09:24 <thebug> -anyway- ...
18:09:35 <desrt> heh.
18:09:37 <thebug> ghc 6.x -is- usable on PPC, I have it running myself
18:10:02 <thebug> though I did not compile it, so as to how it was done is not my forte
18:10:03 <desrt> the issue is that gentoo tries to build ghc 6.x using ghc-5.04.3 or something
18:10:19 <desrt> (which is the latest binary for powerpc available from haskell.org)
18:11:13 * desrt looks into the debian thing
18:12:22 <desrt> ugh.  debian's ghc binary depends on hugs for some reason
18:20:44 <stepcut> heh
18:22:17 * desrt searches for gzip headers inside the .deb file and manually extracts them
18:22:26 <thebug> uh
18:22:37 <thebug> you -do- know you can just 'ar x' the .deb
18:22:38 <desrt> gentoo doesn't package debian package tools :/
18:22:43 <thebug> and you'll get the tarballs
18:22:46 <desrt> no.   i didn't know that
18:23:16 <desrt> that's pretty cool
18:23:25 <thebug> yes, I've always thought so
18:23:42 <thebug> nothing weird++ needed like rpm2cpio or anything
18:23:43 <desrt> i've never see ar used for anything that wasn't object code
18:23:54 <desrt> but why not tar?
18:23:58 <thebug> po' man's tar
18:24:08 <thebug> because it's easy and universal
18:24:17 <thebug> (or moreso anyway)
18:24:33 <desrt> it gives me a /usr
18:24:45 * desrt starts thinking about uninstallable ways to install this
18:25:22 <desrt> actually, it's not bad
18:28:24 * desrt runs the relevant bits of postinst and finds himself with a working ghc
18:28:31 <thebug> excellent
18:28:38 <thebug> 6.2?
18:28:44 <desrt> ghci says: ghc-6.2.1: panic! (the `impossible' happened, GHC version 6.2.1):
18:28:44 <desrt>         loadObj: failed
18:29:58 <thebug> are you using the exact same version of gcc/binutils/glibc as the release that package was built on?
18:30:13 <desrt> probably not :)
18:30:18 <thebug> that was my guess
18:30:33 <desrt> i had planned on using it to build ghc properly
18:30:38 <desrt> so i guess i'm not too disappointed
18:32:01 <desrt> heh.  gentoo's packaging system is sort of cool in how it handles this
18:32:22 <desrt> the 'ghc' package both depends on and provides virtual 'ghc'
18:32:36 <desrt> and so does ghc-bin... and it manages to do the right thing
18:37:52 <desrt> crap :(
18:37:57 <desrt> Main.hs:87: lexical error in string/character literal
18:38:05 <desrt> this is the same error that ghc-5 was giving
18:38:58 <desrt> and for some reason this doesn't happen on x86
18:40:01 <desrt> i think it must have to do with gcc-3.4's C preprocessor
18:46:18 <desrt> simonmar fixed the bug on august 13th
18:46:53 <keverets> @arr
18:46:53 <lambdabot> I heard andersca is a pirate
18:47:07 <desrt> hey kev
18:47:16 <keverets> hello.
18:47:21 <desrt> how's the real world?
18:47:23 <keverets> Just found out today was talk like a pirate day this year.
18:47:51 <keverets> I've always been in the real world (or as real as it gets).  Post academia pays better, though.
18:48:14 <desrt> paul, you and kaska are all *not* doing 2D
18:49:20 * desrt is on his own as a result of you leaving :)
18:49:33 <keverets> are you doing 2D this year?  who else is?
18:49:39 <desrt> no idea.
18:49:43 <keverets> I'm surprised paul isn't
18:49:59 <desrt> who was the other undergrad we had?
18:50:05 <desrt> i don't remember her name
18:50:07 <keverets> I know kaska has done it for the last 3 or 4 years and has tired of it (plus there's better things for her to be doing)
18:50:16 <keverets> dina
18:50:20 <desrt> ya.  kaska is doing the thesis course
18:50:24 <desrt> i think dina is still doing it
18:53:31 <desrt> things are pretty cool tho.  we imported wolfgang thaller (powerpc ghc maintainer)
18:54:40 <keverets> nifty.
18:55:08 <desrt> anyone know when ghc is going to release?
19:23:42 <viv> \query Cale
19:24:00 * desrt pokes Cale
19:24:14 <Cale> hi viv, desrt
19:24:58 <viv> thanks to whoever poked you~!
19:24:59 <viv> =)
19:25:11 <viv> hey i still cant get the splits working.......=(
19:25:28 <Cale> desrt is ryan :)
19:25:34 <desrt> viv is viv?
19:25:46 <Cale> yep
19:25:46 <desrt> hi :)
19:26:09 <viv> hey you sure have a yummy name ryan~ =)
19:26:13 <desrt> (ironically, i think viv was the last person i poked before poking you)
19:26:55 <viv> man give me a break im new to this thing......
19:26:59 <Cale> that's true, "desrt" is ambiguously "desert" and "dessert"
19:27:20 <desrt> no
19:27:23 <desrt> it's not dessert at all
19:27:36 <Cale> it could be if you didn't know that it's "desert"
19:27:39 <desrt> chris called me dessert the other day and i got angry with him
19:27:44 <Cale> hahaha
19:28:41 <viv> anyway i prefer interpretting it as dessert.........
19:28:47 <desrt> >:|
19:28:52 <Cale> heheheh
19:29:07 <viv> yummy yummy ryan~~~~~~
19:29:14 * desrt fears
19:29:37 <viv> you are like jessica simpson's new cosmetic line....
19:29:52 <desrt> . o O ( hmm... the chicks seem to like this dessert thing )
19:30:41 <desrt> jessica simpson has a cosmetic line?
19:31:15 <viv> ya......where have you been ryan boy.......i thought you named yourself particular after her stuff.....
19:31:40 <desrt> i've had this nick since before anyone had heard of jessica simpson, so it seems unlikely
19:31:56 <desrt> speaking of which.. what exactly is your prefered spelling of your name?
19:31:59 <viv> thats true......
19:32:06 <viv> ok wheres Cale?
19:32:12 <Cale> still here
19:32:19 <viv> phew......
19:35:19 <viv> \query Cale
19:35:44 <viv> hey anyone plz teach me how to poke?
19:35:56 <Cale>  /me pokes <someone>
19:36:08 <Cale> and it would be /query <someone>
19:37:52 <Cale> (or if there's already a tab, click on the tab)
19:38:40 <viv> ya......youve taught me that didnt you......
19:38:46 <viv> sorry im forgetful.......
19:38:50 <Cale> s'ok
19:40:14 <desrt> so can hyperthreading run 2 separate programs or only 2 seperate execution threads in the same program?
19:40:28 <Cale> no idea :)
19:40:32 <desrt> ie: do the 2 threads have to share memory namespace?
19:41:12 <desrt> intel's pages (the ones that come up on google, anyway) are filled with useless buzzwords/hype/etc and no real information
19:46:45 <desrt> does ghc always use C as a backend?
19:46:52 <Cale> no
19:47:04 <Cale> there are a couple of backends
19:47:48 <Cale> this would be more something to ask Wolfgang, but I'm fairly sure there's a native backend too, and maybe some other stuff that's not quite working.
19:48:14 <Cale> firefox is getting pretty successful, eh?
19:50:00 <desrt> ya.  it's weird
19:50:38 <Cale> 1000000 downloads in under 100 hours.
19:50:49 <Cale> That's only from their FTP servers.
19:56:33 <desrt> hm.  powerpc/linux is definitely using the c backend
20:06:05 <Cale> viv: you okay?
20:07:34 <desrt> heh
20:07:38 <desrt> wolfgang just came online :)
20:07:49 <desrt> there is native powerpc backend but if you use -O it uses gcc
20:07:54 <desrt> unless you also use -fasm
20:21:43 <viv> Cale: im ok.....you guys 'wooz' me.......
20:22:02 <viv> im going to bed..nightnight everyone~
20:22:10 <desrt> see you tomorrow bright and early...
20:22:28 <Cale> see you viv
20:22:40 <viv> ryan: you'd better be early and make to the class tmr~!
20:22:47 <viv> night Cale.....=)
20:22:49 <desrt> i'm always late
20:22:59 <desrt> it's fashionable, you know?
20:23:15 <SyntaxLaptop> Igloo: alive?
20:23:27 <viv> yes Mr. Dessert.......its just as fashionable as your name........
20:23:33 <viv> night~
20:23:36 <thebug> SyntaxLaptop: HE repo is x86 only, right?
20:25:28 <SyntaxLaptop> thebug: practically; we might be able to upload non x86 packagfes, though. I have a sparc and a powerPC handy.
20:26:06 <thebug> oooooh :)
20:26:19 <SyntaxLaptop> what are you on?
20:26:21 <SyntaxLaptop> and what do you want? :)
20:26:23 <thebug> haha
20:26:36 <thebug> I'm not sure you want that answer
20:26:55 <SyntaxLaptop> hehe
20:27:54 <thebug> x86, sparc, ppc [linux, mac os, aix], vax, hppa [9000 and 3000], among other more dubious and strange machines
20:28:09 <thebug> oh yeah, don't forget about SGI MIPS
20:29:11 <Riastradh> Wait!  What about MMIX?
20:29:18 <SyntaxLaptop> hmm
20:29:26 <thebug> MMIX <?>
20:44:16 <stepcut> anyone use openvms?
20:48:55 * SyntaxLaptop uploaded darcs rc2 to debian unstable. let me know if it breaks :)
21:00:54 <thebug> stepcut: sure
23:40:01 <det> Anyone ICFPing?
23:40:30 <shrimpx> i am
23:41:00 <det> I think they are announcing the contest today, yes?
23:41:09 <shrimpx> ya
23:41:15 <shrimpx> at the end of the day
23:41:22 <det> end!
23:41:31 <shrimpx> heh
23:41:48 <shrimpx> are you in snowbird?
23:42:24 <det> nahh
23:42:32 <shrimpx> ah
23:42:33 <det> I am just interested in the results of the contest
23:42:44 <det> I didnt compete or anything
23:43:23 <shrimpx> i did, but i expect the hall of shame
23:43:34 <det> :)
23:43:53 <det> I am really interested to see how the MLton guys did with their lightning entry
23:43:56 <det> they are crazy!
23:44:07 <shrimpx> heh
23:46:30 <shrimpx> a guy from cornell said that he got "the email"
23:46:40 <shrimpx> they did theirs in java and c
23:46:41 <shrimpx> lame, etc
23:49:15 <det> tisk tisk
23:49:20 <Riastradh> Even this year's contest favoured contestants with big computing power.
23:49:23 <det> and he is talking about it beforehand
23:49:36 <Riastradh> All you needed was a naive genetic algorithm and a lot of processing power.
23:49:45 <det> I know at least 2 MLton guys went, so maybe they won lightning
23:49:56 <shrimpx> cool
23:50:21 <det> Riastradh: I heard that GA didnt work out as well as anticipated
23:50:57 <Riastradh> Heard from whom?
23:51:07 <xkb> GA =Genetic Algorithm?
23:51:12 <Riastradh> Yes.
23:51:51 <det> http://tunes.org/~nef/logs/scheme/04.06.08
23:51:55 <det> scroll down to "07:17:55"
23:52:09 <det> Riastradh: how did you do btw? :)
23:52:37 <det> Riastradh: By the excuses of computing power you are making, I am guessing not too well :p
23:52:49 <Riastradh> We didn't even try genetic algorithms.
23:53:17 <Riastradh> I really don't know how well we did.  I wasn't involved in the actual ant code development; I was working on the tools with which to do it.
23:53:20 <shrimpx> people generally used some sort of "evolution" scheme, where they'd battle tons of ants against each other on all the maps and submit the one that won
23:53:57 <det> I thought most people hand wrote their ants with tools
23:54:16 <Riastradh> Yes.  That's what the rest of the team did.
23:54:33 <shrimpx> well i think the general pattern was to encode behaviors, and then combine them different ways
23:54:43 <Riastradh> I just wrote the compiler from a higher-level ant language to the linearized state machine of the contest.
23:54:49 <Riastradh> And simulatorish things.
23:56:03 <shrimpx> my compiler didn't patch call labels correctly :( i was still working on it a couple of hours before the deadline. we had a team of part-time undergrads :)
23:56:22 <shrimpx> 2 of them
