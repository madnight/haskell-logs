00:05:49 <arauko> hah
00:07:30 <Lemmih> Good morning, #Haskell!
00:08:31 <TheJohn> hey
02:01:56 <esap> why are equalizers required to be unique up to bijection [by the definition of equalizer], and not up to isomorphism? Couldn't there be some difference?
02:22:49 <Lemmih> Hello again, Oejet.
02:23:04 <Oejet> Hello, Lemmih.
05:22:55 <TheHunter> @yow
05:22:56 <lambdabot> Is there something I should be DOING with a GLAZED DONUT??
07:48:10 <roconnor> OMG! hsInC.  That's exactly what I was looking for!
07:48:28 * roconnor is glad he is reading haskell IRC logs
07:50:49 <roconnor> hmmmm
07:53:00 * roconnor no longer so impressed
07:53:21 <roconnor> execve!
07:53:26 <roconnor> oh well
08:02:25 * roconnor doesn't think TopCoder will be happy with calls to execve.
08:35:46 <Lemmih> Welcome back Oejet2.
08:36:22 <Oejet2> Thanks Lemmih.  It seems someone else has a nick Oejet on Freenode.
08:38:16 <Lemmih> He also got your IP address (-:
08:39:04 <Oejet2> Hm, what a coinsidence.  I live at a small dormatory with a shared ADSL.
08:40:39 <Oejet2> Lemmih: How do I remove him?
08:40:56 <Lemmih> Did you register the nick?
08:41:07 <Oejet2> Lemmih: Nope.
08:42:07 <Lemmih> Then you probably gotta close the other IRC client.
08:42:24 <Oejet2> I only have one.
08:43:46 <Lemmih> Then why do I get a ping response from Oejet (cpe.atm2-0-1071147.0x3ef2a7ea.boanxx10.customer.tele.dk)?
08:44:04 <bbls> hello
08:44:07 <bbls> anyone here?
08:44:08 <Lemmih> Hey bbls
08:44:12 <Lemmih> Looking for Haskell info?
08:44:15 <bbls> i have a question
08:44:24 <bbls> not necesarly specific to haskell
08:44:43 <bbls> i wonder is there has been any trial to adapt OOP paradigm to pure functional langauges
08:45:12 <bbls> do you have any knowledge of that?
08:45:17 <Lemmih> I haven't heard of any.
08:45:25 <bbls> hmm
08:46:32 <Lemmih> To me it seems quite contradictional.
08:46:43 <bbls> why?
08:47:50 <bbls> i'm designing a new lisp-based pure functional language
08:48:02 <Lemmih> Because OO tends to hide states from the programmer (I know next to nothing about the OO methodology so I'm probably wrong).
08:49:55 <bbls> what about using structured data?
08:50:32 <Oejet2> bbls: http://www.cs.chalmers.se/~nordland/ohaskell/
08:50:53 <Philippa> or in a far more twisted kinda way you might find arrows and/or yampa interesting
08:51:06 <Cale> o'haskell is now called timber, iirc
08:51:51 <Cale> http://www.cse.ogi.edu/PacSoft/projects/Timber/Default.htm
08:52:05 <bbls> "O'Haskell is"
08:52:16 <bbls> "an object-oriented imperative language, enhanced with"
08:52:27 <bbls> hmm
08:52:50 <bbls> it seems that OOP is closely related to imperative programming
08:53:28 <arauko> mm....
08:53:35 <arauko> well there is different ways to do OOP
08:53:46 <bbls> how?
08:53:49 <Cale> Usually OOP relies quite heavily on mutable state inside objects.
08:53:55 <arauko> for example CLOS
08:54:19 <Cale> Just from a stylistic perspective.
08:54:39 <arauko> uh?
08:54:56 <bbls> Cale a pure functional OOP might define functions to be applied on some kind of structure representing the object
08:55:09 <bbls> state mutations might be replaced with functions that return the same type
08:55:15 <Cale> bbls: then you have Haskell's algebraic data types :)
08:55:30 <Philippa> give or take the type system, yes
10:38:26 <stepcut> http://cgi.ebay.com/ws/eBayISAPI.dll?ViewItem&category=208&item=3931241522&rd=1
10:40:48 <Lemmih> heh
10:41:34 <stepcut> i thought it was pretty funny
10:50:20 * Lemmih would love to see a Prolog interpreter in Haskell.
10:51:37 <Lor> Why? It's much neater to use a backtracking monad and unification so that you get prolog's benefits _and_ Haskell's type system.
10:52:52 <TheHunter> Lemmih: hugs comes with an example prolog interpreter in haskell, iirc
10:56:19 <Lemmih> TheHunter: Got an url for that?
10:56:53 <TheHunter> it's in /usr/share/doc/hugs/examples/prolog, if you're using debian
10:58:07 <Lemmih> Great (-:
10:58:47 <TheHunter> ok, it's in the tarball downloadable from http://cvs.haskell.org/Hugs/pages/downloading.htm in the dir demos
10:59:10 * esap thinks prolog is a type system.
11:11:25 <Lemmih> I was actually hoping to see how it dealt with syntax ambiguity.
12:48:12 <lambdawar> hola 
12:48:27 <stepcut> hola
12:48:39 <lambdawar> is it possible to translate a procedural langage program into a functionnal langage one ? I think yes, but maybe I'm missing something, any idea ? The main problem is about side effect, but I think I know how to avoid it 
12:49:07 <Lor> You can simulate side effects with an explicit store.
12:49:27 <stepcut> lambdawar: automatically? or by hand?
12:49:37 <lambdawar> stepcut, automatically
12:50:47 <stepcut> lambdawar: probably, but you would not want to edit the source by hand afterwards
12:51:26 <Lor> Denotational semantics essentially translates an imperative program into a functional one.
12:51:35 <stepcut> i imagine it would look a bit like disassemble source code...
12:54:15 <lambdawar> stepcut, actually i'm studying binary programs.
12:55:18 <stepcut> lambdawar: ah, well if its just for science, then everything is ok ;)
15:56:43 <tnks> hello all.
15:56:55 <tnks> Haskell has an xor operator, right?
15:57:08 <Cale>  /=
15:57:11 <Riastradh> Bitwise xor or boolean xor?
15:57:15 <tnks> boolean. . . 
15:57:19 <tnks> wait a second. . . 
15:57:23 <tnks> I think it's `xor`
15:57:32 <Riastradh> No, it's (/=).
15:57:33 <Cale> It's /=
15:57:36 <Riastradh> @eval True (/=) False
15:57:36 <lambdabot> (line 1, column 7):
15:57:36 <lambdabot> unexpected "/"
15:57:36 <lambdabot> expecting simple term
15:57:37 <Riastradh> Er.
15:57:41 <Riastradh> @eval True /= False
15:57:41 <lambdabot> True
15:57:44 <Riastradh> @eval True /= True
15:57:44 <lambdabot> False
15:57:48 <Riastradh> @eval False /= True
15:57:48 <lambdabot> True
15:58:07 <tnks> by the way, what' the "@eval" nomenclature about?
15:58:37 <tnks> I don't deal with "@"s normally. . . and I don't see them in GHCI. . . 
15:58:41 <Cale>  @eval tells the bot to evaluate the expression in its small functional language
15:58:55 <Cale> (which isn't even Haskell, but it's similar)
15:59:12 <tnks> tight! ! !
15:59:17 <tnks> I didn't even notice that. . . 
15:59:34 <tnks> I didn't look too closely, and I assumed you were typing everything.
15:59:45 <tnks> I just noticed "lambdabot". . . 
15:59:48 <lambdabot> I *am* typing everything.
16:00:13 <tnks> let me try this.
16:00:21 <tnks> @eval True /= False
16:00:21 <lambdabot> True
16:00:29 <tnks> okay, I get it.
16:08:52 <dan2> @type Control.Concurrent.forkIO
16:08:53 <lambdabot> Control.Concurrent.forkIO :: IO () -> IO GHC.Conc.ThreadId
16:18:47 <Igloo> @index basename
16:18:48 <lambdabot> bzzt
16:27:52 * Igloo gets frustrated with gtk2hs again and contemplates switching back to wxhaskell
16:30:11 <Igloo> @index unsafeCoerce
16:30:12 <lambdabot> bzzt
17:00:07 <tnks> hi again.
17:00:38 <tnks> (scratch that. . . I figured it out).
17:25:26 * stepcut got kicked out of bath and body works
17:30:59 <Igloo> Well, it was only a matter of time really, eh?
17:31:39 <stepcut> Apparently they image is copyrighted and they don't like people talking pictures :(
17:33:53 <stepcut> i guess next time I will have to pretend to be talking on my camera phone :)
17:34:44 <Igloo> :-)
17:38:40 <Igloo> Anyone who knows about GTK combo boxes around?
17:38:46 * stepcut only knows kde ...
17:42:07 <andersca> Igloo: sure
17:43:13 <Igloo> andersca: Can I have coloured text in one? And why does this find a child (and cause a segfault) in what should be an empty combo box? containerForeach cg_cb (\w -> do putStrLn "X"; containerRemove cg_cb w)
17:44:23 <Igloo> (this was created with comboBoxNewText rather than comboBoxNew if that matters)
17:44:38 <andersca> I don't think you can have colored text, no
17:44:54 <andersca> Igloo: this is GtkComboBox from gtk 2.4, right?
17:45:34 <Igloo> libgtk2.0-dev by the looks of it
17:45:48 <Igloo> Ah, but libgtk2.0-0 (>= 2.4.4)
17:46:22 <andersca> Igloo: the combo box in 2.4 uses a tree model as its data store
17:46:37 <andersca> Igloo: so you never use container remove to remove stuff
17:48:01 <Igloo> Hmm, OK. I'm unconvinced the hierarchy is sane in that case.
17:48:12 <Igloo> Thanks
17:50:41 <Igloo> andersca: If I just give it a new model, will the old one automagically be freed for me?
17:51:12 <andersca> Igloo: it will be unreffed, yes
17:53:12 <Igloo> Cool, ta
18:10:52 <Igloo> Bah, but that means I lose my on-changed-handler
21:03:32 <tnks> hey guys. . . 
21:03:49 <tnks> is there a good Haskell style guide.
21:04:07 <tnks> My layout is looking kind of suspect.
21:04:20 <tnks> it would be nice to see some preferred styles.
21:05:03 <Cale> there's some stuff on the wiki, iirc
21:05:07 <Cale> but I'm not sure how much
21:05:18 <Cale> generally, line things up which are related
21:05:51 <tnks> yeah.
21:06:00 <tnks> most of my code is readable
21:06:12 <tnks> but I'm not sure how I want to indent my "lets". . . 
21:09:12 <tnks> maybe I've ffigured it out now. . . 
21:11:06 <Cale> I sometimes put an extra space after "in"
22:48:34 <Lemmih> Good morning, #Haskell!
22:58:05 <np_hard> morning
