00:13:05 <shapr> g'day mosty 
00:15:08 <mosty> hello
00:20:08 <shrimpx> did #haskell enter the icfp contest?
00:20:08 <crackhead> can someone explain what the : is used for in the following: match bs xs = n : rest
00:20:43 <shrimpx> cons?
00:21:20 <shrimpx> crackhead: your nick rules
00:21:44 <crackhead> hehe...thanks
00:22:00 <crackhead> I wish my haskell ruled :)
00:23:54 <shrimpx> foo : bar means the list with head foo and tail bar
00:24:07 <shrimpx> @eval 1:[2]
00:24:08 <lambdabot> [1, 2]
00:25:19 <crackhead> aaah
00:25:45 <crackhead> whoa....did the channel bot just run some haskel?
00:26:03 <Cale> Not really -- it's just a small Haskell-like functional language.
00:26:27 <crackhead> @eval 1:[2,3]
00:26:27 <lambdabot> [1, 2, 3]
00:26:37 <crackhead> whoa..that's cool
00:27:25 <crackhead> can you use length with a String?
00:27:36 <crackhead> it doesn't seem to work
00:27:47 <crackhead> I assume you have to convert it to a list of some sort
00:28:03 <shrimpx> String is a synonim for [Char]
00:28:22 <shrimpx> length should work fine on strings
00:28:33 <crackhead> oh....but what if you give it an empty string?
00:28:49 <crackhead> that's what seems to error
00:28:51 <dons> try it out
00:28:56 <dons> Prelude> length []
00:28:56 <dons> 0
00:29:03 <shrimpx> Prelude> length ""
00:29:04 <shrimpx> 0
00:29:10 <shrimpx> :)
00:29:27 <crackhead> hmmm
00:31:12 <crackhead> @eval length []
00:31:13 <lambdabot> 0
00:31:26 <crackhead> dude...lamdabot is cool
00:32:31 <crackhead> so where is everyone from?
00:34:18 <vinniy> match:: String->Bool 
00:34:18 <vinniy> match (x:xs)|length (x:xs) > 0 = True
00:34:18 <vinniy>     |otherwise =False;      
00:34:29 <vinniy> oh crap
00:34:31 <vinniy> sorry
00:34:44 <vinniy> didn't mean to do that
00:34:53 <kosmikus> vinniy: if you match on (x:xs), you don't have to check it's length anymore
00:36:07 <vinniy> http://rafb.net/paste/results/7z7mHb74.html
00:36:12 <vinniy> aaah...that better
00:36:16 <shrimpx> match x = length x /= 0
00:36:30 * Boegel sends his greetings to everyone
00:36:36 <earthy> shrimpx: very wasteful version
00:36:51 <shrimpx> yeah
00:36:56 <vinniy> why doesnt that work
00:36:58 <earthy> match (x:xs) = True; match [] = False
00:37:03 <vinniy> with match ""
00:37:24 <kosmikus> match = not . null
00:38:04 <earthy> oeh, pointless style. :)
00:38:32 <kosmikus> vinniy: what do you mean, it does not work with match ""
00:38:52 <kosmikus> earthy: if you don't like it: match x = not (null x) -- ;)
00:38:54 <vinniy> is there a way to get my code to work? I just want to see if I can get this to work
00:39:03 <vinniy> purely for experimentation
00:39:16 * earthy grinz at kosmikus
00:39:23 <vinniy> kosmikus :Program error: {match []}
00:39:34 <vinniy> kosmikus : that what I get for match ""
00:40:00 <earthy> Prelude> let match = not . null in match ""
00:40:00 <earthy> False
00:40:04 <kosmikus> that's because you have only one pattern
00:40:08 <earthy> that not as you wanted?
00:40:10 <kosmikus> and that is (x:xs)
00:40:26 <kosmikus> that matches only lists with length > 0
00:40:32 <kosmikus> so your test is superfluous
00:40:39 <kosmikus> and the "otherwise" will never be executed
00:40:52 <kosmikus> we have given several solutions here that do what you want properly
00:41:11 * vinniy understand
00:41:29 <vinniy> I was trying to figure out why my implementation was wrong
00:41:43 <earthy> you see why, now?
00:41:46 <kosmikus> vinniy: you can match an arbitrary element using a simple variable, such as "x"
00:41:55 <shrimpx> people need to stop putting google search boxes on their home pages
00:41:56 <kosmikus> vinniy: you can match an empty list using [] as pattern
00:42:14 <kosmikus> vinniy: you can match a list with at least one element using a pattern such as (x:xs)
00:42:44 <earthy> shrimpx: why?
00:43:23 <shrimpx> earthy: i can't think of a more pointless element on a web page :) i know how to google; everyone does.
00:44:32 <earthy> ummm... I don't agree
00:44:39 <shrimpx> k
00:44:59 <earthy> do you know off the top of your head how to restrict your google search to a particular site? to a particular language? to a set of sites?
00:44:59 <musasabi> Is there any paper about the *implementation* of template haskell?
00:45:17 <mosty> earthy, site:foo.bar.com
00:45:18 <musasabi> earthy: click "advanced search" on the google page.
00:45:41 <shrimpx> i do. and that may be useful, but the boxes i've seen don't add anything to the search
00:46:00 <earthy> shrimpx: then those are in fact wasteful of the screen real-estate
00:46:10 <earthy> as most true browsers have a google box anyway ;)
00:46:16 <shrimpx> indeed
00:46:28 <earthy> the ones I've noticed actually do add stuff
00:47:15 <shrimpx> e.g. http://www.cis.upenn.edu/~stevez/
00:47:30 <shrimpx> i don't mean to diss on steve :) he does great work
00:56:01 <vinniy> thanks everyone
00:56:03 <vinniy> later
01:47:21 <dons> musasabi: well, there is the TH paper. otherwise, ask people on the TH mailing list
01:53:03 <dons> but the internal magic is still undocumented I think
02:09:45 <musasabi> ok, then I just have to dig it out of the source.
02:33:24 <kosmikus> dblhelix: ping
02:33:37 <dblhelix> kosmikus: ping :)
02:33:50 <kosmikus> dblhelix: did we ever think about doing *->* patterns as a view?
02:34:48 <dblhelix> kosmikus: not in great detail ... I remember mentioning something about the Zipper during a meeting in johanj's room ...
02:35:51 <dblhelix> kosmikus: do you have a particular application in mind?
02:36:27 <kosmikus> kosmikus: no, except for writing things such as the zipper or simply map the same way as in POPL
02:37:26 <kosmikus> I'm just preparing the "local redefinition" part of next week's lecture, and it somehow came to my mind, and it seemed as if I had thought about this before ...
02:40:14 <dblhelix> we talked about the source for the Zipper that is available for download on the GH site ... it incorporates quite a few hacks that aren't mentioned in the summer-school paper ... most of them involve lifting to * -> * patterns
02:41:19 <dblhelix> if we define a view with Id, Const etc. all of that can be written down rather elegantly, I suppose
02:57:45 <kosmikus> dblhelix: maybe, but we would still have to generalize the type pattern language to allow *->* patterns, or would it fit directly in the view formalism we have now?
02:59:59 <dblhelix> kosmikus: I don't think the view formalism affects that part of the machinery, i.e., the pattern language
03:03:59 <dblhelix> kosmikus: running through the code for the Zipper quickly, I don't see too much reasons why we can't write the functions using * patterns, provided that types are embedded using Id, Const, etc.
03:06:27 <dblhelix> kosmikus: mmm, on second thought ... :(
03:09:00 * arjanb launches shapr at the wiki spammers
03:09:42 <dblhelix> but ... it's quite clear why you want to fix the pattern kind of a single type-indexed function, but why would you want to fix the pattern kinds of _all_ type-indexed functions to *?
03:10:49 * dblhelix is off for lunch and thinking, thinking, ...
03:16:28 <kosmikus> dblhelix: yes, it should be possible to generalize
03:54:46 <TheHunter> good morning, everyone
03:54:55 <bbls> hi thebug
03:55:01 <bbls> TheHunter sorry :)
03:55:12 <TheHunter> hi bbls 
03:56:03 <Boegel> hello TheHunter
03:57:16 <TheHunter> hiya Boegel 
04:02:04 <Boegel> hey xkb
04:02:12 * Boegel feels polite today
04:02:13 <xkb> hi Boegel 
04:02:31 <xkb> what was that command of latex again to update the cache after you add an .sty
04:48:33 <musasabi> What book does SPLJ refer to in the ghc sources (and is it available somewhere) ?
04:49:08 <musasabi> "And here is the local function that does all the work.  It is more-or-less the @matchCon@/@matchClause@ functions on page~94 in Wadler's chapter in SLPJ."
04:49:08 <kosmikus> xkb: texhash or mktexlsr
04:49:23 <kosmikus> xkb: oh sorry, you got an answer on #latex already ...
04:50:31 <ibid> musasabi: the implementation of functional programming languages by SLPJ
04:50:46 <ibid> i assume
04:51:06 <ibid> published by prentice hall in 1987
04:52:17 <musasabi> ibid: thanks.
04:56:49 <shapr> Lemmih: has the small package of entertainment arrived today?
04:57:58 * shapr bounces cheerfully
05:03:41 <xkb> ibid, that book is out of print right?
05:03:45 <xkb> by SPJ
05:04:10 <musasabi> well there is one copy located ~1km from here and it seems to be available electronically.
05:04:14 <shapr> aha!
05:04:39 <ibid> xkb: yes
05:05:06 <ibid> musasabi: there is another book on the same subject coauthord by SPJ that is available online, afaik
05:05:35 <musasabi> ah. so I have to go to library after all.
05:06:24 <musasabi> yep, the one available online is the wrong book.
05:06:43 <xkb> I heard there was a "semi-legal" reprint service
05:06:47 <shapr> there is
05:06:55 <xkb> that sends you facsimile like documents of the book
05:06:57 <shapr> Imp of FunLangs isn't available yet though
05:06:59 <xkb> forgot the url though
05:07:00 <xkb> ah
05:07:03 <xkb> 2 bad 
05:07:10 <xkb> I would really like to get a copy
05:07:10 <shapr> that bookstore is John Meacham's project, I think
05:07:24 <xkb> perhaps its fully legal.. I dont know for sure
05:07:30 <shapr> a guy named Ward and his wife are doing the Imp of FunLangs
05:07:34 <shapr> if that's the book you're talking about
05:07:39 <xkb> i
05:07:40 <xkb> si
05:07:49 <shapr> I thought both of those were available online at some point?
05:08:00 <shapr> at least, I think I have .ps files for both...
05:08:01 * shapr checks
05:08:42 <musasabi> yes I remember something like that from the mailing lists. Would be really nice..
05:09:05 <xkb> http://cafeshops.com/haskell_books/
05:09:10 <xkb> that shop
06:08:59 <musasabi> Why is it illegal to have [1# .. 5#] ?
06:09:17 <shapr> maybe Int# isn't an instance of Enum?
06:09:35 <shapr> would be a neat way to make an unboxed list of Int#
06:09:53 <desrt> machine ints aren't strictly ordered
06:10:34 <desrt> there exists an x such that succ x < x
06:11:00 <musasabi> ok..
06:11:14 <desrt> musasabi; think wrap-around
06:11:17 <musasabi> but [1#] is invalid too.
06:11:31 * musasabi thinks this is related to polymorphism.
06:11:54 <musasabi> "Couldn't match `*' against `#'"
06:12:41 <kosmikus> yes, it's related to polymorphism
06:12:51 <kosmikus> unboxed types cannot be put in polymorphic data structures
06:13:15 <kosmikus> GHC models that by giving them a different kind
06:13:19 <musasabi> well how is [Int] polymorhic for example?
06:13:34 <kosmikus> no [] is polymorphic
06:14:36 <kosmikus> you cannot use a uniform representation of lists if the elements are unboxed, because then, they could be of different size
06:15:33 <shapr> hoi tromp 
06:15:39 <shapr> hoe gaat het met jou?
06:15:44 <musasabi> hmm that makes sense.
06:15:49 <desrt> i always thought [] was done with linkedlists
06:16:12 <kosmikus> desrt: it is, afaik
06:16:13 <desrt> and that's why head/tail are so efficient
06:16:17 <tromp> gaat zijn gangetje:)
06:16:28 <tromp> effe wennen, gebruik irc voor het eerst
06:16:57 * shapr quickly switches to english once his dutch vocabulary is exhausted
06:17:18 <tromp> i'm an irc newbie
06:17:21 <desrt> shapr; if it makes you feel any better, i didn't even know that it *was* dutch
06:17:22 <tromp> bear with me:)
06:17:26 <shapr> desrt: heh :-)
06:17:33 <shapr> greetings tromp!
06:17:34 <kosmikus> tromp: no problem, we're friendly here
06:17:39 <shapr> welcome to the crazy world of IRC people
06:17:46 <tromp> thx, i feel at home alrd:)
06:17:50 <desrt> tromp; everyone except musasabi.  he's not friendly
06:17:55 <kosmikus> desrt: :)
06:18:00 * shapr snickers
06:18:04 <tromp> how many servers have wellpopulated #haskell groups?
06:18:06 <shapr> well, musasabi was nice to me yesterday!
06:18:35 <xkb> tromp, 1 I think
06:18:55 <tromp> good, that makes the choice easy:P
06:18:56 <desrt> shae; i'm really not here enough to know the politics.  i just picked a random name
06:19:08 <shapr> musasabi was kindly explaining finnish grammar to me for the zillionth time.
06:19:29 * desrt watches you lazy-learn 27 languages at once
06:20:18 <shapr> speaking of which, I should really do my swedish homework.
06:20:27 <shapr> tromp: oh let me give you the tour!
06:20:29 <xkb> knackerbrod
06:20:30 <xkb> :D
06:20:34 <desrt> know what language i'm learning?  haskell!
06:20:41 <shapr> w00
06:20:51 <tromp> what tour?
06:20:56 <shapr> the #haskell tour
06:21:11 <shapr> I'm the official #haskell greeter, I think.
06:21:20 <shapr> well, maybe
06:21:21 <desrt> i learned about this thing called monomorphism restriction that seems even dumber than "i before e except after c"
06:21:41 <tromp> pls do, although i have no idea what a tour is like
06:21:44 <shapr> tromp: anyway, the short tour includes lambdabot, the Haskell Wiki, and the Haskell Learning web pages.
06:21:59 <desrt> @:t succ
06:21:59 <lambdabot> Sorry, I don't know the command ":t", try "lambdabot: @listcommands"
06:22:00 <shapr> oh and the channel logs
06:22:04 <tromp> i think i fnd the hawiki alrd
06:22:18 <shapr> ok
06:22:28 <xkb> @type succ
06:22:29 <lambdabot> succ :: forall a. (Enum a) => a -> a
06:22:32 <xkb> voilla
06:22:36 <desrt> rawr.
06:22:47 <tromp> looks like hugs> t:
06:22:58 <shapr> tromp: it used to use hugs, now uses GHCi
06:22:59 * desrt likes hugs
06:23:04 <shapr> @info succ
06:23:05 <lambdabot> -- succ is a method in class Enum
06:23:05 <lambdabot> succ :: forall a. (Enum a) => a -> a
06:23:11 <tromp> there's an interactive ghc?
06:23:14 <tromp> didnt know:(
06:23:30 <shapr> tromp: see, we've been helpful already :-)
06:23:47 <tromp> u sure have:P
06:24:12 <tromp> @type sequence
06:24:13 <lambdabot> sequence :: forall a m. (Monad m) => [m a] -> m [a]
06:24:19 <shapr> @index anyChar
06:24:19 <lambdabot> Text.ParserCombinators.Parsec,Text.ParserCombinators.Parsec.Char
06:24:26 <shapr> @type Text.ParserCombinators.Parsec.anyChar
06:24:28 <lambdabot> Text.ParserCombinators.Parsec.anyChar :: forall st.
06:24:28 <lambdabot> 					 Text.ParserCombinators.Parsec.Char.CharParser st Char
06:25:09 <musasabi> Why doesn't Data.HashTable.update :: Data.HashTable k v -> k -> (v -> v) -> IO () exist?
06:25:20 <tromp> why are some handles in yellow?
06:25:33 <shapr> um, I don't know?
06:25:35 <shapr> which irc client are you using?
06:25:40 <tromp> x-chat
06:25:51 <desrt> tromp; lines written to you are hilighted (like this)
06:26:02 <desrt> it's so you can see when people are talking to you
06:26:16 <tromp> aha, those are personal tells?
06:26:17 <shapr> oh those lines?
06:26:23 <shapr> no, a personal tell uses /msg
06:26:50 <shapr> and personal tells often popup in another window/buffer/whatever
06:26:50 <desrt> tromp: it's in the channel, but someone used your name.  it's just a helpful feature
06:27:39 <tromp> i see
06:27:39 <shapr> oh, the rest of the tour
06:27:49 <shapr> let's see, you've seen the wiki, you've seen the bot
06:27:56 <tromp> lambdabot: @listcommands
06:27:56 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
06:27:56 <lambdabot> ,"definitions","del-definition","det","devils","dict","dict-help","dummy
06:27:56 <lambdabot> ,"dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo
06:27:56 <lambdabot> ,"elements","eurohaskell","eval","foldoc","fortune","gazetteer","get-definition
06:27:56 <lambdabot> ,"goodbye","hello","hitchcock","index","info","jargon","join","karma","karma
06:27:57 <lambdabot> ","karma-","learn","leave","listchans","listcommands","listmodules","lojban
06:27:59 <lambdabot> ,"moo","more","msg","musasabi","part","prelude","quit","reconnect","resume
06:28:01 <lambdabot> ,"seen","set-fuel","shapr","state","stepcut","topic-cons","topic-init",
06:28:02 <lambdabot> topic-snoc","topic-tail","topic-tell","type","vera","web1913","wiki","wn
06:28:15 <shapr> oh there's http://tunes.org/~coreyr/ which includes #haskell logs
06:28:32 <shapr> and there's http://www.haskell.org/learning.html which has lots of 'learn haskell' links
06:28:32 <tromp> that's how i found this place
06:28:44 <tromp> just googled upon a log
06:28:59 <shapr> cool
06:29:02 <shapr> we're famous!
06:29:24 <shapr> so, are you learning functional programming for fun or profit?
06:29:48 <tromp> well, it's part of my job:)
06:29:55 <shapr> neat, what's your job?
06:29:59 <tromp> and fun to boot
06:30:03 <shapr> oh, you work for CWI
06:30:07 <tromp> cs researcher
06:30:21 <shapr> hoi Boegel 
06:30:40 <shapr> tromp: do you get paid to write Haskell?
06:30:51 <Boegel> hello Boegel
06:30:55 <tromp> i geet paid to do research in theory
06:31:13 <Boegel> I had a prof named Tromp :)
06:31:27 <tromp> actually i shld focus more on bioinformatics
06:31:27 <shapr> Boegel: John Tromp?
06:31:33 <tromp> yep
06:31:39 <tromp> oops
06:31:42 <Boegel> no :p
06:31:45 <shapr> oh, too bad.
06:31:48 <Boegel> H.Tromp
06:32:00 <shapr> tromp: do you have any theory questions?
06:32:02 <Boegel> too bad ? why's that ?
06:32:08 <shapr> or are you looking for fun theories to investigate?
06:32:37 <tromp> i was using haskell for my paper on a lambda computer
06:32:50 <shapr> oh that sounds neat
06:33:08 <shapr> Boegel: because John Tromp is on #haskell
06:33:08 <tromp> it's on my homepage
06:33:37 <shapr> http://homepages.cwi.nl/~tromp/cl/cl.html
06:33:44 <Boegel> you would want me to meet my prof in here ? :)
06:33:48 <tromp> u found it ald:)
06:33:55 <shapr> oh, I've seen this page before.
06:34:07 <tromp> really? how'd u find it?
06:34:32 <shapr> I was searching for the least number of bits required to make a 'real computer'
06:34:41 <tromp> 220
06:34:44 <tromp> :-)
06:34:47 <desrt> how is something proposed for inclusion in the libraries?
06:35:03 <shapr> I was reading up on the very first ideas of the von neumann machine
06:35:18 <shapr> desrt: throw an email at libraries@ and ask the GHC maintainers, if that's what you mean
06:35:35 <desrt> shapr; cool.
06:35:50 <desrt> will they ever add permute or would it anger too many university professors? :)
06:36:03 <shapr> can't you use sequence?
06:36:07 <phubuh> hey
06:36:12 <shapr> hej phubuh 
06:36:20 <phubuh> hejsan shapr
06:36:26 <desrt> heh.  i don't do monads :)
06:36:35 <shapr> the list monad is easy
06:36:42 <desrt> i take it you mean using the list monad as a model for non-determinism, though
06:36:49 <shapr> tromp: is that the total minimum?
06:36:54 <phubuh> the list monad is fun for the whole family
06:36:56 * shapr reads the page
06:37:27 <tromp> that's just the size of my universal lambda interpreter
06:37:36 <shapr> ah
06:37:48 <phubuh> i'm having trouble with this category theory exercise
06:38:01 <phubuh> it asks me to define a category where morphisms are numbers and composition is addition
06:38:15 <phubuh> and i can't figure out what it is, but it seems very strange
06:39:00 <shapr> tromp: have you seen Brent Kerby's papers on combinator bases?
06:39:03 <shapr> might be interesting to you
06:39:04 <phubuh> for example, since addition is commutative, f;g = g;f
06:39:15 <tromp> not that i remember
06:39:17 <desrt> shapr; oh. this isn't the permute i want.
06:39:29 <shapr> this is not the function you are looking for...
06:39:41 <phubuh> and it seems to me as if f;g = g;f requires that f, g: A -> A
06:39:42 <desrt> *Main> permute [1,2,3]
06:39:42 <desrt> [[1,2,3],[1,3,2],[2,3,1],[2,1,3],[3,1,2],[3,2,1]]
06:39:50 <desrt> it needs to do this
06:39:59 <shapr> @wiki PreludeExts
06:39:59 <lambdabot> http://www.haskell.org/hawiki/PreludeExts
06:40:33 <tromp> wow, by coincidence i was reading http://www.nsl.com/papers/interview.htm only yesterday
06:40:36 <Boegel> @def foldl
06:40:36 <lambdabot> Sorry, I don't know the command "def", try "lambdabot: @listcommands"
06:40:43 <Boegel> @listcommands
06:40:43 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
06:40:43 <lambdabot> ,"definitions","del-definition","det","devils","dict","dict-help","dummy
06:40:43 <lambdabot> ,"dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo
06:40:43 <lambdabot> ,"elements","eurohaskell","eval","foldoc","fortune","gazetteer","get-definition
06:40:43 <lambdabot> ,"goodbye","hello","hitchcock","index","info","jargon","join","karma","karma
06:40:44 <lambdabot> ","karma-","learn","leave","listchans","listcommands","listmodules","lojban
06:40:45 <lambdabot> ,"moo","more","msg","musasabi","part","prelude","quit","reconnect","resume
06:40:48 <lambdabot> ,"seen","set-fuel","shapr","state","stepcut","topic-cons","topic-init",
06:40:49 <shapr> @index foldl
06:40:49 <lambdabot> topic-snoc","topic-tail","topic-tell","type","vera","web1913","wiki","wn
06:40:52 <lambdabot> Data.List,GHC.List,Prelude,List
06:41:06 <Boegel> @get-definition Prelude.foldl
06:41:06 <lambdabot> Prelude.foldl not defined
06:41:08 <desrt> shapr; ah.  i already have one shorter than this :)
06:41:13 <phubuh> @shapr
06:41:13 <lambdabot> needs sleep
06:41:28 <TheHunter> phubuh: that's right, you have a category with one object. Every monoid is such a category and vice versa.
06:41:36 <shapr> @type Prelude.foldl
06:41:37 <lambdabot> Prelude.foldl :: forall a b. (a -> b -> a) -> a -> [b] -> a
06:41:44 <phubuh> TheHunter: oh!
06:42:01 <Boegel> can you ask the definition of a function to lambdabot?
06:42:17 <shapr> Boegel: no, I haven't gotten around to making that work
06:42:25 <Boegel> oh okay
06:42:28 <Boegel> I'll use Hugs ;)
06:42:34 <tromp> looking at http://tunes.org/~iepos/joy.html now
06:42:39 <shapr> I love Joy
06:42:43 <shapr> it's so much fun to write
06:42:48 <shapr> 100.0 / rotate [0 =] [pop] [dup rolldown - swap /] ifte > .
06:43:04 <shapr> I'm very fond of postfix stackbased concatenative functional programming languages.
06:43:21 <tromp> but prolly less suitable for making tiny universal machine
06:43:23 <phubuh> don't we all
06:43:24 <shapr> I've been looking for research on something like a parallel Joy
06:43:24 <Boegel> can you see the def of foldl in Hugs shapr ?
06:43:33 <shapr> Boegel: I don't know
06:43:58 <Boegel> okay, nevermind :)
06:44:04 <Boegel> I'll look into the source then
06:44:12 <shapr> Boegel: if you find a good way to do that, I'd like to know
06:44:44 <shapr> tromp: maybe not... Brent Kerby broke Joy down to several different combinations of four combinators.
06:44:55 <shapr> Are there any existing supercombinator implementations?
06:45:16 <Boegel> ow, I thought that would be possible...
06:45:21 <Boegel> I know what foldl does
06:45:23 <Boegel> but
06:45:39 <Boegel> I need something simalar for my FunMath definition of my ray caster
06:45:45 <shapr> ?
06:45:48 <tromp> but it sure looks interesting!
06:46:04 <Boegel> I need to get the smallest value of a list, and foldl seems ideal for that to me
06:46:15 <shapr> Boegel: what about minimum?
06:46:16 <Boegel> only, I need to define every function I use...
06:46:25 <Boegel> yeah, but it's no ordinary list
06:46:32 <shapr> what's unusual about it?
06:46:33 <Boegel> @index minimum
06:46:33 <lambdabot> Data.List,GHC.List,Prelude,List
06:46:37 <musasabi> I am having problems with "adder h (k,v) = H.lookup h k >>= \iv -> H.insert h k $ (+) v $ maybe 0 id iv" leaking space (H is Data.HashTable), any suggestions?
06:46:40 <Boegel> it's not just a list
06:46:52 <Boegel> it's a (a,b) list
06:47:02 <shapr> @index minimumBy
06:47:03 <lambdabot> Data.List,List
06:47:04 <Boegel> [(a1,b1),(a2,b2),...]
06:47:11 <shapr> tada
06:47:12 <Boegel> something like that
06:47:14 <shapr> use minimumBy
06:47:18 <Boegel> yeah, okay
06:47:26 <Boegel> but, I still need the definition :)
06:47:33 <shapr> specifically, minimumBy (\ (x,_) -> x)
06:47:56 <shapr> or just minimumBy fst, I tihnk
06:48:16 <shapr> musasabi: any ideas where it's leaking?
06:49:30 <shapr> musasabi: some of that can be easily strictified, I think
06:49:35 <shapr> like $! (+) v
06:50:34 <desrt> OMG!  dudes!
06:50:39 <desrt> NP == P!
06:50:42 <desrt> i gotta go!
06:51:06 <musasabi> that $! makes it a little bit faster but does not alter space usage.
06:51:07 * shapr bets that desrt would write out this very short proof but the margin of his IRC client is too small
06:51:17 <phubuh> i have a wonderful proof of that, but sadly it doesn't fit in this erc buffer ... damn it
06:51:22 * shapr snickers
06:52:50 <tromp> dont bother with the proof
06:53:00 <tromp> just solve the next RSA challenge
06:53:28 <tromp> and post the Xbox signing private key:)
06:53:33 <shapr> heck yeah
06:53:53 <tromp> ppl will take much more notice than any purported proof:)
06:53:59 <Lemmih> shapr: I got it! You're package is here (well it's still at the post office).
06:54:04 <shapr> w00
06:54:11 <shapr> Lemmih: I hope the seat is better than your current seat
06:54:20 <shapr> the nifty bits should be at least minorly entertaining
06:54:34 <shapr> Lemmih: ps. Nome is in Alaska
06:56:06 <Lemmih> I'm gonna pick it up after I've eaten.
07:00:51 <Boegel> which package ? :)
07:01:10 <earthy> dsrt: what?
07:01:16 <shapr> it's the secret surprising package of niftiness I posted to Lemmih on Friday.
07:01:32 <shapr> I picked up some of the stuff on my desk and put it into the envelope.
07:01:57 <Boegel> niftiness ?
07:02:11 <shapr> yes, substantive of 'nifty'
07:02:19 <shapr> @wn nifty
07:02:21 <lambdabot> *** "nifty" wn "WordNet (r) 2.0"
07:02:21 <lambdabot> nifty
07:02:21 <lambdabot>      adj : very good; "he did a bully job"; "a neat sports car"; "had a
07:02:21 <lambdabot>            great time at the party"; "you look simply smashing"
07:02:21 <lambdabot>            [syn: {bang-up}, {bully}, {corking}, {cracking}, {dandy},
07:02:23 <lambdabot>             {great}, {groovy}, {keen}, {neat}, {not bad(p)}, {peachy},
07:02:25 <lambdabot>             {slap-up}, {swell}, {smashing}]
07:02:27 <lambdabot>      [also: {niftiest}, {niftier}]
07:03:44 <Boegel> and what does it include ? some broken pens and stuff like that ? :)
07:04:10 <shapr> actually, I will say that one of the things in there originated in Nome, Alaska
07:04:32 <Boegel> eh ? :o)
07:04:38 <Boegel> is this a game or something ?
07:04:44 <shapr> no game
07:05:25 <shapr> one thing came from Ireland, one from the USA, one from Finland, one from Belgium...
07:05:36 * shapr shrugs
07:06:22 * Boegel screams out loudly: I have my GMail account !
07:07:41 <Igloo> Now read http://gmail-is-too-creepy.com/  :-)
07:17:59 <earthy> good one
07:18:09 <earthy> I hadn't read my g-mail for a while. ;)
07:19:15 <musasabi> hmm adder wants to eat much memory even with strictness annotations
07:19:44 <shapr> that's suspicious
07:20:02 <shapr> does it work at all?
07:20:08 <musasabi> yes..
07:20:13 <shapr> hm
07:20:36 * musasabi suspects Data.HashTable but that would be stupid
07:21:10 <shapr> could be
07:21:36 <Igloo> adder?
07:22:09 <musasabi> hmm it appears more and more suspicious.
07:22:51 <musasabi> http://youzen.b2.fi/~musasabi/a.hs
07:23:16 <musasabi> commenting the delete out modifies the end resulting hash table..
07:24:20 <musasabi> That is iterating ten times over the table and adding one yields 10 with delete and 5 without it.
07:24:31 * musasabi produces an easy test case
07:26:29 <Igloo> (+) on Int should be strict, so your second $! should do nothing
07:27:33 <Igloo> I don't know if insert will actually force the hash table to be updated or not
07:29:09 <musasabi> testing a little bit revealed the problem...
07:29:23 <musasabi> insert does not delete the old association from the hashtable.
07:30:24 <shapr> ah
07:30:26 <shapr> it's one of those
07:30:45 <musasabi> http://youzen.b2.fi/~musasabi/h.hs displays it quite nicely.
07:32:57 <musasabi> should I post it to libraries@haskell.org or is it a feature?
07:33:09 <shapr> it might be a feature
07:33:26 <shapr> I think the FP Algorithms book talks about HashTables that are implemented that way
07:33:36 <shapr> I think you should still post it to the list
07:33:48 <shapr> because if it is a feature, it should be mentioned
07:38:08 <Boegel> Igloo, I believe they are overexaturating with the whole GMail thingie
07:38:22 <Boegel> Microsoft has the same possibility with Hotmail
07:40:39 <tromp> can u use gmail just for forwarding, without any permanent record of the forwarded mails?
07:41:06 <ibid> tromp: there is no forwarding done, but there are no permanent records of mails you delete, afaik
07:42:30 <Boegel> probably not, but who gives a shit
07:47:42 * ibid does
07:47:57 <ibid> and tromp, apparently, since he asked
07:49:07 <dv_> hey what does 'f@x = (function body here)' do?
07:49:18 <shapr> bind the value of x to f
07:49:27 <shapr> it's useful for constructor unpacking for example
07:50:05 <Igloo> It's essential;y the same as   f = (function body here) \n  x = f
07:50:43 <dv_> hm okay, thanks
07:50:59 <Igloo> It may actually be the same if there is no type signature for f
07:51:55 <Igloo> Oh, and hugs won't let me give f an overloaded type, so I think it is the same
07:52:09 <shapr> shapr :: Overloaded
07:57:02 <Lemmih> shapr: I'll be here tomorrow /-:
07:57:10 <Lemmih> *It'll
07:57:15 <shapr> oh, ok
07:57:19 <Lemmih> I'm81322878
07:57:24 <Igloo> re the libraries@ mail, you don't need to lookup before delete surely?
07:57:25 <shapr> wow
07:57:35 <Lemmih> Ops. Ignore that.
07:58:25 <Boegel> hehe Lemmih :o)
07:58:30 <Boegel> ICQ ? :p
07:59:18 <Lemmih> No. Trying to change desktop while deleting text.
08:02:51 <Boegel> eh ? :p
08:09:10 <musasabi> Igloo: if you want to update (and the new value depends on the old one) then you need to have all three.
08:10:34 <Lemmih> Boegel: I'm using Linux.
08:10:42 <shapr> I'm abusing Linux.
08:11:32 <Igloo> Oh, I see, I thought you meant overwrite
08:17:37 <Boegel> so Lemmih, what about that ? (I'm not that familiar with linux)
08:21:17 <Lemmih> Boegel: I have several desktops which I navigate through with the keyboard + I also use the keyboard for all other things.
08:22:49 <Boegel> I know about the desktop thing
08:22:53 <Boegel> that damn handy
08:23:09 <Boegel> do you have hints for me which Linux distro I should use now ?
08:23:20 <Boegel> I was keen on Red Hat, but that's over now isn't it ?
08:23:31 <Boegel> I'm planning to give Linux another go...
08:23:45 <shapr> well, many here on #haskell use Debian
08:23:50 <musasabi> Debian is quite nice for many things.
08:23:53 <Igloo> "over"?
08:24:03 <Igloo> Anyway, as they say, Debian rules  :-)
08:24:09 * shapr agrees
08:24:14 <bbls> musasabi i don't understand why some people consider a distro better than other
08:24:28 <bbls> musasabi what's possible to do under debian and not under other distro?
08:24:37 <Philippa_> set certain things up quickly
08:24:42 <Philippa_> this is the entire point of a distro...
08:24:43 <TheHunter> debian is just damn convenient
08:24:43 <bbls> (i use myself debian)
08:24:52 <bbls> ah
08:24:54 <bbls> yes
08:25:07 <bbls> but then not from the point of view of software you meant
08:25:14 <bbls> since software is shared across all distros
08:25:15 <Igloo> Debian is philosophically better and, many believe, technically superior. It also has more packages than most (all?) others
08:25:17 <Nioate> bbls: nothing is impossible to do with other dristros, but debian has nice packages that fit together
08:25:37 <bbls> i've observed the nice package management myself
08:25:39 <musasabi> debian makes things easy.
08:25:44 <Igloo> Ooops, I meant to say philosophically different
08:25:58 <bbls> Igloo :)
08:26:02 <Philippa_> musasabi: I'm in two minds about that. A newbie handed a fresh sarge install and no other computer would be completely fucked
08:26:16 <shapr> imho, software should improve my speed of change
08:26:18 <musasabi> technically I like BSDs better, but they tend to cause all kinds of problems with third party software.
08:26:22 <Philippa_> as sarge doesn't even give you means of accessing the documentation by default unless you already know exactly where it's located
08:26:25 <shapr> if I have to compile the source myself, that's not speed
08:26:32 <Igloo> Philippa_: I thought the install process/default install was meant to be much better in sarge?
08:26:34 <Nioate> mainly it's the work-already-done-for-me factor in my case
08:26:52 <Philippa_> Igloo: it is. OTOH, it doesn't give you a hell of a lot - no text-mode web browser, for example
08:27:04 <Philippa_> much better at picking up hardware though
08:27:13 <Igloo> Newbies don't want text mode web browsers
08:27:21 <Philippa_> they want access to documentation
08:27:26 <Philippa_> oh, it doesn't give you X either
08:27:41 <Philippa_> so you've /no/ web browser or indeed anything else for finding help online
08:27:46 <bbls> well, i don't care about newbies :)
08:27:55 <shapr> I love newbies.
08:27:58 <shapr> they're my friends!
08:28:00 <Lemmih> Boegel: I very fond of Debian.
08:28:02 <Philippa_> better yet, you probably don't know where what little documentation's sitting on your HD happens to've been placed
08:28:24 <Igloo> Fair enough, I haven't gone through an install, but I'm surprised if there's nothing to prompt you to install X
08:28:30 <shapr> I went through an install recently
08:28:33 <shapr> I was impressed.
08:28:40 <shapr> I used the most recent installer beta
08:28:47 <shapr> it's gotten much easier.
08:28:56 <shapr> it's still harder than Mandrake, but ...
08:29:07 <Philippa_> it's a /lot/ easier if you have a little bit of knowledge, yeah
08:29:15 <shapr> bea said that Mandrake is easier to install than Windows ever has been.
08:30:26 <bbls> shapr i'm working on a hobby os myself, and my main question is whenever the newbies will be able to understand the partitioning process and correcly do it.
08:30:39 <shapr> if it's a hobby OS, the answer is ... NO
08:30:44 <shapr> newbies don't understand anything.
08:31:09 <Philippa> you want a clear "this is how you do it" document
08:31:10 <bbls> then what choices does the installer should offer?
08:31:14 <shapr> probably none
08:31:19 <bbls> especially when there is no more room for another partition?
08:31:27 <reffie> i like to watch
08:31:34 <shapr> reffie: software voyeur :-P
08:31:38 <Philippa> "hey, you probably don't know what you want to do with this yet - you might want to read this article here..."
08:31:40 <reffie> heh
08:32:16 <reffie> anyway, why write a hobby os, when you could work on improving freebsd :P
08:32:24 <shapr> I'd suggest you have zero choices in newbie mode, except maybe one button for going to expert mode
08:32:54 <shapr> that button should say "if this installer crapped out on you the first time, there's a small change expert mode will let you fix the problem"
08:33:02 <shapr> s/change/chance/
08:33:21 <bbls> reffie since i have another philosophy on how computing should be done
08:33:26 <bbls> shapr hmm
08:33:33 <reffie> bbls :(
08:33:38 <bbls> shapr maybe include some help file along with the installer itself
08:39:58 <Boegel> if I should get Debian (can I just download iso's of that ?), should I be able to install and work on it if I only have experience with Mandrake and Red Hat ?
08:40:15 <Boegel> I know a little bit of shell to, but I don't know crap on compiling and stuff like thart
08:52:34 <vivien> you are idle.......
08:53:17 <Igloo> http://www.debian.org/distrib/cd
08:54:03 <Igloo> And yeah, as long as you install gnome or something you should have no problem
09:10:09 * shapr podels
09:10:17 <shapr> vivien: I am not!
09:10:28 <shapr> vivien: so, do you know cale and desrt?
09:10:40 <Boegel> gnome or kde ?
09:10:52 <Boegel> what's is better for a future scientist/programmer ?
09:10:58 * shapr doesn't know
09:11:03 <shapr> I've heard KDE is more windows-like
09:11:06 <shapr> but I prefer gnome
09:11:12 <Boegel> I don't want windows like :)
09:11:19 <shapr> and I actually use ion, which isn't either of those
09:11:23 <Boegel> I want a nifty gui, no teletubbie gui
09:11:32 <shapr> well, try both
09:11:35 <shapr> debian has both
09:11:43 <Boegel> I know
09:11:44 <vivien> shapr: whos this?
09:11:51 <Boegel> but I don't want to install both
09:12:00 <Boegel> because i don't know how to uninstall properly :$
09:12:12 <shapr> vivien: greetings, I'm Shae Erisson. I type to you from an apartment about ninety kilometers south of the Arctic Circle.
09:12:26 * Boegel laughs
09:12:30 <vivien> wowserz.....
09:12:41 <shapr> oh, and about a third of the way around the world east of you.
09:12:48 <vivien> how did you know that i know Cale + dsrt?
09:13:00 <shapr> vivien: it's my secret superhero powers
09:13:09 <shapr> well maybe not
09:13:20 <shapr> in reality, I know that Cale works at mcmaster, and cale works with desrt 
09:13:48 <shapr> and since the #haskell channel isn't quite as popular as say, #debian
09:14:02 <shapr> I had a good basis for guessing that you probably knew Cale and desrt.
09:14:22 <shapr> vivien: sensible?
09:14:32 <vivien> btw, i insist that dsrt means -> "dessert" not 'desert' as implied by dsrt himself....
09:14:38 * shapr snickers
09:14:44 <shapr> I'll take your word for it.
09:15:06 <shapr> I thought it was short for 'Descartes - Real Time'
09:15:15 <shapr> vivien: so, do you write Haskell code too?
09:15:28 <vivien> im trying to..that is.....
09:15:31 <shapr> oh cool
09:15:35 <shapr> you have any questions?
09:15:41 <shapr> I'm the unofficial greeter person on #haskell
09:15:46 <vivien> we kinda worked in the same lab..
09:15:51 <shapr> I can give you the quick tour of #haskell if you want
09:15:55 <vivien> but they are the 'haskell people',
09:16:02 <vivien> i had nothing to do with it.....
09:16:04 <vivien> not yet..
09:16:06 <shapr> I always wanted to be a haskell people.
09:16:15 <shapr> vivien: has that all suddenly changed?
09:16:15 <vivien> that'd be nice!
09:16:24 <shapr> have you now joined the secret cabal of functional coders?
09:16:37 * Boegel bounces
09:16:39 <vivien> im trying to get them to accept me..hehe
09:16:42 <shapr> or are you just trying to infiltrate without their knowledge?
09:16:42 <Boegel> \o/
09:16:45 <bbls> :)
09:16:45 <Boegel> o//
09:16:45 <shapr> ah, good idea
09:16:47 <Boegel> \\O
09:16:48 <vivien> but i dont really care if they dont.....
09:17:12 <shapr> well
09:17:16 <shapr> I'll give you the tour, that should help.
09:17:23 <vivien> =)
09:17:45 <shapr> ok, the local goodies are  lambdabot, hawiki, the irc channel logs, and the learning pages.
09:17:52 <shapr> lambdabot does cool and useful haskell tricks
09:18:08 <shapr> let's say you know the name of a function, but you forgot which module it's in
09:18:11 <shapr> @index anyChar
09:18:12 <lambdabot> Text.ParserCombinators.Parsec,Text.ParserCombinators.Parsec.Char
09:18:18 <shapr> or you want to know the type of a function
09:18:28 <shapr> @type Text.ParserCombinators.Parsec.Text.anyChar
09:18:29 <lambdabot> bzzt
09:18:32 <shapr> doh
09:18:36 <shapr> @type Text.ParserCombinators.Parsec.anyChar
09:18:37 <lambdabot> Text.ParserCombinators.Parsec.anyChar :: forall st.
09:18:37 <lambdabot> 					 Text.ParserCombinators.Parsec.Char.CharParser st Char
09:18:40 <shapr> ah, that's better.
09:18:51 <shapr> the Haskell Wiki is a collaborative editing thingy
09:19:01 <shapr> http://www.haskell.org/hawiki/RecentChanges
09:19:04 <shapr> lots of nice goodies there
09:19:28 <vivien> wow..thats alot to absorb considering im sneaking on X-Chat from work....
09:19:46 <shapr> the readable irc channel logs are at http://tunes.org/~coreyr/
09:19:55 <shapr> the raw logs are at http://tunes.org/~nef/
09:20:01 <shapr> for searching or whatever
09:20:09 <vivien> you are awesome~!!
09:20:11 <vivien> ^_^
09:20:21 <shapr> the learning page is probably a good place to start browsing, http://www.haskell.org/learning.html
09:20:30 <shapr> if you have any specific questions, feel free to ask me
09:20:44 <shapr> ok, that was the tour
09:20:47 <vivien> thanks alot for the tour..
09:20:56 <vivien> ok, shapr ROCKS!
09:20:58 <shapr> want to know more?
09:21:00 * shapr grins
09:21:14 <vivien> for sure yeah~!!
09:21:21 <shapr> awright
09:21:22 <vivien> but maybe not now,
09:21:25 <shapr> ok
09:21:33 <vivien> i have to work on some matrix stuff..
09:21:37 <vivien> yikes!
09:21:49 <shapr> so um, do you have agents in your matrix?
09:22:09 * mornfall sitting on an introductory haskell course... yay
09:22:22 <mornfall> i'm starting to like this university (C++ course was nightmareish...)
09:22:28 <shapr> mornfall: they're usually better in front of you, rather than underneath you.
09:22:32 * shapr snickers evilly
09:22:39 <musasabi> hmm found a bug in ghc for a change.
09:22:40 <mornfall> shapr: ah-hah .)
09:22:49 <shapr> musasabi: whoa, neat
09:22:51 <musasabi> with parallel arrays.
09:23:10 <shapr> oh, did you see what I said about the class-local stuff?
09:23:34 <musasabi> no, I was not reading the channel *looks at the backlog*
09:23:43 <shapr> it was yesterday I think
09:24:17 <shapr> latest version of parr uses the class-local stuff that Manuel Chakravarty and SPJ wrote a paper about.
09:24:27 <shapr> I don't know if it's implemented in the 6.2 though
09:25:18 <shapr> musasabi: want urls?
09:26:01 <musasabi> shapr: would be nice (the bug occurs with both 6.2 and the debian cvs snapshot)
09:26:53 <musasabi> http://youzen.b2.fi/~musasabi/parr.hs
09:29:32 <xs> hm. am i being stupid? is (**) defined on Integer?
09:29:49 <Igloo> @type (**)
09:29:50 <lambdabot> (**) :: forall a. (Floating a) => a -> a -> a
09:29:53 <Igloo> No
09:30:15 <Igloo> (That's an answer to your second question)
09:30:24 <xs> hehe
09:30:38 <xs> that's weird. thanks. so is there a way to perform (**) on integers?
09:30:46 <Igloo> @type (^)
09:30:47 <lambdabot> (^) :: forall a b. (Integral b, Num a) => a -> b -> a
09:30:54 <xs> ooh, i was being stupid. thanks.
09:31:30 <Igloo> (**) is probably defined in terms of logs and suchlike
09:32:42 <xs> bit strange though. (although logical..)
09:35:58 <musasabi> reported it to http://sourceforge.net/tracker/index.php?func=detail&aid=1035575&group_id=8032&atid=108032 .
09:40:19 <Igloo> musasabi: I'm fairly sure it won't matter in this case, but giving the ghc-cvs date would be helpful in general
09:41:03 <Boegel> I'm out
09:41:04 <Boegel> bye !
09:42:46 <musasabi> Igloo: how do I get the date from ghc?
09:43:07 <Igloo> It's in the package version
09:43:26 <Igloo> dpkg -s ghc-cvs | grep Version
10:26:13 * Marvin-- yawns
10:30:31 <Igloo> Wassup, dude?
10:31:14 <Marvin--> eh, just tired from the nasty cold I've been having for a while, I guess
10:31:25 <Igloo> :-/
10:32:24 <Marvin--> and I'm kinda busy since I've found a nice flat that I could grab if I move quickly
10:32:33 <Marvin--> so there's a ton of things to do
10:32:35 <Igloo> Cool
10:32:41 <Igloo> House-hunting sucks
10:33:27 <Marvin--> well, I'll still be house-hunting since it's a temporary thing, but it's a lot less temporary than living in a student flat when you're no longer a student and can get kicked out at any time :)
10:39:23 * shapr cackles evilly
10:39:45 <kristnjov> you mean chuckle?
10:39:57 <shapr> no, chuckling would be quiet
10:40:06 <shapr> cackling is what witches do around a cauldron
10:40:23 <shapr> loud racous screechy almost painful laughter
10:40:35 <Marvin--> and as we all know, shapr is a web witch
10:40:37 <kristnjov> alright alright i get it
10:40:42 <shapr> raucous?
10:40:45 <shapr> @wn raucous
10:40:49 <lambdabot> *** "raucous" wn "WordNet (r) 2.0"
10:40:49 <lambdabot> raucous
10:40:49 <lambdabot>      adj 1: unpleasantly loud and harsh [syn: {strident}]
10:40:49 <lambdabot>      2: disturbing the public peace; loud and rough; "a raucous
10:40:50 <lambdabot>         party"; "rowdy teenagers" [syn: {rowdy}]
10:40:52 <shapr> aha
10:41:15 <monochrom> shapr is a rowdy teenager.
10:44:28 <thebug> haha
10:44:36 <kristnjov> randyyyy
10:44:52 <shapr> randy is a nice word, but raucous is better.
10:45:40 <shapr> yay, my BMI is down to 32.1 from 36.2
10:46:59 <Igloo> Hmmm, ghci powerpc support in CVS now
10:47:16 <shapr> whee
10:47:40 * Igloo thinks about soliciting sparc builds of ghc6+ghc-cvs so I can give updated packages
10:48:14 <shapr> @eval 107 / (172 * 172)
10:48:14 <lambdabot> 0
10:48:21 <shapr> @eval 107.0 / (172.0 * 172.0)
10:48:22 <lambdabot> type error
10:48:26 * shapr blinks
10:49:04 <Igloo> Doe sit have floats? Is . being treated as function composition?
10:49:07 <Igloo> @eval 1.2
10:49:07 <lambdabot> <<EM Dynamic -> EM Dynamic>>
10:49:14 <shapr> oh, I guess so
10:52:56 <shapr> @eval 1
10:52:57 <lambdabot> 1
10:53:00 <shapr> @eval 1 + 1
10:53:00 <lambdabot> 2
10:53:01 <andersca> @arr
10:53:01 <lambdabot> Aye Aye Cap'n
10:53:03 <shapr> @eval 1 + 1.0
10:53:03 <lambdabot> type error
10:53:06 <shapr> hej andersca
10:53:10 <shapr> is andersca.org down?
10:53:12 <andersca> hej
10:53:24 <andersca> shapr: hmm, I haven't had time to copy stuff over since the hd crash
10:53:27 <shapr> ah, ok
10:53:32 <shapr> inga brattom
10:55:50 <ibid> theh
10:55:56 <ibid> i read that as a female name first
10:56:15 <ibid> (inga brattom)
10:57:02 <Marvin--> hah
13:44:02 <Boegel> hello everyone
13:44:16 <Boegel> shapr, I checked out that Debian website you gave me
13:44:22 <Boegel> 7 cd's ! ! !
13:44:39 <Marvin--> you don't need them all
13:44:57 <kristnjov> get gentoo
13:45:03 <kristnjov> gentoo rocks
13:45:07 <kristnjov> although i'm a win xp user :)
13:45:14 <Boegel> lol
13:45:29 <Boegel> gentoo isn't really for people who are not that familiar with linux, is it ?
13:45:37 <Boegel> which ones do I need Marvin-- ?
13:45:47 <Boegel> and how do I know which ones I do need ?
13:45:47 <monochrom> That is not the right idea.
13:46:10 <Boegel> monochrom, why not ?
13:46:34 <monochrom> The right idea is: gentoo isn't really for people who have no computer to dedicate for a week of compiling source code.
13:46:45 <Marvin--> Boegel: well, if you have a reasonably fast internet connection there's no need to get anything else than the first CD, then you can get everything else from the net
13:46:56 <musasabi> Boegel: you need the first CD only.
13:47:02 <Marvin--> Boegel: you can even get a small netinstall CD that downloads pretty much everything off the net
13:47:33 <monochrom> But if you are willing to let a computer work for a week on its own, gentoo is pretty automatic and you need know nothing.
13:49:10 <thebug> you don't need anything other than the ~200MB install cd for debian if you have a decent net connection
13:49:23 <Boegel> yeah, okay I have that
13:49:24 <thebug> the 7 cds would be for someone with -no- internet connection
13:49:38 <Boegel> but I always have the problem which packages I should install...
13:49:58 <Boegel> I'm not sure which things I'll need, and which I won't need...
13:49:59 <thebug> apt-cache search <keyword> would give you a list of packages related to that keyword
13:50:06 <Boegel> should I figure that out first ?
13:50:10 <thebug> you can -always- install things or remove things after the fact
13:50:16 <Boegel> off course :)
13:50:25 <monochrom> I think gentoo does nice dependency closure.
13:50:33 <thebug> me, I just do a minimal install to start off, then add what I want as I need it
13:50:42 <Boegel> but I'd like it to be a full working system once it's installed
13:50:53 <Boegel> with a much alternatives for my windows programs as possible
13:51:07 <Boegel> and how do you add that thebug ?
13:51:10 <Boegel> compile source ?
13:51:12 <Boegel> rpm ?
13:51:16 <thebug> nope, no source whatsoever
13:51:29 <musasabi> synaptic is a nice GUI tool for managing debian packages.
13:51:29 <thebug> apt-get install <packagename> and all dependencies will be installed for you
13:51:34 <thebug> ^ indeed
13:51:41 <musasabi> that is if you want GUI.
13:51:48 <thebug> and aptitude works quite well from a terminal
13:51:55 <musasabi> true
13:52:10 <thebug> don't let people's complains about dselect bother you, as you're not forced to use dselect if you don't want to
13:52:33 <Boegel> what's dselect ? :o)
13:52:49 <thebug> a package selection system
13:53:20 <Boegel> ow okay
13:53:34 <Boegel> and, I always have a problem when installing stuff on linux
13:53:36 <thebug> "dselect (8)  - console Debian package handling frontend"
13:53:42 <Boegel> it seems to install itself where it wants to
13:54:04 <thebug> I think dselect is installed by default ,so that if you tell the installer you -do- want to use it, it's available
13:55:00 <Boegel> which basic packages do i need when I install debian ?
13:55:36 <thebug> the installer will get all the basics for you
13:55:58 <thebug> things like libc, bash, and a bootloader and such, if that's what you mean
13:55:59 <Boegel> ow okay
13:56:13 <Boegel> we'll, the kernel is default off course :)
13:56:22 <Boegel> and what about gnome ?
13:56:27 <Boegel> or kde
13:56:34 <thebug> desktops and whatnot are -not- a default install
13:56:39 <Boegel> which is better you think ? I like fancy GUI's, that a plus :)
13:56:42 <Boegel> and speed
13:56:48 <thebug> it will near the end install ask you if you want a desktop, however
13:56:52 <Boegel> (which don't go well together :p)
13:57:02 <Boegel> I want a desktop yes
13:57:02 <thebug> well, if speed is your criteria, skip the GNOME/KDE thing altogether
13:57:39 <Boegel> well, I think winXP on my laptop (2 Ghz Pentium-M) is pretty fast
13:57:54 <Boegel> I don't mean enormously fast
13:58:11 <Boegel> not keeping all my CPU power for calculations and such
13:58:17 <Boegel> but I don't want no win98 either ;)
13:58:30 <thebug> uh ... well, when GNOME was still in beta (I don't mean like 2.8-BETA, I mean BETA BETA), I ran it on my 486/66 with little problem
13:58:34 <Boegel> which other desktops are there ?
13:58:43 <thebug> now it's a hog though, I don't like it on my 3GHz P4
13:58:47 <thebug> XFCE is fast and light
13:58:57 <Boegel> is it fancy ? :)
13:59:02 <thebug> I suppose
13:59:06 <Boegel> why has Gnome become so slow ?
13:59:10 <Boegel> what about KDE ?
13:59:28 <andersca> gnome does much much more these days
13:59:31 <andersca> that's why it's slower
13:59:32 <thebug> KDE has never been fast on anything, but that's just personal experience
13:59:52 <Boegel> so Gnome is faster than KDE ?
13:59:54 <vegai> it has gotten faster in the last year
14:00:01 <Marvin--> I find gnome fast enough, and I have an amd 1.4GHz
14:00:03 <vegai> reffie: glaa
14:00:22 * thebug ducks out of the desktop war ... I likes my fluxbox and you can -keep- your desktops to yourselves :)
14:00:25 <Boegel> which desktops do you guys have ?
14:00:32 <andersca> I heard that the gnome developers are real slackers though
14:00:37 <Boegel> slackers?
14:00:52 <andersca> especially that moron of a gnome-libs maintainer
14:00:54 <Marvin--> andersca: yeah, lazy bums, all of 'em ;)
14:01:14 <monochrom> I can explain all your experience with gnome and kde.
14:01:37 <Boegel> what about NTFS ? is that supported yet ?
14:01:40 <Boegel> fully I mean
14:01:41 <Boegel> r/w
14:01:54 <monochrom> 1. gnome was fast. now it's slow. so you find it becoming slow.
14:02:18 <monochrom> 2. kde was slow, and is still the same slow. since there is no degradation, you find it tolerable.
14:02:38 <Marvin--> Boegel: no
14:03:11 <monochrom> In highschools there are often an award for the student who "showed the greatest improvement".  It is very easy to hack that award.
14:03:45 <Boegel> will there be full NTFS support soon Marvin-- ?
14:03:58 <Boegel> and why isn't there any ? isn't that an open standard ?
14:04:55 <andersca> on the contrary
14:04:57 <andersca> it's closed
14:05:06 <andersca> and it wouldn't surprise me if there are patents issues with it
14:05:07 <Marvin--> can't get much more closed
14:06:20 <Boegel> why ? is it a Microsoft thing ?
14:06:32 <monochrom> It is both Microsoft and IBM.
14:06:32 <Boegel> is it that which is keeping linux from breaking through ?
14:06:45 <Boegel> because i feel linux is stepping up...
14:07:01 <reffie> vegai ?
14:07:55 <Boegel> what about ubuntu ?
14:08:03 <reffie> freebsd.
14:08:06 <vegai> reffie: sorry, miscompletion
14:08:20 <vegai> dragonfly?
14:08:22 <reffie> :)
14:08:26 <reffie> freebsd.
14:08:33 <vegai> hmm... netbsd;
14:08:50 * vegai whispers 'hurd'
14:08:57 <Marvin--> vegai: hahaha
14:09:02 <Marvin--> you're funny, you :)
14:09:31 <vegai> you haven't heard anything yet
14:09:52 * vegai whispers 'GNU 1.0 will be released next month.'
14:09:59 * Marvin-- gasps
14:10:20 <vegai> it's true! You all read it from the internet
14:10:53 * monochrom has ph33r!
14:10:58 <vegai> (for some definitions of "true")
14:11:13 <vegai> (and "it")
14:11:19 <monochrom> The intuitionistic definition?
14:11:53 <monochrom> Or the paraconsistent definition? :D
14:12:20 <lmbdwr> what is the paraconsistent def ? ;)
14:12:56 <monochrom> Paraconsistent logics permit inconsistencies.
14:13:23 <monochrom> Inference rules that say "from contradiction derive stuff" are deleted.
14:14:42 <monochrom> So the definition of "true" may mean "some part of the system believe it's true, but other parts may disagree" :D
14:14:54 <Boegel> some friend of mine says I should try Fedora Core 3
14:15:11 <monochrom> Yes you should try Fedora Core 3.
14:15:29 <monochrom> And then tell me whether there are problems! And be my guinea pig!
14:15:35 <monochrom> That's what friends are for!
14:17:36 <Boegel> you expect there to be many problems monochrom?
14:17:57 <monochrom> No.
14:18:23 <Boegel> if I install it with a dual boot on my current machine, and I choose the remove it
14:18:32 <monochrom> But it never hurts to have some guinea pigs for distros, movies, ...
14:18:32 <Boegel> I can always fix the dual boot thingie right ?
14:18:41 <monochrom> Yes.
14:18:53 <Boegel> fixmbr or something in the xp recovery console,
14:18:54 <Boegel> ?
14:19:26 <monochrom> I set myself up so that I never have to get to that point.
14:20:41 <monochrom> I install lilo/grub not in the mbr.  I install it at some primary/extended partition.
14:21:37 <uffe> hello!
14:21:42 <monochrom> I go to fdisk and unmark the windows partition as the "active/boot" partition, and mark the lilo/grub one instead.
14:21:50 <uffe> are you guys like helpful? :)
14:22:16 <Marvin--> depends
14:22:17 <monochrom> Then the standard microsoft mbr will get me to lilo/grub!
14:22:27 <Marvin--> this ain't a homework service
14:22:40 <uffe> marvin, no! nothing like that
14:23:31 <uffe> it's just that i'm new to haskell and...
14:23:45 <Marvin--> then we're *really* helpful :)
14:23:51 <uffe> :)
14:23:53 <andersca> yes
14:23:55 <andersca> very very helpful
14:24:42 <uffe> are you guys funny to? :)
14:25:12 <Marvin--> no :(
14:25:26 <uffe> you're depressed, right?
14:25:41 <Boegel> that not real linux monochrom :p
14:26:08 <andersca> uffe: we have very dry humor
14:26:09 <Boegel> we're always very very serious uffe
14:26:21 <Boegel> now, state your name for the record
14:26:24 <andersca> like
14:26:39 <shapr> oh, did I miss the debian tips discussion?
14:26:42 <uffe> andersca, btw, are you swedish?
14:26:47 <uffe> eller? :)
14:26:51 <andersca> "how many haskell programmers does it take to change a lightbulb?"
14:26:56 <andersca> "you don't know until one breaks"
14:27:06 <uffe> i don't get it! :)
14:27:48 <Marvin--> uffe: vi har en #haskell.se också
14:28:06 <uffe> cool
14:29:24 <Boegel> Marvin--, why do you chase him away now ? we were having fun ! :p
14:29:41 <Marvin--> heh
14:31:43 <shapr> hiya uffe 
14:31:43 <shapr> uffe: are you a sausage?
14:32:08 <Boegel> shapr ? :)
14:32:15 <Cale> viv: hi there
14:33:02 <uffe> shapr, well, that depends on who's asking!
14:36:13 <shapr> Boegel: eh?
14:36:13 <shapr> uffe: http://www.scannedinavian.org/~shae/kanin.jpg
14:36:18 * shapr lags horribly
14:36:20 <shapr> *** Ping time to shapr is 00:06.23
14:36:28 <shapr> *** Ping time to shapr is 00:07.51
14:37:07 <Boegel> [23:31] <shapr> uffe: are you a sausage?
14:37:07 <Boegel> [23:31] <Boegel> shapr ? :)
14:37:28 <Boegel> what the hell is that with the bunny shapr ?
14:38:29 <shapr> Boegel: it's a kanin d00d
14:38:36 <shapr> and he has a pancake on his head.
14:39:06 <psi> if i want to write an instance declaration to make a certain type a member of Ord, do I really need to write down all the different combinations?
14:39:13 <shapr> badger badger badger badger
14:39:17 <shapr> MUSHROOM
14:39:25 <psi> it doesn't seem to realise that if a < b, then b > a
14:39:27 <andersca> MUSHROOM
14:39:31 <andersca> shapr: ring ring ring ring
14:39:34 <andersca> BANANA PHONE
14:39:36 <shapr> bananaphone!
14:40:11 <shapr> andersca: so I taught badger badger to several members of the unicycle groupies
14:40:33 <andersca> cool
14:41:04 <shapr> including the son of a friend of mine
14:41:04 <shapr> I think all the other adults were ready to strangle me after we'd been singing badger badger for hours on end.
14:41:37 <Marvin--> psi: hm. should work
14:42:36 <Marvin--> psi: no, actually, you need to define either compare or <=
14:49:03 <psi> i'm not following
14:50:23 <Marvin--> psi: the definition of the Ord class says "Minimal complete definition: (<=) or compare"
14:50:48 <Marvin--> the default implementations of the class members are in terms of compare, and the default implementation of compare is in terms of == and <=
14:50:56 <Marvin--> so you need to implement one of them, and then the rest will follow
14:52:30 <Boegel> does anyone here has experience with Fedora ?
14:52:38 <andersca> Boegel: yes
14:52:39 <Marvin--> well, I'm off to bed
14:53:14 <psi> ok. thanks... i didn't get that but i gives me something to go on
14:54:18 <Boegel> do you work on it now andersca ?
14:54:25 <andersca> Boegel: I work on gnome
15:00:39 <psi> i got it now.
15:01:02 <shapr> psi: yay!
15:02:15 <psi> :)
15:04:41 <psi> i think i did, at least
15:05:54 <shapr> @info Eq
15:05:55 <lambdabot> -- Eq is a class
15:05:55 <lambdabot> class Eq a where {
15:05:55 <lambdabot>     (/=) :: a -> a -> Bool {- has default method -};
15:05:55 <lambdabot>     (==) :: a -> a -> Bool {- has default method -};
15:05:55 <lambdabot>     }
15:06:16 <shapr> psi: you see that Eq has both /= and == but only needs one of them implemented, right?
15:06:39 <shapr> the definition of the Eq class has default implementations of both /= and == in terms of each other.
15:06:54 <shapr> if you don't give an implementation of one, the default is used
15:07:49 <psi> yes, i can see that
15:07:59 <shapr> @info Ord
15:08:00 <lambdabot> -- Ord is a class
15:08:00 <lambdabot> class (Eq a) => Ord a where {
15:08:00 <lambdabot>     compare :: a -> a -> Ordering {- has default method -};
15:08:00 <lambdabot>     (<=) :: a -> a -> Bool {- has default method -};
15:08:00 <lambdabot>     (>) :: a -> a -> Bool {- has default method -};
15:08:01 <lambdabot>     (>=) :: a -> a -> Bool {- has default method -};
15:08:03 <lambdabot>     (<) :: a -> a -> Bool {- has default method -};
15:08:05 <lambdabot>     min :: a -> a -> a {- has default method -};
15:08:07 <lambdabot>     max :: a -> a -> a {- has default method -};
15:08:17 <Boegel> andersca, which version of Fedora are you working on ?
15:08:41 <shapr> Ord is pretty much the same, once you've defined one of those guys for your type, the rest of them can use the default implementation and everything should just work.
15:09:36 <psi> ok, let me check one thing
15:11:06 <psi> let's say I have this simple example: data Foo = One | Two | Three
15:11:13 <psi> and I want to define ordering on that
15:11:46 <psi> i could define the result of say '<' on each of the individual values, and the rest would work?
15:11:58 <shapr> I think so
15:12:11 <shapr> I think compare is what is usually implemented
15:12:21 <psi> it didn't quite work
15:12:25 <psi> <= worked though
15:13:14 <psi> hm, i've never seen compare before
15:13:30 <psi> i can see what it does, though
15:15:20 <Boegel> andersca, which version of Fedora are you working on ?
15:15:44 <psi> when i defined < for all values i got stack overflow or something when i did One > Three
15:16:14 <shapr> I think all the other are defined in terms or compare
15:16:53 <psi> was there some infinite recursion going on?
15:16:56 <andersca> Boegel: I don't work on fedora, I work on gnome
15:17:41 <Boegel> but fedora is a distro, isn't it ? :|
15:17:47 <Boegel> or am I getting it wrong ?
15:21:04 <uffe> byyyye
15:21:06 <uffe> good night!
15:21:11 <shapr> bye!
15:21:59 <Boegel> andersca, fedora is a distro, right ?
15:22:38 <andersca> yes
15:22:58 <shapr> I thought fedora was like redhat/unstable ?
15:23:32 <Boegel> fedora is not stable yet, but that doesn't mean it's full of bugs
15:25:15 <andersca> shapr: it's more like old red hat linux used to be, except that the backwards-compatibility requirements aren't as strong
15:26:23 <shapr> ok
15:26:33 <Boegel> andersca, which version of fedora are you using ?
15:27:19 <andersca> Boegel: I use fc-devel 
15:28:17 <Boegel> what's that ?
15:28:29 <Boegel> a friend told me I should try Fedora Core 3 Test 2
15:28:52 <andersca> sure, go ahead
15:29:08 <Boegel> what is fc-devel ?
15:29:24 <andersca> Boegel: unstable version of fc, updated about every night
15:29:55 <Boegel> and is FC3 Test 2 a bit stable ?
15:30:01 <Boegel> stable enough to use it every day ?
15:30:03 <andersca> I guess
15:30:08 <andersca> ok, sleep time
15:30:09 <andersca> night
15:31:03 <Boegel> oh
15:31:06 <Boegel> you're gone
15:31:07 <Boegel> well
15:31:09 <Boegel> goodnight then
15:36:54 <Cale> Hi viv -- use "/query Cale" to talk to me, if you're there.
15:48:15 <Boegel> welcome mitchkov :o)
15:48:29 <Boegel> everybody, say hey to mitchkov
15:48:41 <Boegel> he's the other student who does his thesis with prof. Boute :o)
15:49:27 <Boegel> earthy, you there ?
15:50:36 <Boegel> @index sort
15:50:36 <lambdabot> Data.List,List
15:50:43 <mitchkov> \whois earthy
15:50:45 <Boegel> @type Data.List.sort
15:50:47 <lambdabot> Data.List.sort :: forall a. (Ord a) => [a] -> [a]
15:51:40 <Boegel> @listcommands
15:51:41 <lambdabot> I react to the following commands: ["all-dicts","arr","cmafihe","define
15:51:41 <lambdabot> ,"definitions","del-definition","det","devils","dict","dict-help","dummy
15:51:41 <lambdabot> ,"dump","dynamic-load","dynamic-reload","dynamic-unload","easton","echo
15:51:41 <lambdabot> ,"elements","eurohaskell","eval","foldoc","fortune","gazetteer","get-definition
15:51:41 <lambdabot> ,"goodbye","hello","hitchcock","index","info","jargon","join","karma","karma
15:51:41 <lambdabot> ","karma-","learn","leave","listchans","listcommands","listmodules","lojban
15:51:43 <lambdabot> ,"moo","more","msg","musasabi","part","prelude","quit","reconnect","resume
15:51:45 <lambdabot> ,"seen","set-fuel","shapr","state","stepcut","topic-cons","topic-init",
15:51:45 <psi> that reminds me. i tried to import List a while ago, and it gave me a syntax error on line 198 (i think)
15:51:48 <lambdabot> topic-snoc","topic-tail","topic-tell","type","vera","web1913","wiki","wn
15:51:51 <psi> that's not good, is it? :)
15:52:01 <Boegel> a syntax error in List ? :)
15:52:07 <psi> yeah
15:52:12 <Boegel> @hitchcock
15:52:28 <Boegel> eh ?
15:52:32 <Boegel> @shapr
15:52:32 <lambdabot> needs sleep
15:52:36 <Boegel> @hitchcock
16:04:01 <psi> can someone take a look at an error i'm recieving regarding some instance declarations for Ord on a type?
16:04:09 <psi> http://rafb.net/paste/results/DlYGVv28.html
16:04:48 <psi> i don't see why it doesn't figure out Three <= Three
16:05:12 <Cale> you didn't say that compare Three Three = EQ
16:05:36 <psi> but i did that in the other instance
16:05:42 <Cale> <= uses the Ord definition, not the Eq definition
16:05:52 <Cale> and the Ord definition is incomplete
16:05:58 <psi> ah, got it
16:06:27 <psi> so Eq is not really needed for Ord?
16:07:53 <Cale> well, anything which is in Ord ought to be in Eq as well
16:08:04 <Cale> btw, you can just say "deriving (Eq, Ord)" there after the data declaration, and get what you're looking for
16:09:06 <Cale> btw, ghc/ghci's error messages are much more instructive in this regard.
16:09:11 <psi> yes, i know. i just tried to make a really simple example. can i also do that for more complex types? (with non-nullary constructors)
16:09:37 <Cale> yeah, so long as the arguments to the constructors are in Ord as well
16:10:33 <psi> i see. great. i need to do this though for an assignment :)
16:10:41 <Cale> :)
16:42:37 <dons> any mac users? do you guys have getpwuid_r and getpwnam_r(3)
16:42:51 <dons> or just the non-_r versions?
16:44:18 <Cale> I don't see the _r versions in the manpages on our Xserve.
16:44:22 <Igloo> My gf has a Mac, but no getpwuid manpage. Or gcc. Sheesh, I think I should get a new gf  :-)
16:45:18 <Cale>  getpwuid and getpwnam have manpages though
16:45:26 <dons> My suspicion is that *BSD doesn't have the _r versions. This is the case for Open and FreeBSD
16:46:06 <dons> which, if true, means that you don't have System.Posix.User:getUserEntryFor{Name,ID}
16:47:11 <Igloo> My manpage just says "SVID 3, BSD 4.3, POSIX 1003.1‐2003" without specifying _r are some sort of extension
16:48:57 <dons> can you try: System.Posix.User> getUserEntryForID 0 >>= \u -> print $ userName u
16:49:55 <Igloo> http://www.opengroup.org/onlinepubs/009695399/functions/getpwuid_r.html agrees POSIX systems should have it, and also points out that getpwuid need not be threadsafe
16:50:30 <dons> yep. it allocates on the library side, and may use static space.
16:50:46 <dons> man page says the data may be overwritten by multiple calls
16:51:12 <Igloo> Hmm, "may" implies "may not", which sounds like a space leak waiting to happen
16:52:42 <dons> well, I'd like to have some functionality -- esp. since no bsds seem to have *_r
16:52:48 <dons> but I'll query simon
16:53:14 <dons> what you reckon , Igloo?
16:54:01 <Igloo> It should be fairly easy to do locking on OSes that use non-r, shouldn't it?
16:54:28 <dons> good idea. shouldn't be too hard
18:09:04 <desrt> haskell :: l33t
18:09:29 <Cale> :)
18:12:56 <dons> Not in scope: type variable `l33t'
18:45:12 --- topic: '["Learning Haskell - http://www.haskell.org/learning.html","We put the Funk in Funktion","See logs @ http://tunes.org/~nef/logs/haskell/","related channels #haskell.se #haskelldb #darcs","http://www.haskell.org/cabal/","Haskell is the language of choice for discriminating hackers! - http://www.cis.upenn.edu/proj/plclub/contest/results.php#first"]'
18:45:12 --- topic: set by shapr on [Tue Sep 21 09:26:31 2004]
18:55:35 <desrt> if i'm in the channel then l33t is definitely in scope
18:55:43 <desrt> i import it with me
18:57:52 <Cale> heh
19:00:43 <desrt> dr. kahl was in the oplab today
19:00:52 <desrt> <wolfgang> ryan, aren't you going to tell him?
19:00:55 <desrt> <desrt> tell him what?
19:01:02 <desrt> * wolfgang makes hand motion
19:01:10 <Cale> heheh
19:01:11 <desrt> <desrt> oh ya.  i'm now a contributor to ghc
19:01:17 <desrt> <dr. kahl> it's about time
19:01:53 <Cale> what did you contribute?
19:02:14 <desrt> i added support for elf/powerpc to the runtime system
19:02:28 <desrt> ghci now runs on macs under linux
19:03:13 <Cale> ah
19:03:17 <Cale> good :)
19:05:57 <desrt> ya.  i learned how dynamic linking relocations work, too :)
19:08:25 <desrt> http://cvs.haskell.org/cgi-bin/cvsweb.cgi/fptools/ghc/rts/Linker.c.diff?r1=1.128.2.21;r2=1.128.2.22;f=h
19:08:45 <desrt> and smaller changes elsewhere
19:11:32 <Igloo> Oh, that was you? Neat
19:13:15 <desrt> my school is haskell-crazy
19:13:33 <desrt> oh.  who maintains the webpage, btw?
19:14:13 <Igloo> The haskell.org one?
19:14:17 <desrt> ya
19:14:37 <Igloo> "The site is maintained by John Peterson and Olaf Chitil."
19:17:09 <desrt> anyone on irc? :)
19:18:19 <Igloo> Not the main pages I don't think, why?
19:18:40 <desrt> i'm trying to get an item removed from the jobs listing
19:18:59 <Igloo> Oh, actually, John Peterson might IRC. Might be juhp actually.
19:19:41 <desrt> email will probably end up being easier :)
19:47:17 <juhp> Igloo: good guess, but juhp is Jens Petersen :)
19:47:43 <juhp> yeah, John is usually pretty responsive to email :)
19:48:23 <Igloo> Oh, sorry. I /think/ John's been here before and added his RPMs to the topic, though - or is that you?
19:48:37 * Igloo is hopeless with similarly named people. And Debian has far too many of them  :-)
19:48:38 <juhp> probably me :)
19:49:31 <Igloo> Oh well. I think I should go to bed  :-)
19:49:32 <juhp> I'm originally from Denmark if that help to remember :)
19:49:54 <juhp> helps even
19:50:09 <Igloo> I'll probably remember you now as the American one has an English name
19:50:35 <G|u][> guys if you have a list [0.25,0.75]
19:50:44 <G|u][> how do you convert it to Rational?
19:50:47 <Igloo> Colin Watson vs Colin Walters and Daniel Stone vs Daniel Silverstone will elude me until I get to know one of each in real life, I think, though
19:51:03 <G|u][> map toRational [0.25,0.75]?
19:51:13 <Igloo> Yup
19:51:38 <G|u][> tnx
19:51:49 * Igloo sleeps. g'night
19:54:40 <heatsink> I've been wondering about this decodeFloat thing
19:54:56 <heatsink> in ghci, if I do decodeFloat $ 1.0/0.0
19:55:00 <heatsink> I get (4503599627370496,972)
19:55:05 <heatsink> in hugs, if I do the same thing
19:55:16 <heatsink> I get (./,),(-*,(,-53)
19:55:19 <heatsink> which baffles me
19:56:13 <G|u][> guys I get an erro "Instance of Fractional Integer required" what does it means?
19:57:42 <heatsink> you get the error from map toRational [0.25,0.75]?
19:58:56 <G|u][> well not that I got a function and I try to map to rational and I get that error
19:59:11 <Cale> heatsink: haha
19:59:18 <Cale> how the heck?
19:59:20 <heatsink> please show some code?
20:00:10 <Cale> (./,),(-*,(,-53) -- that's awesome, the parens aren't even matched.
20:00:17 <heatsink> yeah
20:00:28 <heatsink> I thought maybe it meant something
20:00:43 * heatsink gasps
20:00:46 <heatsink> it's a secret password!
20:00:51 <heatsink> <_<
20:00:53 <heatsink> >_<
20:03:10 <Cale> even better, try  fst (decodeFloat $ 1/0)
20:03:20 <Cale> you can actually take that junk out of the tuple
20:03:41 <heatsink> whoah
20:06:08 <heatsink> you can also add and subtract numbers from it
20:06:16 <heatsink> 1 + fst (decodeFloat $ 1/0)
20:08:10 <heatsink> it appears to be some decimal coding
20:09:12 <Cale> (fst (decodeFloat $ 1/0) `div` 9999) seems to be the lower bound on the junk
20:09:43 <Cale> if you subtract 1 from it, you get -214770, and if you add 1, you get ./,)*(
20:10:25 <dons> there was a thread a few months back on glasgow-haskell-users about the mysteries of floating point
20:10:28 <dons> Prelude> 1.1 + 2.2
20:10:31 <dons> 3.3000000000000003
20:10:58 <Cale> this isn't about the mysteries of floating point per-se
20:11:06 <Cale> Prelude> fst (decodeFloat $ 1/0)
20:11:06 <Cale> ./,),(-*,(
20:11:14 <Cale> (in hugs)
20:11:24 <dons> that ain't so good at all :(
20:11:32 <dons> hugs-bugs
20:11:52 <heatsink> if you add 8 to the ascii value of each character, you get 6741405240
20:12:02 <Cale>  (fst (decodeFloat $ 1/0) `div` 9999)*(-1) appears to be the "upper bound" -- adding 1 gives 4770 and subtracting 1 gives -,)*(
20:12:21 <Cale> dons: the best part is that the garbage is integer-typed :)
20:12:28 <dons> hehe
20:12:31 <heatsink> yea
20:12:39 <Cale> actually...
20:12:41 <dons> at least the type system still works
20:12:43 <Cale> Prelude> :t (fst (decodeFloat $ 1/0))
20:12:43 <Cale> fst (decodeFloat $ 1 / 0) :: RealFloat a => Integer
20:12:50 <Cale> nice
20:12:55 <heatsink> oh... I was trying to figure out what number 9999)*(-1 was
20:12:59 <heatsink> :)
20:13:48 <Cale> is RealFloat a => Integer even a valid type?
20:14:11 <Cale> it's wrong, anyway
20:15:07 <dons> ghci says:
20:15:07 <dons> Prelude> :t fst (decodeFloat $ 1/0)
20:15:07 <dons> fst (decodeFloat $ 1/0) :: Integer
20:15:12 <Cale> yeah
20:15:22 <dons> hmm..
20:15:26 <heatsink> :t fst (decodeFloat $ (1/0 :: Double))
20:15:34 <heatsink> fst (decodeFloat $ 1 / 0) :: Integer
20:16:06 <Cale> okay, and the bug persists -- so there are two bugs
20:16:12 <heatsink> GHCi doesn't know exactly what type 1/0 is, only that it is a RealFloat
20:16:30 <heatsink> if you give it the type of 1/0, it is more specific about the type
20:16:50 <dons> hbi says:
20:16:51 <dons> > fst ( decodeFloat ( 1 / 0) ) ;
20:16:51 <dons> 4503599627370496
20:16:58 <heatsink> what is hbi?
20:17:06 <heatsink> s/GHCi/hugs/
20:17:08 <dons> haskell-B compiler, check haskell.org
20:17:13 <Cale> 4503599627370496 from ghci as well
20:17:28 <dons> I think lennart wrote decodeFloat for both
20:18:24 <Cale> I really like how you not only get gibberish, but you get gibberish on which you can perform arithmetic operations :)
20:18:33 <dons> that rules
20:18:35 <dons> iohcc
20:19:10 <Cale> also, it's preserved by show
20:19:19 <heatsink> it's base-10 gibberish, did you notice?
20:19:38 <dons> hi gives us:
20:19:39 <dons> 4503599627370496
20:19:48 <dons> so 3 / 4 haskell compilers agree.
20:20:00 <dons> which is reassuring
20:20:13 <Cale> fst (decodeFloat $ 1 / 0) - 10 -- bottom
20:20:27 <dons> even plugs says: 4503599627370496
20:20:43 <dons> (which it should, since it is on top of ghc)
20:20:43 <Cale> it actually freezes
20:20:53 <heatsink> but you can interrupt it
20:20:56 <Cale> yeah
20:21:24 <dons> someone want to send a hugs-bug?
20:21:28 <heatsink> On another note, I've been trying to figure out if there's a way to express (+Infinity :: Integer)
20:21:36 <Cale> no
20:21:38 <heatsink> or (+Infinity :: Float)
20:21:49 <Cale> +Infinity :: Float is easy
20:22:00 <Cale> 1/0 gives that
20:22:09 <heatsink> 1/0 should give NaN
20:22:10 <Cale> and -1/0 gives -Infinity
20:22:20 <Cale> yeah, but what are you going to do?
20:22:58 <Cale> It's likely that if a numerical computation requests 1/0, then it's just that it diverged.
20:23:42 <Cale> Floating point numbers do not form a ring or a field or anything nice.
20:24:08 <heatsink> What do you call an instance of an instance of a class?
20:24:17 <heatsink> a value?
20:25:23 <Cale> Yeah
20:25:29 <heatsink> I have a class, and values of this class should appear in my data structure at most a certain number of times
20:25:51 <heatsink> for some instances of the class, the number is 1, for some it is a predetermined number, for some it is +Infinity
20:26:21 <heatsink> and once I build the data structure, I go through it and count how many times each value appears to verify that the constraint is met
20:27:04 <heatsink> I suppose I'll have to define my own algebraic datatype that includes +Infinity, -Infinity, and NaN
20:28:42 <dons> I like how hbi still internally links to lmlc (Lazy ML Compiler) == the old days
21:46:31 <desrt> is there a fraction type?
21:46:48 <Pseudonym> Rational?
21:46:55 <desrt> sounds about right
21:47:25 <desrt> how do i compose a number?
21:48:11 <dv_> 2 % 3
21:48:20 <Cale> (make sure to import Ratio)
21:48:39 <desrt> rad.
21:48:56 <desrt> this is exactly what i want
21:49:16 <desrt> now just incase i'm reimplimenting something, are there functions to deal with rational matricies?
21:51:07 <desrt> i'll assume no
21:51:10 <Cale> I have some you could use
21:51:20 <Cale> but not in the standard library
21:51:48 <desrt> i need solvesystem Rational b => [[b]] -> [b] -> [b]
21:51:52 <desrt> well... Num b, i guess
21:52:17 <Cale> I have some gauss-jordan elimination code
21:52:35 <desrt> that part is already done
21:52:44 <desrt> i just need it for forward-substitution
21:53:09 <Cale> This is gauss-jordan, so it cancels the junk above the leading 1's.
21:53:18 <desrt> ya. i definitely do not want that
21:53:40 <Cale> It's split into two steps
21:54:14 <desrt> is there a way to get element X from a list?
21:54:17 <Cale> so it does the gauss part, and then the jordan part :)
21:54:19 <Cale> yeah
21:54:21 <desrt> other than last (take X list)
21:54:23 <Cale> xs !! n
21:54:26 <desrt> mm.
21:55:15 <Cale> I wonder how many other ghc contributors aren't actually familiar with the language. :) There should be a club.
21:55:25 <desrt> heh.
21:55:34 <desrt> the runtime system is written in C :)
22:00:15 <Pseudonym> Speaking of which, I found an odd limtation in the Boost implementation of BLAS (in C++).
22:00:30 <Pseudonym> It can't handle 65536 * 65536 matrices, even if they're sparse and fit in memory.
22:01:31 <Pseudonym> Oddly enough, that's the size of the first problem I threw at it.
22:08:59 <heatsink> Is there a way to determine object identity?
22:09:17 <heatsink> For example, if I have
22:09:20 <heatsink> ones = 1:ones
22:09:22 <Cale> heatsink: no
22:09:43 <heatsink> hmm...
22:10:14 <Cale> You can only compare values for equality.
22:10:35 <Cale> "Object identity" is somewhat meaningless in the context of Haskell.
22:12:10 <heatsink> It can still be useful
22:12:50 <heatsink> data ConsCell = Cons ConsCell ConsCell
22:13:05 <heatsink> Or...
22:13:13 <heatsink> data ConsCell = Nil | Cons ConsCell ConsCell
22:13:58 <heatsink> If I have a possibly cyclic set of these, and I want to traverse it, it would be much easier if I could determine identity
22:14:12 <heatsink> then I could avoid getting into infinite cycles
22:14:27 <Cale> If you want to tag things with unique ID's, I recommend tuples :)
22:14:54 <heatsink> But how do I get unique IDs?
22:14:58 <Cale> zip [1..] xs
22:15:05 <heatsink>  without restructuring everything in monad form?
22:15:57 <Cale> you either carry a value in a parameter, or you form a list and zip it with [0..] or [1..] or something.
22:16:07 <heatsink> a list is a monad
22:16:16 <Cale> but you're not using it monadically there
22:16:49 <heatsink> I have to collect everything into a list, though -- so I'm sequencing everything
22:17:25 <Cale> You're sequencing your data, not your computation.
22:18:08 <Cale> which is the desired goal, anyway, if you're applying unique IDs.
22:19:38 <Cale> but probably if you're having trouble because you need to be able to detect that your data structure is infinite, you have either selected the wrong data structure, or have selected the wrong algorithm
22:21:42 <Cale> For example, if you're storing a graph, it's much much nicer just to store the vertices and indexes into the vertex set for arcs, or a function that tells you when two vertices are adjacent, than it is to try to twist a rose tree into a graph, and then have trouble telling when to stop applying an algorithm to it. :)
22:23:12 <Cale> Use infinite structures when you think of them as infinite structures.
22:23:59 <desrt> mmult a b = map (\x -> map (sum . zipWith (*) x) b) a
22:24:10 <desrt> is it possible to kill this lambda expression?
22:26:50 <heatsink> I can't figure out how to apply it to my situation...
22:26:58 <heatsink> I'm making a directed graph
22:27:44 <heatsink> The "edges" in the graph can have multiple endpoints, so they're really more like nodes
22:27:59 <heatsink> (so I have two kinds of nodes)
22:28:24 <desrt> what typeclass is Rational in? (how do i find this out for myself?)
22:28:38 <heatsink> desrt: in ghci, :t Rational
22:28:49 <Cale> desrt: http://www.haskell.org/onlinereport/
22:29:02 <Cale> chapter 12
22:29:34 <Cale> right off the bat, there's a list of instances
22:29:56 <crackhead> quit
22:29:58 <crackhead> clear
22:30:02 <Cale> heatsink: are the edges symmetric wrt connection?
22:30:29 <heatsink> Cale: what do you mean by symmetric?
22:30:40 <Cale> Or are there "in" and "out" connections on the multiedges?
22:30:48 <heatsink> They are "in" and "out"
22:31:08 <Cale> so you might have multiple "in"s and multiple "out"s
22:31:12 <heatsink> right
22:31:41 <heatsink> The number of ins and outs is not known until the graph is completely built
22:31:41 <Cale> you might just have a second vertex type in your graph
22:31:50 <heatsink> And then I want to find out how many I have
22:32:06 <Cale> and handle the edges as usual
22:32:23 <Cale> But there are lots of ways you could handle that
22:32:24 <heatsink> Actually, I am doing that
22:33:17 <heatsink> I'm calling the multiedge nodes "channels"
22:34:02 <heatsink> So currently what i'm doing is representing the edge as data Edge = Edge Channel
22:34:03 <Cale> so provide a function as part of your graph data structure that takes a vertex and gives the vertices on outgoing arcs, and another which gives the vertices on incoming arcs.
22:34:39 <Cale> Well, really I'm not sure how you're going to use the data structure, so I don't know what primitives are best
22:34:44 <Cale> but that would work
22:34:55 <Cale> and then you could build things on top of that
22:35:11 <heatsink> The thing is that when I'm done building this, I want to print the entire thing out
22:35:22 <heatsink> I know enough to build it
22:35:24 <Cale> right, shouldn't be a problem
22:35:54 <Cale> You just enumerate the vertices, and for each vertex, its edges.
22:35:55 <heatsink> but if I have node1 -> channel1 -> node2 -> channel2 -> node1 ....
22:36:02 <desrt> is there a way to alter Show for Fractional?
22:36:08 <heatsink> and node1 looks exactly like node2
22:36:12 <Cale> You do ordinary depth first search
22:36:17 <heatsink> and channel1 looks exactly like channel2
22:36:39 <Cale> heatsink: there's your mistake
22:37:00 <Cale> when you create the structure, put the vertices into arrays, so that they're nicely indexed
22:37:16 <Cale> or tag them somehow
22:37:51 <Cale> the channels might not even exist as physical data, but might be informative functions on the vertices
22:38:01 <Cale> (depending on what you're going for)
22:38:19 <Cale> (functions are data anyway)
22:38:58 <Cale> desrt: you could write your own, but there's no way to change the default one apart from rewriting the standard library
22:39:34 <Cale> desrt: Hint: there's nothing in Ratio that's primitive or special in any way
22:40:19 <Cale> just writing a "myShow" usually is a good solution though
22:41:10 <heatsink> If I put the vertices into arrays, then I still can't do anything like Vertex -> (Ix a) => a... only the other way around
22:42:50 <heatsink> so I still can't figure out what node my nth node points to... the index needs to be stored in the vertex...
22:43:17 <Cale> Well, the other idea is that the vertices are the indices :) What you're storing at those indices in the array is up to you -- probably data associated with each vertex.
22:44:02 <Cale> i.e. newtype Vertex = Vertex Int deriving (Ix, Enum, Bounded)
22:44:09 <heatsink> I guess what I haven't mentioned is that I'd like to build the graph in one huge let block
22:44:26 <Cale> that's what I tend to do.
22:44:56 <heatsink> and readability/writability of the source is important, so I'm trying to make it so that I don't need to change something in two places when I need to make a change 
22:45:10 <Cale> It's a bit tricky to get everything straight sometimes, but just work out what needs to be stored and how to compute it, and it should come together quite nicely.
22:45:33 <Cale> Class abstraction is also very very useful here.
22:46:18 * heatsink thinks a bit
22:50:13 <heatsink> okay, I think I've got something
22:50:52 <heatsink> after I build my graph, I pass a list of values to my reification function
22:50:56 <Cale> I'm off to sleep
22:51:06 <heatsink> ah, okay then
22:51:12 <heatsink> thank you for the help
22:51:15 <Cale> no problem
22:51:29 <heatsink> I think my solution is kind of cool, though
22:51:35 <heatsink> involves some knot tying I think
22:51:40 <Cale> tell me about it tomorrow :)
22:51:46 <heatsink> 'kay.
22:51:48 <heatsink> :)
22:52:09 <heatsink> goodnight Cale.
22:52:23 <Cale> night
22:57:25 <heatsink> underscore is lowercase?
22:58:07 <heatsink> I guess so
